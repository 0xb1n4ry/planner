/* tpf-persona-store.c generated by valac 0.40.11, the Vala compiler
 * generated from tpf-persona-store.vala, do not modify */

/*
 * Copyright (C) 2010 Collabora Ltd.
 * Copyright (C) 2013 Philip Withnall
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Travis Reitter <travis.reitter@collabora.co.uk>
 *       Philip Withnall <philip.withnall@collabora.co.uk>
 *       Xavier Claessens <xavier.claessens@collabora.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <folks/folks.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <telepathy-glib/telepathy-glib.h>
#include <folks/small-set.h>
#include <gio/gio.h>
#include <tp-zeitgeist-dummy.h>
#include <folks/small-set-internal.h>
#include <folks-internal.h>
#include <glib/gi18n-lib.h>
#include <tp-lowlevel.h>


#define TPF_TYPE_PERSONA_STORE (tpf_persona_store_get_type ())
#define TPF_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TPF_TYPE_PERSONA_STORE, TpfPersonaStore))
#define TPF_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TPF_TYPE_PERSONA_STORE, TpfPersonaStoreClass))
#define TPF_IS_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TPF_TYPE_PERSONA_STORE))
#define TPF_IS_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TPF_TYPE_PERSONA_STORE))
#define TPF_PERSONA_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TPF_TYPE_PERSONA_STORE, TpfPersonaStoreClass))

typedef struct _TpfPersonaStore TpfPersonaStore;
typedef struct _TpfPersonaStoreClass TpfPersonaStoreClass;
typedef struct _TpfPersonaStorePrivate TpfPersonaStorePrivate;

#define TPF_TYPE_PERSONA (tpf_persona_get_type ())
#define TPF_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TPF_TYPE_PERSONA, TpfPersona))
#define TPF_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TPF_TYPE_PERSONA, TpfPersonaClass))
#define TPF_IS_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TPF_TYPE_PERSONA))
#define TPF_IS_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TPF_TYPE_PERSONA))
#define TPF_PERSONA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TPF_TYPE_PERSONA, TpfPersonaClass))

typedef struct _TpfPersona TpfPersona;
typedef struct _TpfPersonaClass TpfPersonaClass;

#define TYPE_LOGGER (logger_get_type ())
#define LOGGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LOGGER, Logger))
#define LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_LOGGER, LoggerClass))
#define IS_LOGGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LOGGER))
#define IS_LOGGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_LOGGER))
#define LOGGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LOGGER, LoggerClass))

typedef struct _Logger Logger;
typedef struct _LoggerClass LoggerClass;

#define TPF_TYPE_PERSONA_STORE_CACHE (tpf_persona_store_cache_get_type ())
#define TPF_PERSONA_STORE_CACHE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TPF_TYPE_PERSONA_STORE_CACHE, TpfPersonaStoreCache))
#define TPF_PERSONA_STORE_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TPF_TYPE_PERSONA_STORE_CACHE, TpfPersonaStoreCacheClass))
#define TPF_IS_PERSONA_STORE_CACHE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TPF_TYPE_PERSONA_STORE_CACHE))
#define TPF_IS_PERSONA_STORE_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TPF_TYPE_PERSONA_STORE_CACHE))
#define TPF_PERSONA_STORE_CACHE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TPF_TYPE_PERSONA_STORE_CACHE, TpfPersonaStoreCacheClass))

typedef struct _TpfPersonaStoreCache TpfPersonaStoreCache;
typedef struct _TpfPersonaStoreCacheClass TpfPersonaStoreCacheClass;
enum  {
	TPF_PERSONA_STORE_0_PROPERTY,
	TPF_PERSONA_STORE_ACCOUNT_PROPERTY,
	TPF_PERSONA_STORE_TYPE_ID_PROPERTY,
	TPF_PERSONA_STORE_CAN_ADD_PERSONAS_PROPERTY,
	TPF_PERSONA_STORE_CAN_ALIAS_PERSONAS_PROPERTY,
	TPF_PERSONA_STORE_CAN_GROUP_PERSONAS_PROPERTY,
	TPF_PERSONA_STORE_CAN_REMOVE_PERSONAS_PROPERTY,
	TPF_PERSONA_STORE_IS_PREPARED_PROPERTY,
	TPF_PERSONA_STORE_ALWAYS_WRITEABLE_PROPERTIES_PROPERTY,
	TPF_PERSONA_STORE_IS_QUIESCENT_PROPERTY,
	TPF_PERSONA_STORE_PERSONAS_PROPERTY,
	TPF_PERSONA_STORE_SUPPORTED_FIELDS_PROPERTY,
	TPF_PERSONA_STORE_NUM_PROPERTIES
};
static GParamSpec* tpf_persona_store_properties[TPF_PERSONA_STORE_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _TpfPersonaStorePrepareData TpfPersonaStorePrepareData;
typedef struct _TpfPersonaStoreInitialiseFavouriteContactsData TpfPersonaStoreInitialiseFavouriteContactsData;
typedef struct _Block1Data Block1Data;
typedef struct _TpfPersonaStoreNotifyConnectionCbAsyncData TpfPersonaStoreNotifyConnectionCbAsyncData;
#define __vala_TpContactInfoFieldSpec_free0(var) ((var == NULL) ? NULL : (var = (_vala_TpContactInfoFieldSpec_free (var), NULL)))
typedef struct _TpfPersonaStoreLoadCacheData TpfPersonaStoreLoadCacheData;
typedef struct _TpfPersonaStoreFlushData TpfPersonaStoreFlushData;
typedef struct _TpfPersonaStoreStoreCacheData TpfPersonaStoreStoreCacheData;
#define _g_ptr_array_unref0(var) ((var == NULL) ? NULL : (var = (g_ptr_array_unref (var), NULL)))
typedef struct _TpfPersonaStoreRemovePersonaData TpfPersonaStoreRemovePersonaData;
typedef struct _TpfPersonaStoreEnsurePersonaForIdData TpfPersonaStoreEnsurePersonaForIdData;
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
typedef struct _TpfPersonaStoreAddPersonaFromDetailsData TpfPersonaStoreAddPersonaFromDetailsData;
typedef struct _TpfPersonaStoreChangeIsFavouriteData TpfPersonaStoreChangeIsFavouriteData;
typedef struct _TpfPersonaStoreChangeAliasData TpfPersonaStoreChangeAliasData;
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
#define __vala_TpContactInfoField_free0(var) ((var == NULL) ? NULL : (var = (_vala_TpContactInfoField_free (var), NULL)))
typedef struct _TpfPersonaStoreChangeUserBirthdayData TpfPersonaStoreChangeUserBirthdayData;
typedef struct _TpfPersonaStoreChangeUserFullNameData TpfPersonaStoreChangeUserFullNameData;
typedef struct _TpfPersonaStoreChangeUserDetailsData TpfPersonaStoreChangeUserDetailsData;
typedef struct _TpfPersonaStoreChangeUserContactInfoData TpfPersonaStoreChangeUserContactInfoData;
typedef struct _TpfPersonaStorePopulateCountersData TpfPersonaStorePopulateCountersData;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _TpfPersonaStore {
	FolksPersonaStore parent_instance;
	TpfPersonaStorePrivate * priv;
};

struct _TpfPersonaStoreClass {
	FolksPersonaStoreClass parent_class;
};

struct _TpfPersonaStorePrivate {
	gchar** _always_writeable_properties;
	gint _always_writeable_properties_length1;
	gint __always_writeable_properties_size_;
	GeeHashMap* _personas;
	GeeMap* _personas_ro;
	GeeHashSet* _persona_set;
	GeeHashMap* _contact_persona_map;
	FolksSmallSet* _favourite_ids;
	GeeHashMap* _avatars;
	TpConnection* _conn;
	TpAccountManager* _account_manager;
	Logger* _logger;
	TpfPersona* _self_persona;
	FolksMaybeBool _can_add_personas;
	FolksMaybeBool _can_alias_personas;
	FolksMaybeBool _can_group_personas;
	FolksMaybeBool _can_remove_personas;
	gboolean _is_prepared;
	gboolean _prepare_pending;
	gboolean _is_quiescent;
	gboolean _got_initial_members;
	gboolean _got_initial_self_contact;
	gboolean _disconnect_pending;
	gboolean _removal_pending;
	FolksDebug* _debug;
	TpfPersonaStoreCache* _cache;
	GCancellable* _load_cache_cancellable;
	gboolean _cache_needs_update;
	FolksSmallSet* _supported_fields;
	GeeSet* _supported_fields_ro;
	TpAccount* _account;
	FolksTpZeitgeistController* _zg_controller;
};

struct _TpfPersonaStorePrepareData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	gboolean _tmp4_;
	TpAccountManager* _tmp5_;
	TpSimpleClientFactory* factory;
	TpAccountManager* _tmp6_;
	TpSimpleClientFactory* _tmp7_;
	TpSimpleClientFactory* _tmp8_;
	TpSimpleClientFactory* _tmp9_;
	TpContactFeature* _tmp10_;
	TpContactFeature* _tmp11_;
	gint _tmp11__length1;
	TpAccountManager* _tmp12_;
	TpAccountManager* _tmp13_;
	TpAccountManager* _tmp14_;
	TpAccountManager* _tmp15_;
	const gchar* _tmp16_;
	const gchar* _tmp17_;
	GeeHashMap* _tmp18_;
	FolksSmallSet* _tmp19_;
	const gchar* _tmp20_;
	const gchar* _tmp21_;
	Logger* _tmp22_;
	Logger* _tmp23_;
	Logger* _tmp24_;
	const gchar* _tmp25_;
	const gchar* _tmp26_;
	const gchar* _tmp27_;
	const gchar* _tmp28_;
	TpAccount* _tmp29_;
	TpAccount* _tmp30_;
	TpAccount* _tmp31_;
	TpAccount* _tmp32_;
	TpConnection* _tmp33_;
	TpConnection* _tmp34_;
	TpAccount* _tmp35_;
	TpAccount* _tmp36_;
	const gchar* _tmp37_;
	const gchar* _tmp38_;
	const gchar* _tmp39_;
	const gchar* _tmp40_;
	GError * _inner_error_;
};

struct _TpfPersonaStoreInitialiseFavouriteContactsData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	Logger* _tmp0_;
	Logger* _tmp1_;
	gchar** contacts;
	Logger* _tmp2_;
	gint _tmp3_;
	gchar** _tmp4_;
	gint contacts_length1;
	gint _contacts_size_;
	gchar** _tmp5_;
	gint _tmp5__length1;
	gchar** _tmp6_;
	gchar** _tmp7_;
	gint _tmp7__length1;
	gchar** _tmp8_;
	gint _tmp8__length1;
	gchar* _tmp9_;
	GError * _inner_error_;
};

struct _Block1Data {
	int _ref_count_;
	TpfPersonaStore* self;
	GeeHashSet* old_personas;
};

struct _TpfPersonaStoreNotifyConnectionCbAsyncData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	TpAccount* _tmp4_;
	TpAccount* _tmp5_;
	TpConnection* _tmp6_;
	TpConnection* _tmp7_;
	GQuark* _tmp8_;
	GQuark* _tmp9_;
	gint _tmp9__length1;
	GError* e;
	const gchar* _tmp10_;
	const gchar* _tmp11_;
	GError* _tmp12_;
	const gchar* _tmp13_;
	TpAccount* _tmp14_;
	TpAccount* _tmp15_;
	TpConnection* _tmp16_;
	TpConnection* _tmp17_;
	GeeHashSet* _tmp18_;
	TpAccount* _tmp19_;
	TpAccount* _tmp20_;
	TpConnection* _tmp21_;
	TpConnection* _tmp22_;
	TpConnection* _tmp23_;
	TpConnection* _tmp24_;
	TpConnection* _tmp25_;
	TpConnection* _tmp26_;
	gchar** _tmp27_;
	gint _tmp27__length1;
	gchar* _tmp28_;
	TpConnection* _tmp29_;
	FolksMaybeBool new_can_alias;
	TpConnection* _tmp30_;
	gchar** _tmp31_;
	gint _tmp31__length1;
	gchar* _tmp32_;
	FolksMaybeBool _tmp33_;
	TpConnection* _tmp34_;
	TpConnection* _tmp35_;
	const gchar* _tmp36_;
	const gchar* _tmp37_;
	GError * _inner_error_;
};

struct _TpfPersonaStoreLoadCacheData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	GeeHashSet* old_personas;
	gboolean _tmp0_;
	TpAccount* _tmp1_;
	TpAccount* _tmp2_;
	gboolean _tmp3_;
	gboolean _tmp4_;
	TpAccount* _tmp5_;
	TpAccount* _tmp6_;
	gboolean _tmp7_;
	gboolean _tmp8_;
	const gchar* _tmp9_;
	TpAccount* _tmp10_;
	TpAccount* _tmp11_;
	gboolean _tmp12_;
	gboolean _tmp13_;
	const gchar* _tmp14_;
	TpAccount* _tmp15_;
	TpAccount* _tmp16_;
	gboolean _tmp17_;
	gboolean _tmp18_;
	const gchar* _tmp19_;
	const gchar* _tmp20_;
	const gchar* _tmp21_;
	const gchar* _tmp22_;
	GCancellable* cancellable;
	GCancellable* _tmp23_;
	GCancellable* _tmp24_;
	GCancellable* _tmp25_;
	GCancellable* _tmp26_;
	GCancellable* _tmp27_;
	GCancellable* _tmp28_;
	GeeSet* cached_personas;
	TpfPersonaStoreCache* _tmp29_;
	GCancellable* _tmp30_;
	GeeSet* _tmp31_;
	GCancellable* _tmp32_;
	GCancellable* _tmp33_;
	GeeHashSet* _tmp34_;
	GeeSet* _tmp35_;
	GeeIterator* _p_it;
	GeeSet* _tmp36_;
	GeeIterator* _tmp37_;
	GeeIterator* _tmp38_;
	TpfPersona* p;
	GeeIterator* _tmp39_;
	gpointer _tmp40_;
	TpfPersona* _tmp41_;
	GeeSet* _tmp42_;
	Logger* _tmp43_;
	gchar* _tmp44_;
	gchar** _tmp45_;
	gchar** _tmp46_;
};

struct _TpfPersonaStoreFlushData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	GeeHashSet* _tmp2_;
};

struct _TpfPersonaStoreStoreCacheData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	GeeHashSet* old_personas;
	gboolean _tmp0_;
	TpAccount* _tmp1_;
	TpAccount* _tmp2_;
	gboolean _tmp3_;
	gboolean _tmp4_;
	TpAccount* _tmp5_;
	TpAccount* _tmp6_;
	gboolean _tmp7_;
	gboolean _tmp8_;
	const gchar* _tmp9_;
	const gchar* _tmp10_;
	gboolean _tmp11_;
	const gchar* _tmp12_;
	const gchar* _tmp13_;
	const gchar* _tmp14_;
	const gchar* _tmp15_;
	TpfPersonaStoreCache* _tmp16_;
};

struct _TpfPersonaStoreRemovePersonaData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	FolksPersona* persona;
	TpfPersona* tp_persona;
	TpfPersona* _tmp0_;
	TpfPersona* _tmp1_;
	TpContact* _tmp2_;
	TpContact* _tmp3_;
	TpfPersona* _tmp4_;
	gboolean _tmp5_;
	TpfPersona* _tmp6_;
	TpfPersona* _tmp7_;
	gboolean _tmp8_;
	gboolean _tmp9_;
	GError* _tmp10_;
	TpfPersona* _tmp11_;
	TpContact* _tmp12_;
	TpContact* _tmp13_;
	GError* e;
	GError* _tmp14_;
	const gchar* _tmp15_;
	GError* _tmp16_;
	GError * _inner_error_;
};

struct _TpfPersonaStoreEnsurePersonaForIdData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	gchar* contact_id;
	TpfPersona* result;
	TpContact* contact;
	TpConnection* _tmp0_;
	TpContactFeature* _tmp1_;
	TpContactFeature* _tmp2_;
	gint _tmp2__length1;
	TpContact* _tmp3_;
	TpContact* _tmp4_;
	TpfPersona* _tmp5_;
	GError * _inner_error_;
};

struct _TpfPersonaStoreAddPersonaFromDetailsData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	GHashTable* details;
	FolksPersona* result;
	gchar* contact_id;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	const gchar* _tmp7_;
	GError* _tmp8_;
	gchar* add_message;
	const gchar* _tmp9_;
	gchar* _tmp10_;
	const gchar* _tmp11_;
	TpConnectionStatus status;
	TpAccount* _tmp12_;
	TpAccount* _tmp13_;
	TpConnectionStatus _tmp14_;
	gboolean _tmp15_;
	gboolean _tmp16_;
	TpConnectionStatus _tmp17_;
	TpConnectionStatus _tmp18_;
	TpConnection* _tmp19_;
	GError* _tmp20_;
	TpfPersona* persona;
	const gchar* _tmp21_;
	TpfPersona* _tmp22_;
	gboolean already_exists;
	TpfPersona* _tmp23_;
	gboolean _tmp24_;
	gboolean _tmp25_;
	TpfPersona* tp_persona;
	TpfPersona* _tmp26_;
	TpfPersona* _tmp27_;
	TpfPersona* _tmp28_;
	TpContact* _tmp29_;
	TpContact* _tmp30_;
	const gchar* _tmp31_;
	TpfPersona* _tmp32_;
	gboolean _tmp33_;
	TpfPersona* _tmp34_;
	FolksPersona* _tmp35_;
	GError* e;
	GError* _tmp36_;
	const gchar* _tmp37_;
	GError* _tmp38_;
	GError * _inner_error_;
};

struct _TpfPersonaStoreChangeIsFavouriteData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	FolksPersona* persona;
	gboolean is_favourite;
	Logger* _tmp0_;
	GError* _tmp1_;
	TpContact* _tmp2_;
	TpContact* _tmp3_;
	GError* _tmp4_;
	const gchar* id;
	TpContact* _tmp5_;
	TpContact* _tmp6_;
	const gchar* _tmp7_;
	Logger* _tmp8_;
	const gchar* _tmp9_;
	Logger* _tmp10_;
	const gchar* _tmp11_;
	GError* e;
	TpContact* _tmp12_;
	TpContact* _tmp13_;
	const gchar* _tmp14_;
	const gchar* _tmp15_;
	GError* _tmp16_;
	GError * _inner_error_;
};

struct _TpfPersonaStoreChangeAliasData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	TpfPersona* persona;
	gchar* alias;
	TpContact* _tmp1_;
	TpContact* _tmp2_;
	TpContact* _tmp3_;
	TpContact* _tmp4_;
	const gchar* _tmp5_;
	TpConnection* _tmp6_;
	TpContact* _tmp7_;
	TpContact* _tmp8_;
	guint _tmp9_;
	guint _tmp10_;
	GError* e1;
	GError* _tmp11_;
	const gchar* _tmp12_;
	GError* _tmp13_;
	GError * _inner_error_;
};

struct _TpfPersonaStoreChangeUserBirthdayData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	TpfPersona* persona;
	GDateTime* birthday;
	gchar* birthday_str;
	gchar* _tmp0_;
	gchar* _tmp1_;
	FolksSmallSet* info_set;
	FolksSmallSet* _tmp2_;
	gchar** values;
	const gchar* _tmp3_;
	gchar* _tmp4_;
	gchar** _tmp5_;
	gint values_length1;
	gint _values_size_;
	gchar** parameters;
	gchar** _tmp6_;
	gint parameters_length1;
	gint _parameters_size_;
	TpContactInfoField* field;
	TpContactInfoField* _tmp7_;
	GError * _inner_error_;
};

struct _TpfPersonaStoreChangeUserFullNameData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	TpfPersona* persona;
	gchar* full_name;
	FolksSmallSet* info_set;
	FolksSmallSet* _tmp1_;
	gchar** values;
	gchar* _tmp2_;
	gchar** _tmp3_;
	gint values_length1;
	gint _values_size_;
	gchar** parameters;
	gchar** _tmp4_;
	gint parameters_length1;
	gint _parameters_size_;
	TpContactInfoField* field;
	TpContactInfoField* _tmp5_;
	GError * _inner_error_;
};

struct _TpfPersonaStoreChangeUserDetailsData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	TpfPersona* persona;
	GeeSet* details;
	gchar* field_name;
	FolksSmallSet* info_set;
	FolksSmallSet* _tmp0_;
	GeeIterator* _afd_it;
	GeeIterator* _tmp1_;
	GeeIterator* _tmp2_;
	FolksAbstractFieldDetails* afd;
	GeeIterator* _tmp3_;
	gpointer _tmp4_;
	gchar** values;
	FolksAbstractFieldDetails* _tmp5_;
	gconstpointer _tmp6_;
	const gchar* _tmp7_;
	gchar* _tmp8_;
	gchar** _tmp9_;
	gint values_length1;
	gint _values_size_;
	gchar** parameters;
	gchar** _tmp10_;
	gint parameters_length1;
	gint _parameters_size_;
	GeeMapIterator* iter;
	FolksAbstractFieldDetails* _tmp11_;
	GeeMultiMap* _tmp12_;
	GeeMultiMap* _tmp13_;
	GeeMapIterator* _tmp14_;
	GeeMapIterator* _tmp15_;
	gchar* param_name;
	GeeMapIterator* _tmp16_;
	gpointer _tmp17_;
	gchar* param_value;
	GeeMapIterator* _tmp18_;
	gpointer _tmp19_;
	gchar** _tmp20_;
	gint _tmp20__length1;
	const gchar* _tmp21_;
	const gchar* _tmp22_;
	const gchar* _tmp23_;
	const gchar* _tmp24_;
	gchar* _tmp25_;
	gchar** _tmp26_;
	gint _tmp26__length1;
	gchar** _tmp27_;
	TpContactInfoField* field;
	gchar** _tmp28_;
	gint _tmp28__length1;
	gchar** _tmp29_;
	gint _tmp29__length1;
	TpContactInfoField* _tmp30_;
	FolksSmallSet* _tmp31_;
	TpContactInfoField* _tmp32_;
	FolksSmallSet* _tmp33_;
	GError * _inner_error_;
};

struct _TpfPersonaStoreChangeUserContactInfoData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	TpfPersona* persona;
	FolksSmallSet* info_set;
	gboolean _tmp0_;
	gboolean _tmp1_;
	GError* _tmp2_;
	GList* info_list;
	GList* _tmp3_;
	TpAccount* _tmp4_;
	TpAccount* _tmp5_;
	TpConnection* _tmp6_;
	TpConnection* _tmp7_;
	GError* _error_;
	gboolean success;
	gboolean _tmp8_;
	TpConnection* _tmp9_;
	GList* _tmp10_;
	GError* e;
	GError* _tmp11_;
	GError* _tmp12_;
	gboolean _tmp13_;
	GError* _tmp14_;
	gboolean _tmp15_;
	const gchar* _tmp16_;
	GError* _tmp17_;
	GError* _tmp18_;
	const gchar* _tmp19_;
	GError* _tmp20_;
	GError * _inner_error_;
};

struct _TpfPersonaStorePopulateCountersData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersonaStore* self;
	TpAccount* _tmp0_;
	TpAccount* _tmp1_;
	FolksTpZeitgeistController* _tmp2_;
	FolksTpZeitgeistController* _tmp3_;
};


static gpointer tpf_persona_store_parent_class = NULL;
static GeeHashMap* tpf_persona_store__persona_stores_by_account;
static GeeHashMap* tpf_persona_store__persona_stores_by_account = NULL;
static GeeMap* tpf_persona_store__persona_stores_by_account_ro;
static GeeMap* tpf_persona_store__persona_stores_by_account_ro = NULL;

GType tpf_persona_store_get_type (void) G_GNUC_CONST;
GType tpf_persona_get_type (void) G_GNUC_CONST;
GType logger_get_type (void) G_GNUC_CONST;
GType tpf_persona_store_cache_get_type (void) G_GNUC_CONST;
#define TPF_PERSONA_STORE_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), TPF_TYPE_PERSONA_STORE, TpfPersonaStorePrivate))
static void _tpf_persona_store_reset (TpfPersonaStore* self);
static void _tpf_persona_store_remove_store_from_map (TpfPersonaStore* store);
static void _tpf_persona_store_debug_print_status (TpfPersonaStore* self,
                                            FolksDebug* debug);
static void __tpf_persona_store_debug_print_status_folks_debug_print_status (FolksDebug* _sender,
                                                                      gpointer self);
static void _tpf_persona_store_logger_invalidated_cb (TpfPersonaStore* self);
static void __tpf_persona_store_logger_invalidated_cb_logger_invalidated (Logger* _sender,
                                                                   gpointer self);
static void _tpf_persona_store_account_invalidated_cb (TpfPersonaStore* self,
                                                guint domain,
                                                gint code,
                                                const gchar* message);
static void __tpf_persona_store_account_invalidated_cb_tp_proxy_invalidated (TpProxy* _sender,
                                                                      guint domain,
                                                                      gint code,
                                                                      const gchar* message,
                                                                      gpointer self);
static void _tpf_persona_store_account_manager_invalidated_cb (TpfPersonaStore* self,
                                                        guint domain,
                                                        gint code,
                                                        const gchar* message);
static void __tpf_persona_store_account_manager_invalidated_cb_tp_proxy_invalidated (TpProxy* _sender,
                                                                              guint domain,
                                                                              gint code,
                                                                              const gchar* message,
                                                                              gpointer self);
static void _tpf_persona_store_notify_if_is_quiescent (TpfPersonaStore* self);
static void _tpf_persona_store_force_quiescent (TpfPersonaStore* self);
TpfPersonaStore* tpf_persona_store_new (TpAccount* account);
TpfPersonaStore* tpf_persona_store_construct (GType object_type,
                                              TpAccount* account);
static gchar* _tpf_persona_store_format_maybe_bool (TpfPersonaStore* self,
                                             FolksMaybeBool input);
gboolean tpf_persona_get_is_in_contact_list (TpfPersona* self);
TpContact* tpf_persona_get_contact (TpfPersona* self);
TpAccount* tpf_persona_store_get_account (TpfPersonaStore* self);
static void _tpf_persona_store_self_contact_changed_cb (TpfPersonaStore* self,
                                                 GObject* s,
                                                 GParamSpec* p);
static void __tpf_persona_store_self_contact_changed_cb_g_object_notify (GObject* _sender,
                                                                  GParamSpec* pspec,
                                                                  gpointer self);
static void _tpf_persona_store_contact_list_state_changed_cb (TpfPersonaStore* self,
                                                       GObject* s,
                                                       GParamSpec* p);
static void __tpf_persona_store_contact_list_state_changed_cb_g_object_notify (GObject* _sender,
                                                                        GParamSpec* pspec,
                                                                        gpointer self);
static void _tpf_persona_store_contact_list_changed_cb (TpfPersonaStore* self,
                                                 GPtrArray* added,
                                                 GPtrArray* removed);
static void __tpf_persona_store_contact_list_changed_cb_tp_connection_contact_list_changed (TpConnection* _sender,
                                                                                     GPtrArray* added,
                                                                                     GPtrArray* removed,
                                                                                     gpointer self);
static void _tpf_persona_store_contact_weak_notify_cb (TpfPersonaStore* self,
                                                GObject* obj);
static void __tpf_persona_store_contact_weak_notify_cb_gweak_notify (gpointer self,
                                                              GObject* object);
static void _tpf_persona_store_remove_store (TpfPersonaStore* self,
                                      GeeSet* old_personas);
static void tpf_persona_store_real_prepare_data_free (gpointer _data);
static void tpf_persona_store_real_prepare_async_ready_wrapper (GObject *source_object,
                                                         GAsyncResult *res,
                                                         void *user_data);
static void tpf_persona_store_real_prepare (FolksPersonaStore* base,
                                     GAsyncReadyCallback _callback_,
                                     gpointer _user_data_);
static gboolean tpf_persona_store_real_prepare_co (TpfPersonaStorePrepareData* _data_);
static void ___lambda10_ (TpfPersonaStore* self,
                   TpAccount* a);
static void ____lambda10__tp_account_manager_account_removed (TpAccountManager* _sender,
                                                       TpAccount* account,
                                                       gpointer self);
static void ___lambda11_ (TpfPersonaStore* self,
                   TpAccount* a,
                   gboolean valid);
static void ____lambda11__tp_account_manager_account_validity_changed (TpAccountManager* _sender,
                                                                TpAccount* account,
                                                                gboolean valid,
                                                                gpointer self);
static void ___lambda12_ (TpfPersonaStore* self,
                   TpAccount* a);
static void ____lambda12__tp_account_manager_account_disabled (TpAccountManager* _sender,
                                                        TpAccount* account,
                                                        gpointer self);
Logger* logger_new (const gchar* account_path);
Logger* logger_construct (GType object_type,
                          const gchar* account_path);
static void _tpf_persona_store_favourite_contacts_changed_cb (TpfPersonaStore* self,
                                                       gchar** added,
                                                       int added_length1,
                                                       gchar** removed,
                                                       int removed_length1);
static void __tpf_persona_store_favourite_contacts_changed_cb_logger_favourite_contacts_changed (Logger* _sender,
                                                                                          gchar** added,
                                                                                          int added_length1,
                                                                                          gchar** removed,
                                                                                          int removed_length1,
                                                                                          gpointer self);
static void _tpf_persona_store_initialise_favourite_contacts (TpfPersonaStore* self,
                                                       GAsyncReadyCallback _callback_,
                                                       gpointer _user_data_);
static void _tpf_persona_store_initialise_favourite_contacts_finish (TpfPersonaStore* self,
                                                              GAsyncResult* _res_,
                                                              GError** error);
static void ___lambda13_ (TpfPersonaStore* self,
                   GObject* o,
                   GAsyncResult* r);
static void ____lambda13__gasync_ready_callback (GObject* source_object,
                                          GAsyncResult* res,
                                          gpointer self);
static void _tpf_persona_store_notify_connection_cb (TpfPersonaStore* self,
                                              GObject* s,
                                              GParamSpec* p);
static void __tpf_persona_store_notify_connection_cb_g_object_notify (GObject* _sender,
                                                               GParamSpec* pspec,
                                                               gpointer self);
static void _tpf_persona_store_load_cache (TpfPersonaStore* self,
                                    GeeHashSet* old_personas,
                                    GAsyncReadyCallback _callback_,
                                    gpointer _user_data_);
static void _tpf_persona_store_load_cache_finish (TpfPersonaStore* self,
                                           GAsyncResult* _res_);
static void tpf_persona_store_prepare_ready (GObject* source_object,
                                      GAsyncResult* _res_,
                                      gpointer _user_data_);
static void _tpf_persona_store_initialise_favourite_contacts_data_free (gpointer _data);
static void _tpf_persona_store_initialise_favourite_contacts_async_ready_wrapper (GObject *source_object,
                                                                           GAsyncResult *res,
                                                                           void *user_data);
static gboolean _tpf_persona_store_initialise_favourite_contacts_co (TpfPersonaStoreInitialiseFavouriteContactsData* _data_);
void logger_prepare (Logger* self,
                     GAsyncReadyCallback _callback_,
                     gpointer _user_data_);
void logger_prepare_finish (Logger* self,
                            GAsyncResult* _res_,
                            GError** error);
static void _tpf_persona_store_initialise_favourite_contacts_ready (GObject* source_object,
                                                             GAsyncResult* _res_,
                                                             gpointer _user_data_);
void logger_get_favourite_contacts (Logger* self,
                                    GAsyncReadyCallback _callback_,
                                    gpointer _user_data_);
gchar** logger_get_favourite_contacts_finish (Logger* self,
                                              GAsyncResult* _res_,
                                              int* result_length1,
                                              GError** error);
static void _vala_array_add6 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static TpfPersona* _tpf_persona_store_lookup_persona_by_id (TpfPersonaStore* self,
                                                     const gchar* id);
void _tpf_persona_set_is_favourite (TpfPersona* self,
                                    gboolean is_favourite);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
void _tpf_persona_store_set_cache_needs_update (TpfPersonaStore* self);
static void _tpf_persona_store_store_cache (TpfPersonaStore* self,
                                     GeeHashSet* old_personas,
                                     GAsyncReadyCallback _callback_,
                                     gpointer _user_data_);
static void _tpf_persona_store_store_cache_finish (TpfPersonaStore* self,
                                            GAsyncResult* _res_);
static void ____lambda14_ (Block1Data* _data1_,
                    GObject* o,
                    GAsyncResult* r);
static void ___lambda15_ (TpfPersonaStore* self,
                   GObject* o2,
                   GAsyncResult* r2);
static void ____lambda15__gasync_ready_callback (GObject* source_object,
                                          GAsyncResult* res,
                                          gpointer self);
static void _____lambda14__gasync_ready_callback (GObject* source_object,
                                           GAsyncResult* res,
                                           gpointer self);
static void _tpf_persona_store_notify_connection_cb_async (TpfPersonaStore* self,
                                                    GAsyncReadyCallback _callback_,
                                                    gpointer _user_data_);
static void _tpf_persona_store_notify_connection_cb_finish (TpfPersonaStore* self,
                                                     GAsyncResult* _res_);
static void _tpf_persona_store_notify_connection_cb_async_data_free (gpointer _data);
static void _tpf_persona_store_notify_connection_cb_async_async_ready_wrapper (GObject *source_object,
                                                                        GAsyncResult *res,
                                                                        void *user_data);
static gboolean _tpf_persona_store_notify_connection_cb_async_co (TpfPersonaStoreNotifyConnectionCbAsyncData* _data_);
static void _tpf_persona_store_notify_connection_cb_async_ready (GObject* source_object,
                                                          GAsyncResult* _res_,
                                                          gpointer _user_data_);
static void _tpf_persona_store_unload_cache (TpfPersonaStore* self);
static void _tpf_persona_store_marshall_supported_fields (TpfPersonaStore* self);
static void _vala_array_add7 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static void _vala_array_add8 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static TpContactInfoFieldSpec* _vala_TpContactInfoFieldSpec_copy (TpContactInfoFieldSpec* self);
static void _vala_TpContactInfoFieldSpec_free (TpContactInfoFieldSpec* self);
static void __vala_TpContactInfoFieldSpec_free0_ (gpointer var);
static inline void _g_list_free___vala_TpContactInfoFieldSpec_free0_ (GList* self);
static void _tpf_persona_store_load_cache_data_free (gpointer _data);
static void _tpf_persona_store_load_cache_async_ready_wrapper (GObject *source_object,
                                                        GAsyncResult *res,
                                                        void *user_data);
static gboolean _tpf_persona_store_load_cache_co (TpfPersonaStoreLoadCacheData* _data_);
static void _tpf_persona_store_load_cache_ready (GObject* source_object,
                                          GAsyncResult* _res_,
                                          gpointer _user_data_);
static gboolean _tpf_persona_store_add_persona (TpfPersonaStore* self,
                                         TpfPersona* p);
static void tpf_persona_store_real_flush_data_free (gpointer _data);
static void tpf_persona_store_real_flush_async_ready_wrapper (GObject *source_object,
                                                       GAsyncResult *res,
                                                       void *user_data);
static void tpf_persona_store_real_flush (FolksPersonaStore* base,
                                   GAsyncReadyCallback _callback_,
                                   gpointer _user_data_);
static gboolean tpf_persona_store_real_flush_co (TpfPersonaStoreFlushData* _data_);
static void tpf_persona_store_flush_ready (GObject* source_object,
                                    GAsyncResult* _res_,
                                    gpointer _user_data_);
static void _tpf_persona_store_store_cache_data_free (gpointer _data);
static void _tpf_persona_store_store_cache_async_ready_wrapper (GObject *source_object,
                                                         GAsyncResult *res,
                                                         void *user_data);
static gboolean _tpf_persona_store_store_cache_co (TpfPersonaStoreStoreCacheData* _data_);
static void _tpf_persona_store_store_cache_ready (GObject* source_object,
                                           GAsyncResult* _res_,
                                           gpointer _user_data_);
void _tpf_persona_store_update_avatar_cache (TpfPersonaStore* self,
                                             const gchar* persona_iid,
                                             GFile* avatar_file);
GFile* _tpf_persona_store_query_avatar_cache (TpfPersonaStore* self,
                                              const gchar* persona_iid);
static gboolean _tpf_persona_store_remove_persona (TpfPersonaStore* self,
                                            TpfPersona* p);
void _tpf_persona_contact_weak_notify (TpfPersona* self);
TpfPersona* _tpf_persona_store_ensure_persona_for_contact (TpfPersonaStore* self,
                                                           TpContact* contact);
TpfPersona* tpf_persona_new (TpContact* contact,
                             TpfPersonaStore* store);
TpfPersona* tpf_persona_construct (GType object_type,
                                   TpContact* contact,
                                   TpfPersonaStore* store);
static void _tpf_persona_store_populate_counters (TpfPersonaStore* self,
                                           GAsyncReadyCallback _callback_,
                                           gpointer _user_data_);
static void _tpf_persona_store_populate_counters_finish (TpfPersonaStore* self,
                                                  GAsyncResult* _res_);
void tpf_persona_set_is_in_contact_list (TpfPersona* self,
                                         gboolean value);
static void tpf_persona_store_real_remove_persona_data_free (gpointer _data);
static void tpf_persona_store_real_remove_persona_async_ready_wrapper (GObject *source_object,
                                                                GAsyncResult *res,
                                                                void *user_data);
static void tpf_persona_store_real_remove_persona (FolksPersonaStore* base,
                                            FolksPersona* persona,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
static gboolean tpf_persona_store_real_remove_persona_co (TpfPersonaStoreRemovePersonaData* _data_);
static void tpf_persona_store_remove_persona_ready (GObject* source_object,
                                             GAsyncResult* _res_,
                                             gpointer _user_data_);
static void _tpf_persona_store_ensure_persona_for_id_data_free (gpointer _data);
static void _tpf_persona_store_ensure_persona_for_id_async_ready_wrapper (GObject *source_object,
                                                                   GAsyncResult *res,
                                                                   void *user_data);
static void _tpf_persona_store_ensure_persona_for_id (TpfPersonaStore* self,
                                               const gchar* contact_id,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
static TpfPersona* _tpf_persona_store_ensure_persona_for_id_finish (TpfPersonaStore* self,
                                                             GAsyncResult* _res_,
                                                             GError** error);
static gboolean _tpf_persona_store_ensure_persona_for_id_co (TpfPersonaStoreEnsurePersonaForIdData* _data_);
static void _tpf_persona_store_ensure_persona_for_id_ready (GObject* source_object,
                                                     GAsyncResult* _res_,
                                                     gpointer _user_data_);
static void tpf_persona_store_real_add_persona_from_details_data_free (gpointer _data);
static void tpf_persona_store_real_add_persona_from_details_async_ready_wrapper (GObject *source_object,
                                                                          GAsyncResult *res,
                                                                          void *user_data);
static void tpf_persona_store_real_add_persona_from_details (FolksPersonaStore* base,
                                                      GHashTable* details,
                                                      GAsyncReadyCallback _callback_,
                                                      gpointer _user_data_);
static gboolean tpf_persona_store_real_add_persona_from_details_co (TpfPersonaStoreAddPersonaFromDetailsData* _data_);
static void tpf_persona_store_add_persona_from_details_ready (GObject* source_object,
                                                       GAsyncResult* _res_,
                                                       gpointer _user_data_);
static void tpf_persona_store_change_is_favourite_data_free (gpointer _data);
static void tpf_persona_store_change_is_favourite_async_ready_wrapper (GObject *source_object,
                                                                GAsyncResult *res,
                                                                void *user_data);
void tpf_persona_store_change_is_favourite (TpfPersonaStore* self,
                                            FolksPersona* persona,
                                            gboolean is_favourite,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
void tpf_persona_store_change_is_favourite_finish (TpfPersonaStore* self,
                                                   GAsyncResult* _res_,
                                                   GError** error);
static gboolean tpf_persona_store_change_is_favourite_co (TpfPersonaStoreChangeIsFavouriteData* _data_);
void logger_add_favourite_contact (Logger* self,
                                   const gchar* id,
                                   GAsyncReadyCallback _callback_,
                                   gpointer _user_data_);
void logger_add_favourite_contact_finish (Logger* self,
                                          GAsyncResult* _res_,
                                          GError** error);
static void tpf_persona_store_change_is_favourite_ready (GObject* source_object,
                                                  GAsyncResult* _res_,
                                                  gpointer _user_data_);
void logger_remove_favourite_contact (Logger* self,
                                      const gchar* id,
                                      GAsyncReadyCallback _callback_,
                                      gpointer _user_data_);
void logger_remove_favourite_contact_finish (Logger* self,
                                             GAsyncResult* _res_,
                                             GError** error);
static void tpf_persona_store_change_alias_data_free (gpointer _data);
static void tpf_persona_store_change_alias_async_ready_wrapper (GObject *source_object,
                                                         GAsyncResult *res,
                                                         void *user_data);
void tpf_persona_store_change_alias (TpfPersonaStore* self,
                                     TpfPersona* persona,
                                     const gchar* alias,
                                     GAsyncReadyCallback _callback_,
                                     gpointer _user_data_);
void tpf_persona_store_change_alias_finish (TpfPersonaStore* self,
                                            GAsyncResult* _res_,
                                            GError** error);
static gboolean tpf_persona_store_change_alias_co (TpfPersonaStoreChangeAliasData* _data_);
static void tpf_persona_store_change_alias_ready (GObject* source_object,
                                           GAsyncResult* _res_,
                                           gpointer _user_data_);
static void tpf_persona_store_change_user_birthday_data_free (gpointer _data);
static void tpf_persona_store_change_user_birthday_async_ready_wrapper (GObject *source_object,
                                                                 GAsyncResult *res,
                                                                 void *user_data);
void tpf_persona_store_change_user_birthday (TpfPersonaStore* self,
                                             TpfPersona* persona,
                                             GDateTime* birthday,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
void tpf_persona_store_change_user_birthday_finish (TpfPersonaStore* self,
                                                    GAsyncResult* _res_,
                                                    GError** error);
static gboolean tpf_persona_store_change_user_birthday_co (TpfPersonaStoreChangeUserBirthdayData* _data_);
static TpContactInfoField* _vala_TpContactInfoField_copy (TpContactInfoField* self);
static void _vala_TpContactInfoField_free (TpContactInfoField* self);
static void _tpf_persona_store_change_user_contact_info (TpfPersonaStore* self,
                                                  TpfPersona* persona,
                                                  FolksSmallSet* info_set,
                                                  GAsyncReadyCallback _callback_,
                                                  gpointer _user_data_);
static void _tpf_persona_store_change_user_contact_info_finish (TpfPersonaStore* self,
                                                         GAsyncResult* _res_,
                                                         GError** error);
static void tpf_persona_store_change_user_birthday_ready (GObject* source_object,
                                                   GAsyncResult* _res_,
                                                   gpointer _user_data_);
static void tpf_persona_store_change_user_full_name_data_free (gpointer _data);
static void tpf_persona_store_change_user_full_name_async_ready_wrapper (GObject *source_object,
                                                                  GAsyncResult *res,
                                                                  void *user_data);
void tpf_persona_store_change_user_full_name (TpfPersonaStore* self,
                                              TpfPersona* persona,
                                              const gchar* full_name,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_);
void tpf_persona_store_change_user_full_name_finish (TpfPersonaStore* self,
                                                     GAsyncResult* _res_,
                                                     GError** error);
static gboolean tpf_persona_store_change_user_full_name_co (TpfPersonaStoreChangeUserFullNameData* _data_);
static void tpf_persona_store_change_user_full_name_ready (GObject* source_object,
                                                    GAsyncResult* _res_,
                                                    gpointer _user_data_);
static void _tpf_persona_store_change_user_details_data_free (gpointer _data);
static void _tpf_persona_store_change_user_details_async_ready_wrapper (GObject *source_object,
                                                                 GAsyncResult *res,
                                                                 void *user_data);
void _tpf_persona_store_change_user_details (TpfPersonaStore* self,
                                             TpfPersona* persona,
                                             GeeSet* details,
                                             const gchar* field_name,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
void _tpf_persona_store_change_user_details_finish (TpfPersonaStore* self,
                                                    GAsyncResult* _res_,
                                                    GError** error);
static gboolean _tpf_persona_store_change_user_details_co (TpfPersonaStoreChangeUserDetailsData* _data_);
static void _vala_array_add9 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static void _tpf_persona_store_change_user_details_ready (GObject* source_object,
                                                   GAsyncResult* _res_,
                                                   gpointer _user_data_);
static void _tpf_persona_store_change_user_contact_info_data_free (gpointer _data);
static void _tpf_persona_store_change_user_contact_info_async_ready_wrapper (GObject *source_object,
                                                                      GAsyncResult *res,
                                                                      void *user_data);
static gboolean _tpf_persona_store_change_user_contact_info_co (TpfPersonaStoreChangeUserContactInfoData* _data_);
static GList* _tpf_persona_store_contact_info_set_to_list (FolksSmallSet* info_set);
static void _tpf_persona_store_change_user_contact_info_ready (GObject* source_object,
                                                        GAsyncResult* _res_,
                                                        gpointer _user_data_);
static void __vala_TpContactInfoField_free0_ (gpointer var);
static inline void _g_list_free___vala_TpContactInfoField_free0_ (GList* self);
GeeMap* tpf_persona_store_list_persona_stores (void);
static void _tpf_persona_store_store_removed_cb (FolksPersonaStore* store);
static void _tpf_persona_store_add_store_to_map (TpfPersonaStore* store);
static void __tpf_persona_store_store_removed_cb_folks_persona_store_removed (FolksPersonaStore* _sender,
                                                                       gpointer self);
TpfPersonaStore* tpf_persona_store_dup_for_account (TpAccount* account);
static void _tpf_persona_store_populate_counters_data_free (gpointer _data);
static void _tpf_persona_store_populate_counters_async_ready_wrapper (GObject *source_object,
                                                               GAsyncResult *res,
                                                               void *user_data);
static gboolean _tpf_persona_store_populate_counters_co (TpfPersonaStorePopulateCountersData* _data_);
static void __lambda8_ (FolksPersona* p,
                 GDateTime* dt);
void _tpf_persona_increase_im_interaction_counter (TpfPersona* self,
                                                   GDateTime* converted_datetime);
static void ___lambda8__folks_tp_zeitgeist_controller_increase_persona_counter (FolksPersona* p,
                                                                         GDateTime* converted_datetime);
static void __lambda9_ (FolksPersona* p,
                 GDateTime* dt);
void _tpf_persona_increase_last_call_interaction_counter (TpfPersona* self,
                                                          GDateTime* converted_datetime);
static void ___lambda9__folks_tp_zeitgeist_controller_increase_persona_counter (FolksPersona* p,
                                                                         GDateTime* converted_datetime);
static void _tpf_persona_store_populate_counters_ready (GObject* source_object,
                                                 GAsyncResult* _res_,
                                                 gpointer _user_data_);
static void tpf_persona_store_set_account (TpfPersonaStore* self,
                                    TpAccount* value);
GeeSet* tpf_persona_store_get_supported_fields (TpfPersonaStore* self);
static GObject * tpf_persona_store_constructor (GType type,
                                         guint n_construct_properties,
                                         GObjectConstructParam * construct_properties);
TpfPersonaStoreCache* tpf_persona_store_cache_new (TpfPersonaStore* store);
TpfPersonaStoreCache* tpf_persona_store_cache_construct (GType object_type,
                                                         TpfPersonaStore* store);
static void tpf_persona_store_finalize (GObject * obj);
static void _vala_tpf_persona_store_get_property (GObject * object,
                                           guint property_id,
                                           GValue * value,
                                           GParamSpec * pspec);
static void _vala_tpf_persona_store_set_property (GObject * object,
                                           guint property_id,
                                           const GValue * value,
                                           GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


static void
__tpf_persona_store_debug_print_status_folks_debug_print_status (FolksDebug* _sender,
                                                                 gpointer self)
{
#line 281 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_debug_print_status ((TpfPersonaStore*) self, _sender);
#line 1248 "tpf-persona-store.c"
}


static void
__tpf_persona_store_logger_invalidated_cb_logger_invalidated (Logger* _sender,
                                                              gpointer self)
{
#line 284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_logger_invalidated_cb ((TpfPersonaStore*) self);
#line 1258 "tpf-persona-store.c"
}


static void
__tpf_persona_store_account_invalidated_cb_tp_proxy_invalidated (TpProxy* _sender,
                                                                 guint domain,
                                                                 gint code,
                                                                 const gchar* message,
                                                                 gpointer self)
{
#line 286 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_account_invalidated_cb ((TpfPersonaStore*) self, domain, code, message);
#line 1271 "tpf-persona-store.c"
}


static void
__tpf_persona_store_account_manager_invalidated_cb_tp_proxy_invalidated (TpProxy* _sender,
                                                                         guint domain,
                                                                         gint code,
                                                                         const gchar* message,
                                                                         gpointer self)
{
#line 290 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_account_manager_invalidated_cb ((TpfPersonaStore*) self, domain, code, message);
#line 1284 "tpf-persona-store.c"
}


static void
_tpf_persona_store_notify_if_is_quiescent (TpfPersonaStore* self)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp2_;
#line 207 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 209 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = self->priv->_got_initial_members;
#line 209 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp2_ == TRUE) {
#line 1300 "tpf-persona-store.c"
		gboolean _tmp3_;
#line 210 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = self->priv->_got_initial_self_contact;
#line 210 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp1_ = _tmp3_ == TRUE;
#line 1306 "tpf-persona-store.c"
	} else {
#line 209 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp1_ = FALSE;
#line 1310 "tpf-persona-store.c"
	}
#line 209 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp1_) {
#line 1314 "tpf-persona-store.c"
		gboolean _tmp4_;
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp4_ = self->priv->_is_quiescent;
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp0_ = _tmp4_ == FALSE;
#line 1320 "tpf-persona-store.c"
	} else {
#line 209 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp0_ = FALSE;
#line 1324 "tpf-persona-store.c"
	}
#line 209 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp0_) {
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		self->priv->_is_quiescent = TRUE;
#line 214 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_notify ((GObject*) self, "is-quiescent");
#line 1332 "tpf-persona-store.c"
	}
}


static void
_tpf_persona_store_force_quiescent (TpfPersonaStore* self)
{
#line 218 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 220 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_got_initial_self_contact = TRUE;
#line 221 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_got_initial_members = TRUE;
#line 222 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_notify_if_is_quiescent (self);
#line 1348 "tpf-persona-store.c"
}


/**
   * Create a new PersonaStore.
   *
   * Create a new persona store to store the {@link Persona}s for the contacts
   * in the Telepathy account provided by ``account``.
   *
   * @param account the Telepathy account being represented by the persona store
   */
TpfPersonaStore*
tpf_persona_store_construct (GType object_type,
                             TpAccount* account)
{
	TpfPersonaStore * self = NULL;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 248 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (account != NULL, NULL);
#line 250 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = tp_account_get_display_name (account);
#line 250 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _tmp0_;
#line 250 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = tp_proxy_get_object_path ((TpProxy*) account);
#line 250 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = (TpfPersonaStore*) g_object_new (object_type, "account", account, "display-name", _tmp1_, "id", _tmp2_, NULL);
#line 248 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return self;
#line 1380 "tpf-persona-store.c"
}


TpfPersonaStore*
tpf_persona_store_new (TpAccount* account)
{
#line 248 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return tpf_persona_store_construct (TPF_TYPE_PERSONA_STORE, account);
#line 1389 "tpf-persona-store.c"
}


static gchar*
_tpf_persona_store_format_maybe_bool (TpfPersonaStore* self,
                                      FolksMaybeBool input)
{
	gchar* result = NULL;
#line 298 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 300 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (input) {
#line 300 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case FOLKS_MAYBE_BOOL_UNSET:
#line 1404 "tpf-persona-store.c"
		{
			gchar* _tmp0_;
#line 303 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp0_ = g_strdup ("unset");
#line 303 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			result = _tmp0_;
#line 303 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return result;
#line 1413 "tpf-persona-store.c"
		}
#line 300 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case FOLKS_MAYBE_BOOL_TRUE:
#line 1417 "tpf-persona-store.c"
		{
			gchar* _tmp1_;
#line 305 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp1_ = g_strdup ("true");
#line 305 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			result = _tmp1_;
#line 305 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return result;
#line 1426 "tpf-persona-store.c"
		}
#line 300 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case FOLKS_MAYBE_BOOL_FALSE:
#line 1430 "tpf-persona-store.c"
		{
			gchar* _tmp2_;
#line 307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp2_ = g_strdup ("false");
#line 307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			result = _tmp2_;
#line 307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return result;
#line 1439 "tpf-persona-store.c"
		}
		default:
		{
#line 309 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_assert_not_reached ();
#line 1445 "tpf-persona-store.c"
		}
	}
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return self ? g_object_ref (self) : NULL;
#line 1456 "tpf-persona-store.c"
}


static void
_tpf_persona_store_debug_print_status (TpfPersonaStore* self,
                                       FolksDebug* debug)
{
#line 315 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	static const char domain[] = FOLKS_DEBUG_STATUS_LOG_DOMAIN;
#line 316 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	static const GLogLevelFlags level = G_LOG_LEVEL_INFO;
#line 1468 "tpf-persona-store.c"
	const gchar* _tmp0_ = NULL;
	gboolean _tmp1_;
	const gchar* _tmp2_ = NULL;
	gboolean _tmp3_;
	const gchar* _tmp4_ = NULL;
	gboolean _tmp5_;
	const gchar* _tmp6_;
	const gchar* _tmp7_;
	TpConnection* _tmp8_;
	gchar* _tmp9_;
	gchar* _tmp10_;
	TpAccountManager* _tmp11_;
	gchar* _tmp12_;
	gchar* _tmp13_;
	TpfPersona* _tmp14_;
	gchar* _tmp15_;
	gchar* _tmp16_;
	FolksMaybeBool _tmp17_;
	gchar* _tmp18_;
	gchar* _tmp19_;
	FolksMaybeBool _tmp20_;
	gchar* _tmp21_;
	gchar* _tmp22_;
	FolksMaybeBool _tmp23_;
	gchar* _tmp24_;
	gchar* _tmp25_;
	FolksMaybeBool _tmp26_;
	gchar* _tmp27_;
	gchar* _tmp28_;
	GeeHashSet* _tmp29_;
	gint _tmp30_;
	gint _tmp31_;
	GeeHashMap* _tmp60_;
	gint _tmp61_;
	gint _tmp62_;
	GeeMapIterator* iter1 = NULL;
	GeeHashMap* _tmp63_;
	GeeMapIterator* _tmp64_;
	FolksSmallSet* _tmp71_;
	gint _tmp72_;
	gint _tmp73_;
	GeeHashMap* _tmp87_;
	gint _tmp88_;
	gint _tmp89_;
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (debug != NULL);
#line 318 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_debug_print_heading (debug, domain, level, "Tpf.PersonaStore (%p)", self);
#line 321 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = self->priv->_is_prepared;
#line 321 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp1_) {
#line 321 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp0_ = "yes";
#line 1525 "tpf-persona-store.c"
	} else {
#line 321 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp0_ = "no";
#line 1529 "tpf-persona-store.c"
	}
#line 322 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp3_ = self->priv->_got_initial_members;
#line 322 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp3_) {
#line 322 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = "yes";
#line 1537 "tpf-persona-store.c"
	} else {
#line 322 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = "no";
#line 1541 "tpf-persona-store.c"
	}
#line 323 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp5_ = self->priv->_got_initial_self_contact;
#line 323 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp5_) {
#line 323 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp4_ = "yes";
#line 1549 "tpf-persona-store.c"
	} else {
#line 323 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp4_ = "no";
#line 1553 "tpf-persona-store.c"
	}
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp6_ = folks_persona_store_get_id ((FolksPersonaStore*) self);
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp7_ = _tmp6_;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp8_ = self->priv->_conn;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp9_ = g_strdup_printf ("%p", _tmp8_);
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp10_ = _tmp9_;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp11_ = self->priv->_account_manager;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp12_ = g_strdup_printf ("%p", _tmp11_);
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp13_ = _tmp12_;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp14_ = self->priv->_self_persona;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp15_ = g_strdup_printf ("%p", _tmp14_);
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp16_ = _tmp15_;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp17_ = self->priv->_can_add_personas;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp18_ = _tpf_persona_store_format_maybe_bool (self, _tmp17_);
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp19_ = _tmp18_;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp20_ = self->priv->_can_alias_personas;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp21_ = _tpf_persona_store_format_maybe_bool (self, _tmp20_);
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp22_ = _tmp21_;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp23_ = self->priv->_can_group_personas;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp24_ = _tpf_persona_store_format_maybe_bool (self, _tmp23_);
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp25_ = _tmp24_;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp26_ = self->priv->_can_remove_personas;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp27_ = _tpf_persona_store_format_maybe_bool (self, _tmp26_);
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp28_ = _tmp27_;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_debug_print_key_value_pairs (debug, domain, level, "ID", _tmp7_, "Prepared?", _tmp0_, "Has initial members?", _tmp2_, "Has self contact?", _tmp4_, "TpConnection", _tmp10_, "TpAccountManager", _tmp13_, "Self-Persona", _tmp16_, "Can add personas?", _tmp19_, "Can alias personas?", _tmp22_, "Can group personas?", _tmp25_, "Can remove personas?", _tmp28_, NULL);
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_tmp28_);
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_tmp25_);
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_tmp22_);
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_tmp19_);
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_tmp16_);
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_tmp13_);
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_tmp10_);
#line 336 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp29_ = self->priv->_persona_set;
#line 336 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp30_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp29_);
#line 336 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp31_ = _tmp30_;
#line 336 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_debug_print_line (debug, domain, level, "%u Personas:", (guint) _tmp31_);
#line 337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_debug_indent (debug);
#line 1627 "tpf-persona-store.c"
	{
		GeeIterator* _persona_it = NULL;
		GeeHashSet* _tmp32_;
		GeeIterator* _tmp33_;
#line 339 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp32_ = self->priv->_persona_set;
#line 339 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp33_ = gee_abstract_collection_iterator ((GeeAbstractCollection*) _tmp32_);
#line 339 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_persona_it = _tmp33_;
#line 339 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (TRUE) {
#line 1640 "tpf-persona-store.c"
			GeeIterator* _tmp34_;
			TpfPersona* persona = NULL;
			GeeIterator* _tmp35_;
			gpointer _tmp36_;
			TpfPersona* _tmp37_;
			const gchar* _tmp38_ = NULL;
			TpfPersona* _tmp39_;
			gboolean _tmp40_;
			gboolean _tmp41_;
			const gchar* _tmp42_ = NULL;
			TpfPersona* _tmp43_;
			gboolean _tmp44_;
			gboolean _tmp45_;
			TpfPersona* _tmp46_;
			const gchar* _tmp47_;
			const gchar* _tmp48_;
			TpfPersona* _tmp49_;
			const gchar* _tmp50_;
			const gchar* _tmp51_;
			TpfPersona* _tmp52_;
			const gchar* _tmp53_;
			const gchar* _tmp54_;
			TpfPersona* _tmp55_;
			TpContact* _tmp56_;
			TpContact* _tmp57_;
			gchar* _tmp58_;
			gchar* _tmp59_;
#line 339 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp34_ = _persona_it;
#line 339 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (!gee_iterator_next (_tmp34_)) {
#line 339 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				break;
#line 1674 "tpf-persona-store.c"
			}
#line 339 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp35_ = _persona_it;
#line 339 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp36_ = gee_iterator_get (_tmp35_);
#line 339 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			persona = (TpfPersona*) _tmp36_;
#line 341 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp37_ = persona;
#line 341 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			folks_debug_print_heading (debug, domain, level, "Persona (%p)", _tmp37_);
#line 346 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp39_ = persona;
#line 346 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp40_ = folks_persona_get_is_user ((FolksPersona*) _tmp39_);
#line 346 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp41_ = _tmp40_;
#line 346 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (_tmp41_) {
#line 346 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp38_ = "yes";
#line 1696 "tpf-persona-store.c"
			} else {
#line 346 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp38_ = "no";
#line 1700 "tpf-persona-store.c"
			}
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp43_ = persona;
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp44_ = tpf_persona_get_is_in_contact_list (_tmp43_);
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp45_ = _tmp44_;
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (_tmp45_) {
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp42_ = "yes";
#line 1712 "tpf-persona-store.c"
			} else {
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp42_ = "no";
#line 1716 "tpf-persona-store.c"
			}
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp46_ = persona;
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp47_ = folks_persona_get_uid ((FolksPersona*) _tmp46_);
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp48_ = _tmp47_;
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp49_ = persona;
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp50_ = folks_persona_get_iid ((FolksPersona*) _tmp49_);
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp51_ = _tmp50_;
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp52_ = persona;
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp53_ = folks_persona_get_display_id ((FolksPersona*) _tmp52_);
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp54_ = _tmp53_;
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp55_ = persona;
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp56_ = tpf_persona_get_contact (_tmp55_);
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp57_ = _tmp56_;
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp58_ = g_strdup_printf ("%p", _tmp57_);
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp59_ = _tmp58_;
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			folks_debug_print_key_value_pairs (debug, domain, level, "UID", _tmp48_, "IID", _tmp51_, "Display ID", _tmp54_, "User?", _tmp38_, "In contact list?", _tmp42_, "TpContact", _tmp59_, NULL);
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_free0 (_tmp59_);
#line 339 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (persona);
#line 1752 "tpf-persona-store.c"
		}
#line 339 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (_persona_it);
#line 1756 "tpf-persona-store.c"
	}
#line 352 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_debug_unindent (debug);
#line 354 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp60_ = self->priv->_contact_persona_map;
#line 354 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp61_ = gee_abstract_map_get_size ((GeeAbstractMap*) _tmp60_);
#line 354 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp62_ = _tmp61_;
#line 354 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_debug_print_line (debug, domain, level, "%u TpContact–Persona mappings:", (guint) _tmp62_);
#line 356 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_debug_indent (debug);
#line 358 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp63_ = self->priv->_contact_persona_map;
#line 358 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp64_ = gee_abstract_map_map_iterator ((GeeAbstractMap*) _tmp63_);
#line 358 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	iter1 = _tmp64_;
#line 359 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	while (TRUE) {
#line 1778 "tpf-persona-store.c"
		GeeMapIterator* _tmp65_;
		GeeMapIterator* _tmp66_;
		gpointer _tmp67_;
		const gchar* _tmp68_;
		GeeMapIterator* _tmp69_;
		gpointer _tmp70_;
#line 359 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp65_ = iter1;
#line 359 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (!(gee_map_iterator_next (_tmp65_) == TRUE)) {
#line 359 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			break;
#line 1791 "tpf-persona-store.c"
		}
#line 361 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp66_ = iter1;
#line 361 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp67_ = gee_map_iterator_get_key (_tmp66_);
#line 361 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp68_ = tp_contact_get_identifier ((TpContact*) _tmp67_);
#line 361 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp69_ = iter1;
#line 361 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp70_ = gee_map_iterator_get_value (_tmp69_);
#line 361 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		folks_debug_print_line (debug, domain, level, "%s → %p", _tmp68_, (TpfPersona*) _tmp70_);
#line 1805 "tpf-persona-store.c"
	}
#line 365 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_debug_unindent (debug);
#line 367 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp71_ = self->priv->_favourite_ids;
#line 367 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp72_ = gee_collection_get_size ((GeeCollection*) _tmp71_);
#line 367 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp73_ = _tmp72_;
#line 367 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_debug_print_line (debug, domain, level, "%u favourite TpContact IDs:", (guint) _tmp73_);
#line 369 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_debug_indent (debug);
#line 1819 "tpf-persona-store.c"
	{
		FolksSmallSet* _id_list = NULL;
		FolksSmallSet* _tmp74_;
		FolksSmallSet* _tmp75_;
		gint _id_size = 0;
		FolksSmallSet* _tmp76_;
		gint _tmp77_;
		gint _tmp78_;
		gint _id_index = 0;
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp74_ = self->priv->_favourite_ids;
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp75_ = _g_object_ref0 (_tmp74_);
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_id_list = _tmp75_;
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp76_ = _id_list;
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp77_ = gee_collection_get_size ((GeeCollection*) _tmp76_);
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp78_ = _tmp77_;
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_id_size = _tmp78_;
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_id_index = -1;
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (TRUE) {
#line 1847 "tpf-persona-store.c"
			gint _tmp79_;
			gint _tmp80_;
			gint _tmp81_;
			gchar* id = NULL;
			FolksSmallSet* _tmp82_;
			gint _tmp83_;
			gconstpointer _tmp84_;
			gchar* _tmp85_;
			const gchar* _tmp86_;
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp79_ = _id_index;
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_id_index = _tmp79_ + 1;
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp80_ = _id_index;
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp81_ = _id_size;
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (!(_tmp80_ < _tmp81_)) {
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				break;
#line 1869 "tpf-persona-store.c"
			}
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp82_ = _id_list;
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp83_ = _id_index;
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp84_ = folks_small_set_get (_tmp82_, _tmp83_);
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp85_ = g_strdup ((const gchar*) _tmp84_);
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			id = _tmp85_;
#line 373 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp86_ = id;
#line 373 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			folks_debug_print_line (debug, domain, level, "%s", _tmp86_);
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_free0 (id);
#line 1887 "tpf-persona-store.c"
		}
#line 371 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (_id_list);
#line 1891 "tpf-persona-store.c"
	}
#line 376 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_debug_unindent (debug);
#line 378 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp87_ = self->priv->_avatars;
#line 378 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp88_ = gee_abstract_map_get_size ((GeeAbstractMap*) _tmp87_);
#line 378 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp89_ = _tmp88_;
#line 378 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_debug_print_line (debug, domain, level, "Cached avatars for %u personas:", (guint) _tmp89_);
#line 380 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_debug_indent (debug);
#line 1905 "tpf-persona-store.c"
	{
		GeeIterator* _id_it = NULL;
		GeeHashMap* _tmp90_;
		GeeSet* _tmp91_;
		GeeSet* _tmp92_;
		GeeSet* _tmp93_;
		GeeIterator* _tmp94_;
		GeeIterator* _tmp95_;
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp90_ = self->priv->_avatars;
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp91_ = gee_abstract_map_get_keys ((GeeAbstractMap*) _tmp90_);
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp92_ = _tmp91_;
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp93_ = _tmp92_;
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp94_ = gee_iterable_iterator ((GeeIterable*) _tmp93_);
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp95_ = _tmp94_;
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (_tmp93_);
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_id_it = _tmp95_;
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (TRUE) {
#line 1932 "tpf-persona-store.c"
			GeeIterator* _tmp96_;
			gchar* id = NULL;
			GeeIterator* _tmp97_;
			gpointer _tmp98_;
			const gchar* _tmp99_;
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp96_ = _id_it;
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (!gee_iterator_next (_tmp96_)) {
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				break;
#line 1944 "tpf-persona-store.c"
			}
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp97_ = _id_it;
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp98_ = gee_iterator_get (_tmp97_);
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			id = (gchar*) _tmp98_;
#line 384 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp99_ = id;
#line 384 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			folks_debug_print_line (debug, domain, level, "%s", _tmp99_);
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_free0 (id);
#line 1958 "tpf-persona-store.c"
		}
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (_id_it);
#line 1962 "tpf-persona-store.c"
	}
#line 387 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_debug_unindent (debug);
#line 390 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_debug_print_line (debug, domain, level, "%s", "");
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (iter1);
#line 1970 "tpf-persona-store.c"
}


static void
__tpf_persona_store_self_contact_changed_cb_g_object_notify (GObject* _sender,
                                                             GParamSpec* pspec,
                                                             gpointer self)
{
#line 412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_self_contact_changed_cb ((TpfPersonaStore*) self, _sender, pspec);
#line 1981 "tpf-persona-store.c"
}


static void
__tpf_persona_store_contact_list_state_changed_cb_g_object_notify (GObject* _sender,
                                                                   GParamSpec* pspec,
                                                                   gpointer self)
{
#line 414 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_contact_list_state_changed_cb ((TpfPersonaStore*) self, _sender, pspec);
#line 1992 "tpf-persona-store.c"
}


static void
__tpf_persona_store_contact_list_changed_cb_tp_connection_contact_list_changed (TpConnection* _sender,
                                                                                GPtrArray* added,
                                                                                GPtrArray* removed,
                                                                                gpointer self)
{
#line 416 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_contact_list_changed_cb ((TpfPersonaStore*) self, added, removed);
#line 2004 "tpf-persona-store.c"
}


static void
__tpf_persona_store_contact_weak_notify_cb_gweak_notify (gpointer self,
                                                         GObject* object)
{
#line 428 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_contact_weak_notify_cb ((TpfPersonaStore*) self, object);
#line 2014 "tpf-persona-store.c"
}


static void
_tpf_persona_store_reset (TpfPersonaStore* self)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	gboolean _tmp2_ = FALSE;
	TpAccount* _tmp3_;
	TpAccount* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	GeeHashMap* _tmp11_;
	GeeHashMap* _tmp12_;
	GeeMap* _tmp13_;
	GeeMap* _tmp14_;
	GeeHashSet* _tmp15_;
	TpConnection* _tmp16_;
	GeeHashMap* _tmp25_;
	GeeHashMap* _tmp33_;
	FolksSmallSet* _tmp34_;
	FolksSmallSet* _tmp35_;
	GeeSet* _tmp36_;
	GeeSet* _tmp37_;
#line 393 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 395 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = folks_persona_store_get_id ((FolksPersonaStore*) self);
#line 395 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _tmp0_;
#line 395 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:395: Resetting Tpf.PersonaStore %p ('%s')", self, _tmp1_);
#line 399 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp3_ = tpf_persona_store_get_account (self);
#line 399 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp4_ = _tmp3_;
#line 399 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp5_ = tp_account_get_protocol_name (_tmp4_);
#line 399 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp6_ = _tmp5_;
#line 399 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (g_strcmp0 (_tmp6_, "local-xmpp") == 0) {
#line 399 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = TRUE;
#line 2060 "tpf-persona-store.c"
	} else {
		TpAccount* _tmp7_;
		TpAccount* _tmp8_;
		const gchar* _tmp9_;
		const gchar* _tmp10_;
#line 400 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp7_ = tpf_persona_store_get_account (self);
#line 400 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp8_ = _tmp7_;
#line 400 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp9_ = tp_account_get_protocol_name (_tmp8_);
#line 400 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp10_ = _tmp9_;
#line 400 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = g_strcmp0 (_tmp10_, "irc") == 0;
#line 2076 "tpf-persona-store.c"
	}
#line 399 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp2_) {
#line 401 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		folks_persona_store_set_trust_level ((FolksPersonaStore*) self, FOLKS_PERSONA_STORE_TRUST_NONE);
#line 2082 "tpf-persona-store.c"
	} else {
#line 403 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		folks_persona_store_set_trust_level ((FolksPersonaStore*) self, FOLKS_PERSONA_STORE_TRUST_PARTIAL);
#line 2086 "tpf-persona-store.c"
	}
#line 405 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp11_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, TPF_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 405 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_personas);
#line 405 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_personas = _tmp11_;
#line 406 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp12_ = self->priv->_personas;
#line 406 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp13_ = gee_abstract_map_get_read_only_view ((GeeAbstractMap*) _tmp12_);
#line 406 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp14_ = _tmp13_;
#line 406 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_personas_ro);
#line 406 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_personas_ro = _tmp14_;
#line 407 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp15_ = gee_hash_set_new (TPF_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 407 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_persona_set);
#line 407 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_persona_set = _tmp15_;
#line 408 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_cache_needs_update = FALSE;
#line 410 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp16_ = self->priv->_conn;
#line 410 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp16_ != NULL) {
#line 2116 "tpf-persona-store.c"
		TpConnection* _tmp17_;
		guint _tmp18_;
		GQuark _tmp19_;
		TpConnection* _tmp20_;
		guint _tmp21_;
		GQuark _tmp22_;
		TpConnection* _tmp23_;
		guint _tmp24_;
#line 412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp17_ = self->priv->_conn;
#line 412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_parse_name ("notify::self-contact", G_TYPE_OBJECT, &_tmp18_, &_tmp19_, TRUE);
#line 412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_handlers_disconnect_matched ((GObject*) _tmp17_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_DETAIL | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp18_, _tmp19_, NULL, (GCallback) __tpf_persona_store_self_contact_changed_cb_g_object_notify, self);
#line 414 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp20_ = self->priv->_conn;
#line 414 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_parse_name ("notify::contact-list-state", G_TYPE_OBJECT, &_tmp21_, &_tmp22_, TRUE);
#line 414 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_handlers_disconnect_matched ((GObject*) _tmp20_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_DETAIL | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp21_, _tmp22_, NULL, (GCallback) __tpf_persona_store_contact_list_state_changed_cb_g_object_notify, self);
#line 416 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp23_ = self->priv->_conn;
#line 416 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_parse_name ("contact-list-changed", tp_connection_get_type (), &_tmp24_, NULL, FALSE);
#line 416 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_handlers_disconnect_matched (_tmp23_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp24_, 0, NULL, (GCallback) __tpf_persona_store_contact_list_changed_cb_tp_connection_contact_list_changed, self);
#line 419 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (self->priv->_conn);
#line 419 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		self->priv->_conn = NULL;
#line 2147 "tpf-persona-store.c"
	}
#line 422 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp25_ = self->priv->_contact_persona_map;
#line 422 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp25_ != NULL) {
#line 2153 "tpf-persona-store.c"
		GeeMapIterator* iter = NULL;
		GeeHashMap* _tmp26_;
		GeeMapIterator* _tmp27_;
#line 424 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp26_ = self->priv->_contact_persona_map;
#line 424 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp27_ = gee_abstract_map_map_iterator ((GeeAbstractMap*) _tmp26_);
#line 424 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		iter = _tmp27_;
#line 425 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (TRUE) {
#line 2165 "tpf-persona-store.c"
			GeeMapIterator* _tmp28_;
			TpContact* contact = NULL;
			GeeMapIterator* _tmp29_;
			gpointer _tmp30_;
			TpContact* _tmp31_;
			TpContact* _tmp32_;
#line 425 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp28_ = iter;
#line 425 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (!(gee_map_iterator_next (_tmp28_) == TRUE)) {
#line 425 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				break;
#line 2178 "tpf-persona-store.c"
			}
#line 427 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp29_ = iter;
#line 427 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp30_ = gee_map_iterator_get_key (_tmp29_);
#line 427 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp31_ = _g_object_ref0 ((TpContact*) _tmp30_);
#line 427 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			contact = _tmp31_;
#line 428 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp32_ = contact;
#line 428 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_weak_unref ((GObject*) _tmp32_, __tpf_persona_store_contact_weak_notify_cb_gweak_notify, self);
#line 425 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (contact);
#line 2194 "tpf-persona-store.c"
		}
#line 422 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (iter);
#line 2198 "tpf-persona-store.c"
	}
#line 432 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp33_ = gee_hash_map_new (tp_contact_get_type (), NULL, NULL, TPF_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 432 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_contact_persona_map);
#line 432 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_contact_persona_map = _tmp33_;
#line 434 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp34_ = folks_small_set_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, NULL, NULL, NULL, NULL, NULL, NULL);
#line 434 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_supported_fields);
#line 434 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_supported_fields = _tmp34_;
#line 435 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp35_ = self->priv->_supported_fields;
#line 435 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp36_ = gee_abstract_set_get_read_only_view ((GeeAbstractSet*) _tmp35_);
#line 435 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp37_ = _tmp36_;
#line 435 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_supported_fields_ro);
#line 435 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_supported_fields_ro = _tmp37_;
#line 436 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_self_persona);
#line 436 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_self_persona = NULL;
#line 2226 "tpf-persona-store.c"
}


static void
_tpf_persona_store_remove_store (TpfPersonaStore* self,
                                 GeeSet* old_personas)
{
	gboolean _tmp0_;
#line 439 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 439 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (old_personas != NULL);
#line 441 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_disconnect_pending;
#line 441 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp0_ == TRUE) {
#line 2243 "tpf-persona-store.c"
		const gchar* _tmp1_;
		const gchar* _tmp2_;
#line 445 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp1_ = folks_persona_store_get_id ((FolksPersonaStore*) self);
#line 445 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = _tmp1_;
#line 445 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:445: Delaying removing store %s (%p) due to pen" \
"ding disconnect.", _tmp2_, self);
#line 447 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		self->priv->_removal_pending = TRUE;
#line 2254 "tpf-persona-store.c"
	} else {
		const gchar* _tmp3_;
		const gchar* _tmp4_;
		TpfPersonaStoreCache* _tmp5_;
#line 451 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = folks_persona_store_get_id ((FolksPersonaStore*) self);
#line 451 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp4_ = _tmp3_;
#line 451 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:451: Removing store %s (%p)", _tmp4_, self);
#line 452 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		self->priv->_removal_pending = FALSE;
#line 454 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_folks_persona_store_emit_personas_changed ((FolksPersonaStore*) self, NULL, old_personas, NULL, NULL, FOLKS_GROUP_DETAILS_CHANGE_REASON_NONE);
#line 455 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp5_ = self->priv->_cache;
#line 455 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		folks_object_cache_clear_cache ((FolksObjectCache*) _tmp5_, NULL, NULL);
#line 457 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_emit_by_name ((FolksPersonaStore*) self, "removed");
#line 2275 "tpf-persona-store.c"
	}
}


static void
tpf_persona_store_real_prepare_data_free (gpointer _data)
{
	TpfPersonaStorePrepareData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStorePrepareData, _data_);
#line 2289 "tpf-persona-store.c"
}


static void
tpf_persona_store_real_prepare_async_ready_wrapper (GObject *source_object,
                                                    GAsyncResult *res,
                                                    void *user_data)
{
	TpfPersonaStorePrepareData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 2305 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 2309 "tpf-persona-store.c"
}


static void
tpf_persona_store_real_prepare (FolksPersonaStore* base,
                                GAsyncReadyCallback _callback_,
                                gpointer _user_data_)
{
	TpfPersonaStore * self;
	TpfPersonaStorePrepareData* _data_;
	TpfPersonaStore* _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = (TpfPersonaStore*) base;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStorePrepareData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_store_real_prepare_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 2333 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_store_real_prepare_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_real_prepare_co (_data_);
#line 2343 "tpf-persona-store.c"
}


static void
tpf_persona_store_real_prepare_finish (FolksPersonaStore* base,
                                       GAsyncResult* _res_,
                                       GError** error)
{
	TpfPersonaStorePrepareData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (NULL == _data_) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return;
#line 2359 "tpf-persona-store.c"
	}
}


/**
   * Prepare the PersonaStore for use.
   *
   * See {@link Folks.PersonaStore.prepare}.
   *
   * @throws GLib.Error currently unused
   */
static void
___lambda10_ (TpfPersonaStore* self,
              TpAccount* a)
{
	TpAccount* _tmp0_;
	TpAccount* _tmp1_;
#line 507 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (a != NULL);
#line 509 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = tpf_persona_store_get_account (self);
#line 509 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _tmp0_;
#line 509 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp1_ == a) {
#line 2385 "tpf-persona-store.c"
		const gchar* _tmp2_;
		const gchar* _tmp3_;
		GeeHashSet* _tmp4_;
#line 511 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = tp_account_get_display_name (a);
#line 511 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = _tmp2_;
#line 511 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:511: Account %p (‘%s’) removed.", a, _tmp3_);
#line 512 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp4_ = self->priv->_persona_set;
#line 512 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tpf_persona_store_remove_store (self, (GeeSet*) _tmp4_);
#line 2399 "tpf-persona-store.c"
	}
}


static void
____lambda10__tp_account_manager_account_removed (TpAccountManager* _sender,
                                                  TpAccount* account,
                                                  gpointer self)
{
#line 507 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	___lambda10_ ((TpfPersonaStore*) self, account);
#line 2411 "tpf-persona-store.c"
}


static void
___lambda11_ (TpfPersonaStore* self,
              TpAccount* a,
              gboolean valid)
{
	gboolean _tmp0_ = FALSE;
#line 516 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (a != NULL);
#line 518 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (!valid) {
#line 2425 "tpf-persona-store.c"
		TpAccount* _tmp1_;
		TpAccount* _tmp2_;
#line 518 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp1_ = tpf_persona_store_get_account (self);
#line 518 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = _tmp1_;
#line 518 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp0_ = _tmp2_ == a;
#line 2434 "tpf-persona-store.c"
	} else {
#line 518 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp0_ = FALSE;
#line 2438 "tpf-persona-store.c"
	}
#line 518 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp0_) {
#line 2442 "tpf-persona-store.c"
		const gchar* _tmp3_;
		const gchar* _tmp4_;
		GeeHashSet* _tmp5_;
#line 520 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = tp_account_get_display_name (a);
#line 520 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp4_ = _tmp3_;
#line 520 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:520: Account %p (‘%s’) invalid.", a, _tmp4_);
#line 522 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp5_ = self->priv->_persona_set;
#line 522 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tpf_persona_store_remove_store (self, (GeeSet*) _tmp5_);
#line 2456 "tpf-persona-store.c"
	}
}


static void
____lambda11__tp_account_manager_account_validity_changed (TpAccountManager* _sender,
                                                           TpAccount* account,
                                                           gboolean valid,
                                                           gpointer self)
{
#line 515 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	___lambda11_ ((TpfPersonaStore*) self, account, valid);
#line 2469 "tpf-persona-store.c"
}


static void
___lambda12_ (TpfPersonaStore* self,
              TpAccount* a)
{
	TpAccount* _tmp0_;
	TpAccount* _tmp1_;
#line 525 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (a != NULL);
#line 527 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = tpf_persona_store_get_account (self);
#line 527 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _tmp0_;
#line 527 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp1_ == a) {
#line 2487 "tpf-persona-store.c"
		const gchar* _tmp2_;
		const gchar* _tmp3_;
		GeeHashSet* _tmp4_;
#line 529 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = tp_account_get_display_name (a);
#line 529 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = _tmp2_;
#line 529 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:529: Account %p (‘%s’) disabled.", a, _tmp3_);
#line 530 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp4_ = self->priv->_persona_set;
#line 530 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tpf_persona_store_remove_store (self, (GeeSet*) _tmp4_);
#line 2501 "tpf-persona-store.c"
	}
}


static void
____lambda12__tp_account_manager_account_disabled (TpAccountManager* _sender,
                                                   TpAccount* account,
                                                   gpointer self)
{
#line 525 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	___lambda12_ ((TpfPersonaStore*) self, account);
#line 2513 "tpf-persona-store.c"
}


static void
__tpf_persona_store_favourite_contacts_changed_cb_logger_favourite_contacts_changed (Logger* _sender,
                                                                                     gchar** added,
                                                                                     int added_length1,
                                                                                     gchar** removed,
                                                                                     int removed_length1,
                                                                                     gpointer self)
{
#line 543 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_favourite_contacts_changed_cb ((TpfPersonaStore*) self, added, added_length1, removed, removed_length1);
#line 2527 "tpf-persona-store.c"
}


static void
___lambda13_ (TpfPersonaStore* self,
              GObject* o,
              GAsyncResult* r)
{
	GError * _inner_error_ = NULL;
#line 547 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (r != NULL);
#line 2539 "tpf-persona-store.c"
	{
		const gchar* _tmp0_;
		const gchar* _tmp1_;
#line 551 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tpf_persona_store_initialise_favourite_contacts_finish (self, r, &_inner_error_);
#line 551 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 2547 "tpf-persona-store.c"
			goto __catch7_g_error;
		}
#line 552 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp0_ = folks_persona_store_get_id ((FolksPersonaStore*) self);
#line 552 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp1_ = _tmp0_;
#line 552 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		folks_internal_profiling_end ("initialising favourite " "contacts in Tpf.PersonaStore (ID: %s)", _tmp1_, NULL);
#line 2556 "tpf-persona-store.c"
	}
	goto __finally7;
	__catch7_g_error:
	{
		GError* e = NULL;
		GError* _tmp2_;
		const gchar* _tmp3_;
#line 549 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		e = _inner_error_;
#line 549 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_inner_error_ = NULL;
#line 557 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = e;
#line 557 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = _tmp2_->message;
#line 557 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:557: Failed to initialise favourite contacts: %" \
"s", _tmp3_);
#line 559 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (self->priv->_logger);
#line 559 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		self->priv->_logger = NULL;
#line 549 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_error_free0 (e);
#line 2580 "tpf-persona-store.c"
	}
	__finally7:
#line 549 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 549 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 549 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_clear_error (&_inner_error_);
#line 549 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return;
#line 2591 "tpf-persona-store.c"
	}
}


static void
____lambda13__gasync_ready_callback (GObject* source_object,
                                     GAsyncResult* res,
                                     gpointer self)
{
#line 547 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	___lambda13_ ((TpfPersonaStore*) self, source_object, res);
#line 547 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (self);
#line 2605 "tpf-persona-store.c"
}


static void
__tpf_persona_store_notify_connection_cb_g_object_notify (GObject* _sender,
                                                          GParamSpec* pspec,
                                                          gpointer self)
{
#line 566 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_notify_connection_cb ((TpfPersonaStore*) self, _sender, pspec);
#line 2616 "tpf-persona-store.c"
}


static void
tpf_persona_store_prepare_ready (GObject* source_object,
                                 GAsyncResult* _res_,
                                 gpointer _user_data_)
{
	TpfPersonaStorePrepareData* _data_;
#line 579 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 579 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 579 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 579 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 579 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_real_prepare_co (_data_);
#line 2636 "tpf-persona-store.c"
}


static gboolean
tpf_persona_store_real_prepare_co (TpfPersonaStorePrepareData* _data_)
{
#line 468 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 468 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 2647 "tpf-persona-store.c"
		goto _state_0;
#line 468 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 2651 "tpf-persona-store.c"
		goto _state_1;
		default:
#line 468 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 2656 "tpf-persona-store.c"
	}
	_state_0:
#line 470 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp0_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 470 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp1_ = _data_->_tmp0_;
#line 470 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_internal_profiling_start ("preparing Tpf.PersonaStore (ID: %s)", _data_->_tmp1_, NULL);
#line 472 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp3_ = _data_->self->priv->_is_prepared;
#line 472 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp3_) {
#line 472 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp2_ = TRUE;
#line 2671 "tpf-persona-store.c"
	} else {
#line 472 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp4_ = _data_->self->priv->_prepare_pending;
#line 472 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp2_ = _data_->_tmp4_;
#line 2677 "tpf-persona-store.c"
	}
#line 472 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp2_) {
#line 474 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 474 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_state_ != 0) {
#line 474 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 474 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2689 "tpf-persona-store.c"
			}
		}
#line 474 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 474 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 2696 "tpf-persona-store.c"
	}
	{
#line 479 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_prepare_pending = TRUE;
#line 481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp5_ = tp_account_manager_dup ();
#line 481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (_data_->self->priv->_account_manager);
#line 481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_account_manager = _data_->_tmp5_;
#line 489 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp6_ = _data_->self->priv->_account_manager;
#line 489 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp7_ = tp_proxy_get_factory ((TpProxy*) _data_->_tmp6_);
#line 489 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp8_ = _g_object_ref0 (_data_->_tmp7_);
#line 489 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->factory = _data_->_tmp8_;
#line 490 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp9_ = _data_->factory;
#line 490 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp10_ = g_new0 (TpContactFeature, 8);
#line 490 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp10_[0] = TP_CONTACT_FEATURE_ALIAS;
#line 490 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp10_[1] = TP_CONTACT_FEATURE_AVATAR_DATA;
#line 490 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp10_[2] = TP_CONTACT_FEATURE_AVATAR_TOKEN;
#line 490 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp10_[3] = TP_CONTACT_FEATURE_CAPABILITIES;
#line 490 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp10_[4] = TP_CONTACT_FEATURE_CLIENT_TYPES;
#line 490 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp10_[5] = TP_CONTACT_FEATURE_PRESENCE;
#line 490 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp10_[6] = TP_CONTACT_FEATURE_CONTACT_INFO;
#line 490 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp10_[7] = TP_CONTACT_FEATURE_CONTACT_GROUPS;
#line 490 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp11_ = _data_->_tmp10_;
#line 490 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp11__length1 = 8;
#line 490 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		tp_simple_client_factory_add_contact_features (_data_->_tmp9_, (guint) 8, _data_->_tmp11_);
#line 490 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp11_ = (g_free (_data_->_tmp11_), NULL);
#line 501 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp12_ = _data_->self->priv->_account_manager;
#line 501 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_connect_object ((TpProxy*) _data_->_tmp12_, "invalidated", (GCallback) __tpf_persona_store_account_manager_invalidated_cb_tp_proxy_invalidated, _data_->self, 0);
#line 507 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp13_ = _data_->self->priv->_account_manager;
#line 507 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_connect_object (_data_->_tmp13_, "account-removed", (GCallback) ____lambda10__tp_account_manager_account_removed, _data_->self, 0);
#line 515 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp14_ = _data_->self->priv->_account_manager;
#line 515 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_connect_object (_data_->_tmp14_, "account-validity-changed", (GCallback) ____lambda11__tp_account_manager_account_validity_changed, _data_->self, 0);
#line 525 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp15_ = _data_->self->priv->_account_manager;
#line 525 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_connect_object (_data_->_tmp15_, "account-disabled", (GCallback) ____lambda12__tp_account_manager_account_disabled, _data_->self, 0);
#line 534 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp16_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 534 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp17_ = _data_->_tmp16_;
#line 534 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		folks_internal_profiling_point ("created account manager in " "Tpf.PersonaStore (ID: %s)", _data_->_tmp17_);
#line 537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp18_ = _data_->self->priv->_avatars;
#line 537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		gee_abstract_map_clear ((GeeAbstractMap*) _data_->_tmp18_);
#line 539 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp19_ = _data_->self->priv->_favourite_ids;
#line 539 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		gee_abstract_collection_clear ((GeeAbstractCollection*) _data_->_tmp19_);
#line 540 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp20_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 540 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp21_ = _data_->_tmp20_;
#line 540 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp22_ = logger_new (_data_->_tmp21_);
#line 540 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (_data_->self->priv->_logger);
#line 540 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_logger = _data_->_tmp22_;
#line 541 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp23_ = _data_->self->priv->_logger;
#line 541 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_connect_object (_data_->_tmp23_, "invalidated", (GCallback) __tpf_persona_store_logger_invalidated_cb_logger_invalidated, _data_->self, 0);
#line 543 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp24_ = _data_->self->priv->_logger;
#line 543 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_connect_object (_data_->_tmp24_, "favourite-contacts-changed", (GCallback) __tpf_persona_store_favourite_contacts_changed_cb_logger_favourite_contacts_changed, _data_->self, 0);
#line 545 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp25_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 545 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp26_ = _data_->_tmp25_;
#line 545 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		folks_internal_profiling_start ("initialising favourite contacts in " "Tpf.PersonaStore (ID: %s)", _data_->_tmp26_, NULL);
#line 547 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tpf_persona_store_initialise_favourite_contacts (_data_->self, ____lambda13__gasync_ready_callback, g_object_ref (_data_->self));
#line 563 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp27_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 563 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp28_ = _data_->_tmp27_;
#line 563 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		folks_internal_profiling_point ("created logger in Tpf.PersonaStore " "(ID: %s)", _data_->_tmp28_);
#line 566 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp29_ = tpf_persona_store_get_account (_data_->self);
#line 566 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp30_ = _data_->_tmp29_;
#line 566 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_connect_object ((GObject*) _data_->_tmp30_, "notify::connection", (GCallback) __tpf_persona_store_notify_connection_cb_g_object_notify, _data_->self, 0);
#line 571 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp31_ = tpf_persona_store_get_account (_data_->self);
#line 571 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp32_ = _data_->_tmp31_;
#line 571 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp33_ = tp_account_get_connection (_data_->_tmp32_);
#line 571 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp34_ = _data_->_tmp33_;
#line 571 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_tmp34_ != NULL) {
#line 573 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp35_ = tpf_persona_store_get_account (_data_->self);
#line 573 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp36_ = _data_->_tmp35_;
#line 573 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tpf_persona_store_notify_connection_cb (_data_->self, (GObject*) _data_->_tmp36_, NULL);
#line 2827 "tpf-persona-store.c"
		} else {
#line 579 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_state_ = 1;
#line 579 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tpf_persona_store_load_cache (_data_->self, NULL, tpf_persona_store_prepare_ready, _data_);
#line 579 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 2835 "tpf-persona-store.c"
			_state_1:
#line 579 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tpf_persona_store_load_cache_finish (_data_->self, _data_->_res_);
#line 580 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tpf_persona_store_force_quiescent (_data_->self);
#line 2841 "tpf-persona-store.c"
		}
#line 583 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp37_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 583 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp38_ = _data_->_tmp37_;
#line 583 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		folks_internal_profiling_point ("loaded cache in Tpf.PersonaStore " "(ID: %s)", _data_->_tmp38_);
#line 586 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_is_prepared = TRUE;
#line 587 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_notify ((GObject*) _data_->self, "is-prepared");
#line 477 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (_data_->factory);
#line 2855 "tpf-persona-store.c"
	}
	__finally6:
	{
#line 591 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_prepare_pending = FALSE;
#line 2861 "tpf-persona-store.c"
	}
#line 477 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 477 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 477 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 477 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 2871 "tpf-persona-store.c"
	}
#line 594 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp39_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 594 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp40_ = _data_->_tmp39_;
#line 594 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_internal_profiling_end ("preparing Tpf.PersonaStore (ID: %s)", _data_->_tmp40_, NULL);
#line 468 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 468 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_state_ != 0) {
#line 468 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 468 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2887 "tpf-persona-store.c"
		}
	}
#line 468 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (_data_->_async_result);
#line 468 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 2894 "tpf-persona-store.c"
}


static void
_tpf_persona_store_account_manager_invalidated_cb (TpfPersonaStore* self,
                                                   guint domain,
                                                   gint code,
                                                   const gchar* message)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	GeeHashSet* _tmp2_;
#line 597 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 597 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (message != NULL);
#line 600 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = folks_persona_store_get_id ((FolksPersonaStore*) self);
#line 600 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _tmp0_;
#line 600 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("TpAccountManager invalidated (%u, %i, “%s”) for " "Tpf.PersonaStore %p (‘%s’).", domain, code, message, self, _tmp1_);
#line 602 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = self->priv->_persona_set;
#line 602 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_remove_store (self, (GeeSet*) _tmp2_);
#line 2921 "tpf-persona-store.c"
}


static void
_tpf_persona_store_account_invalidated_cb (TpfPersonaStore* self,
                                           guint domain,
                                           gint code,
                                           const gchar* message)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	GeeHashSet* _tmp2_;
#line 605 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 605 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (message != NULL);
#line 607 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = folks_persona_store_get_id ((FolksPersonaStore*) self);
#line 607 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _tmp0_;
#line 607 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("TpAccount invalidated (%u, %i, “%s”) for " "Tpf.PersonaStore %p (‘%s’).", domain, code, message, self, _tmp1_);
#line 609 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = self->priv->_persona_set;
#line 609 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_remove_store (self, (GeeSet*) _tmp2_);
#line 2948 "tpf-persona-store.c"
}


static void
_tpf_persona_store_logger_invalidated_cb (TpfPersonaStore* self)
{
	Logger* _tmp0_;
	guint _tmp1_;
#line 612 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 614 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_logger;
#line 614 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_signal_parse_name ("invalidated", TYPE_LOGGER, &_tmp1_, NULL, FALSE);
#line 614 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_signal_handlers_disconnect_matched (_tmp0_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp1_, 0, NULL, (GCallback) __tpf_persona_store_logger_invalidated_cb_logger_invalidated, self);
#line 616 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:616: Lost connection to the telepathy-logger se" \
"rvice.");
#line 617 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_logger);
#line 617 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_logger = NULL;
#line 2971 "tpf-persona-store.c"
}


static void
_tpf_persona_store_initialise_favourite_contacts_data_free (gpointer _data)
{
	TpfPersonaStoreInitialiseFavouriteContactsData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStoreInitialiseFavouriteContactsData, _data_);
#line 2984 "tpf-persona-store.c"
}


static void
_tpf_persona_store_initialise_favourite_contacts_async_ready_wrapper (GObject *source_object,
                                                                      GAsyncResult *res,
                                                                      void *user_data)
{
	TpfPersonaStoreInitialiseFavouriteContactsData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 3000 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 3004 "tpf-persona-store.c"
}


static void
_tpf_persona_store_initialise_favourite_contacts (TpfPersonaStore* self,
                                                  GAsyncReadyCallback _callback_,
                                                  gpointer _user_data_)
{
	TpfPersonaStoreInitialiseFavouriteContactsData* _data_;
	TpfPersonaStore* _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStoreInitialiseFavouriteContactsData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _tpf_persona_store_initialise_favourite_contacts_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 3025 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, _tpf_persona_store_initialise_favourite_contacts_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_initialise_favourite_contacts_co (_data_);
#line 3035 "tpf-persona-store.c"
}


static void
_tpf_persona_store_initialise_favourite_contacts_finish (TpfPersonaStore* self,
                                                         GAsyncResult* _res_,
                                                         GError** error)
{
	TpfPersonaStoreInitialiseFavouriteContactsData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (NULL == _data_) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return;
#line 3051 "tpf-persona-store.c"
	}
}


static void
_tpf_persona_store_initialise_favourite_contacts_ready (GObject* source_object,
                                                        GAsyncResult* _res_,
                                                        gpointer _user_data_)
{
	TpfPersonaStoreInitialiseFavouriteContactsData* _data_;
#line 626 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 626 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 626 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 626 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 626 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_initialise_favourite_contacts_co (_data_);
#line 3072 "tpf-persona-store.c"
}


static void
_vala_array_add6 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
#line 631 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if ((*length) == (*size)) {
#line 631 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 631 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 3088 "tpf-persona-store.c"
	}
#line 631 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	(*array)[(*length)++] = value;
#line 631 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	(*array)[*length] = NULL;
#line 3094 "tpf-persona-store.c"
}


static gboolean
_tpf_persona_store_initialise_favourite_contacts_co (TpfPersonaStoreInitialiseFavouriteContactsData* _data_)
{
#line 621 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 621 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 3105 "tpf-persona-store.c"
		goto _state_0;
#line 621 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 3109 "tpf-persona-store.c"
		goto _state_1;
#line 621 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 2:
#line 3113 "tpf-persona-store.c"
		goto _state_2;
		default:
#line 621 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 3118 "tpf-persona-store.c"
	}
	_state_0:
#line 623 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp0_ = _data_->self->priv->_logger;
#line 623 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp0_ == NULL) {
#line 624 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 624 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_state_ != 0) {
#line 624 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 624 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 3133 "tpf-persona-store.c"
			}
		}
#line 624 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 624 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 3140 "tpf-persona-store.c"
	}
#line 626 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp1_ = _data_->self->priv->_logger;
#line 626 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_state_ = 1;
#line 626 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	logger_prepare (_data_->_tmp1_, _tpf_persona_store_initialise_favourite_contacts_ready, _data_);
#line 626 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 3150 "tpf-persona-store.c"
	_state_1:
#line 626 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	logger_prepare_finish (_data_->_tmp1_, _data_->_res_, &_data_->_inner_error_);
#line 626 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 626 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 626 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 626 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 3162 "tpf-persona-store.c"
	}
#line 628 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp2_ = _data_->self->priv->_logger;
#line 628 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp3_ = 0;
#line 628 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_state_ = 2;
#line 628 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	logger_get_favourite_contacts (_data_->_tmp2_, _tpf_persona_store_initialise_favourite_contacts_ready, _data_);
#line 628 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 3174 "tpf-persona-store.c"
	_state_2:
#line 628 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp4_ = logger_get_favourite_contacts_finish (_data_->_tmp2_, _data_->_res_, &_data_->_tmp3_, &_data_->_inner_error_);
#line 628 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->contacts = _data_->_tmp4_;
#line 628 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->contacts_length1 = _data_->_tmp3_;
#line 628 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_contacts_size_ = _data_->contacts_length1;
#line 628 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 628 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 628 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 628 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 3192 "tpf-persona-store.c"
	}
#line 629 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp5_ = _data_->contacts;
#line 629 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp5__length1 = _data_->contacts_length1;
#line 629 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp6_ = g_new0 (gchar*, 0 + 1);
#line 629 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp7_ = _data_->_tmp6_;
#line 629 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp7__length1 = 0;
#line 629 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_favourite_contacts_changed_cb (_data_->self, _data_->_tmp5_, _data_->_tmp5__length1, _data_->_tmp7_, 0);
#line 629 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp7_ = (_vala_array_free (_data_->_tmp7_, _data_->_tmp7__length1, (GDestroyNotify) g_free), NULL);
#line 631 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp8_ = _data_->self->priv->_always_writeable_properties;
#line 631 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp8__length1 = _data_->self->priv->_always_writeable_properties_length1;
#line 631 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp9_ = g_strdup ("is-favourite");
#line 631 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_vala_array_add6 (&_data_->self->priv->_always_writeable_properties, &_data_->self->priv->_always_writeable_properties_length1, &_data_->self->priv->__always_writeable_properties_size_, _data_->_tmp9_);
#line 632 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_notify ((GObject*) _data_->self, "always-writeable-properties");
#line 621 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->contacts = (_vala_array_free (_data_->contacts, _data_->contacts_length1, (GDestroyNotify) g_free), NULL);
#line 621 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 621 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_state_ != 0) {
#line 621 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 621 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 3228 "tpf-persona-store.c"
		}
	}
#line 621 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (_data_->_async_result);
#line 621 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 3235 "tpf-persona-store.c"
}


static TpfPersona*
_tpf_persona_store_lookup_persona_by_id (TpfPersonaStore* self,
                                         const gchar* id)
{
	TpfPersona* result = NULL;
	GeeMapIterator* iter = NULL;
	GeeHashMap* _tmp0_;
	GeeMapIterator* _tmp1_;
#line 635 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 635 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (id != NULL, NULL);
#line 639 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_contact_persona_map;
#line 639 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = gee_abstract_map_map_iterator ((GeeAbstractMap*) _tmp0_);
#line 639 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	iter = _tmp1_;
#line 640 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	while (TRUE) {
#line 3259 "tpf-persona-store.c"
		GeeMapIterator* _tmp2_;
		GeeMapIterator* _tmp3_;
		gpointer _tmp4_;
		const gchar* _tmp5_;
#line 640 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = iter;
#line 640 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (!gee_map_iterator_next (_tmp2_)) {
#line 640 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			break;
#line 3270 "tpf-persona-store.c"
		}
#line 642 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = iter;
#line 642 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp4_ = gee_map_iterator_get_key (_tmp3_);
#line 642 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp5_ = tp_contact_get_identifier ((TpContact*) _tmp4_);
#line 642 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (g_strcmp0 (_tmp5_, id) == 0) {
#line 3280 "tpf-persona-store.c"
			GeeMapIterator* _tmp6_;
			gpointer _tmp7_;
#line 644 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp6_ = iter;
#line 644 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp7_ = gee_map_iterator_get_value (_tmp6_);
#line 644 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			result = (TpfPersona*) _tmp7_;
#line 644 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (iter);
#line 644 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return result;
#line 3293 "tpf-persona-store.c"
		}
	}
#line 647 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = NULL;
#line 647 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (iter);
#line 647 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 3302 "tpf-persona-store.c"
}


static void
_tpf_persona_store_favourite_contacts_changed_cb (TpfPersonaStore* self,
                                                  gchar** added,
                                                  int added_length1,
                                                  gchar** removed,
                                                  int removed_length1)
{
#line 650 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 3315 "tpf-persona-store.c"
	{
		gchar** id_collection = NULL;
		gint id_collection_length1 = 0;
		gint _id_collection_size_ = 0;
		gint id_it = 0;
#line 652 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		id_collection = added;
#line 652 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		id_collection_length1 = added_length1;
#line 652 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		for (id_it = 0; id_it < added_length1; id_it = id_it + 1) {
#line 3327 "tpf-persona-store.c"
			gchar* _tmp0_;
			gchar* id = NULL;
#line 652 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp0_ = g_strdup (id_collection[id_it]);
#line 652 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			id = _tmp0_;
#line 3334 "tpf-persona-store.c"
			{
				FolksSmallSet* _tmp1_;
				const gchar* _tmp2_;
				TpfPersona* p = NULL;
				const gchar* _tmp3_;
				TpfPersona* _tmp4_;
				TpfPersona* _tmp5_;
#line 654 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp1_ = self->priv->_favourite_ids;
#line 654 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp2_ = id;
#line 654 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp1_, _tmp2_);
#line 655 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp3_ = id;
#line 655 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp4_ = _tpf_persona_store_lookup_persona_by_id (self, _tmp3_);
#line 655 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				p = _tmp4_;
#line 656 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp5_ = p;
#line 656 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				if (_tmp5_ != NULL) {
#line 3358 "tpf-persona-store.c"
					TpfPersona* _tmp6_;
#line 658 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_tmp6_ = p;
#line 658 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_tpf_persona_set_is_favourite (_tmp6_, TRUE);
#line 3364 "tpf-persona-store.c"
				}
#line 652 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_g_object_unref0 (p);
#line 652 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_g_free0 (id);
#line 3370 "tpf-persona-store.c"
			}
		}
	}
	{
		gchar** id_collection = NULL;
		gint id_collection_length1 = 0;
		gint _id_collection_size_ = 0;
		gint id_it = 0;
#line 661 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		id_collection = removed;
#line 661 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		id_collection_length1 = removed_length1;
#line 661 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		for (id_it = 0; id_it < removed_length1; id_it = id_it + 1) {
#line 3385 "tpf-persona-store.c"
			gchar* _tmp7_;
			gchar* id = NULL;
#line 661 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp7_ = g_strdup (id_collection[id_it]);
#line 661 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			id = _tmp7_;
#line 3392 "tpf-persona-store.c"
			{
				FolksSmallSet* _tmp8_;
				const gchar* _tmp9_;
				TpfPersona* p = NULL;
				const gchar* _tmp10_;
				TpfPersona* _tmp11_;
				TpfPersona* _tmp12_;
#line 663 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp8_ = self->priv->_favourite_ids;
#line 663 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp9_ = id;
#line 663 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				gee_abstract_collection_remove ((GeeAbstractCollection*) _tmp8_, _tmp9_);
#line 664 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp10_ = id;
#line 664 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp11_ = _tpf_persona_store_lookup_persona_by_id (self, _tmp10_);
#line 664 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				p = _tmp11_;
#line 665 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp12_ = p;
#line 665 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				if (_tmp12_ != NULL) {
#line 3416 "tpf-persona-store.c"
					TpfPersona* _tmp13_;
#line 667 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_tmp13_ = p;
#line 667 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_tpf_persona_set_is_favourite (_tmp13_, FALSE);
#line 3422 "tpf-persona-store.c"
				}
#line 661 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_g_object_unref0 (p);
#line 661 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_g_free0 (id);
#line 3428 "tpf-persona-store.c"
			}
		}
	}
}


static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
#line 697 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_atomic_int_inc (&_data1_->_ref_count_);
#line 697 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return _data1_;
#line 3442 "tpf-persona-store.c"
}


static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
#line 697 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
#line 3453 "tpf-persona-store.c"
		TpfPersonaStore* self;
#line 697 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		self = _data1_->self;
#line 697 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (_data1_->old_personas);
#line 697 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (self);
#line 697 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_slice_free (Block1Data, _data1_);
#line 3463 "tpf-persona-store.c"
	}
}


static void
___lambda15_ (TpfPersonaStore* self,
              GObject* o2,
              GAsyncResult* r2)
{
#line 720 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (r2 != NULL);
#line 722 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_load_cache_finish (self, r2);
#line 3477 "tpf-persona-store.c"
}


static void
____lambda15__gasync_ready_callback (GObject* source_object,
                                     GAsyncResult* res,
                                     gpointer self)
{
#line 720 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	___lambda15_ ((TpfPersonaStore*) self, source_object, res);
#line 720 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (self);
#line 3490 "tpf-persona-store.c"
}


static void
____lambda14_ (Block1Data* _data1_,
               GObject* o,
               GAsyncResult* r)
{
	TpfPersonaStore* self;
	gboolean _tmp0_;
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = _data1_->self;
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (r != NULL);
#line 714 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_store_cache_finish (self, r);
#line 716 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_disconnect_pending = FALSE;
#line 718 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_removal_pending;
#line 718 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp0_ == FALSE) {
#line 3513 "tpf-persona-store.c"
		GeeHashSet* _tmp1_;
#line 720 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp1_ = _data1_->old_personas;
#line 720 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tpf_persona_store_load_cache (self, _tmp1_, ____lambda15__gasync_ready_callback, g_object_ref (self));
#line 3519 "tpf-persona-store.c"
	} else {
		gboolean _tmp2_;
		GeeHashSet* _tmp3_;
#line 732 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = self->priv->_disconnect_pending;
#line 732 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_vala_assert (_tmp2_ == FALSE, "this._disconnect_pending == false");
#line 733 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = _data1_->old_personas;
#line 733 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tpf_persona_store_remove_store (self, (GeeSet*) _tmp3_);
#line 3531 "tpf-persona-store.c"
	}
}


static void
_____lambda14__gasync_ready_callback (GObject* source_object,
                                      GAsyncResult* res,
                                      gpointer self)
{
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	____lambda14_ (self, source_object, res);
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	block1_data_unref (self);
#line 3545 "tpf-persona-store.c"
}


static void
_tpf_persona_store_notify_connection_cb (TpfPersonaStore* self,
                                         GObject* s,
                                         GParamSpec* p)
{
	TpAccount* account = NULL;
	TpAccount* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	TpAccount* _tmp3_;
	TpConnection* _tmp4_;
	TpConnection* _tmp5_;
	TpAccount* _tmp6_;
	TpConnection* _tmp7_;
	TpConnection* _tmp8_;
#line 674 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 674 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (s != NULL);
#line 676 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (s, tp_account_get_type ()) ? ((TpAccount*) s) : NULL);
#line 676 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	account = _tmp0_;
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = folks_persona_store_get_id ((FolksPersonaStore*) self);
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = _tmp1_;
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp3_ = account;
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp4_ = tp_account_get_connection (_tmp3_);
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp5_ = _tmp4_;
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:678: Account '%s' connection changed to %p", _tmp2_, _tmp5_);
#line 682 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp6_ = account;
#line 682 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp7_ = tp_account_get_connection (_tmp6_);
#line 682 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp8_ = _tmp7_;
#line 682 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp8_ == NULL) {
#line 3592 "tpf-persona-store.c"
		FolksSmallSet* _tmp9_;
		TpConnection* _tmp10_;
#line 684 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp9_ = self->priv->_supported_fields;
#line 684 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		gee_abstract_collection_clear ((GeeAbstractCollection*) _tmp9_);
#line 685 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_notify ((GObject*) self, "supported-fields");
#line 697 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp10_ = self->priv->_conn;
#line 697 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_tmp10_ != NULL) {
#line 3605 "tpf-persona-store.c"
			Block1Data* _data1_;
			GeeHashSet* _tmp11_;
			GeeHashSet* _tmp12_;
			gboolean old_cache_needs_update = FALSE;
			gboolean _tmp13_;
			gboolean _tmp14_;
			GeeHashSet* _tmp15_;
#line 697 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data1_ = g_slice_new0 (Block1Data);
#line 697 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data1_->_ref_count_ = 1;
#line 697 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data1_->self = g_object_ref (self);
#line 699 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			self->priv->_disconnect_pending = TRUE;
#line 703 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp11_ = self->priv->_persona_set;
#line 703 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp12_ = _g_object_ref0 (_tmp11_);
#line 703 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data1_->old_personas = _tmp12_;
#line 704 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp13_ = self->priv->_cache_needs_update;
#line 704 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			old_cache_needs_update = _tmp13_;
#line 705 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tpf_persona_store_reset (self);
#line 707 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp14_ = old_cache_needs_update;
#line 707 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (_tmp14_) {
#line 709 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tpf_persona_store_set_cache_needs_update (self);
#line 3639 "tpf-persona-store.c"
			}
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp15_ = _data1_->old_personas;
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tpf_persona_store_store_cache (self, _tmp15_, _____lambda14__gasync_ready_callback, block1_data_ref (_data1_));
#line 697 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			block1_data_unref (_data1_);
#line 697 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data1_ = NULL;
#line 3649 "tpf-persona-store.c"
		}
#line 740 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tpf_persona_store_force_quiescent (self);
#line 742 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (account);
#line 742 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return;
#line 3657 "tpf-persona-store.c"
	}
#line 745 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_notify_connection_cb_async (self, NULL, NULL);
#line 674 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (account);
#line 3663 "tpf-persona-store.c"
}


static void
_tpf_persona_store_notify_connection_cb_async_data_free (gpointer _data)
{
	TpfPersonaStoreNotifyConnectionCbAsyncData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStoreNotifyConnectionCbAsyncData, _data_);
#line 3676 "tpf-persona-store.c"
}


static void
_tpf_persona_store_notify_connection_cb_async_async_ready_wrapper (GObject *source_object,
                                                                   GAsyncResult *res,
                                                                   void *user_data)
{
	TpfPersonaStoreNotifyConnectionCbAsyncData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 3692 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 3696 "tpf-persona-store.c"
}


static void
_tpf_persona_store_notify_connection_cb_async (TpfPersonaStore* self,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_)
{
	TpfPersonaStoreNotifyConnectionCbAsyncData* _data_;
	TpfPersonaStore* _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStoreNotifyConnectionCbAsyncData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _tpf_persona_store_notify_connection_cb_async_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 3717 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, _tpf_persona_store_notify_connection_cb_async_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_notify_connection_cb_async_co (_data_);
#line 3727 "tpf-persona-store.c"
}


static void
_tpf_persona_store_notify_connection_cb_finish (TpfPersonaStore* self,
                                                GAsyncResult* _res_)
{
	TpfPersonaStoreNotifyConnectionCbAsyncData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 3738 "tpf-persona-store.c"
}


static void
_tpf_persona_store_notify_connection_cb_async_ready (GObject* source_object,
                                                     GAsyncResult* _res_,
                                                     gpointer _user_data_)
{
	TpfPersonaStoreNotifyConnectionCbAsyncData* _data_;
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_notify_connection_cb_async_co (_data_);
#line 3758 "tpf-persona-store.c"
}


static void
_vala_array_add7 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
#line 814 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if ((*length) == (*size)) {
#line 814 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 814 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 3774 "tpf-persona-store.c"
	}
#line 814 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	(*array)[(*length)++] = value;
#line 814 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	(*array)[*length] = NULL;
#line 3780 "tpf-persona-store.c"
}


static void
_vala_array_add8 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
#line 842 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if ((*length) == (*size)) {
#line 842 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 842 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 3796 "tpf-persona-store.c"
	}
#line 842 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	(*array)[(*length)++] = value;
#line 842 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	(*array)[*length] = NULL;
#line 3802 "tpf-persona-store.c"
}


static gboolean
_tpf_persona_store_notify_connection_cb_async_co (TpfPersonaStoreNotifyConnectionCbAsyncData* _data_)
{
#line 748 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 748 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 3813 "tpf-persona-store.c"
		goto _state_0;
#line 748 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 3817 "tpf-persona-store.c"
		goto _state_1;
#line 748 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 2:
#line 3821 "tpf-persona-store.c"
		goto _state_2;
		default:
#line 748 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 3826 "tpf-persona-store.c"
	}
	_state_0:
#line 750 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp0_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 750 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp1_ = _data_->_tmp0_;
#line 750 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:750: _notify_connection_cb_async() for Tpf.Pers" \
"onaStore %p ('%s').", _data_->self, _data_->_tmp1_);
#line 753 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp2_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 753 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp3_ = _data_->_tmp2_;
#line 753 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_internal_profiling_start ("notify connection for Tpf.PersonaStore " "(ID: %s)", _data_->_tmp3_, NULL);
#line 3841 "tpf-persona-store.c"
	{
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp4_ = tpf_persona_store_get_account (_data_->self);
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp5_ = _data_->_tmp4_;
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp6_ = tp_account_get_connection (_data_->_tmp5_);
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp7_ = _data_->_tmp6_;
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp8_ = g_new0 (GQuark, 6);
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp8_[0] = tp_connection_get_feature_quark_contact_list ();
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp8_[1] = tp_connection_get_feature_quark_contact_groups ();
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp8_[2] = tp_connection_get_feature_quark_contact_info ();
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp8_[3] = tp_connection_get_feature_quark_connected ();
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp8_[4] = tp_connection_get_feature_quark_aliasing ();
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp8_[5] = (GQuark) 0;
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp9_ = _data_->_tmp8_;
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp9__length1 = 6;
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_state_ = 1;
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		tp_proxy_prepare_async ((TpProxy*) _data_->_tmp7_, _data_->_tmp9_, _tpf_persona_store_notify_connection_cb_async_ready, _data_);
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 3875 "tpf-persona-store.c"
		_state_1:
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		tp_proxy_prepare_finish ((TpProxy*) _data_->_tmp7_, _data_->_res_, &_data_->_inner_error_);
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp9_ = (g_free (_data_->_tmp9_), NULL);
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 3883 "tpf-persona-store.c"
			goto __catch8_g_error;
		}
	}
	goto __finally8;
	__catch8_g_error:
	{
#line 757 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->e = _data_->_inner_error_;
#line 757 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = NULL;
#line 770 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp10_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 770 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp11_ = _data_->_tmp10_;
#line 770 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp12_ = _data_->e;
#line 770 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp13_ = _data_->_tmp12_->message;
#line 770 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:770: Failed to connect CM for Tpf.PersonaStore " \
"%p ('%s'): %s", _data_->self, _data_->_tmp11_, _data_->_tmp13_);
#line 775 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_state_ = 2;
#line 775 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tpf_persona_store_load_cache (_data_->self, NULL, _tpf_persona_store_notify_connection_cb_async_ready, _data_);
#line 775 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 3910 "tpf-persona-store.c"
		_state_2:
#line 775 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tpf_persona_store_load_cache_finish (_data_->self, _data_->_res_);
#line 776 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tpf_persona_store_force_quiescent (_data_->self);
#line 778 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_error_free0 (_data_->e);
#line 778 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 778 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_state_ != 0) {
#line 778 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 778 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 3926 "tpf-persona-store.c"
			}
		}
#line 778 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 778 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 3933 "tpf-persona-store.c"
	}
	__finally8:
#line 757 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 757 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 757 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_clear_error (&_data_->_inner_error_);
#line 757 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 757 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 3946 "tpf-persona-store.c"
	}
#line 781 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp14_ = tpf_persona_store_get_account (_data_->self);
#line 781 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp15_ = _data_->_tmp14_;
#line 781 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp16_ = tp_account_get_connection (_data_->_tmp15_);
#line 781 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp17_ = _data_->_tmp16_;
#line 781 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (!tp_proxy_has_interface_by_id ((TpProxy*) _data_->_tmp17_, tp_iface_quark_connection_interface_contact_list ())) {
#line 784 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:784: %s", "Connection does not implement ContactList iface; " "legacy CMs are not supported any more.");
#line 787 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp18_ = _data_->self->priv->_persona_set;
#line 787 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tpf_persona_store_remove_store (_data_->self, (GeeSet*) _data_->_tmp18_);
#line 789 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 789 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_state_ != 0) {
#line 789 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 789 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 3972 "tpf-persona-store.c"
			}
		}
#line 789 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 789 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 3979 "tpf-persona-store.c"
	}
#line 793 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_unload_cache (_data_->self);
#line 795 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp19_ = tpf_persona_store_get_account (_data_->self);
#line 795 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp20_ = _data_->_tmp19_;
#line 795 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp21_ = tp_account_get_connection (_data_->_tmp20_);
#line 795 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp22_ = _data_->_tmp21_;
#line 795 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp23_ = _g_object_ref0 (_data_->_tmp22_);
#line 795 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self->priv->_conn);
#line 795 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self->priv->_conn = _data_->_tmp23_;
#line 799 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp24_ = _data_->self->priv->_conn;
#line 799 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_signal_connect_object ((GObject*) _data_->_tmp24_, "notify::self-contact", (GCallback) __tpf_persona_store_self_contact_changed_cb_g_object_notify, _data_->self, 0);
#line 801 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp25_ = _data_->self->priv->_conn;
#line 801 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_signal_connect_object ((GObject*) _data_->_tmp25_, "notify::contact-list-state", (GCallback) __tpf_persona_store_contact_list_state_changed_cb_g_object_notify, _data_->self, 0);
#line 806 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_freeze_notify ((GObject*) _data_->self);
#line 807 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_marshall_supported_fields (_data_->self);
#line 808 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_notify ((GObject*) _data_->self, "supported-fields");
#line 810 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp26_ = _data_->self->priv->_conn;
#line 810 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (tp_connection_get_group_storage (_data_->_tmp26_) != TP_CONTACT_METADATA_STORAGE_TYPE_NONE) {
#line 812 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_can_group_personas = FOLKS_MAYBE_BOOL_TRUE;
#line 814 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp27_ = _data_->self->priv->_always_writeable_properties;
#line 814 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp27__length1 = _data_->self->priv->_always_writeable_properties_length1;
#line 814 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp28_ = g_strdup ("groups");
#line 814 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_vala_array_add7 (&_data_->self->priv->_always_writeable_properties, &_data_->self->priv->_always_writeable_properties_length1, &_data_->self->priv->__always_writeable_properties_size_, _data_->_tmp28_);
#line 815 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_notify ((GObject*) _data_->self, "always-writeable-properties");
#line 4027 "tpf-persona-store.c"
	} else {
#line 819 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_can_group_personas = FOLKS_MAYBE_BOOL_FALSE;
#line 4031 "tpf-persona-store.c"
	}
#line 821 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_notify ((GObject*) _data_->self, "can-group-personas");
#line 823 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp29_ = _data_->self->priv->_conn;
#line 823 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (tp_connection_get_can_change_contact_list (_data_->_tmp29_)) {
#line 825 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_can_add_personas = FOLKS_MAYBE_BOOL_TRUE;
#line 826 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_can_remove_personas = FOLKS_MAYBE_BOOL_TRUE;
#line 4043 "tpf-persona-store.c"
	} else {
#line 830 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_can_add_personas = FOLKS_MAYBE_BOOL_FALSE;
#line 831 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_can_remove_personas = FOLKS_MAYBE_BOOL_FALSE;
#line 4049 "tpf-persona-store.c"
	}
#line 833 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_notify ((GObject*) _data_->self, "can-add-personas");
#line 834 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_notify ((GObject*) _data_->self, "can-remove-personas");
#line 836 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->new_can_alias = FOLKS_MAYBE_BOOL_FALSE;
#line 838 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp30_ = _data_->self->priv->_conn;
#line 838 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (tp_connection_can_set_contact_alias (_data_->_tmp30_)) {
#line 840 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->new_can_alias = FOLKS_MAYBE_BOOL_TRUE;
#line 842 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp31_ = _data_->self->priv->_always_writeable_properties;
#line 842 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp31__length1 = _data_->self->priv->_always_writeable_properties_length1;
#line 842 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp32_ = g_strdup ("alias");
#line 842 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_vala_array_add8 (&_data_->self->priv->_always_writeable_properties, &_data_->self->priv->_always_writeable_properties_length1, &_data_->self->priv->__always_writeable_properties_size_, _data_->_tmp32_);
#line 843 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_notify ((GObject*) _data_->self, "always-writeable-properties");
#line 4073 "tpf-persona-store.c"
	}
#line 846 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp33_ = _data_->new_can_alias;
#line 846 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self->priv->_can_alias_personas = _data_->_tmp33_;
#line 847 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_notify ((GObject*) _data_->self, "can-alias-personas");
#line 849 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_thaw_notify ((GObject*) _data_->self);
#line 852 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp34_ = _data_->self->priv->_conn;
#line 852 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_self_contact_changed_cb (_data_->self, (GObject*) _data_->_tmp34_, NULL);
#line 853 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp35_ = _data_->self->priv->_conn;
#line 853 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_contact_list_state_changed_cb (_data_->self, (GObject*) _data_->_tmp35_, NULL);
#line 855 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp36_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 855 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp37_ = _data_->_tmp36_;
#line 855 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_internal_profiling_end ("notify connection for Tpf.PersonaStore " "(ID: %s)", _data_->_tmp37_, NULL);
#line 748 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 748 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_state_ != 0) {
#line 748 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 748 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 4105 "tpf-persona-store.c"
		}
	}
#line 748 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (_data_->_async_result);
#line 748 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 4112 "tpf-persona-store.c"
}


static TpContactInfoFieldSpec*
_vala_TpContactInfoFieldSpec_copy (TpContactInfoFieldSpec* self)
{
#line 871 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return g_boxed_copy (tp_contact_info_field_spec_get_type (), self);
#line 4121 "tpf-persona-store.c"
}


static gpointer
__vala_TpContactInfoFieldSpec_copy0 (gpointer self)
{
#line 871 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return self ? _vala_TpContactInfoFieldSpec_copy (self) : NULL;
#line 4130 "tpf-persona-store.c"
}


static void
_vala_TpContactInfoFieldSpec_free (TpContactInfoFieldSpec* self)
{
#line 871 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_boxed_free (tp_contact_info_field_spec_get_type (), self);
#line 4139 "tpf-persona-store.c"
}


static void
__vala_TpContactInfoFieldSpec_free0_ (gpointer var)
{
#line 867 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	(var == NULL) ? NULL : (var = (_vala_TpContactInfoFieldSpec_free (var), NULL));
#line 4148 "tpf-persona-store.c"
}


static inline void
_g_list_free___vala_TpContactInfoFieldSpec_free0_ (GList* self)
{
#line 867 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_list_free_full (self, (GDestroyNotify) __vala_TpContactInfoFieldSpec_free0_);
#line 4157 "tpf-persona-store.c"
}


static void
_tpf_persona_store_marshall_supported_fields (TpfPersonaStore* self)
{
	TpConnection* connection = NULL;
	TpAccount* _tmp0_;
	TpAccount* _tmp1_;
	TpConnection* _tmp2_;
	TpConnection* _tmp3_;
	TpConnection* _tmp4_;
	TpConnection* _tmp5_;
#line 859 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 861 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = tpf_persona_store_get_account (self);
#line 861 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _tmp0_;
#line 861 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = tp_account_get_connection (_tmp1_);
#line 861 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp3_ = _tmp2_;
#line 861 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp4_ = _g_object_ref0 (_tmp3_);
#line 861 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	connection = _tmp4_;
#line 862 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp5_ = connection;
#line 862 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp5_ != NULL) {
#line 4189 "tpf-persona-store.c"
		FolksSmallSet* _tmp6_;
		TpContactInfoFlags ci_flags = 0;
		TpConnection* _tmp7_;
		TpContactInfoFlags _tmp8_;
#line 864 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp6_ = self->priv->_supported_fields;
#line 864 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		gee_abstract_collection_clear ((GeeAbstractCollection*) _tmp6_);
#line 866 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp7_ = connection;
#line 866 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		ci_flags = tp_connection_get_contact_info_flags (_tmp7_);
#line 867 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp8_ = ci_flags;
#line 867 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if ((_tmp8_ & TP_CONTACT_INFO_FLAG_CAN_SET) != 0) {
#line 4206 "tpf-persona-store.c"
			GList* field_specs = NULL;
			TpConnection* _tmp9_;
			GList* _tmp10_;
			GList* _tmp11_;
#line 869 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp9_ = connection;
#line 869 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp10_ = tp_connection_dup_contact_info_supported_fields (_tmp9_);
#line 869 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			field_specs = _tmp10_;
#line 871 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp11_ = field_specs;
#line 4219 "tpf-persona-store.c"
			{
				GList* field_spec_collection = NULL;
				GList* field_spec_it = NULL;
#line 871 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				field_spec_collection = _tmp11_;
#line 871 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				for (field_spec_it = field_spec_collection; field_spec_it != NULL; field_spec_it = field_spec_it->next) {
#line 4227 "tpf-persona-store.c"
					TpContactInfoFieldSpec* _tmp12_;
					TpContactInfoFieldSpec* field_spec = NULL;
#line 871 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_tmp12_ = __vala_TpContactInfoFieldSpec_copy0 ((TpContactInfoFieldSpec*) field_spec_it->data);
#line 871 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					field_spec = _tmp12_;
#line 4234 "tpf-persona-store.c"
					{
						FolksSmallSet* _tmp13_;
						TpContactInfoFieldSpec* _tmp14_;
						const gchar* _tmp15_;
#line 879 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
						_tmp13_ = self->priv->_supported_fields;
#line 879 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
						_tmp14_ = field_spec;
#line 879 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
						_tmp15_ = _tmp14_->name;
#line 879 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
						gee_abstract_collection_add ((GeeAbstractCollection*) _tmp13_, _tmp15_);
#line 871 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
						__vala_TpContactInfoFieldSpec_free0 (field_spec);
#line 4249 "tpf-persona-store.c"
					}
				}
			}
#line 867 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			(field_specs == NULL) ? NULL : (field_specs = (_g_list_free___vala_TpContactInfoFieldSpec_free0_ (field_specs), NULL));
#line 4255 "tpf-persona-store.c"
		}
	}
#line 859 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (connection);
#line 4260 "tpf-persona-store.c"
}


static void
_tpf_persona_store_load_cache_data_free (gpointer _data)
{
	TpfPersonaStoreLoadCacheData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->old_personas);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStoreLoadCacheData, _data_);
#line 4275 "tpf-persona-store.c"
}


static void
_tpf_persona_store_load_cache_async_ready_wrapper (GObject *source_object,
                                                   GAsyncResult *res,
                                                   void *user_data)
{
	TpfPersonaStoreLoadCacheData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 4291 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 4295 "tpf-persona-store.c"
}


static void
_tpf_persona_store_load_cache (TpfPersonaStore* self,
                               GeeHashSet* old_personas,
                               GAsyncReadyCallback _callback_,
                               gpointer _user_data_)
{
	TpfPersonaStoreLoadCacheData* _data_;
	TpfPersonaStore* _tmp0_;
	GeeHashSet* _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStoreLoadCacheData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _tpf_persona_store_load_cache_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 4318 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, _tpf_persona_store_load_cache_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _g_object_ref0 (old_personas);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->old_personas);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->old_personas = _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_load_cache_co (_data_);
#line 4334 "tpf-persona-store.c"
}


static void
_tpf_persona_store_load_cache_finish (TpfPersonaStore* self,
                                      GAsyncResult* _res_)
{
	TpfPersonaStoreLoadCacheData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 4345 "tpf-persona-store.c"
}


/**
   * If our account is disconnected, we want to continue to export a static
   * view of personas from the cache. old_personas will be notified as removed.
   *
   * This method is safe to call multiple times concurrently. Previous calls
   * will be cancelled by subsequent calls.
   */
static void
_tpf_persona_store_load_cache_ready (GObject* source_object,
                                     GAsyncResult* _res_,
                                     gpointer _user_data_)
{
	TpfPersonaStoreLoadCacheData* _data_;
#line 919 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 919 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 919 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 919 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 919 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_load_cache_co (_data_);
#line 4372 "tpf-persona-store.c"
}


static gboolean
_tpf_persona_store_load_cache_co (TpfPersonaStoreLoadCacheData* _data_)
{
#line 892 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 892 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 4383 "tpf-persona-store.c"
		goto _state_0;
#line 892 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 4387 "tpf-persona-store.c"
		goto _state_1;
		default:
#line 892 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 4392 "tpf-persona-store.c"
	}
	_state_0:
#line 895 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp1_ = tpf_persona_store_get_account (_data_->self);
#line 895 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp2_ = _data_->_tmp1_;
#line 895 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_get (_data_->_tmp2_, "enabled", &_data_->_tmp3_, NULL);
#line 895 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp4_ = _data_->_tmp3_;
#line 895 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp4_ == FALSE) {
#line 895 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp0_ = TRUE;
#line 4407 "tpf-persona-store.c"
	} else {
#line 895 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp5_ = tpf_persona_store_get_account (_data_->self);
#line 895 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp6_ = _data_->_tmp5_;
#line 895 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_get (_data_->_tmp6_, "valid", &_data_->_tmp7_, NULL);
#line 895 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp8_ = _data_->_tmp7_;
#line 895 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp0_ = _data_->_tmp8_ == FALSE;
#line 4419 "tpf-persona-store.c"
	}
#line 895 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp0_) {
#line 899 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp10_ = tpf_persona_store_get_account (_data_->self);
#line 899 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp11_ = _data_->_tmp10_;
#line 899 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_get (_data_->_tmp11_, "enabled", &_data_->_tmp12_, NULL);
#line 899 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp13_ = _data_->_tmp12_;
#line 899 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_tmp13_) {
#line 899 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp9_ = "yes";
#line 4435 "tpf-persona-store.c"
		} else {
#line 899 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp9_ = "no";
#line 4439 "tpf-persona-store.c"
		}
#line 900 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp15_ = tpf_persona_store_get_account (_data_->self);
#line 900 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp16_ = _data_->_tmp15_;
#line 900 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_get (_data_->_tmp16_, "valid", &_data_->_tmp17_, NULL);
#line 900 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp18_ = _data_->_tmp17_;
#line 900 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_tmp18_) {
#line 900 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp14_ = "yes";
#line 4453 "tpf-persona-store.c"
		} else {
#line 900 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp14_ = "no";
#line 4457 "tpf-persona-store.c"
		}
#line 897 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp19_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 897 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp20_ = _data_->_tmp19_;
#line 897 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("Skipping loading cache for Tpf.PersonaStore %p ('%s'): " "enabled: %s, valid: %s.", _data_->self, _data_->_tmp20_, _data_->_tmp9_, _data_->_tmp14_);
#line 902 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 902 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_state_ != 0) {
#line 902 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 902 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 4473 "tpf-persona-store.c"
			}
		}
#line 902 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 902 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 4480 "tpf-persona-store.c"
	}
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp21_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp22_ = _data_->_tmp21_;
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:905: Loading cache for Tpf.PersonaStore %p ('%s" \
"').", _data_->self, _data_->_tmp22_);
#line 907 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp23_ = g_cancellable_new ();
#line 907 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->cancellable = _data_->_tmp23_;
#line 909 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp24_ = _data_->self->priv->_load_cache_cancellable;
#line 909 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp24_ != NULL) {
#line 911 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp25_ = _data_->self->priv->_load_cache_cancellable;
#line 911 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:911:     Cancelling ongoing loading operation (" \
"cancellable: %p).", _data_->_tmp25_);
#line 913 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp26_ = _data_->self->priv->_load_cache_cancellable;
#line 913 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_cancellable_cancel (_data_->_tmp26_);
#line 4504 "tpf-persona-store.c"
	}
#line 916 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp27_ = _data_->cancellable;
#line 916 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp28_ = _g_object_ref0 (_data_->_tmp27_);
#line 916 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self->priv->_load_cache_cancellable);
#line 916 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self->priv->_load_cache_cancellable = _data_->_tmp28_;
#line 919 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp29_ = _data_->self->priv->_cache;
#line 919 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp30_ = _data_->cancellable;
#line 919 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_state_ = 1;
#line 919 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_object_cache_load_objects ((FolksObjectCache*) _data_->_tmp29_, _data_->_tmp30_, _tpf_persona_store_load_cache_ready, _data_);
#line 919 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 4524 "tpf-persona-store.c"
	_state_1:
#line 919 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp31_ = folks_object_cache_load_objects_finish ((FolksObjectCache*) _data_->_tmp29_, _data_->_res_);
#line 919 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->cached_personas = _data_->_tmp31_;
#line 923 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp32_ = _data_->cancellable;
#line 923 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (g_cancellable_is_cancelled (_data_->_tmp32_) == TRUE) {
#line 925 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp33_ = _data_->cancellable;
#line 925 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:925:     Cancelled (cancellable: %p).", _data_->_tmp33_);
#line 926 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (_data_->cached_personas);
#line 926 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (_data_->cancellable);
#line 926 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 926 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_state_ != 0) {
#line 926 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 926 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 4550 "tpf-persona-store.c"
			}
		}
#line 926 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 926 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 4557 "tpf-persona-store.c"
	}
#line 929 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_reset (_data_->self);
#line 931 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp34_ = gee_hash_set_new (TPF_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 931 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self->priv->_persona_set);
#line 931 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self->priv->_persona_set = _data_->_tmp34_;
#line 932 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp35_ = _data_->cached_personas;
#line 932 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp35_ != NULL) {
#line 4571 "tpf-persona-store.c"
		{
#line 934 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp36_ = _data_->cached_personas;
#line 934 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp37_ = gee_iterable_iterator ((GeeIterable*) _data_->_tmp36_);
#line 934 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_p_it = _data_->_tmp37_;
#line 934 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			while (TRUE) {
#line 934 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp38_ = _data_->_p_it;
#line 934 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				if (!gee_iterator_next (_data_->_tmp38_)) {
#line 934 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					break;
#line 4587 "tpf-persona-store.c"
				}
#line 934 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp39_ = _data_->_p_it;
#line 934 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp40_ = gee_iterator_get (_data_->_tmp39_);
#line 934 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->p = (TpfPersona*) _data_->_tmp40_;
#line 936 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp41_ = _data_->p;
#line 936 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tpf_persona_store_add_persona (_data_->self, _data_->_tmp41_);
#line 934 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_g_object_unref0 (_data_->p);
#line 4601 "tpf-persona-store.c"
			}
#line 934 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (_data_->_p_it);
#line 4605 "tpf-persona-store.c"
		}
	}
#line 940 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp42_ = _data_->cached_personas;
#line 940 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_folks_persona_store_emit_personas_changed ((FolksPersonaStore*) _data_->self, _data_->_tmp42_, (GeeSet*) _data_->old_personas, NULL, NULL, FOLKS_GROUP_DETAILS_CHANGE_REASON_NONE);
#line 943 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self->priv->_can_add_personas = FOLKS_MAYBE_BOOL_FALSE;
#line 944 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self->priv->_can_alias_personas = FOLKS_MAYBE_BOOL_FALSE;
#line 945 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self->priv->_can_group_personas = FOLKS_MAYBE_BOOL_FALSE;
#line 946 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self->priv->_can_remove_personas = FOLKS_MAYBE_BOOL_FALSE;
#line 948 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp43_ = _data_->self->priv->_logger;
#line 948 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp43_ != NULL) {
#line 950 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp44_ = g_strdup ("is-favourite");
#line 950 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp45_ = g_new0 (gchar*, 1 + 1);
#line 950 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp45_[0] = _data_->_tmp44_;
#line 950 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_always_writeable_properties = (_vala_array_free (_data_->self->priv->_always_writeable_properties, _data_->self->priv->_always_writeable_properties_length1, (GDestroyNotify) g_free), NULL);
#line 950 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_always_writeable_properties = _data_->_tmp45_;
#line 950 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_always_writeable_properties_length1 = 1;
#line 950 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->__always_writeable_properties_size_ = _data_->self->priv->_always_writeable_properties_length1;
#line 4638 "tpf-persona-store.c"
	} else {
#line 954 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp46_ = g_new0 (gchar*, 0 + 1);
#line 954 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_always_writeable_properties = (_vala_array_free (_data_->self->priv->_always_writeable_properties, _data_->self->priv->_always_writeable_properties_length1, (GDestroyNotify) g_free), NULL);
#line 954 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_always_writeable_properties = _data_->_tmp46_;
#line 954 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->_always_writeable_properties_length1 = 0;
#line 954 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->self->priv->__always_writeable_properties_size_ = _data_->self->priv->_always_writeable_properties_length1;
#line 4650 "tpf-persona-store.c"
	}
#line 957 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_notify ((GObject*) _data_->self, "always-writeable-properties");
#line 892 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->cached_personas);
#line 892 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->cancellable);
#line 892 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 892 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_state_ != 0) {
#line 892 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 892 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 4666 "tpf-persona-store.c"
		}
	}
#line 892 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (_data_->_async_result);
#line 892 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 4673 "tpf-persona-store.c"
}


static void
tpf_persona_store_real_flush_data_free (gpointer _data)
{
	TpfPersonaStoreFlushData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStoreFlushData, _data_);
#line 4686 "tpf-persona-store.c"
}


static void
tpf_persona_store_real_flush_async_ready_wrapper (GObject *source_object,
                                                  GAsyncResult *res,
                                                  void *user_data)
{
	TpfPersonaStoreFlushData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 4702 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 4706 "tpf-persona-store.c"
}


static void
tpf_persona_store_real_flush (FolksPersonaStore* base,
                              GAsyncReadyCallback _callback_,
                              gpointer _user_data_)
{
	TpfPersonaStore * self;
	TpfPersonaStoreFlushData* _data_;
	TpfPersonaStore* _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = (TpfPersonaStore*) base;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStoreFlushData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_store_real_flush_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 4730 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_store_real_flush_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_real_flush_co (_data_);
#line 4740 "tpf-persona-store.c"
}


static void
tpf_persona_store_real_flush_finish (FolksPersonaStore* base,
                                     GAsyncResult* _res_)
{
	TpfPersonaStoreFlushData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 4751 "tpf-persona-store.c"
}


static void
tpf_persona_store_flush_ready (GObject* source_object,
                               GAsyncResult* _res_,
                               gpointer _user_data_)
{
	TpfPersonaStoreFlushData* _data_;
#line 966 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 966 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 966 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 966 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 966 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_real_flush_co (_data_);
#line 4771 "tpf-persona-store.c"
}


static gboolean
tpf_persona_store_real_flush_co (TpfPersonaStoreFlushData* _data_)
{
#line 961 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 961 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 4782 "tpf-persona-store.c"
		goto _state_0;
#line 961 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 4786 "tpf-persona-store.c"
		goto _state_1;
		default:
#line 961 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 4791 "tpf-persona-store.c"
	}
	_state_0:
#line 963 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp0_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 963 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp1_ = _data_->_tmp0_;
#line 963 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:963: Flushing Tpf.PersonaStore %p (‘%s’).", _data_->self, _data_->_tmp1_);
#line 966 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp2_ = _data_->self->priv->_persona_set;
#line 966 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_state_ = 1;
#line 966 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_store_cache (_data_->self, _data_->_tmp2_, tpf_persona_store_flush_ready, _data_);
#line 966 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 4808 "tpf-persona-store.c"
	_state_1:
#line 966 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_store_cache_finish (_data_->self, _data_->_res_);
#line 961 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 961 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_state_ != 0) {
#line 961 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 961 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 4820 "tpf-persona-store.c"
		}
	}
#line 961 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (_data_->_async_result);
#line 961 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 4827 "tpf-persona-store.c"
}


/**
   * Called when a contact property is set which is not accessible when either
   * the contact is offline or we're offline. For example, a contact's avatar.
   * This will cause the cache to be stored when the PersonaStore is destroyed.
   */
void
_tpf_persona_store_set_cache_needs_update (TpfPersonaStore* self)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
#line 974 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 976 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = folks_persona_store_get_id ((FolksPersonaStore*) self);
#line 976 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _tmp0_;
#line 976 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("Setting cache as needing an update for Tpf.PersonaStore " "%p (‘%s’).", self, _tmp1_);
#line 978 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_cache_needs_update = TRUE;
#line 4851 "tpf-persona-store.c"
}


static void
_tpf_persona_store_store_cache_data_free (gpointer _data)
{
	TpfPersonaStoreStoreCacheData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->old_personas);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStoreStoreCacheData, _data_);
#line 4866 "tpf-persona-store.c"
}


static void
_tpf_persona_store_store_cache_async_ready_wrapper (GObject *source_object,
                                                    GAsyncResult *res,
                                                    void *user_data)
{
	TpfPersonaStoreStoreCacheData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 4882 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 4886 "tpf-persona-store.c"
}


static void
_tpf_persona_store_store_cache (TpfPersonaStore* self,
                                GeeHashSet* old_personas,
                                GAsyncReadyCallback _callback_,
                                gpointer _user_data_)
{
	TpfPersonaStoreStoreCacheData* _data_;
	TpfPersonaStore* _tmp0_;
	GeeHashSet* _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStoreStoreCacheData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _tpf_persona_store_store_cache_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 4909 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, _tpf_persona_store_store_cache_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _g_object_ref0 (old_personas);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->old_personas);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->old_personas = _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_store_cache_co (_data_);
#line 4925 "tpf-persona-store.c"
}


static void
_tpf_persona_store_store_cache_finish (TpfPersonaStore* self,
                                       GAsyncResult* _res_)
{
	TpfPersonaStoreStoreCacheData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 4936 "tpf-persona-store.c"
}


/**
   * When we're about to disconnect, store the current set of personas to the
   * cache file so that we can access them once offline.
   *
   * This method is safe to call multiple times concurrently.
   */
static void
_tpf_persona_store_store_cache_ready (GObject* source_object,
                                      GAsyncResult* _res_,
                                      gpointer _user_data_)
{
	TpfPersonaStoreStoreCacheData* _data_;
#line 1007 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 1007 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 1007 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 1007 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 1007 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_store_cache_co (_data_);
#line 4962 "tpf-persona-store.c"
}


static gboolean
_tpf_persona_store_store_cache_co (TpfPersonaStoreStoreCacheData* _data_)
{
#line 987 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 987 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 4973 "tpf-persona-store.c"
		goto _state_0;
#line 987 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 4977 "tpf-persona-store.c"
		goto _state_1;
		default:
#line 987 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 4982 "tpf-persona-store.c"
	}
	_state_0:
#line 992 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp1_ = tpf_persona_store_get_account (_data_->self);
#line 992 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp2_ = _data_->_tmp1_;
#line 992 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_get (_data_->_tmp2_, "enabled", &_data_->_tmp3_, NULL);
#line 992 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp4_ = _data_->_tmp3_;
#line 992 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (!_data_->_tmp4_) {
#line 992 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp0_ = TRUE;
#line 4997 "tpf-persona-store.c"
	} else {
#line 992 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp5_ = tpf_persona_store_get_account (_data_->self);
#line 992 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp6_ = _data_->_tmp5_;
#line 992 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_get (_data_->_tmp6_, "valid", &_data_->_tmp7_, NULL);
#line 992 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp8_ = _data_->_tmp7_;
#line 992 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp0_ = !_data_->_tmp8_;
#line 5009 "tpf-persona-store.c"
	}
#line 992 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp0_) {
#line 994 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp9_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 994 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp10_ = _data_->_tmp9_;
#line 994 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("Skipping storing cache for Tpf.PersonaStore %p (‘%s’) as " "its TpAccount is disabled or invalid.", _data_->self, _data_->_tmp10_);
#line 996 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 996 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_state_ != 0) {
#line 996 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 996 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 5027 "tpf-persona-store.c"
			}
		}
#line 996 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 996 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 5034 "tpf-persona-store.c"
	} else {
#line 998 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp11_ = _data_->self->priv->_cache_needs_update;
#line 998 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_tmp11_ == FALSE) {
#line 1000 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp12_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 1000 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp13_ = _data_->_tmp12_;
#line 1000 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_debug ("Skipping storing cache for Tpf.PersonaStore %p (‘%s’) as " "it doesn’t need an update.", _data_->self, _data_->_tmp13_);
#line 1002 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 1002 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (_data_->_state_ != 0) {
#line 1002 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				while (_data_->_task_complete_ != TRUE) {
#line 1002 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 5054 "tpf-persona-store.c"
				}
			}
#line 1002 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1002 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 5061 "tpf-persona-store.c"
		}
	}
#line 1005 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp14_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 1005 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp15_ = _data_->_tmp14_;
#line 1005 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:1005: Storing cache for Tpf.PersonaStore %p ('%" \
"s').", _data_->self, _data_->_tmp15_);
#line 1007 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp16_ = _data_->self->priv->_cache;
#line 1007 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_state_ = 1;
#line 1007 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_object_cache_store_objects ((FolksObjectCache*) _data_->_tmp16_, (GeeSet*) _data_->old_personas, NULL, _tpf_persona_store_store_cache_ready, _data_);
#line 1007 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 5078 "tpf-persona-store.c"
	_state_1:
#line 1007 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_object_cache_store_objects_finish ((FolksObjectCache*) _data_->_tmp16_, _data_->_res_);
#line 1008 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self->priv->_cache_needs_update = FALSE;
#line 987 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 987 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_state_ != 0) {
#line 987 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 987 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 5092 "tpf-persona-store.c"
		}
	}
#line 987 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (_data_->_async_result);
#line 987 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 5099 "tpf-persona-store.c"
}


/**
   * When our account is connected again, we can unload the the personas which
   * we're advertising from the cache.
   */
static void
_tpf_persona_store_unload_cache (TpfPersonaStore* self)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	GCancellable* _tmp2_;
	GeeHashSet* _tmp5_;
#line 1015 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 1017 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = folks_persona_store_get_id ((FolksPersonaStore*) self);
#line 1017 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _tmp0_;
#line 1017 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:1017: Unloading cache for Tpf.PersonaStore %p (" \
"'%s').", self, _tmp1_);
#line 1020 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = self->priv->_load_cache_cancellable;
#line 1020 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp2_ != NULL) {
#line 5126 "tpf-persona-store.c"
		GCancellable* _tmp3_;
		GCancellable* _tmp4_;
#line 1022 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = self->priv->_load_cache_cancellable;
#line 1022 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:1022:     Cancelling ongoing loading operation " \
"(cancellable: %p).", _tmp3_);
#line 1024 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp4_ = self->priv->_load_cache_cancellable;
#line 1024 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_cancellable_cancel (_tmp4_);
#line 5137 "tpf-persona-store.c"
	}
#line 1027 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp5_ = self->priv->_persona_set;
#line 1027 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_folks_persona_store_emit_personas_changed ((FolksPersonaStore*) self, NULL, (GeeSet*) _tmp5_, NULL, NULL, FOLKS_GROUP_DETAILS_CHANGE_REASON_NONE);
#line 1030 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_reset (self);
#line 5145 "tpf-persona-store.c"
}


void
_tpf_persona_store_update_avatar_cache (TpfPersonaStore* self,
                                        const gchar* persona_iid,
                                        GFile* avatar_file)
{
#line 1033 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 1033 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (persona_iid != NULL);
#line 1035 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (avatar_file == NULL) {
#line 5160 "tpf-persona-store.c"
		GeeHashMap* _tmp0_;
#line 1037 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp0_ = self->priv->_avatars;
#line 1037 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		gee_abstract_map_unset ((GeeAbstractMap*) _tmp0_, persona_iid, NULL);
#line 5166 "tpf-persona-store.c"
	} else {
		GeeHashMap* _tmp1_;
#line 1041 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp1_ = self->priv->_avatars;
#line 1041 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp1_, persona_iid, G_TYPE_CHECK_INSTANCE_CAST (avatar_file, g_file_get_type (), GFile));
#line 5173 "tpf-persona-store.c"
	}
}


GFile*
_tpf_persona_store_query_avatar_cache (TpfPersonaStore* self,
                                       const gchar* persona_iid)
{
	GFile* result = NULL;
	GeeHashMap* _tmp0_;
	gpointer _tmp1_;
#line 1045 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 1045 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (persona_iid != NULL, NULL);
#line 1047 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_avatars;
#line 1047 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp0_, persona_iid);
#line 1047 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = (GFile*) _tmp1_;
#line 1047 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 5197 "tpf-persona-store.c"
}


static gboolean
_tpf_persona_store_add_persona (TpfPersonaStore* self,
                                TpfPersona* p)
{
	gboolean result = FALSE;
	GeeHashSet* _tmp0_;
#line 1050 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 1050 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (p != NULL, FALSE);
#line 1052 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_persona_set;
#line 1052 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (gee_abstract_collection_add ((GeeAbstractCollection*) _tmp0_, p)) {
#line 5215 "tpf-persona-store.c"
		const gchar* _tmp1_;
		const gchar* _tmp2_;
		GeeHashMap* _tmp3_;
		const gchar* _tmp4_;
		const gchar* _tmp5_;
#line 1054 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp1_ = folks_persona_get_uid ((FolksPersona*) p);
#line 1054 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = _tmp1_;
#line 1054 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:1054: Add persona %p with uid %s", p, _tmp2_);
#line 1055 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = self->priv->_personas;
#line 1055 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp4_ = folks_persona_get_iid ((FolksPersona*) p);
#line 1055 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp5_ = _tmp4_;
#line 1055 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		gee_abstract_map_set ((GeeAbstractMap*) _tmp3_, _tmp5_, p);
#line 1056 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		result = TRUE;
#line 1056 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return result;
#line 5239 "tpf-persona-store.c"
	}
#line 1059 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = FALSE;
#line 1059 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 5245 "tpf-persona-store.c"
}


static gboolean
_tpf_persona_store_remove_persona (TpfPersonaStore* self,
                                   TpfPersona* p)
{
	gboolean result = FALSE;
	GeeHashSet* _tmp0_;
#line 1062 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 1062 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (p != NULL, FALSE);
#line 1064 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_persona_set;
#line 1064 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (gee_abstract_collection_remove ((GeeAbstractCollection*) _tmp0_, p)) {
#line 5263 "tpf-persona-store.c"
		const gchar* _tmp1_;
		const gchar* _tmp2_;
		GeeHashMap* _tmp3_;
		const gchar* _tmp4_;
		const gchar* _tmp5_;
		TpfPersona* _tmp6_;
#line 1066 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp1_ = folks_persona_get_uid ((FolksPersona*) p);
#line 1066 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = _tmp1_;
#line 1066 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:1066: Remove persona %p with uid %s", p, _tmp2_);
#line 1067 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = self->priv->_personas;
#line 1067 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp4_ = folks_persona_get_iid ((FolksPersona*) p);
#line 1067 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp5_ = _tmp4_;
#line 1067 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		gee_abstract_map_unset ((GeeAbstractMap*) _tmp3_, _tmp5_, NULL);
#line 1068 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp6_ = self->priv->_self_persona;
#line 1068 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_tmp6_ == p) {
#line 1070 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (self->priv->_self_persona);
#line 1070 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			self->priv->_self_persona = NULL;
#line 5292 "tpf-persona-store.c"
		}
#line 1073 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		result = TRUE;
#line 1073 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return result;
#line 5298 "tpf-persona-store.c"
	}
#line 1076 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = FALSE;
#line 1076 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 5304 "tpf-persona-store.c"
}


static void
_tpf_persona_store_contact_weak_notify_cb (TpfPersonaStore* self,
                                           GObject* obj)
{
	GeeHashMap* _tmp0_;
	TpContact* contact = NULL;
	TpContact* _tmp1_;
	TpContact* _tmp2_;
	const gchar* _tmp3_;
	TpfPersona* persona = NULL;
	GeeHashMap* _tmp4_;
	TpContact* _tmp5_;
	gpointer _tmp6_ = NULL;
	TpfPersona* _tmp7_;
	TpfPersona* _tmp8_;
	TpfPersona* _tmp9_;
#line 1079 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 1079 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (obj != NULL);
#line 1081 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_contact_persona_map;
#line 1081 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp0_ == NULL) {
#line 1083 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return;
#line 5334 "tpf-persona-store.c"
	}
#line 1086 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (obj, tp_contact_get_type ()) ? ((TpContact*) obj) : NULL);
#line 1086 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	contact = _tmp1_;
#line 1087 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = contact;
#line 1087 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp3_ = tp_contact_get_identifier (_tmp2_);
#line 1087 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:1087: Weak notify for TpContact %s", _tmp3_);
#line 1089 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	persona = NULL;
#line 1090 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp4_ = self->priv->_contact_persona_map;
#line 1090 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp5_ = contact;
#line 1090 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	gee_abstract_map_unset ((GeeAbstractMap*) _tmp4_, _tmp5_, &_tmp6_);
#line 1090 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (persona);
#line 1090 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	persona = _tmp6_;
#line 1091 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp7_ = persona;
#line 1091 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp7_ == NULL) {
#line 1093 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (persona);
#line 1093 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (contact);
#line 1093 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return;
#line 5368 "tpf-persona-store.c"
	}
#line 1096 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp8_ = persona;
#line 1096 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_contact_weak_notify (_tmp8_);
#line 1098 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp9_ = persona;
#line 1098 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tpf_persona_store_remove_persona (self, _tmp9_)) {
#line 5378 "tpf-persona-store.c"
		FolksSmallSet* personas = NULL;
		FolksSmallSet* _tmp10_;
		FolksSmallSet* _tmp11_;
		TpfPersona* _tmp12_;
		FolksSmallSet* _tmp13_;
#line 1103 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_warning ("tpf-persona-store.vala:1103: A TpContact part of the ContactList is di" \
"sposed");
#line 1104 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp10_ = folks_small_set_new (TPF_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1104 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		personas = _tmp10_;
#line 1105 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp11_ = personas;
#line 1105 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp12_ = persona;
#line 1105 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		gee_abstract_collection_add ((GeeAbstractCollection*) _tmp11_, _tmp12_);
#line 1106 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp13_ = personas;
#line 1106 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_folks_persona_store_emit_personas_changed ((FolksPersonaStore*) self, NULL, (GeeSet*) _tmp13_, NULL, NULL, FOLKS_GROUP_DETAILS_CHANGE_REASON_NONE);
#line 1098 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (personas);
#line 5402 "tpf-persona-store.c"
	}
#line 1079 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (persona);
#line 1079 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (contact);
#line 5408 "tpf-persona-store.c"
}


TpfPersona*
_tpf_persona_store_ensure_persona_for_contact (TpfPersonaStore* self,
                                               TpContact* contact)
{
	TpfPersona* result = NULL;
	TpfPersona* persona = NULL;
	GeeHashMap* _tmp0_;
	gpointer _tmp1_;
	TpfPersona* _tmp2_;
	TpfPersona* _tmp5_;
	GeeHashMap* _tmp6_;
	TpfPersona* _tmp7_;
	gboolean is_favourite = FALSE;
	FolksSmallSet* _tmp8_;
	const gchar* _tmp9_;
	TpfPersona* _tmp10_;
	gboolean _tmp11_;
	const gchar* _tmp12_ = NULL;
	gboolean _tmp13_;
	TpfPersona* _tmp14_;
	TpfPersona* _tmp15_;
	const gchar* _tmp16_;
	const gchar* _tmp17_;
	const gchar* _tmp18_;
#line 1113 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 1113 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (contact != NULL, NULL);
#line 1115 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_contact_persona_map;
#line 1115 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp0_, contact);
#line 1115 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	persona = (TpfPersona*) _tmp1_;
#line 1116 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = persona;
#line 1116 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp2_ != NULL) {
#line 5450 "tpf-persona-store.c"
		TpfPersona* _tmp3_;
		TpfPersona* _tmp4_;
#line 1117 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = persona;
#line 1117 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp3_, TPF_TYPE_PERSONA, TpfPersona));
#line 1117 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		result = _tmp4_;
#line 1117 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (persona);
#line 1117 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return result;
#line 5463 "tpf-persona-store.c"
	}
#line 1119 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp5_ = tpf_persona_new (contact, self);
#line 1119 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (persona);
#line 1119 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	persona = _tmp5_;
#line 1120 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp6_ = self->priv->_contact_persona_map;
#line 1120 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp7_ = persona;
#line 1120 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	gee_abstract_map_set ((GeeAbstractMap*) _tmp6_, contact, _tmp7_);
#line 1121 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_weak_ref ((GObject*) contact, __tpf_persona_store_contact_weak_notify_cb_gweak_notify, self);
#line 1123 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp8_ = self->priv->_favourite_ids;
#line 1123 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp9_ = tp_contact_get_identifier (contact);
#line 1123 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	is_favourite = gee_abstract_collection_contains ((GeeAbstractCollection*) _tmp8_, _tmp9_);
#line 1124 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp10_ = persona;
#line 1124 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp11_ = is_favourite;
#line 1124 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_set_is_favourite (_tmp10_, _tmp11_);
#line 1128 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp13_ = is_favourite;
#line 1128 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp13_) {
#line 1128 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp12_ = "yes";
#line 5497 "tpf-persona-store.c"
	} else {
#line 1128 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp12_ = "no";
#line 5501 "tpf-persona-store.c"
	}
#line 1126 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp14_ = persona;
#line 1126 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp15_ = persona;
#line 1126 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp16_ = folks_persona_get_uid ((FolksPersona*) _tmp15_);
#line 1126 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp17_ = _tmp16_;
#line 1126 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp18_ = tp_contact_get_identifier (contact);
#line 1126 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:1126: Persona %p with uid %s created for TpCont" \
"act %s, favourite: %s", _tmp14_, _tmp17_, _tmp18_, _tmp12_);
#line 1130 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = persona;
#line 1130 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 5519 "tpf-persona-store.c"
}


static void
_tpf_persona_store_self_contact_changed_cb (TpfPersonaStore* self,
                                            GObject* s,
                                            GParamSpec* p)
{
	TpContact* contact = NULL;
	TpConnection* _tmp0_;
	TpContact* _tmp1_;
	TpContact* _tmp2_;
	TpContact* _tmp3_;
	FolksSmallSet* personas_added = NULL;
	FolksSmallSet* _tmp4_;
	FolksSmallSet* personas_removed = NULL;
	FolksSmallSet* _tmp5_;
	TpfPersona* self_persona = NULL;
	TpfPersona* _tmp6_;
	TpfPersona* _tmp7_;
	gboolean _tmp8_ = FALSE;
	gboolean _tmp9_ = FALSE;
	TpfPersona* _tmp10_;
	TpContact* _tmp17_;
	FolksSmallSet* _tmp23_;
	FolksSmallSet* _tmp24_;
#line 1133 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 1133 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (s != NULL);
#line 1135 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_conn;
#line 1135 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = tp_connection_get_self_contact (_tmp0_);
#line 1135 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = _tmp1_;
#line 1135 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp3_ = _g_object_ref0 (_tmp2_);
#line 1135 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	contact = _tmp3_;
#line 1137 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp4_ = folks_small_set_new (TPF_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1137 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	personas_added = _tmp4_;
#line 1138 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp5_ = folks_small_set_new (TPF_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1138 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	personas_removed = _tmp5_;
#line 1142 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp6_ = self->priv->_self_persona;
#line 1142 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp7_ = _g_object_ref0 (_tmp6_);
#line 1142 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self_persona = _tmp7_;
#line 1144 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp10_ = self_persona;
#line 1144 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp10_ != NULL) {
#line 5578 "tpf-persona-store.c"
		TpfPersona* _tmp11_;
		gboolean _tmp12_;
		gboolean _tmp13_;
#line 1145 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp11_ = self_persona;
#line 1145 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp12_ = tpf_persona_get_is_in_contact_list (_tmp11_);
#line 1145 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp13_ = _tmp12_;
#line 1145 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp9_ = !_tmp13_;
#line 5590 "tpf-persona-store.c"
	} else {
#line 1144 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp9_ = FALSE;
#line 5594 "tpf-persona-store.c"
	}
#line 1144 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp9_) {
#line 5598 "tpf-persona-store.c"
		TpfPersona* _tmp14_;
#line 1146 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp14_ = self_persona;
#line 1146 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp8_ = _tpf_persona_store_remove_persona (self, _tmp14_);
#line 5604 "tpf-persona-store.c"
	} else {
#line 1144 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp8_ = FALSE;
#line 5608 "tpf-persona-store.c"
	}
#line 1144 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp8_) {
#line 5612 "tpf-persona-store.c"
		FolksSmallSet* _tmp15_;
		TpfPersona* _tmp16_;
#line 1148 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp15_ = personas_removed;
#line 1148 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp16_ = self_persona;
#line 1148 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		gee_abstract_collection_add ((GeeAbstractCollection*) _tmp15_, _tmp16_);
#line 5621 "tpf-persona-store.c"
	}
#line 1151 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_self_persona);
#line 1151 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_self_persona = NULL;
#line 1153 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp17_ = contact;
#line 1153 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp17_ != NULL) {
#line 5631 "tpf-persona-store.c"
		TpContact* _tmp18_;
		TpfPersona* _tmp19_;
		TpfPersona* _tmp20_;
#line 1156 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp18_ = contact;
#line 1156 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp19_ = _tpf_persona_store_ensure_persona_for_contact (self, _tmp18_);
#line 1156 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (self->priv->_self_persona);
#line 1156 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		self->priv->_self_persona = _tmp19_;
#line 1157 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp20_ = self->priv->_self_persona;
#line 1157 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_tpf_persona_store_add_persona (self, _tmp20_)) {
#line 5647 "tpf-persona-store.c"
			FolksSmallSet* _tmp21_;
			TpfPersona* _tmp22_;
#line 1158 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp21_ = personas_added;
#line 1158 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp22_ = self->priv->_self_persona;
#line 1158 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			gee_abstract_collection_add ((GeeAbstractCollection*) _tmp21_, _tmp22_);
#line 5656 "tpf-persona-store.c"
		}
	}
#line 1161 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp23_ = personas_added;
#line 1161 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp24_ = personas_removed;
#line 1161 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_folks_persona_store_emit_personas_changed ((FolksPersonaStore*) self, (GeeSet*) _tmp23_, (GeeSet*) _tmp24_, NULL, NULL, FOLKS_GROUP_DETAILS_CHANGE_REASON_NONE);
#line 1163 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_got_initial_self_contact = TRUE;
#line 1164 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_notify_if_is_quiescent (self);
#line 1133 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self_persona);
#line 1133 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (personas_removed);
#line 1133 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (personas_added);
#line 1133 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (contact);
#line 5677 "tpf-persona-store.c"
}


static void
_tpf_persona_store_contact_list_state_changed_cb (TpfPersonaStore* self,
                                                  GObject* s,
                                                  GParamSpec* p)
{
	TpConnection* _tmp0_;
	guint _tmp1_;
	guint _tmp2_;
	TpConnection* _tmp3_;
	TpConnection* _tmp4_;
	GPtrArray* _tmp5_;
	GPtrArray* _tmp6_;
	GPtrArray* _tmp7_;
	GPtrArray* _tmp8_;
#line 1167 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 1167 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (s != NULL);
#line 1171 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_conn;
#line 1171 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = tp_connection_get_contact_list_state (_tmp0_);
#line 1171 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = _tmp1_;
#line 1171 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp2_ != ((guint) TP_CONTACT_LIST_STATE_SUCCESS)) {
#line 1172 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return;
#line 5709 "tpf-persona-store.c"
	}
#line 1174 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp3_ = self->priv->_conn;
#line 1174 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_signal_connect_object (_tmp3_, "contact-list-changed", (GCallback) __tpf_persona_store_contact_list_changed_cb_tp_connection_contact_list_changed, self, 0);
#line 1175 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp4_ = self->priv->_conn;
#line 1175 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp5_ = tp_connection_dup_contact_list (_tmp4_);
#line 1175 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp6_ = _tmp5_;
#line 1175 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp7_ = g_ptr_array_new_full ((guint) 0, NULL);
#line 1175 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp8_ = _tmp7_;
#line 1175 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_contact_list_changed_cb (self, _tmp6_, _tmp8_);
#line 1175 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_ptr_array_unref0 (_tmp8_);
#line 1175 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_ptr_array_unref0 (_tmp6_);
#line 1178 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_got_initial_members = TRUE;
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_populate_counters (self, NULL, NULL);
#line 1180 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_notify_if_is_quiescent (self);
#line 5737 "tpf-persona-store.c"
}


static gint
g_ptr_array_get_length (GPtrArray* self)
{
	gint result;
	guint _tmp0_;
#line 5065 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, 0);
#line 5065 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = self->len;
#line 5065 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = (gint) _tmp0_;
#line 5065 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 5754 "tpf-persona-store.c"
}


static void
g_ptr_array_set_length (GPtrArray* self,
                        gint value)
{
#line 5066 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_if_fail (self != NULL);
#line 5066 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_ptr_array_set_size (self, value);
#line 5766 "tpf-persona-store.c"
}


static void
_tpf_persona_store_contact_list_changed_cb (TpfPersonaStore* self,
                                            GPtrArray* added,
                                            GPtrArray* removed)
{
	GeeHashSet* personas_added = NULL;
	GeeHashSet* _tmp0_;
	GeeHashSet* personas_removed = NULL;
	GeeHashSet* _tmp1_;
	gint _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
	gint _tmp5_;
	gpointer* _tmp6_;
	gint _tmp6__length1;
	gpointer* _tmp17_;
	gint _tmp17__length1;
	GeeHashSet* _tmp31_;
	GeeHashSet* _tmp32_;
#line 1183 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 1183 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (added != NULL);
#line 1183 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (removed != NULL);
#line 1186 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = gee_hash_set_new (TPF_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1186 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	personas_added = _tmp0_;
#line 1187 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = gee_hash_set_new (TPF_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1187 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	personas_removed = _tmp1_;
#line 1189 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = g_ptr_array_get_length (added);
#line 1189 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp3_ = _tmp2_;
#line 1189 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp4_ = g_ptr_array_get_length (removed);
#line 1189 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp5_ = _tmp4_;
#line 1189 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:1189: contact list changed: %d added, %d remove" \
"d", _tmp3_, _tmp5_);
#line 1192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp6_ = added->pdata;
#line 1192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp6__length1 = (gint) added->len;
#line 5817 "tpf-persona-store.c"
	{
		TpContact** contact_collection = NULL;
		gint contact_collection_length1 = 0;
		gint _contact_collection_size_ = 0;
		gint contact_it = 0;
#line 1192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		contact_collection = _tmp6_;
#line 1192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		contact_collection_length1 = _tmp6__length1;
#line 1192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		for (contact_it = 0; contact_it < _tmp6__length1; contact_it = contact_it + 1) {
#line 5829 "tpf-persona-store.c"
			TpContact* _tmp7_;
			TpContact* contact = NULL;
#line 1192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp7_ = _g_object_ref0 (contact_collection[contact_it]);
#line 1192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			contact = _tmp7_;
#line 5836 "tpf-persona-store.c"
			{
				TpfPersona* persona = NULL;
				TpContact* _tmp8_;
				TpfPersona* _tmp9_;
				TpfPersona* _tmp10_;
				gboolean _tmp11_;
				gboolean _tmp12_;
				TpfPersona* _tmp14_;
#line 1194 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp8_ = contact;
#line 1194 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp9_ = _tpf_persona_store_ensure_persona_for_contact (self, _tmp8_);
#line 1194 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				persona = _tmp9_;
#line 1196 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp10_ = persona;
#line 1196 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp11_ = tpf_persona_get_is_in_contact_list (_tmp10_);
#line 1196 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp12_ = _tmp11_;
#line 1196 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				if (!_tmp12_) {
#line 5859 "tpf-persona-store.c"
					TpfPersona* _tmp13_;
#line 1198 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_tmp13_ = persona;
#line 1198 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					tpf_persona_set_is_in_contact_list (_tmp13_, TRUE);
#line 5865 "tpf-persona-store.c"
				}
#line 1201 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp14_ = persona;
#line 1201 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				if (_tpf_persona_store_add_persona (self, _tmp14_)) {
#line 5871 "tpf-persona-store.c"
					GeeHashSet* _tmp15_;
					TpfPersona* _tmp16_;
#line 1203 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_tmp15_ = personas_added;
#line 1203 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_tmp16_ = persona;
#line 1203 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					gee_abstract_collection_add ((GeeAbstractCollection*) _tmp15_, _tmp16_);
#line 5880 "tpf-persona-store.c"
				}
#line 1192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_g_object_unref0 (persona);
#line 1192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_g_object_unref0 (contact);
#line 5886 "tpf-persona-store.c"
			}
		}
	}
#line 1207 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp17_ = removed->pdata;
#line 1207 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp17__length1 = (gint) removed->len;
#line 5894 "tpf-persona-store.c"
	{
		TpContact** contact_collection = NULL;
		gint contact_collection_length1 = 0;
		gint _contact_collection_size_ = 0;
		gint contact_it = 0;
#line 1207 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		contact_collection = _tmp17_;
#line 1207 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		contact_collection_length1 = _tmp17__length1;
#line 1207 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		for (contact_it = 0; contact_it < _tmp17__length1; contact_it = contact_it + 1) {
#line 5906 "tpf-persona-store.c"
			TpContact* _tmp18_;
			TpContact* contact = NULL;
#line 1207 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp18_ = _g_object_ref0 (contact_collection[contact_it]);
#line 1207 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			contact = _tmp18_;
#line 5913 "tpf-persona-store.c"
			{
				TpfPersona* persona = NULL;
				GeeHashMap* _tmp19_;
				TpContact* _tmp20_;
				gpointer _tmp21_;
				TpfPersona* _tmp22_;
				TpfPersona* _tmp25_;
				TpfPersona* _tmp26_;
				TpfPersona* _tmp28_;
#line 1209 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp19_ = self->priv->_contact_persona_map;
#line 1209 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp20_ = contact;
#line 1209 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp21_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp19_, _tmp20_);
#line 1209 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				persona = (TpfPersona*) _tmp21_;
#line 1211 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp22_ = persona;
#line 1211 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				if (_tmp22_ == NULL) {
#line 5935 "tpf-persona-store.c"
					TpContact* _tmp23_;
					const gchar* _tmp24_;
#line 1213 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_tmp23_ = contact;
#line 1213 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_tmp24_ = tp_contact_get_identifier (_tmp23_);
#line 1213 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					g_warning ("tpf-persona-store.vala:1213: Unknown TpContact removed from ContactLis" \
"t: %s", _tmp24_);
#line 1215 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_g_object_unref0 (persona);
#line 1215 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_g_object_unref0 (contact);
#line 1215 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					continue;
#line 5950 "tpf-persona-store.c"
				}
#line 1223 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp25_ = persona;
#line 1223 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp26_ = self->priv->_self_persona;
#line 1223 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				if (_tmp25_ == _tmp26_) {
#line 5958 "tpf-persona-store.c"
					TpfPersona* _tmp27_;
#line 1225 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_tmp27_ = persona;
#line 1225 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					tpf_persona_set_is_in_contact_list (_tmp27_, FALSE);
#line 1226 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_g_object_unref0 (persona);
#line 1226 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_g_object_unref0 (contact);
#line 1226 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					continue;
#line 5970 "tpf-persona-store.c"
				}
#line 1229 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_tmp28_ = persona;
#line 1229 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				if (_tpf_persona_store_remove_persona (self, _tmp28_)) {
#line 5976 "tpf-persona-store.c"
					GeeHashSet* _tmp29_;
					TpfPersona* _tmp30_;
#line 1231 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_tmp29_ = personas_removed;
#line 1231 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					_tmp30_ = persona;
#line 1231 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					gee_abstract_collection_add ((GeeAbstractCollection*) _tmp29_, _tmp30_);
#line 5985 "tpf-persona-store.c"
				}
#line 1207 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_g_object_unref0 (persona);
#line 1207 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_g_object_unref0 (contact);
#line 5991 "tpf-persona-store.c"
			}
		}
	}
#line 1235 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp31_ = personas_added;
#line 1235 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp32_ = personas_removed;
#line 1235 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_folks_persona_store_emit_personas_changed ((FolksPersonaStore*) self, (GeeSet*) _tmp31_, (GeeSet*) _tmp32_, NULL, NULL, FOLKS_GROUP_DETAILS_CHANGE_REASON_NONE);
#line 1183 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (personas_removed);
#line 1183 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (personas_added);
#line 6005 "tpf-persona-store.c"
}


static void
tpf_persona_store_real_remove_persona_data_free (gpointer _data)
{
	TpfPersonaStoreRemovePersonaData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStoreRemovePersonaData, _data_);
#line 6020 "tpf-persona-store.c"
}


static void
tpf_persona_store_real_remove_persona_async_ready_wrapper (GObject *source_object,
                                                           GAsyncResult *res,
                                                           void *user_data)
{
	TpfPersonaStoreRemovePersonaData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 6036 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 6040 "tpf-persona-store.c"
}


static void
tpf_persona_store_real_remove_persona (FolksPersonaStore* base,
                                       FolksPersona* persona,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_)
{
	TpfPersonaStore * self;
	TpfPersonaStoreRemovePersonaData* _data_;
	TpfPersonaStore* _tmp0_;
	FolksPersona* _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = (TpfPersonaStore*) base;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStoreRemovePersonaData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_store_real_remove_persona_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 6066 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_store_real_remove_persona_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _g_object_ref0 (persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->persona = _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_real_remove_persona_co (_data_);
#line 6082 "tpf-persona-store.c"
}


static void
tpf_persona_store_real_remove_persona_finish (FolksPersonaStore* base,
                                              GAsyncResult* _res_,
                                              GError** error)
{
	TpfPersonaStoreRemovePersonaData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (NULL == _data_) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return;
#line 6098 "tpf-persona-store.c"
	}
}


/**
   * Remove a {@link Persona} from the PersonaStore.
   *
   * See {@link Folks.PersonaStore.remove_persona}.
   *
   * @throws Folks.PersonaStoreError.UNSUPPORTED_ON_USER if ``persona`` is the
   * local user — removing the local user isn’t supported
   * @throws Folks.PersonaStoreError.REMOVE_FAILED if removing the contact
   * failed
   */
static void
tpf_persona_store_remove_persona_ready (GObject* source_object,
                                        GAsyncResult* _res_,
                                        gpointer _user_data_)
{
	TpfPersonaStoreRemovePersonaData* _data_;
#line 1269 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 1269 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 1269 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 1269 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 1269 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_real_remove_persona_co (_data_);
#line 6129 "tpf-persona-store.c"
}


static gboolean
tpf_persona_store_real_remove_persona_co (TpfPersonaStoreRemovePersonaData* _data_)
{
#line 1248 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 1248 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 6140 "tpf-persona-store.c"
		goto _state_0;
#line 1248 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 6144 "tpf-persona-store.c"
		goto _state_1;
		default:
#line 1248 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 6149 "tpf-persona-store.c"
	}
	_state_0:
#line 1251 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_data_->persona, TPF_TYPE_PERSONA, TpfPersona));
#line 1251 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->tp_persona = _data_->_tmp0_;
#line 1253 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp1_ = _data_->tp_persona;
#line 1253 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp2_ = tpf_persona_get_contact (_data_->_tmp1_);
#line 1253 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp3_ = _data_->_tmp2_;
#line 1253 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp3_ == NULL) {
#line 1255 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp4_ = _data_->tp_persona;
#line 1255 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_warning ("Skipping server-side removal of Tpf.Persona %p because " "it has no attached TpContact", _data_->_tmp4_);
#line 1257 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (_data_->tp_persona);
#line 1257 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 1257 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_state_ != 0) {
#line 1257 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 1257 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 6178 "tpf-persona-store.c"
			}
		}
#line 1257 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 1257 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 6185 "tpf-persona-store.c"
	}
#line 1260 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp6_ = _data_->self->priv->_self_persona;
#line 1260 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->persona == G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp6_, FOLKS_TYPE_PERSONA, FolksPersona)) {
#line 1261 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp7_ = _data_->tp_persona;
#line 1261 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp8_ = tpf_persona_get_is_in_contact_list (_data_->_tmp7_);
#line 1261 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp9_ = _data_->_tmp8_;
#line 1261 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp5_ = _data_->_tmp9_ == FALSE;
#line 6199 "tpf-persona-store.c"
	} else {
#line 1260 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp5_ = FALSE;
#line 6203 "tpf-persona-store.c"
	}
#line 1260 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp5_) {
#line 1263 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp10_ = g_error_new_literal (FOLKS_PERSONA_STORE_ERROR, FOLKS_PERSONA_STORE_ERROR_UNSUPPORTED_ON_USER, _ ("Telepathy contacts representing the local user may not be removed."));
#line 1263 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = _data_->_tmp10_;
#line 1263 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_inner_error_->domain == FOLKS_PERSONA_STORE_ERROR) {
#line 1263 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1263 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (_data_->tp_persona);
#line 1263 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1263 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 6221 "tpf-persona-store.c"
		} else {
#line 1263 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (_data_->tp_persona);
#line 1263 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 1263 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_clear_error (&_data_->_inner_error_);
#line 1263 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1263 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 6233 "tpf-persona-store.c"
		}
	}
	{
#line 1269 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp11_ = _data_->tp_persona;
#line 1269 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp12_ = tpf_persona_get_contact (_data_->_tmp11_);
#line 1269 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp13_ = _data_->_tmp12_;
#line 1269 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_state_ = 1;
#line 1269 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		tp_contact_remove_async (_data_->_tmp13_, tpf_persona_store_remove_persona_ready, _data_);
#line 1269 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 6249 "tpf-persona-store.c"
		_state_1:
#line 1269 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		tp_contact_remove_finish (_data_->_tmp13_, _data_->_res_, &_data_->_inner_error_);
#line 1269 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 6255 "tpf-persona-store.c"
			goto __catch9_g_error;
		}
	}
	goto __finally9;
	__catch9_g_error:
	{
#line 1267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->e = _data_->_inner_error_;
#line 1267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = NULL;
#line 1273 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp14_ = _data_->e;
#line 1273 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp15_ = _data_->_tmp14_->message;
#line 1273 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp16_ = g_error_new (FOLKS_PERSONA_STORE_ERROR, FOLKS_PERSONA_STORE_ERROR_REMOVE_FAILED, _ ("Failed to remove a persona from store: %s"), _data_->_tmp15_);
#line 1273 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = _data_->_tmp16_;
#line 1273 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_error_free0 (_data_->e);
#line 6276 "tpf-persona-store.c"
		goto __finally9;
	}
	__finally9:
#line 1267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 1267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_inner_error_->domain == FOLKS_PERSONA_STORE_ERROR) {
#line 1267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (_data_->tp_persona);
#line 1267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 6292 "tpf-persona-store.c"
		} else {
#line 1267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (_data_->tp_persona);
#line 1267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 1267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_clear_error (&_data_->_inner_error_);
#line 1267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 6304 "tpf-persona-store.c"
		}
	}
#line 1248 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->tp_persona);
#line 1248 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 1248 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_state_ != 0) {
#line 1248 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 1248 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 6317 "tpf-persona-store.c"
		}
	}
#line 1248 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (_data_->_async_result);
#line 1248 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 6324 "tpf-persona-store.c"
}


static void
_tpf_persona_store_ensure_persona_for_id_data_free (gpointer _data)
{
	TpfPersonaStoreEnsurePersonaForIdData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_data_->contact_id);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->result);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStoreEnsurePersonaForIdData, _data_);
#line 6341 "tpf-persona-store.c"
}


static void
_tpf_persona_store_ensure_persona_for_id_async_ready_wrapper (GObject *source_object,
                                                              GAsyncResult *res,
                                                              void *user_data)
{
	TpfPersonaStoreEnsurePersonaForIdData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 6357 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 6361 "tpf-persona-store.c"
}


static void
_tpf_persona_store_ensure_persona_for_id (TpfPersonaStore* self,
                                          const gchar* contact_id,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_)
{
	TpfPersonaStoreEnsurePersonaForIdData* _data_;
	TpfPersonaStore* _tmp0_;
	gchar* _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStoreEnsurePersonaForIdData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _tpf_persona_store_ensure_persona_for_id_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 6384 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, _tpf_persona_store_ensure_persona_for_id_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = g_strdup (contact_id);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_data_->contact_id);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->contact_id = _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_ensure_persona_for_id_co (_data_);
#line 6400 "tpf-persona-store.c"
}


static TpfPersona*
_tpf_persona_store_ensure_persona_for_id_finish (TpfPersonaStore* self,
                                                 GAsyncResult* _res_,
                                                 GError** error)
{
	TpfPersona* result;
	TpfPersonaStoreEnsurePersonaForIdData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (NULL == _data_) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return NULL;
#line 6417 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = _data_->result;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->result = NULL;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 6425 "tpf-persona-store.c"
}


static void
_tpf_persona_store_ensure_persona_for_id_ready (GObject* source_object,
                                                GAsyncResult* _res_,
                                                gpointer _user_data_)
{
	TpfPersonaStoreEnsurePersonaForIdData* _data_;
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_ensure_persona_for_id_co (_data_);
#line 6445 "tpf-persona-store.c"
}


static gboolean
_tpf_persona_store_ensure_persona_for_id_co (TpfPersonaStoreEnsurePersonaForIdData* _data_)
{
#line 1281 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 1281 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 6456 "tpf-persona-store.c"
		goto _state_0;
#line 1281 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 6460 "tpf-persona-store.c"
		goto _state_1;
		default:
#line 1281 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 6465 "tpf-persona-store.c"
	}
	_state_0:
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp0_ = _data_->self->priv->_conn;
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp1_ = g_new0 (TpContactFeature, 0);
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp2_ = _data_->_tmp1_;
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp2__length1 = 0;
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_state_ = 1;
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tp_connection_dup_contact_by_id_async (_data_->_tmp0_, _data_->contact_id, (guint) 0, _data_->_tmp2_, _tpf_persona_store_ensure_persona_for_id_ready, _data_);
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 6482 "tpf-persona-store.c"
	_state_1:
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp3_ = tp_connection_dup_contact_by_id_finish (_data_->_tmp0_, _data_->_res_, &_data_->_inner_error_);
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp4_ = _data_->_tmp3_;
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp2_ = (g_free (_data_->_tmp2_), NULL);
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->contact = _data_->_tmp4_;
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 1284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 6500 "tpf-persona-store.c"
	}
#line 1285 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp5_ = _tpf_persona_store_ensure_persona_for_contact (_data_->self, _data_->contact);
#line 1285 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->result = _data_->_tmp5_;
#line 1285 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->contact);
#line 1285 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 1285 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_state_ != 0) {
#line 1285 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 1285 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 6516 "tpf-persona-store.c"
		}
	}
#line 1285 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (_data_->_async_result);
#line 1285 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 6523 "tpf-persona-store.c"
}


static void
tpf_persona_store_real_add_persona_from_details_data_free (gpointer _data)
{
	TpfPersonaStoreAddPersonaFromDetailsData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_hash_table_unref0 (_data_->details);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->result);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStoreAddPersonaFromDetailsData, _data_);
#line 6540 "tpf-persona-store.c"
}


static void
tpf_persona_store_real_add_persona_from_details_async_ready_wrapper (GObject *source_object,
                                                                     GAsyncResult *res,
                                                                     void *user_data)
{
	TpfPersonaStoreAddPersonaFromDetailsData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 6556 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 6560 "tpf-persona-store.c"
}


static gpointer
_g_hash_table_ref0 (gpointer self)
{
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return self ? g_hash_table_ref (self) : NULL;
#line 6569 "tpf-persona-store.c"
}


static void
tpf_persona_store_real_add_persona_from_details (FolksPersonaStore* base,
                                                 GHashTable* details,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_)
{
	TpfPersonaStore * self;
	TpfPersonaStoreAddPersonaFromDetailsData* _data_;
	TpfPersonaStore* _tmp0_;
	GHashTable* _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = (TpfPersonaStore*) base;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStoreAddPersonaFromDetailsData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_store_real_add_persona_from_details_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 6595 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_store_real_add_persona_from_details_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _g_hash_table_ref0 (details);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_hash_table_unref0 (_data_->details);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->details = _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_real_add_persona_from_details_co (_data_);
#line 6611 "tpf-persona-store.c"
}


static FolksPersona*
tpf_persona_store_real_add_persona_from_details_finish (FolksPersonaStore* base,
                                                        GAsyncResult* _res_,
                                                        GError** error)
{
	FolksPersona* result;
	TpfPersonaStoreAddPersonaFromDetailsData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (NULL == _data_) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return NULL;
#line 6628 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = _data_->result;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->result = NULL;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 6636 "tpf-persona-store.c"
}


/**
   * Add a new {@link Persona} to the PersonaStore.
   *
   * See {@link Folks.PersonaStore.add_persona_from_details}.
   *
   * This method is safe to call multiple times concurrently for the same (or
   * different) contact IDs (assuming Telepathy is safe).
   *
   * @throws Folks.PersonaStoreError.INVALID_ARGUMENT if the ``contact`` key was
   * not provided in ``details``
   * @throws Folks.PersonaStoreError.STORE_OFFLINE if the CM is offline
   * @throws Folks.PersonaStoreError.CREATE_FAILED if adding the contact failed
   */
static void
tpf_persona_store_add_persona_from_details_ready (GObject* source_object,
                                                  GAsyncResult* _res_,
                                                  gpointer _user_data_)
{
	TpfPersonaStoreAddPersonaFromDetailsData* _data_;
#line 1330 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 1330 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 1330 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 1330 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 1330 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_real_add_persona_from_details_co (_data_);
#line 6669 "tpf-persona-store.c"
}


static gboolean
tpf_persona_store_real_add_persona_from_details_co (TpfPersonaStoreAddPersonaFromDetailsData* _data_)
{
#line 1301 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 1301 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 6680 "tpf-persona-store.c"
		goto _state_0;
#line 1301 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 6684 "tpf-persona-store.c"
		goto _state_1;
#line 1301 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 2:
#line 6688 "tpf-persona-store.c"
		goto _state_2;
		default:
#line 1301 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 6693 "tpf-persona-store.c"
	}
	_state_0:
#line 1304 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp0_ = tp_asv_get_string (_data_->details, "contact");
#line 1304 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp1_ = g_strdup (_data_->_tmp0_);
#line 1304 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->contact_id = _data_->_tmp1_;
#line 1305 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp2_ = _data_->contact_id;
#line 1305 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp2_ == NULL) {
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp3_ = folks_persona_store_get_type_id ((FolksPersonaStore*) _data_->self);
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp4_ = _data_->_tmp3_;
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp5_ = folks_persona_store_get_id ((FolksPersonaStore*) _data_->self);
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp6_ = _data_->_tmp5_;
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp7_ = _data_->contact_id;
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp8_ = g_error_new (FOLKS_PERSONA_STORE_ERROR, FOLKS_PERSONA_STORE_ERROR_INVALID_ARGUMENT, _ ("Persona store (%s, %s) requires the following details:\n" \
"    contact (provided: ‘%s’)\n"), _data_->_tmp4_, _data_->_tmp6_, _data_->_tmp7_);
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = _data_->_tmp8_;
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_inner_error_->domain == FOLKS_PERSONA_STORE_ERROR) {
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_free0 (_data_->contact_id);
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 6730 "tpf-persona-store.c"
		} else {
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_free0 (_data_->contact_id);
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_clear_error (&_data_->_inner_error_);
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 6742 "tpf-persona-store.c"
		}
	}
#line 1315 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp9_ = tp_asv_get_string (_data_->details, "message");
#line 1315 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp10_ = g_strdup (_data_->_tmp9_);
#line 1315 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->add_message = _data_->_tmp10_;
#line 1316 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp11_ = _data_->add_message;
#line 1316 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (g_strcmp0 (_data_->_tmp11_, "") == 0) {
#line 1317 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_free0 (_data_->add_message);
#line 1317 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->add_message = NULL;
#line 6759 "tpf-persona-store.c"
	}
#line 1319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp12_ = tpf_persona_store_get_account (_data_->self);
#line 1319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp13_ = _data_->_tmp12_;
#line 1319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp14_ = tp_account_get_connection_status (_data_->_tmp13_, NULL);
#line 1319 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->status = _data_->_tmp14_;
#line 1320 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp17_ = _data_->status;
#line 1320 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp17_ == TP_CONNECTION_STATUS_DISCONNECTED) {
#line 1320 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp16_ = TRUE;
#line 6775 "tpf-persona-store.c"
	} else {
#line 1321 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp18_ = _data_->status;
#line 1321 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp16_ = _data_->_tmp18_ == TP_CONNECTION_STATUS_CONNECTING;
#line 6781 "tpf-persona-store.c"
	}
#line 1320 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp16_) {
#line 1320 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp15_ = TRUE;
#line 6787 "tpf-persona-store.c"
	} else {
#line 1322 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp19_ = _data_->self->priv->_conn;
#line 1322 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp15_ = _data_->_tmp19_ == NULL;
#line 6793 "tpf-persona-store.c"
	}
#line 1320 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp15_) {
#line 1324 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp20_ = g_error_new_literal (FOLKS_PERSONA_STORE_ERROR, FOLKS_PERSONA_STORE_ERROR_STORE_OFFLINE, _ ("Cannot create a new Telepathy contact while offline."));
#line 1324 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = _data_->_tmp20_;
#line 1324 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_inner_error_->domain == FOLKS_PERSONA_STORE_ERROR) {
#line 1324 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1324 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_free0 (_data_->add_message);
#line 1324 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_free0 (_data_->contact_id);
#line 1324 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1324 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 6813 "tpf-persona-store.c"
		} else {
#line 1324 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_free0 (_data_->add_message);
#line 1324 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_free0 (_data_->contact_id);
#line 1324 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 1324 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_clear_error (&_data_->_inner_error_);
#line 1324 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1324 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 6827 "tpf-persona-store.c"
		}
	}
	{
#line 1330 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp21_ = _data_->contact_id;
#line 1330 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_state_ = 1;
#line 1330 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tpf_persona_store_ensure_persona_for_id (_data_->self, _data_->_tmp21_, tpf_persona_store_add_persona_from_details_ready, _data_);
#line 1330 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 6839 "tpf-persona-store.c"
		_state_1:
#line 1330 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp22_ = _tpf_persona_store_ensure_persona_for_id_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 1330 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->persona = _data_->_tmp22_;
#line 1330 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 6847 "tpf-persona-store.c"
			goto __catch10_g_error;
		}
#line 1331 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp23_ = _data_->persona;
#line 1331 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp24_ = tpf_persona_get_is_in_contact_list (_data_->_tmp23_);
#line 1331 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp25_ = _data_->_tmp24_;
#line 1331 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->already_exists = _data_->_tmp25_;
#line 1332 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp26_ = _data_->persona;
#line 1332 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp27_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp26_, TPF_TYPE_PERSONA, TpfPersona));
#line 1332 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->tp_persona = _data_->_tmp27_;
#line 1333 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp28_ = _data_->tp_persona;
#line 1333 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp29_ = tpf_persona_get_contact (_data_->_tmp28_);
#line 1333 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp30_ = _data_->_tmp29_;
#line 1333 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp31_ = _data_->add_message;
#line 1333 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_state_ = 2;
#line 1333 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		tp_contact_request_subscription_async (_data_->_tmp30_, _data_->_tmp31_, tpf_persona_store_add_persona_from_details_ready, _data_);
#line 1333 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 6878 "tpf-persona-store.c"
		_state_2:
#line 1333 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		tp_contact_request_subscription_finish (_data_->_tmp30_, _data_->_res_, &_data_->_inner_error_);
#line 1333 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 1333 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (_data_->tp_persona);
#line 1333 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (_data_->persona);
#line 6888 "tpf-persona-store.c"
			goto __catch10_g_error;
		}
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp33_ = _data_->already_exists;
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_tmp33_) {
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp32_ = NULL;
#line 6897 "tpf-persona-store.c"
		} else {
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp34_ = _data_->persona;
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp32_ = _data_->_tmp34_;
#line 6903 "tpf-persona-store.c"
		}
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp35_ = _g_object_ref0 ((FolksPersona*) _data_->_tmp32_);
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->result = _data_->_tmp35_;
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (_data_->tp_persona);
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (_data_->persona);
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_free0 (_data_->add_message);
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_free0 (_data_->contact_id);
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_state_ != 0) {
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 6925 "tpf-persona-store.c"
			}
		}
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 6932 "tpf-persona-store.c"
	}
	goto __finally10;
	__catch10_g_error:
	{
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->e = _data_->_inner_error_;
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = NULL;
#line 1341 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp36_ = _data_->e;
#line 1341 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp37_ = _data_->_tmp36_->message;
#line 1341 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp38_ = g_error_new (FOLKS_PERSONA_STORE_ERROR, FOLKS_PERSONA_STORE_ERROR_CREATE_FAILED, _ ("Failed to add a persona from details: %s"), _data_->_tmp37_);
#line 1341 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = _data_->_tmp38_;
#line 1341 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_error_free0 (_data_->e);
#line 6951 "tpf-persona-store.c"
		goto __finally10;
	}
	__finally10:
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_inner_error_->domain == FOLKS_PERSONA_STORE_ERROR) {
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_free0 (_data_->add_message);
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_free0 (_data_->contact_id);
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 6967 "tpf-persona-store.c"
	} else {
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_free0 (_data_->add_message);
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_free0 (_data_->contact_id);
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_clear_error (&_data_->_inner_error_);
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 6981 "tpf-persona-store.c"
	}
#line 1301 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_data_->add_message);
#line 1301 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_data_->contact_id);
#line 6987 "tpf-persona-store.c"
}


static void
tpf_persona_store_change_is_favourite_data_free (gpointer _data)
{
	TpfPersonaStoreChangeIsFavouriteData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStoreChangeIsFavouriteData, _data_);
#line 7002 "tpf-persona-store.c"
}


static void
tpf_persona_store_change_is_favourite_async_ready_wrapper (GObject *source_object,
                                                           GAsyncResult *res,
                                                           void *user_data)
{
	TpfPersonaStoreChangeIsFavouriteData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 7018 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 7022 "tpf-persona-store.c"
}


void
tpf_persona_store_change_is_favourite (TpfPersonaStore* self,
                                       FolksPersona* persona,
                                       gboolean is_favourite,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_)
{
	TpfPersonaStoreChangeIsFavouriteData* _data_;
	TpfPersonaStore* _tmp0_;
	FolksPersona* _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStoreChangeIsFavouriteData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_store_change_is_favourite_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 7046 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_store_change_is_favourite_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _g_object_ref0 (persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->persona = _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->is_favourite = is_favourite;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_change_is_favourite_co (_data_);
#line 7064 "tpf-persona-store.c"
}


void
tpf_persona_store_change_is_favourite_finish (TpfPersonaStore* self,
                                              GAsyncResult* _res_,
                                              GError** error)
{
	TpfPersonaStoreChangeIsFavouriteData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (NULL == _data_) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return;
#line 7080 "tpf-persona-store.c"
	}
}


/**
   * Change the favourite status of a persona in this store.
   *
   * This function is idempotent, but relies upon having a connection to the
   * Telepathy logger service, so may fail if that connection is not present.
   */
static void
tpf_persona_store_change_is_favourite_ready (GObject* source_object,
                                             GAsyncResult* _res_,
                                             gpointer _user_data_)
{
	TpfPersonaStoreChangeIsFavouriteData* _data_;
#line 1379 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 1379 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 1379 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 1379 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 1379 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_change_is_favourite_co (_data_);
#line 7107 "tpf-persona-store.c"
}


static gboolean
tpf_persona_store_change_is_favourite_co (TpfPersonaStoreChangeIsFavouriteData* _data_)
{
#line 1353 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 1353 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 7118 "tpf-persona-store.c"
		goto _state_0;
#line 1353 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 7122 "tpf-persona-store.c"
		goto _state_1;
#line 1353 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 2:
#line 7126 "tpf-persona-store.c"
		goto _state_2;
		default:
#line 1353 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 7131 "tpf-persona-store.c"
	}
	_state_0:
#line 1358 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp0_ = _data_->self->priv->_logger;
#line 1358 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp0_ == NULL) {
#line 1360 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp1_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR, _ ("Failed to change favorite without a connection to the telepathy-logger" \
" service."));
#line 1360 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = _data_->_tmp1_;
#line 1360 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 1360 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1360 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1360 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 7150 "tpf-persona-store.c"
		} else {
#line 1360 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 1360 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_clear_error (&_data_->_inner_error_);
#line 1360 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1360 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 7160 "tpf-persona-store.c"
		}
	}
#line 1366 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp2_ = tpf_persona_get_contact (G_TYPE_CHECK_INSTANCE_CAST (_data_->persona, TPF_TYPE_PERSONA, TpfPersona));
#line 1366 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp3_ = _data_->_tmp2_;
#line 1366 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp3_ == NULL) {
#line 1368 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp4_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_INVALID_VALUE, _ ("Failed to change favorite status of Telepathy Persona because it has n" \
"o attached TpContact."));
#line 1368 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = _data_->_tmp4_;
#line 1368 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 1368 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1368 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1368 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 7181 "tpf-persona-store.c"
		} else {
#line 1368 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 1368 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_clear_error (&_data_->_inner_error_);
#line 1368 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1368 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 7191 "tpf-persona-store.c"
		}
	}
	{
#line 1376 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp5_ = tpf_persona_get_contact (G_TYPE_CHECK_INSTANCE_CAST (_data_->persona, TPF_TYPE_PERSONA, TpfPersona));
#line 1376 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp6_ = _data_->_tmp5_;
#line 1376 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp7_ = tp_contact_get_identifier (_data_->_tmp6_);
#line 1376 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->id = _data_->_tmp7_;
#line 1378 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->is_favourite) {
#line 1379 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp8_ = _data_->self->priv->_logger;
#line 1379 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp9_ = _data_->id;
#line 1379 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_state_ = 1;
#line 1379 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			logger_add_favourite_contact (_data_->_tmp8_, _data_->_tmp9_, tpf_persona_store_change_is_favourite_ready, _data_);
#line 1379 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 7215 "tpf-persona-store.c"
			_state_1:
#line 1379 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			logger_add_favourite_contact_finish (_data_->_tmp8_, _data_->_res_, &_data_->_inner_error_);
#line 1379 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 7221 "tpf-persona-store.c"
				goto __catch11_g_error;
			}
		} else {
#line 1381 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp10_ = _data_->self->priv->_logger;
#line 1381 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp11_ = _data_->id;
#line 1381 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_state_ = 2;
#line 1381 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			logger_remove_favourite_contact (_data_->_tmp10_, _data_->_tmp11_, tpf_persona_store_change_is_favourite_ready, _data_);
#line 1381 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 7235 "tpf-persona-store.c"
			_state_2:
#line 1381 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			logger_remove_favourite_contact_finish (_data_->_tmp10_, _data_->_res_, &_data_->_inner_error_);
#line 1381 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 7241 "tpf-persona-store.c"
				goto __catch11_g_error;
			}
		}
	}
	goto __finally11;
	__catch11_g_error:
	{
#line 1372 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->e = _data_->_inner_error_;
#line 1372 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = NULL;
#line 1385 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp12_ = tpf_persona_get_contact (G_TYPE_CHECK_INSTANCE_CAST (_data_->persona, TPF_TYPE_PERSONA, TpfPersona));
#line 1385 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp13_ = _data_->_tmp12_;
#line 1385 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp14_ = tp_contact_get_identifier (_data_->_tmp13_);
#line 1385 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp15_ = _data_->_tmp14_;
#line 1385 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp16_ = g_error_new (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR, _ ("Failed to change favorite status for Telepathy contact ‘%s’."), _data_->_tmp15_);
#line 1385 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = _data_->_tmp16_;
#line 1385 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_error_free0 (_data_->e);
#line 7267 "tpf-persona-store.c"
		goto __finally11;
	}
	__finally11:
#line 1372 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 1372 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 1372 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1372 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1372 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 7281 "tpf-persona-store.c"
		} else {
#line 1372 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 1372 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_clear_error (&_data_->_inner_error_);
#line 1372 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1372 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 7291 "tpf-persona-store.c"
		}
	}
#line 1353 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 1353 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_state_ != 0) {
#line 1353 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 1353 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 7302 "tpf-persona-store.c"
		}
	}
#line 1353 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (_data_->_async_result);
#line 1353 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 7309 "tpf-persona-store.c"
}


static void
tpf_persona_store_change_alias_data_free (gpointer _data)
{
	TpfPersonaStoreChangeAliasData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_data_->alias);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStoreChangeAliasData, _data_);
#line 7326 "tpf-persona-store.c"
}


static void
tpf_persona_store_change_alias_async_ready_wrapper (GObject *source_object,
                                                    GAsyncResult *res,
                                                    void *user_data)
{
	TpfPersonaStoreChangeAliasData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 7342 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 7346 "tpf-persona-store.c"
}


void
tpf_persona_store_change_alias (TpfPersonaStore* self,
                                TpfPersona* persona,
                                const gchar* alias,
                                GAsyncReadyCallback _callback_,
                                gpointer _user_data_)
{
	TpfPersonaStoreChangeAliasData* _data_;
	TpfPersonaStore* _tmp0_;
	TpfPersona* _tmp1_;
	gchar* _tmp2_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStoreChangeAliasData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_store_change_alias_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 7371 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_store_change_alias_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _g_object_ref0 (persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->persona = _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = g_strdup (alias);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_data_->alias);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->alias = _tmp2_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_change_alias_co (_data_);
#line 7393 "tpf-persona-store.c"
}


void
tpf_persona_store_change_alias_finish (TpfPersonaStore* self,
                                       GAsyncResult* _res_,
                                       GError** error)
{
	TpfPersonaStoreChangeAliasData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (NULL == _data_) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return;
#line 7409 "tpf-persona-store.c"
	}
}


static void
tpf_persona_store_change_alias_ready (GObject* source_object,
                                      GAsyncResult* _res_,
                                      gpointer _user_data_)
{
	TpfPersonaStoreChangeAliasData* _data_;
#line 1412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 1412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 1412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 1412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 1412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_change_alias_co (_data_);
#line 7430 "tpf-persona-store.c"
}


static gboolean
tpf_persona_store_change_alias_co (TpfPersonaStoreChangeAliasData* _data_)
{
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 7441 "tpf-persona-store.c"
		goto _state_0;
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 7445 "tpf-persona-store.c"
		goto _state_1;
		default:
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 7450 "tpf-persona-store.c"
	}
	_state_0:
#line 1396 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->alias == NULL) {
#line 7455 "tpf-persona-store.c"
		gchar* _tmp0_;
#line 1398 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp0_ = g_strdup ("");
#line 1398 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_free0 (_data_->alias);
#line 1398 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->alias = _tmp0_;
#line 7463 "tpf-persona-store.c"
	}
#line 1401 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp1_ = tpf_persona_get_contact (_data_->persona);
#line 1401 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp2_ = _data_->_tmp1_;
#line 1401 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp2_ == NULL) {
#line 1403 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_warning ("Skipping Tpf.Persona %p alias change to '%s' because it " "has no attached TpContact", _data_->persona, _data_->alias);
#line 1405 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 1405 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_state_ != 0) {
#line 1405 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 1405 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 7481 "tpf-persona-store.c"
			}
		}
#line 1405 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_object_unref (_data_->_async_result);
#line 1405 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 7488 "tpf-persona-store.c"
	}
	{
#line 1410 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp3_ = tpf_persona_get_contact (_data_->persona);
#line 1410 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp4_ = _data_->_tmp3_;
#line 1410 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp5_ = tp_contact_get_identifier (_data_->_tmp4_);
#line 1410 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:1410: Changing alias of persona %s to '%s'.", _data_->_tmp5_, _data_->alias);
#line 1412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp6_ = _data_->self->priv->_conn;
#line 1412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp7_ = tpf_persona_get_contact (_data_->persona);
#line 1412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp8_ = _data_->_tmp7_;
#line 1412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp9_ = tp_contact_get_handle (_data_->_tmp8_);
#line 1412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp10_ = _data_->_tmp9_;
#line 1412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_state_ = 1;
#line 1412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		folks_tp_lowlevel_connection_set_contact_alias_async (_data_->_tmp6_, (guint) ((TpHandle) _data_->_tmp10_), _data_->alias, tpf_persona_store_change_alias_ready, _data_);
#line 1412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return FALSE;
#line 7515 "tpf-persona-store.c"
		_state_1:
#line 1412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		folks_tp_lowlevel_connection_set_contact_alias_finish (_data_->_res_, &_data_->_inner_error_);
#line 1412 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 7521 "tpf-persona-store.c"
			goto __catch12_g_error;
		}
	}
	goto __finally12;
	__catch12_g_error:
	{
#line 1408 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->e1 = _data_->_inner_error_;
#line 1408 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = NULL;
#line 1417 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp11_ = _data_->e1;
#line 1417 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp12_ = _data_->_tmp11_->message;
#line 1417 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp13_ = g_error_new (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR, _ ("Failed to change contact’s alias: %s"), _data_->_tmp12_);
#line 1417 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = _data_->_tmp13_;
#line 1417 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_error_free0 (_data_->e1);
#line 7542 "tpf-persona-store.c"
		goto __finally12;
	}
	__finally12:
#line 1408 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 1408 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 1408 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1408 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1408 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 7556 "tpf-persona-store.c"
		} else {
#line 1408 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 1408 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_clear_error (&_data_->_inner_error_);
#line 1408 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1408 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 7566 "tpf-persona-store.c"
		}
	}
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_state_ != 0) {
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 7577 "tpf-persona-store.c"
		}
	}
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (_data_->_async_result);
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 7584 "tpf-persona-store.c"
}


static void
tpf_persona_store_change_user_birthday_data_free (gpointer _data)
{
	TpfPersonaStoreChangeUserBirthdayData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_date_time_unref0 (_data_->birthday);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStoreChangeUserBirthdayData, _data_);
#line 7601 "tpf-persona-store.c"
}


static void
tpf_persona_store_change_user_birthday_async_ready_wrapper (GObject *source_object,
                                                            GAsyncResult *res,
                                                            void *user_data)
{
	TpfPersonaStoreChangeUserBirthdayData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 7617 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 7621 "tpf-persona-store.c"
}


static gpointer
_g_date_time_ref0 (gpointer self)
{
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return self ? g_date_time_ref (self) : NULL;
#line 7630 "tpf-persona-store.c"
}


void
tpf_persona_store_change_user_birthday (TpfPersonaStore* self,
                                        TpfPersona* persona,
                                        GDateTime* birthday,
                                        GAsyncReadyCallback _callback_,
                                        gpointer _user_data_)
{
	TpfPersonaStoreChangeUserBirthdayData* _data_;
	TpfPersonaStore* _tmp0_;
	TpfPersona* _tmp1_;
	GDateTime* _tmp2_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStoreChangeUserBirthdayData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_store_change_user_birthday_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 7655 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_store_change_user_birthday_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _g_object_ref0 (persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->persona = _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = _g_date_time_ref0 (birthday);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_date_time_unref0 (_data_->birthday);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->birthday = _tmp2_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_change_user_birthday_co (_data_);
#line 7677 "tpf-persona-store.c"
}


void
tpf_persona_store_change_user_birthday_finish (TpfPersonaStore* self,
                                               GAsyncResult* _res_,
                                               GError** error)
{
	TpfPersonaStoreChangeUserBirthdayData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (NULL == _data_) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return;
#line 7693 "tpf-persona-store.c"
	}
}


static gchar*
g_date_time_to_string (GDateTime* self)
{
	gchar* result = NULL;
	gchar* _tmp0_;
#line 3009 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 3010 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = g_date_time_format (self, "%FT%H:%M:%S%z");
#line 3010 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _tmp0_;
#line 3010 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 7711 "tpf-persona-store.c"
}


static TpContactInfoField*
_vala_TpContactInfoField_copy (TpContactInfoField* self)
{
#line 1433 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return g_boxed_copy (tp_contact_info_field_get_type (), self);
#line 7720 "tpf-persona-store.c"
}


static void
_vala_TpContactInfoField_free (TpContactInfoField* self)
{
#line 1433 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_boxed_free (tp_contact_info_field_get_type (), self);
#line 7729 "tpf-persona-store.c"
}


static void
tpf_persona_store_change_user_birthday_ready (GObject* source_object,
                                              GAsyncResult* _res_,
                                              gpointer _user_data_)
{
	TpfPersonaStoreChangeUserBirthdayData* _data_;
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_change_user_birthday_co (_data_);
#line 7749 "tpf-persona-store.c"
}


static gboolean
tpf_persona_store_change_user_birthday_co (TpfPersonaStoreChangeUserBirthdayData* _data_)
{
#line 1423 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 1423 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 7760 "tpf-persona-store.c"
		goto _state_0;
#line 1423 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 7764 "tpf-persona-store.c"
		goto _state_1;
		default:
#line 1423 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 7769 "tpf-persona-store.c"
	}
	_state_0:
#line 1428 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->birthday == NULL) {
#line 1429 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp0_ = g_strdup ("");
#line 1429 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_free0 (_data_->birthday_str);
#line 1429 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->birthday_str = _data_->_tmp0_;
#line 7780 "tpf-persona-store.c"
	} else {
#line 1431 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp1_ = g_date_time_to_string (_data_->birthday);
#line 1431 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_free0 (_data_->birthday_str);
#line 1431 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->birthday_str = _data_->_tmp1_;
#line 7788 "tpf-persona-store.c"
	}
#line 1433 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp2_ = folks_small_set_new (tp_contact_info_field_get_type (), (GBoxedCopyFunc) _vala_TpContactInfoField_copy, (GDestroyNotify) _vala_TpContactInfoField_free, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1433 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->info_set = _data_->_tmp2_;
#line 1434 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp3_ = _data_->birthday_str;
#line 1434 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp4_ = g_strdup (_data_->_tmp3_);
#line 1434 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp5_ = g_new0 (gchar*, 1 + 1);
#line 1434 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp5_[0] = _data_->_tmp4_;
#line 1434 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->values = _data_->_tmp5_;
#line 1434 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->values_length1 = 1;
#line 1434 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_values_size_ = _data_->values_length1;
#line 1435 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp6_ = g_new0 (gchar*, 1 + 1);
#line 1435 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp6_[0] = NULL;
#line 1435 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->parameters = _data_->_tmp6_;
#line 1435 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->parameters_length1 = 1;
#line 1435 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_parameters_size_ = _data_->parameters_length1;
#line 1437 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp7_ = tp_contact_info_field_new ("bday", _data_->parameters, _data_->values);
#line 1437 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->field = _data_->_tmp7_;
#line 1438 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	gee_abstract_collection_add ((GeeAbstractCollection*) _data_->info_set, _data_->field);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_state_ = 1;
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_change_user_contact_info (_data_->self, _data_->persona, _data_->info_set, tpf_persona_store_change_user_birthday_ready, _data_);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 7830 "tpf-persona-store.c"
	_state_1:
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_change_user_contact_info_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_inner_error_->domain == FOLKS_PERSONA_STORE_ERROR) {
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			__vala_TpContactInfoField_free0 (_data_->field);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->parameters = (_vala_array_free (_data_->parameters, _data_->parameters_length1, (GDestroyNotify) g_free), NULL);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->values = (_vala_array_free (_data_->values, _data_->values_length1, (GDestroyNotify) g_free), NULL);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (_data_->info_set);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_free0 (_data_->birthday_str);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 7854 "tpf-persona-store.c"
		} else {
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			__vala_TpContactInfoField_free0 (_data_->field);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->parameters = (_vala_array_free (_data_->parameters, _data_->parameters_length1, (GDestroyNotify) g_free), NULL);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->values = (_vala_array_free (_data_->values, _data_->values_length1, (GDestroyNotify) g_free), NULL);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (_data_->info_set);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_free0 (_data_->birthday_str);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_clear_error (&_data_->_inner_error_);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1440 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 7874 "tpf-persona-store.c"
		}
	}
#line 1423 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	__vala_TpContactInfoField_free0 (_data_->field);
#line 1423 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->parameters = (_vala_array_free (_data_->parameters, _data_->parameters_length1, (GDestroyNotify) g_free), NULL);
#line 1423 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->values = (_vala_array_free (_data_->values, _data_->values_length1, (GDestroyNotify) g_free), NULL);
#line 1423 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->info_set);
#line 1423 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_data_->birthday_str);
#line 1423 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 1423 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_state_ != 0) {
#line 1423 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 1423 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 7895 "tpf-persona-store.c"
		}
	}
#line 1423 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (_data_->_async_result);
#line 1423 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 7902 "tpf-persona-store.c"
}


static void
tpf_persona_store_change_user_full_name_data_free (gpointer _data)
{
	TpfPersonaStoreChangeUserFullNameData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_data_->full_name);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStoreChangeUserFullNameData, _data_);
#line 7919 "tpf-persona-store.c"
}


static void
tpf_persona_store_change_user_full_name_async_ready_wrapper (GObject *source_object,
                                                             GAsyncResult *res,
                                                             void *user_data)
{
	TpfPersonaStoreChangeUserFullNameData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 7935 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 7939 "tpf-persona-store.c"
}


void
tpf_persona_store_change_user_full_name (TpfPersonaStore* self,
                                         TpfPersona* persona,
                                         const gchar* full_name,
                                         GAsyncReadyCallback _callback_,
                                         gpointer _user_data_)
{
	TpfPersonaStoreChangeUserFullNameData* _data_;
	TpfPersonaStore* _tmp0_;
	TpfPersona* _tmp1_;
	gchar* _tmp2_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStoreChangeUserFullNameData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_store_change_user_full_name_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 7964 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_store_change_user_full_name_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _g_object_ref0 (persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->persona = _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = g_strdup (full_name);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_data_->full_name);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->full_name = _tmp2_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_change_user_full_name_co (_data_);
#line 7986 "tpf-persona-store.c"
}


void
tpf_persona_store_change_user_full_name_finish (TpfPersonaStore* self,
                                                GAsyncResult* _res_,
                                                GError** error)
{
	TpfPersonaStoreChangeUserFullNameData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (NULL == _data_) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return;
#line 8002 "tpf-persona-store.c"
	}
}


static void
tpf_persona_store_change_user_full_name_ready (GObject* source_object,
                                               GAsyncResult* _res_,
                                               gpointer _user_data_)
{
	TpfPersonaStoreChangeUserFullNameData* _data_;
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_change_user_full_name_co (_data_);
#line 8023 "tpf-persona-store.c"
}


static gboolean
tpf_persona_store_change_user_full_name_co (TpfPersonaStoreChangeUserFullNameData* _data_)
{
#line 1443 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 1443 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 8034 "tpf-persona-store.c"
		goto _state_0;
#line 1443 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 8038 "tpf-persona-store.c"
		goto _state_1;
		default:
#line 1443 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 8043 "tpf-persona-store.c"
	}
	_state_0:
#line 1447 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->full_name == NULL) {
#line 8048 "tpf-persona-store.c"
		gchar* _tmp0_;
#line 1449 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp0_ = g_strdup ("");
#line 1449 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_free0 (_data_->full_name);
#line 1449 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->full_name = _tmp0_;
#line 8056 "tpf-persona-store.c"
	}
#line 1452 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp1_ = folks_small_set_new (tp_contact_info_field_get_type (), (GBoxedCopyFunc) _vala_TpContactInfoField_copy, (GDestroyNotify) _vala_TpContactInfoField_free, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1452 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->info_set = _data_->_tmp1_;
#line 1453 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp2_ = g_strdup (_data_->full_name);
#line 1453 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp3_ = g_new0 (gchar*, 1 + 1);
#line 1453 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp3_[0] = _data_->_tmp2_;
#line 1453 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->values = _data_->_tmp3_;
#line 1453 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->values_length1 = 1;
#line 1453 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_values_size_ = _data_->values_length1;
#line 1454 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp4_ = g_new0 (gchar*, 1 + 1);
#line 1454 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp4_[0] = NULL;
#line 1454 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->parameters = _data_->_tmp4_;
#line 1454 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->parameters_length1 = 1;
#line 1454 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_parameters_size_ = _data_->parameters_length1;
#line 1456 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp5_ = tp_contact_info_field_new ("fn", _data_->parameters, _data_->values);
#line 1456 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->field = _data_->_tmp5_;
#line 1457 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	gee_abstract_collection_add ((GeeAbstractCollection*) _data_->info_set, _data_->field);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_state_ = 1;
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_change_user_contact_info (_data_->self, _data_->persona, _data_->info_set, tpf_persona_store_change_user_full_name_ready, _data_);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 8096 "tpf-persona-store.c"
	_state_1:
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_change_user_contact_info_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_inner_error_->domain == FOLKS_PERSONA_STORE_ERROR) {
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			__vala_TpContactInfoField_free0 (_data_->field);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->parameters = (_vala_array_free (_data_->parameters, _data_->parameters_length1, (GDestroyNotify) g_free), NULL);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->values = (_vala_array_free (_data_->values, _data_->values_length1, (GDestroyNotify) g_free), NULL);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (_data_->info_set);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 8118 "tpf-persona-store.c"
		} else {
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			__vala_TpContactInfoField_free0 (_data_->field);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->parameters = (_vala_array_free (_data_->parameters, _data_->parameters_length1, (GDestroyNotify) g_free), NULL);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->values = (_vala_array_free (_data_->values, _data_->values_length1, (GDestroyNotify) g_free), NULL);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (_data_->info_set);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_clear_error (&_data_->_inner_error_);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1459 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 8136 "tpf-persona-store.c"
		}
	}
#line 1443 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	__vala_TpContactInfoField_free0 (_data_->field);
#line 1443 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->parameters = (_vala_array_free (_data_->parameters, _data_->parameters_length1, (GDestroyNotify) g_free), NULL);
#line 1443 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->values = (_vala_array_free (_data_->values, _data_->values_length1, (GDestroyNotify) g_free), NULL);
#line 1443 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->info_set);
#line 1443 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 1443 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_state_ != 0) {
#line 1443 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 1443 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 8155 "tpf-persona-store.c"
		}
	}
#line 1443 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (_data_->_async_result);
#line 1443 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 8162 "tpf-persona-store.c"
}


static void
_tpf_persona_store_change_user_details_data_free (gpointer _data)
{
	TpfPersonaStoreChangeUserDetailsData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->details);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_data_->field_name);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStoreChangeUserDetailsData, _data_);
#line 8181 "tpf-persona-store.c"
}


static void
_tpf_persona_store_change_user_details_async_ready_wrapper (GObject *source_object,
                                                            GAsyncResult *res,
                                                            void *user_data)
{
	TpfPersonaStoreChangeUserDetailsData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 8197 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 8201 "tpf-persona-store.c"
}


void
_tpf_persona_store_change_user_details (TpfPersonaStore* self,
                                        TpfPersona* persona,
                                        GeeSet* details,
                                        const gchar* field_name,
                                        GAsyncReadyCallback _callback_,
                                        gpointer _user_data_)
{
	TpfPersonaStoreChangeUserDetailsData* _data_;
	TpfPersonaStore* _tmp0_;
	TpfPersona* _tmp1_;
	GeeSet* _tmp2_;
	gchar* _tmp3_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStoreChangeUserDetailsData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _tpf_persona_store_change_user_details_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 8228 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, _tpf_persona_store_change_user_details_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _g_object_ref0 (persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->persona = _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = _g_object_ref0 (details);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->details);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->details = _tmp2_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp3_ = g_strdup (field_name);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_free0 (_data_->field_name);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->field_name = _tmp3_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_change_user_details_co (_data_);
#line 8256 "tpf-persona-store.c"
}


void
_tpf_persona_store_change_user_details_finish (TpfPersonaStore* self,
                                               GAsyncResult* _res_,
                                               GError** error)
{
	TpfPersonaStoreChangeUserDetailsData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (NULL == _data_) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return;
#line 8272 "tpf-persona-store.c"
	}
}


static const gchar*
string_to_string (const gchar* self)
{
	const gchar* result = NULL;
#line 1513 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1514 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = self;
#line 1514 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 8287 "tpf-persona-store.c"
}


static void
_vala_array_add9 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
#line 1481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if ((*length) == (*size)) {
#line 1481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 1481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 8303 "tpf-persona-store.c"
	}
#line 1481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	(*array)[(*length)++] = value;
#line 1481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	(*array)[*length] = NULL;
#line 8309 "tpf-persona-store.c"
}


static void
_tpf_persona_store_change_user_details_ready (GObject* source_object,
                                              GAsyncResult* _res_,
                                              gpointer _user_data_)
{
	TpfPersonaStoreChangeUserDetailsData* _data_;
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_change_user_details_co (_data_);
#line 8329 "tpf-persona-store.c"
}


static gboolean
_tpf_persona_store_change_user_details_co (TpfPersonaStoreChangeUserDetailsData* _data_)
{
#line 1462 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 1462 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 8340 "tpf-persona-store.c"
		goto _state_0;
#line 1462 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 8344 "tpf-persona-store.c"
		goto _state_1;
		default:
#line 1462 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 8349 "tpf-persona-store.c"
	}
	_state_0:
#line 1467 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp0_ = folks_small_set_new (tp_contact_info_field_get_type (), (GBoxedCopyFunc) _vala_TpContactInfoField_copy, (GDestroyNotify) _vala_TpContactInfoField_free, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1467 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->info_set = _data_->_tmp0_;
#line 8356 "tpf-persona-store.c"
	{
#line 1469 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp1_ = gee_iterable_iterator ((GeeIterable*) _data_->details);
#line 1469 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_afd_it = _data_->_tmp1_;
#line 1469 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (TRUE) {
#line 1469 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp2_ = _data_->_afd_it;
#line 1469 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (!gee_iterator_next (_data_->_tmp2_)) {
#line 1469 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				break;
#line 8370 "tpf-persona-store.c"
			}
#line 1469 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp3_ = _data_->_afd_it;
#line 1469 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp4_ = gee_iterator_get (_data_->_tmp3_);
#line 1469 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->afd = (FolksAbstractFieldDetails*) _data_->_tmp4_;
#line 1471 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp5_ = _data_->afd;
#line 1471 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp6_ = folks_abstract_field_details_get_value (_data_->_tmp5_);
#line 1471 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp7_ = _data_->_tmp6_;
#line 1471 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp8_ = g_strdup ((const gchar*) _data_->_tmp7_);
#line 1471 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp9_ = g_new0 (gchar*, 1 + 1);
#line 1471 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp9_[0] = _data_->_tmp8_;
#line 1471 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->values = _data_->_tmp9_;
#line 1471 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->values_length1 = 1;
#line 1471 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_values_size_ = _data_->values_length1;
#line 1472 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp10_ = g_new0 (gchar*, 0 + 1);
#line 1472 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->parameters = _data_->_tmp10_;
#line 1472 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->parameters_length1 = 0;
#line 1472 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_parameters_size_ = _data_->parameters_length1;
#line 1474 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp11_ = _data_->afd;
#line 1474 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp12_ = folks_abstract_field_details_get_parameters (_data_->_tmp11_);
#line 1474 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp13_ = _data_->_tmp12_;
#line 1474 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp14_ = gee_multi_map_map_iterator (_data_->_tmp13_);
#line 1474 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->iter = _data_->_tmp14_;
#line 1476 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			while (TRUE) {
#line 1476 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp15_ = _data_->iter;
#line 1476 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				if (!gee_map_iterator_next (_data_->_tmp15_)) {
#line 1476 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
					break;
#line 8422 "tpf-persona-store.c"
				}
#line 1478 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp16_ = _data_->iter;
#line 1478 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp17_ = gee_map_iterator_get_key (_data_->_tmp16_);
#line 1478 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->param_name = (gchar*) _data_->_tmp17_;
#line 1479 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp18_ = _data_->iter;
#line 1479 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp19_ = gee_map_iterator_get_value (_data_->_tmp18_);
#line 1479 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->param_value = (gchar*) _data_->_tmp19_;
#line 1481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp20_ = _data_->parameters;
#line 1481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp20__length1 = _data_->parameters_length1;
#line 1481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp21_ = _data_->param_name;
#line 1481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp22_ = string_to_string (_data_->_tmp21_);
#line 1481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp23_ = _data_->param_value;
#line 1481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp24_ = string_to_string (_data_->_tmp23_);
#line 1481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp25_ = g_strconcat (_data_->_tmp22_, "=", _data_->_tmp24_, NULL);
#line 1481 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_vala_array_add9 (&_data_->parameters, &_data_->parameters_length1, &_data_->_parameters_size_, _data_->_tmp25_);
#line 1476 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_g_free0 (_data_->param_value);
#line 1476 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_g_free0 (_data_->param_name);
#line 8456 "tpf-persona-store.c"
			}
#line 1484 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp26_ = _data_->parameters;
#line 1484 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp26__length1 = _data_->parameters_length1;
#line 1484 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (_data_->_tmp26__length1 == 0) {
#line 1485 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp27_ = g_new0 (gchar*, 1 + 1);
#line 1485 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp27_[0] = NULL;
#line 1485 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->parameters = (_vala_array_free (_data_->parameters, _data_->parameters_length1, (GDestroyNotify) g_free), NULL);
#line 1485 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->parameters = _data_->_tmp27_;
#line 1485 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->parameters_length1 = 1;
#line 1485 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_parameters_size_ = _data_->parameters_length1;
#line 8476 "tpf-persona-store.c"
			}
#line 1487 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp28_ = _data_->parameters;
#line 1487 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp28__length1 = _data_->parameters_length1;
#line 1487 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp29_ = _data_->values;
#line 1487 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp29__length1 = _data_->values_length1;
#line 1487 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp30_ = tp_contact_info_field_new (_data_->field_name, _data_->_tmp28_, _data_->_tmp29_);
#line 1487 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->field = _data_->_tmp30_;
#line 1488 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp31_ = _data_->info_set;
#line 1488 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp32_ = _data_->field;
#line 1488 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			gee_abstract_collection_add ((GeeAbstractCollection*) _data_->_tmp31_, _data_->_tmp32_);
#line 1469 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			__vala_TpContactInfoField_free0 (_data_->field);
#line 1469 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (_data_->iter);
#line 1469 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->parameters = (_vala_array_free (_data_->parameters, _data_->parameters_length1, (GDestroyNotify) g_free), NULL);
#line 1469 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->values = (_vala_array_free (_data_->values, _data_->values_length1, (GDestroyNotify) g_free), NULL);
#line 1469 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (_data_->afd);
#line 8506 "tpf-persona-store.c"
		}
#line 1469 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (_data_->_afd_it);
#line 8510 "tpf-persona-store.c"
	}
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp33_ = _data_->info_set;
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_state_ = 1;
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_change_user_contact_info (_data_->self, _data_->persona, _data_->_tmp33_, _tpf_persona_store_change_user_details_ready, _data_);
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 8520 "tpf-persona-store.c"
	_state_1:
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_change_user_contact_info_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_inner_error_->domain == FOLKS_PERSONA_STORE_ERROR) {
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (_data_->info_set);
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 8536 "tpf-persona-store.c"
		} else {
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_object_unref0 (_data_->info_set);
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_clear_error (&_data_->_inner_error_);
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1491 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 8548 "tpf-persona-store.c"
		}
	}
#line 1462 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->info_set);
#line 1462 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 1462 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_state_ != 0) {
#line 1462 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 1462 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 8561 "tpf-persona-store.c"
		}
	}
#line 1462 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (_data_->_async_result);
#line 1462 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 8568 "tpf-persona-store.c"
}


static void
_tpf_persona_store_change_user_contact_info_data_free (gpointer _data)
{
	TpfPersonaStoreChangeUserContactInfoData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->info_set);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStoreChangeUserContactInfoData, _data_);
#line 8585 "tpf-persona-store.c"
}


static void
_tpf_persona_store_change_user_contact_info_async_ready_wrapper (GObject *source_object,
                                                                 GAsyncResult *res,
                                                                 void *user_data)
{
	TpfPersonaStoreChangeUserContactInfoData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 8601 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 8605 "tpf-persona-store.c"
}


static void
_tpf_persona_store_change_user_contact_info (TpfPersonaStore* self,
                                             TpfPersona* persona,
                                             FolksSmallSet* info_set,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_)
{
	TpfPersonaStoreChangeUserContactInfoData* _data_;
	TpfPersonaStore* _tmp0_;
	TpfPersona* _tmp1_;
	FolksSmallSet* _tmp2_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStoreChangeUserContactInfoData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _tpf_persona_store_change_user_contact_info_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 8630 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, _tpf_persona_store_change_user_contact_info_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _g_object_ref0 (persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->persona);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->persona = _tmp1_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = _g_object_ref0 (info_set);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->info_set);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->info_set = _tmp2_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_change_user_contact_info_co (_data_);
#line 8652 "tpf-persona-store.c"
}


static void
_tpf_persona_store_change_user_contact_info_finish (TpfPersonaStore* self,
                                                    GAsyncResult* _res_,
                                                    GError** error)
{
	TpfPersonaStoreChangeUserContactInfoData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (NULL == _data_) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return;
#line 8668 "tpf-persona-store.c"
	}
}


static void
_tpf_persona_store_change_user_contact_info_ready (GObject* source_object,
                                                   GAsyncResult* _res_,
                                                   gpointer _user_data_)
{
	TpfPersonaStoreChangeUserContactInfoData* _data_;
#line 1511 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 1511 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 1511 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 1511 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 1511 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_change_user_contact_info_co (_data_);
#line 8689 "tpf-persona-store.c"
}


static gpointer
_g_error_copy0 (gpointer self)
{
#line 1516 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return self ? g_error_copy (self) : NULL;
#line 8698 "tpf-persona-store.c"
}


static void
__vala_TpContactInfoField_free0_ (gpointer var)
{
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	(var == NULL) ? NULL : (var = (_vala_TpContactInfoField_free (var), NULL));
#line 8707 "tpf-persona-store.c"
}


static inline void
_g_list_free___vala_TpContactInfoField_free0_ (GList* self)
{
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_list_free_full (self, (GDestroyNotify) __vala_TpContactInfoField_free0_);
#line 8716 "tpf-persona-store.c"
}


static gboolean
_tpf_persona_store_change_user_contact_info_co (TpfPersonaStoreChangeUserContactInfoData* _data_)
{
#line 1494 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 1494 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 8727 "tpf-persona-store.c"
		goto _state_0;
#line 1494 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 8731 "tpf-persona-store.c"
		goto _state_1;
		default:
#line 1494 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 8736 "tpf-persona-store.c"
	}
	_state_0:
#line 1497 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp0_ = folks_persona_get_is_user ((FolksPersona*) _data_->persona);
#line 1497 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp1_ = _data_->_tmp0_;
#line 1497 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (!_data_->_tmp1_) {
#line 1499 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp2_ = g_error_new_literal (FOLKS_PERSONA_STORE_ERROR, FOLKS_PERSONA_STORE_ERROR_UNSUPPORTED_ON_NON_USER, _ ("Extended information may only be set on the user’s Telepathy contact."));
#line 1499 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = _data_->_tmp2_;
#line 1499 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_inner_error_->domain == FOLKS_PERSONA_STORE_ERROR) {
#line 1499 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1499 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1499 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 8757 "tpf-persona-store.c"
		} else {
#line 1499 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 1499 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_clear_error (&_data_->_inner_error_);
#line 1499 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1499 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 8767 "tpf-persona-store.c"
		}
	}
#line 1503 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp3_ = _tpf_persona_store_contact_info_set_to_list (_data_->info_set);
#line 1503 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->info_list = _data_->_tmp3_;
#line 1504 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp4_ = tpf_persona_store_get_account (_data_->self);
#line 1504 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp5_ = _data_->_tmp4_;
#line 1504 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp6_ = tp_account_get_connection (_data_->_tmp5_);
#line 1504 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp7_ = _data_->_tmp6_;
#line 1504 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_tmp7_ != NULL) {
#line 1506 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_error_ = NULL;
#line 1507 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->success = FALSE;
#line 8788 "tpf-persona-store.c"
		{
#line 1511 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp9_ = _data_->self->priv->_conn;
#line 1511 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp10_ = _data_->info_list;
#line 1511 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_state_ = 1;
#line 1511 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			tp_connection_set_contact_info_async (_data_->_tmp9_, _data_->_tmp10_, _tpf_persona_store_change_user_contact_info_ready, _data_);
#line 1511 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 8800 "tpf-persona-store.c"
			_state_1:
#line 1511 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp8_ = tp_connection_set_contact_info_finish (_data_->_tmp9_, _data_->_res_, &_data_->_inner_error_);
#line 1511 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 8806 "tpf-persona-store.c"
				goto __catch13_g_error;
			}
#line 1510 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->success = _data_->_tmp8_;
#line 8811 "tpf-persona-store.c"
		}
		goto __finally13;
		__catch13_g_error:
		{
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->e = _data_->_inner_error_;
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_inner_error_ = NULL;
#line 1516 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp11_ = _data_->e;
#line 1516 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp12_ = _g_error_copy0 (_data_->_tmp11_);
#line 1516 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_error_free0 (_data_->_error_);
#line 1516 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_error_ = _data_->_tmp12_;
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_g_error_free0 (_data_->e);
#line 8830 "tpf-persona-store.c"
		}
		__finally13:
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (_data_->_inner_error_->domain == FOLKS_PERSONA_STORE_ERROR) {
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_g_error_free0 (_data_->_error_);
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				(_data_->info_list == NULL) ? NULL : (_data_->info_list = (_g_list_free___vala_TpContactInfoField_free0_ (_data_->info_list), NULL));
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				g_object_unref (_data_->_async_result);
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				return FALSE;
#line 8847 "tpf-persona-store.c"
			} else {
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_g_error_free0 (_data_->_error_);
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				(_data_->info_list == NULL) ? NULL : (_data_->info_list = (_g_list_free___vala_TpContactInfoField_free0_ (_data_->info_list), NULL));
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				g_clear_error (&_data_->_inner_error_);
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				g_object_unref (_data_->_async_result);
#line 1508 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				return FALSE;
#line 8861 "tpf-persona-store.c"
			}
		}
#line 1519 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp14_ = _data_->_error_;
#line 1519 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_tmp14_ != NULL) {
#line 1519 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp13_ = TRUE;
#line 8870 "tpf-persona-store.c"
		} else {
#line 1519 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp15_ = _data_->success;
#line 1519 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp13_ = !_data_->_tmp15_;
#line 8876 "tpf-persona-store.c"
		}
#line 1519 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_tmp13_) {
#line 1523 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_data_->_tmp17_ = _data_->_error_;
#line 1523 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (_data_->_tmp17_ != NULL) {
#line 1523 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp18_ = _data_->_error_;
#line 1523 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp19_ = _data_->_tmp18_->message;
#line 1523 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp16_ = _data_->_tmp19_;
#line 8890 "tpf-persona-store.c"
			} else {
#line 1523 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				_data_->_tmp16_ = "(reason unknown)";
#line 8894 "tpf-persona-store.c"
			}
#line 1521 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_warning ("Failed to set extended information on user's " "Telepathy contact: %s", _data_->_tmp16_);
#line 8898 "tpf-persona-store.c"
		}
#line 1504 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_error_free0 (_data_->_error_);
#line 8902 "tpf-persona-store.c"
	} else {
#line 1528 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_tmp20_ = g_error_new_literal (FOLKS_PERSONA_STORE_ERROR, FOLKS_PERSONA_STORE_ERROR_STORE_OFFLINE, _ ("Extended information cannot be written because the store is disconnect" \
"ed."));
#line 1528 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_inner_error_ = _data_->_tmp20_;
#line 1528 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		if (_data_->_inner_error_->domain == FOLKS_PERSONA_STORE_ERROR) {
#line 1528 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 1528 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			(_data_->info_list == NULL) ? NULL : (_data_->info_list = (_g_list_free___vala_TpContactInfoField_free0_ (_data_->info_list), NULL));
#line 1528 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1528 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 8918 "tpf-persona-store.c"
		} else {
#line 1528 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			(_data_->info_list == NULL) ? NULL : (_data_->info_list = (_g_list_free___vala_TpContactInfoField_free0_ (_data_->info_list), NULL));
#line 1528 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 1528 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_clear_error (&_data_->_inner_error_);
#line 1528 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_object_unref (_data_->_async_result);
#line 1528 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			return FALSE;
#line 8930 "tpf-persona-store.c"
		}
	}
#line 1494 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	(_data_->info_list == NULL) ? NULL : (_data_->info_list = (_g_list_free___vala_TpContactInfoField_free0_ (_data_->info_list), NULL));
#line 1494 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 1494 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_state_ != 0) {
#line 1494 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 1494 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 8943 "tpf-persona-store.c"
		}
	}
#line 1494 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (_data_->_async_result);
#line 1494 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 8950 "tpf-persona-store.c"
}


static gpointer
__vala_TpContactInfoField_copy0 (gpointer self)
{
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return self ? _vala_TpContactInfoField_copy (self) : NULL;
#line 8959 "tpf-persona-store.c"
}


static GList*
_tpf_persona_store_contact_info_set_to_list (FolksSmallSet* info_set)
{
	GList* result = NULL;
	GList* info_list = NULL;
#line 1533 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (info_set != NULL, NULL);
#line 1536 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	info_list = NULL;
#line 8972 "tpf-persona-store.c"
	{
		FolksSmallSet* _info_field_list = NULL;
		FolksSmallSet* _tmp0_;
		gint _info_field_size = 0;
		FolksSmallSet* _tmp1_;
		gint _tmp2_;
		gint _tmp3_;
		gint _info_field_index = 0;
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp0_ = _g_object_ref0 (info_set);
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_info_field_list = _tmp0_;
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp1_ = _info_field_list;
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = gee_collection_get_size ((GeeCollection*) _tmp1_);
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = _tmp2_;
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_info_field_size = _tmp3_;
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_info_field_index = -1;
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (TRUE) {
#line 8997 "tpf-persona-store.c"
			gint _tmp4_;
			gint _tmp5_;
			gint _tmp6_;
			TpContactInfoField* info_field = NULL;
			FolksSmallSet* _tmp7_;
			gint _tmp8_;
			gconstpointer _tmp9_;
			TpContactInfoField* _tmp10_;
			TpContactInfoField* _tmp11_;
			const gchar* _tmp12_;
			TpContactInfoField* _tmp13_;
			gchar** _tmp14_;
			gint _tmp14__length1;
			TpContactInfoField* _tmp15_;
			gchar** _tmp16_;
			gint _tmp16__length1;
			TpContactInfoField* _tmp17_;
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp4_ = _info_field_index;
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_info_field_index = _tmp4_ + 1;
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp5_ = _info_field_index;
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp6_ = _info_field_size;
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			if (!(_tmp5_ < _tmp6_)) {
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
				break;
#line 9027 "tpf-persona-store.c"
			}
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp7_ = _info_field_list;
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp8_ = _info_field_index;
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp9_ = folks_small_set_get (_tmp7_, _tmp8_);
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp10_ = __vala_TpContactInfoField_copy0 ((TpContactInfoField*) _tmp9_);
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			info_field = _tmp10_;
#line 1539 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp11_ = info_field;
#line 1539 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp12_ = _tmp11_->field_name;
#line 1539 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp13_ = info_field;
#line 1539 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp14_ = _tmp13_->parameters;
#line 1539 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp14__length1 = _vala_array_length (_tmp13_->parameters);
#line 1539 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp15_ = info_field;
#line 1539 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp16_ = _tmp15_->field_value;
#line 1539 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp16__length1 = _vala_array_length (_tmp15_->field_value);
#line 1539 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			_tmp17_ = tp_contact_info_field_new (_tmp12_, _tmp14_, _tmp16_);
#line 1539 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			info_list = g_list_prepend (info_list, _tmp17_);
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			__vala_TpContactInfoField_free0 (info_field);
#line 9061 "tpf-persona-store.c"
		}
#line 1537 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (_info_field_list);
#line 9065 "tpf-persona-store.c"
	}
#line 1543 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	info_list = g_list_reverse (info_list);
#line 1545 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = info_list;
#line 1545 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 9073 "tpf-persona-store.c"
}


/**
   * Get a map of all the currently constructed {@link Tpf.PersonaStore}s.
   *
   * If a {@link Folks.BackendStore} has been prepared, this map will be
   * complete, containing every store known to the Telepathy account manager. If
   * no {@link Folks.BackendStore} has been prepared, this map will only contain
   * the stores which have been created by calling
   * {@link Tpf.PersonaStore.dup_for_account}.
   *
   * This map is read-only. Use {@link Folks.BackendStore} or
   * {@link Tpf.PersonaStore.dup_for_account} to add stores.
   *
   * @return map from {@link Folks.PersonaStore.id} to {@link Tpf.PersonaStore}
   * @since 0.6.6
   */
GeeMap*
tpf_persona_store_list_persona_stores (void)
{
	GeeMap* result = NULL;
	GeeMap* store = NULL;
	GeeHashMap* _tmp0_;
	GeeMap* _tmp5_;
#line 1575 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = tpf_persona_store__persona_stores_by_account;
#line 1575 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp0_ == NULL) {
#line 9103 "tpf-persona-store.c"
		GeeHashMap* _tmp1_;
		GeeHashMap* _tmp2_;
		GeeMap* _tmp3_;
		GeeMap* _tmp4_;
#line 1577 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp1_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, TPF_TYPE_PERSONA_STORE, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1577 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (tpf_persona_store__persona_stores_by_account);
#line 1577 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		tpf_persona_store__persona_stores_by_account = _tmp1_;
#line 1579 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = tpf_persona_store__persona_stores_by_account;
#line 1579 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = gee_abstract_map_get_read_only_view ((GeeAbstractMap*) _tmp2_);
#line 1579 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp4_ = _tmp3_;
#line 1579 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (tpf_persona_store__persona_stores_by_account_ro);
#line 1579 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		tpf_persona_store__persona_stores_by_account_ro = _tmp4_;
#line 9124 "tpf-persona-store.c"
	}
#line 1583 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp5_ = tpf_persona_store__persona_stores_by_account_ro;
#line 1583 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	store = _tmp5_;
#line 1585 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = store;
#line 1585 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 9134 "tpf-persona-store.c"
}


static void
_tpf_persona_store_store_removed_cb (FolksPersonaStore* store)
{
#line 1588 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (store != NULL);
#line 1591 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_remove_store_from_map (G_TYPE_CHECK_INSTANCE_CAST (store, TPF_TYPE_PERSONA_STORE, TpfPersonaStore));
#line 9145 "tpf-persona-store.c"
}


static void
__tpf_persona_store_store_removed_cb_folks_persona_store_removed (FolksPersonaStore* _sender,
                                                                  gpointer self)
{
#line 1613 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_store_removed_cb (_sender);
#line 9155 "tpf-persona-store.c"
}


static void
_tpf_persona_store_add_store_to_map (TpfPersonaStore* store)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	GeeHashMap* _tmp2_;
	GeeHashMap* _tmp7_;
	const gchar* _tmp8_;
	const gchar* _tmp9_;
	GeeHashMap* _tmp10_;
	const gchar* _tmp11_;
	const gchar* _tmp12_;
#line 1594 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (store != NULL);
#line 1596 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = folks_persona_store_get_id ((FolksPersonaStore*) store);
#line 1596 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _tmp0_;
#line 1596 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:1596: Adding PersonaStore %p ('%s') to map.", store, _tmp1_);
#line 1599 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = tpf_persona_store__persona_stores_by_account;
#line 1599 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp2_ == NULL) {
#line 9183 "tpf-persona-store.c"
		GeeHashMap* _tmp3_;
		GeeHashMap* _tmp4_;
		GeeMap* _tmp5_;
		GeeMap* _tmp6_;
#line 1601 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, TPF_TYPE_PERSONA_STORE, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1601 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (tpf_persona_store__persona_stores_by_account);
#line 1601 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		tpf_persona_store__persona_stores_by_account = _tmp3_;
#line 1603 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp4_ = tpf_persona_store__persona_stores_by_account;
#line 1603 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp5_ = gee_abstract_map_get_read_only_view ((GeeAbstractMap*) _tmp4_);
#line 1603 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp6_ = _tmp5_;
#line 1603 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (tpf_persona_store__persona_stores_by_account_ro);
#line 1603 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		tpf_persona_store__persona_stores_by_account_ro = _tmp6_;
#line 9204 "tpf-persona-store.c"
	}
#line 1608 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp7_ = tpf_persona_store__persona_stores_by_account;
#line 1608 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp8_ = folks_persona_store_get_id ((FolksPersonaStore*) store);
#line 1608 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp9_ = _tmp8_;
#line 1608 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (!gee_abstract_map_has_key ((GeeAbstractMap*) _tmp7_, _tmp9_));
#line 1612 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp10_ = tpf_persona_store__persona_stores_by_account;
#line 1612 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp11_ = folks_persona_store_get_id ((FolksPersonaStore*) store);
#line 1612 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp12_ = _tmp11_;
#line 1612 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	gee_abstract_map_set ((GeeAbstractMap*) _tmp10_, _tmp12_, store);
#line 1613 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_signal_connect ((FolksPersonaStore*) store, "removed", (GCallback) __tpf_persona_store_store_removed_cb_folks_persona_store_removed, NULL);
#line 9224 "tpf-persona-store.c"
}


static void
_tpf_persona_store_remove_store_from_map (TpfPersonaStore* store)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	gboolean _tmp2_ = FALSE;
	GeeHashMap* _tmp3_;
	guint _tmp8_;
	GeeHashMap* _tmp9_;
	gint _tmp10_;
	gint _tmp11_;
#line 1616 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (store != NULL);
#line 1618 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = folks_persona_store_get_id ((FolksPersonaStore*) store);
#line 1618 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _tmp0_;
#line 1618 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:1618: Removing PersonaStore %p ('%s') from map.", store, _tmp1_);
#line 1623 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp3_ = tpf_persona_store__persona_stores_by_account;
#line 1623 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp3_ == NULL) {
#line 1623 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = TRUE;
#line 9253 "tpf-persona-store.c"
	} else {
		GeeHashMap* _tmp4_;
		const gchar* _tmp5_;
		const gchar* _tmp6_;
		gboolean _tmp7_;
#line 1624 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp4_ = tpf_persona_store__persona_stores_by_account;
#line 1624 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp5_ = folks_persona_store_get_id ((FolksPersonaStore*) store);
#line 1624 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp6_ = _tmp5_;
#line 1624 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp7_ = gee_abstract_map_unset ((GeeAbstractMap*) _tmp4_, _tmp6_, NULL);
#line 1624 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = !_tmp7_;
#line 9269 "tpf-persona-store.c"
	}
#line 1623 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp2_) {
#line 1626 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		return;
#line 9275 "tpf-persona-store.c"
	}
#line 1629 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_signal_parse_name ("removed", FOLKS_TYPE_PERSONA_STORE, &_tmp8_, NULL, FALSE);
#line 1629 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_signal_handlers_disconnect_matched ((FolksPersonaStore*) store, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp8_, 0, NULL, (GCallback) __tpf_persona_store_store_removed_cb_folks_persona_store_removed, NULL);
#line 1632 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp9_ = tpf_persona_store__persona_stores_by_account;
#line 1632 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp10_ = gee_abstract_map_get_size ((GeeAbstractMap*) _tmp9_);
#line 1632 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp11_ = _tmp10_;
#line 1632 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp11_ == 0) {
#line 1634 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (tpf_persona_store__persona_stores_by_account_ro);
#line 1634 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		tpf_persona_store__persona_stores_by_account_ro = NULL;
#line 1635 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (tpf_persona_store__persona_stores_by_account);
#line 1635 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		tpf_persona_store__persona_stores_by_account = NULL;
#line 9297 "tpf-persona-store.c"
	}
}


/**
   * Look up a {@link Tpf.PersonaStore} by its {@link TelepathyGLib.Account}.
   *
   * If found, a new reference to the persona store will be returned. If not
   * found, a new {@link Tpf.PersonaStore} will be created for the account.
   *
   * See the documentation for {@link Tpf.PersonaStore.list_persona_stores} for
   * information on the lifecycle of these stores when a
   * {@link Folks.BackendStore} is and is not present.
   *
   * @param account the Telepathy account of the persona store
   * @return the persona store associated with the account
   * @since 0.6.6
   */
TpfPersonaStore*
tpf_persona_store_dup_for_account (TpAccount* account)
{
	TpfPersonaStore* result = NULL;
	TpfPersonaStore* store = NULL;
	GeeHashMap* _tmp0_;
	TpfPersonaStore* _tmp4_;
#line 1653 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (account != NULL, NULL);
#line 1655 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	store = NULL;
#line 1657 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:1657: Tpf.PersonaStore.dup_for_account (%p):", account);
#line 1660 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = tpf_persona_store__persona_stores_by_account;
#line 1660 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp0_ != NULL) {
#line 9333 "tpf-persona-store.c"
		GeeHashMap* _tmp1_;
		const gchar* _tmp2_;
		gpointer _tmp3_;
#line 1662 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp1_ = tpf_persona_store__persona_stores_by_account;
#line 1662 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp2_ = tp_proxy_get_object_path ((TpProxy*) account);
#line 1662 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp3_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp1_, _tmp2_);
#line 1662 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (store);
#line 1662 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		store = (TpfPersonaStore*) _tmp3_;
#line 9347 "tpf-persona-store.c"
	}
#line 1669 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp4_ = store;
#line 1669 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp4_ == NULL) {
#line 9353 "tpf-persona-store.c"
		TpfPersonaStore* _tmp5_;
#line 1671 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:1671:     Creating new PersonaStore.");
#line 1672 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp5_ = tpf_persona_store_new (account);
#line 1672 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (store);
#line 1672 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		store = _tmp5_;
#line 9363 "tpf-persona-store.c"
	} else {
		TpfPersonaStore* _tmp6_;
		TpfPersonaStore* _tmp7_;
		const gchar* _tmp8_;
		const gchar* _tmp9_;
#line 1676 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp6_ = store;
#line 1676 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp7_ = store;
#line 1676 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp8_ = folks_persona_store_get_id ((FolksPersonaStore*) _tmp7_);
#line 1676 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp9_ = _tmp8_;
#line 1676 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_debug ("tpf-persona-store.vala:1676:     Found existing PersonaStore %p ('%s')" \
".", _tmp6_, _tmp9_);
#line 9379 "tpf-persona-store.c"
	}
#line 1680 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = store;
#line 1680 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 9385 "tpf-persona-store.c"
}


static void
_tpf_persona_store_populate_counters_data_free (gpointer _data)
{
	TpfPersonaStorePopulateCountersData* _data_;
	_data_ = _data;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_slice_free (TpfPersonaStorePopulateCountersData, _data_);
#line 9398 "tpf-persona-store.c"
}


static void
_tpf_persona_store_populate_counters_async_ready_wrapper (GObject *source_object,
                                                          GAsyncResult *res,
                                                          void *user_data)
{
	TpfPersonaStorePopulateCountersData* _task_data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_task_data_->_callback_ != NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 9414 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_task_data_->_task_complete_ = TRUE;
#line 9418 "tpf-persona-store.c"
}


static void
_tpf_persona_store_populate_counters (TpfPersonaStore* self,
                                      GAsyncReadyCallback _callback_,
                                      gpointer _user_data_)
{
	TpfPersonaStorePopulateCountersData* _data_;
	TpfPersonaStore* _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_slice_new0 (TpfPersonaStorePopulateCountersData);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_callback_ = _callback_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _tpf_persona_store_populate_counters_async_ready_wrapper, _user_data_);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_callback_ == NULL) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_data_->_task_complete_ = TRUE;
#line 9439 "tpf-persona-store.c"
	}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_set_task_data (_data_->_async_result, _data_, _tpf_persona_store_populate_counters_data_free);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self = _tmp0_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_populate_counters_co (_data_);
#line 9449 "tpf-persona-store.c"
}


static void
_tpf_persona_store_populate_counters_finish (TpfPersonaStore* self,
                                             GAsyncResult* _res_)
{
	TpfPersonaStorePopulateCountersData* _data_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 9460 "tpf-persona-store.c"
}


static void
__lambda8_ (FolksPersona* p,
            GDateTime* dt)
{
	TpfPersona* persona = NULL;
	TpfPersona* _tmp0_;
#line 1687 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (p != NULL);
#line 1687 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (dt != NULL);
#line 1689 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (p, TPF_TYPE_PERSONA) ? ((TpfPersona*) p) : NULL);
#line 1689 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	persona = _tmp0_;
#line 1690 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_vala_assert (persona != NULL, "persona != null");
#line 1691 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_increase_im_interaction_counter (persona, dt);
#line 1687 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (persona);
#line 9484 "tpf-persona-store.c"
}


static void
___lambda8__folks_tp_zeitgeist_controller_increase_persona_counter (FolksPersona* p,
                                                                    GDateTime* converted_datetime)
{
#line 1686 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	__lambda8_ (p, converted_datetime);
#line 9494 "tpf-persona-store.c"
}


static void
__lambda9_ (FolksPersona* p,
            GDateTime* dt)
{
	TpfPersona* persona = NULL;
	TpfPersona* _tmp0_;
#line 1693 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (p != NULL);
#line 1693 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (dt != NULL);
#line 1695 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (p, TPF_TYPE_PERSONA) ? ((TpfPersona*) p) : NULL);
#line 1695 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	persona = _tmp0_;
#line 1696 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_vala_assert (persona != NULL, "persona != null");
#line 1697 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_increase_last_call_interaction_counter (persona, dt);
#line 1693 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (persona);
#line 9518 "tpf-persona-store.c"
}


static void
___lambda9__folks_tp_zeitgeist_controller_increase_persona_counter (FolksPersona* p,
                                                                    GDateTime* converted_datetime)
{
#line 1686 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	__lambda9_ (p, converted_datetime);
#line 9528 "tpf-persona-store.c"
}


static void
_tpf_persona_store_populate_counters_ready (GObject* source_object,
                                            GAsyncResult* _res_,
                                            gpointer _user_data_)
{
	TpfPersonaStorePopulateCountersData* _data_;
#line 1699 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_ = _user_data_;
#line 1699 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_source_object_ = source_object;
#line 1699 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_res_ = _res_;
#line 1699 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_task_complete_ = TRUE;
#line 1699 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_populate_counters_co (_data_);
#line 9548 "tpf-persona-store.c"
}


static gboolean
_tpf_persona_store_populate_counters_co (TpfPersonaStorePopulateCountersData* _data_)
{
#line 1684 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (_data_->_state_) {
#line 1684 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 0:
#line 9559 "tpf-persona-store.c"
		goto _state_0;
#line 1684 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case 1:
#line 9563 "tpf-persona-store.c"
		goto _state_1;
		default:
#line 1684 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_assert_not_reached ();
#line 9568 "tpf-persona-store.c"
	}
	_state_0:
#line 1686 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp0_ = tpf_persona_store_get_account (_data_->self);
#line 1686 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp1_ = _data_->_tmp0_;
#line 1686 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp2_ = folks_tp_zeitgeist_controller_new ((FolksPersonaStore*) _data_->self, _data_->_tmp1_, ___lambda8__folks_tp_zeitgeist_controller_increase_persona_counter, ___lambda9__folks_tp_zeitgeist_controller_increase_persona_counter);
#line 1686 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (_data_->self->priv->_zg_controller);
#line 1686 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->self->priv->_zg_controller = _data_->_tmp2_;
#line 1699 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_tmp3_ = _data_->self->priv->_zg_controller;
#line 1699 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_data_->_state_ = 1;
#line 1699 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_tp_zeitgeist_controller_populate_counters (_data_->_tmp3_, _tpf_persona_store_populate_counters_ready, _data_);
#line 1699 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 9589 "tpf-persona-store.c"
	_state_1:
#line 1699 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	folks_tp_zeitgeist_controller_populate_counters_finish (_data_->_tmp3_, _data_->_res_);
#line 1700 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_notify_if_is_quiescent (_data_->self);
#line 1684 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 1684 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_data_->_state_ != 0) {
#line 1684 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 1684 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 9603 "tpf-persona-store.c"
		}
	}
#line 1684 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_unref (_data_->_async_result);
#line 1684 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return FALSE;
#line 9610 "tpf-persona-store.c"
}


TpAccount*
tpf_persona_store_get_account (TpfPersonaStore* self)
{
	TpAccount* result;
	TpAccount* _tmp0_;
#line 110 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 110 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_account;
#line 110 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = _tmp0_;
#line 110 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 9627 "tpf-persona-store.c"
}


static void
tpf_persona_store_set_account (TpfPersonaStore* self,
                               TpAccount* value)
{
	TpAccount* _tmp0_;
	TpAccount* _tmp1_;
#line 111 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_if_fail (self != NULL);
#line 113 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = _g_object_ref0 (value);
#line 113 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_account);
#line 113 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_account = _tmp0_;
#line 114 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = self->priv->_account;
#line 114 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_signal_connect_object ((TpProxy*) _tmp1_, "invalidated", (GCallback) __tpf_persona_store_account_invalidated_cb_tp_proxy_invalidated, self, 0);
#line 111 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_notify_by_pspec ((GObject *) self, tpf_persona_store_properties[TPF_PERSONA_STORE_ACCOUNT_PROPERTY]);
#line 9651 "tpf-persona-store.c"
}


static const gchar*
tpf_persona_store_real_get_type_id (FolksPersonaStore* base)
{
	const gchar* result;
	TpfPersonaStore* self;
#line 123 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = (TpfPersonaStore*) base;
#line 123 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = BACKEND_NAME;
#line 123 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 9666 "tpf-persona-store.c"
}


static FolksMaybeBool
tpf_persona_store_real_get_can_add_personas (FolksPersonaStore* base)
{
	FolksMaybeBool result;
	TpfPersonaStore* self;
	FolksMaybeBool _tmp0_;
#line 134 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = (TpfPersonaStore*) base;
#line 134 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_can_add_personas;
#line 134 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = _tmp0_;
#line 134 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 9684 "tpf-persona-store.c"
}


static FolksMaybeBool
tpf_persona_store_real_get_can_alias_personas (FolksPersonaStore* base)
{
	FolksMaybeBool result;
	TpfPersonaStore* self;
	FolksMaybeBool _tmp0_;
#line 146 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = (TpfPersonaStore*) base;
#line 146 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_can_alias_personas;
#line 146 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = _tmp0_;
#line 146 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 9702 "tpf-persona-store.c"
}


static FolksMaybeBool
tpf_persona_store_real_get_can_group_personas (FolksPersonaStore* base)
{
	FolksMaybeBool result;
	TpfPersonaStore* self;
	FolksMaybeBool _tmp0_;
#line 158 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = (TpfPersonaStore*) base;
#line 158 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_can_group_personas;
#line 158 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = _tmp0_;
#line 158 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 9720 "tpf-persona-store.c"
}


static FolksMaybeBool
tpf_persona_store_real_get_can_remove_personas (FolksPersonaStore* base)
{
	FolksMaybeBool result;
	TpfPersonaStore* self;
	FolksMaybeBool _tmp0_;
#line 170 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = (TpfPersonaStore*) base;
#line 170 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_can_remove_personas;
#line 170 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = _tmp0_;
#line 170 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 9738 "tpf-persona-store.c"
}


static gboolean
tpf_persona_store_real_get_is_prepared (FolksPersonaStore* base)
{
	gboolean result;
	TpfPersonaStore* self;
	gboolean _tmp0_;
#line 182 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = (TpfPersonaStore*) base;
#line 182 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_is_prepared;
#line 182 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = _tmp0_;
#line 182 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 9756 "tpf-persona-store.c"
}


static gchar**
tpf_persona_store_real_get_always_writeable_properties (FolksPersonaStore* base,
                                                        int* result_length1)
{
	gchar** result;
	TpfPersonaStore* self;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
#line 192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = (TpfPersonaStore*) base;
#line 192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_always_writeable_properties;
#line 192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0__length1 = self->priv->_always_writeable_properties_length1;
#line 192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _tmp0_;
#line 192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1__length1 = _tmp0__length1;
#line 192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (result_length1) {
#line 192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		*result_length1 = _tmp1__length1;
#line 9784 "tpf-persona-store.c"
	}
#line 192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = _tmp1_;
#line 192 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 9790 "tpf-persona-store.c"
}


static gboolean
tpf_persona_store_real_get_is_quiescent (FolksPersonaStore* base)
{
	gboolean result;
	TpfPersonaStore* self;
	gboolean _tmp0_;
#line 204 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = (TpfPersonaStore*) base;
#line 204 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_is_quiescent;
#line 204 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = _tmp0_;
#line 204 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 9808 "tpf-persona-store.c"
}


static GeeMap*
tpf_persona_store_real_get_personas (FolksPersonaStore* base)
{
	GeeMap* result;
	TpfPersonaStore* self;
	GeeMap* _tmp0_;
#line 232 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = (TpfPersonaStore*) base;
#line 232 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_personas_ro;
#line 232 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = _tmp0_;
#line 232 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 9826 "tpf-persona-store.c"
}


GeeSet*
tpf_persona_store_get_supported_fields (TpfPersonaStore* self)
{
	GeeSet* result;
	GeeSet* _tmp0_;
#line 237 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 237 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = self->priv->_supported_fields_ro;
#line 237 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	result = _tmp0_;
#line 237 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return result;
#line 9843 "tpf-persona-store.c"
}


static GObject *
tpf_persona_store_constructor (GType type,
                               guint n_construct_properties,
                               GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	TpfPersonaStore * self;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	TpAccount* _tmp2_;
	TpAccount* _tmp3_;
	FolksDebug* _tmp4_;
	FolksDebug* _tmp5_;
	TpfPersonaStoreCache* _tmp6_;
#line 255 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	parent_class = G_OBJECT_CLASS (tpf_persona_store_parent_class);
#line 255 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 255 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TPF_TYPE_PERSONA_STORE, TpfPersonaStore);
#line 257 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = folks_persona_store_get_id ((FolksPersonaStore*) self);
#line 257 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _tmp0_;
#line 257 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = tpf_persona_store_get_account (self);
#line 257 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp3_ = _tmp2_;
#line 257 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:257: Creating new Tpf.PersonaStore %p ('%s') fo" \
"r TpAccount %p.", self, _tmp1_, _tmp3_);
#line 260 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp4_ = folks_debug_dup ();
#line 260 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_debug);
#line 260 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_debug = _tmp4_;
#line 261 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp5_ = self->priv->_debug;
#line 261 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_signal_connect_object (_tmp5_, "print-status", (GCallback) __tpf_persona_store_debug_print_status_folks_debug_print_status, self, 0);
#line 264 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_add_store_to_map (self);
#line 267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp6_ = tpf_persona_store_cache_new (self);
#line 267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_cache);
#line 267 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_cache = _tmp6_;
#line 269 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_reset (self);
#line 255 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	return obj;
#line 9900 "tpf-persona-store.c"
}


static void
tpf_persona_store_class_init (TpfPersonaStoreClass * klass)
{
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	tpf_persona_store_parent_class = g_type_class_peek_parent (klass);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_type_class_add_private (klass, sizeof (TpfPersonaStorePrivate));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	((FolksPersonaStoreClass *) klass)->prepare = (void (*) (FolksPersonaStore *, GAsyncReadyCallback, gpointer)) tpf_persona_store_real_prepare;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	((FolksPersonaStoreClass *) klass)->prepare_finish = (void (*) (FolksPersonaStore *, GAsyncResult*, GError**)) tpf_persona_store_real_prepare_finish;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	((FolksPersonaStoreClass *) klass)->flush = (void (*) (FolksPersonaStore *, GAsyncReadyCallback, gpointer)) tpf_persona_store_real_flush;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	((FolksPersonaStoreClass *) klass)->flush_finish = (void (*) (FolksPersonaStore *, GAsyncResult*)) tpf_persona_store_real_flush_finish;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	((FolksPersonaStoreClass *) klass)->remove_persona = (void (*) (FolksPersonaStore *, FolksPersona*, GAsyncReadyCallback, gpointer)) tpf_persona_store_real_remove_persona;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	((FolksPersonaStoreClass *) klass)->remove_persona_finish = (void (*) (FolksPersonaStore *, GAsyncResult*, GError**)) tpf_persona_store_real_remove_persona_finish;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	((FolksPersonaStoreClass *) klass)->add_persona_from_details = (void (*) (FolksPersonaStore *, GHashTable*, GAsyncReadyCallback, gpointer)) tpf_persona_store_real_add_persona_from_details;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	((FolksPersonaStoreClass *) klass)->add_persona_from_details_finish = (FolksPersona* (*) (FolksPersonaStore *, GAsyncResult*, GError**)) tpf_persona_store_real_add_persona_from_details_finish;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	FOLKS_PERSONA_STORE_CLASS (klass)->get_type_id = tpf_persona_store_real_get_type_id;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	FOLKS_PERSONA_STORE_CLASS (klass)->get_can_add_personas = tpf_persona_store_real_get_can_add_personas;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	FOLKS_PERSONA_STORE_CLASS (klass)->get_can_alias_personas = tpf_persona_store_real_get_can_alias_personas;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	FOLKS_PERSONA_STORE_CLASS (klass)->get_can_group_personas = tpf_persona_store_real_get_can_group_personas;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	FOLKS_PERSONA_STORE_CLASS (klass)->get_can_remove_personas = tpf_persona_store_real_get_can_remove_personas;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	FOLKS_PERSONA_STORE_CLASS (klass)->get_is_prepared = tpf_persona_store_real_get_is_prepared;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	FOLKS_PERSONA_STORE_CLASS (klass)->get_always_writeable_properties = tpf_persona_store_real_get_always_writeable_properties;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	FOLKS_PERSONA_STORE_CLASS (klass)->get_is_quiescent = tpf_persona_store_real_get_is_quiescent;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	FOLKS_PERSONA_STORE_CLASS (klass)->get_personas = tpf_persona_store_real_get_personas;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_tpf_persona_store_get_property;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_tpf_persona_store_set_property;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	G_OBJECT_CLASS (klass)->constructor = tpf_persona_store_constructor;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	G_OBJECT_CLASS (klass)->finalize = tpf_persona_store_finalize;
#line 9953 "tpf-persona-store.c"
	/**
	   * The Telepathy account this store is based upon.
	   */
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_STORE_ACCOUNT_PROPERTY, tpf_persona_store_properties[TPF_PERSONA_STORE_ACCOUNT_PROPERTY] = g_param_spec_object ("account", "basis account", "Telepathy account this store is based upon", tp_account_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 9959 "tpf-persona-store.c"
	/**
	   * The type of persona store this is.
	   *
	   * See {@link Folks.PersonaStore.type_id}.
	   */
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_STORE_TYPE_ID_PROPERTY, tpf_persona_store_properties[TPF_PERSONA_STORE_TYPE_ID_PROPERTY] = g_param_spec_string ("type-id", "type-id", "type-id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 9967 "tpf-persona-store.c"
	/**
	   * Whether this PersonaStore can add {@link Folks.Persona}s.
	   *
	   * See {@link Folks.PersonaStore.can_add_personas}.
	   *
	   * @since 0.3.1
	   */
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_STORE_CAN_ADD_PERSONAS_PROPERTY, tpf_persona_store_properties[TPF_PERSONA_STORE_CAN_ADD_PERSONAS_PROPERTY] = g_param_spec_enum ("can-add-personas", "can-add-personas", "can-add-personas", FOLKS_TYPE_MAYBE_BOOL, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 9977 "tpf-persona-store.c"
	/**
	   * Whether this PersonaStore can set the alias of {@link Folks.Persona}s.
	   *
	   * See {@link Folks.PersonaStore.can_alias_personas}.
	   *
	   * @since 0.3.1
	   */
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_STORE_CAN_ALIAS_PERSONAS_PROPERTY, tpf_persona_store_properties[TPF_PERSONA_STORE_CAN_ALIAS_PERSONAS_PROPERTY] = g_param_spec_enum ("can-alias-personas", "can-alias-personas", "can-alias-personas", FOLKS_TYPE_MAYBE_BOOL, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 9987 "tpf-persona-store.c"
	/**
	   * Whether this PersonaStore can set the groups of {@link Folks.Persona}s.
	   *
	   * See {@link Folks.PersonaStore.can_group_personas}.
	   *
	   * @since 0.3.1
	   */
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_STORE_CAN_GROUP_PERSONAS_PROPERTY, tpf_persona_store_properties[TPF_PERSONA_STORE_CAN_GROUP_PERSONAS_PROPERTY] = g_param_spec_enum ("can-group-personas", "can-group-personas", "can-group-personas", FOLKS_TYPE_MAYBE_BOOL, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 9997 "tpf-persona-store.c"
	/**
	   * Whether this PersonaStore can remove {@link Folks.Persona}s.
	   *
	   * See {@link Folks.PersonaStore.can_remove_personas}.
	   *
	   * @since 0.3.1
	   */
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_STORE_CAN_REMOVE_PERSONAS_PROPERTY, tpf_persona_store_properties[TPF_PERSONA_STORE_CAN_REMOVE_PERSONAS_PROPERTY] = g_param_spec_enum ("can-remove-personas", "can-remove-personas", "can-remove-personas", FOLKS_TYPE_MAYBE_BOOL, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 10007 "tpf-persona-store.c"
	/**
	   * Whether this PersonaStore has been prepared.
	   *
	   * See {@link Folks.PersonaStore.is_prepared}.
	   *
	   * @since 0.3.0
	   */
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_STORE_IS_PREPARED_PROPERTY, tpf_persona_store_properties[TPF_PERSONA_STORE_IS_PREPARED_PROPERTY] = g_param_spec_boolean ("is-prepared", "is-prepared", "is-prepared", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 10017 "tpf-persona-store.c"
	/**
	   * {@inheritDoc}
	   *
	   * @since 0.6.2
	   */
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_STORE_ALWAYS_WRITEABLE_PROPERTIES_PROPERTY, tpf_persona_store_properties[TPF_PERSONA_STORE_ALWAYS_WRITEABLE_PROPERTIES_PROPERTY] = g_param_spec_boxed ("always-writeable-properties", "always-writeable-properties", "always-writeable-properties", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_STORE_IS_QUIESCENT_PROPERTY, tpf_persona_store_properties[TPF_PERSONA_STORE_IS_QUIESCENT_PROPERTY] = g_param_spec_boolean ("is-quiescent", "is-quiescent", "is-quiescent", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 10027 "tpf-persona-store.c"
	/**
	   * The {@link Persona}s exposed by this PersonaStore.
	   *
	   * See {@link Folks.PersonaStore.personas}.
	   */
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_STORE_PERSONAS_PROPERTY, tpf_persona_store_properties[TPF_PERSONA_STORE_PERSONAS_PROPERTY] = g_param_spec_object ("personas", "personas", "personas", GEE_TYPE_MAP, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_STORE_SUPPORTED_FIELDS_PROPERTY, tpf_persona_store_properties[TPF_PERSONA_STORE_SUPPORTED_FIELDS_PROPERTY] = g_param_spec_object ("supported-fields", "supported-fields", "supported-fields", GEE_TYPE_SET, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 10037 "tpf-persona-store.c"
}


static void
tpf_persona_store_instance_init (TpfPersonaStore * self)
{
	gchar** _tmp0_;
	FolksSmallSet* _tmp1_;
	GeeHashMap* _tmp2_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv = TPF_PERSONA_STORE_GET_PRIVATE (self);
#line 44 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = g_new0 (gchar*, 0 + 1);
#line 44 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_always_writeable_properties = _tmp0_;
#line 44 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_always_writeable_properties_length1 = 0;
#line 44 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->__always_writeable_properties_size_ = self->priv->_always_writeable_properties_length1;
#line 59 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = folks_small_set_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, NULL, NULL, NULL, NULL, NULL, NULL);
#line 59 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_favourite_ids = _tmp1_;
#line 64 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, g_file_get_type (), (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 64 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_avatars = _tmp2_;
#line 72 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_can_add_personas = FOLKS_MAYBE_BOOL_UNSET;
#line 73 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_can_alias_personas = FOLKS_MAYBE_BOOL_UNSET;
#line 74 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_can_group_personas = FOLKS_MAYBE_BOOL_UNSET;
#line 75 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_can_remove_personas = FOLKS_MAYBE_BOOL_UNSET;
#line 77 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_is_prepared = FALSE;
#line 78 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_prepare_pending = FALSE;
#line 79 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_is_quiescent = FALSE;
#line 80 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_got_initial_members = FALSE;
#line 81 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_got_initial_self_contact = FALSE;
#line 83 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_disconnect_pending = FALSE;
#line 85 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_removal_pending = FALSE;
#line 89 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_load_cache_cancellable = NULL;
#line 93 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_cache_needs_update = FALSE;
#line 10091 "tpf-persona-store.c"
}


static void
tpf_persona_store_finalize (GObject * obj)
{
	TpfPersonaStore * self;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	FolksDebug* _tmp2_;
	guint _tmp3_;
	Logger* _tmp4_;
	TpAccount* _tmp7_;
	guint _tmp8_;
	TpAccountManager* _tmp9_;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TPF_TYPE_PERSONA_STORE, TpfPersonaStore);
#line 274 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp0_ = folks_persona_store_get_id ((FolksPersonaStore*) self);
#line 274 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp1_ = _tmp0_;
#line 274 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_debug ("tpf-persona-store.vala:274: Destroying Tpf.PersonaStore %p ('%s').", self, _tmp1_);
#line 276 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_reset (self);
#line 279 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tpf_persona_store_remove_store_from_map (self);
#line 281 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp2_ = self->priv->_debug;
#line 281 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_signal_parse_name ("print-status", FOLKS_TYPE_DEBUG, &_tmp3_, NULL, FALSE);
#line 281 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_signal_handlers_disconnect_matched (_tmp2_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp3_, 0, NULL, (GCallback) __tpf_persona_store_debug_print_status_folks_debug_print_status, self);
#line 282 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_debug);
#line 282 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_debug = NULL;
#line 283 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp4_ = self->priv->_logger;
#line 283 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp4_ != NULL) {
#line 10133 "tpf-persona-store.c"
		Logger* _tmp5_;
		guint _tmp6_;
#line 284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp5_ = self->priv->_logger;
#line 284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_parse_name ("invalidated", TYPE_LOGGER, &_tmp6_, NULL, FALSE);
#line 284 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_handlers_disconnect_matched (_tmp5_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp6_, 0, NULL, (GCallback) __tpf_persona_store_logger_invalidated_cb_logger_invalidated, self);
#line 10142 "tpf-persona-store.c"
	}
#line 286 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp7_ = self->priv->_account;
#line 286 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_signal_parse_name ("invalidated", tp_proxy_get_type (), &_tmp8_, NULL, FALSE);
#line 286 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	g_signal_handlers_disconnect_matched ((TpProxy*) _tmp7_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp8_, 0, NULL, (GCallback) __tpf_persona_store_account_invalidated_cb_tp_proxy_invalidated, self);
#line 288 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_tmp9_ = self->priv->_account_manager;
#line 288 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	if (_tmp9_ != NULL) {
#line 10154 "tpf-persona-store.c"
		TpAccountManager* _tmp10_;
		guint _tmp11_;
#line 290 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_tmp10_ = self->priv->_account_manager;
#line 290 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_parse_name ("invalidated", tp_proxy_get_type (), &_tmp11_, NULL, FALSE);
#line 290 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_signal_handlers_disconnect_matched ((TpProxy*) _tmp10_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp11_, 0, NULL, (GCallback) __tpf_persona_store_account_manager_invalidated_cb_tp_proxy_invalidated, self);
#line 292 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		_g_object_unref0 (self->priv->_account_manager);
#line 292 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		self->priv->_account_manager = NULL;
#line 10167 "tpf-persona-store.c"
	}
#line 295 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_zg_controller);
#line 295 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_zg_controller = NULL;
#line 44 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	self->priv->_always_writeable_properties = (_vala_array_free (self->priv->_always_writeable_properties, self->priv->_always_writeable_properties_length1, (GDestroyNotify) g_free), NULL);
#line 48 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_personas);
#line 49 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_personas_ro);
#line 50 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_persona_set);
#line 55 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_contact_persona_map);
#line 59 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_favourite_ids);
#line 64 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_avatars);
#line 66 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_conn);
#line 67 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_account_manager);
#line 68 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_logger);
#line 69 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_self_persona);
#line 87 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_debug);
#line 88 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_cache);
#line 89 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_load_cache_cancellable);
#line 96 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_supported_fields);
#line 97 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_supported_fields_ro);
#line 99 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_account);
#line 101 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	_g_object_unref0 (self->priv->_zg_controller);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	G_OBJECT_CLASS (tpf_persona_store_parent_class)->finalize (obj);
#line 10211 "tpf-persona-store.c"
}


/**
 * A persona store which is associated with a single Telepathy account. It will
 * create {@link Persona}s for each of the contacts in the account's
 * contact list.
 *
 * User must define contact features it wants on the #TpSimpleClientFactory of
 * the default #TpAccountManager returned by tp_account_manager_dup() *before*
 * preparing telepathy stores. Note that this is a behaviour change since
 * 0.7.0, folks won't force preparing any feature anymore.
 */
GType
tpf_persona_store_get_type (void)
{
	static volatile gsize tpf_persona_store_type_id__volatile = 0;
	if (g_once_init_enter (&tpf_persona_store_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (TpfPersonaStoreClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) tpf_persona_store_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (TpfPersonaStore), 0, (GInstanceInitFunc) tpf_persona_store_instance_init, NULL };
		GType tpf_persona_store_type_id;
		tpf_persona_store_type_id = g_type_register_static (FOLKS_TYPE_PERSONA_STORE, "TpfPersonaStore", &g_define_type_info, 0);
		g_once_init_leave (&tpf_persona_store_type_id__volatile, tpf_persona_store_type_id);
	}
	return tpf_persona_store_type_id__volatile;
}


static void
_vala_tpf_persona_store_get_property (GObject * object,
                                      guint property_id,
                                      GValue * value,
                                      GParamSpec * pspec)
{
	TpfPersonaStore * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TPF_TYPE_PERSONA_STORE, TpfPersonaStore);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (property_id) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case TPF_PERSONA_STORE_ACCOUNT_PROPERTY:
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_value_set_object (value, tpf_persona_store_get_account (self));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		break;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case TPF_PERSONA_STORE_TYPE_ID_PROPERTY:
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_value_set_string (value, folks_persona_store_get_type_id ((FolksPersonaStore*) self));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		break;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case TPF_PERSONA_STORE_CAN_ADD_PERSONAS_PROPERTY:
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_value_set_enum (value, folks_persona_store_get_can_add_personas ((FolksPersonaStore*) self));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		break;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case TPF_PERSONA_STORE_CAN_ALIAS_PERSONAS_PROPERTY:
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_value_set_enum (value, folks_persona_store_get_can_alias_personas ((FolksPersonaStore*) self));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		break;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case TPF_PERSONA_STORE_CAN_GROUP_PERSONAS_PROPERTY:
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_value_set_enum (value, folks_persona_store_get_can_group_personas ((FolksPersonaStore*) self));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		break;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case TPF_PERSONA_STORE_CAN_REMOVE_PERSONAS_PROPERTY:
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_value_set_enum (value, folks_persona_store_get_can_remove_personas ((FolksPersonaStore*) self));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		break;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case TPF_PERSONA_STORE_IS_PREPARED_PROPERTY:
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_value_set_boolean (value, folks_persona_store_get_is_prepared ((FolksPersonaStore*) self));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		break;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case TPF_PERSONA_STORE_ALWAYS_WRITEABLE_PROPERTIES_PROPERTY:
#line 10293 "tpf-persona-store.c"
		{
			int length;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
			g_value_set_boxed (value, folks_persona_store_get_always_writeable_properties ((FolksPersonaStore*) self, &length));
#line 10298 "tpf-persona-store.c"
		}
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		break;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case TPF_PERSONA_STORE_IS_QUIESCENT_PROPERTY:
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_value_set_boolean (value, folks_persona_store_get_is_quiescent ((FolksPersonaStore*) self));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		break;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case TPF_PERSONA_STORE_PERSONAS_PROPERTY:
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_value_set_object (value, folks_persona_store_get_personas ((FolksPersonaStore*) self));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		break;
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case TPF_PERSONA_STORE_SUPPORTED_FIELDS_PROPERTY:
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		g_value_set_object (value, tpf_persona_store_get_supported_fields (self));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		break;
#line 10320 "tpf-persona-store.c"
		default:
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		break;
#line 10326 "tpf-persona-store.c"
	}
}


static void
_vala_tpf_persona_store_set_property (GObject * object,
                                      guint property_id,
                                      const GValue * value,
                                      GParamSpec * pspec)
{
	TpfPersonaStore * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TPF_TYPE_PERSONA_STORE, TpfPersonaStore);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
	switch (property_id) {
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		case TPF_PERSONA_STORE_ACCOUNT_PROPERTY:
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		tpf_persona_store_set_account (self, g_value_get_object (value));
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		break;
#line 10347 "tpf-persona-store.c"
		default:
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 42 "/run/build/folks/backends/telepathy/lib/tpf-persona-store.vala"
		break;
#line 10353 "tpf-persona-store.c"
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



