/* command-signals.c generated by valac 0.40.11, the Vala compiler
 * generated from command-signals.vala, do not modify */

/*
 * Copyright (C) 2010 Collabora Ltd.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Philip Withnall <philip.withnall@collabora.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <readline/readline.h>


#define FOLKS_INSPECT_TYPE_COMMAND (folks_inspect_command_get_type ())
#define FOLKS_INSPECT_COMMAND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_INSPECT_TYPE_COMMAND, FolksInspectCommand))
#define FOLKS_INSPECT_COMMAND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_INSPECT_TYPE_COMMAND, FolksInspectCommandClass))
#define FOLKS_INSPECT_IS_COMMAND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_INSPECT_TYPE_COMMAND))
#define FOLKS_INSPECT_IS_COMMAND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_INSPECT_TYPE_COMMAND))
#define FOLKS_INSPECT_COMMAND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_INSPECT_TYPE_COMMAND, FolksInspectCommandClass))

typedef struct _FolksInspectCommand FolksInspectCommand;
typedef struct _FolksInspectCommandClass FolksInspectCommandClass;
typedef struct _FolksInspectCommandPrivate FolksInspectCommandPrivate;

#define FOLKS_INSPECT_TYPE_CLIENT (folks_inspect_client_get_type ())
#define FOLKS_INSPECT_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_INSPECT_TYPE_CLIENT, FolksInspectClient))
#define FOLKS_INSPECT_CLIENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_INSPECT_TYPE_CLIENT, FolksInspectClientClass))
#define FOLKS_INSPECT_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_INSPECT_TYPE_CLIENT))
#define FOLKS_INSPECT_IS_CLIENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_INSPECT_TYPE_CLIENT))
#define FOLKS_INSPECT_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_INSPECT_TYPE_CLIENT, FolksInspectClientClass))

typedef struct _FolksInspectClient FolksInspectClient;
typedef struct _FolksInspectClientClass FolksInspectClientClass;

#define FOLKS_INSPECT_COMMANDS_TYPE_SIGNALS (folks_inspect_commands_signals_get_type ())
#define FOLKS_INSPECT_COMMANDS_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_INSPECT_COMMANDS_TYPE_SIGNALS, FolksInspectCommandsSignals))
#define FOLKS_INSPECT_COMMANDS_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_INSPECT_COMMANDS_TYPE_SIGNALS, FolksInspectCommandsSignalsClass))
#define FOLKS_INSPECT_COMMANDS_IS_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_INSPECT_COMMANDS_TYPE_SIGNALS))
#define FOLKS_INSPECT_COMMANDS_IS_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_INSPECT_COMMANDS_TYPE_SIGNALS))
#define FOLKS_INSPECT_COMMANDS_SIGNALS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_INSPECT_COMMANDS_TYPE_SIGNALS, FolksInspectCommandsSignalsClass))

typedef struct _FolksInspectCommandsSignals FolksInspectCommandsSignals;
typedef struct _FolksInspectCommandsSignalsClass FolksInspectCommandsSignalsClass;
typedef struct _FolksInspectCommandsSignalsPrivate FolksInspectCommandsSignalsPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _folks_inspect_command_unref0(var) ((var == NULL) ? NULL : (var = (folks_inspect_command_unref (var), NULL)))

#define FOLKS_INSPECT_TYPE_SIGNAL_MANAGER (folks_inspect_signal_manager_get_type ())
#define FOLKS_INSPECT_SIGNAL_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_INSPECT_TYPE_SIGNAL_MANAGER, FolksInspectSignalManager))
#define FOLKS_INSPECT_SIGNAL_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_INSPECT_TYPE_SIGNAL_MANAGER, FolksInspectSignalManagerClass))
#define FOLKS_INSPECT_IS_SIGNAL_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_INSPECT_TYPE_SIGNAL_MANAGER))
#define FOLKS_INSPECT_IS_SIGNAL_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_INSPECT_TYPE_SIGNAL_MANAGER))
#define FOLKS_INSPECT_SIGNAL_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_INSPECT_TYPE_SIGNAL_MANAGER, FolksInspectSignalManagerClass))

typedef struct _FolksInspectSignalManager FolksInspectSignalManager;
typedef struct _FolksInspectSignalManagerClass FolksInspectSignalManagerClass;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _FolksInspectCommandsSignalsRunData FolksInspectCommandsSignalsRunData;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _FolksInspectCommand {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FolksInspectCommandPrivate * priv;
	FolksInspectClient* client;
};

struct _FolksInspectCommandClass {
	GTypeClass parent_class;
	void (*finalize) (FolksInspectCommand *self);
	void (*run) (FolksInspectCommand* self, const gchar* command_string, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*run_finish) (FolksInspectCommand* self, GAsyncResult* _res_);
	gchar** (*complete_subcommand) (FolksInspectCommand* self, const gchar* subcommand, int* result_length1);
	const gchar* (*get_name) (FolksInspectCommand* self);
	const gchar* (*get_description) (FolksInspectCommand* self);
	const gchar* (*get_help) (FolksInspectCommand* self);
};

struct _FolksInspectCommandsSignals {
	FolksInspectCommand parent_instance;
	FolksInspectCommandsSignalsPrivate * priv;
};

struct _FolksInspectCommandsSignalsClass {
	FolksInspectCommandClass parent_class;
};

struct _FolksInspectCommandsSignalsRunData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksInspectCommandsSignals* self;
	gchar* command_string;
	gint result;
	FolksInspectClient* _tmp0_;
	FolksInspectSignalManager* _tmp1_;
	FolksInspectSignalManager* _tmp2_;
	gchar** parts;
	gchar** _tmp3_;
	gchar** _tmp4_;
	gint parts_length1;
	gint _parts_size_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	gchar** _tmp7_;
	gint _tmp7__length1;
	const gchar* _tmp8_;
	GType class_type;
	GObject* class_instance;
	gchar* signal_name;
	gchar* detail_string;
	gboolean _tmp9_;
	gchar** _tmp10_;
	gint _tmp10__length1;
	const gchar* _tmp11_;
	gchar** _tmp12_;
	gint _tmp12__length1;
	const gchar* _tmp13_;
	gboolean _tmp14_;
	gchar** _tmp15_;
	gint _tmp15__length1;
	const gchar* _tmp16_;
	gchar** _tmp17_;
	gint _tmp17__length1;
	const gchar* _tmp18_;
	gchar* _tmp19_;
	gchar* _tmp20_;
	gchar** _tmp21_;
	gint _tmp21__length1;
	const gchar* _tmp22_;
	gchar** _tmp23_;
	gint _tmp23__length1;
	const gchar* _tmp24_;
	gchar* _tmp25_;
	gchar* _tmp26_;
	GType _tmp27_;
	GObject* _tmp28_;
	gchar* _tmp29_;
	gchar* _tmp30_;
	gboolean _tmp31_;
	gboolean _tmp32_;
	gchar** _tmp33_;
	gint _tmp33__length1;
	const gchar* _tmp34_;
	guint signal_count;
	FolksInspectClient* _tmp35_;
	FolksInspectSignalManager* _tmp36_;
	FolksInspectSignalManager* _tmp37_;
	GType _tmp38_;
	GObject* _tmp39_;
	const gchar* _tmp40_;
	const gchar* _tmp41_;
	guint _tmp42_;
	guint _vala1_signal_count;
	FolksInspectClient* _tmp43_;
	FolksInspectSignalManager* _tmp44_;
	FolksInspectSignalManager* _tmp45_;
	GType _tmp46_;
	GObject* _tmp47_;
	const gchar* _tmp48_;
	const gchar* _tmp49_;
	guint _tmp50_;
	gchar** _tmp51_;
	gint _tmp51__length1;
	const gchar* _tmp52_;
	gchar* _tmp53_;
	gchar* _tmp54_;
	GType _tmp55_;
	GObject* _tmp56_;
	gchar* _tmp57_;
	gchar* _tmp58_;
	gboolean _tmp59_;
	gboolean _tmp60_;
	const gchar* _tmp61_;
	FolksInspectClient* _tmp62_;
	FolksInspectSignalManager* _tmp63_;
	FolksInspectSignalManager* _tmp64_;
	GType _tmp65_;
	GObject* _tmp66_;
	GType _tmp67_;
	GObject* _tmp68_;
	FolksInspectClient* _tmp69_;
	FolksInspectSignalManager* _tmp70_;
	FolksInspectSignalManager* _tmp71_;
	GType _tmp72_;
	const gchar* _tmp73_;
	const gchar* _tmp74_;
};


static gpointer folks_inspect_commands_signals_parent_class = NULL;

gpointer folks_inspect_command_ref (gpointer instance);
void folks_inspect_command_unref (gpointer instance);
GParamSpec* folks_inspect_param_spec_command (const gchar* name,
                                              const gchar* nick,
                                              const gchar* blurb,
                                              GType object_type,
                                              GParamFlags flags);
void folks_inspect_value_set_command (GValue* value,
                                      gpointer v_object);
void folks_inspect_value_take_command (GValue* value,
                                       gpointer v_object);
gpointer folks_inspect_value_get_command (const GValue* value);
GType folks_inspect_command_get_type (void) G_GNUC_CONST;
GType folks_inspect_client_get_type (void) G_GNUC_CONST;
GType folks_inspect_commands_signals_get_type (void) G_GNUC_CONST;
FolksInspectCommandsSignals* folks_inspect_commands_signals_new (FolksInspectClient* client);
FolksInspectCommandsSignals* folks_inspect_commands_signals_construct (GType object_type,
                                                                       FolksInspectClient* client);
FolksInspectCommand* folks_inspect_command_construct (GType object_type,
                                                      FolksInspectClient* client);
static void folks_inspect_commands_signals_real_run_data_free (gpointer _data);
static void folks_inspect_commands_signals_real_run_async_ready_wrapper (GObject *source_object,
                                                                  GAsyncResult *res,
                                                                  void *user_data);
static void folks_inspect_commands_signals_real_run (FolksInspectCommand* base,
                                              const gchar* command_string,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_);
static gboolean folks_inspect_commands_signals_real_run_co (FolksInspectCommandsSignalsRunData* _data_);
GType folks_inspect_signal_manager_get_type (void) G_GNUC_CONST;
FolksInspectSignalManager* folks_inspect_client_get_signal_manager (FolksInspectClient* self);
void folks_inspect_signal_manager_list_signals (FolksInspectSignalManager* self,
                                                GType class_type,
                                                GObject* class_instance);
gboolean folks_inspect_utils_validate_subcommand (const gchar* command,
                                                  const gchar* command_string,
                                                  const gchar* subcommand,
                                                  gchar** valid_subcommands,
                                                  int valid_subcommands_length1);
const gchar* folks_inspect_command_get_name (FolksInspectCommand* self);
void folks_inspect_utils_print_line (const gchar* format,
                                     ...) G_GNUC_PRINTF(1,2);
static gboolean folks_inspect_commands_signals_parse_signal_id (FolksInspectCommandsSignals* self,
                                                         const gchar* input,
                                                         GType* class_type,
                                                         GObject* * class_instance,
                                                         gchar* * signal_name,
                                                         gchar* * detail_string);
guint folks_inspect_signal_manager_connect_to_signal (FolksInspectSignalManager* self,
                                                      GType class_type,
                                                      GObject* class_instance,
                                                      const gchar* signal_name,
                                                      const gchar* detail_string);
guint folks_inspect_signal_manager_disconnect_from_signal (FolksInspectSignalManager* self,
                                                           GType class_type,
                                                           GObject* class_instance,
                                                           const gchar* signal_name,
                                                           const gchar* detail_string);
void folks_inspect_signal_manager_show_signal_details (FolksInspectSignalManager* self,
                                                       GType class_type,
                                                       const gchar* signal_name,
                                                       const gchar* detail_string);
static gchar** folks_inspect_commands_signals_real_complete_subcommand (FolksInspectCommand* base,
                                                                 const gchar* subcommand,
                                                                 int* result_length1);
gchar* folks_inspect_utils_backend_name_completion_cb (const gchar* word,
                                                       gint state);
static gchar* _folks_inspect_utils_backend_name_completion_cb_rl_compentry_func_t (const gchar* str,
                                                                            gint a);
static gchar** _vala_array_dup14 (gchar** self,
                           int length);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

static const gchar* FOLKS_INSPECT_COMMANDS_SIGNALS__valid_subcommands[2] = {"connect", "disconnect"};

FolksInspectCommandsSignals*
folks_inspect_commands_signals_construct (GType object_type,
                                          FolksInspectClient* client)
{
	FolksInspectCommandsSignals* self = NULL;
#line 98 "/run/build/folks/tools/inspect/command-signals.vala"
	g_return_val_if_fail (client != NULL, NULL);
#line 100 "/run/build/folks/tools/inspect/command-signals.vala"
	self = (FolksInspectCommandsSignals*) folks_inspect_command_construct (object_type, client);
#line 98 "/run/build/folks/tools/inspect/command-signals.vala"
	return self;
#line 312 "command-signals.c"
}


FolksInspectCommandsSignals*
folks_inspect_commands_signals_new (FolksInspectClient* client)
{
#line 98 "/run/build/folks/tools/inspect/command-signals.vala"
	return folks_inspect_commands_signals_construct (FOLKS_INSPECT_COMMANDS_TYPE_SIGNALS, client);
#line 321 "command-signals.c"
}


static void
folks_inspect_commands_signals_real_run_data_free (gpointer _data)
{
	FolksInspectCommandsSignalsRunData* _data_;
	_data_ = _data;
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	_g_free0 (_data_->command_string);
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	_folks_inspect_command_unref0 (_data_->self);
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	g_slice_free (FolksInspectCommandsSignalsRunData, _data_);
#line 336 "command-signals.c"
}


static void
folks_inspect_commands_signals_real_run_async_ready_wrapper (GObject *source_object,
                                                             GAsyncResult *res,
                                                             void *user_data)
{
	FolksInspectCommandsSignalsRunData* _task_data_;
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	if (_task_data_->_callback_ != NULL) {
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 352 "command-signals.c"
	}
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	_task_data_->_task_complete_ = TRUE;
#line 356 "command-signals.c"
}


static gpointer
_folks_inspect_command_ref0 (gpointer self)
{
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	return self ? folks_inspect_command_ref (self) : NULL;
#line 365 "command-signals.c"
}


static void
folks_inspect_commands_signals_real_run (FolksInspectCommand* base,
                                         const gchar* command_string,
                                         GAsyncReadyCallback _callback_,
                                         gpointer _user_data_)
{
	FolksInspectCommandsSignals * self;
	FolksInspectCommandsSignalsRunData* _data_;
	FolksInspectCommandsSignals* _tmp0_;
	gchar* _tmp1_;
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	self = (FolksInspectCommandsSignals*) base;
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	_data_ = g_slice_new0 (FolksInspectCommandsSignalsRunData);
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	_data_->_callback_ = _callback_;
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	_data_->_async_result = g_task_new (NULL, NULL, folks_inspect_commands_signals_real_run_async_ready_wrapper, _user_data_);
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	if (_callback_ == NULL) {
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->_task_complete_ = TRUE;
#line 391 "command-signals.c"
	}
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_inspect_commands_signals_real_run_data_free);
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp0_ = _folks_inspect_command_ref0 (self);
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	_data_->self = _tmp0_;
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp1_ = g_strdup (command_string);
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	_g_free0 (_data_->command_string);
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	_data_->command_string = _tmp1_;
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	folks_inspect_commands_signals_real_run_co (_data_);
#line 407 "command-signals.c"
}


static gint
folks_inspect_commands_signals_real_run_finish (FolksInspectCommand* base,
                                                GAsyncResult* _res_)
{
	gint result;
	FolksInspectCommandsSignalsRunData* _data_;
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	result = _data_->result;
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	return result;
#line 423 "command-signals.c"
}


static gchar*
string_strip (const gchar* self)
{
	gchar* result = NULL;
	gchar* _result_ = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
#line 1304 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1305 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = g_strdup (self);
#line 1305 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_result_ = _tmp0_;
#line 1306 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp1_ = _result_;
#line 1306 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_strstrip (_tmp1_);
#line 1307 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _result_;
#line 1307 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 448 "command-signals.c"
}


static gboolean
folks_inspect_commands_signals_real_run_co (FolksInspectCommandsSignalsRunData* _data_)
{
#line 103 "/run/build/folks/tools/inspect/command-signals.vala"
	switch (_data_->_state_) {
#line 103 "/run/build/folks/tools/inspect/command-signals.vala"
		case 0:
#line 459 "command-signals.c"
		goto _state_0;
		default:
#line 103 "/run/build/folks/tools/inspect/command-signals.vala"
		g_assert_not_reached ();
#line 464 "command-signals.c"
	}
	_state_0:
#line 105 "/run/build/folks/tools/inspect/command-signals.vala"
	if (_data_->command_string == NULL) {
#line 108 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->_tmp0_ = ((FolksInspectCommand*) _data_->self)->client;
#line 108 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->_tmp1_ = folks_inspect_client_get_signal_manager (_data_->_tmp0_);
#line 108 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->_tmp2_ = _data_->_tmp1_;
#line 108 "/run/build/folks/tools/inspect/command-signals.vala"
		folks_inspect_signal_manager_list_signals (_data_->_tmp2_, G_TYPE_INVALID, NULL);
#line 477 "command-signals.c"
	} else {
#line 113 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->_tmp4_ = _data_->_tmp3_ = g_strsplit (_data_->command_string, " ", 2);
#line 113 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->parts = _data_->_tmp4_;
#line 113 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->parts_length1 = _vala_array_length (_data_->_tmp3_);
#line 113 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->_parts_size_ = _data_->parts_length1;
#line 115 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->_tmp5_ = folks_inspect_command_get_name ((FolksInspectCommand*) _data_->self);
#line 115 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->_tmp6_ = _data_->_tmp5_;
#line 115 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->_tmp7_ = _data_->parts;
#line 115 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->_tmp7__length1 = _data_->parts_length1;
#line 115 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->_tmp8_ = _data_->_tmp7_[0];
#line 115 "/run/build/folks/tools/inspect/command-signals.vala"
		if (!folks_inspect_utils_validate_subcommand (_data_->_tmp6_, _data_->command_string, _data_->_tmp8_, FOLKS_INSPECT_COMMANDS_SIGNALS__valid_subcommands, G_N_ELEMENTS (FOLKS_INSPECT_COMMANDS_SIGNALS__valid_subcommands))) {
#line 117 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->result = 1;
#line 117 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
#line 117 "/run/build/folks/tools/inspect/command-signals.vala"
			g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 117 "/run/build/folks/tools/inspect/command-signals.vala"
			if (_data_->_state_ != 0) {
#line 117 "/run/build/folks/tools/inspect/command-signals.vala"
				while (_data_->_task_complete_ != TRUE) {
#line 117 "/run/build/folks/tools/inspect/command-signals.vala"
					g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 511 "command-signals.c"
				}
			}
#line 117 "/run/build/folks/tools/inspect/command-signals.vala"
			g_object_unref (_data_->_async_result);
#line 117 "/run/build/folks/tools/inspect/command-signals.vala"
			return FALSE;
#line 518 "command-signals.c"
		}
#line 124 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->_tmp10_ = _data_->parts;
#line 124 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->_tmp10__length1 = _data_->parts_length1;
#line 124 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->_tmp11_ = _data_->_tmp10_[0];
#line 124 "/run/build/folks/tools/inspect/command-signals.vala"
		if (g_strcmp0 (_data_->_tmp11_, "connect") == 0) {
#line 124 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp9_ = TRUE;
#line 530 "command-signals.c"
		} else {
#line 124 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp12_ = _data_->parts;
#line 124 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp12__length1 = _data_->parts_length1;
#line 124 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp13_ = _data_->_tmp12_[0];
#line 124 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp9_ = g_strcmp0 (_data_->_tmp13_, "disconnect") == 0;
#line 540 "command-signals.c"
		}
#line 124 "/run/build/folks/tools/inspect/command-signals.vala"
		if (_data_->_tmp9_) {
#line 127 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp15_ = _data_->parts;
#line 127 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp15__length1 = _data_->parts_length1;
#line 127 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp16_ = _data_->_tmp15_[1];
#line 127 "/run/build/folks/tools/inspect/command-signals.vala"
			if (_data_->_tmp16_ == NULL) {
#line 127 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp14_ = TRUE;
#line 554 "command-signals.c"
			} else {
#line 127 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp17_ = _data_->parts;
#line 127 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp17__length1 = _data_->parts_length1;
#line 127 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp18_ = _data_->_tmp17_[1];
#line 127 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp19_ = string_strip (_data_->_tmp18_);
#line 127 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp20_ = _data_->_tmp19_;
#line 127 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp14_ = g_strcmp0 (_data_->_tmp20_, "") == 0;
#line 127 "/run/build/folks/tools/inspect/command-signals.vala"
				_g_free0 (_data_->_tmp20_);
#line 570 "command-signals.c"
			}
#line 127 "/run/build/folks/tools/inspect/command-signals.vala"
			if (_data_->_tmp14_) {
#line 129 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp21_ = _data_->parts;
#line 129 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp21__length1 = _data_->parts_length1;
#line 129 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp22_ = _data_->_tmp21_[1];
#line 129 "/run/build/folks/tools/inspect/command-signals.vala"
				folks_inspect_utils_print_line ("Unrecognised signal identifier '%s'.", _data_->_tmp22_);
#line 131 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->result = 1;
#line 131 "/run/build/folks/tools/inspect/command-signals.vala"
				_g_free0 (_data_->detail_string);
#line 131 "/run/build/folks/tools/inspect/command-signals.vala"
				_g_free0 (_data_->signal_name);
#line 131 "/run/build/folks/tools/inspect/command-signals.vala"
				_g_object_unref0 (_data_->class_instance);
#line 131 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
#line 131 "/run/build/folks/tools/inspect/command-signals.vala"
				g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 131 "/run/build/folks/tools/inspect/command-signals.vala"
				if (_data_->_state_ != 0) {
#line 131 "/run/build/folks/tools/inspect/command-signals.vala"
					while (_data_->_task_complete_ != TRUE) {
#line 131 "/run/build/folks/tools/inspect/command-signals.vala"
						g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 600 "command-signals.c"
					}
				}
#line 131 "/run/build/folks/tools/inspect/command-signals.vala"
				g_object_unref (_data_->_async_result);
#line 131 "/run/build/folks/tools/inspect/command-signals.vala"
				return FALSE;
#line 607 "command-signals.c"
			}
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp23_ = _data_->parts;
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp23__length1 = _data_->parts_length1;
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp24_ = _data_->_tmp23_[1];
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp25_ = string_strip (_data_->_tmp24_);
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp26_ = _data_->_tmp25_;
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp27_ = 0UL;
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp28_ = NULL;
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp29_ = NULL;
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp30_ = NULL;
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp31_ = folks_inspect_commands_signals_parse_signal_id (_data_->self, _data_->_tmp26_, &_data_->_tmp27_, &_data_->_tmp28_, &_data_->_tmp29_, &_data_->_tmp30_);
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->class_type = _data_->_tmp27_;
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_g_object_unref0 (_data_->class_instance);
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->class_instance = _data_->_tmp28_;
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_g_free0 (_data_->signal_name);
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->signal_name = _data_->_tmp29_;
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_g_free0 (_data_->detail_string);
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->detail_string = _data_->_tmp30_;
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp32_ = _data_->_tmp31_ == FALSE;
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			_g_free0 (_data_->_tmp26_);
#line 134 "/run/build/folks/tools/inspect/command-signals.vala"
			if (_data_->_tmp32_) {
#line 138 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->result = 1;
#line 138 "/run/build/folks/tools/inspect/command-signals.vala"
				_g_free0 (_data_->detail_string);
#line 138 "/run/build/folks/tools/inspect/command-signals.vala"
				_g_free0 (_data_->signal_name);
#line 138 "/run/build/folks/tools/inspect/command-signals.vala"
				_g_object_unref0 (_data_->class_instance);
#line 138 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
#line 138 "/run/build/folks/tools/inspect/command-signals.vala"
				g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 138 "/run/build/folks/tools/inspect/command-signals.vala"
				if (_data_->_state_ != 0) {
#line 138 "/run/build/folks/tools/inspect/command-signals.vala"
					while (_data_->_task_complete_ != TRUE) {
#line 138 "/run/build/folks/tools/inspect/command-signals.vala"
						g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 667 "command-signals.c"
					}
				}
#line 138 "/run/build/folks/tools/inspect/command-signals.vala"
				g_object_unref (_data_->_async_result);
#line 138 "/run/build/folks/tools/inspect/command-signals.vala"
				return FALSE;
#line 674 "command-signals.c"
			}
#line 142 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp33_ = _data_->parts;
#line 142 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp33__length1 = _data_->parts_length1;
#line 142 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp34_ = _data_->_tmp33_[0];
#line 142 "/run/build/folks/tools/inspect/command-signals.vala"
			if (g_strcmp0 (_data_->_tmp34_, "connect") == 0) {
#line 144 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp35_ = ((FolksInspectCommand*) _data_->self)->client;
#line 144 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp36_ = folks_inspect_client_get_signal_manager (_data_->_tmp35_);
#line 144 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp37_ = _data_->_tmp36_;
#line 144 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp38_ = _data_->class_type;
#line 144 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp39_ = _data_->class_instance;
#line 144 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp40_ = _data_->signal_name;
#line 144 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp41_ = _data_->detail_string;
#line 144 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->signal_count = folks_inspect_signal_manager_connect_to_signal (_data_->_tmp37_, _data_->_tmp38_, _data_->_tmp39_, _data_->_tmp40_, _data_->_tmp41_);
#line 147 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp42_ = _data_->signal_count;
#line 147 "/run/build/folks/tools/inspect/command-signals.vala"
				folks_inspect_utils_print_line ("Connected to %u signals.", _data_->_tmp42_);
#line 704 "command-signals.c"
			} else {
#line 151 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp43_ = ((FolksInspectCommand*) _data_->self)->client;
#line 151 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp44_ = folks_inspect_client_get_signal_manager (_data_->_tmp43_);
#line 151 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp45_ = _data_->_tmp44_;
#line 151 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp46_ = _data_->class_type;
#line 151 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp47_ = _data_->class_instance;
#line 151 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp48_ = _data_->signal_name;
#line 151 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp49_ = _data_->detail_string;
#line 151 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_vala1_signal_count = folks_inspect_signal_manager_disconnect_from_signal (_data_->_tmp45_, _data_->_tmp46_, _data_->_tmp47_, _data_->_tmp48_, _data_->_tmp49_);
#line 155 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp50_ = _data_->_vala1_signal_count;
#line 155 "/run/build/folks/tools/inspect/command-signals.vala"
				folks_inspect_utils_print_line ("Disconnected from %u signals.", _data_->_tmp50_);
#line 726 "command-signals.c"
			}
		} else {
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp51_ = _data_->parts;
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp51__length1 = _data_->parts_length1;
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp52_ = _data_->_tmp51_[0];
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp53_ = string_strip (_data_->_tmp52_);
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp54_ = _data_->_tmp53_;
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp55_ = 0UL;
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp56_ = NULL;
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp57_ = NULL;
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp58_ = NULL;
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp59_ = folks_inspect_commands_signals_parse_signal_id (_data_->self, _data_->_tmp54_, &_data_->_tmp55_, &_data_->_tmp56_, &_data_->_tmp57_, &_data_->_tmp58_);
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->class_type = _data_->_tmp55_;
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_g_object_unref0 (_data_->class_instance);
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->class_instance = _data_->_tmp56_;
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_g_free0 (_data_->signal_name);
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->signal_name = _data_->_tmp57_;
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_g_free0 (_data_->detail_string);
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->detail_string = _data_->_tmp58_;
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp60_ = _data_->_tmp59_ == FALSE;
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			_g_free0 (_data_->_tmp54_);
#line 163 "/run/build/folks/tools/inspect/command-signals.vala"
			if (_data_->_tmp60_) {
#line 167 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->result = 1;
#line 167 "/run/build/folks/tools/inspect/command-signals.vala"
				_g_free0 (_data_->detail_string);
#line 167 "/run/build/folks/tools/inspect/command-signals.vala"
				_g_free0 (_data_->signal_name);
#line 167 "/run/build/folks/tools/inspect/command-signals.vala"
				_g_object_unref0 (_data_->class_instance);
#line 167 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
#line 167 "/run/build/folks/tools/inspect/command-signals.vala"
				g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 167 "/run/build/folks/tools/inspect/command-signals.vala"
				if (_data_->_state_ != 0) {
#line 167 "/run/build/folks/tools/inspect/command-signals.vala"
					while (_data_->_task_complete_ != TRUE) {
#line 167 "/run/build/folks/tools/inspect/command-signals.vala"
						g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 787 "command-signals.c"
					}
				}
#line 167 "/run/build/folks/tools/inspect/command-signals.vala"
				g_object_unref (_data_->_async_result);
#line 167 "/run/build/folks/tools/inspect/command-signals.vala"
				return FALSE;
#line 794 "command-signals.c"
			}
#line 170 "/run/build/folks/tools/inspect/command-signals.vala"
			_data_->_tmp61_ = _data_->signal_name;
#line 170 "/run/build/folks/tools/inspect/command-signals.vala"
			if (_data_->_tmp61_ == NULL) {
#line 172 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp62_ = ((FolksInspectCommand*) _data_->self)->client;
#line 172 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp63_ = folks_inspect_client_get_signal_manager (_data_->_tmp62_);
#line 172 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp64_ = _data_->_tmp63_;
#line 172 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp65_ = _data_->class_type;
#line 172 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp66_ = _data_->class_instance;
#line 172 "/run/build/folks/tools/inspect/command-signals.vala"
				folks_inspect_signal_manager_list_signals (_data_->_tmp64_, _data_->_tmp65_, _data_->_tmp66_);
#line 812 "command-signals.c"
			} else {
#line 178 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp67_ = _data_->class_type;
#line 178 "/run/build/folks/tools/inspect/command-signals.vala"
				if (_data_->_tmp67_ == G_TYPE_INVALID) {
#line 179 "/run/build/folks/tools/inspect/command-signals.vala"
					_data_->_tmp68_ = _data_->class_instance;
#line 179 "/run/build/folks/tools/inspect/command-signals.vala"
					_data_->class_type = G_TYPE_FROM_INSTANCE (_data_->_tmp68_);
#line 822 "command-signals.c"
				}
#line 181 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp69_ = ((FolksInspectCommand*) _data_->self)->client;
#line 181 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp70_ = folks_inspect_client_get_signal_manager (_data_->_tmp69_);
#line 181 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp71_ = _data_->_tmp70_;
#line 181 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp72_ = _data_->class_type;
#line 181 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp73_ = _data_->signal_name;
#line 181 "/run/build/folks/tools/inspect/command-signals.vala"
				_data_->_tmp74_ = _data_->detail_string;
#line 181 "/run/build/folks/tools/inspect/command-signals.vala"
				folks_inspect_signal_manager_show_signal_details (_data_->_tmp71_, _data_->_tmp72_, _data_->_tmp73_, _data_->_tmp74_);
#line 838 "command-signals.c"
			}
		}
#line 105 "/run/build/folks/tools/inspect/command-signals.vala"
		_g_free0 (_data_->detail_string);
#line 105 "/run/build/folks/tools/inspect/command-signals.vala"
		_g_free0 (_data_->signal_name);
#line 105 "/run/build/folks/tools/inspect/command-signals.vala"
		_g_object_unref0 (_data_->class_instance);
#line 105 "/run/build/folks/tools/inspect/command-signals.vala"
		_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
#line 849 "command-signals.c"
	}
#line 187 "/run/build/folks/tools/inspect/command-signals.vala"
	_data_->result = 0;
#line 187 "/run/build/folks/tools/inspect/command-signals.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 187 "/run/build/folks/tools/inspect/command-signals.vala"
	if (_data_->_state_ != 0) {
#line 187 "/run/build/folks/tools/inspect/command-signals.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 187 "/run/build/folks/tools/inspect/command-signals.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 861 "command-signals.c"
		}
	}
#line 187 "/run/build/folks/tools/inspect/command-signals.vala"
	g_object_unref (_data_->_async_result);
#line 187 "/run/build/folks/tools/inspect/command-signals.vala"
	return FALSE;
#line 868 "command-signals.c"
}


static gchar*
_folks_inspect_utils_backend_name_completion_cb_rl_compentry_func_t (const gchar* str,
                                                                     gint a)
{
	gchar* result;
	result = folks_inspect_utils_backend_name_completion_cb (str, a);
#line 194 "/run/build/folks/tools/inspect/command-signals.vala"
	return result;
#line 880 "command-signals.c"
}


static gchar**
_vala_array_dup14 (gchar** self,
                   int length)
{
	gchar** result;
	int i;
#line 194 "/run/build/folks/tools/inspect/command-signals.vala"
	result = g_new0 (gchar*, length + 1);
#line 194 "/run/build/folks/tools/inspect/command-signals.vala"
	for (i = 0; i < length; i++) {
#line 894 "command-signals.c"
		gchar* _tmp0_;
#line 194 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp0_ = g_strdup (self[i]);
#line 194 "/run/build/folks/tools/inspect/command-signals.vala"
		result[i] = _tmp0_;
#line 900 "command-signals.c"
	}
#line 194 "/run/build/folks/tools/inspect/command-signals.vala"
	return result;
#line 904 "command-signals.c"
}


static gchar**
folks_inspect_commands_signals_real_complete_subcommand (FolksInspectCommand* base,
                                                         const gchar* subcommand,
                                                         int* result_length1)
{
	FolksInspectCommandsSignals * self;
	gchar** result = NULL;
	gchar** _tmp0_;
	gchar** _tmp1_;
	gchar** _tmp2_;
	gint _tmp2__length1;
	gchar** _tmp3_;
	gint _tmp3__length1;
#line 190 "/run/build/folks/tools/inspect/command-signals.vala"
	self = (FolksInspectCommandsSignals*) base;
#line 190 "/run/build/folks/tools/inspect/command-signals.vala"
	g_return_val_if_fail (subcommand != NULL, NULL);
#line 194 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp1_ = _tmp0_ = rl_completion_matches (subcommand, _folks_inspect_utils_backend_name_completion_cb_rl_compentry_func_t);
#line 194 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp2_ = (_tmp1_ != NULL) ? _vala_array_dup14 (_tmp1_, _vala_array_length (_tmp0_)) : ((gpointer) _tmp1_);
#line 194 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp2__length1 = _vala_array_length (_tmp0_);
#line 194 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp3_ = _tmp2_;
#line 194 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp3__length1 = _tmp2__length1;
#line 194 "/run/build/folks/tools/inspect/command-signals.vala"
	if (result_length1) {
#line 194 "/run/build/folks/tools/inspect/command-signals.vala"
		*result_length1 = _tmp3__length1;
#line 939 "command-signals.c"
	}
#line 194 "/run/build/folks/tools/inspect/command-signals.vala"
	result = _tmp3_;
#line 194 "/run/build/folks/tools/inspect/command-signals.vala"
	return result;
#line 945 "command-signals.c"
}


static gchar
string_get (const gchar* self,
            glong index)
{
	gchar result = '\0';
	gchar _tmp0_;
#line 1180 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, '\0');
#line 1181 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = ((gchar*) self)[index];
#line 1181 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _tmp0_;
#line 1181 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 963 "command-signals.c"
}


static guint64
uint64_parse (const gchar* str)
{
	guint64 result = 0ULL;
	guint64 _tmp0_;
#line 782 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (str != NULL, 0ULL);
#line 783 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = g_ascii_strtoull (str, NULL, (guint) 0);
#line 783 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _tmp0_;
#line 783 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 980 "command-signals.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 240 "/run/build/folks/tools/inspect/command-signals.vala"
	return self ? g_object_ref (self) : NULL;
#line 989 "command-signals.c"
}


static gboolean
folks_inspect_commands_signals_parse_signal_id (FolksInspectCommandsSignals* self,
                                                const gchar* input,
                                                GType* class_type,
                                                GObject* * class_instance,
                                                gchar* * signal_name,
                                                gchar* * detail_string)
{
	GType _vala_class_type = 0UL;
	GObject* _vala_class_instance = NULL;
	gchar* _vala_signal_name = NULL;
	gchar* _vala_detail_string = NULL;
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	gchar** parts = NULL;
	gchar** _tmp1_;
	gchar** _tmp2_;
	gint parts_length1;
	gint _parts_size_;
	gchar* class_name_or_instance = NULL;
	gchar** _tmp3_;
	gint _tmp3__length1;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	const gchar* _tmp6_ = NULL;
	gchar** _tmp7_;
	gint _tmp7__length1;
	gchar* signal_name_inner = NULL;
	gchar* _tmp10_;
	const gchar* _tmp11_ = NULL;
	gchar** _tmp12_;
	gint _tmp12__length1;
	gchar* detail_string_inner = NULL;
	gchar* _tmp15_;
	gboolean _tmp16_ = FALSE;
	const gchar* _tmp17_;
	gboolean _tmp19_ = FALSE;
	gboolean _tmp20_ = FALSE;
	const gchar* _tmp21_;
	gint _tmp22_;
	gint _tmp23_;
	const gchar* _tmp37_;
	gchar* _tmp38_;
	const gchar* _tmp39_;
	gchar* _tmp40_;
#line 198 "/run/build/folks/tools/inspect/command-signals.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 198 "/run/build/folks/tools/inspect/command-signals.vala"
	g_return_val_if_fail (input != NULL, FALSE);
#line 215 "/run/build/folks/tools/inspect/command-signals.vala"
	if (input != NULL) {
#line 215 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp0_ = g_strcmp0 (input, "") != 0;
#line 1046 "command-signals.c"
	} else {
#line 215 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp0_ = FALSE;
#line 1050 "command-signals.c"
	}
#line 215 "/run/build/folks/tools/inspect/command-signals.vala"
	_vala_assert (_tmp0_, "input != null && input != \"\"");
#line 218 "/run/build/folks/tools/inspect/command-signals.vala"
	_vala_class_type = G_TYPE_INVALID;
#line 219 "/run/build/folks/tools/inspect/command-signals.vala"
	_g_object_unref0 (_vala_class_instance);
#line 219 "/run/build/folks/tools/inspect/command-signals.vala"
	_vala_class_instance = NULL;
#line 220 "/run/build/folks/tools/inspect/command-signals.vala"
	_g_free0 (_vala_signal_name);
#line 220 "/run/build/folks/tools/inspect/command-signals.vala"
	_vala_signal_name = NULL;
#line 221 "/run/build/folks/tools/inspect/command-signals.vala"
	_g_free0 (_vala_detail_string);
#line 221 "/run/build/folks/tools/inspect/command-signals.vala"
	_vala_detail_string = NULL;
#line 223 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp2_ = _tmp1_ = g_strsplit (input, "::", 3);
#line 223 "/run/build/folks/tools/inspect/command-signals.vala"
	parts = _tmp2_;
#line 223 "/run/build/folks/tools/inspect/command-signals.vala"
	parts_length1 = _vala_array_length (_tmp1_);
#line 223 "/run/build/folks/tools/inspect/command-signals.vala"
	_parts_size_ = parts_length1;
#line 224 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp3_ = parts;
#line 224 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp3__length1 = parts_length1;
#line 224 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp4_ = _tmp3_[0];
#line 224 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp5_ = g_strdup (_tmp4_);
#line 224 "/run/build/folks/tools/inspect/command-signals.vala"
	class_name_or_instance = _tmp5_;
#line 225 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp7_ = parts;
#line 225 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp7__length1 = parts_length1;
#line 225 "/run/build/folks/tools/inspect/command-signals.vala"
	if (_tmp7__length1 > 1) {
#line 1092 "command-signals.c"
		gchar** _tmp8_;
		gint _tmp8__length1;
		const gchar* _tmp9_;
#line 225 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp8_ = parts;
#line 225 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp8__length1 = parts_length1;
#line 225 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp9_ = _tmp8_[1];
#line 225 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp6_ = _tmp9_;
#line 1104 "command-signals.c"
	} else {
#line 225 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp6_ = NULL;
#line 1108 "command-signals.c"
	}
#line 225 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp10_ = g_strdup (_tmp6_);
#line 225 "/run/build/folks/tools/inspect/command-signals.vala"
	signal_name_inner = _tmp10_;
#line 226 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp12_ = parts;
#line 226 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp12__length1 = parts_length1;
#line 226 "/run/build/folks/tools/inspect/command-signals.vala"
	if (_tmp12__length1 > 2) {
#line 1120 "command-signals.c"
		gchar** _tmp13_;
		gint _tmp13__length1;
		const gchar* _tmp14_;
#line 226 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp13_ = parts;
#line 226 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp13__length1 = parts_length1;
#line 226 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp14_ = _tmp13_[2];
#line 226 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp11_ = _tmp14_;
#line 1132 "command-signals.c"
	} else {
#line 226 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp11_ = NULL;
#line 1136 "command-signals.c"
	}
#line 226 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp15_ = g_strdup (_tmp11_);
#line 226 "/run/build/folks/tools/inspect/command-signals.vala"
	detail_string_inner = _tmp15_;
#line 228 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp17_ = signal_name_inner;
#line 228 "/run/build/folks/tools/inspect/command-signals.vala"
	if (g_strcmp0 (_tmp17_, "") == 0) {
#line 228 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp16_ = TRUE;
#line 1148 "command-signals.c"
	} else {
		const gchar* _tmp18_;
#line 228 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp18_ = detail_string_inner;
#line 228 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp16_ = g_strcmp0 (_tmp18_, "") == 0;
#line 1155 "command-signals.c"
	}
#line 228 "/run/build/folks/tools/inspect/command-signals.vala"
	if (_tmp16_) {
#line 230 "/run/build/folks/tools/inspect/command-signals.vala"
		folks_inspect_utils_print_line ("Invalid signal identifier '%s'.", input);
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
		result = FALSE;
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
		_g_free0 (detail_string_inner);
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
		_g_free0 (signal_name_inner);
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
		_g_free0 (class_name_or_instance);
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
		parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
		if (class_type) {
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
			*class_type = _vala_class_type;
#line 1175 "command-signals.c"
		}
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
		if (class_instance) {
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
			*class_instance = _vala_class_instance;
#line 1181 "command-signals.c"
		} else {
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
			_g_object_unref0 (_vala_class_instance);
#line 1185 "command-signals.c"
		}
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
		if (signal_name) {
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
			*signal_name = _vala_signal_name;
#line 1191 "command-signals.c"
		} else {
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
			_g_free0 (_vala_signal_name);
#line 1195 "command-signals.c"
		}
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
		if (detail_string) {
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
			*detail_string = _vala_detail_string;
#line 1201 "command-signals.c"
		} else {
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
			_g_free0 (_vala_detail_string);
#line 1205 "command-signals.c"
		}
#line 231 "/run/build/folks/tools/inspect/command-signals.vala"
		return result;
#line 1209 "command-signals.c"
	}
#line 234 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp21_ = class_name_or_instance;
#line 234 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp22_ = strlen (_tmp21_);
#line 234 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp23_ = _tmp22_;
#line 234 "/run/build/folks/tools/inspect/command-signals.vala"
	if (_tmp23_ > 2) {
#line 1219 "command-signals.c"
		const gchar* _tmp24_;
#line 235 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp24_ = class_name_or_instance;
#line 235 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp20_ = string_get (_tmp24_, (glong) 0) == '0';
#line 1225 "command-signals.c"
	} else {
#line 234 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp20_ = FALSE;
#line 1229 "command-signals.c"
	}
#line 234 "/run/build/folks/tools/inspect/command-signals.vala"
	if (_tmp20_) {
#line 1233 "command-signals.c"
		const gchar* _tmp25_;
#line 235 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp25_ = class_name_or_instance;
#line 235 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp19_ = string_get (_tmp25_, (glong) 1) == 'x';
#line 1239 "command-signals.c"
	} else {
#line 234 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp19_ = FALSE;
#line 1243 "command-signals.c"
	}
#line 234 "/run/build/folks/tools/inspect/command-signals.vala"
	if (_tmp19_) {
#line 1247 "command-signals.c"
		guint64 address = 0ULL;
		const gchar* _tmp26_;
		guint64 _tmp27_;
		GObject* _tmp28_;
		GObject* _tmp29_;
#line 239 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp26_ = class_name_or_instance;
#line 239 "/run/build/folks/tools/inspect/command-signals.vala"
		address = uint64_parse (_tmp26_);
#line 240 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp27_ = address;
#line 240 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp28_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp27_, G_TYPE_OBJECT, GObject));
#line 240 "/run/build/folks/tools/inspect/command-signals.vala"
		_g_object_unref0 (_vala_class_instance);
#line 240 "/run/build/folks/tools/inspect/command-signals.vala"
		_vala_class_instance = _tmp28_;
#line 241 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp29_ = _vala_class_instance;
#line 241 "/run/build/folks/tools/inspect/command-signals.vala"
		_vala_assert (G_TYPE_IS_OBJECT (G_TYPE_FROM_INSTANCE (_tmp29_)), "class_instance.get_type ().is_object ()");
#line 1269 "command-signals.c"
	} else {
		const gchar* _tmp30_;
		gboolean _tmp31_ = FALSE;
		GType _tmp32_;
#line 246 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp30_ = class_name_or_instance;
#line 246 "/run/build/folks/tools/inspect/command-signals.vala"
		_vala_class_type = g_type_from_name (_tmp30_);
#line 247 "/run/build/folks/tools/inspect/command-signals.vala"
		_tmp32_ = _vala_class_type;
#line 247 "/run/build/folks/tools/inspect/command-signals.vala"
		if (_tmp32_ == G_TYPE_INVALID) {
#line 247 "/run/build/folks/tools/inspect/command-signals.vala"
			_tmp31_ = TRUE;
#line 1284 "command-signals.c"
		} else {
			gboolean _tmp33_ = FALSE;
			GType _tmp34_;
#line 248 "/run/build/folks/tools/inspect/command-signals.vala"
			_tmp34_ = _vala_class_type;
#line 248 "/run/build/folks/tools/inspect/command-signals.vala"
			if (G_TYPE_IS_INSTANTIATABLE (_tmp34_) == FALSE) {
#line 1292 "command-signals.c"
				GType _tmp35_;
#line 249 "/run/build/folks/tools/inspect/command-signals.vala"
				_tmp35_ = _vala_class_type;
#line 249 "/run/build/folks/tools/inspect/command-signals.vala"
				_tmp33_ = G_TYPE_IS_INTERFACE (_tmp35_) == FALSE;
#line 1298 "command-signals.c"
			} else {
#line 248 "/run/build/folks/tools/inspect/command-signals.vala"
				_tmp33_ = FALSE;
#line 1302 "command-signals.c"
			}
#line 248 "/run/build/folks/tools/inspect/command-signals.vala"
			_tmp31_ = _tmp33_;
#line 1306 "command-signals.c"
		}
#line 247 "/run/build/folks/tools/inspect/command-signals.vala"
		if (_tmp31_) {
#line 1310 "command-signals.c"
			const gchar* _tmp36_;
#line 251 "/run/build/folks/tools/inspect/command-signals.vala"
			_tmp36_ = class_name_or_instance;
#line 251 "/run/build/folks/tools/inspect/command-signals.vala"
			folks_inspect_utils_print_line ("Unrecognised class name '%s'.", _tmp36_);
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
			result = FALSE;
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
			_g_free0 (detail_string_inner);
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
			_g_free0 (signal_name_inner);
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
			_g_free0 (class_name_or_instance);
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
			parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
			if (class_type) {
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
				*class_type = _vala_class_type;
#line 1330 "command-signals.c"
			}
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
			if (class_instance) {
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
				*class_instance = _vala_class_instance;
#line 1336 "command-signals.c"
			} else {
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
				_g_object_unref0 (_vala_class_instance);
#line 1340 "command-signals.c"
			}
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
			if (signal_name) {
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
				*signal_name = _vala_signal_name;
#line 1346 "command-signals.c"
			} else {
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
				_g_free0 (_vala_signal_name);
#line 1350 "command-signals.c"
			}
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
			if (detail_string) {
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
				*detail_string = _vala_detail_string;
#line 1356 "command-signals.c"
			} else {
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
				_g_free0 (_vala_detail_string);
#line 1360 "command-signals.c"
			}
#line 253 "/run/build/folks/tools/inspect/command-signals.vala"
			return result;
#line 1364 "command-signals.c"
		}
	}
#line 257 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp37_ = signal_name_inner;
#line 257 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp38_ = g_strdup (_tmp37_);
#line 257 "/run/build/folks/tools/inspect/command-signals.vala"
	_g_free0 (_vala_signal_name);
#line 257 "/run/build/folks/tools/inspect/command-signals.vala"
	_vala_signal_name = _tmp38_;
#line 258 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp39_ = detail_string_inner;
#line 258 "/run/build/folks/tools/inspect/command-signals.vala"
	_tmp40_ = g_strdup (_tmp39_);
#line 258 "/run/build/folks/tools/inspect/command-signals.vala"
	_g_free0 (_vala_detail_string);
#line 258 "/run/build/folks/tools/inspect/command-signals.vala"
	_vala_detail_string = _tmp40_;
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
	result = TRUE;
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
	_g_free0 (detail_string_inner);
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
	_g_free0 (signal_name_inner);
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
	_g_free0 (class_name_or_instance);
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
	parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
	if (class_type) {
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
		*class_type = _vala_class_type;
#line 1397 "command-signals.c"
	}
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
	if (class_instance) {
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
		*class_instance = _vala_class_instance;
#line 1403 "command-signals.c"
	} else {
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
		_g_object_unref0 (_vala_class_instance);
#line 1407 "command-signals.c"
	}
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
	if (signal_name) {
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
		*signal_name = _vala_signal_name;
#line 1413 "command-signals.c"
	} else {
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
		_g_free0 (_vala_signal_name);
#line 1417 "command-signals.c"
	}
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
	if (detail_string) {
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
		*detail_string = _vala_detail_string;
#line 1423 "command-signals.c"
	} else {
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
		_g_free0 (_vala_detail_string);
#line 1427 "command-signals.c"
	}
#line 260 "/run/build/folks/tools/inspect/command-signals.vala"
	return result;
#line 1431 "command-signals.c"
}


static const gchar*
folks_inspect_commands_signals_real_get_name (FolksInspectCommand* base)
{
	const gchar* result;
	FolksInspectCommandsSignals* self;
#line 55 "/run/build/folks/tools/inspect/command-signals.vala"
	self = (FolksInspectCommandsSignals*) base;
#line 55 "/run/build/folks/tools/inspect/command-signals.vala"
	result = "signals";
#line 55 "/run/build/folks/tools/inspect/command-signals.vala"
	return result;
#line 1446 "command-signals.c"
}


static const gchar*
folks_inspect_commands_signals_real_get_description (FolksInspectCommand* base)
{
	const gchar* result;
	FolksInspectCommandsSignals* self;
#line 60 "/run/build/folks/tools/inspect/command-signals.vala"
	self = (FolksInspectCommandsSignals*) base;
#line 62 "/run/build/folks/tools/inspect/command-signals.vala"
	result = "Allow connection to and display of signals emitted by " "libfolks.";
#line 62 "/run/build/folks/tools/inspect/command-signals.vala"
	return result;
#line 1461 "command-signals.c"
}


static const gchar*
folks_inspect_commands_signals_real_get_help (FolksInspectCommand* base)
{
	const gchar* result;
	FolksInspectCommandsSignals* self;
#line 69 "/run/build/folks/tools/inspect/command-signals.vala"
	self = (FolksInspectCommandsSignals*) base;
#line 71 "/run/build/folks/tools/inspect/command-signals.vala"
	result = "signals                                            " "List signals we're currently connected to.\n" "signals connect [class name]                       " "Connect to all the signals on all the instances of that " "class.\n" "signals connect [class name]::[signal name]        " "Connect to the given signal on all the instances of that " "class.\n" "signals connect [object pointer]                   " "Connect to all the signals on a particular class instance.\n" "signals connect [object pointer]::[signal name]    " "Connect to the given signal on a particular class instance.\n" "signals disconnect                                 " "(As for 'connect'.)\n" "signals [class name]                               " "List all the signals on all the instances of that class, " "highlighting the ones we're currently connected to.\n" "signals [object pointer]                           " "List all the signals on a particular class instance, " "highlighting the ones we're currently connected to.\n" "signals [class name]::[signal name]                " "Show the details of this signal.\n" "signals [object pointer]::[signal name]            " "Show the details of this signal.";
#line 71 "/run/build/folks/tools/inspect/command-signals.vala"
	return result;
#line 1476 "command-signals.c"
}


static void
folks_inspect_commands_signals_class_init (FolksInspectCommandsSignalsClass * klass)
{
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	folks_inspect_commands_signals_parent_class = g_type_class_peek_parent (klass);
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	((FolksInspectCommandClass *) klass)->run = (void (*) (FolksInspectCommand *, const gchar*, GAsyncReadyCallback, gpointer)) folks_inspect_commands_signals_real_run;
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	((FolksInspectCommandClass *) klass)->run_finish = (gint (*) (FolksInspectCommand *, GAsyncResult*)) folks_inspect_commands_signals_real_run_finish;
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	((FolksInspectCommandClass *) klass)->complete_subcommand = (gchar** (*) (FolksInspectCommand *, const gchar*, int*)) folks_inspect_commands_signals_real_complete_subcommand;
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	FOLKS_INSPECT_COMMAND_CLASS (klass)->get_name = folks_inspect_commands_signals_real_get_name;
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	FOLKS_INSPECT_COMMAND_CLASS (klass)->get_description = folks_inspect_commands_signals_real_get_description;
#line 45 "/run/build/folks/tools/inspect/command-signals.vala"
	FOLKS_INSPECT_COMMAND_CLASS (klass)->get_help = folks_inspect_commands_signals_real_get_help;
#line 1497 "command-signals.c"
}


static void
folks_inspect_commands_signals_instance_init (FolksInspectCommandsSignals * self)
{
}


GType
folks_inspect_commands_signals_get_type (void)
{
	static volatile gsize folks_inspect_commands_signals_type_id__volatile = 0;
	if (g_once_init_enter (&folks_inspect_commands_signals_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksInspectCommandsSignalsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_inspect_commands_signals_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksInspectCommandsSignals), 0, (GInstanceInitFunc) folks_inspect_commands_signals_instance_init, NULL };
		GType folks_inspect_commands_signals_type_id;
		folks_inspect_commands_signals_type_id = g_type_register_static (FOLKS_INSPECT_TYPE_COMMAND, "FolksInspectCommandsSignals", &g_define_type_info, 0);
		g_once_init_leave (&folks_inspect_commands_signals_type_id__volatile, folks_inspect_commands_signals_type_id);
	}
	return folks_inspect_commands_signals_type_id__volatile;
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



