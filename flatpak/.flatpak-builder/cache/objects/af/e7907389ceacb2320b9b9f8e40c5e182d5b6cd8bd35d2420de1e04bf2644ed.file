/* unity-synchronizer.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-synchronizer.vala, do not modify */

/*
 * Copyright (C) 2011 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Neil Jagdish Patel <neil.patel@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <dee.h>
#include <unity-trace.h>


#define UNITY_INTERNAL_TYPE_MERGE_STRATEGY (unity_internal_merge_strategy_get_type ())
#define UNITY_INTERNAL_MERGE_STRATEGY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_MERGE_STRATEGY, UnityInternalMergeStrategy))
#define UNITY_INTERNAL_IS_MERGE_STRATEGY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_MERGE_STRATEGY))
#define UNITY_INTERNAL_MERGE_STRATEGY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), UNITY_INTERNAL_TYPE_MERGE_STRATEGY, UnityInternalMergeStrategyIface))

typedef struct _UnityInternalMergeStrategy UnityInternalMergeStrategy;
typedef struct _UnityInternalMergeStrategyIface UnityInternalMergeStrategyIface;

#define UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER (unity_internal_results_synchronizer_get_type ())
#define UNITY_INTERNAL_RESULTS_SYNCHRONIZER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER, UnityInternalResultsSynchronizer))
#define UNITY_INTERNAL_RESULTS_SYNCHRONIZER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER, UnityInternalResultsSynchronizerClass))
#define UNITY_INTERNAL_IS_RESULTS_SYNCHRONIZER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER))
#define UNITY_INTERNAL_IS_RESULTS_SYNCHRONIZER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER))
#define UNITY_INTERNAL_RESULTS_SYNCHRONIZER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER, UnityInternalResultsSynchronizerClass))

typedef struct _UnityInternalResultsSynchronizer UnityInternalResultsSynchronizer;
typedef struct _UnityInternalResultsSynchronizerClass UnityInternalResultsSynchronizerClass;
typedef struct _UnityInternalResultsSynchronizerPrivate UnityInternalResultsSynchronizerPrivate;

#define UNITY_INTERNAL_RESULTS_SYNCHRONIZER_TYPE_SIGNAL_HANDLERS (unity_internal_results_synchronizer_signal_handlers_get_type ())
typedef struct _UnityInternalResultsSynchronizerSignalHandlers UnityInternalResultsSynchronizerSignalHandlers;
enum  {
	UNITY_INTERNAL_RESULTS_SYNCHRONIZER_0_PROPERTY,
	UNITY_INTERNAL_RESULTS_SYNCHRONIZER_RECEIVER_PROPERTY,
	UNITY_INTERNAL_RESULTS_SYNCHRONIZER_OWNER_SCOPE_ID_PROPERTY,
	UNITY_INTERNAL_RESULTS_SYNCHRONIZER_MERGE_STRATEGY_PROPERTY,
	UNITY_INTERNAL_RESULTS_SYNCHRONIZER_NUM_PROPERTIES
};
static GParamSpec* unity_internal_results_synchronizer_properties[UNITY_INTERNAL_RESULTS_SYNCHRONIZER_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
#define _unity_internal_results_synchronizer_signal_handlers_free0(var) ((var == NULL) ? NULL : (var = (unity_internal_results_synchronizer_signal_handlers_free (var), NULL)))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
enum  {
	UNITY_INTERNAL_RESULTS_SYNCHRONIZER_TRANSACTION_COMPLETE_SIGNAL,
	UNITY_INTERNAL_RESULTS_SYNCHRONIZER_NUM_SIGNALS
};
static guint unity_internal_results_synchronizer_signals[UNITY_INTERNAL_RESULTS_SYNCHRONIZER_NUM_SIGNALS] = {0};

struct _UnityInternalMergeStrategyIface {
	GTypeInterface parent_iface;
	DeeModelIter* (*merge_result) (UnityInternalMergeStrategy* self, const gchar* source_scope_id, DeeModel* target, GVariant** row, int row_length1);
};

struct _UnityInternalResultsSynchronizer {
	GObject parent_instance;
	UnityInternalResultsSynchronizerPrivate * priv;
};

struct _UnityInternalResultsSynchronizerClass {
	GObjectClass parent_class;
};

struct _UnityInternalResultsSynchronizerSignalHandlers {
	gboolean blocked;
	gulong row_added_id;
	gulong row_removed_id;
	gulong row_changed_id;
};

struct _UnityInternalResultsSynchronizerPrivate {
	DeeModel* _receiver;
	gchar* _owner_scope_id;
	UnityInternalMergeStrategy* _merge_strategy;
	GHashTable* _providers;
	GHashTable* _provider_ids;
	GHashTable* _provider_signal_ids;
	GHashTable* _provider_tags;
	GHashTable* _clear_seqnum_tags;
	GVariant** row_buf;
	gint row_buf_length1;
	gint _row_buf_size_;
	GQuark scope_id_quark;
	guint _clear_seq_num;
};


static gpointer unity_internal_results_synchronizer_parent_class = NULL;
static UnityInternalMergeStrategyIface * unity_internal_results_synchronizer_unity_internal_merge_strategy_parent_iface = NULL;

GType unity_internal_merge_strategy_get_type (void) G_GNUC_CONST;
GType unity_internal_results_synchronizer_get_type (void) G_GNUC_CONST;
static GType unity_internal_results_synchronizer_signal_handlers_get_type (void) G_GNUC_CONST G_GNUC_UNUSED;
static UnityInternalResultsSynchronizerSignalHandlers* unity_internal_results_synchronizer_signal_handlers_dup (const UnityInternalResultsSynchronizerSignalHandlers* self);
static void unity_internal_results_synchronizer_signal_handlers_free (UnityInternalResultsSynchronizerSignalHandlers* self);
#define UNITY_INTERNAL_RESULTS_SYNCHRONIZER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER, UnityInternalResultsSynchronizerPrivate))
UnityInternalResultsSynchronizer* unity_internal_results_synchronizer_new (DeeModel* receiver,
                                                                           const gchar* scope_id);
UnityInternalResultsSynchronizer* unity_internal_results_synchronizer_construct (GType object_type,
                                                                                 DeeModel* receiver,
                                                                                 const gchar* scope_id);
void unity_internal_results_synchronizer_clear (UnityInternalResultsSynchronizer* self);
DeeModel* unity_internal_results_synchronizer_get_receiver (UnityInternalResultsSynchronizer* self);
static DeeModelIter* unity_internal_results_synchronizer_real_merge_result (UnityInternalMergeStrategy* base,
                                                                     const gchar* source_scope_id,
                                                                     DeeModel* target,
                                                                     GVariant** row,
                                                                     int row_length1);
void unity_internal_results_synchronizer_add_provider (UnityInternalResultsSynchronizer* self,
                                                       DeeModel* provider,
                                                       const gchar* scope_id);
static void unity_internal_results_synchronizer_clear_provider_model (UnityInternalResultsSynchronizer* self,
                                                               const gchar* scope_id);
void unity_internal_results_synchronizer_remove_provider (UnityInternalResultsSynchronizer* self,
                                                          const gchar* scope_id);
static void unity_internal_results_synchronizer_on_row_added (UnityInternalResultsSynchronizer* self,
                                                       DeeModel* provider,
                                                       DeeModelIter* iter);
static void _unity_internal_results_synchronizer_on_row_added_dee_model_row_added (DeeModel* _sender,
                                                                            DeeModelIter* iter,
                                                                            gpointer self);
static void unity_internal_results_synchronizer_on_row_removed (UnityInternalResultsSynchronizer* self,
                                                         DeeModel* provider,
                                                         DeeModelIter* iter);
static void _unity_internal_results_synchronizer_on_row_removed_dee_model_row_removed (DeeModel* _sender,
                                                                                DeeModelIter* iter,
                                                                                gpointer self);
static void unity_internal_results_synchronizer_on_row_changed (UnityInternalResultsSynchronizer* self,
                                                         DeeModel* provider,
                                                         DeeModelIter* iter);
static void _unity_internal_results_synchronizer_on_row_changed_dee_model_row_changed (DeeModel* _sender,
                                                                                DeeModelIter* iter,
                                                                                gpointer self);
static void unity_internal_results_synchronizer_transaction_finished (UnityInternalResultsSynchronizer* self,
                                                               DeeSharedModel* model,
                                                               guint64 begin_sn,
                                                               guint64 end_sn);
static void _unity_internal_results_synchronizer_transaction_finished_dee_shared_model_end_transaction (DeeSharedModel* _sender,
                                                                                                 guint64 begin_seqnum,
                                                                                                 guint64 end_seqnum,
                                                                                                 gpointer self);
void unity_internal_results_synchronizer_disable_all_providers (UnityInternalResultsSynchronizer* self);
static void __lambda19_ (UnityInternalResultsSynchronizer* self,
                  DeeModel* provider);
static void ___lambda19__gh_func (gconstpointer key,
                           gconstpointer value,
                           gpointer self);
void unity_internal_results_synchronizer_disable_provider (UnityInternalResultsSynchronizer* self,
                                                           const gchar* scope_id);
void unity_internal_results_synchronizer_enable_provider (UnityInternalResultsSynchronizer* self,
                                                          const gchar* scope_id);
const gchar* unity_internal_results_synchronizer_get_owner_scope_id (UnityInternalResultsSynchronizer* self);
GVariant** unity_internal_results_synchronizer_prepare_row_buf (UnityInternalResultsSynchronizer* self,
                                                                DeeModel* provider,
                                                                DeeModelIter* iter,
                                                                int* result_length1);
static GVariant* _variant_new17 (const gchar* value);
static GVariant* _variant_new18 (const gchar* value);
static GVariant* _variant_new19 (const gchar* value);
UnityInternalMergeStrategy* unity_internal_results_synchronizer_get_merge_strategy (UnityInternalResultsSynchronizer* self);
DeeModelIter* unity_internal_merge_strategy_merge_result (UnityInternalMergeStrategy* self,
                                                          const gchar* source_scope_id,
                                                          DeeModel* target,
                                                          GVariant** row,
                                                          int row_length1);
void unity_internal_results_synchronizer_copy_model (UnityInternalResultsSynchronizer* self,
                                                     DeeModel* provider);
static void unity_internal_results_synchronizer_set_receiver (UnityInternalResultsSynchronizer* self,
                                                       DeeModel* value);
static void unity_internal_results_synchronizer_set_owner_scope_id (UnityInternalResultsSynchronizer* self,
                                                             const gchar* value);
void unity_internal_results_synchronizer_set_merge_strategy (UnityInternalResultsSynchronizer* self,
                                                             UnityInternalMergeStrategy* value);
static void g_cclosure_user_marshal_VOID__OBJECT_STRING (GClosure * closure,
                                                  GValue * return_value,
                                                  guint n_param_values,
                                                  const GValue * param_values,
                                                  gpointer invocation_hint,
                                                  gpointer marshal_data);
static GObject * unity_internal_results_synchronizer_constructor (GType type,
                                                           guint n_construct_properties,
                                                           GObjectConstructParam * construct_properties);
static void _g_object_unref0_ (gpointer var);
static void _g_free0_ (gpointer var);
static void _unity_internal_results_synchronizer_signal_handlers_free0_ (gpointer var);
static void unity_internal_results_synchronizer_finalize (GObject * obj);
static void _vala_unity_internal_results_synchronizer_get_property (GObject * object,
                                                             guint property_id,
                                                             GValue * value,
                                                             GParamSpec * pspec);
static void _vala_unity_internal_results_synchronizer_set_property (GObject * object,
                                                             guint property_id,
                                                             const GValue * value,
                                                             GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


UnityInternalResultsSynchronizer*
unity_internal_results_synchronizer_construct (GType object_type,
                                               DeeModel* receiver,
                                               const gchar* scope_id)
{
	UnityInternalResultsSynchronizer * self = NULL;
	g_return_val_if_fail (receiver != NULL, NULL);
	g_return_val_if_fail (scope_id != NULL, NULL);
	self = (UnityInternalResultsSynchronizer*) g_object_new (object_type, "receiver", receiver, "owner-scope-id", scope_id, NULL);
	return self;
}


UnityInternalResultsSynchronizer*
unity_internal_results_synchronizer_new (DeeModel* receiver,
                                         const gchar* scope_id)
{
	return unity_internal_results_synchronizer_construct (UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER, receiver, scope_id);
}


void
unity_internal_results_synchronizer_clear (UnityInternalResultsSynchronizer* self)
{
	guint _tmp0_;
	DeeModel* _tmp1_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_clear_seq_num;
	self->priv->_clear_seq_num = _tmp0_ + 1;
	_tmp1_ = self->priv->_receiver;
	dee_model_clear (_tmp1_);
}


static DeeModelIter*
unity_internal_results_synchronizer_real_merge_result (UnityInternalMergeStrategy* base,
                                                       const gchar* source_scope_id,
                                                       DeeModel* target,
                                                       GVariant** row,
                                                       int row_length1)
{
	UnityInternalResultsSynchronizer * self;
	DeeModelIter* result = NULL;
	DeeModelIter* _tmp0_;
	self = (UnityInternalResultsSynchronizer*) base;
	g_return_val_if_fail (source_scope_id != NULL, NULL);
	g_return_val_if_fail (target != NULL, NULL);
	_tmp0_ = dee_model_append_row (target, row);
	result = _tmp0_;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
_unity_internal_results_synchronizer_on_row_added_dee_model_row_added (DeeModel* _sender,
                                                                       DeeModelIter* iter,
                                                                       gpointer self)
{
	unity_internal_results_synchronizer_on_row_added ((UnityInternalResultsSynchronizer*) self, _sender, iter);
}


static void
_unity_internal_results_synchronizer_on_row_removed_dee_model_row_removed (DeeModel* _sender,
                                                                           DeeModelIter* iter,
                                                                           gpointer self)
{
	unity_internal_results_synchronizer_on_row_removed ((UnityInternalResultsSynchronizer*) self, _sender, iter);
}


static void
_unity_internal_results_synchronizer_on_row_changed_dee_model_row_changed (DeeModel* _sender,
                                                                           DeeModelIter* iter,
                                                                           gpointer self)
{
	unity_internal_results_synchronizer_on_row_changed ((UnityInternalResultsSynchronizer*) self, _sender, iter);
}


static gpointer
_unity_internal_results_synchronizer_signal_handlers_dup0 (gpointer self)
{
	return self ? unity_internal_results_synchronizer_signal_handlers_dup (self) : NULL;
}


static void
_unity_internal_results_synchronizer_transaction_finished_dee_shared_model_end_transaction (DeeSharedModel* _sender,
                                                                                            guint64 begin_seqnum,
                                                                                            guint64 end_seqnum,
                                                                                            gpointer self)
{
	unity_internal_results_synchronizer_transaction_finished ((UnityInternalResultsSynchronizer*) self, _sender, begin_seqnum, end_seqnum);
}


void
unity_internal_results_synchronizer_add_provider (UnityInternalResultsSynchronizer* self,
                                                  DeeModel* provider,
                                                  const gchar* scope_id)
{
	GHashTable* _tmp0_;
	GHashTable* _tmp1_;
	GHashTable* _tmp2_;
	DeeModel* _tmp3_;
	GHashTable* _tmp4_;
	gchar* _tmp5_;
	GHashTable* _tmp6_;
	DeeModelTag* _tmp7_;
	GHashTable* _tmp8_;
	DeeModelTag* _tmp9_;
	UnityInternalResultsSynchronizerSignalHandlers handlers = {0};
	gulong _tmp10_;
	gulong _tmp11_;
	gulong _tmp12_;
	GHashTable* _tmp13_;
	UnityInternalResultsSynchronizerSignalHandlers _tmp14_;
	UnityInternalResultsSynchronizerSignalHandlers* _tmp15_;
	DeeSharedModel* sm = NULL;
	DeeSharedModel* _tmp16_;
	DeeSharedModel* _tmp17_;
	GQuark _tmp19_;
	gchar* _tmp20_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (provider != NULL);
	g_return_if_fail (scope_id != NULL);
	_tmp0_ = self->priv->_providers;
	if (g_hash_table_contains (_tmp0_, provider)) {
		g_warning ("unity-synchronizer.vala:82: %s: provider[%p] was already added", "Unity.Internal.ResultsSynchronizer.add_provider", provider);
		return;
	}
	_tmp1_ = self->priv->_provider_ids;
	if (g_hash_table_contains (_tmp1_, scope_id)) {
		g_debug ("unity-synchronizer.vala:88: %s: provider for %s already registered", "Unity.Internal.ResultsSynchronizer.add_provider", scope_id);
		unity_internal_results_synchronizer_clear_provider_model (self, scope_id);
		unity_internal_results_synchronizer_remove_provider (self, scope_id);
	}
	_tmp2_ = self->priv->_providers;
	_tmp3_ = _g_object_ref0 (provider);
	g_hash_table_add (_tmp2_, _tmp3_);
	_tmp4_ = self->priv->_provider_ids;
	_tmp5_ = g_strdup (scope_id);
	g_hash_table_insert (_tmp4_, _tmp5_, provider);
	_tmp6_ = self->priv->_provider_tags;
	_tmp7_ = dee_model_register_tag (provider, NULL);
	g_hash_table_insert (_tmp6_, provider, _tmp7_);
	_tmp8_ = self->priv->_clear_seqnum_tags;
	_tmp9_ = dee_model_register_tag (provider, NULL);
	g_hash_table_insert (_tmp8_, provider, _tmp9_);
	memset (&handlers, 0, sizeof (UnityInternalResultsSynchronizerSignalHandlers));
	handlers.blocked = FALSE;
	_tmp10_ = g_signal_connect_object (provider, "row-added", (GCallback) _unity_internal_results_synchronizer_on_row_added_dee_model_row_added, self, 0);
	handlers.row_added_id = _tmp10_;
	_tmp11_ = g_signal_connect_object (provider, "row-removed", (GCallback) _unity_internal_results_synchronizer_on_row_removed_dee_model_row_removed, self, 0);
	handlers.row_removed_id = _tmp11_;
	_tmp12_ = g_signal_connect_object (provider, "row-changed", (GCallback) _unity_internal_results_synchronizer_on_row_changed_dee_model_row_changed, self, 0);
	handlers.row_changed_id = _tmp12_;
	_tmp13_ = self->priv->_provider_signal_ids;
	_tmp14_ = handlers;
	_tmp15_ = _unity_internal_results_synchronizer_signal_handlers_dup0 (&_tmp14_);
	g_hash_table_insert (_tmp13_, provider, _tmp15_);
	_tmp16_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (provider, dee_shared_model_get_type ()) ? ((DeeSharedModel*) provider) : NULL);
	sm = _tmp16_;
	_tmp17_ = sm;
	if (_tmp17_ != NULL) {
		DeeSharedModel* _tmp18_;
		_tmp18_ = sm;
		g_signal_connect_object (_tmp18_, "end-transaction", (GCallback) _unity_internal_results_synchronizer_transaction_finished_dee_shared_model_end_transaction, self, 0);
	}
	_tmp19_ = self->priv->scope_id_quark;
	_tmp20_ = g_strdup (scope_id);
	g_object_set_qdata_full ((GObject*) provider, _tmp19_, _tmp20_, g_free);
	_g_object_unref0 (sm);
}


void
unity_internal_results_synchronizer_remove_provider (UnityInternalResultsSynchronizer* self,
                                                     const gchar* scope_id)
{
	DeeModel* provider = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	DeeModel* _tmp2_;
	DeeModel* _tmp3_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (scope_id != NULL);
	_tmp0_ = self->priv->_provider_ids;
	_tmp1_ = g_hash_table_lookup (_tmp0_, scope_id);
	_tmp2_ = _g_object_ref0 ((DeeModel*) _tmp1_);
	provider = _tmp2_;
	_tmp3_ = provider;
	if (_tmp3_ != NULL) {
		GHashTable* _tmp4_;
		DeeModel* _tmp5_;
		GHashTable* _tmp6_;
		DeeModel* _tmp7_;
		UnityInternalResultsSynchronizerSignalHandlers* handlers = NULL;
		GHashTable* _tmp8_;
		DeeModel* _tmp9_;
		gconstpointer _tmp10_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp11_;
		DeeModel* _tmp12_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp13_;
		gulong _tmp14_;
		DeeModel* _tmp15_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp16_;
		gulong _tmp17_;
		DeeModel* _tmp18_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp19_;
		gulong _tmp20_;
		DeeSharedModel* sm = NULL;
		DeeModel* _tmp21_;
		DeeSharedModel* _tmp22_;
		DeeSharedModel* _tmp23_;
		GHashTable* _tmp26_;
		DeeModel* _tmp27_;
		GHashTable* _tmp28_;
		GHashTable* _tmp29_;
		DeeModel* _tmp30_;
		_tmp4_ = self->priv->_provider_tags;
		_tmp5_ = provider;
		g_hash_table_remove (_tmp4_, _tmp5_);
		_tmp6_ = self->priv->_clear_seqnum_tags;
		_tmp7_ = provider;
		g_hash_table_remove (_tmp6_, _tmp7_);
		_tmp8_ = self->priv->_provider_signal_ids;
		_tmp9_ = provider;
		_tmp10_ = g_hash_table_lookup (_tmp8_, _tmp9_);
		_tmp11_ = _unity_internal_results_synchronizer_signal_handlers_dup0 ((UnityInternalResultsSynchronizerSignalHandlers*) _tmp10_);
		handlers = _tmp11_;
		_tmp12_ = provider;
		_tmp13_ = handlers;
		_tmp14_ = (*_tmp13_).row_added_id;
		g_signal_handler_disconnect (_tmp12_, _tmp14_);
		_tmp15_ = provider;
		_tmp16_ = handlers;
		_tmp17_ = (*_tmp16_).row_removed_id;
		g_signal_handler_disconnect (_tmp15_, _tmp17_);
		_tmp18_ = provider;
		_tmp19_ = handlers;
		_tmp20_ = (*_tmp19_).row_changed_id;
		g_signal_handler_disconnect (_tmp18_, _tmp20_);
		_tmp21_ = provider;
		_tmp22_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp21_, dee_shared_model_get_type ()) ? ((DeeSharedModel*) _tmp21_) : NULL);
		sm = _tmp22_;
		_tmp23_ = sm;
		if (_tmp23_ != NULL) {
			DeeSharedModel* _tmp24_;
			guint _tmp25_;
			_tmp24_ = sm;
			g_signal_parse_name ("end-transaction", dee_shared_model_get_type (), &_tmp25_, NULL, FALSE);
			g_signal_handlers_disconnect_matched (_tmp24_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp25_, 0, NULL, (GCallback) _unity_internal_results_synchronizer_transaction_finished_dee_shared_model_end_transaction, self);
		}
		_tmp26_ = self->priv->_provider_signal_ids;
		_tmp27_ = provider;
		g_hash_table_remove (_tmp26_, _tmp27_);
		_tmp28_ = self->priv->_provider_ids;
		g_hash_table_remove (_tmp28_, scope_id);
		_tmp29_ = self->priv->_providers;
		_tmp30_ = provider;
		g_hash_table_remove (_tmp29_, _tmp30_);
		_g_object_unref0 (sm);
		_unity_internal_results_synchronizer_signal_handlers_free0 (handlers);
	}
	_g_object_unref0 (provider);
}


static void
__lambda19_ (UnityInternalResultsSynchronizer* self,
             DeeModel* provider)
{
	UnityInternalResultsSynchronizerSignalHandlers* handlers = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	UnityInternalResultsSynchronizerSignalHandlers* _tmp2_;
	gboolean _tmp3_;
	g_return_if_fail (provider != NULL);
	_tmp0_ = self->priv->_provider_signal_ids;
	_tmp1_ = g_hash_table_lookup (_tmp0_, provider);
	handlers = (UnityInternalResultsSynchronizerSignalHandlers*) _tmp1_;
	_tmp2_ = handlers;
	_tmp3_ = (*_tmp2_).blocked;
	if (_tmp3_ == FALSE) {
		UnityInternalResultsSynchronizerSignalHandlers* _tmp4_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp5_;
		gulong _tmp6_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp7_;
		gulong _tmp8_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp9_;
		gulong _tmp10_;
		_tmp4_ = handlers;
		(*_tmp4_).blocked = TRUE;
		_tmp5_ = handlers;
		_tmp6_ = (*_tmp5_).row_added_id;
		g_signal_handler_block (provider, _tmp6_);
		_tmp7_ = handlers;
		_tmp8_ = (*_tmp7_).row_removed_id;
		g_signal_handler_block (provider, _tmp8_);
		_tmp9_ = handlers;
		_tmp10_ = (*_tmp9_).row_changed_id;
		g_signal_handler_block (provider, _tmp10_);
	}
}


static void
___lambda19__gh_func (gconstpointer key,
                      gconstpointer value,
                      gpointer self)
{
	__lambda19_ ((UnityInternalResultsSynchronizer*) self, (DeeModel*) key);
}


void
unity_internal_results_synchronizer_disable_all_providers (UnityInternalResultsSynchronizer* self)
{
	GHashTable* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_providers;
	g_hash_table_foreach (_tmp0_, ___lambda19__gh_func, self);
}


void
unity_internal_results_synchronizer_disable_provider (UnityInternalResultsSynchronizer* self,
                                                      const gchar* scope_id)
{
	DeeModel* provider = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	DeeModel* _tmp2_;
	DeeModel* _tmp3_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (scope_id != NULL);
	_tmp0_ = self->priv->_provider_ids;
	_tmp1_ = g_hash_table_lookup (_tmp0_, scope_id);
	_tmp2_ = _g_object_ref0 ((DeeModel*) _tmp1_);
	provider = _tmp2_;
	_tmp3_ = provider;
	if (_tmp3_ != NULL) {
		UnityInternalResultsSynchronizerSignalHandlers* handlers = NULL;
		GHashTable* _tmp4_;
		DeeModel* _tmp5_;
		gconstpointer _tmp6_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp7_;
		gboolean _tmp8_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp9_;
		DeeModel* _tmp10_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp11_;
		gulong _tmp12_;
		DeeModel* _tmp13_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp14_;
		gulong _tmp15_;
		DeeModel* _tmp16_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp17_;
		gulong _tmp18_;
		_tmp4_ = self->priv->_provider_signal_ids;
		_tmp5_ = provider;
		_tmp6_ = g_hash_table_lookup (_tmp4_, _tmp5_);
		handlers = (UnityInternalResultsSynchronizerSignalHandlers*) _tmp6_;
		_tmp7_ = handlers;
		_tmp8_ = (*_tmp7_).blocked;
		if (_tmp8_) {
			_g_object_unref0 (provider);
			return;
		}
		_tmp9_ = handlers;
		(*_tmp9_).blocked = TRUE;
		_tmp10_ = provider;
		_tmp11_ = handlers;
		_tmp12_ = (*_tmp11_).row_added_id;
		g_signal_handler_block (_tmp10_, _tmp12_);
		_tmp13_ = provider;
		_tmp14_ = handlers;
		_tmp15_ = (*_tmp14_).row_removed_id;
		g_signal_handler_block (_tmp13_, _tmp15_);
		_tmp16_ = provider;
		_tmp17_ = handlers;
		_tmp18_ = (*_tmp17_).row_changed_id;
		g_signal_handler_block (_tmp16_, _tmp18_);
	}
	_g_object_unref0 (provider);
}


void
unity_internal_results_synchronizer_enable_provider (UnityInternalResultsSynchronizer* self,
                                                     const gchar* scope_id)
{
	DeeModel* provider = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	DeeModel* _tmp2_;
	DeeModel* _tmp3_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (scope_id != NULL);
	_tmp0_ = self->priv->_provider_ids;
	_tmp1_ = g_hash_table_lookup (_tmp0_, scope_id);
	_tmp2_ = _g_object_ref0 ((DeeModel*) _tmp1_);
	provider = _tmp2_;
	_tmp3_ = provider;
	if (_tmp3_ != NULL) {
		UnityInternalResultsSynchronizerSignalHandlers* handlers = NULL;
		GHashTable* _tmp4_;
		DeeModel* _tmp5_;
		gconstpointer _tmp6_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp7_;
		gboolean _tmp8_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp9_;
		DeeModel* _tmp10_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp11_;
		gulong _tmp12_;
		DeeModel* _tmp13_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp14_;
		gulong _tmp15_;
		DeeModel* _tmp16_;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp17_;
		gulong _tmp18_;
		_tmp4_ = self->priv->_provider_signal_ids;
		_tmp5_ = provider;
		_tmp6_ = g_hash_table_lookup (_tmp4_, _tmp5_);
		handlers = (UnityInternalResultsSynchronizerSignalHandlers*) _tmp6_;
		_tmp7_ = handlers;
		_tmp8_ = (*_tmp7_).blocked;
		if (!_tmp8_) {
			_g_object_unref0 (provider);
			return;
		}
		_tmp9_ = handlers;
		(*_tmp9_).blocked = FALSE;
		_tmp10_ = provider;
		_tmp11_ = handlers;
		_tmp12_ = (*_tmp11_).row_added_id;
		g_signal_handler_unblock (_tmp10_, _tmp12_);
		_tmp13_ = provider;
		_tmp14_ = handlers;
		_tmp15_ = (*_tmp14_).row_removed_id;
		g_signal_handler_unblock (_tmp13_, _tmp15_);
		_tmp16_ = provider;
		_tmp17_ = handlers;
		_tmp18_ = (*_tmp17_).row_changed_id;
		g_signal_handler_unblock (_tmp16_, _tmp18_);
	}
	_g_object_unref0 (provider);
}


static void
unity_internal_results_synchronizer_transaction_finished (UnityInternalResultsSynchronizer* self,
                                                          DeeSharedModel* model,
                                                          guint64 begin_sn,
                                                          guint64 end_sn)
{
	const gchar* scope_id = NULL;
	GQuark _tmp0_;
	gconstpointer _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	GHashTable* _tmp4_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (model != NULL);
	_tmp0_ = self->priv->scope_id_quark;
	_tmp1_ = g_object_get_qdata ((GObject*) model, _tmp0_);
	scope_id = (const gchar*) _tmp1_;
	_tmp2_ = self->priv->_owner_scope_id;
	_tmp3_ = scope_id;
	unity_trace_tracepoint ("changeset::scope=%s;target=%s", _tmp2_, _tmp3_);
	_tmp4_ = self->priv->_providers;
	if (g_hash_table_contains (_tmp4_, (DeeModel*) model)) {
		const gchar* _tmp5_;
		_tmp5_ = scope_id;
		g_signal_emit (self, unity_internal_results_synchronizer_signals[UNITY_INTERNAL_RESULTS_SYNCHRONIZER_TRANSACTION_COMPLETE_SIGNAL], 0, (DeeModel*) model, _tmp5_);
	}
}


static void
unity_internal_results_synchronizer_clear_provider_model (UnityInternalResultsSynchronizer* self,
                                                          const gchar* scope_id)
{
	DeeModel* provider = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	DeeModel* _tmp2_;
	DeeModel* _tmp3_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (scope_id != NULL);
	_tmp0_ = self->priv->_provider_ids;
	_tmp1_ = g_hash_table_lookup (_tmp0_, scope_id);
	_tmp2_ = _g_object_ref0 ((DeeModel*) _tmp1_);
	provider = _tmp2_;
	_tmp3_ = provider;
	if (_tmp3_ != NULL) {
		UnityInternalResultsSynchronizerSignalHandlers* handlers = NULL;
		GHashTable* _tmp4_;
		DeeModel* _tmp5_;
		gconstpointer _tmp6_;
		gboolean was_blocked = FALSE;
		UnityInternalResultsSynchronizerSignalHandlers* _tmp7_;
		gboolean _tmp8_;
		DeeModel* _tmp9_;
		gboolean _tmp10_;
		_tmp4_ = self->priv->_provider_signal_ids;
		_tmp5_ = provider;
		_tmp6_ = g_hash_table_lookup (_tmp4_, _tmp5_);
		handlers = (UnityInternalResultsSynchronizerSignalHandlers*) _tmp6_;
		_tmp7_ = handlers;
		_tmp8_ = (*_tmp7_).blocked;
		was_blocked = _tmp8_;
		unity_internal_results_synchronizer_enable_provider (self, scope_id);
		_tmp9_ = provider;
		dee_model_clear (_tmp9_);
		_tmp10_ = was_blocked;
		if (_tmp10_) {
			unity_internal_results_synchronizer_disable_provider (self, scope_id);
		}
	}
	_g_object_unref0 (provider);
}


static GVariant*
_variant_new17 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static GVariant*
_variant_new18 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static GVariant*
_variant_new19 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static gpointer
_g_variant_ref0 (gpointer self)
{
	return self ? g_variant_ref (self) : NULL;
}


GVariant**
unity_internal_results_synchronizer_prepare_row_buf (UnityInternalResultsSynchronizer* self,
                                                     DeeModel* provider,
                                                     DeeModelIter* iter,
                                                     int* result_length1)
{
	GVariant** result = NULL;
	GVariant** _tmp7_;
	gint _tmp7__length1;
	GVariant** _tmp8_;
	GVariant* scope_id_entry = NULL;
	GVariant* _tmp9_;
	GQuark _tmp10_;
	gconstpointer _tmp11_;
	GVariant* _tmp12_;
	GVariant* _tmp13_;
	GVariant* _tmp14_;
	GVariant* _tmp15_;
	GVariant* _tmp16_;
	GVariant* content_entry = NULL;
	GVariant* _tmp17_;
	GVariant** _tmp18_;
	gint _tmp18__length1;
	GVariant* _tmp19_;
	GVariant* _tmp20_;
	GVariant* _tmp21_;
	GVariant* _tmp22_;
	GVariant* _tmp23_;
	GVariant** _tmp24_;
	gint _tmp24__length1;
	const GVariantType* _tmp25_;
	const GVariantType* _tmp26_;
	GVariant* _tmp27_;
	GVariant* _tmp28_;
	GVariant** _tmp29_;
	GVariant** _tmp30_;
	gint _tmp30__length1;
	GVariant* _tmp31_;
	GVariant* _tmp32_;
	GVariant** _tmp33_;
	gint _tmp33__length1;
	GVariant** _tmp34_;
	gint _tmp34__length1;
	g_return_val_if_fail (self != NULL, NULL);
	g_return_val_if_fail (provider != NULL, NULL);
	g_return_val_if_fail (iter != NULL, NULL);
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp0_ = FALSE;
			_tmp0_ = TRUE;
			while (TRUE) {
				gint _tmp2_;
				GVariant** _tmp3_;
				gint _tmp3__length1;
				GVariant** _tmp4_;
				gint _tmp4__length1;
				gint _tmp5_;
				GVariant* _tmp6_;
				if (!_tmp0_) {
					gint _tmp1_;
					_tmp1_ = i;
					i = _tmp1_ + 1;
				}
				_tmp0_ = FALSE;
				_tmp2_ = i;
				_tmp3_ = self->priv->row_buf;
				_tmp3__length1 = self->priv->row_buf_length1;
				if (!(_tmp2_ < _tmp3__length1)) {
					break;
				}
				_tmp4_ = self->priv->row_buf;
				_tmp4__length1 = self->priv->row_buf_length1;
				_tmp5_ = i;
				_g_variant_unref0 (_tmp4_[_tmp5_]);
				_tmp4_[_tmp5_] = NULL;
				_tmp6_ = _tmp4_[_tmp5_];
			}
		}
	}
	_tmp7_ = self->priv->row_buf;
	_tmp7__length1 = self->priv->row_buf_length1;
	_tmp8_ = dee_model_get_row (provider, iter, _tmp7_);
	_tmp9_ = _variant_new17 ("scope-id");
	_tmp10_ = self->priv->scope_id_quark;
	_tmp11_ = g_object_get_qdata ((GObject*) provider, _tmp10_);
	_tmp12_ = _variant_new18 ((const gchar*) _tmp11_);
	_tmp13_ = g_variant_new_variant (_tmp12_);
	g_variant_ref_sink (_tmp13_);
	_tmp14_ = _tmp13_;
	_tmp15_ = g_variant_new_dict_entry (_tmp9_, _tmp14_);
	g_variant_ref_sink (_tmp15_);
	_tmp16_ = _tmp15_;
	_g_variant_unref0 (_tmp14_);
	_g_variant_unref0 (_tmp12_);
	_g_variant_unref0 (_tmp9_);
	scope_id_entry = _tmp16_;
	_tmp17_ = _variant_new19 ("content");
	_tmp18_ = self->priv->row_buf;
	_tmp18__length1 = self->priv->row_buf_length1;
	_tmp19_ = _tmp18_[8];
	_tmp20_ = g_variant_new_variant (_tmp19_);
	g_variant_ref_sink (_tmp20_);
	_tmp21_ = _tmp20_;
	_tmp22_ = g_variant_new_dict_entry (_tmp17_, _tmp21_);
	g_variant_ref_sink (_tmp22_);
	_tmp23_ = _tmp22_;
	_g_variant_unref0 (_tmp21_);
	_g_variant_unref0 (_tmp17_);
	content_entry = _tmp23_;
	_tmp24_ = self->priv->row_buf;
	_tmp24__length1 = self->priv->row_buf_length1;
	_tmp25_ = G_VARIANT_TYPE_VARDICT;
	_tmp26_ = g_variant_type_element (_tmp25_);
	_tmp27_ = _g_variant_ref0 (scope_id_entry);
	_tmp28_ = _g_variant_ref0 (content_entry);
	_tmp29_ = g_new0 (GVariant*, 2 + 1);
	_tmp29_[0] = _tmp27_;
	_tmp29_[1] = _tmp28_;
	_tmp30_ = _tmp29_;
	_tmp30__length1 = 2;
	_tmp31_ = g_variant_new_array (_tmp26_, _tmp30_, 2);
	g_variant_ref_sink (_tmp31_);
	_g_variant_unref0 (_tmp24_[8]);
	_tmp24_[8] = _tmp31_;
	_tmp32_ = _tmp24_[8];
	_tmp30_ = (_vala_array_free (_tmp30_, _tmp30__length1, (GDestroyNotify) g_variant_unref), NULL);
	_tmp33_ = self->priv->row_buf;
	_tmp33__length1 = self->priv->row_buf_length1;
	_tmp34_ = _tmp33_;
	_tmp34__length1 = _tmp33__length1;
	if (result_length1) {
		*result_length1 = _tmp34__length1;
	}
	result = _tmp34_;
	_g_variant_unref0 (content_entry);
	_g_variant_unref0 (scope_id_entry);
	return result;
}


static void
unity_internal_results_synchronizer_on_row_added (UnityInternalResultsSynchronizer* self,
                                                  DeeModel* provider,
                                                  DeeModelIter* iter)
{
	DeeModelIter* i = NULL;
	gint _tmp0_ = 0;
	UnityInternalMergeStrategy* _tmp1_;
	GQuark _tmp2_;
	gconstpointer _tmp3_;
	DeeModel* _tmp4_;
	GVariant** _tmp5_;
	gint _tmp5__length1;
	DeeModelIter* _tmp6_;
	DeeModelIter* _tmp7_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (provider != NULL);
	g_return_if_fail (iter != NULL);
	unity_internal_results_synchronizer_prepare_row_buf (self, provider, iter, &_tmp0_);
	_tmp1_ = self->priv->_merge_strategy;
	_tmp2_ = self->priv->scope_id_quark;
	_tmp3_ = g_object_get_qdata ((GObject*) provider, _tmp2_);
	_tmp4_ = self->priv->_receiver;
	_tmp5_ = self->priv->row_buf;
	_tmp5__length1 = self->priv->row_buf_length1;
	_tmp6_ = unity_internal_merge_strategy_merge_result (_tmp1_, (const gchar*) _tmp3_, _tmp4_, _tmp5_, _tmp5__length1);
	i = _tmp6_;
	_tmp7_ = i;
	if (_tmp7_ != NULL) {
		DeeModelTag* tag = NULL;
		GHashTable* _tmp8_;
		gconstpointer _tmp9_;
		DeeModelTag* _tmp10_;
		DeeModelIter* _tmp11_;
		DeeModelTag* rem_tag = NULL;
		GHashTable* _tmp12_;
		gconstpointer _tmp13_;
		DeeModelTag* _tmp14_;
		guint _tmp15_;
		_tmp8_ = self->priv->_provider_tags;
		_tmp9_ = g_hash_table_lookup (_tmp8_, provider);
		tag = (DeeModelTag*) _tmp9_;
		_tmp10_ = tag;
		_tmp11_ = i;
		dee_model_set_tag (provider, iter, _tmp10_, _tmp11_);
		_tmp12_ = self->priv->_clear_seqnum_tags;
		_tmp13_ = g_hash_table_lookup (_tmp12_, provider);
		rem_tag = (DeeModelTag*) _tmp13_;
		_tmp14_ = rem_tag;
		_tmp15_ = self->priv->_clear_seq_num;
		dee_model_set_tag (provider, iter, _tmp14_, (gpointer) ((guintptr) _tmp15_));
	}
}


static void
unity_internal_results_synchronizer_on_row_removed (UnityInternalResultsSynchronizer* self,
                                                    DeeModel* provider,
                                                    DeeModelIter* iter)
{
	DeeModelTag* rem_tag = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	DeeModelTag* tag = NULL;
	GHashTable* _tmp2_;
	gconstpointer _tmp3_;
	guint seq_num = 0U;
	DeeModelTag* _tmp4_;
	gconstpointer _tmp5_;
	guint _tmp6_;
	guint _tmp7_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (provider != NULL);
	g_return_if_fail (iter != NULL);
	_tmp0_ = self->priv->_clear_seqnum_tags;
	_tmp1_ = g_hash_table_lookup (_tmp0_, provider);
	rem_tag = (DeeModelTag*) _tmp1_;
	_tmp2_ = self->priv->_provider_tags;
	_tmp3_ = g_hash_table_lookup (_tmp2_, provider);
	tag = (DeeModelTag*) _tmp3_;
	_tmp4_ = rem_tag;
	_tmp5_ = dee_model_get_tag (provider, iter, _tmp4_);
	seq_num = (guint) ((guintptr) _tmp5_);
	_tmp6_ = seq_num;
	_tmp7_ = self->priv->_clear_seq_num;
	if (_tmp6_ == _tmp7_) {
		DeeModelTag* _tmp8_;
		DeeModelIter* riter = NULL;
		DeeModelTag* _tmp9_;
		gconstpointer _tmp10_;
		DeeModelIter* _tmp11_;
		_tmp8_ = rem_tag;
		dee_model_set_tag (provider, iter, _tmp8_, (gpointer) ((guintptr) ((guint) 0)));
		_tmp9_ = tag;
		_tmp10_ = dee_model_get_tag (provider, iter, _tmp9_);
		riter = (DeeModelIter*) _tmp10_;
		_tmp11_ = riter;
		if (_tmp11_ != NULL) {
			DeeModel* _tmp12_;
			DeeModelIter* _tmp13_;
			_tmp12_ = self->priv->_receiver;
			_tmp13_ = riter;
			dee_model_remove (_tmp12_, _tmp13_);
		}
	}
}


static const gchar*
string_to_string (const gchar* self)
{
	const gchar* result = NULL;
	g_return_val_if_fail (self != NULL, NULL);
	result = self;
	return result;
}


static void
unity_internal_results_synchronizer_on_row_changed (UnityInternalResultsSynchronizer* self,
                                                    DeeModel* provider,
                                                    DeeModelIter* iter)
{
	DeeModelTag* tag = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	DeeModelIter* riter = NULL;
	DeeModelTag* _tmp2_;
	gconstpointer _tmp3_;
	DeeModelIter* _tmp4_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (provider != NULL);
	g_return_if_fail (iter != NULL);
	_tmp0_ = self->priv->_provider_tags;
	_tmp1_ = g_hash_table_lookup (_tmp0_, provider);
	tag = (DeeModelTag*) _tmp1_;
	_tmp2_ = tag;
	_tmp3_ = dee_model_get_tag (provider, iter, _tmp2_);
	riter = (DeeModelIter*) _tmp3_;
	_tmp4_ = riter;
	if (_tmp4_ != NULL) {
		gint _tmp5_ = 0;
		DeeModel* _tmp6_;
		DeeModelIter* _tmp7_;
		GVariant** _tmp8_;
		gint _tmp8__length1;
		unity_internal_results_synchronizer_prepare_row_buf (self, provider, iter, &_tmp5_);
		_tmp6_ = self->priv->_receiver;
		_tmp7_ = riter;
		_tmp8_ = self->priv->row_buf;
		_tmp8__length1 = self->priv->row_buf_length1;
		dee_model_set_row (_tmp6_, _tmp7_, _tmp8_);
	} else {
		const gchar* _tmp9_;
		const gchar* _tmp10_;
		gchar* _tmp11_;
		gchar* _tmp12_;
		_tmp9_ = dee_model_get_string (provider, iter, (guint) 0);
		_tmp10_ = string_to_string (_tmp9_);
		_tmp11_ = g_strconcat ("Could not find row to change: ", _tmp10_, NULL);
		_tmp12_ = _tmp11_;
		g_warning ("unity-synchronizer.vala:277: %s", _tmp12_);
		_g_free0 (_tmp12_);
	}
}


void
unity_internal_results_synchronizer_copy_model (UnityInternalResultsSynchronizer* self,
                                                DeeModel* provider)
{
	GHashTable* _tmp0_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (provider != NULL);
	_tmp0_ = self->priv->_providers;
	if (!g_hash_table_contains (_tmp0_, provider)) {
		const gchar* scope_id = NULL;
		GQuark _tmp1_;
		gconstpointer _tmp2_;
		const gchar* _tmp3_;
		_tmp1_ = self->priv->scope_id_quark;
		_tmp2_ = g_object_get_qdata ((GObject*) provider, _tmp1_);
		scope_id = (const gchar*) _tmp2_;
		_tmp3_ = scope_id;
		g_critical ("unity-synchronizer.vala:286: Requested unknown provider model [scope-i" \
"d: %s]", _tmp3_);
	} else {
		DeeModelIter* end = NULL;
		DeeModelIter* _tmp4_;
		DeeModelIter* iter = NULL;
		DeeModelIter* _tmp5_;
		GQuark _tmp11_;
		gconstpointer _tmp12_;
		_tmp4_ = dee_model_get_last_iter (provider);
		end = _tmp4_;
		_tmp5_ = dee_model_get_first_iter (provider);
		iter = _tmp5_;
		while (TRUE) {
			DeeModelIter* _tmp6_;
			DeeModelIter* _tmp7_;
			DeeModelIter* _tmp8_;
			DeeModelIter* _tmp9_;
			DeeModelIter* _tmp10_;
			_tmp6_ = iter;
			_tmp7_ = end;
			if (!(_tmp6_ != _tmp7_)) {
				break;
			}
			_tmp8_ = iter;
			unity_internal_results_synchronizer_on_row_added (self, provider, _tmp8_);
			_tmp9_ = iter;
			_tmp10_ = dee_model_next (provider, _tmp9_);
			iter = _tmp10_;
		}
		_tmp11_ = self->priv->scope_id_quark;
		_tmp12_ = g_object_get_qdata ((GObject*) provider, _tmp11_);
		g_signal_emit (self, unity_internal_results_synchronizer_signals[UNITY_INTERNAL_RESULTS_SYNCHRONIZER_TRANSACTION_COMPLETE_SIGNAL], 0, provider, (const gchar*) _tmp12_);
	}
}


DeeModel*
unity_internal_results_synchronizer_get_receiver (UnityInternalResultsSynchronizer* self)
{
	DeeModel* result;
	DeeModel* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_receiver;
	result = _tmp0_;
	return result;
}


static void
unity_internal_results_synchronizer_set_receiver (UnityInternalResultsSynchronizer* self,
                                                  DeeModel* value)
{
	g_return_if_fail (self != NULL);
	if (unity_internal_results_synchronizer_get_receiver (self) != value) {
		self->priv->_receiver = value;
		g_object_notify_by_pspec ((GObject *) self, unity_internal_results_synchronizer_properties[UNITY_INTERNAL_RESULTS_SYNCHRONIZER_RECEIVER_PROPERTY]);
	}
}


const gchar*
unity_internal_results_synchronizer_get_owner_scope_id (UnityInternalResultsSynchronizer* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_owner_scope_id;
	result = _tmp0_;
	return result;
}


static void
unity_internal_results_synchronizer_set_owner_scope_id (UnityInternalResultsSynchronizer* self,
                                                        const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_internal_results_synchronizer_get_owner_scope_id (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_owner_scope_id);
		self->priv->_owner_scope_id = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_internal_results_synchronizer_properties[UNITY_INTERNAL_RESULTS_SYNCHRONIZER_OWNER_SCOPE_ID_PROPERTY]);
	}
}


UnityInternalMergeStrategy*
unity_internal_results_synchronizer_get_merge_strategy (UnityInternalResultsSynchronizer* self)
{
	UnityInternalMergeStrategy* result;
	UnityInternalMergeStrategy* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_merge_strategy;
	result = _tmp0_;
	return result;
}


void
unity_internal_results_synchronizer_set_merge_strategy (UnityInternalResultsSynchronizer* self,
                                                        UnityInternalMergeStrategy* value)
{
	g_return_if_fail (self != NULL);
	if (unity_internal_results_synchronizer_get_merge_strategy (self) != value) {
		UnityInternalMergeStrategy* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_merge_strategy);
		self->priv->_merge_strategy = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_internal_results_synchronizer_properties[UNITY_INTERNAL_RESULTS_SYNCHRONIZER_MERGE_STRATEGY_PROPERTY]);
	}
}


static void
g_cclosure_user_marshal_VOID__OBJECT_STRING (GClosure * closure,
                                             GValue * return_value,
                                             guint n_param_values,
                                             const GValue * param_values,
                                             gpointer invocation_hint,
                                             gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECT_STRING) (gpointer data1, gpointer arg_1, const char* arg_2, gpointer data2);
	register GMarshalFunc_VOID__OBJECT_STRING callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
	g_return_if_fail (n_param_values == 3);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_VOID__OBJECT_STRING) (marshal_data ? marshal_data : cc->callback);
	callback (data1, g_value_get_object (param_values + 1), g_value_get_string (param_values + 2), data2);
}


static void
_g_object_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_object_unref (var), NULL));
}


static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static void
_unity_internal_results_synchronizer_signal_handlers_free0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (unity_internal_results_synchronizer_signal_handlers_free (var), NULL));
}


static GObject *
unity_internal_results_synchronizer_constructor (GType type,
                                                 guint n_construct_properties,
                                                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	UnityInternalResultsSynchronizer * self;
	GHashTable* _tmp0_;
	GHashFunc _tmp1_;
	GEqualFunc _tmp2_;
	GHashTable* _tmp3_;
	GHashTable* _tmp4_;
	GHashTable* _tmp5_;
	GHashTable* _tmp6_;
	parent_class = G_OBJECT_CLASS (unity_internal_results_synchronizer_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER, UnityInternalResultsSynchronizer);
	_tmp0_ = g_hash_table_new_full (NULL, NULL, _g_object_unref0_, NULL);
	_g_hash_table_unref0 (self->priv->_providers);
	self->priv->_providers = _tmp0_;
	_tmp1_ = g_str_hash;
	_tmp2_ = g_str_equal;
	_tmp3_ = g_hash_table_new_full (_tmp1_, _tmp2_, _g_free0_, NULL);
	_g_hash_table_unref0 (self->priv->_provider_ids);
	self->priv->_provider_ids = _tmp3_;
	_tmp4_ = g_hash_table_new_full (NULL, NULL, NULL, _unity_internal_results_synchronizer_signal_handlers_free0_);
	_g_hash_table_unref0 (self->priv->_provider_signal_ids);
	self->priv->_provider_signal_ids = _tmp4_;
	_tmp5_ = g_hash_table_new_full (NULL, NULL, NULL, NULL);
	_g_hash_table_unref0 (self->priv->_provider_tags);
	self->priv->_provider_tags = _tmp5_;
	_tmp6_ = g_hash_table_new_full (NULL, NULL, NULL, NULL);
	_g_hash_table_unref0 (self->priv->_clear_seqnum_tags);
	self->priv->_clear_seqnum_tags = _tmp6_;
	unity_internal_results_synchronizer_set_merge_strategy (self, (UnityInternalMergeStrategy*) self);
	return obj;
}


static UnityInternalResultsSynchronizerSignalHandlers*
unity_internal_results_synchronizer_signal_handlers_dup (const UnityInternalResultsSynchronizerSignalHandlers* self)
{
	UnityInternalResultsSynchronizerSignalHandlers* dup;
	dup = g_new0 (UnityInternalResultsSynchronizerSignalHandlers, 1);
	memcpy (dup, self, sizeof (UnityInternalResultsSynchronizerSignalHandlers));
	return dup;
}


static void
unity_internal_results_synchronizer_signal_handlers_free (UnityInternalResultsSynchronizerSignalHandlers* self)
{
	g_free (self);
}


static GType
unity_internal_results_synchronizer_signal_handlers_get_type (void)
{
	static volatile gsize unity_internal_results_synchronizer_signal_handlers_type_id__volatile = 0;
	if (g_once_init_enter (&unity_internal_results_synchronizer_signal_handlers_type_id__volatile)) {
		GType unity_internal_results_synchronizer_signal_handlers_type_id;
		unity_internal_results_synchronizer_signal_handlers_type_id = g_boxed_type_register_static ("UnityInternalResultsSynchronizerSignalHandlers", (GBoxedCopyFunc) unity_internal_results_synchronizer_signal_handlers_dup, (GBoxedFreeFunc) unity_internal_results_synchronizer_signal_handlers_free);
		g_once_init_leave (&unity_internal_results_synchronizer_signal_handlers_type_id__volatile, unity_internal_results_synchronizer_signal_handlers_type_id);
	}
	return unity_internal_results_synchronizer_signal_handlers_type_id__volatile;
}


static void
unity_internal_results_synchronizer_class_init (UnityInternalResultsSynchronizerClass * klass)
{
	unity_internal_results_synchronizer_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityInternalResultsSynchronizerPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_internal_results_synchronizer_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_internal_results_synchronizer_set_property;
	G_OBJECT_CLASS (klass)->constructor = unity_internal_results_synchronizer_constructor;
	G_OBJECT_CLASS (klass)->finalize = unity_internal_results_synchronizer_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INTERNAL_RESULTS_SYNCHRONIZER_RECEIVER_PROPERTY, unity_internal_results_synchronizer_properties[UNITY_INTERNAL_RESULTS_SYNCHRONIZER_RECEIVER_PROPERTY] = g_param_spec_object ("receiver", "receiver", "receiver", dee_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INTERNAL_RESULTS_SYNCHRONIZER_OWNER_SCOPE_ID_PROPERTY, unity_internal_results_synchronizer_properties[UNITY_INTERNAL_RESULTS_SYNCHRONIZER_OWNER_SCOPE_ID_PROPERTY] = g_param_spec_string ("owner-scope-id", "owner-scope-id", "owner-scope-id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INTERNAL_RESULTS_SYNCHRONIZER_MERGE_STRATEGY_PROPERTY, unity_internal_results_synchronizer_properties[UNITY_INTERNAL_RESULTS_SYNCHRONIZER_MERGE_STRATEGY_PROPERTY] = g_param_spec_object ("merge-strategy", "merge-strategy", "merge-strategy", UNITY_INTERNAL_TYPE_MERGE_STRATEGY, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	unity_internal_results_synchronizer_signals[UNITY_INTERNAL_RESULTS_SYNCHRONIZER_TRANSACTION_COMPLETE_SIGNAL] = g_signal_new ("transaction-complete", UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECT_STRING, G_TYPE_NONE, 2, dee_model_get_type (), G_TYPE_STRING);
}


static void
unity_internal_results_synchronizer_unity_internal_merge_strategy_interface_init (UnityInternalMergeStrategyIface * iface)
{
	unity_internal_results_synchronizer_unity_internal_merge_strategy_parent_iface = g_type_interface_peek_parent (iface);
	iface->merge_result = (DeeModelIter* (*) (UnityInternalMergeStrategy *, const gchar*, DeeModel*, GVariant**, int)) unity_internal_results_synchronizer_real_merge_result;
}


static void
unity_internal_results_synchronizer_instance_init (UnityInternalResultsSynchronizer * self)
{
	GVariant** _tmp0_;
	self->priv = UNITY_INTERNAL_RESULTS_SYNCHRONIZER_GET_PRIVATE (self);
	_tmp0_ = g_new0 (GVariant*, 9 + 1);
	self->priv->row_buf = _tmp0_;
	self->priv->row_buf_length1 = 9;
	self->priv->_row_buf_size_ = self->priv->row_buf_length1;
	self->priv->scope_id_quark = g_quark_from_string ("scope-id");
	self->priv->_clear_seq_num = (guint) 1;
}


static void
unity_internal_results_synchronizer_finalize (GObject * obj)
{
	UnityInternalResultsSynchronizer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER, UnityInternalResultsSynchronizer);
	_g_free0 (self->priv->_owner_scope_id);
	_g_object_unref0 (self->priv->_merge_strategy);
	_g_hash_table_unref0 (self->priv->_providers);
	_g_hash_table_unref0 (self->priv->_provider_ids);
	_g_hash_table_unref0 (self->priv->_provider_signal_ids);
	_g_hash_table_unref0 (self->priv->_provider_tags);
	_g_hash_table_unref0 (self->priv->_clear_seqnum_tags);
	self->priv->row_buf = (_vala_array_free (self->priv->row_buf, self->priv->row_buf_length1, (GDestroyNotify) g_variant_unref), NULL);
	G_OBJECT_CLASS (unity_internal_results_synchronizer_parent_class)->finalize (obj);
}


GType
unity_internal_results_synchronizer_get_type (void)
{
	static volatile gsize unity_internal_results_synchronizer_type_id__volatile = 0;
	if (g_once_init_enter (&unity_internal_results_synchronizer_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityInternalResultsSynchronizerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_internal_results_synchronizer_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityInternalResultsSynchronizer), 0, (GInstanceInitFunc) unity_internal_results_synchronizer_instance_init, NULL };
		static const GInterfaceInfo unity_internal_merge_strategy_info = { (GInterfaceInitFunc) unity_internal_results_synchronizer_unity_internal_merge_strategy_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		GType unity_internal_results_synchronizer_type_id;
		unity_internal_results_synchronizer_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityInternalResultsSynchronizer", &g_define_type_info, 0);
		g_type_add_interface_static (unity_internal_results_synchronizer_type_id, UNITY_INTERNAL_TYPE_MERGE_STRATEGY, &unity_internal_merge_strategy_info);
		g_once_init_leave (&unity_internal_results_synchronizer_type_id__volatile, unity_internal_results_synchronizer_type_id);
	}
	return unity_internal_results_synchronizer_type_id__volatile;
}


static void
_vala_unity_internal_results_synchronizer_get_property (GObject * object,
                                                        guint property_id,
                                                        GValue * value,
                                                        GParamSpec * pspec)
{
	UnityInternalResultsSynchronizer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER, UnityInternalResultsSynchronizer);
	switch (property_id) {
		case UNITY_INTERNAL_RESULTS_SYNCHRONIZER_RECEIVER_PROPERTY:
		g_value_set_object (value, unity_internal_results_synchronizer_get_receiver (self));
		break;
		case UNITY_INTERNAL_RESULTS_SYNCHRONIZER_OWNER_SCOPE_ID_PROPERTY:
		g_value_set_string (value, unity_internal_results_synchronizer_get_owner_scope_id (self));
		break;
		case UNITY_INTERNAL_RESULTS_SYNCHRONIZER_MERGE_STRATEGY_PROPERTY:
		g_value_set_object (value, unity_internal_results_synchronizer_get_merge_strategy (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_internal_results_synchronizer_set_property (GObject * object,
                                                        guint property_id,
                                                        const GValue * value,
                                                        GParamSpec * pspec)
{
	UnityInternalResultsSynchronizer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER, UnityInternalResultsSynchronizer);
	switch (property_id) {
		case UNITY_INTERNAL_RESULTS_SYNCHRONIZER_RECEIVER_PROPERTY:
		unity_internal_results_synchronizer_set_receiver (self, g_value_get_object (value));
		break;
		case UNITY_INTERNAL_RESULTS_SYNCHRONIZER_OWNER_SCOPE_ID_PROPERTY:
		unity_internal_results_synchronizer_set_owner_scope_id (self, g_value_get_string (value));
		break;
		case UNITY_INTERNAL_RESULTS_SYNCHRONIZER_MERGE_STRATEGY_PROPERTY:
		unity_internal_results_synchronizer_set_merge_strategy (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



