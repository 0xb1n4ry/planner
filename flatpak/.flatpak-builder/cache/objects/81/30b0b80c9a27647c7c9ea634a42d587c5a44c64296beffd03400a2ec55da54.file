/* unity-previews.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-previews.vala, do not modify */

/*
 * Copyright (C) 2011 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Neil Jagdish Patel <neil.patel@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include "unity.h"
#include <unity-protocol.h>
#include <stdlib.h>
#include <string.h>
#include <dee.h>
#include <gio/gio.h>
#include <float.h>
#include <math.h>

enum  {
	UNITY_PREVIEW_0_PROPERTY,
	UNITY_PREVIEW_TITLE_PROPERTY,
	UNITY_PREVIEW_SUBTITLE_PROPERTY,
	UNITY_PREVIEW_DESCRIPTION_MARKUP_PROPERTY,
	UNITY_PREVIEW_IMAGE_SOURCE_URI_PROPERTY,
	UNITY_PREVIEW_IMAGE_PROPERTY,
	UNITY_PREVIEW_NUM_PROPERTIES
};
static GParamSpec* unity_preview_properties[UNITY_PREVIEW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_ptr_array_unref0(var) ((var == NULL) ? NULL : (var = (g_ptr_array_unref (var), NULL)))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
enum  {
	UNITY_PREVIEW_ACTION_0_PROPERTY,
	UNITY_PREVIEW_ACTION_ID_PROPERTY,
	UNITY_PREVIEW_ACTION_DISPLAY_NAME_PROPERTY,
	UNITY_PREVIEW_ACTION_EXTRA_TEXT_PROPERTY,
	UNITY_PREVIEW_ACTION_ICON_HINT_PROPERTY,
	UNITY_PREVIEW_ACTION_LAYOUT_HINT_PROPERTY,
	UNITY_PREVIEW_ACTION_HINTS_PROPERTY,
	UNITY_PREVIEW_ACTION_NUM_PROPERTIES
};
static GParamSpec* unity_preview_action_properties[UNITY_PREVIEW_ACTION_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _g_variant_type_free0(var) ((var == NULL) ? NULL : (var = (g_variant_type_free (var), NULL)))
enum  {
	UNITY_PREVIEW_ACTION_ACTIVATED_SIGNAL,
	UNITY_PREVIEW_ACTION_NUM_SIGNALS
};
static guint unity_preview_action_signals[UNITY_PREVIEW_ACTION_NUM_SIGNALS] = {0};
enum  {
	UNITY_INFO_HINT_0_PROPERTY,
	UNITY_INFO_HINT_ID_PROPERTY,
	UNITY_INFO_HINT_DISPLAY_NAME_PROPERTY,
	UNITY_INFO_HINT_ICON_HINT_PROPERTY,
	UNITY_INFO_HINT_DATA_PROPERTY,
	UNITY_INFO_HINT_NUM_PROPERTIES
};
static GParamSpec* unity_info_hint_properties[UNITY_INFO_HINT_NUM_PROPERTIES];
enum  {
	UNITY_GENERIC_PREVIEW_0_PROPERTY,
	UNITY_GENERIC_PREVIEW_NUM_PROPERTIES
};
static GParamSpec* unity_generic_preview_properties[UNITY_GENERIC_PREVIEW_NUM_PROPERTIES];
enum  {
	UNITY_APPLICATION_PREVIEW_0_PROPERTY,
	UNITY_APPLICATION_PREVIEW_APP_ICON_PROPERTY,
	UNITY_APPLICATION_PREVIEW_LICENSE_PROPERTY,
	UNITY_APPLICATION_PREVIEW_COPYRIGHT_PROPERTY,
	UNITY_APPLICATION_PREVIEW_LAST_UPDATE_PROPERTY,
	UNITY_APPLICATION_PREVIEW_NUM_PROPERTIES
};
static GParamSpec* unity_application_preview_properties[UNITY_APPLICATION_PREVIEW_NUM_PROPERTIES];
enum  {
	UNITY_MUSIC_PREVIEW_0_PROPERTY,
	UNITY_MUSIC_PREVIEW_NUM_PROPERTIES
};
static GParamSpec* unity_music_preview_properties[UNITY_MUSIC_PREVIEW_NUM_PROPERTIES];

#define UNITY_MUSIC_PREVIEW_TYPE_TRACK_DATA_COLUMNS (unity_music_preview_track_data_columns_get_type ())
enum  {
	UNITY_PAYMENT_PREVIEW_0_PROPERTY,
	UNITY_PAYMENT_PREVIEW_HEADER_PROPERTY,
	UNITY_PAYMENT_PREVIEW_EMAIL_PROPERTY,
	UNITY_PAYMENT_PREVIEW_PAYMENT_METHOD_PROPERTY,
	UNITY_PAYMENT_PREVIEW_PURCHASE_PRIZE_PROPERTY,
	UNITY_PAYMENT_PREVIEW_PURCHASE_TYPE_PROPERTY,
	UNITY_PAYMENT_PREVIEW_PREVIEW_TYPE_PROPERTY,
	UNITY_PAYMENT_PREVIEW_NUM_PROPERTIES
};
static GParamSpec* unity_payment_preview_properties[UNITY_PAYMENT_PREVIEW_NUM_PROPERTIES];
enum  {
	UNITY_MOVIE_PREVIEW_0_PROPERTY,
	UNITY_MOVIE_PREVIEW_YEAR_PROPERTY,
	UNITY_MOVIE_PREVIEW_NUM_PROPERTIES
};
static GParamSpec* unity_movie_preview_properties[UNITY_MOVIE_PREVIEW_NUM_PROPERTIES];
enum  {
	UNITY_SOCIAL_PREVIEW_0_PROPERTY,
	UNITY_SOCIAL_PREVIEW_AVATAR_PROPERTY,
	UNITY_SOCIAL_PREVIEW_CONTENT_PROPERTY,
	UNITY_SOCIAL_PREVIEW_SENDER_PROPERTY,
	UNITY_SOCIAL_PREVIEW_NUM_PROPERTIES
};
static GParamSpec* unity_social_preview_properties[UNITY_SOCIAL_PREVIEW_NUM_PROPERTIES];
enum  {
	UNITY_SOCIAL_PREVIEW_COMMENT_0_PROPERTY,
	UNITY_SOCIAL_PREVIEW_COMMENT_ID_PROPERTY,
	UNITY_SOCIAL_PREVIEW_COMMENT_NAME_PROPERTY,
	UNITY_SOCIAL_PREVIEW_COMMENT_TEXT_PROPERTY,
	UNITY_SOCIAL_PREVIEW_COMMENT_TIME_PROPERTY,
	UNITY_SOCIAL_PREVIEW_COMMENT_NUM_PROPERTIES
};
static GParamSpec* unity_social_preview_comment_properties[UNITY_SOCIAL_PREVIEW_COMMENT_NUM_PROPERTIES];

struct _UnityPreviewPrivate {
	UnityProtocolPreview* _raw;
	GPtrArray* _actions;
};

struct _UnityPreviewActionPrivate {
	gchar* _id;
	gchar* _display_name;
	gchar* _extra_text;
	GIcon* _icon_hint;
	UnityLayoutHint _layout_hint;
	GHashTable* hints_;
};

struct _UnityInfoHintPrivate {
	gchar* _id;
	gchar* _display_name;
	GIcon* _icon_hint;
	GVariant* _data;
};

struct _UnityApplicationPreviewPrivate {
	UnityProtocolApplicationPreview* _raw;
};

struct _UnityMusicPreviewPrivate {
	DeeSerializableModel* _track_data;
	UnityProtocolMusicPreview* _raw;
};

typedef enum  {
	UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_URI,
	UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_TRACK_NO,
	UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_TITLE,
	UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_LENGTH,
	UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_PLAY_STATE,
	UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_PROGRESS
} UnityMusicPreviewTrackDataColumns;

struct _UnityPaymentPreviewPrivate {
	UnityProtocolPaymentPreview* _raw;
};

struct _UnityMoviePreviewPrivate {
	UnityProtocolMoviePreview* _raw;
};

struct _UnitySocialPreviewPrivate {
	UnityProtocolSocialPreview* _raw;
};

struct _UnitySocialPreviewCommentPrivate {
	gchar* _id;
	gchar* _name;
	gchar* _text;
	gchar* _time;
};


static gpointer unity_preview_parent_class = NULL;
static DeeSerializableIface * unity_preview_dee_serializable_parent_iface = NULL;
static gpointer unity_preview_action_parent_class = NULL;
static DeeSerializableIface * unity_preview_action_dee_serializable_parent_iface = NULL;
static gpointer unity_info_hint_parent_class = NULL;
static gpointer unity_generic_preview_parent_class = NULL;
static gpointer unity_application_preview_parent_class = NULL;
static gpointer unity_music_preview_parent_class = NULL;
static gpointer unity_payment_preview_parent_class = NULL;
static gpointer unity_movie_preview_parent_class = NULL;
static gpointer unity_social_preview_parent_class = NULL;
static gpointer unity_social_preview_comment_parent_class = NULL;

#define UNITY_PREVIEW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_PREVIEW, UnityPreviewPrivate))
static void _g_object_unref0_ (gpointer var);
UnityProtocolPreview* unity_preview_get_raw (UnityPreview* self);
GObject* unity_preview_create_raw (UnityPreview* self);
static GObject* unity_preview_real_create_raw (UnityPreview* self);
GHashTable* unity_preview_action_get_hints_internal (UnityPreviewAction* self);
GPtrArray* unity_preview_get_actions (UnityPreview* self);
static GVariant* unity_preview_real_serialize (DeeSerializable* base);
static guint8* unity_preview_real_serialize_as (UnityAbstractPreview* base,
                                         UnitySerializationType serialize_type,
                                         int* result_length1);
static guint8* _vala_array_dup7 (guint8* self,
                          int length);
static GObject * unity_preview_constructor (GType type,
                                     guint n_construct_properties,
                                     GObjectConstructParam * construct_properties);
static void unity_preview_finalize (GObject * obj);
static void _vala_unity_preview_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec);
static void _vala_unity_preview_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec);
#define UNITY_PREVIEW_ACTION_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_PREVIEW_ACTION, UnityPreviewActionPrivate))
static void _g_free0_ (gpointer var);
static void _g_variant_unref0_ (gpointer var);
static GVariant* _variant_new20 (const gchar* value);
static GVariant* unity_preview_action_real_serialize (DeeSerializable* base);
static GVariant* _variant_new21 (const gchar* value);
static GVariant* _variant_new22 (const gchar* value);
static GVariant* _variant_new23 (guint value);
static GVariant* _variant_new24 (GHashTable* value);
static GVariant* _variant_new25 (const gchar* value);
static void g_cclosure_user_marshal_OBJECT__STRING (GClosure * closure,
                                             GValue * return_value,
                                             guint n_param_values,
                                             const GValue * param_values,
                                             gpointer invocation_hint,
                                             gpointer marshal_data);
static GObject* _unity_preview_action___lambda9_ (GVariant* data);
static GHashTable* _variant_get26 (GVariant* value);
static GObject* __unity_preview_action___lambda9__dee_serializable_parse_func (GVariant* data);
static void unity_preview_action_finalize (GObject * obj);
static void _vala_unity_preview_action_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec);
static void _vala_unity_preview_action_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec);
#define UNITY_INFO_HINT_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_INFO_HINT, UnityInfoHintPrivate))
static void unity_info_hint_finalize (GObject * obj);
static void _vala_unity_info_hint_get_property (GObject * object,
                                         guint property_id,
                                         GValue * value,
                                         GParamSpec * pspec);
static void _vala_unity_info_hint_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec);
UnityGenericPreview* unity_generic_preview_empty (void);
static GObject* unity_generic_preview_real_create_raw (UnityPreview* base);
#define UNITY_APPLICATION_PREVIEW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_APPLICATION_PREVIEW, UnityApplicationPreviewPrivate))
static GObject* unity_application_preview_real_create_raw (UnityPreview* base);
static void unity_application_preview_finalize (GObject * obj);
static void _vala_unity_application_preview_get_property (GObject * object,
                                                   guint property_id,
                                                   GValue * value,
                                                   GParamSpec * pspec);
static void _vala_unity_application_preview_set_property (GObject * object,
                                                   guint property_id,
                                                   const GValue * value,
                                                   GParamSpec * pspec);
#define UNITY_MUSIC_PREVIEW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_MUSIC_PREVIEW, UnityMusicPreviewPrivate))
static GType unity_music_preview_track_data_columns_get_type (void) G_GNUC_CONST G_GNUC_UNUSED;
static GObject* unity_music_preview_real_create_raw (UnityPreview* base);
static void unity_music_preview_init_model (UnityMusicPreview* self);
static void unity_music_preview_finalize (GObject * obj);
#define UNITY_PAYMENT_PREVIEW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_PAYMENT_PREVIEW, UnityPaymentPreviewPrivate))
static GObject* unity_payment_preview_real_create_raw (UnityPreview* base);
static void unity_payment_preview_finalize (GObject * obj);
static void _vala_unity_payment_preview_get_property (GObject * object,
                                               guint property_id,
                                               GValue * value,
                                               GParamSpec * pspec);
static void _vala_unity_payment_preview_set_property (GObject * object,
                                               guint property_id,
                                               const GValue * value,
                                               GParamSpec * pspec);
#define UNITY_MOVIE_PREVIEW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_MOVIE_PREVIEW, UnityMoviePreviewPrivate))
static GObject* unity_movie_preview_real_create_raw (UnityPreview* base);
static void unity_movie_preview_finalize (GObject * obj);
static void _vala_unity_movie_preview_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec);
static void _vala_unity_movie_preview_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec);
#define UNITY_SOCIAL_PREVIEW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_SOCIAL_PREVIEW, UnitySocialPreviewPrivate))
static GObject* unity_social_preview_real_create_raw (UnityPreview* base);
#define UNITY_SOCIAL_PREVIEW_COMMENT_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_SOCIAL_PREVIEW_TYPE_COMMENT, UnitySocialPreviewCommentPrivate))
static void unity_social_preview_comment_finalize (GObject * obj);
static void _vala_unity_social_preview_comment_get_property (GObject * object,
                                                      guint property_id,
                                                      GValue * value,
                                                      GParamSpec * pspec);
static void _vala_unity_social_preview_comment_set_property (GObject * object,
                                                      guint property_id,
                                                      const GValue * value,
                                                      GParamSpec * pspec);
static void unity_social_preview_finalize (GObject * obj);
static void _vala_unity_social_preview_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec);
static void _vala_unity_social_preview_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);


static void
_g_object_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_object_unref (var), NULL));
}


UnityProtocolPreview*
unity_preview_get_raw (UnityPreview* self)
{
	UnityProtocolPreview* result = NULL;
	UnityProtocolPreview* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	result = _tmp0_;
	return result;
}


static GObject*
unity_preview_real_create_raw (UnityPreview* self)
{
	g_critical ("Type `%s' does not implement abstract method `unity_preview_create_raw'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
	return NULL;
}


GObject*
unity_preview_create_raw (UnityPreview* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_PREVIEW_GET_CLASS (self)->create_raw (self);
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static gpointer
_g_hash_table_ref0 (gpointer self)
{
	return self ? g_hash_table_ref (self) : NULL;
}


void
unity_preview_add_action (UnityPreview* self,
                          UnityPreviewAction* action)
{
	GPtrArray* _tmp0_;
	UnityPreviewAction* _tmp1_;
	UnityProtocolPreview* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	GIcon* _tmp7_;
	GIcon* _tmp8_;
	UnityLayoutHint _tmp9_;
	UnityLayoutHint _tmp10_;
	GHashTable* _tmp11_;
	GHashTable* _tmp12_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (action != NULL);
	_tmp0_ = self->priv->_actions;
	_tmp1_ = _g_object_ref0 (action);
	g_ptr_array_add (_tmp0_, _tmp1_);
	_tmp2_ = self->priv->_raw;
	_tmp3_ = unity_preview_action_get_id (action);
	_tmp4_ = _tmp3_;
	_tmp5_ = unity_preview_action_get_display_name (action);
	_tmp6_ = _tmp5_;
	_tmp7_ = unity_preview_action_get_icon_hint (action);
	_tmp8_ = _tmp7_;
	_tmp9_ = unity_preview_action_get_layout_hint (action);
	_tmp10_ = _tmp9_;
	_tmp11_ = unity_preview_action_get_hints_internal (action);
	_tmp12_ = _g_hash_table_ref0 (_tmp11_);
	unity_protocol_preview_add_action_with_hints (_tmp2_, _tmp4_, _tmp6_, _tmp8_, (guint) _tmp10_, _tmp12_);
}


void
unity_preview_add_info (UnityPreview* self,
                        UnityInfoHint* info_hint)
{
	UnityInfoHint* sunk = NULL;
	GObject* _tmp0_;
	UnityInfoHint* _tmp1_;
	UnityProtocolPreview* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	GIcon* _tmp7_;
	GIcon* _tmp8_;
	GVariant* _tmp9_;
	GVariant* _tmp10_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (info_hint != NULL);
	_tmp0_ = g_object_ref_sink ((GObject*) info_hint);
	_tmp1_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp0_, UNITY_TYPE_INFO_HINT) ? ((UnityInfoHint*) _tmp0_) : NULL);
	sunk = _tmp1_;
	_tmp2_ = self->priv->_raw;
	_tmp3_ = unity_info_hint_get_id (sunk);
	_tmp4_ = _tmp3_;
	_tmp5_ = unity_info_hint_get_display_name (sunk);
	_tmp6_ = _tmp5_;
	_tmp7_ = unity_info_hint_get_icon_hint (sunk);
	_tmp8_ = _tmp7_;
	_tmp9_ = unity_info_hint_get_data (sunk);
	_tmp10_ = _tmp9_;
	unity_protocol_preview_add_info_hint (_tmp2_, _tmp4_, _tmp6_, _tmp8_, _tmp10_);
	_g_object_unref0 (sunk);
}


GPtrArray*
unity_preview_get_actions (UnityPreview* self)
{
	GPtrArray* result = NULL;
	GPtrArray* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_actions;
	result = _tmp0_;
	return result;
}


static GVariant*
unity_preview_real_serialize (DeeSerializable* base)
{
	UnityPreview * self;
	GVariant* result = NULL;
	UnityProtocolPreview* _tmp0_;
	GVariant* _tmp1_;
	self = (UnityPreview*) base;
	_tmp0_ = self->priv->_raw;
	_tmp1_ = dee_serializable_serialize ((DeeSerializable*) _tmp0_);
	result = _tmp1_;
	return result;
}


static guint8*
string_get_data (const gchar* self,
                 int* result_length1)
{
	guint8* result;
	guint8* res = NULL;
	gint res_length1;
	gint _res_size_;
	gint _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	guint8* _tmp3_;
	gint _tmp3__length1;
	guint8* _tmp4_;
	gint _tmp4__length1;
	g_return_val_if_fail (self != NULL, NULL);
	res = (guint8*) self;
	res_length1 = -1;
	_res_size_ = res_length1;
	_tmp0_ = strlen (self);
	_tmp1_ = _tmp0_;
	res_length1 = (gint) _tmp1_;
	_tmp2_ = res_length1;
	_tmp3_ = res;
	_tmp3__length1 = res_length1;
	_tmp4_ = _tmp3_;
	_tmp4__length1 = _tmp3__length1;
	if (result_length1) {
		*result_length1 = _tmp4__length1;
	}
	result = _tmp4_;
	return result;
}


static guint8*
_vala_array_dup7 (guint8* self,
                  int length)
{
	return g_memdup (self, length * sizeof (guint8));
}


static guint8*
unity_preview_real_serialize_as (UnityAbstractPreview* base,
                                 UnitySerializationType serialize_type,
                                 int* result_length1)
{
	UnityPreview * self;
	guint8* result = NULL;
	guint8* _tmp10_;
	guint8* _tmp11_;
	gint _tmp11__length1;
	self = (UnityPreview*) base;
	switch (serialize_type) {
		case UNITY_SERIALIZATION_TYPE_BINARY:
		{
			GVariant* serialized = NULL;
			GVariant* _tmp0_;
			guint8* _result_ = NULL;
			GVariant* _tmp1_;
			guint8* _tmp2_;
			gint _result__length1;
			gint __result__size_;
			GVariant* _tmp3_;
			guint8* _tmp4_;
			gint _tmp4__length1;
			guint8* _tmp5_;
			gint _tmp5__length1;
			_tmp0_ = dee_serializable_serialize ((DeeSerializable*) self);
			serialized = _tmp0_;
			_tmp1_ = serialized;
			_tmp2_ = g_new0 (guint8, g_variant_get_size (_tmp1_));
			_result_ = _tmp2_;
			_result__length1 = g_variant_get_size (_tmp1_);
			__result__size_ = _result__length1;
			_tmp3_ = serialized;
			_tmp4_ = _result_;
			_tmp4__length1 = _result__length1;
			g_variant_store (_tmp3_, _tmp4_);
			_tmp5_ = _result_;
			_tmp5__length1 = _result__length1;
			if (result_length1) {
				*result_length1 = _tmp5__length1;
			}
			result = _tmp5_;
			_g_variant_unref0 (serialized);
			return result;
		}
		case UNITY_SERIALIZATION_TYPE_JSON:
		{
			guint8* _tmp6_;
			gint _tmp6__length1;
			guint8* _tmp7_;
			gint _tmp7__length1;
			guint8* _tmp8_;
			gint _tmp8__length1;
			guint8* _tmp9_;
			gint _tmp9__length1;
			_tmp6_ = string_get_data ("{\"error\": \"JSON serialization not supported\"}", &_tmp6__length1);
			_tmp7_ = _tmp6_;
			_tmp7__length1 = _tmp6__length1;
			_tmp8_ = (_tmp7_ != NULL) ? _vala_array_dup7 (_tmp7_, _tmp7__length1) : ((gpointer) _tmp7_);
			_tmp8__length1 = _tmp7__length1;
			_tmp9_ = _tmp8_;
			_tmp9__length1 = _tmp8__length1;
			if (result_length1) {
				*result_length1 = _tmp9__length1;
			}
			result = _tmp9_;
			return result;
		}
		default:
		break;
	}
	_tmp10_ = g_new0 (guint8, 0);
	_tmp11_ = _tmp10_;
	_tmp11__length1 = 0;
	if (result_length1) {
		*result_length1 = _tmp11__length1;
	}
	result = _tmp11_;
	return result;
}


UnityPreview*
unity_preview_construct (GType object_type)
{
	UnityPreview * self = NULL;
	self = (UnityPreview*) unity_abstract_preview_construct (object_type);
	return self;
}


const gchar*
unity_preview_get_title (UnityPreview* self)
{
	const gchar* result;
	UnityProtocolPreview* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_preview_get_title (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_preview_set_title (UnityPreview* self,
                         const gchar* value)
{
	UnityProtocolPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_preview_set_title (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_preview_properties[UNITY_PREVIEW_TITLE_PROPERTY]);
}


const gchar*
unity_preview_get_subtitle (UnityPreview* self)
{
	const gchar* result;
	UnityProtocolPreview* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_preview_get_subtitle (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_preview_set_subtitle (UnityPreview* self,
                            const gchar* value)
{
	UnityProtocolPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_preview_set_subtitle (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_preview_properties[UNITY_PREVIEW_SUBTITLE_PROPERTY]);
}


const gchar*
unity_preview_get_description_markup (UnityPreview* self)
{
	const gchar* result;
	UnityProtocolPreview* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_preview_get_description (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_preview_set_description_markup (UnityPreview* self,
                                      const gchar* value)
{
	UnityProtocolPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_preview_set_description (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_preview_properties[UNITY_PREVIEW_DESCRIPTION_MARKUP_PROPERTY]);
}


const gchar*
unity_preview_get_image_source_uri (UnityPreview* self)
{
	const gchar* result;
	UnityProtocolPreview* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_preview_get_image_source_uri (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_preview_set_image_source_uri (UnityPreview* self,
                                    const gchar* value)
{
	UnityProtocolPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_preview_set_image_source_uri (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_preview_properties[UNITY_PREVIEW_IMAGE_SOURCE_URI_PROPERTY]);
}


GIcon*
unity_preview_get_image (UnityPreview* self)
{
	GIcon* result;
	UnityProtocolPreview* _tmp0_;
	GIcon* _tmp1_;
	GIcon* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_preview_get_image (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_preview_set_image (UnityPreview* self,
                         GIcon* value)
{
	UnityProtocolPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_preview_set_image (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_preview_properties[UNITY_PREVIEW_IMAGE_PROPERTY]);
}


static GObject *
unity_preview_constructor (GType type,
                           guint n_construct_properties,
                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	UnityPreview * self;
	GObject* _tmp0_;
	UnityProtocolPreview* _tmp1_;
	UnityProtocolPreview* _tmp2_;
	parent_class = G_OBJECT_CLASS (unity_preview_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_PREVIEW, UnityPreview);
	_tmp0_ = unity_preview_create_raw (self);
	_tmp1_ = G_TYPE_CHECK_INSTANCE_TYPE (_tmp0_, UNITY_PROTOCOL_TYPE_PREVIEW) ? ((UnityProtocolPreview*) _tmp0_) : NULL;
	if (_tmp1_ == NULL) {
		_g_object_unref0 (_tmp0_);
	}
	_g_object_unref0 (self->priv->_raw);
	self->priv->_raw = _tmp1_;
	_tmp2_ = self->priv->_raw;
	g_warn_if_fail (_tmp2_ != NULL);
	return obj;
}


static void
unity_preview_class_init (UnityPreviewClass * klass)
{
	unity_preview_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityPreviewPrivate));
	((UnityPreviewClass *) klass)->create_raw = (GObject* (*) (UnityPreview *)) unity_preview_real_create_raw;
	((UnityAbstractPreviewClass *) klass)->serialize_as = (guint8* (*) (UnityAbstractPreview *, UnitySerializationType, int*)) unity_preview_real_serialize_as;
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_preview_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_preview_set_property;
	G_OBJECT_CLASS (klass)->constructor = unity_preview_constructor;
	G_OBJECT_CLASS (klass)->finalize = unity_preview_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREVIEW_TITLE_PROPERTY, unity_preview_properties[UNITY_PREVIEW_TITLE_PROPERTY] = g_param_spec_string ("title", "title", "title", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREVIEW_SUBTITLE_PROPERTY, unity_preview_properties[UNITY_PREVIEW_SUBTITLE_PROPERTY] = g_param_spec_string ("subtitle", "subtitle", "subtitle", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREVIEW_DESCRIPTION_MARKUP_PROPERTY, unity_preview_properties[UNITY_PREVIEW_DESCRIPTION_MARKUP_PROPERTY] = g_param_spec_string ("description-markup", "description-markup", "description-markup", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	/**
	   * Source for the image.
	   *
	   * URI to the source which can be used to generate a thumbnail. (for example
	   * a .pdf file, .webm etc). If a thumbnail in appropriate resolution
	   * is already available use the "image" property instead.
	   */
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREVIEW_IMAGE_SOURCE_URI_PROPERTY, unity_preview_properties[UNITY_PREVIEW_IMAGE_SOURCE_URI_PROPERTY] = g_param_spec_string ("image-source-uri", "image-source-uri", "image-source-uri", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREVIEW_IMAGE_PROPERTY, unity_preview_properties[UNITY_PREVIEW_IMAGE_PROPERTY] = g_param_spec_object ("image", "image", "image", g_icon_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


static void
unity_preview_dee_serializable_interface_init (DeeSerializableIface * iface)
{
	unity_preview_dee_serializable_parent_iface = g_type_interface_peek_parent (iface);
	iface->serialize = (GVariant* (*) (DeeSerializable *)) unity_preview_real_serialize;
}


static void
unity_preview_instance_init (UnityPreview * self)
{
	GPtrArray* _tmp0_;
	self->priv = UNITY_PREVIEW_GET_PRIVATE (self);
	_tmp0_ = g_ptr_array_new_full ((guint) 0, _g_object_unref0_);
	self->priv->_actions = _tmp0_;
}


static void
unity_preview_finalize (GObject * obj)
{
	UnityPreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_PREVIEW, UnityPreview);
	_g_object_unref0 (self->priv->_raw);
	_g_ptr_array_unref0 (self->priv->_actions);
	G_OBJECT_CLASS (unity_preview_parent_class)->finalize (obj);
}


GType
unity_preview_get_type (void)
{
	static volatile gsize unity_preview_type_id__volatile = 0;
	if (g_once_init_enter (&unity_preview_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityPreviewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_preview_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityPreview), 0, (GInstanceInitFunc) unity_preview_instance_init, NULL };
		static const GInterfaceInfo dee_serializable_info = { (GInterfaceInitFunc) unity_preview_dee_serializable_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		GType unity_preview_type_id;
		unity_preview_type_id = g_type_register_static (UNITY_TYPE_ABSTRACT_PREVIEW, "UnityPreview", &g_define_type_info, G_TYPE_FLAG_ABSTRACT);
		g_type_add_interface_static (unity_preview_type_id, dee_serializable_get_type (), &dee_serializable_info);
		g_once_init_leave (&unity_preview_type_id__volatile, unity_preview_type_id);
	}
	return unity_preview_type_id__volatile;
}


static void
_vala_unity_preview_get_property (GObject * object,
                                  guint property_id,
                                  GValue * value,
                                  GParamSpec * pspec)
{
	UnityPreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_PREVIEW, UnityPreview);
	switch (property_id) {
		case UNITY_PREVIEW_TITLE_PROPERTY:
		g_value_set_string (value, unity_preview_get_title (self));
		break;
		case UNITY_PREVIEW_SUBTITLE_PROPERTY:
		g_value_set_string (value, unity_preview_get_subtitle (self));
		break;
		case UNITY_PREVIEW_DESCRIPTION_MARKUP_PROPERTY:
		g_value_set_string (value, unity_preview_get_description_markup (self));
		break;
		case UNITY_PREVIEW_IMAGE_SOURCE_URI_PROPERTY:
		g_value_set_string (value, unity_preview_get_image_source_uri (self));
		break;
		case UNITY_PREVIEW_IMAGE_PROPERTY:
		g_value_set_object (value, unity_preview_get_image (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_preview_set_property (GObject * object,
                                  guint property_id,
                                  const GValue * value,
                                  GParamSpec * pspec)
{
	UnityPreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_PREVIEW, UnityPreview);
	switch (property_id) {
		case UNITY_PREVIEW_TITLE_PROPERTY:
		unity_preview_set_title (self, g_value_get_string (value));
		break;
		case UNITY_PREVIEW_SUBTITLE_PROPERTY:
		unity_preview_set_subtitle (self, g_value_get_string (value));
		break;
		case UNITY_PREVIEW_DESCRIPTION_MARKUP_PROPERTY:
		unity_preview_set_description_markup (self, g_value_get_string (value));
		break;
		case UNITY_PREVIEW_IMAGE_SOURCE_URI_PROPERTY:
		unity_preview_set_image_source_uri (self, g_value_get_string (value));
		break;
		case UNITY_PREVIEW_IMAGE_PROPERTY:
		unity_preview_set_image (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


GType
unity_layout_hint_get_type (void)
{
	static volatile gsize unity_layout_hint_type_id__volatile = 0;
	if (g_once_init_enter (&unity_layout_hint_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_LAYOUT_HINT_NONE, "UNITY_LAYOUT_HINT_NONE", "none"}, {UNITY_LAYOUT_HINT_LEFT, "UNITY_LAYOUT_HINT_LEFT", "left"}, {UNITY_LAYOUT_HINT_RIGHT, "UNITY_LAYOUT_HINT_RIGHT", "right"}, {UNITY_LAYOUT_HINT_TOP, "UNITY_LAYOUT_HINT_TOP", "top"}, {UNITY_LAYOUT_HINT_BOTTOM, "UNITY_LAYOUT_HINT_BOTTOM", "bottom"}, {0, NULL, NULL}};
		GType unity_layout_hint_type_id;
		unity_layout_hint_type_id = g_enum_register_static ("UnityLayoutHint", values);
		g_once_init_leave (&unity_layout_hint_type_id__volatile, unity_layout_hint_type_id);
	}
	return unity_layout_hint_type_id__volatile;
}


static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static void
_g_variant_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_variant_unref (var), NULL));
}


UnityPreviewAction*
unity_preview_action_construct (GType object_type,
                                const gchar* id,
                                const gchar* display_name,
                                GIcon* icon_hint)
{
	UnityPreviewAction * self = NULL;
	g_return_val_if_fail (id != NULL, NULL);
	g_return_val_if_fail (display_name != NULL, NULL);
	self = (UnityPreviewAction*) g_object_new (object_type, "id", id, "display-name", display_name, "icon-hint", icon_hint, NULL);
	return self;
}


UnityPreviewAction*
unity_preview_action_new (const gchar* id,
                          const gchar* display_name,
                          GIcon* icon_hint)
{
	return unity_preview_action_construct (UNITY_TYPE_PREVIEW_ACTION, id, display_name, icon_hint);
}


UnityPreviewAction*
unity_preview_action_construct_with_layout_hint (GType object_type,
                                                 const gchar* id,
                                                 const gchar* display_name,
                                                 GIcon* icon_hint,
                                                 UnityLayoutHint layout)
{
	UnityPreviewAction * self = NULL;
	g_return_val_if_fail (id != NULL, NULL);
	g_return_val_if_fail (display_name != NULL, NULL);
	self = (UnityPreviewAction*) g_object_new (object_type, "id", id, "display-name", display_name, "icon-hint", icon_hint, "layout-hint", layout, NULL);
	return self;
}


UnityPreviewAction*
unity_preview_action_new_with_layout_hint (const gchar* id,
                                           const gchar* display_name,
                                           GIcon* icon_hint,
                                           UnityLayoutHint layout)
{
	return unity_preview_action_construct_with_layout_hint (UNITY_TYPE_PREVIEW_ACTION, id, display_name, icon_hint, layout);
}


static GVariant*
_variant_new20 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


UnityPreviewAction*
unity_preview_action_construct_with_uri (GType object_type,
                                         const gchar* uri,
                                         const gchar* display_name,
                                         GIcon* icon_hint)
{
	UnityPreviewAction * self = NULL;
	GHashTable* _tmp0_;
	GHashTable* _tmp1_;
	gchar* _tmp2_;
	GVariant* _tmp3_;
	g_return_val_if_fail (uri != NULL, NULL);
	g_return_val_if_fail (display_name != NULL, NULL);
	self = (UnityPreviewAction*) g_object_new (object_type, "id", uri, "display-name", display_name, "icon-hint", icon_hint, NULL);
	_tmp0_ = unity_preview_action_get_hints (self);
	_tmp1_ = _tmp0_;
	_tmp2_ = g_strdup ("activation-uri");
	_tmp3_ = _variant_new20 (uri);
	g_hash_table_insert (_tmp1_, _tmp2_, _tmp3_);
	return self;
}


UnityPreviewAction*
unity_preview_action_new_with_uri (const gchar* uri,
                                   const gchar* display_name,
                                   GIcon* icon_hint)
{
	return unity_preview_action_construct_with_uri (UNITY_TYPE_PREVIEW_ACTION, uri, display_name, icon_hint);
}


static GVariant*
_variant_new21 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static GVariant*
_variant_new22 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static GVariant*
_variant_new23 (guint value)
{
	return g_variant_ref_sink (g_variant_new_uint32 (value));
}


static GVariant*
_variant_new24 (GHashTable* value)
{
	GVariantBuilder _tmp17_;
	GHashTableIter _tmp18_;
	gpointer _tmp19_;
	gpointer _tmp20_;
	g_hash_table_iter_init (&_tmp18_, value);
	g_variant_builder_init (&_tmp17_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp18_, &_tmp19_, &_tmp20_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp19_;
		_value = (GVariant*) _tmp20_;
		g_variant_builder_add (&_tmp17_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	return g_variant_ref_sink (g_variant_builder_end (&_tmp17_));
}


static GVariant*
unity_preview_action_real_serialize (DeeSerializable* base)
{
	UnityPreviewAction * self;
	GVariant* result = NULL;
	GVariant* tuple[5] = {0};
	const gchar* _tmp0_;
	GVariant* _tmp1_;
	GVariant* _tmp2_;
	const gchar* _tmp3_;
	GVariant* _tmp4_;
	GVariant* _tmp5_;
	gchar* _tmp6_ = NULL;
	GIcon* _tmp7_;
	GVariant* _tmp11_;
	GVariant* _tmp12_;
	UnityLayoutHint _tmp13_;
	GVariant* _tmp14_;
	GVariant* _tmp15_;
	GHashTable* _tmp16_;
	GVariant* _tmp21_;
	GVariant* _tmp22_;
	GVariant* _tmp23_;
	self = (UnityPreviewAction*) base;
	_tmp0_ = self->priv->_id;
	_tmp1_ = _variant_new21 (_tmp0_);
	_g_variant_unref0 (tuple[0]);
	tuple[0] = _tmp1_;
	_tmp2_ = tuple[0];
	_tmp3_ = self->priv->_display_name;
	_tmp4_ = _variant_new22 (_tmp3_);
	_g_variant_unref0 (tuple[1]);
	tuple[1] = _tmp4_;
	_tmp5_ = tuple[1];
	_tmp7_ = self->priv->_icon_hint;
	if (_tmp7_ != NULL) {
		GIcon* _tmp8_;
		gchar* _tmp9_;
		_tmp8_ = self->priv->_icon_hint;
		_tmp9_ = g_icon_to_string (_tmp8_);
		_g_free0 (_tmp6_);
		_tmp6_ = _tmp9_;
	} else {
		gchar* _tmp10_;
		_tmp10_ = g_strdup ("");
		_g_free0 (_tmp6_);
		_tmp6_ = _tmp10_;
	}
	_tmp11_ = g_variant_new_string (_tmp6_);
	g_variant_ref_sink (_tmp11_);
	_g_variant_unref0 (tuple[2]);
	tuple[2] = _tmp11_;
	_tmp12_ = tuple[2];
	_tmp13_ = self->priv->_layout_hint;
	_tmp14_ = _variant_new23 ((guint) _tmp13_);
	_g_variant_unref0 (tuple[3]);
	tuple[3] = _tmp14_;
	_tmp15_ = tuple[3];
	_tmp16_ = unity_preview_action_get_hints_internal (self);
	_tmp21_ = _variant_new24 (_tmp16_);
	_g_variant_unref0 (tuple[4]);
	tuple[4] = _tmp21_;
	_tmp22_ = tuple[4];
	_tmp23_ = g_variant_new_tuple (tuple, 5);
	g_variant_ref_sink (_tmp23_);
	result = _tmp23_;
	_g_free0 (_tmp6_);
	_vala_array_destroy (tuple, 5, (GDestroyNotify) g_variant_unref);
	return result;
}


static gchar
string_get (const gchar* self,
            glong index)
{
	gchar result = '\0';
	gchar _tmp0_;
	g_return_val_if_fail (self != NULL, '\0');
	_tmp0_ = ((gchar*) self)[index];
	result = _tmp0_;
	return result;
}


static GVariant*
_variant_new25 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


GHashTable*
unity_preview_action_get_hints_internal (UnityPreviewAction* self)
{
	GHashTable* result = NULL;
	gboolean _tmp0_ = FALSE;
	const gchar* _tmp1_;
	GHashTable* _tmp8_;
	GHashTable* _tmp9_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp1_ = self->priv->_extra_text;
	if (_tmp1_ != NULL) {
		const gchar* _tmp2_;
		_tmp2_ = self->priv->_extra_text;
		_tmp0_ = string_get (_tmp2_, (glong) 0) != '\0';
	} else {
		_tmp0_ = FALSE;
	}
	if (_tmp0_) {
		GHashTable* _tmp3_;
		GHashTable* _tmp4_;
		gchar* _tmp5_;
		const gchar* _tmp6_;
		GVariant* _tmp7_;
		_tmp3_ = unity_preview_action_get_hints (self);
		_tmp4_ = _tmp3_;
		_tmp5_ = g_strdup ("extra-text");
		_tmp6_ = self->priv->_extra_text;
		_tmp7_ = _variant_new25 (_tmp6_);
		g_hash_table_insert (_tmp4_, _tmp5_, _tmp7_);
	}
	_tmp8_ = unity_preview_action_get_hints (self);
	_tmp9_ = _tmp8_;
	result = _tmp9_;
	return result;
}


const gchar*
unity_preview_action_get_id (UnityPreviewAction* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_id;
	result = _tmp0_;
	return result;
}


static void
unity_preview_action_set_id (UnityPreviewAction* self,
                             const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_preview_action_get_id (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_id);
		self->priv->_id = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_preview_action_properties[UNITY_PREVIEW_ACTION_ID_PROPERTY]);
	}
}


const gchar*
unity_preview_action_get_display_name (UnityPreviewAction* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_display_name;
	result = _tmp0_;
	return result;
}


static void
unity_preview_action_set_display_name (UnityPreviewAction* self,
                                       const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_preview_action_get_display_name (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_display_name);
		self->priv->_display_name = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_preview_action_properties[UNITY_PREVIEW_ACTION_DISPLAY_NAME_PROPERTY]);
	}
}


const gchar*
unity_preview_action_get_extra_text (UnityPreviewAction* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_extra_text;
	result = _tmp0_;
	return result;
}


void
unity_preview_action_set_extra_text (UnityPreviewAction* self,
                                     const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_preview_action_get_extra_text (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_extra_text);
		self->priv->_extra_text = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_preview_action_properties[UNITY_PREVIEW_ACTION_EXTRA_TEXT_PROPERTY]);
	}
}


GIcon*
unity_preview_action_get_icon_hint (UnityPreviewAction* self)
{
	GIcon* result;
	GIcon* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_icon_hint;
	result = _tmp0_;
	return result;
}


static void
unity_preview_action_set_icon_hint (UnityPreviewAction* self,
                                    GIcon* value)
{
	g_return_if_fail (self != NULL);
	if (unity_preview_action_get_icon_hint (self) != value) {
		GIcon* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_icon_hint);
		self->priv->_icon_hint = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_preview_action_properties[UNITY_PREVIEW_ACTION_ICON_HINT_PROPERTY]);
	}
}


UnityLayoutHint
unity_preview_action_get_layout_hint (UnityPreviewAction* self)
{
	UnityLayoutHint result;
	UnityLayoutHint _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->priv->_layout_hint;
	result = _tmp0_;
	return result;
}


static void
unity_preview_action_set_layout_hint (UnityPreviewAction* self,
                                      UnityLayoutHint value)
{
	g_return_if_fail (self != NULL);
	if (unity_preview_action_get_layout_hint (self) != value) {
		self->priv->_layout_hint = value;
		g_object_notify_by_pspec ((GObject *) self, unity_preview_action_properties[UNITY_PREVIEW_ACTION_LAYOUT_HINT_PROPERTY]);
	}
}


GHashTable*
unity_preview_action_get_hints (UnityPreviewAction* self)
{
	GHashTable* result;
	GHashTable* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->hints_;
	result = _tmp0_;
	return result;
}


static void
g_cclosure_user_marshal_OBJECT__STRING (GClosure * closure,
                                        GValue * return_value,
                                        guint n_param_values,
                                        const GValue * param_values,
                                        gpointer invocation_hint,
                                        gpointer marshal_data)
{
	typedef gpointer (*GMarshalFunc_OBJECT__STRING) (gpointer data1, const char* arg_1, gpointer data2);
	register GMarshalFunc_OBJECT__STRING callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	gpointer v_return;
	cc = (GCClosure *) closure;
	g_return_if_fail (return_value != NULL);
	g_return_if_fail (n_param_values == 2);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_OBJECT__STRING) (marshal_data ? marshal_data : cc->callback);
	v_return = callback (data1, g_value_get_string (param_values + 1), data2);
	g_value_take_object (return_value, v_return);
}


static GHashTable*
_variant_get26 (GVariant* value)
{
	GHashTable* _tmp28_;
	GVariantIter _tmp29_;
	GVariant* _tmp30_;
	GVariant* _tmp31_;
	_tmp28_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
	g_variant_iter_init (&_tmp29_, value);
	while (g_variant_iter_loop (&_tmp29_, "{?*}", &_tmp30_, &_tmp31_)) {
		g_hash_table_insert (_tmp28_, g_variant_dup_string (_tmp30_, NULL), g_variant_get_variant (_tmp31_));
	}
	return _tmp28_;
}


static GObject*
_unity_preview_action___lambda9_ (GVariant* data)
{
	GObject* result = NULL;
	const gchar* icon_hint = NULL;
	GVariant* _tmp0_;
	GVariant* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	GIcon* icon = NULL;
	gboolean _tmp4_ = FALSE;
	const gchar* _tmp5_;
	UnityPreviewAction* _result_ = NULL;
	GVariant* _tmp13_;
	GVariant* _tmp14_;
	const gchar* _tmp15_;
	GVariant* _tmp16_;
	GVariant* _tmp17_;
	const gchar* _tmp18_;
	GIcon* _tmp19_;
	GVariant* _tmp20_;
	GVariant* _tmp21_;
	UnityPreviewAction* _tmp22_;
	UnityPreviewAction* _tmp23_;
	UnityPreviewAction* _tmp24_;
	GVariant* _tmp25_;
	GVariant* _tmp26_;
	GHashTable* _tmp27_;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (data != NULL, NULL);
	_tmp0_ = g_variant_get_child_value (data, (gsize) 2);
	_tmp1_ = _tmp0_;
	_tmp2_ = g_variant_get_string (_tmp1_, NULL);
	_tmp3_ = _tmp2_;
	_g_variant_unref0 (_tmp1_);
	icon_hint = _tmp3_;
	icon = NULL;
	_tmp5_ = icon_hint;
	if (_tmp5_ != NULL) {
		const gchar* _tmp6_;
		_tmp6_ = icon_hint;
		_tmp4_ = g_strcmp0 (_tmp6_, "") != 0;
	} else {
		_tmp4_ = FALSE;
	}
	if (_tmp4_) {
		{
			GIcon* _tmp7_ = NULL;
			const gchar* _tmp8_;
			GIcon* _tmp9_;
			GIcon* _tmp10_;
			_tmp8_ = icon_hint;
			_tmp9_ = g_icon_new_for_string (_tmp8_, &_inner_error_);
			_tmp7_ = _tmp9_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				goto __catch19_g_error;
			}
			_tmp10_ = _tmp7_;
			_tmp7_ = NULL;
			_g_object_unref0 (icon);
			icon = _tmp10_;
			_g_object_unref0 (_tmp7_);
		}
		goto __finally19;
		__catch19_g_error:
		{
			GError* err = NULL;
			GError* _tmp11_;
			const gchar* _tmp12_;
			err = _inner_error_;
			_inner_error_ = NULL;
			_tmp11_ = err;
			_tmp12_ = _tmp11_->message;
			g_warning ("unity-previews.vala:211: Failed to deserialize GIcon: %s", _tmp12_);
			_g_error_free0 (err);
		}
		__finally19:
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			_g_object_unref0 (icon);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return NULL;
		}
	}
	_tmp13_ = g_variant_get_child_value (data, (gsize) 0);
	_tmp14_ = _tmp13_;
	_tmp15_ = g_variant_get_string (_tmp14_, NULL);
	_tmp16_ = g_variant_get_child_value (data, (gsize) 1);
	_tmp17_ = _tmp16_;
	_tmp18_ = g_variant_get_string (_tmp17_, NULL);
	_tmp19_ = icon;
	_tmp20_ = g_variant_get_child_value (data, (gsize) 3);
	_tmp21_ = _tmp20_;
	_tmp22_ = unity_preview_action_new_with_layout_hint (_tmp15_, _tmp18_, _tmp19_, (UnityLayoutHint) g_variant_get_uint32 (_tmp21_));
	_tmp23_ = _tmp22_;
	_g_variant_unref0 (_tmp21_);
	_g_variant_unref0 (_tmp17_);
	_g_variant_unref0 (_tmp14_);
	_result_ = _tmp23_;
	_tmp24_ = _result_;
	_tmp25_ = g_variant_get_child_value (data, (gsize) 4);
	_tmp26_ = _tmp25_;
	_tmp27_ = _variant_get26 (_tmp26_);
	_g_hash_table_unref0 (_tmp24_->priv->hints_);
	_tmp24_->priv->hints_ = _tmp27_;
	_g_variant_unref0 (_tmp26_);
	result = (GObject*) _result_;
	_g_object_unref0 (icon);
	return result;
}


static GObject*
__unity_preview_action___lambda9__dee_serializable_parse_func (GVariant* data)
{
	GObject* result;
	result = _unity_preview_action___lambda9_ (data);
	return result;
}


static void
unity_preview_action_class_init (UnityPreviewActionClass * klass)
{
	GVariantType* _tmp0_;
	GVariantType* _tmp1_;
	unity_preview_action_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityPreviewActionPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_preview_action_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_preview_action_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_preview_action_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREVIEW_ACTION_ID_PROPERTY, unity_preview_action_properties[UNITY_PREVIEW_ACTION_ID_PROPERTY] = g_param_spec_string ("id", "id", "id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREVIEW_ACTION_DISPLAY_NAME_PROPERTY, unity_preview_action_properties[UNITY_PREVIEW_ACTION_DISPLAY_NAME_PROPERTY] = g_param_spec_string ("display-name", "display-name", "display-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREVIEW_ACTION_EXTRA_TEXT_PROPERTY, unity_preview_action_properties[UNITY_PREVIEW_ACTION_EXTRA_TEXT_PROPERTY] = g_param_spec_string ("extra-text", "extra-text", "extra-text", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREVIEW_ACTION_ICON_HINT_PROPERTY, unity_preview_action_properties[UNITY_PREVIEW_ACTION_ICON_HINT_PROPERTY] = g_param_spec_object ("icon-hint", "icon-hint", "icon-hint", g_icon_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREVIEW_ACTION_LAYOUT_HINT_PROPERTY, unity_preview_action_properties[UNITY_PREVIEW_ACTION_LAYOUT_HINT_PROPERTY] = g_param_spec_enum ("layout-hint", "layout-hint", "layout-hint", UNITY_TYPE_LAYOUT_HINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREVIEW_ACTION_HINTS_PROPERTY, unity_preview_action_properties[UNITY_PREVIEW_ACTION_HINTS_PROPERTY] = g_param_spec_boxed ("hints", "hints", "hints", G_TYPE_HASH_TABLE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	unity_preview_action_signals[UNITY_PREVIEW_ACTION_ACTIVATED_SIGNAL] = g_signal_new ("activated", UNITY_TYPE_PREVIEW_ACTION, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_OBJECT__STRING, UNITY_TYPE_ACTIVATION_RESPONSE, 1, G_TYPE_STRING);
	_tmp0_ = g_variant_type_new ("(sssua{sv})");
	_tmp1_ = _tmp0_;
	dee_serializable_register_parser (UNITY_TYPE_PREVIEW_ACTION, _tmp1_, __unity_preview_action___lambda9__dee_serializable_parse_func);
	_g_variant_type_free0 (_tmp1_);
}


static void
unity_preview_action_dee_serializable_interface_init (DeeSerializableIface * iface)
{
	unity_preview_action_dee_serializable_parent_iface = g_type_interface_peek_parent (iface);
	iface->serialize = (GVariant* (*) (DeeSerializable *)) unity_preview_action_real_serialize;
}


static void
unity_preview_action_instance_init (UnityPreviewAction * self)
{
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	self->priv = UNITY_PREVIEW_ACTION_GET_PRIVATE (self);
	_tmp0_ = g_str_hash;
	_tmp1_ = g_str_equal;
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, _g_variant_unref0_);
	self->priv->hints_ = _tmp2_;
}


static void
unity_preview_action_finalize (GObject * obj)
{
	UnityPreviewAction * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_PREVIEW_ACTION, UnityPreviewAction);
	_g_free0 (self->priv->_id);
	_g_free0 (self->priv->_display_name);
	_g_free0 (self->priv->_extra_text);
	_g_object_unref0 (self->priv->_icon_hint);
	_g_hash_table_unref0 (self->priv->hints_);
	G_OBJECT_CLASS (unity_preview_action_parent_class)->finalize (obj);
}


GType
unity_preview_action_get_type (void)
{
	static volatile gsize unity_preview_action_type_id__volatile = 0;
	if (g_once_init_enter (&unity_preview_action_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityPreviewActionClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_preview_action_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityPreviewAction), 0, (GInstanceInitFunc) unity_preview_action_instance_init, NULL };
		static const GInterfaceInfo dee_serializable_info = { (GInterfaceInitFunc) unity_preview_action_dee_serializable_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		GType unity_preview_action_type_id;
		unity_preview_action_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityPreviewAction", &g_define_type_info, 0);
		g_type_add_interface_static (unity_preview_action_type_id, dee_serializable_get_type (), &dee_serializable_info);
		g_once_init_leave (&unity_preview_action_type_id__volatile, unity_preview_action_type_id);
	}
	return unity_preview_action_type_id__volatile;
}


static void
_vala_unity_preview_action_get_property (GObject * object,
                                         guint property_id,
                                         GValue * value,
                                         GParamSpec * pspec)
{
	UnityPreviewAction * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_PREVIEW_ACTION, UnityPreviewAction);
	switch (property_id) {
		case UNITY_PREVIEW_ACTION_ID_PROPERTY:
		g_value_set_string (value, unity_preview_action_get_id (self));
		break;
		case UNITY_PREVIEW_ACTION_DISPLAY_NAME_PROPERTY:
		g_value_set_string (value, unity_preview_action_get_display_name (self));
		break;
		case UNITY_PREVIEW_ACTION_EXTRA_TEXT_PROPERTY:
		g_value_set_string (value, unity_preview_action_get_extra_text (self));
		break;
		case UNITY_PREVIEW_ACTION_ICON_HINT_PROPERTY:
		g_value_set_object (value, unity_preview_action_get_icon_hint (self));
		break;
		case UNITY_PREVIEW_ACTION_LAYOUT_HINT_PROPERTY:
		g_value_set_enum (value, unity_preview_action_get_layout_hint (self));
		break;
		case UNITY_PREVIEW_ACTION_HINTS_PROPERTY:
		g_value_set_boxed (value, unity_preview_action_get_hints (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_preview_action_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec)
{
	UnityPreviewAction * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_PREVIEW_ACTION, UnityPreviewAction);
	switch (property_id) {
		case UNITY_PREVIEW_ACTION_ID_PROPERTY:
		unity_preview_action_set_id (self, g_value_get_string (value));
		break;
		case UNITY_PREVIEW_ACTION_DISPLAY_NAME_PROPERTY:
		unity_preview_action_set_display_name (self, g_value_get_string (value));
		break;
		case UNITY_PREVIEW_ACTION_EXTRA_TEXT_PROPERTY:
		unity_preview_action_set_extra_text (self, g_value_get_string (value));
		break;
		case UNITY_PREVIEW_ACTION_ICON_HINT_PROPERTY:
		unity_preview_action_set_icon_hint (self, g_value_get_object (value));
		break;
		case UNITY_PREVIEW_ACTION_LAYOUT_HINT_PROPERTY:
		unity_preview_action_set_layout_hint (self, g_value_get_enum (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


UnityInfoHint*
unity_info_hint_construct (GType object_type,
                           const gchar* id,
                           const gchar* display_name,
                           GIcon* icon_hint,
                           const gchar* data)
{
	UnityInfoHint * self = NULL;
	GVariant* _tmp0_;
	GVariant* _tmp1_;
	g_return_val_if_fail (id != NULL, NULL);
	g_return_val_if_fail (display_name != NULL, NULL);
	g_return_val_if_fail (data != NULL, NULL);
	_tmp0_ = g_variant_new_string (data);
	g_variant_ref_sink (_tmp0_);
	g_variant_ref_sink (_tmp0_);
	_tmp1_ = _tmp0_;
	self = (UnityInfoHint*) g_object_new (object_type, "id", id, "display-name", display_name, "icon-hint", icon_hint, "data", _tmp1_, NULL);
	_g_variant_unref0 (_tmp1_);
	return self;
}


UnityInfoHint*
unity_info_hint_new (const gchar* id,
                     const gchar* display_name,
                     GIcon* icon_hint,
                     const gchar* data)
{
	return unity_info_hint_construct (UNITY_TYPE_INFO_HINT, id, display_name, icon_hint, data);
}


UnityInfoHint*
unity_info_hint_construct_with_variant (GType object_type,
                                        const gchar* id,
                                        const gchar* display_name,
                                        GIcon* icon_hint,
                                        GVariant* data)
{
	UnityInfoHint * self = NULL;
	g_return_val_if_fail (id != NULL, NULL);
	g_return_val_if_fail (display_name != NULL, NULL);
	g_return_val_if_fail (data != NULL, NULL);
	self = (UnityInfoHint*) g_object_new (object_type, "id", id, "display-name", display_name, "icon-hint", icon_hint, "data", data, NULL);
	return self;
}


UnityInfoHint*
unity_info_hint_new_with_variant (const gchar* id,
                                  const gchar* display_name,
                                  GIcon* icon_hint,
                                  GVariant* data)
{
	return unity_info_hint_construct_with_variant (UNITY_TYPE_INFO_HINT, id, display_name, icon_hint, data);
}


const gchar*
unity_info_hint_get_id (UnityInfoHint* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_id;
	result = _tmp0_;
	return result;
}


static void
unity_info_hint_set_id (UnityInfoHint* self,
                        const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_info_hint_get_id (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_id);
		self->priv->_id = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_info_hint_properties[UNITY_INFO_HINT_ID_PROPERTY]);
	}
}


const gchar*
unity_info_hint_get_display_name (UnityInfoHint* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_display_name;
	result = _tmp0_;
	return result;
}


static void
unity_info_hint_set_display_name (UnityInfoHint* self,
                                  const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_info_hint_get_display_name (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_display_name);
		self->priv->_display_name = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_info_hint_properties[UNITY_INFO_HINT_DISPLAY_NAME_PROPERTY]);
	}
}


GIcon*
unity_info_hint_get_icon_hint (UnityInfoHint* self)
{
	GIcon* result;
	GIcon* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_icon_hint;
	result = _tmp0_;
	return result;
}


static void
unity_info_hint_set_icon_hint (UnityInfoHint* self,
                               GIcon* value)
{
	g_return_if_fail (self != NULL);
	if (unity_info_hint_get_icon_hint (self) != value) {
		GIcon* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_icon_hint);
		self->priv->_icon_hint = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_info_hint_properties[UNITY_INFO_HINT_ICON_HINT_PROPERTY]);
	}
}


GVariant*
unity_info_hint_get_data (UnityInfoHint* self)
{
	GVariant* result;
	GVariant* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_data;
	result = _tmp0_;
	return result;
}


static gpointer
_g_variant_ref0 (gpointer self)
{
	return self ? g_variant_ref (self) : NULL;
}


static void
unity_info_hint_set_data (UnityInfoHint* self,
                          GVariant* value)
{
	g_return_if_fail (self != NULL);
	if (unity_info_hint_get_data (self) != value) {
		GVariant* _tmp0_;
		_tmp0_ = _g_variant_ref0 (value);
		_g_variant_unref0 (self->priv->_data);
		self->priv->_data = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_info_hint_properties[UNITY_INFO_HINT_DATA_PROPERTY]);
	}
}


static void
unity_info_hint_class_init (UnityInfoHintClass * klass)
{
	unity_info_hint_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityInfoHintPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_info_hint_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_info_hint_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_info_hint_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INFO_HINT_ID_PROPERTY, unity_info_hint_properties[UNITY_INFO_HINT_ID_PROPERTY] = g_param_spec_string ("id", "id", "id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INFO_HINT_DISPLAY_NAME_PROPERTY, unity_info_hint_properties[UNITY_INFO_HINT_DISPLAY_NAME_PROPERTY] = g_param_spec_string ("display-name", "display-name", "display-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INFO_HINT_ICON_HINT_PROPERTY, unity_info_hint_properties[UNITY_INFO_HINT_ICON_HINT_PROPERTY] = g_param_spec_object ("icon-hint", "icon-hint", "icon-hint", g_icon_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INFO_HINT_DATA_PROPERTY, unity_info_hint_properties[UNITY_INFO_HINT_DATA_PROPERTY] = g_param_spec_variant ("data", "data", "data", G_VARIANT_TYPE_ANY, NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
}


static void
unity_info_hint_instance_init (UnityInfoHint * self)
{
	self->priv = UNITY_INFO_HINT_GET_PRIVATE (self);
}


static void
unity_info_hint_finalize (GObject * obj)
{
	UnityInfoHint * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_INFO_HINT, UnityInfoHint);
	_g_free0 (self->priv->_id);
	_g_free0 (self->priv->_display_name);
	_g_object_unref0 (self->priv->_icon_hint);
	_g_variant_unref0 (self->priv->_data);
	G_OBJECT_CLASS (unity_info_hint_parent_class)->finalize (obj);
}


GType
unity_info_hint_get_type (void)
{
	static volatile gsize unity_info_hint_type_id__volatile = 0;
	if (g_once_init_enter (&unity_info_hint_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityInfoHintClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_info_hint_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityInfoHint), 0, (GInstanceInitFunc) unity_info_hint_instance_init, NULL };
		GType unity_info_hint_type_id;
		unity_info_hint_type_id = g_type_register_static (G_TYPE_INITIALLY_UNOWNED, "UnityInfoHint", &g_define_type_info, 0);
		g_once_init_leave (&unity_info_hint_type_id__volatile, unity_info_hint_type_id);
	}
	return unity_info_hint_type_id__volatile;
}


static void
_vala_unity_info_hint_get_property (GObject * object,
                                    guint property_id,
                                    GValue * value,
                                    GParamSpec * pspec)
{
	UnityInfoHint * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_INFO_HINT, UnityInfoHint);
	switch (property_id) {
		case UNITY_INFO_HINT_ID_PROPERTY:
		g_value_set_string (value, unity_info_hint_get_id (self));
		break;
		case UNITY_INFO_HINT_DISPLAY_NAME_PROPERTY:
		g_value_set_string (value, unity_info_hint_get_display_name (self));
		break;
		case UNITY_INFO_HINT_ICON_HINT_PROPERTY:
		g_value_set_object (value, unity_info_hint_get_icon_hint (self));
		break;
		case UNITY_INFO_HINT_DATA_PROPERTY:
		g_value_set_variant (value, unity_info_hint_get_data (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_info_hint_set_property (GObject * object,
                                    guint property_id,
                                    const GValue * value,
                                    GParamSpec * pspec)
{
	UnityInfoHint * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_INFO_HINT, UnityInfoHint);
	switch (property_id) {
		case UNITY_INFO_HINT_ID_PROPERTY:
		unity_info_hint_set_id (self, g_value_get_string (value));
		break;
		case UNITY_INFO_HINT_DISPLAY_NAME_PROPERTY:
		unity_info_hint_set_display_name (self, g_value_get_string (value));
		break;
		case UNITY_INFO_HINT_ICON_HINT_PROPERTY:
		unity_info_hint_set_icon_hint (self, g_value_get_object (value));
		break;
		case UNITY_INFO_HINT_DATA_PROPERTY:
		unity_info_hint_set_data (self, g_value_get_variant (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


UnityGenericPreview*
unity_generic_preview_construct (GType object_type,
                                 const gchar* title,
                                 const gchar* description,
                                 GIcon* image)
{
	UnityGenericPreview * self = NULL;
	g_return_val_if_fail (title != NULL, NULL);
	g_return_val_if_fail (description != NULL, NULL);
	self = (UnityGenericPreview*) g_object_new (object_type, "title", title, "image", image, "description-markup", description, NULL);
	return self;
}


UnityGenericPreview*
unity_generic_preview_new (const gchar* title,
                           const gchar* description,
                           GIcon* image)
{
	return unity_generic_preview_construct (UNITY_TYPE_GENERIC_PREVIEW, title, description, image);
}


UnityGenericPreview*
unity_generic_preview_empty (void)
{
	UnityGenericPreview* result = NULL;
	UnityGenericPreview* preview = NULL;
	UnityGenericPreview* _tmp0_;
	UnityProtocolPreview* _tmp1_;
	_tmp0_ = unity_generic_preview_new ("", "", NULL);
	preview = _tmp0_;
	_tmp1_ = unity_preview_get_raw ((UnityPreview*) preview);
	unity_protocol_preview_set_no_details (_tmp1_, TRUE);
	result = preview;
	return result;
}


static GObject*
unity_generic_preview_real_create_raw (UnityPreview* base)
{
	UnityGenericPreview * self;
	GObject* result = NULL;
	UnityProtocolGenericPreview* _tmp0_;
	self = (UnityGenericPreview*) base;
	_tmp0_ = unity_protocol_generic_preview_new ();
	result = (GObject*) _tmp0_;
	return result;
}


static void
unity_generic_preview_class_init (UnityGenericPreviewClass * klass)
{
	unity_generic_preview_parent_class = g_type_class_peek_parent (klass);
	((UnityPreviewClass *) klass)->create_raw = (GObject* (*) (UnityPreview *)) unity_generic_preview_real_create_raw;
}


static void
unity_generic_preview_instance_init (UnityGenericPreview * self)
{
}


GType
unity_generic_preview_get_type (void)
{
	static volatile gsize unity_generic_preview_type_id__volatile = 0;
	if (g_once_init_enter (&unity_generic_preview_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityGenericPreviewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_generic_preview_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityGenericPreview), 0, (GInstanceInitFunc) unity_generic_preview_instance_init, NULL };
		GType unity_generic_preview_type_id;
		unity_generic_preview_type_id = g_type_register_static (UNITY_TYPE_PREVIEW, "UnityGenericPreview", &g_define_type_info, 0);
		g_once_init_leave (&unity_generic_preview_type_id__volatile, unity_generic_preview_type_id);
	}
	return unity_generic_preview_type_id__volatile;
}


UnityApplicationPreview*
unity_application_preview_construct (GType object_type,
                                     const gchar* title,
                                     const gchar* subtitle,
                                     const gchar* description,
                                     GIcon* icon,
                                     GIcon* screenshot)
{
	UnityApplicationPreview * self = NULL;
	g_return_val_if_fail (title != NULL, NULL);
	g_return_val_if_fail (subtitle != NULL, NULL);
	g_return_val_if_fail (description != NULL, NULL);
	self = (UnityApplicationPreview*) g_object_new (object_type, "title", title, "subtitle", subtitle, "image", screenshot, "description-markup", description, "app-icon", icon, NULL);
	return self;
}


UnityApplicationPreview*
unity_application_preview_new (const gchar* title,
                               const gchar* subtitle,
                               const gchar* description,
                               GIcon* icon,
                               GIcon* screenshot)
{
	return unity_application_preview_construct (UNITY_TYPE_APPLICATION_PREVIEW, title, subtitle, description, icon, screenshot);
}


void
unity_application_preview_set_rating (UnityApplicationPreview* self,
                                      gfloat rating,
                                      guint num_ratings)
{
	UnityProtocolApplicationPreview* _tmp0_;
	UnityProtocolApplicationPreview* _tmp1_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_application_preview_set_rating (_tmp0_, rating);
	_tmp1_ = self->priv->_raw;
	unity_protocol_application_preview_set_num_ratings (_tmp1_, num_ratings);
}


static GObject*
unity_application_preview_real_create_raw (UnityPreview* base)
{
	UnityApplicationPreview * self;
	GObject* result = NULL;
	UnityProtocolApplicationPreview* raw = NULL;
	UnityProtocolApplicationPreview* _tmp0_;
	UnityProtocolApplicationPreview* _tmp1_;
	GObject* _tmp2_;
	self = (UnityApplicationPreview*) base;
	_tmp0_ = unity_protocol_application_preview_new ();
	raw = _tmp0_;
	self->priv->_raw = raw;
	_tmp1_ = self->priv->_raw;
	_tmp2_ = _g_object_ref0 ((GObject*) _tmp1_);
	result = _tmp2_;
	_g_object_unref0 (raw);
	return result;
}


GIcon*
unity_application_preview_get_app_icon (UnityApplicationPreview* self)
{
	GIcon* result;
	UnityProtocolApplicationPreview* _tmp0_;
	GIcon* _tmp1_;
	GIcon* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_application_preview_get_app_icon (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_application_preview_set_app_icon (UnityApplicationPreview* self,
                                        GIcon* value)
{
	UnityProtocolApplicationPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_application_preview_set_app_icon (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_application_preview_properties[UNITY_APPLICATION_PREVIEW_APP_ICON_PROPERTY]);
}


const gchar*
unity_application_preview_get_license (UnityApplicationPreview* self)
{
	const gchar* result;
	UnityProtocolApplicationPreview* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_application_preview_get_license (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_application_preview_set_license (UnityApplicationPreview* self,
                                       const gchar* value)
{
	UnityProtocolApplicationPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_application_preview_set_license (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_application_preview_properties[UNITY_APPLICATION_PREVIEW_LICENSE_PROPERTY]);
}


const gchar*
unity_application_preview_get_copyright (UnityApplicationPreview* self)
{
	const gchar* result;
	UnityProtocolApplicationPreview* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_application_preview_get_copyright (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_application_preview_set_copyright (UnityApplicationPreview* self,
                                         const gchar* value)
{
	UnityProtocolApplicationPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_application_preview_set_copyright (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_application_preview_properties[UNITY_APPLICATION_PREVIEW_COPYRIGHT_PROPERTY]);
}


const gchar*
unity_application_preview_get_last_update (UnityApplicationPreview* self)
{
	const gchar* result;
	UnityProtocolApplicationPreview* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_application_preview_get_last_update (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_application_preview_set_last_update (UnityApplicationPreview* self,
                                           const gchar* value)
{
	UnityProtocolApplicationPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_application_preview_set_last_update (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_application_preview_properties[UNITY_APPLICATION_PREVIEW_LAST_UPDATE_PROPERTY]);
}


static void
unity_application_preview_class_init (UnityApplicationPreviewClass * klass)
{
	unity_application_preview_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityApplicationPreviewPrivate));
	((UnityPreviewClass *) klass)->create_raw = (GObject* (*) (UnityPreview *)) unity_application_preview_real_create_raw;
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_application_preview_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_application_preview_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_application_preview_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_APPLICATION_PREVIEW_APP_ICON_PROPERTY, unity_application_preview_properties[UNITY_APPLICATION_PREVIEW_APP_ICON_PROPERTY] = g_param_spec_object ("app-icon", "app-icon", "app-icon", g_icon_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_APPLICATION_PREVIEW_LICENSE_PROPERTY, unity_application_preview_properties[UNITY_APPLICATION_PREVIEW_LICENSE_PROPERTY] = g_param_spec_string ("license", "license", "license", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_APPLICATION_PREVIEW_COPYRIGHT_PROPERTY, unity_application_preview_properties[UNITY_APPLICATION_PREVIEW_COPYRIGHT_PROPERTY] = g_param_spec_string ("copyright", "copyright", "copyright", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_APPLICATION_PREVIEW_LAST_UPDATE_PROPERTY, unity_application_preview_properties[UNITY_APPLICATION_PREVIEW_LAST_UPDATE_PROPERTY] = g_param_spec_string ("last-update", "last-update", "last-update", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


static void
unity_application_preview_instance_init (UnityApplicationPreview * self)
{
	self->priv = UNITY_APPLICATION_PREVIEW_GET_PRIVATE (self);
}


static void
unity_application_preview_finalize (GObject * obj)
{
	UnityApplicationPreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_APPLICATION_PREVIEW, UnityApplicationPreview);
	G_OBJECT_CLASS (unity_application_preview_parent_class)->finalize (obj);
}


GType
unity_application_preview_get_type (void)
{
	static volatile gsize unity_application_preview_type_id__volatile = 0;
	if (g_once_init_enter (&unity_application_preview_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityApplicationPreviewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_application_preview_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityApplicationPreview), 0, (GInstanceInitFunc) unity_application_preview_instance_init, NULL };
		GType unity_application_preview_type_id;
		unity_application_preview_type_id = g_type_register_static (UNITY_TYPE_PREVIEW, "UnityApplicationPreview", &g_define_type_info, 0);
		g_once_init_leave (&unity_application_preview_type_id__volatile, unity_application_preview_type_id);
	}
	return unity_application_preview_type_id__volatile;
}


static void
_vala_unity_application_preview_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec)
{
	UnityApplicationPreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_APPLICATION_PREVIEW, UnityApplicationPreview);
	switch (property_id) {
		case UNITY_APPLICATION_PREVIEW_APP_ICON_PROPERTY:
		g_value_set_object (value, unity_application_preview_get_app_icon (self));
		break;
		case UNITY_APPLICATION_PREVIEW_LICENSE_PROPERTY:
		g_value_set_string (value, unity_application_preview_get_license (self));
		break;
		case UNITY_APPLICATION_PREVIEW_COPYRIGHT_PROPERTY:
		g_value_set_string (value, unity_application_preview_get_copyright (self));
		break;
		case UNITY_APPLICATION_PREVIEW_LAST_UPDATE_PROPERTY:
		g_value_set_string (value, unity_application_preview_get_last_update (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_application_preview_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec)
{
	UnityApplicationPreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_APPLICATION_PREVIEW, UnityApplicationPreview);
	switch (property_id) {
		case UNITY_APPLICATION_PREVIEW_APP_ICON_PROPERTY:
		unity_application_preview_set_app_icon (self, g_value_get_object (value));
		break;
		case UNITY_APPLICATION_PREVIEW_LICENSE_PROPERTY:
		unity_application_preview_set_license (self, g_value_get_string (value));
		break;
		case UNITY_APPLICATION_PREVIEW_COPYRIGHT_PROPERTY:
		unity_application_preview_set_copyright (self, g_value_get_string (value));
		break;
		case UNITY_APPLICATION_PREVIEW_LAST_UPDATE_PROPERTY:
		unity_application_preview_set_last_update (self, g_value_get_string (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


GType
unity_music_preview_track_state_get_type (void)
{
	static volatile gsize unity_music_preview_track_state_type_id__volatile = 0;
	if (g_once_init_enter (&unity_music_preview_track_state_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_MUSIC_PREVIEW_TRACK_STATE_STOPPED, "UNITY_MUSIC_PREVIEW_TRACK_STATE_STOPPED", "stopped"}, {UNITY_MUSIC_PREVIEW_TRACK_STATE_PLAYING, "UNITY_MUSIC_PREVIEW_TRACK_STATE_PLAYING", "playing"}, {UNITY_MUSIC_PREVIEW_TRACK_STATE_PAUSED, "UNITY_MUSIC_PREVIEW_TRACK_STATE_PAUSED", "paused"}, {0, NULL, NULL}};
		GType unity_music_preview_track_state_type_id;
		unity_music_preview_track_state_type_id = g_enum_register_static ("UnityMusicPreviewTrackState", values);
		g_once_init_leave (&unity_music_preview_track_state_type_id__volatile, unity_music_preview_track_state_type_id);
	}
	return unity_music_preview_track_state_type_id__volatile;
}


static GType
unity_music_preview_track_data_columns_get_type (void)
{
	static volatile gsize unity_music_preview_track_data_columns_type_id__volatile = 0;
	if (g_once_init_enter (&unity_music_preview_track_data_columns_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_URI, "UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_URI", "uri"}, {UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_TRACK_NO, "UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_TRACK_NO", "track-no"}, {UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_TITLE, "UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_TITLE", "title"}, {UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_LENGTH, "UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_LENGTH", "length"}, {UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_PLAY_STATE, "UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_PLAY_STATE", "play-state"}, {UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_PROGRESS, "UNITY_MUSIC_PREVIEW_TRACK_DATA_COLUMNS_PROGRESS", "progress"}, {0, NULL, NULL}};
		GType unity_music_preview_track_data_columns_type_id;
		unity_music_preview_track_data_columns_type_id = g_enum_register_static ("UnityMusicPreviewTrackDataColumns", values);
		g_once_init_leave (&unity_music_preview_track_data_columns_type_id__volatile, unity_music_preview_track_data_columns_type_id);
	}
	return unity_music_preview_track_data_columns_type_id__volatile;
}


UnityMusicPreview*
unity_music_preview_construct (GType object_type,
                               const gchar* title,
                               const gchar* subtitle,
                               GIcon* image)
{
	UnityMusicPreview * self = NULL;
	g_return_val_if_fail (title != NULL, NULL);
	g_return_val_if_fail (subtitle != NULL, NULL);
	self = (UnityMusicPreview*) g_object_new (object_type, "title", title, "subtitle", subtitle, "image", image, NULL);
	return self;
}


UnityMusicPreview*
unity_music_preview_new (const gchar* title,
                         const gchar* subtitle,
                         GIcon* image)
{
	return unity_music_preview_construct (UNITY_TYPE_MUSIC_PREVIEW, title, subtitle, image);
}


static GObject*
unity_music_preview_real_create_raw (UnityPreview* base)
{
	UnityMusicPreview * self;
	GObject* result = NULL;
	UnityProtocolMusicPreview* raw = NULL;
	UnityProtocolMusicPreview* _tmp0_;
	UnityProtocolMusicPreview* _tmp1_;
	GObject* _tmp2_;
	self = (UnityMusicPreview*) base;
	_tmp0_ = unity_protocol_music_preview_new ();
	raw = _tmp0_;
	self->priv->_raw = raw;
	_tmp1_ = self->priv->_raw;
	_tmp2_ = _g_object_ref0 ((GObject*) _tmp1_);
	result = _tmp2_;
	_g_object_unref0 (raw);
	return result;
}


void
unity_music_preview_add_track (UnityMusicPreview* self,
                               UnityTrackMetadata* track)
{
	DeeSerializableModel* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	guint _tmp7_;
	guint _tmp8_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (track != NULL);
	unity_music_preview_init_model (self);
	_tmp0_ = self->priv->_track_data;
	_tmp1_ = unity_track_metadata_get_uri (track);
	_tmp2_ = _tmp1_;
	_tmp3_ = unity_track_metadata_get_track_no (track);
	_tmp4_ = _tmp3_;
	_tmp5_ = unity_track_metadata_get_title (track);
	_tmp6_ = _tmp5_;
	_tmp7_ = unity_track_metadata_get_length (track);
	_tmp8_ = _tmp7_;
	dee_model_append ((DeeModel*) _tmp0_, _tmp2_, _tmp4_, _tmp6_, _tmp8_, UNITY_MUSIC_PREVIEW_TRACK_STATE_STOPPED, 0.0, NULL);
}


static void
unity_music_preview_init_model (UnityMusicPreview* self)
{
	DeeSerializableModel* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_track_data;
	if (_tmp0_ == NULL) {
		DeeSequenceModel* _tmp1_;
		DeeSerializableModel* _tmp2_;
		DeeSerializableModel* _tmp3_;
		UnityProtocolMusicPreview* _tmp4_;
		DeeSerializableModel* _tmp5_;
		_tmp1_ = (DeeSequenceModel*) dee_sequence_model_new ();
		_g_object_unref0 (self->priv->_track_data);
		self->priv->_track_data = (DeeSerializableModel*) _tmp1_;
		_tmp2_ = self->priv->_track_data;
		dee_model_set_schema ((DeeModel*) _tmp2_, "s", "i", "s", "u", "u", "d", NULL);
		_tmp3_ = self->priv->_track_data;
		dee_model_set_column_names ((DeeModel*) _tmp3_, "uri", "track-number", "title", "length", "play-state", "progress", NULL);
		_tmp4_ = self->priv->_raw;
		_tmp5_ = self->priv->_track_data;
		unity_protocol_music_preview_set_track_model (_tmp4_, _tmp5_);
	}
}


static void
unity_music_preview_class_init (UnityMusicPreviewClass * klass)
{
	unity_music_preview_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityMusicPreviewPrivate));
	((UnityPreviewClass *) klass)->create_raw = (GObject* (*) (UnityPreview *)) unity_music_preview_real_create_raw;
	G_OBJECT_CLASS (klass)->finalize = unity_music_preview_finalize;
}


static void
unity_music_preview_instance_init (UnityMusicPreview * self)
{
	self->priv = UNITY_MUSIC_PREVIEW_GET_PRIVATE (self);
}


static void
unity_music_preview_finalize (GObject * obj)
{
	UnityMusicPreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_MUSIC_PREVIEW, UnityMusicPreview);
	_g_object_unref0 (self->priv->_track_data);
	G_OBJECT_CLASS (unity_music_preview_parent_class)->finalize (obj);
}


GType
unity_music_preview_get_type (void)
{
	static volatile gsize unity_music_preview_type_id__volatile = 0;
	if (g_once_init_enter (&unity_music_preview_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityMusicPreviewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_music_preview_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityMusicPreview), 0, (GInstanceInitFunc) unity_music_preview_instance_init, NULL };
		GType unity_music_preview_type_id;
		unity_music_preview_type_id = g_type_register_static (UNITY_TYPE_PREVIEW, "UnityMusicPreview", &g_define_type_info, 0);
		g_once_init_leave (&unity_music_preview_type_id__volatile, unity_music_preview_type_id);
	}
	return unity_music_preview_type_id__volatile;
}


GType
unity_payment_preview_type_get_type (void)
{
	static volatile gsize unity_payment_preview_type_type_id__volatile = 0;
	if (g_once_init_enter (&unity_payment_preview_type_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_PAYMENT_PREVIEW_TYPE_APPLICATION, "UNITY_PAYMENT_PREVIEW_TYPE_APPLICATION", "application"}, {UNITY_PAYMENT_PREVIEW_TYPE_MUSIC, "UNITY_PAYMENT_PREVIEW_TYPE_MUSIC", "music"}, {UNITY_PAYMENT_PREVIEW_TYPE_ERROR, "UNITY_PAYMENT_PREVIEW_TYPE_ERROR", "error"}, {0, NULL, NULL}};
		GType unity_payment_preview_type_type_id;
		unity_payment_preview_type_type_id = g_enum_register_static ("UnityPaymentPreviewType", values);
		g_once_init_leave (&unity_payment_preview_type_type_id__volatile, unity_payment_preview_type_type_id);
	}
	return unity_payment_preview_type_type_id__volatile;
}


UnityPaymentPreview*
unity_payment_preview_construct (GType object_type,
                                 const gchar* title,
                                 const gchar* subtitle,
                                 GIcon* image)
{
	UnityPaymentPreview * self = NULL;
	g_return_val_if_fail (title != NULL, NULL);
	g_return_val_if_fail (subtitle != NULL, NULL);
	self = (UnityPaymentPreview*) g_object_new (object_type, "title", title, "subtitle", subtitle, "image", image, NULL);
	return self;
}


UnityPaymentPreview*
unity_payment_preview_new (const gchar* title,
                           const gchar* subtitle,
                           GIcon* image)
{
	return unity_payment_preview_construct (UNITY_TYPE_PAYMENT_PREVIEW, title, subtitle, image);
}


UnityPaymentPreview*
unity_payment_preview_construct_for_type (GType object_type,
                                          const gchar* title,
                                          const gchar* subtitle,
                                          GIcon* image,
                                          UnityPaymentPreviewType type)
{
	UnityPaymentPreview * self = NULL;
	g_return_val_if_fail (title != NULL, NULL);
	g_return_val_if_fail (subtitle != NULL, NULL);
	self = (UnityPaymentPreview*) unity_payment_preview_construct (object_type, title, subtitle, image);
	unity_payment_preview_set_preview_type (self, type);
	return self;
}


UnityPaymentPreview*
unity_payment_preview_new_for_type (const gchar* title,
                                    const gchar* subtitle,
                                    GIcon* image,
                                    UnityPaymentPreviewType type)
{
	return unity_payment_preview_construct_for_type (UNITY_TYPE_PAYMENT_PREVIEW, title, subtitle, image, type);
}


UnityPaymentPreview*
unity_payment_preview_construct_for_application (GType object_type,
                                                 const gchar* title,
                                                 const gchar* subtitle,
                                                 GIcon* image)
{
	UnityPaymentPreview * self = NULL;
	g_return_val_if_fail (title != NULL, NULL);
	g_return_val_if_fail (subtitle != NULL, NULL);
	self = (UnityPaymentPreview*) unity_payment_preview_construct_for_type (object_type, title, subtitle, image, UNITY_PAYMENT_PREVIEW_TYPE_APPLICATION);
	return self;
}


UnityPaymentPreview*
unity_payment_preview_new_for_application (const gchar* title,
                                           const gchar* subtitle,
                                           GIcon* image)
{
	return unity_payment_preview_construct_for_application (UNITY_TYPE_PAYMENT_PREVIEW, title, subtitle, image);
}


UnityPaymentPreview*
unity_payment_preview_construct_for_music (GType object_type,
                                           const gchar* title,
                                           const gchar* subtitle,
                                           GIcon* image)
{
	UnityPaymentPreview * self = NULL;
	g_return_val_if_fail (title != NULL, NULL);
	g_return_val_if_fail (subtitle != NULL, NULL);
	self = (UnityPaymentPreview*) unity_payment_preview_construct_for_type (object_type, title, subtitle, image, UNITY_PAYMENT_PREVIEW_TYPE_MUSIC);
	return self;
}


UnityPaymentPreview*
unity_payment_preview_new_for_music (const gchar* title,
                                     const gchar* subtitle,
                                     GIcon* image)
{
	return unity_payment_preview_construct_for_music (UNITY_TYPE_PAYMENT_PREVIEW, title, subtitle, image);
}


UnityPaymentPreview*
unity_payment_preview_construct_for_error (GType object_type,
                                           const gchar* title,
                                           const gchar* subtitle,
                                           GIcon* image)
{
	UnityPaymentPreview * self = NULL;
	g_return_val_if_fail (title != NULL, NULL);
	g_return_val_if_fail (subtitle != NULL, NULL);
	self = (UnityPaymentPreview*) unity_payment_preview_construct_for_type (object_type, title, subtitle, image, UNITY_PAYMENT_PREVIEW_TYPE_ERROR);
	return self;
}


UnityPaymentPreview*
unity_payment_preview_new_for_error (const gchar* title,
                                     const gchar* subtitle,
                                     GIcon* image)
{
	return unity_payment_preview_construct_for_error (UNITY_TYPE_PAYMENT_PREVIEW, title, subtitle, image);
}


static GObject*
unity_payment_preview_real_create_raw (UnityPreview* base)
{
	UnityPaymentPreview * self;
	GObject* result = NULL;
	UnityProtocolPaymentPreview* raw = NULL;
	UnityProtocolPaymentPreview* _tmp0_;
	UnityProtocolPaymentPreview* _tmp1_;
	GObject* _tmp2_;
	self = (UnityPaymentPreview*) base;
	_tmp0_ = unity_protocol_payment_preview_new ();
	raw = _tmp0_;
	self->priv->_raw = raw;
	_tmp1_ = self->priv->_raw;
	_tmp2_ = _g_object_ref0 ((GObject*) _tmp1_);
	result = _tmp2_;
	_g_object_unref0 (raw);
	return result;
}


const gchar*
unity_payment_preview_get_header (UnityPaymentPreview* self)
{
	const gchar* result;
	UnityProtocolPaymentPreview* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_payment_preview_get_header (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_payment_preview_set_header (UnityPaymentPreview* self,
                                  const gchar* value)
{
	UnityProtocolPaymentPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_payment_preview_set_header (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_payment_preview_properties[UNITY_PAYMENT_PREVIEW_HEADER_PROPERTY]);
}


const gchar*
unity_payment_preview_get_email (UnityPaymentPreview* self)
{
	const gchar* result;
	UnityProtocolPaymentPreview* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_payment_preview_get_email (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_payment_preview_set_email (UnityPaymentPreview* self,
                                 const gchar* value)
{
	UnityProtocolPaymentPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_payment_preview_set_email (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_payment_preview_properties[UNITY_PAYMENT_PREVIEW_EMAIL_PROPERTY]);
}


const gchar*
unity_payment_preview_get_payment_method (UnityPaymentPreview* self)
{
	const gchar* result;
	UnityProtocolPaymentPreview* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_payment_preview_get_payment_method (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_payment_preview_set_payment_method (UnityPaymentPreview* self,
                                          const gchar* value)
{
	UnityProtocolPaymentPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_payment_preview_set_payment_method (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_payment_preview_properties[UNITY_PAYMENT_PREVIEW_PAYMENT_METHOD_PROPERTY]);
}


const gchar*
unity_payment_preview_get_purchase_prize (UnityPaymentPreview* self)
{
	const gchar* result;
	UnityProtocolPaymentPreview* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_payment_preview_get_purchase_prize (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_payment_preview_set_purchase_prize (UnityPaymentPreview* self,
                                          const gchar* value)
{
	UnityProtocolPaymentPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_payment_preview_set_purchase_prize (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_payment_preview_properties[UNITY_PAYMENT_PREVIEW_PURCHASE_PRIZE_PROPERTY]);
}


const gchar*
unity_payment_preview_get_purchase_type (UnityPaymentPreview* self)
{
	const gchar* result;
	UnityProtocolPaymentPreview* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_payment_preview_get_purchase_type (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_payment_preview_set_purchase_type (UnityPaymentPreview* self,
                                         const gchar* value)
{
	UnityProtocolPaymentPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_payment_preview_set_purchase_type (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_payment_preview_properties[UNITY_PAYMENT_PREVIEW_PURCHASE_TYPE_PROPERTY]);
}


UnityPaymentPreviewType
unity_payment_preview_get_preview_type (UnityPaymentPreview* self)
{
	UnityPaymentPreviewType result;
	UnityProtocolPaymentPreview* _tmp0_;
	UnityProtocolPreviewPaymentType _tmp1_;
	UnityProtocolPreviewPaymentType _tmp2_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_payment_preview_get_preview_type (_tmp0_);
	_tmp2_ = _tmp1_;
	result = (UnityPaymentPreviewType) _tmp2_;
	return result;
}


void
unity_payment_preview_set_preview_type (UnityPaymentPreview* self,
                                        UnityPaymentPreviewType value)
{
	UnityProtocolPaymentPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_payment_preview_set_preview_type (_tmp0_, (UnityProtocolPreviewPaymentType) value);
	g_object_notify_by_pspec ((GObject *) self, unity_payment_preview_properties[UNITY_PAYMENT_PREVIEW_PREVIEW_TYPE_PROPERTY]);
}


static void
unity_payment_preview_class_init (UnityPaymentPreviewClass * klass)
{
	unity_payment_preview_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityPaymentPreviewPrivate));
	((UnityPreviewClass *) klass)->create_raw = (GObject* (*) (UnityPreview *)) unity_payment_preview_real_create_raw;
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_payment_preview_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_payment_preview_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_payment_preview_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PAYMENT_PREVIEW_HEADER_PROPERTY, unity_payment_preview_properties[UNITY_PAYMENT_PREVIEW_HEADER_PROPERTY] = g_param_spec_string ("header", "header", "header", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PAYMENT_PREVIEW_EMAIL_PROPERTY, unity_payment_preview_properties[UNITY_PAYMENT_PREVIEW_EMAIL_PROPERTY] = g_param_spec_string ("email", "email", "email", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PAYMENT_PREVIEW_PAYMENT_METHOD_PROPERTY, unity_payment_preview_properties[UNITY_PAYMENT_PREVIEW_PAYMENT_METHOD_PROPERTY] = g_param_spec_string ("payment-method", "payment-method", "payment-method", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PAYMENT_PREVIEW_PURCHASE_PRIZE_PROPERTY, unity_payment_preview_properties[UNITY_PAYMENT_PREVIEW_PURCHASE_PRIZE_PROPERTY] = g_param_spec_string ("purchase-prize", "purchase-prize", "purchase-prize", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PAYMENT_PREVIEW_PURCHASE_TYPE_PROPERTY, unity_payment_preview_properties[UNITY_PAYMENT_PREVIEW_PURCHASE_TYPE_PROPERTY] = g_param_spec_string ("purchase-type", "purchase-type", "purchase-type", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PAYMENT_PREVIEW_PREVIEW_TYPE_PROPERTY, unity_payment_preview_properties[UNITY_PAYMENT_PREVIEW_PREVIEW_TYPE_PROPERTY] = g_param_spec_enum ("preview-type", "preview-type", "preview-type", UNITY_PAYMENT_PREVIEW_TYPE_TYPE, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	G_STATIC_ASSERT (((gint) UNITY_PROTOCOL_PREVIEW_PAYMENT_TYPE_APPLICATION) == ((gint) UNITY_PAYMENT_PREVIEW_TYPE_APPLICATION));
	G_STATIC_ASSERT (((gint) UNITY_PROTOCOL_PREVIEW_PAYMENT_TYPE_MUSIC) == ((gint) UNITY_PAYMENT_PREVIEW_TYPE_MUSIC));
	G_STATIC_ASSERT (((gint) UNITY_PROTOCOL_PREVIEW_PAYMENT_TYPE_ERROR) == ((gint) UNITY_PAYMENT_PREVIEW_TYPE_ERROR));
}


static void
unity_payment_preview_instance_init (UnityPaymentPreview * self)
{
	self->priv = UNITY_PAYMENT_PREVIEW_GET_PRIVATE (self);
}


static void
unity_payment_preview_finalize (GObject * obj)
{
	UnityPaymentPreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_PAYMENT_PREVIEW, UnityPaymentPreview);
	G_OBJECT_CLASS (unity_payment_preview_parent_class)->finalize (obj);
}


GType
unity_payment_preview_get_type (void)
{
	static volatile gsize unity_payment_preview_type_id__volatile = 0;
	if (g_once_init_enter (&unity_payment_preview_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityPaymentPreviewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_payment_preview_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityPaymentPreview), 0, (GInstanceInitFunc) unity_payment_preview_instance_init, NULL };
		GType unity_payment_preview_type_id;
		unity_payment_preview_type_id = g_type_register_static (UNITY_TYPE_PREVIEW, "UnityPaymentPreview", &g_define_type_info, 0);
		g_once_init_leave (&unity_payment_preview_type_id__volatile, unity_payment_preview_type_id);
	}
	return unity_payment_preview_type_id__volatile;
}


static void
_vala_unity_payment_preview_get_property (GObject * object,
                                          guint property_id,
                                          GValue * value,
                                          GParamSpec * pspec)
{
	UnityPaymentPreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_PAYMENT_PREVIEW, UnityPaymentPreview);
	switch (property_id) {
		case UNITY_PAYMENT_PREVIEW_HEADER_PROPERTY:
		g_value_set_string (value, unity_payment_preview_get_header (self));
		break;
		case UNITY_PAYMENT_PREVIEW_EMAIL_PROPERTY:
		g_value_set_string (value, unity_payment_preview_get_email (self));
		break;
		case UNITY_PAYMENT_PREVIEW_PAYMENT_METHOD_PROPERTY:
		g_value_set_string (value, unity_payment_preview_get_payment_method (self));
		break;
		case UNITY_PAYMENT_PREVIEW_PURCHASE_PRIZE_PROPERTY:
		g_value_set_string (value, unity_payment_preview_get_purchase_prize (self));
		break;
		case UNITY_PAYMENT_PREVIEW_PURCHASE_TYPE_PROPERTY:
		g_value_set_string (value, unity_payment_preview_get_purchase_type (self));
		break;
		case UNITY_PAYMENT_PREVIEW_PREVIEW_TYPE_PROPERTY:
		g_value_set_enum (value, unity_payment_preview_get_preview_type (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_payment_preview_set_property (GObject * object,
                                          guint property_id,
                                          const GValue * value,
                                          GParamSpec * pspec)
{
	UnityPaymentPreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_PAYMENT_PREVIEW, UnityPaymentPreview);
	switch (property_id) {
		case UNITY_PAYMENT_PREVIEW_HEADER_PROPERTY:
		unity_payment_preview_set_header (self, g_value_get_string (value));
		break;
		case UNITY_PAYMENT_PREVIEW_EMAIL_PROPERTY:
		unity_payment_preview_set_email (self, g_value_get_string (value));
		break;
		case UNITY_PAYMENT_PREVIEW_PAYMENT_METHOD_PROPERTY:
		unity_payment_preview_set_payment_method (self, g_value_get_string (value));
		break;
		case UNITY_PAYMENT_PREVIEW_PURCHASE_PRIZE_PROPERTY:
		unity_payment_preview_set_purchase_prize (self, g_value_get_string (value));
		break;
		case UNITY_PAYMENT_PREVIEW_PURCHASE_TYPE_PROPERTY:
		unity_payment_preview_set_purchase_type (self, g_value_get_string (value));
		break;
		case UNITY_PAYMENT_PREVIEW_PREVIEW_TYPE_PROPERTY:
		unity_payment_preview_set_preview_type (self, g_value_get_enum (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


UnityMoviePreview*
unity_movie_preview_construct (GType object_type,
                               const gchar* title,
                               const gchar* subtitle,
                               const gchar* description,
                               GIcon* image)
{
	UnityMoviePreview * self = NULL;
	g_return_val_if_fail (title != NULL, NULL);
	g_return_val_if_fail (subtitle != NULL, NULL);
	g_return_val_if_fail (description != NULL, NULL);
	self = (UnityMoviePreview*) g_object_new (object_type, "title", title, "subtitle", subtitle, "description-markup", description, "image", image, NULL);
	return self;
}


UnityMoviePreview*
unity_movie_preview_new (const gchar* title,
                         const gchar* subtitle,
                         const gchar* description,
                         GIcon* image)
{
	return unity_movie_preview_construct (UNITY_TYPE_MOVIE_PREVIEW, title, subtitle, description, image);
}


void
unity_movie_preview_set_rating (UnityMoviePreview* self,
                                gfloat rating,
                                guint num_ratings)
{
	UnityProtocolMoviePreview* _tmp0_;
	UnityProtocolMoviePreview* _tmp1_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_movie_preview_set_rating (_tmp0_, rating);
	_tmp1_ = self->priv->_raw;
	unity_protocol_movie_preview_set_num_ratings (_tmp1_, num_ratings);
}


static GObject*
unity_movie_preview_real_create_raw (UnityPreview* base)
{
	UnityMoviePreview * self;
	GObject* result = NULL;
	UnityProtocolMoviePreview* raw = NULL;
	UnityProtocolMoviePreview* _tmp0_;
	UnityProtocolMoviePreview* _tmp1_;
	GObject* _tmp2_;
	self = (UnityMoviePreview*) base;
	_tmp0_ = unity_protocol_movie_preview_new ();
	raw = _tmp0_;
	self->priv->_raw = raw;
	_tmp1_ = self->priv->_raw;
	_tmp2_ = _g_object_ref0 ((GObject*) _tmp1_);
	result = _tmp2_;
	_g_object_unref0 (raw);
	return result;
}


const gchar*
unity_movie_preview_get_year (UnityMoviePreview* self)
{
	const gchar* result;
	UnityProtocolMoviePreview* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_movie_preview_get_year (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_movie_preview_set_year (UnityMoviePreview* self,
                              const gchar* value)
{
	UnityProtocolMoviePreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_movie_preview_set_year (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_movie_preview_properties[UNITY_MOVIE_PREVIEW_YEAR_PROPERTY]);
}


static void
unity_movie_preview_class_init (UnityMoviePreviewClass * klass)
{
	unity_movie_preview_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityMoviePreviewPrivate));
	((UnityPreviewClass *) klass)->create_raw = (GObject* (*) (UnityPreview *)) unity_movie_preview_real_create_raw;
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_movie_preview_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_movie_preview_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_movie_preview_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_MOVIE_PREVIEW_YEAR_PROPERTY, unity_movie_preview_properties[UNITY_MOVIE_PREVIEW_YEAR_PROPERTY] = g_param_spec_string ("year", "year", "year", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


static void
unity_movie_preview_instance_init (UnityMoviePreview * self)
{
	self->priv = UNITY_MOVIE_PREVIEW_GET_PRIVATE (self);
}


static void
unity_movie_preview_finalize (GObject * obj)
{
	UnityMoviePreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_MOVIE_PREVIEW, UnityMoviePreview);
	G_OBJECT_CLASS (unity_movie_preview_parent_class)->finalize (obj);
}


GType
unity_movie_preview_get_type (void)
{
	static volatile gsize unity_movie_preview_type_id__volatile = 0;
	if (g_once_init_enter (&unity_movie_preview_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityMoviePreviewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_movie_preview_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityMoviePreview), 0, (GInstanceInitFunc) unity_movie_preview_instance_init, NULL };
		GType unity_movie_preview_type_id;
		unity_movie_preview_type_id = g_type_register_static (UNITY_TYPE_PREVIEW, "UnityMoviePreview", &g_define_type_info, 0);
		g_once_init_leave (&unity_movie_preview_type_id__volatile, unity_movie_preview_type_id);
	}
	return unity_movie_preview_type_id__volatile;
}


static void
_vala_unity_movie_preview_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec)
{
	UnityMoviePreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_MOVIE_PREVIEW, UnityMoviePreview);
	switch (property_id) {
		case UNITY_MOVIE_PREVIEW_YEAR_PROPERTY:
		g_value_set_string (value, unity_movie_preview_get_year (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_movie_preview_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec)
{
	UnityMoviePreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_MOVIE_PREVIEW, UnityMoviePreview);
	switch (property_id) {
		case UNITY_MOVIE_PREVIEW_YEAR_PROPERTY:
		unity_movie_preview_set_year (self, g_value_get_string (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


UnitySocialPreview*
unity_social_preview_construct (GType object_type,
                                const gchar* sender,
                                const gchar* subtitle,
                                const gchar* content,
                                GIcon* avatar)
{
	UnitySocialPreview * self = NULL;
	g_return_val_if_fail (sender != NULL, NULL);
	g_return_val_if_fail (subtitle != NULL, NULL);
	g_return_val_if_fail (content != NULL, NULL);
	self = (UnitySocialPreview*) g_object_new (object_type, "title", sender, "subtitle", subtitle, "content", content, "avatar", avatar, NULL);
	return self;
}


UnitySocialPreview*
unity_social_preview_new (const gchar* sender,
                          const gchar* subtitle,
                          const gchar* content,
                          GIcon* avatar)
{
	return unity_social_preview_construct (UNITY_TYPE_SOCIAL_PREVIEW, sender, subtitle, content, avatar);
}


static GObject*
unity_social_preview_real_create_raw (UnityPreview* base)
{
	UnitySocialPreview * self;
	GObject* result = NULL;
	UnityProtocolSocialPreview* raw = NULL;
	UnityProtocolSocialPreview* _tmp0_;
	UnityProtocolSocialPreview* _tmp1_;
	GObject* _tmp2_;
	self = (UnitySocialPreview*) base;
	_tmp0_ = unity_protocol_social_preview_new ();
	raw = _tmp0_;
	self->priv->_raw = raw;
	_tmp1_ = self->priv->_raw;
	_tmp2_ = _g_object_ref0 ((GObject*) _tmp1_);
	result = _tmp2_;
	_g_object_unref0 (raw);
	return result;
}


void
unity_social_preview_add_comment (UnitySocialPreview* self,
                                  UnitySocialPreviewComment* comment)
{
	UnitySocialPreviewComment* sunk = NULL;
	GObject* _tmp0_;
	UnitySocialPreviewComment* _tmp1_;
	UnityProtocolSocialPreview* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	const gchar* _tmp9_;
	const gchar* _tmp10_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (comment != NULL);
	_tmp0_ = g_object_ref_sink ((GObject*) comment);
	_tmp1_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp0_, UNITY_SOCIAL_PREVIEW_TYPE_COMMENT) ? ((UnitySocialPreviewComment*) _tmp0_) : NULL);
	sunk = _tmp1_;
	_tmp2_ = self->priv->_raw;
	_tmp3_ = unity_social_preview_comment_get_id (sunk);
	_tmp4_ = _tmp3_;
	_tmp5_ = unity_social_preview_comment_get_name (sunk);
	_tmp6_ = _tmp5_;
	_tmp7_ = unity_social_preview_comment_get_text (sunk);
	_tmp8_ = _tmp7_;
	_tmp9_ = unity_social_preview_comment_get_time (sunk);
	_tmp10_ = _tmp9_;
	unity_protocol_social_preview_add_comment (_tmp2_, _tmp4_, _tmp6_, _tmp8_, _tmp10_);
	_g_object_unref0 (sunk);
}


GIcon*
unity_social_preview_get_avatar (UnitySocialPreview* self)
{
	GIcon* result;
	UnityProtocolSocialPreview* _tmp0_;
	GIcon* _tmp1_;
	GIcon* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_social_preview_get_avatar (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_social_preview_set_avatar (UnitySocialPreview* self,
                                 GIcon* value)
{
	UnityProtocolSocialPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_social_preview_set_avatar (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_social_preview_properties[UNITY_SOCIAL_PREVIEW_AVATAR_PROPERTY]);
}


const gchar*
unity_social_preview_get_content (UnitySocialPreview* self)
{
	const gchar* result;
	UnityProtocolSocialPreview* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_preview_get_description ((UnityProtocolPreview*) _tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_social_preview_set_content (UnitySocialPreview* self,
                                  const gchar* value)
{
	UnityProtocolSocialPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_preview_set_description ((UnityProtocolPreview*) _tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_social_preview_properties[UNITY_SOCIAL_PREVIEW_CONTENT_PROPERTY]);
}


const gchar*
unity_social_preview_get_sender (UnitySocialPreview* self)
{
	const gchar* result;
	UnityProtocolSocialPreview* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_raw;
	_tmp1_ = unity_protocol_social_preview_get_sender (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_social_preview_set_sender (UnitySocialPreview* self,
                                 const gchar* value)
{
	UnityProtocolSocialPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_raw;
	unity_protocol_social_preview_set_sender (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_social_preview_properties[UNITY_SOCIAL_PREVIEW_SENDER_PROPERTY]);
}


UnitySocialPreviewComment*
unity_social_preview_comment_construct (GType object_type,
                                        const gchar* id,
                                        const gchar* name,
                                        const gchar* text,
                                        const gchar* time)
{
	UnitySocialPreviewComment * self = NULL;
	g_return_val_if_fail (id != NULL, NULL);
	g_return_val_if_fail (name != NULL, NULL);
	g_return_val_if_fail (text != NULL, NULL);
	g_return_val_if_fail (time != NULL, NULL);
	self = (UnitySocialPreviewComment*) g_object_new (object_type, "id", id, "name", name, "text", text, "time", time, NULL);
	return self;
}


UnitySocialPreviewComment*
unity_social_preview_comment_new (const gchar* id,
                                  const gchar* name,
                                  const gchar* text,
                                  const gchar* time)
{
	return unity_social_preview_comment_construct (UNITY_SOCIAL_PREVIEW_TYPE_COMMENT, id, name, text, time);
}


const gchar*
unity_social_preview_comment_get_id (UnitySocialPreviewComment* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_id;
	result = _tmp0_;
	return result;
}


static void
unity_social_preview_comment_set_id (UnitySocialPreviewComment* self,
                                     const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_social_preview_comment_get_id (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_id);
		self->priv->_id = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_social_preview_comment_properties[UNITY_SOCIAL_PREVIEW_COMMENT_ID_PROPERTY]);
	}
}


const gchar*
unity_social_preview_comment_get_name (UnitySocialPreviewComment* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_name;
	result = _tmp0_;
	return result;
}


static void
unity_social_preview_comment_set_name (UnitySocialPreviewComment* self,
                                       const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_social_preview_comment_get_name (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_name);
		self->priv->_name = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_social_preview_comment_properties[UNITY_SOCIAL_PREVIEW_COMMENT_NAME_PROPERTY]);
	}
}


const gchar*
unity_social_preview_comment_get_text (UnitySocialPreviewComment* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_text;
	result = _tmp0_;
	return result;
}


static void
unity_social_preview_comment_set_text (UnitySocialPreviewComment* self,
                                       const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_social_preview_comment_get_text (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_text);
		self->priv->_text = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_social_preview_comment_properties[UNITY_SOCIAL_PREVIEW_COMMENT_TEXT_PROPERTY]);
	}
}


const gchar*
unity_social_preview_comment_get_time (UnitySocialPreviewComment* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_time;
	result = _tmp0_;
	return result;
}


static void
unity_social_preview_comment_set_time (UnitySocialPreviewComment* self,
                                       const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_social_preview_comment_get_time (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_time);
		self->priv->_time = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_social_preview_comment_properties[UNITY_SOCIAL_PREVIEW_COMMENT_TIME_PROPERTY]);
	}
}


static void
unity_social_preview_comment_class_init (UnitySocialPreviewCommentClass * klass)
{
	unity_social_preview_comment_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnitySocialPreviewCommentPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_social_preview_comment_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_social_preview_comment_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_social_preview_comment_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_SOCIAL_PREVIEW_COMMENT_ID_PROPERTY, unity_social_preview_comment_properties[UNITY_SOCIAL_PREVIEW_COMMENT_ID_PROPERTY] = g_param_spec_string ("id", "id", "id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_SOCIAL_PREVIEW_COMMENT_NAME_PROPERTY, unity_social_preview_comment_properties[UNITY_SOCIAL_PREVIEW_COMMENT_NAME_PROPERTY] = g_param_spec_string ("name", "name", "name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_SOCIAL_PREVIEW_COMMENT_TEXT_PROPERTY, unity_social_preview_comment_properties[UNITY_SOCIAL_PREVIEW_COMMENT_TEXT_PROPERTY] = g_param_spec_string ("text", "text", "text", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_SOCIAL_PREVIEW_COMMENT_TIME_PROPERTY, unity_social_preview_comment_properties[UNITY_SOCIAL_PREVIEW_COMMENT_TIME_PROPERTY] = g_param_spec_string ("time", "time", "time", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
}


static void
unity_social_preview_comment_instance_init (UnitySocialPreviewComment * self)
{
	self->priv = UNITY_SOCIAL_PREVIEW_COMMENT_GET_PRIVATE (self);
}


static void
unity_social_preview_comment_finalize (GObject * obj)
{
	UnitySocialPreviewComment * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_SOCIAL_PREVIEW_TYPE_COMMENT, UnitySocialPreviewComment);
	_g_free0 (self->priv->_id);
	_g_free0 (self->priv->_name);
	_g_free0 (self->priv->_text);
	_g_free0 (self->priv->_time);
	G_OBJECT_CLASS (unity_social_preview_comment_parent_class)->finalize (obj);
}


GType
unity_social_preview_comment_get_type (void)
{
	static volatile gsize unity_social_preview_comment_type_id__volatile = 0;
	if (g_once_init_enter (&unity_social_preview_comment_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnitySocialPreviewCommentClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_social_preview_comment_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnitySocialPreviewComment), 0, (GInstanceInitFunc) unity_social_preview_comment_instance_init, NULL };
		GType unity_social_preview_comment_type_id;
		unity_social_preview_comment_type_id = g_type_register_static (G_TYPE_INITIALLY_UNOWNED, "UnitySocialPreviewComment", &g_define_type_info, 0);
		g_once_init_leave (&unity_social_preview_comment_type_id__volatile, unity_social_preview_comment_type_id);
	}
	return unity_social_preview_comment_type_id__volatile;
}


static void
_vala_unity_social_preview_comment_get_property (GObject * object,
                                                 guint property_id,
                                                 GValue * value,
                                                 GParamSpec * pspec)
{
	UnitySocialPreviewComment * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_SOCIAL_PREVIEW_TYPE_COMMENT, UnitySocialPreviewComment);
	switch (property_id) {
		case UNITY_SOCIAL_PREVIEW_COMMENT_ID_PROPERTY:
		g_value_set_string (value, unity_social_preview_comment_get_id (self));
		break;
		case UNITY_SOCIAL_PREVIEW_COMMENT_NAME_PROPERTY:
		g_value_set_string (value, unity_social_preview_comment_get_name (self));
		break;
		case UNITY_SOCIAL_PREVIEW_COMMENT_TEXT_PROPERTY:
		g_value_set_string (value, unity_social_preview_comment_get_text (self));
		break;
		case UNITY_SOCIAL_PREVIEW_COMMENT_TIME_PROPERTY:
		g_value_set_string (value, unity_social_preview_comment_get_time (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_social_preview_comment_set_property (GObject * object,
                                                 guint property_id,
                                                 const GValue * value,
                                                 GParamSpec * pspec)
{
	UnitySocialPreviewComment * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_SOCIAL_PREVIEW_TYPE_COMMENT, UnitySocialPreviewComment);
	switch (property_id) {
		case UNITY_SOCIAL_PREVIEW_COMMENT_ID_PROPERTY:
		unity_social_preview_comment_set_id (self, g_value_get_string (value));
		break;
		case UNITY_SOCIAL_PREVIEW_COMMENT_NAME_PROPERTY:
		unity_social_preview_comment_set_name (self, g_value_get_string (value));
		break;
		case UNITY_SOCIAL_PREVIEW_COMMENT_TEXT_PROPERTY:
		unity_social_preview_comment_set_text (self, g_value_get_string (value));
		break;
		case UNITY_SOCIAL_PREVIEW_COMMENT_TIME_PROPERTY:
		unity_social_preview_comment_set_time (self, g_value_get_string (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
unity_social_preview_class_init (UnitySocialPreviewClass * klass)
{
	unity_social_preview_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnitySocialPreviewPrivate));
	((UnityPreviewClass *) klass)->create_raw = (GObject* (*) (UnityPreview *)) unity_social_preview_real_create_raw;
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_social_preview_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_social_preview_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_social_preview_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_SOCIAL_PREVIEW_AVATAR_PROPERTY, unity_social_preview_properties[UNITY_SOCIAL_PREVIEW_AVATAR_PROPERTY] = g_param_spec_object ("avatar", "avatar", "avatar", g_icon_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_SOCIAL_PREVIEW_CONTENT_PROPERTY, unity_social_preview_properties[UNITY_SOCIAL_PREVIEW_CONTENT_PROPERTY] = g_param_spec_string ("content", "content", "content", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_SOCIAL_PREVIEW_SENDER_PROPERTY, unity_social_preview_properties[UNITY_SOCIAL_PREVIEW_SENDER_PROPERTY] = g_param_spec_string ("sender", "sender", "sender", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


static void
unity_social_preview_instance_init (UnitySocialPreview * self)
{
	self->priv = UNITY_SOCIAL_PREVIEW_GET_PRIVATE (self);
}


static void
unity_social_preview_finalize (GObject * obj)
{
	UnitySocialPreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_SOCIAL_PREVIEW, UnitySocialPreview);
	G_OBJECT_CLASS (unity_social_preview_parent_class)->finalize (obj);
}


GType
unity_social_preview_get_type (void)
{
	static volatile gsize unity_social_preview_type_id__volatile = 0;
	if (g_once_init_enter (&unity_social_preview_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnitySocialPreviewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_social_preview_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnitySocialPreview), 0, (GInstanceInitFunc) unity_social_preview_instance_init, NULL };
		GType unity_social_preview_type_id;
		unity_social_preview_type_id = g_type_register_static (UNITY_TYPE_PREVIEW, "UnitySocialPreview", &g_define_type_info, 0);
		g_once_init_leave (&unity_social_preview_type_id__volatile, unity_social_preview_type_id);
	}
	return unity_social_preview_type_id__volatile;
}


static void
_vala_unity_social_preview_get_property (GObject * object,
                                         guint property_id,
                                         GValue * value,
                                         GParamSpec * pspec)
{
	UnitySocialPreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_SOCIAL_PREVIEW, UnitySocialPreview);
	switch (property_id) {
		case UNITY_SOCIAL_PREVIEW_AVATAR_PROPERTY:
		g_value_set_object (value, unity_social_preview_get_avatar (self));
		break;
		case UNITY_SOCIAL_PREVIEW_CONTENT_PROPERTY:
		g_value_set_string (value, unity_social_preview_get_content (self));
		break;
		case UNITY_SOCIAL_PREVIEW_SENDER_PROPERTY:
		g_value_set_string (value, unity_social_preview_get_sender (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_social_preview_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec)
{
	UnitySocialPreview * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_SOCIAL_PREVIEW, UnitySocialPreview);
	switch (property_id) {
		case UNITY_SOCIAL_PREVIEW_AVATAR_PROPERTY:
		unity_social_preview_set_avatar (self, g_value_get_object (value));
		break;
		case UNITY_SOCIAL_PREVIEW_CONTENT_PROPERTY:
		unity_social_preview_set_content (self, g_value_get_string (value));
		break;
		case UNITY_SOCIAL_PREVIEW_SENDER_PROPERTY:
		unity_social_preview_set_sender (self, g_value_get_string (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}



