/* music-track-model-renderer.c generated by valac 0.40.11, the Vala compiler
 * generated from music-track-model-renderer.vala, do not modify */

/*
 * Copyright (C) 2012 Canonical Ltd
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authored by Pawel Stolowski <pawel.stolowski@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include <dee.h>
#include <gtk/gtk.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <float.h>
#include <math.h>


#define UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER (unity_tester_music_track_model_renderer_get_type ())
#define UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER, UnityTesterMusicTrackModelRenderer))
#define UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER, UnityTesterMusicTrackModelRendererClass))
#define UNITY_TESTER_IS_MUSIC_TRACK_MODEL_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER))
#define UNITY_TESTER_IS_MUSIC_TRACK_MODEL_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER))
#define UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER, UnityTesterMusicTrackModelRendererClass))

typedef struct _UnityTesterMusicTrackModelRenderer UnityTesterMusicTrackModelRenderer;
typedef struct _UnityTesterMusicTrackModelRendererClass UnityTesterMusicTrackModelRendererClass;
typedef struct _UnityTesterMusicTrackModelRendererPrivate UnityTesterMusicTrackModelRendererPrivate;
enum  {
	UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_0_PROPERTY,
	UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_TRACK_MODEL_PROPERTY,
	UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_TRACK_VIEW_MODEL_PROPERTY,
	UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_NUM_PROPERTIES
};
static GParamSpec* unity_tester_music_track_model_renderer_properties[UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
enum  {
	UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_TRACK_LIST_SYNCHRONIZED_SIGNAL,
	UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_NUM_SIGNALS
};
static guint unity_tester_music_track_model_renderer_signals[UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_NUM_SIGNALS] = {0};

struct _UnityTesterMusicTrackModelRenderer {
	GObject parent_instance;
	UnityTesterMusicTrackModelRendererPrivate * priv;
};

struct _UnityTesterMusicTrackModelRendererClass {
	GObjectClass parent_class;
};

struct _UnityTesterMusicTrackModelRendererPrivate {
	DeeModel* _track_model;
	DeeModelTag* track_model_tag;
	gint row_counter;
	gulong model_sync_sig_id;
	GtkListStore* _track_view_model;
};


static gpointer unity_tester_music_track_model_renderer_parent_class = NULL;

GType unity_tester_music_track_model_renderer_get_type (void) G_GNUC_CONST;
#define UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER, UnityTesterMusicTrackModelRendererPrivate))
UnityTesterMusicTrackModelRenderer* unity_tester_music_track_model_renderer_new (DeeModel* track_model);
UnityTesterMusicTrackModelRenderer* unity_tester_music_track_model_renderer_construct (GType object_type,
                                                                                       DeeModel* track_model);
void unity_tester_music_track_model_renderer_sync (UnityTesterMusicTrackModelRenderer* self);
DeeModel* unity_tester_music_track_model_renderer_get_track_model (UnityTesterMusicTrackModelRenderer* self);
static void unity_tester_music_track_model_renderer_track_added_cb (UnityTesterMusicTrackModelRenderer* self,
                                                             DeeModel* model,
                                                             DeeModelIter* iter);
static void _unity_tester_music_track_model_renderer_track_added_cb_dee_model_row_added (DeeModel* _sender,
                                                                                  DeeModelIter* iter,
                                                                                  gpointer self);
static void unity_tester_music_track_model_renderer_track_changed_cb (UnityTesterMusicTrackModelRenderer* self,
                                                               DeeModel* model,
                                                               DeeModelIter* iter);
static void _unity_tester_music_track_model_renderer_track_changed_cb_dee_model_row_changed (DeeModel* _sender,
                                                                                      DeeModelIter* iter,
                                                                                      gpointer self);
static void unity_tester_music_track_model_renderer_track_model_synchronized_cb (UnityTesterMusicTrackModelRenderer* self);
static void _unity_tester_music_track_model_renderer_track_model_synchronized_cb_g_object_notify (GObject* _sender,
                                                                                           GParamSpec* pspec,
                                                                                           gpointer self);
GtkListStore* unity_tester_music_track_model_renderer_get_track_view_model (UnityTesterMusicTrackModelRenderer* self);
static void unity_tester_music_track_model_renderer_set_track_model (UnityTesterMusicTrackModelRenderer* self,
                                                              DeeModel* value);
static void unity_tester_music_track_model_renderer_set_track_view_model (UnityTesterMusicTrackModelRenderer* self,
                                                                   GtkListStore* value);
static GObject * unity_tester_music_track_model_renderer_constructor (GType type,
                                                               guint n_construct_properties,
                                                               GObjectConstructParam * construct_properties);
static void unity_tester_music_track_model_renderer_finalize (GObject * obj);
static void _vala_unity_tester_music_track_model_renderer_get_property (GObject * object,
                                                                 guint property_id,
                                                                 GValue * value,
                                                                 GParamSpec * pspec);
static void _vala_unity_tester_music_track_model_renderer_set_property (GObject * object,
                                                                 guint property_id,
                                                                 const GValue * value,
                                                                 GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


UnityTesterMusicTrackModelRenderer*
unity_tester_music_track_model_renderer_construct (GType object_type,
                                                   DeeModel* track_model)
{
	UnityTesterMusicTrackModelRenderer * self = NULL;
	g_return_val_if_fail (track_model != NULL, NULL);
	self = (UnityTesterMusicTrackModelRenderer*) g_object_new (object_type, "track-model", track_model, NULL);
	return self;
}


UnityTesterMusicTrackModelRenderer*
unity_tester_music_track_model_renderer_new (DeeModel* track_model)
{
	return unity_tester_music_track_model_renderer_construct (UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER, track_model);
}


static void
_unity_tester_music_track_model_renderer_track_added_cb_dee_model_row_added (DeeModel* _sender,
                                                                             DeeModelIter* iter,
                                                                             gpointer self)
{
	unity_tester_music_track_model_renderer_track_added_cb ((UnityTesterMusicTrackModelRenderer*) self, _sender, iter);
}


static void
_unity_tester_music_track_model_renderer_track_changed_cb_dee_model_row_changed (DeeModel* _sender,
                                                                                 DeeModelIter* iter,
                                                                                 gpointer self)
{
	unity_tester_music_track_model_renderer_track_changed_cb ((UnityTesterMusicTrackModelRenderer*) self, _sender, iter);
}


static void
_unity_tester_music_track_model_renderer_track_model_synchronized_cb_g_object_notify (GObject* _sender,
                                                                                      GParamSpec* pspec,
                                                                                      gpointer self)
{
	unity_tester_music_track_model_renderer_track_model_synchronized_cb ((UnityTesterMusicTrackModelRenderer*) self);
}


void
unity_tester_music_track_model_renderer_sync (UnityTesterMusicTrackModelRenderer* self)
{
	DeeModel* _tmp0_;
	DeeModelTag* _tmp1_;
	DeeModel* _tmp2_;
	DeeModel* _tmp3_;
	DeeModelIter* iter = NULL;
	DeeModel* _tmp4_;
	DeeModelIter* _tmp5_;
	DeeModelIter* end_iter = NULL;
	DeeModel* _tmp6_;
	DeeModelIter* _tmp7_;
	DeeModel* _tmp15_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_track_model;
	_tmp1_ = dee_model_register_tag (_tmp0_, NULL);
	self->priv->track_model_tag = _tmp1_;
	_tmp2_ = self->priv->_track_model;
	g_signal_connect_object (_tmp2_, "row-added", (GCallback) _unity_tester_music_track_model_renderer_track_added_cb_dee_model_row_added, self, 0);
	_tmp3_ = self->priv->_track_model;
	g_signal_connect_object (_tmp3_, "row-changed", (GCallback) _unity_tester_music_track_model_renderer_track_changed_cb_dee_model_row_changed, self, 0);
	_tmp4_ = self->priv->_track_model;
	_tmp5_ = dee_model_get_first_iter (_tmp4_);
	iter = _tmp5_;
	_tmp6_ = self->priv->_track_model;
	_tmp7_ = dee_model_get_last_iter (_tmp6_);
	end_iter = _tmp7_;
	while (TRUE) {
		DeeModelIter* _tmp8_;
		DeeModelIter* _tmp9_;
		DeeModel* _tmp10_;
		DeeModelIter* _tmp11_;
		DeeModel* _tmp12_;
		DeeModelIter* _tmp13_;
		DeeModelIter* _tmp14_;
		_tmp8_ = iter;
		_tmp9_ = end_iter;
		if (!(_tmp8_ != _tmp9_)) {
			break;
		}
		_tmp10_ = self->priv->_track_model;
		_tmp11_ = iter;
		unity_tester_music_track_model_renderer_track_added_cb (self, _tmp10_, _tmp11_);
		_tmp12_ = self->priv->_track_model;
		_tmp13_ = iter;
		_tmp14_ = dee_model_next (_tmp12_, _tmp13_);
		iter = _tmp14_;
	}
	_tmp15_ = self->priv->_track_model;
	if (G_TYPE_CHECK_INSTANCE_TYPE (_tmp15_, dee_shared_model_get_type ())) {
		DeeModel* _tmp16_;
		gulong _tmp17_;
		_tmp16_ = self->priv->_track_model;
		_tmp17_ = g_signal_connect_object ((GObject*) _tmp16_, "notify::synchronized", (GCallback) _unity_tester_music_track_model_renderer_track_model_synchronized_cb_g_object_notify, self, 0);
		self->priv->model_sync_sig_id = _tmp17_;
	}
}


static void
unity_tester_music_track_model_renderer_track_added_cb (UnityTesterMusicTrackModelRenderer* self,
                                                        DeeModel* model,
                                                        DeeModelIter* iter)
{
	GVariant** row = NULL;
	GVariant** _tmp0_;
	GVariant** _tmp1_;
	gint row_length1;
	gint _row_size_;
	DeeModelTag* _tmp2_;
	DeeModel* _tmp3_;
	gint _tmp4_;
	GtkTreeIter tm_iter = {0};
	GtkListStore* _tmp5_;
	GtkTreeIter _tmp6_ = {0};
	GtkListStore* _tmp7_;
	GtkTreeIter _tmp8_;
	GVariant* _tmp9_;
	const gchar* _tmp10_;
	GVariant* _tmp11_;
	GVariant* _tmp12_;
	const gchar* _tmp13_;
	GVariant* _tmp14_;
	GVariant* _tmp15_;
	GVariant* _tmp16_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (model != NULL);
	g_return_if_fail (iter != NULL);
	_tmp1_ = _tmp0_ = dee_model_get_row (model, iter, NULL);
	row = _tmp1_;
	row_length1 = _vala_array_length (_tmp0_);
	_row_size_ = row_length1;
	_tmp2_ = self->priv->track_model_tag;
	_tmp3_ = self->priv->_track_model;
	_tmp4_ = self->priv->row_counter;
	self->priv->row_counter = _tmp4_ + 1;
	dee_model_set_tag (_tmp3_, iter, _tmp2_, (gpointer) ((gintptr) _tmp4_));
	_tmp5_ = self->priv->_track_view_model;
	gtk_list_store_append (_tmp5_, &_tmp6_);
	tm_iter = _tmp6_;
	_tmp7_ = self->priv->_track_view_model;
	_tmp8_ = tm_iter;
	_tmp9_ = row[0];
	_tmp10_ = g_variant_get_string (_tmp9_, NULL);
	_tmp11_ = row[1];
	_tmp12_ = row[2];
	_tmp13_ = g_variant_get_string (_tmp12_, NULL);
	_tmp14_ = row[3];
	_tmp15_ = row[4];
	_tmp16_ = row[5];
	gtk_list_store_set (_tmp7_, &_tmp8_, 0, _tmp10_, 1, g_variant_get_int32 (_tmp11_), 2, _tmp13_, 3, g_variant_get_uint32 (_tmp14_), 4, g_variant_get_uint32 (_tmp15_), 5, g_variant_get_double (_tmp16_), -1, -1);
	row = (_vala_array_free (row, row_length1, (GDestroyNotify) g_variant_unref), NULL);
}


static void
unity_tester_music_track_model_renderer_track_changed_cb (UnityTesterMusicTrackModelRenderer* self,
                                                          DeeModel* model,
                                                          DeeModelIter* iter)
{
	gint index = 0;
	DeeModelTag* _tmp0_;
	DeeModel* _tmp1_;
	gconstpointer _tmp2_;
	GtkTreeIter tm_iter = {0};
	GtkListStore* _tmp3_;
	GtkTreeIter _tmp4_ = {0};
	gboolean _tmp5_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (model != NULL);
	g_return_if_fail (iter != NULL);
	_tmp0_ = self->priv->track_model_tag;
	_tmp1_ = self->priv->_track_model;
	_tmp2_ = dee_model_get_tag (_tmp1_, iter, _tmp0_);
	index = (gint) ((gintptr) _tmp2_);
	_tmp3_ = self->priv->_track_view_model;
	_tmp5_ = gtk_tree_model_get_iter_first ((GtkTreeModel*) _tmp3_, &_tmp4_);
	tm_iter = _tmp4_;
	if (_tmp5_) {
		gint _tmp10_;
		while (TRUE) {
			gint _tmp6_;
			GtkListStore* _tmp7_;
			gboolean _tmp8_;
			gint _tmp9_;
			_tmp6_ = index;
			if (!(_tmp6_ > 0)) {
				break;
			}
			_tmp7_ = self->priv->_track_view_model;
			_tmp8_ = gtk_tree_model_iter_next ((GtkTreeModel*) _tmp7_, &tm_iter);
			if (!_tmp8_) {
				break;
			}
			_tmp9_ = index;
			index = _tmp9_ - 1;
		}
		_tmp10_ = index;
		if (_tmp10_ == 0) {
			GVariant** row = NULL;
			GVariant** _tmp11_;
			GVariant** _tmp12_;
			gint row_length1;
			gint _row_size_;
			GtkListStore* _tmp13_;
			GtkTreeIter _tmp14_;
			GVariant** _tmp15_;
			gint _tmp15__length1;
			GVariant* _tmp16_;
			const gchar* _tmp17_;
			GVariant** _tmp18_;
			gint _tmp18__length1;
			GVariant* _tmp19_;
			GVariant** _tmp20_;
			gint _tmp20__length1;
			GVariant* _tmp21_;
			const gchar* _tmp22_;
			GVariant** _tmp23_;
			gint _tmp23__length1;
			GVariant* _tmp24_;
			GVariant** _tmp25_;
			gint _tmp25__length1;
			GVariant* _tmp26_;
			GVariant** _tmp27_;
			gint _tmp27__length1;
			GVariant* _tmp28_;
			_tmp12_ = _tmp11_ = dee_model_get_row (model, iter, NULL);
			row = _tmp12_;
			row_length1 = _vala_array_length (_tmp11_);
			_row_size_ = row_length1;
			_tmp13_ = self->priv->_track_view_model;
			_tmp14_ = tm_iter;
			_tmp15_ = row;
			_tmp15__length1 = row_length1;
			_tmp16_ = _tmp15_[0];
			_tmp17_ = g_variant_get_string (_tmp16_, NULL);
			_tmp18_ = row;
			_tmp18__length1 = row_length1;
			_tmp19_ = _tmp18_[1];
			_tmp20_ = row;
			_tmp20__length1 = row_length1;
			_tmp21_ = _tmp20_[2];
			_tmp22_ = g_variant_get_string (_tmp21_, NULL);
			_tmp23_ = row;
			_tmp23__length1 = row_length1;
			_tmp24_ = _tmp23_[3];
			_tmp25_ = row;
			_tmp25__length1 = row_length1;
			_tmp26_ = _tmp25_[4];
			_tmp27_ = row;
			_tmp27__length1 = row_length1;
			_tmp28_ = _tmp27_[5];
			gtk_list_store_set (_tmp13_, &_tmp14_, 0, _tmp17_, 1, g_variant_get_int32 (_tmp19_), 2, _tmp22_, 3, g_variant_get_uint32 (_tmp24_), 4, g_variant_get_uint32 (_tmp26_), 5, g_variant_get_double (_tmp28_), -1, -1);
			row = (_vala_array_free (row, row_length1, (GDestroyNotify) g_variant_unref), NULL);
		} else {
			FILE* _tmp29_;
			_tmp29_ = stderr;
			fprintf (_tmp29_, "can't update row");
		}
	}
}


static void
unity_tester_music_track_model_renderer_track_model_synchronized_cb (UnityTesterMusicTrackModelRenderer* self)
{
	DeeModel* _tmp0_;
	gulong _tmp1_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_track_model;
	_tmp1_ = self->priv->model_sync_sig_id;
	g_signal_handler_disconnect (_tmp0_, _tmp1_);
	g_signal_emit (self, unity_tester_music_track_model_renderer_signals[UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_TRACK_LIST_SYNCHRONIZED_SIGNAL], 0);
}


DeeModel*
unity_tester_music_track_model_renderer_get_track_model (UnityTesterMusicTrackModelRenderer* self)
{
	DeeModel* result;
	DeeModel* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_track_model;
	result = _tmp0_;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
unity_tester_music_track_model_renderer_set_track_model (UnityTesterMusicTrackModelRenderer* self,
                                                         DeeModel* value)
{
	g_return_if_fail (self != NULL);
	if (unity_tester_music_track_model_renderer_get_track_model (self) != value) {
		DeeModel* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_track_model);
		self->priv->_track_model = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_tester_music_track_model_renderer_properties[UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_TRACK_MODEL_PROPERTY]);
	}
}


GtkListStore*
unity_tester_music_track_model_renderer_get_track_view_model (UnityTesterMusicTrackModelRenderer* self)
{
	GtkListStore* result;
	GtkListStore* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_track_view_model;
	result = _tmp0_;
	return result;
}


static void
unity_tester_music_track_model_renderer_set_track_view_model (UnityTesterMusicTrackModelRenderer* self,
                                                              GtkListStore* value)
{
	g_return_if_fail (self != NULL);
	if (unity_tester_music_track_model_renderer_get_track_view_model (self) != value) {
		GtkListStore* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_track_view_model);
		self->priv->_track_view_model = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_tester_music_track_model_renderer_properties[UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_TRACK_VIEW_MODEL_PROPERTY]);
	}
}


static GObject *
unity_tester_music_track_model_renderer_constructor (GType type,
                                                     guint n_construct_properties,
                                                     GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	UnityTesterMusicTrackModelRenderer * self;
	GtkListStore* _tmp0_;
	GtkListStore* _tmp1_;
	parent_class = G_OBJECT_CLASS (unity_tester_music_track_model_renderer_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER, UnityTesterMusicTrackModelRenderer);
	_tmp0_ = gtk_list_store_new (6, G_TYPE_STRING, G_TYPE_INT, G_TYPE_STRING, G_TYPE_UINT, G_TYPE_UINT, G_TYPE_DOUBLE, -1);
	_tmp1_ = _tmp0_;
	unity_tester_music_track_model_renderer_set_track_view_model (self, _tmp1_);
	_g_object_unref0 (_tmp1_);
	return obj;
}


static void
unity_tester_music_track_model_renderer_class_init (UnityTesterMusicTrackModelRendererClass * klass)
{
	unity_tester_music_track_model_renderer_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityTesterMusicTrackModelRendererPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_tester_music_track_model_renderer_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_tester_music_track_model_renderer_set_property;
	G_OBJECT_CLASS (klass)->constructor = unity_tester_music_track_model_renderer_constructor;
	G_OBJECT_CLASS (klass)->finalize = unity_tester_music_track_model_renderer_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_TRACK_MODEL_PROPERTY, unity_tester_music_track_model_renderer_properties[UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_TRACK_MODEL_PROPERTY] = g_param_spec_object ("track-model", "track-model", "track-model", dee_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_TRACK_VIEW_MODEL_PROPERTY, unity_tester_music_track_model_renderer_properties[UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_TRACK_VIEW_MODEL_PROPERTY] = g_param_spec_object ("track-view-model", "track-view-model", "track-view-model", gtk_list_store_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	unity_tester_music_track_model_renderer_signals[UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_TRACK_LIST_SYNCHRONIZED_SIGNAL] = g_signal_new ("track-list-synchronized", UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
}


static void
unity_tester_music_track_model_renderer_instance_init (UnityTesterMusicTrackModelRenderer * self)
{
	self->priv = UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_GET_PRIVATE (self);
	self->priv->row_counter = 0;
	self->priv->model_sync_sig_id = (gulong) 0;
}


static void
unity_tester_music_track_model_renderer_finalize (GObject * obj)
{
	UnityTesterMusicTrackModelRenderer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER, UnityTesterMusicTrackModelRenderer);
	_g_object_unref0 (self->priv->_track_model);
	_g_object_unref0 (self->priv->_track_view_model);
	G_OBJECT_CLASS (unity_tester_music_track_model_renderer_parent_class)->finalize (obj);
}


GType
unity_tester_music_track_model_renderer_get_type (void)
{
	static volatile gsize unity_tester_music_track_model_renderer_type_id__volatile = 0;
	if (g_once_init_enter (&unity_tester_music_track_model_renderer_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityTesterMusicTrackModelRendererClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_tester_music_track_model_renderer_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityTesterMusicTrackModelRenderer), 0, (GInstanceInitFunc) unity_tester_music_track_model_renderer_instance_init, NULL };
		GType unity_tester_music_track_model_renderer_type_id;
		unity_tester_music_track_model_renderer_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityTesterMusicTrackModelRenderer", &g_define_type_info, 0);
		g_once_init_leave (&unity_tester_music_track_model_renderer_type_id__volatile, unity_tester_music_track_model_renderer_type_id);
	}
	return unity_tester_music_track_model_renderer_type_id__volatile;
}


static void
_vala_unity_tester_music_track_model_renderer_get_property (GObject * object,
                                                            guint property_id,
                                                            GValue * value,
                                                            GParamSpec * pspec)
{
	UnityTesterMusicTrackModelRenderer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER, UnityTesterMusicTrackModelRenderer);
	switch (property_id) {
		case UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_TRACK_MODEL_PROPERTY:
		g_value_set_object (value, unity_tester_music_track_model_renderer_get_track_model (self));
		break;
		case UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_TRACK_VIEW_MODEL_PROPERTY:
		g_value_set_object (value, unity_tester_music_track_model_renderer_get_track_view_model (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_tester_music_track_model_renderer_set_property (GObject * object,
                                                            guint property_id,
                                                            const GValue * value,
                                                            GParamSpec * pspec)
{
	UnityTesterMusicTrackModelRenderer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER, UnityTesterMusicTrackModelRenderer);
	switch (property_id) {
		case UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_TRACK_MODEL_PROPERTY:
		unity_tester_music_track_model_renderer_set_track_model (self, g_value_get_object (value));
		break;
		case UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_TRACK_VIEW_MODEL_PROPERTY:
		unity_tester_music_track_model_renderer_set_track_view_model (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



