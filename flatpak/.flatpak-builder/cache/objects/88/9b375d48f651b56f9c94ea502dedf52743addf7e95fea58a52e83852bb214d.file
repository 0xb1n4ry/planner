/* unity-merge-strategy.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-merge-strategy.vala, do not modify */

/*
 * Copyright (C) 2012 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Mikkel Kamstrup Erlandsen <mikkel.kamstrup@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <dee.h>


#define UNITY_INTERNAL_TYPE_MERGE_STRATEGY (unity_internal_merge_strategy_get_type ())
#define UNITY_INTERNAL_MERGE_STRATEGY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_MERGE_STRATEGY, UnityInternalMergeStrategy))
#define UNITY_INTERNAL_IS_MERGE_STRATEGY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_MERGE_STRATEGY))
#define UNITY_INTERNAL_MERGE_STRATEGY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), UNITY_INTERNAL_TYPE_MERGE_STRATEGY, UnityInternalMergeStrategyIface))

typedef struct _UnityInternalMergeStrategy UnityInternalMergeStrategy;
typedef struct _UnityInternalMergeStrategyIface UnityInternalMergeStrategyIface;

struct _UnityInternalMergeStrategyIface {
	GTypeInterface parent_iface;
	DeeModelIter* (*merge_result) (UnityInternalMergeStrategy* self, const gchar* source_scope_id, DeeModel* target, GVariant** row, int row_length1);
};



GType unity_internal_merge_strategy_get_type (void) G_GNUC_CONST;
DeeModelIter* unity_internal_merge_strategy_merge_result (UnityInternalMergeStrategy* self,
                                                          const gchar* source_scope_id,
                                                          DeeModel* target,
                                                          GVariant** row,
                                                          int row_length1);


/**
   * Virtual method to merge row from source model into target model.
   *
   * @param source_scope_id The ID of the source scope
   * @param target The target model to merge a row into
   * @param row An array of variants with the row data for the result
   *
   * @return A model iter pointing to the row in the target model where @row
   *         was added. Or null if the result was discarded
   */
DeeModelIter*
unity_internal_merge_strategy_merge_result (UnityInternalMergeStrategy* self,
                                            const gchar* source_scope_id,
                                            DeeModel* target,
                                            GVariant** row,
                                            int row_length1)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_INTERNAL_MERGE_STRATEGY_GET_INTERFACE (self)->merge_result (self, source_scope_id, target, row, row_length1);
}


static void
unity_internal_merge_strategy_default_init (UnityInternalMergeStrategyIface * iface)
{
}


GType
unity_internal_merge_strategy_get_type (void)
{
	static volatile gsize unity_internal_merge_strategy_type_id__volatile = 0;
	if (g_once_init_enter (&unity_internal_merge_strategy_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityInternalMergeStrategyIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_internal_merge_strategy_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
		GType unity_internal_merge_strategy_type_id;
		unity_internal_merge_strategy_type_id = g_type_register_static (G_TYPE_INTERFACE, "UnityInternalMergeStrategy", &g_define_type_info, 0);
		g_type_interface_add_prerequisite (unity_internal_merge_strategy_type_id, G_TYPE_OBJECT);
		g_once_init_leave (&unity_internal_merge_strategy_type_id__volatile, unity_internal_merge_strategy_type_id);
	}
	return unity_internal_merge_strategy_type_id__volatile;
}



