/* CalendarDay.c generated by valac 0.40.11, the Vala compiler
 * generated from CalendarDay.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <gio/gio.h>
#include <gdk/gdk.h>


#define WIDGETS_CALENDAR_TYPE_CALENDAR_DAY (widgets_calendar_calendar_day_get_type ())
#define WIDGETS_CALENDAR_CALENDAR_DAY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_DAY, WidgetsCalendarCalendarDay))
#define WIDGETS_CALENDAR_CALENDAR_DAY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_DAY, WidgetsCalendarCalendarDayClass))
#define WIDGETS_CALENDAR_IS_CALENDAR_DAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_DAY))
#define WIDGETS_CALENDAR_IS_CALENDAR_DAY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_DAY))
#define WIDGETS_CALENDAR_CALENDAR_DAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_DAY, WidgetsCalendarCalendarDayClass))

typedef struct _WidgetsCalendarCalendarDay WidgetsCalendarCalendarDay;
typedef struct _WidgetsCalendarCalendarDayClass WidgetsCalendarCalendarDayClass;
typedef struct _WidgetsCalendarCalendarDayPrivate WidgetsCalendarCalendarDayPrivate;
enum  {
	WIDGETS_CALENDAR_CALENDAR_DAY_0_PROPERTY,
	WIDGETS_CALENDAR_CALENDAR_DAY_DAY_PROPERTY,
	WIDGETS_CALENDAR_CALENDAR_DAY_NUM_PROPERTIES
};
static GParamSpec* widgets_calendar_calendar_day_properties[WIDGETS_CALENDAR_CALENDAR_DAY_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
enum  {
	WIDGETS_CALENDAR_CALENDAR_DAY_DAY_SELECTED_SIGNAL,
	WIDGETS_CALENDAR_CALENDAR_DAY_DAY_DOUBLE_SELECTED_SIGNAL,
	WIDGETS_CALENDAR_CALENDAR_DAY_NUM_SIGNALS
};
static guint widgets_calendar_calendar_day_signals[WIDGETS_CALENDAR_CALENDAR_DAY_NUM_SIGNALS] = {0};

struct _WidgetsCalendarCalendarDay {
	GtkEventBox parent_instance;
	WidgetsCalendarCalendarDayPrivate * priv;
};

struct _WidgetsCalendarCalendarDayClass {
	GtkEventBoxClass parent_class;
};

struct _WidgetsCalendarCalendarDayPrivate {
	GtkLabel* label;
};


static gpointer widgets_calendar_calendar_day_parent_class = NULL;

GType widgets_calendar_calendar_day_get_type (void) G_GNUC_CONST;
#define WIDGETS_CALENDAR_CALENDAR_DAY_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_CALENDAR_TYPE_CALENDAR_DAY, WidgetsCalendarCalendarDayPrivate))
WidgetsCalendarCalendarDay* widgets_calendar_calendar_day_new (void);
WidgetsCalendarCalendarDay* widgets_calendar_calendar_day_construct (GType object_type);
gint widgets_calendar_calendar_day_get_day (WidgetsCalendarCalendarDay* self);
void widgets_calendar_calendar_day_set_day (WidgetsCalendarCalendarDay* self,
                                            gint value);
static GObject * widgets_calendar_calendar_day_constructor (GType type,
                                                     guint n_construct_properties,
                                                     GObjectConstructParam * construct_properties);
static gboolean _widgets_calendar_calendar_day___lambda16_ (WidgetsCalendarCalendarDay* self,
                                                     GdkEvent* event);
static gboolean __widgets_calendar_calendar_day___lambda16__gtk_widget_event (GtkWidget* _sender,
                                                                       GdkEvent* event,
                                                                       gpointer self);
static void widgets_calendar_calendar_day_finalize (GObject * obj);
static void _vala_widgets_calendar_calendar_day_get_property (GObject * object,
                                                       guint property_id,
                                                       GValue * value,
                                                       GParamSpec * pspec);
static void _vala_widgets_calendar_calendar_day_set_property (GObject * object,
                                                       guint property_id,
                                                       const GValue * value,
                                                       GParamSpec * pspec);


WidgetsCalendarCalendarDay*
widgets_calendar_calendar_day_construct (GType object_type)
{
	WidgetsCalendarCalendarDay * self = NULL;
#line 35 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	self = (WidgetsCalendarCalendarDay*) g_object_new (object_type, NULL);
#line 35 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	return self;
#line 110 "CalendarDay.c"
}


WidgetsCalendarCalendarDay*
widgets_calendar_calendar_day_new (void)
{
#line 35 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	return widgets_calendar_calendar_day_construct (WIDGETS_CALENDAR_TYPE_CALENDAR_DAY);
#line 119 "CalendarDay.c"
}


gint
widgets_calendar_calendar_day_get_day (WidgetsCalendarCalendarDay* self)
{
	gint result;
	GtkLabel* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 27 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 28 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp0_ = self->priv->label;
#line 28 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp1_ = gtk_label_get_label (_tmp0_);
#line 28 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp2_ = _tmp1_;
#line 28 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	result = atoi (_tmp2_);
#line 28 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	return result;
#line 142 "CalendarDay.c"
}


void
widgets_calendar_calendar_day_set_day (WidgetsCalendarCalendarDay* self,
                                       gint value)
{
	GtkLabel* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
#line 24 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	g_return_if_fail (self != NULL);
#line 25 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp0_ = self->priv->label;
#line 25 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp1_ = g_strdup_printf ("%i", value);
#line 25 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp2_ = _tmp1_;
#line 25 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	gtk_label_set_label (_tmp0_, _tmp2_);
#line 25 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_g_free0 (_tmp2_);
#line 24 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	g_object_notify_by_pspec ((GObject *) self, widgets_calendar_calendar_day_properties[WIDGETS_CALENDAR_CALENDAR_DAY_DAY_PROPERTY]);
#line 167 "CalendarDay.c"
}


static gboolean
_widgets_calendar_calendar_day___lambda16_ (WidgetsCalendarCalendarDay* self,
                                            GdkEvent* event)
{
	gboolean result = FALSE;
	GdkEventType _tmp0_;
#line 58 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 59 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp0_ = event->type;
#line 59 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	if (_tmp0_ == GDK_BUTTON_PRESS) {
#line 183 "CalendarDay.c"
		GtkLabel* _tmp1_;
		const gchar* _tmp2_;
		const gchar* _tmp3_;
		GtkStyleContext* _tmp4_;
#line 60 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		_tmp1_ = self->priv->label;
#line 60 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		_tmp2_ = gtk_label_get_label (_tmp1_);
#line 60 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		_tmp3_ = _tmp2_;
#line 60 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		g_signal_emit (self, widgets_calendar_calendar_day_signals[WIDGETS_CALENDAR_CALENDAR_DAY_DAY_SELECTED_SIGNAL], 0, atoi (_tmp3_));
#line 61 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 61 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		gtk_style_context_add_class (_tmp4_, "planner-calendar-selected");
#line 200 "CalendarDay.c"
	} else {
		GdkEventType _tmp5_;
#line 62 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		_tmp5_ = event->type;
#line 62 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		if (_tmp5_ == GDK_2BUTTON_PRESS) {
#line 207 "CalendarDay.c"
			GtkLabel* _tmp6_;
			const gchar* _tmp7_;
			const gchar* _tmp8_;
			GtkStyleContext* _tmp9_;
#line 63 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
			_tmp6_ = self->priv->label;
#line 63 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
			_tmp7_ = gtk_label_get_label (_tmp6_);
#line 63 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
			_tmp8_ = _tmp7_;
#line 63 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
			g_signal_emit (self, widgets_calendar_calendar_day_signals[WIDGETS_CALENDAR_CALENDAR_DAY_DAY_DOUBLE_SELECTED_SIGNAL], 0, atoi (_tmp8_));
#line 64 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
			_tmp9_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 64 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
			gtk_style_context_add_class (_tmp9_, "planner-calendar-selected");
#line 224 "CalendarDay.c"
		}
	}
#line 67 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	result = FALSE;
#line 67 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	return result;
#line 231 "CalendarDay.c"
}


static gboolean
__widgets_calendar_calendar_day___lambda16__gtk_widget_event (GtkWidget* _sender,
                                                              GdkEvent* event,
                                                              gpointer self)
{
	gboolean result;
	result = _widgets_calendar_calendar_day___lambda16_ ((WidgetsCalendarCalendarDay*) self, event);
#line 58 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	return result;
#line 244 "CalendarDay.c"
}


static GObject *
widgets_calendar_calendar_day_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsCalendarCalendarDay * self;
	GtkLabel* _tmp0_;
	GtkLabel* _tmp1_;
	GtkLabel* _tmp2_;
	GtkImage* image = NULL;
	GtkImage* _tmp3_;
	GtkImage* _tmp4_;
	GThemedIcon* _tmp5_;
	GThemedIcon* _tmp6_;
	GtkImage* _tmp7_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp8_;
	GtkGrid* _tmp9_;
	GtkGrid* _tmp10_;
	GtkGrid* _tmp11_;
	GtkGrid* _tmp12_;
	GtkGrid* _tmp13_;
	GtkLabel* _tmp14_;
	GtkGrid* _tmp15_;
#line 39 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	parent_class = G_OBJECT_CLASS (widgets_calendar_calendar_day_parent_class);
#line 39 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 39 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_CALENDAR_TYPE_CALENDAR_DAY, WidgetsCalendarCalendarDay);
#line 40 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp0_ = (GtkLabel*) gtk_label_new (NULL);
#line 40 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	g_object_ref_sink (_tmp0_);
#line 40 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_g_object_unref0 (self->priv->label);
#line 40 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	self->priv->label = _tmp0_;
#line 41 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp1_ = self->priv->label;
#line 41 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	g_object_set ((GtkWidget*) _tmp1_, "height-request", 16, NULL);
#line 42 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp2_ = self->priv->label;
#line 42 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	g_object_set ((GtkWidget*) _tmp2_, "width-request", 16, NULL);
#line 44 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp3_ = (GtkImage*) gtk_image_new ();
#line 44 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	g_object_ref_sink (_tmp3_);
#line 44 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	image = _tmp3_;
#line 45 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp4_ = image;
#line 45 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp5_ = (GThemedIcon*) g_themed_icon_new ("mail-unread-symbolic");
#line 45 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp6_ = _tmp5_;
#line 45 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	g_object_set (_tmp4_, "gicon", (GIcon*) _tmp6_, NULL);
#line 45 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_g_object_unref0 (_tmp6_);
#line 46 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp7_ = image;
#line 46 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	gtk_image_set_pixel_size (_tmp7_, 6);
#line 48 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp8_ = (GtkGrid*) gtk_grid_new ();
#line 48 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	g_object_ref_sink (_tmp8_);
#line 48 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	main_grid = _tmp8_;
#line 49 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp9_ = main_grid;
#line 49 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp9_, GTK_ORIENTATION_VERTICAL);
#line 50 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp10_ = main_grid;
#line 50 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	g_object_set ((GtkWidget*) _tmp10_, "margin", 3, NULL);
#line 51 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp11_ = main_grid;
#line 51 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp11_, GTK_ALIGN_CENTER);
#line 52 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp12_ = main_grid;
#line 52 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp12_, GTK_ALIGN_CENTER);
#line 53 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp13_ = main_grid;
#line 53 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp14_ = self->priv->label;
#line 53 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	gtk_container_add ((GtkContainer*) _tmp13_, (GtkWidget*) _tmp14_);
#line 56 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_tmp15_ = main_grid;
#line 56 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp15_);
#line 58 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	g_signal_connect_object ((GtkWidget*) self, "event", (GCallback) __widgets_calendar_calendar_day___lambda16__gtk_widget_event, self, 0);
#line 39 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_g_object_unref0 (main_grid);
#line 39 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_g_object_unref0 (image);
#line 39 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	return obj;
#line 356 "CalendarDay.c"
}


static void
widgets_calendar_calendar_day_class_init (WidgetsCalendarCalendarDayClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	widgets_calendar_calendar_day_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	g_type_class_add_private (klass, sizeof (WidgetsCalendarCalendarDayPrivate));
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_calendar_calendar_day_get_property;
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_calendar_calendar_day_set_property;
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_calendar_calendar_day_constructor;
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_calendar_calendar_day_finalize;
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_CALENDAR_CALENDAR_DAY_DAY_PROPERTY, widgets_calendar_calendar_day_properties[WIDGETS_CALENDAR_CALENDAR_DAY_DAY_PROPERTY] = g_param_spec_int ("day", "day", "day", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	widgets_calendar_calendar_day_signals[WIDGETS_CALENDAR_CALENDAR_DAY_DAY_SELECTED_SIGNAL] = g_signal_new ("day-selected", WIDGETS_CALENDAR_TYPE_CALENDAR_DAY, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__INT, G_TYPE_NONE, 1, G_TYPE_INT);
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	widgets_calendar_calendar_day_signals[WIDGETS_CALENDAR_CALENDAR_DAY_DAY_DOUBLE_SELECTED_SIGNAL] = g_signal_new ("day-double-selected", WIDGETS_CALENDAR_TYPE_CALENDAR_DAY, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__INT, G_TYPE_NONE, 1, G_TYPE_INT);
#line 381 "CalendarDay.c"
}


static void
widgets_calendar_calendar_day_instance_init (WidgetsCalendarCalendarDay * self)
{
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	self->priv = WIDGETS_CALENDAR_CALENDAR_DAY_GET_PRIVATE (self);
#line 390 "CalendarDay.c"
}


static void
widgets_calendar_calendar_day_finalize (GObject * obj)
{
	WidgetsCalendarCalendarDay * self;
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_CALENDAR_TYPE_CALENDAR_DAY, WidgetsCalendarCalendarDay);
#line 32 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	_g_object_unref0 (self->priv->label);
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	G_OBJECT_CLASS (widgets_calendar_calendar_day_parent_class)->finalize (obj);
#line 404 "CalendarDay.c"
}


GType
widgets_calendar_calendar_day_get_type (void)
{
	static volatile gsize widgets_calendar_calendar_day_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_calendar_calendar_day_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsCalendarCalendarDayClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_calendar_calendar_day_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsCalendarCalendarDay), 0, (GInstanceInitFunc) widgets_calendar_calendar_day_instance_init, NULL };
		GType widgets_calendar_calendar_day_type_id;
		widgets_calendar_calendar_day_type_id = g_type_register_static (gtk_event_box_get_type (), "WidgetsCalendarCalendarDay", &g_define_type_info, 0);
		g_once_init_leave (&widgets_calendar_calendar_day_type_id__volatile, widgets_calendar_calendar_day_type_id);
	}
	return widgets_calendar_calendar_day_type_id__volatile;
}


static void
_vala_widgets_calendar_calendar_day_get_property (GObject * object,
                                                  guint property_id,
                                                  GValue * value,
                                                  GParamSpec * pspec)
{
	WidgetsCalendarCalendarDay * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_CALENDAR_TYPE_CALENDAR_DAY, WidgetsCalendarCalendarDay);
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		case WIDGETS_CALENDAR_CALENDAR_DAY_DAY_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		g_value_set_int (value, widgets_calendar_calendar_day_get_day (self));
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		break;
#line 438 "CalendarDay.c"
		default:
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		break;
#line 444 "CalendarDay.c"
	}
}


static void
_vala_widgets_calendar_calendar_day_set_property (GObject * object,
                                                  guint property_id,
                                                  const GValue * value,
                                                  GParamSpec * pspec)
{
	WidgetsCalendarCalendarDay * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_CALENDAR_TYPE_CALENDAR_DAY, WidgetsCalendarCalendarDay);
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		case WIDGETS_CALENDAR_CALENDAR_DAY_DAY_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		widgets_calendar_calendar_day_set_day (self, g_value_get_int (value));
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		break;
#line 465 "CalendarDay.c"
		default:
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarDay.vala"
		break;
#line 471 "CalendarDay.c"
	}
}



