/* TaskNew.c generated by valac 0.40.11, the Vala compiler
 * generated from TaskNew.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <granite.h>
#include <glib/gi18n-lib.h>
#include <sqlite3.h>
#include <gdk/gdk.h>


#define WIDGETS_TYPE_TASK_NEW (widgets_task_new_get_type ())
#define WIDGETS_TASK_NEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TASK_NEW, WidgetsTaskNew))
#define WIDGETS_TASK_NEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TASK_NEW, WidgetsTaskNewClass))
#define WIDGETS_IS_TASK_NEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TASK_NEW))
#define WIDGETS_IS_TASK_NEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TASK_NEW))
#define WIDGETS_TASK_NEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TASK_NEW, WidgetsTaskNewClass))

typedef struct _WidgetsTaskNew WidgetsTaskNew;
typedef struct _WidgetsTaskNewClass WidgetsTaskNewClass;
typedef struct _WidgetsTaskNewPrivate WidgetsTaskNewPrivate;

#define WIDGETS_TYPE_WHEN_BUTTON (widgets_when_button_get_type ())
#define WIDGETS_WHEN_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButton))
#define WIDGETS_WHEN_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButtonClass))
#define WIDGETS_IS_WHEN_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_WHEN_BUTTON))
#define WIDGETS_IS_WHEN_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_WHEN_BUTTON))
#define WIDGETS_WHEN_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButtonClass))

typedef struct _WidgetsWhenButton WidgetsWhenButton;
typedef struct _WidgetsWhenButtonClass WidgetsWhenButtonClass;
enum  {
	WIDGETS_TASK_NEW_0_PROPERTY,
	WIDGETS_TASK_NEW_IS_INBOX_PROPERTY,
	WIDGETS_TASK_NEW_PROJECT_ID_PROPERTY,
	WIDGETS_TASK_NEW_WHEN_DATETIME_PROPERTY,
	WIDGETS_TASK_NEW_NUM_PROPERTIES
};
static GParamSpec* widgets_task_new_properties[WIDGETS_TASK_NEW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define WIDGETS_TYPE_LABEL_CHILD (widgets_label_child_get_type ())
#define WIDGETS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChild))
#define WIDGETS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChildClass))
#define WIDGETS_IS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_LABEL_CHILD))
#define WIDGETS_IS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_LABEL_CHILD))
#define WIDGETS_LABEL_CHILD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChildClass))

typedef struct _WidgetsLabelChild WidgetsLabelChild;
typedef struct _WidgetsLabelChildClass WidgetsLabelChildClass;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
typedef struct _ObjectsLabelPrivate ObjectsLabelPrivate;

#define OBJECTS_TYPE_TASK (objects_task_get_type ())
#define OBJECTS_TASK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TASK, ObjectsTask))
#define OBJECTS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TASK, ObjectsTaskClass))
#define OBJECTS_IS_TASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TASK))
#define OBJECTS_IS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TASK))
#define OBJECTS_TASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TASK, ObjectsTaskClass))

typedef struct _ObjectsTask ObjectsTask;
typedef struct _ObjectsTaskClass ObjectsTaskClass;
typedef struct _ObjectsTaskPrivate ObjectsTaskPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _WidgetsWhenButtonPrivate WidgetsWhenButtonPrivate;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;

#define SERVICES_TYPE_NOTIFICATIONS (services_notifications_get_type ())
#define SERVICES_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotifications))
#define SERVICES_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))
#define SERVICES_IS_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_IS_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_NOTIFICATIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))

typedef struct _ServicesNotifications ServicesNotifications;
typedef struct _ServicesNotificationsClass ServicesNotificationsClass;

#define WIDGETS_TYPE_CHECK_ROW (widgets_check_row_get_type ())
#define WIDGETS_CHECK_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_CHECK_ROW, WidgetsCheckRow))
#define WIDGETS_CHECK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_CHECK_ROW, WidgetsCheckRowClass))
#define WIDGETS_IS_CHECK_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_CHECK_ROW))
#define WIDGETS_IS_CHECK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_CHECK_ROW))
#define WIDGETS_CHECK_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_CHECK_ROW, WidgetsCheckRowClass))

typedef struct _WidgetsCheckRow WidgetsCheckRow;
typedef struct _WidgetsCheckRowClass WidgetsCheckRowClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define SERVICES_TYPE_SIGNALS (services_signals_get_type ())
#define SERVICES_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_SIGNALS, ServicesSignals))
#define SERVICES_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_SIGNALS, ServicesSignalsClass))
#define SERVICES_IS_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_SIGNALS))
#define SERVICES_IS_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_SIGNALS))
#define SERVICES_SIGNALS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_SIGNALS, ServicesSignalsClass))

typedef struct _ServicesSignals ServicesSignals;
typedef struct _ServicesSignalsClass ServicesSignalsClass;
#define _objects_task_unref0(var) ((var == NULL) ? NULL : (var = (objects_task_unref (var), NULL)))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
typedef struct _Block61Data Block61Data;

#define WIDGETS_TYPE_LABEL_BUTTON (widgets_label_button_get_type ())
#define WIDGETS_LABEL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButton))
#define WIDGETS_LABEL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButtonClass))
#define WIDGETS_IS_LABEL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_LABEL_BUTTON))
#define WIDGETS_IS_LABEL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_LABEL_BUTTON))
#define WIDGETS_LABEL_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButtonClass))

typedef struct _WidgetsLabelButton WidgetsLabelButton;
typedef struct _WidgetsLabelButtonClass WidgetsLabelButtonClass;
enum  {
	WIDGETS_TASK_NEW_ON_SIGNAL_CLOSE_SIGNAL,
	WIDGETS_TASK_NEW_NUM_SIGNALS
};
static guint widgets_task_new_signals[WIDGETS_TASK_NEW_NUM_SIGNALS] = {0};

struct _WidgetsTaskNew {
	GtkRevealer parent_instance;
	WidgetsTaskNewPrivate * priv;
	GtkEntry* name_entry;
	WidgetsWhenButton* when_button;
};

struct _WidgetsTaskNewClass {
	GtkRevealerClass parent_class;
};

struct _WidgetsTaskNewPrivate {
	GtkFlowBox* labels_flowbox;
	GtkTextView* note_view;
	GtkButton* close_button;
	GtkListBox* checklist;
	gboolean _is_inbox;
	gint _project_id;
};

struct _ObjectsLabel {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsLabelPrivate * priv;
	gint id;
	gchar* name;
	gchar* color;
};

struct _ObjectsLabelClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsLabel *self);
};

struct _ObjectsTask {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsTaskPrivate * priv;
	gint id;
	gint checked;
	gint project_id;
	gint list_id;
	gint task_order;
	gint is_inbox;
	gint has_reminder;
	gint sidebar_width;
	gint was_notified;
	gchar* content;
	gchar* note;
	gchar* when_date_utc;
	gchar* reminder_time;
	gchar* labels;
	gchar* checklist;
};

struct _ObjectsTaskClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsTask *self);
};

struct _WidgetsWhenButton {
	GtkToggleButton parent_instance;
	WidgetsWhenButtonPrivate * priv;
	gboolean has_when;
	gboolean has_reminder;
	GDateTime* reminder_datetime;
	GDateTime* when_datetime;
};

struct _WidgetsWhenButtonClass {
	GtkToggleButtonClass parent_class;
};

struct _Block61Data {
	int _ref_count_;
	WidgetsTaskNew* self;
	GtkLabel* note_view_placeholder_label;
	GtkEntry* checklist_entry;
	GtkRevealer* labels_flowbox_revealer;
	GtkButton* submit_task_button;
};


static gpointer widgets_task_new_parent_class = NULL;
extern Utils* application_utils;
extern ServicesNotifications* application_notification;
extern ServicesDatabase* application_database;
extern ServicesSignals* application_signals;

GType widgets_task_new_get_type (void) G_GNUC_CONST;
GType widgets_when_button_get_type (void) G_GNUC_CONST;
#define WIDGETS_TASK_NEW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_TASK_NEW, WidgetsTaskNewPrivate))
WidgetsTaskNew* widgets_task_new_new (gboolean _is_inbox,
                                      gint _project_id);
WidgetsTaskNew* widgets_task_new_construct (GType object_type,
                                            gboolean _is_inbox,
                                            gint _project_id);
static gboolean widgets_task_new_is_repeted (WidgetsTaskNew* self,
                                      gint id);
GType widgets_label_child_get_type (void) G_GNUC_CONST;
gpointer objects_label_ref (gpointer instance);
void objects_label_unref (gpointer instance);
GParamSpec* objects_param_spec_label (const gchar* name,
                                      const gchar* nick,
                                      const gchar* blurb,
                                      GType object_type,
                                      GParamFlags flags);
void objects_value_set_label (GValue* value,
                              gpointer v_object);
void objects_value_take_label (GValue* value,
                               gpointer v_object);
gpointer objects_value_get_label (const GValue* value);
GType objects_label_get_type (void) G_GNUC_CONST;
ObjectsLabel* widgets_label_child_get_label (WidgetsLabelChild* self);
static gboolean widgets_task_new_is_empty (WidgetsTaskNew* self,
                                    GtkFlowBox* flowbox);
static void widgets_task_new_add_task (WidgetsTaskNew* self);
gpointer objects_task_ref (gpointer instance);
void objects_task_unref (gpointer instance);
GParamSpec* objects_param_spec_task (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void objects_value_set_task (GValue* value,
                             gpointer v_object);
void objects_value_take_task (GValue* value,
                              gpointer v_object);
gpointer objects_value_get_task (const GValue* value);
GType objects_task_get_type (void) G_GNUC_CONST;
ObjectsTask* objects_task_new (gint id,
                               gint checked,
                               gint project_id,
                               gint list_id,
                               gint task_order,
                               gint is_inbox,
                               gint has_reminder,
                               gint sidebar_width,
                               gint was_notified,
                               const gchar* content,
                               const gchar* note,
                               const gchar* when_date_utc,
                               const gchar* reminder_time,
                               const gchar* labels,
                               const gchar* checklist);
ObjectsTask* objects_task_construct (GType object_type,
                                     gint id,
                                     gint checked,
                                     gint project_id,
                                     gint list_id,
                                     gint task_order,
                                     gint is_inbox,
                                     gint has_reminder,
                                     gint sidebar_width,
                                     gint was_notified,
                                     const gchar* content,
                                     const gchar* note,
                                     const gchar* when_date_utc,
                                     const gchar* reminder_time,
                                     const gchar* labels,
                                     const gchar* checklist);
gint widgets_task_new_get_project_id (WidgetsTaskNew* self);
gboolean widgets_task_new_get_is_inbox (WidgetsTaskNew* self);
GType utils_get_type (void) G_GNUC_CONST;
gboolean utils_is_today (Utils* self,
                         GDateTime* date_1);
gboolean utils_is_tomorrow (Utils* self,
                            GDateTime* date_1);
GType services_notifications_get_type (void) G_GNUC_CONST;
GType widgets_check_row_get_type (void) G_GNUC_CONST;
gchar* widgets_check_row_get_check (WidgetsCheckRow* self);
GType services_database_get_type (void) G_GNUC_CONST;
gint services_database_add_task (ServicesDatabase* self,
                                 ObjectsTask* task);
void widgets_when_button_clear (WidgetsWhenButton* self);
ObjectsTask* services_database_get_last_task (ServicesDatabase* self);
GType services_signals_get_type (void) G_GNUC_CONST;
static void widgets_task_new_set_is_inbox (WidgetsTaskNew* self,
                                    gboolean value);
static void widgets_task_new_set_project_id (WidgetsTaskNew* self,
                                      gint value);
void widgets_task_new_set_when_datetime (WidgetsTaskNew* self,
                                         GDateTime* value);
void widgets_when_button_set_date (WidgetsWhenButton* self,
                                   GDateTime* date,
                                   gboolean _has_reminder,
                                   GDateTime* _reminder_datetime);
static GObject * widgets_task_new_constructor (GType type,
                                        guint n_construct_properties,
                                        GObjectConstructParam * construct_properties);
static Block61Data* block61_data_ref (Block61Data* _data61_);
static void block61_data_unref (void * _userdata_);
WidgetsWhenButton* widgets_when_button_new (void);
WidgetsWhenButton* widgets_when_button_construct (GType object_type);
GType widgets_label_button_get_type (void) G_GNUC_CONST;
WidgetsLabelButton* widgets_label_button_new (void);
WidgetsLabelButton* widgets_label_button_construct (GType object_type);
static void _widgets_task_new___lambda238_ (WidgetsTaskNew* self);
static void __widgets_task_new___lambda238__gtk_button_clicked (GtkButton* _sender,
                                                         gpointer self);
static void _widgets_task_new_add_task_gtk_entry_activate (GtkEntry* _sender,
                                                    gpointer self);
static void _widgets_task_new___lambda239_ (Block61Data* _data61_);
gchar* utils_first_letter_to_up (Utils* self,
                                 const gchar* text);
static void __widgets_task_new___lambda239__gtk_editable_changed (GtkEditable* _sender,
                                                           gpointer self);
static gboolean _widgets_task_new___lambda240_ (WidgetsTaskNew* self);
static gboolean __widgets_task_new___lambda240__gtk_widget_focus_in_event (GtkWidget* _sender,
                                                                    GdkEventFocus* event,
                                                                    gpointer self);
static gboolean _widgets_task_new___lambda241_ (WidgetsTaskNew* self);
static gboolean __widgets_task_new___lambda241__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                     GdkEventFocus* event,
                                                                     gpointer self);
static void _widgets_task_new___lambda242_ (WidgetsTaskNew* self,
                                     GtkEntryIconPosition pos,
                                     GdkEventButton* event);
static void __widgets_task_new___lambda242__gtk_entry_icon_press (GtkEntry* _sender,
                                                           GtkEntryIconPosition icon_pos,
                                                           GdkEventButton* event,
                                                           gpointer self);
static void _widgets_task_new_add_task_gtk_button_clicked (GtkButton* _sender,
                                                    gpointer self);
static gboolean _widgets_task_new___lambda243_ (WidgetsTaskNew* self,
                                         GdkEventKey* key);
static gboolean __widgets_task_new___lambda243__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                       GdkEventKey* event,
                                                                       gpointer self);
static gboolean _widgets_task_new___lambda244_ (WidgetsTaskNew* self,
                                         GdkEventKey* key);
static gboolean __widgets_task_new___lambda244__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                       GdkEventKey* event,
                                                                       gpointer self);
static void _widgets_task_new___lambda245_ (Block61Data* _data61_,
                                     ObjectsLabel* label);
WidgetsLabelChild* widgets_label_child_new (ObjectsLabel* _label);
WidgetsLabelChild* widgets_label_child_construct (GType object_type,
                                                  ObjectsLabel* _label);
static void __widgets_task_new___lambda245__widgets_label_button_on_selected_label (WidgetsLabelButton* _sender,
                                                                             ObjectsLabel* label,
                                                                             gpointer self);
static void _widgets_task_new___lambda246_ (Block61Data* _data61_,
                                     GtkWidget* widget);
static void __widgets_task_new___lambda246__gtk_container_remove (GtkContainer* _sender,
                                                           GtkWidget* widget,
                                                           gpointer self);
static void _widgets_task_new___lambda247_ (Block61Data* _data61_);
WidgetsCheckRow* widgets_check_row_new (const gchar* _name,
                                        gboolean _checked);
WidgetsCheckRow* widgets_check_row_construct (GType object_type,
                                              const gchar* _name,
                                              gboolean _checked);
static void __widgets_task_new___lambda247__gtk_entry_activate (GtkEntry* _sender,
                                                         gpointer self);
static void _widgets_task_new___lambda248_ (Block61Data* _data61_);
static void __widgets_task_new___lambda248__gtk_editable_changed (GtkEditable* _sender,
                                                           gpointer self);
static gboolean _widgets_task_new___lambda249_ (Block61Data* _data61_);
static gboolean __widgets_task_new___lambda249__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                     GdkEventFocus* event,
                                                                     gpointer self);
static gboolean _widgets_task_new___lambda250_ (Block61Data* _data61_);
static gboolean __widgets_task_new___lambda250__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                     GdkEventFocus* event,
                                                                     gpointer self);
static gboolean _widgets_task_new___lambda251_ (Block61Data* _data61_);
static gboolean __widgets_task_new___lambda251__gtk_widget_focus_in_event (GtkWidget* _sender,
                                                                    GdkEventFocus* event,
                                                                    gpointer self);
static void widgets_task_new_finalize (GObject * obj);
static void _vala_widgets_task_new_get_property (GObject * object,
                                          guint property_id,
                                          GValue * value,
                                          GParamSpec * pspec);
static void _vala_widgets_task_new_set_property (GObject * object,
                                          guint property_id,
                                          const GValue * value,
                                          GParamSpec * pspec);


WidgetsTaskNew*
widgets_task_new_construct (GType object_type,
                            gboolean _is_inbox,
                            gint _project_id)
{
	WidgetsTaskNew * self = NULL;
#line 40 "/run/build/planner/src/Widgets/TaskNew.vala"
	self = (WidgetsTaskNew*) g_object_new (object_type, "is-inbox", _is_inbox, "project-id", _project_id, "margin-start", 18, "margin-end", 9, "reveal-child", FALSE, "transition-type", GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN, NULL);
#line 39 "/run/build/planner/src/Widgets/TaskNew.vala"
	return self;
#line 461 "TaskNew.c"
}


WidgetsTaskNew*
widgets_task_new_new (gboolean _is_inbox,
                      gint _project_id)
{
#line 39 "/run/build/planner/src/Widgets/TaskNew.vala"
	return widgets_task_new_construct (WIDGETS_TYPE_TASK_NEW, _is_inbox, _project_id);
#line 471 "TaskNew.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 267 "/run/build/planner/src/Widgets/TaskNew.vala"
	return self ? g_object_ref (self) : NULL;
#line 480 "TaskNew.c"
}


static gboolean
widgets_task_new_is_repeted (WidgetsTaskNew* self,
                             gint id)
{
	gboolean result = FALSE;
	GtkFlowBox* _tmp0_;
	GList* _tmp1_;
#line 266 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 267 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = self->priv->labels_flowbox;
#line 267 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 497 "TaskNew.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 267 "/run/build/planner/src/Widgets/TaskNew.vala"
		element_collection = _tmp1_;
#line 267 "/run/build/planner/src/Widgets/TaskNew.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 505 "TaskNew.c"
			GtkWidget* _tmp2_;
			GtkWidget* element = NULL;
#line 267 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp2_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 267 "/run/build/planner/src/Widgets/TaskNew.vala"
			element = _tmp2_;
#line 512 "TaskNew.c"
			{
				WidgetsLabelChild* child = NULL;
				GtkWidget* _tmp3_;
				WidgetsLabelChild* _tmp4_;
				WidgetsLabelChild* _tmp5_;
				ObjectsLabel* _tmp6_;
				ObjectsLabel* _tmp7_;
				gint _tmp8_;
#line 268 "/run/build/planner/src/Widgets/TaskNew.vala"
				_tmp3_ = element;
#line 268 "/run/build/planner/src/Widgets/TaskNew.vala"
				_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, WIDGETS_TYPE_LABEL_CHILD) ? ((WidgetsLabelChild*) _tmp3_) : NULL);
#line 268 "/run/build/planner/src/Widgets/TaskNew.vala"
				child = _tmp4_;
#line 269 "/run/build/planner/src/Widgets/TaskNew.vala"
				_tmp5_ = child;
#line 269 "/run/build/planner/src/Widgets/TaskNew.vala"
				_tmp6_ = widgets_label_child_get_label (_tmp5_);
#line 269 "/run/build/planner/src/Widgets/TaskNew.vala"
				_tmp7_ = _tmp6_;
#line 269 "/run/build/planner/src/Widgets/TaskNew.vala"
				_tmp8_ = _tmp7_->id;
#line 269 "/run/build/planner/src/Widgets/TaskNew.vala"
				if (_tmp8_ == id) {
#line 270 "/run/build/planner/src/Widgets/TaskNew.vala"
					result = TRUE;
#line 270 "/run/build/planner/src/Widgets/TaskNew.vala"
					_g_object_unref0 (child);
#line 270 "/run/build/planner/src/Widgets/TaskNew.vala"
					_g_object_unref0 (element);
#line 270 "/run/build/planner/src/Widgets/TaskNew.vala"
					(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 270 "/run/build/planner/src/Widgets/TaskNew.vala"
					return result;
#line 547 "TaskNew.c"
				}
#line 267 "/run/build/planner/src/Widgets/TaskNew.vala"
				_g_object_unref0 (child);
#line 267 "/run/build/planner/src/Widgets/TaskNew.vala"
				_g_object_unref0 (element);
#line 553 "TaskNew.c"
			}
		}
#line 267 "/run/build/planner/src/Widgets/TaskNew.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 558 "TaskNew.c"
	}
#line 274 "/run/build/planner/src/Widgets/TaskNew.vala"
	result = FALSE;
#line 274 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 564 "TaskNew.c"
}


static gboolean
widgets_task_new_is_empty (WidgetsTaskNew* self,
                           GtkFlowBox* flowbox)
{
	gboolean result = FALSE;
	gint l = 0;
	GList* _tmp0_;
	gint _tmp3_;
#line 277 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 277 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_return_val_if_fail (flowbox != NULL, FALSE);
#line 278 "/run/build/planner/src/Widgets/TaskNew.vala"
	l = 0;
#line 279 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = gtk_container_get_children ((GtkContainer*) flowbox);
#line 584 "TaskNew.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 279 "/run/build/planner/src/Widgets/TaskNew.vala"
		element_collection = _tmp0_;
#line 279 "/run/build/planner/src/Widgets/TaskNew.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 592 "TaskNew.c"
			GtkWidget* _tmp1_;
			GtkWidget* element = NULL;
#line 279 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp1_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 279 "/run/build/planner/src/Widgets/TaskNew.vala"
			element = _tmp1_;
#line 599 "TaskNew.c"
			{
				gint _tmp2_;
#line 280 "/run/build/planner/src/Widgets/TaskNew.vala"
				_tmp2_ = l;
#line 280 "/run/build/planner/src/Widgets/TaskNew.vala"
				l = _tmp2_ + 1;
#line 279 "/run/build/planner/src/Widgets/TaskNew.vala"
				_g_object_unref0 (element);
#line 608 "TaskNew.c"
			}
		}
#line 279 "/run/build/planner/src/Widgets/TaskNew.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 613 "TaskNew.c"
	}
#line 283 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp3_ = l;
#line 283 "/run/build/planner/src/Widgets/TaskNew.vala"
	if (_tmp3_ <= 0) {
#line 284 "/run/build/planner/src/Widgets/TaskNew.vala"
		result = TRUE;
#line 284 "/run/build/planner/src/Widgets/TaskNew.vala"
		return result;
#line 623 "TaskNew.c"
	} else {
#line 286 "/run/build/planner/src/Widgets/TaskNew.vala"
		result = FALSE;
#line 286 "/run/build/planner/src/Widgets/TaskNew.vala"
		return result;
#line 629 "TaskNew.c"
	}
}


static gchar*
g_date_time_to_string (GDateTime* self)
{
	gchar* result = NULL;
	gchar* _tmp0_;
#line 3009 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 3010 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = g_date_time_format (self, "%FT%H:%M:%S%z");
#line 3010 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _tmp0_;
#line 3010 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 647 "TaskNew.c"
}


static void
widgets_task_new_add_task (WidgetsTaskNew* self)
{
	GtkEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 290 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_return_if_fail (self != NULL);
#line 291 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = self->name_entry;
#line 291 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp1_ = gtk_entry_get_text (_tmp0_);
#line 291 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp2_ = _tmp1_;
#line 291 "/run/build/planner/src/Widgets/TaskNew.vala"
	if (g_strcmp0 (_tmp2_, "") != 0) {
#line 667 "TaskNew.c"
		ObjectsTask* task = NULL;
		ObjectsTask* _tmp3_;
		ObjectsTask* _tmp4_;
		gint _tmp5_;
		ObjectsTask* _tmp6_;
		GtkEntry* _tmp7_;
		const gchar* _tmp8_;
		const gchar* _tmp9_;
		gchar* _tmp10_;
		ObjectsTask* _tmp11_;
		GtkTextView* _tmp12_;
		GtkTextBuffer* _tmp13_;
		GtkTextBuffer* _tmp14_;
		gchar* _tmp15_;
		gchar* _tmp16_;
		gboolean _tmp17_;
		WidgetsWhenButton* _tmp20_;
		gboolean _tmp21_;
		WidgetsWhenButton* _tmp26_;
		gboolean _tmp27_;
		GtkFlowBox* _tmp60_;
		GList* _tmp61_;
		GtkListBox* _tmp77_;
		GList* _tmp78_;
		ServicesDatabase* _tmp89_;
		ObjectsTask* _tmp90_;
#line 292 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp3_ = objects_task_new (0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "", "", "", "");
#line 292 "/run/build/planner/src/Widgets/TaskNew.vala"
		task = _tmp3_;
#line 294 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp4_ = task;
#line 294 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp5_ = self->priv->_project_id;
#line 294 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp4_->project_id = _tmp5_;
#line 295 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp6_ = task;
#line 295 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp7_ = self->name_entry;
#line 295 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp8_ = gtk_entry_get_text (_tmp7_);
#line 295 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp9_ = _tmp8_;
#line 295 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp10_ = g_strdup (_tmp9_);
#line 295 "/run/build/planner/src/Widgets/TaskNew.vala"
		_g_free0 (_tmp6_->content);
#line 295 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp6_->content = _tmp10_;
#line 296 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp11_ = task;
#line 296 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp12_ = self->priv->note_view;
#line 296 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp13_ = gtk_text_view_get_buffer (_tmp12_);
#line 296 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp14_ = _tmp13_;
#line 296 "/run/build/planner/src/Widgets/TaskNew.vala"
		g_object_get (_tmp14_, "text", &_tmp15_, NULL);
#line 296 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp16_ = _tmp15_;
#line 296 "/run/build/planner/src/Widgets/TaskNew.vala"
		_g_free0 (_tmp11_->note);
#line 296 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp11_->note = _tmp16_;
#line 298 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp17_ = self->priv->_is_inbox;
#line 298 "/run/build/planner/src/Widgets/TaskNew.vala"
		if (_tmp17_) {
#line 738 "TaskNew.c"
			ObjectsTask* _tmp18_;
#line 299 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp18_ = task;
#line 299 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp18_->is_inbox = 1;
#line 744 "TaskNew.c"
		} else {
			ObjectsTask* _tmp19_;
#line 301 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp19_ = task;
#line 301 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp19_->is_inbox = 0;
#line 751 "TaskNew.c"
		}
#line 304 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp20_ = self->when_button;
#line 304 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp21_ = _tmp20_->has_when;
#line 304 "/run/build/planner/src/Widgets/TaskNew.vala"
		if (_tmp21_) {
#line 759 "TaskNew.c"
			ObjectsTask* _tmp22_;
			WidgetsWhenButton* _tmp23_;
			GDateTime* _tmp24_;
			gchar* _tmp25_;
#line 305 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp22_ = task;
#line 305 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp23_ = self->when_button;
#line 305 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp24_ = _tmp23_->when_datetime;
#line 305 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp25_ = g_date_time_to_string (_tmp24_);
#line 305 "/run/build/planner/src/Widgets/TaskNew.vala"
			_g_free0 (_tmp22_->when_date_utc);
#line 305 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp22_->when_date_utc = _tmp25_;
#line 776 "TaskNew.c"
		}
#line 308 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp26_ = self->when_button;
#line 308 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp27_ = _tmp26_->has_reminder;
#line 308 "/run/build/planner/src/Widgets/TaskNew.vala"
		if (_tmp27_) {
#line 784 "TaskNew.c"
			ObjectsTask* _tmp28_;
			ObjectsTask* _tmp29_;
			WidgetsWhenButton* _tmp30_;
			GDateTime* _tmp31_;
			gchar* _tmp32_;
			gchar* date = NULL;
			gchar* _tmp33_;
			gchar* time = NULL;
			gchar* _tmp34_;
			gchar* time_format = NULL;
			gchar* _tmp35_;
			WidgetsWhenButton* _tmp36_;
			GDateTime* _tmp37_;
			const gchar* _tmp38_;
			gchar* _tmp39_;
			Utils* _tmp40_;
			WidgetsWhenButton* _tmp41_;
			GDateTime* _tmp42_;
			ServicesNotifications* _tmp53_;
			ObjectsTask* _tmp54_;
			const gchar* _tmp55_;
			const gchar* _tmp56_;
			const gchar* _tmp57_;
			gchar* _tmp58_;
			gchar* _tmp59_;
#line 309 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp28_ = task;
#line 309 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp28_->has_reminder = 1;
#line 310 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp29_ = task;
#line 310 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp30_ = self->when_button;
#line 310 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp31_ = _tmp30_->reminder_datetime;
#line 310 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp32_ = g_date_time_to_string (_tmp31_);
#line 310 "/run/build/planner/src/Widgets/TaskNew.vala"
			_g_free0 (_tmp29_->reminder_time);
#line 310 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp29_->reminder_time = _tmp32_;
#line 313 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp33_ = g_strdup ("");
#line 313 "/run/build/planner/src/Widgets/TaskNew.vala"
			date = _tmp33_;
#line 314 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp34_ = g_strdup ("");
#line 314 "/run/build/planner/src/Widgets/TaskNew.vala"
			time = _tmp34_;
#line 316 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp35_ = granite_date_time_get_default_time_format (TRUE, FALSE);
#line 316 "/run/build/planner/src/Widgets/TaskNew.vala"
			time_format = _tmp35_;
#line 317 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp36_ = self->when_button;
#line 317 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp37_ = _tmp36_->reminder_datetime;
#line 317 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp38_ = time_format;
#line 317 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp39_ = g_date_time_format (_tmp37_, _tmp38_);
#line 317 "/run/build/planner/src/Widgets/TaskNew.vala"
			_g_free0 (time);
#line 317 "/run/build/planner/src/Widgets/TaskNew.vala"
			time = _tmp39_;
#line 319 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp40_ = application_utils;
#line 319 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp41_ = self->when_button;
#line 319 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp42_ = _tmp41_->when_datetime;
#line 319 "/run/build/planner/src/Widgets/TaskNew.vala"
			if (utils_is_today (_tmp40_, _tmp42_)) {
#line 858 "TaskNew.c"
				gchar* _tmp43_;
#line 320 "/run/build/planner/src/Widgets/TaskNew.vala"
				_tmp43_ = g_utf8_strdown (_ ("Today"), (gssize) -1);
#line 320 "/run/build/planner/src/Widgets/TaskNew.vala"
				_g_free0 (date);
#line 320 "/run/build/planner/src/Widgets/TaskNew.vala"
				date = _tmp43_;
#line 866 "TaskNew.c"
			} else {
				Utils* _tmp44_;
				WidgetsWhenButton* _tmp45_;
				GDateTime* _tmp46_;
#line 321 "/run/build/planner/src/Widgets/TaskNew.vala"
				_tmp44_ = application_utils;
#line 321 "/run/build/planner/src/Widgets/TaskNew.vala"
				_tmp45_ = self->when_button;
#line 321 "/run/build/planner/src/Widgets/TaskNew.vala"
				_tmp46_ = _tmp45_->when_datetime;
#line 321 "/run/build/planner/src/Widgets/TaskNew.vala"
				if (utils_is_tomorrow (_tmp44_, _tmp46_)) {
#line 879 "TaskNew.c"
					gchar* _tmp47_;
#line 322 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp47_ = g_utf8_strdown (_ ("Tomorrow"), (gssize) -1);
#line 322 "/run/build/planner/src/Widgets/TaskNew.vala"
					_g_free0 (date);
#line 322 "/run/build/planner/src/Widgets/TaskNew.vala"
					date = _tmp47_;
#line 887 "TaskNew.c"
				} else {
					gchar* date_format = NULL;
					gchar* _tmp48_;
					WidgetsWhenButton* _tmp49_;
					GDateTime* _tmp50_;
					const gchar* _tmp51_;
					gchar* _tmp52_;
#line 324 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp48_ = granite_date_time_get_default_date_format (FALSE, TRUE, FALSE);
#line 324 "/run/build/planner/src/Widgets/TaskNew.vala"
					date_format = _tmp48_;
#line 325 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp49_ = self->when_button;
#line 325 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp50_ = _tmp49_->when_datetime;
#line 325 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp51_ = date_format;
#line 325 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp52_ = g_date_time_format (_tmp50_, _tmp51_);
#line 325 "/run/build/planner/src/Widgets/TaskNew.vala"
					_g_free0 (date);
#line 325 "/run/build/planner/src/Widgets/TaskNew.vala"
					date = _tmp52_;
#line 321 "/run/build/planner/src/Widgets/TaskNew.vala"
					_g_free0 (date_format);
#line 913 "TaskNew.c"
				}
			}
#line 328 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp53_ = application_notification;
#line 328 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp54_ = task;
#line 328 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp55_ = _tmp54_->content;
#line 328 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp56_ = date;
#line 328 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp57_ = time;
#line 328 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp58_ = g_strdup_printf ("You'll be notified %s at %s", _tmp56_, _tmp57_);
#line 328 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp59_ = _tmp58_;
#line 328 "/run/build/planner/src/Widgets/TaskNew.vala"
			g_signal_emit_by_name (_tmp53_, "send-local-notification", _tmp55_, _ (_tmp59_), "preferences-system-time", 5, FALSE);
#line 328 "/run/build/planner/src/Widgets/TaskNew.vala"
			_g_free0 (_tmp59_);
#line 308 "/run/build/planner/src/Widgets/TaskNew.vala"
			_g_free0 (time_format);
#line 308 "/run/build/planner/src/Widgets/TaskNew.vala"
			_g_free0 (time);
#line 308 "/run/build/planner/src/Widgets/TaskNew.vala"
			_g_free0 (date);
#line 940 "TaskNew.c"
		}
#line 336 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp60_ = self->priv->labels_flowbox;
#line 336 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp61_ = gtk_container_get_children ((GtkContainer*) _tmp60_);
#line 946 "TaskNew.c"
		{
			GList* element_collection = NULL;
			GList* element_it = NULL;
#line 336 "/run/build/planner/src/Widgets/TaskNew.vala"
			element_collection = _tmp61_;
#line 336 "/run/build/planner/src/Widgets/TaskNew.vala"
			for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 954 "TaskNew.c"
				GtkWidget* _tmp62_;
				GtkWidget* element = NULL;
#line 336 "/run/build/planner/src/Widgets/TaskNew.vala"
				_tmp62_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 336 "/run/build/planner/src/Widgets/TaskNew.vala"
				element = _tmp62_;
#line 961 "TaskNew.c"
				{
					WidgetsLabelChild* child = NULL;
					GtkWidget* _tmp63_;
					WidgetsLabelChild* _tmp64_;
					ObjectsTask* _tmp65_;
					ObjectsTask* _tmp66_;
					const gchar* _tmp67_;
					WidgetsLabelChild* _tmp68_;
					ObjectsLabel* _tmp69_;
					ObjectsLabel* _tmp70_;
					gint _tmp71_;
					gchar* _tmp72_;
					gchar* _tmp73_;
					gchar* _tmp74_;
					gchar* _tmp75_;
					gchar* _tmp76_;
#line 337 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp63_ = element;
#line 337 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp64_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp63_, WIDGETS_TYPE_LABEL_CHILD) ? ((WidgetsLabelChild*) _tmp63_) : NULL);
#line 337 "/run/build/planner/src/Widgets/TaskNew.vala"
					child = _tmp64_;
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp65_ = task;
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp66_ = task;
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp67_ = _tmp66_->labels;
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp68_ = child;
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp69_ = widgets_label_child_get_label (_tmp68_);
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp70_ = _tmp69_;
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp71_ = _tmp70_->id;
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp72_ = g_strdup_printf ("%i", _tmp71_);
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp73_ = _tmp72_;
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp74_ = g_strconcat (_tmp67_, _tmp73_, NULL);
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp75_ = _tmp74_;
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp76_ = g_strconcat (_tmp75_, ";", NULL);
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_g_free0 (_tmp65_->labels);
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp65_->labels = _tmp76_;
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_g_free0 (_tmp75_);
#line 338 "/run/build/planner/src/Widgets/TaskNew.vala"
					_g_free0 (_tmp73_);
#line 336 "/run/build/planner/src/Widgets/TaskNew.vala"
					_g_object_unref0 (child);
#line 336 "/run/build/planner/src/Widgets/TaskNew.vala"
					_g_object_unref0 (element);
#line 1020 "TaskNew.c"
				}
			}
#line 336 "/run/build/planner/src/Widgets/TaskNew.vala"
			(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 1025 "TaskNew.c"
		}
#line 341 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp77_ = self->priv->checklist;
#line 341 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp78_ = gtk_container_get_children ((GtkContainer*) _tmp77_);
#line 1031 "TaskNew.c"
		{
			GList* element_collection = NULL;
			GList* element_it = NULL;
#line 341 "/run/build/planner/src/Widgets/TaskNew.vala"
			element_collection = _tmp78_;
#line 341 "/run/build/planner/src/Widgets/TaskNew.vala"
			for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 1039 "TaskNew.c"
				GtkWidget* _tmp79_;
				GtkWidget* element = NULL;
#line 341 "/run/build/planner/src/Widgets/TaskNew.vala"
				_tmp79_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 341 "/run/build/planner/src/Widgets/TaskNew.vala"
				element = _tmp79_;
#line 1046 "TaskNew.c"
				{
					WidgetsCheckRow* row = NULL;
					GtkWidget* _tmp80_;
					WidgetsCheckRow* _tmp81_;
					ObjectsTask* _tmp82_;
					ObjectsTask* _tmp83_;
					const gchar* _tmp84_;
					WidgetsCheckRow* _tmp85_;
					gchar* _tmp86_;
					gchar* _tmp87_;
					gchar* _tmp88_;
#line 342 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp80_ = element;
#line 342 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp81_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp80_, WIDGETS_TYPE_CHECK_ROW) ? ((WidgetsCheckRow*) _tmp80_) : NULL);
#line 342 "/run/build/planner/src/Widgets/TaskNew.vala"
					row = _tmp81_;
#line 343 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp82_ = task;
#line 343 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp83_ = task;
#line 343 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp84_ = _tmp83_->checklist;
#line 343 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp85_ = row;
#line 343 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp86_ = widgets_check_row_get_check (_tmp85_);
#line 343 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp87_ = _tmp86_;
#line 343 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp88_ = g_strconcat (_tmp84_, _tmp87_, NULL);
#line 343 "/run/build/planner/src/Widgets/TaskNew.vala"
					_g_free0 (_tmp82_->checklist);
#line 343 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp82_->checklist = _tmp88_;
#line 343 "/run/build/planner/src/Widgets/TaskNew.vala"
					_g_free0 (_tmp87_);
#line 341 "/run/build/planner/src/Widgets/TaskNew.vala"
					_g_object_unref0 (row);
#line 341 "/run/build/planner/src/Widgets/TaskNew.vala"
					_g_object_unref0 (element);
#line 1088 "TaskNew.c"
				}
			}
#line 341 "/run/build/planner/src/Widgets/TaskNew.vala"
			(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 1093 "TaskNew.c"
		}
#line 346 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp89_ = application_database;
#line 346 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp90_ = task;
#line 346 "/run/build/planner/src/Widgets/TaskNew.vala"
		if (services_database_add_task (_tmp89_, _tmp90_) == SQLITE_DONE) {
#line 1101 "TaskNew.c"
			GtkEntry* _tmp91_;
			GtkTextView* _tmp92_;
			GtkTextBuffer* _tmp93_;
			GtkTextBuffer* _tmp94_;
			WidgetsWhenButton* _tmp95_;
			GtkFlowBox* _tmp96_;
			GList* _tmp97_;
			GtkListBox* _tmp101_;
			GList* _tmp102_;
			ObjectsTask* _task = NULL;
			ServicesDatabase* _tmp106_;
			ObjectsTask* _tmp107_;
			ServicesSignals* _tmp108_;
			ObjectsTask* _tmp109_;
			gint _tmp110_;
			ObjectsTask* _tmp111_;
			gint _tmp112_;
#line 347 "/run/build/planner/src/Widgets/TaskNew.vala"
			g_signal_emit (self, widgets_task_new_signals[WIDGETS_TASK_NEW_ON_SIGNAL_CLOSE_SIGNAL], 0);
#line 349 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp91_ = self->name_entry;
#line 349 "/run/build/planner/src/Widgets/TaskNew.vala"
			gtk_entry_set_text (_tmp91_, "");
#line 350 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp92_ = self->priv->note_view;
#line 350 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp93_ = gtk_text_view_get_buffer (_tmp92_);
#line 350 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp94_ = _tmp93_;
#line 350 "/run/build/planner/src/Widgets/TaskNew.vala"
			g_object_set (_tmp94_, "text", "", NULL);
#line 351 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp95_ = self->when_button;
#line 351 "/run/build/planner/src/Widgets/TaskNew.vala"
			widgets_when_button_clear (_tmp95_);
#line 353 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp96_ = self->priv->labels_flowbox;
#line 353 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp97_ = gtk_container_get_children ((GtkContainer*) _tmp96_);
#line 1141 "TaskNew.c"
			{
				GList* element_collection = NULL;
				GList* element_it = NULL;
#line 353 "/run/build/planner/src/Widgets/TaskNew.vala"
				element_collection = _tmp97_;
#line 353 "/run/build/planner/src/Widgets/TaskNew.vala"
				for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 1149 "TaskNew.c"
					GtkWidget* _tmp98_;
					GtkWidget* element = NULL;
#line 353 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp98_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 353 "/run/build/planner/src/Widgets/TaskNew.vala"
					element = _tmp98_;
#line 1156 "TaskNew.c"
					{
						GtkFlowBox* _tmp99_;
						GtkWidget* _tmp100_;
#line 354 "/run/build/planner/src/Widgets/TaskNew.vala"
						_tmp99_ = self->priv->labels_flowbox;
#line 354 "/run/build/planner/src/Widgets/TaskNew.vala"
						_tmp100_ = element;
#line 354 "/run/build/planner/src/Widgets/TaskNew.vala"
						gtk_container_remove ((GtkContainer*) _tmp99_, _tmp100_);
#line 353 "/run/build/planner/src/Widgets/TaskNew.vala"
						_g_object_unref0 (element);
#line 1168 "TaskNew.c"
					}
				}
#line 353 "/run/build/planner/src/Widgets/TaskNew.vala"
				(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 1173 "TaskNew.c"
			}
#line 357 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp101_ = self->priv->checklist;
#line 357 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp102_ = gtk_container_get_children ((GtkContainer*) _tmp101_);
#line 1179 "TaskNew.c"
			{
				GList* element_collection = NULL;
				GList* element_it = NULL;
#line 357 "/run/build/planner/src/Widgets/TaskNew.vala"
				element_collection = _tmp102_;
#line 357 "/run/build/planner/src/Widgets/TaskNew.vala"
				for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 1187 "TaskNew.c"
					GtkWidget* _tmp103_;
					GtkWidget* element = NULL;
#line 357 "/run/build/planner/src/Widgets/TaskNew.vala"
					_tmp103_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 357 "/run/build/planner/src/Widgets/TaskNew.vala"
					element = _tmp103_;
#line 1194 "TaskNew.c"
					{
						GtkListBox* _tmp104_;
						GtkWidget* _tmp105_;
#line 358 "/run/build/planner/src/Widgets/TaskNew.vala"
						_tmp104_ = self->priv->checklist;
#line 358 "/run/build/planner/src/Widgets/TaskNew.vala"
						_tmp105_ = element;
#line 358 "/run/build/planner/src/Widgets/TaskNew.vala"
						gtk_container_remove ((GtkContainer*) _tmp104_, _tmp105_);
#line 357 "/run/build/planner/src/Widgets/TaskNew.vala"
						_g_object_unref0 (element);
#line 1206 "TaskNew.c"
					}
				}
#line 357 "/run/build/planner/src/Widgets/TaskNew.vala"
				(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 1211 "TaskNew.c"
			}
#line 361 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp106_ = application_database;
#line 361 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp107_ = services_database_get_last_task (_tmp106_);
#line 361 "/run/build/planner/src/Widgets/TaskNew.vala"
			_task = _tmp107_;
#line 362 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp108_ = application_signals;
#line 362 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp109_ = _task;
#line 362 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp110_ = _tmp109_->id;
#line 362 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp111_ = _task;
#line 362 "/run/build/planner/src/Widgets/TaskNew.vala"
			_tmp112_ = _tmp111_->project_id;
#line 362 "/run/build/planner/src/Widgets/TaskNew.vala"
			g_signal_emit_by_name (_tmp108_, "go-task-page", _tmp110_, _tmp112_);
#line 346 "/run/build/planner/src/Widgets/TaskNew.vala"
			_objects_task_unref0 (_task);
#line 1233 "TaskNew.c"
		}
#line 291 "/run/build/planner/src/Widgets/TaskNew.vala"
		_objects_task_unref0 (task);
#line 1237 "TaskNew.c"
	}
}


gboolean
widgets_task_new_get_is_inbox (WidgetsTaskNew* self)
{
	gboolean result;
	gboolean _tmp0_;
#line 30 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 30 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = self->priv->_is_inbox;
#line 30 "/run/build/planner/src/Widgets/TaskNew.vala"
	result = _tmp0_;
#line 30 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 1255 "TaskNew.c"
}


static void
widgets_task_new_set_is_inbox (WidgetsTaskNew* self,
                               gboolean value)
{
#line 30 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_return_if_fail (self != NULL);
#line 30 "/run/build/planner/src/Widgets/TaskNew.vala"
	if (widgets_task_new_get_is_inbox (self) != value) {
#line 30 "/run/build/planner/src/Widgets/TaskNew.vala"
		self->priv->_is_inbox = value;
#line 30 "/run/build/planner/src/Widgets/TaskNew.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_task_new_properties[WIDGETS_TASK_NEW_IS_INBOX_PROPERTY]);
#line 1271 "TaskNew.c"
	}
}


gint
widgets_task_new_get_project_id (WidgetsTaskNew* self)
{
	gint result;
	gint _tmp0_;
#line 31 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 31 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = self->priv->_project_id;
#line 31 "/run/build/planner/src/Widgets/TaskNew.vala"
	result = _tmp0_;
#line 31 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 1289 "TaskNew.c"
}


static void
widgets_task_new_set_project_id (WidgetsTaskNew* self,
                                 gint value)
{
#line 31 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_return_if_fail (self != NULL);
#line 31 "/run/build/planner/src/Widgets/TaskNew.vala"
	if (widgets_task_new_get_project_id (self) != value) {
#line 31 "/run/build/planner/src/Widgets/TaskNew.vala"
		self->priv->_project_id = value;
#line 31 "/run/build/planner/src/Widgets/TaskNew.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_task_new_properties[WIDGETS_TASK_NEW_PROJECT_ID_PROPERTY]);
#line 1305 "TaskNew.c"
	}
}


void
widgets_task_new_set_when_datetime (WidgetsTaskNew* self,
                                    GDateTime* value)
{
	WidgetsWhenButton* _tmp0_;
	GDateTime* _tmp1_;
	GDateTime* _tmp2_;
#line 33 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_return_if_fail (self != NULL);
#line 34 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = self->when_button;
#line 34 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp1_ = g_date_time_new_now_local ();
#line 34 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp2_ = _tmp1_;
#line 34 "/run/build/planner/src/Widgets/TaskNew.vala"
	widgets_when_button_set_date (_tmp0_, value, FALSE, _tmp2_);
#line 34 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_date_time_unref0 (_tmp2_);
#line 33 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_notify_by_pspec ((GObject *) self, widgets_task_new_properties[WIDGETS_TASK_NEW_WHEN_DATETIME_PROPERTY]);
#line 1331 "TaskNew.c"
}


static Block61Data*
block61_data_ref (Block61Data* _data61_)
{
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_atomic_int_inc (&_data61_->_ref_count_);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	return _data61_;
#line 1342 "TaskNew.c"
}


static void
block61_data_unref (void * _userdata_)
{
	Block61Data* _data61_;
	_data61_ = (Block61Data*) _userdata_;
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	if (g_atomic_int_dec_and_test (&_data61_->_ref_count_)) {
#line 1353 "TaskNew.c"
		WidgetsTaskNew* self;
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
		self = _data61_->self;
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
		_g_object_unref0 (_data61_->submit_task_button);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
		_g_object_unref0 (_data61_->labels_flowbox_revealer);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
		_g_object_unref0 (_data61_->checklist_entry);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
		_g_object_unref0 (_data61_->note_view_placeholder_label);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
		_g_object_unref0 (self);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
		g_slice_free (Block61Data, _data61_);
#line 1369 "TaskNew.c"
	}
}


static void
_widgets_task_new___lambda238_ (WidgetsTaskNew* self)
{
#line 161 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_emit (self, widgets_task_new_signals[WIDGETS_TASK_NEW_ON_SIGNAL_CLOSE_SIGNAL], 0);
#line 1379 "TaskNew.c"
}


static void
__widgets_task_new___lambda238__gtk_button_clicked (GtkButton* _sender,
                                                    gpointer self)
{
#line 160 "/run/build/planner/src/Widgets/TaskNew.vala"
	_widgets_task_new___lambda238_ ((WidgetsTaskNew*) self);
#line 1389 "TaskNew.c"
}


static void
_widgets_task_new_add_task_gtk_entry_activate (GtkEntry* _sender,
                                               gpointer self)
{
#line 164 "/run/build/planner/src/Widgets/TaskNew.vala"
	widgets_task_new_add_task ((WidgetsTaskNew*) self);
#line 1399 "TaskNew.c"
}


static void
_widgets_task_new___lambda239_ (Block61Data* _data61_)
{
	WidgetsTaskNew* self;
	GtkEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	GtkEntry* _tmp5_;
	Utils* _tmp6_;
	GtkEntry* _tmp7_;
	const gchar* _tmp8_;
	const gchar* _tmp9_;
	gchar* _tmp10_;
	gchar* _tmp11_;
#line 165 "/run/build/planner/src/Widgets/TaskNew.vala"
	self = _data61_->self;
#line 166 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = self->name_entry;
#line 166 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp1_ = gtk_entry_get_text (_tmp0_);
#line 166 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp2_ = _tmp1_;
#line 166 "/run/build/planner/src/Widgets/TaskNew.vala"
	if (g_strcmp0 (_tmp2_, "") == 0) {
#line 1427 "TaskNew.c"
		GtkButton* _tmp3_;
#line 167 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp3_ = _data61_->submit_task_button;
#line 167 "/run/build/planner/src/Widgets/TaskNew.vala"
		gtk_widget_set_sensitive ((GtkWidget*) _tmp3_, FALSE);
#line 1433 "TaskNew.c"
	} else {
		GtkButton* _tmp4_;
#line 169 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp4_ = _data61_->submit_task_button;
#line 169 "/run/build/planner/src/Widgets/TaskNew.vala"
		gtk_widget_set_sensitive ((GtkWidget*) _tmp4_, TRUE);
#line 1440 "TaskNew.c"
	}
#line 172 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp5_ = self->name_entry;
#line 172 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp6_ = application_utils;
#line 172 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp7_ = self->name_entry;
#line 172 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp8_ = gtk_entry_get_text (_tmp7_);
#line 172 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp9_ = _tmp8_;
#line 172 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp10_ = utils_first_letter_to_up (_tmp6_, _tmp9_);
#line 172 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp11_ = _tmp10_;
#line 172 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_entry_set_text (_tmp5_, _tmp11_);
#line 172 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_free0 (_tmp11_);
#line 1460 "TaskNew.c"
}


static void
__widgets_task_new___lambda239__gtk_editable_changed (GtkEditable* _sender,
                                                      gpointer self)
{
#line 165 "/run/build/planner/src/Widgets/TaskNew.vala"
	_widgets_task_new___lambda239_ (self);
#line 1470 "TaskNew.c"
}


static gboolean
_widgets_task_new___lambda240_ (WidgetsTaskNew* self)
{
	gboolean result = FALSE;
	GtkEntry* _tmp0_;
#line 176 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = self->name_entry;
#line 176 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_set (_tmp0_, "secondary-icon-name", "edit-clear-symbolic", NULL);
#line 177 "/run/build/planner/src/Widgets/TaskNew.vala"
	result = FALSE;
#line 177 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 1487 "TaskNew.c"
}


static gboolean
__widgets_task_new___lambda240__gtk_widget_focus_in_event (GtkWidget* _sender,
                                                           GdkEventFocus* event,
                                                           gpointer self)
{
	gboolean result;
	result = _widgets_task_new___lambda240_ ((WidgetsTaskNew*) self);
#line 175 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 1500 "TaskNew.c"
}


static gboolean
_widgets_task_new___lambda241_ (WidgetsTaskNew* self)
{
	gboolean result = FALSE;
	GtkEntry* _tmp0_;
#line 181 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = self->name_entry;
#line 181 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_set (_tmp0_, "secondary-icon-name", NULL, NULL);
#line 182 "/run/build/planner/src/Widgets/TaskNew.vala"
	result = FALSE;
#line 182 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 1517 "TaskNew.c"
}


static gboolean
__widgets_task_new___lambda241__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                            GdkEventFocus* event,
                                                            gpointer self)
{
	gboolean result;
	result = _widgets_task_new___lambda241_ ((WidgetsTaskNew*) self);
#line 180 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 1530 "TaskNew.c"
}


static void
_widgets_task_new___lambda242_ (WidgetsTaskNew* self,
                                GtkEntryIconPosition pos,
                                GdkEventButton* event)
{
#line 185 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_return_if_fail (event != NULL);
#line 186 "/run/build/planner/src/Widgets/TaskNew.vala"
	if (pos == GTK_ENTRY_ICON_SECONDARY) {
#line 1543 "TaskNew.c"
		GtkEntry* _tmp0_;
#line 187 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp0_ = self->name_entry;
#line 187 "/run/build/planner/src/Widgets/TaskNew.vala"
		gtk_entry_set_text (_tmp0_, "");
#line 1549 "TaskNew.c"
	}
}


static void
__widgets_task_new___lambda242__gtk_entry_icon_press (GtkEntry* _sender,
                                                      GtkEntryIconPosition icon_pos,
                                                      GdkEventButton* event,
                                                      gpointer self)
{
#line 185 "/run/build/planner/src/Widgets/TaskNew.vala"
	_widgets_task_new___lambda242_ ((WidgetsTaskNew*) self, icon_pos, event);
#line 1562 "TaskNew.c"
}


static void
_widgets_task_new_add_task_gtk_button_clicked (GtkButton* _sender,
                                               gpointer self)
{
#line 191 "/run/build/planner/src/Widgets/TaskNew.vala"
	widgets_task_new_add_task ((WidgetsTaskNew*) self);
#line 1572 "TaskNew.c"
}


static gboolean
_widgets_task_new___lambda243_ (WidgetsTaskNew* self,
                                GdkEventKey* key)
{
	gboolean result = FALSE;
	guint _tmp0_;
#line 193 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_return_val_if_fail (key != NULL, FALSE);
#line 194 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = key->keyval;
#line 194 "/run/build/planner/src/Widgets/TaskNew.vala"
	if (_tmp0_ == ((guint) 65307)) {
#line 195 "/run/build/planner/src/Widgets/TaskNew.vala"
		g_signal_emit (self, widgets_task_new_signals[WIDGETS_TASK_NEW_ON_SIGNAL_CLOSE_SIGNAL], 0);
#line 1590 "TaskNew.c"
	}
#line 198 "/run/build/planner/src/Widgets/TaskNew.vala"
	result = FALSE;
#line 198 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 1596 "TaskNew.c"
}


static gboolean
__widgets_task_new___lambda243__gtk_widget_key_release_event (GtkWidget* _sender,
                                                              GdkEventKey* event,
                                                              gpointer self)
{
	gboolean result;
	result = _widgets_task_new___lambda243_ ((WidgetsTaskNew*) self, event);
#line 193 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 1609 "TaskNew.c"
}


static gboolean
_widgets_task_new___lambda244_ (WidgetsTaskNew* self,
                                GdkEventKey* key)
{
	gboolean result = FALSE;
	guint _tmp0_;
#line 201 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_return_val_if_fail (key != NULL, FALSE);
#line 202 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = key->keyval;
#line 202 "/run/build/planner/src/Widgets/TaskNew.vala"
	if (_tmp0_ == ((guint) 65307)) {
#line 203 "/run/build/planner/src/Widgets/TaskNew.vala"
		g_signal_emit (self, widgets_task_new_signals[WIDGETS_TASK_NEW_ON_SIGNAL_CLOSE_SIGNAL], 0);
#line 1627 "TaskNew.c"
	}
#line 206 "/run/build/planner/src/Widgets/TaskNew.vala"
	result = FALSE;
#line 206 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 1633 "TaskNew.c"
}


static gboolean
__widgets_task_new___lambda244__gtk_widget_key_release_event (GtkWidget* _sender,
                                                              GdkEventKey* event,
                                                              gpointer self)
{
	gboolean result;
	result = _widgets_task_new___lambda244_ ((WidgetsTaskNew*) self, event);
#line 201 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 1646 "TaskNew.c"
}


static void
_widgets_task_new___lambda245_ (Block61Data* _data61_,
                                ObjectsLabel* label)
{
	WidgetsTaskNew* self;
	gint _tmp0_;
	GtkRevealer* _tmp4_;
	GtkFlowBox* _tmp5_;
#line 209 "/run/build/planner/src/Widgets/TaskNew.vala"
	self = _data61_->self;
#line 209 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_return_if_fail (label != NULL);
#line 210 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = label->id;
#line 210 "/run/build/planner/src/Widgets/TaskNew.vala"
	if (widgets_task_new_is_repeted (self, _tmp0_) == FALSE) {
#line 1666 "TaskNew.c"
		WidgetsLabelChild* child = NULL;
		WidgetsLabelChild* _tmp1_;
		GtkFlowBox* _tmp2_;
		WidgetsLabelChild* _tmp3_;
#line 211 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp1_ = widgets_label_child_new (label);
#line 211 "/run/build/planner/src/Widgets/TaskNew.vala"
		g_object_ref_sink (_tmp1_);
#line 211 "/run/build/planner/src/Widgets/TaskNew.vala"
		child = _tmp1_;
#line 212 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp2_ = self->priv->labels_flowbox;
#line 212 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp3_ = child;
#line 212 "/run/build/planner/src/Widgets/TaskNew.vala"
		gtk_container_add ((GtkContainer*) _tmp2_, (GtkWidget*) _tmp3_);
#line 210 "/run/build/planner/src/Widgets/TaskNew.vala"
		_g_object_unref0 (child);
#line 1685 "TaskNew.c"
	}
#line 215 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp4_ = _data61_->labels_flowbox_revealer;
#line 215 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp5_ = self->priv->labels_flowbox;
#line 215 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_revealer_set_reveal_child (_tmp4_, !widgets_task_new_is_empty (self, _tmp5_));
#line 216 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 1695 "TaskNew.c"
}


static void
__widgets_task_new___lambda245__widgets_label_button_on_selected_label (WidgetsLabelButton* _sender,
                                                                        ObjectsLabel* label,
                                                                        gpointer self)
{
#line 209 "/run/build/planner/src/Widgets/TaskNew.vala"
	_widgets_task_new___lambda245_ (self, label);
#line 1706 "TaskNew.c"
}


static void
_widgets_task_new___lambda246_ (Block61Data* _data61_,
                                GtkWidget* widget)
{
	WidgetsTaskNew* self;
	GtkRevealer* _tmp0_;
	GtkFlowBox* _tmp1_;
#line 219 "/run/build/planner/src/Widgets/TaskNew.vala"
	self = _data61_->self;
#line 219 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_return_if_fail (widget != NULL);
#line 220 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = _data61_->labels_flowbox_revealer;
#line 220 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp1_ = self->priv->labels_flowbox;
#line 220 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_revealer_set_reveal_child (_tmp0_, !widgets_task_new_is_empty (self, _tmp1_));
#line 1727 "TaskNew.c"
}


static void
__widgets_task_new___lambda246__gtk_container_remove (GtkContainer* _sender,
                                                      GtkWidget* widget,
                                                      gpointer self)
{
#line 219 "/run/build/planner/src/Widgets/TaskNew.vala"
	_widgets_task_new___lambda246_ (self, widget);
#line 1738 "TaskNew.c"
}


static void
_widgets_task_new___lambda247_ (Block61Data* _data61_)
{
	WidgetsTaskNew* self;
	GtkEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 223 "/run/build/planner/src/Widgets/TaskNew.vala"
	self = _data61_->self;
#line 224 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = _data61_->checklist_entry;
#line 224 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp1_ = gtk_entry_get_text (_tmp0_);
#line 224 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp2_ = _tmp1_;
#line 224 "/run/build/planner/src/Widgets/TaskNew.vala"
	if (g_strcmp0 (_tmp2_, "") != 0) {
#line 1759 "TaskNew.c"
		WidgetsCheckRow* row = NULL;
		GtkEntry* _tmp3_;
		const gchar* _tmp4_;
		const gchar* _tmp5_;
		WidgetsCheckRow* _tmp6_;
		GtkListBox* _tmp7_;
		WidgetsCheckRow* _tmp8_;
		GtkEntry* _tmp9_;
#line 225 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp3_ = _data61_->checklist_entry;
#line 225 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp4_ = gtk_entry_get_text (_tmp3_);
#line 225 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp5_ = _tmp4_;
#line 225 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp6_ = widgets_check_row_new (_tmp5_, FALSE);
#line 225 "/run/build/planner/src/Widgets/TaskNew.vala"
		g_object_ref_sink (_tmp6_);
#line 225 "/run/build/planner/src/Widgets/TaskNew.vala"
		row = _tmp6_;
#line 226 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp7_ = self->priv->checklist;
#line 226 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp8_ = row;
#line 226 "/run/build/planner/src/Widgets/TaskNew.vala"
		gtk_container_add ((GtkContainer*) _tmp7_, (GtkWidget*) _tmp8_);
#line 228 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp9_ = _data61_->checklist_entry;
#line 228 "/run/build/planner/src/Widgets/TaskNew.vala"
		gtk_entry_set_text (_tmp9_, "");
#line 229 "/run/build/planner/src/Widgets/TaskNew.vala"
		gtk_widget_show_all ((GtkWidget*) self);
#line 224 "/run/build/planner/src/Widgets/TaskNew.vala"
		_g_object_unref0 (row);
#line 1794 "TaskNew.c"
	}
}


static void
__widgets_task_new___lambda247__gtk_entry_activate (GtkEntry* _sender,
                                                    gpointer self)
{
#line 223 "/run/build/planner/src/Widgets/TaskNew.vala"
	_widgets_task_new___lambda247_ (self);
#line 1805 "TaskNew.c"
}


static void
_widgets_task_new___lambda248_ (Block61Data* _data61_)
{
	WidgetsTaskNew* self;
	GtkEntry* _tmp0_;
	Utils* _tmp1_;
	GtkEntry* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
#line 233 "/run/build/planner/src/Widgets/TaskNew.vala"
	self = _data61_->self;
#line 234 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = _data61_->checklist_entry;
#line 234 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp1_ = application_utils;
#line 234 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp2_ = _data61_->checklist_entry;
#line 234 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp3_ = gtk_entry_get_text (_tmp2_);
#line 234 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp4_ = _tmp3_;
#line 234 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp5_ = utils_first_letter_to_up (_tmp1_, _tmp4_);
#line 234 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp6_ = _tmp5_;
#line 234 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_entry_set_text (_tmp0_, _tmp6_);
#line 234 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_free0 (_tmp6_);
#line 1840 "TaskNew.c"
}


static void
__widgets_task_new___lambda248__gtk_editable_changed (GtkEditable* _sender,
                                                      gpointer self)
{
#line 233 "/run/build/planner/src/Widgets/TaskNew.vala"
	_widgets_task_new___lambda248_ (self);
#line 1850 "TaskNew.c"
}


static gboolean
_widgets_task_new___lambda249_ (Block61Data* _data61_)
{
	WidgetsTaskNew* self;
	gboolean result = FALSE;
	GtkEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 237 "/run/build/planner/src/Widgets/TaskNew.vala"
	self = _data61_->self;
#line 238 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = _data61_->checklist_entry;
#line 238 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp1_ = gtk_entry_get_text (_tmp0_);
#line 238 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp2_ = _tmp1_;
#line 238 "/run/build/planner/src/Widgets/TaskNew.vala"
	if (g_strcmp0 (_tmp2_, "") != 0) {
#line 1872 "TaskNew.c"
		WidgetsCheckRow* row = NULL;
		GtkEntry* _tmp3_;
		const gchar* _tmp4_;
		const gchar* _tmp5_;
		WidgetsCheckRow* _tmp6_;
		GtkListBox* _tmp7_;
		WidgetsCheckRow* _tmp8_;
		GtkEntry* _tmp9_;
		GtkListBox* _tmp10_;
#line 239 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp3_ = _data61_->checklist_entry;
#line 239 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp4_ = gtk_entry_get_text (_tmp3_);
#line 239 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp5_ = _tmp4_;
#line 239 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp6_ = widgets_check_row_new (_tmp5_, FALSE);
#line 239 "/run/build/planner/src/Widgets/TaskNew.vala"
		g_object_ref_sink (_tmp6_);
#line 239 "/run/build/planner/src/Widgets/TaskNew.vala"
		row = _tmp6_;
#line 240 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp7_ = self->priv->checklist;
#line 240 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp8_ = row;
#line 240 "/run/build/planner/src/Widgets/TaskNew.vala"
		gtk_container_add ((GtkContainer*) _tmp7_, (GtkWidget*) _tmp8_);
#line 242 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp9_ = _data61_->checklist_entry;
#line 242 "/run/build/planner/src/Widgets/TaskNew.vala"
		gtk_entry_set_text (_tmp9_, "");
#line 243 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp10_ = self->priv->checklist;
#line 243 "/run/build/planner/src/Widgets/TaskNew.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp10_);
#line 238 "/run/build/planner/src/Widgets/TaskNew.vala"
		_g_object_unref0 (row);
#line 1910 "TaskNew.c"
	}
#line 246 "/run/build/planner/src/Widgets/TaskNew.vala"
	result = FALSE;
#line 246 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 1916 "TaskNew.c"
}


static gboolean
__widgets_task_new___lambda249__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                            GdkEventFocus* event,
                                                            gpointer self)
{
	gboolean result;
	result = _widgets_task_new___lambda249_ (self);
#line 237 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 1929 "TaskNew.c"
}


static gboolean
_widgets_task_new___lambda250_ (Block61Data* _data61_)
{
	WidgetsTaskNew* self;
	gboolean result = FALSE;
	GtkTextView* _tmp0_;
	GtkTextBuffer* _tmp1_;
	GtkTextBuffer* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gboolean _tmp6_;
#line 249 "/run/build/planner/src/Widgets/TaskNew.vala"
	self = _data61_->self;
#line 250 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = self->priv->note_view;
#line 250 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp1_ = gtk_text_view_get_buffer (_tmp0_);
#line 250 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp2_ = _tmp1_;
#line 250 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_get (_tmp2_, "text", &_tmp3_, NULL);
#line 250 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp4_ = _tmp3_;
#line 250 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp5_ = _tmp4_;
#line 250 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp6_ = g_strcmp0 (_tmp5_, "") == 0;
#line 250 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_free0 (_tmp5_);
#line 250 "/run/build/planner/src/Widgets/TaskNew.vala"
	if (_tmp6_) {
#line 1965 "TaskNew.c"
		GtkLabel* _tmp7_;
		GtkLabel* _tmp8_;
#line 251 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp7_ = _data61_->note_view_placeholder_label;
#line 251 "/run/build/planner/src/Widgets/TaskNew.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp7_, TRUE);
#line 252 "/run/build/planner/src/Widgets/TaskNew.vala"
		_tmp8_ = _data61_->note_view_placeholder_label;
#line 252 "/run/build/planner/src/Widgets/TaskNew.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp8_, FALSE);
#line 1976 "TaskNew.c"
	}
#line 255 "/run/build/planner/src/Widgets/TaskNew.vala"
	result = FALSE;
#line 255 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 1982 "TaskNew.c"
}


static gboolean
__widgets_task_new___lambda250__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                            GdkEventFocus* event,
                                                            gpointer self)
{
	gboolean result;
	result = _widgets_task_new___lambda250_ (self);
#line 249 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 1995 "TaskNew.c"
}


static gboolean
_widgets_task_new___lambda251_ (Block61Data* _data61_)
{
	WidgetsTaskNew* self;
	gboolean result = FALSE;
	GtkLabel* _tmp0_;
	GtkLabel* _tmp1_;
#line 258 "/run/build/planner/src/Widgets/TaskNew.vala"
	self = _data61_->self;
#line 259 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = _data61_->note_view_placeholder_label;
#line 259 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_visible ((GtkWidget*) _tmp0_, FALSE);
#line 260 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp1_ = _data61_->note_view_placeholder_label;
#line 260 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_no_show_all ((GtkWidget*) _tmp1_, TRUE);
#line 262 "/run/build/planner/src/Widgets/TaskNew.vala"
	result = FALSE;
#line 262 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 2020 "TaskNew.c"
}


static gboolean
__widgets_task_new___lambda251__gtk_widget_focus_in_event (GtkWidget* _sender,
                                                           GdkEventFocus* event,
                                                           gpointer self)
{
	gboolean result;
	result = _widgets_task_new___lambda251_ (self);
#line 258 "/run/build/planner/src/Widgets/TaskNew.vala"
	return result;
#line 2033 "TaskNew.c"
}


static GObject *
widgets_task_new_constructor (GType type,
                              guint n_construct_properties,
                              GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsTaskNew * self;
	Block61Data* _data61_;
	GtkEntry* _tmp0_;
	GtkEntry* _tmp1_;
	GtkEntry* _tmp2_;
	GtkEntry* _tmp3_;
	GtkEntry* _tmp4_;
	GtkEntry* _tmp5_;
	GtkEntry* _tmp6_;
	GtkStyleContext* _tmp7_;
	GtkEntry* _tmp8_;
	GtkStyleContext* _tmp9_;
	GtkEntry* _tmp10_;
	GtkStyleContext* _tmp11_;
	GtkEntry* _tmp12_;
	GtkStyleContext* _tmp13_;
	GtkButton* _tmp14_;
	GtkButton* _tmp15_;
	GtkStyleContext* _tmp16_;
	GtkButton* _tmp17_;
	GtkButton* _tmp18_;
	GtkButton* _tmp19_;
	GtkButton* _tmp20_;
	GtkButton* _tmp21_;
	GtkTextView* _tmp22_;
	GtkTextView* _tmp23_;
	GtkTextView* _tmp24_;
	GtkTextView* _tmp25_;
	GtkTextView* _tmp26_;
	GtkTextView* _tmp27_;
	GtkTextView* _tmp28_;
	GtkStyleContext* _tmp29_;
	GtkLabel* _tmp30_;
	GtkLabel* _tmp31_;
	GtkTextView* _tmp32_;
	GtkLabel* _tmp33_;
	GtkListBox* _tmp34_;
	GtkListBox* _tmp35_;
	GtkListBox* _tmp36_;
	GtkStyleContext* _tmp37_;
	GtkListBox* _tmp38_;
	GtkCheckButton* checklist_button = NULL;
	GtkCheckButton* _tmp39_;
	GtkCheckButton* _tmp40_;
	GtkStyleContext* _tmp41_;
	GtkCheckButton* _tmp42_;
	GtkEntry* _tmp43_;
	GtkEntry* _tmp44_;
	GtkEntry* _tmp45_;
	GtkEntry* _tmp46_;
	GtkEntry* _tmp47_;
	GtkStyleContext* _tmp48_;
	GtkEntry* _tmp49_;
	GtkStyleContext* _tmp50_;
	GtkEntry* _tmp51_;
	GtkStyleContext* _tmp52_;
	GtkEntry* _tmp53_;
	GtkStyleContext* _tmp54_;
	GtkBox* checklist_box = NULL;
	GtkBox* _tmp55_;
	GtkBox* _tmp56_;
	GtkCheckButton* _tmp57_;
	GtkBox* _tmp58_;
	GtkEntry* _tmp59_;
	GtkGrid* checklist_grid = NULL;
	GtkGrid* _tmp60_;
	GtkGrid* _tmp61_;
	GtkGrid* _tmp62_;
	GtkGrid* _tmp63_;
	GtkGrid* _tmp64_;
	GtkListBox* _tmp65_;
	GtkGrid* _tmp66_;
	GtkBox* _tmp67_;
	GtkFlowBox* _tmp68_;
	GtkFlowBox* _tmp69_;
	GtkFlowBox* _tmp70_;
	GtkFlowBox* _tmp71_;
	GtkRevealer* _tmp72_;
	GtkRevealer* _tmp73_;
	GtkFlowBox* _tmp74_;
	GtkRevealer* _tmp75_;
	WidgetsWhenButton* _tmp76_;
	WidgetsLabelButton* labels = NULL;
	WidgetsLabelButton* _tmp77_;
	GtkButton* _tmp78_;
	GtkButton* _tmp79_;
	GtkButton* _tmp80_;
	GtkButton* _tmp81_;
	GtkStyleContext* _tmp82_;
	GtkBox* bottom_box = NULL;
	GtkBox* _tmp83_;
	GtkBox* _tmp84_;
	GtkBox* _tmp85_;
	GtkBox* _tmp86_;
	GtkBox* _tmp87_;
	WidgetsWhenButton* _tmp88_;
	GtkBox* _tmp89_;
	WidgetsLabelButton* _tmp90_;
	GtkBox* _tmp91_;
	GtkButton* _tmp92_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp93_;
	GtkGrid* _tmp94_;
	GtkGrid* _tmp95_;
	GtkGrid* _tmp96_;
	GtkGrid* _tmp97_;
	GtkGrid* _tmp98_;
	GtkGrid* _tmp99_;
	GtkStyleContext* _tmp100_;
	GtkGrid* _tmp101_;
	GtkStyleContext* _tmp102_;
	GtkGrid* _tmp103_;
	GtkGrid* _tmp104_;
	GtkEntry* _tmp105_;
	GtkGrid* _tmp106_;
	GtkTextView* _tmp107_;
	GtkGrid* _tmp108_;
	GtkGrid* _tmp109_;
	GtkGrid* _tmp110_;
	GtkRevealer* _tmp111_;
	GtkGrid* _tmp112_;
	GtkBox* _tmp113_;
	GtkOverlay* main_overlay = NULL;
	GtkOverlay* _tmp114_;
	GtkOverlay* _tmp115_;
	GtkOverlay* _tmp116_;
	GtkButton* _tmp117_;
	GtkOverlay* _tmp118_;
	GtkGrid* _tmp119_;
	GtkOverlay* _tmp120_;
	GtkButton* _tmp121_;
	GtkEntry* _tmp122_;
	GtkEntry* _tmp123_;
	GtkEntry* _tmp124_;
	GtkEntry* _tmp125_;
	GtkEntry* _tmp126_;
	GtkButton* _tmp127_;
	GtkEntry* _tmp128_;
	GtkTextView* _tmp129_;
	WidgetsLabelButton* _tmp130_;
	GtkFlowBox* _tmp131_;
	GtkEntry* _tmp132_;
	GtkEntry* _tmp133_;
	GtkEntry* _tmp134_;
	GtkTextView* _tmp135_;
	GtkTextView* _tmp136_;
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	parent_class = G_OBJECT_CLASS (widgets_task_new_parent_class);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_TASK_NEW, WidgetsTaskNew);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	_data61_ = g_slice_new0 (Block61Data);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	_data61_->_ref_count_ = 1;
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	_data61_->self = g_object_ref (self);
#line 51 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp0_ = (GtkEntry*) gtk_entry_new ();
#line 51 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp0_);
#line 51 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (self->name_entry);
#line 51 "/run/build/planner/src/Widgets/TaskNew.vala"
	self->name_entry = _tmp0_;
#line 52 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp1_ = self->name_entry;
#line 52 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp1_, 12);
#line 53 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp2_ = self->name_entry;
#line 53 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp2_, 6);
#line 54 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp3_ = self->name_entry;
#line 54 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp3_, 6);
#line 55 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp4_ = self->name_entry;
#line 55 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp4_, TRUE);
#line 56 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp5_ = self->name_entry;
#line 56 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_entry_set_placeholder_text (_tmp5_, _ ("New task"));
#line 57 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp6_ = self->name_entry;
#line 57 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp7_ = gtk_widget_get_style_context ((GtkWidget*) _tmp6_);
#line 57 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_style_context_add_class (_tmp7_, GTK_STYLE_CLASS_FLAT);
#line 58 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp8_ = self->name_entry;
#line 58 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp9_ = gtk_widget_get_style_context ((GtkWidget*) _tmp8_);
#line 58 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_style_context_add_class (_tmp9_, GTK_STYLE_CLASS_VIEW);
#line 59 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp10_ = self->name_entry;
#line 59 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp11_ = gtk_widget_get_style_context ((GtkWidget*) _tmp10_);
#line 59 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_style_context_add_class (_tmp11_, GRANITE_STYLE_CLASS_H3_LABEL);
#line 60 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp12_ = self->name_entry;
#line 60 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp13_ = gtk_widget_get_style_context ((GtkWidget*) _tmp12_);
#line 60 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_style_context_add_class (_tmp13_, "planner-entry");
#line 62 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp14_ = (GtkButton*) gtk_button_new_from_icon_name ("window-close-symbolic", (GtkIconSize) GTK_ICON_SIZE_SMALL_TOOLBAR);
#line 62 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp14_);
#line 62 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (self->priv->close_button);
#line 62 "/run/build/planner/src/Widgets/TaskNew.vala"
	self->priv->close_button = _tmp14_;
#line 63 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp15_ = self->priv->close_button;
#line 63 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp16_ = gtk_widget_get_style_context ((GtkWidget*) _tmp15_);
#line 63 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_style_context_add_class (_tmp16_, "button-close");
#line 64 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp17_ = self->priv->close_button;
#line 64 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_set ((GtkWidget*) _tmp17_, "height-request", 24, NULL);
#line 65 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp18_ = self->priv->close_button;
#line 65 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_set ((GtkWidget*) _tmp18_, "width-request", 24, NULL);
#line 66 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp19_ = self->priv->close_button;
#line 66 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp19_, FALSE);
#line 67 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp20_ = self->priv->close_button;
#line 67 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp20_, GTK_ALIGN_START);
#line 68 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp21_ = self->priv->close_button;
#line 68 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp21_, GTK_ALIGN_START);
#line 70 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp22_ = (GtkTextView*) gtk_text_view_new ();
#line 70 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp22_);
#line 70 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (self->priv->note_view);
#line 70 "/run/build/planner/src/Widgets/TaskNew.vala"
	self->priv->note_view = _tmp22_;
#line 71 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp23_ = self->priv->note_view;
#line 71 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_opacity ((GtkWidget*) _tmp23_, 0.7);
#line 72 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp24_ = self->priv->note_view;
#line 72 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp24_, 15);
#line 73 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp25_ = self->priv->note_view;
#line 73 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp25_, 12);
#line 74 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp26_ = self->priv->note_view;
#line 74 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_set ((GtkWidget*) _tmp26_, "height-request", 50, NULL);
#line 75 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp27_ = self->priv->note_view;
#line 75 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_text_view_set_wrap_mode (_tmp27_, GTK_WRAP_WORD_CHAR);
#line 76 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp28_ = self->priv->note_view;
#line 76 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp29_ = gtk_widget_get_style_context ((GtkWidget*) _tmp28_);
#line 76 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_style_context_add_class (_tmp29_, "note-view");
#line 78 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp30_ = (GtkLabel*) gtk_label_new (_ ("Note"));
#line 78 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp30_);
#line 78 "/run/build/planner/src/Widgets/TaskNew.vala"
	_data61_->note_view_placeholder_label = _tmp30_;
#line 79 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp31_ = _data61_->note_view_placeholder_label;
#line 79 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_opacity ((GtkWidget*) _tmp31_, 0.65);
#line 80 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp32_ = self->priv->note_view;
#line 80 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp33_ = _data61_->note_view_placeholder_label;
#line 80 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_container_add ((GtkContainer*) _tmp32_, (GtkWidget*) _tmp33_);
#line 82 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp34_ = (GtkListBox*) gtk_list_box_new ();
#line 82 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp34_);
#line 82 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (self->priv->checklist);
#line 82 "/run/build/planner/src/Widgets/TaskNew.vala"
	self->priv->checklist = _tmp34_;
#line 83 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp35_ = self->priv->checklist;
#line 83 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_list_box_set_activate_on_single_click (_tmp35_, TRUE);
#line 84 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp36_ = self->priv->checklist;
#line 84 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp37_ = gtk_widget_get_style_context ((GtkWidget*) _tmp36_);
#line 84 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_style_context_add_class (_tmp37_, "view");
#line 85 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp38_ = self->priv->checklist;
#line 85 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_list_box_set_selection_mode (_tmp38_, GTK_SELECTION_SINGLE);
#line 87 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp39_ = (GtkCheckButton*) gtk_check_button_new ();
#line 87 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp39_);
#line 87 "/run/build/planner/src/Widgets/TaskNew.vala"
	checklist_button = _tmp39_;
#line 88 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp40_ = checklist_button;
#line 88 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp41_ = gtk_widget_get_style_context ((GtkWidget*) _tmp40_);
#line 88 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_style_context_add_class (_tmp41_, "planner-radio-disable");
#line 89 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp42_ = checklist_button;
#line 89 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _tmp42_, FALSE);
#line 91 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp43_ = (GtkEntry*) gtk_entry_new ();
#line 91 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp43_);
#line 91 "/run/build/planner/src/Widgets/TaskNew.vala"
	_data61_->checklist_entry = _tmp43_;
#line 92 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp44_ = _data61_->checklist_entry;
#line 92 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp44_, TRUE);
#line 93 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp45_ = _data61_->checklist_entry;
#line 93 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp45_, 1);
#line 94 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp46_ = _data61_->checklist_entry;
#line 94 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_entry_set_placeholder_text (_tmp46_, _ ("Checklist"));
#line 95 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp47_ = _data61_->checklist_entry;
#line 95 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp48_ = gtk_widget_get_style_context ((GtkWidget*) _tmp47_);
#line 95 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_style_context_add_class (_tmp48_, GTK_STYLE_CLASS_FLAT);
#line 96 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp49_ = _data61_->checklist_entry;
#line 96 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp50_ = gtk_widget_get_style_context ((GtkWidget*) _tmp49_);
#line 96 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_style_context_add_class (_tmp50_, GTK_STYLE_CLASS_VIEW);
#line 97 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp51_ = _data61_->checklist_entry;
#line 97 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp52_ = gtk_widget_get_style_context ((GtkWidget*) _tmp51_);
#line 97 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_style_context_add_class (_tmp52_, GRANITE_STYLE_CLASS_H3_LABEL);
#line 98 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp53_ = _data61_->checklist_entry;
#line 98 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp54_ = gtk_widget_get_style_context ((GtkWidget*) _tmp53_);
#line 98 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_style_context_add_class (_tmp54_, "planner-entry");
#line 100 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp55_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 100 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp55_);
#line 100 "/run/build/planner/src/Widgets/TaskNew.vala"
	checklist_box = _tmp55_;
#line 101 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp56_ = checklist_box;
#line 101 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp57_ = checklist_button;
#line 101 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_box_pack_start (_tmp56_, (GtkWidget*) _tmp57_, FALSE, FALSE, (guint) 0);
#line 102 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp58_ = checklist_box;
#line 102 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp59_ = _data61_->checklist_entry;
#line 102 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_box_pack_start (_tmp58_, (GtkWidget*) _tmp59_, TRUE, TRUE, (guint) 6);
#line 104 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp60_ = (GtkGrid*) gtk_grid_new ();
#line 104 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp60_);
#line 104 "/run/build/planner/src/Widgets/TaskNew.vala"
	checklist_grid = _tmp60_;
#line 105 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp61_ = checklist_grid;
#line 105 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp61_, 14);
#line 106 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp62_ = checklist_grid;
#line 106 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp62_, 12);
#line 107 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp63_ = checklist_grid;
#line 107 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp63_, GTK_ORIENTATION_VERTICAL);
#line 108 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp64_ = checklist_grid;
#line 108 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp65_ = self->priv->checklist;
#line 108 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_container_add ((GtkContainer*) _tmp64_, (GtkWidget*) _tmp65_);
#line 109 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp66_ = checklist_grid;
#line 109 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp67_ = checklist_box;
#line 109 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_container_add ((GtkContainer*) _tmp66_, (GtkWidget*) _tmp67_);
#line 111 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp68_ = (GtkFlowBox*) gtk_flow_box_new ();
#line 111 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp68_);
#line 111 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (self->priv->labels_flowbox);
#line 111 "/run/build/planner/src/Widgets/TaskNew.vala"
	self->priv->labels_flowbox = _tmp68_;
#line 112 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp69_ = self->priv->labels_flowbox;
#line 112 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_flow_box_set_selection_mode (_tmp69_, GTK_SELECTION_NONE);
#line 113 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp70_ = self->priv->labels_flowbox;
#line 113 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp70_, 6);
#line 114 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp71_ = self->priv->labels_flowbox;
#line 114 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_set ((GtkWidget*) _tmp71_, "expand", FALSE, NULL);
#line 116 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp72_ = (GtkRevealer*) gtk_revealer_new ();
#line 116 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp72_);
#line 116 "/run/build/planner/src/Widgets/TaskNew.vala"
	_data61_->labels_flowbox_revealer = _tmp72_;
#line 117 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp73_ = _data61_->labels_flowbox_revealer;
#line 117 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp74_ = self->priv->labels_flowbox;
#line 117 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_container_add ((GtkContainer*) _tmp73_, (GtkWidget*) _tmp74_);
#line 118 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp75_ = _data61_->labels_flowbox_revealer;
#line 118 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_revealer_set_reveal_child (_tmp75_, FALSE);
#line 120 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp76_ = widgets_when_button_new ();
#line 120 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp76_);
#line 120 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (self->when_button);
#line 120 "/run/build/planner/src/Widgets/TaskNew.vala"
	self->when_button = _tmp76_;
#line 122 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp77_ = widgets_label_button_new ();
#line 122 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp77_);
#line 122 "/run/build/planner/src/Widgets/TaskNew.vala"
	labels = _tmp77_;
#line 124 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp78_ = (GtkButton*) gtk_button_new_with_label (_ ("Create Task"));
#line 124 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp78_);
#line 124 "/run/build/planner/src/Widgets/TaskNew.vala"
	_data61_->submit_task_button = _tmp78_;
#line 125 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp79_ = _data61_->submit_task_button;
#line 125 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp79_, GTK_ALIGN_CENTER);
#line 126 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp80_ = _data61_->submit_task_button;
#line 126 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _tmp80_, FALSE);
#line 127 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp81_ = _data61_->submit_task_button;
#line 127 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp82_ = gtk_widget_get_style_context ((GtkWidget*) _tmp81_);
#line 127 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_style_context_add_class (_tmp82_, GTK_STYLE_CLASS_SUGGESTED_ACTION);
#line 129 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp83_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 129 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp83_);
#line 129 "/run/build/planner/src/Widgets/TaskNew.vala"
	bottom_box = _tmp83_;
#line 130 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp84_ = bottom_box;
#line 130 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp84_, 6);
#line 131 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp85_ = bottom_box;
#line 131 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp85_, 6);
#line 132 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp86_ = bottom_box;
#line 132 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp86_, 6);
#line 133 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp87_ = bottom_box;
#line 133 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp88_ = self->when_button;
#line 133 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_box_pack_start (_tmp87_, (GtkWidget*) _tmp88_, FALSE, FALSE, (guint) 0);
#line 134 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp89_ = bottom_box;
#line 134 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp90_ = labels;
#line 134 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_box_pack_start (_tmp89_, (GtkWidget*) _tmp90_, FALSE, FALSE, (guint) 0);
#line 135 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp91_ = bottom_box;
#line 135 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp92_ = _data61_->submit_task_button;
#line 135 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_box_pack_end (_tmp91_, (GtkWidget*) _tmp92_, FALSE, FALSE, (guint) 0);
#line 137 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp93_ = (GtkGrid*) gtk_grid_new ();
#line 137 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp93_);
#line 137 "/run/build/planner/src/Widgets/TaskNew.vala"
	main_grid = _tmp93_;
#line 138 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp94_ = main_grid;
#line 138 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_set ((GtkWidget*) _tmp94_, "expand", TRUE, NULL);
#line 139 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp95_ = main_grid;
#line 139 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp95_, 3);
#line 140 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp96_ = main_grid;
#line 140 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp96_, 5);
#line 141 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp97_ = main_grid;
#line 141 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp97_, 5);
#line 142 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp98_ = main_grid;
#line 142 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_grid_set_row_spacing (_tmp98_, 6);
#line 143 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp99_ = main_grid;
#line 143 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp100_ = gtk_widget_get_style_context ((GtkWidget*) _tmp99_);
#line 143 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_style_context_add_class (_tmp100_, "popover");
#line 144 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp101_ = main_grid;
#line 144 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp102_ = gtk_widget_get_style_context ((GtkWidget*) _tmp101_);
#line 144 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_style_context_add_class (_tmp102_, "planner-popover");
#line 145 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp103_ = main_grid;
#line 145 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp103_, GTK_ORIENTATION_VERTICAL);
#line 147 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp104_ = main_grid;
#line 147 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp105_ = self->name_entry;
#line 147 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_container_add ((GtkContainer*) _tmp104_, (GtkWidget*) _tmp105_);
#line 148 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp106_ = main_grid;
#line 148 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp107_ = self->priv->note_view;
#line 148 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_container_add ((GtkContainer*) _tmp106_, (GtkWidget*) _tmp107_);
#line 149 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp108_ = main_grid;
#line 149 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp109_ = checklist_grid;
#line 149 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_container_add ((GtkContainer*) _tmp108_, (GtkWidget*) _tmp109_);
#line 150 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp110_ = main_grid;
#line 150 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp111_ = _data61_->labels_flowbox_revealer;
#line 150 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_container_add ((GtkContainer*) _tmp110_, (GtkWidget*) _tmp111_);
#line 151 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp112_ = main_grid;
#line 151 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp113_ = bottom_box;
#line 151 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_container_add ((GtkContainer*) _tmp112_, (GtkWidget*) _tmp113_);
#line 153 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp114_ = (GtkOverlay*) gtk_overlay_new ();
#line 153 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_ref_sink (_tmp114_);
#line 153 "/run/build/planner/src/Widgets/TaskNew.vala"
	main_overlay = _tmp114_;
#line 154 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp115_ = main_overlay;
#line 154 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_set ((GtkWidget*) _tmp115_, "expand", TRUE, NULL);
#line 155 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp116_ = main_overlay;
#line 155 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp117_ = self->priv->close_button;
#line 155 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_overlay_add_overlay (_tmp116_, (GtkWidget*) _tmp117_);
#line 156 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp118_ = main_overlay;
#line 156 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp119_ = main_grid;
#line 156 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_container_add ((GtkContainer*) _tmp118_, (GtkWidget*) _tmp119_);
#line 158 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp120_ = main_overlay;
#line 158 "/run/build/planner/src/Widgets/TaskNew.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp120_);
#line 160 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp121_ = self->priv->close_button;
#line 160 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_object (_tmp121_, "clicked", (GCallback) __widgets_task_new___lambda238__gtk_button_clicked, self, 0);
#line 164 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp122_ = self->name_entry;
#line 164 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_object (_tmp122_, "activate", (GCallback) _widgets_task_new_add_task_gtk_entry_activate, self, 0);
#line 165 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp123_ = self->name_entry;
#line 165 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_data ((GtkEditable*) _tmp123_, "changed", (GCallback) __widgets_task_new___lambda239__gtk_editable_changed, block61_data_ref (_data61_), (GClosureNotify) block61_data_unref, 0);
#line 175 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp124_ = self->name_entry;
#line 175 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_object ((GtkWidget*) _tmp124_, "focus-in-event", (GCallback) __widgets_task_new___lambda240__gtk_widget_focus_in_event, self, 0);
#line 180 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp125_ = self->name_entry;
#line 180 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_object ((GtkWidget*) _tmp125_, "focus-out-event", (GCallback) __widgets_task_new___lambda241__gtk_widget_focus_out_event, self, 0);
#line 185 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp126_ = self->name_entry;
#line 185 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_object (_tmp126_, "icon-press", (GCallback) __widgets_task_new___lambda242__gtk_entry_icon_press, self, 0);
#line 191 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp127_ = _data61_->submit_task_button;
#line 191 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_object (_tmp127_, "clicked", (GCallback) _widgets_task_new_add_task_gtk_button_clicked, self, 0);
#line 193 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp128_ = self->name_entry;
#line 193 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_object ((GtkWidget*) _tmp128_, "key-release-event", (GCallback) __widgets_task_new___lambda243__gtk_widget_key_release_event, self, 0);
#line 201 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp129_ = self->priv->note_view;
#line 201 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_object ((GtkWidget*) _tmp129_, "key-release-event", (GCallback) __widgets_task_new___lambda244__gtk_widget_key_release_event, self, 0);
#line 209 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp130_ = labels;
#line 209 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_data (_tmp130_, "on-selected-label", (GCallback) __widgets_task_new___lambda245__widgets_label_button_on_selected_label, block61_data_ref (_data61_), (GClosureNotify) block61_data_unref, 0);
#line 219 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp131_ = self->priv->labels_flowbox;
#line 219 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_data ((GtkContainer*) _tmp131_, "remove", (GCallback) __widgets_task_new___lambda246__gtk_container_remove, block61_data_ref (_data61_), (GClosureNotify) block61_data_unref, 0);
#line 223 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp132_ = _data61_->checklist_entry;
#line 223 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_data (_tmp132_, "activate", (GCallback) __widgets_task_new___lambda247__gtk_entry_activate, block61_data_ref (_data61_), (GClosureNotify) block61_data_unref, 0);
#line 233 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp133_ = _data61_->checklist_entry;
#line 233 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_data ((GtkEditable*) _tmp133_, "changed", (GCallback) __widgets_task_new___lambda248__gtk_editable_changed, block61_data_ref (_data61_), (GClosureNotify) block61_data_unref, 0);
#line 237 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp134_ = _data61_->checklist_entry;
#line 237 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_data ((GtkWidget*) _tmp134_, "focus-out-event", (GCallback) __widgets_task_new___lambda249__gtk_widget_focus_out_event, block61_data_ref (_data61_), (GClosureNotify) block61_data_unref, 0);
#line 249 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp135_ = self->priv->note_view;
#line 249 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_data ((GtkWidget*) _tmp135_, "focus-out-event", (GCallback) __widgets_task_new___lambda250__gtk_widget_focus_out_event, block61_data_ref (_data61_), (GClosureNotify) block61_data_unref, 0);
#line 258 "/run/build/planner/src/Widgets/TaskNew.vala"
	_tmp136_ = self->priv->note_view;
#line 258 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_signal_connect_data ((GtkWidget*) _tmp136_, "focus-in-event", (GCallback) __widgets_task_new___lambda251__gtk_widget_focus_in_event, block61_data_ref (_data61_), (GClosureNotify) block61_data_unref, 0);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (main_overlay);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (main_grid);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (bottom_box);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (labels);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (checklist_grid);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (checklist_box);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (checklist_button);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	block61_data_unref (_data61_);
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	_data61_ = NULL;
#line 50 "/run/build/planner/src/Widgets/TaskNew.vala"
	return obj;
#line 2754 "TaskNew.c"
}


static void
widgets_task_new_class_init (WidgetsTaskNewClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
	widgets_task_new_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_type_class_add_private (klass, sizeof (WidgetsTaskNewPrivate));
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_task_new_get_property;
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_task_new_set_property;
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_task_new_constructor;
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_task_new_finalize;
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_TASK_NEW_IS_INBOX_PROPERTY, widgets_task_new_properties[WIDGETS_TASK_NEW_IS_INBOX_PROPERTY] = g_param_spec_boolean ("is-inbox", "is-inbox", "is-inbox", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_TASK_NEW_PROJECT_ID_PROPERTY, widgets_task_new_properties[WIDGETS_TASK_NEW_PROJECT_ID_PROPERTY] = g_param_spec_int ("project-id", "project-id", "project-id", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_TASK_NEW_WHEN_DATETIME_PROPERTY, widgets_task_new_properties[WIDGETS_TASK_NEW_WHEN_DATETIME_PROPERTY] = g_param_spec_boxed ("when-datetime", "when-datetime", "when-datetime", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE));
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
	widgets_task_new_signals[WIDGETS_TASK_NEW_ON_SIGNAL_CLOSE_SIGNAL] = g_signal_new ("on-signal-close", WIDGETS_TYPE_TASK_NEW, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 2781 "TaskNew.c"
}


static void
widgets_task_new_instance_init (WidgetsTaskNew * self)
{
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
	self->priv = WIDGETS_TASK_NEW_GET_PRIVATE (self);
#line 2790 "TaskNew.c"
}


static void
widgets_task_new_finalize (GObject * obj)
{
	WidgetsTaskNew * self;
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_TASK_NEW, WidgetsTaskNew);
#line 23 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (self->priv->labels_flowbox);
#line 24 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (self->name_entry);
#line 25 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (self->priv->note_view);
#line 26 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (self->priv->close_button);
#line 27 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (self->priv->checklist);
#line 28 "/run/build/planner/src/Widgets/TaskNew.vala"
	_g_object_unref0 (self->when_button);
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
	G_OBJECT_CLASS (widgets_task_new_parent_class)->finalize (obj);
#line 2814 "TaskNew.c"
}


GType
widgets_task_new_get_type (void)
{
	static volatile gsize widgets_task_new_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_task_new_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsTaskNewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_task_new_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsTaskNew), 0, (GInstanceInitFunc) widgets_task_new_instance_init, NULL };
		GType widgets_task_new_type_id;
		widgets_task_new_type_id = g_type_register_static (gtk_revealer_get_type (), "WidgetsTaskNew", &g_define_type_info, 0);
		g_once_init_leave (&widgets_task_new_type_id__volatile, widgets_task_new_type_id);
	}
	return widgets_task_new_type_id__volatile;
}


static void
_vala_widgets_task_new_get_property (GObject * object,
                                     guint property_id,
                                     GValue * value,
                                     GParamSpec * pspec)
{
	WidgetsTaskNew * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_TASK_NEW, WidgetsTaskNew);
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		case WIDGETS_TASK_NEW_IS_INBOX_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		g_value_set_boolean (value, widgets_task_new_get_is_inbox (self));
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		case WIDGETS_TASK_NEW_PROJECT_ID_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		g_value_set_int (value, widgets_task_new_get_project_id (self));
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		break;
#line 2854 "TaskNew.c"
		default:
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		break;
#line 2860 "TaskNew.c"
	}
}


static void
_vala_widgets_task_new_set_property (GObject * object,
                                     guint property_id,
                                     const GValue * value,
                                     GParamSpec * pspec)
{
	WidgetsTaskNew * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_TASK_NEW, WidgetsTaskNew);
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		case WIDGETS_TASK_NEW_IS_INBOX_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		widgets_task_new_set_is_inbox (self, g_value_get_boolean (value));
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		case WIDGETS_TASK_NEW_PROJECT_ID_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		widgets_task_new_set_project_id (self, g_value_get_int (value));
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		case WIDGETS_TASK_NEW_WHEN_DATETIME_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		widgets_task_new_set_when_datetime (self, g_value_get_boxed (value));
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		break;
#line 2893 "TaskNew.c"
		default:
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/TaskNew.vala"
		break;
#line 2899 "TaskNew.c"
	}
}



