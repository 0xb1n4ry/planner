/* TaskRow.c generated by valac 0.40.11, the Vala compiler
 * generated from TaskRow.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <float.h>
#include <math.h>
#include <glib/gi18n-lib.h>
#include <granite.h>
#include <sqlite3.h>
#include <pango/pango.h>
#include <gio/gio.h>
#include <gdk/gdk.h>


#define WIDGETS_TYPE_TASK_ROW (widgets_task_row_get_type ())
#define WIDGETS_TASK_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRow))
#define WIDGETS_TASK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRowClass))
#define WIDGETS_IS_TASK_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TASK_ROW))
#define WIDGETS_IS_TASK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TASK_ROW))
#define WIDGETS_TASK_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRowClass))

typedef struct _WidgetsTaskRow WidgetsTaskRow;
typedef struct _WidgetsTaskRowClass WidgetsTaskRowClass;
typedef struct _WidgetsTaskRowPrivate WidgetsTaskRowPrivate;

#define OBJECTS_TYPE_TASK (objects_task_get_type ())
#define OBJECTS_TASK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TASK, ObjectsTask))
#define OBJECTS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TASK, ObjectsTaskClass))
#define OBJECTS_IS_TASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TASK))
#define OBJECTS_IS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TASK))
#define OBJECTS_TASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TASK, ObjectsTaskClass))

typedef struct _ObjectsTask ObjectsTask;
typedef struct _ObjectsTaskClass ObjectsTaskClass;

#define WIDGETS_TYPE_WHEN_BUTTON (widgets_when_button_get_type ())
#define WIDGETS_WHEN_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButton))
#define WIDGETS_WHEN_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButtonClass))
#define WIDGETS_IS_WHEN_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_WHEN_BUTTON))
#define WIDGETS_IS_WHEN_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_WHEN_BUTTON))
#define WIDGETS_WHEN_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButtonClass))

typedef struct _WidgetsWhenButton WidgetsWhenButton;
typedef struct _WidgetsWhenButtonClass WidgetsWhenButtonClass;
enum  {
	WIDGETS_TASK_ROW_0_PROPERTY,
	WIDGETS_TASK_ROW_TASK_PROPERTY,
	WIDGETS_TASK_ROW_NUM_PROPERTIES
};
static GParamSpec* widgets_task_row_properties[WIDGETS_TASK_ROW_NUM_PROPERTIES];
#define _objects_task_unref0(var) ((var == NULL) ? NULL : (var = (objects_task_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define WIDGETS_TYPE_LABEL_CHILD (widgets_label_child_get_type ())
#define WIDGETS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChild))
#define WIDGETS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChildClass))
#define WIDGETS_IS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_LABEL_CHILD))
#define WIDGETS_IS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_LABEL_CHILD))
#define WIDGETS_LABEL_CHILD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChildClass))

typedef struct _WidgetsLabelChild WidgetsLabelChild;
typedef struct _WidgetsLabelChildClass WidgetsLabelChildClass;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
typedef struct _ObjectsLabelPrivate ObjectsLabelPrivate;
typedef struct _ObjectsTaskPrivate ObjectsTaskPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))

#define WIDGETS_TYPE_CHECK_ROW (widgets_check_row_get_type ())
#define WIDGETS_CHECK_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_CHECK_ROW, WidgetsCheckRow))
#define WIDGETS_CHECK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_CHECK_ROW, WidgetsCheckRowClass))
#define WIDGETS_IS_CHECK_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_CHECK_ROW))
#define WIDGETS_IS_CHECK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_CHECK_ROW))
#define WIDGETS_CHECK_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_CHECK_ROW, WidgetsCheckRowClass))

typedef struct _WidgetsCheckRow WidgetsCheckRow;
typedef struct _WidgetsCheckRowClass WidgetsCheckRowClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
#define _objects_label_unref0(var) ((var == NULL) ? NULL : (var = (objects_label_unref (var), NULL)))
#define _g_time_zone_unref0(var) ((var == NULL) ? NULL : (var = (g_time_zone_unref (var), NULL)))

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;
typedef struct _ObjectsProjectPrivate ObjectsProjectPrivate;
#define _objects_project_unref0(var) ((var == NULL) ? NULL : (var = (objects_project_unref (var), NULL)))
typedef struct _WidgetsWhenButtonPrivate WidgetsWhenButtonPrivate;

#define SERVICES_TYPE_NOTIFICATIONS (services_notifications_get_type ())
#define SERVICES_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotifications))
#define SERVICES_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))
#define SERVICES_IS_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_IS_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_NOTIFICATIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))

typedef struct _ServicesNotifications ServicesNotifications;
typedef struct _ServicesNotificationsClass ServicesNotificationsClass;

#define WIDGETS_POPOVERS_TYPE_TASK_MENU (widgets_popovers_task_menu_get_type ())
#define WIDGETS_POPOVERS_TASK_MENU(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_POPOVERS_TYPE_TASK_MENU, WidgetsPopoversTaskMenu))
#define WIDGETS_POPOVERS_TASK_MENU_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_POPOVERS_TYPE_TASK_MENU, WidgetsPopoversTaskMenuClass))
#define WIDGETS_POPOVERS_IS_TASK_MENU(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_POPOVERS_TYPE_TASK_MENU))
#define WIDGETS_POPOVERS_IS_TASK_MENU_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_POPOVERS_TYPE_TASK_MENU))
#define WIDGETS_POPOVERS_TASK_MENU_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_POPOVERS_TYPE_TASK_MENU, WidgetsPopoversTaskMenuClass))

typedef struct _WidgetsPopoversTaskMenu WidgetsPopoversTaskMenu;
typedef struct _WidgetsPopoversTaskMenuClass WidgetsPopoversTaskMenuClass;
typedef struct _Block57Data Block57Data;

#define WIDGETS_TYPE_LABEL_BUTTON (widgets_label_button_get_type ())
#define WIDGETS_LABEL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButton))
#define WIDGETS_LABEL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButtonClass))
#define WIDGETS_IS_LABEL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_LABEL_BUTTON))
#define WIDGETS_IS_LABEL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_LABEL_BUTTON))
#define WIDGETS_LABEL_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButtonClass))

typedef struct _WidgetsLabelButton WidgetsLabelButton;
typedef struct _WidgetsLabelButtonClass WidgetsLabelButtonClass;

#define WIDGETS_TYPE_MOVE_BUTTON (widgets_move_button_get_type ())
#define WIDGETS_MOVE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_MOVE_BUTTON, WidgetsMoveButton))
#define WIDGETS_MOVE_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_MOVE_BUTTON, WidgetsMoveButtonClass))
#define WIDGETS_IS_MOVE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_MOVE_BUTTON))
#define WIDGETS_IS_MOVE_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_MOVE_BUTTON))
#define WIDGETS_MOVE_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_MOVE_BUTTON, WidgetsMoveButtonClass))

typedef struct _WidgetsMoveButton WidgetsMoveButton;
typedef struct _WidgetsMoveButtonClass WidgetsMoveButtonClass;

#define SERVICES_TYPE_SIGNALS (services_signals_get_type ())
#define SERVICES_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_SIGNALS, ServicesSignals))
#define SERVICES_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_SIGNALS, ServicesSignalsClass))
#define SERVICES_IS_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_SIGNALS))
#define SERVICES_IS_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_SIGNALS))
#define SERVICES_SIGNALS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_SIGNALS, ServicesSignalsClass))

typedef struct _ServicesSignals ServicesSignals;
typedef struct _ServicesSignalsClass ServicesSignalsClass;

#define DIALOGS_TYPE_SHARE_DIALOG (dialogs_share_dialog_get_type ())
#define DIALOGS_SHARE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_TYPE_SHARE_DIALOG, DialogsShareDialog))
#define DIALOGS_SHARE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_TYPE_SHARE_DIALOG, DialogsShareDialogClass))
#define DIALOGS_IS_SHARE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_TYPE_SHARE_DIALOG))
#define DIALOGS_IS_SHARE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_TYPE_SHARE_DIALOG))
#define DIALOGS_SHARE_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_TYPE_SHARE_DIALOG, DialogsShareDialogClass))

typedef struct _DialogsShareDialog DialogsShareDialog;
typedef struct _DialogsShareDialogClass DialogsShareDialogClass;

#define TYPE_APPLICATION (application_get_type ())
#define APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_APPLICATION, Application))
#define APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_APPLICATION, ApplicationClass))
#define IS_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_APPLICATION))
#define IS_APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_APPLICATION))
#define APPLICATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_APPLICATION, ApplicationClass))

typedef struct _Application Application;
typedef struct _ApplicationClass ApplicationClass;
typedef struct _ApplicationPrivate ApplicationPrivate;

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;
typedef struct _Block58Data Block58Data;
enum  {
	WIDGETS_TASK_ROW_ON_SIGNAL_UPDATE_SIGNAL,
	WIDGETS_TASK_ROW_ON_SIGNAL_REMOVE_SIGNAL,
	WIDGETS_TASK_ROW_NUM_SIGNALS
};
static guint widgets_task_row_signals[WIDGETS_TASK_ROW_NUM_SIGNALS] = {0};

struct _WidgetsTaskRow {
	GtkListBoxRow parent_instance;
	WidgetsTaskRowPrivate * priv;
	GtkLabel* name_label;
	GtkBox* previews_box;
	GtkBox* project_preview_box;
	GtkRevealer* bottom_box_revealer;
	GtkBox* project_box;
};

struct _WidgetsTaskRowClass {
	GtkListBoxRowClass parent_class;
};

struct _WidgetsTaskRowPrivate {
	ObjectsTask* _task;
	GtkFlowBox* labels_flowbox;
	GtkCheckButton* checked_button;
	GtkEntry* name_entry;
	GtkButton* close_button;
	GtkButton* remove_button;
	GtkImage* note_preview_icon;
	GtkImage* label_preview_icon;
	GtkLabel* checklist_preview_label;
	GtkBox* checklist_preview_box;
	GtkLabel* when_preview_label;
	GtkLabel* project_preview_label;
	GtkBox* reminder_preview_box;
	GtkLabel* reminder_preview_label;
	GtkRevealer* labels_flowbox_revealer;
	GtkTextView* note_view;
	GtkLabel* note_view_placeholder_label;
	GtkGrid* main_grid;
	GtkEventBox* name_eventbox;
	GtkListBox* checklist;
	GtkBox* top_box;
	GtkRevealer* remove_revealer;
	GtkRevealer* close_revealer;
	WidgetsWhenButton* when_button;
};

struct _ObjectsLabel {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsLabelPrivate * priv;
	gint id;
	gchar* name;
	gchar* color;
};

struct _ObjectsLabelClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsLabel *self);
};

struct _ObjectsTask {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsTaskPrivate * priv;
	gint id;
	gint checked;
	gint project_id;
	gint list_id;
	gint task_order;
	gint is_inbox;
	gint has_reminder;
	gint sidebar_width;
	gint was_notified;
	gchar* content;
	gchar* note;
	gchar* when_date_utc;
	gchar* reminder_time;
	gchar* labels;
	gchar* checklist;
};

struct _ObjectsTaskClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsTask *self);
};

struct _ObjectsProject {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsProjectPrivate * priv;
	gint id;
	gchar* name;
	gchar* note;
	gchar* deadline;
	gint item_order;
	gint is_deleted;
	gchar* color;
};

struct _ObjectsProjectClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsProject *self);
};

struct _WidgetsWhenButton {
	GtkToggleButton parent_instance;
	WidgetsWhenButtonPrivate * priv;
	gboolean has_when;
	gboolean has_reminder;
	GDateTime* reminder_datetime;
	GDateTime* when_datetime;
};

struct _WidgetsWhenButtonClass {
	GtkToggleButtonClass parent_class;
};

struct _Block57Data {
	int _ref_count_;
	WidgetsTaskRow* self;
	GtkGrid* project_preview_icon;
	GtkEntry* checklist_entry;
	GtkToggleButton* menu_button;
	WidgetsPopoversTaskMenu* menu_popover;
};

struct _Application {
	GtkApplication parent_instance;
	ApplicationPrivate * priv;
	MainWindow* main_window;
};

struct _ApplicationClass {
	GtkApplicationClass parent_class;
};

struct _Block58Data {
	int _ref_count_;
	WidgetsTaskRow* self;
	gboolean b;
	gint c;
};


static gpointer widgets_task_row_parent_class = NULL;
extern ServicesDatabase* application_database;
extern Utils* application_utils;
extern ServicesNotifications* application_notification;
extern ServicesSignals* application_signals;

GType widgets_task_row_get_type (void) G_GNUC_CONST;
gpointer objects_task_ref (gpointer instance);
void objects_task_unref (gpointer instance);
GParamSpec* objects_param_spec_task (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void objects_value_set_task (GValue* value,
                             gpointer v_object);
void objects_value_take_task (GValue* value,
                              gpointer v_object);
gpointer objects_value_get_task (const GValue* value);
GType objects_task_get_type (void) G_GNUC_CONST;
GType widgets_when_button_get_type (void) G_GNUC_CONST;
#define WIDGETS_TASK_ROW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRowPrivate))
WidgetsTaskRow* widgets_task_row_new (ObjectsTask* _task);
WidgetsTaskRow* widgets_task_row_construct (GType object_type,
                                            ObjectsTask* _task);
static gboolean widgets_task_row_is_repeted (WidgetsTaskRow* self,
                                      gint id);
GType widgets_label_child_get_type (void) G_GNUC_CONST;
gpointer objects_label_ref (gpointer instance);
void objects_label_unref (gpointer instance);
GParamSpec* objects_param_spec_label (const gchar* name,
                                      const gchar* nick,
                                      const gchar* blurb,
                                      GType object_type,
                                      GParamFlags flags);
void objects_value_set_label (GValue* value,
                              gpointer v_object);
void objects_value_take_label (GValue* value,
                               gpointer v_object);
gpointer objects_value_get_label (const GValue* value);
GType objects_label_get_type (void) G_GNUC_CONST;
ObjectsLabel* widgets_label_child_get_label (WidgetsLabelChild* self);
static gboolean widgets_task_row_is_empty (WidgetsTaskRow* self,
                                    GtkFlowBox* flowbox);
static void widgets_task_row_update_checklist (WidgetsTaskRow* self);
ObjectsTask* widgets_task_row_get_task (WidgetsTaskRow* self);
GType widgets_check_row_get_type (void) G_GNUC_CONST;
WidgetsCheckRow* widgets_check_row_new (const gchar* _name,
                                        gboolean _checked);
WidgetsCheckRow* widgets_check_row_construct (GType object_type,
                                              const gchar* _name,
                                              gboolean _checked);
static void widgets_task_row_update_labels (WidgetsTaskRow* self);
GType services_database_get_type (void) G_GNUC_CONST;
ObjectsLabel* services_database_get_label (ServicesDatabase* self,
                                           const gchar* id);
WidgetsLabelChild* widgets_label_child_new (ObjectsLabel* _label);
WidgetsLabelChild* widgets_label_child_construct (GType object_type,
                                                  ObjectsLabel* _label);
static void widgets_task_row_check_task_completed (WidgetsTaskRow* self);
void widgets_task_row_check_checklist_progress (WidgetsTaskRow* self);
void widgets_task_row_check_when_preview_icon (WidgetsTaskRow* self);
GType utils_get_type (void) G_GNUC_CONST;
gchar* utils_get_default_date_format_from_date (Utils* self,
                                                GDateTime* date);
gboolean utils_is_today (Utils* self,
                         GDateTime* date_1);
gboolean utils_is_tomorrow (Utils* self,
                            GDateTime* date_1);
void widgets_task_row_check_reminder_preview_icon (WidgetsTaskRow* self);
void widgets_task_row_show_content (WidgetsTaskRow* self);
void widgets_task_row_hide_content (WidgetsTaskRow* self);
void widgets_task_row_update_task (WidgetsTaskRow* self);
void widgets_task_row_check_note_preview_icon (WidgetsTaskRow* self);
void widgets_task_row_check_label_preview_icon (WidgetsTaskRow* self);
void widgets_task_row_set_update_task (WidgetsTaskRow* self,
                                       ObjectsTask* _task);
gpointer objects_project_ref (gpointer instance);
void objects_project_unref (gpointer instance);
GParamSpec* objects_param_spec_project (const gchar* name,
                                        const gchar* nick,
                                        const gchar* blurb,
                                        GType object_type,
                                        GParamFlags flags);
void objects_value_set_project (GValue* value,
                                gpointer v_object);
void objects_value_take_project (GValue* value,
                                 gpointer v_object);
gpointer objects_value_get_project (const GValue* value);
GType objects_project_get_type (void) G_GNUC_CONST;
ObjectsProject* services_database_get_project (ServicesDatabase* self,
                                               gint id);
void widgets_when_button_set_date (WidgetsWhenButton* self,
                                   GDateTime* date,
                                   gboolean _has_reminder,
                                   GDateTime* _reminder_datetime);
GType services_notifications_get_type (void) G_GNUC_CONST;
gchar* widgets_check_row_get_check (WidgetsCheckRow* self);
gint services_database_update_task (ServicesDatabase* self,
                                    ObjectsTask* task);
static void widgets_task_row_set_task (WidgetsTaskRow* self,
                                ObjectsTask* value);
static void g_cclosure_user_marshal_VOID__OBJECTS_TASK (GClosure * closure,
                                                 GValue * return_value,
                                                 guint n_param_values,
                                                 const GValue * param_values,
                                                 gpointer invocation_hint,
                                                 gpointer marshal_data);
static GObject * widgets_task_row_constructor (GType type,
                                        guint n_construct_properties,
                                        GObjectConstructParam * construct_properties);
GType widgets_popovers_task_menu_get_type (void) G_GNUC_CONST;
static Block57Data* block57_data_ref (Block57Data* _data57_);
static void block57_data_unref (void * _userdata_);
WidgetsWhenButton* widgets_when_button_new (void);
WidgetsWhenButton* widgets_when_button_construct (GType object_type);
GType widgets_label_button_get_type (void) G_GNUC_CONST;
WidgetsLabelButton* widgets_label_button_new (void);
WidgetsLabelButton* widgets_label_button_construct (GType object_type);
GType widgets_move_button_get_type (void) G_GNUC_CONST;
WidgetsMoveButton* widgets_move_button_new (void);
WidgetsMoveButton* widgets_move_button_construct (GType object_type);
WidgetsPopoversTaskMenu* widgets_popovers_task_menu_new (GtkWidget* relative);
WidgetsPopoversTaskMenu* widgets_popovers_task_menu_construct (GType object_type,
                                                               GtkWidget* relative);
static void _widgets_task_row___lambda69_ (Block57Data* _data57_);
static void __widgets_task_row___lambda69__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                               gpointer self);
static void _widgets_task_row___lambda70_ (Block57Data* _data57_);
static void __widgets_task_row___lambda70__gtk_popover_closed (GtkPopover* _sender,
                                                        gpointer self);
static void _widgets_task_row___lambda71_ (WidgetsTaskRow* self,
                                    gint index);
gint services_database_add_task (ServicesDatabase* self,
                                 ObjectsTask* task);
ObjectsTask* services_database_get_last_task (ServicesDatabase* self);
GType services_signals_get_type (void) G_GNUC_CONST;
GType dialogs_share_dialog_get_type (void) G_GNUC_CONST;
GType application_get_type (void) G_GNUC_CONST;
Application* application_get_instance (void);
GType main_window_get_type (void) G_GNUC_CONST;
DialogsShareDialog* dialogs_share_dialog_new (MainWindow* parent);
DialogsShareDialog* dialogs_share_dialog_construct (GType object_type,
                                                    MainWindow* parent);
void dialogs_share_dialog_set_task (DialogsShareDialog* self,
                                    gint value);
static void _gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                        gpointer self);
static void __widgets_task_row___lambda71__widgets_popovers_task_menu_on_selected_menu (WidgetsPopoversTaskMenu* _sender,
                                                                                 gint index,
                                                                                 gpointer self);
static void _widgets_task_row___lambda75_ (Block57Data* _data57_,
                                    gboolean is_inbox,
                                    ObjectsProject* project);
static void __widgets_task_row___lambda75__widgets_move_button_on_selected_project (WidgetsMoveButton* _sender,
                                                                             gboolean is_inbox,
                                                                             ObjectsProject* project,
                                                                             gpointer self);
static gboolean _widgets_task_row___lambda76_ (WidgetsTaskRow* self);
static gboolean __widgets_task_row___lambda76__gtk_widget_focus_in_event (GtkWidget* _sender,
                                                                   GdkEventFocus* event,
                                                                   gpointer self);
static gboolean _widgets_task_row___lambda77_ (WidgetsTaskRow* self);
static gboolean __widgets_task_row___lambda77__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                    GdkEventFocus* event,
                                                                    gpointer self);
static void _widgets_task_row___lambda78_ (WidgetsTaskRow* self);
gchar* utils_first_letter_to_up (Utils* self,
                                 const gchar* text);
static void __widgets_task_row___lambda78__gtk_editable_changed (GtkEditable* _sender,
                                                          gpointer self);
static gboolean _widgets_task_row___lambda79_ (WidgetsTaskRow* self,
                                        GdkEventKey* key);
static gboolean __widgets_task_row___lambda79__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                      GdkEventKey* event,
                                                                      gpointer self);
static void _widgets_task_row___lambda80_ (WidgetsTaskRow* self);
static void __widgets_task_row___lambda80__gtk_entry_activate (GtkEntry* _sender,
                                                        gpointer self);
static void _widgets_task_row___lambda81_ (WidgetsTaskRow* self,
                                    GtkEntryIconPosition pos,
                                    GdkEventButton* event);
static void __widgets_task_row___lambda81__gtk_entry_icon_press (GtkEntry* _sender,
                                                          GtkEntryIconPosition icon_pos,
                                                          GdkEventButton* event,
                                                          gpointer self);
static gboolean _widgets_task_row___lambda82_ (WidgetsTaskRow* self,
                                        GdkEventButton* event);
static gboolean __widgets_task_row___lambda82__gtk_widget_button_press_event (GtkWidget* _sender,
                                                                       GdkEventButton* event,
                                                                       gpointer self);
static void _widgets_task_row___lambda83_ (WidgetsTaskRow* self);
static void __widgets_task_row___lambda83__gtk_button_clicked (GtkButton* _sender,
                                                        gpointer self);
static gboolean _widgets_task_row___lambda84_ (WidgetsTaskRow* self,
                                        GdkEventButton* event);
static gboolean __lambda85_ (WidgetsTaskRow* self);
static gboolean ___lambda85__gsource_func (gpointer self);
static gboolean __widgets_task_row___lambda84__gtk_widget_button_press_event (GtkWidget* _sender,
                                                                       GdkEventButton* event,
                                                                       gpointer self);
static void _widgets_task_row___lambda86_ (WidgetsTaskRow* self);
static void __widgets_task_row___lambda86__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                               gpointer self);
static gboolean _widgets_task_row___lambda87_ (WidgetsTaskRow* self,
                                        GdkEventCrossing* event);
static gboolean __widgets_task_row___lambda87__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                                       GdkEventCrossing* event,
                                                                       gpointer self);
static gboolean _widgets_task_row___lambda88_ (WidgetsTaskRow* self,
                                        GdkEventCrossing* event);
static gboolean __widgets_task_row___lambda88__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                                       GdkEventCrossing* event,
                                                                       gpointer self);
static void _widgets_task_row___lambda89_ (WidgetsTaskRow* self);
gint services_database_remove_task (ServicesDatabase* self,
                                    ObjectsTask* task);
static gboolean ____lambda90_ (WidgetsTaskRow* self);
static gboolean _____lambda90__gsource_func (gpointer self);
static void __widgets_task_row___lambda89__gtk_button_clicked (GtkButton* _sender,
                                                        gpointer self);
static void _widgets_task_row___lambda91_ (Block57Data* _data57_);
static void __widgets_task_row___lambda91__gtk_entry_activate (GtkEntry* _sender,
                                                        gpointer self);
static void _widgets_task_row___lambda92_ (Block57Data* _data57_);
static void __widgets_task_row___lambda92__gtk_editable_changed (GtkEditable* _sender,
                                                          gpointer self);
static gboolean _widgets_task_row___lambda93_ (Block57Data* _data57_);
static gboolean __widgets_task_row___lambda93__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                    GdkEventFocus* event,
                                                                    gpointer self);
static gboolean _widgets_task_row___lambda94_ (WidgetsTaskRow* self,
                                        GdkEventKey* key);
static gboolean __widgets_task_row___lambda94__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                      GdkEventKey* event,
                                                                      gpointer self);
static gboolean _widgets_task_row___lambda95_ (WidgetsTaskRow* self,
                                        GdkEventCrossing* event);
static gboolean __widgets_task_row___lambda95__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                                       GdkEventCrossing* event,
                                                                       gpointer self);
static gboolean _widgets_task_row___lambda96_ (WidgetsTaskRow* self,
                                        GdkEventCrossing* event);
static gboolean __widgets_task_row___lambda96__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                                       GdkEventCrossing* event,
                                                                       gpointer self);
static void _widgets_task_row___lambda97_ (WidgetsTaskRow* self,
                                    ObjectsLabel* label);
static void __widgets_task_row___lambda97__widgets_label_button_on_selected_label (WidgetsLabelButton* _sender,
                                                                            ObjectsLabel* label,
                                                                            gpointer self);
static void _widgets_task_row___lambda98_ (WidgetsTaskRow* self,
                                    GtkWidget* widget);
static void __widgets_task_row___lambda98__gtk_container_remove (GtkContainer* _sender,
                                                          GtkWidget* widget,
                                                          gpointer self);
static gboolean _widgets_task_row___lambda99_ (WidgetsTaskRow* self);
static gboolean __widgets_task_row___lambda99__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                    GdkEventFocus* event,
                                                                    gpointer self);
static gboolean _widgets_task_row___lambda100_ (WidgetsTaskRow* self);
static gboolean __widgets_task_row___lambda100__gtk_widget_focus_in_event (GtkWidget* _sender,
                                                                    GdkEventFocus* event,
                                                                    gpointer self);
static void _widgets_task_row___lambda101_ (WidgetsTaskRow* self,
                                     gint task_id,
                                     gint project_id);
static Block58Data* block58_data_ref (Block58Data* _data58_);
static void block58_data_unref (void * _userdata_);
static gboolean ___lambda102_ (Block58Data* _data58_);
static gboolean ____lambda102__gsource_func (gpointer self);
static void __widgets_task_row___lambda101__services_signals_go_task_page (ServicesSignals* _sender,
                                                                    gint task_id,
                                                                    gint project_id,
                                                                    gpointer self);
static void widgets_task_row_finalize (GObject * obj);
static void _vala_widgets_task_row_get_property (GObject * object,
                                          guint property_id,
                                          GValue * value,
                                          GParamSpec * pspec);
static void _vala_widgets_task_row_set_property (GObject * object,
                                          guint property_id,
                                          const GValue * value,
                                          GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


WidgetsTaskRow*
widgets_task_row_construct (GType object_type,
                            ObjectsTask* _task)
{
	WidgetsTaskRow * self = NULL;
#line 68 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_val_if_fail (_task != NULL, NULL);
#line 69 "/run/build/planner/src/Widgets/TaskRow.vala"
	self = (WidgetsTaskRow*) g_object_new (object_type, "task", _task, NULL);
#line 68 "/run/build/planner/src/Widgets/TaskRow.vala"
	return self;
#line 682 "TaskRow.c"
}


WidgetsTaskRow*
widgets_task_row_new (ObjectsTask* _task)
{
#line 68 "/run/build/planner/src/Widgets/TaskRow.vala"
	return widgets_task_row_construct (WIDGETS_TYPE_TASK_ROW, _task);
#line 691 "TaskRow.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 656 "/run/build/planner/src/Widgets/TaskRow.vala"
	return self ? g_object_ref (self) : NULL;
#line 700 "TaskRow.c"
}


static gboolean
widgets_task_row_is_repeted (WidgetsTaskRow* self,
                             gint id)
{
	gboolean result = FALSE;
	GtkFlowBox* _tmp0_;
	GList* _tmp1_;
#line 655 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 656 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->labels_flowbox;
#line 656 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 717 "TaskRow.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 656 "/run/build/planner/src/Widgets/TaskRow.vala"
		element_collection = _tmp1_;
#line 656 "/run/build/planner/src/Widgets/TaskRow.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 725 "TaskRow.c"
			GtkWidget* _tmp2_;
			GtkWidget* element = NULL;
#line 656 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp2_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 656 "/run/build/planner/src/Widgets/TaskRow.vala"
			element = _tmp2_;
#line 732 "TaskRow.c"
			{
				WidgetsLabelChild* child = NULL;
				GtkWidget* _tmp3_;
				WidgetsLabelChild* _tmp4_;
				WidgetsLabelChild* _tmp5_;
				ObjectsLabel* _tmp6_;
				ObjectsLabel* _tmp7_;
				gint _tmp8_;
#line 657 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp3_ = element;
#line 657 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, WIDGETS_TYPE_LABEL_CHILD) ? ((WidgetsLabelChild*) _tmp3_) : NULL);
#line 657 "/run/build/planner/src/Widgets/TaskRow.vala"
				child = _tmp4_;
#line 658 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp5_ = child;
#line 658 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp6_ = widgets_label_child_get_label (_tmp5_);
#line 658 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp7_ = _tmp6_;
#line 658 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp8_ = _tmp7_->id;
#line 658 "/run/build/planner/src/Widgets/TaskRow.vala"
				if (_tmp8_ == id) {
#line 659 "/run/build/planner/src/Widgets/TaskRow.vala"
					result = TRUE;
#line 659 "/run/build/planner/src/Widgets/TaskRow.vala"
					_g_object_unref0 (child);
#line 659 "/run/build/planner/src/Widgets/TaskRow.vala"
					_g_object_unref0 (element);
#line 659 "/run/build/planner/src/Widgets/TaskRow.vala"
					(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 659 "/run/build/planner/src/Widgets/TaskRow.vala"
					return result;
#line 767 "TaskRow.c"
				}
#line 656 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_object_unref0 (child);
#line 656 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_object_unref0 (element);
#line 773 "TaskRow.c"
			}
		}
#line 656 "/run/build/planner/src/Widgets/TaskRow.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 778 "TaskRow.c"
	}
#line 663 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = FALSE;
#line 663 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 784 "TaskRow.c"
}


static gboolean
widgets_task_row_is_empty (WidgetsTaskRow* self,
                           GtkFlowBox* flowbox)
{
	gboolean result = FALSE;
	gint l = 0;
	GList* _tmp0_;
	gint _tmp3_;
#line 666 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 666 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_val_if_fail (flowbox != NULL, FALSE);
#line 667 "/run/build/planner/src/Widgets/TaskRow.vala"
	l = 0;
#line 668 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = gtk_container_get_children ((GtkContainer*) flowbox);
#line 804 "TaskRow.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 668 "/run/build/planner/src/Widgets/TaskRow.vala"
		element_collection = _tmp0_;
#line 668 "/run/build/planner/src/Widgets/TaskRow.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 812 "TaskRow.c"
			GtkWidget* _tmp1_;
			GtkWidget* element = NULL;
#line 668 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp1_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 668 "/run/build/planner/src/Widgets/TaskRow.vala"
			element = _tmp1_;
#line 819 "TaskRow.c"
			{
				gint _tmp2_;
#line 669 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp2_ = l;
#line 669 "/run/build/planner/src/Widgets/TaskRow.vala"
				l = _tmp2_ + 1;
#line 668 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_object_unref0 (element);
#line 828 "TaskRow.c"
			}
		}
#line 668 "/run/build/planner/src/Widgets/TaskRow.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 833 "TaskRow.c"
	}
#line 672 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp3_ = l;
#line 672 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp3_ <= 0) {
#line 673 "/run/build/planner/src/Widgets/TaskRow.vala"
		result = TRUE;
#line 673 "/run/build/planner/src/Widgets/TaskRow.vala"
		return result;
#line 843 "TaskRow.c"
	} else {
#line 675 "/run/build/planner/src/Widgets/TaskRow.vala"
		result = FALSE;
#line 675 "/run/build/planner/src/Widgets/TaskRow.vala"
		return result;
#line 849 "TaskRow.c"
	}
}


static glong
string_strnlen (gchar* str,
                glong maxlen)
{
	glong result = 0L;
	gchar* end = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
#line 1392 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = memchr (str, 0, (gsize) maxlen);
#line 1392 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	end = _tmp0_;
#line 1393 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp1_ = end;
#line 1393 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (_tmp1_ == NULL) {
#line 1394 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = maxlen;
#line 1394 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 874 "TaskRow.c"
	} else {
		gchar* _tmp2_;
#line 1396 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp2_ = end;
#line 1396 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = (glong) (_tmp2_ - str);
#line 1396 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 883 "TaskRow.c"
	}
}


static gchar*
string_substring (const gchar* self,
                  glong offset,
                  glong len)
{
	gchar* result = NULL;
	glong string_length = 0L;
	gboolean _tmp0_ = FALSE;
	glong _tmp6_;
	gchar* _tmp7_;
#line 1403 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1405 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (offset >= ((glong) 0)) {
#line 1405 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp0_ = len >= ((glong) 0);
#line 904 "TaskRow.c"
	} else {
#line 1405 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp0_ = FALSE;
#line 908 "TaskRow.c"
	}
#line 1405 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (_tmp0_) {
#line 1407 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		string_length = string_strnlen ((gchar*) self, offset + len);
#line 914 "TaskRow.c"
	} else {
		gint _tmp1_;
		gint _tmp2_;
#line 1409 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp1_ = strlen (self);
#line 1409 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp2_ = _tmp1_;
#line 1409 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		string_length = (glong) _tmp2_;
#line 924 "TaskRow.c"
	}
#line 1412 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (offset < ((glong) 0)) {
#line 928 "TaskRow.c"
		glong _tmp3_;
#line 1413 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp3_ = string_length;
#line 1413 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		offset = _tmp3_ + offset;
#line 1414 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		g_return_val_if_fail (offset >= ((glong) 0), NULL);
#line 936 "TaskRow.c"
	} else {
		glong _tmp4_;
#line 1416 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp4_ = string_length;
#line 1416 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		g_return_val_if_fail (offset <= _tmp4_, NULL);
#line 943 "TaskRow.c"
	}
#line 1418 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (len < ((glong) 0)) {
#line 947 "TaskRow.c"
		glong _tmp5_;
#line 1419 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp5_ = string_length;
#line 1419 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		len = _tmp5_ - offset;
#line 953 "TaskRow.c"
	}
#line 1421 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp6_ = string_length;
#line 1421 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail ((offset + len) <= _tmp6_, NULL);
#line 1422 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp7_ = g_strndup (((gchar*) self) + offset, (gsize) len);
#line 1422 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _tmp7_;
#line 1422 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 965 "TaskRow.c"
}


static void
widgets_task_row_update_checklist (WidgetsTaskRow* self)
{
	GtkListBox* _tmp0_;
	GList* _tmp1_;
	gchar** checklist_array = NULL;
	ObjectsTask* _tmp5_;
	const gchar* _tmp6_;
	gchar** _tmp7_;
	gchar** _tmp8_;
	gint checklist_array_length1;
	gint _checklist_array_size_;
	gchar** _tmp9_;
	gint _tmp9__length1;
	GtkListBox* _tmp22_;
#line 679 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (self != NULL);
#line 680 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->checklist;
#line 680 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 990 "TaskRow.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 680 "/run/build/planner/src/Widgets/TaskRow.vala"
		element_collection = _tmp1_;
#line 680 "/run/build/planner/src/Widgets/TaskRow.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 998 "TaskRow.c"
			GtkWidget* _tmp2_;
			GtkWidget* element = NULL;
#line 680 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp2_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 680 "/run/build/planner/src/Widgets/TaskRow.vala"
			element = _tmp2_;
#line 1005 "TaskRow.c"
			{
				GtkListBox* _tmp3_;
				GtkWidget* _tmp4_;
#line 681 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp3_ = self->priv->checklist;
#line 681 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp4_ = element;
#line 681 "/run/build/planner/src/Widgets/TaskRow.vala"
				gtk_container_remove ((GtkContainer*) _tmp3_, _tmp4_);
#line 680 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_object_unref0 (element);
#line 1017 "TaskRow.c"
			}
		}
#line 680 "/run/build/planner/src/Widgets/TaskRow.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 1022 "TaskRow.c"
	}
#line 684 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp5_ = self->priv->_task;
#line 684 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp6_ = _tmp5_->checklist;
#line 684 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp8_ = _tmp7_ = g_strsplit (_tmp6_, ";", 0);
#line 684 "/run/build/planner/src/Widgets/TaskRow.vala"
	checklist_array = _tmp8_;
#line 684 "/run/build/planner/src/Widgets/TaskRow.vala"
	checklist_array_length1 = _vala_array_length (_tmp7_);
#line 684 "/run/build/planner/src/Widgets/TaskRow.vala"
	_checklist_array_size_ = checklist_array_length1;
#line 686 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp9_ = checklist_array;
#line 686 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp9__length1 = checklist_array_length1;
#line 1040 "TaskRow.c"
	{
		gchar** str_collection = NULL;
		gint str_collection_length1 = 0;
		gint _str_collection_size_ = 0;
		gint str_it = 0;
#line 686 "/run/build/planner/src/Widgets/TaskRow.vala"
		str_collection = _tmp9_;
#line 686 "/run/build/planner/src/Widgets/TaskRow.vala"
		str_collection_length1 = _tmp9__length1;
#line 686 "/run/build/planner/src/Widgets/TaskRow.vala"
		for (str_it = 0; str_it < _tmp9__length1; str_it = str_it + 1) {
#line 1052 "TaskRow.c"
			gchar* _tmp10_;
			gchar* str = NULL;
#line 686 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp10_ = g_strdup (str_collection[str_it]);
#line 686 "/run/build/planner/src/Widgets/TaskRow.vala"
			str = _tmp10_;
#line 1059 "TaskRow.c"
			{
				gchar* check_name = NULL;
				const gchar* _tmp11_;
				gchar* _tmp12_;
				gboolean check_active = FALSE;
				const gchar* _tmp13_;
				gchar* _tmp14_;
				gchar* _tmp15_;
				gboolean _tmp16_;
				WidgetsCheckRow* row = NULL;
				const gchar* _tmp17_;
				gboolean _tmp18_;
				WidgetsCheckRow* _tmp19_;
				GtkListBox* _tmp20_;
				WidgetsCheckRow* _tmp21_;
#line 687 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp11_ = str;
#line 687 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp12_ = string_substring (_tmp11_, (glong) 1, (glong) -1);
#line 687 "/run/build/planner/src/Widgets/TaskRow.vala"
				check_name = _tmp12_;
#line 688 "/run/build/planner/src/Widgets/TaskRow.vala"
				check_active = FALSE;
#line 690 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp13_ = str;
#line 690 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp14_ = string_substring (_tmp13_, (glong) 0, (glong) 1);
#line 690 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp15_ = _tmp14_;
#line 690 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp16_ = g_strcmp0 (_tmp15_, "0") == 0;
#line 690 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (_tmp15_);
#line 690 "/run/build/planner/src/Widgets/TaskRow.vala"
				if (_tmp16_) {
#line 691 "/run/build/planner/src/Widgets/TaskRow.vala"
					check_active = FALSE;
#line 1097 "TaskRow.c"
				} else {
#line 693 "/run/build/planner/src/Widgets/TaskRow.vala"
					check_active = TRUE;
#line 1101 "TaskRow.c"
				}
#line 696 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp17_ = check_name;
#line 696 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp18_ = check_active;
#line 696 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp19_ = widgets_check_row_new (_tmp17_, _tmp18_);
#line 696 "/run/build/planner/src/Widgets/TaskRow.vala"
				g_object_ref_sink (_tmp19_);
#line 696 "/run/build/planner/src/Widgets/TaskRow.vala"
				row = _tmp19_;
#line 698 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp20_ = self->priv->checklist;
#line 698 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp21_ = row;
#line 698 "/run/build/planner/src/Widgets/TaskRow.vala"
				gtk_container_add ((GtkContainer*) _tmp20_, (GtkWidget*) _tmp21_);
#line 686 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_object_unref0 (row);
#line 686 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (check_name);
#line 686 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (str);
#line 1125 "TaskRow.c"
			}
		}
	}
#line 701 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp22_ = self->priv->checklist;
#line 701 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp22_);
#line 679 "/run/build/planner/src/Widgets/TaskRow.vala"
	checklist_array = (_vala_array_free (checklist_array, checklist_array_length1, (GDestroyNotify) g_free), NULL);
#line 1135 "TaskRow.c"
}


static void
widgets_task_row_update_labels (WidgetsTaskRow* self)
{
	GtkFlowBox* _tmp0_;
	GList* _tmp1_;
	gchar** labels_array = NULL;
	ObjectsTask* _tmp5_;
	const gchar* _tmp6_;
	gchar** _tmp7_;
	gchar** _tmp8_;
	gint labels_array_length1;
	gint _labels_array_size_;
	gchar** _tmp9_;
	gint _tmp9__length1;
	GtkFlowBox* _tmp20_;
	GtkFlowBox* _tmp21_;
#line 704 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (self != NULL);
#line 705 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->labels_flowbox;
#line 705 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 1161 "TaskRow.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 705 "/run/build/planner/src/Widgets/TaskRow.vala"
		element_collection = _tmp1_;
#line 705 "/run/build/planner/src/Widgets/TaskRow.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 1169 "TaskRow.c"
			GtkWidget* _tmp2_;
			GtkWidget* element = NULL;
#line 705 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp2_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 705 "/run/build/planner/src/Widgets/TaskRow.vala"
			element = _tmp2_;
#line 1176 "TaskRow.c"
			{
				GtkFlowBox* _tmp3_;
				GtkWidget* _tmp4_;
#line 706 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp3_ = self->priv->labels_flowbox;
#line 706 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp4_ = element;
#line 706 "/run/build/planner/src/Widgets/TaskRow.vala"
				gtk_container_remove ((GtkContainer*) _tmp3_, _tmp4_);
#line 705 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_object_unref0 (element);
#line 1188 "TaskRow.c"
			}
		}
#line 705 "/run/build/planner/src/Widgets/TaskRow.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 1193 "TaskRow.c"
	}
#line 709 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp5_ = self->priv->_task;
#line 709 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp6_ = _tmp5_->labels;
#line 709 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp8_ = _tmp7_ = g_strsplit (_tmp6_, ";", 0);
#line 709 "/run/build/planner/src/Widgets/TaskRow.vala"
	labels_array = _tmp8_;
#line 709 "/run/build/planner/src/Widgets/TaskRow.vala"
	labels_array_length1 = _vala_array_length (_tmp7_);
#line 709 "/run/build/planner/src/Widgets/TaskRow.vala"
	_labels_array_size_ = labels_array_length1;
#line 711 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp9_ = labels_array;
#line 711 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp9__length1 = labels_array_length1;
#line 1211 "TaskRow.c"
	{
		gchar** id_collection = NULL;
		gint id_collection_length1 = 0;
		gint _id_collection_size_ = 0;
		gint id_it = 0;
#line 711 "/run/build/planner/src/Widgets/TaskRow.vala"
		id_collection = _tmp9_;
#line 711 "/run/build/planner/src/Widgets/TaskRow.vala"
		id_collection_length1 = _tmp9__length1;
#line 711 "/run/build/planner/src/Widgets/TaskRow.vala"
		for (id_it = 0; id_it < _tmp9__length1; id_it = id_it + 1) {
#line 1223 "TaskRow.c"
			gchar* _tmp10_;
			gchar* id = NULL;
#line 711 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp10_ = g_strdup (id_collection[id_it]);
#line 711 "/run/build/planner/src/Widgets/TaskRow.vala"
			id = _tmp10_;
#line 1230 "TaskRow.c"
			{
				ObjectsLabel* label = NULL;
				ServicesDatabase* _tmp11_;
				const gchar* _tmp12_;
				ObjectsLabel* _tmp13_;
				ObjectsLabel* _tmp14_;
				gint _tmp15_;
#line 712 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp11_ = application_database;
#line 712 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp12_ = id;
#line 712 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp13_ = services_database_get_label (_tmp11_, _tmp12_);
#line 712 "/run/build/planner/src/Widgets/TaskRow.vala"
				label = _tmp13_;
#line 714 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp14_ = label;
#line 714 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp15_ = _tmp14_->id;
#line 714 "/run/build/planner/src/Widgets/TaskRow.vala"
				if (_tmp15_ != 0) {
#line 1252 "TaskRow.c"
					WidgetsLabelChild* child = NULL;
					ObjectsLabel* _tmp16_;
					WidgetsLabelChild* _tmp17_;
					GtkFlowBox* _tmp18_;
					WidgetsLabelChild* _tmp19_;
#line 715 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp16_ = label;
#line 715 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp17_ = widgets_label_child_new (_tmp16_);
#line 715 "/run/build/planner/src/Widgets/TaskRow.vala"
					g_object_ref_sink (_tmp17_);
#line 715 "/run/build/planner/src/Widgets/TaskRow.vala"
					child = _tmp17_;
#line 716 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp18_ = self->priv->labels_flowbox;
#line 716 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp19_ = child;
#line 716 "/run/build/planner/src/Widgets/TaskRow.vala"
					gtk_container_add ((GtkContainer*) _tmp18_, (GtkWidget*) _tmp19_);
#line 714 "/run/build/planner/src/Widgets/TaskRow.vala"
					_g_object_unref0 (child);
#line 1274 "TaskRow.c"
				}
#line 711 "/run/build/planner/src/Widgets/TaskRow.vala"
				_objects_label_unref0 (label);
#line 711 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (id);
#line 1280 "TaskRow.c"
			}
		}
	}
#line 720 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp20_ = self->priv->labels_flowbox;
#line 720 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp20_);
#line 722 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp21_ = self->priv->labels_flowbox;
#line 722 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (widgets_task_row_is_empty (self, _tmp21_) == FALSE) {
#line 1292 "TaskRow.c"
		GtkRevealer* _tmp22_;
#line 723 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp22_ = self->priv->labels_flowbox_revealer;
#line 723 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_revealer_set_reveal_child (_tmp22_, TRUE);
#line 1298 "TaskRow.c"
	}
#line 704 "/run/build/planner/src/Widgets/TaskRow.vala"
	labels_array = (_vala_array_free (labels_array, labels_array_length1, (GDestroyNotify) g_free), NULL);
#line 1302 "TaskRow.c"
}


static void
widgets_task_row_check_task_completed (WidgetsTaskRow* self)
{
	GtkEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	GtkCheckButton* _tmp7_;
	gboolean _tmp8_;
	gboolean _tmp9_;
#line 727 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (self != NULL);
#line 728 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->name_entry;
#line 728 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = gtk_entry_get_text (_tmp0_);
#line 728 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = _tmp1_;
#line 728 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (g_strcmp0 (_tmp2_, "") != 0) {
#line 1325 "TaskRow.c"
		GtkLabel* _tmp3_;
		GtkEntry* _tmp4_;
		const gchar* _tmp5_;
		const gchar* _tmp6_;
#line 729 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp3_ = self->name_label;
#line 729 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp4_ = self->priv->name_entry;
#line 729 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp5_ = gtk_entry_get_text (_tmp4_);
#line 729 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp6_ = _tmp5_;
#line 729 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_label_set_label (_tmp3_, _tmp6_);
#line 1340 "TaskRow.c"
	}
#line 732 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp7_ = self->priv->checked_button;
#line 732 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp8_ = gtk_toggle_button_get_active ((GtkToggleButton*) _tmp7_);
#line 732 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp9_ = _tmp8_;
#line 732 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp9_) {
#line 1350 "TaskRow.c"
		GtkBox* _tmp10_;
#line 733 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp10_ = self->previews_box;
#line 733 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_opacity ((GtkWidget*) _tmp10_, 0.7);
#line 1356 "TaskRow.c"
	} else {
		GtkBox* _tmp11_;
#line 735 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp11_ = self->previews_box;
#line 735 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_opacity ((GtkWidget*) _tmp11_, (gdouble) 1);
#line 1363 "TaskRow.c"
	}
}


void
widgets_task_row_check_checklist_progress (WidgetsTaskRow* self)
{
	ObjectsTask* _tmp0_;
	const gchar* _tmp1_;
#line 739 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (self != NULL);
#line 740 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->_task;
#line 740 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = _tmp0_->checklist;
#line 740 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (g_strcmp0 (_tmp1_, "") == 0) {
#line 1381 "TaskRow.c"
		GtkBox* _tmp2_;
		GtkBox* _tmp3_;
#line 741 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp2_ = self->priv->checklist_preview_box;
#line 741 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp2_, FALSE);
#line 742 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp3_ = self->priv->checklist_preview_box;
#line 742 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp3_, TRUE);
#line 1392 "TaskRow.c"
	} else {
		GtkBox* _tmp4_;
		GtkBox* _tmp5_;
		gchar** checklist_array = NULL;
		ObjectsTask* _tmp6_;
		const gchar* _tmp7_;
		gchar** _tmp8_;
		gchar** _tmp9_;
		gint checklist_array_length1;
		gint _checklist_array_size_;
		gint all = 0;
		gint completed = 0;
		gchar** _tmp10_;
		gint _tmp10__length1;
		GtkLabel* _tmp18_;
		gint _tmp19_;
		gint _tmp20_;
		gchar* _tmp21_;
		gchar* _tmp22_;
#line 744 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp4_ = self->priv->checklist_preview_box;
#line 744 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp4_, TRUE);
#line 745 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp5_ = self->priv->checklist_preview_box;
#line 745 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp5_, FALSE);
#line 747 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp6_ = self->priv->_task;
#line 747 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp7_ = _tmp6_->checklist;
#line 747 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp9_ = _tmp8_ = g_strsplit (_tmp7_, ";", 0);
#line 747 "/run/build/planner/src/Widgets/TaskRow.vala"
		checklist_array = _tmp9_;
#line 747 "/run/build/planner/src/Widgets/TaskRow.vala"
		checklist_array_length1 = _vala_array_length (_tmp8_);
#line 747 "/run/build/planner/src/Widgets/TaskRow.vala"
		_checklist_array_size_ = checklist_array_length1;
#line 748 "/run/build/planner/src/Widgets/TaskRow.vala"
		all = -1;
#line 749 "/run/build/planner/src/Widgets/TaskRow.vala"
		completed = 0;
#line 751 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp10_ = checklist_array;
#line 751 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp10__length1 = checklist_array_length1;
#line 1440 "TaskRow.c"
		{
			gchar** str_collection = NULL;
			gint str_collection_length1 = 0;
			gint _str_collection_size_ = 0;
			gint str_it = 0;
#line 751 "/run/build/planner/src/Widgets/TaskRow.vala"
			str_collection = _tmp10_;
#line 751 "/run/build/planner/src/Widgets/TaskRow.vala"
			str_collection_length1 = _tmp10__length1;
#line 751 "/run/build/planner/src/Widgets/TaskRow.vala"
			for (str_it = 0; str_it < _tmp10__length1; str_it = str_it + 1) {
#line 1452 "TaskRow.c"
				gchar* _tmp11_;
				gchar* str = NULL;
#line 751 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp11_ = g_strdup (str_collection[str_it]);
#line 751 "/run/build/planner/src/Widgets/TaskRow.vala"
				str = _tmp11_;
#line 1459 "TaskRow.c"
				{
					const gchar* _tmp12_;
					gchar* _tmp13_;
					gchar* _tmp14_;
					gboolean _tmp15_;
					gint _tmp17_;
#line 752 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp12_ = str;
#line 752 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp13_ = string_substring (_tmp12_, (glong) 0, (glong) 1);
#line 752 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp14_ = _tmp13_;
#line 752 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp15_ = g_strcmp0 (_tmp14_, "1") == 0;
#line 752 "/run/build/planner/src/Widgets/TaskRow.vala"
					_g_free0 (_tmp14_);
#line 752 "/run/build/planner/src/Widgets/TaskRow.vala"
					if (_tmp15_) {
#line 1478 "TaskRow.c"
						gint _tmp16_;
#line 753 "/run/build/planner/src/Widgets/TaskRow.vala"
						_tmp16_ = completed;
#line 753 "/run/build/planner/src/Widgets/TaskRow.vala"
						completed = _tmp16_ + 1;
#line 1484 "TaskRow.c"
					}
#line 756 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp17_ = all;
#line 756 "/run/build/planner/src/Widgets/TaskRow.vala"
					all = _tmp17_ + 1;
#line 751 "/run/build/planner/src/Widgets/TaskRow.vala"
					_g_free0 (str);
#line 1492 "TaskRow.c"
				}
			}
		}
#line 759 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp18_ = self->priv->checklist_preview_label;
#line 759 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp19_ = completed;
#line 759 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp20_ = all;
#line 759 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp21_ = g_strdup_printf ("%i/%i", _tmp19_, _tmp20_);
#line 759 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp22_ = _tmp21_;
#line 759 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_label_set_label (_tmp18_, _tmp22_);
#line 759 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_free0 (_tmp22_);
#line 740 "/run/build/planner/src/Widgets/TaskRow.vala"
		checklist_array = (_vala_array_free (checklist_array, checklist_array_length1, (GDestroyNotify) g_free), NULL);
#line 1512 "TaskRow.c"
	}
}


void
widgets_task_row_check_when_preview_icon (WidgetsTaskRow* self)
{
	ObjectsTask* _tmp0_;
	const gchar* _tmp1_;
#line 763 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (self != NULL);
#line 764 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->_task;
#line 764 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = _tmp0_->when_date_utc;
#line 764 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (g_strcmp0 (_tmp1_, "") == 0) {
#line 1530 "TaskRow.c"
		GtkLabel* _tmp2_;
		GtkLabel* _tmp3_;
#line 765 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp2_ = self->priv->when_preview_label;
#line 765 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp2_, TRUE);
#line 766 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp3_ = self->priv->when_preview_label;
#line 766 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp3_, FALSE);
#line 1541 "TaskRow.c"
	} else {
		GtkLabel* _tmp4_;
		GtkLabel* _tmp5_;
		GDateTime* when_datetime = NULL;
		ObjectsTask* _tmp6_;
		const gchar* _tmp7_;
		GTimeZone* _tmp8_;
		GTimeZone* _tmp9_;
		GDateTime* _tmp10_;
		GDateTime* _tmp11_;
		gchar* date_format = NULL;
		Utils* _tmp12_;
		GDateTime* _tmp13_;
		gchar* _tmp14_;
		Utils* _tmp15_;
		GDateTime* _tmp16_;
#line 768 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp4_ = self->priv->when_preview_label;
#line 768 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp4_, FALSE);
#line 769 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp5_ = self->priv->when_preview_label;
#line 769 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp5_, TRUE);
#line 771 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp6_ = self->priv->_task;
#line 771 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp7_ = _tmp6_->when_date_utc;
#line 771 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp8_ = g_time_zone_new_local ();
#line 771 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp9_ = _tmp8_;
#line 771 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp10_ = g_date_time_new_from_iso8601 (_tmp7_, _tmp9_);
#line 771 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp11_ = _tmp10_;
#line 771 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_time_zone_unref0 (_tmp9_);
#line 771 "/run/build/planner/src/Widgets/TaskRow.vala"
		when_datetime = _tmp11_;
#line 772 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp12_ = application_utils;
#line 772 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp13_ = when_datetime;
#line 772 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp14_ = utils_get_default_date_format_from_date (_tmp12_, _tmp13_);
#line 772 "/run/build/planner/src/Widgets/TaskRow.vala"
		date_format = _tmp14_;
#line 774 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp15_ = application_utils;
#line 774 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp16_ = when_datetime;
#line 774 "/run/build/planner/src/Widgets/TaskRow.vala"
		if (utils_is_today (_tmp15_, _tmp16_)) {
#line 1596 "TaskRow.c"
			GtkLabel* _tmp17_;
			gchar* _tmp18_;
			gchar* _tmp19_;
#line 775 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp17_ = self->priv->when_preview_label;
#line 775 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp18_ = g_strdup_printf ("<small>%s</small>", _ ("Today"));
#line 775 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp19_ = _tmp18_;
#line 775 "/run/build/planner/src/Widgets/TaskRow.vala"
			gtk_label_set_label (_tmp17_, _tmp19_);
#line 775 "/run/build/planner/src/Widgets/TaskRow.vala"
			_g_free0 (_tmp19_);
#line 1610 "TaskRow.c"
		} else {
			Utils* _tmp20_;
			GDateTime* _tmp21_;
#line 776 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp20_ = application_utils;
#line 776 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp21_ = when_datetime;
#line 776 "/run/build/planner/src/Widgets/TaskRow.vala"
			if (utils_is_tomorrow (_tmp20_, _tmp21_)) {
#line 1620 "TaskRow.c"
				GtkLabel* _tmp22_;
				gchar* _tmp23_;
				gchar* _tmp24_;
#line 777 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp22_ = self->priv->when_preview_label;
#line 777 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp23_ = g_strdup_printf ("<small>%s</small>", _ ("Tomorrow"));
#line 777 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp24_ = _tmp23_;
#line 777 "/run/build/planner/src/Widgets/TaskRow.vala"
				gtk_label_set_label (_tmp22_, _tmp24_);
#line 777 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (_tmp24_);
#line 1634 "TaskRow.c"
			} else {
				GtkLabel* _tmp25_;
				GDateTime* _tmp26_;
				const gchar* _tmp27_;
				gchar* _tmp28_;
				gchar* _tmp29_;
				gchar* _tmp30_;
				gchar* _tmp31_;
#line 779 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp25_ = self->priv->when_preview_label;
#line 779 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp26_ = when_datetime;
#line 779 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp27_ = date_format;
#line 779 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp28_ = g_date_time_format (_tmp26_, _tmp27_);
#line 779 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp29_ = _tmp28_;
#line 779 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp30_ = g_strdup_printf ("<small>%s</small>", _tmp29_);
#line 779 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp31_ = _tmp30_;
#line 779 "/run/build/planner/src/Widgets/TaskRow.vala"
				gtk_label_set_label (_tmp25_, _tmp31_);
#line 779 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (_tmp31_);
#line 779 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (_tmp29_);
#line 1663 "TaskRow.c"
			}
		}
#line 764 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_free0 (date_format);
#line 764 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_date_time_unref0 (when_datetime);
#line 1670 "TaskRow.c"
	}
}


void
widgets_task_row_check_reminder_preview_icon (WidgetsTaskRow* self)
{
	ObjectsTask* _tmp0_;
	gint _tmp1_;
#line 784 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (self != NULL);
#line 785 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->_task;
#line 785 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = _tmp0_->has_reminder;
#line 785 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp1_ == 0) {
#line 1688 "TaskRow.c"
		GtkBox* _tmp2_;
		GtkBox* _tmp3_;
#line 786 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp2_ = self->priv->reminder_preview_box;
#line 786 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp2_, TRUE);
#line 787 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp3_ = self->priv->reminder_preview_box;
#line 787 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp3_, FALSE);
#line 1699 "TaskRow.c"
	} else {
		GtkBox* _tmp4_;
		GtkBox* _tmp5_;
		gchar* time_format = NULL;
		gchar* _tmp6_;
		GDateTime* reminder_datetime = NULL;
		ObjectsTask* _tmp7_;
		const gchar* _tmp8_;
		GTimeZone* _tmp9_;
		GTimeZone* _tmp10_;
		GDateTime* _tmp11_;
		GDateTime* _tmp12_;
		GtkLabel* _tmp13_;
		GDateTime* _tmp14_;
		const gchar* _tmp15_;
		gchar* _tmp16_;
		gchar* _tmp17_;
#line 789 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp4_ = self->priv->reminder_preview_box;
#line 789 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp4_, FALSE);
#line 790 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp5_ = self->priv->reminder_preview_box;
#line 790 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp5_, TRUE);
#line 792 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp6_ = granite_date_time_get_default_time_format (TRUE, FALSE);
#line 792 "/run/build/planner/src/Widgets/TaskRow.vala"
		time_format = _tmp6_;
#line 793 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp7_ = self->priv->_task;
#line 793 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp8_ = _tmp7_->reminder_time;
#line 793 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp9_ = g_time_zone_new_local ();
#line 793 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp10_ = _tmp9_;
#line 793 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp11_ = g_date_time_new_from_iso8601 (_tmp8_, _tmp10_);
#line 793 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp12_ = _tmp11_;
#line 793 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_time_zone_unref0 (_tmp10_);
#line 793 "/run/build/planner/src/Widgets/TaskRow.vala"
		reminder_datetime = _tmp12_;
#line 794 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp13_ = self->priv->reminder_preview_label;
#line 794 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp14_ = reminder_datetime;
#line 794 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp15_ = time_format;
#line 794 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp16_ = g_date_time_format (_tmp14_, _tmp15_);
#line 794 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp17_ = _tmp16_;
#line 794 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_label_set_label (_tmp13_, _tmp17_);
#line 794 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_free0 (_tmp17_);
#line 785 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_date_time_unref0 (reminder_datetime);
#line 785 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_free0 (time_format);
#line 1763 "TaskRow.c"
	}
}


void
widgets_task_row_show_content (WidgetsTaskRow* self)
{
	GtkGrid* _tmp0_;
	GtkStyleContext* _tmp1_;
	GtkGrid* _tmp2_;
	GtkStyleContext* _tmp3_;
	GtkRevealer* _tmp4_;
	GtkGrid* _tmp5_;
	GtkBox* _tmp6_;
	GtkBox* _tmp7_;
	GtkBox* _tmp8_;
	GtkEntry* _tmp9_;
	GtkEventBox* _tmp10_;
	GtkEventBox* _tmp11_;
	GtkRevealer* _tmp12_;
	GtkEntry* _tmp13_;
	GtkLabel* _tmp14_;
	const gchar* _tmp15_;
	const gchar* _tmp16_;
#line 798 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (self != NULL);
#line 799 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->main_grid;
#line 799 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) _tmp0_);
#line 799 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp1_, "popover");
#line 800 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = self->priv->main_grid;
#line 800 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) _tmp2_);
#line 800 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp3_, "planner-popover");
#line 802 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp4_ = self->bottom_box_revealer;
#line 802 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_revealer_set_reveal_child (_tmp4_, TRUE);
#line 804 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp5_ = self->priv->main_grid;
#line 804 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp5_, 5);
#line 805 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp6_ = self->priv->top_box;
#line 805 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp6_, 6);
#line 806 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp7_ = self->priv->top_box;
#line 806 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp7_, 12);
#line 807 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp8_ = self->project_box;
#line 807 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp8_, 6);
#line 809 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp9_ = self->priv->name_entry;
#line 809 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_visible ((GtkWidget*) _tmp9_, TRUE);
#line 810 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp10_ = self->priv->name_eventbox;
#line 810 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_visible ((GtkWidget*) _tmp10_, FALSE);
#line 811 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp11_ = self->priv->name_eventbox;
#line 811 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_no_show_all ((GtkWidget*) _tmp11_, TRUE);
#line 813 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp12_ = self->priv->close_revealer;
#line 813 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp12_, GTK_ALIGN_START);
#line 814 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_has_tooltip ((GtkWidget*) self, FALSE);
#line 816 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp13_ = self->priv->name_entry;
#line 816 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp14_ = self->name_label;
#line 816 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp15_ = gtk_label_get_label (_tmp14_);
#line 816 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp16_ = _tmp15_;
#line 816 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_entry_set_text (_tmp13_, _tmp16_);
#line 1850 "TaskRow.c"
}


void
widgets_task_row_hide_content (WidgetsTaskRow* self)
{
	GtkGrid* _tmp0_;
	GtkStyleContext* _tmp1_;
	GtkGrid* _tmp2_;
	GtkStyleContext* _tmp3_;
	GtkGrid* _tmp4_;
	GtkBox* _tmp5_;
	GtkBox* _tmp6_;
	GtkBox* _tmp7_;
	GtkEntry* _tmp8_;
	GtkEventBox* _tmp9_;
	GtkEventBox* _tmp10_;
	GtkRevealer* _tmp11_;
	GtkRevealer* _tmp12_;
	GtkEntry* _tmp13_;
	const gchar* _tmp14_;
	const gchar* _tmp15_;
#line 819 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (self != NULL);
#line 820 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->main_grid;
#line 820 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) _tmp0_);
#line 820 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_remove_class (_tmp1_, "popover");
#line 821 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = self->priv->main_grid;
#line 821 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) _tmp2_);
#line 821 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_remove_class (_tmp3_, "planner-popover");
#line 823 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp4_ = self->priv->main_grid;
#line 823 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp4_, 0);
#line 824 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp5_ = self->priv->top_box;
#line 824 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp5_, 0);
#line 825 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp6_ = self->priv->top_box;
#line 825 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp6_, 0);
#line 826 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp7_ = self->project_box;
#line 826 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp7_, 0);
#line 828 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp8_ = self->priv->name_entry;
#line 828 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_visible ((GtkWidget*) _tmp8_, FALSE);
#line 829 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp9_ = self->priv->name_eventbox;
#line 829 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_visible ((GtkWidget*) _tmp9_, TRUE);
#line 830 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp10_ = self->priv->name_eventbox;
#line 830 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_no_show_all ((GtkWidget*) _tmp10_, FALSE);
#line 832 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp11_ = self->bottom_box_revealer;
#line 832 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_revealer_set_reveal_child (_tmp11_, FALSE);
#line 833 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp12_ = self->priv->close_revealer;
#line 833 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp12_, GTK_ALIGN_END);
#line 835 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp13_ = self->priv->name_entry;
#line 835 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp14_ = gtk_entry_get_text (_tmp13_);
#line 835 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp15_ = _tmp14_;
#line 835 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (g_strcmp0 (_tmp15_, "") != 0) {
#line 1931 "TaskRow.c"
		GtkEntry* _tmp16_;
		const gchar* _tmp17_;
		const gchar* _tmp18_;
#line 836 "/run/build/planner/src/Widgets/TaskRow.vala"
		widgets_task_row_update_task (self);
#line 837 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp16_ = self->priv->name_entry;
#line 837 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp17_ = gtk_entry_get_text (_tmp16_);
#line 837 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp18_ = _tmp17_;
#line 837 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_tooltip_text ((GtkWidget*) self, _tmp18_);
#line 838 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_has_tooltip ((GtkWidget*) self, TRUE);
#line 1947 "TaskRow.c"
	}
}


void
widgets_task_row_check_note_preview_icon (WidgetsTaskRow* self)
{
	ObjectsTask* _tmp0_;
	const gchar* _tmp1_;
#line 842 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (self != NULL);
#line 843 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->_task;
#line 843 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = _tmp0_->note;
#line 843 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (g_strcmp0 (_tmp1_, "") == 0) {
#line 1965 "TaskRow.c"
		GtkImage* _tmp2_;
		GtkImage* _tmp3_;
#line 844 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp2_ = self->priv->note_preview_icon;
#line 844 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp2_, FALSE);
#line 845 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp3_ = self->priv->note_preview_icon;
#line 845 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp3_, TRUE);
#line 1976 "TaskRow.c"
	} else {
		GtkImage* _tmp4_;
		GtkImage* _tmp5_;
#line 847 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp4_ = self->priv->note_preview_icon;
#line 847 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp4_, TRUE);
#line 848 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp5_ = self->priv->note_preview_icon;
#line 848 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp5_, FALSE);
#line 1988 "TaskRow.c"
	}
}


void
widgets_task_row_check_label_preview_icon (WidgetsTaskRow* self)
{
	ObjectsTask* _tmp0_;
	const gchar* _tmp1_;
#line 852 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (self != NULL);
#line 853 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->_task;
#line 853 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = _tmp0_->labels;
#line 853 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (g_strcmp0 (_tmp1_, "") == 0) {
#line 2006 "TaskRow.c"
		GtkImage* _tmp2_;
		GtkImage* _tmp3_;
#line 854 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp2_ = self->priv->label_preview_icon;
#line 854 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp2_, FALSE);
#line 855 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp3_ = self->priv->label_preview_icon;
#line 855 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp3_, TRUE);
#line 2017 "TaskRow.c"
	} else {
		GtkImage* _tmp4_;
		GtkImage* _tmp5_;
#line 857 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp4_ = self->priv->label_preview_icon;
#line 857 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp4_, TRUE);
#line 858 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp5_ = self->priv->label_preview_icon;
#line 858 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp5_, FALSE);
#line 2029 "TaskRow.c"
	}
}


static gchar*
g_date_time_to_string (GDateTime* self)
{
	gchar* result = NULL;
	gchar* _tmp0_;
#line 3009 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 3010 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = g_date_time_format (self, "%FT%H:%M:%S%z");
#line 3010 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _tmp0_;
#line 3010 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 2047 "TaskRow.c"
}


void
widgets_task_row_set_update_task (WidgetsTaskRow* self,
                                  ObjectsTask* _task)
{
	ObjectsTask* _tmp0_;
	gint _tmp1_;
	ObjectsTask* _tmp2_;
	gint _tmp3_;
	ObjectsTask* _tmp4_;
	gint _tmp5_;
	ObjectsTask* _tmp6_;
	gint _tmp7_;
	ObjectsTask* _tmp8_;
	gint _tmp9_;
	ObjectsTask* _tmp10_;
	gint _tmp11_;
	ObjectsTask* _tmp12_;
	gint _tmp13_;
	ObjectsTask* _tmp14_;
	gint _tmp15_;
	ObjectsTask* _tmp16_;
	gint _tmp17_;
	ObjectsTask* _tmp18_;
	const gchar* _tmp19_;
	gchar* _tmp20_;
	ObjectsTask* _tmp21_;
	const gchar* _tmp22_;
	gchar* _tmp23_;
	ObjectsTask* _tmp24_;
	const gchar* _tmp25_;
	gchar* _tmp26_;
	ObjectsTask* _tmp27_;
	const gchar* _tmp28_;
	gchar* _tmp29_;
	ObjectsTask* _tmp30_;
	const gchar* _tmp31_;
	gchar* _tmp32_;
	ObjectsTask* _tmp33_;
	const gchar* _tmp34_;
	gchar* _tmp35_;
	gint _tmp36_;
	GtkLabel* _tmp39_;
	const gchar* _tmp40_;
	GtkEntry* _tmp41_;
	const gchar* _tmp42_;
	ObjectsTask* _tmp43_;
	gint _tmp44_;
	GtkTextView* _tmp53_;
	GtkTextBuffer* _tmp54_;
	GtkTextBuffer* _tmp55_;
	ObjectsTask* _tmp56_;
	const gchar* _tmp57_;
	GtkTextView* _tmp58_;
	GtkTextBuffer* _tmp59_;
	GtkTextBuffer* _tmp60_;
	gchar* _tmp61_;
	gchar* _tmp62_;
	gchar* _tmp63_;
	gboolean _tmp64_;
	gboolean has_reminder = FALSE;
	ObjectsTask* _tmp67_;
	gint _tmp68_;
	WidgetsWhenButton* _tmp73_;
	ObjectsTask* _tmp74_;
	const gchar* _tmp75_;
	GTimeZone* _tmp76_;
	GTimeZone* _tmp77_;
	GDateTime* _tmp78_;
	GDateTime* _tmp79_;
	gboolean _tmp80_;
	ObjectsTask* _tmp81_;
	const gchar* _tmp82_;
	GTimeZone* _tmp83_;
	GTimeZone* _tmp84_;
	GDateTime* _tmp85_;
	GDateTime* _tmp86_;
#line 862 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (self != NULL);
#line 862 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (_task != NULL);
#line 863 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->_task;
#line 863 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = _task->id;
#line 863 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_->id = _tmp1_;
#line 864 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = self->priv->_task;
#line 864 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp3_ = _task->checked;
#line 864 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_->checked = _tmp3_;
#line 865 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp4_ = self->priv->_task;
#line 865 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp5_ = _task->project_id;
#line 865 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp4_->project_id = _tmp5_;
#line 866 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp6_ = self->priv->_task;
#line 866 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp7_ = _task->list_id;
#line 866 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp6_->list_id = _tmp7_;
#line 867 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp8_ = self->priv->_task;
#line 867 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp9_ = _task->task_order;
#line 867 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp8_->task_order = _tmp9_;
#line 868 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp10_ = self->priv->_task;
#line 868 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp11_ = _task->is_inbox;
#line 868 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp10_->is_inbox = _tmp11_;
#line 869 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp12_ = self->priv->_task;
#line 869 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp13_ = _task->has_reminder;
#line 869 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp12_->has_reminder = _tmp13_;
#line 870 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp14_ = self->priv->_task;
#line 870 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp15_ = _task->sidebar_width;
#line 870 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp14_->sidebar_width = _tmp15_;
#line 871 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp16_ = self->priv->_task;
#line 871 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp17_ = _task->was_notified;
#line 871 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp16_->was_notified = _tmp17_;
#line 872 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp18_ = self->priv->_task;
#line 872 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp19_ = _task->content;
#line 872 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp20_ = g_strdup (_tmp19_);
#line 872 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp18_->content);
#line 872 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp18_->content = _tmp20_;
#line 873 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp21_ = self->priv->_task;
#line 873 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp22_ = _task->note;
#line 873 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp23_ = g_strdup (_tmp22_);
#line 873 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp21_->note);
#line 873 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp21_->note = _tmp23_;
#line 874 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp24_ = self->priv->_task;
#line 874 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp25_ = _task->when_date_utc;
#line 874 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp26_ = g_strdup (_tmp25_);
#line 874 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp24_->when_date_utc);
#line 874 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp24_->when_date_utc = _tmp26_;
#line 875 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp27_ = self->priv->_task;
#line 875 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp28_ = _task->reminder_time;
#line 875 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp29_ = g_strdup (_tmp28_);
#line 875 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp27_->reminder_time);
#line 875 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp27_->reminder_time = _tmp29_;
#line 876 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp30_ = self->priv->_task;
#line 876 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp31_ = _task->labels;
#line 876 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp32_ = g_strdup (_tmp31_);
#line 876 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp30_->labels);
#line 876 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp30_->labels = _tmp32_;
#line 877 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp33_ = self->priv->_task;
#line 877 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp34_ = _task->checklist;
#line 877 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp35_ = g_strdup (_tmp34_);
#line 877 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp33_->checklist);
#line 877 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp33_->checklist = _tmp35_;
#line 879 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp36_ = _task->checked;
#line 879 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp36_ == 1) {
#line 2249 "TaskRow.c"
		GtkCheckButton* _tmp37_;
#line 880 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp37_ = self->priv->checked_button;
#line 880 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_toggle_button_set_active ((GtkToggleButton*) _tmp37_, TRUE);
#line 2255 "TaskRow.c"
	} else {
		GtkCheckButton* _tmp38_;
#line 882 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp38_ = self->priv->checked_button;
#line 882 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_toggle_button_set_active ((GtkToggleButton*) _tmp38_, FALSE);
#line 2262 "TaskRow.c"
	}
#line 885 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp39_ = self->name_label;
#line 885 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp40_ = _task->content;
#line 885 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_label_set_label (_tmp39_, _tmp40_);
#line 886 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp41_ = self->priv->name_entry;
#line 886 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp42_ = _task->content;
#line 886 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_entry_set_text (_tmp41_, _tmp42_);
#line 888 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp43_ = self->priv->_task;
#line 888 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp44_ = _tmp43_->is_inbox;
#line 888 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp44_ == 1) {
#line 2282 "TaskRow.c"
		GtkLabel* _tmp45_;
#line 889 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp45_ = self->priv->project_preview_label;
#line 889 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_label_set_label (_tmp45_, _ ("Inbox"));
#line 2288 "TaskRow.c"
	} else {
		ObjectsProject* project = NULL;
		ServicesDatabase* _tmp46_;
		ObjectsTask* _tmp47_;
		gint _tmp48_;
		ObjectsProject* _tmp49_;
		GtkLabel* _tmp50_;
		ObjectsProject* _tmp51_;
		const gchar* _tmp52_;
#line 891 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp46_ = application_database;
#line 891 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp47_ = self->priv->_task;
#line 891 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp48_ = _tmp47_->project_id;
#line 891 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp49_ = services_database_get_project (_tmp46_, _tmp48_);
#line 891 "/run/build/planner/src/Widgets/TaskRow.vala"
		project = _tmp49_;
#line 892 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp50_ = self->priv->project_preview_label;
#line 892 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp51_ = project;
#line 892 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp52_ = _tmp51_->name;
#line 892 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_label_set_label (_tmp50_, _tmp52_);
#line 888 "/run/build/planner/src/Widgets/TaskRow.vala"
		_objects_project_unref0 (project);
#line 2318 "TaskRow.c"
	}
#line 895 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp53_ = self->priv->note_view;
#line 895 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp54_ = gtk_text_view_get_buffer (_tmp53_);
#line 895 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp55_ = _tmp54_;
#line 895 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp56_ = self->priv->_task;
#line 895 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp57_ = _tmp56_->note;
#line 895 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_set (_tmp55_, "text", _tmp57_, NULL);
#line 896 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp58_ = self->priv->note_view;
#line 896 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp59_ = gtk_text_view_get_buffer (_tmp58_);
#line 896 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp60_ = _tmp59_;
#line 896 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_get (_tmp60_, "text", &_tmp61_, NULL);
#line 896 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp62_ = _tmp61_;
#line 896 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp63_ = _tmp62_;
#line 896 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp64_ = g_strcmp0 (_tmp63_, "") != 0;
#line 896 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp63_);
#line 896 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp64_) {
#line 2350 "TaskRow.c"
		GtkLabel* _tmp65_;
		GtkLabel* _tmp66_;
#line 897 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp65_ = self->priv->note_view_placeholder_label;
#line 897 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp65_, FALSE);
#line 898 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp66_ = self->priv->note_view_placeholder_label;
#line 898 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp66_, TRUE);
#line 2361 "TaskRow.c"
	}
#line 901 "/run/build/planner/src/Widgets/TaskRow.vala"
	has_reminder = FALSE;
#line 902 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp67_ = self->priv->_task;
#line 902 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp68_ = _tmp67_->has_reminder;
#line 902 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp68_ == 0) {
#line 2371 "TaskRow.c"
		ObjectsTask* _tmp69_;
		GDateTime* _tmp70_;
		GDateTime* _tmp71_;
		gchar* _tmp72_;
#line 903 "/run/build/planner/src/Widgets/TaskRow.vala"
		has_reminder = FALSE;
#line 904 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp69_ = self->priv->_task;
#line 904 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp70_ = g_date_time_new_now_local ();
#line 904 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp71_ = _tmp70_;
#line 904 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp72_ = g_date_time_to_string (_tmp71_);
#line 904 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_free0 (_tmp69_->reminder_time);
#line 904 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp69_->reminder_time = _tmp72_;
#line 904 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_date_time_unref0 (_tmp71_);
#line 2392 "TaskRow.c"
	} else {
#line 906 "/run/build/planner/src/Widgets/TaskRow.vala"
		has_reminder = TRUE;
#line 2396 "TaskRow.c"
	}
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp73_ = self->priv->when_button;
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp74_ = self->priv->_task;
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp75_ = _tmp74_->when_date_utc;
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp76_ = g_time_zone_new_local ();
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp77_ = _tmp76_;
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp78_ = g_date_time_new_from_iso8601 (_tmp75_, _tmp77_);
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp79_ = _tmp78_;
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp80_ = has_reminder;
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp81_ = self->priv->_task;
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp82_ = _tmp81_->reminder_time;
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp83_ = g_time_zone_new_local ();
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp84_ = _tmp83_;
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp85_ = g_date_time_new_from_iso8601 (_tmp82_, _tmp84_);
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp86_ = _tmp85_;
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_when_button_set_date (_tmp73_, _tmp79_, _tmp80_, _tmp86_);
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_date_time_unref0 (_tmp86_);
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_time_zone_unref0 (_tmp84_);
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_date_time_unref0 (_tmp79_);
#line 909 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_time_zone_unref0 (_tmp77_);
#line 915 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_note_preview_icon (self);
#line 916 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_label_preview_icon (self);
#line 917 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_checklist_progress (self);
#line 918 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_when_preview_icon (self);
#line 919 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_reminder_preview_icon (self);
#line 920 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_update_checklist (self);
#line 921 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_update_labels (self);
#line 922 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 2452 "TaskRow.c"
}


void
widgets_task_row_update_task (WidgetsTaskRow* self)
{
	ObjectsTask* _tmp0_;
	ObjectsTask* _tmp1_;
	gint _tmp2_;
	ObjectsTask* _tmp3_;
	GtkEntry* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	gchar* _tmp7_;
	ObjectsTask* _tmp8_;
	GtkTextView* _tmp9_;
	GtkTextBuffer* _tmp10_;
	GtkTextBuffer* _tmp11_;
	gchar* _tmp12_;
	gchar* _tmp13_;
	GtkCheckButton* _tmp14_;
	gboolean _tmp15_;
	gboolean _tmp16_;
	WidgetsWhenButton* _tmp19_;
	gboolean _tmp20_;
	WidgetsWhenButton* _tmp55_;
	GDateTime* _tmp56_;
	gchar* _tmp57_;
	gchar* _tmp58_;
	ObjectsTask* _tmp59_;
	const gchar* _tmp60_;
	gboolean _tmp61_;
	WidgetsWhenButton* _tmp95_;
	gboolean _tmp96_;
	ObjectsTask* _tmp116_;
	gchar* _tmp117_;
	GtkFlowBox* _tmp118_;
	GList* _tmp119_;
	ObjectsTask* _tmp135_;
	gchar* _tmp136_;
	GtkListBox* _tmp137_;
	GList* _tmp138_;
	ServicesDatabase* _tmp149_;
	ObjectsTask* _tmp150_;
#line 925 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (self != NULL);
#line 926 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->_task;
#line 926 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = self->priv->_task;
#line 926 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = _tmp1_->project_id;
#line 926 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_->project_id = _tmp2_;
#line 927 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp3_ = self->priv->_task;
#line 927 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp4_ = self->priv->name_entry;
#line 927 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp5_ = gtk_entry_get_text (_tmp4_);
#line 927 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp6_ = _tmp5_;
#line 927 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp7_ = g_strdup (_tmp6_);
#line 927 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp3_->content);
#line 927 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp3_->content = _tmp7_;
#line 928 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp8_ = self->priv->_task;
#line 928 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp9_ = self->priv->note_view;
#line 928 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp10_ = gtk_text_view_get_buffer (_tmp9_);
#line 928 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp11_ = _tmp10_;
#line 928 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_get (_tmp11_, "text", &_tmp12_, NULL);
#line 928 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp13_ = _tmp12_;
#line 928 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp8_->note);
#line 928 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp8_->note = _tmp13_;
#line 930 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_note_preview_icon (self);
#line 932 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp14_ = self->priv->checked_button;
#line 932 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp15_ = gtk_toggle_button_get_active ((GtkToggleButton*) _tmp14_);
#line 932 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp16_ = _tmp15_;
#line 932 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp16_) {
#line 2547 "TaskRow.c"
		ObjectsTask* _tmp17_;
#line 933 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp17_ = self->priv->_task;
#line 933 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp17_->checked = 1;
#line 2553 "TaskRow.c"
	} else {
		ObjectsTask* _tmp18_;
#line 935 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp18_ = self->priv->_task;
#line 935 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp18_->checked = 0;
#line 2560 "TaskRow.c"
	}
#line 938 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp19_ = self->priv->when_button;
#line 938 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp20_ = _tmp19_->has_when;
#line 938 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp20_) {
#line 2568 "TaskRow.c"
		ObjectsTask* _tmp21_;
		WidgetsWhenButton* _tmp22_;
		GDateTime* _tmp23_;
		gchar* _tmp24_;
		Utils* _tmp25_;
		WidgetsWhenButton* _tmp26_;
		GDateTime* _tmp27_;
		GtkLabel* _tmp49_;
		GtkLabel* _tmp50_;
#line 939 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp21_ = self->priv->_task;
#line 939 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp22_ = self->priv->when_button;
#line 939 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp23_ = _tmp22_->when_datetime;
#line 939 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp24_ = g_date_time_to_string (_tmp23_);
#line 939 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_free0 (_tmp21_->when_date_utc);
#line 939 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp21_->when_date_utc = _tmp24_;
#line 941 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp25_ = application_utils;
#line 941 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp26_ = self->priv->when_button;
#line 941 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp27_ = _tmp26_->when_datetime;
#line 941 "/run/build/planner/src/Widgets/TaskRow.vala"
		if (utils_is_today (_tmp25_, _tmp27_)) {
#line 2598 "TaskRow.c"
			GtkLabel* _tmp28_;
			gchar* _tmp29_;
			gchar* _tmp30_;
#line 942 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp28_ = self->priv->when_preview_label;
#line 942 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp29_ = g_strdup_printf ("<small>%s</small>", _ ("Today"));
#line 942 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp30_ = _tmp29_;
#line 942 "/run/build/planner/src/Widgets/TaskRow.vala"
			gtk_label_set_label (_tmp28_, _tmp30_);
#line 942 "/run/build/planner/src/Widgets/TaskRow.vala"
			_g_free0 (_tmp30_);
#line 2612 "TaskRow.c"
		} else {
			Utils* _tmp31_;
			WidgetsWhenButton* _tmp32_;
			GDateTime* _tmp33_;
#line 943 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp31_ = application_utils;
#line 943 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp32_ = self->priv->when_button;
#line 943 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp33_ = _tmp32_->when_datetime;
#line 943 "/run/build/planner/src/Widgets/TaskRow.vala"
			if (utils_is_tomorrow (_tmp31_, _tmp33_)) {
#line 2625 "TaskRow.c"
				GtkLabel* _tmp34_;
				gchar* _tmp35_;
				gchar* _tmp36_;
#line 944 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp34_ = self->priv->when_preview_label;
#line 944 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp35_ = g_strdup_printf ("<small>%s</small>", _ ("Tomorrow"));
#line 944 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp36_ = _tmp35_;
#line 944 "/run/build/planner/src/Widgets/TaskRow.vala"
				gtk_label_set_label (_tmp34_, _tmp36_);
#line 944 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (_tmp36_);
#line 2639 "TaskRow.c"
			} else {
				gchar* date_format = NULL;
				Utils* _tmp37_;
				WidgetsWhenButton* _tmp38_;
				GDateTime* _tmp39_;
				gchar* _tmp40_;
				GtkLabel* _tmp41_;
				WidgetsWhenButton* _tmp42_;
				GDateTime* _tmp43_;
				const gchar* _tmp44_;
				gchar* _tmp45_;
				gchar* _tmp46_;
				gchar* _tmp47_;
				gchar* _tmp48_;
#line 946 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp37_ = application_utils;
#line 946 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp38_ = self->priv->when_button;
#line 946 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp39_ = _tmp38_->when_datetime;
#line 946 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp40_ = utils_get_default_date_format_from_date (_tmp37_, _tmp39_);
#line 946 "/run/build/planner/src/Widgets/TaskRow.vala"
				date_format = _tmp40_;
#line 947 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp41_ = self->priv->when_preview_label;
#line 947 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp42_ = self->priv->when_button;
#line 947 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp43_ = _tmp42_->when_datetime;
#line 947 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp44_ = date_format;
#line 947 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp45_ = g_date_time_format (_tmp43_, _tmp44_);
#line 947 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp46_ = _tmp45_;
#line 947 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp47_ = g_strdup_printf ("<small>%s</small>", _tmp46_);
#line 947 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp48_ = _tmp47_;
#line 947 "/run/build/planner/src/Widgets/TaskRow.vala"
				gtk_label_set_label (_tmp41_, _tmp48_);
#line 947 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (_tmp48_);
#line 947 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (_tmp46_);
#line 943 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (date_format);
#line 2688 "TaskRow.c"
			}
		}
#line 950 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp49_ = self->priv->when_preview_label;
#line 950 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp49_, TRUE);
#line 951 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp50_ = self->priv->when_preview_label;
#line 951 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp50_, FALSE);
#line 2699 "TaskRow.c"
	} else {
		ObjectsTask* _tmp51_;
		gchar* _tmp52_;
		GtkLabel* _tmp53_;
		GtkLabel* _tmp54_;
#line 953 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp51_ = self->priv->_task;
#line 953 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp52_ = g_strdup ("");
#line 953 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_free0 (_tmp51_->when_date_utc);
#line 953 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp51_->when_date_utc = _tmp52_;
#line 955 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp53_ = self->priv->when_preview_label;
#line 955 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp53_, FALSE);
#line 956 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp54_ = self->priv->when_preview_label;
#line 956 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp54_, TRUE);
#line 2721 "TaskRow.c"
	}
#line 959 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp55_ = self->priv->when_button;
#line 959 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp56_ = _tmp55_->reminder_datetime;
#line 959 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp57_ = g_date_time_to_string (_tmp56_);
#line 959 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp58_ = _tmp57_;
#line 959 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp59_ = self->priv->_task;
#line 959 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp60_ = _tmp59_->reminder_time;
#line 959 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp61_ = g_strcmp0 (_tmp58_, _tmp60_) != 0;
#line 959 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp58_);
#line 959 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp61_) {
#line 2741 "TaskRow.c"
		ObjectsTask* _tmp62_;
		WidgetsWhenButton* _tmp63_;
		gboolean _tmp64_;
#line 960 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp62_ = self->priv->_task;
#line 960 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp62_->was_notified = 0;
#line 962 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp63_ = self->priv->when_button;
#line 962 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp64_ = _tmp63_->has_reminder;
#line 962 "/run/build/planner/src/Widgets/TaskRow.vala"
		if (_tmp64_) {
#line 2755 "TaskRow.c"
			gchar* date = NULL;
			gchar* _tmp65_;
			gchar* time = NULL;
			gchar* _tmp66_;
			gchar* time_format = NULL;
			gchar* _tmp67_;
			WidgetsWhenButton* _tmp68_;
			GDateTime* _tmp69_;
			const gchar* _tmp70_;
			gchar* _tmp71_;
			Utils* _tmp72_;
			WidgetsWhenButton* _tmp73_;
			GDateTime* _tmp74_;
			ServicesNotifications* _tmp88_;
			ObjectsTask* _tmp89_;
			const gchar* _tmp90_;
			const gchar* _tmp91_;
			const gchar* _tmp92_;
			gchar* _tmp93_;
			gchar* _tmp94_;
#line 964 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp65_ = g_strdup ("");
#line 964 "/run/build/planner/src/Widgets/TaskRow.vala"
			date = _tmp65_;
#line 965 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp66_ = g_strdup ("");
#line 965 "/run/build/planner/src/Widgets/TaskRow.vala"
			time = _tmp66_;
#line 967 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp67_ = granite_date_time_get_default_time_format (TRUE, FALSE);
#line 967 "/run/build/planner/src/Widgets/TaskRow.vala"
			time_format = _tmp67_;
#line 968 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp68_ = self->priv->when_button;
#line 968 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp69_ = _tmp68_->reminder_datetime;
#line 968 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp70_ = time_format;
#line 968 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp71_ = g_date_time_format (_tmp69_, _tmp70_);
#line 968 "/run/build/planner/src/Widgets/TaskRow.vala"
			_g_free0 (time);
#line 968 "/run/build/planner/src/Widgets/TaskRow.vala"
			time = _tmp71_;
#line 970 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp72_ = application_utils;
#line 970 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp73_ = self->priv->when_button;
#line 970 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp74_ = _tmp73_->when_datetime;
#line 970 "/run/build/planner/src/Widgets/TaskRow.vala"
			if (utils_is_today (_tmp72_, _tmp74_)) {
#line 2808 "TaskRow.c"
				gchar* _tmp75_;
#line 971 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp75_ = g_utf8_strdown (_ ("Today"), (gssize) -1);
#line 971 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (date);
#line 971 "/run/build/planner/src/Widgets/TaskRow.vala"
				date = _tmp75_;
#line 2816 "TaskRow.c"
			} else {
				Utils* _tmp76_;
				WidgetsWhenButton* _tmp77_;
				GDateTime* _tmp78_;
#line 972 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp76_ = application_utils;
#line 972 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp77_ = self->priv->when_button;
#line 972 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp78_ = _tmp77_->when_datetime;
#line 972 "/run/build/planner/src/Widgets/TaskRow.vala"
				if (utils_is_tomorrow (_tmp76_, _tmp78_)) {
#line 2829 "TaskRow.c"
					gchar* _tmp79_;
#line 973 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp79_ = g_utf8_strdown (_ ("Tomorrow"), (gssize) -1);
#line 973 "/run/build/planner/src/Widgets/TaskRow.vala"
					_g_free0 (date);
#line 973 "/run/build/planner/src/Widgets/TaskRow.vala"
					date = _tmp79_;
#line 2837 "TaskRow.c"
				} else {
					gchar* date_format = NULL;
					Utils* _tmp80_;
					WidgetsWhenButton* _tmp81_;
					GDateTime* _tmp82_;
					gchar* _tmp83_;
					WidgetsWhenButton* _tmp84_;
					GDateTime* _tmp85_;
					const gchar* _tmp86_;
					gchar* _tmp87_;
#line 975 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp80_ = application_utils;
#line 975 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp81_ = self->priv->when_button;
#line 975 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp82_ = _tmp81_->when_datetime;
#line 975 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp83_ = utils_get_default_date_format_from_date (_tmp80_, _tmp82_);
#line 975 "/run/build/planner/src/Widgets/TaskRow.vala"
					date_format = _tmp83_;
#line 976 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp84_ = self->priv->when_button;
#line 976 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp85_ = _tmp84_->when_datetime;
#line 976 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp86_ = date_format;
#line 976 "/run/build/planner/src/Widgets/TaskRow.vala"
					_tmp87_ = g_date_time_format (_tmp85_, _tmp86_);
#line 976 "/run/build/planner/src/Widgets/TaskRow.vala"
					_g_free0 (date);
#line 976 "/run/build/planner/src/Widgets/TaskRow.vala"
					date = _tmp87_;
#line 972 "/run/build/planner/src/Widgets/TaskRow.vala"
					_g_free0 (date_format);
#line 2872 "TaskRow.c"
				}
			}
#line 979 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp88_ = application_notification;
#line 979 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp89_ = self->priv->_task;
#line 979 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp90_ = _tmp89_->content;
#line 979 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp91_ = date;
#line 979 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp92_ = time;
#line 979 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp93_ = g_strdup_printf ("You'll be notified %s at %s", _tmp91_, _tmp92_);
#line 979 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp94_ = _tmp93_;
#line 979 "/run/build/planner/src/Widgets/TaskRow.vala"
			g_signal_emit_by_name (_tmp88_, "send-local-notification", _tmp90_, _ (_tmp94_), "preferences-system-time", 5, FALSE);
#line 979 "/run/build/planner/src/Widgets/TaskRow.vala"
			_g_free0 (_tmp94_);
#line 962 "/run/build/planner/src/Widgets/TaskRow.vala"
			_g_free0 (time_format);
#line 962 "/run/build/planner/src/Widgets/TaskRow.vala"
			_g_free0 (time);
#line 962 "/run/build/planner/src/Widgets/TaskRow.vala"
			_g_free0 (date);
#line 2899 "TaskRow.c"
		}
	}
#line 988 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp95_ = self->priv->when_button;
#line 988 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp96_ = _tmp95_->has_reminder;
#line 988 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp96_) {
#line 2908 "TaskRow.c"
		ObjectsTask* _tmp97_;
		ObjectsTask* _tmp98_;
		WidgetsWhenButton* _tmp99_;
		GDateTime* _tmp100_;
		gchar* _tmp101_;
		GtkBox* _tmp102_;
		GtkBox* _tmp103_;
		gchar* time_format = NULL;
		gchar* _tmp104_;
		GtkLabel* _tmp105_;
		WidgetsWhenButton* _tmp106_;
		GDateTime* _tmp107_;
		const gchar* _tmp108_;
		gchar* _tmp109_;
		gchar* _tmp110_;
#line 989 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp97_ = self->priv->_task;
#line 989 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp97_->has_reminder = 1;
#line 990 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp98_ = self->priv->_task;
#line 990 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp99_ = self->priv->when_button;
#line 990 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp100_ = _tmp99_->reminder_datetime;
#line 990 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp101_ = g_date_time_to_string (_tmp100_);
#line 990 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_free0 (_tmp98_->reminder_time);
#line 990 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp98_->reminder_time = _tmp101_;
#line 992 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp102_ = self->priv->reminder_preview_box;
#line 992 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp102_, TRUE);
#line 993 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp103_ = self->priv->reminder_preview_box;
#line 993 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp103_, FALSE);
#line 995 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp104_ = granite_date_time_get_default_time_format (TRUE, FALSE);
#line 995 "/run/build/planner/src/Widgets/TaskRow.vala"
		time_format = _tmp104_;
#line 996 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp105_ = self->priv->reminder_preview_label;
#line 996 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp106_ = self->priv->when_button;
#line 996 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp107_ = _tmp106_->reminder_datetime;
#line 996 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp108_ = time_format;
#line 996 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp109_ = g_date_time_format (_tmp107_, _tmp108_);
#line 996 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp110_ = _tmp109_;
#line 996 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_label_set_label (_tmp105_, _tmp110_);
#line 996 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_free0 (_tmp110_);
#line 988 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_free0 (time_format);
#line 2970 "TaskRow.c"
	} else {
		ObjectsTask* _tmp111_;
		ObjectsTask* _tmp112_;
		gchar* _tmp113_;
		GtkBox* _tmp114_;
		GtkBox* _tmp115_;
#line 998 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp111_ = self->priv->_task;
#line 998 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp111_->has_reminder = 0;
#line 999 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp112_ = self->priv->_task;
#line 999 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp113_ = g_strdup ("");
#line 999 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_free0 (_tmp112_->reminder_time);
#line 999 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp112_->reminder_time = _tmp113_;
#line 1001 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp114_ = self->priv->reminder_preview_box;
#line 1001 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp114_, FALSE);
#line 1002 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp115_ = self->priv->reminder_preview_box;
#line 1002 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp115_, TRUE);
#line 2997 "TaskRow.c"
	}
#line 1005 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp116_ = self->priv->_task;
#line 1005 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp117_ = g_strdup ("");
#line 1005 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp116_->labels);
#line 1005 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp116_->labels = _tmp117_;
#line 1006 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp118_ = self->priv->labels_flowbox;
#line 1006 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp119_ = gtk_container_get_children ((GtkContainer*) _tmp118_);
#line 3011 "TaskRow.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 1006 "/run/build/planner/src/Widgets/TaskRow.vala"
		element_collection = _tmp119_;
#line 1006 "/run/build/planner/src/Widgets/TaskRow.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 3019 "TaskRow.c"
			GtkWidget* _tmp120_;
			GtkWidget* element = NULL;
#line 1006 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp120_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 1006 "/run/build/planner/src/Widgets/TaskRow.vala"
			element = _tmp120_;
#line 3026 "TaskRow.c"
			{
				WidgetsLabelChild* child = NULL;
				GtkWidget* _tmp121_;
				WidgetsLabelChild* _tmp122_;
				ObjectsTask* _tmp123_;
				ObjectsTask* _tmp124_;
				const gchar* _tmp125_;
				WidgetsLabelChild* _tmp126_;
				ObjectsLabel* _tmp127_;
				ObjectsLabel* _tmp128_;
				gint _tmp129_;
				gchar* _tmp130_;
				gchar* _tmp131_;
				gchar* _tmp132_;
				gchar* _tmp133_;
				gchar* _tmp134_;
#line 1007 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp121_ = element;
#line 1007 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp122_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp121_, WIDGETS_TYPE_LABEL_CHILD) ? ((WidgetsLabelChild*) _tmp121_) : NULL);
#line 1007 "/run/build/planner/src/Widgets/TaskRow.vala"
				child = _tmp122_;
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp123_ = self->priv->_task;
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp124_ = self->priv->_task;
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp125_ = _tmp124_->labels;
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp126_ = child;
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp127_ = widgets_label_child_get_label (_tmp126_);
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp128_ = _tmp127_;
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp129_ = _tmp128_->id;
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp130_ = g_strdup_printf ("%i", _tmp129_);
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp131_ = _tmp130_;
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp132_ = g_strconcat (_tmp125_, _tmp131_, NULL);
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp133_ = _tmp132_;
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp134_ = g_strconcat (_tmp133_, ";", NULL);
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (_tmp123_->labels);
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp123_->labels = _tmp134_;
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (_tmp133_);
#line 1008 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (_tmp131_);
#line 1006 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_object_unref0 (child);
#line 1006 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_object_unref0 (element);
#line 3085 "TaskRow.c"
			}
		}
#line 1006 "/run/build/planner/src/Widgets/TaskRow.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 3090 "TaskRow.c"
	}
#line 1011 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp135_ = self->priv->_task;
#line 1011 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp136_ = g_strdup ("");
#line 1011 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp135_->checklist);
#line 1011 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp135_->checklist = _tmp136_;
#line 1012 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp137_ = self->priv->checklist;
#line 1012 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp138_ = gtk_container_get_children ((GtkContainer*) _tmp137_);
#line 3104 "TaskRow.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 1012 "/run/build/planner/src/Widgets/TaskRow.vala"
		element_collection = _tmp138_;
#line 1012 "/run/build/planner/src/Widgets/TaskRow.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 3112 "TaskRow.c"
			GtkWidget* _tmp139_;
			GtkWidget* element = NULL;
#line 1012 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp139_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 1012 "/run/build/planner/src/Widgets/TaskRow.vala"
			element = _tmp139_;
#line 3119 "TaskRow.c"
			{
				WidgetsCheckRow* row = NULL;
				GtkWidget* _tmp140_;
				WidgetsCheckRow* _tmp141_;
				ObjectsTask* _tmp142_;
				ObjectsTask* _tmp143_;
				const gchar* _tmp144_;
				WidgetsCheckRow* _tmp145_;
				gchar* _tmp146_;
				gchar* _tmp147_;
				gchar* _tmp148_;
#line 1013 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp140_ = element;
#line 1013 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp141_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp140_, WIDGETS_TYPE_CHECK_ROW) ? ((WidgetsCheckRow*) _tmp140_) : NULL);
#line 1013 "/run/build/planner/src/Widgets/TaskRow.vala"
				row = _tmp141_;
#line 1014 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp142_ = self->priv->_task;
#line 1014 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp143_ = self->priv->_task;
#line 1014 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp144_ = _tmp143_->checklist;
#line 1014 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp145_ = row;
#line 1014 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp146_ = widgets_check_row_get_check (_tmp145_);
#line 1014 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp147_ = _tmp146_;
#line 1014 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp148_ = g_strconcat (_tmp144_, _tmp147_, NULL);
#line 1014 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (_tmp142_->checklist);
#line 1014 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp142_->checklist = _tmp148_;
#line 1014 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_free0 (_tmp147_);
#line 1012 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_object_unref0 (row);
#line 1012 "/run/build/planner/src/Widgets/TaskRow.vala"
				_g_object_unref0 (element);
#line 3161 "TaskRow.c"
			}
		}
#line 1012 "/run/build/planner/src/Widgets/TaskRow.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 3166 "TaskRow.c"
	}
#line 1018 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp149_ = application_database;
#line 1018 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp150_ = self->priv->_task;
#line 1018 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (services_database_update_task (_tmp149_, _tmp150_) == SQLITE_DONE) {
#line 3174 "TaskRow.c"
		ServicesDatabase* _tmp151_;
		ObjectsTask* _tmp152_;
		ObjectsTask* _tmp153_;
#line 1019 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp151_ = application_database;
#line 1019 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp152_ = self->priv->_task;
#line 1019 "/run/build/planner/src/Widgets/TaskRow.vala"
		g_signal_emit_by_name (_tmp151_, "update-task-signal", _tmp152_);
#line 1020 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp153_ = self->priv->_task;
#line 1020 "/run/build/planner/src/Widgets/TaskRow.vala"
		g_signal_emit (self, widgets_task_row_signals[WIDGETS_TASK_ROW_ON_SIGNAL_UPDATE_SIGNAL], 0, _tmp153_);
#line 1022 "/run/build/planner/src/Widgets/TaskRow.vala"
		widgets_task_row_check_label_preview_icon (self);
#line 1023 "/run/build/planner/src/Widgets/TaskRow.vala"
		widgets_task_row_check_checklist_progress (self);
#line 1025 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_show_all ((GtkWidget*) self);
#line 3194 "TaskRow.c"
	}
}


ObjectsTask*
widgets_task_row_get_task (WidgetsTaskRow* self)
{
	ObjectsTask* result;
	ObjectsTask* _tmp0_;
#line 23 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->_task;
#line 23 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = _tmp0_;
#line 23 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 3212 "TaskRow.c"
}


static gpointer
_objects_task_ref0 (gpointer self)
{
#line 23 "/run/build/planner/src/Widgets/TaskRow.vala"
	return self ? objects_task_ref (self) : NULL;
#line 3221 "TaskRow.c"
}


static void
widgets_task_row_set_task (WidgetsTaskRow* self,
                           ObjectsTask* value)
{
#line 23 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (self != NULL);
#line 23 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (widgets_task_row_get_task (self) != value) {
#line 3233 "TaskRow.c"
		ObjectsTask* _tmp0_;
#line 23 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp0_ = _objects_task_ref0 (value);
#line 23 "/run/build/planner/src/Widgets/TaskRow.vala"
		_objects_task_unref0 (self->priv->_task);
#line 23 "/run/build/planner/src/Widgets/TaskRow.vala"
		self->priv->_task = _tmp0_;
#line 23 "/run/build/planner/src/Widgets/TaskRow.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_task_row_properties[WIDGETS_TASK_ROW_TASK_PROPERTY]);
#line 3243 "TaskRow.c"
	}
}


static void
g_cclosure_user_marshal_VOID__OBJECTS_TASK (GClosure * closure,
                                            GValue * return_value,
                                            guint n_param_values,
                                            const GValue * param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECTS_TASK) (gpointer data1, gpointer arg_1, gpointer data2);
	register GMarshalFunc_VOID__OBJECTS_TASK callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (n_param_values == 2);
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
		data1 = closure->data;
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
		data2 = param_values->data[0].v_pointer;
#line 3270 "TaskRow.c"
	} else {
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
		data1 = param_values->data[0].v_pointer;
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
		data2 = closure->data;
#line 3276 "TaskRow.c"
	}
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	callback = (GMarshalFunc_VOID__OBJECTS_TASK) (marshal_data ? marshal_data : cc->callback);
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	callback (data1, objects_value_get_task (param_values + 1), data2);
#line 3282 "TaskRow.c"
}


static Block57Data*
block57_data_ref (Block57Data* _data57_)
{
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_atomic_int_inc (&_data57_->_ref_count_);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	return _data57_;
#line 3293 "TaskRow.c"
}


static void
block57_data_unref (void * _userdata_)
{
	Block57Data* _data57_;
	_data57_ = (Block57Data*) _userdata_;
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (g_atomic_int_dec_and_test (&_data57_->_ref_count_)) {
#line 3304 "TaskRow.c"
		WidgetsTaskRow* self;
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
		self = _data57_->self;
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_object_unref0 (_data57_->menu_popover);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_object_unref0 (_data57_->menu_button);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_object_unref0 (_data57_->checklist_entry);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_object_unref0 (_data57_->project_preview_icon);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_object_unref0 (self);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
		g_slice_free (Block57Data, _data57_);
#line 3320 "TaskRow.c"
	}
}


static void
_widgets_task_row___lambda69_ (Block57Data* _data57_)
{
	WidgetsTaskRow* self;
	GtkToggleButton* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 349 "/run/build/planner/src/Widgets/TaskRow.vala"
	self = _data57_->self;
#line 350 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = _data57_->menu_button;
#line 350 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = gtk_toggle_button_get_active (_tmp0_);
#line 350 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = _tmp1_;
#line 350 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp2_) {
#line 3342 "TaskRow.c"
		WidgetsPopoversTaskMenu* _tmp3_;
#line 351 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp3_ = _data57_->menu_popover;
#line 351 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp3_);
#line 3348 "TaskRow.c"
	}
}


static void
__widgets_task_row___lambda69__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                          gpointer self)
{
#line 349 "/run/build/planner/src/Widgets/TaskRow.vala"
	_widgets_task_row___lambda69_ (self);
#line 3359 "TaskRow.c"
}


static void
_widgets_task_row___lambda70_ (Block57Data* _data57_)
{
	WidgetsTaskRow* self;
	GtkToggleButton* _tmp0_;
#line 355 "/run/build/planner/src/Widgets/TaskRow.vala"
	self = _data57_->self;
#line 356 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = _data57_->menu_button;
#line 356 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_toggle_button_set_active (_tmp0_, FALSE);
#line 3374 "TaskRow.c"
}


static void
__widgets_task_row___lambda70__gtk_popover_closed (GtkPopover* _sender,
                                                   gpointer self)
{
#line 355 "/run/build/planner/src/Widgets/TaskRow.vala"
	_widgets_task_row___lambda70_ (self);
#line 3384 "TaskRow.c"
}


static void
_gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                   gpointer self)
{
#line 371 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_main_quit ();
#line 3394 "TaskRow.c"
}


static void
_widgets_task_row___lambda71_ (WidgetsTaskRow* self,
                               gint index)
{
#line 360 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (index == 0) {
#line 3404 "TaskRow.c"
	} else {
#line 362 "/run/build/planner/src/Widgets/TaskRow.vala"
		if (index == 1) {
#line 3408 "TaskRow.c"
			ServicesDatabase* _tmp0_;
			ObjectsTask* _tmp1_;
#line 363 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp0_ = application_database;
#line 363 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp1_ = self->priv->_task;
#line 363 "/run/build/planner/src/Widgets/TaskRow.vala"
			if (services_database_add_task (_tmp0_, _tmp1_) == SQLITE_DONE) {
#line 3417 "TaskRow.c"
				ObjectsTask* _task = NULL;
				ServicesDatabase* _tmp2_;
				ObjectsTask* _tmp3_;
				ServicesSignals* _tmp4_;
				ObjectsTask* _tmp5_;
				gint _tmp6_;
				ObjectsTask* _tmp7_;
				gint _tmp8_;
#line 364 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp2_ = application_database;
#line 364 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp3_ = services_database_get_last_task (_tmp2_);
#line 364 "/run/build/planner/src/Widgets/TaskRow.vala"
				_task = _tmp3_;
#line 365 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp4_ = application_signals;
#line 365 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp5_ = _task;
#line 365 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp6_ = _tmp5_->id;
#line 365 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp7_ = _task;
#line 365 "/run/build/planner/src/Widgets/TaskRow.vala"
				_tmp8_ = _tmp7_->project_id;
#line 365 "/run/build/planner/src/Widgets/TaskRow.vala"
				g_signal_emit_by_name (_tmp4_, "go-task-page", _tmp6_, _tmp8_);
#line 363 "/run/build/planner/src/Widgets/TaskRow.vala"
				_objects_task_unref0 (_task);
#line 3446 "TaskRow.c"
			}
		} else {
			DialogsShareDialog* share_dialog = NULL;
			Application* _tmp9_;
			Application* _tmp10_;
			MainWindow* _tmp11_;
			DialogsShareDialog* _tmp12_;
			DialogsShareDialog* _tmp13_;
			ObjectsTask* _tmp14_;
			gint _tmp15_;
			DialogsShareDialog* _tmp16_;
			DialogsShareDialog* _tmp17_;
#line 369 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp9_ = application_get_instance ();
#line 369 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp10_ = _tmp9_;
#line 369 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp11_ = _tmp10_->main_window;
#line 369 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp12_ = dialogs_share_dialog_new (_tmp11_);
#line 369 "/run/build/planner/src/Widgets/TaskRow.vala"
			g_object_ref_sink (_tmp12_);
#line 369 "/run/build/planner/src/Widgets/TaskRow.vala"
			share_dialog = _tmp12_;
#line 370 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp13_ = share_dialog;
#line 370 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp14_ = self->priv->_task;
#line 370 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp15_ = _tmp14_->id;
#line 370 "/run/build/planner/src/Widgets/TaskRow.vala"
			dialogs_share_dialog_set_task (_tmp13_, _tmp15_);
#line 371 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp16_ = share_dialog;
#line 371 "/run/build/planner/src/Widgets/TaskRow.vala"
			g_signal_connect ((GtkWidget*) _tmp16_, "destroy", (GCallback) _gtk_main_quit_gtk_widget_destroy, NULL);
#line 372 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp17_ = share_dialog;
#line 372 "/run/build/planner/src/Widgets/TaskRow.vala"
			gtk_widget_show_all ((GtkWidget*) _tmp17_);
#line 362 "/run/build/planner/src/Widgets/TaskRow.vala"
			_g_object_unref0 (share_dialog);
#line 3489 "TaskRow.c"
		}
	}
}


static void
__widgets_task_row___lambda71__widgets_popovers_task_menu_on_selected_menu (WidgetsPopoversTaskMenu* _sender,
                                                                            gint index,
                                                                            gpointer self)
{
#line 359 "/run/build/planner/src/Widgets/TaskRow.vala"
	_widgets_task_row___lambda71_ ((WidgetsTaskRow*) self, index);
#line 3502 "TaskRow.c"
}


static void
_widgets_task_row___lambda75_ (Block57Data* _data57_,
                               gboolean is_inbox,
                               ObjectsProject* project)
{
	WidgetsTaskRow* self;
	ServicesNotifications* _tmp20_;
	ObjectsTask* _tmp21_;
	const gchar* _tmp22_;
	GtkLabel* _tmp23_;
	const gchar* _tmp24_;
	const gchar* _tmp25_;
	gchar* _tmp26_;
	gchar* _tmp27_;
#line 376 "/run/build/planner/src/Widgets/TaskRow.vala"
	self = _data57_->self;
#line 376 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (project != NULL);
#line 377 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (is_inbox) {
#line 3526 "TaskRow.c"
		ObjectsTask* _tmp0_;
		ObjectsTask* _tmp1_;
		GtkLabel* _tmp2_;
		GtkGrid* _tmp3_;
		GtkStyleContext* _tmp4_;
		ObjectsTask* _tmp5_;
		gint _tmp6_;
		gchar* _tmp7_;
		gchar* _tmp8_;
#line 378 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp0_ = self->priv->_task;
#line 378 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp0_->is_inbox = 1;
#line 379 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp1_ = self->priv->_task;
#line 379 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp1_->project_id = 0;
#line 381 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp2_ = self->priv->project_preview_label;
#line 381 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_label_set_label (_tmp2_, _ ("Inbox"));
#line 382 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp3_ = _data57_->project_preview_icon;
#line 382 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) _tmp3_);
#line 382 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp5_ = self->priv->_task;
#line 382 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp6_ = _tmp5_->project_id;
#line 382 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp7_ = g_strdup_printf ("proyect-%i", _tmp6_);
#line 382 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp8_ = _tmp7_;
#line 382 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_style_context_add_class (_tmp4_, _tmp8_);
#line 382 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_free0 (_tmp8_);
#line 384 "/run/build/planner/src/Widgets/TaskRow.vala"
		widgets_task_row_hide_content (self);
#line 3566 "TaskRow.c"
	} else {
		ObjectsTask* _tmp9_;
		ObjectsTask* _tmp10_;
		gint _tmp11_;
		GtkLabel* _tmp12_;
		const gchar* _tmp13_;
		GtkGrid* _tmp14_;
		GtkStyleContext* _tmp15_;
		ObjectsTask* _tmp16_;
		gint _tmp17_;
		gchar* _tmp18_;
		gchar* _tmp19_;
#line 386 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp9_ = self->priv->_task;
#line 386 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp9_->is_inbox = 0;
#line 387 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp10_ = self->priv->_task;
#line 387 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp11_ = project->id;
#line 387 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp10_->project_id = _tmp11_;
#line 389 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp12_ = self->priv->project_preview_label;
#line 389 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp13_ = project->name;
#line 389 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_label_set_label (_tmp12_, _tmp13_);
#line 390 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp14_ = _data57_->project_preview_icon;
#line 390 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp15_ = gtk_widget_get_style_context ((GtkWidget*) _tmp14_);
#line 390 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp16_ = self->priv->_task;
#line 390 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp17_ = _tmp16_->project_id;
#line 390 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp18_ = g_strdup_printf ("proyect-%i", _tmp17_);
#line 390 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp19_ = _tmp18_;
#line 390 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_style_context_add_class (_tmp15_, _tmp19_);
#line 390 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_free0 (_tmp19_);
#line 392 "/run/build/planner/src/Widgets/TaskRow.vala"
		widgets_task_row_hide_content (self);
#line 3613 "TaskRow.c"
	}
#line 395 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp20_ = application_notification;
#line 395 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp21_ = self->priv->_task;
#line 395 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp22_ = _tmp21_->content;
#line 395 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp23_ = self->priv->project_preview_label;
#line 395 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp24_ = gtk_label_get_label (_tmp23_);
#line 395 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp25_ = _tmp24_;
#line 395 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp26_ = g_strdup_printf (_ ("It was moved to <b>%s</b>"), _tmp25_);
#line 395 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp27_ = _tmp26_;
#line 395 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_emit_by_name (_tmp20_, "send-local-notification", _tmp22_, _tmp27_, "document-export", 3, FALSE);
#line 395 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp27_);
#line 3635 "TaskRow.c"
}


static void
__widgets_task_row___lambda75__widgets_move_button_on_selected_project (WidgetsMoveButton* _sender,
                                                                        gboolean is_inbox,
                                                                        ObjectsProject* project,
                                                                        gpointer self)
{
#line 376 "/run/build/planner/src/Widgets/TaskRow.vala"
	_widgets_task_row___lambda75_ (self, is_inbox, project);
#line 3647 "TaskRow.c"
}


static gboolean
_widgets_task_row___lambda76_ (WidgetsTaskRow* self)
{
	gboolean result = FALSE;
	GtkEntry* _tmp0_;
#line 405 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->name_entry;
#line 405 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_set (_tmp0_, "secondary-icon-name", "edit-clear-symbolic", NULL);
#line 406 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = FALSE;
#line 406 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 3664 "TaskRow.c"
}


static gboolean
__widgets_task_row___lambda76__gtk_widget_focus_in_event (GtkWidget* _sender,
                                                          GdkEventFocus* event,
                                                          gpointer self)
{
	gboolean result;
	result = _widgets_task_row___lambda76_ ((WidgetsTaskRow*) self);
#line 404 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 3677 "TaskRow.c"
}


static gboolean
_widgets_task_row___lambda77_ (WidgetsTaskRow* self)
{
	gboolean result = FALSE;
	GtkEntry* _tmp0_;
#line 410 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->name_entry;
#line 410 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_set (_tmp0_, "secondary-icon-name", NULL, NULL);
#line 411 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = FALSE;
#line 411 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 3694 "TaskRow.c"
}


static gboolean
__widgets_task_row___lambda77__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                           GdkEventFocus* event,
                                                           gpointer self)
{
	gboolean result;
	result = _widgets_task_row___lambda77_ ((WidgetsTaskRow*) self);
#line 409 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 3707 "TaskRow.c"
}


static void
_widgets_task_row___lambda78_ (WidgetsTaskRow* self)
{
	GtkEntry* _tmp0_;
	Utils* _tmp1_;
	GtkEntry* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
#line 415 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->name_entry;
#line 415 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = application_utils;
#line 415 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = self->priv->name_entry;
#line 415 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp3_ = gtk_entry_get_text (_tmp2_);
#line 415 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp4_ = _tmp3_;
#line 415 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp5_ = utils_first_letter_to_up (_tmp1_, _tmp4_);
#line 415 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp6_ = _tmp5_;
#line 415 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_entry_set_text (_tmp0_, _tmp6_);
#line 415 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp6_);
#line 3739 "TaskRow.c"
}


static void
__widgets_task_row___lambda78__gtk_editable_changed (GtkEditable* _sender,
                                                     gpointer self)
{
#line 414 "/run/build/planner/src/Widgets/TaskRow.vala"
	_widgets_task_row___lambda78_ ((WidgetsTaskRow*) self);
#line 3749 "TaskRow.c"
}


static gboolean
_widgets_task_row___lambda79_ (WidgetsTaskRow* self,
                               GdkEventKey* key)
{
	gboolean result = FALSE;
	guint _tmp0_;
#line 418 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_val_if_fail (key != NULL, FALSE);
#line 419 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = key->keyval;
#line 419 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp0_ == ((guint) 65307)) {
#line 3765 "TaskRow.c"
		GtkLabel* _tmp1_;
		GtkEntry* _tmp2_;
		const gchar* _tmp3_;
		const gchar* _tmp4_;
#line 420 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp1_ = self->name_label;
#line 420 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp2_ = self->priv->name_entry;
#line 420 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp3_ = gtk_entry_get_text (_tmp2_);
#line 420 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp4_ = _tmp3_;
#line 420 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_label_set_label (_tmp1_, _tmp4_);
#line 421 "/run/build/planner/src/Widgets/TaskRow.vala"
		widgets_task_row_check_task_completed (self);
#line 422 "/run/build/planner/src/Widgets/TaskRow.vala"
		widgets_task_row_hide_content (self);
#line 3784 "TaskRow.c"
	}
#line 425 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = FALSE;
#line 425 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 3790 "TaskRow.c"
}


static gboolean
__widgets_task_row___lambda79__gtk_widget_key_release_event (GtkWidget* _sender,
                                                             GdkEventKey* event,
                                                             gpointer self)
{
	gboolean result;
	result = _widgets_task_row___lambda79_ ((WidgetsTaskRow*) self, event);
#line 418 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 3803 "TaskRow.c"
}


static void
_widgets_task_row___lambda80_ (WidgetsTaskRow* self)
{
#line 429 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_task_completed (self);
#line 430 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_hide_content (self);
#line 3814 "TaskRow.c"
}


static void
__widgets_task_row___lambda80__gtk_entry_activate (GtkEntry* _sender,
                                                   gpointer self)
{
#line 428 "/run/build/planner/src/Widgets/TaskRow.vala"
	_widgets_task_row___lambda80_ ((WidgetsTaskRow*) self);
#line 3824 "TaskRow.c"
}


static void
_widgets_task_row___lambda81_ (WidgetsTaskRow* self,
                               GtkEntryIconPosition pos,
                               GdkEventButton* event)
{
#line 433 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (event != NULL);
#line 434 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (pos == GTK_ENTRY_ICON_SECONDARY) {
#line 3837 "TaskRow.c"
		GtkEntry* _tmp0_;
#line 435 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp0_ = self->priv->name_entry;
#line 435 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_entry_set_text (_tmp0_, "");
#line 3843 "TaskRow.c"
	}
}


static void
__widgets_task_row___lambda81__gtk_entry_icon_press (GtkEntry* _sender,
                                                     GtkEntryIconPosition icon_pos,
                                                     GdkEventButton* event,
                                                     gpointer self)
{
#line 433 "/run/build/planner/src/Widgets/TaskRow.vala"
	_widgets_task_row___lambda81_ ((WidgetsTaskRow*) self, icon_pos, event);
#line 3856 "TaskRow.c"
}


static gboolean
_widgets_task_row___lambda82_ (WidgetsTaskRow* self,
                               GdkEventButton* event)
{
	gboolean result = FALSE;
#line 439 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 440 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_task_completed (self);
#line 441 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_show_content (self);
#line 3871 "TaskRow.c"
}


static gboolean
__widgets_task_row___lambda82__gtk_widget_button_press_event (GtkWidget* _sender,
                                                              GdkEventButton* event,
                                                              gpointer self)
{
	gboolean result;
	result = _widgets_task_row___lambda82_ ((WidgetsTaskRow*) self, event);
#line 439 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 3884 "TaskRow.c"
}


static void
_widgets_task_row___lambda83_ (WidgetsTaskRow* self)
{
	GtkRevealer* _tmp0_;
	GtkRevealer* _tmp1_;
#line 445 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->close_revealer;
#line 445 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_revealer_set_reveal_child (_tmp0_, FALSE);
#line 446 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = self->priv->remove_revealer;
#line 446 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_revealer_set_reveal_child (_tmp1_, FALSE);
#line 448 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_task_completed (self);
#line 449 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_hide_content (self);
#line 3905 "TaskRow.c"
}


static void
__widgets_task_row___lambda83__gtk_button_clicked (GtkButton* _sender,
                                                   gpointer self)
{
#line 444 "/run/build/planner/src/Widgets/TaskRow.vala"
	_widgets_task_row___lambda83_ ((WidgetsTaskRow*) self);
#line 3915 "TaskRow.c"
}


static gboolean
__lambda85_ (WidgetsTaskRow* self)
{
	gboolean result = FALSE;
	GtkTextView* _tmp0_;
#line 454 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->note_view;
#line 454 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_grab_focus ((GtkWidget*) _tmp0_);
#line 455 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = FALSE;
#line 455 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 3932 "TaskRow.c"
}


static gboolean
___lambda85__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda85_ ((WidgetsTaskRow*) self);
#line 453 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 3943 "TaskRow.c"
}


static gboolean
_widgets_task_row___lambda84_ (WidgetsTaskRow* self,
                               GdkEventButton* event)
{
	gboolean result = FALSE;
#line 452 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 453 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 200, ___lambda85__gsource_func, g_object_ref (self), g_object_unref);
#line 458 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = FALSE;
#line 458 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 3960 "TaskRow.c"
}


static gboolean
__widgets_task_row___lambda84__gtk_widget_button_press_event (GtkWidget* _sender,
                                                              GdkEventButton* event,
                                                              gpointer self)
{
	gboolean result;
	result = _widgets_task_row___lambda84_ ((WidgetsTaskRow*) self, event);
#line 452 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 3973 "TaskRow.c"
}


static void
_widgets_task_row___lambda86_ (WidgetsTaskRow* self)
{
#line 462 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_task_completed (self);
#line 463 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_update_task (self);
#line 3984 "TaskRow.c"
}


static void
__widgets_task_row___lambda86__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                          gpointer self)
{
#line 461 "/run/build/planner/src/Widgets/TaskRow.vala"
	_widgets_task_row___lambda86_ ((WidgetsTaskRow*) self);
#line 3994 "TaskRow.c"
}


static gboolean
_widgets_task_row___lambda87_ (WidgetsTaskRow* self,
                               GdkEventCrossing* event)
{
	gboolean result = FALSE;
	GdkCursor* select_cursor = NULL;
	GdkDisplay* _tmp0_;
	GdkCursor* _tmp1_;
	GdkWindow* window = NULL;
	GdkScreen* _tmp2_;
	GdkWindow* _tmp3_;
	GdkWindow* _tmp4_;
	GdkWindow* _tmp5_;
	GdkCursor* _tmp6_;
#line 466 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 467 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = gdk_display_get_default ();
#line 467 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = gdk_cursor_new_for_display (_tmp0_, GDK_HAND2);
#line 467 "/run/build/planner/src/Widgets/TaskRow.vala"
	select_cursor = _tmp1_;
#line 468 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = gdk_screen_get_default ();
#line 468 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp3_ = gdk_screen_get_root_window (_tmp2_);
#line 468 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp4_ = _g_object_ref0 (_tmp3_);
#line 468 "/run/build/planner/src/Widgets/TaskRow.vala"
	window = _tmp4_;
#line 471 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp5_ = window;
#line 471 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp6_ = select_cursor;
#line 471 "/run/build/planner/src/Widgets/TaskRow.vala"
	gdk_window_set_cursor (_tmp5_, _tmp6_);
#line 472 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = FALSE;
#line 472 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (window);
#line 472 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (select_cursor);
#line 472 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4042 "TaskRow.c"
}


static gboolean
__widgets_task_row___lambda87__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                              GdkEventCrossing* event,
                                                              gpointer self)
{
	gboolean result;
	result = _widgets_task_row___lambda87_ ((WidgetsTaskRow*) self, event);
#line 466 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4055 "TaskRow.c"
}


static gboolean
_widgets_task_row___lambda88_ (WidgetsTaskRow* self,
                               GdkEventCrossing* event)
{
	gboolean result = FALSE;
	GdkNotifyType _tmp0_;
	GdkCursor* select_cursor = NULL;
	GdkDisplay* _tmp1_;
	GdkCursor* _tmp2_;
	GdkWindow* window = NULL;
	GdkScreen* _tmp3_;
	GdkWindow* _tmp4_;
	GdkWindow* _tmp5_;
	GdkWindow* _tmp6_;
	GdkCursor* _tmp7_;
#line 475 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 476 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = event->detail;
#line 476 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp0_ == GDK_NOTIFY_INFERIOR) {
#line 477 "/run/build/planner/src/Widgets/TaskRow.vala"
		result = FALSE;
#line 477 "/run/build/planner/src/Widgets/TaskRow.vala"
		return result;
#line 4084 "TaskRow.c"
	}
#line 480 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = gdk_display_get_default ();
#line 480 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = gdk_cursor_new_for_display (_tmp1_, GDK_ARROW);
#line 480 "/run/build/planner/src/Widgets/TaskRow.vala"
	select_cursor = _tmp2_;
#line 481 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp3_ = gdk_screen_get_default ();
#line 481 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp4_ = gdk_screen_get_root_window (_tmp3_);
#line 481 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp5_ = _g_object_ref0 (_tmp4_);
#line 481 "/run/build/planner/src/Widgets/TaskRow.vala"
	window = _tmp5_;
#line 483 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp6_ = window;
#line 483 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp7_ = select_cursor;
#line 483 "/run/build/planner/src/Widgets/TaskRow.vala"
	gdk_window_set_cursor (_tmp6_, _tmp7_);
#line 485 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = FALSE;
#line 485 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (window);
#line 485 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (select_cursor);
#line 485 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4114 "TaskRow.c"
}


static gboolean
__widgets_task_row___lambda88__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                              GdkEventCrossing* event,
                                                              gpointer self)
{
	gboolean result;
	result = _widgets_task_row___lambda88_ ((WidgetsTaskRow*) self, event);
#line 475 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4127 "TaskRow.c"
}


static gboolean
____lambda90_ (WidgetsTaskRow* self)
{
	gboolean result = FALSE;
	gdouble _tmp0_;
	gdouble _tmp1_;
	gdouble _tmp2_;
	gdouble _tmp3_;
#line 517 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = gtk_widget_get_opacity ((GtkWidget*) self);
#line 517 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = _tmp0_;
#line 517 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_opacity ((GtkWidget*) self, _tmp1_ - 0.1);
#line 519 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = gtk_widget_get_opacity ((GtkWidget*) self);
#line 519 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp3_ = _tmp2_;
#line 519 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp3_ <= ((gdouble) 0)) {
#line 520 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_destroy ((GtkWidget*) self);
#line 521 "/run/build/planner/src/Widgets/TaskRow.vala"
		result = FALSE;
#line 521 "/run/build/planner/src/Widgets/TaskRow.vala"
		return result;
#line 4157 "TaskRow.c"
	}
#line 524 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = TRUE;
#line 524 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4163 "TaskRow.c"
}


static gboolean
_____lambda90__gsource_func (gpointer self)
{
	gboolean result;
	result = ____lambda90_ ((WidgetsTaskRow*) self);
#line 516 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4174 "TaskRow.c"
}


static void
_widgets_task_row___lambda89_ (WidgetsTaskRow* self)
{
	GtkRevealer* _tmp0_;
	GtkRevealer* _tmp1_;
	GraniteMessageDialog* message_dialog = NULL;
	GraniteMessageDialog* _tmp2_;
	GtkButton* remove_button = NULL;
	GtkButton* _tmp3_;
	GtkButton* _tmp4_;
	GtkStyleContext* _tmp5_;
	GraniteMessageDialog* _tmp6_;
	GtkButton* _tmp7_;
	GraniteMessageDialog* _tmp8_;
	GraniteMessageDialog* _tmp9_;
	GraniteMessageDialog* _tmp13_;
#line 489 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->close_revealer;
#line 489 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_revealer_set_reveal_child (_tmp0_, FALSE);
#line 490 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = self->priv->remove_revealer;
#line 490 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_revealer_set_reveal_child (_tmp1_, FALSE);
#line 492 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = granite_message_dialog_new_with_image_from_icon_name (_ ("Are you sure you want to delete this task?"), "", "dialog-warning", GTK_BUTTONS_CANCEL);
#line 492 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp2_);
#line 492 "/run/build/planner/src/Widgets/TaskRow.vala"
	message_dialog = _tmp2_;
#line 498 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp3_ = (GtkButton*) gtk_button_new_with_label (_ ("Delete Task"));
#line 498 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp3_);
#line 498 "/run/build/planner/src/Widgets/TaskRow.vala"
	remove_button = _tmp3_;
#line 499 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp4_ = remove_button;
#line 499 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp5_ = gtk_widget_get_style_context ((GtkWidget*) _tmp4_);
#line 499 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp5_, GTK_STYLE_CLASS_DESTRUCTIVE_ACTION);
#line 500 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp6_ = message_dialog;
#line 500 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp7_ = remove_button;
#line 500 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_dialog_add_action_widget ((GtkDialog*) _tmp6_, (GtkWidget*) _tmp7_, (gint) GTK_RESPONSE_ACCEPT);
#line 502 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp8_ = message_dialog;
#line 502 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp8_);
#line 504 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp9_ = message_dialog;
#line 504 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (gtk_dialog_run ((GtkDialog*) _tmp9_) == ((gint) GTK_RESPONSE_ACCEPT)) {
#line 4234 "TaskRow.c"
		ServicesDatabase* _tmp10_;
		ObjectsTask* _tmp11_;
#line 505 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp10_ = application_database;
#line 505 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp11_ = self->priv->_task;
#line 505 "/run/build/planner/src/Widgets/TaskRow.vala"
		if (services_database_remove_task (_tmp10_, _tmp11_) == SQLITE_DONE) {
#line 4243 "TaskRow.c"
			ObjectsTask* _tmp12_;
#line 514 "/run/build/planner/src/Widgets/TaskRow.vala"
			_tmp12_ = self->priv->_task;
#line 514 "/run/build/planner/src/Widgets/TaskRow.vala"
			g_signal_emit (self, widgets_task_row_signals[WIDGETS_TASK_ROW_ON_SIGNAL_REMOVE_SIGNAL], 0, _tmp12_);
#line 516 "/run/build/planner/src/Widgets/TaskRow.vala"
			g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 20, _____lambda90__gsource_func, g_object_ref (self), g_object_unref);
#line 4251 "TaskRow.c"
		}
	}
#line 529 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp13_ = message_dialog;
#line 529 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_destroy ((GtkWidget*) _tmp13_);
#line 488 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (remove_button);
#line 488 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (message_dialog);
#line 4262 "TaskRow.c"
}


static void
__widgets_task_row___lambda89__gtk_button_clicked (GtkButton* _sender,
                                                   gpointer self)
{
#line 488 "/run/build/planner/src/Widgets/TaskRow.vala"
	_widgets_task_row___lambda89_ ((WidgetsTaskRow*) self);
#line 4272 "TaskRow.c"
}


static void
_widgets_task_row___lambda91_ (Block57Data* _data57_)
{
	WidgetsTaskRow* self;
	GtkEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 532 "/run/build/planner/src/Widgets/TaskRow.vala"
	self = _data57_->self;
#line 533 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = _data57_->checklist_entry;
#line 533 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = gtk_entry_get_text (_tmp0_);
#line 533 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = _tmp1_;
#line 533 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (g_strcmp0 (_tmp2_, "") != 0) {
#line 4293 "TaskRow.c"
		WidgetsCheckRow* row = NULL;
		GtkEntry* _tmp3_;
		const gchar* _tmp4_;
		const gchar* _tmp5_;
		WidgetsCheckRow* _tmp6_;
		GtkListBox* _tmp7_;
		WidgetsCheckRow* _tmp8_;
		GtkEntry* _tmp9_;
		GtkListBox* _tmp10_;
#line 534 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp3_ = _data57_->checklist_entry;
#line 534 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp4_ = gtk_entry_get_text (_tmp3_);
#line 534 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp5_ = _tmp4_;
#line 534 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp6_ = widgets_check_row_new (_tmp5_, FALSE);
#line 534 "/run/build/planner/src/Widgets/TaskRow.vala"
		g_object_ref_sink (_tmp6_);
#line 534 "/run/build/planner/src/Widgets/TaskRow.vala"
		row = _tmp6_;
#line 535 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp7_ = self->priv->checklist;
#line 535 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp8_ = row;
#line 535 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_container_add ((GtkContainer*) _tmp7_, (GtkWidget*) _tmp8_);
#line 537 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp9_ = _data57_->checklist_entry;
#line 537 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_entry_set_text (_tmp9_, "");
#line 538 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp10_ = self->priv->checklist;
#line 538 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp10_);
#line 533 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_object_unref0 (row);
#line 4331 "TaskRow.c"
	}
}


static void
__widgets_task_row___lambda91__gtk_entry_activate (GtkEntry* _sender,
                                                   gpointer self)
{
#line 532 "/run/build/planner/src/Widgets/TaskRow.vala"
	_widgets_task_row___lambda91_ (self);
#line 4342 "TaskRow.c"
}


static void
_widgets_task_row___lambda92_ (Block57Data* _data57_)
{
	WidgetsTaskRow* self;
	GtkEntry* _tmp0_;
	Utils* _tmp1_;
	GtkEntry* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
#line 542 "/run/build/planner/src/Widgets/TaskRow.vala"
	self = _data57_->self;
#line 543 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = _data57_->checklist_entry;
#line 543 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = application_utils;
#line 543 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = _data57_->checklist_entry;
#line 543 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp3_ = gtk_entry_get_text (_tmp2_);
#line 543 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp4_ = _tmp3_;
#line 543 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp5_ = utils_first_letter_to_up (_tmp1_, _tmp4_);
#line 543 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp6_ = _tmp5_;
#line 543 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_entry_set_text (_tmp0_, _tmp6_);
#line 543 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp6_);
#line 4377 "TaskRow.c"
}


static void
__widgets_task_row___lambda92__gtk_editable_changed (GtkEditable* _sender,
                                                     gpointer self)
{
#line 542 "/run/build/planner/src/Widgets/TaskRow.vala"
	_widgets_task_row___lambda92_ (self);
#line 4387 "TaskRow.c"
}


static gboolean
_widgets_task_row___lambda93_ (Block57Data* _data57_)
{
	WidgetsTaskRow* self;
	gboolean result = FALSE;
	GtkEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 546 "/run/build/planner/src/Widgets/TaskRow.vala"
	self = _data57_->self;
#line 547 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = _data57_->checklist_entry;
#line 547 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = gtk_entry_get_text (_tmp0_);
#line 547 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = _tmp1_;
#line 547 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (g_strcmp0 (_tmp2_, "") != 0) {
#line 4409 "TaskRow.c"
		WidgetsCheckRow* row = NULL;
		GtkEntry* _tmp3_;
		const gchar* _tmp4_;
		const gchar* _tmp5_;
		WidgetsCheckRow* _tmp6_;
		GtkListBox* _tmp7_;
		WidgetsCheckRow* _tmp8_;
		GtkEntry* _tmp9_;
		GtkListBox* _tmp10_;
#line 548 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp3_ = _data57_->checklist_entry;
#line 548 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp4_ = gtk_entry_get_text (_tmp3_);
#line 548 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp5_ = _tmp4_;
#line 548 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp6_ = widgets_check_row_new (_tmp5_, FALSE);
#line 548 "/run/build/planner/src/Widgets/TaskRow.vala"
		g_object_ref_sink (_tmp6_);
#line 548 "/run/build/planner/src/Widgets/TaskRow.vala"
		row = _tmp6_;
#line 549 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp7_ = self->priv->checklist;
#line 549 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp8_ = row;
#line 549 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_container_add ((GtkContainer*) _tmp7_, (GtkWidget*) _tmp8_);
#line 551 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp9_ = _data57_->checklist_entry;
#line 551 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_entry_set_text (_tmp9_, "");
#line 552 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp10_ = self->priv->checklist;
#line 552 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp10_);
#line 547 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_object_unref0 (row);
#line 4447 "TaskRow.c"
	}
#line 555 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = FALSE;
#line 555 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4453 "TaskRow.c"
}


static gboolean
__widgets_task_row___lambda93__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                           GdkEventFocus* event,
                                                           gpointer self)
{
	gboolean result;
	result = _widgets_task_row___lambda93_ (self);
#line 546 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4466 "TaskRow.c"
}


static gboolean
_widgets_task_row___lambda94_ (WidgetsTaskRow* self,
                               GdkEventKey* key)
{
	gboolean result = FALSE;
	guint _tmp0_;
#line 558 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_val_if_fail (key != NULL, FALSE);
#line 559 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = key->keyval;
#line 559 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp0_ == ((guint) 65307)) {
#line 560 "/run/build/planner/src/Widgets/TaskRow.vala"
		widgets_task_row_check_task_completed (self);
#line 561 "/run/build/planner/src/Widgets/TaskRow.vala"
		widgets_task_row_hide_content (self);
#line 4486 "TaskRow.c"
	}
#line 564 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = FALSE;
#line 564 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4492 "TaskRow.c"
}


static gboolean
__widgets_task_row___lambda94__gtk_widget_key_release_event (GtkWidget* _sender,
                                                             GdkEventKey* event,
                                                             gpointer self)
{
	gboolean result;
	result = _widgets_task_row___lambda94_ ((WidgetsTaskRow*) self, event);
#line 558 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4505 "TaskRow.c"
}


static gboolean
_widgets_task_row___lambda95_ (WidgetsTaskRow* self,
                               GdkEventCrossing* event)
{
	gboolean result = FALSE;
	GtkRevealer* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 567 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 568 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->bottom_box_revealer;
#line 568 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = gtk_revealer_get_reveal_child (_tmp0_);
#line 568 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = _tmp1_;
#line 568 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp2_ == TRUE) {
#line 4527 "TaskRow.c"
		GtkRevealer* _tmp3_;
		GtkRevealer* _tmp4_;
#line 569 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp3_ = self->priv->close_revealer;
#line 569 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_revealer_set_reveal_child (_tmp3_, TRUE);
#line 570 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp4_ = self->priv->remove_revealer;
#line 570 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_revealer_set_reveal_child (_tmp4_, TRUE);
#line 4538 "TaskRow.c"
	}
#line 573 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = FALSE;
#line 573 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4544 "TaskRow.c"
}


static gboolean
__widgets_task_row___lambda95__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                              GdkEventCrossing* event,
                                                              gpointer self)
{
	gboolean result;
	result = _widgets_task_row___lambda95_ ((WidgetsTaskRow*) self, event);
#line 567 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4557 "TaskRow.c"
}


static gboolean
_widgets_task_row___lambda96_ (WidgetsTaskRow* self,
                               GdkEventCrossing* event)
{
	gboolean result = FALSE;
	GdkNotifyType _tmp0_;
	GtkRevealer* _tmp1_;
	GtkRevealer* _tmp2_;
#line 576 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 577 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = event->detail;
#line 577 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp0_ == GDK_NOTIFY_INFERIOR) {
#line 578 "/run/build/planner/src/Widgets/TaskRow.vala"
		result = FALSE;
#line 578 "/run/build/planner/src/Widgets/TaskRow.vala"
		return result;
#line 4579 "TaskRow.c"
	}
#line 581 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = self->priv->close_revealer;
#line 581 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_revealer_set_reveal_child (_tmp1_, FALSE);
#line 582 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = self->priv->remove_revealer;
#line 582 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_revealer_set_reveal_child (_tmp2_, FALSE);
#line 584 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = FALSE;
#line 584 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4593 "TaskRow.c"
}


static gboolean
__widgets_task_row___lambda96__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                              GdkEventCrossing* event,
                                                              gpointer self)
{
	gboolean result;
	result = _widgets_task_row___lambda96_ ((WidgetsTaskRow*) self, event);
#line 576 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4606 "TaskRow.c"
}


static void
_widgets_task_row___lambda97_ (WidgetsTaskRow* self,
                               ObjectsLabel* label)
{
	gint _tmp0_;
	GtkRevealer* _tmp4_;
	GtkFlowBox* _tmp5_;
	GtkFlowBox* _tmp6_;
#line 587 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (label != NULL);
#line 588 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = label->id;
#line 588 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (widgets_task_row_is_repeted (self, _tmp0_) == FALSE) {
#line 4624 "TaskRow.c"
		WidgetsLabelChild* child = NULL;
		WidgetsLabelChild* _tmp1_;
		GtkFlowBox* _tmp2_;
		WidgetsLabelChild* _tmp3_;
#line 589 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp1_ = widgets_label_child_new (label);
#line 589 "/run/build/planner/src/Widgets/TaskRow.vala"
		g_object_ref_sink (_tmp1_);
#line 589 "/run/build/planner/src/Widgets/TaskRow.vala"
		child = _tmp1_;
#line 590 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp2_ = self->priv->labels_flowbox;
#line 590 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp3_ = child;
#line 590 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_container_add ((GtkContainer*) _tmp2_, (GtkWidget*) _tmp3_);
#line 588 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_object_unref0 (child);
#line 4643 "TaskRow.c"
	}
#line 593 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp4_ = self->priv->labels_flowbox_revealer;
#line 593 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp5_ = self->priv->labels_flowbox;
#line 593 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_revealer_set_reveal_child (_tmp4_, !widgets_task_row_is_empty (self, _tmp5_));
#line 594 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp6_ = self->priv->labels_flowbox;
#line 594 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp6_);
#line 4655 "TaskRow.c"
}


static void
__widgets_task_row___lambda97__widgets_label_button_on_selected_label (WidgetsLabelButton* _sender,
                                                                       ObjectsLabel* label,
                                                                       gpointer self)
{
#line 587 "/run/build/planner/src/Widgets/TaskRow.vala"
	_widgets_task_row___lambda97_ ((WidgetsTaskRow*) self, label);
#line 4666 "TaskRow.c"
}


static void
_widgets_task_row___lambda98_ (WidgetsTaskRow* self,
                               GtkWidget* widget)
{
	GtkRevealer* _tmp0_;
	GtkFlowBox* _tmp1_;
#line 597 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_return_if_fail (widget != NULL);
#line 598 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->labels_flowbox_revealer;
#line 598 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = self->priv->labels_flowbox;
#line 598 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_revealer_set_reveal_child (_tmp0_, !widgets_task_row_is_empty (self, _tmp1_));
#line 4684 "TaskRow.c"
}


static void
__widgets_task_row___lambda98__gtk_container_remove (GtkContainer* _sender,
                                                     GtkWidget* widget,
                                                     gpointer self)
{
#line 597 "/run/build/planner/src/Widgets/TaskRow.vala"
	_widgets_task_row___lambda98_ ((WidgetsTaskRow*) self, widget);
#line 4695 "TaskRow.c"
}


static gboolean
_widgets_task_row___lambda99_ (WidgetsTaskRow* self)
{
	gboolean result = FALSE;
	GtkTextView* _tmp0_;
	GtkTextBuffer* _tmp1_;
	GtkTextBuffer* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gboolean _tmp6_;
#line 602 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->note_view;
#line 602 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = gtk_text_view_get_buffer (_tmp0_);
#line 602 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = _tmp1_;
#line 602 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_get (_tmp2_, "text", &_tmp3_, NULL);
#line 602 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp4_ = _tmp3_;
#line 602 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp5_ = _tmp4_;
#line 602 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp6_ = g_strcmp0 (_tmp5_, "") == 0;
#line 602 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp5_);
#line 602 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp6_) {
#line 4728 "TaskRow.c"
		GtkLabel* _tmp7_;
		GtkLabel* _tmp8_;
#line 603 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp7_ = self->priv->note_view_placeholder_label;
#line 603 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp7_, TRUE);
#line 604 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp8_ = self->priv->note_view_placeholder_label;
#line 604 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp8_, FALSE);
#line 4739 "TaskRow.c"
	}
#line 607 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = FALSE;
#line 607 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4745 "TaskRow.c"
}


static gboolean
__widgets_task_row___lambda99__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                           GdkEventFocus* event,
                                                           gpointer self)
{
	gboolean result;
	result = _widgets_task_row___lambda99_ ((WidgetsTaskRow*) self);
#line 601 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4758 "TaskRow.c"
}


static gboolean
_widgets_task_row___lambda100_ (WidgetsTaskRow* self)
{
	gboolean result = FALSE;
	GtkLabel* _tmp0_;
	GtkLabel* _tmp1_;
#line 611 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->note_view_placeholder_label;
#line 611 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_visible ((GtkWidget*) _tmp0_, FALSE);
#line 612 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = self->priv->note_view_placeholder_label;
#line 612 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_no_show_all ((GtkWidget*) _tmp1_, TRUE);
#line 614 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = FALSE;
#line 614 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4780 "TaskRow.c"
}


static gboolean
__widgets_task_row___lambda100__gtk_widget_focus_in_event (GtkWidget* _sender,
                                                           GdkEventFocus* event,
                                                           gpointer self)
{
	gboolean result;
	result = _widgets_task_row___lambda100_ ((WidgetsTaskRow*) self);
#line 610 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4793 "TaskRow.c"
}


static Block58Data*
block58_data_ref (Block58Data* _data58_)
{
#line 618 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_atomic_int_inc (&_data58_->_ref_count_);
#line 618 "/run/build/planner/src/Widgets/TaskRow.vala"
	return _data58_;
#line 4804 "TaskRow.c"
}


static void
block58_data_unref (void * _userdata_)
{
	Block58Data* _data58_;
	_data58_ = (Block58Data*) _userdata_;
#line 618 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (g_atomic_int_dec_and_test (&_data58_->_ref_count_)) {
#line 4815 "TaskRow.c"
		WidgetsTaskRow* self;
#line 618 "/run/build/planner/src/Widgets/TaskRow.vala"
		self = _data58_->self;
#line 618 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_object_unref0 (self);
#line 618 "/run/build/planner/src/Widgets/TaskRow.vala"
		g_slice_free (Block58Data, _data58_);
#line 4823 "TaskRow.c"
	}
}


static gboolean
___lambda102_ (Block58Data* _data58_)
{
	WidgetsTaskRow* self;
	gboolean result = FALSE;
	gboolean _tmp0_;
	gint _tmp11_;
	gint _tmp12_;
#line 622 "/run/build/planner/src/Widgets/TaskRow.vala"
	self = _data58_->self;
#line 623 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = _data58_->b;
#line 623 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp0_) {
#line 4842 "TaskRow.c"
		GtkLabel* _tmp1_;
		GtkStyleContext* _tmp2_;
		GtkBox* _tmp3_;
		GtkStyleContext* _tmp4_;
		GtkStyleContext* _tmp5_;
#line 624 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp1_ = self->name_label;
#line 624 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp2_ = gtk_widget_get_style_context ((GtkWidget*) _tmp1_);
#line 624 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_style_context_add_class (_tmp2_, "text-hover");
#line 625 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp3_ = self->previews_box;
#line 625 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) _tmp3_);
#line 625 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_style_context_add_class (_tmp4_, "text-hover");
#line 626 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp5_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 626 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_style_context_add_class (_tmp5_, "task-hover");
#line 628 "/run/build/planner/src/Widgets/TaskRow.vala"
		_data58_->b = FALSE;
#line 4866 "TaskRow.c"
	} else {
		GtkLabel* _tmp6_;
		GtkStyleContext* _tmp7_;
		GtkBox* _tmp8_;
		GtkStyleContext* _tmp9_;
		GtkStyleContext* _tmp10_;
#line 630 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp6_ = self->name_label;
#line 630 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp7_ = gtk_widget_get_style_context ((GtkWidget*) _tmp6_);
#line 630 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_style_context_remove_class (_tmp7_, "text-hover");
#line 631 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp8_ = self->previews_box;
#line 631 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp9_ = gtk_widget_get_style_context ((GtkWidget*) _tmp8_);
#line 631 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_style_context_remove_class (_tmp9_, "text-hover");
#line 632 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 632 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_style_context_remove_class (_tmp10_, "task-hover");
#line 634 "/run/build/planner/src/Widgets/TaskRow.vala"
		_data58_->b = TRUE;
#line 4891 "TaskRow.c"
	}
#line 637 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp11_ = _data58_->c;
#line 637 "/run/build/planner/src/Widgets/TaskRow.vala"
	_data58_->c = _tmp11_ + 1;
#line 639 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp12_ = _data58_->c;
#line 639 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp12_ > 5) {
#line 4901 "TaskRow.c"
		GtkLabel* _tmp13_;
		GtkStyleContext* _tmp14_;
		GtkBox* _tmp15_;
		GtkStyleContext* _tmp16_;
		GtkStyleContext* _tmp17_;
#line 640 "/run/build/planner/src/Widgets/TaskRow.vala"
		_data58_->c = 0;
#line 642 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp13_ = self->name_label;
#line 642 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp14_ = gtk_widget_get_style_context ((GtkWidget*) _tmp13_);
#line 642 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_style_context_remove_class (_tmp14_, "text-hover");
#line 643 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp15_ = self->previews_box;
#line 643 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp16_ = gtk_widget_get_style_context ((GtkWidget*) _tmp15_);
#line 643 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_style_context_remove_class (_tmp16_, "text-hover");
#line 644 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp17_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 644 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_style_context_remove_class (_tmp17_, "task-hover");
#line 646 "/run/build/planner/src/Widgets/TaskRow.vala"
		result = FALSE;
#line 646 "/run/build/planner/src/Widgets/TaskRow.vala"
		return result;
#line 4929 "TaskRow.c"
	}
#line 649 "/run/build/planner/src/Widgets/TaskRow.vala"
	result = TRUE;
#line 649 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4935 "TaskRow.c"
}


static gboolean
____lambda102__gsource_func (gpointer self)
{
	gboolean result;
	result = ___lambda102_ (self);
#line 622 "/run/build/planner/src/Widgets/TaskRow.vala"
	return result;
#line 4946 "TaskRow.c"
}


static void
_widgets_task_row___lambda101_ (WidgetsTaskRow* self,
                                gint task_id,
                                gint project_id)
{
	ObjectsTask* _tmp0_;
	gint _tmp1_;
#line 618 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = self->priv->_task;
#line 618 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = _tmp0_->id;
#line 618 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp1_ == task_id) {
#line 4963 "TaskRow.c"
		Block58Data* _data58_;
#line 618 "/run/build/planner/src/Widgets/TaskRow.vala"
		_data58_ = g_slice_new0 (Block58Data);
#line 618 "/run/build/planner/src/Widgets/TaskRow.vala"
		_data58_->_ref_count_ = 1;
#line 618 "/run/build/planner/src/Widgets/TaskRow.vala"
		_data58_->self = g_object_ref (self);
#line 619 "/run/build/planner/src/Widgets/TaskRow.vala"
		_data58_->b = FALSE;
#line 620 "/run/build/planner/src/Widgets/TaskRow.vala"
		_data58_->c = 0;
#line 622 "/run/build/planner/src/Widgets/TaskRow.vala"
		g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 200, ____lambda102__gsource_func, block58_data_ref (_data58_), block58_data_unref);
#line 618 "/run/build/planner/src/Widgets/TaskRow.vala"
		block58_data_unref (_data58_);
#line 618 "/run/build/planner/src/Widgets/TaskRow.vala"
		_data58_ = NULL;
#line 4981 "TaskRow.c"
	}
}


static void
__widgets_task_row___lambda101__services_signals_go_task_page (ServicesSignals* _sender,
                                                               gint task_id,
                                                               gint project_id,
                                                               gpointer self)
{
#line 617 "/run/build/planner/src/Widgets/TaskRow.vala"
	_widgets_task_row___lambda101_ ((WidgetsTaskRow*) self, task_id, project_id);
#line 4994 "TaskRow.c"
}


static GObject *
widgets_task_row_constructor (GType type,
                              guint n_construct_properties,
                              GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsTaskRow * self;
	Block57Data* _data57_;
	GtkStyleContext* _tmp0_;
	GtkCheckButton* _tmp1_;
	GtkCheckButton* _tmp2_;
	ObjectsTask* _tmp3_;
	gint _tmp4_;
	ObjectsTask* _tmp7_;
	const gchar* _tmp8_;
	ObjectsTask* _tmp9_;
	const gchar* _tmp10_;
	GtkLabel* _tmp11_;
	GtkLabel* _tmp12_;
	GtkLabel* _tmp13_;
	GtkLabel* _tmp14_;
	GtkLabel* _tmp15_;
	GtkLabel* _tmp16_;
	GtkLabel* _tmp17_;
	GtkStyleContext* _tmp18_;
	GtkEntry* _tmp19_;
	GtkEntry* _tmp20_;
	ObjectsTask* _tmp21_;
	const gchar* _tmp22_;
	GtkEntry* _tmp23_;
	GtkEntry* _tmp24_;
	GtkEntry* _tmp25_;
	GtkStyleContext* _tmp26_;
	GtkEntry* _tmp27_;
	GtkStyleContext* _tmp28_;
	GtkEntry* _tmp29_;
	GtkStyleContext* _tmp30_;
	GtkEntry* _tmp31_;
	GtkStyleContext* _tmp32_;
	GtkEntry* _tmp33_;
	GtkButton* _tmp34_;
	GtkButton* _tmp35_;
	GtkButton* _tmp36_;
	GtkButton* _tmp37_;
	GtkStyleContext* _tmp38_;
	GtkRevealer* _tmp39_;
	GtkRevealer* _tmp40_;
	GtkRevealer* _tmp41_;
	GtkButton* _tmp42_;
	GtkRevealer* _tmp43_;
	GtkRevealer* _tmp44_;
	GtkRevealer* _tmp45_;
	GtkImage* _tmp46_;
	GtkImage* _tmp47_;
	GThemedIcon* _tmp48_;
	GThemedIcon* _tmp49_;
	GtkImage* _tmp50_;
	GtkImage* _tmp51_;
	GtkImage* _tmp52_;
	GThemedIcon* _tmp53_;
	GThemedIcon* _tmp54_;
	GtkImage* _tmp55_;
	GtkImage* checklist_preview_icon = NULL;
	GtkImage* _tmp56_;
	GtkImage* _tmp57_;
	GThemedIcon* _tmp58_;
	GThemedIcon* _tmp59_;
	GtkImage* _tmp60_;
	GtkLabel* _tmp61_;
	GtkLabel* _tmp62_;
	GtkBox* _tmp63_;
	GtkBox* _tmp64_;
	GtkImage* _tmp65_;
	GtkBox* _tmp66_;
	GtkLabel* _tmp67_;
	GtkLabel* _tmp68_;
	GtkLabel* _tmp69_;
	GtkLabel* _tmp70_;
	GtkLabel* _tmp71_;
	GtkLabel* _tmp72_;
	GtkStyleContext* _tmp73_;
	GtkImage* reminder_preview_icon = NULL;
	GtkImage* _tmp74_;
	GtkImage* _tmp75_;
	GThemedIcon* _tmp76_;
	GThemedIcon* _tmp77_;
	GtkImage* _tmp78_;
	GtkLabel* _tmp79_;
	GtkBox* _tmp80_;
	GtkBox* _tmp81_;
	GtkImage* _tmp82_;
	GtkBox* _tmp83_;
	GtkLabel* _tmp84_;
	GtkGrid* _tmp85_;
	GtkGrid* _tmp86_;
	GtkStyleContext* _tmp87_;
	ObjectsTask* _tmp88_;
	gint _tmp89_;
	gchar* _tmp90_;
	gchar* _tmp91_;
	GtkGrid* _tmp92_;
	GtkGrid* _tmp93_;
	GtkLabel* _tmp94_;
	GtkBox* _tmp95_;
	GtkBox* _tmp96_;
	GtkLabel* _tmp97_;
	GtkBox* _tmp98_;
	GtkGrid* _tmp99_;
	ObjectsTask* _tmp100_;
	gint _tmp101_;
	GtkBox* _tmp110_;
	GtkBox* _tmp111_;
	GtkLabel* _tmp112_;
	GtkBox* _tmp113_;
	GtkLabel* _tmp114_;
	GtkBox* _tmp115_;
	GtkImage* _tmp116_;
	GtkBox* _tmp117_;
	GtkImage* _tmp118_;
	GtkBox* _tmp119_;
	GtkBox* _tmp120_;
	GtkBox* _tmp121_;
	GtkBox* _tmp122_;
	GtkBox* _tmp123_;
	GtkBox* _tmp124_;
	GtkEventBox* _tmp125_;
	GtkEventBox* _tmp126_;
	GtkEventBox* _tmp127_;
	GtkBox* _tmp128_;
	GtkBox* _tmp129_;
	GtkBox* _tmp130_;
	GtkBox* _tmp131_;
	GtkCheckButton* _tmp132_;
	GtkBox* _tmp133_;
	GtkEventBox* _tmp134_;
	GtkBox* _tmp135_;
	GtkEntry* _tmp136_;
	GtkTextView* _tmp137_;
	GtkTextView* _tmp138_;
	GtkTextView* _tmp139_;
	GtkTextView* _tmp140_;
	GtkTextView* _tmp141_;
	GtkTextView* _tmp142_;
	GtkTextView* _tmp143_;
	GtkTextBuffer* _tmp144_;
	GtkTextBuffer* _tmp145_;
	ObjectsTask* _tmp146_;
	const gchar* _tmp147_;
	GtkTextView* _tmp148_;
	GtkStyleContext* _tmp149_;
	GtkLabel* _tmp150_;
	GtkLabel* _tmp151_;
	GtkTextView* _tmp152_;
	GtkLabel* _tmp153_;
	GtkTextView* _tmp154_;
	GtkTextBuffer* _tmp155_;
	GtkTextBuffer* _tmp156_;
	gchar* _tmp157_;
	gchar* _tmp158_;
	gchar* _tmp159_;
	gboolean _tmp160_;
	GtkEventBox* note_eventbox = NULL;
	GtkEventBox* _tmp163_;
	GtkEventBox* _tmp164_;
	GtkTextView* _tmp165_;
	GtkListBox* _tmp166_;
	GtkListBox* _tmp167_;
	GtkListBox* _tmp168_;
	GtkStyleContext* _tmp169_;
	GtkListBox* _tmp170_;
	GtkCheckButton* checklist_button = NULL;
	GtkCheckButton* _tmp171_;
	GtkCheckButton* _tmp172_;
	GtkStyleContext* _tmp173_;
	GtkCheckButton* _tmp174_;
	GtkEntry* _tmp175_;
	GtkEntry* _tmp176_;
	GtkEntry* _tmp177_;
	GtkEntry* _tmp178_;
	GtkEntry* _tmp179_;
	GtkStyleContext* _tmp180_;
	GtkEntry* _tmp181_;
	GtkStyleContext* _tmp182_;
	GtkEntry* _tmp183_;
	GtkStyleContext* _tmp184_;
	GtkEntry* _tmp185_;
	GtkStyleContext* _tmp186_;
	GtkBox* checklist_box = NULL;
	GtkBox* _tmp187_;
	GtkBox* _tmp188_;
	GtkCheckButton* _tmp189_;
	GtkBox* _tmp190_;
	GtkEntry* _tmp191_;
	GtkGrid* checklist_grid = NULL;
	GtkGrid* _tmp192_;
	GtkGrid* _tmp193_;
	GtkGrid* _tmp194_;
	GtkGrid* _tmp195_;
	GtkGrid* _tmp196_;
	GtkListBox* _tmp197_;
	GtkGrid* _tmp198_;
	GtkBox* _tmp199_;
	GtkFlowBox* _tmp200_;
	GtkFlowBox* _tmp201_;
	GtkFlowBox* _tmp202_;
	GtkFlowBox* _tmp203_;
	GtkFlowBox* _tmp204_;
	GtkRevealer* _tmp205_;
	GtkRevealer* _tmp206_;
	GtkRevealer* _tmp207_;
	GtkRevealer* _tmp208_;
	GtkFlowBox* _tmp209_;
	GtkRevealer* _tmp210_;
	gboolean has_reminder = FALSE;
	ObjectsTask* _tmp211_;
	gint _tmp212_;
	WidgetsWhenButton* _tmp217_;
	WidgetsWhenButton* _tmp218_;
	ObjectsTask* _tmp219_;
	const gchar* _tmp220_;
	GTimeZone* _tmp221_;
	GTimeZone* _tmp222_;
	GDateTime* _tmp223_;
	GDateTime* _tmp224_;
	gboolean _tmp225_;
	ObjectsTask* _tmp226_;
	const gchar* _tmp227_;
	GTimeZone* _tmp228_;
	GTimeZone* _tmp229_;
	GDateTime* _tmp230_;
	GDateTime* _tmp231_;
	WidgetsLabelButton* labels = NULL;
	WidgetsLabelButton* _tmp232_;
	WidgetsMoveButton* move_button = NULL;
	WidgetsMoveButton* _tmp233_;
	WidgetsMoveButton* _tmp234_;
	GtkButton* _tmp235_;
	GtkButton* _tmp236_;
	GtkButton* _tmp237_;
	GtkStyleContext* _tmp238_;
	GtkButton* _tmp239_;
	GtkToggleButton* _tmp240_;
	GtkToggleButton* _tmp241_;
	GtkToggleButton* _tmp242_;
	GtkImage* _tmp243_;
	GtkImage* _tmp244_;
	GtkToggleButton* _tmp245_;
	GtkStyleContext* _tmp246_;
	GtkToggleButton* _tmp247_;
	GtkStyleContext* _tmp248_;
	GtkToggleButton* _tmp249_;
	GtkStyleContext* _tmp250_;
	GtkToggleButton* _tmp251_;
	WidgetsPopoversTaskMenu* _tmp252_;
	GtkBox* action_box = NULL;
	GtkBox* _tmp253_;
	GtkBox* _tmp254_;
	GtkBox* _tmp255_;
	GtkBox* _tmp256_;
	GtkBox* _tmp257_;
	GtkBox* _tmp258_;
	GtkBox* _tmp259_;
	WidgetsWhenButton* _tmp260_;
	GtkBox* _tmp261_;
	WidgetsLabelButton* _tmp262_;
	GtkBox* _tmp263_;
	GtkToggleButton* _tmp264_;
	GtkBox* _tmp265_;
	GtkButton* _tmp266_;
	GtkBox* _tmp267_;
	WidgetsMoveButton* _tmp268_;
	GtkBox* bottom_box = NULL;
	GtkBox* _tmp269_;
	GtkBox* _tmp270_;
	GtkEventBox* _tmp271_;
	GtkBox* _tmp272_;
	GtkGrid* _tmp273_;
	GtkBox* _tmp274_;
	GtkRevealer* _tmp275_;
	GtkBox* _tmp276_;
	GtkBox* _tmp277_;
	GtkRevealer* _tmp278_;
	GtkRevealer* _tmp279_;
	GtkBox* _tmp280_;
	GtkRevealer* _tmp281_;
	GtkRevealer* _tmp282_;
	GtkGrid* _tmp283_;
	GtkGrid* _tmp284_;
	GtkGrid* _tmp285_;
	GtkGrid* _tmp286_;
	GtkGrid* _tmp287_;
	GtkStyleContext* _tmp288_;
	GtkGrid* _tmp289_;
	GtkGrid* _tmp290_;
	GtkBox* _tmp291_;
	GtkGrid* _tmp292_;
	GtkRevealer* _tmp293_;
	GtkOverlay* main_overlay = NULL;
	GtkOverlay* _tmp294_;
	GtkOverlay* _tmp295_;
	GtkRevealer* _tmp296_;
	GtkOverlay* _tmp297_;
	GtkGrid* _tmp298_;
	GtkEventBox* main_eventbox = NULL;
	GtkEventBox* _tmp299_;
	GtkEventBox* _tmp300_;
	GtkEventBox* _tmp301_;
	GtkEventBox* _tmp302_;
	GtkEventBox* _tmp303_;
	GtkEventBox* _tmp304_;
	GtkOverlay* _tmp305_;
	GtkEventBox* _tmp306_;
	GtkToggleButton* _tmp307_;
	WidgetsPopoversTaskMenu* _tmp308_;
	WidgetsPopoversTaskMenu* _tmp309_;
	WidgetsMoveButton* _tmp310_;
	GtkEntry* _tmp311_;
	GtkEntry* _tmp312_;
	GtkEntry* _tmp313_;
	GtkEntry* _tmp314_;
	GtkEntry* _tmp315_;
	GtkEntry* _tmp316_;
	GtkEventBox* _tmp317_;
	GtkButton* _tmp318_;
	GtkEventBox* _tmp319_;
	GtkCheckButton* _tmp320_;
	GtkEventBox* _tmp321_;
	GtkEventBox* _tmp322_;
	GtkButton* _tmp323_;
	GtkEntry* _tmp324_;
	GtkEntry* _tmp325_;
	GtkEntry* _tmp326_;
	GtkTextView* _tmp327_;
	GtkEventBox* _tmp328_;
	GtkEventBox* _tmp329_;
	WidgetsLabelButton* _tmp330_;
	GtkFlowBox* _tmp331_;
	GtkTextView* _tmp332_;
	GtkTextView* _tmp333_;
	ServicesSignals* _tmp334_;
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	parent_class = G_OBJECT_CLASS (widgets_task_row_parent_class);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_TASK_ROW, WidgetsTaskRow);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_data57_ = g_slice_new0 (Block57Data);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_data57_->_ref_count_ = 1;
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_data57_->self = g_object_ref (self);
#line 75 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 75 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp0_, "task");
#line 77 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp1_ = (GtkCheckButton*) gtk_check_button_new ();
#line 77 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp1_);
#line 77 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->checked_button);
#line 77 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->checked_button = _tmp1_;
#line 78 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp2_ = self->priv->checked_button;
#line 78 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp2_, FALSE);
#line 80 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp3_ = self->priv->_task;
#line 80 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp4_ = _tmp3_->checked;
#line 80 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp4_ == 1) {
#line 5373 "TaskRow.c"
		GtkCheckButton* _tmp5_;
#line 81 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp5_ = self->priv->checked_button;
#line 81 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_toggle_button_set_active ((GtkToggleButton*) _tmp5_, TRUE);
#line 5379 "TaskRow.c"
	} else {
		GtkCheckButton* _tmp6_;
#line 83 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp6_ = self->priv->checked_button;
#line 83 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_toggle_button_set_active ((GtkToggleButton*) _tmp6_, FALSE);
#line 5386 "TaskRow.c"
	}
#line 86 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp7_ = self->priv->_task;
#line 86 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp8_ = _tmp7_->content;
#line 86 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) self, _tmp8_);
#line 88 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp9_ = self->priv->_task;
#line 88 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp10_ = _tmp9_->content;
#line 88 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp11_ = (GtkLabel*) gtk_label_new (_tmp10_);
#line 88 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp11_);
#line 88 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->name_label);
#line 88 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->name_label = _tmp11_;
#line 89 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp12_ = self->name_label;
#line 89 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp12_, 6);
#line 90 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp13_ = self->name_label;
#line 90 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp13_, GTK_ALIGN_START);
#line 91 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp14_ = self->name_label;
#line 91 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_label_set_ellipsize (_tmp14_, PANGO_ELLIPSIZE_END);
#line 92 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp15_ = self->name_label;
#line 92 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_label_set_use_markup (_tmp15_, TRUE);
#line 93 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp16_ = self->name_label;
#line 93 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp16_, 1);
#line 94 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp17_ = self->name_label;
#line 94 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp18_ = gtk_widget_get_style_context ((GtkWidget*) _tmp17_);
#line 94 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp18_, GRANITE_STYLE_CLASS_H3_LABEL);
#line 96 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp19_ = (GtkEntry*) gtk_entry_new ();
#line 96 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp19_);
#line 96 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->name_entry);
#line 96 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->name_entry = _tmp19_;
#line 97 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp20_ = self->priv->name_entry;
#line 97 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp21_ = self->priv->_task;
#line 97 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp22_ = _tmp21_->content;
#line 97 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_entry_set_text (_tmp20_, _tmp22_);
#line 98 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp23_ = self->priv->name_entry;
#line 98 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp23_, TRUE);
#line 99 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp24_ = self->priv->name_entry;
#line 99 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp24_, 1);
#line 100 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp25_ = self->priv->name_entry;
#line 100 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp26_ = gtk_widget_get_style_context ((GtkWidget*) _tmp25_);
#line 100 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp26_, GTK_STYLE_CLASS_FLAT);
#line 101 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp27_ = self->priv->name_entry;
#line 101 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp28_ = gtk_widget_get_style_context ((GtkWidget*) _tmp27_);
#line 101 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp28_, GRANITE_STYLE_CLASS_H3_LABEL);
#line 102 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp29_ = self->priv->name_entry;
#line 102 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp30_ = gtk_widget_get_style_context ((GtkWidget*) _tmp29_);
#line 102 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp30_, "planner-entry");
#line 103 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp31_ = self->priv->name_entry;
#line 103 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp32_ = gtk_widget_get_style_context ((GtkWidget*) _tmp31_);
#line 103 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp32_, GTK_STYLE_CLASS_VIEW);
#line 104 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp33_ = self->priv->name_entry;
#line 104 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_no_show_all ((GtkWidget*) _tmp33_, TRUE);
#line 106 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp34_ = (GtkButton*) gtk_button_new_from_icon_name ("window-close-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 106 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp34_);
#line 106 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->close_button);
#line 106 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->close_button = _tmp34_;
#line 107 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp35_ = self->priv->close_button;
#line 107 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_set ((GtkWidget*) _tmp35_, "height-request", 24, NULL);
#line 108 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp36_ = self->priv->close_button;
#line 108 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_set ((GtkWidget*) _tmp36_, "width-request", 24, NULL);
#line 109 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp37_ = self->priv->close_button;
#line 109 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp38_ = gtk_widget_get_style_context ((GtkWidget*) _tmp37_);
#line 109 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp38_, "button-close");
#line 111 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp39_ = (GtkRevealer*) gtk_revealer_new ();
#line 111 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp39_);
#line 111 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->close_revealer);
#line 111 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->close_revealer = _tmp39_;
#line 112 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp40_ = self->priv->close_revealer;
#line 112 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_revealer_set_transition_type (_tmp40_, GTK_REVEALER_TRANSITION_TYPE_CROSSFADE);
#line 113 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp41_ = self->priv->close_revealer;
#line 113 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp42_ = self->priv->close_button;
#line 113 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_container_add ((GtkContainer*) _tmp41_, (GtkWidget*) _tmp42_);
#line 114 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp43_ = self->priv->close_revealer;
#line 114 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_revealer_set_reveal_child (_tmp43_, FALSE);
#line 115 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp44_ = self->priv->close_revealer;
#line 115 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp44_, GTK_ALIGN_START);
#line 116 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp45_ = self->priv->close_revealer;
#line 116 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp45_, GTK_ALIGN_END);
#line 118 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp46_ = (GtkImage*) gtk_image_new ();
#line 118 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp46_);
#line 118 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->note_preview_icon);
#line 118 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->note_preview_icon = _tmp46_;
#line 119 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp47_ = self->priv->note_preview_icon;
#line 119 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp48_ = (GThemedIcon*) g_themed_icon_new ("planner-note-symbolic");
#line 119 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp49_ = _tmp48_;
#line 119 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_set (_tmp47_, "gicon", (GIcon*) _tmp49_, NULL);
#line 119 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (_tmp49_);
#line 120 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp50_ = self->priv->note_preview_icon;
#line 120 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_image_set_pixel_size (_tmp50_, 14);
#line 122 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_note_preview_icon (self);
#line 124 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp51_ = (GtkImage*) gtk_image_new ();
#line 124 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp51_);
#line 124 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->label_preview_icon);
#line 124 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->label_preview_icon = _tmp51_;
#line 125 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp52_ = self->priv->label_preview_icon;
#line 125 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp53_ = (GThemedIcon*) g_themed_icon_new ("planner-label-symbolic");
#line 125 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp54_ = _tmp53_;
#line 125 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_set (_tmp52_, "gicon", (GIcon*) _tmp54_, NULL);
#line 125 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (_tmp54_);
#line 126 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp55_ = self->priv->label_preview_icon;
#line 126 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_image_set_pixel_size (_tmp55_, 14);
#line 128 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_label_preview_icon (self);
#line 130 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp56_ = (GtkImage*) gtk_image_new ();
#line 130 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp56_);
#line 130 "/run/build/planner/src/Widgets/TaskRow.vala"
	checklist_preview_icon = _tmp56_;
#line 131 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp57_ = checklist_preview_icon;
#line 131 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp58_ = (GThemedIcon*) g_themed_icon_new ("planner-checklist-symbolic");
#line 131 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp59_ = _tmp58_;
#line 131 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_set (_tmp57_, "gicon", (GIcon*) _tmp59_, NULL);
#line 131 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (_tmp59_);
#line 132 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp60_ = checklist_preview_icon;
#line 132 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_image_set_pixel_size (_tmp60_, 14);
#line 134 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp61_ = (GtkLabel*) gtk_label_new (NULL);
#line 134 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp61_);
#line 134 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->checklist_preview_label);
#line 134 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->checklist_preview_label = _tmp61_;
#line 135 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp62_ = self->priv->checklist_preview_label;
#line 135 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_label_set_use_markup (_tmp62_, TRUE);
#line 137 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp63_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 137 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp63_);
#line 137 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->checklist_preview_box);
#line 137 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->checklist_preview_box = _tmp63_;
#line 138 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp64_ = self->priv->checklist_preview_box;
#line 138 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp65_ = checklist_preview_icon;
#line 138 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp64_, (GtkWidget*) _tmp65_, FALSE, FALSE, (guint) 0);
#line 139 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp66_ = self->priv->checklist_preview_box;
#line 139 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp67_ = self->priv->checklist_preview_label;
#line 139 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp66_, (GtkWidget*) _tmp67_, FALSE, FALSE, (guint) 3);
#line 141 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_checklist_progress (self);
#line 143 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp68_ = (GtkLabel*) gtk_label_new (NULL);
#line 143 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp68_);
#line 143 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->when_preview_label);
#line 143 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->when_preview_label = _tmp68_;
#line 144 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp69_ = self->priv->when_preview_label;
#line 144 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp69_, 6);
#line 145 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp70_ = self->priv->when_preview_label;
#line 145 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp70_, GTK_ALIGN_CENTER);
#line 146 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp71_ = self->priv->when_preview_label;
#line 146 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_label_set_use_markup (_tmp71_, TRUE);
#line 147 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp72_ = self->priv->when_preview_label;
#line 147 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp73_ = gtk_widget_get_style_context ((GtkWidget*) _tmp72_);
#line 147 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp73_, "planner-when-preview");
#line 149 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_when_preview_icon (self);
#line 151 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp74_ = (GtkImage*) gtk_image_new ();
#line 151 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp74_);
#line 151 "/run/build/planner/src/Widgets/TaskRow.vala"
	reminder_preview_icon = _tmp74_;
#line 152 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp75_ = reminder_preview_icon;
#line 152 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp76_ = (GThemedIcon*) g_themed_icon_new ("planner-notification-symbolic");
#line 152 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp77_ = _tmp76_;
#line 152 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_set (_tmp75_, "gicon", (GIcon*) _tmp77_, NULL);
#line 152 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (_tmp77_);
#line 153 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp78_ = reminder_preview_icon;
#line 153 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_image_set_pixel_size (_tmp78_, 14);
#line 155 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp79_ = (GtkLabel*) gtk_label_new (NULL);
#line 155 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp79_);
#line 155 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->reminder_preview_label);
#line 155 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->reminder_preview_label = _tmp79_;
#line 157 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp80_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 157 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp80_);
#line 157 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->reminder_preview_box);
#line 157 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->reminder_preview_box = _tmp80_;
#line 158 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp81_ = self->priv->reminder_preview_box;
#line 158 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp82_ = reminder_preview_icon;
#line 158 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp81_, (GtkWidget*) _tmp82_, FALSE, FALSE, (guint) 0);
#line 159 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp83_ = self->priv->reminder_preview_box;
#line 159 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp84_ = self->priv->reminder_preview_label;
#line 159 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp83_, (GtkWidget*) _tmp84_, FALSE, FALSE, (guint) 3);
#line 161 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_reminder_preview_icon (self);
#line 163 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp85_ = (GtkGrid*) gtk_grid_new ();
#line 163 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp85_);
#line 163 "/run/build/planner/src/Widgets/TaskRow.vala"
	_data57_->project_preview_icon = _tmp85_;
#line 164 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp86_ = _data57_->project_preview_icon;
#line 164 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp87_ = gtk_widget_get_style_context ((GtkWidget*) _tmp86_);
#line 164 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp88_ = self->priv->_task;
#line 164 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp89_ = _tmp88_->project_id;
#line 164 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp90_ = g_strdup_printf ("proyect-%i", _tmp89_);
#line 164 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp91_ = _tmp90_;
#line 164 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp87_, _tmp91_);
#line 164 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp91_);
#line 165 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp92_ = _data57_->project_preview_icon;
#line 165 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_size_request ((GtkWidget*) _tmp92_, 12, 12);
#line 166 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp93_ = _data57_->project_preview_icon;
#line 166 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_set ((GtkWidget*) _tmp93_, "margin", 6, NULL);
#line 168 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp94_ = (GtkLabel*) gtk_label_new (NULL);
#line 168 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp94_);
#line 168 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->project_preview_label);
#line 168 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->project_preview_label = _tmp94_;
#line 170 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp95_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 170 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp95_);
#line 170 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->project_preview_box);
#line 170 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->project_preview_box = _tmp95_;
#line 171 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp96_ = self->project_preview_box;
#line 171 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp97_ = self->priv->project_preview_label;
#line 171 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp96_, (GtkWidget*) _tmp97_, FALSE, FALSE, (guint) 0);
#line 172 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp98_ = self->project_preview_box;
#line 172 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp99_ = _data57_->project_preview_icon;
#line 172 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp98_, (GtkWidget*) _tmp99_, FALSE, FALSE, (guint) 3);
#line 174 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp100_ = self->priv->_task;
#line 174 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp101_ = _tmp100_->is_inbox;
#line 174 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp101_ == 1) {
#line 5780 "TaskRow.c"
		GtkLabel* _tmp102_;
#line 175 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp102_ = self->priv->project_preview_label;
#line 175 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_label_set_label (_tmp102_, _ ("Inbox"));
#line 5786 "TaskRow.c"
	} else {
		ObjectsProject* project = NULL;
		ServicesDatabase* _tmp103_;
		ObjectsTask* _tmp104_;
		gint _tmp105_;
		ObjectsProject* _tmp106_;
		GtkLabel* _tmp107_;
		ObjectsProject* _tmp108_;
		const gchar* _tmp109_;
#line 177 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp103_ = application_database;
#line 177 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp104_ = self->priv->_task;
#line 177 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp105_ = _tmp104_->project_id;
#line 177 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp106_ = services_database_get_project (_tmp103_, _tmp105_);
#line 177 "/run/build/planner/src/Widgets/TaskRow.vala"
		project = _tmp106_;
#line 178 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp107_ = self->priv->project_preview_label;
#line 178 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp108_ = project;
#line 178 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp109_ = _tmp108_->name;
#line 178 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_label_set_label (_tmp107_, _tmp109_);
#line 174 "/run/build/planner/src/Widgets/TaskRow.vala"
		_objects_project_unref0 (project);
#line 5816 "TaskRow.c"
	}
#line 181 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp110_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 181 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp110_);
#line 181 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->previews_box);
#line 181 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->previews_box = _tmp110_;
#line 182 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp111_ = self->previews_box;
#line 182 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp112_ = self->priv->when_preview_label;
#line 182 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp111_, (GtkWidget*) _tmp112_, FALSE, FALSE, (guint) 0);
#line 183 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp113_ = self->previews_box;
#line 183 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp114_ = self->name_label;
#line 183 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp113_, (GtkWidget*) _tmp114_, FALSE, FALSE, (guint) 0);
#line 184 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp115_ = self->previews_box;
#line 184 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp116_ = self->priv->note_preview_icon;
#line 184 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp115_, (GtkWidget*) _tmp116_, FALSE, FALSE, (guint) 3);
#line 185 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp117_ = self->previews_box;
#line 185 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp118_ = self->priv->label_preview_icon;
#line 185 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp117_, (GtkWidget*) _tmp118_, FALSE, FALSE, (guint) 3);
#line 186 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp119_ = self->previews_box;
#line 186 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp120_ = self->priv->checklist_preview_box;
#line 186 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp119_, (GtkWidget*) _tmp120_, FALSE, FALSE, (guint) 3);
#line 187 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp121_ = self->previews_box;
#line 187 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp122_ = self->priv->reminder_preview_box;
#line 187 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp121_, (GtkWidget*) _tmp122_, FALSE, FALSE, (guint) 3);
#line 188 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp123_ = self->previews_box;
#line 188 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp124_ = self->project_preview_box;
#line 188 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_end (_tmp123_, (GtkWidget*) _tmp124_, FALSE, FALSE, (guint) 0);
#line 190 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp125_ = (GtkEventBox*) gtk_event_box_new ();
#line 190 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp125_);
#line 190 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->name_eventbox);
#line 190 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->name_eventbox = _tmp125_;
#line 191 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp126_ = self->priv->name_eventbox;
#line 191 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_add_events ((GtkWidget*) _tmp126_, (gint) (GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK));
#line 192 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp127_ = self->priv->name_eventbox;
#line 192 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp128_ = self->previews_box;
#line 192 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_container_add ((GtkContainer*) _tmp127_, (GtkWidget*) _tmp128_);
#line 194 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp129_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 194 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp129_);
#line 194 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->top_box);
#line 194 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->top_box = _tmp129_;
#line 195 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp130_ = self->priv->top_box;
#line 195 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp130_, TRUE);
#line 196 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp131_ = self->priv->top_box;
#line 196 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp132_ = self->priv->checked_button;
#line 196 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp131_, (GtkWidget*) _tmp132_, FALSE, FALSE, (guint) 0);
#line 197 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp133_ = self->priv->top_box;
#line 197 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp134_ = self->priv->name_eventbox;
#line 197 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp133_, (GtkWidget*) _tmp134_, TRUE, TRUE, (guint) 0);
#line 198 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp135_ = self->priv->top_box;
#line 198 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp136_ = self->priv->name_entry;
#line 198 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp135_, (GtkWidget*) _tmp136_, TRUE, TRUE, (guint) 6);
#line 200 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp137_ = (GtkTextView*) gtk_text_view_new ();
#line 200 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp137_);
#line 200 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->note_view);
#line 200 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->note_view = _tmp137_;
#line 201 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp138_ = self->priv->note_view;
#line 201 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_opacity ((GtkWidget*) _tmp138_, 0.8);
#line 202 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp139_ = self->priv->note_view;
#line 202 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_text_view_set_wrap_mode (_tmp139_, GTK_WRAP_WORD);
#line 203 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp140_ = self->priv->note_view;
#line 203 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_set ((GtkWidget*) _tmp140_, "height-request", 50, NULL);
#line 204 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp141_ = self->priv->note_view;
#line 204 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp141_, 36);
#line 205 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp142_ = self->priv->note_view;
#line 205 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp142_, 12);
#line 206 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp143_ = self->priv->note_view;
#line 206 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp144_ = gtk_text_view_get_buffer (_tmp143_);
#line 206 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp145_ = _tmp144_;
#line 206 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp146_ = self->priv->_task;
#line 206 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp147_ = _tmp146_->note;
#line 206 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_set (_tmp145_, "text", _tmp147_, NULL);
#line 207 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp148_ = self->priv->note_view;
#line 207 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp149_ = gtk_widget_get_style_context ((GtkWidget*) _tmp148_);
#line 207 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp149_, "note-view");
#line 209 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp150_ = (GtkLabel*) gtk_label_new (_ ("Note"));
#line 209 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp150_);
#line 209 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->note_view_placeholder_label);
#line 209 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->note_view_placeholder_label = _tmp150_;
#line 210 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp151_ = self->priv->note_view_placeholder_label;
#line 210 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_opacity ((GtkWidget*) _tmp151_, 0.65);
#line 211 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp152_ = self->priv->note_view;
#line 211 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp153_ = self->priv->note_view_placeholder_label;
#line 211 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_container_add ((GtkContainer*) _tmp152_, (GtkWidget*) _tmp153_);
#line 213 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp154_ = self->priv->note_view;
#line 213 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp155_ = gtk_text_view_get_buffer (_tmp154_);
#line 213 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp156_ = _tmp155_;
#line 213 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_get (_tmp156_, "text", &_tmp157_, NULL);
#line 213 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp158_ = _tmp157_;
#line 213 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp159_ = _tmp158_;
#line 213 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp160_ = g_strcmp0 (_tmp159_, "") != 0;
#line 213 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_free0 (_tmp159_);
#line 213 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp160_) {
#line 5998 "TaskRow.c"
		GtkLabel* _tmp161_;
		GtkLabel* _tmp162_;
#line 214 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp161_ = self->priv->note_view_placeholder_label;
#line 214 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp161_, FALSE);
#line 215 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp162_ = self->priv->note_view_placeholder_label;
#line 215 "/run/build/planner/src/Widgets/TaskRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp162_, TRUE);
#line 6009 "TaskRow.c"
	}
#line 218 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp163_ = (GtkEventBox*) gtk_event_box_new ();
#line 218 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp163_);
#line 218 "/run/build/planner/src/Widgets/TaskRow.vala"
	note_eventbox = _tmp163_;
#line 219 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp164_ = note_eventbox;
#line 219 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp165_ = self->priv->note_view;
#line 219 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_container_add ((GtkContainer*) _tmp164_, (GtkWidget*) _tmp165_);
#line 221 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp166_ = (GtkListBox*) gtk_list_box_new ();
#line 221 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp166_);
#line 221 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->checklist);
#line 221 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->checklist = _tmp166_;
#line 222 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp167_ = self->priv->checklist;
#line 222 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_list_box_set_activate_on_single_click (_tmp167_, TRUE);
#line 223 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp168_ = self->priv->checklist;
#line 223 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp169_ = gtk_widget_get_style_context ((GtkWidget*) _tmp168_);
#line 223 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp169_, "view");
#line 224 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp170_ = self->priv->checklist;
#line 224 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_list_box_set_selection_mode (_tmp170_, GTK_SELECTION_SINGLE);
#line 226 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_update_checklist (self);
#line 228 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp171_ = (GtkCheckButton*) gtk_check_button_new ();
#line 228 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp171_);
#line 228 "/run/build/planner/src/Widgets/TaskRow.vala"
	checklist_button = _tmp171_;
#line 229 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp172_ = checklist_button;
#line 229 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp173_ = gtk_widget_get_style_context ((GtkWidget*) _tmp172_);
#line 229 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp173_, "planner-radio-disable");
#line 230 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp174_ = checklist_button;
#line 230 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_sensitive ((GtkWidget*) _tmp174_, FALSE);
#line 232 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp175_ = (GtkEntry*) gtk_entry_new ();
#line 232 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp175_);
#line 232 "/run/build/planner/src/Widgets/TaskRow.vala"
	_data57_->checklist_entry = _tmp175_;
#line 233 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp176_ = _data57_->checklist_entry;
#line 233 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp176_, TRUE);
#line 234 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp177_ = _data57_->checklist_entry;
#line 234 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp177_, 1);
#line 235 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp178_ = _data57_->checklist_entry;
#line 235 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_entry_set_placeholder_text (_tmp178_, _ ("Checklist"));
#line 236 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp179_ = _data57_->checklist_entry;
#line 236 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp180_ = gtk_widget_get_style_context ((GtkWidget*) _tmp179_);
#line 236 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp180_, GTK_STYLE_CLASS_FLAT);
#line 237 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp181_ = _data57_->checklist_entry;
#line 237 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp182_ = gtk_widget_get_style_context ((GtkWidget*) _tmp181_);
#line 237 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp182_, GTK_STYLE_CLASS_VIEW);
#line 238 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp183_ = _data57_->checklist_entry;
#line 238 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp184_ = gtk_widget_get_style_context ((GtkWidget*) _tmp183_);
#line 238 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp184_, GRANITE_STYLE_CLASS_H3_LABEL);
#line 239 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp185_ = _data57_->checklist_entry;
#line 239 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp186_ = gtk_widget_get_style_context ((GtkWidget*) _tmp185_);
#line 239 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp186_, "planner-entry");
#line 241 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp187_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 241 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp187_);
#line 241 "/run/build/planner/src/Widgets/TaskRow.vala"
	checklist_box = _tmp187_;
#line 242 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp188_ = checklist_box;
#line 242 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp189_ = checklist_button;
#line 242 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp188_, (GtkWidget*) _tmp189_, FALSE, FALSE, (guint) 0);
#line 243 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp190_ = checklist_box;
#line 243 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp191_ = _data57_->checklist_entry;
#line 243 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp190_, (GtkWidget*) _tmp191_, TRUE, TRUE, (guint) 6);
#line 245 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp192_ = (GtkGrid*) gtk_grid_new ();
#line 245 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp192_);
#line 245 "/run/build/planner/src/Widgets/TaskRow.vala"
	checklist_grid = _tmp192_;
#line 246 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp193_ = checklist_grid;
#line 246 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp193_, 36);
#line 247 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp194_ = checklist_grid;
#line 247 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp194_, 12);
#line 248 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp195_ = checklist_grid;
#line 248 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp195_, GTK_ORIENTATION_VERTICAL);
#line 249 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp196_ = checklist_grid;
#line 249 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp197_ = self->priv->checklist;
#line 249 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_container_add ((GtkContainer*) _tmp196_, (GtkWidget*) _tmp197_);
#line 250 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp198_ = checklist_grid;
#line 250 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp199_ = checklist_box;
#line 250 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_container_add ((GtkContainer*) _tmp198_, (GtkWidget*) _tmp199_);
#line 252 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp200_ = (GtkFlowBox*) gtk_flow_box_new ();
#line 252 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp200_);
#line 252 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->labels_flowbox);
#line 252 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->labels_flowbox = _tmp200_;
#line 253 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp201_ = self->priv->labels_flowbox;
#line 253 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_flow_box_set_selection_mode (_tmp201_, GTK_SELECTION_NONE);
#line 254 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp202_ = self->priv->labels_flowbox;
#line 254 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp202_, 6);
#line 255 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp203_ = self->priv->labels_flowbox;
#line 255 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_set ((GtkWidget*) _tmp203_, "height-request", 38, NULL);
#line 256 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp204_ = self->priv->labels_flowbox;
#line 256 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_set ((GtkWidget*) _tmp204_, "expand", TRUE, NULL);
#line 258 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp205_ = (GtkRevealer*) gtk_revealer_new ();
#line 258 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp205_);
#line 258 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->labels_flowbox_revealer);
#line 258 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->labels_flowbox_revealer = _tmp205_;
#line 259 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp206_ = self->priv->labels_flowbox_revealer;
#line 259 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp206_, 22);
#line 260 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp207_ = self->priv->labels_flowbox_revealer;
#line 260 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp207_, 6);
#line 261 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp208_ = self->priv->labels_flowbox_revealer;
#line 261 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp209_ = self->priv->labels_flowbox;
#line 261 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_container_add ((GtkContainer*) _tmp208_, (GtkWidget*) _tmp209_);
#line 262 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp210_ = self->priv->labels_flowbox_revealer;
#line 262 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_revealer_set_reveal_child (_tmp210_, FALSE);
#line 264 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_update_labels (self);
#line 266 "/run/build/planner/src/Widgets/TaskRow.vala"
	has_reminder = FALSE;
#line 267 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp211_ = self->priv->_task;
#line 267 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp212_ = _tmp211_->has_reminder;
#line 267 "/run/build/planner/src/Widgets/TaskRow.vala"
	if (_tmp212_ == 0) {
#line 6213 "TaskRow.c"
		ObjectsTask* _tmp213_;
		GDateTime* _tmp214_;
		GDateTime* _tmp215_;
		gchar* _tmp216_;
#line 268 "/run/build/planner/src/Widgets/TaskRow.vala"
		has_reminder = FALSE;
#line 269 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp213_ = self->priv->_task;
#line 269 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp214_ = g_date_time_new_now_local ();
#line 269 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp215_ = _tmp214_;
#line 269 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp216_ = g_date_time_to_string (_tmp215_);
#line 269 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_free0 (_tmp213_->reminder_time);
#line 269 "/run/build/planner/src/Widgets/TaskRow.vala"
		_tmp213_->reminder_time = _tmp216_;
#line 269 "/run/build/planner/src/Widgets/TaskRow.vala"
		_g_date_time_unref0 (_tmp215_);
#line 6234 "TaskRow.c"
	} else {
#line 271 "/run/build/planner/src/Widgets/TaskRow.vala"
		has_reminder = TRUE;
#line 6238 "TaskRow.c"
	}
#line 274 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp217_ = widgets_when_button_new ();
#line 274 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp217_);
#line 274 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->when_button);
#line 274 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->when_button = _tmp217_;
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp218_ = self->priv->when_button;
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp219_ = self->priv->_task;
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp220_ = _tmp219_->when_date_utc;
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp221_ = g_time_zone_new_local ();
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp222_ = _tmp221_;
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp223_ = g_date_time_new_from_iso8601 (_tmp220_, _tmp222_);
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp224_ = _tmp223_;
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp225_ = has_reminder;
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp226_ = self->priv->_task;
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp227_ = _tmp226_->reminder_time;
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp228_ = g_time_zone_new_local ();
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp229_ = _tmp228_;
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp230_ = g_date_time_new_from_iso8601 (_tmp227_, _tmp229_);
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp231_ = _tmp230_;
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_when_button_set_date (_tmp218_, _tmp224_, _tmp225_, _tmp231_);
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_date_time_unref0 (_tmp231_);
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_time_zone_unref0 (_tmp229_);
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_date_time_unref0 (_tmp224_);
#line 275 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_time_zone_unref0 (_tmp222_);
#line 281 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp232_ = widgets_label_button_new ();
#line 281 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp232_);
#line 281 "/run/build/planner/src/Widgets/TaskRow.vala"
	labels = _tmp232_;
#line 283 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp233_ = widgets_move_button_new ();
#line 283 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp233_);
#line 283 "/run/build/planner/src/Widgets/TaskRow.vala"
	move_button = _tmp233_;
#line 284 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp234_ = move_button;
#line 284 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp234_, _ ("Move task"));
#line 286 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp235_ = (GtkButton*) gtk_button_new_from_icon_name ("user-trash-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 286 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp235_);
#line 286 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->remove_button);
#line 286 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->remove_button = _tmp235_;
#line 287 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp236_ = self->priv->remove_button;
#line 287 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp236_, _ ("Delete task"));
#line 288 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp237_ = self->priv->remove_button;
#line 288 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp238_ = gtk_widget_get_style_context ((GtkWidget*) _tmp237_);
#line 288 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp238_, GTK_STYLE_CLASS_FLAT);
#line 289 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp239_ = self->priv->remove_button;
#line 289 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp239_, GTK_ALIGN_CENTER);
#line 291 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp240_ = (GtkToggleButton*) gtk_toggle_button_new ();
#line 291 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp240_);
#line 291 "/run/build/planner/src/Widgets/TaskRow.vala"
	_data57_->menu_button = _tmp240_;
#line 292 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp241_ = _data57_->menu_button;
#line 292 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp241_, FALSE);
#line 293 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp242_ = _data57_->menu_button;
#line 293 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp243_ = (GtkImage*) gtk_image_new_from_icon_name ("view-more-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 293 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp243_);
#line 293 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp244_ = _tmp243_;
#line 293 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_container_add ((GtkContainer*) _tmp242_, (GtkWidget*) _tmp244_);
#line 293 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (_tmp244_);
#line 294 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp245_ = _data57_->menu_button;
#line 294 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp246_ = gtk_widget_get_style_context ((GtkWidget*) _tmp245_);
#line 294 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp246_, GTK_STYLE_CLASS_FLAT);
#line 295 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp247_ = _data57_->menu_button;
#line 295 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp248_ = gtk_widget_get_style_context ((GtkWidget*) _tmp247_);
#line 295 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp248_, "settings-button");
#line 296 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp249_ = _data57_->menu_button;
#line 296 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp250_ = gtk_widget_get_style_context ((GtkWidget*) _tmp249_);
#line 296 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp250_, "menu-button");
#line 298 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp251_ = _data57_->menu_button;
#line 298 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp252_ = widgets_popovers_task_menu_new ((GtkWidget*) _tmp251_);
#line 298 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp252_);
#line 298 "/run/build/planner/src/Widgets/TaskRow.vala"
	_data57_->menu_popover = _tmp252_;
#line 300 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp253_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 300 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp253_);
#line 300 "/run/build/planner/src/Widgets/TaskRow.vala"
	action_box = _tmp253_;
#line 301 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp254_ = action_box;
#line 301 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp254_, 6);
#line 302 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp255_ = action_box;
#line 302 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp255_, 3);
#line 303 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp256_ = action_box;
#line 303 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp256_, 6);
#line 304 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp257_ = action_box;
#line 304 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp257_, 28);
#line 305 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp258_ = action_box;
#line 305 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp258_, GTK_ALIGN_CENTER);
#line 306 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp259_ = action_box;
#line 306 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp260_ = self->priv->when_button;
#line 306 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp259_, (GtkWidget*) _tmp260_, FALSE, FALSE, (guint) 0);
#line 307 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp261_ = action_box;
#line 307 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp262_ = labels;
#line 307 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp261_, (GtkWidget*) _tmp262_, FALSE, FALSE, (guint) 0);
#line 308 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp263_ = action_box;
#line 308 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp264_ = _data57_->menu_button;
#line 308 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_end (_tmp263_, (GtkWidget*) _tmp264_, FALSE, FALSE, (guint) 0);
#line 309 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp265_ = action_box;
#line 309 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp266_ = self->priv->remove_button;
#line 309 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_end (_tmp265_, (GtkWidget*) _tmp266_, FALSE, FALSE, (guint) 0);
#line 310 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp267_ = action_box;
#line 310 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp268_ = move_button;
#line 310 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_end (_tmp267_, (GtkWidget*) _tmp268_, FALSE, FALSE, (guint) 0);
#line 312 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp269_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 312 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp269_);
#line 312 "/run/build/planner/src/Widgets/TaskRow.vala"
	bottom_box = _tmp269_;
#line 313 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp270_ = bottom_box;
#line 313 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp271_ = note_eventbox;
#line 313 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp270_, (GtkWidget*) _tmp271_, TRUE, TRUE, (guint) 0);
#line 314 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp272_ = bottom_box;
#line 314 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp273_ = checklist_grid;
#line 314 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp272_, (GtkWidget*) _tmp273_, TRUE, TRUE, (guint) 0);
#line 315 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp274_ = bottom_box;
#line 315 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp275_ = self->priv->labels_flowbox_revealer;
#line 315 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp274_, (GtkWidget*) _tmp275_, TRUE, TRUE, (guint) 0);
#line 316 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp276_ = bottom_box;
#line 316 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp277_ = action_box;
#line 316 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_box_pack_start (_tmp276_, (GtkWidget*) _tmp277_, TRUE, TRUE, (guint) 0);
#line 318 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp278_ = (GtkRevealer*) gtk_revealer_new ();
#line 318 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp278_);
#line 318 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->bottom_box_revealer);
#line 318 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->bottom_box_revealer = _tmp278_;
#line 319 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp279_ = self->bottom_box_revealer;
#line 319 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp280_ = bottom_box;
#line 319 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_container_add ((GtkContainer*) _tmp279_, (GtkWidget*) _tmp280_);
#line 320 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp281_ = self->bottom_box_revealer;
#line 320 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_revealer_set_transition_duration (_tmp281_, (guint) 300);
#line 321 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp282_ = self->bottom_box_revealer;
#line 321 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_revealer_set_reveal_child (_tmp282_, FALSE);
#line 323 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp283_ = (GtkGrid*) gtk_grid_new ();
#line 323 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp283_);
#line 323 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->main_grid);
#line 323 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv->main_grid = _tmp283_;
#line 324 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp284_ = self->priv->main_grid;
#line 324 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp284_, 3);
#line 325 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp285_ = self->priv->main_grid;
#line 325 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp285_, 5);
#line 326 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp286_ = self->priv->main_grid;
#line 326 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_set ((GtkWidget*) _tmp286_, "expand", TRUE, NULL);
#line 327 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp287_ = self->priv->main_grid;
#line 327 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp288_ = gtk_widget_get_style_context ((GtkWidget*) _tmp287_);
#line 327 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_style_context_add_class (_tmp288_, "task");
#line 328 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp289_ = self->priv->main_grid;
#line 328 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp289_, GTK_ORIENTATION_VERTICAL);
#line 330 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp290_ = self->priv->main_grid;
#line 330 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp291_ = self->priv->top_box;
#line 330 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_container_add ((GtkContainer*) _tmp290_, (GtkWidget*) _tmp291_);
#line 331 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp292_ = self->priv->main_grid;
#line 331 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp293_ = self->bottom_box_revealer;
#line 331 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_container_add ((GtkContainer*) _tmp292_, (GtkWidget*) _tmp293_);
#line 333 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp294_ = (GtkOverlay*) gtk_overlay_new ();
#line 333 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp294_);
#line 333 "/run/build/planner/src/Widgets/TaskRow.vala"
	main_overlay = _tmp294_;
#line 334 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp295_ = main_overlay;
#line 334 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp296_ = self->priv->close_revealer;
#line 334 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_overlay_add_overlay (_tmp295_, (GtkWidget*) _tmp296_);
#line 335 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp297_ = main_overlay;
#line 335 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp298_ = self->priv->main_grid;
#line 335 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_container_add ((GtkContainer*) _tmp297_, (GtkWidget*) _tmp298_);
#line 337 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp299_ = (GtkEventBox*) gtk_event_box_new ();
#line 337 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_ref_sink (_tmp299_);
#line 337 "/run/build/planner/src/Widgets/TaskRow.vala"
	main_eventbox = _tmp299_;
#line 338 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp300_ = main_eventbox;
#line 338 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp300_, 6);
#line 339 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp301_ = main_eventbox;
#line 339 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp301_, 9);
#line 340 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp302_ = main_eventbox;
#line 340 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp302_, 3);
#line 341 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp303_ = main_eventbox;
#line 341 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_widget_add_events ((GtkWidget*) _tmp303_, (gint) (GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK));
#line 342 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp304_ = main_eventbox;
#line 342 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp305_ = main_overlay;
#line 342 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_container_add ((GtkContainer*) _tmp304_, (GtkWidget*) _tmp305_);
#line 344 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp306_ = main_eventbox;
#line 344 "/run/build/planner/src/Widgets/TaskRow.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp306_);
#line 345 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_check_task_completed (self);
#line 349 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp307_ = _data57_->menu_button;
#line 349 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_data (_tmp307_, "toggled", (GCallback) __widgets_task_row___lambda69__gtk_toggle_button_toggled, block57_data_ref (_data57_), (GClosureNotify) block57_data_unref, 0);
#line 355 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp308_ = _data57_->menu_popover;
#line 355 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_data ((GtkPopover*) _tmp308_, "closed", (GCallback) __widgets_task_row___lambda70__gtk_popover_closed, block57_data_ref (_data57_), (GClosureNotify) block57_data_unref, 0);
#line 359 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp309_ = _data57_->menu_popover;
#line 359 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object (_tmp309_, "on-selected-menu", (GCallback) __widgets_task_row___lambda71__widgets_popovers_task_menu_on_selected_menu, self, 0);
#line 376 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp310_ = move_button;
#line 376 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_data (_tmp310_, "on-selected-project", (GCallback) __widgets_task_row___lambda75__widgets_move_button_on_selected_project, block57_data_ref (_data57_), (GClosureNotify) block57_data_unref, 0);
#line 404 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp311_ = self->priv->name_entry;
#line 404 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp311_, "focus-in-event", (GCallback) __widgets_task_row___lambda76__gtk_widget_focus_in_event, self, 0);
#line 409 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp312_ = self->priv->name_entry;
#line 409 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp312_, "focus-out-event", (GCallback) __widgets_task_row___lambda77__gtk_widget_focus_out_event, self, 0);
#line 414 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp313_ = self->priv->name_entry;
#line 414 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object ((GtkEditable*) _tmp313_, "changed", (GCallback) __widgets_task_row___lambda78__gtk_editable_changed, self, 0);
#line 418 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp314_ = self->priv->name_entry;
#line 418 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp314_, "key-release-event", (GCallback) __widgets_task_row___lambda79__gtk_widget_key_release_event, self, 0);
#line 428 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp315_ = self->priv->name_entry;
#line 428 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object (_tmp315_, "activate", (GCallback) __widgets_task_row___lambda80__gtk_entry_activate, self, 0);
#line 433 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp316_ = self->priv->name_entry;
#line 433 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object (_tmp316_, "icon-press", (GCallback) __widgets_task_row___lambda81__gtk_entry_icon_press, self, 0);
#line 439 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp317_ = self->priv->name_eventbox;
#line 439 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp317_, "button-press-event", (GCallback) __widgets_task_row___lambda82__gtk_widget_button_press_event, self, 0);
#line 444 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp318_ = self->priv->close_button;
#line 444 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object (_tmp318_, "clicked", (GCallback) __widgets_task_row___lambda83__gtk_button_clicked, self, 0);
#line 452 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp319_ = note_eventbox;
#line 452 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp319_, "button-press-event", (GCallback) __widgets_task_row___lambda84__gtk_widget_button_press_event, self, 0);
#line 461 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp320_ = self->priv->checked_button;
#line 461 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object ((GtkToggleButton*) _tmp320_, "toggled", (GCallback) __widgets_task_row___lambda86__gtk_toggle_button_toggled, self, 0);
#line 466 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp321_ = self->priv->name_eventbox;
#line 466 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp321_, "enter-notify-event", (GCallback) __widgets_task_row___lambda87__gtk_widget_enter_notify_event, self, 0);
#line 475 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp322_ = self->priv->name_eventbox;
#line 475 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp322_, "leave-notify-event", (GCallback) __widgets_task_row___lambda88__gtk_widget_leave_notify_event, self, 0);
#line 488 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp323_ = self->priv->remove_button;
#line 488 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object (_tmp323_, "clicked", (GCallback) __widgets_task_row___lambda89__gtk_button_clicked, self, 0);
#line 532 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp324_ = _data57_->checklist_entry;
#line 532 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_data (_tmp324_, "activate", (GCallback) __widgets_task_row___lambda91__gtk_entry_activate, block57_data_ref (_data57_), (GClosureNotify) block57_data_unref, 0);
#line 542 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp325_ = _data57_->checklist_entry;
#line 542 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_data ((GtkEditable*) _tmp325_, "changed", (GCallback) __widgets_task_row___lambda92__gtk_editable_changed, block57_data_ref (_data57_), (GClosureNotify) block57_data_unref, 0);
#line 546 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp326_ = _data57_->checklist_entry;
#line 546 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_data ((GtkWidget*) _tmp326_, "focus-out-event", (GCallback) __widgets_task_row___lambda93__gtk_widget_focus_out_event, block57_data_ref (_data57_), (GClosureNotify) block57_data_unref, 0);
#line 558 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp327_ = self->priv->note_view;
#line 558 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp327_, "key-release-event", (GCallback) __widgets_task_row___lambda94__gtk_widget_key_release_event, self, 0);
#line 567 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp328_ = main_eventbox;
#line 567 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp328_, "enter-notify-event", (GCallback) __widgets_task_row___lambda95__gtk_widget_enter_notify_event, self, 0);
#line 576 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp329_ = main_eventbox;
#line 576 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp329_, "leave-notify-event", (GCallback) __widgets_task_row___lambda96__gtk_widget_leave_notify_event, self, 0);
#line 587 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp330_ = labels;
#line 587 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object (_tmp330_, "on-selected-label", (GCallback) __widgets_task_row___lambda97__widgets_label_button_on_selected_label, self, 0);
#line 597 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp331_ = self->priv->labels_flowbox;
#line 597 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object ((GtkContainer*) _tmp331_, "remove", (GCallback) __widgets_task_row___lambda98__gtk_container_remove, self, 0);
#line 601 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp332_ = self->priv->note_view;
#line 601 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp332_, "focus-out-event", (GCallback) __widgets_task_row___lambda99__gtk_widget_focus_out_event, self, 0);
#line 610 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp333_ = self->priv->note_view;
#line 610 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp333_, "focus-in-event", (GCallback) __widgets_task_row___lambda100__gtk_widget_focus_in_event, self, 0);
#line 617 "/run/build/planner/src/Widgets/TaskRow.vala"
	_tmp334_ = application_signals;
#line 617 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_signal_connect_object (_tmp334_, "go-task-page", (GCallback) __widgets_task_row___lambda101__services_signals_go_task_page, self, 0);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (main_eventbox);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (main_overlay);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (bottom_box);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (action_box);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (move_button);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (labels);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (checklist_grid);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (checklist_box);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (checklist_button);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (note_eventbox);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (reminder_preview_icon);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (checklist_preview_icon);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	block57_data_unref (_data57_);
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	_data57_ = NULL;
#line 74 "/run/build/planner/src/Widgets/TaskRow.vala"
	return obj;
#line 6716 "TaskRow.c"
}


static void
widgets_task_row_class_init (WidgetsTaskRowClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_type_class_add_private (klass, sizeof (WidgetsTaskRowPrivate));
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_task_row_get_property;
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_task_row_set_property;
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_task_row_constructor;
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_task_row_finalize;
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_TASK_ROW_TASK_PROPERTY, widgets_task_row_properties[WIDGETS_TASK_ROW_TASK_PROPERTY] = objects_param_spec_task ("task", "task", "task", OBJECTS_TYPE_TASK, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_signals[WIDGETS_TASK_ROW_ON_SIGNAL_UPDATE_SIGNAL] = g_signal_new ("on-signal-update", WIDGETS_TYPE_TASK_ROW, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECTS_TASK, G_TYPE_NONE, 1, OBJECTS_TYPE_TASK);
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	widgets_task_row_signals[WIDGETS_TASK_ROW_ON_SIGNAL_REMOVE_SIGNAL] = g_signal_new ("on-signal-remove", WIDGETS_TYPE_TASK_ROW, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECTS_TASK, G_TYPE_NONE, 1, OBJECTS_TYPE_TASK);
#line 6741 "TaskRow.c"
}


static void
widgets_task_row_instance_init (WidgetsTaskRow * self)
{
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	self->priv = WIDGETS_TASK_ROW_GET_PRIVATE (self);
#line 6750 "TaskRow.c"
}


static void
widgets_task_row_finalize (GObject * obj)
{
	WidgetsTaskRow * self;
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_TASK_ROW, WidgetsTaskRow);
#line 23 "/run/build/planner/src/Widgets/TaskRow.vala"
	_objects_task_unref0 (self->priv->_task);
#line 25 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->labels_flowbox);
#line 26 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->checked_button);
#line 27 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->name_label);
#line 28 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->name_entry);
#line 29 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->close_button);
#line 30 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->remove_button);
#line 32 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->note_preview_icon);
#line 33 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->label_preview_icon);
#line 34 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->checklist_preview_label);
#line 35 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->checklist_preview_box);
#line 36 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->when_preview_label);
#line 38 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->previews_box);
#line 39 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->project_preview_label);
#line 40 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->reminder_preview_box);
#line 41 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->reminder_preview_label);
#line 42 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->project_preview_box);
#line 44 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->labels_flowbox_revealer);
#line 46 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->note_view);
#line 47 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->note_view_placeholder_label);
#line 48 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->bottom_box_revealer);
#line 49 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->main_grid);
#line 50 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->name_eventbox);
#line 51 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->checklist);
#line 53 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->top_box);
#line 54 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->remove_revealer);
#line 55 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->close_revealer);
#line 57 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->project_box);
#line 59 "/run/build/planner/src/Widgets/TaskRow.vala"
	_g_object_unref0 (self->priv->when_button);
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	G_OBJECT_CLASS (widgets_task_row_parent_class)->finalize (obj);
#line 6820 "TaskRow.c"
}


GType
widgets_task_row_get_type (void)
{
	static volatile gsize widgets_task_row_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_task_row_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsTaskRowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_task_row_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsTaskRow), 0, (GInstanceInitFunc) widgets_task_row_instance_init, NULL };
		GType widgets_task_row_type_id;
		widgets_task_row_type_id = g_type_register_static (gtk_list_box_row_get_type (), "WidgetsTaskRow", &g_define_type_info, 0);
		g_once_init_leave (&widgets_task_row_type_id__volatile, widgets_task_row_type_id);
	}
	return widgets_task_row_type_id__volatile;
}


static void
_vala_widgets_task_row_get_property (GObject * object,
                                     guint property_id,
                                     GValue * value,
                                     GParamSpec * pspec)
{
	WidgetsTaskRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_TASK_ROW, WidgetsTaskRow);
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
		case WIDGETS_TASK_ROW_TASK_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
		objects_value_set_task (value, widgets_task_row_get_task (self));
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
		break;
#line 6854 "TaskRow.c"
		default:
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
		break;
#line 6860 "TaskRow.c"
	}
}


static void
_vala_widgets_task_row_set_property (GObject * object,
                                     guint property_id,
                                     const GValue * value,
                                     GParamSpec * pspec)
{
	WidgetsTaskRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_TASK_ROW, WidgetsTaskRow);
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
		case WIDGETS_TASK_ROW_TASK_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
		widgets_task_row_set_task (self, objects_value_get_task (value));
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
		break;
#line 6881 "TaskRow.c"
		default:
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/TaskRow.vala"
		break;
#line 6887 "TaskRow.c"
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



