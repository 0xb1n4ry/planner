/* utils.c generated by valac 0.40.11, the Vala compiler
 * generated from utils.vala, do not modify */

/*
 * Copyright (C) 2011 Collabora Ltd.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Raul Gutierrez Segales <raul.gutierrez.segales@collabora.co.uk>
 *       Travis Reitter <travis.reitter@collabora.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>


#define FOLKS_TYPE_UTILS (folks_utils_get_type ())
#define FOLKS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_UTILS, FolksUtils))
#define FOLKS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_UTILS, FolksUtilsClass))
#define FOLKS_IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_UTILS))
#define FOLKS_IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_UTILS))
#define FOLKS_UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_UTILS, FolksUtilsClass))

typedef struct _FolksUtils FolksUtils;
typedef struct _FolksUtilsClass FolksUtilsClass;
typedef struct _FolksUtilsPrivate FolksUtilsPrivate;
enum  {
	FOLKS_UTILS_0_PROPERTY,
	FOLKS_UTILS_NUM_PROPERTIES
};
static GParamSpec* folks_utils_properties[FOLKS_UTILS_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define FOLKS_TYPE_ABSTRACT_FIELD_DETAILS (folks_abstract_field_details_get_type ())
#define FOLKS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails))
#define FOLKS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))

typedef struct _FolksAbstractFieldDetails FolksAbstractFieldDetails;
typedef struct _FolksAbstractFieldDetailsClass FolksAbstractFieldDetailsClass;

struct _FolksUtils {
	GObject parent_instance;
	FolksUtilsPrivate * priv;
};

struct _FolksUtilsClass {
	GObjectClass parent_class;
};


static gpointer folks_utils_parent_class = NULL;

GType folks_utils_get_type (void) G_GNUC_CONST;
gboolean _folks_utils_str_equal_safe (const gchar* a,
                                      const gchar* b);
FolksUtils* folks_utils_new (void) G_GNUC_DEPRECATED;
FolksUtils* folks_utils_construct (GType object_type) G_GNUC_DEPRECATED;
gboolean folks_utils_multi_map_str_str_equal (GeeMultiMap* a,
                                              GeeMultiMap* b);
GType folks_abstract_field_details_get_type (void) G_GNUC_CONST;
gboolean folks_utils_multi_map_str_afd_equal (GeeMultiMap* a,
                                              GeeMultiMap* b);
gboolean folks_utils_set_afd_equal (GeeSet* a,
                                    GeeSet* b);
gboolean folks_utils_set_string_afd_equal (GeeSet* a,
                                           GeeSet* b);
gboolean folks_abstract_field_details_parameters_equal (FolksAbstractFieldDetails* self,
                                                        FolksAbstractFieldDetails* that);
gconstpointer folks_abstract_field_details_get_value (FolksAbstractFieldDetails* self);


gboolean
_folks_utils_str_equal_safe (const gchar* a,
                             const gchar* b)
{
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
#line 39 "/run/build/folks/folks/utils.vala"
	g_return_val_if_fail (a != NULL, FALSE);
#line 39 "/run/build/folks/folks/utils.vala"
	g_return_val_if_fail (b != NULL, FALSE);
#line 41 "/run/build/folks/folks/utils.vala"
	if (g_strcmp0 (a, "") != 0) {
#line 41 "/run/build/folks/folks/utils.vala"
		_tmp1_ = g_strcmp0 (b, "") != 0;
#line 108 "utils.c"
	} else {
#line 41 "/run/build/folks/folks/utils.vala"
		_tmp1_ = FALSE;
#line 112 "utils.c"
	}
#line 41 "/run/build/folks/folks/utils.vala"
	if (_tmp1_) {
#line 116 "utils.c"
		gchar* _tmp2_;
		gchar* _tmp3_;
		gchar* _tmp4_;
		gchar* _tmp5_;
#line 41 "/run/build/folks/folks/utils.vala"
		_tmp2_ = g_utf8_strdown (a, (gssize) -1);
#line 41 "/run/build/folks/folks/utils.vala"
		_tmp3_ = _tmp2_;
#line 41 "/run/build/folks/folks/utils.vala"
		_tmp4_ = g_utf8_strdown (b, (gssize) -1);
#line 41 "/run/build/folks/folks/utils.vala"
		_tmp5_ = _tmp4_;
#line 41 "/run/build/folks/folks/utils.vala"
		_tmp0_ = g_strcmp0 (_tmp3_, _tmp5_) == 0;
#line 41 "/run/build/folks/folks/utils.vala"
		_g_free0 (_tmp5_);
#line 41 "/run/build/folks/folks/utils.vala"
		_g_free0 (_tmp3_);
#line 135 "utils.c"
	} else {
#line 41 "/run/build/folks/folks/utils.vala"
		_tmp0_ = FALSE;
#line 139 "utils.c"
	}
#line 41 "/run/build/folks/folks/utils.vala"
	result = _tmp0_;
#line 41 "/run/build/folks/folks/utils.vala"
	return result;
#line 145 "utils.c"
}


/**
   * Create a new utilities object.
   *
   * This method is useless and should never be used. It will be removed in a
   * future version in favour of making the Utils class into a nested namespace.
   *
   * @return a new utilities object
   * @since 0.6.0
   */
FolksUtils*
folks_utils_construct (GType object_type)
{
	FolksUtils * self = NULL;
#line 57 "/run/build/folks/folks/utils.vala"
	self = (FolksUtils*) g_object_new (object_type, NULL);
#line 55 "/run/build/folks/folks/utils.vala"
	return self;
#line 166 "utils.c"
}


FolksUtils*
folks_utils_new (void)
{
#line 55 "/run/build/folks/folks/utils.vala"
	return folks_utils_construct (FOLKS_TYPE_UTILS);
#line 175 "utils.c"
}


/**
   * Check whether two multi-maps of strings to strings are equal. This performs
   * a deep check for equality, checking whether both maps are of the same size,
   * and that each key maps to the same set of values in both maps.
   *
   * @param a a multi-map to compare
   * @param b another multi-map to compare
   * @return ``true`` if the multi-maps are equal, ``false`` otherwise
   *
   * @since 0.6.0
   */
gboolean
folks_utils_multi_map_str_str_equal (GeeMultiMap* a,
                                     GeeMultiMap* b)
{
	gboolean result = FALSE;
	gint a_size = 0;
	gint _tmp0_;
	gint _tmp1_;
	gint b_size = 0;
	gint _tmp2_;
	gint _tmp3_;
	gboolean _tmp4_ = FALSE;
	gint _tmp5_;
#line 71 "/run/build/folks/folks/utils.vala"
	g_return_val_if_fail (a != NULL, FALSE);
#line 71 "/run/build/folks/folks/utils.vala"
	g_return_val_if_fail (b != NULL, FALSE);
#line 75 "/run/build/folks/folks/utils.vala"
	if (a == b) {
#line 76 "/run/build/folks/folks/utils.vala"
		result = TRUE;
#line 76 "/run/build/folks/folks/utils.vala"
		return result;
#line 213 "utils.c"
	}
#line 78 "/run/build/folks/folks/utils.vala"
	_tmp0_ = gee_multi_map_get_size (a);
#line 78 "/run/build/folks/folks/utils.vala"
	_tmp1_ = _tmp0_;
#line 78 "/run/build/folks/folks/utils.vala"
	a_size = _tmp1_;
#line 79 "/run/build/folks/folks/utils.vala"
	_tmp2_ = gee_multi_map_get_size (b);
#line 79 "/run/build/folks/folks/utils.vala"
	_tmp3_ = _tmp2_;
#line 79 "/run/build/folks/folks/utils.vala"
	b_size = _tmp3_;
#line 81 "/run/build/folks/folks/utils.vala"
	_tmp5_ = a_size;
#line 81 "/run/build/folks/folks/utils.vala"
	if (_tmp5_ == 0) {
#line 231 "utils.c"
		gint _tmp6_;
#line 81 "/run/build/folks/folks/utils.vala"
		_tmp6_ = b_size;
#line 81 "/run/build/folks/folks/utils.vala"
		_tmp4_ = _tmp6_ == 0;
#line 237 "utils.c"
	} else {
#line 81 "/run/build/folks/folks/utils.vala"
		_tmp4_ = FALSE;
#line 241 "utils.c"
	}
#line 81 "/run/build/folks/folks/utils.vala"
	if (_tmp4_) {
#line 84 "/run/build/folks/folks/utils.vala"
		result = TRUE;
#line 84 "/run/build/folks/folks/utils.vala"
		return result;
#line 249 "utils.c"
	} else {
		gint _tmp7_;
		gint _tmp8_;
#line 86 "/run/build/folks/folks/utils.vala"
		_tmp7_ = a_size;
#line 86 "/run/build/folks/folks/utils.vala"
		_tmp8_ = b_size;
#line 86 "/run/build/folks/folks/utils.vala"
		if (_tmp7_ == _tmp8_) {
#line 259 "utils.c"
			{
				GeeIterator* _key_it = NULL;
				GeeSet* _tmp9_;
				GeeSet* _tmp10_;
				GeeIterator* _tmp11_;
				GeeIterator* _tmp12_;
#line 88 "/run/build/folks/folks/utils.vala"
				_tmp9_ = gee_multi_map_get_keys (a);
#line 88 "/run/build/folks/folks/utils.vala"
				_tmp10_ = _tmp9_;
#line 88 "/run/build/folks/folks/utils.vala"
				_tmp11_ = gee_iterable_iterator ((GeeIterable*) _tmp10_);
#line 88 "/run/build/folks/folks/utils.vala"
				_tmp12_ = _tmp11_;
#line 88 "/run/build/folks/folks/utils.vala"
				_g_object_unref0 (_tmp10_);
#line 88 "/run/build/folks/folks/utils.vala"
				_key_it = _tmp12_;
#line 88 "/run/build/folks/folks/utils.vala"
				while (TRUE) {
#line 280 "utils.c"
					GeeIterator* _tmp13_;
					gchar* key = NULL;
					GeeIterator* _tmp14_;
					gpointer _tmp15_;
					const gchar* _tmp16_;
#line 88 "/run/build/folks/folks/utils.vala"
					_tmp13_ = _key_it;
#line 88 "/run/build/folks/folks/utils.vala"
					if (!gee_iterator_next (_tmp13_)) {
#line 88 "/run/build/folks/folks/utils.vala"
						break;
#line 292 "utils.c"
					}
#line 88 "/run/build/folks/folks/utils.vala"
					_tmp14_ = _key_it;
#line 88 "/run/build/folks/folks/utils.vala"
					_tmp15_ = gee_iterator_get (_tmp14_);
#line 88 "/run/build/folks/folks/utils.vala"
					key = (gchar*) _tmp15_;
#line 90 "/run/build/folks/folks/utils.vala"
					_tmp16_ = key;
#line 90 "/run/build/folks/folks/utils.vala"
					if (gee_multi_map_contains (b, _tmp16_)) {
#line 304 "utils.c"
						GeeCollection* a_values = NULL;
						const gchar* _tmp17_;
						GeeCollection* _tmp18_;
						GeeCollection* b_values = NULL;
						const gchar* _tmp19_;
						GeeCollection* _tmp20_;
						GeeCollection* _tmp21_;
						gint _tmp22_;
						gint _tmp23_;
						GeeCollection* _tmp24_;
						gint _tmp25_;
						gint _tmp26_;
#line 92 "/run/build/folks/folks/utils.vala"
						_tmp17_ = key;
#line 92 "/run/build/folks/folks/utils.vala"
						_tmp18_ = gee_multi_map_get (a, _tmp17_);
#line 92 "/run/build/folks/folks/utils.vala"
						a_values = _tmp18_;
#line 93 "/run/build/folks/folks/utils.vala"
						_tmp19_ = key;
#line 93 "/run/build/folks/folks/utils.vala"
						_tmp20_ = gee_multi_map_get (b, _tmp19_);
#line 93 "/run/build/folks/folks/utils.vala"
						b_values = _tmp20_;
#line 94 "/run/build/folks/folks/utils.vala"
						_tmp21_ = a_values;
#line 94 "/run/build/folks/folks/utils.vala"
						_tmp22_ = gee_collection_get_size (_tmp21_);
#line 94 "/run/build/folks/folks/utils.vala"
						_tmp23_ = _tmp22_;
#line 94 "/run/build/folks/folks/utils.vala"
						_tmp24_ = b_values;
#line 94 "/run/build/folks/folks/utils.vala"
						_tmp25_ = gee_collection_get_size (_tmp24_);
#line 94 "/run/build/folks/folks/utils.vala"
						_tmp26_ = _tmp25_;
#line 94 "/run/build/folks/folks/utils.vala"
						if (_tmp23_ != _tmp26_) {
#line 95 "/run/build/folks/folks/utils.vala"
							result = FALSE;
#line 95 "/run/build/folks/folks/utils.vala"
							_g_object_unref0 (b_values);
#line 95 "/run/build/folks/folks/utils.vala"
							_g_object_unref0 (a_values);
#line 95 "/run/build/folks/folks/utils.vala"
							_g_free0 (key);
#line 95 "/run/build/folks/folks/utils.vala"
							_g_object_unref0 (_key_it);
#line 95 "/run/build/folks/folks/utils.vala"
							return result;
#line 355 "utils.c"
						}
						{
							GeeIterator* _a_value_it = NULL;
							GeeCollection* _tmp27_;
							GeeIterator* _tmp28_;
#line 97 "/run/build/folks/folks/utils.vala"
							_tmp27_ = a_values;
#line 97 "/run/build/folks/folks/utils.vala"
							_tmp28_ = gee_iterable_iterator ((GeeIterable*) _tmp27_);
#line 97 "/run/build/folks/folks/utils.vala"
							_a_value_it = _tmp28_;
#line 97 "/run/build/folks/folks/utils.vala"
							while (TRUE) {
#line 369 "utils.c"
								GeeIterator* _tmp29_;
								gchar* a_value = NULL;
								GeeIterator* _tmp30_;
								gpointer _tmp31_;
								GeeCollection* _tmp32_;
								const gchar* _tmp33_;
#line 97 "/run/build/folks/folks/utils.vala"
								_tmp29_ = _a_value_it;
#line 97 "/run/build/folks/folks/utils.vala"
								if (!gee_iterator_next (_tmp29_)) {
#line 97 "/run/build/folks/folks/utils.vala"
									break;
#line 382 "utils.c"
								}
#line 97 "/run/build/folks/folks/utils.vala"
								_tmp30_ = _a_value_it;
#line 97 "/run/build/folks/folks/utils.vala"
								_tmp31_ = gee_iterator_get (_tmp30_);
#line 97 "/run/build/folks/folks/utils.vala"
								a_value = (gchar*) _tmp31_;
#line 99 "/run/build/folks/folks/utils.vala"
								_tmp32_ = b_values;
#line 99 "/run/build/folks/folks/utils.vala"
								_tmp33_ = a_value;
#line 99 "/run/build/folks/folks/utils.vala"
								if (!gee_collection_contains (_tmp32_, _tmp33_)) {
#line 100 "/run/build/folks/folks/utils.vala"
									result = FALSE;
#line 100 "/run/build/folks/folks/utils.vala"
									_g_free0 (a_value);
#line 100 "/run/build/folks/folks/utils.vala"
									_g_object_unref0 (_a_value_it);
#line 100 "/run/build/folks/folks/utils.vala"
									_g_object_unref0 (b_values);
#line 100 "/run/build/folks/folks/utils.vala"
									_g_object_unref0 (a_values);
#line 100 "/run/build/folks/folks/utils.vala"
									_g_free0 (key);
#line 100 "/run/build/folks/folks/utils.vala"
									_g_object_unref0 (_key_it);
#line 100 "/run/build/folks/folks/utils.vala"
									return result;
#line 412 "utils.c"
								}
#line 97 "/run/build/folks/folks/utils.vala"
								_g_free0 (a_value);
#line 416 "utils.c"
							}
#line 97 "/run/build/folks/folks/utils.vala"
							_g_object_unref0 (_a_value_it);
#line 420 "utils.c"
						}
#line 90 "/run/build/folks/folks/utils.vala"
						_g_object_unref0 (b_values);
#line 90 "/run/build/folks/folks/utils.vala"
						_g_object_unref0 (a_values);
#line 426 "utils.c"
					} else {
#line 105 "/run/build/folks/folks/utils.vala"
						result = FALSE;
#line 105 "/run/build/folks/folks/utils.vala"
						_g_free0 (key);
#line 105 "/run/build/folks/folks/utils.vala"
						_g_object_unref0 (_key_it);
#line 105 "/run/build/folks/folks/utils.vala"
						return result;
#line 436 "utils.c"
					}
#line 88 "/run/build/folks/folks/utils.vala"
					_g_free0 (key);
#line 440 "utils.c"
				}
#line 88 "/run/build/folks/folks/utils.vala"
				_g_object_unref0 (_key_it);
#line 444 "utils.c"
			}
		} else {
#line 111 "/run/build/folks/folks/utils.vala"
			result = FALSE;
#line 111 "/run/build/folks/folks/utils.vala"
			return result;
#line 451 "utils.c"
		}
	}
#line 114 "/run/build/folks/folks/utils.vala"
	result = TRUE;
#line 114 "/run/build/folks/folks/utils.vala"
	return result;
#line 458 "utils.c"
}


/**
   * Check whether two multi-maps of strings to AbstractFieldDetails are equal.
   *
   * This performs a deep check for equality, checking whether both maps are of
   * the same size, and that each key maps to the same set of values in both
   * maps.
   *
   * @param a a multi-map to compare
   * @param b another multi-map to compare
   * @return ``true`` if the multi-maps are equal, ``false`` otherwise
   *
   * @since 0.6.0
   */
gboolean
folks_utils_multi_map_str_afd_equal (GeeMultiMap* a,
                                     GeeMultiMap* b)
{
	gboolean result = FALSE;
	gint a_size = 0;
	gint _tmp0_;
	gint _tmp1_;
	gint b_size = 0;
	gint _tmp2_;
	gint _tmp3_;
	gboolean _tmp4_ = FALSE;
	gint _tmp5_;
#line 130 "/run/build/folks/folks/utils.vala"
	g_return_val_if_fail (a != NULL, FALSE);
#line 130 "/run/build/folks/folks/utils.vala"
	g_return_val_if_fail (b != NULL, FALSE);
#line 134 "/run/build/folks/folks/utils.vala"
	if (a == b) {
#line 135 "/run/build/folks/folks/utils.vala"
		result = TRUE;
#line 135 "/run/build/folks/folks/utils.vala"
		return result;
#line 498 "utils.c"
	}
#line 137 "/run/build/folks/folks/utils.vala"
	_tmp0_ = gee_multi_map_get_size (a);
#line 137 "/run/build/folks/folks/utils.vala"
	_tmp1_ = _tmp0_;
#line 137 "/run/build/folks/folks/utils.vala"
	a_size = _tmp1_;
#line 138 "/run/build/folks/folks/utils.vala"
	_tmp2_ = gee_multi_map_get_size (b);
#line 138 "/run/build/folks/folks/utils.vala"
	_tmp3_ = _tmp2_;
#line 138 "/run/build/folks/folks/utils.vala"
	b_size = _tmp3_;
#line 140 "/run/build/folks/folks/utils.vala"
	_tmp5_ = a_size;
#line 140 "/run/build/folks/folks/utils.vala"
	if (_tmp5_ == 0) {
#line 516 "utils.c"
		gint _tmp6_;
#line 140 "/run/build/folks/folks/utils.vala"
		_tmp6_ = b_size;
#line 140 "/run/build/folks/folks/utils.vala"
		_tmp4_ = _tmp6_ == 0;
#line 522 "utils.c"
	} else {
#line 140 "/run/build/folks/folks/utils.vala"
		_tmp4_ = FALSE;
#line 526 "utils.c"
	}
#line 140 "/run/build/folks/folks/utils.vala"
	if (_tmp4_) {
#line 143 "/run/build/folks/folks/utils.vala"
		result = TRUE;
#line 143 "/run/build/folks/folks/utils.vala"
		return result;
#line 534 "utils.c"
	} else {
		gint _tmp7_;
		gint _tmp8_;
#line 145 "/run/build/folks/folks/utils.vala"
		_tmp7_ = a_size;
#line 145 "/run/build/folks/folks/utils.vala"
		_tmp8_ = b_size;
#line 145 "/run/build/folks/folks/utils.vala"
		if (_tmp7_ == _tmp8_) {
#line 544 "utils.c"
			{
				GeeIterator* _key_it = NULL;
				GeeSet* _tmp9_;
				GeeSet* _tmp10_;
				GeeIterator* _tmp11_;
				GeeIterator* _tmp12_;
#line 147 "/run/build/folks/folks/utils.vala"
				_tmp9_ = gee_multi_map_get_keys (a);
#line 147 "/run/build/folks/folks/utils.vala"
				_tmp10_ = _tmp9_;
#line 147 "/run/build/folks/folks/utils.vala"
				_tmp11_ = gee_iterable_iterator ((GeeIterable*) _tmp10_);
#line 147 "/run/build/folks/folks/utils.vala"
				_tmp12_ = _tmp11_;
#line 147 "/run/build/folks/folks/utils.vala"
				_g_object_unref0 (_tmp10_);
#line 147 "/run/build/folks/folks/utils.vala"
				_key_it = _tmp12_;
#line 147 "/run/build/folks/folks/utils.vala"
				while (TRUE) {
#line 565 "utils.c"
					GeeIterator* _tmp13_;
					gchar* key = NULL;
					GeeIterator* _tmp14_;
					gpointer _tmp15_;
					const gchar* _tmp16_;
#line 147 "/run/build/folks/folks/utils.vala"
					_tmp13_ = _key_it;
#line 147 "/run/build/folks/folks/utils.vala"
					if (!gee_iterator_next (_tmp13_)) {
#line 147 "/run/build/folks/folks/utils.vala"
						break;
#line 577 "utils.c"
					}
#line 147 "/run/build/folks/folks/utils.vala"
					_tmp14_ = _key_it;
#line 147 "/run/build/folks/folks/utils.vala"
					_tmp15_ = gee_iterator_get (_tmp14_);
#line 147 "/run/build/folks/folks/utils.vala"
					key = (gchar*) _tmp15_;
#line 149 "/run/build/folks/folks/utils.vala"
					_tmp16_ = key;
#line 149 "/run/build/folks/folks/utils.vala"
					if (gee_multi_map_contains (b, _tmp16_)) {
#line 589 "utils.c"
						GeeCollection* a_values = NULL;
						const gchar* _tmp17_;
						GeeCollection* _tmp18_;
						GeeCollection* b_values = NULL;
						const gchar* _tmp19_;
						GeeCollection* _tmp20_;
						GeeCollection* _tmp21_;
						gint _tmp22_;
						gint _tmp23_;
						GeeCollection* _tmp24_;
						gint _tmp25_;
						gint _tmp26_;
#line 151 "/run/build/folks/folks/utils.vala"
						_tmp17_ = key;
#line 151 "/run/build/folks/folks/utils.vala"
						_tmp18_ = gee_multi_map_get (a, _tmp17_);
#line 151 "/run/build/folks/folks/utils.vala"
						a_values = _tmp18_;
#line 152 "/run/build/folks/folks/utils.vala"
						_tmp19_ = key;
#line 152 "/run/build/folks/folks/utils.vala"
						_tmp20_ = gee_multi_map_get (b, _tmp19_);
#line 152 "/run/build/folks/folks/utils.vala"
						b_values = _tmp20_;
#line 153 "/run/build/folks/folks/utils.vala"
						_tmp21_ = a_values;
#line 153 "/run/build/folks/folks/utils.vala"
						_tmp22_ = gee_collection_get_size (_tmp21_);
#line 153 "/run/build/folks/folks/utils.vala"
						_tmp23_ = _tmp22_;
#line 153 "/run/build/folks/folks/utils.vala"
						_tmp24_ = b_values;
#line 153 "/run/build/folks/folks/utils.vala"
						_tmp25_ = gee_collection_get_size (_tmp24_);
#line 153 "/run/build/folks/folks/utils.vala"
						_tmp26_ = _tmp25_;
#line 153 "/run/build/folks/folks/utils.vala"
						if (_tmp23_ != _tmp26_) {
#line 154 "/run/build/folks/folks/utils.vala"
							result = FALSE;
#line 154 "/run/build/folks/folks/utils.vala"
							_g_object_unref0 (b_values);
#line 154 "/run/build/folks/folks/utils.vala"
							_g_object_unref0 (a_values);
#line 154 "/run/build/folks/folks/utils.vala"
							_g_free0 (key);
#line 154 "/run/build/folks/folks/utils.vala"
							_g_object_unref0 (_key_it);
#line 154 "/run/build/folks/folks/utils.vala"
							return result;
#line 640 "utils.c"
						}
						{
							GeeIterator* _a_value_it = NULL;
							GeeCollection* _tmp27_;
							GeeIterator* _tmp28_;
#line 156 "/run/build/folks/folks/utils.vala"
							_tmp27_ = a_values;
#line 156 "/run/build/folks/folks/utils.vala"
							_tmp28_ = gee_iterable_iterator ((GeeIterable*) _tmp27_);
#line 156 "/run/build/folks/folks/utils.vala"
							_a_value_it = _tmp28_;
#line 156 "/run/build/folks/folks/utils.vala"
							while (TRUE) {
#line 654 "utils.c"
								GeeIterator* _tmp29_;
								FolksAbstractFieldDetails* a_value = NULL;
								GeeIterator* _tmp30_;
								gpointer _tmp31_;
								GeeCollection* _tmp32_;
								FolksAbstractFieldDetails* _tmp33_;
#line 156 "/run/build/folks/folks/utils.vala"
								_tmp29_ = _a_value_it;
#line 156 "/run/build/folks/folks/utils.vala"
								if (!gee_iterator_next (_tmp29_)) {
#line 156 "/run/build/folks/folks/utils.vala"
									break;
#line 667 "utils.c"
								}
#line 156 "/run/build/folks/folks/utils.vala"
								_tmp30_ = _a_value_it;
#line 156 "/run/build/folks/folks/utils.vala"
								_tmp31_ = gee_iterator_get (_tmp30_);
#line 156 "/run/build/folks/folks/utils.vala"
								a_value = (FolksAbstractFieldDetails*) _tmp31_;
#line 158 "/run/build/folks/folks/utils.vala"
								_tmp32_ = b_values;
#line 158 "/run/build/folks/folks/utils.vala"
								_tmp33_ = a_value;
#line 158 "/run/build/folks/folks/utils.vala"
								if (!gee_collection_contains (_tmp32_, _tmp33_)) {
#line 159 "/run/build/folks/folks/utils.vala"
									result = FALSE;
#line 159 "/run/build/folks/folks/utils.vala"
									_g_object_unref0 (a_value);
#line 159 "/run/build/folks/folks/utils.vala"
									_g_object_unref0 (_a_value_it);
#line 159 "/run/build/folks/folks/utils.vala"
									_g_object_unref0 (b_values);
#line 159 "/run/build/folks/folks/utils.vala"
									_g_object_unref0 (a_values);
#line 159 "/run/build/folks/folks/utils.vala"
									_g_free0 (key);
#line 159 "/run/build/folks/folks/utils.vala"
									_g_object_unref0 (_key_it);
#line 159 "/run/build/folks/folks/utils.vala"
									return result;
#line 697 "utils.c"
								}
#line 156 "/run/build/folks/folks/utils.vala"
								_g_object_unref0 (a_value);
#line 701 "utils.c"
							}
#line 156 "/run/build/folks/folks/utils.vala"
							_g_object_unref0 (_a_value_it);
#line 705 "utils.c"
						}
#line 149 "/run/build/folks/folks/utils.vala"
						_g_object_unref0 (b_values);
#line 149 "/run/build/folks/folks/utils.vala"
						_g_object_unref0 (a_values);
#line 711 "utils.c"
					} else {
#line 164 "/run/build/folks/folks/utils.vala"
						result = FALSE;
#line 164 "/run/build/folks/folks/utils.vala"
						_g_free0 (key);
#line 164 "/run/build/folks/folks/utils.vala"
						_g_object_unref0 (_key_it);
#line 164 "/run/build/folks/folks/utils.vala"
						return result;
#line 721 "utils.c"
					}
#line 147 "/run/build/folks/folks/utils.vala"
					_g_free0 (key);
#line 725 "utils.c"
				}
#line 147 "/run/build/folks/folks/utils.vala"
				_g_object_unref0 (_key_it);
#line 729 "utils.c"
			}
		} else {
#line 170 "/run/build/folks/folks/utils.vala"
			result = FALSE;
#line 170 "/run/build/folks/folks/utils.vala"
			return result;
#line 736 "utils.c"
		}
	}
#line 173 "/run/build/folks/folks/utils.vala"
	result = TRUE;
#line 173 "/run/build/folks/folks/utils.vala"
	return result;
#line 743 "utils.c"
}


/**
   * Check whether a set of strings to AbstractFieldDetails are equal.
   *
   * This performs a deep check for equality, checking whether both sets are of
   * the same size, and that each key maps to the same set of values in both
   * maps.
   *
   * @param a a set to compare
   * @param b another set to compare
   * @return ``true`` if the sets are equal, ``false`` otherwise
   *
   * @since 0.6.0
   */
gboolean
folks_utils_set_afd_equal (GeeSet* a,
                           GeeSet* b)
{
	gboolean result = FALSE;
	gint a_size = 0;
	gint _tmp0_;
	gint _tmp1_;
	gint b_size = 0;
	gint _tmp2_;
	gint _tmp3_;
	gboolean _tmp4_ = FALSE;
	gint _tmp5_;
#line 189 "/run/build/folks/folks/utils.vala"
	g_return_val_if_fail (a != NULL, FALSE);
#line 189 "/run/build/folks/folks/utils.vala"
	g_return_val_if_fail (b != NULL, FALSE);
#line 193 "/run/build/folks/folks/utils.vala"
	if (a == b) {
#line 194 "/run/build/folks/folks/utils.vala"
		result = TRUE;
#line 194 "/run/build/folks/folks/utils.vala"
		return result;
#line 783 "utils.c"
	}
#line 196 "/run/build/folks/folks/utils.vala"
	_tmp0_ = gee_collection_get_size ((GeeCollection*) a);
#line 196 "/run/build/folks/folks/utils.vala"
	_tmp1_ = _tmp0_;
#line 196 "/run/build/folks/folks/utils.vala"
	a_size = _tmp1_;
#line 197 "/run/build/folks/folks/utils.vala"
	_tmp2_ = gee_collection_get_size ((GeeCollection*) b);
#line 197 "/run/build/folks/folks/utils.vala"
	_tmp3_ = _tmp2_;
#line 197 "/run/build/folks/folks/utils.vala"
	b_size = _tmp3_;
#line 199 "/run/build/folks/folks/utils.vala"
	_tmp5_ = a_size;
#line 199 "/run/build/folks/folks/utils.vala"
	if (_tmp5_ == 0) {
#line 801 "utils.c"
		gint _tmp6_;
#line 199 "/run/build/folks/folks/utils.vala"
		_tmp6_ = b_size;
#line 199 "/run/build/folks/folks/utils.vala"
		_tmp4_ = _tmp6_ == 0;
#line 807 "utils.c"
	} else {
#line 199 "/run/build/folks/folks/utils.vala"
		_tmp4_ = FALSE;
#line 811 "utils.c"
	}
#line 199 "/run/build/folks/folks/utils.vala"
	if (_tmp4_) {
#line 202 "/run/build/folks/folks/utils.vala"
		result = TRUE;
#line 202 "/run/build/folks/folks/utils.vala"
		return result;
#line 819 "utils.c"
	} else {
		gint _tmp7_;
		gint _tmp8_;
#line 204 "/run/build/folks/folks/utils.vala"
		_tmp7_ = a_size;
#line 204 "/run/build/folks/folks/utils.vala"
		_tmp8_ = b_size;
#line 204 "/run/build/folks/folks/utils.vala"
		if (_tmp7_ == _tmp8_) {
#line 829 "utils.c"
			{
				GeeIterator* _val_it = NULL;
				GeeIterator* _tmp9_;
#line 206 "/run/build/folks/folks/utils.vala"
				_tmp9_ = gee_iterable_iterator ((GeeIterable*) a);
#line 206 "/run/build/folks/folks/utils.vala"
				_val_it = _tmp9_;
#line 206 "/run/build/folks/folks/utils.vala"
				while (TRUE) {
#line 839 "utils.c"
					GeeIterator* _tmp10_;
					FolksAbstractFieldDetails* val = NULL;
					GeeIterator* _tmp11_;
					gpointer _tmp12_;
					FolksAbstractFieldDetails* _tmp13_;
#line 206 "/run/build/folks/folks/utils.vala"
					_tmp10_ = _val_it;
#line 206 "/run/build/folks/folks/utils.vala"
					if (!gee_iterator_next (_tmp10_)) {
#line 206 "/run/build/folks/folks/utils.vala"
						break;
#line 851 "utils.c"
					}
#line 206 "/run/build/folks/folks/utils.vala"
					_tmp11_ = _val_it;
#line 206 "/run/build/folks/folks/utils.vala"
					_tmp12_ = gee_iterator_get (_tmp11_);
#line 206 "/run/build/folks/folks/utils.vala"
					val = (FolksAbstractFieldDetails*) _tmp12_;
#line 208 "/run/build/folks/folks/utils.vala"
					_tmp13_ = val;
#line 208 "/run/build/folks/folks/utils.vala"
					if (!gee_collection_contains ((GeeCollection*) b, _tmp13_)) {
#line 210 "/run/build/folks/folks/utils.vala"
						result = FALSE;
#line 210 "/run/build/folks/folks/utils.vala"
						_g_object_unref0 (val);
#line 210 "/run/build/folks/folks/utils.vala"
						_g_object_unref0 (_val_it);
#line 210 "/run/build/folks/folks/utils.vala"
						return result;
#line 871 "utils.c"
					}
#line 206 "/run/build/folks/folks/utils.vala"
					_g_object_unref0 (val);
#line 875 "utils.c"
				}
#line 206 "/run/build/folks/folks/utils.vala"
				_g_object_unref0 (_val_it);
#line 879 "utils.c"
			}
		} else {
#line 216 "/run/build/folks/folks/utils.vala"
			result = FALSE;
#line 216 "/run/build/folks/folks/utils.vala"
			return result;
#line 886 "utils.c"
		}
	}
#line 219 "/run/build/folks/folks/utils.vala"
	result = TRUE;
#line 219 "/run/build/folks/folks/utils.vala"
	return result;
#line 893 "utils.c"
}


/**
   * Check whether a set of AbstractFieldDetails with string values are equal.
   *
   * This performs a deep check for equality, checking whether both sets are of
   * the same size, and that each set has the same values using string compation
   * instead of AbstractFieldDetails equal function
   *
   * @param a a set to compare
   * @param b another set to compare
   * @return ``true`` if the sets are equal, ``false`` otherwise
   *
   * @since 0.9.7
   */
gboolean
folks_utils_set_string_afd_equal (GeeSet* a,
                                  GeeSet* b)
{
	gboolean result = FALSE;
	gint a_size = 0;
	gint _tmp0_;
	gint _tmp1_;
	gint b_size = 0;
	gint _tmp2_;
	gint _tmp3_;
	gboolean _tmp4_ = FALSE;
	gint _tmp5_;
#line 235 "/run/build/folks/folks/utils.vala"
	g_return_val_if_fail (a != NULL, FALSE);
#line 235 "/run/build/folks/folks/utils.vala"
	g_return_val_if_fail (b != NULL, FALSE);
#line 239 "/run/build/folks/folks/utils.vala"
	if (a == b) {
#line 240 "/run/build/folks/folks/utils.vala"
		result = TRUE;
#line 240 "/run/build/folks/folks/utils.vala"
		return result;
#line 933 "utils.c"
	}
#line 242 "/run/build/folks/folks/utils.vala"
	_tmp0_ = gee_collection_get_size ((GeeCollection*) a);
#line 242 "/run/build/folks/folks/utils.vala"
	_tmp1_ = _tmp0_;
#line 242 "/run/build/folks/folks/utils.vala"
	a_size = _tmp1_;
#line 243 "/run/build/folks/folks/utils.vala"
	_tmp2_ = gee_collection_get_size ((GeeCollection*) b);
#line 243 "/run/build/folks/folks/utils.vala"
	_tmp3_ = _tmp2_;
#line 243 "/run/build/folks/folks/utils.vala"
	b_size = _tmp3_;
#line 245 "/run/build/folks/folks/utils.vala"
	_tmp5_ = a_size;
#line 245 "/run/build/folks/folks/utils.vala"
	if (_tmp5_ == 0) {
#line 951 "utils.c"
		gint _tmp6_;
#line 245 "/run/build/folks/folks/utils.vala"
		_tmp6_ = b_size;
#line 245 "/run/build/folks/folks/utils.vala"
		_tmp4_ = _tmp6_ == 0;
#line 957 "utils.c"
	} else {
#line 245 "/run/build/folks/folks/utils.vala"
		_tmp4_ = FALSE;
#line 961 "utils.c"
	}
#line 245 "/run/build/folks/folks/utils.vala"
	if (_tmp4_) {
#line 248 "/run/build/folks/folks/utils.vala"
		result = TRUE;
#line 248 "/run/build/folks/folks/utils.vala"
		return result;
#line 969 "utils.c"
	} else {
		gint _tmp7_;
		gint _tmp8_;
#line 250 "/run/build/folks/folks/utils.vala"
		_tmp7_ = a_size;
#line 250 "/run/build/folks/folks/utils.vala"
		_tmp8_ = b_size;
#line 250 "/run/build/folks/folks/utils.vala"
		if (_tmp7_ == _tmp8_) {
#line 979 "utils.c"
			{
				GeeIterator* _a_val_it = NULL;
				GeeIterator* _tmp9_;
#line 252 "/run/build/folks/folks/utils.vala"
				_tmp9_ = gee_iterable_iterator ((GeeIterable*) a);
#line 252 "/run/build/folks/folks/utils.vala"
				_a_val_it = _tmp9_;
#line 252 "/run/build/folks/folks/utils.vala"
				while (TRUE) {
#line 989 "utils.c"
					GeeIterator* _tmp10_;
					FolksAbstractFieldDetails* a_val = NULL;
					GeeIterator* _tmp11_;
					gpointer _tmp12_;
					gboolean found = FALSE;
					gboolean _tmp27_;
#line 252 "/run/build/folks/folks/utils.vala"
					_tmp10_ = _a_val_it;
#line 252 "/run/build/folks/folks/utils.vala"
					if (!gee_iterator_next (_tmp10_)) {
#line 252 "/run/build/folks/folks/utils.vala"
						break;
#line 1002 "utils.c"
					}
#line 252 "/run/build/folks/folks/utils.vala"
					_tmp11_ = _a_val_it;
#line 252 "/run/build/folks/folks/utils.vala"
					_tmp12_ = gee_iterator_get (_tmp11_);
#line 252 "/run/build/folks/folks/utils.vala"
					a_val = (FolksAbstractFieldDetails*) _tmp12_;
#line 254 "/run/build/folks/folks/utils.vala"
					found = FALSE;
#line 1012 "utils.c"
					{
						GeeIterator* _b_val_it = NULL;
						GeeIterator* _tmp13_;
#line 255 "/run/build/folks/folks/utils.vala"
						_tmp13_ = gee_iterable_iterator ((GeeIterable*) b);
#line 255 "/run/build/folks/folks/utils.vala"
						_b_val_it = _tmp13_;
#line 255 "/run/build/folks/folks/utils.vala"
						while (TRUE) {
#line 1022 "utils.c"
							GeeIterator* _tmp14_;
							FolksAbstractFieldDetails* b_val = NULL;
							GeeIterator* _tmp15_;
							gpointer _tmp16_;
							gboolean _tmp17_ = FALSE;
							FolksAbstractFieldDetails* _tmp18_;
							FolksAbstractFieldDetails* _tmp19_;
#line 255 "/run/build/folks/folks/utils.vala"
							_tmp14_ = _b_val_it;
#line 255 "/run/build/folks/folks/utils.vala"
							if (!gee_iterator_next (_tmp14_)) {
#line 255 "/run/build/folks/folks/utils.vala"
								break;
#line 1036 "utils.c"
							}
#line 255 "/run/build/folks/folks/utils.vala"
							_tmp15_ = _b_val_it;
#line 255 "/run/build/folks/folks/utils.vala"
							_tmp16_ = gee_iterator_get (_tmp15_);
#line 255 "/run/build/folks/folks/utils.vala"
							b_val = (FolksAbstractFieldDetails*) _tmp16_;
#line 257 "/run/build/folks/folks/utils.vala"
							_tmp18_ = a_val;
#line 257 "/run/build/folks/folks/utils.vala"
							_tmp19_ = b_val;
#line 257 "/run/build/folks/folks/utils.vala"
							if (folks_abstract_field_details_parameters_equal (_tmp18_, _tmp19_)) {
#line 1050 "utils.c"
								GEqualFunc _tmp20_;
								FolksAbstractFieldDetails* _tmp21_;
								gconstpointer _tmp22_;
								const gchar* _tmp23_;
								FolksAbstractFieldDetails* _tmp24_;
								gconstpointer _tmp25_;
								const gchar* _tmp26_;
#line 258 "/run/build/folks/folks/utils.vala"
								_tmp20_ = g_str_equal;
#line 258 "/run/build/folks/folks/utils.vala"
								_tmp21_ = a_val;
#line 258 "/run/build/folks/folks/utils.vala"
								_tmp22_ = folks_abstract_field_details_get_value (_tmp21_);
#line 258 "/run/build/folks/folks/utils.vala"
								_tmp23_ = _tmp22_;
#line 258 "/run/build/folks/folks/utils.vala"
								_tmp24_ = b_val;
#line 258 "/run/build/folks/folks/utils.vala"
								_tmp25_ = folks_abstract_field_details_get_value (_tmp24_);
#line 258 "/run/build/folks/folks/utils.vala"
								_tmp26_ = _tmp25_;
#line 258 "/run/build/folks/folks/utils.vala"
								_tmp17_ = _tmp20_ ((const gchar*) _tmp23_, (const gchar*) _tmp26_);
#line 1074 "utils.c"
							} else {
#line 257 "/run/build/folks/folks/utils.vala"
								_tmp17_ = FALSE;
#line 1078 "utils.c"
							}
#line 257 "/run/build/folks/folks/utils.vala"
							if (_tmp17_) {
#line 260 "/run/build/folks/folks/utils.vala"
								found = TRUE;
#line 1084 "utils.c"
							}
#line 255 "/run/build/folks/folks/utils.vala"
							_g_object_unref0 (b_val);
#line 1088 "utils.c"
						}
#line 255 "/run/build/folks/folks/utils.vala"
						_g_object_unref0 (_b_val_it);
#line 1092 "utils.c"
					}
#line 263 "/run/build/folks/folks/utils.vala"
					_tmp27_ = found;
#line 263 "/run/build/folks/folks/utils.vala"
					if (!_tmp27_) {
#line 265 "/run/build/folks/folks/utils.vala"
						result = FALSE;
#line 265 "/run/build/folks/folks/utils.vala"
						_g_object_unref0 (a_val);
#line 265 "/run/build/folks/folks/utils.vala"
						_g_object_unref0 (_a_val_it);
#line 265 "/run/build/folks/folks/utils.vala"
						return result;
#line 1106 "utils.c"
					}
#line 252 "/run/build/folks/folks/utils.vala"
					_g_object_unref0 (a_val);
#line 1110 "utils.c"
				}
#line 252 "/run/build/folks/folks/utils.vala"
				_g_object_unref0 (_a_val_it);
#line 1114 "utils.c"
			}
		} else {
#line 271 "/run/build/folks/folks/utils.vala"
			result = FALSE;
#line 271 "/run/build/folks/folks/utils.vala"
			return result;
#line 1121 "utils.c"
		}
	}
#line 274 "/run/build/folks/folks/utils.vala"
	result = TRUE;
#line 274 "/run/build/folks/folks/utils.vala"
	return result;
#line 1128 "utils.c"
}


static void
folks_utils_class_init (FolksUtilsClass * klass)
{
#line 37 "/run/build/folks/folks/utils.vala"
	folks_utils_parent_class = g_type_class_peek_parent (klass);
#line 1137 "utils.c"
}


static void
folks_utils_instance_init (FolksUtils * self)
{
}


/**
 * Utility functions to simplify common patterns in Folks client code.
 *
 * These may be used by folks clients as well, and are part of folks' supported
 * stable API.
 *
 * @since 0.6.0
 */
GType
folks_utils_get_type (void)
{
	static volatile gsize folks_utils_type_id__volatile = 0;
	if (g_once_init_enter (&folks_utils_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksUtilsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_utils_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksUtils), 0, (GInstanceInitFunc) folks_utils_instance_init, NULL };
		GType folks_utils_type_id;
		folks_utils_type_id = g_type_register_static (G_TYPE_OBJECT, "FolksUtils", &g_define_type_info, 0);
		g_once_init_leave (&folks_utils_type_id__volatile, folks_utils_type_id);
	}
	return folks_utils_type_id__volatile;
}



