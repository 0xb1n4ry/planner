/* CalendarHeader.c generated by valac 0.40.11, the Vala compiler
 * generated from CalendarHeader.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <glib/gi18n-lib.h>


#define WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER (widgets_calendar_calendar_header_get_type ())
#define WIDGETS_CALENDAR_CALENDAR_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeader))
#define WIDGETS_CALENDAR_CALENDAR_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeaderClass))
#define WIDGETS_CALENDAR_IS_CALENDAR_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER))
#define WIDGETS_CALENDAR_IS_CALENDAR_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER))
#define WIDGETS_CALENDAR_CALENDAR_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeaderClass))

typedef struct _WidgetsCalendarCalendarHeader WidgetsCalendarCalendarHeader;
typedef struct _WidgetsCalendarCalendarHeaderClass WidgetsCalendarCalendarHeaderClass;
typedef struct _WidgetsCalendarCalendarHeaderPrivate WidgetsCalendarCalendarHeaderPrivate;
enum  {
	WIDGETS_CALENDAR_CALENDAR_HEADER_0_PROPERTY,
	WIDGETS_CALENDAR_CALENDAR_HEADER_DATE_PROPERTY,
	WIDGETS_CALENDAR_CALENDAR_HEADER_NUM_PROPERTIES
};
static GParamSpec* widgets_calendar_calendar_header_properties[WIDGETS_CALENDAR_CALENDAR_HEADER_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
enum  {
	WIDGETS_CALENDAR_CALENDAR_HEADER_LEFT_CLICKED_SIGNAL,
	WIDGETS_CALENDAR_CALENDAR_HEADER_RIGHT_CLICKED_SIGNAL,
	WIDGETS_CALENDAR_CALENDAR_HEADER_CENTER_CLICKED_SIGNAL,
	WIDGETS_CALENDAR_CALENDAR_HEADER_NUM_SIGNALS
};
static guint widgets_calendar_calendar_header_signals[WIDGETS_CALENDAR_CALENDAR_HEADER_NUM_SIGNALS] = {0};

struct _WidgetsCalendarCalendarHeader {
	GtkBox parent_instance;
	WidgetsCalendarCalendarHeaderPrivate * priv;
};

struct _WidgetsCalendarCalendarHeaderClass {
	GtkBoxClass parent_class;
};

struct _WidgetsCalendarCalendarHeaderPrivate {
	GtkButton* left_button;
	GtkButton* right_button;
	GtkButton* center_button;
};


static gpointer widgets_calendar_calendar_header_parent_class = NULL;

GType widgets_calendar_calendar_header_get_type (void) G_GNUC_CONST;
#define WIDGETS_CALENDAR_CALENDAR_HEADER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeaderPrivate))
WidgetsCalendarCalendarHeader* widgets_calendar_calendar_header_new (void);
WidgetsCalendarCalendarHeader* widgets_calendar_calendar_header_construct (GType object_type);
void widgets_calendar_calendar_header_set_date (WidgetsCalendarCalendarHeader* self,
                                                GDateTime* value);
static GObject * widgets_calendar_calendar_header_constructor (GType type,
                                                        guint n_construct_properties,
                                                        GObjectConstructParam * construct_properties);
static void _widgets_calendar_calendar_header___lambda13_ (WidgetsCalendarCalendarHeader* self);
static void __widgets_calendar_calendar_header___lambda13__gtk_button_clicked (GtkButton* _sender,
                                                                        gpointer self);
static void _widgets_calendar_calendar_header___lambda14_ (WidgetsCalendarCalendarHeader* self);
static void __widgets_calendar_calendar_header___lambda14__gtk_button_clicked (GtkButton* _sender,
                                                                        gpointer self);
static void _widgets_calendar_calendar_header___lambda15_ (WidgetsCalendarCalendarHeader* self);
static void __widgets_calendar_calendar_header___lambda15__gtk_button_clicked (GtkButton* _sender,
                                                                        gpointer self);
static void widgets_calendar_calendar_header_finalize (GObject * obj);
static void _vala_widgets_calendar_calendar_header_set_property (GObject * object,
                                                          guint property_id,
                                                          const GValue * value,
                                                          GParamSpec * pspec);


WidgetsCalendarCalendarHeader*
widgets_calendar_calendar_header_construct (GType object_type)
{
	WidgetsCalendarCalendarHeader * self = NULL;
	GtkStyleContext* _tmp0_;
#line 37 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	self = (WidgetsCalendarCalendarHeader*) g_object_new (object_type, NULL);
#line 38 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) self, GTK_ORIENTATION_HORIZONTAL);
#line 39 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) self, 4);
#line 40 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 40 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	gtk_style_context_add_class (_tmp0_, "linked");
#line 41 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	gtk_widget_set_size_request ((GtkWidget*) self, -1, 30);
#line 37 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	return self;
#line 122 "CalendarHeader.c"
}


WidgetsCalendarCalendarHeader*
widgets_calendar_calendar_header_new (void)
{
#line 37 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	return widgets_calendar_calendar_header_construct (WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER);
#line 131 "CalendarHeader.c"
}


void
widgets_calendar_calendar_header_set_date (WidgetsCalendarCalendarHeader* self,
                                           GDateTime* value)
{
	GtkButton* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
#line 32 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	g_return_if_fail (self != NULL);
#line 33 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp0_ = self->priv->center_button;
#line 33 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp1_ = g_date_time_format (value, _ ("%OB %Y"));
#line 33 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp2_ = _tmp1_;
#line 33 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	gtk_button_set_label (_tmp0_, _tmp2_);
#line 33 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_g_free0 (_tmp2_);
#line 32 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	g_object_notify_by_pspec ((GObject *) self, widgets_calendar_calendar_header_properties[WIDGETS_CALENDAR_CALENDAR_HEADER_DATE_PROPERTY]);
#line 156 "CalendarHeader.c"
}


static void
_widgets_calendar_calendar_header___lambda13_ (WidgetsCalendarCalendarHeader* self)
{
#line 59 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	g_signal_emit (self, widgets_calendar_calendar_header_signals[WIDGETS_CALENDAR_CALENDAR_HEADER_LEFT_CLICKED_SIGNAL], 0);
#line 165 "CalendarHeader.c"
}


static void
__widgets_calendar_calendar_header___lambda13__gtk_button_clicked (GtkButton* _sender,
                                                                   gpointer self)
{
#line 58 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_widgets_calendar_calendar_header___lambda13_ ((WidgetsCalendarCalendarHeader*) self);
#line 175 "CalendarHeader.c"
}


static void
_widgets_calendar_calendar_header___lambda14_ (WidgetsCalendarCalendarHeader* self)
{
#line 63 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	g_signal_emit (self, widgets_calendar_calendar_header_signals[WIDGETS_CALENDAR_CALENDAR_HEADER_RIGHT_CLICKED_SIGNAL], 0);
#line 184 "CalendarHeader.c"
}


static void
__widgets_calendar_calendar_header___lambda14__gtk_button_clicked (GtkButton* _sender,
                                                                   gpointer self)
{
#line 62 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_widgets_calendar_calendar_header___lambda14_ ((WidgetsCalendarCalendarHeader*) self);
#line 194 "CalendarHeader.c"
}


static void
_widgets_calendar_calendar_header___lambda15_ (WidgetsCalendarCalendarHeader* self)
{
#line 67 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	g_signal_emit (self, widgets_calendar_calendar_header_signals[WIDGETS_CALENDAR_CALENDAR_HEADER_CENTER_CLICKED_SIGNAL], 0);
#line 203 "CalendarHeader.c"
}


static void
__widgets_calendar_calendar_header___lambda15__gtk_button_clicked (GtkButton* _sender,
                                                                   gpointer self)
{
#line 66 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_widgets_calendar_calendar_header___lambda15_ ((WidgetsCalendarCalendarHeader*) self);
#line 213 "CalendarHeader.c"
}


static GObject *
widgets_calendar_calendar_header_constructor (GType type,
                                              guint n_construct_properties,
                                              GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsCalendarCalendarHeader * self;
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	GtkButton* _tmp4_;
	GtkButton* _tmp5_;
	GtkButton* _tmp6_;
	GtkButton* _tmp7_;
	GtkButton* _tmp8_;
	GtkButton* _tmp9_;
	GtkButton* _tmp10_;
	GtkButton* _tmp11_;
	GtkButton* _tmp12_;
	GtkButton* _tmp13_;
	GtkButton* _tmp14_;
	GtkButton* _tmp15_;
#line 44 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	parent_class = G_OBJECT_CLASS (widgets_calendar_calendar_header_parent_class);
#line 44 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 44 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeader);
#line 45 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 45 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp1_ = _tmp0_;
#line 45 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp2_ = g_date_time_format (_tmp1_, _ ("%OB %Y"));
#line 45 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp3_ = _tmp2_;
#line 45 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp4_ = (GtkButton*) gtk_button_new_with_label (_tmp3_);
#line 45 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	g_object_ref_sink (_tmp4_);
#line 45 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->center_button);
#line 45 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	self->priv->center_button = _tmp4_;
#line 45 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_g_free0 (_tmp3_);
#line 45 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_g_date_time_unref0 (_tmp1_);
#line 46 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp5_ = self->priv->center_button;
#line 46 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp5_, FALSE);
#line 48 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp6_ = (GtkButton*) gtk_button_new_from_icon_name ("pan-start-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 48 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	g_object_ref_sink (_tmp6_);
#line 48 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->left_button);
#line 48 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	self->priv->left_button = _tmp6_;
#line 49 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp7_ = self->priv->left_button;
#line 49 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp7_, FALSE);
#line 51 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp8_ = (GtkButton*) gtk_button_new_from_icon_name ("pan-end-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 51 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	g_object_ref_sink (_tmp8_);
#line 51 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->right_button);
#line 51 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	self->priv->right_button = _tmp8_;
#line 52 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp9_ = self->priv->right_button;
#line 52 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp9_, FALSE);
#line 54 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp10_ = self->priv->left_button;
#line 54 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp10_);
#line 55 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp11_ = self->priv->right_button;
#line 55 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	gtk_box_pack_end ((GtkBox*) self, (GtkWidget*) _tmp11_, FALSE, FALSE, (guint) 0);
#line 56 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp12_ = self->priv->center_button;
#line 56 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	gtk_box_pack_end ((GtkBox*) self, (GtkWidget*) _tmp12_, TRUE, TRUE, (guint) 0);
#line 58 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp13_ = self->priv->left_button;
#line 58 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	g_signal_connect_object (_tmp13_, "clicked", (GCallback) __widgets_calendar_calendar_header___lambda13__gtk_button_clicked, self, 0);
#line 62 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp14_ = self->priv->right_button;
#line 62 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	g_signal_connect_object (_tmp14_, "clicked", (GCallback) __widgets_calendar_calendar_header___lambda14__gtk_button_clicked, self, 0);
#line 66 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_tmp15_ = self->priv->center_button;
#line 66 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	g_signal_connect_object (_tmp15_, "clicked", (GCallback) __widgets_calendar_calendar_header___lambda15__gtk_button_clicked, self, 0);
#line 44 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	return obj;
#line 321 "CalendarHeader.c"
}


static void
widgets_calendar_calendar_header_class_init (WidgetsCalendarCalendarHeaderClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	widgets_calendar_calendar_header_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	g_type_class_add_private (klass, sizeof (WidgetsCalendarCalendarHeaderPrivate));
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_calendar_calendar_header_set_property;
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_calendar_calendar_header_constructor;
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_calendar_calendar_header_finalize;
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_CALENDAR_CALENDAR_HEADER_DATE_PROPERTY, widgets_calendar_calendar_header_properties[WIDGETS_CALENDAR_CALENDAR_HEADER_DATE_PROPERTY] = g_param_spec_boxed ("date", "date", "date", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE));
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	widgets_calendar_calendar_header_signals[WIDGETS_CALENDAR_CALENDAR_HEADER_LEFT_CLICKED_SIGNAL] = g_signal_new ("left-clicked", WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	widgets_calendar_calendar_header_signals[WIDGETS_CALENDAR_CALENDAR_HEADER_RIGHT_CLICKED_SIGNAL] = g_signal_new ("right-clicked", WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	widgets_calendar_calendar_header_signals[WIDGETS_CALENDAR_CALENDAR_HEADER_CENTER_CLICKED_SIGNAL] = g_signal_new ("center-clicked", WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 346 "CalendarHeader.c"
}


static void
widgets_calendar_calendar_header_instance_init (WidgetsCalendarCalendarHeader * self)
{
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	self->priv = WIDGETS_CALENDAR_CALENDAR_HEADER_GET_PRIVATE (self);
#line 355 "CalendarHeader.c"
}


static void
widgets_calendar_calendar_header_finalize (GObject * obj)
{
	WidgetsCalendarCalendarHeader * self;
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeader);
#line 23 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->left_button);
#line 24 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->right_button);
#line 25 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	_g_object_unref0 (self->priv->center_button);
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	G_OBJECT_CLASS (widgets_calendar_calendar_header_parent_class)->finalize (obj);
#line 373 "CalendarHeader.c"
}


GType
widgets_calendar_calendar_header_get_type (void)
{
	static volatile gsize widgets_calendar_calendar_header_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_calendar_calendar_header_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsCalendarCalendarHeaderClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_calendar_calendar_header_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsCalendarCalendarHeader), 0, (GInstanceInitFunc) widgets_calendar_calendar_header_instance_init, NULL };
		GType widgets_calendar_calendar_header_type_id;
		widgets_calendar_calendar_header_type_id = g_type_register_static (gtk_box_get_type (), "WidgetsCalendarCalendarHeader", &g_define_type_info, 0);
		g_once_init_leave (&widgets_calendar_calendar_header_type_id__volatile, widgets_calendar_calendar_header_type_id);
	}
	return widgets_calendar_calendar_header_type_id__volatile;
}


static void
_vala_widgets_calendar_calendar_header_set_property (GObject * object,
                                                     guint property_id,
                                                     const GValue * value,
                                                     GParamSpec * pspec)
{
	WidgetsCalendarCalendarHeader * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeader);
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
		case WIDGETS_CALENDAR_CALENDAR_HEADER_DATE_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
		widgets_calendar_calendar_header_set_date (self, g_value_get_boxed (value));
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
		break;
#line 407 "CalendarHeader.c"
		default:
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/Calendar/CalendarHeader.vala"
		break;
#line 413 "CalendarHeader.c"
	}
}



