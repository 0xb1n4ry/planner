/* Weather.c generated by valac 0.40.11, the Vala compiler
 * generated from Weather.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <float.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <libsoup/soup.h>
#include <json-glib/json-glib.h>
#include <stdio.h>
#include <geoclue.h>
#include <glib/gi18n-lib.h>


#define SERVICES_TYPE_WEATHER (services_weather_get_type ())
#define SERVICES_WEATHER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_WEATHER, ServicesWeather))
#define SERVICES_WEATHER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_WEATHER, ServicesWeatherClass))
#define SERVICES_IS_WEATHER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_WEATHER))
#define SERVICES_IS_WEATHER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_WEATHER))
#define SERVICES_WEATHER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_WEATHER, ServicesWeatherClass))

typedef struct _ServicesWeather ServicesWeather;
typedef struct _ServicesWeatherClass ServicesWeatherClass;
typedef struct _ServicesWeatherPrivate ServicesWeatherPrivate;
enum  {
	SERVICES_WEATHER_0_PROPERTY,
	SERVICES_WEATHER_LATITUDE_PROPERTY,
	SERVICES_WEATHER_LONGITUDE_PROPERTY,
	SERVICES_WEATHER_CITY_PROPERTY,
	SERVICES_WEATHER_COUNTRY_PROPERTY,
	SERVICES_WEATHER_DESCRIPTION_PROPERTY,
	SERVICES_WEATHER_ICON_PROPERTY,
	SERVICES_WEATHER_NUM_PROPERTIES
};
static GParamSpec* services_weather_properties[SERVICES_WEATHER_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))

#define SERVICES_TYPE_NOTIFICATIONS (services_notifications_get_type ())
#define SERVICES_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotifications))
#define SERVICES_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))
#define SERVICES_IS_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_IS_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_NOTIFICATIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))

typedef struct _ServicesNotifications ServicesNotifications;
typedef struct _ServicesNotificationsClass ServicesNotificationsClass;
#define __vala_SoupBuffer_free0(var) ((var == NULL) ? NULL : (var = (_vala_SoupBuffer_free (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _json_object_unref0(var) ((var == NULL) ? NULL : (var = (json_object_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _json_array_unref0(var) ((var == NULL) ? NULL : (var = (json_array_unref (var), NULL)))
typedef struct _ServicesWeatherGetLocationData ServicesWeatherGetLocationData;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
enum  {
	SERVICES_WEATHER_WEATHER_INFO_UPDATED_SIGNAL,
	SERVICES_WEATHER_WEATHER_ERROR_SIGNAL,
	SERVICES_WEATHER_ON_SIGNAL_WEATHER_UPDATE_SIGNAL,
	SERVICES_WEATHER_ON_SIGNAL_LOCATION_MANUAL_SIGNAL,
	SERVICES_WEATHER_NUM_SIGNALS
};
static guint services_weather_signals[SERVICES_WEATHER_NUM_SIGNALS] = {0};

struct _ServicesWeather {
	GObject parent_instance;
	ServicesWeatherPrivate * priv;
	gdouble temperature;
	gchar* geo_city;
	gchar* geo_country;
};

struct _ServicesWeatherClass {
	GObjectClass parent_class;
};

struct _ServicesWeatherPrivate {
	gdouble _latitude;
	gdouble _longitude;
	gchar* _city;
	gchar* _country;
	gchar* _description;
	gchar* _icon;
};

struct _ServicesWeatherGetLocationData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	ServicesWeather* self;
	gboolean fetch_weather_info;
	GClueSimple* simple;
	GClueSimple* _tmp0_;
	GClueSimple* _tmp1_;
	GClueLocationProxy* _tmp2_;
	GClueLocationProxy* _tmp3_;
	gdouble _tmp4_;
	gdouble _tmp5_;
	GClueSimple* _tmp6_;
	GClueLocationProxy* _tmp7_;
	GClueLocationProxy* _tmp8_;
	gdouble _tmp9_;
	gdouble _tmp10_;
	GError* e;
	GError* _tmp11_;
	const gchar* _tmp12_;
	GError * _inner_error_;
};


static gpointer services_weather_parent_class = NULL;
extern GSettings* application_settings;
extern ServicesNotifications* application_notification;
extern Utils* application_utils;

GType services_weather_get_type (void) G_GNUC_CONST;
#define SERVICES_WEATHER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), SERVICES_TYPE_WEATHER, ServicesWeatherPrivate))
ServicesWeather* services_weather_new (void);
ServicesWeather* services_weather_construct (GType object_type);
void services_weather_set_latitude (ServicesWeather* self,
                                    gdouble value);
void services_weather_set_longitude (ServicesWeather* self,
                                     gdouble value);
void services_weather_set_city (ServicesWeather* self,
                                const gchar* value);
void services_weather_set_country (ServicesWeather* self,
                                   const gchar* value);
void services_weather_set_description (ServicesWeather* self,
                                       const gchar* value);
void services_weather_set_automatic_location (ServicesWeather* self,
                                              gboolean fetch_weather_info);
void services_weather_set_manual_location (ServicesWeather* self,
                                           const gchar* location);
void services_weather_update_weather_info (ServicesWeather* self);
GType services_notifications_get_type (void) G_GNUC_CONST;
static void __lambda281_ (ServicesWeather* self);
static void ___lambda281__services_notifications_on_signal_weather_update (ServicesNotifications* _sender,
                                                                    gpointer self);
static void __lambda282_ (ServicesWeather* self);
static void ___lambda282__services_notifications_on_signal_location_manual (ServicesNotifications* _sender,
                                                                     gpointer self);
static gboolean __lambda283_ (ServicesWeather* self);
static gboolean ___lambda283__gsource_func (gpointer self);
void services_weather_get_location_info (ServicesWeather* self,
                                         gboolean fetch_weather_info);
gchar* services_weather_get_units (ServicesWeather* self);
gdouble services_weather_get_latitude (ServicesWeather* self);
gdouble services_weather_get_longitude (ServicesWeather* self);
static void _vala_SoupBuffer_free (SoupBuffer* self);
const gchar* services_weather_get_city (ServicesWeather* self);
const gchar* services_weather_get_country (ServicesWeather* self);
void services_weather_set_icon (ServicesWeather* self,
                                const gchar* value);
void services_weather_get_location (ServicesWeather* self,
                                    gboolean fetch_weather_info,
                                    GAsyncReadyCallback _callback_,
                                    gpointer _user_data_);
void services_weather_get_location_finish (ServicesWeather* self,
                                           GAsyncResult* _res_);
static void services_weather_get_location_data_free (gpointer _data);
static void services_weather_get_location_async_ready_wrapper (GObject *source_object,
                                                        GAsyncResult *res,
                                                        void *user_data);
static gboolean services_weather_get_location_co (ServicesWeatherGetLocationData* _data_);
static void services_weather_get_location_ready (GObject* source_object,
                                          GAsyncResult* _res_,
                                          gpointer _user_data_);
void services_weather_on_location_updated (ServicesWeather* self,
                                           gdouble latitude,
                                           gdouble longitude,
                                           gboolean fetch_weather_info);
void services_weather_set_location (ServicesWeather* self,
                                    gdouble _latitude,
                                    gdouble _longitude);
gchar* services_weather_get_symbolic_icon_name (ServicesWeather* self);
GType utils_get_type (void) G_GNUC_CONST;
gchar* utils_get_weather_icon_name (Utils* self,
                                    const gchar* key);
const gchar* services_weather_get_icon (ServicesWeather* self);
gchar* services_weather_get_temperature (ServicesWeather* self);
void services_weather_print_weather_info (ServicesWeather* self);
const gchar* services_weather_get_description (ServicesWeather* self);
static void services_weather_finalize (GObject * obj);
static void _vala_services_weather_get_property (GObject * object,
                                          guint property_id,
                                          GValue * value,
                                          GParamSpec * pspec);
static void _vala_services_weather_set_property (GObject * object,
                                          guint property_id,
                                          const GValue * value,
                                          GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


static void
__lambda281_ (ServicesWeather* self)
{
#line 61 "/run/build/planner/src/Services/Weather.vala"
	services_weather_update_weather_info (self);
#line 242 "Weather.c"
}


static void
___lambda281__services_notifications_on_signal_weather_update (ServicesNotifications* _sender,
                                                               gpointer self)
{
#line 60 "/run/build/planner/src/Services/Weather.vala"
	__lambda281_ ((ServicesWeather*) self);
#line 252 "Weather.c"
}


static void
__lambda282_ (ServicesWeather* self)
{
	GSettings* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
#line 65 "/run/build/planner/src/Services/Weather.vala"
	_tmp0_ = application_settings;
#line 65 "/run/build/planner/src/Services/Weather.vala"
	_tmp1_ = g_settings_get_string (_tmp0_, "location-manual-value");
#line 65 "/run/build/planner/src/Services/Weather.vala"
	_tmp2_ = _tmp1_;
#line 65 "/run/build/planner/src/Services/Weather.vala"
	services_weather_set_manual_location (self, _tmp2_);
#line 65 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (_tmp2_);
#line 272 "Weather.c"
}


static void
___lambda282__services_notifications_on_signal_location_manual (ServicesNotifications* _sender,
                                                                gpointer self)
{
#line 64 "/run/build/planner/src/Services/Weather.vala"
	__lambda282_ ((ServicesWeather*) self);
#line 282 "Weather.c"
}


static gboolean
__lambda283_ (ServicesWeather* self)
{
	gboolean result = FALSE;
#line 69 "/run/build/planner/src/Services/Weather.vala"
	services_weather_update_weather_info (self);
#line 70 "/run/build/planner/src/Services/Weather.vala"
	result = TRUE;
#line 70 "/run/build/planner/src/Services/Weather.vala"
	return result;
#line 296 "Weather.c"
}


static gboolean
___lambda283__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda283_ ((ServicesWeather*) self);
#line 68 "/run/build/planner/src/Services/Weather.vala"
	return result;
#line 307 "Weather.c"
}


ServicesWeather*
services_weather_construct (GType object_type)
{
	ServicesWeather * self = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	GSettings* _tmp2_;
	ServicesNotifications* _tmp6_;
	ServicesNotifications* _tmp7_;
#line 41 "/run/build/planner/src/Services/Weather.vala"
	self = (ServicesWeather*) g_object_new (object_type, NULL);
#line 42 "/run/build/planner/src/Services/Weather.vala"
	services_weather_set_latitude (self, 0.0);
#line 43 "/run/build/planner/src/Services/Weather.vala"
	services_weather_set_longitude (self, 0.0);
#line 44 "/run/build/planner/src/Services/Weather.vala"
	services_weather_set_city (self, "-");
#line 45 "/run/build/planner/src/Services/Weather.vala"
	services_weather_set_country (self, "-");
#line 46 "/run/build/planner/src/Services/Weather.vala"
	self->temperature = (gdouble) 0;
#line 47 "/run/build/planner/src/Services/Weather.vala"
	services_weather_set_description (self, "-");
#line 49 "/run/build/planner/src/Services/Weather.vala"
	_tmp0_ = g_strdup ("-");
#line 49 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (self->geo_city);
#line 49 "/run/build/planner/src/Services/Weather.vala"
	self->geo_city = _tmp0_;
#line 50 "/run/build/planner/src/Services/Weather.vala"
	_tmp1_ = g_strdup ("-");
#line 50 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (self->geo_country);
#line 50 "/run/build/planner/src/Services/Weather.vala"
	self->geo_country = _tmp1_;
#line 52 "/run/build/planner/src/Services/Weather.vala"
	services_weather_set_automatic_location (self, FALSE);
#line 54 "/run/build/planner/src/Services/Weather.vala"
	_tmp2_ = application_settings;
#line 54 "/run/build/planner/src/Services/Weather.vala"
	if (g_settings_get_boolean (_tmp2_, "location-automatic") == FALSE) {
#line 352 "Weather.c"
		GSettings* _tmp3_;
		gchar* _tmp4_;
		gchar* _tmp5_;
#line 55 "/run/build/planner/src/Services/Weather.vala"
		_tmp3_ = application_settings;
#line 55 "/run/build/planner/src/Services/Weather.vala"
		_tmp4_ = g_settings_get_string (_tmp3_, "location-manual-value");
#line 55 "/run/build/planner/src/Services/Weather.vala"
		_tmp5_ = _tmp4_;
#line 55 "/run/build/planner/src/Services/Weather.vala"
		services_weather_set_manual_location (self, _tmp5_);
#line 55 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (_tmp5_);
#line 366 "Weather.c"
	} else {
#line 57 "/run/build/planner/src/Services/Weather.vala"
		services_weather_update_weather_info (self);
#line 370 "Weather.c"
	}
#line 60 "/run/build/planner/src/Services/Weather.vala"
	_tmp6_ = application_notification;
#line 60 "/run/build/planner/src/Services/Weather.vala"
	g_signal_connect_object (_tmp6_, "on-signal-weather-update", (GCallback) ___lambda281__services_notifications_on_signal_weather_update, self, 0);
#line 64 "/run/build/planner/src/Services/Weather.vala"
	_tmp7_ = application_notification;
#line 64 "/run/build/planner/src/Services/Weather.vala"
	g_signal_connect_object (_tmp7_, "on-signal-location-manual", (GCallback) ___lambda282__services_notifications_on_signal_location_manual, self, 0);
#line 68 "/run/build/planner/src/Services/Weather.vala"
	g_timeout_add_seconds_full (G_PRIORITY_DEFAULT, (guint) ((1 * 60) * 15), ___lambda283__gsource_func, g_object_ref (self), g_object_unref);
#line 41 "/run/build/planner/src/Services/Weather.vala"
	return self;
#line 384 "Weather.c"
}


ServicesWeather*
services_weather_new (void)
{
#line 41 "/run/build/planner/src/Services/Weather.vala"
	return services_weather_construct (SERVICES_TYPE_WEATHER);
#line 393 "Weather.c"
}


static void
_vala_SoupBuffer_free (SoupBuffer* self)
{
#line 87 "/run/build/planner/src/Services/Weather.vala"
	g_boxed_free (soup_buffer_get_type (), self);
#line 402 "Weather.c"
}


static gpointer
_json_object_ref0 (gpointer self)
{
#line 89 "/run/build/planner/src/Services/Weather.vala"
	return self ? json_object_ref (self) : NULL;
#line 411 "Weather.c"
}


void
services_weather_get_location_info (ServicesWeather* self,
                                    gboolean fetch_weather_info)
{
	gchar* APP_ID = NULL;
	gchar* _tmp0_;
	gchar* API_URL = NULL;
	gchar* _tmp1_;
	gchar* units = NULL;
	gchar* _tmp2_;
	gchar* uri = NULL;
	gdouble _tmp3_;
	gdouble _tmp4_;
	gchar* _tmp5_;
	SoupSession* session = NULL;
	SoupSession* _tmp6_;
	SoupMessage* message = NULL;
	SoupMessage* _tmp7_;
	GError * _inner_error_ = NULL;
#line 74 "/run/build/planner/src/Services/Weather.vala"
	g_return_if_fail (self != NULL);
#line 75 "/run/build/planner/src/Services/Weather.vala"
	_tmp0_ = g_strdup ("0c6dd6ac81b50705599a4d7e3cf02e89");
#line 75 "/run/build/planner/src/Services/Weather.vala"
	APP_ID = _tmp0_;
#line 76 "/run/build/planner/src/Services/Weather.vala"
	_tmp1_ = g_strdup ("http://api.openweathermap.org/data/2.5/weather");
#line 76 "/run/build/planner/src/Services/Weather.vala"
	API_URL = _tmp1_;
#line 77 "/run/build/planner/src/Services/Weather.vala"
	_tmp2_ = services_weather_get_units (self);
#line 77 "/run/build/planner/src/Services/Weather.vala"
	units = _tmp2_;
#line 79 "/run/build/planner/src/Services/Weather.vala"
	_tmp3_ = self->priv->_latitude;
#line 79 "/run/build/planner/src/Services/Weather.vala"
	_tmp4_ = self->priv->_longitude;
#line 79 "/run/build/planner/src/Services/Weather.vala"
	_tmp5_ = g_strdup_printf ("%s?lat=%f&lon=%f&appid=%s&units=%s", API_URL, _tmp3_, _tmp4_, APP_ID, units);
#line 79 "/run/build/planner/src/Services/Weather.vala"
	uri = _tmp5_;
#line 81 "/run/build/planner/src/Services/Weather.vala"
	_tmp6_ = soup_session_new ();
#line 81 "/run/build/planner/src/Services/Weather.vala"
	session = _tmp6_;
#line 82 "/run/build/planner/src/Services/Weather.vala"
	_tmp7_ = soup_message_new ("GET", uri);
#line 82 "/run/build/planner/src/Services/Weather.vala"
	message = _tmp7_;
#line 83 "/run/build/planner/src/Services/Weather.vala"
	soup_session_send_message (session, message);
#line 466 "Weather.c"
	{
		JsonParser* parser = NULL;
		JsonParser* _tmp8_;
		SoupMessageBody* _tmp9_;
		SoupBuffer* _tmp10_;
		SoupBuffer* _tmp11_;
		guint8* _tmp12_;
		gint _tmp12__length1;
		JsonObject* response_root_object = NULL;
		JsonNode* _tmp13_;
		JsonObject* _tmp14_;
		JsonObject* _tmp15_;
		JsonObject* sys = NULL;
		JsonObject* _tmp16_;
		JsonObject* _tmp17_;
		JsonObject* _tmp18_;
		JsonObject* _tmp19_;
		const gchar* _tmp20_;
		gchar* _tmp21_;
		JsonObject* _tmp22_;
		const gchar* _tmp23_;
		gchar* _tmp24_;
#line 86 "/run/build/planner/src/Services/Weather.vala"
		_tmp8_ = json_parser_new ();
#line 86 "/run/build/planner/src/Services/Weather.vala"
		parser = _tmp8_;
#line 87 "/run/build/planner/src/Services/Weather.vala"
		_tmp9_ = message->response_body;
#line 87 "/run/build/planner/src/Services/Weather.vala"
		_tmp10_ = soup_message_body_flatten (_tmp9_);
#line 87 "/run/build/planner/src/Services/Weather.vala"
		_tmp11_ = _tmp10_;
#line 87 "/run/build/planner/src/Services/Weather.vala"
		_tmp12_ = _tmp11_->data;
#line 87 "/run/build/planner/src/Services/Weather.vala"
		_tmp12__length1 = (gint) _tmp11_->length;
#line 87 "/run/build/planner/src/Services/Weather.vala"
		json_parser_load_from_data (parser, (const gchar*) _tmp12_, (gssize) -1, &_inner_error_);
#line 87 "/run/build/planner/src/Services/Weather.vala"
		__vala_SoupBuffer_free0 (_tmp11_);
#line 87 "/run/build/planner/src/Services/Weather.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 87 "/run/build/planner/src/Services/Weather.vala"
			_g_object_unref0 (parser);
#line 511 "Weather.c"
			goto __catch4_g_error;
		}
#line 89 "/run/build/planner/src/Services/Weather.vala"
		_tmp13_ = json_parser_get_root (parser);
#line 89 "/run/build/planner/src/Services/Weather.vala"
		_tmp14_ = json_node_get_object (_tmp13_);
#line 89 "/run/build/planner/src/Services/Weather.vala"
		_tmp15_ = _json_object_ref0 (_tmp14_);
#line 89 "/run/build/planner/src/Services/Weather.vala"
		response_root_object = _tmp15_;
#line 90 "/run/build/planner/src/Services/Weather.vala"
		_tmp16_ = response_root_object;
#line 90 "/run/build/planner/src/Services/Weather.vala"
		_tmp17_ = json_object_get_object_member (_tmp16_, "sys");
#line 90 "/run/build/planner/src/Services/Weather.vala"
		_tmp18_ = _json_object_ref0 (_tmp17_);
#line 90 "/run/build/planner/src/Services/Weather.vala"
		sys = _tmp18_;
#line 92 "/run/build/planner/src/Services/Weather.vala"
		_tmp19_ = response_root_object;
#line 92 "/run/build/planner/src/Services/Weather.vala"
		_tmp20_ = json_object_get_string_member (_tmp19_, "name");
#line 92 "/run/build/planner/src/Services/Weather.vala"
		_tmp21_ = g_strdup (_tmp20_);
#line 92 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (self->geo_city);
#line 92 "/run/build/planner/src/Services/Weather.vala"
		self->geo_city = _tmp21_;
#line 93 "/run/build/planner/src/Services/Weather.vala"
		_tmp22_ = sys;
#line 93 "/run/build/planner/src/Services/Weather.vala"
		_tmp23_ = json_object_get_string_member (_tmp22_, "country");
#line 93 "/run/build/planner/src/Services/Weather.vala"
		_tmp24_ = g_strdup (_tmp23_);
#line 93 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (self->geo_country);
#line 93 "/run/build/planner/src/Services/Weather.vala"
		self->geo_country = _tmp24_;
#line 95 "/run/build/planner/src/Services/Weather.vala"
		if (fetch_weather_info) {
#line 96 "/run/build/planner/src/Services/Weather.vala"
			services_weather_update_weather_info (self);
#line 554 "Weather.c"
		}
#line 85 "/run/build/planner/src/Services/Weather.vala"
		_json_object_unref0 (sys);
#line 85 "/run/build/planner/src/Services/Weather.vala"
		_json_object_unref0 (response_root_object);
#line 85 "/run/build/planner/src/Services/Weather.vala"
		_g_object_unref0 (parser);
#line 562 "Weather.c"
	}
	goto __finally4;
	__catch4_g_error:
	{
		GError* e = NULL;
		FILE* _tmp25_;
#line 85 "/run/build/planner/src/Services/Weather.vala"
		e = _inner_error_;
#line 85 "/run/build/planner/src/Services/Weather.vala"
		_inner_error_ = NULL;
#line 99 "/run/build/planner/src/Services/Weather.vala"
		g_signal_emit (self, services_weather_signals[SERVICES_WEATHER_WEATHER_ERROR_SIGNAL], 0);
#line 100 "/run/build/planner/src/Services/Weather.vala"
		_tmp25_ = stderr;
#line 100 "/run/build/planner/src/Services/Weather.vala"
		fprintf (_tmp25_, "Failed to connect to OpenWeatherMap service.\n");
#line 85 "/run/build/planner/src/Services/Weather.vala"
		_g_error_free0 (e);
#line 581 "Weather.c"
	}
	__finally4:
#line 85 "/run/build/planner/src/Services/Weather.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 85 "/run/build/planner/src/Services/Weather.vala"
		_g_object_unref0 (message);
#line 85 "/run/build/planner/src/Services/Weather.vala"
		_g_object_unref0 (session);
#line 85 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (uri);
#line 85 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (units);
#line 85 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (API_URL);
#line 85 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (APP_ID);
#line 85 "/run/build/planner/src/Services/Weather.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 85 "/run/build/planner/src/Services/Weather.vala"
		g_clear_error (&_inner_error_);
#line 85 "/run/build/planner/src/Services/Weather.vala"
		return;
#line 604 "Weather.c"
	}
#line 74 "/run/build/planner/src/Services/Weather.vala"
	_g_object_unref0 (message);
#line 74 "/run/build/planner/src/Services/Weather.vala"
	_g_object_unref0 (session);
#line 74 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (uri);
#line 74 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (units);
#line 74 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (API_URL);
#line 74 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (APP_ID);
#line 618 "Weather.c"
}


static gpointer
_json_array_ref0 (gpointer self)
{
#line 125 "/run/build/planner/src/Services/Weather.vala"
	return self ? json_array_ref (self) : NULL;
#line 627 "Weather.c"
}


void
services_weather_update_weather_info (ServicesWeather* self)
{
	gchar* APP_ID = NULL;
	gchar* _tmp0_;
	gchar* API_URL = NULL;
	gchar* _tmp1_;
	gchar* units = NULL;
	gchar* _tmp2_;
	gchar* uri = NULL;
	GSettings* _tmp3_;
	SoupSession* session = NULL;
	SoupSession* _tmp16_;
	SoupMessage* message = NULL;
	const gchar* _tmp17_;
	SoupMessage* _tmp18_;
	GError * _inner_error_ = NULL;
#line 104 "/run/build/planner/src/Services/Weather.vala"
	g_return_if_fail (self != NULL);
#line 105 "/run/build/planner/src/Services/Weather.vala"
	_tmp0_ = g_strdup ("0c6dd6ac81b50705599a4d7e3cf02e89");
#line 105 "/run/build/planner/src/Services/Weather.vala"
	APP_ID = _tmp0_;
#line 106 "/run/build/planner/src/Services/Weather.vala"
	_tmp1_ = g_strdup ("http://api.openweathermap.org/data/2.5/weather");
#line 106 "/run/build/planner/src/Services/Weather.vala"
	API_URL = _tmp1_;
#line 107 "/run/build/planner/src/Services/Weather.vala"
	_tmp2_ = services_weather_get_units (self);
#line 107 "/run/build/planner/src/Services/Weather.vala"
	units = _tmp2_;
#line 110 "/run/build/planner/src/Services/Weather.vala"
	_tmp3_ = application_settings;
#line 110 "/run/build/planner/src/Services/Weather.vala"
	if (g_settings_get_boolean (_tmp3_, "location-automatic")) {
#line 666 "Weather.c"
		const gchar* _tmp4_;
		gdouble _tmp5_;
		gdouble _tmp6_;
		const gchar* _tmp7_;
		const gchar* _tmp8_;
		gchar* _tmp9_;
#line 111 "/run/build/planner/src/Services/Weather.vala"
		_tmp4_ = API_URL;
#line 111 "/run/build/planner/src/Services/Weather.vala"
		_tmp5_ = self->priv->_latitude;
#line 111 "/run/build/planner/src/Services/Weather.vala"
		_tmp6_ = self->priv->_longitude;
#line 111 "/run/build/planner/src/Services/Weather.vala"
		_tmp7_ = APP_ID;
#line 111 "/run/build/planner/src/Services/Weather.vala"
		_tmp8_ = units;
#line 111 "/run/build/planner/src/Services/Weather.vala"
		_tmp9_ = g_strdup_printf ("%s?lat=%f&lon=%f&appid=%s&units=%s", _tmp4_, _tmp5_, _tmp6_, _tmp7_, _tmp8_);
#line 111 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (uri);
#line 111 "/run/build/planner/src/Services/Weather.vala"
		uri = _tmp9_;
#line 689 "Weather.c"
	} else {
		const gchar* _tmp10_;
		const gchar* _tmp11_;
		const gchar* _tmp12_;
		const gchar* _tmp13_;
		const gchar* _tmp14_;
		gchar* _tmp15_;
#line 113 "/run/build/planner/src/Services/Weather.vala"
		_tmp10_ = API_URL;
#line 113 "/run/build/planner/src/Services/Weather.vala"
		_tmp11_ = self->priv->_city;
#line 113 "/run/build/planner/src/Services/Weather.vala"
		_tmp12_ = self->priv->_country;
#line 113 "/run/build/planner/src/Services/Weather.vala"
		_tmp13_ = APP_ID;
#line 113 "/run/build/planner/src/Services/Weather.vala"
		_tmp14_ = units;
#line 113 "/run/build/planner/src/Services/Weather.vala"
		_tmp15_ = g_strdup_printf ("%s?q=%s,%s&appid=%s&units=%s", _tmp10_, _tmp11_, _tmp12_, _tmp13_, _tmp14_);
#line 113 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (uri);
#line 113 "/run/build/planner/src/Services/Weather.vala"
		uri = _tmp15_;
#line 713 "Weather.c"
	}
#line 116 "/run/build/planner/src/Services/Weather.vala"
	_tmp16_ = soup_session_new ();
#line 116 "/run/build/planner/src/Services/Weather.vala"
	session = _tmp16_;
#line 117 "/run/build/planner/src/Services/Weather.vala"
	_tmp17_ = uri;
#line 117 "/run/build/planner/src/Services/Weather.vala"
	_tmp18_ = soup_message_new ("GET", _tmp17_);
#line 117 "/run/build/planner/src/Services/Weather.vala"
	message = _tmp18_;
#line 118 "/run/build/planner/src/Services/Weather.vala"
	soup_session_send_message (session, message);
#line 727 "Weather.c"
	{
		JsonParser* parser = NULL;
		JsonParser* _tmp19_;
		SoupMessageBody* _tmp20_;
		SoupBuffer* _tmp21_;
		SoupBuffer* _tmp22_;
		guint8* _tmp23_;
		gint _tmp23__length1;
		JsonObject* response_root_object = NULL;
		JsonNode* _tmp24_;
		JsonObject* _tmp25_;
		JsonObject* _tmp26_;
		JsonArray* weather = NULL;
		JsonObject* _tmp27_;
		JsonArray* _tmp28_;
		JsonArray* _tmp29_;
		JsonObject* sys = NULL;
		JsonObject* _tmp30_;
		JsonObject* _tmp31_;
		JsonObject* _tmp32_;
		JsonObject* main = NULL;
		JsonObject* _tmp33_;
		JsonObject* _tmp34_;
		JsonObject* _tmp35_;
		gchar* weather_description = NULL;
		gchar* _tmp36_;
		gchar* weather_icon = NULL;
		gchar* _tmp37_;
		JsonArray* _tmp38_;
		GList* _tmp39_;
		JsonObject* _tmp49_;
		const gchar* _tmp50_;
		JsonObject* _tmp51_;
		const gchar* _tmp52_;
		JsonObject* _tmp53_;
		const gchar* _tmp54_;
		const gchar* _tmp55_;
#line 121 "/run/build/planner/src/Services/Weather.vala"
		_tmp19_ = json_parser_new ();
#line 121 "/run/build/planner/src/Services/Weather.vala"
		parser = _tmp19_;
#line 122 "/run/build/planner/src/Services/Weather.vala"
		_tmp20_ = message->response_body;
#line 122 "/run/build/planner/src/Services/Weather.vala"
		_tmp21_ = soup_message_body_flatten (_tmp20_);
#line 122 "/run/build/planner/src/Services/Weather.vala"
		_tmp22_ = _tmp21_;
#line 122 "/run/build/planner/src/Services/Weather.vala"
		_tmp23_ = _tmp22_->data;
#line 122 "/run/build/planner/src/Services/Weather.vala"
		_tmp23__length1 = (gint) _tmp22_->length;
#line 122 "/run/build/planner/src/Services/Weather.vala"
		json_parser_load_from_data (parser, (const gchar*) _tmp23_, (gssize) -1, &_inner_error_);
#line 122 "/run/build/planner/src/Services/Weather.vala"
		__vala_SoupBuffer_free0 (_tmp22_);
#line 122 "/run/build/planner/src/Services/Weather.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 122 "/run/build/planner/src/Services/Weather.vala"
			_g_object_unref0 (parser);
#line 787 "Weather.c"
			goto __catch5_g_error;
		}
#line 124 "/run/build/planner/src/Services/Weather.vala"
		_tmp24_ = json_parser_get_root (parser);
#line 124 "/run/build/planner/src/Services/Weather.vala"
		_tmp25_ = json_node_get_object (_tmp24_);
#line 124 "/run/build/planner/src/Services/Weather.vala"
		_tmp26_ = _json_object_ref0 (_tmp25_);
#line 124 "/run/build/planner/src/Services/Weather.vala"
		response_root_object = _tmp26_;
#line 125 "/run/build/planner/src/Services/Weather.vala"
		_tmp27_ = response_root_object;
#line 125 "/run/build/planner/src/Services/Weather.vala"
		_tmp28_ = json_object_get_array_member (_tmp27_, "weather");
#line 125 "/run/build/planner/src/Services/Weather.vala"
		_tmp29_ = _json_array_ref0 (_tmp28_);
#line 125 "/run/build/planner/src/Services/Weather.vala"
		weather = _tmp29_;
#line 126 "/run/build/planner/src/Services/Weather.vala"
		_tmp30_ = response_root_object;
#line 126 "/run/build/planner/src/Services/Weather.vala"
		_tmp31_ = json_object_get_object_member (_tmp30_, "sys");
#line 126 "/run/build/planner/src/Services/Weather.vala"
		_tmp32_ = _json_object_ref0 (_tmp31_);
#line 126 "/run/build/planner/src/Services/Weather.vala"
		sys = _tmp32_;
#line 127 "/run/build/planner/src/Services/Weather.vala"
		_tmp33_ = response_root_object;
#line 127 "/run/build/planner/src/Services/Weather.vala"
		_tmp34_ = json_object_get_object_member (_tmp33_, "main");
#line 127 "/run/build/planner/src/Services/Weather.vala"
		_tmp35_ = _json_object_ref0 (_tmp34_);
#line 127 "/run/build/planner/src/Services/Weather.vala"
		main = _tmp35_;
#line 129 "/run/build/planner/src/Services/Weather.vala"
		_tmp36_ = g_strdup ("");
#line 129 "/run/build/planner/src/Services/Weather.vala"
		weather_description = _tmp36_;
#line 130 "/run/build/planner/src/Services/Weather.vala"
		_tmp37_ = g_strdup ("");
#line 130 "/run/build/planner/src/Services/Weather.vala"
		weather_icon = _tmp37_;
#line 131 "/run/build/planner/src/Services/Weather.vala"
		_tmp38_ = weather;
#line 131 "/run/build/planner/src/Services/Weather.vala"
		_tmp39_ = json_array_get_elements (_tmp38_);
#line 834 "Weather.c"
		{
			GList* weather_details_item_collection = NULL;
			GList* weather_details_item_it = NULL;
#line 131 "/run/build/planner/src/Services/Weather.vala"
			weather_details_item_collection = _tmp39_;
#line 131 "/run/build/planner/src/Services/Weather.vala"
			for (weather_details_item_it = weather_details_item_collection; weather_details_item_it != NULL; weather_details_item_it = weather_details_item_it->next) {
#line 842 "Weather.c"
				JsonNode* weather_details_item = NULL;
#line 131 "/run/build/planner/src/Services/Weather.vala"
				weather_details_item = (JsonNode*) weather_details_item_it->data;
#line 846 "Weather.c"
				{
					JsonObject* weather_details = NULL;
					JsonNode* _tmp40_;
					JsonObject* _tmp41_;
					JsonObject* _tmp42_;
					JsonObject* _tmp43_;
					const gchar* _tmp44_;
					gchar* _tmp45_;
					JsonObject* _tmp46_;
					const gchar* _tmp47_;
					gchar* _tmp48_;
#line 132 "/run/build/planner/src/Services/Weather.vala"
					_tmp40_ = weather_details_item;
#line 132 "/run/build/planner/src/Services/Weather.vala"
					_tmp41_ = json_node_get_object (_tmp40_);
#line 132 "/run/build/planner/src/Services/Weather.vala"
					_tmp42_ = _json_object_ref0 (_tmp41_);
#line 132 "/run/build/planner/src/Services/Weather.vala"
					weather_details = _tmp42_;
#line 134 "/run/build/planner/src/Services/Weather.vala"
					_tmp43_ = weather_details;
#line 134 "/run/build/planner/src/Services/Weather.vala"
					_tmp44_ = json_object_get_string_member (_tmp43_, "main");
#line 134 "/run/build/planner/src/Services/Weather.vala"
					_tmp45_ = g_strdup (_tmp44_);
#line 134 "/run/build/planner/src/Services/Weather.vala"
					_g_free0 (weather_description);
#line 134 "/run/build/planner/src/Services/Weather.vala"
					weather_description = _tmp45_;
#line 135 "/run/build/planner/src/Services/Weather.vala"
					_tmp46_ = weather_details;
#line 135 "/run/build/planner/src/Services/Weather.vala"
					_tmp47_ = json_object_get_string_member (_tmp46_, "icon");
#line 135 "/run/build/planner/src/Services/Weather.vala"
					_tmp48_ = g_strdup (_tmp47_);
#line 135 "/run/build/planner/src/Services/Weather.vala"
					_g_free0 (weather_icon);
#line 135 "/run/build/planner/src/Services/Weather.vala"
					weather_icon = _tmp48_;
#line 131 "/run/build/planner/src/Services/Weather.vala"
					_json_object_unref0 (weather_details);
#line 888 "Weather.c"
				}
			}
#line 131 "/run/build/planner/src/Services/Weather.vala"
			(weather_details_item_collection == NULL) ? NULL : (weather_details_item_collection = (g_list_free (weather_details_item_collection), NULL));
#line 893 "Weather.c"
		}
#line 138 "/run/build/planner/src/Services/Weather.vala"
		_tmp49_ = response_root_object;
#line 138 "/run/build/planner/src/Services/Weather.vala"
		_tmp50_ = json_object_get_string_member (_tmp49_, "name");
#line 138 "/run/build/planner/src/Services/Weather.vala"
		services_weather_set_city (self, _tmp50_);
#line 139 "/run/build/planner/src/Services/Weather.vala"
		_tmp51_ = sys;
#line 139 "/run/build/planner/src/Services/Weather.vala"
		_tmp52_ = json_object_get_string_member (_tmp51_, "country");
#line 139 "/run/build/planner/src/Services/Weather.vala"
		services_weather_set_country (self, _tmp52_);
#line 140 "/run/build/planner/src/Services/Weather.vala"
		_tmp53_ = main;
#line 140 "/run/build/planner/src/Services/Weather.vala"
		self->temperature = json_object_get_double_member (_tmp53_, "temp");
#line 141 "/run/build/planner/src/Services/Weather.vala"
		_tmp54_ = weather_description;
#line 141 "/run/build/planner/src/Services/Weather.vala"
		services_weather_set_description (self, _tmp54_);
#line 142 "/run/build/planner/src/Services/Weather.vala"
		_tmp55_ = weather_icon;
#line 142 "/run/build/planner/src/Services/Weather.vala"
		services_weather_set_icon (self, _tmp55_);
#line 144 "/run/build/planner/src/Services/Weather.vala"
		g_signal_emit (self, services_weather_signals[SERVICES_WEATHER_WEATHER_INFO_UPDATED_SIGNAL], 0);
#line 120 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (weather_icon);
#line 120 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (weather_description);
#line 120 "/run/build/planner/src/Services/Weather.vala"
		_json_object_unref0 (main);
#line 120 "/run/build/planner/src/Services/Weather.vala"
		_json_object_unref0 (sys);
#line 120 "/run/build/planner/src/Services/Weather.vala"
		_json_array_unref0 (weather);
#line 120 "/run/build/planner/src/Services/Weather.vala"
		_json_object_unref0 (response_root_object);
#line 120 "/run/build/planner/src/Services/Weather.vala"
		_g_object_unref0 (parser);
#line 935 "Weather.c"
	}
	goto __finally5;
	__catch5_g_error:
	{
		GError* e = NULL;
		FILE* _tmp56_;
#line 120 "/run/build/planner/src/Services/Weather.vala"
		e = _inner_error_;
#line 120 "/run/build/planner/src/Services/Weather.vala"
		_inner_error_ = NULL;
#line 146 "/run/build/planner/src/Services/Weather.vala"
		g_signal_emit (self, services_weather_signals[SERVICES_WEATHER_WEATHER_ERROR_SIGNAL], 0);
#line 147 "/run/build/planner/src/Services/Weather.vala"
		_tmp56_ = stderr;
#line 147 "/run/build/planner/src/Services/Weather.vala"
		fprintf (_tmp56_, "Failed to connect to OpenWeatherMap service.\n");
#line 120 "/run/build/planner/src/Services/Weather.vala"
		_g_error_free0 (e);
#line 954 "Weather.c"
	}
	__finally5:
#line 120 "/run/build/planner/src/Services/Weather.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 120 "/run/build/planner/src/Services/Weather.vala"
		_g_object_unref0 (message);
#line 120 "/run/build/planner/src/Services/Weather.vala"
		_g_object_unref0 (session);
#line 120 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (uri);
#line 120 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (units);
#line 120 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (API_URL);
#line 120 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (APP_ID);
#line 120 "/run/build/planner/src/Services/Weather.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 120 "/run/build/planner/src/Services/Weather.vala"
		g_clear_error (&_inner_error_);
#line 120 "/run/build/planner/src/Services/Weather.vala"
		return;
#line 977 "Weather.c"
	}
#line 104 "/run/build/planner/src/Services/Weather.vala"
	_g_object_unref0 (message);
#line 104 "/run/build/planner/src/Services/Weather.vala"
	_g_object_unref0 (session);
#line 104 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (uri);
#line 104 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (units);
#line 104 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (API_URL);
#line 104 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (APP_ID);
#line 991 "Weather.c"
}


void
services_weather_set_automatic_location (ServicesWeather* self,
                                         gboolean fetch_weather_info)
{
#line 151 "/run/build/planner/src/Services/Weather.vala"
	g_return_if_fail (self != NULL);
#line 152 "/run/build/planner/src/Services/Weather.vala"
	services_weather_get_location (self, fetch_weather_info, NULL, NULL);
#line 1003 "Weather.c"
}


static void
services_weather_get_location_data_free (gpointer _data)
{
	ServicesWeatherGetLocationData* _data_;
	_data_ = _data;
#line 22 "/run/build/planner/src/Services/Weather.vala"
	_g_object_unref0 (_data_->self);
#line 22 "/run/build/planner/src/Services/Weather.vala"
	g_slice_free (ServicesWeatherGetLocationData, _data_);
#line 1016 "Weather.c"
}


static void
services_weather_get_location_async_ready_wrapper (GObject *source_object,
                                                   GAsyncResult *res,
                                                   void *user_data)
{
	ServicesWeatherGetLocationData* _task_data_;
#line 22 "/run/build/planner/src/Services/Weather.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 22 "/run/build/planner/src/Services/Weather.vala"
	if (_task_data_->_callback_ != NULL) {
#line 22 "/run/build/planner/src/Services/Weather.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 1032 "Weather.c"
	}
#line 22 "/run/build/planner/src/Services/Weather.vala"
	_task_data_->_task_complete_ = TRUE;
#line 1036 "Weather.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 22 "/run/build/planner/src/Services/Weather.vala"
	return self ? g_object_ref (self) : NULL;
#line 1045 "Weather.c"
}


void
services_weather_get_location (ServicesWeather* self,
                               gboolean fetch_weather_info,
                               GAsyncReadyCallback _callback_,
                               gpointer _user_data_)
{
	ServicesWeatherGetLocationData* _data_;
	ServicesWeather* _tmp0_;
#line 22 "/run/build/planner/src/Services/Weather.vala"
	_data_ = g_slice_new0 (ServicesWeatherGetLocationData);
#line 22 "/run/build/planner/src/Services/Weather.vala"
	_data_->_callback_ = _callback_;
#line 22 "/run/build/planner/src/Services/Weather.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, services_weather_get_location_async_ready_wrapper, _user_data_);
#line 22 "/run/build/planner/src/Services/Weather.vala"
	if (_callback_ == NULL) {
#line 22 "/run/build/planner/src/Services/Weather.vala"
		_data_->_task_complete_ = TRUE;
#line 1067 "Weather.c"
	}
#line 22 "/run/build/planner/src/Services/Weather.vala"
	g_task_set_task_data (_data_->_async_result, _data_, services_weather_get_location_data_free);
#line 22 "/run/build/planner/src/Services/Weather.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 22 "/run/build/planner/src/Services/Weather.vala"
	_data_->self = _tmp0_;
#line 22 "/run/build/planner/src/Services/Weather.vala"
	_data_->fetch_weather_info = fetch_weather_info;
#line 22 "/run/build/planner/src/Services/Weather.vala"
	services_weather_get_location_co (_data_);
#line 1079 "Weather.c"
}


void
services_weather_get_location_finish (ServicesWeather* self,
                                      GAsyncResult* _res_)
{
	ServicesWeatherGetLocationData* _data_;
#line 22 "/run/build/planner/src/Services/Weather.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 1090 "Weather.c"
}


static void
services_weather_get_location_ready (GObject* source_object,
                                     GAsyncResult* _res_,
                                     gpointer _user_data_)
{
	ServicesWeatherGetLocationData* _data_;
#line 157 "/run/build/planner/src/Services/Weather.vala"
	_data_ = _user_data_;
#line 157 "/run/build/planner/src/Services/Weather.vala"
	_data_->_source_object_ = source_object;
#line 157 "/run/build/planner/src/Services/Weather.vala"
	_data_->_res_ = _res_;
#line 157 "/run/build/planner/src/Services/Weather.vala"
	_data_->_task_complete_ = TRUE;
#line 157 "/run/build/planner/src/Services/Weather.vala"
	services_weather_get_location_co (_data_);
#line 1110 "Weather.c"
}


static gboolean
services_weather_get_location_co (ServicesWeatherGetLocationData* _data_)
{
#line 155 "/run/build/planner/src/Services/Weather.vala"
	switch (_data_->_state_) {
#line 155 "/run/build/planner/src/Services/Weather.vala"
		case 0:
#line 1121 "Weather.c"
		goto _state_0;
#line 155 "/run/build/planner/src/Services/Weather.vala"
		case 1:
#line 1125 "Weather.c"
		goto _state_1;
		default:
#line 155 "/run/build/planner/src/Services/Weather.vala"
		g_assert_not_reached ();
#line 1130 "Weather.c"
	}
	_state_0:
	{
#line 157 "/run/build/planner/src/Services/Weather.vala"
		_data_->_state_ = 1;
#line 157 "/run/build/planner/src/Services/Weather.vala"
		gclue_simple_new ("com.github.alainm23.planner", GCLUE_ACCURACY_LEVEL_CITY, NULL, services_weather_get_location_ready, _data_);
#line 157 "/run/build/planner/src/Services/Weather.vala"
		return FALSE;
#line 1140 "Weather.c"
		_state_1:
#line 157 "/run/build/planner/src/Services/Weather.vala"
		_data_->_tmp0_ = gclue_simple_new_finish (_data_->_res_, &_data_->_inner_error_);
#line 157 "/run/build/planner/src/Services/Weather.vala"
		_data_->simple = _data_->_tmp0_;
#line 157 "/run/build/planner/src/Services/Weather.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 1148 "Weather.c"
			goto __catch6_g_error;
		}
#line 158 "/run/build/planner/src/Services/Weather.vala"
		_data_->_tmp1_ = _data_->simple;
#line 158 "/run/build/planner/src/Services/Weather.vala"
		_data_->_tmp2_ = gclue_simple_get_location (_data_->_tmp1_);
#line 158 "/run/build/planner/src/Services/Weather.vala"
		_data_->_tmp3_ = _data_->_tmp2_;
#line 158 "/run/build/planner/src/Services/Weather.vala"
		g_object_get ((GClueLocation*) _data_->_tmp3_, "latitude", &_data_->_tmp4_, NULL);
#line 158 "/run/build/planner/src/Services/Weather.vala"
		_data_->_tmp5_ = _data_->_tmp4_;
#line 158 "/run/build/planner/src/Services/Weather.vala"
		_data_->_tmp6_ = _data_->simple;
#line 158 "/run/build/planner/src/Services/Weather.vala"
		_data_->_tmp7_ = gclue_simple_get_location (_data_->_tmp6_);
#line 158 "/run/build/planner/src/Services/Weather.vala"
		_data_->_tmp8_ = _data_->_tmp7_;
#line 158 "/run/build/planner/src/Services/Weather.vala"
		g_object_get ((GClueLocation*) _data_->_tmp8_, "longitude", &_data_->_tmp9_, NULL);
#line 158 "/run/build/planner/src/Services/Weather.vala"
		_data_->_tmp10_ = _data_->_tmp9_;
#line 158 "/run/build/planner/src/Services/Weather.vala"
		services_weather_on_location_updated (_data_->self, _data_->_tmp5_, _data_->_tmp10_, _data_->fetch_weather_info);
#line 156 "/run/build/planner/src/Services/Weather.vala"
		_g_object_unref0 (_data_->simple);
#line 1175 "Weather.c"
	}
	goto __finally6;
	__catch6_g_error:
	{
#line 156 "/run/build/planner/src/Services/Weather.vala"
		_data_->e = _data_->_inner_error_;
#line 156 "/run/build/planner/src/Services/Weather.vala"
		_data_->_inner_error_ = NULL;
#line 160 "/run/build/planner/src/Services/Weather.vala"
		g_signal_emit (_data_->self, services_weather_signals[SERVICES_WEATHER_WEATHER_ERROR_SIGNAL], 0);
#line 161 "/run/build/planner/src/Services/Weather.vala"
		_data_->_tmp11_ = _data_->e;
#line 161 "/run/build/planner/src/Services/Weather.vala"
		_data_->_tmp12_ = _data_->_tmp11_->message;
#line 161 "/run/build/planner/src/Services/Weather.vala"
		g_warning ("Weather.vala:161: Failed to connect to GeoClue2 service: %s", _data_->_tmp12_);
#line 162 "/run/build/planner/src/Services/Weather.vala"
		_g_error_free0 (_data_->e);
#line 162 "/run/build/planner/src/Services/Weather.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 162 "/run/build/planner/src/Services/Weather.vala"
		if (_data_->_state_ != 0) {
#line 162 "/run/build/planner/src/Services/Weather.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 162 "/run/build/planner/src/Services/Weather.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1202 "Weather.c"
			}
		}
#line 162 "/run/build/planner/src/Services/Weather.vala"
		g_object_unref (_data_->_async_result);
#line 162 "/run/build/planner/src/Services/Weather.vala"
		return FALSE;
#line 1209 "Weather.c"
	}
	__finally6:
#line 156 "/run/build/planner/src/Services/Weather.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 156 "/run/build/planner/src/Services/Weather.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 156 "/run/build/planner/src/Services/Weather.vala"
		g_clear_error (&_data_->_inner_error_);
#line 156 "/run/build/planner/src/Services/Weather.vala"
		g_object_unref (_data_->_async_result);
#line 156 "/run/build/planner/src/Services/Weather.vala"
		return FALSE;
#line 1222 "Weather.c"
	}
#line 155 "/run/build/planner/src/Services/Weather.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 155 "/run/build/planner/src/Services/Weather.vala"
	if (_data_->_state_ != 0) {
#line 155 "/run/build/planner/src/Services/Weather.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 155 "/run/build/planner/src/Services/Weather.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1232 "Weather.c"
		}
	}
#line 155 "/run/build/planner/src/Services/Weather.vala"
	g_object_unref (_data_->_async_result);
#line 155 "/run/build/planner/src/Services/Weather.vala"
	return FALSE;
#line 1239 "Weather.c"
}


void
services_weather_on_location_updated (ServicesWeather* self,
                                      gdouble latitude,
                                      gdouble longitude,
                                      gboolean fetch_weather_info)
{
#line 166 "/run/build/planner/src/Services/Weather.vala"
	g_return_if_fail (self != NULL);
#line 167 "/run/build/planner/src/Services/Weather.vala"
	services_weather_set_location (self, latitude, longitude);
#line 168 "/run/build/planner/src/Services/Weather.vala"
	services_weather_get_location_info (self, fetch_weather_info);
#line 1255 "Weather.c"
}


void
services_weather_set_location (ServicesWeather* self,
                               gdouble _latitude,
                               gdouble _longitude)
{
#line 171 "/run/build/planner/src/Services/Weather.vala"
	g_return_if_fail (self != NULL);
#line 172 "/run/build/planner/src/Services/Weather.vala"
	services_weather_set_latitude (self, _latitude);
#line 173 "/run/build/planner/src/Services/Weather.vala"
	services_weather_set_longitude (self, _longitude);
#line 1270 "Weather.c"
}


void
services_weather_set_manual_location (ServicesWeather* self,
                                      const gchar* location)
{
	gchar** location_details = NULL;
	gchar** _tmp0_;
	gchar** _tmp1_;
	gint location_details_length1;
	gint _location_details_size_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
#line 176 "/run/build/planner/src/Services/Weather.vala"
	g_return_if_fail (self != NULL);
#line 176 "/run/build/planner/src/Services/Weather.vala"
	g_return_if_fail (location != NULL);
#line 177 "/run/build/planner/src/Services/Weather.vala"
	_tmp1_ = _tmp0_ = g_strsplit (location, ", ", 0);
#line 177 "/run/build/planner/src/Services/Weather.vala"
	location_details = _tmp1_;
#line 177 "/run/build/planner/src/Services/Weather.vala"
	location_details_length1 = _vala_array_length (_tmp0_);
#line 177 "/run/build/planner/src/Services/Weather.vala"
	_location_details_size_ = location_details_length1;
#line 178 "/run/build/planner/src/Services/Weather.vala"
	_tmp2_ = location_details[0];
#line 178 "/run/build/planner/src/Services/Weather.vala"
	services_weather_set_city (self, _tmp2_);
#line 179 "/run/build/planner/src/Services/Weather.vala"
	_tmp3_ = location_details[1];
#line 179 "/run/build/planner/src/Services/Weather.vala"
	services_weather_set_country (self, _tmp3_);
#line 181 "/run/build/planner/src/Services/Weather.vala"
	services_weather_update_weather_info (self);
#line 176 "/run/build/planner/src/Services/Weather.vala"
	location_details = (_vala_array_free (location_details, location_details_length1, (GDestroyNotify) g_free), NULL);
#line 1309 "Weather.c"
}


gchar*
services_weather_get_units (ServicesWeather* self)
{
	gchar* result = NULL;
	GSettings* _tmp0_;
#line 184 "/run/build/planner/src/Services/Weather.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 185 "/run/build/planner/src/Services/Weather.vala"
	_tmp0_ = application_settings;
#line 185 "/run/build/planner/src/Services/Weather.vala"
	if (g_settings_get_enum (_tmp0_, "weather-unit-format") == 0) {
#line 1324 "Weather.c"
		gchar* _tmp1_;
#line 186 "/run/build/planner/src/Services/Weather.vala"
		_tmp1_ = g_strdup ("imperial");
#line 186 "/run/build/planner/src/Services/Weather.vala"
		result = _tmp1_;
#line 186 "/run/build/planner/src/Services/Weather.vala"
		return result;
#line 1332 "Weather.c"
	} else {
		gchar* _tmp2_;
#line 188 "/run/build/planner/src/Services/Weather.vala"
		_tmp2_ = g_strdup ("metric");
#line 188 "/run/build/planner/src/Services/Weather.vala"
		result = _tmp2_;
#line 188 "/run/build/planner/src/Services/Weather.vala"
		return result;
#line 1341 "Weather.c"
	}
}


gchar*
services_weather_get_symbolic_icon_name (ServicesWeather* self)
{
	gchar* result = NULL;
	Utils* _tmp0_;
	const gchar* _tmp1_;
	gchar* _tmp2_;
#line 192 "/run/build/planner/src/Services/Weather.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 193 "/run/build/planner/src/Services/Weather.vala"
	_tmp0_ = application_utils;
#line 193 "/run/build/planner/src/Services/Weather.vala"
	_tmp1_ = self->priv->_icon;
#line 193 "/run/build/planner/src/Services/Weather.vala"
	_tmp2_ = utils_get_weather_icon_name (_tmp0_, _tmp1_);
#line 193 "/run/build/planner/src/Services/Weather.vala"
	result = _tmp2_;
#line 193 "/run/build/planner/src/Services/Weather.vala"
	return result;
#line 1365 "Weather.c"
}


gchar*
services_weather_get_temperature (ServicesWeather* self)
{
	gchar* result = NULL;
	gchar* formatted_temperature = NULL;
	gdouble _tmp0_;
	gchar* _tmp1_;
#line 196 "/run/build/planner/src/Services/Weather.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 197 "/run/build/planner/src/Services/Weather.vala"
	_tmp0_ = self->temperature;
#line 197 "/run/build/planner/src/Services/Weather.vala"
	_tmp1_ = g_strdup_printf (_ ("%iÂ°"), (gint) _tmp0_);
#line 197 "/run/build/planner/src/Services/Weather.vala"
	formatted_temperature = _tmp1_;
#line 198 "/run/build/planner/src/Services/Weather.vala"
	result = formatted_temperature;
#line 198 "/run/build/planner/src/Services/Weather.vala"
	return result;
#line 1388 "Weather.c"
}


void
services_weather_print_weather_info (ServicesWeather* self)
{
	FILE* _tmp0_;
	const gchar* _tmp1_;
	FILE* _tmp2_;
	const gchar* _tmp3_;
	FILE* _tmp4_;
	const gchar* _tmp5_;
	FILE* _tmp6_;
	gdouble _tmp7_;
	FILE* _tmp8_;
	const gchar* _tmp9_;
	FILE* _tmp10_;
	const gchar* _tmp11_;
#line 201 "/run/build/planner/src/Services/Weather.vala"
	g_return_if_fail (self != NULL);
#line 202 "/run/build/planner/src/Services/Weather.vala"
	_tmp0_ = stdout;
#line 202 "/run/build/planner/src/Services/Weather.vala"
	_tmp1_ = self->priv->_city;
#line 202 "/run/build/planner/src/Services/Weather.vala"
	fprintf (_tmp0_, "City: %s\n", _tmp1_);
#line 203 "/run/build/planner/src/Services/Weather.vala"
	_tmp2_ = stdout;
#line 203 "/run/build/planner/src/Services/Weather.vala"
	_tmp3_ = self->priv->_country;
#line 203 "/run/build/planner/src/Services/Weather.vala"
	fprintf (_tmp2_, "Country: %s\n", _tmp3_);
#line 204 "/run/build/planner/src/Services/Weather.vala"
	_tmp4_ = stdout;
#line 204 "/run/build/planner/src/Services/Weather.vala"
	_tmp5_ = self->priv->_description;
#line 204 "/run/build/planner/src/Services/Weather.vala"
	fprintf (_tmp4_, "Description: %s\n", _tmp5_);
#line 205 "/run/build/planner/src/Services/Weather.vala"
	_tmp6_ = stdout;
#line 205 "/run/build/planner/src/Services/Weather.vala"
	_tmp7_ = self->temperature;
#line 205 "/run/build/planner/src/Services/Weather.vala"
	fprintf (_tmp6_, "Temperature: %f\n", _tmp7_);
#line 207 "/run/build/planner/src/Services/Weather.vala"
	_tmp8_ = stdout;
#line 207 "/run/build/planner/src/Services/Weather.vala"
	_tmp9_ = self->geo_city;
#line 207 "/run/build/planner/src/Services/Weather.vala"
	fprintf (_tmp8_, "GEO City: %s\n", _tmp9_);
#line 208 "/run/build/planner/src/Services/Weather.vala"
	_tmp10_ = stdout;
#line 208 "/run/build/planner/src/Services/Weather.vala"
	_tmp11_ = self->geo_country;
#line 208 "/run/build/planner/src/Services/Weather.vala"
	fprintf (_tmp10_, "GEO Country: %s\n", _tmp11_);
#line 1445 "Weather.c"
}


gdouble
services_weather_get_latitude (ServicesWeather* self)
{
	gdouble result;
	gdouble _tmp0_;
#line 23 "/run/build/planner/src/Services/Weather.vala"
	g_return_val_if_fail (self != NULL, 0.0);
#line 23 "/run/build/planner/src/Services/Weather.vala"
	_tmp0_ = self->priv->_latitude;
#line 23 "/run/build/planner/src/Services/Weather.vala"
	result = _tmp0_;
#line 23 "/run/build/planner/src/Services/Weather.vala"
	return result;
#line 1462 "Weather.c"
}


void
services_weather_set_latitude (ServicesWeather* self,
                               gdouble value)
{
#line 23 "/run/build/planner/src/Services/Weather.vala"
	g_return_if_fail (self != NULL);
#line 23 "/run/build/planner/src/Services/Weather.vala"
	if (services_weather_get_latitude (self) != value) {
#line 23 "/run/build/planner/src/Services/Weather.vala"
		self->priv->_latitude = value;
#line 23 "/run/build/planner/src/Services/Weather.vala"
		g_object_notify_by_pspec ((GObject *) self, services_weather_properties[SERVICES_WEATHER_LATITUDE_PROPERTY]);
#line 1478 "Weather.c"
	}
}


gdouble
services_weather_get_longitude (ServicesWeather* self)
{
	gdouble result;
	gdouble _tmp0_;
#line 24 "/run/build/planner/src/Services/Weather.vala"
	g_return_val_if_fail (self != NULL, 0.0);
#line 24 "/run/build/planner/src/Services/Weather.vala"
	_tmp0_ = self->priv->_longitude;
#line 24 "/run/build/planner/src/Services/Weather.vala"
	result = _tmp0_;
#line 24 "/run/build/planner/src/Services/Weather.vala"
	return result;
#line 1496 "Weather.c"
}


void
services_weather_set_longitude (ServicesWeather* self,
                                gdouble value)
{
#line 24 "/run/build/planner/src/Services/Weather.vala"
	g_return_if_fail (self != NULL);
#line 24 "/run/build/planner/src/Services/Weather.vala"
	if (services_weather_get_longitude (self) != value) {
#line 24 "/run/build/planner/src/Services/Weather.vala"
		self->priv->_longitude = value;
#line 24 "/run/build/planner/src/Services/Weather.vala"
		g_object_notify_by_pspec ((GObject *) self, services_weather_properties[SERVICES_WEATHER_LONGITUDE_PROPERTY]);
#line 1512 "Weather.c"
	}
}


const gchar*
services_weather_get_city (ServicesWeather* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 25 "/run/build/planner/src/Services/Weather.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 25 "/run/build/planner/src/Services/Weather.vala"
	_tmp0_ = self->priv->_city;
#line 25 "/run/build/planner/src/Services/Weather.vala"
	result = _tmp0_;
#line 25 "/run/build/planner/src/Services/Weather.vala"
	return result;
#line 1530 "Weather.c"
}


void
services_weather_set_city (ServicesWeather* self,
                           const gchar* value)
{
#line 25 "/run/build/planner/src/Services/Weather.vala"
	g_return_if_fail (self != NULL);
#line 25 "/run/build/planner/src/Services/Weather.vala"
	if (g_strcmp0 (value, services_weather_get_city (self)) != 0) {
#line 1542 "Weather.c"
		gchar* _tmp0_;
#line 25 "/run/build/planner/src/Services/Weather.vala"
		_tmp0_ = g_strdup (value);
#line 25 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (self->priv->_city);
#line 25 "/run/build/planner/src/Services/Weather.vala"
		self->priv->_city = _tmp0_;
#line 25 "/run/build/planner/src/Services/Weather.vala"
		g_object_notify_by_pspec ((GObject *) self, services_weather_properties[SERVICES_WEATHER_CITY_PROPERTY]);
#line 1552 "Weather.c"
	}
}


const gchar*
services_weather_get_country (ServicesWeather* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 26 "/run/build/planner/src/Services/Weather.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 26 "/run/build/planner/src/Services/Weather.vala"
	_tmp0_ = self->priv->_country;
#line 26 "/run/build/planner/src/Services/Weather.vala"
	result = _tmp0_;
#line 26 "/run/build/planner/src/Services/Weather.vala"
	return result;
#line 1570 "Weather.c"
}


void
services_weather_set_country (ServicesWeather* self,
                              const gchar* value)
{
#line 26 "/run/build/planner/src/Services/Weather.vala"
	g_return_if_fail (self != NULL);
#line 26 "/run/build/planner/src/Services/Weather.vala"
	if (g_strcmp0 (value, services_weather_get_country (self)) != 0) {
#line 1582 "Weather.c"
		gchar* _tmp0_;
#line 26 "/run/build/planner/src/Services/Weather.vala"
		_tmp0_ = g_strdup (value);
#line 26 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (self->priv->_country);
#line 26 "/run/build/planner/src/Services/Weather.vala"
		self->priv->_country = _tmp0_;
#line 26 "/run/build/planner/src/Services/Weather.vala"
		g_object_notify_by_pspec ((GObject *) self, services_weather_properties[SERVICES_WEATHER_COUNTRY_PROPERTY]);
#line 1592 "Weather.c"
	}
}


const gchar*
services_weather_get_description (ServicesWeather* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 28 "/run/build/planner/src/Services/Weather.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 28 "/run/build/planner/src/Services/Weather.vala"
	_tmp0_ = self->priv->_description;
#line 28 "/run/build/planner/src/Services/Weather.vala"
	result = _tmp0_;
#line 28 "/run/build/planner/src/Services/Weather.vala"
	return result;
#line 1610 "Weather.c"
}


void
services_weather_set_description (ServicesWeather* self,
                                  const gchar* value)
{
#line 28 "/run/build/planner/src/Services/Weather.vala"
	g_return_if_fail (self != NULL);
#line 28 "/run/build/planner/src/Services/Weather.vala"
	if (g_strcmp0 (value, services_weather_get_description (self)) != 0) {
#line 1622 "Weather.c"
		gchar* _tmp0_;
#line 28 "/run/build/planner/src/Services/Weather.vala"
		_tmp0_ = g_strdup (value);
#line 28 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (self->priv->_description);
#line 28 "/run/build/planner/src/Services/Weather.vala"
		self->priv->_description = _tmp0_;
#line 28 "/run/build/planner/src/Services/Weather.vala"
		g_object_notify_by_pspec ((GObject *) self, services_weather_properties[SERVICES_WEATHER_DESCRIPTION_PROPERTY]);
#line 1632 "Weather.c"
	}
}


const gchar*
services_weather_get_icon (ServicesWeather* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 29 "/run/build/planner/src/Services/Weather.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 29 "/run/build/planner/src/Services/Weather.vala"
	_tmp0_ = self->priv->_icon;
#line 29 "/run/build/planner/src/Services/Weather.vala"
	result = _tmp0_;
#line 29 "/run/build/planner/src/Services/Weather.vala"
	return result;
#line 1650 "Weather.c"
}


void
services_weather_set_icon (ServicesWeather* self,
                           const gchar* value)
{
#line 29 "/run/build/planner/src/Services/Weather.vala"
	g_return_if_fail (self != NULL);
#line 29 "/run/build/planner/src/Services/Weather.vala"
	if (g_strcmp0 (value, services_weather_get_icon (self)) != 0) {
#line 1662 "Weather.c"
		gchar* _tmp0_;
#line 29 "/run/build/planner/src/Services/Weather.vala"
		_tmp0_ = g_strdup (value);
#line 29 "/run/build/planner/src/Services/Weather.vala"
		_g_free0 (self->priv->_icon);
#line 29 "/run/build/planner/src/Services/Weather.vala"
		self->priv->_icon = _tmp0_;
#line 29 "/run/build/planner/src/Services/Weather.vala"
		g_object_notify_by_pspec ((GObject *) self, services_weather_properties[SERVICES_WEATHER_ICON_PROPERTY]);
#line 1672 "Weather.c"
	}
}


static void
services_weather_class_init (ServicesWeatherClass * klass)
{
#line 22 "/run/build/planner/src/Services/Weather.vala"
	services_weather_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Services/Weather.vala"
	g_type_class_add_private (klass, sizeof (ServicesWeatherPrivate));
#line 22 "/run/build/planner/src/Services/Weather.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_services_weather_get_property;
#line 22 "/run/build/planner/src/Services/Weather.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_services_weather_set_property;
#line 22 "/run/build/planner/src/Services/Weather.vala"
	G_OBJECT_CLASS (klass)->finalize = services_weather_finalize;
#line 22 "/run/build/planner/src/Services/Weather.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), SERVICES_WEATHER_LATITUDE_PROPERTY, services_weather_properties[SERVICES_WEATHER_LATITUDE_PROPERTY] = g_param_spec_double ("latitude", "latitude", "latitude", -G_MAXDOUBLE, G_MAXDOUBLE, 0.0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "/run/build/planner/src/Services/Weather.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), SERVICES_WEATHER_LONGITUDE_PROPERTY, services_weather_properties[SERVICES_WEATHER_LONGITUDE_PROPERTY] = g_param_spec_double ("longitude", "longitude", "longitude", -G_MAXDOUBLE, G_MAXDOUBLE, 0.0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "/run/build/planner/src/Services/Weather.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), SERVICES_WEATHER_CITY_PROPERTY, services_weather_properties[SERVICES_WEATHER_CITY_PROPERTY] = g_param_spec_string ("city", "city", "city", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "/run/build/planner/src/Services/Weather.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), SERVICES_WEATHER_COUNTRY_PROPERTY, services_weather_properties[SERVICES_WEATHER_COUNTRY_PROPERTY] = g_param_spec_string ("country", "country", "country", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "/run/build/planner/src/Services/Weather.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), SERVICES_WEATHER_DESCRIPTION_PROPERTY, services_weather_properties[SERVICES_WEATHER_DESCRIPTION_PROPERTY] = g_param_spec_string ("description", "description", "description", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "/run/build/planner/src/Services/Weather.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), SERVICES_WEATHER_ICON_PROPERTY, services_weather_properties[SERVICES_WEATHER_ICON_PROPERTY] = g_param_spec_string ("icon", "icon", "icon", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "/run/build/planner/src/Services/Weather.vala"
	services_weather_signals[SERVICES_WEATHER_WEATHER_INFO_UPDATED_SIGNAL] = g_signal_new ("weather-info-updated", SERVICES_TYPE_WEATHER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 22 "/run/build/planner/src/Services/Weather.vala"
	services_weather_signals[SERVICES_WEATHER_WEATHER_ERROR_SIGNAL] = g_signal_new ("weather-error", SERVICES_TYPE_WEATHER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 22 "/run/build/planner/src/Services/Weather.vala"
	services_weather_signals[SERVICES_WEATHER_ON_SIGNAL_WEATHER_UPDATE_SIGNAL] = g_signal_new ("on-signal-weather-update", SERVICES_TYPE_WEATHER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 22 "/run/build/planner/src/Services/Weather.vala"
	services_weather_signals[SERVICES_WEATHER_ON_SIGNAL_LOCATION_MANUAL_SIGNAL] = g_signal_new ("on-signal-location-manual", SERVICES_TYPE_WEATHER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 1710 "Weather.c"
}


static void
services_weather_instance_init (ServicesWeather * self)
{
#line 22 "/run/build/planner/src/Services/Weather.vala"
	self->priv = SERVICES_WEATHER_GET_PRIVATE (self);
#line 1719 "Weather.c"
}


static void
services_weather_finalize (GObject * obj)
{
	ServicesWeather * self;
#line 22 "/run/build/planner/src/Services/Weather.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SERVICES_TYPE_WEATHER, ServicesWeather);
#line 25 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (self->priv->_city);
#line 26 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (self->priv->_country);
#line 28 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (self->priv->_description);
#line 29 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (self->priv->_icon);
#line 31 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (self->geo_city);
#line 32 "/run/build/planner/src/Services/Weather.vala"
	_g_free0 (self->geo_country);
#line 22 "/run/build/planner/src/Services/Weather.vala"
	G_OBJECT_CLASS (services_weather_parent_class)->finalize (obj);
#line 1743 "Weather.c"
}


GType
services_weather_get_type (void)
{
	static volatile gsize services_weather_type_id__volatile = 0;
	if (g_once_init_enter (&services_weather_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ServicesWeatherClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) services_weather_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ServicesWeather), 0, (GInstanceInitFunc) services_weather_instance_init, NULL };
		GType services_weather_type_id;
		services_weather_type_id = g_type_register_static (G_TYPE_OBJECT, "ServicesWeather", &g_define_type_info, 0);
		g_once_init_leave (&services_weather_type_id__volatile, services_weather_type_id);
	}
	return services_weather_type_id__volatile;
}


static void
_vala_services_weather_get_property (GObject * object,
                                     guint property_id,
                                     GValue * value,
                                     GParamSpec * pspec)
{
	ServicesWeather * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, SERVICES_TYPE_WEATHER, ServicesWeather);
#line 22 "/run/build/planner/src/Services/Weather.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Services/Weather.vala"
		case SERVICES_WEATHER_LATITUDE_PROPERTY:
#line 22 "/run/build/planner/src/Services/Weather.vala"
		g_value_set_double (value, services_weather_get_latitude (self));
#line 22 "/run/build/planner/src/Services/Weather.vala"
		break;
#line 22 "/run/build/planner/src/Services/Weather.vala"
		case SERVICES_WEATHER_LONGITUDE_PROPERTY:
#line 22 "/run/build/planner/src/Services/Weather.vala"
		g_value_set_double (value, services_weather_get_longitude (self));
#line 22 "/run/build/planner/src/Services/Weather.vala"
		break;
#line 22 "/run/build/planner/src/Services/Weather.vala"
		case SERVICES_WEATHER_CITY_PROPERTY:
#line 22 "/run/build/planner/src/Services/Weather.vala"
		g_value_set_string (value, services_weather_get_city (self));
#line 22 "/run/build/planner/src/Services/Weather.vala"
		break;
#line 22 "/run/build/planner/src/Services/Weather.vala"
		case SERVICES_WEATHER_COUNTRY_PROPERTY:
#line 22 "/run/build/planner/src/Services/Weather.vala"
		g_value_set_string (value, services_weather_get_country (self));
#line 22 "/run/build/planner/src/Services/Weather.vala"
		break;
#line 22 "/run/build/planner/src/Services/Weather.vala"
		case SERVICES_WEATHER_DESCRIPTION_PROPERTY:
#line 22 "/run/build/planner/src/Services/Weather.vala"
		g_value_set_string (value, services_weather_get_description (self));
#line 22 "/run/build/planner/src/Services/Weather.vala"
		break;
#line 22 "/run/build/planner/src/Services/Weather.vala"
		case SERVICES_WEATHER_ICON_PROPERTY:
#line 22 "/run/build/planner/src/Services/Weather.vala"
		g_value_set_string (value, services_weather_get_icon (self));
#line 22 "/run/build/planner/src/Services/Weather.vala"
		break;
#line 1807 "Weather.c"
		default:
#line 22 "/run/build/planner/src/Services/Weather.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Services/Weather.vala"
		break;
#line 1813 "Weather.c"
	}
}


static void
_vala_services_weather_set_property (GObject * object,
                                     guint property_id,
                                     const GValue * value,
                                     GParamSpec * pspec)
{
	ServicesWeather * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, SERVICES_TYPE_WEATHER, ServicesWeather);
#line 22 "/run/build/planner/src/Services/Weather.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Services/Weather.vala"
		case SERVICES_WEATHER_LATITUDE_PROPERTY:
#line 22 "/run/build/planner/src/Services/Weather.vala"
		services_weather_set_latitude (self, g_value_get_double (value));
#line 22 "/run/build/planner/src/Services/Weather.vala"
		break;
#line 22 "/run/build/planner/src/Services/Weather.vala"
		case SERVICES_WEATHER_LONGITUDE_PROPERTY:
#line 22 "/run/build/planner/src/Services/Weather.vala"
		services_weather_set_longitude (self, g_value_get_double (value));
#line 22 "/run/build/planner/src/Services/Weather.vala"
		break;
#line 22 "/run/build/planner/src/Services/Weather.vala"
		case SERVICES_WEATHER_CITY_PROPERTY:
#line 22 "/run/build/planner/src/Services/Weather.vala"
		services_weather_set_city (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Services/Weather.vala"
		break;
#line 22 "/run/build/planner/src/Services/Weather.vala"
		case SERVICES_WEATHER_COUNTRY_PROPERTY:
#line 22 "/run/build/planner/src/Services/Weather.vala"
		services_weather_set_country (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Services/Weather.vala"
		break;
#line 22 "/run/build/planner/src/Services/Weather.vala"
		case SERVICES_WEATHER_DESCRIPTION_PROPERTY:
#line 22 "/run/build/planner/src/Services/Weather.vala"
		services_weather_set_description (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Services/Weather.vala"
		break;
#line 22 "/run/build/planner/src/Services/Weather.vala"
		case SERVICES_WEATHER_ICON_PROPERTY:
#line 22 "/run/build/planner/src/Services/Weather.vala"
		services_weather_set_icon (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Services/Weather.vala"
		break;
#line 1864 "Weather.c"
		default:
#line 22 "/run/build/planner/src/Services/Weather.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Services/Weather.vala"
		break;
#line 1870 "Weather.c"
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



