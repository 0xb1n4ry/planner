/* simple-query.c generated by valac 0.40.11, the Vala compiler
 * generated from simple-query.vala, do not modify */

/*
 * Copyright (C) 2011, 2015 Collabora Ltd.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Travis Reitter <travis.reitter@collabora.co.uk>
 *       Philip Withnall <philip.withnall@collabora.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <gee.h>


#define FOLKS_TYPE_QUERY (folks_query_get_type ())
#define FOLKS_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_QUERY, FolksQuery))
#define FOLKS_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_QUERY, FolksQueryClass))
#define FOLKS_IS_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_QUERY))
#define FOLKS_IS_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_QUERY))
#define FOLKS_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_QUERY, FolksQueryClass))

typedef struct _FolksQuery FolksQuery;
typedef struct _FolksQueryClass FolksQueryClass;
typedef struct _FolksQueryPrivate FolksQueryPrivate;

#define FOLKS_TYPE_INDIVIDUAL (folks_individual_get_type ())
#define FOLKS_INDIVIDUAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_INDIVIDUAL, FolksIndividual))
#define FOLKS_INDIVIDUAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_INDIVIDUAL, FolksIndividualClass))
#define FOLKS_IS_INDIVIDUAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_INDIVIDUAL))
#define FOLKS_IS_INDIVIDUAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_INDIVIDUAL))
#define FOLKS_INDIVIDUAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_INDIVIDUAL, FolksIndividualClass))

typedef struct _FolksIndividual FolksIndividual;
typedef struct _FolksIndividualClass FolksIndividualClass;

#define FOLKS_TYPE_SIMPLE_QUERY (folks_simple_query_get_type ())
#define FOLKS_SIMPLE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_SIMPLE_QUERY, FolksSimpleQuery))
#define FOLKS_SIMPLE_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_SIMPLE_QUERY, FolksSimpleQueryClass))
#define FOLKS_IS_SIMPLE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_SIMPLE_QUERY))
#define FOLKS_IS_SIMPLE_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_SIMPLE_QUERY))
#define FOLKS_SIMPLE_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_SIMPLE_QUERY, FolksSimpleQueryClass))

typedef struct _FolksSimpleQuery FolksSimpleQuery;
typedef struct _FolksSimpleQueryClass FolksSimpleQueryClass;
typedef struct _FolksSimpleQueryPrivate FolksSimpleQueryPrivate;
enum  {
	FOLKS_SIMPLE_QUERY_0_PROPERTY,
	FOLKS_SIMPLE_QUERY_QUERY_STRING_PROPERTY,
	FOLKS_SIMPLE_QUERY_QUERY_LOCALE_PROPERTY,
	FOLKS_SIMPLE_QUERY_NUM_PROPERTIES
};
static GParamSpec* folks_simple_query_properties[FOLKS_SIMPLE_QUERY_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_param_spec_unref0(var) ((var == NULL) ? NULL : (var = (g_param_spec_unref (var), NULL)))

#define FOLKS_TYPE_STRUCTURED_NAME (folks_structured_name_get_type ())
#define FOLKS_STRUCTURED_NAME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_STRUCTURED_NAME, FolksStructuredName))
#define FOLKS_STRUCTURED_NAME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_STRUCTURED_NAME, FolksStructuredNameClass))
#define FOLKS_IS_STRUCTURED_NAME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_STRUCTURED_NAME))
#define FOLKS_IS_STRUCTURED_NAME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_STRUCTURED_NAME))
#define FOLKS_STRUCTURED_NAME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_STRUCTURED_NAME, FolksStructuredNameClass))

typedef struct _FolksStructuredName FolksStructuredName;
typedef struct _FolksStructuredNameClass FolksStructuredNameClass;

#define FOLKS_TYPE_ABSTRACT_FIELD_DETAILS (folks_abstract_field_details_get_type ())
#define FOLKS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails))
#define FOLKS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))

typedef struct _FolksAbstractFieldDetails FolksAbstractFieldDetails;
typedef struct _FolksAbstractFieldDetailsClass FolksAbstractFieldDetailsClass;

#define FOLKS_TYPE_ROLE (folks_role_get_type ())
#define FOLKS_ROLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_ROLE, FolksRole))
#define FOLKS_ROLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_ROLE, FolksRoleClass))
#define FOLKS_IS_ROLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_ROLE))
#define FOLKS_IS_ROLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_ROLE))
#define FOLKS_ROLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_ROLE, FolksRoleClass))

typedef struct _FolksRole FolksRole;
typedef struct _FolksRoleClass FolksRoleClass;

#define FOLKS_TYPE_POSTAL_ADDRESS (folks_postal_address_get_type ())
#define FOLKS_POSTAL_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_POSTAL_ADDRESS, FolksPostalAddress))
#define FOLKS_POSTAL_ADDRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_POSTAL_ADDRESS, FolksPostalAddressClass))
#define FOLKS_IS_POSTAL_ADDRESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_POSTAL_ADDRESS))
#define FOLKS_IS_POSTAL_ADDRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_POSTAL_ADDRESS))
#define FOLKS_POSTAL_ADDRESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_POSTAL_ADDRESS, FolksPostalAddressClass))

typedef struct _FolksPostalAddress FolksPostalAddress;
typedef struct _FolksPostalAddressClass FolksPostalAddressClass;

#define FOLKS_TYPE_PHONE_FIELD_DETAILS (folks_phone_field_details_get_type ())
#define FOLKS_PHONE_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_PHONE_FIELD_DETAILS, FolksPhoneFieldDetails))
#define FOLKS_PHONE_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_PHONE_FIELD_DETAILS, FolksPhoneFieldDetailsClass))
#define FOLKS_IS_PHONE_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_PHONE_FIELD_DETAILS))
#define FOLKS_IS_PHONE_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_PHONE_FIELD_DETAILS))
#define FOLKS_PHONE_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_PHONE_FIELD_DETAILS, FolksPhoneFieldDetailsClass))

typedef struct _FolksPhoneFieldDetails FolksPhoneFieldDetails;
typedef struct _FolksPhoneFieldDetailsClass FolksPhoneFieldDetailsClass;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _FolksQuery {
	GObject parent_instance;
	FolksQueryPrivate * priv;
};

struct _FolksQueryClass {
	GObjectClass parent_class;
	guint (*is_match) (FolksQuery* self, FolksIndividual* individual);
	gchar** (*get_match_fields) (FolksQuery* self, int* result_length1);
	void (*set_match_fields) (FolksQuery* self, gchar** value, int value_length1);
};

struct _FolksSimpleQuery {
	FolksQuery parent_instance;
	FolksSimpleQueryPrivate * priv;
};

struct _FolksSimpleQueryClass {
	FolksQueryClass parent_class;
};

struct _FolksSimpleQueryPrivate {
	gchar* _query_string;
	gchar** _query_tokens;
	gint _query_tokens_length1;
	gint __query_tokens_size_;
	gchar* _query_locale;
};


static gpointer folks_simple_query_parent_class = NULL;

GType folks_query_get_type (void) G_GNUC_CONST;
GType folks_individual_get_type (void) G_GNUC_CONST;
GType folks_simple_query_get_type (void) G_GNUC_CONST;
#define FOLKS_SIMPLE_QUERY_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_TYPE_SIMPLE_QUERY, FolksSimpleQueryPrivate))
static void _folks_simple_query_update_query_string (FolksSimpleQuery* self,
                                              const gchar* query_string,
                                              const gchar* query_locale);
const gchar* folks_simple_query_get_query_locale (FolksSimpleQuery* self);
FolksSimpleQuery* folks_simple_query_new (const gchar* query_string,
                                          gchar** match_fields,
                                          int match_fields_length1);
FolksSimpleQuery* folks_simple_query_construct (GType object_type,
                                                const gchar* query_string,
                                                gchar** match_fields,
                                                int match_fields_length1);
static gchar** _vala_array_dup6 (gchar** self,
                          int length);
static guint folks_simple_query_real_is_match (FolksQuery* base,
                                        FolksIndividual* individual);
gchar** folks_query_get_match_fields (FolksQuery* self,
                                      int* result_length1);
static guint _folks_simple_query_prop_contains_token (FolksSimpleQuery* self,
                                               FolksIndividual* individual,
                                               const gchar* individual_translit_locale,
                                               const gchar* prop_name,
                                               GParamSpec* prop_spec,
                                               const gchar* token);
static inline guint _folks_simple_query_string_matches_token (FolksSimpleQuery* self,
                                                const gchar* str,
                                                const gchar* token,
                                                const gchar* str_translit_locale);
GType folks_structured_name_get_type (void) G_GNUC_CONST;
const gchar* folks_structured_name_get_given_name (FolksStructuredName* self);
const gchar* folks_structured_name_get_family_name (FolksStructuredName* self);
const gchar* folks_structured_name_get_additional_names (FolksStructuredName* self);
GType folks_abstract_field_details_get_type (void) G_GNUC_CONST;
GType folks_abstract_field_details_get_value_type (FolksAbstractFieldDetails* self);
static guint _folks_simple_query_prop_contains_token_fd_string (FolksSimpleQuery* self,
                                                         FolksIndividual* individual,
                                                         const gchar* individual_translit_locale,
                                                         const gchar* prop_name,
                                                         GParamSpec* prop_spec,
                                                         FolksAbstractFieldDetails* val,
                                                         const gchar* token);
GType folks_role_get_type (void) G_GNUC_CONST;
static guint _folks_simple_query_prop_contains_token_fd_role (FolksSimpleQuery* self,
                                                       FolksIndividual* individual,
                                                       const gchar* individual_translit_locale,
                                                       const gchar* prop_name,
                                                       GParamSpec* prop_spec,
                                                       FolksAbstractFieldDetails* val,
                                                       const gchar* token);
GType folks_postal_address_get_type (void) G_GNUC_CONST;
static guint _folks_simple_query_prop_contains_token_fd_postal_address (FolksSimpleQuery* self,
                                                                 FolksIndividual* individual,
                                                                 const gchar* individual_translit_locale,
                                                                 const gchar* prop_name,
                                                                 GParamSpec* prop_spec,
                                                                 FolksAbstractFieldDetails* val,
                                                                 const gchar* token);
GType folks_phone_field_details_get_type (void) G_GNUC_CONST;
gboolean folks_abstract_field_details_values_equal (FolksAbstractFieldDetails* self,
                                                    FolksAbstractFieldDetails* that);
FolksPhoneFieldDetails* folks_phone_field_details_new (const gchar* value,
                                                       GeeMultiMap* parameters);
FolksPhoneFieldDetails* folks_phone_field_details_construct (GType object_type,
                                                             const gchar* value,
                                                             GeeMultiMap* parameters);
gconstpointer folks_abstract_field_details_get_value (FolksAbstractFieldDetails* self);
const gchar* folks_postal_address_get_street (FolksPostalAddress* self);
const gchar* folks_postal_address_get_locality (FolksPostalAddress* self);
const gchar* folks_postal_address_get_region (FolksPostalAddress* self);
const gchar* folks_postal_address_get_country (FolksPostalAddress* self);
const gchar* folks_role_get_organisation_name (FolksRole* self);
const gchar* folks_role_get_title (FolksRole* self);
const gchar* folks_role_get_role (FolksRole* self);
const gchar* folks_simple_query_get_query_string (FolksSimpleQuery* self);
void folks_simple_query_set_query_string (FolksSimpleQuery* self,
                                          const gchar* value);
void folks_simple_query_set_query_locale (FolksSimpleQuery* self,
                                          const gchar* value);
static void folks_simple_query_finalize (GObject * obj);
static void _vala_folks_simple_query_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec);
static void _vala_folks_simple_query_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


static void
_folks_simple_query_update_query_string (FolksSimpleQuery* self,
                                         const gchar* query_string,
                                         const gchar* query_locale)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	gchar** _tmp5_;
	gchar** _tmp6_;
	gchar** _tmp7_;
	gint _tmp7__length1;
#line 94 "/run/build/folks/folks/simple-query.vala"
	g_return_if_fail (self != NULL);
#line 94 "/run/build/folks/folks/simple-query.vala"
	g_return_if_fail (query_string != NULL);
#line 97 "/run/build/folks/folks/simple-query.vala"
	_tmp0_ = g_strdup (query_string);
#line 97 "/run/build/folks/folks/simple-query.vala"
	_g_free0 (self->priv->_query_string);
#line 97 "/run/build/folks/folks/simple-query.vala"
	self->priv->_query_string = _tmp0_;
#line 98 "/run/build/folks/folks/simple-query.vala"
	_tmp1_ = g_strdup (query_locale);
#line 98 "/run/build/folks/folks/simple-query.vala"
	_g_free0 (self->priv->_query_locale);
#line 98 "/run/build/folks/folks/simple-query.vala"
	self->priv->_query_locale = _tmp1_;
#line 99 "/run/build/folks/folks/simple-query.vala"
	_tmp2_ = self->priv->_query_string;
#line 99 "/run/build/folks/folks/simple-query.vala"
	_tmp3_ = folks_simple_query_get_query_locale (self);
#line 99 "/run/build/folks/folks/simple-query.vala"
	_tmp4_ = _tmp3_;
#line 99 "/run/build/folks/folks/simple-query.vala"
	_tmp6_ = _tmp5_ = g_str_tokenize_and_fold (_tmp2_, _tmp4_, NULL);
#line 99 "/run/build/folks/folks/simple-query.vala"
	self->priv->_query_tokens = (_vala_array_free (self->priv->_query_tokens, self->priv->_query_tokens_length1, (GDestroyNotify) g_free), NULL);
#line 99 "/run/build/folks/folks/simple-query.vala"
	self->priv->_query_tokens = _tmp6_;
#line 99 "/run/build/folks/folks/simple-query.vala"
	self->priv->_query_tokens_length1 = _vala_array_length (_tmp5_);
#line 99 "/run/build/folks/folks/simple-query.vala"
	self->priv->__query_tokens_size_ = self->priv->_query_tokens_length1;
#line 102 "/run/build/folks/folks/simple-query.vala"
	g_debug ("simple-query.vala:102: Created simple query with tokens:");
#line 103 "/run/build/folks/folks/simple-query.vala"
	_tmp7_ = self->priv->_query_tokens;
#line 103 "/run/build/folks/folks/simple-query.vala"
	_tmp7__length1 = self->priv->_query_tokens_length1;
#line 314 "simple-query.c"
	{
		gchar** token_collection = NULL;
		gint token_collection_length1 = 0;
		gint _token_collection_size_ = 0;
		gint token_it = 0;
#line 103 "/run/build/folks/folks/simple-query.vala"
		token_collection = _tmp7_;
#line 103 "/run/build/folks/folks/simple-query.vala"
		token_collection_length1 = _tmp7__length1;
#line 103 "/run/build/folks/folks/simple-query.vala"
		for (token_it = 0; token_it < _tmp7__length1; token_it = token_it + 1) {
#line 326 "simple-query.c"
			gchar* _tmp8_;
			gchar* token = NULL;
#line 103 "/run/build/folks/folks/simple-query.vala"
			_tmp8_ = g_strdup (token_collection[token_it]);
#line 103 "/run/build/folks/folks/simple-query.vala"
			token = _tmp8_;
#line 333 "simple-query.c"
			{
				const gchar* _tmp9_;
#line 104 "/run/build/folks/folks/simple-query.vala"
				_tmp9_ = token;
#line 104 "/run/build/folks/folks/simple-query.vala"
				g_debug ("simple-query.vala:104: \t%s", _tmp9_);
#line 103 "/run/build/folks/folks/simple-query.vala"
				_g_free0 (token);
#line 342 "simple-query.c"
			}
		}
	}
#line 107 "/run/build/folks/folks/simple-query.vala"
	g_object_freeze_notify ((GObject*) self);
#line 108 "/run/build/folks/folks/simple-query.vala"
	g_object_notify ((GObject*) self, "query-string");
#line 109 "/run/build/folks/folks/simple-query.vala"
	g_object_notify ((GObject*) self, "query-locale");
#line 110 "/run/build/folks/folks/simple-query.vala"
	g_object_thaw_notify ((GObject*) self);
#line 354 "simple-query.c"
}


/**
   * Create a simple text query.
   *
   * @param query_string text to match contacts against. Results will match all
   * tokens within the whitespace-delimited string (logical-ANDing the tokens).
   * A value of "" will match all contacts. However, it is recommended to not
   * use a query at all if filtering is not required.
   * @param match_fields the field names to apply this query to. See
   * {@link Query.match_fields} for more details. An empty array will match all
   * contacts. However, it is recommended to use the
   * {@link IndividualAggregator} directly if filtering is not required.
   * {@link PersonaDetail} and {@link PersonaStore.detail_key} for pre-defined
   * field names.
   *
   * @since 0.11.0
   */
static gchar**
_vala_array_dup6 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
#line 140 "/run/build/folks/folks/simple-query.vala"
	result = g_new0 (gchar*, length + 1);
#line 140 "/run/build/folks/folks/simple-query.vala"
	for (i = 0; i < length; i++) {
#line 384 "simple-query.c"
		gchar* _tmp0_;
#line 140 "/run/build/folks/folks/simple-query.vala"
		_tmp0_ = g_strdup (self[i]);
#line 140 "/run/build/folks/folks/simple-query.vala"
		result[i] = _tmp0_;
#line 390 "simple-query.c"
	}
#line 140 "/run/build/folks/folks/simple-query.vala"
	return result;
#line 394 "simple-query.c"
}


FolksSimpleQuery*
folks_simple_query_construct (GType object_type,
                              const gchar* query_string,
                              gchar** match_fields,
                              int match_fields_length1)
{
	FolksSimpleQuery * self = NULL;
	gchar** match_fields_safe = NULL;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gint match_fields_safe_length1;
	gint _match_fields_safe_size_;
	const gchar* _tmp1_;
#line 129 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (query_string != NULL, NULL);
#line 140 "/run/build/folks/folks/simple-query.vala"
	_tmp0_ = (match_fields != NULL) ? _vala_array_dup6 (match_fields, match_fields_length1) : ((gpointer) match_fields);
#line 140 "/run/build/folks/folks/simple-query.vala"
	_tmp0__length1 = match_fields_length1;
#line 140 "/run/build/folks/folks/simple-query.vala"
	match_fields_safe = _tmp0_;
#line 140 "/run/build/folks/folks/simple-query.vala"
	match_fields_safe_length1 = _tmp0__length1;
#line 140 "/run/build/folks/folks/simple-query.vala"
	_match_fields_safe_size_ = match_fields_safe_length1;
#line 142 "/run/build/folks/folks/simple-query.vala"
	_tmp1_ = setlocale (LC_ALL, NULL);
#line 142 "/run/build/folks/folks/simple-query.vala"
	self = (FolksSimpleQuery*) g_object_new (object_type, "query-string", query_string, "match-fields", match_fields_safe, "query-locale", _tmp1_, NULL);
#line 129 "/run/build/folks/folks/simple-query.vala"
	match_fields_safe = (_vala_array_free (match_fields_safe, match_fields_safe_length1, (GDestroyNotify) g_free), NULL);
#line 129 "/run/build/folks/folks/simple-query.vala"
	return self;
#line 431 "simple-query.c"
}


FolksSimpleQuery*
folks_simple_query_new (const gchar* query_string,
                        gchar** match_fields,
                        int match_fields_length1)
{
#line 129 "/run/build/folks/folks/simple-query.vala"
	return folks_simple_query_construct (FOLKS_TYPE_SIMPLE_QUERY, query_string, match_fields, match_fields_length1);
#line 442 "simple-query.c"
}


/**
   * {@inheritDoc}
   *
   * @since 0.11.0
   */
static gpointer
_g_param_spec_ref0 (gpointer self)
{
#line 179 "/run/build/folks/folks/simple-query.vala"
	return self ? g_param_spec_ref (self) : NULL;
#line 456 "simple-query.c"
}


static guint
folks_simple_query_real_is_match (FolksQuery* base,
                                  FolksIndividual* individual)
{
	FolksSimpleQuery * self;
	guint result = 0U;
	gboolean _tmp0_ = FALSE;
	gchar** _tmp1_;
	gint _tmp1__length1;
	GeeHashSet* tokens_remaining = NULL;
	GeeHashSet* _tmp4_;
	gchar** _tmp5_;
	gint _tmp5__length1;
	gchar* individual_translit_locale = NULL;
	guint match_score = 0U;
	gchar** _tmp9_;
	gint _tmp9__length1;
	gchar** _tmp10_;
	gint _tmp10__length1;
	GeeHashSet* _tmp35_;
	gint _tmp36_;
	gint _tmp37_;
#line 152 "/run/build/folks/folks/simple-query.vala"
	self = (FolksSimpleQuery*) base;
#line 152 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (individual != NULL, 0U);
#line 155 "/run/build/folks/folks/simple-query.vala"
	_tmp1_ = self->priv->_query_tokens;
#line 155 "/run/build/folks/folks/simple-query.vala"
	_tmp1__length1 = self->priv->_query_tokens_length1;
#line 155 "/run/build/folks/folks/simple-query.vala"
	if (_tmp1__length1 < 1) {
#line 155 "/run/build/folks/folks/simple-query.vala"
		_tmp0_ = TRUE;
#line 494 "simple-query.c"
	} else {
		gchar** _tmp2_;
		gint _tmp2__length1;
		gchar** _tmp3_;
		gint _tmp3__length1;
#line 155 "/run/build/folks/folks/simple-query.vala"
		_tmp2_ = folks_query_get_match_fields ((FolksQuery*) self, &_tmp2__length1);
#line 155 "/run/build/folks/folks/simple-query.vala"
		_tmp3_ = _tmp2_;
#line 155 "/run/build/folks/folks/simple-query.vala"
		_tmp3__length1 = _tmp2__length1;
#line 155 "/run/build/folks/folks/simple-query.vala"
		_tmp0_ = _tmp3__length1 < 1;
#line 508 "simple-query.c"
	}
#line 155 "/run/build/folks/folks/simple-query.vala"
	if (_tmp0_) {
#line 156 "/run/build/folks/folks/simple-query.vala"
		result = (guint) 1;
#line 156 "/run/build/folks/folks/simple-query.vala"
		return result;
#line 516 "simple-query.c"
	}
#line 159 "/run/build/folks/folks/simple-query.vala"
	_tmp4_ = gee_hash_set_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, NULL, NULL, NULL, NULL, NULL, NULL);
#line 159 "/run/build/folks/folks/simple-query.vala"
	tokens_remaining = _tmp4_;
#line 161 "/run/build/folks/folks/simple-query.vala"
	_tmp5_ = self->priv->_query_tokens;
#line 161 "/run/build/folks/folks/simple-query.vala"
	_tmp5__length1 = self->priv->_query_tokens_length1;
#line 526 "simple-query.c"
	{
		gchar** t_collection = NULL;
		gint t_collection_length1 = 0;
		gint _t_collection_size_ = 0;
		gint t_it = 0;
#line 161 "/run/build/folks/folks/simple-query.vala"
		t_collection = _tmp5_;
#line 161 "/run/build/folks/folks/simple-query.vala"
		t_collection_length1 = _tmp5__length1;
#line 161 "/run/build/folks/folks/simple-query.vala"
		for (t_it = 0; t_it < _tmp5__length1; t_it = t_it + 1) {
#line 538 "simple-query.c"
			gchar* _tmp6_;
			gchar* t = NULL;
#line 161 "/run/build/folks/folks/simple-query.vala"
			_tmp6_ = g_strdup (t_collection[t_it]);
#line 161 "/run/build/folks/folks/simple-query.vala"
			t = _tmp6_;
#line 545 "simple-query.c"
			{
				GeeHashSet* _tmp7_;
				const gchar* _tmp8_;
#line 162 "/run/build/folks/folks/simple-query.vala"
				_tmp7_ = tokens_remaining;
#line 162 "/run/build/folks/folks/simple-query.vala"
				_tmp8_ = t;
#line 162 "/run/build/folks/folks/simple-query.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp7_, _tmp8_);
#line 161 "/run/build/folks/folks/simple-query.vala"
				_g_free0 (t);
#line 557 "simple-query.c"
			}
		}
	}
#line 166 "/run/build/folks/folks/simple-query.vala"
	individual_translit_locale = NULL;
#line 174 "/run/build/folks/folks/simple-query.vala"
	match_score = (guint) 0;
#line 176 "/run/build/folks/folks/simple-query.vala"
	_tmp9_ = folks_query_get_match_fields ((FolksQuery*) self, &_tmp9__length1);
#line 176 "/run/build/folks/folks/simple-query.vala"
	_tmp10_ = _tmp9_;
#line 176 "/run/build/folks/folks/simple-query.vala"
	_tmp10__length1 = _tmp9__length1;
#line 571 "simple-query.c"
	{
		gchar** prop_name_collection = NULL;
		gint prop_name_collection_length1 = 0;
		gint _prop_name_collection_size_ = 0;
		gint prop_name_it = 0;
#line 176 "/run/build/folks/folks/simple-query.vala"
		prop_name_collection = _tmp10_;
#line 176 "/run/build/folks/folks/simple-query.vala"
		prop_name_collection_length1 = _tmp10__length1;
#line 176 "/run/build/folks/folks/simple-query.vala"
		for (prop_name_it = 0; prop_name_it < _tmp10__length1; prop_name_it = prop_name_it + 1) {
#line 583 "simple-query.c"
			gchar* _tmp11_;
			gchar* prop_name = NULL;
#line 176 "/run/build/folks/folks/simple-query.vala"
			_tmp11_ = g_strdup (prop_name_collection[prop_name_it]);
#line 176 "/run/build/folks/folks/simple-query.vala"
			prop_name = _tmp11_;
#line 590 "simple-query.c"
			{
				GObjectClass* iclass = NULL;
				GObjectClass* _tmp12_;
				GParamSpec* prop_spec = NULL;
				GObjectClass* _tmp13_;
				const gchar* _tmp14_;
				GParamSpec* _tmp15_;
				GParamSpec* _tmp16_;
				GParamSpec* _tmp17_;
#line 178 "/run/build/folks/folks/simple-query.vala"
				_tmp12_ = G_OBJECT_GET_CLASS ((GObject*) individual);
#line 178 "/run/build/folks/folks/simple-query.vala"
				iclass = _tmp12_;
#line 179 "/run/build/folks/folks/simple-query.vala"
				_tmp13_ = iclass;
#line 179 "/run/build/folks/folks/simple-query.vala"
				_tmp14_ = prop_name;
#line 179 "/run/build/folks/folks/simple-query.vala"
				_tmp15_ = g_object_class_find_property (_tmp13_, _tmp14_);
#line 179 "/run/build/folks/folks/simple-query.vala"
				_tmp16_ = _g_param_spec_ref0 (_tmp15_);
#line 179 "/run/build/folks/folks/simple-query.vala"
				prop_spec = _tmp16_;
#line 180 "/run/build/folks/folks/simple-query.vala"
				_tmp17_ = prop_spec;
#line 180 "/run/build/folks/folks/simple-query.vala"
				if (_tmp17_ == NULL) {
#line 618 "simple-query.c"
					const gchar* _tmp18_;
#line 182 "/run/build/folks/folks/simple-query.vala"
					_tmp18_ = prop_name;
#line 182 "/run/build/folks/folks/simple-query.vala"
					g_warning ("simple-query.vala:182: Folks.Individual does not contain property '%s'", _tmp18_);
#line 624 "simple-query.c"
				} else {
					GeeIterator* iter = NULL;
					GeeHashSet* _tmp19_;
					GeeIterator* _tmp20_;
#line 187 "/run/build/folks/folks/simple-query.vala"
					_tmp19_ = tokens_remaining;
#line 187 "/run/build/folks/folks/simple-query.vala"
					_tmp20_ = gee_abstract_collection_iterator ((GeeAbstractCollection*) _tmp19_);
#line 187 "/run/build/folks/folks/simple-query.vala"
					iter = _tmp20_;
#line 188 "/run/build/folks/folks/simple-query.vala"
					while (TRUE) {
#line 637 "simple-query.c"
						GeeIterator* _tmp21_;
						gchar* token = NULL;
						GeeIterator* _tmp22_;
						gpointer _tmp23_;
						guint inc = 0U;
						const gchar* _tmp24_;
						const gchar* _tmp25_;
						GParamSpec* _tmp26_;
						const gchar* _tmp27_;
						guint _tmp28_;
						guint _tmp29_;
						guint _tmp30_;
#line 188 "/run/build/folks/folks/simple-query.vala"
						_tmp21_ = iter;
#line 188 "/run/build/folks/folks/simple-query.vala"
						if (!gee_iterator_next (_tmp21_)) {
#line 188 "/run/build/folks/folks/simple-query.vala"
							break;
#line 656 "simple-query.c"
						}
#line 190 "/run/build/folks/folks/simple-query.vala"
						_tmp22_ = iter;
#line 190 "/run/build/folks/folks/simple-query.vala"
						_tmp23_ = gee_iterator_get (_tmp22_);
#line 190 "/run/build/folks/folks/simple-query.vala"
						token = (gchar*) _tmp23_;
#line 191 "/run/build/folks/folks/simple-query.vala"
						_tmp24_ = individual_translit_locale;
#line 191 "/run/build/folks/folks/simple-query.vala"
						_tmp25_ = prop_name;
#line 191 "/run/build/folks/folks/simple-query.vala"
						_tmp26_ = prop_spec;
#line 191 "/run/build/folks/folks/simple-query.vala"
						_tmp27_ = token;
#line 191 "/run/build/folks/folks/simple-query.vala"
						inc = _folks_simple_query_prop_contains_token (self, individual, _tmp24_, _tmp25_, _tmp26_, _tmp27_);
#line 193 "/run/build/folks/folks/simple-query.vala"
						_tmp28_ = match_score;
#line 193 "/run/build/folks/folks/simple-query.vala"
						_tmp29_ = inc;
#line 193 "/run/build/folks/folks/simple-query.vala"
						match_score = _tmp28_ + _tmp29_;
#line 195 "/run/build/folks/folks/simple-query.vala"
						_tmp30_ = inc;
#line 195 "/run/build/folks/folks/simple-query.vala"
						if (_tmp30_ > ((guint) 0)) {
#line 684 "simple-query.c"
							GeeIterator* _tmp31_;
							GeeHashSet* _tmp32_;
							gint _tmp33_;
							gint _tmp34_;
#line 197 "/run/build/folks/folks/simple-query.vala"
							_tmp31_ = iter;
#line 197 "/run/build/folks/folks/simple-query.vala"
							gee_iterator_remove (_tmp31_);
#line 198 "/run/build/folks/folks/simple-query.vala"
							_tmp32_ = tokens_remaining;
#line 198 "/run/build/folks/folks/simple-query.vala"
							_tmp33_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp32_);
#line 198 "/run/build/folks/folks/simple-query.vala"
							_tmp34_ = _tmp33_;
#line 198 "/run/build/folks/folks/simple-query.vala"
							if (_tmp34_ == 0) {
#line 199 "/run/build/folks/folks/simple-query.vala"
								result = match_score;
#line 199 "/run/build/folks/folks/simple-query.vala"
								_g_free0 (token);
#line 199 "/run/build/folks/folks/simple-query.vala"
								_g_object_unref0 (iter);
#line 199 "/run/build/folks/folks/simple-query.vala"
								_g_param_spec_unref0 (prop_spec);
#line 199 "/run/build/folks/folks/simple-query.vala"
								_g_free0 (prop_name);
#line 199 "/run/build/folks/folks/simple-query.vala"
								_g_free0 (individual_translit_locale);
#line 199 "/run/build/folks/folks/simple-query.vala"
								_g_object_unref0 (tokens_remaining);
#line 199 "/run/build/folks/folks/simple-query.vala"
								return result;
#line 717 "simple-query.c"
							}
						}
#line 188 "/run/build/folks/folks/simple-query.vala"
						_g_free0 (token);
#line 722 "simple-query.c"
					}
#line 180 "/run/build/folks/folks/simple-query.vala"
					_g_object_unref0 (iter);
#line 726 "simple-query.c"
				}
#line 176 "/run/build/folks/folks/simple-query.vala"
				_g_param_spec_unref0 (prop_spec);
#line 176 "/run/build/folks/folks/simple-query.vala"
				_g_free0 (prop_name);
#line 732 "simple-query.c"
			}
		}
	}
#line 206 "/run/build/folks/folks/simple-query.vala"
	_tmp35_ = tokens_remaining;
#line 206 "/run/build/folks/folks/simple-query.vala"
	_tmp36_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp35_);
#line 206 "/run/build/folks/folks/simple-query.vala"
	_tmp37_ = _tmp36_;
#line 206 "/run/build/folks/folks/simple-query.vala"
	_vala_assert (_tmp37_ > 0, "tokens_remaining.size > 0");
#line 207 "/run/build/folks/folks/simple-query.vala"
	result = (guint) 0;
#line 207 "/run/build/folks/folks/simple-query.vala"
	_g_free0 (individual_translit_locale);
#line 207 "/run/build/folks/folks/simple-query.vala"
	_g_object_unref0 (tokens_remaining);
#line 207 "/run/build/folks/folks/simple-query.vala"
	return result;
#line 752 "simple-query.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 280 "/run/build/folks/folks/simple-query.vala"
	return self ? g_object_ref (self) : NULL;
#line 761 "simple-query.c"
}


static guint
_folks_simple_query_prop_contains_token (FolksSimpleQuery* self,
                                         FolksIndividual* individual,
                                         const gchar* individual_translit_locale,
                                         const gchar* prop_name,
                                         GParamSpec* prop_spec,
                                         const gchar* token)
{
	guint result = 0U;
#line 214 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (self != NULL, 0U);
#line 214 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (individual != NULL, 0U);
#line 214 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (prop_name != NULL, 0U);
#line 214 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (prop_spec != NULL, 0U);
#line 214 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (token != NULL, 0U);
#line 225 "/run/build/folks/folks/simple-query.vala"
	if (FALSE) {
#line 786 "simple-query.c"
	} else {
		GType _tmp0_;
#line 226 "/run/build/folks/folks/simple-query.vala"
		_tmp0_ = prop_spec->value_type;
#line 226 "/run/build/folks/folks/simple-query.vala"
		if (_tmp0_ == G_TYPE_STRING) {
#line 793 "simple-query.c"
			gchar* prop_value = NULL;
			gboolean _tmp1_ = FALSE;
			const gchar* _tmp2_;
			guint score = 0U;
			const gchar* _tmp4_;
			guint _tmp5_;
#line 229 "/run/build/folks/folks/simple-query.vala"
			g_object_get ((GObject*) individual, prop_name, &prop_value, NULL);
#line 231 "/run/build/folks/folks/simple-query.vala"
			_tmp2_ = prop_value;
#line 231 "/run/build/folks/folks/simple-query.vala"
			if (_tmp2_ == NULL) {
#line 231 "/run/build/folks/folks/simple-query.vala"
				_tmp1_ = TRUE;
#line 808 "simple-query.c"
			} else {
				const gchar* _tmp3_;
#line 231 "/run/build/folks/folks/simple-query.vala"
				_tmp3_ = prop_value;
#line 231 "/run/build/folks/folks/simple-query.vala"
				_tmp1_ = g_strcmp0 (_tmp3_, "") == 0;
#line 815 "simple-query.c"
			}
#line 231 "/run/build/folks/folks/simple-query.vala"
			if (_tmp1_) {
#line 232 "/run/build/folks/folks/simple-query.vala"
				result = (guint) 0;
#line 232 "/run/build/folks/folks/simple-query.vala"
				_g_free0 (prop_value);
#line 232 "/run/build/folks/folks/simple-query.vala"
				return result;
#line 825 "simple-query.c"
			}
#line 234 "/run/build/folks/folks/simple-query.vala"
			_tmp4_ = prop_value;
#line 234 "/run/build/folks/folks/simple-query.vala"
			score = _folks_simple_query_string_matches_token (self, _tmp4_, token, individual_translit_locale);
#line 236 "/run/build/folks/folks/simple-query.vala"
			_tmp5_ = score;
#line 236 "/run/build/folks/folks/simple-query.vala"
			if (_tmp5_ > ((guint) 0)) {
#line 835 "simple-query.c"
				gboolean _tmp6_ = FALSE;
#line 239 "/run/build/folks/folks/simple-query.vala"
				if (g_strcmp0 (prop_name, "full-name") == 0) {
#line 239 "/run/build/folks/folks/simple-query.vala"
					_tmp6_ = TRUE;
#line 841 "simple-query.c"
				} else {
#line 239 "/run/build/folks/folks/simple-query.vala"
					_tmp6_ = g_strcmp0 (prop_name, "nickname") == 0;
#line 845 "simple-query.c"
				}
#line 239 "/run/build/folks/folks/simple-query.vala"
				if (_tmp6_) {
#line 849 "simple-query.c"
					guint _tmp7_;
#line 240 "/run/build/folks/folks/simple-query.vala"
					_tmp7_ = score;
#line 240 "/run/build/folks/folks/simple-query.vala"
					result = _tmp7_ * 10;
#line 240 "/run/build/folks/folks/simple-query.vala"
					_g_free0 (prop_value);
#line 240 "/run/build/folks/folks/simple-query.vala"
					return result;
#line 859 "simple-query.c"
				} else {
					guint _tmp8_;
#line 242 "/run/build/folks/folks/simple-query.vala"
					_tmp8_ = score;
#line 242 "/run/build/folks/folks/simple-query.vala"
					result = _tmp8_ * 2;
#line 242 "/run/build/folks/folks/simple-query.vala"
					_g_free0 (prop_value);
#line 242 "/run/build/folks/folks/simple-query.vala"
					return result;
#line 870 "simple-query.c"
				}
			}
#line 226 "/run/build/folks/folks/simple-query.vala"
			_g_free0 (prop_value);
#line 875 "simple-query.c"
		} else {
			GType _tmp9_;
#line 245 "/run/build/folks/folks/simple-query.vala"
			_tmp9_ = prop_spec->value_type;
#line 245 "/run/build/folks/folks/simple-query.vala"
			if (_tmp9_ == FOLKS_TYPE_STRUCTURED_NAME) {
#line 882 "simple-query.c"
				FolksStructuredName* prop_value = NULL;
				FolksStructuredName* _tmp10_;
				guint score = 0U;
				FolksStructuredName* _tmp11_;
				const gchar* _tmp12_;
				const gchar* _tmp13_;
				guint _tmp14_;
				FolksStructuredName* _tmp16_;
				const gchar* _tmp17_;
				const gchar* _tmp18_;
				guint _tmp19_;
				FolksStructuredName* _tmp21_;
				const gchar* _tmp22_;
				const gchar* _tmp23_;
				guint _tmp24_;
#line 248 "/run/build/folks/folks/simple-query.vala"
				g_object_get ((GObject*) individual, prop_name, &prop_value, NULL);
#line 250 "/run/build/folks/folks/simple-query.vala"
				_tmp10_ = prop_value;
#line 250 "/run/build/folks/folks/simple-query.vala"
				if (_tmp10_ == NULL) {
#line 251 "/run/build/folks/folks/simple-query.vala"
					result = (guint) 0;
#line 251 "/run/build/folks/folks/simple-query.vala"
					_g_object_unref0 (prop_value);
#line 251 "/run/build/folks/folks/simple-query.vala"
					return result;
#line 910 "simple-query.c"
				}
#line 253 "/run/build/folks/folks/simple-query.vala"
				_tmp11_ = prop_value;
#line 253 "/run/build/folks/folks/simple-query.vala"
				_tmp12_ = folks_structured_name_get_given_name (_tmp11_);
#line 253 "/run/build/folks/folks/simple-query.vala"
				_tmp13_ = _tmp12_;
#line 253 "/run/build/folks/folks/simple-query.vala"
				score = _folks_simple_query_string_matches_token (self, _tmp13_, token, individual_translit_locale);
#line 255 "/run/build/folks/folks/simple-query.vala"
				_tmp14_ = score;
#line 255 "/run/build/folks/folks/simple-query.vala"
				if (_tmp14_ > ((guint) 0)) {
#line 924 "simple-query.c"
					guint _tmp15_;
#line 256 "/run/build/folks/folks/simple-query.vala"
					_tmp15_ = score;
#line 256 "/run/build/folks/folks/simple-query.vala"
					result = _tmp15_ * 10;
#line 256 "/run/build/folks/folks/simple-query.vala"
					_g_object_unref0 (prop_value);
#line 256 "/run/build/folks/folks/simple-query.vala"
					return result;
#line 934 "simple-query.c"
				}
#line 258 "/run/build/folks/folks/simple-query.vala"
				_tmp16_ = prop_value;
#line 258 "/run/build/folks/folks/simple-query.vala"
				_tmp17_ = folks_structured_name_get_family_name (_tmp16_);
#line 258 "/run/build/folks/folks/simple-query.vala"
				_tmp18_ = _tmp17_;
#line 258 "/run/build/folks/folks/simple-query.vala"
				score = _folks_simple_query_string_matches_token (self, _tmp18_, token, individual_translit_locale);
#line 260 "/run/build/folks/folks/simple-query.vala"
				_tmp19_ = score;
#line 260 "/run/build/folks/folks/simple-query.vala"
				if (_tmp19_ > ((guint) 0)) {
#line 948 "simple-query.c"
					guint _tmp20_;
#line 261 "/run/build/folks/folks/simple-query.vala"
					_tmp20_ = score;
#line 261 "/run/build/folks/folks/simple-query.vala"
					result = _tmp20_ * 10;
#line 261 "/run/build/folks/folks/simple-query.vala"
					_g_object_unref0 (prop_value);
#line 261 "/run/build/folks/folks/simple-query.vala"
					return result;
#line 958 "simple-query.c"
				}
#line 263 "/run/build/folks/folks/simple-query.vala"
				_tmp21_ = prop_value;
#line 263 "/run/build/folks/folks/simple-query.vala"
				_tmp22_ = folks_structured_name_get_additional_names (_tmp21_);
#line 263 "/run/build/folks/folks/simple-query.vala"
				_tmp23_ = _tmp22_;
#line 263 "/run/build/folks/folks/simple-query.vala"
				score = _folks_simple_query_string_matches_token (self, _tmp23_, token, individual_translit_locale);
#line 265 "/run/build/folks/folks/simple-query.vala"
				_tmp24_ = score;
#line 265 "/run/build/folks/folks/simple-query.vala"
				if (_tmp24_ > ((guint) 0)) {
#line 972 "simple-query.c"
					guint _tmp25_;
#line 266 "/run/build/folks/folks/simple-query.vala"
					_tmp25_ = score;
#line 266 "/run/build/folks/folks/simple-query.vala"
					result = _tmp25_ * 5;
#line 266 "/run/build/folks/folks/simple-query.vala"
					_g_object_unref0 (prop_value);
#line 266 "/run/build/folks/folks/simple-query.vala"
					return result;
#line 982 "simple-query.c"
				}
#line 245 "/run/build/folks/folks/simple-query.vala"
				_g_object_unref0 (prop_value);
#line 986 "simple-query.c"
			} else {
				GType _tmp26_;
#line 270 "/run/build/folks/folks/simple-query.vala"
				_tmp26_ = prop_spec->value_type;
#line 270 "/run/build/folks/folks/simple-query.vala"
				if (_tmp26_ == GEE_TYPE_SET) {
#line 993 "simple-query.c"
					GeeSet* prop_value_set = NULL;
					gboolean _tmp27_ = FALSE;
					GeeSet* _tmp28_;
					GeeSet* _tmp32_;
					GType _tmp33_;
					GType _tmp34_;
#line 273 "/run/build/folks/folks/simple-query.vala"
					g_object_get ((GObject*) individual, prop_name, &prop_value_set, NULL);
#line 275 "/run/build/folks/folks/simple-query.vala"
					_tmp28_ = prop_value_set;
#line 275 "/run/build/folks/folks/simple-query.vala"
					if (_tmp28_ == NULL) {
#line 275 "/run/build/folks/folks/simple-query.vala"
						_tmp27_ = TRUE;
#line 1008 "simple-query.c"
					} else {
						GeeSet* _tmp29_;
						gboolean _tmp30_;
						gboolean _tmp31_;
#line 275 "/run/build/folks/folks/simple-query.vala"
						_tmp29_ = prop_value_set;
#line 275 "/run/build/folks/folks/simple-query.vala"
						_tmp30_ = gee_collection_get_is_empty ((GeeCollection*) _tmp29_);
#line 275 "/run/build/folks/folks/simple-query.vala"
						_tmp31_ = _tmp30_;
#line 275 "/run/build/folks/folks/simple-query.vala"
						_tmp27_ = _tmp31_;
#line 1021 "simple-query.c"
					}
#line 275 "/run/build/folks/folks/simple-query.vala"
					if (_tmp27_) {
#line 276 "/run/build/folks/folks/simple-query.vala"
						result = (guint) 0;
#line 276 "/run/build/folks/folks/simple-query.vala"
						_g_object_unref0 (prop_value_set);
#line 276 "/run/build/folks/folks/simple-query.vala"
						return result;
#line 1031 "simple-query.c"
					}
#line 278 "/run/build/folks/folks/simple-query.vala"
					_tmp32_ = prop_value_set;
#line 278 "/run/build/folks/folks/simple-query.vala"
					_tmp33_ = gee_traversable_get_element_type ((GeeTraversable*) _tmp32_);
#line 278 "/run/build/folks/folks/simple-query.vala"
					_tmp34_ = _tmp33_;
#line 278 "/run/build/folks/folks/simple-query.vala"
					if (g_type_is_a (_tmp34_, FOLKS_TYPE_ABSTRACT_FIELD_DETAILS)) {
#line 1041 "simple-query.c"
						GeeSet* prop_value_afd = NULL;
						GeeSet* _tmp35_;
						GeeSet* _tmp36_;
#line 280 "/run/build/folks/folks/simple-query.vala"
						_tmp35_ = prop_value_set;
#line 280 "/run/build/folks/folks/simple-query.vala"
						_tmp36_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp35_, GEE_TYPE_SET) ? ((GeeSet*) _tmp35_) : NULL);
#line 280 "/run/build/folks/folks/simple-query.vala"
						prop_value_afd = _tmp36_;
#line 1051 "simple-query.c"
						{
							GeeIterator* _val_it = NULL;
							GeeSet* _tmp37_;
							GeeIterator* _tmp38_;
#line 282 "/run/build/folks/folks/simple-query.vala"
							_tmp37_ = prop_value_afd;
#line 282 "/run/build/folks/folks/simple-query.vala"
							_tmp38_ = gee_iterable_iterator ((GeeIterable*) _tmp37_);
#line 282 "/run/build/folks/folks/simple-query.vala"
							_val_it = _tmp38_;
#line 282 "/run/build/folks/folks/simple-query.vala"
							while (TRUE) {
#line 1064 "simple-query.c"
								GeeIterator* _tmp39_;
								FolksAbstractFieldDetails* val = NULL;
								GeeIterator* _tmp40_;
								gpointer _tmp41_;
								FolksAbstractFieldDetails* _tmp42_;
								GType _tmp43_;
								GType _tmp44_;
#line 282 "/run/build/folks/folks/simple-query.vala"
								_tmp39_ = _val_it;
#line 282 "/run/build/folks/folks/simple-query.vala"
								if (!gee_iterator_next (_tmp39_)) {
#line 282 "/run/build/folks/folks/simple-query.vala"
									break;
#line 1078 "simple-query.c"
								}
#line 282 "/run/build/folks/folks/simple-query.vala"
								_tmp40_ = _val_it;
#line 282 "/run/build/folks/folks/simple-query.vala"
								_tmp41_ = gee_iterator_get (_tmp40_);
#line 282 "/run/build/folks/folks/simple-query.vala"
								val = (FolksAbstractFieldDetails*) _tmp41_;
#line 284 "/run/build/folks/folks/simple-query.vala"
								_tmp42_ = val;
#line 284 "/run/build/folks/folks/simple-query.vala"
								_tmp43_ = folks_abstract_field_details_get_value_type (_tmp42_);
#line 284 "/run/build/folks/folks/simple-query.vala"
								_tmp44_ = _tmp43_;
#line 284 "/run/build/folks/folks/simple-query.vala"
								if (_tmp44_ == G_TYPE_STRING) {
#line 1094 "simple-query.c"
									guint score = 0U;
									FolksAbstractFieldDetails* _tmp45_;
									guint _tmp46_;
#line 287 "/run/build/folks/folks/simple-query.vala"
									_tmp45_ = val;
#line 287 "/run/build/folks/folks/simple-query.vala"
									score = _folks_simple_query_prop_contains_token_fd_string (self, individual, individual_translit_locale, prop_name, prop_spec, _tmp45_, token);
#line 290 "/run/build/folks/folks/simple-query.vala"
									_tmp46_ = score;
#line 290 "/run/build/folks/folks/simple-query.vala"
									if (_tmp46_ > ((guint) 0)) {
#line 292 "/run/build/folks/folks/simple-query.vala"
										if (g_strcmp0 (prop_name, "email-addresses") == 0) {
#line 1108 "simple-query.c"
											guint _tmp47_;
#line 293 "/run/build/folks/folks/simple-query.vala"
											_tmp47_ = score;
#line 293 "/run/build/folks/folks/simple-query.vala"
											result = _tmp47_ * 4;
#line 293 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (val);
#line 293 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (_val_it);
#line 293 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (prop_value_afd);
#line 293 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (prop_value_set);
#line 293 "/run/build/folks/folks/simple-query.vala"
											return result;
#line 1124 "simple-query.c"
										} else {
											guint _tmp48_;
#line 295 "/run/build/folks/folks/simple-query.vala"
											_tmp48_ = score;
#line 295 "/run/build/folks/folks/simple-query.vala"
											result = _tmp48_ * 2;
#line 295 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (val);
#line 295 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (_val_it);
#line 295 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (prop_value_afd);
#line 295 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (prop_value_set);
#line 295 "/run/build/folks/folks/simple-query.vala"
											return result;
#line 1141 "simple-query.c"
										}
									}
								} else {
									FolksAbstractFieldDetails* _tmp49_;
									GType _tmp50_;
									GType _tmp51_;
#line 298 "/run/build/folks/folks/simple-query.vala"
									_tmp49_ = val;
#line 298 "/run/build/folks/folks/simple-query.vala"
									_tmp50_ = folks_abstract_field_details_get_value_type (_tmp49_);
#line 298 "/run/build/folks/folks/simple-query.vala"
									_tmp51_ = _tmp50_;
#line 298 "/run/build/folks/folks/simple-query.vala"
									if (_tmp51_ == FOLKS_TYPE_ROLE) {
#line 1156 "simple-query.c"
										guint score = 0U;
										FolksAbstractFieldDetails* _tmp52_;
										guint _tmp53_;
#line 301 "/run/build/folks/folks/simple-query.vala"
										_tmp52_ = val;
#line 301 "/run/build/folks/folks/simple-query.vala"
										score = _folks_simple_query_prop_contains_token_fd_role (self, individual, individual_translit_locale, prop_name, prop_spec, _tmp52_, token);
#line 304 "/run/build/folks/folks/simple-query.vala"
										_tmp53_ = score;
#line 304 "/run/build/folks/folks/simple-query.vala"
										if (_tmp53_ > ((guint) 0)) {
#line 1168 "simple-query.c"
											guint _tmp54_;
#line 306 "/run/build/folks/folks/simple-query.vala"
											_tmp54_ = score;
#line 306 "/run/build/folks/folks/simple-query.vala"
											result = _tmp54_ * 1;
#line 306 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (val);
#line 306 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (_val_it);
#line 306 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (prop_value_afd);
#line 306 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (prop_value_set);
#line 306 "/run/build/folks/folks/simple-query.vala"
											return result;
#line 1184 "simple-query.c"
										}
									} else {
										FolksAbstractFieldDetails* _tmp55_;
										GType _tmp56_;
										GType _tmp57_;
#line 309 "/run/build/folks/folks/simple-query.vala"
										_tmp55_ = val;
#line 309 "/run/build/folks/folks/simple-query.vala"
										_tmp56_ = folks_abstract_field_details_get_value_type (_tmp55_);
#line 309 "/run/build/folks/folks/simple-query.vala"
										_tmp57_ = _tmp56_;
#line 309 "/run/build/folks/folks/simple-query.vala"
										if (_tmp57_ == FOLKS_TYPE_POSTAL_ADDRESS) {
#line 1198 "simple-query.c"
											guint score = 0U;
											FolksAbstractFieldDetails* _tmp58_;
											guint _tmp59_;
#line 312 "/run/build/folks/folks/simple-query.vala"
											_tmp58_ = val;
#line 312 "/run/build/folks/folks/simple-query.vala"
											score = _folks_simple_query_prop_contains_token_fd_postal_address (self, individual, individual_translit_locale, prop_name, prop_spec, _tmp58_, token);
#line 315 "/run/build/folks/folks/simple-query.vala"
											_tmp59_ = score;
#line 315 "/run/build/folks/folks/simple-query.vala"
											if (_tmp59_ > ((guint) 0)) {
#line 1210 "simple-query.c"
												guint _tmp60_;
#line 317 "/run/build/folks/folks/simple-query.vala"
												_tmp60_ = score;
#line 317 "/run/build/folks/folks/simple-query.vala"
												result = _tmp60_ * 3;
#line 317 "/run/build/folks/folks/simple-query.vala"
												_g_object_unref0 (val);
#line 317 "/run/build/folks/folks/simple-query.vala"
												_g_object_unref0 (_val_it);
#line 317 "/run/build/folks/folks/simple-query.vala"
												_g_object_unref0 (prop_value_afd);
#line 317 "/run/build/folks/folks/simple-query.vala"
												_g_object_unref0 (prop_value_set);
#line 317 "/run/build/folks/folks/simple-query.vala"
												return result;
#line 1226 "simple-query.c"
											}
										} else {
											FolksAbstractFieldDetails* _tmp61_;
											GType _tmp62_;
											GType _tmp63_;
											const gchar* _tmp64_;
#line 322 "/run/build/folks/folks/simple-query.vala"
											_tmp61_ = val;
#line 322 "/run/build/folks/folks/simple-query.vala"
											_tmp62_ = folks_abstract_field_details_get_value_type (_tmp61_);
#line 322 "/run/build/folks/folks/simple-query.vala"
											_tmp63_ = _tmp62_;
#line 322 "/run/build/folks/folks/simple-query.vala"
											_tmp64_ = g_type_name (_tmp63_);
#line 322 "/run/build/folks/folks/simple-query.vala"
											g_warning ("Cannot check for match in detail type " "Gee.Set<AbstractFieldDetails<%s>>", _tmp64_);
#line 325 "/run/build/folks/folks/simple-query.vala"
											result = (guint) 0;
#line 325 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (val);
#line 325 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (_val_it);
#line 325 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (prop_value_afd);
#line 325 "/run/build/folks/folks/simple-query.vala"
											_g_object_unref0 (prop_value_set);
#line 325 "/run/build/folks/folks/simple-query.vala"
											return result;
#line 1255 "simple-query.c"
										}
									}
								}
#line 282 "/run/build/folks/folks/simple-query.vala"
								_g_object_unref0 (val);
#line 1261 "simple-query.c"
							}
#line 282 "/run/build/folks/folks/simple-query.vala"
							_g_object_unref0 (_val_it);
#line 1265 "simple-query.c"
						}
#line 278 "/run/build/folks/folks/simple-query.vala"
						_g_object_unref0 (prop_value_afd);
#line 1269 "simple-query.c"
					} else {
						GeeSet* _tmp65_;
						GType _tmp66_;
						GType _tmp67_;
#line 329 "/run/build/folks/folks/simple-query.vala"
						_tmp65_ = prop_value_set;
#line 329 "/run/build/folks/folks/simple-query.vala"
						_tmp66_ = gee_traversable_get_element_type ((GeeTraversable*) _tmp65_);
#line 329 "/run/build/folks/folks/simple-query.vala"
						_tmp67_ = _tmp66_;
#line 329 "/run/build/folks/folks/simple-query.vala"
						if (_tmp67_ == G_TYPE_STRING) {
#line 1282 "simple-query.c"
							GeeSet* prop_value_string = NULL;
							GeeSet* _tmp68_;
							GeeSet* _tmp69_;
#line 332 "/run/build/folks/folks/simple-query.vala"
							_tmp68_ = prop_value_set;
#line 332 "/run/build/folks/folks/simple-query.vala"
							_tmp69_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp68_, GEE_TYPE_SET) ? ((GeeSet*) _tmp68_) : NULL);
#line 332 "/run/build/folks/folks/simple-query.vala"
							prop_value_string = _tmp69_;
#line 1292 "simple-query.c"
							{
								GeeIterator* _val_it = NULL;
								GeeSet* _tmp70_;
								GeeIterator* _tmp71_;
#line 333 "/run/build/folks/folks/simple-query.vala"
								_tmp70_ = prop_value_string;
#line 333 "/run/build/folks/folks/simple-query.vala"
								_tmp71_ = gee_iterable_iterator ((GeeIterable*) _tmp70_);
#line 333 "/run/build/folks/folks/simple-query.vala"
								_val_it = _tmp71_;
#line 333 "/run/build/folks/folks/simple-query.vala"
								while (TRUE) {
#line 1305 "simple-query.c"
									GeeIterator* _tmp72_;
									gchar* val = NULL;
									GeeIterator* _tmp73_;
									gpointer _tmp74_;
									gboolean _tmp75_ = FALSE;
									const gchar* _tmp76_;
									guint score = 0U;
									const gchar* _tmp78_;
									guint _tmp79_;
#line 333 "/run/build/folks/folks/simple-query.vala"
									_tmp72_ = _val_it;
#line 333 "/run/build/folks/folks/simple-query.vala"
									if (!gee_iterator_next (_tmp72_)) {
#line 333 "/run/build/folks/folks/simple-query.vala"
										break;
#line 1321 "simple-query.c"
									}
#line 333 "/run/build/folks/folks/simple-query.vala"
									_tmp73_ = _val_it;
#line 333 "/run/build/folks/folks/simple-query.vala"
									_tmp74_ = gee_iterator_get (_tmp73_);
#line 333 "/run/build/folks/folks/simple-query.vala"
									val = (gchar*) _tmp74_;
#line 335 "/run/build/folks/folks/simple-query.vala"
									_tmp76_ = val;
#line 335 "/run/build/folks/folks/simple-query.vala"
									if (_tmp76_ == NULL) {
#line 335 "/run/build/folks/folks/simple-query.vala"
										_tmp75_ = TRUE;
#line 1335 "simple-query.c"
									} else {
										const gchar* _tmp77_;
#line 335 "/run/build/folks/folks/simple-query.vala"
										_tmp77_ = val;
#line 335 "/run/build/folks/folks/simple-query.vala"
										_tmp75_ = g_strcmp0 (_tmp77_, "") == 0;
#line 1342 "simple-query.c"
									}
#line 335 "/run/build/folks/folks/simple-query.vala"
									if (_tmp75_) {
#line 336 "/run/build/folks/folks/simple-query.vala"
										_g_free0 (val);
#line 336 "/run/build/folks/folks/simple-query.vala"
										continue;
#line 1350 "simple-query.c"
									}
#line 338 "/run/build/folks/folks/simple-query.vala"
									_tmp78_ = val;
#line 338 "/run/build/folks/folks/simple-query.vala"
									score = _folks_simple_query_string_matches_token (self, _tmp78_, token, individual_translit_locale);
#line 340 "/run/build/folks/folks/simple-query.vala"
									_tmp79_ = score;
#line 340 "/run/build/folks/folks/simple-query.vala"
									if (_tmp79_ > ((guint) 0)) {
#line 1360 "simple-query.c"
										guint _tmp80_;
#line 341 "/run/build/folks/folks/simple-query.vala"
										_tmp80_ = score;
#line 341 "/run/build/folks/folks/simple-query.vala"
										result = _tmp80_ * 1;
#line 341 "/run/build/folks/folks/simple-query.vala"
										_g_free0 (val);
#line 341 "/run/build/folks/folks/simple-query.vala"
										_g_object_unref0 (_val_it);
#line 341 "/run/build/folks/folks/simple-query.vala"
										_g_object_unref0 (prop_value_string);
#line 341 "/run/build/folks/folks/simple-query.vala"
										_g_object_unref0 (prop_value_set);
#line 341 "/run/build/folks/folks/simple-query.vala"
										return result;
#line 1376 "simple-query.c"
									}
#line 333 "/run/build/folks/folks/simple-query.vala"
									_g_free0 (val);
#line 1380 "simple-query.c"
								}
#line 333 "/run/build/folks/folks/simple-query.vala"
								_g_object_unref0 (_val_it);
#line 1384 "simple-query.c"
							}
#line 329 "/run/build/folks/folks/simple-query.vala"
							_g_object_unref0 (prop_value_string);
#line 1388 "simple-query.c"
						} else {
							GeeSet* _tmp81_;
							GType _tmp82_;
							GType _tmp83_;
							const gchar* _tmp84_;
#line 346 "/run/build/folks/folks/simple-query.vala"
							_tmp81_ = prop_value_set;
#line 346 "/run/build/folks/folks/simple-query.vala"
							_tmp82_ = gee_traversable_get_element_type ((GeeTraversable*) _tmp81_);
#line 346 "/run/build/folks/folks/simple-query.vala"
							_tmp83_ = _tmp82_;
#line 346 "/run/build/folks/folks/simple-query.vala"
							_tmp84_ = g_type_name (_tmp83_);
#line 346 "/run/build/folks/folks/simple-query.vala"
							g_warning ("Cannot check for match in property ‘%s’, detail type " "Gee.Set<%s>", prop_name, _tmp84_);
#line 349 "/run/build/folks/folks/simple-query.vala"
							result = (guint) 0;
#line 349 "/run/build/folks/folks/simple-query.vala"
							_g_object_unref0 (prop_value_set);
#line 349 "/run/build/folks/folks/simple-query.vala"
							return result;
#line 1410 "simple-query.c"
						}
					}
#line 270 "/run/build/folks/folks/simple-query.vala"
					_g_object_unref0 (prop_value_set);
#line 1415 "simple-query.c"
				} else {
					GType _tmp85_;
#line 353 "/run/build/folks/folks/simple-query.vala"
					_tmp85_ = prop_spec->value_type;
#line 353 "/run/build/folks/folks/simple-query.vala"
					if (_tmp85_ == GEE_TYPE_MULTI_MAP) {
#line 1422 "simple-query.c"
						GeeMultiMap* prop_value_multi_map = NULL;
						gboolean _tmp86_ = FALSE;
						GeeMultiMap* _tmp87_;
						GType key_type = 0UL;
						GeeMultiMap* _tmp91_;
						GType _tmp92_;
						GType _tmp93_;
						GType value_type = 0UL;
						GeeMultiMap* _tmp94_;
						GType _tmp95_;
						GType _tmp96_;
						gboolean _tmp97_ = FALSE;
						GType _tmp98_;
#line 356 "/run/build/folks/folks/simple-query.vala"
						g_object_get ((GObject*) individual, prop_name, &prop_value_multi_map, NULL);
#line 358 "/run/build/folks/folks/simple-query.vala"
						_tmp87_ = prop_value_multi_map;
#line 358 "/run/build/folks/folks/simple-query.vala"
						if (_tmp87_ == NULL) {
#line 358 "/run/build/folks/folks/simple-query.vala"
							_tmp86_ = TRUE;
#line 1444 "simple-query.c"
						} else {
							GeeMultiMap* _tmp88_;
							gint _tmp89_;
							gint _tmp90_;
#line 358 "/run/build/folks/folks/simple-query.vala"
							_tmp88_ = prop_value_multi_map;
#line 358 "/run/build/folks/folks/simple-query.vala"
							_tmp89_ = gee_multi_map_get_size (_tmp88_);
#line 358 "/run/build/folks/folks/simple-query.vala"
							_tmp90_ = _tmp89_;
#line 358 "/run/build/folks/folks/simple-query.vala"
							_tmp86_ = _tmp90_ < 1;
#line 1457 "simple-query.c"
						}
#line 358 "/run/build/folks/folks/simple-query.vala"
						if (_tmp86_) {
#line 359 "/run/build/folks/folks/simple-query.vala"
							result = (guint) 0;
#line 359 "/run/build/folks/folks/simple-query.vala"
							_g_object_unref0 (prop_value_multi_map);
#line 359 "/run/build/folks/folks/simple-query.vala"
							return result;
#line 1467 "simple-query.c"
						}
#line 361 "/run/build/folks/folks/simple-query.vala"
						_tmp91_ = prop_value_multi_map;
#line 361 "/run/build/folks/folks/simple-query.vala"
						_tmp92_ = gee_multi_map_get_key_type (_tmp91_);
#line 361 "/run/build/folks/folks/simple-query.vala"
						_tmp93_ = _tmp92_;
#line 361 "/run/build/folks/folks/simple-query.vala"
						key_type = _tmp93_;
#line 362 "/run/build/folks/folks/simple-query.vala"
						_tmp94_ = prop_value_multi_map;
#line 362 "/run/build/folks/folks/simple-query.vala"
						_tmp95_ = gee_multi_map_get_value_type (_tmp94_);
#line 362 "/run/build/folks/folks/simple-query.vala"
						_tmp96_ = _tmp95_;
#line 362 "/run/build/folks/folks/simple-query.vala"
						value_type = _tmp96_;
#line 364 "/run/build/folks/folks/simple-query.vala"
						_tmp98_ = key_type;
#line 364 "/run/build/folks/folks/simple-query.vala"
						if (g_type_is_a (_tmp98_, G_TYPE_STRING)) {
#line 1489 "simple-query.c"
							GType _tmp99_;
#line 365 "/run/build/folks/folks/simple-query.vala"
							_tmp99_ = value_type;
#line 365 "/run/build/folks/folks/simple-query.vala"
							_tmp97_ = g_type_is_a (_tmp99_, FOLKS_TYPE_ABSTRACT_FIELD_DETAILS);
#line 1495 "simple-query.c"
						} else {
#line 364 "/run/build/folks/folks/simple-query.vala"
							_tmp97_ = FALSE;
#line 1499 "simple-query.c"
						}
#line 364 "/run/build/folks/folks/simple-query.vala"
						if (_tmp97_) {
#line 1503 "simple-query.c"
							GeeMultiMap* prop_value_multi_map_afd = NULL;
							GeeMultiMap* _tmp100_;
							GeeMultiMap* _tmp101_;
							GeeMapIterator* iter = NULL;
							GeeMultiMap* _tmp102_;
							GeeMapIterator* _tmp103_;
#line 367 "/run/build/folks/folks/simple-query.vala"
							_tmp100_ = prop_value_multi_map;
#line 367 "/run/build/folks/folks/simple-query.vala"
							_tmp101_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp100_, GEE_TYPE_MULTI_MAP) ? ((GeeMultiMap*) _tmp100_) : NULL);
#line 367 "/run/build/folks/folks/simple-query.vala"
							prop_value_multi_map_afd = _tmp101_;
#line 369 "/run/build/folks/folks/simple-query.vala"
							_tmp102_ = prop_value_multi_map_afd;
#line 369 "/run/build/folks/folks/simple-query.vala"
							_tmp103_ = gee_multi_map_map_iterator (_tmp102_);
#line 369 "/run/build/folks/folks/simple-query.vala"
							iter = _tmp103_;
#line 371 "/run/build/folks/folks/simple-query.vala"
							while (TRUE) {
#line 1524 "simple-query.c"
								GeeMapIterator* _tmp104_;
								FolksAbstractFieldDetails* val = NULL;
								GeeMapIterator* _tmp105_;
								gpointer _tmp106_;
								FolksAbstractFieldDetails* _tmp107_;
								GType _tmp108_;
								GType _tmp109_;
#line 371 "/run/build/folks/folks/simple-query.vala"
								_tmp104_ = iter;
#line 371 "/run/build/folks/folks/simple-query.vala"
								if (!gee_map_iterator_next (_tmp104_)) {
#line 371 "/run/build/folks/folks/simple-query.vala"
									break;
#line 1538 "simple-query.c"
								}
#line 373 "/run/build/folks/folks/simple-query.vala"
								_tmp105_ = iter;
#line 373 "/run/build/folks/folks/simple-query.vala"
								_tmp106_ = gee_map_iterator_get_value (_tmp105_);
#line 373 "/run/build/folks/folks/simple-query.vala"
								val = (FolksAbstractFieldDetails*) _tmp106_;
#line 376 "/run/build/folks/folks/simple-query.vala"
								_tmp107_ = val;
#line 376 "/run/build/folks/folks/simple-query.vala"
								_tmp108_ = folks_abstract_field_details_get_value_type (_tmp107_);
#line 376 "/run/build/folks/folks/simple-query.vala"
								_tmp109_ = _tmp108_;
#line 376 "/run/build/folks/folks/simple-query.vala"
								if (_tmp109_ == G_TYPE_STRING) {
#line 1554 "simple-query.c"
									guint score = 0U;
									FolksAbstractFieldDetails* _tmp110_;
									guint _tmp111_;
#line 378 "/run/build/folks/folks/simple-query.vala"
									_tmp110_ = val;
#line 378 "/run/build/folks/folks/simple-query.vala"
									score = _folks_simple_query_prop_contains_token_fd_string (self, individual, individual_translit_locale, prop_name, prop_spec, _tmp110_, token);
#line 381 "/run/build/folks/folks/simple-query.vala"
									_tmp111_ = score;
#line 381 "/run/build/folks/folks/simple-query.vala"
									if (_tmp111_ > ((guint) 0)) {
#line 1566 "simple-query.c"
										guint _tmp112_;
#line 383 "/run/build/folks/folks/simple-query.vala"
										_tmp112_ = score;
#line 383 "/run/build/folks/folks/simple-query.vala"
										result = _tmp112_ * 2;
#line 383 "/run/build/folks/folks/simple-query.vala"
										_g_object_unref0 (val);
#line 383 "/run/build/folks/folks/simple-query.vala"
										_g_object_unref0 (iter);
#line 383 "/run/build/folks/folks/simple-query.vala"
										_g_object_unref0 (prop_value_multi_map_afd);
#line 383 "/run/build/folks/folks/simple-query.vala"
										_g_object_unref0 (prop_value_multi_map);
#line 383 "/run/build/folks/folks/simple-query.vala"
										return result;
#line 1582 "simple-query.c"
									}
								}
#line 371 "/run/build/folks/folks/simple-query.vala"
								_g_object_unref0 (val);
#line 1587 "simple-query.c"
							}
#line 364 "/run/build/folks/folks/simple-query.vala"
							_g_object_unref0 (iter);
#line 364 "/run/build/folks/folks/simple-query.vala"
							_g_object_unref0 (prop_value_multi_map_afd);
#line 1593 "simple-query.c"
						} else {
							GType _tmp113_;
							const gchar* _tmp114_;
							GType _tmp115_;
							const gchar* _tmp116_;
#line 390 "/run/build/folks/folks/simple-query.vala"
							_tmp113_ = key_type;
#line 390 "/run/build/folks/folks/simple-query.vala"
							_tmp114_ = g_type_name (_tmp113_);
#line 390 "/run/build/folks/folks/simple-query.vala"
							_tmp115_ = value_type;
#line 390 "/run/build/folks/folks/simple-query.vala"
							_tmp116_ = g_type_name (_tmp115_);
#line 390 "/run/build/folks/folks/simple-query.vala"
							g_warning ("Cannot check for match in detail type " "Gee.MultiMap<%s, %s>", _tmp114_, _tmp116_);
#line 393 "/run/build/folks/folks/simple-query.vala"
							result = (guint) 0;
#line 393 "/run/build/folks/folks/simple-query.vala"
							_g_object_unref0 (prop_value_multi_map);
#line 393 "/run/build/folks/folks/simple-query.vala"
							return result;
#line 1615 "simple-query.c"
						}
#line 353 "/run/build/folks/folks/simple-query.vala"
						_g_object_unref0 (prop_value_multi_map);
#line 1619 "simple-query.c"
					} else {
						GType _tmp117_;
						const gchar* _tmp118_;
#line 398 "/run/build/folks/folks/simple-query.vala"
						_tmp117_ = prop_spec->value_type;
#line 398 "/run/build/folks/folks/simple-query.vala"
						_tmp118_ = g_type_name (_tmp117_);
#line 398 "/run/build/folks/folks/simple-query.vala"
						g_warning ("simple-query.vala:398: Cannot check for match in detail type %s", _tmp118_);
#line 1629 "simple-query.c"
					}
				}
			}
		}
	}
#line 402 "/run/build/folks/folks/simple-query.vala"
	result = (guint) 0;
#line 402 "/run/build/folks/folks/simple-query.vala"
	return result;
#line 1639 "simple-query.c"
}


static guint
_folks_simple_query_prop_contains_token_fd_string (FolksSimpleQuery* self,
                                                   FolksIndividual* individual,
                                                   const gchar* individual_translit_locale,
                                                   const gchar* prop_name,
                                                   GParamSpec* prop_spec,
                                                   FolksAbstractFieldDetails* val,
                                                   const gchar* token)
{
	guint result = 0U;
	gconstpointer _tmp3_;
	const gchar* _tmp4_;
#line 405 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (self != NULL, 0U);
#line 405 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (individual != NULL, 0U);
#line 405 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (prop_name != NULL, 0U);
#line 405 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (prop_spec != NULL, 0U);
#line 405 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (val != NULL, 0U);
#line 405 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (token != NULL, 0U);
#line 413 "/run/build/folks/folks/simple-query.vala"
	if (G_TYPE_FROM_INSTANCE ((GObject*) val) == FOLKS_TYPE_PHONE_FIELD_DETAILS) {
#line 1669 "simple-query.c"
		FolksPhoneFieldDetails* _tmp0_;
		FolksPhoneFieldDetails* _tmp1_;
		gboolean _tmp2_;
#line 420 "/run/build/folks/folks/simple-query.vala"
		_tmp0_ = folks_phone_field_details_new (token, NULL);
#line 420 "/run/build/folks/folks/simple-query.vala"
		_tmp1_ = _tmp0_;
#line 420 "/run/build/folks/folks/simple-query.vala"
		_tmp2_ = folks_abstract_field_details_values_equal (val, (FolksAbstractFieldDetails*) _tmp1_);
#line 420 "/run/build/folks/folks/simple-query.vala"
		_g_object_unref0 (_tmp1_);
#line 420 "/run/build/folks/folks/simple-query.vala"
		if (_tmp2_) {
#line 421 "/run/build/folks/folks/simple-query.vala"
			result = (guint) 2;
#line 421 "/run/build/folks/folks/simple-query.vala"
			return result;
#line 1687 "simple-query.c"
		}
	}
#line 424 "/run/build/folks/folks/simple-query.vala"
	_tmp3_ = folks_abstract_field_details_get_value (val);
#line 424 "/run/build/folks/folks/simple-query.vala"
	_tmp4_ = _tmp3_;
#line 424 "/run/build/folks/folks/simple-query.vala"
	result = _folks_simple_query_string_matches_token (self, (const gchar*) _tmp4_, token, individual_translit_locale);
#line 424 "/run/build/folks/folks/simple-query.vala"
	return result;
#line 1698 "simple-query.c"
}


static guint
_folks_simple_query_prop_contains_token_fd_postal_address (FolksSimpleQuery* self,
                                                           FolksIndividual* individual,
                                                           const gchar* individual_translit_locale,
                                                           const gchar* prop_name,
                                                           GParamSpec* prop_spec,
                                                           FolksAbstractFieldDetails* val,
                                                           const gchar* token)
{
	guint result = 0U;
	guint score = 0U;
	gconstpointer _tmp0_;
	FolksPostalAddress* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	guint _tmp4_;
	gconstpointer _tmp5_;
	FolksPostalAddress* _tmp6_;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	guint _tmp9_;
	gconstpointer _tmp10_;
	FolksPostalAddress* _tmp11_;
	const gchar* _tmp12_;
	const gchar* _tmp13_;
	guint _tmp14_;
	gconstpointer _tmp15_;
	FolksPostalAddress* _tmp16_;
	const gchar* _tmp17_;
	const gchar* _tmp18_;
	guint _tmp19_;
#line 430 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (self != NULL, 0U);
#line 430 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (individual != NULL, 0U);
#line 430 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (prop_name != NULL, 0U);
#line 430 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (prop_spec != NULL, 0U);
#line 430 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (val != NULL, 0U);
#line 430 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (token != NULL, 0U);
#line 438 "/run/build/folks/folks/simple-query.vala"
	_tmp0_ = folks_abstract_field_details_get_value (val);
#line 438 "/run/build/folks/folks/simple-query.vala"
	_tmp1_ = _tmp0_;
#line 438 "/run/build/folks/folks/simple-query.vala"
	_tmp2_ = folks_postal_address_get_street ((FolksPostalAddress*) _tmp1_);
#line 438 "/run/build/folks/folks/simple-query.vala"
	_tmp3_ = _tmp2_;
#line 438 "/run/build/folks/folks/simple-query.vala"
	score = _folks_simple_query_string_matches_token (self, _tmp3_, token, individual_translit_locale);
#line 440 "/run/build/folks/folks/simple-query.vala"
	_tmp4_ = score;
#line 440 "/run/build/folks/folks/simple-query.vala"
	if (_tmp4_ > ((guint) 0)) {
#line 441 "/run/build/folks/folks/simple-query.vala"
		result = score;
#line 441 "/run/build/folks/folks/simple-query.vala"
		return result;
#line 1763 "simple-query.c"
	}
#line 443 "/run/build/folks/folks/simple-query.vala"
	_tmp5_ = folks_abstract_field_details_get_value (val);
#line 443 "/run/build/folks/folks/simple-query.vala"
	_tmp6_ = _tmp5_;
#line 443 "/run/build/folks/folks/simple-query.vala"
	_tmp7_ = folks_postal_address_get_locality ((FolksPostalAddress*) _tmp6_);
#line 443 "/run/build/folks/folks/simple-query.vala"
	_tmp8_ = _tmp7_;
#line 443 "/run/build/folks/folks/simple-query.vala"
	score = _folks_simple_query_string_matches_token (self, _tmp8_, token, individual_translit_locale);
#line 445 "/run/build/folks/folks/simple-query.vala"
	_tmp9_ = score;
#line 445 "/run/build/folks/folks/simple-query.vala"
	if (_tmp9_ > ((guint) 0)) {
#line 446 "/run/build/folks/folks/simple-query.vala"
		result = score;
#line 446 "/run/build/folks/folks/simple-query.vala"
		return result;
#line 1783 "simple-query.c"
	}
#line 448 "/run/build/folks/folks/simple-query.vala"
	_tmp10_ = folks_abstract_field_details_get_value (val);
#line 448 "/run/build/folks/folks/simple-query.vala"
	_tmp11_ = _tmp10_;
#line 448 "/run/build/folks/folks/simple-query.vala"
	_tmp12_ = folks_postal_address_get_region ((FolksPostalAddress*) _tmp11_);
#line 448 "/run/build/folks/folks/simple-query.vala"
	_tmp13_ = _tmp12_;
#line 448 "/run/build/folks/folks/simple-query.vala"
	score = _folks_simple_query_string_matches_token (self, _tmp13_, token, individual_translit_locale);
#line 450 "/run/build/folks/folks/simple-query.vala"
	_tmp14_ = score;
#line 450 "/run/build/folks/folks/simple-query.vala"
	if (_tmp14_ > ((guint) 0)) {
#line 451 "/run/build/folks/folks/simple-query.vala"
		result = score;
#line 451 "/run/build/folks/folks/simple-query.vala"
		return result;
#line 1803 "simple-query.c"
	}
#line 453 "/run/build/folks/folks/simple-query.vala"
	_tmp15_ = folks_abstract_field_details_get_value (val);
#line 453 "/run/build/folks/folks/simple-query.vala"
	_tmp16_ = _tmp15_;
#line 453 "/run/build/folks/folks/simple-query.vala"
	_tmp17_ = folks_postal_address_get_country ((FolksPostalAddress*) _tmp16_);
#line 453 "/run/build/folks/folks/simple-query.vala"
	_tmp18_ = _tmp17_;
#line 453 "/run/build/folks/folks/simple-query.vala"
	score = _folks_simple_query_string_matches_token (self, _tmp18_, token, individual_translit_locale);
#line 455 "/run/build/folks/folks/simple-query.vala"
	_tmp19_ = score;
#line 455 "/run/build/folks/folks/simple-query.vala"
	if (_tmp19_ > ((guint) 0)) {
#line 456 "/run/build/folks/folks/simple-query.vala"
		result = score;
#line 456 "/run/build/folks/folks/simple-query.vala"
		return result;
#line 1823 "simple-query.c"
	}
#line 459 "/run/build/folks/folks/simple-query.vala"
	result = (guint) 0;
#line 459 "/run/build/folks/folks/simple-query.vala"
	return result;
#line 1829 "simple-query.c"
}


static guint
_folks_simple_query_prop_contains_token_fd_role (FolksSimpleQuery* self,
                                                 FolksIndividual* individual,
                                                 const gchar* individual_translit_locale,
                                                 const gchar* prop_name,
                                                 GParamSpec* prop_spec,
                                                 FolksAbstractFieldDetails* val,
                                                 const gchar* token)
{
	guint result = 0U;
	guint score = 0U;
	gconstpointer _tmp0_;
	FolksRole* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	guint _tmp4_;
	gconstpointer _tmp5_;
	FolksRole* _tmp6_;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	guint _tmp9_;
	gconstpointer _tmp10_;
	FolksRole* _tmp11_;
	const gchar* _tmp12_;
	const gchar* _tmp13_;
	guint _tmp14_;
#line 462 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (self != NULL, 0U);
#line 462 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (individual != NULL, 0U);
#line 462 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (prop_name != NULL, 0U);
#line 462 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (prop_spec != NULL, 0U);
#line 462 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (val != NULL, 0U);
#line 462 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (token != NULL, 0U);
#line 470 "/run/build/folks/folks/simple-query.vala"
	_tmp0_ = folks_abstract_field_details_get_value (val);
#line 470 "/run/build/folks/folks/simple-query.vala"
	_tmp1_ = _tmp0_;
#line 470 "/run/build/folks/folks/simple-query.vala"
	_tmp2_ = folks_role_get_organisation_name ((FolksRole*) _tmp1_);
#line 470 "/run/build/folks/folks/simple-query.vala"
	_tmp3_ = _tmp2_;
#line 470 "/run/build/folks/folks/simple-query.vala"
	score = _folks_simple_query_string_matches_token (self, _tmp3_, token, individual_translit_locale);
#line 472 "/run/build/folks/folks/simple-query.vala"
	_tmp4_ = score;
#line 472 "/run/build/folks/folks/simple-query.vala"
	if (_tmp4_ > ((guint) 0)) {
#line 473 "/run/build/folks/folks/simple-query.vala"
		result = score;
#line 473 "/run/build/folks/folks/simple-query.vala"
		return result;
#line 1889 "simple-query.c"
	}
#line 475 "/run/build/folks/folks/simple-query.vala"
	_tmp5_ = folks_abstract_field_details_get_value (val);
#line 475 "/run/build/folks/folks/simple-query.vala"
	_tmp6_ = _tmp5_;
#line 475 "/run/build/folks/folks/simple-query.vala"
	_tmp7_ = folks_role_get_title ((FolksRole*) _tmp6_);
#line 475 "/run/build/folks/folks/simple-query.vala"
	_tmp8_ = _tmp7_;
#line 475 "/run/build/folks/folks/simple-query.vala"
	score = _folks_simple_query_string_matches_token (self, _tmp8_, token, individual_translit_locale);
#line 477 "/run/build/folks/folks/simple-query.vala"
	_tmp9_ = score;
#line 477 "/run/build/folks/folks/simple-query.vala"
	if (_tmp9_ > ((guint) 0)) {
#line 478 "/run/build/folks/folks/simple-query.vala"
		result = score;
#line 478 "/run/build/folks/folks/simple-query.vala"
		return result;
#line 1909 "simple-query.c"
	}
#line 480 "/run/build/folks/folks/simple-query.vala"
	_tmp10_ = folks_abstract_field_details_get_value (val);
#line 480 "/run/build/folks/folks/simple-query.vala"
	_tmp11_ = _tmp10_;
#line 480 "/run/build/folks/folks/simple-query.vala"
	_tmp12_ = folks_role_get_role ((FolksRole*) _tmp11_);
#line 480 "/run/build/folks/folks/simple-query.vala"
	_tmp13_ = _tmp12_;
#line 480 "/run/build/folks/folks/simple-query.vala"
	score = _folks_simple_query_string_matches_token (self, _tmp13_, token, individual_translit_locale);
#line 482 "/run/build/folks/folks/simple-query.vala"
	_tmp14_ = score;
#line 482 "/run/build/folks/folks/simple-query.vala"
	if (_tmp14_ > ((guint) 0)) {
#line 483 "/run/build/folks/folks/simple-query.vala"
		result = score;
#line 483 "/run/build/folks/folks/simple-query.vala"
		return result;
#line 1929 "simple-query.c"
	}
#line 486 "/run/build/folks/folks/simple-query.vala"
	result = (guint) 0;
#line 486 "/run/build/folks/folks/simple-query.vala"
	return result;
#line 1935 "simple-query.c"
}


static inline guint
_folks_simple_query_string_matches_token (FolksSimpleQuery* self,
                                          const gchar* str,
                                          const gchar* token,
                                          const gchar* str_translit_locale)
{
	guint result = 0U;
	gchar** alternates = NULL;
	gint alternates_length1 = 0;
	gint _alternates_size_ = 0;
	gchar** str_tokens = NULL;
	gchar** _tmp0_ = NULL;
	gchar** _tmp1_;
	gchar** _tmp2_;
	gint str_tokens_length1;
	gint _str_tokens_size_;
#line 489 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (self != NULL, 0U);
#line 489 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (str != NULL, 0U);
#line 489 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (token != NULL, 0U);
#line 492 "/run/build/folks/folks/simple-query.vala"
	g_debug ("simple-query.vala:492: Matching string ‘%s’ against token ‘%s’.", str, token);
#line 495 "/run/build/folks/folks/simple-query.vala"
	_tmp2_ = _tmp1_ = g_str_tokenize_and_fold (str, str_translit_locale, &_tmp0_);
#line 495 "/run/build/folks/folks/simple-query.vala"
	alternates = (_vala_array_free (alternates, alternates_length1, (GDestroyNotify) g_free), NULL);
#line 495 "/run/build/folks/folks/simple-query.vala"
	alternates = _tmp0_;
#line 495 "/run/build/folks/folks/simple-query.vala"
	alternates_length1 = -1;
#line 495 "/run/build/folks/folks/simple-query.vala"
	_alternates_size_ = alternates_length1;
#line 495 "/run/build/folks/folks/simple-query.vala"
	alternates_length1 = _vala_array_length (alternates);
#line 495 "/run/build/folks/folks/simple-query.vala"
	str_tokens = _tmp2_;
#line 495 "/run/build/folks/folks/simple-query.vala"
	str_tokens_length1 = _vala_array_length (_tmp1_);
#line 495 "/run/build/folks/folks/simple-query.vala"
	_str_tokens_size_ = str_tokens_length1;
#line 1981 "simple-query.c"
	{
		gint i = 0;
#line 500 "/run/build/folks/folks/simple-query.vala"
		i = 0;
#line 1986 "simple-query.c"
		{
			gboolean _tmp3_ = FALSE;
#line 500 "/run/build/folks/folks/simple-query.vala"
			_tmp3_ = TRUE;
#line 500 "/run/build/folks/folks/simple-query.vala"
			while (TRUE) {
#line 1993 "simple-query.c"
				gchar** _tmp5_;
				gint _tmp5__length1;
				gint _tmp6_;
				const gchar* _tmp7_;
				gchar* str_token = NULL;
				gchar** _tmp8_;
				gint _tmp8__length1;
				gint _tmp9_;
				const gchar* _tmp10_;
				gchar* _tmp11_;
				const gchar* _tmp12_;
#line 500 "/run/build/folks/folks/simple-query.vala"
				if (!_tmp3_) {
#line 2007 "simple-query.c"
					gint _tmp4_;
#line 500 "/run/build/folks/folks/simple-query.vala"
					_tmp4_ = i;
#line 500 "/run/build/folks/folks/simple-query.vala"
					i = _tmp4_ + 1;
#line 2013 "simple-query.c"
				}
#line 500 "/run/build/folks/folks/simple-query.vala"
				_tmp3_ = FALSE;
#line 500 "/run/build/folks/folks/simple-query.vala"
				_tmp5_ = str_tokens;
#line 500 "/run/build/folks/folks/simple-query.vala"
				_tmp5__length1 = str_tokens_length1;
#line 500 "/run/build/folks/folks/simple-query.vala"
				_tmp6_ = i;
#line 500 "/run/build/folks/folks/simple-query.vala"
				_tmp7_ = _tmp5_[_tmp6_];
#line 500 "/run/build/folks/folks/simple-query.vala"
				if (!(_tmp7_ != NULL)) {
#line 500 "/run/build/folks/folks/simple-query.vala"
					break;
#line 2029 "simple-query.c"
				}
#line 502 "/run/build/folks/folks/simple-query.vala"
				_tmp8_ = str_tokens;
#line 502 "/run/build/folks/folks/simple-query.vala"
				_tmp8__length1 = str_tokens_length1;
#line 502 "/run/build/folks/folks/simple-query.vala"
				_tmp9_ = i;
#line 502 "/run/build/folks/folks/simple-query.vala"
				_tmp10_ = _tmp8_[_tmp9_];
#line 502 "/run/build/folks/folks/simple-query.vala"
				_tmp11_ = g_strdup (_tmp10_);
#line 502 "/run/build/folks/folks/simple-query.vala"
				str_token = _tmp11_;
#line 504 "/run/build/folks/folks/simple-query.vala"
				_tmp12_ = str_token;
#line 504 "/run/build/folks/folks/simple-query.vala"
				if (g_strcmp0 (_tmp12_, token) == 0) {
#line 505 "/run/build/folks/folks/simple-query.vala"
					result = (guint) 3;
#line 505 "/run/build/folks/folks/simple-query.vala"
					_g_free0 (str_token);
#line 505 "/run/build/folks/folks/simple-query.vala"
					str_tokens = (_vala_array_free (str_tokens, str_tokens_length1, (GDestroyNotify) g_free), NULL);
#line 505 "/run/build/folks/folks/simple-query.vala"
					alternates = (_vala_array_free (alternates, alternates_length1, (GDestroyNotify) g_free), NULL);
#line 505 "/run/build/folks/folks/simple-query.vala"
					return result;
#line 2057 "simple-query.c"
				} else {
					const gchar* _tmp13_;
#line 506 "/run/build/folks/folks/simple-query.vala"
					_tmp13_ = str_token;
#line 506 "/run/build/folks/folks/simple-query.vala"
					if (g_str_has_prefix (_tmp13_, token)) {
#line 507 "/run/build/folks/folks/simple-query.vala"
						result = (guint) 2;
#line 507 "/run/build/folks/folks/simple-query.vala"
						_g_free0 (str_token);
#line 507 "/run/build/folks/folks/simple-query.vala"
						str_tokens = (_vala_array_free (str_tokens, str_tokens_length1, (GDestroyNotify) g_free), NULL);
#line 507 "/run/build/folks/folks/simple-query.vala"
						alternates = (_vala_array_free (alternates, alternates_length1, (GDestroyNotify) g_free), NULL);
#line 507 "/run/build/folks/folks/simple-query.vala"
						return result;
#line 2074 "simple-query.c"
					}
				}
#line 500 "/run/build/folks/folks/simple-query.vala"
				_g_free0 (str_token);
#line 2079 "simple-query.c"
			}
		}
	}
	{
		gint i = 0;
#line 510 "/run/build/folks/folks/simple-query.vala"
		i = 0;
#line 2087 "simple-query.c"
		{
			gboolean _tmp14_ = FALSE;
#line 510 "/run/build/folks/folks/simple-query.vala"
			_tmp14_ = TRUE;
#line 510 "/run/build/folks/folks/simple-query.vala"
			while (TRUE) {
#line 2094 "simple-query.c"
				gchar** _tmp16_;
				gint _tmp16__length1;
				gint _tmp17_;
				const gchar* _tmp18_;
				gchar* str_token = NULL;
				gchar** _tmp19_;
				gint _tmp19__length1;
				gint _tmp20_;
				const gchar* _tmp21_;
				gchar* _tmp22_;
				const gchar* _tmp23_;
#line 510 "/run/build/folks/folks/simple-query.vala"
				if (!_tmp14_) {
#line 2108 "simple-query.c"
					gint _tmp15_;
#line 510 "/run/build/folks/folks/simple-query.vala"
					_tmp15_ = i;
#line 510 "/run/build/folks/folks/simple-query.vala"
					i = _tmp15_ + 1;
#line 2114 "simple-query.c"
				}
#line 510 "/run/build/folks/folks/simple-query.vala"
				_tmp14_ = FALSE;
#line 510 "/run/build/folks/folks/simple-query.vala"
				_tmp16_ = alternates;
#line 510 "/run/build/folks/folks/simple-query.vala"
				_tmp16__length1 = alternates_length1;
#line 510 "/run/build/folks/folks/simple-query.vala"
				_tmp17_ = i;
#line 510 "/run/build/folks/folks/simple-query.vala"
				_tmp18_ = _tmp16_[_tmp17_];
#line 510 "/run/build/folks/folks/simple-query.vala"
				if (!(_tmp18_ != NULL)) {
#line 510 "/run/build/folks/folks/simple-query.vala"
					break;
#line 2130 "simple-query.c"
				}
#line 512 "/run/build/folks/folks/simple-query.vala"
				_tmp19_ = alternates;
#line 512 "/run/build/folks/folks/simple-query.vala"
				_tmp19__length1 = alternates_length1;
#line 512 "/run/build/folks/folks/simple-query.vala"
				_tmp20_ = i;
#line 512 "/run/build/folks/folks/simple-query.vala"
				_tmp21_ = _tmp19_[_tmp20_];
#line 512 "/run/build/folks/folks/simple-query.vala"
				_tmp22_ = g_strdup (_tmp21_);
#line 512 "/run/build/folks/folks/simple-query.vala"
				str_token = _tmp22_;
#line 514 "/run/build/folks/folks/simple-query.vala"
				_tmp23_ = str_token;
#line 514 "/run/build/folks/folks/simple-query.vala"
				if (g_strcmp0 (_tmp23_, token) == 0) {
#line 515 "/run/build/folks/folks/simple-query.vala"
					result = (guint) 2;
#line 515 "/run/build/folks/folks/simple-query.vala"
					_g_free0 (str_token);
#line 515 "/run/build/folks/folks/simple-query.vala"
					str_tokens = (_vala_array_free (str_tokens, str_tokens_length1, (GDestroyNotify) g_free), NULL);
#line 515 "/run/build/folks/folks/simple-query.vala"
					alternates = (_vala_array_free (alternates, alternates_length1, (GDestroyNotify) g_free), NULL);
#line 515 "/run/build/folks/folks/simple-query.vala"
					return result;
#line 2158 "simple-query.c"
				} else {
					const gchar* _tmp24_;
#line 516 "/run/build/folks/folks/simple-query.vala"
					_tmp24_ = str_token;
#line 516 "/run/build/folks/folks/simple-query.vala"
					if (g_str_has_prefix (_tmp24_, token)) {
#line 517 "/run/build/folks/folks/simple-query.vala"
						result = (guint) 1;
#line 517 "/run/build/folks/folks/simple-query.vala"
						_g_free0 (str_token);
#line 517 "/run/build/folks/folks/simple-query.vala"
						str_tokens = (_vala_array_free (str_tokens, str_tokens_length1, (GDestroyNotify) g_free), NULL);
#line 517 "/run/build/folks/folks/simple-query.vala"
						alternates = (_vala_array_free (alternates, alternates_length1, (GDestroyNotify) g_free), NULL);
#line 517 "/run/build/folks/folks/simple-query.vala"
						return result;
#line 2175 "simple-query.c"
					}
				}
#line 510 "/run/build/folks/folks/simple-query.vala"
				_g_free0 (str_token);
#line 2180 "simple-query.c"
			}
		}
	}
#line 520 "/run/build/folks/folks/simple-query.vala"
	result = (guint) 0;
#line 520 "/run/build/folks/folks/simple-query.vala"
	str_tokens = (_vala_array_free (str_tokens, str_tokens_length1, (GDestroyNotify) g_free), NULL);
#line 520 "/run/build/folks/folks/simple-query.vala"
	alternates = (_vala_array_free (alternates, alternates_length1, (GDestroyNotify) g_free), NULL);
#line 520 "/run/build/folks/folks/simple-query.vala"
	return result;
#line 2192 "simple-query.c"
}


const gchar*
folks_simple_query_get_query_string (FolksSimpleQuery* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 54 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 54 "/run/build/folks/folks/simple-query.vala"
	_tmp0_ = self->priv->_query_string;
#line 54 "/run/build/folks/folks/simple-query.vala"
	result = _tmp0_;
#line 54 "/run/build/folks/folks/simple-query.vala"
	return result;
#line 2209 "simple-query.c"
}


void
folks_simple_query_set_query_string (FolksSimpleQuery* self,
                                     const gchar* value)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
#line 55 "/run/build/folks/folks/simple-query.vala"
	g_return_if_fail (self != NULL);
#line 57 "/run/build/folks/folks/simple-query.vala"
	if (value == NULL) {
#line 58 "/run/build/folks/folks/simple-query.vala"
		value = "";
#line 2225 "simple-query.c"
	}
#line 60 "/run/build/folks/folks/simple-query.vala"
	_tmp0_ = self->priv->_query_string;
#line 60 "/run/build/folks/folks/simple-query.vala"
	if (g_strcmp0 (_tmp0_, value) == 0) {
#line 61 "/run/build/folks/folks/simple-query.vala"
		return;
#line 2233 "simple-query.c"
	}
#line 63 "/run/build/folks/folks/simple-query.vala"
	_tmp1_ = self->priv->_query_locale;
#line 63 "/run/build/folks/folks/simple-query.vala"
	_folks_simple_query_update_query_string (self, value, _tmp1_);
#line 55 "/run/build/folks/folks/simple-query.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_simple_query_properties[FOLKS_SIMPLE_QUERY_QUERY_STRING_PROPERTY]);
#line 2241 "simple-query.c"
}


const gchar*
folks_simple_query_get_query_locale (FolksSimpleQuery* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 84 "/run/build/folks/folks/simple-query.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 84 "/run/build/folks/folks/simple-query.vala"
	_tmp0_ = self->priv->_query_locale;
#line 84 "/run/build/folks/folks/simple-query.vala"
	result = _tmp0_;
#line 84 "/run/build/folks/folks/simple-query.vala"
	return result;
#line 2258 "simple-query.c"
}


void
folks_simple_query_set_query_locale (FolksSimpleQuery* self,
                                     const gchar* value)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
#line 85 "/run/build/folks/folks/simple-query.vala"
	g_return_if_fail (self != NULL);
#line 87 "/run/build/folks/folks/simple-query.vala"
	_tmp0_ = self->priv->_query_locale;
#line 87 "/run/build/folks/folks/simple-query.vala"
	if (g_strcmp0 (_tmp0_, value) == 0) {
#line 88 "/run/build/folks/folks/simple-query.vala"
		return;
#line 2276 "simple-query.c"
	}
#line 90 "/run/build/folks/folks/simple-query.vala"
	_tmp1_ = self->priv->_query_string;
#line 90 "/run/build/folks/folks/simple-query.vala"
	_folks_simple_query_update_query_string (self, _tmp1_, value);
#line 85 "/run/build/folks/folks/simple-query.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_simple_query_properties[FOLKS_SIMPLE_QUERY_QUERY_LOCALE_PROPERTY]);
#line 2284 "simple-query.c"
}


static void
folks_simple_query_class_init (FolksSimpleQueryClass * klass)
{
#line 38 "/run/build/folks/folks/simple-query.vala"
	folks_simple_query_parent_class = g_type_class_peek_parent (klass);
#line 38 "/run/build/folks/folks/simple-query.vala"
	g_type_class_add_private (klass, sizeof (FolksSimpleQueryPrivate));
#line 38 "/run/build/folks/folks/simple-query.vala"
	((FolksQueryClass *) klass)->is_match = (guint (*) (FolksQuery *, FolksIndividual*)) folks_simple_query_real_is_match;
#line 38 "/run/build/folks/folks/simple-query.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_folks_simple_query_get_property;
#line 38 "/run/build/folks/folks/simple-query.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_folks_simple_query_set_property;
#line 38 "/run/build/folks/folks/simple-query.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_simple_query_finalize;
#line 2303 "simple-query.c"
	/**
	   * The text query string.
	   *
	   * This re-evaluates the query immediately, so most clients should implement
	   * de-bouncing to ensure re-evaluation only happens when (for example) the
	   * user has stopped typing a new query.
	   *
	   * @since 0.11.0
	   */
#line 38 "/run/build/folks/folks/simple-query.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_SIMPLE_QUERY_QUERY_STRING_PROPERTY, folks_simple_query_properties[FOLKS_SIMPLE_QUERY_QUERY_STRING_PROPERTY] = g_param_spec_string ("query-string", "query-string", "query-string", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 2315 "simple-query.c"
	/**
	   * Locale to interpret the {@link SimpleQuery.query_string} in.
	   *
	   * If possible, locale-specific query string transliteration is done to
	   * increase the number of matches. Set this property to a POSIX locale name
	   * (e.g. ‘en’, ‘de_DE’, ‘de_DE@euro’ or ‘C’) to potentially improve the
	   * transliteration performed.
	   *
	   * This may be `null` if the locale is unknown, in which case the current
	   * locale will be used. To perform transliteration for no specific locale,
	   * use `C`.
	   *
	   * @since 0.11.0
	   */
#line 38 "/run/build/folks/folks/simple-query.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_SIMPLE_QUERY_QUERY_LOCALE_PROPERTY, folks_simple_query_properties[FOLKS_SIMPLE_QUERY_QUERY_LOCALE_PROPERTY] = g_param_spec_string ("query-locale", "query-locale", "query-locale", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 2332 "simple-query.c"
}


static void
folks_simple_query_instance_init (FolksSimpleQuery * self)
{
#line 38 "/run/build/folks/folks/simple-query.vala"
	self->priv = FOLKS_SIMPLE_QUERY_GET_PRIVATE (self);
#line 67 "/run/build/folks/folks/simple-query.vala"
	self->priv->_query_locale = NULL;
#line 2343 "simple-query.c"
}


static void
folks_simple_query_finalize (GObject * obj)
{
	FolksSimpleQuery * self;
#line 38 "/run/build/folks/folks/simple-query.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_SIMPLE_QUERY, FolksSimpleQuery);
#line 41 "/run/build/folks/folks/simple-query.vala"
	_g_free0 (self->priv->_query_string);
#line 42 "/run/build/folks/folks/simple-query.vala"
	self->priv->_query_tokens = (_vala_array_free (self->priv->_query_tokens, self->priv->_query_tokens_length1, (GDestroyNotify) g_free), NULL);
#line 67 "/run/build/folks/folks/simple-query.vala"
	_g_free0 (self->priv->_query_locale);
#line 38 "/run/build/folks/folks/simple-query.vala"
	G_OBJECT_CLASS (folks_simple_query_parent_class)->finalize (obj);
#line 2361 "simple-query.c"
}


/**
 * A simple text-based contact query.
 *
 * This is a generic implementation of the {@link Query} interface which
 * supports general UI-style search use cases. It implements case-insensitive
 * prefix matching, with transliteration of accents and other non-ASCII
 * characters to improve matching against accented characters. It also
 * normalises phone numbers to make matches invariant to hyphenation and spacing
 * in phone numbers.
 *
 * @see SearchView
 * @since 0.11.0
 */
GType
folks_simple_query_get_type (void)
{
	static volatile gsize folks_simple_query_type_id__volatile = 0;
	if (g_once_init_enter (&folks_simple_query_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksSimpleQueryClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_simple_query_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksSimpleQuery), 0, (GInstanceInitFunc) folks_simple_query_instance_init, NULL };
		GType folks_simple_query_type_id;
		folks_simple_query_type_id = g_type_register_static (FOLKS_TYPE_QUERY, "FolksSimpleQuery", &g_define_type_info, 0);
		g_once_init_leave (&folks_simple_query_type_id__volatile, folks_simple_query_type_id);
	}
	return folks_simple_query_type_id__volatile;
}


static void
_vala_folks_simple_query_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec)
{
	FolksSimpleQuery * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_SIMPLE_QUERY, FolksSimpleQuery);
#line 38 "/run/build/folks/folks/simple-query.vala"
	switch (property_id) {
#line 38 "/run/build/folks/folks/simple-query.vala"
		case FOLKS_SIMPLE_QUERY_QUERY_STRING_PROPERTY:
#line 38 "/run/build/folks/folks/simple-query.vala"
		g_value_set_string (value, folks_simple_query_get_query_string (self));
#line 38 "/run/build/folks/folks/simple-query.vala"
		break;
#line 38 "/run/build/folks/folks/simple-query.vala"
		case FOLKS_SIMPLE_QUERY_QUERY_LOCALE_PROPERTY:
#line 38 "/run/build/folks/folks/simple-query.vala"
		g_value_set_string (value, folks_simple_query_get_query_locale (self));
#line 38 "/run/build/folks/folks/simple-query.vala"
		break;
#line 2414 "simple-query.c"
		default:
#line 38 "/run/build/folks/folks/simple-query.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 38 "/run/build/folks/folks/simple-query.vala"
		break;
#line 2420 "simple-query.c"
	}
}


static void
_vala_folks_simple_query_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec)
{
	FolksSimpleQuery * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_SIMPLE_QUERY, FolksSimpleQuery);
#line 38 "/run/build/folks/folks/simple-query.vala"
	switch (property_id) {
#line 38 "/run/build/folks/folks/simple-query.vala"
		case FOLKS_SIMPLE_QUERY_QUERY_STRING_PROPERTY:
#line 38 "/run/build/folks/folks/simple-query.vala"
		folks_simple_query_set_query_string (self, g_value_get_string (value));
#line 38 "/run/build/folks/folks/simple-query.vala"
		break;
#line 38 "/run/build/folks/folks/simple-query.vala"
		case FOLKS_SIMPLE_QUERY_QUERY_LOCALE_PROPERTY:
#line 38 "/run/build/folks/folks/simple-query.vala"
		folks_simple_query_set_query_locale (self, g_value_get_string (value));
#line 38 "/run/build/folks/folks/simple-query.vala"
		break;
#line 2447 "simple-query.c"
		default:
#line 38 "/run/build/folks/folks/simple-query.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 38 "/run/build/folks/folks/simple-query.vala"
		break;
#line 2453 "simple-query.c"
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



