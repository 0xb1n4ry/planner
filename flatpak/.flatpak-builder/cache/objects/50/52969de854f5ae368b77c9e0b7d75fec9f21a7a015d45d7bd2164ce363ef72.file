/* DateRange.c generated by valac 0.40.11, the Vala compiler
 * generated from DateRange.vala, do not modify */

/*  This program is free software: you can redistribute it and/or modify*/
/*  it under the terms of the GNU General Public License as published by*/
/*  the Free Software Foundation, either version 3 of the License, or*/
/*  (at your option) any later version.*/
/**/
/*  This program is distributed in the hope that it will be useful,*/
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of*/
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the*/
/*  GNU General Public License for more details.*/
/**/
/*  You should have received a copy of the GNU General Public License*/
/*  along with this program.  If not, see <http://www.gnu.org/licenses/>.*/
/**/


#include <glib.h>
#include <glib-object.h>
#include <gee.h>


#define MAYA_UTIL_TYPE_DATE_ITERATOR (maya_util_date_iterator_get_type ())
#define MAYA_UTIL_DATE_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MAYA_UTIL_TYPE_DATE_ITERATOR, MayaUtilDateIterator))
#define MAYA_UTIL_DATE_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MAYA_UTIL_TYPE_DATE_ITERATOR, MayaUtilDateIteratorClass))
#define MAYA_UTIL_IS_DATE_ITERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MAYA_UTIL_TYPE_DATE_ITERATOR))
#define MAYA_UTIL_IS_DATE_ITERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MAYA_UTIL_TYPE_DATE_ITERATOR))
#define MAYA_UTIL_DATE_ITERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MAYA_UTIL_TYPE_DATE_ITERATOR, MayaUtilDateIteratorClass))

typedef struct _MayaUtilDateIterator MayaUtilDateIterator;
typedef struct _MayaUtilDateIteratorClass MayaUtilDateIteratorClass;
typedef struct _MayaUtilDateIteratorPrivate MayaUtilDateIteratorPrivate;

#define MAYA_UTIL_TYPE_DATE_RANGE (maya_util_date_range_get_type ())
#define MAYA_UTIL_DATE_RANGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MAYA_UTIL_TYPE_DATE_RANGE, MayaUtilDateRange))
#define MAYA_UTIL_DATE_RANGE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MAYA_UTIL_TYPE_DATE_RANGE, MayaUtilDateRangeClass))
#define MAYA_UTIL_IS_DATE_RANGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MAYA_UTIL_TYPE_DATE_RANGE))
#define MAYA_UTIL_IS_DATE_RANGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MAYA_UTIL_TYPE_DATE_RANGE))
#define MAYA_UTIL_DATE_RANGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MAYA_UTIL_TYPE_DATE_RANGE, MayaUtilDateRangeClass))

typedef struct _MayaUtilDateRange MayaUtilDateRange;
typedef struct _MayaUtilDateRangeClass MayaUtilDateRangeClass;
enum  {
	MAYA_UTIL_DATE_ITERATOR_0_PROPERTY,
	MAYA_UTIL_DATE_ITERATOR_VALID_PROPERTY,
	MAYA_UTIL_DATE_ITERATOR_READ_ONLY_PROPERTY,
	MAYA_UTIL_DATE_ITERATOR_NUM_PROPERTIES
};
static GParamSpec* maya_util_date_iterator_properties[MAYA_UTIL_DATE_ITERATOR_NUM_PROPERTIES];
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _MayaUtilDateRangePrivate MayaUtilDateRangePrivate;
enum  {
	MAYA_UTIL_DATE_RANGE_0_PROPERTY,
	MAYA_UTIL_DATE_RANGE_FIRST_DT_PROPERTY,
	MAYA_UTIL_DATE_RANGE_LAST_DT_PROPERTY,
	MAYA_UTIL_DATE_RANGE_DAYS_PROPERTY,
	MAYA_UTIL_DATE_RANGE_ELEMENT_TYPE_PROPERTY,
	MAYA_UTIL_DATE_RANGE_NUM_PROPERTIES
};
static GParamSpec* maya_util_date_range_properties[MAYA_UTIL_DATE_RANGE_NUM_PROPERTIES];

struct _MayaUtilDateIterator {
	GObject parent_instance;
	MayaUtilDateIteratorPrivate * priv;
};

struct _MayaUtilDateIteratorClass {
	GObjectClass parent_class;
};

struct _MayaUtilDateIteratorPrivate {
	GDateTime* current;
	MayaUtilDateRange* range;
};

struct _MayaUtilDateRange {
	GObject parent_instance;
	MayaUtilDateRangePrivate * priv;
};

struct _MayaUtilDateRangeClass {
	GObjectClass parent_class;
};

struct _MayaUtilDateRangePrivate {
	GDateTime* _first_dt;
	GDateTime* _last_dt;
};


static gpointer maya_util_date_iterator_parent_class = NULL;
static GeeTraversableIface * maya_util_date_iterator_gee_traversable_parent_iface = NULL;
static GeeIteratorIface * maya_util_date_iterator_gee_iterator_parent_iface = NULL;
static gpointer maya_util_date_range_parent_class = NULL;
static GeeTraversableIface * maya_util_date_range_gee_traversable_parent_iface = NULL;
static GeeIterableIface * maya_util_date_range_gee_iterable_parent_iface = NULL;

GType maya_util_date_iterator_get_type (void) G_GNUC_CONST;
GType maya_util_date_range_get_type (void) G_GNUC_CONST;
#define MAYA_UTIL_DATE_ITERATOR_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), MAYA_UTIL_TYPE_DATE_ITERATOR, MayaUtilDateIteratorPrivate))
MayaUtilDateIterator* maya_util_date_iterator_new (MayaUtilDateRange* range);
MayaUtilDateIterator* maya_util_date_iterator_construct (GType object_type,
                                                         MayaUtilDateRange* range);
GDateTime* maya_util_date_range_get_first_dt (MayaUtilDateRange* self);
static gboolean maya_util_date_iterator_real_foreach (GeeTraversable* base,
                                               GeeForallFunc f,
                                               gpointer f_target);
GDateTime* maya_util_date_range_get_last_dt (MayaUtilDateRange* self);
static gboolean maya_util_date_iterator_real_next (GeeIterator* base);
static gboolean maya_util_date_iterator_real_has_next (GeeIterator* base);
gboolean maya_util_date_iterator_first (MayaUtilDateIterator* self);
static GDateTime* maya_util_date_iterator_real_get (GeeIterator* base);
static void maya_util_date_iterator_real_remove (GeeIterator* base);
static void maya_util_date_iterator_finalize (GObject * obj);
static void _vala_maya_util_date_iterator_get_property (GObject * object,
                                                 guint property_id,
                                                 GValue * value,
                                                 GParamSpec * pspec);
#define MAYA_UTIL_DATE_RANGE_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), MAYA_UTIL_TYPE_DATE_RANGE, MayaUtilDateRangePrivate))
static gboolean maya_util_date_range_real_foreach (GeeTraversable* base,
                                            GeeForallFunc f,
                                            gpointer f_target);
MayaUtilDateRange* maya_util_date_range_new (GDateTime* first,
                                             GDateTime* last);
MayaUtilDateRange* maya_util_date_range_construct (GType object_type,
                                                   GDateTime* first,
                                                   GDateTime* last);
static void maya_util_date_range_set_first_dt (MayaUtilDateRange* self,
                                        GDateTime* value);
static void maya_util_date_range_set_last_dt (MayaUtilDateRange* self,
                                       GDateTime* value);
MayaUtilDateRange* maya_util_date_range_new_copy (MayaUtilDateRange* date_range);
MayaUtilDateRange* maya_util_date_range_construct_copy (GType object_type,
                                                        MayaUtilDateRange* date_range);
gboolean maya_util_date_range_equals (MayaUtilDateRange* self,
                                      MayaUtilDateRange* other);
static GeeIterator* maya_util_date_range_real_iterator (GeeIterable* base);
gboolean maya_util_date_range_contains (MayaUtilDateRange* self,
                                        GDateTime* time);
GeeSortedSet* maya_util_date_range_to_set (MayaUtilDateRange* self);
GeeList* maya_util_date_range_to_list (MayaUtilDateRange* self);
gboolean maya_util_datetime_equal_func (GDateTime* a,
                                        GDateTime* b);
gint64 maya_util_date_range_get_days (MayaUtilDateRange* self);
static void maya_util_date_range_finalize (GObject * obj);
static void _vala_maya_util_date_range_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec);
static void _vala_maya_util_date_range_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec);


static gpointer
_g_object_ref0 (gpointer self)
{
#line 25 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return self ? g_object_ref (self) : NULL;
#line 164 "DateRange.c"
}


MayaUtilDateIterator*
maya_util_date_iterator_construct (GType object_type,
                                   MayaUtilDateRange* range)
{
	MayaUtilDateIterator * self = NULL;
	MayaUtilDateRange* _tmp0_;
	GDateTime* _tmp1_;
	GDateTime* _tmp2_;
	GDateTime* _tmp3_;
#line 24 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_val_if_fail (range != NULL, NULL);
#line 24 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self = (MayaUtilDateIterator*) g_object_new (object_type, NULL);
#line 25 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp0_ = _g_object_ref0 (range);
#line 25 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_g_object_unref0 (self->priv->range);
#line 25 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self->priv->range = _tmp0_;
#line 26 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp1_ = maya_util_date_range_get_first_dt (range);
#line 26 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp2_ = _tmp1_;
#line 26 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp3_ = g_date_time_add_days (_tmp2_, -1);
#line 26 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_g_date_time_unref0 (self->priv->current);
#line 26 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self->priv->current = _tmp3_;
#line 24 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return self;
#line 199 "DateRange.c"
}


MayaUtilDateIterator*
maya_util_date_iterator_new (MayaUtilDateRange* range)
{
#line 24 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return maya_util_date_iterator_construct (MAYA_UTIL_TYPE_DATE_ITERATOR, range);
#line 208 "DateRange.c"
}


static gpointer
_g_date_time_ref0 (gpointer self)
{
#line 30 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return self ? g_date_time_ref (self) : NULL;
#line 217 "DateRange.c"
}


static gboolean
maya_util_date_iterator_real_foreach (GeeTraversable* base,
                                      GeeForallFunc f,
                                      gpointer f_target)
{
	MayaUtilDateIterator * self;
	gboolean result = FALSE;
	GDateTime* element = NULL;
	MayaUtilDateRange* _tmp0_;
	GDateTime* _tmp1_;
	GDateTime* _tmp2_;
	GDateTime* _tmp3_;
#line 29 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self = (MayaUtilDateIterator*) base;
#line 30 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp0_ = self->priv->range;
#line 30 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp1_ = maya_util_date_range_get_first_dt (_tmp0_);
#line 30 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp2_ = _tmp1_;
#line 30 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp3_ = _g_date_time_ref0 (_tmp2_);
#line 30 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	element = _tmp3_;
#line 32 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	while (TRUE) {
#line 247 "DateRange.c"
		GDateTime* _tmp4_;
		MayaUtilDateRange* _tmp5_;
		GDateTime* _tmp6_;
		GDateTime* _tmp7_;
		GDateTime* _tmp8_;
		GDateTime* _tmp9_;
		GDateTime* _tmp10_;
		GDateTime* _tmp11_;
#line 32 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp4_ = element;
#line 32 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp5_ = self->priv->range;
#line 32 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp6_ = maya_util_date_range_get_last_dt (_tmp5_);
#line 32 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp7_ = _tmp6_;
#line 32 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		if (!(g_date_time_compare (_tmp4_, _tmp7_) < 0)) {
#line 32 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			break;
#line 268 "DateRange.c"
		}
#line 33 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp8_ = element;
#line 33 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp9_ = _g_date_time_ref0 (_tmp8_);
#line 33 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		if (f (_tmp9_, f_target) == FALSE) {
#line 34 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			result = FALSE;
#line 34 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_g_date_time_unref0 (element);
#line 34 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			return result;
#line 282 "DateRange.c"
		}
#line 37 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp10_ = element;
#line 37 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp11_ = g_date_time_add_days (_tmp10_, 1);
#line 37 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_g_date_time_unref0 (element);
#line 37 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		element = _tmp11_;
#line 292 "DateRange.c"
	}
#line 40 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = TRUE;
#line 40 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_g_date_time_unref0 (element);
#line 40 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 300 "DateRange.c"
}


static gboolean
maya_util_date_iterator_real_next (GeeIterator* base)
{
	MayaUtilDateIterator * self;
	gboolean result = FALSE;
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
#line 43 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self = (MayaUtilDateIterator*) base;
#line 44 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	if (!gee_iterator_has_next ((GeeIterator*) self)) {
#line 45 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		result = FALSE;
#line 45 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		return result;
#line 319 "DateRange.c"
	}
#line 46 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp0_ = self->priv->current;
#line 46 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp1_ = g_date_time_add_days (_tmp0_, 1);
#line 46 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_g_date_time_unref0 (self->priv->current);
#line 46 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self->priv->current = _tmp1_;
#line 47 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = TRUE;
#line 47 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 333 "DateRange.c"
}


static gboolean
maya_util_date_iterator_real_has_next (GeeIterator* base)
{
	MayaUtilDateIterator * self;
	gboolean result = FALSE;
	GDateTime* _tmp0_;
	MayaUtilDateRange* _tmp1_;
	GDateTime* _tmp2_;
	GDateTime* _tmp3_;
#line 50 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self = (MayaUtilDateIterator*) base;
#line 51 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp0_ = self->priv->current;
#line 51 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp1_ = self->priv->range;
#line 51 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp2_ = maya_util_date_range_get_last_dt (_tmp1_);
#line 51 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp3_ = _tmp2_;
#line 51 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = g_date_time_compare (_tmp0_, _tmp3_) < 0;
#line 51 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 360 "DateRange.c"
}


gboolean
maya_util_date_iterator_first (MayaUtilDateIterator* self)
{
	gboolean result = FALSE;
	MayaUtilDateRange* _tmp0_;
	GDateTime* _tmp1_;
	GDateTime* _tmp2_;
	GDateTime* _tmp3_;
#line 54 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 55 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp0_ = self->priv->range;
#line 55 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp1_ = maya_util_date_range_get_first_dt (_tmp0_);
#line 55 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp2_ = _tmp1_;
#line 55 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp3_ = _g_date_time_ref0 (_tmp2_);
#line 55 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_g_date_time_unref0 (self->priv->current);
#line 55 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self->priv->current = _tmp3_;
#line 56 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = TRUE;
#line 56 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 390 "DateRange.c"
}


static GDateTime*
maya_util_date_iterator_real_get (GeeIterator* base)
{
	MayaUtilDateIterator * self;
	GDateTime* result = NULL;
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
#line 59 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self = (MayaUtilDateIterator*) base;
#line 60 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp0_ = self->priv->current;
#line 60 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp1_ = _g_date_time_ref0 (_tmp0_);
#line 60 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = _tmp1_;
#line 60 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 411 "DateRange.c"
}


static void
maya_util_date_iterator_real_remove (GeeIterator* base)
{
	MayaUtilDateIterator * self;
#line 63 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self = (MayaUtilDateIterator*) base;
#line 64 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_assert_not_reached ();
#line 423 "DateRange.c"
}


static gboolean
maya_util_date_iterator_real_get_valid (GeeIterator* base)
{
	gboolean result;
	MayaUtilDateIterator* self;
#line 21 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self = (MayaUtilDateIterator*) base;
#line 21 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = TRUE;
#line 21 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 438 "DateRange.c"
}


static gboolean
maya_util_date_iterator_real_get_read_only (GeeIterator* base)
{
	gboolean result;
	MayaUtilDateIterator* self;
#line 22 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self = (MayaUtilDateIterator*) base;
#line 22 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = FALSE;
#line 22 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 453 "DateRange.c"
}


static void
maya_util_date_iterator_class_init (MayaUtilDateIteratorClass * klass)
{
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	maya_util_date_iterator_parent_class = g_type_class_peek_parent (klass);
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_type_class_add_private (klass, sizeof (MayaUtilDateIteratorPrivate));
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_maya_util_date_iterator_get_property;
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	G_OBJECT_CLASS (klass)->finalize = maya_util_date_iterator_finalize;
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), MAYA_UTIL_DATE_ITERATOR_VALID_PROPERTY, maya_util_date_iterator_properties[MAYA_UTIL_DATE_ITERATOR_VALID_PROPERTY] = g_param_spec_boolean ("valid", "valid", "valid", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), MAYA_UTIL_DATE_ITERATOR_READ_ONLY_PROPERTY, maya_util_date_iterator_properties[MAYA_UTIL_DATE_ITERATOR_READ_ONLY_PROPERTY] = g_param_spec_boolean ("read-only", "read-only", "read-only", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 472 "DateRange.c"
}


static GType
maya_util_date_iterator_gee_traversable_get_g_type (MayaUtilDateIterator* self)
{
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return G_TYPE_DATE_TIME;
#line 481 "DateRange.c"
}


static GBoxedCopyFunc
maya_util_date_iterator_gee_traversable_get_g_dup_func (MayaUtilDateIterator* self)
{
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return g_date_time_ref;
#line 490 "DateRange.c"
}


static GDestroyNotify
maya_util_date_iterator_gee_traversable_get_g_destroy_func (MayaUtilDateIterator* self)
{
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return g_date_time_unref;
#line 499 "DateRange.c"
}


static void
maya_util_date_iterator_gee_traversable_interface_init (GeeTraversableIface * iface)
{
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	maya_util_date_iterator_gee_traversable_parent_iface = g_type_interface_peek_parent (iface);
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->foreach = (gboolean (*) (GeeTraversable *, GeeForallFunc, gpointer)) maya_util_date_iterator_real_foreach;
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->get_g_type = (GType (*) (GeeTraversable *)) maya_util_date_iterator_gee_traversable_get_g_type;
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->get_g_dup_func = (GBoxedCopyFunc (*) (GeeTraversable *)) maya_util_date_iterator_gee_traversable_get_g_dup_func;
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->get_g_destroy_func = (GDestroyNotify (*) (GeeTraversable *)) maya_util_date_iterator_gee_traversable_get_g_destroy_func;
#line 516 "DateRange.c"
}


static void
maya_util_date_iterator_gee_iterator_interface_init (GeeIteratorIface * iface)
{
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	maya_util_date_iterator_gee_iterator_parent_iface = g_type_interface_peek_parent (iface);
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->next = (gboolean (*) (GeeIterator *)) maya_util_date_iterator_real_next;
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->has_next = (gboolean (*) (GeeIterator *)) maya_util_date_iterator_real_has_next;
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->get = (gpointer (*) (GeeIterator *)) maya_util_date_iterator_real_get;
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->remove = (void (*) (GeeIterator *)) maya_util_date_iterator_real_remove;
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->get_valid = maya_util_date_iterator_real_get_valid;
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->get_read_only = maya_util_date_iterator_real_get_read_only;
#line 537 "DateRange.c"
}


static void
maya_util_date_iterator_instance_init (MayaUtilDateIterator * self)
{
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self->priv = MAYA_UTIL_DATE_ITERATOR_GET_PRIVATE (self);
#line 546 "DateRange.c"
}


static void
maya_util_date_iterator_finalize (GObject * obj)
{
	MayaUtilDateIterator * self;
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, MAYA_UTIL_TYPE_DATE_ITERATOR, MayaUtilDateIterator);
#line 18 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_g_date_time_unref0 (self->priv->current);
#line 19 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_g_object_unref0 (self->priv->range);
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	G_OBJECT_CLASS (maya_util_date_iterator_parent_class)->finalize (obj);
#line 562 "DateRange.c"
}


GType
maya_util_date_iterator_get_type (void)
{
	static volatile gsize maya_util_date_iterator_type_id__volatile = 0;
	if (g_once_init_enter (&maya_util_date_iterator_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (MayaUtilDateIteratorClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) maya_util_date_iterator_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (MayaUtilDateIterator), 0, (GInstanceInitFunc) maya_util_date_iterator_instance_init, NULL };
		static const GInterfaceInfo gee_traversable_info = { (GInterfaceInitFunc) maya_util_date_iterator_gee_traversable_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo gee_iterator_info = { (GInterfaceInitFunc) maya_util_date_iterator_gee_iterator_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		GType maya_util_date_iterator_type_id;
		maya_util_date_iterator_type_id = g_type_register_static (G_TYPE_OBJECT, "MayaUtilDateIterator", &g_define_type_info, 0);
		g_type_add_interface_static (maya_util_date_iterator_type_id, GEE_TYPE_TRAVERSABLE, &gee_traversable_info);
		g_type_add_interface_static (maya_util_date_iterator_type_id, GEE_TYPE_ITERATOR, &gee_iterator_info);
		g_once_init_leave (&maya_util_date_iterator_type_id__volatile, maya_util_date_iterator_type_id);
	}
	return maya_util_date_iterator_type_id__volatile;
}


static void
_vala_maya_util_date_iterator_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec)
{
	MayaUtilDateIterator * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, MAYA_UTIL_TYPE_DATE_ITERATOR, MayaUtilDateIterator);
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	switch (property_id) {
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		case MAYA_UTIL_DATE_ITERATOR_VALID_PROPERTY:
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		g_value_set_boolean (value, gee_iterator_get_valid ((GeeIterator*) self));
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		break;
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		case MAYA_UTIL_DATE_ITERATOR_READ_ONLY_PROPERTY:
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		g_value_set_boolean (value, gee_iterator_get_read_only ((GeeIterator*) self));
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		break;
#line 606 "DateRange.c"
		default:
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 17 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		break;
#line 612 "DateRange.c"
	}
}


static gboolean
maya_util_date_range_real_foreach (GeeTraversable* base,
                                   GeeForallFunc f,
                                   gpointer f_target)
{
	MayaUtilDateRange * self;
	gboolean result = FALSE;
#line 72 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self = (MayaUtilDateRange*) base;
#line 626 "DateRange.c"
	{
		GeeIterator* _date_it = NULL;
		GeeIterator* _tmp0_;
#line 73 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp0_ = gee_iterable_iterator ((GeeIterable*) self);
#line 73 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_date_it = _tmp0_;
#line 73 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		while (TRUE) {
#line 636 "DateRange.c"
			GeeIterator* _tmp1_;
			GDateTime* date = NULL;
			GeeIterator* _tmp2_;
			gpointer _tmp3_;
			GDateTime* _tmp4_;
			GDateTime* _tmp5_;
#line 73 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_tmp1_ = _date_it;
#line 73 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			if (!gee_iterator_next (_tmp1_)) {
#line 73 "/run/build/planner/src/Services/Calendar/DateRange.vala"
				break;
#line 649 "DateRange.c"
			}
#line 73 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_tmp2_ = _date_it;
#line 73 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_tmp3_ = gee_iterator_get (_tmp2_);
#line 73 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			date = (GDateTime*) _tmp3_;
#line 74 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_tmp4_ = date;
#line 74 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_tmp5_ = _g_date_time_ref0 (_tmp4_);
#line 74 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			if (f (_tmp5_, f_target) == FALSE) {
#line 75 "/run/build/planner/src/Services/Calendar/DateRange.vala"
				result = FALSE;
#line 75 "/run/build/planner/src/Services/Calendar/DateRange.vala"
				_g_date_time_unref0 (date);
#line 75 "/run/build/planner/src/Services/Calendar/DateRange.vala"
				_g_object_unref0 (_date_it);
#line 75 "/run/build/planner/src/Services/Calendar/DateRange.vala"
				return result;
#line 671 "DateRange.c"
			}
#line 73 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_g_date_time_unref0 (date);
#line 675 "DateRange.c"
		}
#line 73 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_g_object_unref0 (_date_it);
#line 679 "DateRange.c"
	}
#line 79 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = TRUE;
#line 79 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 685 "DateRange.c"
}


MayaUtilDateRange*
maya_util_date_range_construct (GType object_type,
                                GDateTime* first,
                                GDateTime* last)
{
	MayaUtilDateRange * self = NULL;
#line 86 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_val_if_fail (first != NULL, NULL);
#line 86 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_val_if_fail (last != NULL, NULL);
#line 86 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self = (MayaUtilDateRange*) g_object_new (object_type, NULL);
#line 87 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	maya_util_date_range_set_first_dt (self, first);
#line 88 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	maya_util_date_range_set_last_dt (self, last);
#line 86 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return self;
#line 707 "DateRange.c"
}


MayaUtilDateRange*
maya_util_date_range_new (GDateTime* first,
                          GDateTime* last)
{
#line 86 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return maya_util_date_range_construct (MAYA_UTIL_TYPE_DATE_RANGE, first, last);
#line 717 "DateRange.c"
}


MayaUtilDateRange*
maya_util_date_range_construct_copy (GType object_type,
                                     MayaUtilDateRange* date_range)
{
	MayaUtilDateRange * self = NULL;
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
#line 91 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_val_if_fail (date_range != NULL, NULL);
#line 92 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp0_ = date_range->priv->_first_dt;
#line 92 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp1_ = date_range->priv->_last_dt;
#line 92 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self = (MayaUtilDateRange*) maya_util_date_range_construct (object_type, _tmp0_, _tmp1_);
#line 91 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return self;
#line 738 "DateRange.c"
}


MayaUtilDateRange*
maya_util_date_range_new_copy (MayaUtilDateRange* date_range)
{
#line 91 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return maya_util_date_range_construct_copy (MAYA_UTIL_TYPE_DATE_RANGE, date_range);
#line 747 "DateRange.c"
}


gboolean
maya_util_date_range_equals (MayaUtilDateRange* self,
                             MayaUtilDateRange* other)
{
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	GDateTime* _tmp1_;
	GDateTime* _tmp2_;
#line 95 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 95 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_val_if_fail (other != NULL, FALSE);
#line 96 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp1_ = self->priv->_first_dt;
#line 96 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp2_ = other->priv->_first_dt;
#line 96 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	if (_tmp1_ == _tmp2_) {
#line 769 "DateRange.c"
		GDateTime* _tmp3_;
		GDateTime* _tmp4_;
#line 96 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp3_ = self->priv->_last_dt;
#line 96 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp4_ = other->priv->_last_dt;
#line 96 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp0_ = _tmp3_ == _tmp4_;
#line 778 "DateRange.c"
	} else {
#line 96 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp0_ = FALSE;
#line 782 "DateRange.c"
	}
#line 96 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = _tmp0_;
#line 96 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 788 "DateRange.c"
}


static GeeIterator*
maya_util_date_range_real_iterator (GeeIterable* base)
{
	MayaUtilDateRange * self;
	GeeIterator* result = NULL;
	MayaUtilDateIterator* _tmp0_;
#line 103 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self = (MayaUtilDateRange*) base;
#line 104 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp0_ = maya_util_date_iterator_new (self);
#line 104 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = (GeeIterator*) _tmp0_;
#line 104 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 806 "DateRange.c"
}


gboolean
maya_util_date_range_contains (MayaUtilDateRange* self,
                               GDateTime* time)
{
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	GDateTime* _tmp1_;
#line 107 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 107 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_val_if_fail (time != NULL, FALSE);
#line 108 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp1_ = self->priv->_first_dt;
#line 108 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	if (g_date_time_compare (_tmp1_, time) < 1) {
#line 825 "DateRange.c"
		GDateTime* _tmp2_;
#line 108 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp2_ = self->priv->_last_dt;
#line 108 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp0_ = g_date_time_compare (_tmp2_, time) > -1;
#line 831 "DateRange.c"
	} else {
#line 108 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp0_ = FALSE;
#line 835 "DateRange.c"
	}
#line 108 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = _tmp0_;
#line 108 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 841 "DateRange.c"
}


GeeSortedSet*
maya_util_date_range_to_set (MayaUtilDateRange* self)
{
	GeeSortedSet* result = NULL;
	GeeTreeSet* set = NULL;
	GeeTreeSet* _tmp0_;
#line 111 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 113 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp0_ = gee_tree_set_new (G_TYPE_DATE_TIME, (GBoxedCopyFunc) g_date_time_ref, (GDestroyNotify) g_date_time_unref, (GCompareDataFunc) g_date_time_compare, NULL, NULL);
#line 113 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	set = _tmp0_;
#line 857 "DateRange.c"
	{
		GeeIterator* _date_it = NULL;
		GeeIterator* _tmp1_;
#line 115 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp1_ = gee_iterable_iterator ((GeeIterable*) self);
#line 115 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_date_it = _tmp1_;
#line 115 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		while (TRUE) {
#line 867 "DateRange.c"
			GeeIterator* _tmp2_;
			GDateTime* date = NULL;
			GeeIterator* _tmp3_;
			gpointer _tmp4_;
			GeeTreeSet* _tmp5_;
			GDateTime* _tmp6_;
#line 115 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_tmp2_ = _date_it;
#line 115 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			if (!gee_iterator_next (_tmp2_)) {
#line 115 "/run/build/planner/src/Services/Calendar/DateRange.vala"
				break;
#line 880 "DateRange.c"
			}
#line 115 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_tmp3_ = _date_it;
#line 115 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_tmp4_ = gee_iterator_get (_tmp3_);
#line 115 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			date = (GDateTime*) _tmp4_;
#line 116 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_tmp5_ = set;
#line 116 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_tmp6_ = date;
#line 116 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			gee_abstract_collection_add ((GeeAbstractCollection*) _tmp5_, _tmp6_);
#line 115 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_g_date_time_unref0 (date);
#line 896 "DateRange.c"
		}
#line 115 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_g_object_unref0 (_date_it);
#line 900 "DateRange.c"
	}
#line 118 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = (GeeSortedSet*) set;
#line 118 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 906 "DateRange.c"
}


GeeList*
maya_util_date_range_to_list (MayaUtilDateRange* self)
{
	GeeList* result = NULL;
	GeeArrayList* list = NULL;
	GeeArrayList* _tmp0_;
#line 121 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 122 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp0_ = gee_array_list_new (G_TYPE_DATE_TIME, (GBoxedCopyFunc) g_date_time_ref, (GDestroyNotify) g_date_time_unref, (GeeEqualDataFunc) maya_util_datetime_equal_func, NULL, NULL);
#line 122 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	list = _tmp0_;
#line 922 "DateRange.c"
	{
		GeeIterator* _date_it = NULL;
		GeeIterator* _tmp1_;
#line 123 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp1_ = gee_iterable_iterator ((GeeIterable*) self);
#line 123 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_date_it = _tmp1_;
#line 123 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		while (TRUE) {
#line 932 "DateRange.c"
			GeeIterator* _tmp2_;
			GDateTime* date = NULL;
			GeeIterator* _tmp3_;
			gpointer _tmp4_;
			GeeArrayList* _tmp5_;
			GDateTime* _tmp6_;
#line 123 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_tmp2_ = _date_it;
#line 123 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			if (!gee_iterator_next (_tmp2_)) {
#line 123 "/run/build/planner/src/Services/Calendar/DateRange.vala"
				break;
#line 945 "DateRange.c"
			}
#line 123 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_tmp3_ = _date_it;
#line 123 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_tmp4_ = gee_iterator_get (_tmp3_);
#line 123 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			date = (GDateTime*) _tmp4_;
#line 124 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_tmp5_ = list;
#line 124 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_tmp6_ = date;
#line 124 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			gee_abstract_collection_add ((GeeAbstractCollection*) _tmp5_, _tmp6_);
#line 123 "/run/build/planner/src/Services/Calendar/DateRange.vala"
			_g_date_time_unref0 (date);
#line 961 "DateRange.c"
		}
#line 123 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_g_object_unref0 (_date_it);
#line 965 "DateRange.c"
	}
#line 126 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = (GeeList*) list;
#line 126 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 971 "DateRange.c"
}


GDateTime*
maya_util_date_range_get_first_dt (MayaUtilDateRange* self)
{
	GDateTime* result;
	GDateTime* _tmp0_;
#line 70 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 70 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp0_ = self->priv->_first_dt;
#line 70 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = _tmp0_;
#line 70 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 988 "DateRange.c"
}


static void
maya_util_date_range_set_first_dt (MayaUtilDateRange* self,
                                   GDateTime* value)
{
#line 70 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_if_fail (self != NULL);
#line 70 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	if (maya_util_date_range_get_first_dt (self) != value) {
#line 1000 "DateRange.c"
		GDateTime* _tmp0_;
#line 70 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp0_ = _g_date_time_ref0 (value);
#line 70 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_g_date_time_unref0 (self->priv->_first_dt);
#line 70 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		self->priv->_first_dt = _tmp0_;
#line 70 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		g_object_notify_by_pspec ((GObject *) self, maya_util_date_range_properties[MAYA_UTIL_DATE_RANGE_FIRST_DT_PROPERTY]);
#line 1010 "DateRange.c"
	}
}


GDateTime*
maya_util_date_range_get_last_dt (MayaUtilDateRange* self)
{
	GDateTime* result;
	GDateTime* _tmp0_;
#line 71 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 71 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp0_ = self->priv->_last_dt;
#line 71 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = _tmp0_;
#line 71 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 1028 "DateRange.c"
}


static void
maya_util_date_range_set_last_dt (MayaUtilDateRange* self,
                                  GDateTime* value)
{
#line 71 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_if_fail (self != NULL);
#line 71 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	if (maya_util_date_range_get_last_dt (self) != value) {
#line 1040 "DateRange.c"
		GDateTime* _tmp0_;
#line 71 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_tmp0_ = _g_date_time_ref0 (value);
#line 71 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		_g_date_time_unref0 (self->priv->_last_dt);
#line 71 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		self->priv->_last_dt = _tmp0_;
#line 71 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		g_object_notify_by_pspec ((GObject *) self, maya_util_date_range_properties[MAYA_UTIL_DATE_RANGE_LAST_DT_PROPERTY]);
#line 1050 "DateRange.c"
	}
}


gint64
maya_util_date_range_get_days (MayaUtilDateRange* self)
{
	gint64 result;
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
#line 83 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_return_val_if_fail (self != NULL, 0LL);
#line 83 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp0_ = self->priv->_last_dt;
#line 83 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_tmp1_ = self->priv->_first_dt;
#line 83 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = (gint64) (g_date_time_difference (_tmp0_, _tmp1_) / G_TIME_SPAN_DAY);
#line 83 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 1071 "DateRange.c"
}


static GType
maya_util_date_range_real_get_element_type (GeeTraversable* base)
{
	GType result;
	MayaUtilDateRange* self;
#line 100 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self = (MayaUtilDateRange*) base;
#line 100 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	result = G_TYPE_DATE_TIME;
#line 100 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return result;
#line 1086 "DateRange.c"
}


static void
maya_util_date_range_class_init (MayaUtilDateRangeClass * klass)
{
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	maya_util_date_range_parent_class = g_type_class_peek_parent (klass);
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_type_class_add_private (klass, sizeof (MayaUtilDateRangePrivate));
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_maya_util_date_range_get_property;
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_maya_util_date_range_set_property;
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	G_OBJECT_CLASS (klass)->finalize = maya_util_date_range_finalize;
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), MAYA_UTIL_DATE_RANGE_FIRST_DT_PROPERTY, maya_util_date_range_properties[MAYA_UTIL_DATE_RANGE_FIRST_DT_PROPERTY] = g_param_spec_boxed ("first-dt", "first-dt", "first-dt", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), MAYA_UTIL_DATE_RANGE_LAST_DT_PROPERTY, maya_util_date_range_properties[MAYA_UTIL_DATE_RANGE_LAST_DT_PROPERTY] = g_param_spec_boxed ("last-dt", "last-dt", "last-dt", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), MAYA_UTIL_DATE_RANGE_DAYS_PROPERTY, maya_util_date_range_properties[MAYA_UTIL_DATE_RANGE_DAYS_PROPERTY] = g_param_spec_int64 ("days", "days", "days", G_MININT64, G_MAXINT64, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), MAYA_UTIL_DATE_RANGE_ELEMENT_TYPE_PROPERTY, maya_util_date_range_properties[MAYA_UTIL_DATE_RANGE_ELEMENT_TYPE_PROPERTY] = g_param_spec_gtype ("element-type", "element-type", "element-type", G_TYPE_NONE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1111 "DateRange.c"
}


static GType
maya_util_date_range_gee_traversable_get_g_type (MayaUtilDateRange* self)
{
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return G_TYPE_DATE_TIME;
#line 1120 "DateRange.c"
}


static GBoxedCopyFunc
maya_util_date_range_gee_traversable_get_g_dup_func (MayaUtilDateRange* self)
{
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return g_date_time_ref;
#line 1129 "DateRange.c"
}


static GDestroyNotify
maya_util_date_range_gee_traversable_get_g_destroy_func (MayaUtilDateRange* self)
{
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return g_date_time_unref;
#line 1138 "DateRange.c"
}


static void
maya_util_date_range_gee_traversable_interface_init (GeeTraversableIface * iface)
{
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	maya_util_date_range_gee_traversable_parent_iface = g_type_interface_peek_parent (iface);
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->foreach = (gboolean (*) (GeeTraversable *, GeeForallFunc, gpointer)) maya_util_date_range_real_foreach;
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->get_g_type = (GType (*) (GeeTraversable *)) maya_util_date_range_gee_traversable_get_g_type;
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->get_g_dup_func = (GBoxedCopyFunc (*) (GeeTraversable *)) maya_util_date_range_gee_traversable_get_g_dup_func;
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->get_g_destroy_func = (GDestroyNotify (*) (GeeTraversable *)) maya_util_date_range_gee_traversable_get_g_destroy_func;
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->get_element_type = maya_util_date_range_real_get_element_type;
#line 1157 "DateRange.c"
}


static GType
maya_util_date_range_gee_iterable_get_g_type (MayaUtilDateRange* self)
{
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return G_TYPE_DATE_TIME;
#line 1166 "DateRange.c"
}


static GBoxedCopyFunc
maya_util_date_range_gee_iterable_get_g_dup_func (MayaUtilDateRange* self)
{
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return g_date_time_ref;
#line 1175 "DateRange.c"
}


static GDestroyNotify
maya_util_date_range_gee_iterable_get_g_destroy_func (MayaUtilDateRange* self)
{
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	return g_date_time_unref;
#line 1184 "DateRange.c"
}


static void
maya_util_date_range_gee_iterable_interface_init (GeeIterableIface * iface)
{
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	maya_util_date_range_gee_iterable_parent_iface = g_type_interface_peek_parent (iface);
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->iterator = (GeeIterator* (*) (GeeIterable *)) maya_util_date_range_real_iterator;
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->get_g_type = (GType (*) (GeeIterable *)) maya_util_date_range_gee_iterable_get_g_type;
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->get_g_dup_func = (GBoxedCopyFunc (*) (GeeIterable *)) maya_util_date_range_gee_iterable_get_g_dup_func;
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	iface->get_g_destroy_func = (GDestroyNotify (*) (GeeIterable *)) maya_util_date_range_gee_iterable_get_g_destroy_func;
#line 1201 "DateRange.c"
}


static void
maya_util_date_range_instance_init (MayaUtilDateRange * self)
{
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self->priv = MAYA_UTIL_DATE_RANGE_GET_PRIVATE (self);
#line 1210 "DateRange.c"
}


static void
maya_util_date_range_finalize (GObject * obj)
{
	MayaUtilDateRange * self;
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, MAYA_UTIL_TYPE_DATE_RANGE, MayaUtilDateRange);
#line 70 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_g_date_time_unref0 (self->priv->_first_dt);
#line 71 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	_g_date_time_unref0 (self->priv->_last_dt);
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	G_OBJECT_CLASS (maya_util_date_range_parent_class)->finalize (obj);
#line 1226 "DateRange.c"
}


GType
maya_util_date_range_get_type (void)
{
	static volatile gsize maya_util_date_range_type_id__volatile = 0;
	if (g_once_init_enter (&maya_util_date_range_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (MayaUtilDateRangeClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) maya_util_date_range_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (MayaUtilDateRange), 0, (GInstanceInitFunc) maya_util_date_range_instance_init, NULL };
		static const GInterfaceInfo gee_traversable_info = { (GInterfaceInitFunc) maya_util_date_range_gee_traversable_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo gee_iterable_info = { (GInterfaceInitFunc) maya_util_date_range_gee_iterable_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		GType maya_util_date_range_type_id;
		maya_util_date_range_type_id = g_type_register_static (G_TYPE_OBJECT, "MayaUtilDateRange", &g_define_type_info, 0);
		g_type_add_interface_static (maya_util_date_range_type_id, GEE_TYPE_TRAVERSABLE, &gee_traversable_info);
		g_type_add_interface_static (maya_util_date_range_type_id, GEE_TYPE_ITERABLE, &gee_iterable_info);
		g_once_init_leave (&maya_util_date_range_type_id__volatile, maya_util_date_range_type_id);
	}
	return maya_util_date_range_type_id__volatile;
}


static void
_vala_maya_util_date_range_get_property (GObject * object,
                                         guint property_id,
                                         GValue * value,
                                         GParamSpec * pspec)
{
	MayaUtilDateRange * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, MAYA_UTIL_TYPE_DATE_RANGE, MayaUtilDateRange);
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	switch (property_id) {
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		case MAYA_UTIL_DATE_RANGE_FIRST_DT_PROPERTY:
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		g_value_set_boxed (value, maya_util_date_range_get_first_dt (self));
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		break;
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		case MAYA_UTIL_DATE_RANGE_LAST_DT_PROPERTY:
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		g_value_set_boxed (value, maya_util_date_range_get_last_dt (self));
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		break;
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		case MAYA_UTIL_DATE_RANGE_DAYS_PROPERTY:
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		g_value_set_int64 (value, maya_util_date_range_get_days (self));
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		break;
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		case MAYA_UTIL_DATE_RANGE_ELEMENT_TYPE_PROPERTY:
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		g_value_set_gtype (value, gee_traversable_get_element_type ((GeeTraversable*) self));
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		break;
#line 1282 "DateRange.c"
		default:
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		break;
#line 1288 "DateRange.c"
	}
}


static void
_vala_maya_util_date_range_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec)
{
	MayaUtilDateRange * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, MAYA_UTIL_TYPE_DATE_RANGE, MayaUtilDateRange);
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
	switch (property_id) {
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		case MAYA_UTIL_DATE_RANGE_FIRST_DT_PROPERTY:
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		maya_util_date_range_set_first_dt (self, g_value_get_boxed (value));
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		break;
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		case MAYA_UTIL_DATE_RANGE_LAST_DT_PROPERTY:
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		maya_util_date_range_set_last_dt (self, g_value_get_boxed (value));
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		break;
#line 1315 "DateRange.c"
		default:
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 69 "/run/build/planner/src/Services/Calendar/DateRange.vala"
		break;
#line 1321 "DateRange.c"
	}
}



