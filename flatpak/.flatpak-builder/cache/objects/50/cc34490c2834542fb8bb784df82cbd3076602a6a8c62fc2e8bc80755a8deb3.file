/* object-cache.c generated by valac 0.40.11, the Vala compiler
 * generated from object-cache.vala, do not modify */

/*
 * Copyright (C) 2011 Collabora Ltd.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Philip Withnall <philip.withnall@collabora.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>


#define FOLKS_TYPE_OBJECT_CACHE (folks_object_cache_get_type ())
#define FOLKS_OBJECT_CACHE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_OBJECT_CACHE, FolksObjectCache))
#define FOLKS_OBJECT_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_OBJECT_CACHE, FolksObjectCacheClass))
#define FOLKS_IS_OBJECT_CACHE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_OBJECT_CACHE))
#define FOLKS_IS_OBJECT_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_OBJECT_CACHE))
#define FOLKS_OBJECT_CACHE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_OBJECT_CACHE, FolksObjectCacheClass))

typedef struct _FolksObjectCache FolksObjectCache;
typedef struct _FolksObjectCacheClass FolksObjectCacheClass;
typedef struct _FolksObjectCachePrivate FolksObjectCachePrivate;
enum  {
	FOLKS_OBJECT_CACHE_0_PROPERTY,
	FOLKS_OBJECT_CACHE_T_TYPE,
	FOLKS_OBJECT_CACHE_T_DUP_FUNC,
	FOLKS_OBJECT_CACHE_T_DESTROY_FUNC,
	FOLKS_OBJECT_CACHE_TYPE_ID_PROPERTY,
	FOLKS_OBJECT_CACHE_ID_PROPERTY,
	FOLKS_OBJECT_CACHE_NUM_PROPERTIES
};
static GParamSpec* folks_object_cache_properties[FOLKS_OBJECT_CACHE_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _g_variant_type_free0(var) ((var == NULL) ? NULL : (var = (g_variant_type_free (var), NULL)))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
typedef struct _FolksObjectCacheLoadObjectsData FolksObjectCacheLoadObjectsData;
typedef struct _FolksObjectCacheStoreObjectsData FolksObjectCacheStoreObjectsData;
typedef struct _FolksObjectCacheClearCacheData FolksObjectCacheClearCacheData;
typedef struct _FolksObjectCacheCreateCacheDirectoryData FolksObjectCacheCreateCacheDirectoryData;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _FolksObjectCache {
	GObject parent_instance;
	FolksObjectCachePrivate * priv;
};

struct _FolksObjectCacheClass {
	GObjectClass parent_class;
	GVariantType* (*get_serialised_object_type) (FolksObjectCache* self, guint8 object_version);
	guint8 (*get_serialised_object_version) (FolksObjectCache* self);
	GVariant* (*serialise_object) (FolksObjectCache* self, gconstpointer object);
	gpointer (*deserialise_object) (FolksObjectCache* self, GVariant* variant, guint8 object_version);
};

struct _FolksObjectCachePrivate {
	GType t_type;
	GBoxedCopyFunc t_dup_func;
	GDestroyNotify t_destroy_func;
	GFile* _cache_directory;
	GFile* _cache_file;
	gchar* _cache_file_path;
	gchar* _type_id;
	gchar* _id;
};

struct _FolksObjectCacheLoadObjectsData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksObjectCache* self;
	GCancellable* cancellable;
	GeeSet* result;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	guint8* data;
	gint data_length1;
	gint _data_size_;
	GFile* _tmp3_;
	guint8* _tmp4_;
	gsize _tmp5_;
	GError* e;
	GError* _tmp6_;
	GError* _tmp7_;
	const gchar* _tmp8_;
	GError* _tmp9_;
	const gchar* _tmp10_;
	const gchar* _tmp11_;
	GError* _tmp12_;
	const gchar* _tmp13_;
	guint8* _tmp14_;
	gint _tmp14__length1;
	const gchar* _tmp15_;
	guint8 wrapper_version;
	guint8* _tmp16_;
	gint _tmp16__length1;
	guint8 _tmp17_;
	guint8 object_version;
	guint8* _tmp18_;
	gint _tmp18__length1;
	guint8 _tmp19_;
	guint8 _tmp20_;
	const gchar* _tmp21_;
	guint8 _tmp22_;
	guint8* variant_data;
	guint8* _tmp23_;
	gint _tmp23__length1;
	guint8* _tmp24_;
	gint _tmp24__length1;
	gint variant_data_length1;
	gint _variant_data_size_;
	GVariantType* _variant_type;
	guint8 _tmp25_;
	guint8 _tmp26_;
	GVariantType* _tmp27_;
	const GVariantType* _tmp28_;
	const gchar* _tmp29_;
	guint8 _tmp30_;
	GVariantType* variant_type;
	const GVariantType* _tmp31_;
	GVariantType* _tmp32_;
	GVariant* variant;
	const GVariantType* _tmp33_;
	guint8* _tmp34_;
	gint _tmp34__length1;
	guint8* _tmp35_;
	gint _tmp35__length1;
	guint8* _tmp36_;
	gint _tmp36__length1;
	GVariant* _tmp37_;
	GVariant* _tmp38_;
	const gchar* _tmp39_;
	gchar* type_id;
	GVariant* _tmp40_;
	GVariant* _tmp41_;
	GVariant* _tmp42_;
	const gchar* _tmp43_;
	gchar* _tmp44_;
	gchar* _tmp45_;
	const gchar* _tmp46_;
	const gchar* _tmp47_;
	const gchar* _tmp48_;
	const gchar* _tmp49_;
	const gchar* _tmp50_;
	gchar* id;
	GVariant* _tmp51_;
	GVariant* _tmp52_;
	GVariant* _tmp53_;
	const gchar* _tmp54_;
	gchar* _tmp55_;
	gchar* _tmp56_;
	const gchar* _tmp57_;
	const gchar* _tmp58_;
	const gchar* _tmp59_;
	const gchar* _tmp60_;
	const gchar* _tmp61_;
	GVariant* objects_variant;
	GVariant* _tmp62_;
	GVariant* _tmp63_;
	GeeHashSet* objects;
	GeeHashSet* _tmp64_;
	guint i;
	gboolean _tmp65_;
	guint _tmp66_;
	guint _tmp67_;
	GVariant* _tmp68_;
	GVariant* object_variant;
	GVariant* _tmp69_;
	guint _tmp70_;
	GVariant* _tmp71_;
	gpointer object;
	GVariant* _tmp72_;
	guint8 _tmp73_;
	gpointer _tmp74_;
	GeeHashSet* _tmp75_;
	gconstpointer _tmp76_;
	GError * _inner_error_;
};

struct _FolksObjectCacheStoreObjectsData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksObjectCache* self;
	GeeSet* objects;
	GCancellable* cancellable;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	GVariantType* child_type;
	GVariantType* _tmp3_;
	const GVariantType* _tmp4_;
	GVariant** children;
	gint _tmp5_;
	gint _tmp6_;
	GVariant** _tmp7_;
	gint children_length1;
	gint _children_size_;
	guint i;
	GeeIterator* _object_it;
	GeeIterator* _tmp8_;
	GeeIterator* _tmp9_;
	gpointer object;
	GeeIterator* _tmp10_;
	gpointer _tmp11_;
	GVariant** _tmp12_;
	gint _tmp12__length1;
	guint _tmp13_;
	gconstpointer _tmp14_;
	GVariant* _tmp15_;
	GVariant* _tmp16_;
	guint8 wrapper_version;
	guint8 object_version;
	GVariant* variant;
	const gchar* _tmp17_;
	GVariant* _tmp18_;
	const gchar* _tmp19_;
	GVariant* _tmp20_;
	const GVariantType* _tmp21_;
	GVariant** _tmp22_;
	gint _tmp22__length1;
	GVariant* _tmp23_;
	GVariant** _tmp24_;
	GVariant** _tmp25_;
	gint _tmp25__length1;
	GVariant* _tmp26_;
	GVariant* _tmp27_;
	GVariantType* desired_variant_type;
	guint8 _tmp28_;
	guint8 _tmp29_;
	GVariantType* _tmp30_;
	gboolean _tmp31_;
	const GVariantType* _tmp32_;
	GVariant* _tmp33_;
	const GVariantType* _tmp34_;
	const GVariantType* _tmp35_;
	guint8* data;
	GVariant* _tmp36_;
	guint8* _tmp37_;
	gint data_length1;
	gint _data_size_;
	guint8* _tmp38_;
	gint _tmp38__length1;
	guint8 _tmp39_;
	guint8 _tmp40_;
	guint8* _tmp41_;
	gint _tmp41__length1;
	guint8 _tmp42_;
	guint8 _tmp43_;
	GVariant* _tmp44_;
	guint8* _tmp45_;
	gint _tmp45__length1;
	guint8* _tmp46_;
	gint _tmp46__length1;
	GFile* _tmp47_;
	guint8* _tmp48_;
	gint _tmp48__length1;
	GError* e;
	GError* _tmp49_;
	GError* e2;
	GFile* _tmp50_;
	gchar* _tmp51_;
	gchar* _tmp52_;
	GError* _tmp53_;
	const gchar* _tmp54_;
	GError* _tmp55_;
	const gchar* _tmp56_;
	GError* _tmp57_;
	const gchar* _tmp58_;
	GError * _inner_error_;
};

struct _FolksObjectCacheClearCacheData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksObjectCache* self;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	GFile* _tmp3_;
	GError* e;
	GError * _inner_error_;
};

struct _FolksObjectCacheCreateCacheDirectoryData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksObjectCache* self;
	GFile* _tmp0_;
	GError* e;
	GError* _tmp1_;
	GError* _tmp2_;
	GError* _tmp3_;
	GError * _inner_error_;
};


static gpointer folks_object_cache_parent_class = NULL;

GType folks_object_cache_get_type (void) G_GNUC_CONST;
#define FOLKS_OBJECT_CACHE_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_TYPE_OBJECT_CACHE, FolksObjectCachePrivate))
#define FOLKS_OBJECT_CACHE__FILE_FORMAT_VERSION ((guint8) 1)
#define FOLKS_OBJECT_CACHE__HEADER_WIDTH ((gsize) 8)
GVariantType* folks_object_cache_get_serialised_object_type (FolksObjectCache* self,
                                                             guint8 object_version);
static GVariantType* folks_object_cache_real_get_serialised_object_type (FolksObjectCache* self,
                                                                  guint8 object_version);
guint8 folks_object_cache_get_serialised_object_version (FolksObjectCache* self);
static guint8 folks_object_cache_real_get_serialised_object_version (FolksObjectCache* self);
GVariant* folks_object_cache_serialise_object (FolksObjectCache* self,
                                               gconstpointer object);
static GVariant* folks_object_cache_real_serialise_object (FolksObjectCache* self,
                                                    gconstpointer object);
gpointer folks_object_cache_deserialise_object (FolksObjectCache* self,
                                                GVariant* variant,
                                                guint8 object_version);
static gpointer folks_object_cache_real_deserialise_object (FolksObjectCache* self,
                                                     GVariant* variant,
                                                     guint8 object_version);
FolksObjectCache* folks_object_cache_construct (GType object_type,
                                                GType t_type,
                                                GBoxedCopyFunc t_dup_func,
                                                GDestroyNotify t_destroy_func,
                                                const gchar* type_id,
                                                const gchar* id);
static void folks_object_cache_load_objects_data_free (gpointer _data);
static void folks_object_cache_load_objects_async_ready_wrapper (GObject *source_object,
                                                          GAsyncResult *res,
                                                          void *user_data);
void folks_object_cache_load_objects (FolksObjectCache* self,
                                      GCancellable* cancellable,
                                      GAsyncReadyCallback _callback_,
                                      gpointer _user_data_);
GeeSet* folks_object_cache_load_objects_finish (FolksObjectCache* self,
                                                GAsyncResult* _res_);
static gboolean folks_object_cache_load_objects_co (FolksObjectCacheLoadObjectsData* _data_);
const gchar* folks_object_cache_get_type_id (FolksObjectCache* self);
static void folks_object_cache_load_objects_ready (GObject* source_object,
                                            GAsyncResult* _res_,
                                            gpointer _user_data_);
void folks_object_cache_clear_cache (FolksObjectCache* self,
                                     GAsyncReadyCallback _callback_,
                                     gpointer _user_data_);
void folks_object_cache_clear_cache_finish (FolksObjectCache* self,
                                            GAsyncResult* _res_);
static GVariantType* _folks_object_cache_get_cache_file_variant_type (FolksObjectCache* self,
                                                               guint8 wrapper_version,
                                                               guint8 object_version);
static guint8* _vala_array_dup3 (guint8* self,
                          int length);
static void folks_object_cache_store_objects_data_free (gpointer _data);
static void folks_object_cache_store_objects_async_ready_wrapper (GObject *source_object,
                                                           GAsyncResult *res,
                                                           void *user_data);
void folks_object_cache_store_objects (FolksObjectCache* self,
                                       GeeSet* objects,
                                       GCancellable* cancellable,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_);
void folks_object_cache_store_objects_finish (FolksObjectCache* self,
                                              GAsyncResult* _res_);
static gboolean folks_object_cache_store_objects_co (FolksObjectCacheStoreObjectsData* _data_);
static void folks_object_cache_store_objects_ready (GObject* source_object,
                                             GAsyncResult* _res_,
                                             gpointer _user_data_);
static void _folks_object_cache_create_cache_directory (FolksObjectCache* self,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_);
static void _folks_object_cache_create_cache_directory_finish (FolksObjectCache* self,
                                                        GAsyncResult* _res_,
                                                        GError** error);
static void folks_object_cache_clear_cache_data_free (gpointer _data);
static void folks_object_cache_clear_cache_async_ready_wrapper (GObject *source_object,
                                                         GAsyncResult *res,
                                                         void *user_data);
static gboolean folks_object_cache_clear_cache_co (FolksObjectCacheClearCacheData* _data_);
static void _folks_object_cache_create_cache_directory_data_free (gpointer _data);
static void _folks_object_cache_create_cache_directory_async_ready_wrapper (GObject *source_object,
                                                                     GAsyncResult *res,
                                                                     void *user_data);
static gboolean _folks_object_cache_create_cache_directory_co (FolksObjectCacheCreateCacheDirectoryData* _data_);
static void folks_object_cache_set_type_id (FolksObjectCache* self,
                                     const gchar* value);
const gchar* folks_object_cache_get_id (FolksObjectCache* self);
static void folks_object_cache_set_id (FolksObjectCache* self,
                                const gchar* value);
static GObject * folks_object_cache_constructor (GType type,
                                          guint n_construct_properties,
                                          GObjectConstructParam * construct_properties);
static void folks_object_cache_finalize (GObject * obj);
static void _vala_folks_object_cache_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec);
static void _vala_folks_object_cache_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);


/**
   * Get the {@link GLib.VariantType} of the serialised form of an object stored
   * in this cache.
   *
   * If a smooth upgrade path is needed in future due to cache file format
   * changes, this may be modified to take a version parameter.
   *
   * @param object_version the version of the object format to use, or
   * ``uint8.MAX`` for the latest version
   * @return variant type for that object version, or ``null`` if the version is
   * unsupported
   * @since 0.6.0
   */
static GVariantType*
folks_object_cache_real_get_serialised_object_type (FolksObjectCache* self,
                                                    guint8 object_version)
{
#line 70 "/run/build/folks/folks/object-cache.vala"
	g_critical ("Type `%s' does not implement abstract method `folks_object_cache_get_serialised_object_type'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
#line 70 "/run/build/folks/folks/object-cache.vala"
	return NULL;
#line 468 "object-cache.c"
}


GVariantType*
folks_object_cache_get_serialised_object_type (FolksObjectCache* self,
                                               guint8 object_version)
{
#line 70 "/run/build/folks/folks/object-cache.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 70 "/run/build/folks/folks/object-cache.vala"
	return FOLKS_OBJECT_CACHE_GET_CLASS (self)->get_serialised_object_type (self, object_version);
#line 480 "object-cache.c"
}


/**
   * Get the version of the variant type returned by
   * {@link ObjectCache.get_serialised_object_type}. This must be incremented
   * every time the variant type changes so that old cache files aren't
   * misinterpreted.
   *
   * @since 0.6.0
   */
static guint8
folks_object_cache_real_get_serialised_object_version (FolksObjectCache* self)
{
	guint8 _tmp0_ = 0U;
#line 81 "/run/build/folks/folks/object-cache.vala"
	g_critical ("Type `%s' does not implement abstract method `folks_object_cache_get_serialised_object_version'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
#line 81 "/run/build/folks/folks/object-cache.vala"
	return _tmp0_;
#line 500 "object-cache.c"
}


guint8
folks_object_cache_get_serialised_object_version (FolksObjectCache* self)
{
#line 81 "/run/build/folks/folks/object-cache.vala"
	g_return_val_if_fail (self != NULL, 0U);
#line 81 "/run/build/folks/folks/object-cache.vala"
	return FOLKS_OBJECT_CACHE_GET_CLASS (self)->get_serialised_object_version (self);
#line 511 "object-cache.c"
}


/**
   * Serialise the given ``object`` to a {@link GLib.Variant} and return the
   * variant. The variant must be of the type returned by
   * {@link ObjectCache.get_serialised_object_type}.
   *
   * @param object the object to serialise
   * @return serialised form of ``object``
   *
   * @since 0.6.0
   */
static GVariant*
folks_object_cache_real_serialise_object (FolksObjectCache* self,
                                          gconstpointer object)
{
#line 93 "/run/build/folks/folks/object-cache.vala"
	g_critical ("Type `%s' does not implement abstract method `folks_object_cache_serialise_object'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
#line 93 "/run/build/folks/folks/object-cache.vala"
	return NULL;
#line 533 "object-cache.c"
}


GVariant*
folks_object_cache_serialise_object (FolksObjectCache* self,
                                     gconstpointer object)
{
#line 93 "/run/build/folks/folks/object-cache.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 93 "/run/build/folks/folks/object-cache.vala"
	return FOLKS_OBJECT_CACHE_GET_CLASS (self)->serialise_object (self, object);
#line 545 "object-cache.c"
}


/**
   * Deserialise the given ``variant`` to a new instance of an object. The
   * variant is guaranteed to have the type returned by
   * {@link ObjectCache.get_serialised_object_type}.
   *
   * @param variant the serialised form to deserialise
   * @param object_version the version of the object format to deserialise from
   * @return the deserialised object
   *
   * @since 0.6.0
   */
static gpointer
folks_object_cache_real_deserialise_object (FolksObjectCache* self,
                                            GVariant* variant,
                                            guint8 object_version)
{
#line 106 "/run/build/folks/folks/object-cache.vala"
	g_critical ("Type `%s' does not implement abstract method `folks_object_cache_deserialise_object'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
#line 106 "/run/build/folks/folks/object-cache.vala"
	return NULL;
#line 569 "object-cache.c"
}


gpointer
folks_object_cache_deserialise_object (FolksObjectCache* self,
                                       GVariant* variant,
                                       guint8 object_version)
{
#line 106 "/run/build/folks/folks/object-cache.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 106 "/run/build/folks/folks/object-cache.vala"
	return FOLKS_OBJECT_CACHE_GET_CLASS (self)->deserialise_object (self, variant, object_version);
#line 582 "object-cache.c"
}


/**
   * Create a new cache instance using the given type ID and ID. This is
   * protected as the ``type_id`` will typically be set statically by
   * subclasses.
   *
   * @param type_id A string identifying the type of object being cached. This
   * has to be suitable for use as a directory name; i.e. lower case,
   * hyphen-separated.
   * @param id A string identifying the particular cache instance. This will
   * form the file name of the cache file, but will be escaped beforehand, so
   * can be an arbitrary non-empty string.
   * @return A new cache instance
   *
   * @since 0.6.0
   */
FolksObjectCache*
folks_object_cache_construct (GType object_type,
                              GType t_type,
                              GBoxedCopyFunc t_dup_func,
                              GDestroyNotify t_destroy_func,
                              const gchar* type_id,
                              const gchar* id)
{
	FolksObjectCache * self = NULL;
#line 149 "/run/build/folks/folks/object-cache.vala"
	g_return_val_if_fail (type_id != NULL, NULL);
#line 149 "/run/build/folks/folks/object-cache.vala"
	g_return_val_if_fail (id != NULL, NULL);
#line 151 "/run/build/folks/folks/object-cache.vala"
	self = (FolksObjectCache*) g_object_new (object_type, "type-id", type_id, "id", id, NULL);
#line 151 "/run/build/folks/folks/object-cache.vala"
	self->priv->t_type = t_type;
#line 151 "/run/build/folks/folks/object-cache.vala"
	self->priv->t_dup_func = t_dup_func;
#line 151 "/run/build/folks/folks/object-cache.vala"
	self->priv->t_destroy_func = t_destroy_func;
#line 149 "/run/build/folks/folks/object-cache.vala"
	return self;
#line 624 "object-cache.c"
}


static void
folks_object_cache_load_objects_data_free (gpointer _data)
{
	FolksObjectCacheLoadObjectsData* _data_;
	_data_ = _data;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (_data_->cancellable);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (_data_->result);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (_data_->self);
#line 35 "/run/build/folks/folks/object-cache.vala"
	g_slice_free (FolksObjectCacheLoadObjectsData, _data_);
#line 641 "object-cache.c"
}


static void
folks_object_cache_load_objects_async_ready_wrapper (GObject *source_object,
                                                     GAsyncResult *res,
                                                     void *user_data)
{
	FolksObjectCacheLoadObjectsData* _task_data_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 35 "/run/build/folks/folks/object-cache.vala"
	if (_task_data_->_callback_ != NULL) {
#line 35 "/run/build/folks/folks/object-cache.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 657 "object-cache.c"
	}
#line 35 "/run/build/folks/folks/object-cache.vala"
	_task_data_->_task_complete_ = TRUE;
#line 661 "object-cache.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 35 "/run/build/folks/folks/object-cache.vala"
	return self ? g_object_ref (self) : NULL;
#line 670 "object-cache.c"
}


void
folks_object_cache_load_objects (FolksObjectCache* self,
                                 GCancellable* cancellable,
                                 GAsyncReadyCallback _callback_,
                                 gpointer _user_data_)
{
	FolksObjectCacheLoadObjectsData* _data_;
	FolksObjectCache* _tmp0_;
	GCancellable* _tmp1_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_ = g_slice_new0 (FolksObjectCacheLoadObjectsData);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->_callback_ = _callback_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, folks_object_cache_load_objects_async_ready_wrapper, _user_data_);
#line 35 "/run/build/folks/folks/object-cache.vala"
	if (_callback_ == NULL) {
#line 35 "/run/build/folks/folks/object-cache.vala"
		_data_->_task_complete_ = TRUE;
#line 693 "object-cache.c"
	}
#line 35 "/run/build/folks/folks/object-cache.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_object_cache_load_objects_data_free);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->self = _tmp0_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_tmp1_ = _g_object_ref0 (cancellable);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (_data_->cancellable);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->cancellable = _tmp1_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	folks_object_cache_load_objects_co (_data_);
#line 709 "object-cache.c"
}


GeeSet*
folks_object_cache_load_objects_finish (FolksObjectCache* self,
                                        GAsyncResult* _res_)
{
	GeeSet* result;
	FolksObjectCacheLoadObjectsData* _data_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 35 "/run/build/folks/folks/object-cache.vala"
	if (NULL == _data_) {
#line 35 "/run/build/folks/folks/object-cache.vala"
		return NULL;
#line 725 "object-cache.c"
	}
#line 35 "/run/build/folks/folks/object-cache.vala"
	result = _data_->result;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->result = NULL;
#line 35 "/run/build/folks/folks/object-cache.vala"
	return result;
#line 733 "object-cache.c"
}


/**
   * Load a set of objects from the cache and return them as a new set. If the
   * cache file doesn't exist, ``null`` will be returned. An empty set will be
   * returned if the cache file existed but was empty (i.e. was stored with
   * an empty set originally).
   *
   * Loading the objects can be cancelled using ``cancellable``. If it is,
   * ``null`` will be returned.
   *
   * If any errors are encountered while loading the objects, warnings will be
   * logged as appropriate and ``null`` will be returned.
   *
   * This method is safe to call multiple times concurrently.
   *
   * @param cancellable A {@link GLib.Cancellable} for the operation, or
   * ``null``.
   * @return A set of objects from the cache, or ``null``.
   *
   * @since 0.6.0
   */
static void
folks_object_cache_load_objects_ready (GObject* source_object,
                                       GAsyncResult* _res_,
                                       gpointer _user_data_)
{
	FolksObjectCacheLoadObjectsData* _data_;
#line 201 "/run/build/folks/folks/object-cache.vala"
	_data_ = _user_data_;
#line 201 "/run/build/folks/folks/object-cache.vala"
	_data_->_source_object_ = source_object;
#line 201 "/run/build/folks/folks/object-cache.vala"
	_data_->_res_ = _res_;
#line 201 "/run/build/folks/folks/object-cache.vala"
	_data_->_task_complete_ = TRUE;
#line 201 "/run/build/folks/folks/object-cache.vala"
	folks_object_cache_load_objects_co (_data_);
#line 773 "object-cache.c"
}


static gpointer
_g_variant_type_copy0 (gpointer self)
{
#line 263 "/run/build/folks/folks/object-cache.vala"
	return self ? g_variant_type_copy (self) : NULL;
#line 782 "object-cache.c"
}


static guint8*
_vala_array_dup3 (guint8* self,
                  int length)
{
#line 265 "/run/build/folks/folks/object-cache.vala"
	return g_memdup (self, length * sizeof (guint8));
#line 792 "object-cache.c"
}


static gboolean
folks_object_cache_load_objects_co (FolksObjectCacheLoadObjectsData* _data_)
{
#line 191 "/run/build/folks/folks/object-cache.vala"
	switch (_data_->_state_) {
#line 191 "/run/build/folks/folks/object-cache.vala"
		case 0:
#line 803 "object-cache.c"
		goto _state_0;
#line 191 "/run/build/folks/folks/object-cache.vala"
		case 1:
#line 807 "object-cache.c"
		goto _state_1;
#line 191 "/run/build/folks/folks/object-cache.vala"
		case 2:
#line 811 "object-cache.c"
		goto _state_2;
#line 191 "/run/build/folks/folks/object-cache.vala"
		case 3:
#line 815 "object-cache.c"
		goto _state_3;
#line 191 "/run/build/folks/folks/object-cache.vala"
		case 4:
#line 819 "object-cache.c"
		goto _state_4;
#line 191 "/run/build/folks/folks/object-cache.vala"
		case 5:
#line 823 "object-cache.c"
		goto _state_5;
#line 191 "/run/build/folks/folks/object-cache.vala"
		case 6:
#line 827 "object-cache.c"
		goto _state_6;
#line 191 "/run/build/folks/folks/object-cache.vala"
		case 7:
#line 831 "object-cache.c"
		goto _state_7;
		default:
#line 191 "/run/build/folks/folks/object-cache.vala"
		g_assert_not_reached ();
#line 836 "object-cache.c"
	}
	_state_0:
#line 193 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp0_ = _data_->self->priv->_type_id;
#line 193 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp1_ = _data_->self->priv->_id;
#line 193 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp2_ = _data_->self->priv->_cache_file_path;
#line 193 "/run/build/folks/folks/object-cache.vala"
	g_debug ("object-cache.vala:193: Loading cache (type ID '%s', ID '%s') from file" \
" '%s'.", _data_->_tmp0_, _data_->_tmp1_, _data_->_tmp2_);
#line 197 "/run/build/folks/folks/object-cache.vala"
	_data_->data_length1 = 0;
#line 197 "/run/build/folks/folks/object-cache.vala"
	_data_->_data_size_ = 0;
#line 851 "object-cache.c"
	{
#line 201 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp3_ = _data_->self->priv->_cache_file;
#line 201 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp4_ = NULL;
#line 201 "/run/build/folks/folks/object-cache.vala"
		_data_->_state_ = 1;
#line 201 "/run/build/folks/folks/object-cache.vala"
		g_file_load_contents_async (_data_->_tmp3_, _data_->cancellable, folks_object_cache_load_objects_ready, _data_);
#line 201 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 863 "object-cache.c"
		_state_1:
#line 201 "/run/build/folks/folks/object-cache.vala"
		g_file_load_contents_finish (_data_->_tmp3_, _data_->_res_, &_data_->_tmp4_, &_data_->_tmp5_, NULL, &_data_->_inner_error_);
#line 201 "/run/build/folks/folks/object-cache.vala"
		_data_->data = (g_free (_data_->data), NULL);
#line 201 "/run/build/folks/folks/object-cache.vala"
		_data_->data = _data_->_tmp4_;
#line 201 "/run/build/folks/folks/object-cache.vala"
		_data_->data_length1 = _data_->_tmp5_;
#line 201 "/run/build/folks/folks/object-cache.vala"
		_data_->_data_size_ = _data_->data_length1;
#line 201 "/run/build/folks/folks/object-cache.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 877 "object-cache.c"
			goto __catch30_g_error;
		}
	}
	goto __finally30;
	__catch30_g_error:
	{
#line 199 "/run/build/folks/folks/object-cache.vala"
		_data_->e = _data_->_inner_error_;
#line 199 "/run/build/folks/folks/object-cache.vala"
		_data_->_inner_error_ = NULL;
#line 205 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp6_ = _data_->e;
#line 205 "/run/build/folks/folks/object-cache.vala"
		if (g_error_matches (_data_->_tmp6_, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
#line 892 "object-cache.c"
		} else {
#line 209 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp7_ = _data_->e;
#line 209 "/run/build/folks/folks/object-cache.vala"
			if (g_error_matches (_data_->_tmp7_, G_IO_ERROR, G_IO_ERROR_NOT_FOUND)) {
#line 211 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp8_ = _data_->self->priv->_cache_file_path;
#line 211 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp9_ = _data_->e;
#line 211 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp10_ = _data_->_tmp9_->message;
#line 211 "/run/build/folks/folks/object-cache.vala"
				g_debug ("object-cache.vala:211: Couldn't load cache file '%s': %s", _data_->_tmp8_, _data_->_tmp10_);
#line 906 "object-cache.c"
			} else {
#line 216 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp11_ = _data_->self->priv->_cache_file_path;
#line 216 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp12_ = _data_->e;
#line 216 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp13_ = _data_->_tmp12_->message;
#line 216 "/run/build/folks/folks/object-cache.vala"
				g_warning ("object-cache.vala:216: Couldn't load cache file '%s': %s", _data_->_tmp11_, _data_->_tmp13_);
#line 916 "object-cache.c"
			}
		}
#line 220 "/run/build/folks/folks/object-cache.vala"
		_data_->result = NULL;
#line 220 "/run/build/folks/folks/object-cache.vala"
		_g_error_free0 (_data_->e);
#line 220 "/run/build/folks/folks/object-cache.vala"
		_data_->data = (g_free (_data_->data), NULL);
#line 220 "/run/build/folks/folks/object-cache.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 220 "/run/build/folks/folks/object-cache.vala"
		if (_data_->_state_ != 0) {
#line 220 "/run/build/folks/folks/object-cache.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 220 "/run/build/folks/folks/object-cache.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 933 "object-cache.c"
			}
		}
#line 220 "/run/build/folks/folks/object-cache.vala"
		g_object_unref (_data_->_async_result);
#line 220 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 940 "object-cache.c"
	}
	__finally30:
#line 199 "/run/build/folks/folks/object-cache.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 199 "/run/build/folks/folks/object-cache.vala"
		_data_->data = (g_free (_data_->data), NULL);
#line 199 "/run/build/folks/folks/object-cache.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 199 "/run/build/folks/folks/object-cache.vala"
		g_clear_error (&_data_->_inner_error_);
#line 199 "/run/build/folks/folks/object-cache.vala"
		g_object_unref (_data_->_async_result);
#line 199 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 955 "object-cache.c"
	}
#line 224 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp14_ = _data_->data;
#line 224 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp14__length1 = _data_->data_length1;
#line 224 "/run/build/folks/folks/object-cache.vala"
	if (((gsize) _data_->_tmp14__length1) < FOLKS_OBJECT_CACHE__HEADER_WIDTH) {
#line 226 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp15_ = _data_->self->priv->_cache_file_path;
#line 226 "/run/build/folks/folks/object-cache.vala"
		g_warning ("object-cache.vala:226: Cache file '%s' was too small. The file was del" \
"eted.", _data_->_tmp15_);
#line 228 "/run/build/folks/folks/object-cache.vala"
		_data_->_state_ = 2;
#line 228 "/run/build/folks/folks/object-cache.vala"
		folks_object_cache_clear_cache (_data_->self, folks_object_cache_load_objects_ready, _data_);
#line 228 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 973 "object-cache.c"
		_state_2:
#line 228 "/run/build/folks/folks/object-cache.vala"
		folks_object_cache_clear_cache_finish (_data_->self, _data_->_res_);
#line 230 "/run/build/folks/folks/object-cache.vala"
		_data_->result = NULL;
#line 230 "/run/build/folks/folks/object-cache.vala"
		_data_->data = (g_free (_data_->data), NULL);
#line 230 "/run/build/folks/folks/object-cache.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 230 "/run/build/folks/folks/object-cache.vala"
		if (_data_->_state_ != 0) {
#line 230 "/run/build/folks/folks/object-cache.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 230 "/run/build/folks/folks/object-cache.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 989 "object-cache.c"
			}
		}
#line 230 "/run/build/folks/folks/object-cache.vala"
		g_object_unref (_data_->_async_result);
#line 230 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 996 "object-cache.c"
	}
#line 234 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp16_ = _data_->data;
#line 234 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp16__length1 = _data_->data_length1;
#line 234 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp17_ = _data_->_tmp16_[0];
#line 234 "/run/build/folks/folks/object-cache.vala"
	_data_->wrapper_version = _data_->_tmp17_;
#line 235 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp18_ = _data_->data;
#line 235 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp18__length1 = _data_->data_length1;
#line 235 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp19_ = _data_->_tmp18_[1];
#line 235 "/run/build/folks/folks/object-cache.vala"
	_data_->object_version = _data_->_tmp19_;
#line 237 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp20_ = _data_->wrapper_version;
#line 237 "/run/build/folks/folks/object-cache.vala"
	if (_data_->_tmp20_ != FOLKS_OBJECT_CACHE__FILE_FORMAT_VERSION) {
#line 239 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp21_ = _data_->self->priv->_cache_file_path;
#line 239 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp22_ = _data_->wrapper_version;
#line 239 "/run/build/folks/folks/object-cache.vala"
		g_warning ("Cache file '%s' was version %u of the file format, " "but only version %u is supported. The file was deleted.", _data_->_tmp21_, _data_->_tmp22_, FOLKS_OBJECT_CACHE__FILE_FORMAT_VERSION);
#line 243 "/run/build/folks/folks/object-cache.vala"
		_data_->_state_ = 3;
#line 243 "/run/build/folks/folks/object-cache.vala"
		folks_object_cache_clear_cache (_data_->self, folks_object_cache_load_objects_ready, _data_);
#line 243 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 1030 "object-cache.c"
		_state_3:
#line 243 "/run/build/folks/folks/object-cache.vala"
		folks_object_cache_clear_cache_finish (_data_->self, _data_->_res_);
#line 245 "/run/build/folks/folks/object-cache.vala"
		_data_->result = NULL;
#line 245 "/run/build/folks/folks/object-cache.vala"
		_data_->data = (g_free (_data_->data), NULL);
#line 245 "/run/build/folks/folks/object-cache.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 245 "/run/build/folks/folks/object-cache.vala"
		if (_data_->_state_ != 0) {
#line 245 "/run/build/folks/folks/object-cache.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 245 "/run/build/folks/folks/object-cache.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1046 "object-cache.c"
			}
		}
#line 245 "/run/build/folks/folks/object-cache.vala"
		g_object_unref (_data_->_async_result);
#line 245 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 1053 "object-cache.c"
	}
#line 248 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp23_ = _data_->data;
#line 248 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp23__length1 = _data_->data_length1;
#line 248 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp24_ = _data_->data;
#line 248 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp24__length1 = _data_->data_length1;
#line 248 "/run/build/folks/folks/object-cache.vala"
	_data_->variant_data = _data_->_tmp23_ + ((gint) FOLKS_OBJECT_CACHE__HEADER_WIDTH);
#line 248 "/run/build/folks/folks/object-cache.vala"
	_data_->variant_data_length1 = _data_->_tmp24__length1 - ((gint) FOLKS_OBJECT_CACHE__HEADER_WIDTH);
#line 248 "/run/build/folks/folks/object-cache.vala"
	_data_->_variant_data_size_ = _data_->variant_data_length1;
#line 251 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp25_ = _data_->wrapper_version;
#line 251 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp26_ = _data_->object_version;
#line 251 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp27_ = _folks_object_cache_get_cache_file_variant_type (_data_->self, _data_->_tmp25_, _data_->_tmp26_);
#line 251 "/run/build/folks/folks/object-cache.vala"
	_data_->_variant_type = _data_->_tmp27_;
#line 254 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp28_ = _data_->_variant_type;
#line 254 "/run/build/folks/folks/object-cache.vala"
	if (_data_->_tmp28_ == NULL) {
#line 256 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp29_ = _data_->self->priv->_cache_file_path;
#line 256 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp30_ = _data_->object_version;
#line 256 "/run/build/folks/folks/object-cache.vala"
		g_warning ("Cache file '%s' was version %u of the object file " "format, which is not supported. The file was deleted.", _data_->_tmp29_, _data_->_tmp30_);
#line 259 "/run/build/folks/folks/object-cache.vala"
		_data_->_state_ = 4;
#line 259 "/run/build/folks/folks/object-cache.vala"
		folks_object_cache_clear_cache (_data_->self, folks_object_cache_load_objects_ready, _data_);
#line 259 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 1093 "object-cache.c"
		_state_4:
#line 259 "/run/build/folks/folks/object-cache.vala"
		folks_object_cache_clear_cache_finish (_data_->self, _data_->_res_);
#line 261 "/run/build/folks/folks/object-cache.vala"
		_data_->result = NULL;
#line 261 "/run/build/folks/folks/object-cache.vala"
		_g_variant_type_free0 (_data_->_variant_type);
#line 261 "/run/build/folks/folks/object-cache.vala"
		_data_->data = (g_free (_data_->data), NULL);
#line 261 "/run/build/folks/folks/object-cache.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 261 "/run/build/folks/folks/object-cache.vala"
		if (_data_->_state_ != 0) {
#line 261 "/run/build/folks/folks/object-cache.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 261 "/run/build/folks/folks/object-cache.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1111 "object-cache.c"
			}
		}
#line 261 "/run/build/folks/folks/object-cache.vala"
		g_object_unref (_data_->_async_result);
#line 261 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 1118 "object-cache.c"
	}
#line 263 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp31_ = _data_->_variant_type;
#line 263 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp32_ = _g_variant_type_copy0 ((const GVariantType*) _data_->_tmp31_);
#line 263 "/run/build/folks/folks/object-cache.vala"
	_data_->variant_type = _data_->_tmp32_;
#line 265 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp33_ = _data_->variant_type;
#line 265 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp34_ = _data_->variant_data;
#line 265 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp34__length1 = _data_->variant_data_length1;
#line 265 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp35_ = _data_->data;
#line 265 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp35__length1 = _data_->data_length1;
#line 265 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp36_ = (_data_->_tmp35_ != NULL) ? _vala_array_dup3 (_data_->_tmp35_, _data_->_tmp35__length1) : ((gpointer) _data_->_tmp35_);
#line 265 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp36__length1 = _data_->_tmp35__length1;
#line 265 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp37_ = g_variant_new_from_data (_data_->_tmp33_, _data_->_tmp34_, _data_->_tmp34__length1, FALSE, g_free, _data_->_tmp36_);
#line 265 "/run/build/folks/folks/object-cache.vala"
	g_variant_ref_sink (_data_->_tmp37_);
#line 265 "/run/build/folks/folks/object-cache.vala"
	_data_->variant = _data_->_tmp37_;
#line 270 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp38_ = _data_->variant;
#line 270 "/run/build/folks/folks/object-cache.vala"
	if (g_variant_is_normal_form (_data_->_tmp38_) == FALSE) {
#line 272 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp39_ = _data_->self->priv->_cache_file_path;
#line 272 "/run/build/folks/folks/object-cache.vala"
		g_warning ("object-cache.vala:272: Cache file '%s' was corrupt and was deleted.", _data_->_tmp39_);
#line 274 "/run/build/folks/folks/object-cache.vala"
		_data_->_state_ = 5;
#line 274 "/run/build/folks/folks/object-cache.vala"
		folks_object_cache_clear_cache (_data_->self, folks_object_cache_load_objects_ready, _data_);
#line 274 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 1160 "object-cache.c"
		_state_5:
#line 274 "/run/build/folks/folks/object-cache.vala"
		folks_object_cache_clear_cache_finish (_data_->self, _data_->_res_);
#line 276 "/run/build/folks/folks/object-cache.vala"
		_data_->result = NULL;
#line 276 "/run/build/folks/folks/object-cache.vala"
		_g_variant_unref0 (_data_->variant);
#line 276 "/run/build/folks/folks/object-cache.vala"
		_g_variant_type_free0 (_data_->variant_type);
#line 276 "/run/build/folks/folks/object-cache.vala"
		_g_variant_type_free0 (_data_->_variant_type);
#line 276 "/run/build/folks/folks/object-cache.vala"
		_data_->data = (g_free (_data_->data), NULL);
#line 276 "/run/build/folks/folks/object-cache.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 276 "/run/build/folks/folks/object-cache.vala"
		if (_data_->_state_ != 0) {
#line 276 "/run/build/folks/folks/object-cache.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 276 "/run/build/folks/folks/object-cache.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1182 "object-cache.c"
			}
		}
#line 276 "/run/build/folks/folks/object-cache.vala"
		g_object_unref (_data_->_async_result);
#line 276 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 1189 "object-cache.c"
	}
#line 280 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp40_ = _data_->variant;
#line 280 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp41_ = g_variant_get_child_value (_data_->_tmp40_, (gsize) 0);
#line 280 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp42_ = _data_->_tmp41_;
#line 280 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp43_ = g_variant_get_string (_data_->_tmp42_, NULL);
#line 280 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp44_ = g_strdup (_data_->_tmp43_);
#line 280 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp45_ = _data_->_tmp44_;
#line 280 "/run/build/folks/folks/object-cache.vala"
	_g_variant_unref0 (_data_->_tmp42_);
#line 280 "/run/build/folks/folks/object-cache.vala"
	_data_->type_id = _data_->_tmp45_;
#line 282 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp46_ = _data_->type_id;
#line 282 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp47_ = _data_->self->priv->_type_id;
#line 282 "/run/build/folks/folks/object-cache.vala"
	if (g_strcmp0 (_data_->_tmp46_, _data_->_tmp47_) != 0) {
#line 284 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp48_ = _data_->self->priv->_cache_file_path;
#line 284 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp49_ = _data_->type_id;
#line 284 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp50_ = _data_->self->priv->_type_id;
#line 284 "/run/build/folks/folks/object-cache.vala"
		g_warning ("Cache file '%s' had type ID '%s', but '%s' was expected." "The file was deleted.", _data_->_tmp48_, _data_->_tmp49_, _data_->_tmp50_);
#line 287 "/run/build/folks/folks/object-cache.vala"
		_data_->_state_ = 6;
#line 287 "/run/build/folks/folks/object-cache.vala"
		folks_object_cache_clear_cache (_data_->self, folks_object_cache_load_objects_ready, _data_);
#line 287 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 1227 "object-cache.c"
		_state_6:
#line 287 "/run/build/folks/folks/object-cache.vala"
		folks_object_cache_clear_cache_finish (_data_->self, _data_->_res_);
#line 289 "/run/build/folks/folks/object-cache.vala"
		_data_->result = NULL;
#line 289 "/run/build/folks/folks/object-cache.vala"
		_g_free0 (_data_->type_id);
#line 289 "/run/build/folks/folks/object-cache.vala"
		_g_variant_unref0 (_data_->variant);
#line 289 "/run/build/folks/folks/object-cache.vala"
		_g_variant_type_free0 (_data_->variant_type);
#line 289 "/run/build/folks/folks/object-cache.vala"
		_g_variant_type_free0 (_data_->_variant_type);
#line 289 "/run/build/folks/folks/object-cache.vala"
		_data_->data = (g_free (_data_->data), NULL);
#line 289 "/run/build/folks/folks/object-cache.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 289 "/run/build/folks/folks/object-cache.vala"
		if (_data_->_state_ != 0) {
#line 289 "/run/build/folks/folks/object-cache.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 289 "/run/build/folks/folks/object-cache.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1251 "object-cache.c"
			}
		}
#line 289 "/run/build/folks/folks/object-cache.vala"
		g_object_unref (_data_->_async_result);
#line 289 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 1258 "object-cache.c"
	}
#line 292 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp51_ = _data_->variant;
#line 292 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp52_ = g_variant_get_child_value (_data_->_tmp51_, (gsize) 1);
#line 292 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp53_ = _data_->_tmp52_;
#line 292 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp54_ = g_variant_get_string (_data_->_tmp53_, NULL);
#line 292 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp55_ = g_strdup (_data_->_tmp54_);
#line 292 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp56_ = _data_->_tmp55_;
#line 292 "/run/build/folks/folks/object-cache.vala"
	_g_variant_unref0 (_data_->_tmp53_);
#line 292 "/run/build/folks/folks/object-cache.vala"
	_data_->id = _data_->_tmp56_;
#line 294 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp57_ = _data_->id;
#line 294 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp58_ = _data_->self->priv->_id;
#line 294 "/run/build/folks/folks/object-cache.vala"
	if (g_strcmp0 (_data_->_tmp57_, _data_->_tmp58_) != 0) {
#line 296 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp59_ = _data_->self->priv->_cache_file_path;
#line 296 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp60_ = _data_->id;
#line 296 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp61_ = _data_->self->priv->_id;
#line 296 "/run/build/folks/folks/object-cache.vala"
		g_warning ("Cache file '%s' had ID '%s', but '%s' was expected." "The file was deleted.", _data_->_tmp59_, _data_->_tmp60_, _data_->_tmp61_);
#line 299 "/run/build/folks/folks/object-cache.vala"
		_data_->_state_ = 7;
#line 299 "/run/build/folks/folks/object-cache.vala"
		folks_object_cache_clear_cache (_data_->self, folks_object_cache_load_objects_ready, _data_);
#line 299 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 1296 "object-cache.c"
		_state_7:
#line 299 "/run/build/folks/folks/object-cache.vala"
		folks_object_cache_clear_cache_finish (_data_->self, _data_->_res_);
#line 301 "/run/build/folks/folks/object-cache.vala"
		_data_->result = NULL;
#line 301 "/run/build/folks/folks/object-cache.vala"
		_g_free0 (_data_->id);
#line 301 "/run/build/folks/folks/object-cache.vala"
		_g_free0 (_data_->type_id);
#line 301 "/run/build/folks/folks/object-cache.vala"
		_g_variant_unref0 (_data_->variant);
#line 301 "/run/build/folks/folks/object-cache.vala"
		_g_variant_type_free0 (_data_->variant_type);
#line 301 "/run/build/folks/folks/object-cache.vala"
		_g_variant_type_free0 (_data_->_variant_type);
#line 301 "/run/build/folks/folks/object-cache.vala"
		_data_->data = (g_free (_data_->data), NULL);
#line 301 "/run/build/folks/folks/object-cache.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 301 "/run/build/folks/folks/object-cache.vala"
		if (_data_->_state_ != 0) {
#line 301 "/run/build/folks/folks/object-cache.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 301 "/run/build/folks/folks/object-cache.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1322 "object-cache.c"
			}
		}
#line 301 "/run/build/folks/folks/object-cache.vala"
		g_object_unref (_data_->_async_result);
#line 301 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 1329 "object-cache.c"
	}
#line 304 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp62_ = _data_->variant;
#line 304 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp63_ = g_variant_get_child_value (_data_->_tmp62_, (gsize) 2);
#line 304 "/run/build/folks/folks/object-cache.vala"
	_data_->objects_variant = _data_->_tmp63_;
#line 306 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp64_ = gee_hash_set_new (_data_->self->priv->t_type, (GBoxedCopyFunc) _data_->self->priv->t_dup_func, (GDestroyNotify) _data_->self->priv->t_destroy_func, NULL, NULL, NULL, NULL, NULL, NULL);
#line 306 "/run/build/folks/folks/object-cache.vala"
	_data_->objects = _data_->_tmp64_;
#line 1341 "object-cache.c"
	{
#line 308 "/run/build/folks/folks/object-cache.vala"
		_data_->i = (guint) 0;
#line 1345 "object-cache.c"
		{
#line 308 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp65_ = TRUE;
#line 308 "/run/build/folks/folks/object-cache.vala"
			while (TRUE) {
#line 308 "/run/build/folks/folks/object-cache.vala"
				if (!_data_->_tmp65_) {
#line 308 "/run/build/folks/folks/object-cache.vala"
					_data_->_tmp66_ = _data_->i;
#line 308 "/run/build/folks/folks/object-cache.vala"
					_data_->i = _data_->_tmp66_ + 1;
#line 1357 "object-cache.c"
				}
#line 308 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp65_ = FALSE;
#line 308 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp67_ = _data_->i;
#line 308 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp68_ = _data_->objects_variant;
#line 308 "/run/build/folks/folks/object-cache.vala"
				if (!(((gsize) _data_->_tmp67_) < g_variant_n_children (_data_->_tmp68_))) {
#line 308 "/run/build/folks/folks/object-cache.vala"
					break;
#line 1369 "object-cache.c"
				}
#line 310 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp69_ = _data_->objects_variant;
#line 310 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp70_ = _data_->i;
#line 310 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp71_ = g_variant_get_child_value (_data_->_tmp69_, (gsize) _data_->_tmp70_);
#line 310 "/run/build/folks/folks/object-cache.vala"
				_data_->object_variant = _data_->_tmp71_;
#line 311 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp72_ = _data_->object_variant;
#line 311 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp73_ = _data_->object_version;
#line 311 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp74_ = folks_object_cache_deserialise_object (_data_->self, _data_->_tmp72_, _data_->_tmp73_);
#line 311 "/run/build/folks/folks/object-cache.vala"
				_data_->object = _data_->_tmp74_;
#line 313 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp75_ = _data_->objects;
#line 313 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp76_ = _data_->object;
#line 313 "/run/build/folks/folks/object-cache.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _data_->_tmp75_, _data_->_tmp76_);
#line 308 "/run/build/folks/folks/object-cache.vala"
				((_data_->object == NULL) || (_data_->self->priv->t_destroy_func == NULL)) ? NULL : (_data_->object = (_data_->self->priv->t_destroy_func (_data_->object), NULL));
#line 308 "/run/build/folks/folks/object-cache.vala"
				_g_variant_unref0 (_data_->object_variant);
#line 1397 "object-cache.c"
			}
		}
	}
#line 316 "/run/build/folks/folks/object-cache.vala"
	_data_->result = (GeeSet*) _data_->objects;
#line 316 "/run/build/folks/folks/object-cache.vala"
	_g_variant_unref0 (_data_->objects_variant);
#line 316 "/run/build/folks/folks/object-cache.vala"
	_g_free0 (_data_->id);
#line 316 "/run/build/folks/folks/object-cache.vala"
	_g_free0 (_data_->type_id);
#line 316 "/run/build/folks/folks/object-cache.vala"
	_g_variant_unref0 (_data_->variant);
#line 316 "/run/build/folks/folks/object-cache.vala"
	_g_variant_type_free0 (_data_->variant_type);
#line 316 "/run/build/folks/folks/object-cache.vala"
	_g_variant_type_free0 (_data_->_variant_type);
#line 316 "/run/build/folks/folks/object-cache.vala"
	_data_->data = (g_free (_data_->data), NULL);
#line 316 "/run/build/folks/folks/object-cache.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 316 "/run/build/folks/folks/object-cache.vala"
	if (_data_->_state_ != 0) {
#line 316 "/run/build/folks/folks/object-cache.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 316 "/run/build/folks/folks/object-cache.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1425 "object-cache.c"
		}
	}
#line 316 "/run/build/folks/folks/object-cache.vala"
	g_object_unref (_data_->_async_result);
#line 316 "/run/build/folks/folks/object-cache.vala"
	return FALSE;
#line 1432 "object-cache.c"
}


static void
folks_object_cache_store_objects_data_free (gpointer _data)
{
	FolksObjectCacheStoreObjectsData* _data_;
	_data_ = _data;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (_data_->objects);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (_data_->cancellable);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (_data_->self);
#line 35 "/run/build/folks/folks/object-cache.vala"
	g_slice_free (FolksObjectCacheStoreObjectsData, _data_);
#line 1449 "object-cache.c"
}


static void
folks_object_cache_store_objects_async_ready_wrapper (GObject *source_object,
                                                      GAsyncResult *res,
                                                      void *user_data)
{
	FolksObjectCacheStoreObjectsData* _task_data_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 35 "/run/build/folks/folks/object-cache.vala"
	if (_task_data_->_callback_ != NULL) {
#line 35 "/run/build/folks/folks/object-cache.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 1465 "object-cache.c"
	}
#line 35 "/run/build/folks/folks/object-cache.vala"
	_task_data_->_task_complete_ = TRUE;
#line 1469 "object-cache.c"
}


void
folks_object_cache_store_objects (FolksObjectCache* self,
                                  GeeSet* objects,
                                  GCancellable* cancellable,
                                  GAsyncReadyCallback _callback_,
                                  gpointer _user_data_)
{
	FolksObjectCacheStoreObjectsData* _data_;
	FolksObjectCache* _tmp0_;
	GeeSet* _tmp1_;
	GCancellable* _tmp2_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_ = g_slice_new0 (FolksObjectCacheStoreObjectsData);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->_callback_ = _callback_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, folks_object_cache_store_objects_async_ready_wrapper, _user_data_);
#line 35 "/run/build/folks/folks/object-cache.vala"
	if (_callback_ == NULL) {
#line 35 "/run/build/folks/folks/object-cache.vala"
		_data_->_task_complete_ = TRUE;
#line 1494 "object-cache.c"
	}
#line 35 "/run/build/folks/folks/object-cache.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_object_cache_store_objects_data_free);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->self = _tmp0_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_tmp1_ = _g_object_ref0 (objects);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (_data_->objects);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->objects = _tmp1_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_tmp2_ = _g_object_ref0 (cancellable);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (_data_->cancellable);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->cancellable = _tmp2_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	folks_object_cache_store_objects_co (_data_);
#line 1516 "object-cache.c"
}


void
folks_object_cache_store_objects_finish (FolksObjectCache* self,
                                         GAsyncResult* _res_)
{
	FolksObjectCacheStoreObjectsData* _data_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 35 "/run/build/folks/folks/object-cache.vala"
	if (NULL == _data_) {
#line 35 "/run/build/folks/folks/object-cache.vala"
		return;
#line 1531 "object-cache.c"
	}
}


/**
   * Store a set of objects to the cache file, overwriting any existing set of
   * objects in the cache, or creating the cache file from scratch if it didn't
   * previously exist.
   *
   * Storing the objects can be cancelled using ``cancellable``. If it is, the
   * cache will be left in a consistent state, but may be storing the old set
   * of objects or the new set.
   *
   * This method is safe to call multiple times concurrently.
   *
   * @param objects A set of objects to store. This may be empty, but may not
   * be ``null``.
   * @param cancellable A {@link GLib.Cancellable} for the operation, or
   * ``null``.
   *
   * @since 0.6.0
   */
static void
folks_object_cache_store_objects_ready (GObject* source_object,
                                        GAsyncResult* _res_,
                                        gpointer _user_data_)
{
	FolksObjectCacheStoreObjectsData* _data_;
#line 381 "/run/build/folks/folks/object-cache.vala"
	_data_ = _user_data_;
#line 381 "/run/build/folks/folks/object-cache.vala"
	_data_->_source_object_ = source_object;
#line 381 "/run/build/folks/folks/object-cache.vala"
	_data_->_res_ = _res_;
#line 381 "/run/build/folks/folks/object-cache.vala"
	_data_->_task_complete_ = TRUE;
#line 381 "/run/build/folks/folks/object-cache.vala"
	folks_object_cache_store_objects_co (_data_);
#line 1570 "object-cache.c"
}


static gboolean
folks_object_cache_store_objects_co (FolksObjectCacheStoreObjectsData* _data_)
{
#line 337 "/run/build/folks/folks/object-cache.vala"
	switch (_data_->_state_) {
#line 337 "/run/build/folks/folks/object-cache.vala"
		case 0:
#line 1581 "object-cache.c"
		goto _state_0;
#line 337 "/run/build/folks/folks/object-cache.vala"
		case 1:
#line 1585 "object-cache.c"
		goto _state_1;
#line 337 "/run/build/folks/folks/object-cache.vala"
		case 2:
#line 1589 "object-cache.c"
		goto _state_2;
#line 337 "/run/build/folks/folks/object-cache.vala"
		case 3:
#line 1593 "object-cache.c"
		goto _state_3;
		default:
#line 337 "/run/build/folks/folks/object-cache.vala"
		g_assert_not_reached ();
#line 1598 "object-cache.c"
	}
	_state_0:
#line 340 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp0_ = _data_->self->priv->_type_id;
#line 340 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp1_ = _data_->self->priv->_id;
#line 340 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp2_ = _data_->self->priv->_cache_file_path;
#line 340 "/run/build/folks/folks/object-cache.vala"
	g_debug ("object-cache.vala:340: Storing cache (type ID '%s', ID '%s') to file '" \
"%s'.", _data_->_tmp0_, _data_->_tmp1_, _data_->_tmp2_);
#line 343 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp3_ = folks_object_cache_get_serialised_object_type (_data_->self, G_MAXUINT8);
#line 343 "/run/build/folks/folks/object-cache.vala"
	_data_->child_type = _data_->_tmp3_;
#line 344 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp4_ = _data_->child_type;
#line 344 "/run/build/folks/folks/object-cache.vala"
	_vala_assert (_data_->_tmp4_ != NULL, "child_type != null");
#line 345 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp5_ = gee_collection_get_size ((GeeCollection*) _data_->objects);
#line 345 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp6_ = _data_->_tmp5_;
#line 345 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp7_ = g_new0 (GVariant*, _data_->_tmp6_ + 1);
#line 345 "/run/build/folks/folks/object-cache.vala"
	_data_->children = _data_->_tmp7_;
#line 345 "/run/build/folks/folks/object-cache.vala"
	_data_->children_length1 = _data_->_tmp6_;
#line 345 "/run/build/folks/folks/object-cache.vala"
	_data_->_children_size_ = _data_->children_length1;
#line 348 "/run/build/folks/folks/object-cache.vala"
	_data_->i = (guint) 0;
#line 1631 "object-cache.c"
	{
#line 349 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp8_ = gee_iterable_iterator ((GeeIterable*) _data_->objects);
#line 349 "/run/build/folks/folks/object-cache.vala"
		_data_->_object_it = _data_->_tmp8_;
#line 349 "/run/build/folks/folks/object-cache.vala"
		while (TRUE) {
#line 349 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp9_ = _data_->_object_it;
#line 349 "/run/build/folks/folks/object-cache.vala"
			if (!gee_iterator_next (_data_->_tmp9_)) {
#line 349 "/run/build/folks/folks/object-cache.vala"
				break;
#line 1645 "object-cache.c"
			}
#line 349 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp10_ = _data_->_object_it;
#line 349 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp11_ = gee_iterator_get (_data_->_tmp10_);
#line 349 "/run/build/folks/folks/object-cache.vala"
			_data_->object = _data_->_tmp11_;
#line 351 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp12_ = _data_->children;
#line 351 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp12__length1 = _data_->children_length1;
#line 351 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp13_ = _data_->i;
#line 351 "/run/build/folks/folks/object-cache.vala"
			_data_->i = _data_->_tmp13_ + 1;
#line 351 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp14_ = _data_->object;
#line 351 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp15_ = folks_object_cache_serialise_object (_data_->self, _data_->_tmp14_);
#line 351 "/run/build/folks/folks/object-cache.vala"
			_g_variant_unref0 (_data_->_tmp12_[_data_->_tmp13_]);
#line 351 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp12_[_data_->_tmp13_] = _data_->_tmp15_;
#line 351 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp16_ = _data_->_tmp12_[_data_->_tmp13_];
#line 349 "/run/build/folks/folks/object-cache.vala"
			((_data_->object == NULL) || (_data_->self->priv->t_destroy_func == NULL)) ? NULL : (_data_->object = (_data_->self->priv->t_destroy_func (_data_->object), NULL));
#line 1673 "object-cache.c"
		}
#line 349 "/run/build/folks/folks/object-cache.vala"
		_g_object_unref0 (_data_->_object_it);
#line 1677 "object-cache.c"
	}
#line 355 "/run/build/folks/folks/object-cache.vala"
	_data_->wrapper_version = FOLKS_OBJECT_CACHE__FILE_FORMAT_VERSION;
#line 356 "/run/build/folks/folks/object-cache.vala"
	_data_->object_version = folks_object_cache_get_serialised_object_version (_data_->self);
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp17_ = _data_->self->priv->_type_id;
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp18_ = g_variant_new_string (_data_->_tmp17_);
#line 358 "/run/build/folks/folks/object-cache.vala"
	g_variant_ref_sink (_data_->_tmp18_);
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp19_ = _data_->self->priv->_id;
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp20_ = g_variant_new_string (_data_->_tmp19_);
#line 358 "/run/build/folks/folks/object-cache.vala"
	g_variant_ref_sink (_data_->_tmp20_);
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp21_ = _data_->child_type;
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp22_ = _data_->children;
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp22__length1 = _data_->children_length1;
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp23_ = g_variant_new_array (_data_->_tmp21_, _data_->_tmp22_, _data_->_tmp22__length1);
#line 358 "/run/build/folks/folks/object-cache.vala"
	g_variant_ref_sink (_data_->_tmp23_);
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp24_ = g_new0 (GVariant*, 3 + 1);
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp24_[0] = _data_->_tmp18_;
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp24_[1] = _data_->_tmp20_;
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp24_[2] = _data_->_tmp23_;
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp25_ = _data_->_tmp24_;
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp25__length1 = 3;
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp26_ = g_variant_new_tuple (_data_->_tmp25_, 3);
#line 358 "/run/build/folks/folks/object-cache.vala"
	g_variant_ref_sink (_data_->_tmp26_);
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp27_ = _data_->_tmp26_;
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp25_ = (_vala_array_free (_data_->_tmp25_, _data_->_tmp25__length1, (GDestroyNotify) g_variant_unref), NULL);
#line 358 "/run/build/folks/folks/object-cache.vala"
	_data_->variant = _data_->_tmp27_;
#line 364 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp28_ = _data_->wrapper_version;
#line 364 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp29_ = _data_->object_version;
#line 364 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp30_ = _folks_object_cache_get_cache_file_variant_type (_data_->self, _data_->_tmp28_, _data_->_tmp29_);
#line 364 "/run/build/folks/folks/object-cache.vala"
	_data_->desired_variant_type = _data_->_tmp30_;
#line 366 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp32_ = _data_->desired_variant_type;
#line 366 "/run/build/folks/folks/object-cache.vala"
	if (_data_->_tmp32_ != NULL) {
#line 367 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp33_ = _data_->variant;
#line 367 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp34_ = g_variant_get_type (_data_->_tmp33_);
#line 367 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp35_ = _data_->desired_variant_type;
#line 367 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp31_ = g_variant_type_equal (_data_->_tmp34_, (const GVariantType*) _data_->_tmp35_);
#line 1747 "object-cache.c"
	} else {
#line 366 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp31_ = FALSE;
#line 1751 "object-cache.c"
	}
#line 366 "/run/build/folks/folks/object-cache.vala"
	_vala_assert (_data_->_tmp31_, "desired_variant_type != null &&           variant.get_type ().equal ((!) desired_variant_type)");
#line 370 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp36_ = _data_->variant;
#line 370 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp37_ = g_new0 (guint8, FOLKS_OBJECT_CACHE__HEADER_WIDTH + g_variant_get_size (_data_->_tmp36_));
#line 370 "/run/build/folks/folks/object-cache.vala"
	_data_->data = _data_->_tmp37_;
#line 370 "/run/build/folks/folks/object-cache.vala"
	_data_->data_length1 = FOLKS_OBJECT_CACHE__HEADER_WIDTH + g_variant_get_size (_data_->_tmp36_);
#line 370 "/run/build/folks/folks/object-cache.vala"
	_data_->_data_size_ = _data_->data_length1;
#line 371 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp38_ = _data_->data;
#line 371 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp38__length1 = _data_->data_length1;
#line 371 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp39_ = _data_->wrapper_version;
#line 371 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp38_[0] = _data_->_tmp39_;
#line 371 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp40_ = _data_->_tmp38_[0];
#line 372 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp41_ = _data_->data;
#line 372 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp41__length1 = _data_->data_length1;
#line 372 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp42_ = _data_->object_version;
#line 372 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp41_[1] = _data_->_tmp42_;
#line 372 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp43_ = _data_->_tmp41_[1];
#line 373 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp44_ = _data_->variant;
#line 373 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp45_ = _data_->data;
#line 373 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp45__length1 = _data_->data_length1;
#line 373 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp46_ = _data_->data;
#line 373 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp46__length1 = _data_->data_length1;
#line 373 "/run/build/folks/folks/object-cache.vala"
	g_variant_store (_data_->_tmp44_, _data_->_tmp45_ + ((gint) FOLKS_OBJECT_CACHE__HEADER_WIDTH));
#line 376 "/run/build/folks/folks/object-cache.vala"
	while (TRUE) {
#line 1799 "object-cache.c"
		{
#line 381 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp47_ = _data_->self->priv->_cache_file;
#line 381 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp48_ = _data_->data;
#line 381 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp48__length1 = _data_->data_length1;
#line 381 "/run/build/folks/folks/object-cache.vala"
			_data_->_state_ = 1;
#line 381 "/run/build/folks/folks/object-cache.vala"
			g_file_replace_contents_async (_data_->_tmp47_, _data_->_tmp48_, (gsize) _data_->_tmp48__length1, NULL, FALSE, G_FILE_CREATE_PRIVATE, _data_->cancellable, folks_object_cache_store_objects_ready, _data_);
#line 381 "/run/build/folks/folks/object-cache.vala"
			return FALSE;
#line 1813 "object-cache.c"
			_state_1:
#line 381 "/run/build/folks/folks/object-cache.vala"
			g_file_replace_contents_finish (_data_->_tmp47_, _data_->_res_, NULL, &_data_->_inner_error_);
#line 381 "/run/build/folks/folks/object-cache.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 1819 "object-cache.c"
				goto __catch31_g_error;
			}
#line 384 "/run/build/folks/folks/object-cache.vala"
			break;
#line 1824 "object-cache.c"
		}
		goto __finally31;
		__catch31_g_error:
		{
#line 378 "/run/build/folks/folks/object-cache.vala"
			_data_->e = _data_->_inner_error_;
#line 378 "/run/build/folks/folks/object-cache.vala"
			_data_->_inner_error_ = NULL;
#line 388 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp49_ = _data_->e;
#line 388 "/run/build/folks/folks/object-cache.vala"
			if (g_error_matches (_data_->_tmp49_, G_IO_ERROR, G_IO_ERROR_NOT_FOUND)) {
#line 1837 "object-cache.c"
				{
#line 392 "/run/build/folks/folks/object-cache.vala"
					_data_->_state_ = 2;
#line 392 "/run/build/folks/folks/object-cache.vala"
					_folks_object_cache_create_cache_directory (_data_->self, folks_object_cache_store_objects_ready, _data_);
#line 392 "/run/build/folks/folks/object-cache.vala"
					return FALSE;
#line 1845 "object-cache.c"
					_state_2:
#line 392 "/run/build/folks/folks/object-cache.vala"
					_folks_object_cache_create_cache_directory_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 392 "/run/build/folks/folks/object-cache.vala"
					if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 1851 "object-cache.c"
						goto __catch32_g_error;
					}
#line 393 "/run/build/folks/folks/object-cache.vala"
					_g_error_free0 (_data_->e);
#line 393 "/run/build/folks/folks/object-cache.vala"
					continue;
#line 1858 "object-cache.c"
				}
				goto __finally32;
				__catch32_g_error:
				{
#line 390 "/run/build/folks/folks/object-cache.vala"
					_data_->e2 = _data_->_inner_error_;
#line 390 "/run/build/folks/folks/object-cache.vala"
					_data_->_inner_error_ = NULL;
#line 397 "/run/build/folks/folks/object-cache.vala"
					_data_->_tmp50_ = _data_->self->priv->_cache_directory;
#line 397 "/run/build/folks/folks/object-cache.vala"
					_data_->_tmp51_ = g_file_get_path (_data_->_tmp50_);
#line 397 "/run/build/folks/folks/object-cache.vala"
					_data_->_tmp52_ = _data_->_tmp51_;
#line 397 "/run/build/folks/folks/object-cache.vala"
					_data_->_tmp53_ = _data_->e;
#line 397 "/run/build/folks/folks/object-cache.vala"
					_data_->_tmp54_ = _data_->_tmp53_->message;
#line 397 "/run/build/folks/folks/object-cache.vala"
					g_warning ("object-cache.vala:397: Couldn't create cache directory '%s': %s", _data_->_tmp52_, _data_->_tmp54_);
#line 397 "/run/build/folks/folks/object-cache.vala"
					_g_free0 (_data_->_tmp52_);
#line 399 "/run/build/folks/folks/object-cache.vala"
					_g_error_free0 (_data_->e2);
#line 399 "/run/build/folks/folks/object-cache.vala"
					_g_error_free0 (_data_->e);
#line 399 "/run/build/folks/folks/object-cache.vala"
					_data_->data = (g_free (_data_->data), NULL);
#line 399 "/run/build/folks/folks/object-cache.vala"
					_g_variant_type_free0 (_data_->desired_variant_type);
#line 399 "/run/build/folks/folks/object-cache.vala"
					_g_variant_unref0 (_data_->variant);
#line 399 "/run/build/folks/folks/object-cache.vala"
					_data_->children = (_vala_array_free (_data_->children, _data_->children_length1, (GDestroyNotify) g_variant_unref), NULL);
#line 399 "/run/build/folks/folks/object-cache.vala"
					_g_variant_type_free0 (_data_->child_type);
#line 399 "/run/build/folks/folks/object-cache.vala"
					g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 399 "/run/build/folks/folks/object-cache.vala"
					if (_data_->_state_ != 0) {
#line 399 "/run/build/folks/folks/object-cache.vala"
						while (_data_->_task_complete_ != TRUE) {
#line 399 "/run/build/folks/folks/object-cache.vala"
							g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1903 "object-cache.c"
						}
					}
#line 399 "/run/build/folks/folks/object-cache.vala"
					g_object_unref (_data_->_async_result);
#line 399 "/run/build/folks/folks/object-cache.vala"
					return FALSE;
#line 1910 "object-cache.c"
				}
				__finally32:
#line 390 "/run/build/folks/folks/object-cache.vala"
				_g_error_free0 (_data_->e);
#line 390 "/run/build/folks/folks/object-cache.vala"
				_g_error_free0 (_data_->e);
#line 390 "/run/build/folks/folks/object-cache.vala"
				_data_->data = (g_free (_data_->data), NULL);
#line 390 "/run/build/folks/folks/object-cache.vala"
				_g_variant_type_free0 (_data_->desired_variant_type);
#line 390 "/run/build/folks/folks/object-cache.vala"
				_g_variant_unref0 (_data_->variant);
#line 390 "/run/build/folks/folks/object-cache.vala"
				_data_->children = (_vala_array_free (_data_->children, _data_->children_length1, (GDestroyNotify) g_variant_unref), NULL);
#line 390 "/run/build/folks/folks/object-cache.vala"
				_g_variant_type_free0 (_data_->child_type);
#line 390 "/run/build/folks/folks/object-cache.vala"
				g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 390 "/run/build/folks/folks/object-cache.vala"
				g_clear_error (&_data_->_inner_error_);
#line 390 "/run/build/folks/folks/object-cache.vala"
				g_object_unref (_data_->_async_result);
#line 390 "/run/build/folks/folks/object-cache.vala"
				return FALSE;
#line 1935 "object-cache.c"
			} else {
#line 402 "/run/build/folks/folks/object-cache.vala"
				_data_->_tmp55_ = _data_->e;
#line 402 "/run/build/folks/folks/object-cache.vala"
				if (g_error_matches (_data_->_tmp55_, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
#line 406 "/run/build/folks/folks/object-cache.vala"
					_g_error_free0 (_data_->e);
#line 406 "/run/build/folks/folks/object-cache.vala"
					_data_->data = (g_free (_data_->data), NULL);
#line 406 "/run/build/folks/folks/object-cache.vala"
					_g_variant_type_free0 (_data_->desired_variant_type);
#line 406 "/run/build/folks/folks/object-cache.vala"
					_g_variant_unref0 (_data_->variant);
#line 406 "/run/build/folks/folks/object-cache.vala"
					_data_->children = (_vala_array_free (_data_->children, _data_->children_length1, (GDestroyNotify) g_variant_unref), NULL);
#line 406 "/run/build/folks/folks/object-cache.vala"
					_g_variant_type_free0 (_data_->child_type);
#line 406 "/run/build/folks/folks/object-cache.vala"
					g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 406 "/run/build/folks/folks/object-cache.vala"
					if (_data_->_state_ != 0) {
#line 406 "/run/build/folks/folks/object-cache.vala"
						while (_data_->_task_complete_ != TRUE) {
#line 406 "/run/build/folks/folks/object-cache.vala"
							g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1961 "object-cache.c"
						}
					}
#line 406 "/run/build/folks/folks/object-cache.vala"
					g_object_unref (_data_->_async_result);
#line 406 "/run/build/folks/folks/object-cache.vala"
					return FALSE;
#line 1968 "object-cache.c"
				}
			}
#line 411 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp56_ = _data_->self->priv->_cache_file_path;
#line 411 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp57_ = _data_->e;
#line 411 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp58_ = _data_->_tmp57_->message;
#line 411 "/run/build/folks/folks/object-cache.vala"
			g_warning ("object-cache.vala:411: Couldn't write to cache file '%s', so deleting " \
"it: %s", _data_->_tmp56_, _data_->_tmp58_);
#line 413 "/run/build/folks/folks/object-cache.vala"
			_data_->_state_ = 3;
#line 413 "/run/build/folks/folks/object-cache.vala"
			folks_object_cache_clear_cache (_data_->self, folks_object_cache_store_objects_ready, _data_);
#line 413 "/run/build/folks/folks/object-cache.vala"
			return FALSE;
#line 1985 "object-cache.c"
			_state_3:
#line 413 "/run/build/folks/folks/object-cache.vala"
			folks_object_cache_clear_cache_finish (_data_->self, _data_->_res_);
#line 415 "/run/build/folks/folks/object-cache.vala"
			_g_error_free0 (_data_->e);
#line 415 "/run/build/folks/folks/object-cache.vala"
			_data_->data = (g_free (_data_->data), NULL);
#line 415 "/run/build/folks/folks/object-cache.vala"
			_g_variant_type_free0 (_data_->desired_variant_type);
#line 415 "/run/build/folks/folks/object-cache.vala"
			_g_variant_unref0 (_data_->variant);
#line 415 "/run/build/folks/folks/object-cache.vala"
			_data_->children = (_vala_array_free (_data_->children, _data_->children_length1, (GDestroyNotify) g_variant_unref), NULL);
#line 415 "/run/build/folks/folks/object-cache.vala"
			_g_variant_type_free0 (_data_->child_type);
#line 415 "/run/build/folks/folks/object-cache.vala"
			g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 415 "/run/build/folks/folks/object-cache.vala"
			if (_data_->_state_ != 0) {
#line 415 "/run/build/folks/folks/object-cache.vala"
				while (_data_->_task_complete_ != TRUE) {
#line 415 "/run/build/folks/folks/object-cache.vala"
					g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2009 "object-cache.c"
				}
			}
#line 415 "/run/build/folks/folks/object-cache.vala"
			g_object_unref (_data_->_async_result);
#line 415 "/run/build/folks/folks/object-cache.vala"
			return FALSE;
#line 2016 "object-cache.c"
		}
		__finally31:
#line 378 "/run/build/folks/folks/object-cache.vala"
		_data_->data = (g_free (_data_->data), NULL);
#line 378 "/run/build/folks/folks/object-cache.vala"
		_g_variant_type_free0 (_data_->desired_variant_type);
#line 378 "/run/build/folks/folks/object-cache.vala"
		_g_variant_unref0 (_data_->variant);
#line 378 "/run/build/folks/folks/object-cache.vala"
		_data_->children = (_vala_array_free (_data_->children, _data_->children_length1, (GDestroyNotify) g_variant_unref), NULL);
#line 378 "/run/build/folks/folks/object-cache.vala"
		_g_variant_type_free0 (_data_->child_type);
#line 378 "/run/build/folks/folks/object-cache.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 378 "/run/build/folks/folks/object-cache.vala"
		g_clear_error (&_data_->_inner_error_);
#line 378 "/run/build/folks/folks/object-cache.vala"
		g_object_unref (_data_->_async_result);
#line 378 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 2037 "object-cache.c"
	}
#line 337 "/run/build/folks/folks/object-cache.vala"
	_data_->data = (g_free (_data_->data), NULL);
#line 337 "/run/build/folks/folks/object-cache.vala"
	_g_variant_type_free0 (_data_->desired_variant_type);
#line 337 "/run/build/folks/folks/object-cache.vala"
	_g_variant_unref0 (_data_->variant);
#line 337 "/run/build/folks/folks/object-cache.vala"
	_data_->children = (_vala_array_free (_data_->children, _data_->children_length1, (GDestroyNotify) g_variant_unref), NULL);
#line 337 "/run/build/folks/folks/object-cache.vala"
	_g_variant_type_free0 (_data_->child_type);
#line 337 "/run/build/folks/folks/object-cache.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 337 "/run/build/folks/folks/object-cache.vala"
	if (_data_->_state_ != 0) {
#line 337 "/run/build/folks/folks/object-cache.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 337 "/run/build/folks/folks/object-cache.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2057 "object-cache.c"
		}
	}
#line 337 "/run/build/folks/folks/object-cache.vala"
	g_object_unref (_data_->_async_result);
#line 337 "/run/build/folks/folks/object-cache.vala"
	return FALSE;
#line 2064 "object-cache.c"
}


static void
folks_object_cache_clear_cache_data_free (gpointer _data)
{
	FolksObjectCacheClearCacheData* _data_;
	_data_ = _data;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (_data_->self);
#line 35 "/run/build/folks/folks/object-cache.vala"
	g_slice_free (FolksObjectCacheClearCacheData, _data_);
#line 2077 "object-cache.c"
}


static void
folks_object_cache_clear_cache_async_ready_wrapper (GObject *source_object,
                                                    GAsyncResult *res,
                                                    void *user_data)
{
	FolksObjectCacheClearCacheData* _task_data_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 35 "/run/build/folks/folks/object-cache.vala"
	if (_task_data_->_callback_ != NULL) {
#line 35 "/run/build/folks/folks/object-cache.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 2093 "object-cache.c"
	}
#line 35 "/run/build/folks/folks/object-cache.vala"
	_task_data_->_task_complete_ = TRUE;
#line 2097 "object-cache.c"
}


void
folks_object_cache_clear_cache (FolksObjectCache* self,
                                GAsyncReadyCallback _callback_,
                                gpointer _user_data_)
{
	FolksObjectCacheClearCacheData* _data_;
	FolksObjectCache* _tmp0_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_ = g_slice_new0 (FolksObjectCacheClearCacheData);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->_callback_ = _callback_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_object_cache_clear_cache_async_ready_wrapper, _user_data_);
#line 35 "/run/build/folks/folks/object-cache.vala"
	if (_callback_ == NULL) {
#line 35 "/run/build/folks/folks/object-cache.vala"
		_data_->_task_complete_ = TRUE;
#line 2118 "object-cache.c"
	}
#line 35 "/run/build/folks/folks/object-cache.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_object_cache_clear_cache_data_free);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->self = _tmp0_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	folks_object_cache_clear_cache_co (_data_);
#line 2128 "object-cache.c"
}


void
folks_object_cache_clear_cache_finish (FolksObjectCache* self,
                                       GAsyncResult* _res_)
{
	FolksObjectCacheClearCacheData* _data_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 2139 "object-cache.c"
}


/**
   * Clear this cache object, deleting its backing file.
   *
   * @since 0.6.0
   */
static gboolean
folks_object_cache_clear_cache_co (FolksObjectCacheClearCacheData* _data_)
{
#line 425 "/run/build/folks/folks/object-cache.vala"
	switch (_data_->_state_) {
#line 425 "/run/build/folks/folks/object-cache.vala"
		case 0:
#line 2155 "object-cache.c"
		goto _state_0;
		default:
#line 425 "/run/build/folks/folks/object-cache.vala"
		g_assert_not_reached ();
#line 2160 "object-cache.c"
	}
	_state_0:
#line 427 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp0_ = _data_->self->priv->_type_id;
#line 427 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp1_ = _data_->self->priv->_id;
#line 427 "/run/build/folks/folks/object-cache.vala"
	_data_->_tmp2_ = _data_->self->priv->_cache_file_path;
#line 427 "/run/build/folks/folks/object-cache.vala"
	g_debug ("object-cache.vala:427: Clearing cache (type ID '%s', ID '%s'); deletin" \
"g file '%s'.", _data_->_tmp0_, _data_->_tmp1_, _data_->_tmp2_);
#line 2171 "object-cache.c"
	{
#line 432 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp3_ = _data_->self->priv->_cache_file;
#line 432 "/run/build/folks/folks/object-cache.vala"
		g_file_delete (_data_->_tmp3_, NULL, &_data_->_inner_error_);
#line 432 "/run/build/folks/folks/object-cache.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2179 "object-cache.c"
			goto __catch33_g_error;
		}
	}
	goto __finally33;
	__catch33_g_error:
	{
#line 430 "/run/build/folks/folks/object-cache.vala"
		_data_->e = _data_->_inner_error_;
#line 430 "/run/build/folks/folks/object-cache.vala"
		_data_->_inner_error_ = NULL;
#line 430 "/run/build/folks/folks/object-cache.vala"
		_g_error_free0 (_data_->e);
#line 2192 "object-cache.c"
	}
	__finally33:
#line 430 "/run/build/folks/folks/object-cache.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 430 "/run/build/folks/folks/object-cache.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 430 "/run/build/folks/folks/object-cache.vala"
		g_clear_error (&_data_->_inner_error_);
#line 430 "/run/build/folks/folks/object-cache.vala"
		g_object_unref (_data_->_async_result);
#line 430 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 2205 "object-cache.c"
	}
#line 425 "/run/build/folks/folks/object-cache.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 425 "/run/build/folks/folks/object-cache.vala"
	if (_data_->_state_ != 0) {
#line 425 "/run/build/folks/folks/object-cache.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 425 "/run/build/folks/folks/object-cache.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2215 "object-cache.c"
		}
	}
#line 425 "/run/build/folks/folks/object-cache.vala"
	g_object_unref (_data_->_async_result);
#line 425 "/run/build/folks/folks/object-cache.vala"
	return FALSE;
#line 2222 "object-cache.c"
}


static GVariantType*
_folks_object_cache_get_cache_file_variant_type (FolksObjectCache* self,
                                                 guint8 wrapper_version,
                                                 guint8 object_version)
{
	GVariantType* result = NULL;
	GVariantType* _object_type = NULL;
	GVariantType* _tmp0_;
	const GVariantType* _tmp1_;
	GVariantType* object_type = NULL;
	const GVariantType* _tmp2_;
	GVariantType* _tmp3_;
	const GVariantType* _tmp4_;
	GVariantType* _tmp5_;
	const GVariantType* _tmp6_;
	GVariantType* _tmp7_;
	const GVariantType* _tmp8_;
	GVariantType* _tmp9_;
	GVariantType** _tmp10_;
	GVariantType** _tmp11_;
	gint _tmp11__length1;
	GVariantType* _tmp12_;
	GVariantType* _tmp13_;
#line 440 "/run/build/folks/folks/object-cache.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 443 "/run/build/folks/folks/object-cache.vala"
	_tmp0_ = folks_object_cache_get_serialised_object_type (self, object_version);
#line 443 "/run/build/folks/folks/object-cache.vala"
	_object_type = _tmp0_;
#line 445 "/run/build/folks/folks/object-cache.vala"
	_tmp1_ = _object_type;
#line 445 "/run/build/folks/folks/object-cache.vala"
	if (_tmp1_ == NULL) {
#line 448 "/run/build/folks/folks/object-cache.vala"
		result = NULL;
#line 448 "/run/build/folks/folks/object-cache.vala"
		_g_variant_type_free0 (_object_type);
#line 448 "/run/build/folks/folks/object-cache.vala"
		return result;
#line 2265 "object-cache.c"
	}
#line 450 "/run/build/folks/folks/object-cache.vala"
	_tmp2_ = _object_type;
#line 450 "/run/build/folks/folks/object-cache.vala"
	_tmp3_ = _g_variant_type_copy0 ((const GVariantType*) _tmp2_);
#line 450 "/run/build/folks/folks/object-cache.vala"
	object_type = _tmp3_;
#line 452 "/run/build/folks/folks/object-cache.vala"
	_tmp4_ = G_VARIANT_TYPE_STRING;
#line 452 "/run/build/folks/folks/object-cache.vala"
	_tmp5_ = _g_variant_type_copy0 (_tmp4_);
#line 452 "/run/build/folks/folks/object-cache.vala"
	_tmp6_ = G_VARIANT_TYPE_STRING;
#line 452 "/run/build/folks/folks/object-cache.vala"
	_tmp7_ = _g_variant_type_copy0 (_tmp6_);
#line 452 "/run/build/folks/folks/object-cache.vala"
	_tmp8_ = object_type;
#line 452 "/run/build/folks/folks/object-cache.vala"
	_tmp9_ = g_variant_type_new_array (_tmp8_);
#line 452 "/run/build/folks/folks/object-cache.vala"
	_tmp10_ = g_new0 (GVariantType*, 3 + 1);
#line 452 "/run/build/folks/folks/object-cache.vala"
	_tmp10_[0] = _tmp5_;
#line 452 "/run/build/folks/folks/object-cache.vala"
	_tmp10_[1] = _tmp7_;
#line 452 "/run/build/folks/folks/object-cache.vala"
	_tmp10_[2] = _tmp9_;
#line 452 "/run/build/folks/folks/object-cache.vala"
	_tmp11_ = _tmp10_;
#line 452 "/run/build/folks/folks/object-cache.vala"
	_tmp11__length1 = 3;
#line 452 "/run/build/folks/folks/object-cache.vala"
	_tmp12_ = g_variant_type_new_tuple (_tmp11_, 3);
#line 452 "/run/build/folks/folks/object-cache.vala"
	_tmp13_ = _tmp12_;
#line 452 "/run/build/folks/folks/object-cache.vala"
	_tmp11_ = (_vala_array_free (_tmp11_, _tmp11__length1, (GDestroyNotify) g_variant_type_free), NULL);
#line 452 "/run/build/folks/folks/object-cache.vala"
	result = _tmp13_;
#line 452 "/run/build/folks/folks/object-cache.vala"
	_g_variant_type_free0 (object_type);
#line 452 "/run/build/folks/folks/object-cache.vala"
	_g_variant_type_free0 (_object_type);
#line 452 "/run/build/folks/folks/object-cache.vala"
	return result;
#line 2311 "object-cache.c"
}


static void
_folks_object_cache_create_cache_directory_data_free (gpointer _data)
{
	FolksObjectCacheCreateCacheDirectoryData* _data_;
	_data_ = _data;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (_data_->self);
#line 35 "/run/build/folks/folks/object-cache.vala"
	g_slice_free (FolksObjectCacheCreateCacheDirectoryData, _data_);
#line 2324 "object-cache.c"
}


static void
_folks_object_cache_create_cache_directory_async_ready_wrapper (GObject *source_object,
                                                                GAsyncResult *res,
                                                                void *user_data)
{
	FolksObjectCacheCreateCacheDirectoryData* _task_data_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 35 "/run/build/folks/folks/object-cache.vala"
	if (_task_data_->_callback_ != NULL) {
#line 35 "/run/build/folks/folks/object-cache.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 2340 "object-cache.c"
	}
#line 35 "/run/build/folks/folks/object-cache.vala"
	_task_data_->_task_complete_ = TRUE;
#line 2344 "object-cache.c"
}


static void
_folks_object_cache_create_cache_directory (FolksObjectCache* self,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_)
{
	FolksObjectCacheCreateCacheDirectoryData* _data_;
	FolksObjectCache* _tmp0_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_ = g_slice_new0 (FolksObjectCacheCreateCacheDirectoryData);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->_callback_ = _callback_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _folks_object_cache_create_cache_directory_async_ready_wrapper, _user_data_);
#line 35 "/run/build/folks/folks/object-cache.vala"
	if (_callback_ == NULL) {
#line 35 "/run/build/folks/folks/object-cache.vala"
		_data_->_task_complete_ = TRUE;
#line 2365 "object-cache.c"
	}
#line 35 "/run/build/folks/folks/object-cache.vala"
	g_task_set_task_data (_data_->_async_result, _data_, _folks_object_cache_create_cache_directory_data_free);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_->self = _tmp0_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_folks_object_cache_create_cache_directory_co (_data_);
#line 2375 "object-cache.c"
}


static void
_folks_object_cache_create_cache_directory_finish (FolksObjectCache* self,
                                                   GAsyncResult* _res_,
                                                   GError** error)
{
	FolksObjectCacheCreateCacheDirectoryData* _data_;
#line 35 "/run/build/folks/folks/object-cache.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 35 "/run/build/folks/folks/object-cache.vala"
	if (NULL == _data_) {
#line 35 "/run/build/folks/folks/object-cache.vala"
		return;
#line 2391 "object-cache.c"
	}
}


static gpointer
_g_error_copy0 (gpointer self)
{
#line 470 "/run/build/folks/folks/object-cache.vala"
	return self ? g_error_copy (self) : NULL;
#line 2401 "object-cache.c"
}


static gboolean
_folks_object_cache_create_cache_directory_co (FolksObjectCacheCreateCacheDirectoryData* _data_)
{
#line 459 "/run/build/folks/folks/object-cache.vala"
	switch (_data_->_state_) {
#line 459 "/run/build/folks/folks/object-cache.vala"
		case 0:
#line 2412 "object-cache.c"
		goto _state_0;
		default:
#line 459 "/run/build/folks/folks/object-cache.vala"
		g_assert_not_reached ();
#line 2417 "object-cache.c"
	}
	_state_0:
	{
#line 463 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp0_ = _data_->self->priv->_cache_directory;
#line 463 "/run/build/folks/folks/object-cache.vala"
		g_file_make_directory_with_parents (_data_->_tmp0_, NULL, &_data_->_inner_error_);
#line 463 "/run/build/folks/folks/object-cache.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2427 "object-cache.c"
			goto __catch34_g_error;
		}
	}
	goto __finally34;
	__catch34_g_error:
	{
#line 461 "/run/build/folks/folks/object-cache.vala"
		_data_->e = _data_->_inner_error_;
#line 461 "/run/build/folks/folks/object-cache.vala"
		_data_->_inner_error_ = NULL;
#line 468 "/run/build/folks/folks/object-cache.vala"
		_data_->_tmp1_ = _data_->e;
#line 468 "/run/build/folks/folks/object-cache.vala"
		if (!g_error_matches (_data_->_tmp1_, G_IO_ERROR, G_IO_ERROR_EXISTS)) {
#line 470 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp2_ = _data_->e;
#line 470 "/run/build/folks/folks/object-cache.vala"
			_data_->_tmp3_ = _g_error_copy0 (_data_->_tmp2_);
#line 470 "/run/build/folks/folks/object-cache.vala"
			_data_->_inner_error_ = _data_->_tmp3_;
#line 470 "/run/build/folks/folks/object-cache.vala"
			_g_error_free0 (_data_->e);
#line 2450 "object-cache.c"
			goto __finally34;
		}
#line 461 "/run/build/folks/folks/object-cache.vala"
		_g_error_free0 (_data_->e);
#line 2455 "object-cache.c"
	}
	__finally34:
#line 461 "/run/build/folks/folks/object-cache.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 461 "/run/build/folks/folks/object-cache.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 461 "/run/build/folks/folks/object-cache.vala"
		g_object_unref (_data_->_async_result);
#line 461 "/run/build/folks/folks/object-cache.vala"
		return FALSE;
#line 2466 "object-cache.c"
	}
#line 459 "/run/build/folks/folks/object-cache.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 459 "/run/build/folks/folks/object-cache.vala"
	if (_data_->_state_ != 0) {
#line 459 "/run/build/folks/folks/object-cache.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 459 "/run/build/folks/folks/object-cache.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2476 "object-cache.c"
		}
	}
#line 459 "/run/build/folks/folks/object-cache.vala"
	g_object_unref (_data_->_async_result);
#line 459 "/run/build/folks/folks/object-cache.vala"
	return FALSE;
#line 2483 "object-cache.c"
}


const gchar*
folks_object_cache_get_type_id (FolksObjectCache* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 117 "/run/build/folks/folks/object-cache.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 117 "/run/build/folks/folks/object-cache.vala"
	_tmp0_ = self->priv->_type_id;
#line 117 "/run/build/folks/folks/object-cache.vala"
	result = _tmp0_;
#line 117 "/run/build/folks/folks/object-cache.vala"
	return result;
#line 2500 "object-cache.c"
}


static void
folks_object_cache_set_type_id (FolksObjectCache* self,
                                const gchar* value)
{
#line 117 "/run/build/folks/folks/object-cache.vala"
	g_return_if_fail (self != NULL);
#line 117 "/run/build/folks/folks/object-cache.vala"
	if (g_strcmp0 (value, folks_object_cache_get_type_id (self)) != 0) {
#line 2512 "object-cache.c"
		gchar* _tmp0_;
#line 117 "/run/build/folks/folks/object-cache.vala"
		_tmp0_ = g_strdup (value);
#line 117 "/run/build/folks/folks/object-cache.vala"
		_g_free0 (self->priv->_type_id);
#line 117 "/run/build/folks/folks/object-cache.vala"
		self->priv->_type_id = _tmp0_;
#line 117 "/run/build/folks/folks/object-cache.vala"
		g_object_notify_by_pspec ((GObject *) self, folks_object_cache_properties[FOLKS_OBJECT_CACHE_TYPE_ID_PROPERTY]);
#line 2522 "object-cache.c"
	}
}


const gchar*
folks_object_cache_get_id (FolksObjectCache* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 129 "/run/build/folks/folks/object-cache.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 129 "/run/build/folks/folks/object-cache.vala"
	_tmp0_ = self->priv->_id;
#line 129 "/run/build/folks/folks/object-cache.vala"
	result = _tmp0_;
#line 129 "/run/build/folks/folks/object-cache.vala"
	return result;
#line 2540 "object-cache.c"
}


static void
folks_object_cache_set_id (FolksObjectCache* self,
                           const gchar* value)
{
	gchar* _tmp0_;
#line 130 "/run/build/folks/folks/object-cache.vala"
	g_return_if_fail (self != NULL);
#line 130 "/run/build/folks/folks/object-cache.vala"
	_vala_assert (g_strcmp0 (value, "") != 0, "value != \"\"");
#line 130 "/run/build/folks/folks/object-cache.vala"
	_tmp0_ = g_strdup (value);
#line 130 "/run/build/folks/folks/object-cache.vala"
	_g_free0 (self->priv->_id);
#line 130 "/run/build/folks/folks/object-cache.vala"
	self->priv->_id = _tmp0_;
#line 130 "/run/build/folks/folks/object-cache.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_object_cache_properties[FOLKS_OBJECT_CACHE_ID_PROPERTY]);
#line 2561 "object-cache.c"
}


static GObject *
folks_object_cache_constructor (GType type,
                                guint n_construct_properties,
                                GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	FolksObjectCache * self;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	GFile* _tmp4_;
	GFile* _tmp5_;
	GFile* _tmp6_;
	GFile* _tmp7_;
	const gchar* _tmp8_;
	GFile* _tmp9_;
	GFile* _tmp10_;
	const gchar* _tmp11_;
	const gchar* _tmp12_;
	gchar* _tmp13_;
	gchar* _tmp14_;
	GFile* _tmp15_;
	gchar* path = NULL;
	GFile* _tmp16_;
	gchar* _tmp17_;
	const gchar* _tmp18_ = NULL;
	const gchar* _tmp19_;
	gchar* _tmp21_;
#line 155 "/run/build/folks/folks/object-cache.vala"
	parent_class = G_OBJECT_CLASS (folks_object_cache_parent_class);
#line 155 "/run/build/folks/folks/object-cache.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 155 "/run/build/folks/folks/object-cache.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_OBJECT_CACHE, FolksObjectCache);
#line 157 "/run/build/folks/folks/object-cache.vala"
	_tmp0_ = self->priv->_type_id;
#line 157 "/run/build/folks/folks/object-cache.vala"
	_tmp1_ = folks_object_cache_get_id (self);
#line 157 "/run/build/folks/folks/object-cache.vala"
	_tmp2_ = _tmp1_;
#line 157 "/run/build/folks/folks/object-cache.vala"
	g_debug ("object-cache.vala:157: Creating object cache for type ID '%s' with ID " \
"'%s'.", _tmp0_, _tmp2_);
#line 160 "/run/build/folks/folks/object-cache.vala"
	_tmp3_ = g_get_user_cache_dir ();
#line 160 "/run/build/folks/folks/object-cache.vala"
	_tmp4_ = g_file_new_for_path (_tmp3_);
#line 160 "/run/build/folks/folks/object-cache.vala"
	_tmp5_ = _tmp4_;
#line 160 "/run/build/folks/folks/object-cache.vala"
	_tmp6_ = g_file_get_child (_tmp5_, "folks");
#line 160 "/run/build/folks/folks/object-cache.vala"
	_tmp7_ = _tmp6_;
#line 160 "/run/build/folks/folks/object-cache.vala"
	_tmp8_ = self->priv->_type_id;
#line 160 "/run/build/folks/folks/object-cache.vala"
	_tmp9_ = g_file_get_child (_tmp7_, _tmp8_);
#line 160 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (self->priv->_cache_directory);
#line 160 "/run/build/folks/folks/object-cache.vala"
	self->priv->_cache_directory = _tmp9_;
#line 160 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (_tmp7_);
#line 160 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (_tmp5_);
#line 164 "/run/build/folks/folks/object-cache.vala"
	_tmp10_ = self->priv->_cache_directory;
#line 164 "/run/build/folks/folks/object-cache.vala"
	_tmp11_ = folks_object_cache_get_id (self);
#line 164 "/run/build/folks/folks/object-cache.vala"
	_tmp12_ = _tmp11_;
#line 164 "/run/build/folks/folks/object-cache.vala"
	_tmp13_ = g_uri_escape_string (_tmp12_, "", FALSE);
#line 164 "/run/build/folks/folks/object-cache.vala"
	_tmp14_ = _tmp13_;
#line 164 "/run/build/folks/folks/object-cache.vala"
	_tmp15_ = g_file_get_child (_tmp10_, _tmp14_);
#line 164 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (self->priv->_cache_file);
#line 164 "/run/build/folks/folks/object-cache.vala"
	self->priv->_cache_file = _tmp15_;
#line 164 "/run/build/folks/folks/object-cache.vala"
	_g_free0 (_tmp14_);
#line 167 "/run/build/folks/folks/object-cache.vala"
	_tmp16_ = self->priv->_cache_file;
#line 167 "/run/build/folks/folks/object-cache.vala"
	_tmp17_ = g_file_get_path (_tmp16_);
#line 167 "/run/build/folks/folks/object-cache.vala"
	path = _tmp17_;
#line 168 "/run/build/folks/folks/object-cache.vala"
	_tmp19_ = path;
#line 168 "/run/build/folks/folks/object-cache.vala"
	if (_tmp19_ != NULL) {
#line 2659 "object-cache.c"
		const gchar* _tmp20_;
#line 168 "/run/build/folks/folks/object-cache.vala"
		_tmp20_ = path;
#line 168 "/run/build/folks/folks/object-cache.vala"
		_tmp18_ = (const gchar*) _tmp20_;
#line 2665 "object-cache.c"
	} else {
#line 168 "/run/build/folks/folks/object-cache.vala"
		_tmp18_ = "(null)";
#line 2669 "object-cache.c"
	}
#line 168 "/run/build/folks/folks/object-cache.vala"
	_tmp21_ = g_strdup (_tmp18_);
#line 168 "/run/build/folks/folks/object-cache.vala"
	_g_free0 (self->priv->_cache_file_path);
#line 168 "/run/build/folks/folks/object-cache.vala"
	self->priv->_cache_file_path = _tmp21_;
#line 155 "/run/build/folks/folks/object-cache.vala"
	_g_free0 (path);
#line 155 "/run/build/folks/folks/object-cache.vala"
	return obj;
#line 2681 "object-cache.c"
}


static void
folks_object_cache_class_init (FolksObjectCacheClass * klass)
{
#line 35 "/run/build/folks/folks/object-cache.vala"
	folks_object_cache_parent_class = g_type_class_peek_parent (klass);
#line 35 "/run/build/folks/folks/object-cache.vala"
	g_type_class_add_private (klass, sizeof (FolksObjectCachePrivate));
#line 35 "/run/build/folks/folks/object-cache.vala"
	((FolksObjectCacheClass *) klass)->get_serialised_object_type = (GVariantType* (*) (FolksObjectCache *, guint8)) folks_object_cache_real_get_serialised_object_type;
#line 35 "/run/build/folks/folks/object-cache.vala"
	((FolksObjectCacheClass *) klass)->get_serialised_object_version = (guint8 (*) (FolksObjectCache *)) folks_object_cache_real_get_serialised_object_version;
#line 35 "/run/build/folks/folks/object-cache.vala"
	((FolksObjectCacheClass *) klass)->serialise_object = (GVariant* (*) (FolksObjectCache *, gconstpointer)) folks_object_cache_real_serialise_object;
#line 35 "/run/build/folks/folks/object-cache.vala"
	((FolksObjectCacheClass *) klass)->deserialise_object = (gpointer (*) (FolksObjectCache *, GVariant*, guint8)) folks_object_cache_real_deserialise_object;
#line 35 "/run/build/folks/folks/object-cache.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_folks_object_cache_get_property;
#line 35 "/run/build/folks/folks/object-cache.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_folks_object_cache_set_property;
#line 35 "/run/build/folks/folks/object-cache.vala"
	G_OBJECT_CLASS (klass)->constructor = folks_object_cache_constructor;
#line 35 "/run/build/folks/folks/object-cache.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_object_cache_finalize;
#line 35 "/run/build/folks/folks/object-cache.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_OBJECT_CACHE_T_TYPE, g_param_spec_gtype ("t-type", "type", "type", G_TYPE_NONE, G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 35 "/run/build/folks/folks/object-cache.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_OBJECT_CACHE_T_DUP_FUNC, g_param_spec_pointer ("t-dup-func", "dup func", "dup func", G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 35 "/run/build/folks/folks/object-cache.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_OBJECT_CACHE_T_DESTROY_FUNC, g_param_spec_pointer ("t-destroy-func", "destroy func", "destroy func", G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 2714 "object-cache.c"
	/**
	   * A string identifying the type of object being cached.
	   *
	   * This has to be suitable for use as a directory name; i.e. lower case,
	   * hyphen-separated tokens.
	   *
	   * @since 0.6.6
	   */
#line 35 "/run/build/folks/folks/object-cache.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_OBJECT_CACHE_TYPE_ID_PROPERTY, folks_object_cache_properties[FOLKS_OBJECT_CACHE_TYPE_ID_PROPERTY] = g_param_spec_string ("type-id", "type-id", "type-id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 2725 "object-cache.c"
	/**
	   * A string identifying the particular cache instance.
	   *
	   * This will form the file name of the cache file, but will be escaped
	   * beforehand, so can be an arbitrary non-empty string.
	   *
	   * @since 0.6.6
	   */
#line 35 "/run/build/folks/folks/object-cache.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_OBJECT_CACHE_ID_PROPERTY, folks_object_cache_properties[FOLKS_OBJECT_CACHE_ID_PROPERTY] = g_param_spec_string ("id", "id", "id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 2736 "object-cache.c"
}


static void
folks_object_cache_instance_init (FolksObjectCache * self)
{
#line 35 "/run/build/folks/folks/object-cache.vala"
	self->priv = FOLKS_OBJECT_CACHE_GET_PRIVATE (self);
#line 2745 "object-cache.c"
}


static void
folks_object_cache_finalize (GObject * obj)
{
	FolksObjectCache * self;
#line 35 "/run/build/folks/folks/object-cache.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_OBJECT_CACHE, FolksObjectCache);
#line 53 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (self->priv->_cache_directory);
#line 54 "/run/build/folks/folks/object-cache.vala"
	_g_object_unref0 (self->priv->_cache_file);
#line 55 "/run/build/folks/folks/object-cache.vala"
	_g_free0 (self->priv->_cache_file_path);
#line 117 "/run/build/folks/folks/object-cache.vala"
	_g_free0 (self->priv->_type_id);
#line 132 "/run/build/folks/folks/object-cache.vala"
	_g_free0 (self->priv->_id);
#line 35 "/run/build/folks/folks/object-cache.vala"
	G_OBJECT_CLASS (folks_object_cache_parent_class)->finalize (obj);
#line 2767 "object-cache.c"
}


/**
 * A generic abstract cache for sets of objects. This can be used by subclasses
 * to implement caching of homogeneous sets of objects. Subclasses simply have
 * to implement serialisation and deserialisation of the objects to and from
 * {@link GLib.Variant}s.
 *
 * It's intended that this class be used for providing caching layers for
 * {@link PersonaStore}s, for example.
 *
 * @since 0.6.0
 */
GType
folks_object_cache_get_type (void)
{
	static volatile gsize folks_object_cache_type_id__volatile = 0;
	if (g_once_init_enter (&folks_object_cache_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksObjectCacheClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_object_cache_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksObjectCache), 0, (GInstanceInitFunc) folks_object_cache_instance_init, NULL };
		GType folks_object_cache_type_id;
		folks_object_cache_type_id = g_type_register_static (G_TYPE_OBJECT, "FolksObjectCache", &g_define_type_info, G_TYPE_FLAG_ABSTRACT);
		g_once_init_leave (&folks_object_cache_type_id__volatile, folks_object_cache_type_id);
	}
	return folks_object_cache_type_id__volatile;
}


static void
_vala_folks_object_cache_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec)
{
	FolksObjectCache * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_OBJECT_CACHE, FolksObjectCache);
#line 35 "/run/build/folks/folks/object-cache.vala"
	switch (property_id) {
#line 35 "/run/build/folks/folks/object-cache.vala"
		case FOLKS_OBJECT_CACHE_TYPE_ID_PROPERTY:
#line 35 "/run/build/folks/folks/object-cache.vala"
		g_value_set_string (value, folks_object_cache_get_type_id (self));
#line 35 "/run/build/folks/folks/object-cache.vala"
		break;
#line 35 "/run/build/folks/folks/object-cache.vala"
		case FOLKS_OBJECT_CACHE_ID_PROPERTY:
#line 35 "/run/build/folks/folks/object-cache.vala"
		g_value_set_string (value, folks_object_cache_get_id (self));
#line 35 "/run/build/folks/folks/object-cache.vala"
		break;
#line 2818 "object-cache.c"
		default:
#line 35 "/run/build/folks/folks/object-cache.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 35 "/run/build/folks/folks/object-cache.vala"
		break;
#line 2824 "object-cache.c"
	}
}


static void
_vala_folks_object_cache_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec)
{
	FolksObjectCache * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_OBJECT_CACHE, FolksObjectCache);
#line 35 "/run/build/folks/folks/object-cache.vala"
	switch (property_id) {
#line 35 "/run/build/folks/folks/object-cache.vala"
		case FOLKS_OBJECT_CACHE_TYPE_ID_PROPERTY:
#line 35 "/run/build/folks/folks/object-cache.vala"
		folks_object_cache_set_type_id (self, g_value_get_string (value));
#line 35 "/run/build/folks/folks/object-cache.vala"
		break;
#line 35 "/run/build/folks/folks/object-cache.vala"
		case FOLKS_OBJECT_CACHE_ID_PROPERTY:
#line 35 "/run/build/folks/folks/object-cache.vala"
		folks_object_cache_set_id (self, g_value_get_string (value));
#line 35 "/run/build/folks/folks/object-cache.vala"
		break;
#line 35 "/run/build/folks/folks/object-cache.vala"
		case FOLKS_OBJECT_CACHE_T_TYPE:
#line 35 "/run/build/folks/folks/object-cache.vala"
		self->priv->t_type = g_value_get_gtype (value);
#line 35 "/run/build/folks/folks/object-cache.vala"
		break;
#line 35 "/run/build/folks/folks/object-cache.vala"
		case FOLKS_OBJECT_CACHE_T_DUP_FUNC:
#line 35 "/run/build/folks/folks/object-cache.vala"
		self->priv->t_dup_func = g_value_get_pointer (value);
#line 35 "/run/build/folks/folks/object-cache.vala"
		break;
#line 35 "/run/build/folks/folks/object-cache.vala"
		case FOLKS_OBJECT_CACHE_T_DESTROY_FUNC:
#line 35 "/run/build/folks/folks/object-cache.vala"
		self->priv->t_destroy_func = g_value_get_pointer (value);
#line 35 "/run/build/folks/folks/object-cache.vala"
		break;
#line 2869 "object-cache.c"
		default:
#line 35 "/run/build/folks/folks/object-cache.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 35 "/run/build/folks/folks/object-cache.vala"
		break;
#line 2875 "object-cache.c"
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}



