/* unity-tool-ui.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-tool-ui.vala, do not modify */

/*
 * Copyright (C) 2012 Canonical Ltd
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authored by Pawel Stolowski <pawel.stolowski@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include <unity-protocol.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>
#include <dee.h>
#include <gio/gio.h>
#include <stdio.h>
#include <unity-internal.h>
#include <gdk/gdk.h>


#define UNITY_TESTER_TYPE_UNITY_TOOL_UI (unity_tester_unity_tool_ui_get_type ())
#define UNITY_TESTER_UNITY_TOOL_UI(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_UNITY_TOOL_UI, UnityTesterUnityToolUi))
#define UNITY_TESTER_UNITY_TOOL_UI_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_UNITY_TOOL_UI, UnityTesterUnityToolUiClass))
#define UNITY_TESTER_IS_UNITY_TOOL_UI(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_UNITY_TOOL_UI))
#define UNITY_TESTER_IS_UNITY_TOOL_UI_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_UNITY_TOOL_UI))
#define UNITY_TESTER_UNITY_TOOL_UI_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_UNITY_TOOL_UI, UnityTesterUnityToolUiClass))

typedef struct _UnityTesterUnityToolUi UnityTesterUnityToolUi;
typedef struct _UnityTesterUnityToolUiClass UnityTesterUnityToolUiClass;
typedef struct _UnityTesterUnityToolUiPrivate UnityTesterUnityToolUiPrivate;

#define UNITY_TESTER_TYPE_PREVIEW_RENDERER (unity_tester_preview_renderer_get_type ())
#define UNITY_TESTER_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_PREVIEW_RENDERER, UnityTesterPreviewRenderer))
#define UNITY_TESTER_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_PREVIEW_RENDERER, UnityTesterPreviewRendererClass))
#define UNITY_TESTER_IS_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_PREVIEW_RENDERER))
#define UNITY_TESTER_IS_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_PREVIEW_RENDERER))
#define UNITY_TESTER_PREVIEW_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_PREVIEW_RENDERER, UnityTesterPreviewRendererClass))

typedef struct _UnityTesterPreviewRenderer UnityTesterPreviewRenderer;
typedef struct _UnityTesterPreviewRendererClass UnityTesterPreviewRendererClass;
enum  {
	UNITY_TESTER_UNITY_TOOL_UI_0_PROPERTY,
	UNITY_TESTER_UNITY_TOOL_UI_NUM_PROPERTIES
};
static GParamSpec* unity_tester_unity_tool_ui_properties[UNITY_TESTER_UNITY_TOOL_UI_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

#define UNITY_TESTER_TYPE_DBUS_LENS_UTIL (unity_tester_dbus_lens_util_get_type ())
#define UNITY_TESTER_DBUS_LENS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_DBUS_LENS_UTIL, UnityTesterDBusLensUtil))
#define UNITY_TESTER_DBUS_LENS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_DBUS_LENS_UTIL, UnityTesterDBusLensUtilClass))
#define UNITY_TESTER_IS_DBUS_LENS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_DBUS_LENS_UTIL))
#define UNITY_TESTER_IS_DBUS_LENS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_DBUS_LENS_UTIL))
#define UNITY_TESTER_DBUS_LENS_UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_DBUS_LENS_UTIL, UnityTesterDBusLensUtilClass))

typedef struct _UnityTesterDBusLensUtil UnityTesterDBusLensUtil;
typedef struct _UnityTesterDBusLensUtilClass UnityTesterDBusLensUtilClass;
typedef struct _Block8Data Block8Data;
#define _unity_tester_dbus_lens_util_unref0(var) ((var == NULL) ? NULL : (var = (unity_tester_dbus_lens_util_unref (var), NULL)))

#define UNITY_TESTER_DBUS_LENS_UTIL_TYPE_DBUS_OBJECT_ADDRESS (unity_tester_dbus_lens_util_dbus_object_address_get_type ())
typedef struct _UnityTesterDBusLensUtilDBusObjectAddress UnityTesterDBusLensUtilDBusObjectAddress;
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
typedef struct _Block9Data Block9Data;
#define _g_string_free0(var) ((var == NULL) ? NULL : (var = (g_string_free (var, TRUE), NULL)))
typedef struct _Block10Data Block10Data;
#define _g_type_class_unref0(var) ((var == NULL) ? NULL : (var = (g_type_class_unref (var), NULL)))
typedef struct _UnityTesterUnityToolUiSendActivateData UnityTesterUnityToolUiSendActivateData;
typedef struct _UnityTesterUnityToolUiSendUpdateData UnityTesterUnityToolUiSendUpdateData;
typedef struct _Block11Data Block11Data;
#define __vala_UnityProtocolActivationReplyRaw_free0(var) ((var == NULL) ? NULL : (var = (_vala_UnityProtocolActivationReplyRaw_free (var), NULL)))
typedef struct _Block12Data Block12Data;

#define UNITY_TESTER_TYPE_GRID_RENDERER (unity_tester_grid_renderer_get_type ())
#define UNITY_TESTER_GRID_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer))
#define UNITY_TESTER_GRID_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRendererClass))
#define UNITY_TESTER_IS_GRID_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_GRID_RENDERER))
#define UNITY_TESTER_IS_GRID_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_GRID_RENDERER))
#define UNITY_TESTER_GRID_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRendererClass))

typedef struct _UnityTesterGridRenderer UnityTesterGridRenderer;
typedef struct _UnityTesterGridRendererClass UnityTesterGridRendererClass;

#define UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER (unity_tester_series_preview_renderer_get_type ())
#define UNITY_TESTER_SERIES_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER, UnityTesterSeriesPreviewRenderer))
#define UNITY_TESTER_SERIES_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER, UnityTesterSeriesPreviewRendererClass))
#define UNITY_TESTER_IS_SERIES_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER))
#define UNITY_TESTER_IS_SERIES_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER))
#define UNITY_TESTER_SERIES_PREVIEW_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER, UnityTesterSeriesPreviewRendererClass))

typedef struct _UnityTesterSeriesPreviewRenderer UnityTesterSeriesPreviewRenderer;
typedef struct _UnityTesterSeriesPreviewRendererClass UnityTesterSeriesPreviewRendererClass;

#define UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER (unity_tester_music_preview_renderer_get_type ())
#define UNITY_TESTER_MUSIC_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER, UnityTesterMusicPreviewRenderer))
#define UNITY_TESTER_MUSIC_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER, UnityTesterMusicPreviewRendererClass))
#define UNITY_TESTER_IS_MUSIC_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER))
#define UNITY_TESTER_IS_MUSIC_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER))
#define UNITY_TESTER_MUSIC_PREVIEW_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER, UnityTesterMusicPreviewRendererClass))

typedef struct _UnityTesterMusicPreviewRenderer UnityTesterMusicPreviewRenderer;
typedef struct _UnityTesterMusicPreviewRendererClass UnityTesterMusicPreviewRendererClass;
typedef struct _Block13Data Block13Data;
typedef struct _Block14Data Block14Data;
typedef struct _Block15Data Block15Data;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _UnityTesterUnityToolUi {
	GObject parent_instance;
	UnityTesterUnityToolUiPrivate * priv;
};

struct _UnityTesterUnityToolUiClass {
	GObjectClass parent_class;
};

struct _UnityTesterUnityToolUiPrivate {
	UnityTesterPreviewRenderer* preview_renderer;
	UnityProtocolScopeService* scope_proxy;
	guint dbus_watcher_id;
	gchar* preview_scope_uri;
	GtkNotebook* notebook;
	GtkViewport* preview_viewport;
	GtkTreeSelection* results_view_selection;
	GtkAlignment* preview_buttons_container;
	GtkAlignment* preview_extra_buttons_container;
	GtkTextBuffer* preview_raw_data;
	GtkMenu* results_popup_menu;
	GtkTreeView* results_view;
	GtkRadioButton* search_type_global_rbutton;
	GtkDialog* scope_connect_dlg;
	GtkSpinner* spinner;
	GtkSpinner* scope_discovery_spinner;
	GtkButton* search_button;
	GtkButton* results_button;
	GtkButton* prev_preview_button;
	GtkButton* next_preview_button;
	GtkStatusbar* statusbar;
	GtkTextBuffer* log_buffer;
	guint statusbar_info_ctx;
	guint statusbar_error_ctx;
	GtkEntry* search_entry;
	GtkEntry* dbus_name_entry;
	GtkEntry* dbus_path_entry;
	GtkComboBox* scope_list_combobox;
	GtkListStore* uimodel;
	GtkListStore* ui_filter_model;
	GtkListStore* scope_list_model;
	GtkListStore* ui_cat_model;
	gulong model_sync_sig_id;
	DeeSharedModel* dee_results_model;
	gchar* current_channel_id;
	gchar* current_swarm_name;
	DeeSerializableModel* dee_filters_model;
	DeeSerializableModel* dee_categories_model;
	GtkTreeModel* last_active_model;
	GtkTreeIter* last_active_iter;
};

struct _Block8Data {
	int _ref_count_;
	UnityTesterUnityToolUi* self;
	GtkTreeIter iter;
	UnityTesterDBusLensUtil* c;
};

struct _UnityTesterDBusLensUtilDBusObjectAddress {
	gchar* dbus_name;
	gchar* dbus_path;
};

struct _Block9Data {
	int _ref_count_;
	GString* bld;
};

struct _Block10Data {
	int _ref_count_;
	GString* bld;
};

struct _UnityTesterUnityToolUiSendActivateData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityTesterUnityToolUi* self;
	gchar* channel_id;
	GVariant** result_arr;
	gint result_arr_length1;
	guint action_type;
	GHashTable* hints_;
	UnityProtocolActivationReplyRaw reply;
	GHashTable* hints;
	GHashTable* _tmp0_;
	GHashTable* _tmp1_;
	GHashTable* _tmp2_;
	UnityProtocolActivationReplyRaw _tmp3_;
	UnityProtocolScopeService* _tmp4_;
	GHashTable* _tmp5_;
	UnityProtocolActivationReplyRaw _tmp6_;
	UnityProtocolActivationReplyRaw _tmp7_;
	GError * _inner_error_;
};

struct _UnityTesterUnityToolUiSendUpdateData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityTesterUnityToolUi* self;
	gchar* channel_id;
	gchar* uri;
	GHashTable* props;
	GHashTable* reply;
};

struct _Block11Data {
	int _ref_count_;
	UnityTesterUnityToolUi* self;
	UnityProtocolActivationReplyRaw* reply_struct;
};

struct _Block12Data {
	int _ref_count_;
	UnityTesterUnityToolUi* self;
	UnityProtocolActivationReplyRaw* reply_struct;
};

struct _Block13Data {
	int _ref_count_;
	UnityTesterUnityToolUi* self;
	UnityProtocolActivationReplyRaw* reply_struct;
};

struct _Block14Data {
	int _ref_count_;
	UnityTesterUnityToolUi* self;
	GHashTable* ht;
};

struct _Block15Data {
	int _ref_count_;
	UnityTesterUnityToolUi* self;
	GHashTable* ht;
};


static gpointer unity_tester_unity_tool_ui_parent_class = NULL;
extern gchar* unity_tester_options_scope_dbus_path;
extern gchar* unity_tester_options_scope_dbus_name;

GType unity_tester_unity_tool_ui_get_type (void) G_GNUC_CONST;
GType unity_tester_preview_renderer_get_type (void) G_GNUC_CONST;
#define UNITY_TESTER_UNITY_TOOL_UI_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TESTER_TYPE_UNITY_TOOL_UI, UnityTesterUnityToolUiPrivate))
UnityTesterUnityToolUi* unity_tester_unity_tool_ui_new (void);
UnityTesterUnityToolUi* unity_tester_unity_tool_ui_construct (GType object_type);
gboolean unity_tester_unity_tool_ui_init_gui (UnityTesterUnityToolUi* self);
static void _gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                        gpointer self);
static void unity_tester_unity_tool_ui_show_no_preview (UnityTesterUnityToolUi* self);
static void unity_tester_unity_tool_ui_show_connect_dialog (UnityTesterUnityToolUi* self);
static void unity_tester_unity_tool_ui_ui_load_error (UnityTesterUnityToolUi* self,
                                               const gchar* message);
static void unity_tester_unity_tool_ui_discover_scope (UnityTesterUnityToolUi* self);
gpointer unity_tester_dbus_lens_util_ref (gpointer instance);
void unity_tester_dbus_lens_util_unref (gpointer instance);
GParamSpec* unity_tester_param_spec_dbus_lens_util (const gchar* name,
                                                    const gchar* nick,
                                                    const gchar* blurb,
                                                    GType object_type,
                                                    GParamFlags flags);
void unity_tester_value_set_dbus_lens_util (GValue* value,
                                            gpointer v_object);
void unity_tester_value_take_dbus_lens_util (GValue* value,
                                             gpointer v_object);
gpointer unity_tester_value_get_dbus_lens_util (const GValue* value);
GType unity_tester_dbus_lens_util_get_type (void) G_GNUC_CONST;
static Block8Data* block8_data_ref (Block8Data* _data8_);
static void block8_data_unref (void * _userdata_);
UnityTesterDBusLensUtil* unity_tester_dbus_lens_util_new (void);
UnityTesterDBusLensUtil* unity_tester_dbus_lens_util_construct (GType object_type);
void unity_tester_dbus_lens_util_findLenses (UnityTesterDBusLensUtil* self,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
GType unity_tester_dbus_lens_util_dbus_object_address_get_type (void) G_GNUC_CONST;
UnityTesterDBusLensUtilDBusObjectAddress* unity_tester_dbus_lens_util_dbus_object_address_dup (const UnityTesterDBusLensUtilDBusObjectAddress* self);
void unity_tester_dbus_lens_util_dbus_object_address_free (UnityTesterDBusLensUtilDBusObjectAddress* self);
void unity_tester_dbus_lens_util_dbus_object_address_copy (const UnityTesterDBusLensUtilDBusObjectAddress* self,
                                                           UnityTesterDBusLensUtilDBusObjectAddress* dest);
void unity_tester_dbus_lens_util_dbus_object_address_destroy (UnityTesterDBusLensUtilDBusObjectAddress* self);
GList* unity_tester_dbus_lens_util_findLenses_finish (UnityTesterDBusLensUtil* self,
                                                      GAsyncResult* _res_,
                                                      GError** error);
static void __lambda6_ (Block8Data* _data8_,
                 GObject* obj,
                 GAsyncResult* res);
static void ___lambda6__gasync_ready_callback (GObject* source_object,
                                        GAsyncResult* res,
                                        gpointer self);
void unity_tester_unity_tool_ui_on_scope_combobox_clicked (GtkMenuItem* item,
                                                           UnityTesterUnityToolUi* self);
void unity_tester_unity_tool_ui_on_connect_clicked (GtkMenuItem* item,
                                                    UnityTesterUnityToolUi* self);
void unity_tester_unity_tool_ui_on_clear_log_clicked (GtkMenuItem* item,
                                                      UnityTesterUnityToolUi* self);
static void unity_tester_unity_tool_ui_results_row_added_cb (UnityTesterUnityToolUi* self,
                                                      DeeModel* model,
                                                      DeeModelIter* iter);
static void unity_tester_unity_tool_ui_filters_row_added_cb (UnityTesterUnityToolUi* self,
                                                      DeeModel* model,
                                                      DeeModelIter* iter);
static void unity_tester_unity_tool_ui_categories_row_added_cb (UnityTesterUnityToolUi* self,
                                                         DeeModel* model,
                                                         DeeModelIter* iter);
static void unity_tester_unity_tool_ui_update_status (UnityTesterUnityToolUi* self);
static void unity_tester_unity_tool_ui_model_synchronized_cb (UnityTesterUnityToolUi* self);
static void unity_tester_unity_tool_ui_append_log_message (UnityTesterUnityToolUi* self,
                                                    const gchar* message);
static void unity_tester_unity_tool_ui_filter_model_synchronized_cb (UnityTesterUnityToolUi* self);
static void unity_tester_unity_tool_ui_categories_model_synchronized_cb (UnityTesterUnityToolUi* self);
static void unity_tester_unity_tool_ui_on_scope_service_vanished (UnityTesterUnityToolUi* self,
                                                           GDBusConnection* connection,
                                                           const gchar* name);
static void unity_tester_unity_tool_ui_handle_error (UnityTesterUnityToolUi* self,
                                              const gchar* message);
static void unity_tester_unity_tool_ui_clear_data (UnityTesterUnityToolUi* self);
static void unity_tester_unity_tool_ui_clear_categories_and_filters (UnityTesterUnityToolUi* self);
static void unity_tester_unity_tool_ui_remove_preview (UnityTesterUnityToolUi* self);
static void unity_tester_unity_tool_ui_disable_ui_actions_on_error_condition (UnityTesterUnityToolUi* self);
void unity_tester_unity_tool_ui_on_scope_connect (GtkDialog* dlg,
                                                  gint response,
                                                  UnityTesterUnityToolUi* self);
static void _unity_tester_unity_tool_ui_on_scope_service_vanished_gbus_name_vanished_callback (GDBusConnection* connection,
                                                                                        const gchar* name,
                                                                                        gpointer self);
static void _g_free0_ (gpointer var);
static void _g_variant_unref0_ (gpointer var);
static void ____lambda10_ (UnityTesterUnityToolUi* self,
                    GObject* obj,
                    GAsyncResult* res);
static void _____lambda10__gasync_ready_callback (GObject* source_object,
                                           GAsyncResult* res,
                                           gpointer self);
void unity_tester_unity_tool_ui_on_from_scope_clicked (GtkButton* btn,
                                                       UnityTesterUnityToolUi* self);
void unity_tester_get_scope_params_from_file (const gchar* filename,
                                              GError** error);
void unity_tester_unity_tool_ui_on_results_button_clicked (GtkButton* btn,
                                                           UnityTesterUnityToolUi* self);
void unity_tester_unity_tool_ui_on_search_button_clicked (GtkButton* btn,
                                                          UnityTesterUnityToolUi* self);
static void ___lambda11_ (UnityTesterUnityToolUi* self,
                   GObject* obj,
                   GAsyncResult* res);
static void _unity_tester_unity_tool_ui_model_synchronized_cb_g_object_notify (GObject* _sender,
                                                                        GParamSpec* pspec,
                                                                        gpointer self);
static void _unity_tester_unity_tool_ui_results_row_added_cb_dee_model_row_added (DeeModel* _sender,
                                                                           DeeModelIter* iter,
                                                                           gpointer self);
static gchar* unity_tester_unity_tool_ui_dump_ht_reply (GHashTable* reply);
static void ____lambda11__gasync_ready_callback (GObject* source_object,
                                          GAsyncResult* res,
                                          gpointer self);
static Block9Data* block9_data_ref (Block9Data* _data9_);
static void block9_data_unref (void * _userdata_);
static void __lambda12_ (Block9Data* _data9_,
                  const gchar* k,
                  GVariant* v);
static void ___lambda12__gh_func (gconstpointer key,
                           gconstpointer value,
                           gpointer self);
static gchar* unity_tester_unity_tool_ui_dump_activation_reply (UnityProtocolActivationReplyRaw* reply);
static Block10Data* block10_data_ref (Block10Data* _data10_);
static void block10_data_unref (void * _userdata_);
static void __lambda13_ (Block10Data* _data10_,
                  const gchar* k,
                  GVariant* v);
static void ___lambda13__gh_func (gconstpointer key,
                           gconstpointer value,
                           gpointer self);
static void unity_tester_unity_tool_ui_send_activate_data_free (gpointer _data);
static void unity_tester_unity_tool_ui_send_activate_async_ready_wrapper (GObject *source_object,
                                                                   GAsyncResult *res,
                                                                   void *user_data);
static void unity_tester_unity_tool_ui_send_activate (UnityTesterUnityToolUi* self,
                                               const gchar* channel_id,
                                               GVariant** result_arr,
                                               int result_arr_length1,
                                               guint action_type,
                                               GHashTable* hints_,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
static void unity_tester_unity_tool_ui_send_activate_finish (UnityTesterUnityToolUi* self,
                                                      GAsyncResult* _res_,
                                                      UnityProtocolActivationReplyRaw* reply,
                                                      GError** error);
static gboolean unity_tester_unity_tool_ui_send_activate_co (UnityTesterUnityToolUiSendActivateData* _data_);
static void unity_tester_unity_tool_ui_send_activate_ready (GObject* source_object,
                                                     GAsyncResult* _res_,
                                                     gpointer _user_data_);
static void unity_tester_unity_tool_ui_send_update_data_free (gpointer _data);
static void unity_tester_unity_tool_ui_send_update_async_ready_wrapper (GObject *source_object,
                                                                 GAsyncResult *res,
                                                                 void *user_data);
static void unity_tester_unity_tool_ui_send_update (UnityTesterUnityToolUi* self,
                                             const gchar* channel_id,
                                             const gchar* uri,
                                             GHashTable* props,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
static void unity_tester_unity_tool_ui_send_update_finish (UnityTesterUnityToolUi* self,
                                                    GAsyncResult* _res_,
                                                    GHashTable* * reply,
                                                    GError** error);
static gboolean unity_tester_unity_tool_ui_send_update_co (UnityTesterUnityToolUiSendUpdateData* _data_);
static void unity_tester_unity_tool_ui_activate_preview (UnityTesterUnityToolUi* self,
                                                  const gchar* channel_id,
                                                  GVariant** result_arr,
                                                  int result_arr_length1);
static Block11Data* block11_data_ref (Block11Data* _data11_);
static void _vala_UnityProtocolActivationReplyRaw_free (UnityProtocolActivationReplyRaw* self);
static void block11_data_unref (void * _userdata_);
static void __lambda14_ (Block11Data* _data11_,
                  GObject* obj,
                  GAsyncResult* res);
static UnityProtocolActivationReplyRaw* _unity_protocol_activation_reply_raw_dup (UnityProtocolActivationReplyRaw* self);
static void unity_tester_unity_tool_ui_handle_activation_reply (UnityTesterUnityToolUi* self,
                                                         UnityProtocolActivationReplyRaw* reply_struct);
static void ___lambda14__gasync_ready_callback (GObject* source_object,
                                         GAsyncResult* res,
                                         gpointer self);
static void unity_tester_unity_tool_ui_update_next_prev_buttons (UnityTesterUnityToolUi* self,
                                                          GtkTreeModel* model,
                                                          GtkTreeIter* cur_iter);
void unity_tester_unity_tool_ui_on_request_preview (GtkMenuItem* item,
                                                    UnityTesterUnityToolUi* self);
static GtkTreeIter* _gtk_tree_iter_dup (GtkTreeIter* self);
static GVariant** unity_tester_unity_tool_ui_get_selected_result_variant (UnityTesterUnityToolUi* self,
                                                                   GtkTreeSelection* selection,
                                                                   int* result_length1);
void unity_tester_unity_tool_ui_on_prev_preview_clicked (GtkButton* button,
                                                         UnityTesterUnityToolUi* self);
void unity_tester_unity_tool_ui_on_next_preview_clicked (GtkMenuItem* item,
                                                         UnityTesterUnityToolUi* self);
void unity_tester_unity_tool_ui_on_activate_result (GtkMenuItem* item,
                                                    UnityTesterUnityToolUi* self);
static Block12Data* block12_data_ref (Block12Data* _data12_);
static void block12_data_unref (void * _userdata_);
static void __lambda18_ (Block12Data* _data12_,
                  GObject* obj,
                  GAsyncResult* res);
static void ___lambda18__gasync_ready_callback (GObject* source_object,
                                         GAsyncResult* res,
                                         gpointer self);
static GVariant* _variant_new4 (const gchar* value);
static GVariant* _variant_new5 (const gchar* value);
static GVariant* _variant_new6 (guint value);
static GVariant* _variant_new7 (guint value);
static GVariant* _variant_new8 (const gchar* value);
static GVariant* _variant_new9 (const gchar* value);
static GVariant* _variant_new10 (const gchar* value);
static GVariant* _variant_new11 (const gchar* value);
static void unity_tester_unity_tool_ui_handle_preview (UnityTesterUnityToolUi* self,
                                                GVariant* preview_var);
UnityTesterPreviewRenderer* unity_tester_preview_renderer_create (UnityProtocolPreview* preview,
                                                                  const gchar* scope_uri);
static void unity_tester_unity_tool_ui_update_preview (UnityTesterUnityToolUi* self);
static void unity_tester_unity_tool_ui_on_preview_action_clicked (UnityTesterUnityToolUi* self,
                                                           UnityTesterPreviewRenderer* renderer,
                                                           const gchar* action_id);
static void _unity_tester_unity_tool_ui_on_preview_action_clicked_unity_tester_preview_renderer_preview_action_clicked (UnityTesterPreviewRenderer* _sender,
                                                                                                                 const gchar* action_id,
                                                                                                                 gpointer self);
static void unity_tester_unity_tool_ui_on_preview_closed_clicked (UnityTesterUnityToolUi* self,
                                                           UnityTesterPreviewRenderer* renderer);
static void _unity_tester_unity_tool_ui_on_preview_closed_clicked_unity_tester_preview_renderer_preview_closed_clicked (UnityTesterPreviewRenderer* _sender,
                                                                                                                 gpointer self);
GType unity_tester_grid_renderer_get_type (void) G_GNUC_CONST;
GType unity_tester_series_preview_renderer_get_type (void) G_GNUC_CONST;
static void unity_tester_unity_tool_ui_on_change_selected_series_item_clicked (UnityTesterUnityToolUi* self,
                                                                        UnityTesterSeriesPreviewRenderer* renderer,
                                                                        const gchar* uri,
                                                                        gint index);
static void _unity_tester_unity_tool_ui_on_change_selected_series_item_clicked_unity_tester_series_preview_renderer_change_selected_series_item_clicked (UnityTesterSeriesPreviewRenderer* _sender,
                                                                                                                                                  const gchar* uri,
                                                                                                                                                  gint index,
                                                                                                                                                  gpointer self);
GType unity_tester_music_preview_renderer_get_type (void) G_GNUC_CONST;
static void unity_tester_unity_tool_ui_on_play_music_track_clicked (UnityTesterUnityToolUi* self,
                                                             UnityTesterMusicPreviewRenderer* renderer,
                                                             const gchar* uri);
static void _unity_tester_unity_tool_ui_on_play_music_track_clicked_unity_tester_music_preview_renderer_play_music_track_clicked (UnityTesterMusicPreviewRenderer* _sender,
                                                                                                                           const gchar* uri,
                                                                                                                           gpointer self);
static void unity_tester_unity_tool_ui_on_pause_music_track_clicked (UnityTesterUnityToolUi* self,
                                                              UnityTesterMusicPreviewRenderer* renderer,
                                                              const gchar* uri);
static void _unity_tester_unity_tool_ui_on_pause_music_track_clicked_unity_tester_music_preview_renderer_pause_music_track_clicked (UnityTesterMusicPreviewRenderer* _sender,
                                                                                                                             const gchar* uri,
                                                                                                                             gpointer self);
GtkWidget* unity_tester_preview_renderer_get_widget (UnityTesterPreviewRenderer* self);
GtkWidget* unity_tester_preview_renderer_get_buttons (UnityTesterPreviewRenderer* self);
GtkWidget* unity_tester_preview_renderer_get_extra_buttons (UnityTesterPreviewRenderer* self);
static void __lambda7_ (UnityTesterUnityToolUi* self,
                 GtkWidget* obj);
static void ___lambda7__gtk_callback (GtkWidget* widget,
                               gpointer self);
static void __lambda8_ (UnityTesterUnityToolUi* self,
                 GtkWidget* btn);
static void ___lambda8__gtk_callback (GtkWidget* widget,
                               gpointer self);
static void __lambda9_ (UnityTesterUnityToolUi* self,
                 GtkWidget* btn);
static void ___lambda9__gtk_callback (GtkWidget* widget,
                               gpointer self);
UnityProtocolPreview* unity_tester_preview_renderer_get_preview (UnityTesterPreviewRenderer* self);
static void unity_tester_unity_tool_ui_handle_preview_signals (UnityTesterUnityToolUi* self,
                                                        GHashTable* props);
static Block13Data* block13_data_ref (Block13Data* _data13_);
static void block13_data_unref (void * _userdata_);
static GVariant* _variant_new12 (const gchar* value);
static void __lambda15_ (Block13Data* _data13_,
                  GObject* obj,
                  GAsyncResult* res);
static void ___lambda15__gasync_ready_callback (GObject* source_object,
                                         GAsyncResult* res,
                                         gpointer self);
static Block14Data* block14_data_ref (Block14Data* _data14_);
static void block14_data_unref (void * _userdata_);
static void __lambda16_ (Block14Data* _data14_,
                  GObject* obj,
                  GAsyncResult* res);
static void ___lambda16__gasync_ready_callback (GObject* source_object,
                                         GAsyncResult* res,
                                         gpointer self);
static Block15Data* block15_data_ref (Block15Data* _data15_);
static void block15_data_unref (void * _userdata_);
static void __lambda17_ (Block15Data* _data15_,
                  GObject* obj,
                  GAsyncResult* res);
void unity_tester_series_preview_renderer_update_child_preview (UnityTesterSeriesPreviewRenderer* self,
                                                                UnityProtocolPreview* child_preview);
static void ___lambda17__gasync_ready_callback (GObject* source_object,
                                         GAsyncResult* res,
                                         gpointer self);
void unity_tester_unity_tool_ui_on_results_popup_request (GtkWidget* widget,
                                                          UnityTesterUnityToolUi* self);
gboolean unity_tester_unity_tool_ui_on_results_right_click (GtkWidget* widget,
                                                            GdkEventButton* event,
                                                            UnityTesterUnityToolUi* self);
static void unity_tester_unity_tool_ui_finalize (GObject * obj);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


UnityTesterUnityToolUi*
unity_tester_unity_tool_ui_construct (GType object_type)
{
	UnityTesterUnityToolUi * self = NULL;
	self = (UnityTesterUnityToolUi*) g_object_new (object_type, NULL);
	return self;
}


UnityTesterUnityToolUi*
unity_tester_unity_tool_ui_new (void)
{
	return unity_tester_unity_tool_ui_construct (UNITY_TESTER_TYPE_UNITY_TOOL_UI);
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
_gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                   gpointer self)
{
	gtk_main_quit ();
}


gboolean
unity_tester_unity_tool_ui_init_gui (UnityTesterUnityToolUi* self)
{
	gboolean result = FALSE;
	GtkBuilder* builder = NULL;
	GtkBuilder* _tmp0_;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = gtk_builder_new ();
	builder = _tmp0_;
	{
		GtkBuilder* _tmp1_;
		GtkBuilder* _tmp2_;
		GtkBuilder* _tmp3_;
		GObject* _tmp4_;
		GtkSpinner* _tmp5_;
		GtkWindow* window = NULL;
		GtkBuilder* _tmp6_;
		GObject* _tmp7_;
		GtkWindow* _tmp8_;
		GtkWindow* _tmp9_;
		GtkWindow* _tmp10_;
		GtkBuilder* _tmp11_;
		GObject* _tmp12_;
		GtkListStore* _tmp13_;
		GtkBuilder* _tmp14_;
		GObject* _tmp15_;
		GtkListStore* _tmp16_;
		GtkBuilder* _tmp17_;
		GObject* _tmp18_;
		GtkListStore* _tmp19_;
		GtkBuilder* _tmp20_;
		GObject* _tmp21_;
		GtkNotebook* _tmp22_;
		GtkBuilder* _tmp23_;
		GObject* _tmp24_;
		GtkEntry* _tmp25_;
		GtkBuilder* _tmp26_;
		GObject* _tmp27_;
		GtkRadioButton* _tmp28_;
		GtkBuilder* _tmp29_;
		GObject* _tmp30_;
		GtkButton* _tmp31_;
		GtkBuilder* _tmp32_;
		GObject* _tmp33_;
		GtkButton* _tmp34_;
		GtkBuilder* _tmp35_;
		GObject* _tmp36_;
		GtkButton* _tmp37_;
		GtkBuilder* _tmp38_;
		GObject* _tmp39_;
		GtkButton* _tmp40_;
		GtkBuilder* _tmp41_;
		GObject* _tmp42_;
		GtkStatusbar* _tmp43_;
		GtkBuilder* _tmp44_;
		GObject* _tmp45_;
		GtkTextBuffer* _tmp46_;
		GtkBuilder* _tmp47_;
		GObject* _tmp48_;
		GtkTextBuffer* _tmp49_;
		GtkBuilder* _tmp50_;
		GObject* _tmp51_;
		GtkAlignment* _tmp52_;
		GtkBuilder* _tmp53_;
		GObject* _tmp54_;
		GtkAlignment* _tmp55_;
		GtkBuilder* _tmp56_;
		GObject* _tmp57_;
		GtkViewport* _tmp58_;
		GtkViewport* _tmp59_;
		GtkBuilder* _tmp60_;
		GObject* _tmp61_;
		GtkTreeView* _tmp62_;
		GtkBuilder* _tmp63_;
		GObject* _tmp64_;
		GtkTreeSelection* _tmp65_;
		GtkBuilder* _tmp66_;
		GObject* _tmp67_;
		GtkMenu* _tmp68_;
		GtkStatusbar* _tmp69_;
		GtkStatusbar* _tmp70_;
		_tmp1_ = builder;
		gtk_builder_add_from_resource (_tmp1_, "/com/canonical/Unity/unity-tool/unity-tool.ui", &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch11_g_error;
		}
		_tmp2_ = builder;
		gtk_builder_connect_signals (_tmp2_, self);
		_tmp3_ = builder;
		_tmp4_ = gtk_builder_get_object (_tmp3_, "spinner");
		_tmp5_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp4_, gtk_spinner_get_type ()) ? ((GtkSpinner*) _tmp4_) : NULL);
		_g_object_unref0 (self->priv->spinner);
		self->priv->spinner = _tmp5_;
		_tmp6_ = builder;
		_tmp7_ = gtk_builder_get_object (_tmp6_, "window");
		_tmp8_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp7_, gtk_window_get_type ()) ? ((GtkWindow*) _tmp7_) : NULL);
		window = _tmp8_;
		_tmp9_ = window;
		g_signal_connect ((GtkWidget*) _tmp9_, "destroy", (GCallback) _gtk_main_quit_gtk_widget_destroy, NULL);
		_tmp10_ = window;
		gtk_widget_show_all ((GtkWidget*) _tmp10_);
		_tmp11_ = builder;
		_tmp12_ = gtk_builder_get_object (_tmp11_, "results_model");
		_tmp13_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp12_, gtk_list_store_get_type ()) ? ((GtkListStore*) _tmp12_) : NULL);
		_g_object_unref0 (self->priv->uimodel);
		self->priv->uimodel = _tmp13_;
		_tmp14_ = builder;
		_tmp15_ = gtk_builder_get_object (_tmp14_, "filters_model");
		_tmp16_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp15_, gtk_list_store_get_type ()) ? ((GtkListStore*) _tmp15_) : NULL);
		_g_object_unref0 (self->priv->ui_filter_model);
		self->priv->ui_filter_model = _tmp16_;
		_tmp17_ = builder;
		_tmp18_ = gtk_builder_get_object (_tmp17_, "categories_model");
		_tmp19_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp18_, gtk_list_store_get_type ()) ? ((GtkListStore*) _tmp18_) : NULL);
		_g_object_unref0 (self->priv->ui_cat_model);
		self->priv->ui_cat_model = _tmp19_;
		_tmp20_ = builder;
		_tmp21_ = gtk_builder_get_object (_tmp20_, "notebook");
		_tmp22_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp21_, gtk_notebook_get_type ()) ? ((GtkNotebook*) _tmp21_) : NULL);
		_g_object_unref0 (self->priv->notebook);
		self->priv->notebook = _tmp22_;
		_tmp23_ = builder;
		_tmp24_ = gtk_builder_get_object (_tmp23_, "search_entry");
		_tmp25_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp24_, gtk_entry_get_type ()) ? ((GtkEntry*) _tmp24_) : NULL);
		_g_object_unref0 (self->priv->search_entry);
		self->priv->search_entry = _tmp25_;
		_tmp26_ = builder;
		_tmp27_ = gtk_builder_get_object (_tmp26_, "search_type_global");
		_tmp28_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp27_, gtk_radio_button_get_type ()) ? ((GtkRadioButton*) _tmp27_) : NULL);
		_g_object_unref0 (self->priv->search_type_global_rbutton);
		self->priv->search_type_global_rbutton = _tmp28_;
		_tmp29_ = builder;
		_tmp30_ = gtk_builder_get_object (_tmp29_, "search_button");
		_tmp31_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp30_, gtk_button_get_type ()) ? ((GtkButton*) _tmp30_) : NULL);
		_g_object_unref0 (self->priv->search_button);
		self->priv->search_button = _tmp31_;
		_tmp32_ = builder;
		_tmp33_ = gtk_builder_get_object (_tmp32_, "results_button");
		_tmp34_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp33_, gtk_button_get_type ()) ? ((GtkButton*) _tmp33_) : NULL);
		_g_object_unref0 (self->priv->results_button);
		self->priv->results_button = _tmp34_;
		_tmp35_ = builder;
		_tmp36_ = gtk_builder_get_object (_tmp35_, "prev_preview_btn");
		_tmp37_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp36_, gtk_button_get_type ()) ? ((GtkButton*) _tmp36_) : NULL);
		_g_object_unref0 (self->priv->prev_preview_button);
		self->priv->prev_preview_button = _tmp37_;
		_tmp38_ = builder;
		_tmp39_ = gtk_builder_get_object (_tmp38_, "next_preview_btn");
		_tmp40_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp39_, gtk_button_get_type ()) ? ((GtkButton*) _tmp39_) : NULL);
		_g_object_unref0 (self->priv->next_preview_button);
		self->priv->next_preview_button = _tmp40_;
		_tmp41_ = builder;
		_tmp42_ = gtk_builder_get_object (_tmp41_, "statusbar");
		_tmp43_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp42_, gtk_statusbar_get_type ()) ? ((GtkStatusbar*) _tmp42_) : NULL);
		_g_object_unref0 (self->priv->statusbar);
		self->priv->statusbar = _tmp43_;
		_tmp44_ = builder;
		_tmp45_ = gtk_builder_get_object (_tmp44_, "log_buffer");
		_tmp46_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp45_, gtk_text_buffer_get_type ()) ? ((GtkTextBuffer*) _tmp45_) : NULL);
		_g_object_unref0 (self->priv->log_buffer);
		self->priv->log_buffer = _tmp46_;
		_tmp47_ = builder;
		_tmp48_ = gtk_builder_get_object (_tmp47_, "preview_raw_data");
		_tmp49_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp48_, gtk_text_buffer_get_type ()) ? ((GtkTextBuffer*) _tmp48_) : NULL);
		_g_object_unref0 (self->priv->preview_raw_data);
		self->priv->preview_raw_data = _tmp49_;
		_tmp50_ = builder;
		_tmp51_ = gtk_builder_get_object (_tmp50_, "preview_buttons_container");
		_tmp52_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp51_, gtk_alignment_get_type ()) ? ((GtkAlignment*) _tmp51_) : NULL);
		_g_object_unref0 (self->priv->preview_buttons_container);
		self->priv->preview_buttons_container = _tmp52_;
		_tmp53_ = builder;
		_tmp54_ = gtk_builder_get_object (_tmp53_, "preview_extra_buttons_container");
		_tmp55_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp54_, gtk_alignment_get_type ()) ? ((GtkAlignment*) _tmp54_) : NULL);
		_g_object_unref0 (self->priv->preview_extra_buttons_container);
		self->priv->preview_extra_buttons_container = _tmp55_;
		_tmp56_ = builder;
		_tmp57_ = gtk_builder_get_object (_tmp56_, "preview_viewport");
		_tmp58_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp57_, gtk_viewport_get_type ()) ? ((GtkViewport*) _tmp57_) : NULL);
		_g_object_unref0 (self->priv->preview_viewport);
		self->priv->preview_viewport = _tmp58_;
		_tmp59_ = self->priv->preview_viewport;
		_vala_assert (_tmp59_ != NULL, "preview_viewport != null");
		_tmp60_ = builder;
		_tmp61_ = gtk_builder_get_object (_tmp60_, "results_view");
		_tmp62_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp61_, gtk_tree_view_get_type ()) ? ((GtkTreeView*) _tmp61_) : NULL);
		_g_object_unref0 (self->priv->results_view);
		self->priv->results_view = _tmp62_;
		_tmp63_ = builder;
		_tmp64_ = gtk_builder_get_object (_tmp63_, "results_view_selection");
		_tmp65_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp64_, gtk_tree_selection_get_type ()) ? ((GtkTreeSelection*) _tmp64_) : NULL);
		_g_object_unref0 (self->priv->results_view_selection);
		self->priv->results_view_selection = _tmp65_;
		_tmp66_ = builder;
		_tmp67_ = gtk_builder_get_object (_tmp66_, "results_popup_menu");
		_tmp68_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp67_, gtk_menu_get_type ()) ? ((GtkMenu*) _tmp67_) : NULL);
		_g_object_unref0 (self->priv->results_popup_menu);
		self->priv->results_popup_menu = _tmp68_;
		_tmp69_ = self->priv->statusbar;
		self->priv->statusbar_info_ctx = gtk_statusbar_get_context_id (_tmp69_, "Info");
		_tmp70_ = self->priv->statusbar;
		self->priv->statusbar_error_ctx = gtk_statusbar_get_context_id (_tmp70_, "Error");
		unity_tester_unity_tool_ui_show_no_preview (self);
		unity_tester_unity_tool_ui_show_connect_dialog (self);
		_g_object_unref0 (window);
	}
	goto __finally11;
	__catch11_g_error:
	{
		GError* e = NULL;
		GError* _tmp71_;
		const gchar* _tmp72_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp71_ = e;
		_tmp72_ = _tmp71_->message;
		unity_tester_unity_tool_ui_ui_load_error (self, _tmp72_);
		result = FALSE;
		_g_error_free0 (e);
		_g_object_unref0 (builder);
		return result;
	}
	__finally11:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		gboolean _tmp73_ = FALSE;
		_g_object_unref0 (builder);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return _tmp73_;
	}
	result = TRUE;
	_g_object_unref0 (builder);
	return result;
}


static void
unity_tester_unity_tool_ui_ui_load_error (UnityTesterUnityToolUi* self,
                                          const gchar* message)
{
	GtkDialog* dlg = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	GtkMessageDialog* _tmp2_;
	GtkDialog* _tmp3_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (message != NULL);
	_tmp0_ = g_strdup_printf ("Error loading UI file:\n%s", message);
	_tmp1_ = _tmp0_;
	_tmp2_ = (GtkMessageDialog*) gtk_message_dialog_new (NULL, GTK_DIALOG_DESTROY_WITH_PARENT | GTK_DIALOG_MODAL, GTK_MESSAGE_ERROR, GTK_BUTTONS_CLOSE, "%s", _tmp1_);
	g_object_ref_sink (_tmp2_);
	_tmp3_ = (GtkDialog*) _tmp2_;
	_g_free0 (_tmp1_);
	dlg = _tmp3_;
	gtk_window_set_title ((GtkWindow*) dlg, "Error creating UI");
	gtk_dialog_run (dlg);
	gtk_widget_destroy ((GtkWidget*) dlg);
	_g_object_unref0 (dlg);
}


static Block8Data*
block8_data_ref (Block8Data* _data8_)
{
	g_atomic_int_inc (&_data8_->_ref_count_);
	return _data8_;
}


static void
block8_data_unref (void * _userdata_)
{
	Block8Data* _data8_;
	_data8_ = (Block8Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data8_->_ref_count_)) {
		UnityTesterUnityToolUi* self;
		self = _data8_->self;
		_unity_tester_dbus_lens_util_unref0 (_data8_->c);
		_g_object_unref0 (self);
		g_slice_free (Block8Data, _data8_);
	}
}


static void
__lambda6_ (Block8Data* _data8_,
            GObject* obj,
            GAsyncResult* res)
{
	UnityTesterUnityToolUi* self;
	GError * _inner_error_ = NULL;
	self = _data8_->self;
	g_return_if_fail (res != NULL);
	{
		GList* results = NULL;
		GList* _tmp0_;
		GtkSpinner* _tmp10_;
		_tmp0_ = unity_tester_dbus_lens_util_findLenses_finish (_data8_->c, res, &_inner_error_);
		results = _tmp0_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch12_g_error;
		}
		{
			GList* addr_collection = NULL;
			GList* addr_it = NULL;
			addr_collection = results;
			for (addr_it = addr_collection; addr_it != NULL; addr_it = addr_it->next) {
				UnityTesterDBusLensUtilDBusObjectAddress _tmp1_ = {0};
				UnityTesterDBusLensUtilDBusObjectAddress addr = {0};
				unity_tester_dbus_lens_util_dbus_object_address_copy ((UnityTesterDBusLensUtilDBusObjectAddress*) addr_it->data, &_tmp1_);
				addr = _tmp1_;
				{
					GtkListStore* _tmp2_;
					GtkTreeIter _tmp3_ = {0};
					GtkListStore* _tmp4_;
					GtkTreeIter _tmp5_;
					UnityTesterDBusLensUtilDBusObjectAddress _tmp6_;
					const gchar* _tmp7_;
					UnityTesterDBusLensUtilDBusObjectAddress _tmp8_;
					const gchar* _tmp9_;
					_tmp2_ = self->priv->scope_list_model;
					gtk_list_store_append (_tmp2_, &_tmp3_);
					_data8_->iter = _tmp3_;
					_tmp4_ = self->priv->scope_list_model;
					_tmp5_ = _data8_->iter;
					_tmp6_ = addr;
					_tmp7_ = _tmp6_.dbus_name;
					_tmp8_ = addr;
					_tmp9_ = _tmp8_.dbus_path;
					gtk_list_store_set (_tmp4_, &_tmp5_, 0, _tmp7_, 1, _tmp9_, -1, -1);
					unity_tester_dbus_lens_util_dbus_object_address_destroy (&addr);
				}
			}
		}
		_tmp10_ = self->priv->scope_discovery_spinner;
		gtk_spinner_stop (_tmp10_);
	}
	goto __finally12;
	__catch12_g_error:
	{
		GError* e = NULL;
		FILE* _tmp11_;
		GError* _tmp12_;
		const gchar* _tmp13_;
		GtkSpinner* _tmp14_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp11_ = stderr;
		_tmp12_ = e;
		_tmp13_ = _tmp12_->message;
		fprintf (_tmp11_, "DBus Lens auto-discovery failed %s\n", _tmp13_);
		_tmp14_ = self->priv->scope_discovery_spinner;
		gtk_spinner_stop (_tmp14_);
		_g_error_free0 (e);
	}
	__finally12:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
}


static void
___lambda6__gasync_ready_callback (GObject* source_object,
                                   GAsyncResult* res,
                                   gpointer self)
{
	__lambda6_ (self, source_object, res);
	block8_data_unref (self);
}


static void
unity_tester_unity_tool_ui_discover_scope (UnityTesterUnityToolUi* self)
{
	Block8Data* _data8_;
	GtkSpinner* _tmp0_;
	GtkListStore* _tmp1_;
	GtkTreeIter _tmp2_ = {0};
	GtkListStore* _tmp3_;
	GtkTreeIter _tmp4_;
	UnityTesterDBusLensUtil* _tmp5_;
	g_return_if_fail (self != NULL);
	_data8_ = g_slice_new0 (Block8Data);
	_data8_->_ref_count_ = 1;
	_data8_->self = g_object_ref (self);
	_tmp0_ = self->priv->scope_discovery_spinner;
	gtk_spinner_start (_tmp0_);
	_tmp1_ = self->priv->scope_list_model;
	gtk_list_store_append (_tmp1_, &_tmp2_);
	_data8_->iter = _tmp2_;
	_tmp3_ = self->priv->scope_list_model;
	_tmp4_ = _data8_->iter;
	gtk_list_store_set (_tmp3_, &_tmp4_, 0, "", 1, "", -1, -1);
	_tmp5_ = unity_tester_dbus_lens_util_new ();
	_data8_->c = _tmp5_;
	unity_tester_dbus_lens_util_findLenses (_data8_->c, ___lambda6__gasync_ready_callback, block8_data_ref (_data8_));
	block8_data_unref (_data8_);
	_data8_ = NULL;
}


void
unity_tester_unity_tool_ui_on_scope_combobox_clicked (GtkMenuItem* item,
                                                      UnityTesterUnityToolUi* self)
{
	GtkTreeIter iter = {0};
	GtkComboBox* _tmp0_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (item != NULL);
	_tmp0_ = self->priv->scope_list_combobox;
	if (gtk_combo_box_get_active (_tmp0_) > 0) {
		GtkComboBox* _tmp1_;
		GtkTreeIter _tmp2_ = {0};
		gboolean _tmp3_;
		_tmp1_ = self->priv->scope_list_combobox;
		_tmp3_ = gtk_combo_box_get_active_iter (_tmp1_, &_tmp2_);
		iter = _tmp2_;
		if (_tmp3_) {
			GValue val = {0};
			GtkListStore* _tmp4_;
			GtkTreeIter _tmp5_;
			GValue _tmp6_ = {0};
			GtkEntry* _tmp7_;
			const gchar* _tmp8_;
			GtkListStore* _tmp9_;
			GtkTreeIter _tmp10_;
			GValue _tmp11_ = {0};
			GtkEntry* _tmp12_;
			const gchar* _tmp13_;
			_tmp4_ = self->priv->scope_list_model;
			_tmp5_ = iter;
			gtk_tree_model_get_value ((GtkTreeModel*) _tmp4_, &_tmp5_, 0, &_tmp6_);
			G_IS_VALUE (&val) ? (g_value_unset (&val), NULL) : NULL;
			val = _tmp6_;
			_tmp7_ = self->priv->dbus_name_entry;
			_tmp8_ = g_value_get_string (&val);
			gtk_entry_set_text (_tmp7_, _tmp8_);
			_tmp9_ = self->priv->scope_list_model;
			_tmp10_ = iter;
			gtk_tree_model_get_value ((GtkTreeModel*) _tmp9_, &_tmp10_, 1, &_tmp11_);
			G_IS_VALUE (&val) ? (g_value_unset (&val), NULL) : NULL;
			val = _tmp11_;
			_tmp12_ = self->priv->dbus_path_entry;
			_tmp13_ = g_value_get_string (&val);
			gtk_entry_set_text (_tmp12_, _tmp13_);
			G_IS_VALUE (&val) ? (g_value_unset (&val), NULL) : NULL;
		}
	}
}


void
unity_tester_unity_tool_ui_on_connect_clicked (GtkMenuItem* item,
                                               UnityTesterUnityToolUi* self)
{
	g_return_if_fail (self != NULL);
	g_return_if_fail (item != NULL);
	unity_tester_unity_tool_ui_show_connect_dialog (self);
}


/**
     * Handler for Edit > Clear Log menu item.
     */
void
unity_tester_unity_tool_ui_on_clear_log_clicked (GtkMenuItem* item,
                                                 UnityTesterUnityToolUi* self)
{
	GtkTextIter start = {0};
	GtkTextIter end = {0};
	GtkTextBuffer* _tmp0_;
	GtkTextIter _tmp1_ = {0};
	GtkTextBuffer* _tmp2_;
	GtkTextIter _tmp3_ = {0};
	GtkTextBuffer* _tmp4_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (item != NULL);
	_tmp0_ = self->priv->log_buffer;
	gtk_text_buffer_get_start_iter (_tmp0_, &_tmp1_);
	start = _tmp1_;
	_tmp2_ = self->priv->log_buffer;
	gtk_text_buffer_get_end_iter (_tmp2_, &_tmp3_);
	end = _tmp3_;
	_tmp4_ = self->priv->log_buffer;
	gtk_text_buffer_delete (_tmp4_, &start, &end);
}


static void
unity_tester_unity_tool_ui_show_connect_dialog (UnityTesterUnityToolUi* self)
{
	GtkBuilder* builder = NULL;
	GtkBuilder* _tmp0_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	_tmp0_ = gtk_builder_new ();
	builder = _tmp0_;
	{
		GObject* _tmp1_;
		GtkSpinner* _tmp2_;
		GObject* _tmp3_;
		GtkListStore* _tmp4_;
		GObject* _tmp5_;
		GtkComboBox* _tmp6_;
		GObject* _tmp7_;
		GtkEntry* _tmp8_;
		GObject* _tmp9_;
		GtkEntry* _tmp10_;
		GObject* _tmp11_;
		GtkDialog* _tmp12_;
		gboolean _tmp13_ = FALSE;
		gboolean _tmp14_ = FALSE;
		gboolean _tmp15_ = FALSE;
		const gchar* _tmp16_;
		GtkDialog* _tmp24_;
		gtk_builder_add_from_resource (builder, "/com/canonical/Unity/unity-tool/dbus-scope-connect.ui", &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch13_g_error;
		}
		gtk_builder_connect_signals (builder, self);
		_tmp1_ = gtk_builder_get_object (builder, "scope_discovery_spinner");
		_tmp2_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp1_, gtk_spinner_get_type ()) ? ((GtkSpinner*) _tmp1_) : NULL);
		_g_object_unref0 (self->priv->scope_discovery_spinner);
		self->priv->scope_discovery_spinner = _tmp2_;
		_tmp3_ = gtk_builder_get_object (builder, "scope_list_model");
		_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, gtk_list_store_get_type ()) ? ((GtkListStore*) _tmp3_) : NULL);
		_g_object_unref0 (self->priv->scope_list_model);
		self->priv->scope_list_model = _tmp4_;
		_tmp5_ = gtk_builder_get_object (builder, "scope_list_combobox");
		_tmp6_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp5_, gtk_combo_box_get_type ()) ? ((GtkComboBox*) _tmp5_) : NULL);
		_g_object_unref0 (self->priv->scope_list_combobox);
		self->priv->scope_list_combobox = _tmp6_;
		_tmp7_ = gtk_builder_get_object (builder, "dbus_name_entry");
		_tmp8_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp7_, gtk_entry_get_type ()) ? ((GtkEntry*) _tmp7_) : NULL);
		_g_object_unref0 (self->priv->dbus_name_entry);
		self->priv->dbus_name_entry = _tmp8_;
		_tmp9_ = gtk_builder_get_object (builder, "dbus_path_entry");
		_tmp10_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp9_, gtk_entry_get_type ()) ? ((GtkEntry*) _tmp9_) : NULL);
		_g_object_unref0 (self->priv->dbus_path_entry);
		self->priv->dbus_path_entry = _tmp10_;
		_tmp11_ = gtk_builder_get_object (builder, "scope_connect_dialog");
		_tmp12_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp11_, gtk_dialog_get_type ()) ? ((GtkDialog*) _tmp11_) : NULL);
		_g_object_unref0 (self->priv->scope_connect_dlg);
		self->priv->scope_connect_dlg = _tmp12_;
		unity_tester_unity_tool_ui_discover_scope (self);
		_tmp16_ = unity_tester_options_scope_dbus_path;
		if (_tmp16_ != NULL) {
			const gchar* _tmp17_;
			_tmp17_ = unity_tester_options_scope_dbus_path;
			_tmp15_ = g_strcmp0 (_tmp17_, "") != 0;
		} else {
			_tmp15_ = FALSE;
		}
		if (_tmp15_) {
			const gchar* _tmp18_;
			_tmp18_ = unity_tester_options_scope_dbus_name;
			_tmp14_ = _tmp18_ != NULL;
		} else {
			_tmp14_ = FALSE;
		}
		if (_tmp14_) {
			const gchar* _tmp19_;
			_tmp19_ = unity_tester_options_scope_dbus_name;
			_tmp13_ = g_strcmp0 (_tmp19_, "") != 0;
		} else {
			_tmp13_ = FALSE;
		}
		if (_tmp13_) {
			GtkEntry* _tmp20_;
			const gchar* _tmp21_;
			GtkEntry* _tmp22_;
			const gchar* _tmp23_;
			_tmp20_ = self->priv->dbus_name_entry;
			_tmp21_ = unity_tester_options_scope_dbus_name;
			gtk_entry_set_text (_tmp20_, _tmp21_);
			_tmp22_ = self->priv->dbus_path_entry;
			_tmp23_ = unity_tester_options_scope_dbus_path;
			gtk_entry_set_text (_tmp22_, _tmp23_);
		}
		_tmp24_ = self->priv->scope_connect_dlg;
		gtk_widget_show_all ((GtkWidget*) _tmp24_);
	}
	goto __finally13;
	__catch13_g_error:
	{
		GError* e = NULL;
		GError* _tmp25_;
		const gchar* _tmp26_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp25_ = e;
		_tmp26_ = _tmp25_->message;
		unity_tester_unity_tool_ui_ui_load_error (self, _tmp26_);
		_g_error_free0 (e);
	}
	__finally13:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		_g_object_unref0 (builder);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	_g_object_unref0 (builder);
}


static void
unity_tester_unity_tool_ui_results_row_added_cb (UnityTesterUnityToolUi* self,
                                                 DeeModel* model,
                                                 DeeModelIter* iter)
{
	GVariant** row = NULL;
	GVariant** _tmp0_;
	GVariant** _tmp1_;
	gint row_length1;
	gint _row_size_;
	GtkTreeIter uiiter = {0};
	GtkListStore* _tmp2_;
	GtkTreeIter _tmp3_ = {0};
	GtkListStore* _tmp4_;
	GtkTreeIter _tmp5_;
	GVariant* _tmp6_;
	const gchar* _tmp7_;
	GVariant* _tmp8_;
	const gchar* _tmp9_;
	GVariant* _tmp10_;
	GVariant* _tmp11_;
	GVariant* _tmp12_;
	const gchar* _tmp13_;
	GVariant* _tmp14_;
	const gchar* _tmp15_;
	GVariant* _tmp16_;
	const gchar* _tmp17_;
	GVariant* _tmp18_;
	const gchar* _tmp19_;
	GVariant* _tmp20_;
	gchar* _tmp21_;
	gchar* _tmp22_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (model != NULL);
	g_return_if_fail (iter != NULL);
	_tmp1_ = _tmp0_ = dee_model_get_row (model, iter, NULL);
	row = _tmp1_;
	row_length1 = _vala_array_length (_tmp0_);
	_row_size_ = row_length1;
	_tmp2_ = self->priv->uimodel;
	gtk_list_store_append (_tmp2_, &_tmp3_);
	uiiter = _tmp3_;
	_tmp4_ = self->priv->uimodel;
	_tmp5_ = uiiter;
	_tmp6_ = row[0];
	_tmp7_ = g_variant_get_string (_tmp6_, NULL);
	_tmp8_ = row[1];
	_tmp9_ = g_variant_get_string (_tmp8_, NULL);
	_tmp10_ = row[2];
	_tmp11_ = row[3];
	_tmp12_ = row[4];
	_tmp13_ = g_variant_get_string (_tmp12_, NULL);
	_tmp14_ = row[5];
	_tmp15_ = g_variant_get_string (_tmp14_, NULL);
	_tmp16_ = row[6];
	_tmp17_ = g_variant_get_string (_tmp16_, NULL);
	_tmp18_ = row[7];
	_tmp19_ = g_variant_get_string (_tmp18_, NULL);
	_tmp20_ = row[8];
	_tmp21_ = g_variant_print (_tmp20_, TRUE);
	_tmp22_ = _tmp21_;
	gtk_list_store_set (_tmp4_, &_tmp5_, 0, _tmp7_, 1, _tmp9_, 2, g_variant_get_uint32 (_tmp10_), 3, g_variant_get_uint32 (_tmp11_), 4, _tmp13_, 5, _tmp15_, 6, _tmp17_, 7, _tmp19_, 8, _tmp22_, -1, -1);
	_g_free0 (_tmp22_);
	row = (_vala_array_free (row, row_length1, (GDestroyNotify) g_variant_unref), NULL);
}


static void
unity_tester_unity_tool_ui_filters_row_added_cb (UnityTesterUnityToolUi* self,
                                                 DeeModel* model,
                                                 DeeModelIter* iter)
{
	GVariant** row = NULL;
	GVariant** _tmp0_;
	GVariant** _tmp1_;
	gint row_length1;
	gint _row_size_;
	GtkTreeIter uiiter = {0};
	GtkListStore* _tmp2_;
	GtkTreeIter _tmp3_ = {0};
	GtkListStore* _tmp4_;
	GtkTreeIter _tmp5_;
	GVariant* _tmp6_;
	const gchar* _tmp7_;
	GVariant* _tmp8_;
	const gchar* _tmp9_;
	GVariant* _tmp10_;
	const gchar* _tmp11_;
	GVariant* _tmp12_;
	const gchar* _tmp13_;
	GVariant* _tmp14_;
	gchar* _tmp15_;
	gchar* _tmp16_;
	GVariant* _tmp17_;
	GVariant* _tmp18_;
	GVariant* _tmp19_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (model != NULL);
	g_return_if_fail (iter != NULL);
	_tmp1_ = _tmp0_ = dee_model_get_row (model, iter, NULL);
	row = _tmp1_;
	row_length1 = _vala_array_length (_tmp0_);
	_row_size_ = row_length1;
	_tmp2_ = self->priv->ui_filter_model;
	gtk_list_store_append (_tmp2_, &_tmp3_);
	uiiter = _tmp3_;
	_tmp4_ = self->priv->ui_filter_model;
	_tmp5_ = uiiter;
	_tmp6_ = row[0];
	_tmp7_ = g_variant_get_string (_tmp6_, NULL);
	_tmp8_ = row[1];
	_tmp9_ = g_variant_get_string (_tmp8_, NULL);
	_tmp10_ = row[2];
	_tmp11_ = g_variant_get_string (_tmp10_, NULL);
	_tmp12_ = row[3];
	_tmp13_ = g_variant_get_string (_tmp12_, NULL);
	_tmp14_ = row[4];
	_tmp15_ = g_variant_print (_tmp14_, TRUE);
	_tmp16_ = _tmp15_;
	_tmp17_ = row[5];
	_tmp18_ = row[6];
	_tmp19_ = row[7];
	gtk_list_store_set (_tmp4_, &_tmp5_, 0, _tmp7_, 1, _tmp9_, 2, _tmp11_, 3, _tmp13_, 4, _tmp16_, 5, g_variant_get_boolean (_tmp17_), 6, g_variant_get_boolean (_tmp18_), 7, g_variant_get_boolean (_tmp19_), -1, -1);
	_g_free0 (_tmp16_);
	row = (_vala_array_free (row, row_length1, (GDestroyNotify) g_variant_unref), NULL);
}


static void
unity_tester_unity_tool_ui_categories_row_added_cb (UnityTesterUnityToolUi* self,
                                                    DeeModel* model,
                                                    DeeModelIter* iter)
{
	GVariant** row = NULL;
	GVariant** _tmp0_;
	GVariant** _tmp1_;
	gint row_length1;
	gint _row_size_;
	GtkTreeIter uiiter = {0};
	GtkListStore* _tmp2_;
	GtkTreeIter _tmp3_ = {0};
	GtkListStore* _tmp4_;
	GtkTreeIter _tmp5_;
	GVariant* _tmp6_;
	const gchar* _tmp7_;
	GVariant* _tmp8_;
	const gchar* _tmp9_;
	GVariant* _tmp10_;
	const gchar* _tmp11_;
	GVariant* _tmp12_;
	const gchar* _tmp13_;
	GVariant* _tmp14_;
	gchar* _tmp15_;
	gchar* _tmp16_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (model != NULL);
	g_return_if_fail (iter != NULL);
	_tmp1_ = _tmp0_ = dee_model_get_row (model, iter, NULL);
	row = _tmp1_;
	row_length1 = _vala_array_length (_tmp0_);
	_row_size_ = row_length1;
	_tmp2_ = self->priv->ui_cat_model;
	gtk_list_store_append (_tmp2_, &_tmp3_);
	uiiter = _tmp3_;
	_tmp4_ = self->priv->ui_cat_model;
	_tmp5_ = uiiter;
	_tmp6_ = row[0];
	_tmp7_ = g_variant_get_string (_tmp6_, NULL);
	_tmp8_ = row[1];
	_tmp9_ = g_variant_get_string (_tmp8_, NULL);
	_tmp10_ = row[2];
	_tmp11_ = g_variant_get_string (_tmp10_, NULL);
	_tmp12_ = row[3];
	_tmp13_ = g_variant_get_string (_tmp12_, NULL);
	_tmp14_ = row[4];
	_tmp15_ = g_variant_print (_tmp14_, TRUE);
	_tmp16_ = _tmp15_;
	gtk_list_store_set (_tmp4_, &_tmp5_, 0, _tmp7_, 1, _tmp9_, 2, _tmp11_, 3, _tmp13_, 4, _tmp16_, -1, -1);
	_g_free0 (_tmp16_);
	row = (_vala_array_free (row, row_length1, (GDestroyNotify) g_variant_unref), NULL);
}


static void
unity_tester_unity_tool_ui_update_status (UnityTesterUnityToolUi* self)
{
	GtkStatusbar* _tmp0_;
	guint _tmp1_;
	GtkStatusbar* _tmp2_;
	guint _tmp3_;
	DeeSharedModel* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	const gchar* _tmp9_;
	gchar* _tmp10_;
	gchar* _tmp11_;
	gchar* _tmp12_;
	gchar* _tmp13_;
	const gchar* _tmp14_;
	gchar* _tmp15_;
	gchar* _tmp16_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->statusbar;
	_tmp1_ = self->priv->statusbar_info_ctx;
	gtk_statusbar_pop (_tmp0_, _tmp1_);
	_tmp2_ = self->priv->statusbar;
	_tmp3_ = self->priv->statusbar_info_ctx;
	_tmp4_ = self->priv->dee_results_model;
	_tmp5_ = g_strdup_printf ("%u records", dee_model_get_n_rows ((DeeModel*) _tmp4_));
	_tmp6_ = _tmp5_;
	_tmp7_ = g_strconcat (_tmp6_, ", DBus name: ", NULL);
	_tmp8_ = _tmp7_;
	_tmp9_ = unity_tester_options_scope_dbus_name;
	_tmp10_ = g_strconcat (_tmp8_, _tmp9_, NULL);
	_tmp11_ = _tmp10_;
	_tmp12_ = g_strconcat (_tmp11_, " path: ", NULL);
	_tmp13_ = _tmp12_;
	_tmp14_ = unity_tester_options_scope_dbus_path;
	_tmp15_ = g_strconcat (_tmp13_, _tmp14_, NULL);
	_tmp16_ = _tmp15_;
	gtk_statusbar_push (_tmp2_, _tmp3_, _tmp16_);
	_g_free0 (_tmp16_);
	_g_free0 (_tmp13_);
	_g_free0 (_tmp11_);
	_g_free0 (_tmp8_);
	_g_free0 (_tmp6_);
}


static void
unity_tester_unity_tool_ui_model_synchronized_cb (UnityTesterUnityToolUi* self)
{
	GtkSpinner* _tmp0_;
	DeeSharedModel* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->spinner;
	gtk_spinner_stop (_tmp0_);
	unity_tester_unity_tool_ui_update_status (self);
	_tmp1_ = self->priv->dee_results_model;
	_tmp2_ = g_strdup_printf ("Search returned %u records\n", dee_model_get_n_rows ((DeeModel*) _tmp1_));
	_tmp3_ = _tmp2_;
	unity_tester_unity_tool_ui_append_log_message (self, _tmp3_);
	_g_free0 (_tmp3_);
	_g_object_unref0 (self->priv->dee_results_model);
	self->priv->dee_results_model = NULL;
}


static void
unity_tester_unity_tool_ui_filter_model_synchronized_cb (UnityTesterUnityToolUi* self)
{
	g_return_if_fail (self != NULL);
	_g_object_unref0 (self->priv->dee_filters_model);
	self->priv->dee_filters_model = NULL;
}


static void
unity_tester_unity_tool_ui_categories_model_synchronized_cb (UnityTesterUnityToolUi* self)
{
	g_return_if_fail (self != NULL);
	_g_object_unref0 (self->priv->dee_categories_model);
	self->priv->dee_categories_model = NULL;
}


static void
unity_tester_unity_tool_ui_on_scope_service_vanished (UnityTesterUnityToolUi* self,
                                                      GDBusConnection* connection,
                                                      const gchar* name)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	guint _tmp2_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (connection != NULL);
	g_return_if_fail (name != NULL);
	_tmp0_ = g_strdup_printf ("Disconnected from %s", name);
	_tmp1_ = _tmp0_;
	unity_tester_unity_tool_ui_handle_error (self, _tmp1_);
	_g_free0 (_tmp1_);
	_tmp2_ = self->priv->dbus_watcher_id;
	g_bus_unwatch_name (_tmp2_);
	self->priv->dbus_watcher_id = (guint) 0;
	_g_object_unref0 (self->priv->scope_proxy);
	self->priv->scope_proxy = NULL;
	unity_tester_unity_tool_ui_clear_data (self);
	unity_tester_unity_tool_ui_clear_categories_and_filters (self);
	unity_tester_unity_tool_ui_remove_preview (self);
	unity_tester_unity_tool_ui_show_no_preview (self);
	unity_tester_unity_tool_ui_disable_ui_actions_on_error_condition (self);
}


static void
unity_tester_unity_tool_ui_disable_ui_actions_on_error_condition (UnityTesterUnityToolUi* self)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp2_ = FALSE;
	gboolean _tmp3_ = FALSE;
	UnityProtocolScopeService* _tmp4_;
	g_return_if_fail (self != NULL);
	_tmp4_ = self->priv->scope_proxy;
	if (_tmp4_ == NULL) {
		_tmp3_ = TRUE;
	} else {
		const gchar* _tmp5_;
		_tmp5_ = unity_tester_options_scope_dbus_path;
		_tmp3_ = _tmp5_ == NULL;
	}
	if (_tmp3_) {
		_tmp2_ = TRUE;
	} else {
		const gchar* _tmp6_;
		gint _tmp7_;
		gint _tmp8_;
		_tmp6_ = unity_tester_options_scope_dbus_path;
		_tmp7_ = strlen (_tmp6_);
		_tmp8_ = _tmp7_;
		_tmp2_ = _tmp8_ == 0;
	}
	if (_tmp2_) {
		_tmp1_ = TRUE;
	} else {
		const gchar* _tmp9_;
		_tmp9_ = unity_tester_options_scope_dbus_name;
		_tmp1_ = _tmp9_ == NULL;
	}
	if (_tmp1_) {
		_tmp0_ = TRUE;
	} else {
		const gchar* _tmp10_;
		gint _tmp11_;
		gint _tmp12_;
		_tmp10_ = unity_tester_options_scope_dbus_name;
		_tmp11_ = strlen (_tmp10_);
		_tmp12_ = _tmp11_;
		_tmp0_ = _tmp12_ == 0;
	}
	if (_tmp0_) {
		GtkEntry* _tmp13_;
		GtkButton* _tmp14_;
		GtkButton* _tmp15_;
		_tmp13_ = self->priv->search_entry;
		gtk_widget_set_sensitive ((GtkWidget*) _tmp13_, FALSE);
		_tmp14_ = self->priv->results_button;
		gtk_widget_set_sensitive ((GtkWidget*) _tmp14_, FALSE);
		_tmp15_ = self->priv->search_button;
		gtk_widget_set_sensitive ((GtkWidget*) _tmp15_, FALSE);
	} else {
		GtkEntry* _tmp16_;
		GtkButton* _tmp17_;
		GtkButton* _tmp18_;
		_tmp16_ = self->priv->search_entry;
		gtk_widget_set_sensitive ((GtkWidget*) _tmp16_, TRUE);
		_tmp17_ = self->priv->results_button;
		gtk_widget_set_sensitive ((GtkWidget*) _tmp17_, TRUE);
		_tmp18_ = self->priv->search_button;
		gtk_widget_set_sensitive ((GtkWidget*) _tmp18_, TRUE);
	}
}


/**
     * Triggered by clicking 'Ok' in the connection dialog.
     */
static void
_unity_tester_unity_tool_ui_on_scope_service_vanished_gbus_name_vanished_callback (GDBusConnection* connection,
                                                                                   const gchar* name,
                                                                                   gpointer self)
{
	unity_tester_unity_tool_ui_on_scope_service_vanished ((UnityTesterUnityToolUi*) self, connection, name);
}


static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static void
_g_variant_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_variant_unref (var), NULL));
}


static void
____lambda10_ (UnityTesterUnityToolUi* self,
               GObject* obj,
               GAsyncResult* res)
{
	UnityProtocolScopeService* proxy = NULL;
	UnityProtocolScopeService* _tmp0_;
	GHashTable* hints = NULL;
	gchar* _tmp1_ = NULL;
	GHashTable* _tmp2_ = NULL;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* model_name = NULL;
	gconstpointer _tmp5_;
	const gchar* _tmp6_;
	gchar* _tmp7_;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (res != NULL);
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (obj, UNITY_PROTOCOL_TYPE_SCOPE_SERVICE) ? ((UnityProtocolScopeService*) obj) : NULL);
	proxy = _tmp0_;
	_tmp3_ = unity_protocol_scope_service_open_channel_finish (proxy, res, &_tmp2_, &_inner_error_);
	_g_hash_table_unref0 (hints);
	hints = _tmp2_;
	_tmp1_ = _tmp3_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		_g_hash_table_unref0 (hints);
		_g_object_unref0 (proxy);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	_tmp4_ = _tmp1_;
	_tmp1_ = NULL;
	_g_free0 (self->priv->current_channel_id);
	self->priv->current_channel_id = _tmp4_;
	_tmp5_ = g_hash_table_lookup (hints, "model-swarm-name");
	_tmp6_ = g_variant_get_string ((GVariant*) _tmp5_, NULL);
	_tmp7_ = g_strdup (_tmp6_);
	model_name = _tmp7_;
	_tmp8_ = model_name;
	_tmp9_ = g_strdup (_tmp8_);
	_g_free0 (self->priv->current_swarm_name);
	self->priv->current_swarm_name = _tmp9_;
	_g_free0 (model_name);
	_g_free0 (_tmp1_);
	_g_hash_table_unref0 (hints);
	_g_object_unref0 (proxy);
}


static void
_____lambda10__gasync_ready_callback (GObject* source_object,
                                      GAsyncResult* res,
                                      gpointer self)
{
	____lambda10_ ((UnityTesterUnityToolUi*) self, source_object, res);
	g_object_unref (self);
}


void
unity_tester_unity_tool_ui_on_scope_connect (GtkDialog* dlg,
                                             gint response,
                                             UnityTesterUnityToolUi* self)
{
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	g_return_if_fail (dlg != NULL);
	if (response == 1) {
		GtkEntry* _tmp0_;
		const gchar* _tmp1_;
		const gchar* _tmp2_;
		gchar* _tmp3_;
		GtkEntry* _tmp4_;
		const gchar* _tmp5_;
		const gchar* _tmp6_;
		gchar* _tmp7_;
		GDBusConnection* bus = NULL;
		unity_tester_unity_tool_ui_clear_data (self);
		unity_tester_unity_tool_ui_clear_categories_and_filters (self);
		unity_tester_unity_tool_ui_remove_preview (self);
		unity_tester_unity_tool_ui_show_no_preview (self);
		_tmp0_ = self->priv->dbus_name_entry;
		_tmp1_ = gtk_entry_get_text (_tmp0_);
		_tmp2_ = _tmp1_;
		_tmp3_ = g_strdup (_tmp2_);
		_g_free0 (unity_tester_options_scope_dbus_name);
		unity_tester_options_scope_dbus_name = _tmp3_;
		_tmp4_ = self->priv->dbus_path_entry;
		_tmp5_ = gtk_entry_get_text (_tmp4_);
		_tmp6_ = _tmp5_;
		_tmp7_ = g_strdup (_tmp6_);
		_g_free0 (unity_tester_options_scope_dbus_path);
		unity_tester_options_scope_dbus_path = _tmp7_;
		_g_object_unref0 (self->priv->scope_proxy);
		self->priv->scope_proxy = NULL;
		bus = NULL;
		{
			GDBusConnection* _tmp8_ = NULL;
			GDBusConnection* _tmp9_;
			GDBusConnection* _tmp10_;
			UnityProtocolScopeService* _tmp11_ = NULL;
			GDBusConnection* _tmp12_;
			const gchar* _tmp13_;
			const gchar* _tmp14_;
			UnityProtocolScopeService* _tmp15_;
			UnityProtocolScopeService* _tmp16_;
			guint _tmp17_;
			const gchar* _tmp19_;
			UnityProtocolScopeService* _tmp20_;
			GVariant* _tmp21_;
			GVariant* _tmp22_;
			GVariant* _tmp23_;
			GObject* _tmp24_;
			DeeSerializableModel* _tmp25_;
			UnityProtocolScopeService* _tmp37_;
			GVariant* _tmp38_;
			GVariant* _tmp39_;
			GVariant* _tmp40_;
			GObject* _tmp41_;
			DeeSerializableModel* _tmp42_;
			gboolean is_global = FALSE;
			GtkRadioButton* _tmp54_;
			gint _tmp55_ = 0;
			gboolean _tmp56_;
			UnityProtocolScopeService* _tmp57_;
			GHashTable* _tmp58_;
			GHashTable* _tmp59_;
			const gchar* _tmp60_;
			const gchar* _tmp61_;
			gchar* _tmp62_;
			gchar* _tmp63_;
			_tmp9_ = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &_inner_error_);
			_tmp8_ = _tmp9_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				if (_inner_error_->domain == G_IO_ERROR) {
					goto __catch14_g_io_error;
				}
				_g_object_unref0 (bus);
				g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
				g_clear_error (&_inner_error_);
				return;
			}
			_tmp10_ = _tmp8_;
			_tmp8_ = NULL;
			_g_object_unref0 (bus);
			bus = _tmp10_;
			_tmp12_ = bus;
			_tmp13_ = unity_tester_options_scope_dbus_name;
			_tmp14_ = unity_tester_options_scope_dbus_path;
			_tmp15_ = g_initable_new (UNITY_PROTOCOL_TYPE_SCOPE_SERVICE_PROXY, NULL, &_inner_error_, "g-flags", 0, "g-name", _tmp13_, "g-connection", _tmp12_, "g-object-path", _tmp14_, "g-interface-name", "com.canonical.Unity.Scope", "g-interface-info", g_type_get_qdata (UNITY_PROTOCOL_TYPE_SCOPE_SERVICE, g_quark_from_static_string ("vala-dbus-interface-info")), NULL);
			_tmp11_ = (UnityProtocolScopeService*) _tmp15_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				_g_object_unref0 (_tmp8_);
				if (_inner_error_->domain == G_IO_ERROR) {
					goto __catch14_g_io_error;
				}
				_g_object_unref0 (_tmp8_);
				_g_object_unref0 (bus);
				g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
				g_clear_error (&_inner_error_);
				return;
			}
			_tmp16_ = _tmp11_;
			_tmp11_ = NULL;
			_g_object_unref0 (self->priv->scope_proxy);
			self->priv->scope_proxy = _tmp16_;
			_tmp17_ = self->priv->dbus_watcher_id;
			if (_tmp17_ > ((guint) 0)) {
				guint _tmp18_;
				_tmp18_ = self->priv->dbus_watcher_id;
				g_bus_unwatch_name (_tmp18_);
			}
			_tmp19_ = unity_tester_options_scope_dbus_name;
			self->priv->dbus_watcher_id = g_bus_watch_name_with_closures (G_BUS_TYPE_SESSION, _tmp19_, G_BUS_NAME_WATCHER_FLAGS_AUTO_START, (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)), (GClosure*) ((_unity_tester_unity_tool_ui_on_scope_service_vanished_gbus_name_vanished_callback == NULL) ? NULL : g_cclosure_new ((GCallback) _unity_tester_unity_tool_ui_on_scope_service_vanished_gbus_name_vanished_callback, g_object_ref (self), (GClosureNotify) g_object_unref)));
			_tmp20_ = self->priv->scope_proxy;
			_tmp21_ = unity_protocol_scope_service_get_filters (_tmp20_);
			_tmp22_ = _tmp21_;
			_tmp23_ = _tmp22_;
			_tmp24_ = dee_serializable_parse (_tmp23_, dee_sequence_model_get_type ());
			_tmp25_ = G_TYPE_CHECK_INSTANCE_TYPE (_tmp24_, dee_serializable_model_get_type ()) ? ((DeeSerializableModel*) _tmp24_) : NULL;
			if (_tmp25_ == NULL) {
				_g_object_unref0 (_tmp24_);
			}
			_g_object_unref0 (self->priv->dee_filters_model);
			self->priv->dee_filters_model = _tmp25_;
			_g_variant_unref0 (_tmp23_);
			{
				DeeModelIter* iter = NULL;
				DeeSerializableModel* _tmp26_;
				DeeModelIter* _tmp27_;
				_tmp26_ = self->priv->dee_filters_model;
				_tmp27_ = dee_model_get_first_iter ((DeeModel*) _tmp26_);
				iter = _tmp27_;
				{
					gboolean _tmp28_ = FALSE;
					_tmp28_ = TRUE;
					while (TRUE) {
						DeeModelIter* _tmp32_;
						DeeSerializableModel* _tmp33_;
						DeeModelIter* _tmp34_;
						DeeSerializableModel* _tmp35_;
						DeeModelIter* _tmp36_;
						if (!_tmp28_) {
							DeeSerializableModel* _tmp29_;
							DeeModelIter* _tmp30_;
							DeeModelIter* _tmp31_;
							_tmp29_ = self->priv->dee_filters_model;
							_tmp30_ = iter;
							_tmp31_ = dee_model_next ((DeeModel*) _tmp29_, _tmp30_);
							iter = _tmp31_;
						}
						_tmp28_ = FALSE;
						_tmp32_ = iter;
						_tmp33_ = self->priv->dee_filters_model;
						_tmp34_ = dee_model_get_last_iter ((DeeModel*) _tmp33_);
						if (!(_tmp32_ != _tmp34_)) {
							break;
						}
						_tmp35_ = self->priv->dee_filters_model;
						_tmp36_ = iter;
						unity_tester_unity_tool_ui_filters_row_added_cb (self, (DeeModel*) _tmp35_, _tmp36_);
					}
				}
			}
			_tmp37_ = self->priv->scope_proxy;
			_tmp38_ = unity_protocol_scope_service_get_categories (_tmp37_);
			_tmp39_ = _tmp38_;
			_tmp40_ = _tmp39_;
			_tmp41_ = dee_serializable_parse (_tmp40_, dee_sequence_model_get_type ());
			_tmp42_ = G_TYPE_CHECK_INSTANCE_TYPE (_tmp41_, dee_serializable_model_get_type ()) ? ((DeeSerializableModel*) _tmp41_) : NULL;
			if (_tmp42_ == NULL) {
				_g_object_unref0 (_tmp41_);
			}
			_g_object_unref0 (self->priv->dee_categories_model);
			self->priv->dee_categories_model = _tmp42_;
			_g_variant_unref0 (_tmp40_);
			{
				DeeModelIter* iter = NULL;
				DeeSerializableModel* _tmp43_;
				DeeModelIter* _tmp44_;
				_tmp43_ = self->priv->dee_categories_model;
				_tmp44_ = dee_model_get_first_iter ((DeeModel*) _tmp43_);
				iter = _tmp44_;
				{
					gboolean _tmp45_ = FALSE;
					_tmp45_ = TRUE;
					while (TRUE) {
						DeeModelIter* _tmp49_;
						DeeSerializableModel* _tmp50_;
						DeeModelIter* _tmp51_;
						DeeSerializableModel* _tmp52_;
						DeeModelIter* _tmp53_;
						if (!_tmp45_) {
							DeeSerializableModel* _tmp46_;
							DeeModelIter* _tmp47_;
							DeeModelIter* _tmp48_;
							_tmp46_ = self->priv->dee_categories_model;
							_tmp47_ = iter;
							_tmp48_ = dee_model_next ((DeeModel*) _tmp46_, _tmp47_);
							iter = _tmp48_;
						}
						_tmp45_ = FALSE;
						_tmp49_ = iter;
						_tmp50_ = self->priv->dee_categories_model;
						_tmp51_ = dee_model_get_last_iter ((DeeModel*) _tmp50_);
						if (!(_tmp49_ != _tmp51_)) {
							break;
						}
						_tmp52_ = self->priv->dee_categories_model;
						_tmp53_ = iter;
						unity_tester_unity_tool_ui_categories_row_added_cb (self, (DeeModel*) _tmp52_, _tmp53_);
					}
				}
			}
			_tmp54_ = self->priv->search_type_global_rbutton;
			is_global = gtk_toggle_button_get_active ((GtkToggleButton*) _tmp54_);
			_tmp56_ = is_global;
			if (_tmp56_) {
				_tmp55_ = 1;
			} else {
				_tmp55_ = 0;
			}
			_tmp57_ = self->priv->scope_proxy;
			_tmp58_ = g_hash_table_new_full (NULL, NULL, _g_free0_, _g_variant_unref0_);
			_tmp59_ = _tmp58_;
			unity_protocol_scope_service_open_channel (_tmp57_, (guint) _tmp55_, _tmp59_, NULL, NULL, _____lambda10__gasync_ready_callback, g_object_ref (self));
			_g_hash_table_unref0 (_tmp59_);
			_tmp60_ = unity_tester_options_scope_dbus_name;
			_tmp61_ = unity_tester_options_scope_dbus_path;
			_tmp62_ = g_strdup_printf ("Connected to: %s, %s\n", _tmp60_, _tmp61_);
			_tmp63_ = _tmp62_;
			unity_tester_unity_tool_ui_append_log_message (self, _tmp63_);
			_g_free0 (_tmp63_);
			_g_object_unref0 (_tmp11_);
			_g_object_unref0 (_tmp8_);
		}
		goto __finally14;
		__catch14_g_io_error:
		{
			GError* e = NULL;
			GError* _tmp64_;
			const gchar* _tmp65_;
			e = _inner_error_;
			_inner_error_ = NULL;
			_tmp64_ = e;
			_tmp65_ = _tmp64_->message;
			unity_tester_unity_tool_ui_handle_error (self, _tmp65_);
			_g_error_free0 (e);
		}
		__finally14:
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			_g_object_unref0 (bus);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
		_g_object_unref0 (bus);
	}
	unity_tester_unity_tool_ui_disable_ui_actions_on_error_condition (self);
	gtk_widget_destroy ((GtkWidget*) dlg);
}


/**
     * Triggered by clicking 'From scope file' button in the connection dialog.
     * Opens file browser letting the user pick a .scope file.
     */
void
unity_tester_unity_tool_ui_on_from_scope_clicked (GtkButton* btn,
                                                  UnityTesterUnityToolUi* self)
{
	GtkFileFilter* filter = NULL;
	GtkFileFilter* _tmp0_;
	GtkFileFilter* _tmp1_;
	GtkFileFilter* _tmp2_;
	GtkFileChooserDialog* file_chooser = NULL;
	GtkFileChooserDialog* _tmp3_;
	GtkFileChooserDialog* _tmp4_;
	GtkFileFilter* _tmp5_;
	GtkFileChooserDialog* _tmp6_;
	GtkFileChooserDialog* _tmp23_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	g_return_if_fail (btn != NULL);
	_tmp0_ = gtk_file_filter_new ();
	g_object_ref_sink (_tmp0_);
	filter = _tmp0_;
	_tmp1_ = filter;
	gtk_buildable_set_name ((GtkBuildable*) _tmp1_, "Scope files");
	_tmp2_ = filter;
	gtk_file_filter_add_pattern (_tmp2_, "*.scope");
	_tmp3_ = (GtkFileChooserDialog*) gtk_file_chooser_dialog_new ("Open Lens file", NULL, GTK_FILE_CHOOSER_ACTION_OPEN, GTK_STOCK_CANCEL, 0, GTK_STOCK_OPEN, 1, NULL);
	g_object_ref_sink (_tmp3_);
	file_chooser = _tmp3_;
	_tmp4_ = file_chooser;
	_tmp5_ = filter;
	gtk_file_chooser_set_filter ((GtkFileChooser*) _tmp4_, _tmp5_);
	_tmp6_ = file_chooser;
	if (gtk_dialog_run ((GtkDialog*) _tmp6_) == 1) {
		{
			GtkFileChooserDialog* _tmp7_;
			gchar* _tmp8_;
			gchar* _tmp9_;
			GtkEntry* _tmp10_;
			const gchar* _tmp11_;
			GtkEntry* _tmp12_;
			const gchar* _tmp13_;
			_tmp7_ = file_chooser;
			_tmp8_ = gtk_file_chooser_get_filename ((GtkFileChooser*) _tmp7_);
			_tmp9_ = _tmp8_;
			unity_tester_get_scope_params_from_file (_tmp9_, &_inner_error_);
			_g_free0 (_tmp9_);
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				goto __catch15_g_error;
			}
			_tmp10_ = self->priv->dbus_name_entry;
			_tmp11_ = unity_tester_options_scope_dbus_name;
			gtk_entry_set_text (_tmp10_, _tmp11_);
			_tmp12_ = self->priv->dbus_path_entry;
			_tmp13_ = unity_tester_options_scope_dbus_path;
			gtk_entry_set_text (_tmp12_, _tmp13_);
		}
		goto __finally15;
		__catch15_g_error:
		{
			GError* e = NULL;
			GtkDialog* dlg = NULL;
			GError* _tmp14_;
			const gchar* _tmp15_;
			gchar* _tmp16_;
			gchar* _tmp17_;
			GtkMessageDialog* _tmp18_;
			GtkDialog* _tmp19_;
			GtkDialog* _tmp20_;
			GtkDialog* _tmp21_;
			GtkDialog* _tmp22_;
			e = _inner_error_;
			_inner_error_ = NULL;
			_tmp14_ = e;
			_tmp15_ = _tmp14_->message;
			_tmp16_ = g_strdup_printf ("Error loading scope parameters from file:\n%s", _tmp15_);
			_tmp17_ = _tmp16_;
			_tmp18_ = (GtkMessageDialog*) gtk_message_dialog_new (NULL, GTK_DIALOG_DESTROY_WITH_PARENT | GTK_DIALOG_MODAL, GTK_MESSAGE_ERROR, GTK_BUTTONS_CLOSE, "%s", _tmp17_);
			g_object_ref_sink (_tmp18_);
			_tmp19_ = (GtkDialog*) _tmp18_;
			_g_free0 (_tmp17_);
			dlg = _tmp19_;
			_tmp20_ = dlg;
			gtk_window_set_title ((GtkWindow*) _tmp20_, "Error loading scope file");
			_tmp21_ = dlg;
			gtk_dialog_run (_tmp21_);
			_tmp22_ = dlg;
			gtk_widget_destroy ((GtkWidget*) _tmp22_);
			_g_object_unref0 (dlg);
			_g_error_free0 (e);
		}
		__finally15:
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			_g_object_unref0 (file_chooser);
			_g_object_unref0 (filter);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
	}
	_tmp23_ = file_chooser;
	gtk_widget_destroy ((GtkWidget*) _tmp23_);
	_g_object_unref0 (file_chooser);
	_g_object_unref0 (filter);
}


/**
     * Appends log message to 'Log' tab.
     */
static void
unity_tester_unity_tool_ui_append_log_message (UnityTesterUnityToolUi* self,
                                               const gchar* message)
{
	GtkTextIter iter = {0};
	GtkTextBuffer* _tmp0_;
	GtkTextIter _tmp1_ = {0};
	GtkTextBuffer* _tmp2_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (message != NULL);
	_tmp0_ = self->priv->log_buffer;
	gtk_text_buffer_get_end_iter (_tmp0_, &_tmp1_);
	iter = _tmp1_;
	_tmp2_ = self->priv->log_buffer;
	gtk_text_buffer_insert (_tmp2_, &iter, message, -1);
}


/**
     * Clears all models, removing all search results.
     */
static void
unity_tester_unity_tool_ui_clear_data (UnityTesterUnityToolUi* self)
{
	DeeSharedModel* _tmp0_;
	GtkListStore* _tmp1_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->dee_results_model;
	if (_tmp0_ != NULL) {
		_g_object_unref0 (self->priv->dee_results_model);
		self->priv->dee_results_model = NULL;
	}
	_tmp1_ = self->priv->uimodel;
	gtk_list_store_clear (_tmp1_);
}


static void
unity_tester_unity_tool_ui_clear_categories_and_filters (UnityTesterUnityToolUi* self)
{
	DeeSerializableModel* _tmp0_;
	DeeSerializableModel* _tmp1_;
	GtkListStore* _tmp2_;
	GtkListStore* _tmp3_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->dee_filters_model;
	if (_tmp0_ != NULL) {
		_g_object_unref0 (self->priv->dee_filters_model);
		self->priv->dee_filters_model = NULL;
	}
	_tmp1_ = self->priv->dee_categories_model;
	if (_tmp1_ != NULL) {
		_g_object_unref0 (self->priv->dee_categories_model);
		self->priv->dee_categories_model = NULL;
	}
	_tmp2_ = self->priv->ui_filter_model;
	gtk_list_store_clear (_tmp2_);
	_tmp3_ = self->priv->ui_cat_model;
	gtk_list_store_clear (_tmp3_);
}


void
unity_tester_unity_tool_ui_on_results_button_clicked (GtkButton* btn,
                                                      UnityTesterUnityToolUi* self)
{
	g_return_if_fail (self != NULL);
	g_return_if_fail (btn != NULL);
	unity_tester_unity_tool_ui_clear_data (self);
	unity_tester_unity_tool_ui_remove_preview (self);
}


/**
     * Triggered by clicking 'Search' button. Starts scope search over dbus.
     */
static void
_unity_tester_unity_tool_ui_model_synchronized_cb_g_object_notify (GObject* _sender,
                                                                   GParamSpec* pspec,
                                                                   gpointer self)
{
	unity_tester_unity_tool_ui_model_synchronized_cb ((UnityTesterUnityToolUi*) self);
}


static void
_unity_tester_unity_tool_ui_results_row_added_cb_dee_model_row_added (DeeModel* _sender,
                                                                      DeeModelIter* iter,
                                                                      gpointer self)
{
	unity_tester_unity_tool_ui_results_row_added_cb ((UnityTesterUnityToolUi*) self, _sender, iter);
}


static void
___lambda11_ (UnityTesterUnityToolUi* self,
              GObject* obj,
              GAsyncResult* res)
{
	GError * _inner_error_ = NULL;
	g_return_if_fail (res != NULL);
	{
		UnityProtocolScopeService* proxy = NULL;
		UnityProtocolScopeService* _tmp0_;
		GHashTable* _result_ = NULL;
		GHashTable* _tmp1_;
		const gchar* _tmp2_;
		DeeSharedModel* _tmp3_;
		DeeSharedModel* _tmp4_;
		gulong _tmp5_;
		DeeSharedModel* _tmp6_;
		gchar* msg = NULL;
		gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
		const gchar* _tmp11_;
		_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (obj, UNITY_PROTOCOL_TYPE_SCOPE_SERVICE) ? ((UnityProtocolScopeService*) obj) : NULL);
		proxy = _tmp0_;
		_tmp1_ = unity_protocol_scope_service_search_finish (proxy, res, &_inner_error_);
		_result_ = _tmp1_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			_g_object_unref0 (proxy);
			goto __catch16_g_error;
		}
		_tmp2_ = self->priv->current_swarm_name;
		_tmp3_ = (DeeSharedModel*) dee_shared_model_new (_tmp2_);
		_g_object_unref0 (self->priv->dee_results_model);
		self->priv->dee_results_model = _tmp3_;
		_tmp4_ = self->priv->dee_results_model;
		_tmp5_ = g_signal_connect_object ((GObject*) _tmp4_, "notify::synchronized", (GCallback) _unity_tester_unity_tool_ui_model_synchronized_cb_g_object_notify, self, 0);
		self->priv->model_sync_sig_id = _tmp5_;
		_tmp6_ = self->priv->dee_results_model;
		g_signal_connect_object ((DeeModel*) _tmp6_, "row-added", (GCallback) _unity_tester_unity_tool_ui_results_row_added_cb_dee_model_row_added, self, 0);
		_tmp7_ = unity_tester_unity_tool_ui_dump_ht_reply (_result_);
		_tmp8_ = _tmp7_;
		_tmp9_ = g_strdup_printf ("Search reply: %s\n", _tmp8_);
		_tmp10_ = _tmp9_;
		_g_free0 (_tmp8_);
		msg = _tmp10_;
		_tmp11_ = msg;
		unity_tester_unity_tool_ui_append_log_message (self, _tmp11_);
		_g_free0 (msg);
		_g_hash_table_unref0 (_result_);
		_g_object_unref0 (proxy);
	}
	goto __finally16;
	__catch16_g_error:
	{
		GError* e = NULL;
		GError* _tmp12_;
		const gchar* _tmp13_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp12_ = e;
		_tmp13_ = _tmp12_->message;
		unity_tester_unity_tool_ui_handle_error (self, _tmp13_);
		_g_error_free0 (e);
	}
	__finally16:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
}


static void
____lambda11__gasync_ready_callback (GObject* source_object,
                                     GAsyncResult* res,
                                     gpointer self)
{
	___lambda11_ ((UnityTesterUnityToolUi*) self, source_object, res);
	g_object_unref (self);
}


void
unity_tester_unity_tool_ui_on_search_button_clicked (GtkButton* btn,
                                                     UnityTesterUnityToolUi* self)
{
	gchar* text = NULL;
	GtkEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	GtkSpinner* _tmp4_;
	gboolean _tmp5_ = FALSE;
	const gchar* _tmp6_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (btn != NULL);
	_tmp0_ = self->priv->search_entry;
	_tmp1_ = gtk_entry_get_text (_tmp0_);
	_tmp2_ = _tmp1_;
	_tmp3_ = g_strdup (_tmp2_);
	text = _tmp3_;
	_tmp4_ = self->priv->spinner;
	gtk_spinner_start (_tmp4_);
	_tmp6_ = unity_tester_options_scope_dbus_name;
	if (g_dbus_is_name (_tmp6_)) {
		const gchar* _tmp7_;
		_tmp7_ = unity_tester_options_scope_dbus_path;
		_tmp5_ = g_variant_is_object_path (_tmp7_);
	} else {
		_tmp5_ = FALSE;
	}
	if (_tmp5_) {
		const gchar* _tmp8_ = NULL;
		GtkRadioButton* _tmp9_;
		const gchar* _tmp10_;
		const gchar* _tmp11_;
		const gchar* _tmp12_;
		gchar* _tmp13_;
		gchar* _tmp14_;
		gboolean is_global_search = FALSE;
		GtkRadioButton* _tmp15_;
		UnityProtocolScopeService* _tmp16_;
		const gchar* _tmp17_;
		const gchar* _tmp18_;
		GHashTable* _tmp19_;
		GHashTable* _tmp20_;
		_tmp9_ = self->priv->search_type_global_rbutton;
		if (gtk_toggle_button_get_active ((GtkToggleButton*) _tmp9_)) {
			_tmp8_ = "global";
		} else {
			_tmp8_ = "local";
		}
		_tmp10_ = text;
		_tmp11_ = unity_tester_options_scope_dbus_name;
		_tmp12_ = unity_tester_options_scope_dbus_path;
		_tmp13_ = g_strdup_printf ("Query: '%s' (%s), DBus name: %s, DBus path: %s\n", _tmp10_, _tmp8_, _tmp11_, _tmp12_);
		_tmp14_ = _tmp13_;
		unity_tester_unity_tool_ui_append_log_message (self, _tmp14_);
		_g_free0 (_tmp14_);
		unity_tester_unity_tool_ui_remove_preview (self);
		unity_tester_unity_tool_ui_show_no_preview (self);
		unity_tester_unity_tool_ui_clear_data (self);
		_tmp15_ = self->priv->search_type_global_rbutton;
		is_global_search = gtk_toggle_button_get_active ((GtkToggleButton*) _tmp15_);
		_tmp16_ = self->priv->scope_proxy;
		_tmp17_ = self->priv->current_channel_id;
		_tmp18_ = text;
		_tmp19_ = g_hash_table_new_full (NULL, NULL, _g_free0_, _g_variant_unref0_);
		_tmp20_ = _tmp19_;
		unity_protocol_scope_service_search (_tmp16_, _tmp17_, _tmp18_, _tmp20_, NULL, ____lambda11__gasync_ready_callback, g_object_ref (self));
		_g_hash_table_unref0 (_tmp20_);
	} else {
		unity_tester_unity_tool_ui_handle_error (self, "Invalid DBus name/path");
	}
	_g_free0 (text);
}


static Block9Data*
block9_data_ref (Block9Data* _data9_)
{
	g_atomic_int_inc (&_data9_->_ref_count_);
	return _data9_;
}


static void
block9_data_unref (void * _userdata_)
{
	Block9Data* _data9_;
	_data9_ = (Block9Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data9_->_ref_count_)) {
		_g_string_free0 (_data9_->bld);
		g_slice_free (Block9Data, _data9_);
	}
}


static void
__lambda12_ (Block9Data* _data9_,
             const gchar* k,
             GVariant* v)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	g_return_if_fail (k != NULL);
	g_return_if_fail (v != NULL);
	_tmp0_ = g_variant_print (v, TRUE);
	_tmp1_ = _tmp0_;
	g_string_append_printf (_data9_->bld, "\t%s = %s", k, _tmp1_);
	_g_free0 (_tmp1_);
}


static void
___lambda12__gh_func (gconstpointer key,
                      gconstpointer value,
                      gpointer self)
{
	__lambda12_ (self, (const gchar*) key, (GVariant*) value);
}


static gchar*
unity_tester_unity_tool_ui_dump_ht_reply (GHashTable* reply)
{
	gchar* result = NULL;
	Block9Data* _data9_;
	GString* _tmp0_;
	const gchar* _tmp1_;
	gchar* _tmp2_;
	g_return_val_if_fail (reply != NULL, NULL);
	_data9_ = g_slice_new0 (Block9Data);
	_data9_->_ref_count_ = 1;
	_tmp0_ = g_string_new ("{\n");
	_data9_->bld = _tmp0_;
	g_hash_table_foreach (reply, ___lambda12__gh_func, _data9_);
	g_string_append (_data9_->bld, "\n}");
	_tmp1_ = _data9_->bld->str;
	_tmp2_ = g_strdup (_tmp1_);
	result = _tmp2_;
	block9_data_unref (_data9_);
	_data9_ = NULL;
	return result;
}


static Block10Data*
block10_data_ref (Block10Data* _data10_)
{
	g_atomic_int_inc (&_data10_->_ref_count_);
	return _data10_;
}


static void
block10_data_unref (void * _userdata_)
{
	Block10Data* _data10_;
	_data10_ = (Block10Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data10_->_ref_count_)) {
		_g_string_free0 (_data10_->bld);
		g_slice_free (Block10Data, _data10_);
	}
}


static void
__lambda13_ (Block10Data* _data10_,
             const gchar* k,
             GVariant* v)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	g_return_if_fail (k != NULL);
	g_return_if_fail (v != NULL);
	_tmp0_ = g_variant_print (v, TRUE);
	_tmp1_ = _tmp0_;
	g_string_append_printf (_data10_->bld, "\t\t%s = %s", k, _tmp1_);
	_g_free0 (_tmp1_);
}


static void
___lambda13__gh_func (gconstpointer key,
                      gconstpointer value,
                      gpointer self)
{
	__lambda13_ (self, (const gchar*) key, (GVariant*) value);
}


static gchar*
unity_tester_unity_tool_ui_dump_activation_reply (UnityProtocolActivationReplyRaw* reply)
{
	gchar* result = NULL;
	Block10Data* _data10_;
	GString* _tmp0_;
	gchar* handled_str = NULL;
	GTypeClass* _tmp1_;
	GEnumClass* _tmp2_;
	UnityProtocolActivationReplyRaw _tmp3_;
	guint _tmp4_;
	const gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	UnityProtocolActivationReplyRaw _tmp8_;
	const gchar* _tmp9_;
	UnityProtocolActivationReplyRaw _tmp10_;
	GHashTable* _tmp11_;
	const gchar* _tmp12_;
	gchar* _tmp13_;
	g_return_val_if_fail (reply != NULL, NULL);
	_data10_ = g_slice_new0 (Block10Data);
	_data10_->_ref_count_ = 1;
	_tmp0_ = g_string_new ("");
	_data10_->bld = _tmp0_;
	_tmp1_ = g_type_class_ref (UNITY_TYPE_HANDLED_TYPE);
	_tmp2_ = (GEnumClass*) _tmp1_;
	_tmp3_ = *reply;
	_tmp4_ = _tmp3_.handled;
	_tmp5_ = (*g_enum_get_value (_tmp2_, (gint) _tmp4_)).value_name;
	_tmp6_ = g_strdup (_tmp5_);
	_tmp7_ = _tmp6_;
	_g_type_class_unref0 (_tmp2_);
	handled_str = _tmp7_;
	_tmp8_ = *reply;
	_tmp9_ = _tmp8_.uri;
	g_string_append_printf (_data10_->bld, "ActivationReplyRaw: {\n\turi=%s,\n\thandled=%s,\n\thints={\n\t", _tmp9_, handled_str);
	_tmp10_ = *reply;
	_tmp11_ = _tmp10_.hints;
	g_hash_table_foreach (_tmp11_, ___lambda13__gh_func, _data10_);
	g_string_append (_data10_->bld, "\n\t}\n}");
	_tmp12_ = _data10_->bld->str;
	_tmp13_ = g_strdup (_tmp12_);
	result = _tmp13_;
	_g_free0 (handled_str);
	block10_data_unref (_data10_);
	_data10_ = NULL;
	return result;
}


/**
     * Helper method that stops spinner and puts error message on statusbar.
     */
static void
unity_tester_unity_tool_ui_handle_error (UnityTesterUnityToolUi* self,
                                         const gchar* message)
{
	GtkSpinner* _tmp0_;
	GtkStatusbar* _tmp1_;
	guint _tmp2_;
	GtkStatusbar* _tmp3_;
	guint _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (message != NULL);
	_tmp0_ = self->priv->spinner;
	gtk_spinner_stop (_tmp0_);
	_tmp1_ = self->priv->statusbar;
	_tmp2_ = self->priv->statusbar_error_ctx;
	gtk_statusbar_pop (_tmp1_, _tmp2_);
	_tmp3_ = self->priv->statusbar;
	_tmp4_ = self->priv->statusbar_error_ctx;
	gtk_statusbar_push (_tmp3_, _tmp4_, message);
	_tmp5_ = g_strconcat (message, "\n", NULL);
	_tmp6_ = _tmp5_;
	unity_tester_unity_tool_ui_append_log_message (self, _tmp6_);
	_g_free0 (_tmp6_);
}


static void
unity_tester_unity_tool_ui_send_activate_data_free (gpointer _data)
{
	UnityTesterUnityToolUiSendActivateData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_hash_table_unref0 (_data_->hints_);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityTesterUnityToolUiSendActivateData, _data_);
}


static void
unity_tester_unity_tool_ui_send_activate_async_ready_wrapper (GObject *source_object,
                                                              GAsyncResult *res,
                                                              void *user_data)
{
	UnityTesterUnityToolUiSendActivateData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static gpointer
_g_hash_table_ref0 (gpointer self)
{
	return self ? g_hash_table_ref (self) : NULL;
}


static void
unity_tester_unity_tool_ui_send_activate (UnityTesterUnityToolUi* self,
                                          const gchar* channel_id,
                                          GVariant** result_arr,
                                          int result_arr_length1,
                                          guint action_type,
                                          GHashTable* hints_,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_)
{
	UnityTesterUnityToolUiSendActivateData* _data_;
	UnityTesterUnityToolUi* _tmp0_;
	gchar* _tmp1_;
	GHashTable* _tmp2_;
	_data_ = g_slice_new0 (UnityTesterUnityToolUiSendActivateData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, unity_tester_unity_tool_ui_send_activate_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_tester_unity_tool_ui_send_activate_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_data_->result_arr = result_arr;
	_data_->result_arr_length1 = result_arr_length1;
	_data_->action_type = action_type;
	_tmp2_ = _g_hash_table_ref0 (hints_);
	_g_hash_table_unref0 (_data_->hints_);
	_data_->hints_ = _tmp2_;
	unity_tester_unity_tool_ui_send_activate_co (_data_);
}


static void
unity_tester_unity_tool_ui_send_activate_finish (UnityTesterUnityToolUi* self,
                                                 GAsyncResult* _res_,
                                                 UnityProtocolActivationReplyRaw* reply,
                                                 GError** error)
{
	UnityTesterUnityToolUiSendActivateData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
	if (reply) {
		*reply = _data_->reply;
	} else {
		unity_protocol_activation_reply_raw_destroy (&_data_->reply);
	}
}


/**
     * Helper method to workaround vala-0.16 & vala-0.17 bug -
     * fix is coming to vala - see http://git.gnome.org/browse/vala/commit/?id=79925e1174d62d740ca8f360f489dd1660ea5881
     */
static void
unity_tester_unity_tool_ui_send_activate_ready (GObject* source_object,
                                                GAsyncResult* _res_,
                                                gpointer _user_data_)
{
	UnityTesterUnityToolUiSendActivateData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_tester_unity_tool_ui_send_activate_co (_data_);
}


static gboolean
unity_tester_unity_tool_ui_send_activate_co (UnityTesterUnityToolUiSendActivateData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = _g_hash_table_ref0 (_data_->hints_);
	_data_->hints = _data_->_tmp0_;
	_data_->_tmp1_ = _data_->hints;
	if (_data_->_tmp1_ == NULL) {
		_data_->_tmp2_ = g_hash_table_new_full (NULL, NULL, _g_free0_, _g_variant_unref0_);
		_g_hash_table_unref0 (_data_->hints);
		_data_->hints = _data_->_tmp2_;
	}
	_data_->_tmp4_ = _data_->self->priv->scope_proxy;
	_data_->_tmp5_ = _data_->hints;
	memset (&_data_->_tmp6_, 0, sizeof (UnityProtocolActivationReplyRaw));
	_data_->_state_ = 1;
	unity_protocol_scope_service_activate (_data_->_tmp4_, _data_->channel_id, _data_->result_arr, _data_->result_arr_length1, _data_->action_type, _data_->_tmp5_, NULL, unity_tester_unity_tool_ui_send_activate_ready, _data_);
	return FALSE;
	_state_1:
	unity_protocol_scope_service_activate_finish (_data_->_tmp4_, _data_->_res_, &_data_->_tmp6_, &_data_->_inner_error_);
	_data_->_tmp3_ = _data_->_tmp6_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		if (_data_->_inner_error_->domain == G_IO_ERROR) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			_g_hash_table_unref0 (_data_->hints);
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_g_hash_table_unref0 (_data_->hints);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->_tmp7_ = _data_->_tmp3_;
	memset (&_data_->_tmp3_, 0, sizeof (UnityProtocolActivationReplyRaw));
	unity_protocol_activation_reply_raw_destroy (&_data_->reply);
	_data_->reply = _data_->_tmp7_;
	unity_protocol_activation_reply_raw_destroy (&_data_->_tmp3_);
	_g_hash_table_unref0 (_data_->hints);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_tester_unity_tool_ui_send_update_data_free (gpointer _data)
{
	UnityTesterUnityToolUiSendUpdateData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_free0 (_data_->uri);
	_g_hash_table_unref0 (_data_->props);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityTesterUnityToolUiSendUpdateData, _data_);
}


static void
unity_tester_unity_tool_ui_send_update_async_ready_wrapper (GObject *source_object,
                                                            GAsyncResult *res,
                                                            void *user_data)
{
	UnityTesterUnityToolUiSendUpdateData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_tester_unity_tool_ui_send_update (UnityTesterUnityToolUi* self,
                                        const gchar* channel_id,
                                        const gchar* uri,
                                        GHashTable* props,
                                        GAsyncReadyCallback _callback_,
                                        gpointer _user_data_)
{
	UnityTesterUnityToolUiSendUpdateData* _data_;
	UnityTesterUnityToolUi* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	GHashTable* _tmp3_;
	_data_ = g_slice_new0 (UnityTesterUnityToolUiSendUpdateData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, unity_tester_unity_tool_ui_send_update_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_tester_unity_tool_ui_send_update_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_tmp2_ = g_strdup (uri);
	_g_free0 (_data_->uri);
	_data_->uri = _tmp2_;
	_tmp3_ = _g_hash_table_ref0 (props);
	_g_hash_table_unref0 (_data_->props);
	_data_->props = _tmp3_;
	unity_tester_unity_tool_ui_send_update_co (_data_);
}


static void
unity_tester_unity_tool_ui_send_update_finish (UnityTesterUnityToolUi* self,
                                               GAsyncResult* _res_,
                                               GHashTable* * reply,
                                               GError** error)
{
	UnityTesterUnityToolUiSendUpdateData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
	if (reply) {
		*reply = _data_->reply;
	} else {
		_g_hash_table_unref0 (_data_->reply);
	}
	_data_->reply = NULL;
}


static gboolean
unity_tester_unity_tool_ui_send_update_co (UnityTesterUnityToolUiSendUpdateData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	g_warning ("unity-tool-ui.vala:504: Unimplemented preview update for %s", _data_->uri);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static Block11Data*
block11_data_ref (Block11Data* _data11_)
{
	g_atomic_int_inc (&_data11_->_ref_count_);
	return _data11_;
}


static void
_vala_UnityProtocolActivationReplyRaw_free (UnityProtocolActivationReplyRaw* self)
{
	unity_protocol_activation_reply_raw_destroy (self);
	g_free (self);
}


static void
block11_data_unref (void * _userdata_)
{
	Block11Data* _data11_;
	_data11_ = (Block11Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data11_->_ref_count_)) {
		UnityTesterUnityToolUi* self;
		self = _data11_->self;
		__vala_UnityProtocolActivationReplyRaw_free0 (_data11_->reply_struct);
		_g_object_unref0 (self);
		g_slice_free (Block11Data, _data11_);
	}
}


static UnityProtocolActivationReplyRaw*
_unity_protocol_activation_reply_raw_dup (UnityProtocolActivationReplyRaw* self)
{
	UnityProtocolActivationReplyRaw* dup;
	dup = g_new0 (UnityProtocolActivationReplyRaw, 1);
	unity_protocol_activation_reply_raw_copy (self, dup);
	return dup;
}


static gpointer
__unity_protocol_activation_reply_raw_dup0 (gpointer self)
{
	return self ? _unity_protocol_activation_reply_raw_dup (self) : NULL;
}


static void
__lambda14_ (Block11Data* _data11_,
             GObject* obj,
             GAsyncResult* res)
{
	UnityTesterUnityToolUi* self;
	GError * _inner_error_ = NULL;
	self = _data11_->self;
	g_return_if_fail (res != NULL);
	{
		UnityProtocolActivationReplyRaw _tmp0_ = {0};
		UnityProtocolActivationReplyRaw _tmp1_;
		UnityProtocolActivationReplyRaw _tmp2_;
		UnityProtocolActivationReplyRaw* _tmp3_;
		const gchar* _tmp4_;
		gchar* _tmp5_;
		UnityProtocolActivationReplyRaw _tmp6_;
		GtkNotebook* _tmp7_;
		unity_tester_unity_tool_ui_send_activate_finish (self, res, &_tmp0_, &_inner_error_);
		__vala_UnityProtocolActivationReplyRaw_free0 (_data11_->reply_struct);
		_tmp1_ = _tmp0_;
		_tmp2_ = _tmp1_;
		_tmp3_ = __unity_protocol_activation_reply_raw_dup0 (&_tmp2_);
		_data11_->reply_struct = _tmp3_;
		unity_protocol_activation_reply_raw_destroy (&_tmp1_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			if (_inner_error_->domain == G_IO_ERROR) {
				goto __catch17_g_io_error;
			}
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
		_tmp4_ = (*_data11_->reply_struct).uri;
		_tmp5_ = g_strdup (_tmp4_);
		_g_free0 (self->priv->preview_scope_uri);
		self->priv->preview_scope_uri = _tmp5_;
		_tmp6_ = *_data11_->reply_struct;
		unity_tester_unity_tool_ui_handle_activation_reply (self, &_tmp6_);
		_tmp7_ = self->priv->notebook;
		gtk_notebook_set_current_page (_tmp7_, 3);
	}
	goto __finally17;
	__catch17_g_io_error:
	{
		GError* e = NULL;
		GError* _tmp8_;
		const gchar* _tmp9_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp8_ = e;
		_tmp9_ = _tmp8_->message;
		unity_tester_unity_tool_ui_handle_error (self, _tmp9_);
		_g_error_free0 (e);
	}
	__finally17:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
}


static void
___lambda14__gasync_ready_callback (GObject* source_object,
                                    GAsyncResult* res,
                                    gpointer self)
{
	__lambda14_ (self, source_object, res);
	block11_data_unref (self);
}


static void
unity_tester_unity_tool_ui_activate_preview (UnityTesterUnityToolUi* self,
                                             const gchar* channel_id,
                                             GVariant** result_arr,
                                             int result_arr_length1)
{
	Block11Data* _data11_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (channel_id != NULL);
	_data11_ = g_slice_new0 (Block11Data);
	_data11_->_ref_count_ = 1;
	_data11_->self = g_object_ref (self);
	_data11_->reply_struct = NULL;
	unity_tester_unity_tool_ui_send_activate (self, channel_id, result_arr, result_arr_length1, (guint) UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_RESULT, NULL, ___lambda14__gasync_ready_callback, block11_data_ref (_data11_));
	block11_data_unref (_data11_);
	_data11_ = NULL;
}


static void
unity_tester_unity_tool_ui_update_next_prev_buttons (UnityTesterUnityToolUi* self,
                                                     GtkTreeModel* model,
                                                     GtkTreeIter* cur_iter)
{
	GtkTreeIter iter = {0};
	GtkTreeIter _tmp0_;
	GtkButton* _tmp1_;
	gboolean _tmp2_;
	GtkTreeIter _tmp3_;
	GtkButton* _tmp4_;
	gboolean _tmp5_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (model != NULL);
	g_return_if_fail (cur_iter != NULL);
	_tmp0_ = *cur_iter;
	iter = _tmp0_;
	_tmp1_ = self->priv->prev_preview_button;
	_tmp2_ = gtk_tree_model_iter_previous (model, &iter);
	gtk_widget_set_sensitive ((GtkWidget*) _tmp1_, _tmp2_);
	_tmp3_ = *cur_iter;
	iter = _tmp3_;
	_tmp4_ = self->priv->next_preview_button;
	_tmp5_ = gtk_tree_model_iter_next (model, &iter);
	gtk_widget_set_sensitive ((GtkWidget*) _tmp4_, _tmp5_);
}


/**
     * Handler for 'Request preview' context menu item.
     */
static GtkTreeIter*
_gtk_tree_iter_dup (GtkTreeIter* self)
{
	GtkTreeIter* dup;
	dup = g_new0 (GtkTreeIter, 1);
	memcpy (dup, self, sizeof (GtkTreeIter));
	return dup;
}


static gpointer
__gtk_tree_iter_dup0 (gpointer self)
{
	return self ? _gtk_tree_iter_dup (self) : NULL;
}


void
unity_tester_unity_tool_ui_on_request_preview (GtkMenuItem* item,
                                               UnityTesterUnityToolUi* self)
{
	GtkTreeModel* model = NULL;
	GtkTreeIter iter = {0};
	GtkTreeSelection* _tmp0_;
	GtkTreeModel* _tmp1_ = NULL;
	GtkTreeIter _tmp2_ = {0};
	gboolean _tmp3_;
	GtkTreeModel* _tmp4_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (item != NULL);
	_tmp0_ = self->priv->results_view_selection;
	_tmp3_ = gtk_tree_selection_get_selected (_tmp0_, &_tmp1_, &_tmp2_);
	_g_object_unref0 (model);
	_tmp4_ = _g_object_ref0 (_tmp1_);
	model = _tmp4_;
	iter = _tmp2_;
	if (_tmp3_) {
		GtkTreeModel* _tmp5_;
		GtkTreeModel* _tmp6_;
		GtkTreeIter _tmp7_;
		GtkTreeIter* _tmp8_;
		const gchar* _tmp9_;
		GtkTreeSelection* _tmp10_;
		gint _tmp11_ = 0;
		GVariant** _tmp12_;
		GVariant** _tmp13_;
		gint _tmp13__length1;
		GtkTreeModel* _tmp14_;
		GtkTreeIter _tmp15_;
		_tmp5_ = model;
		_tmp6_ = _g_object_ref0 (_tmp5_);
		_g_object_unref0 (self->priv->last_active_model);
		self->priv->last_active_model = _tmp6_;
		_tmp7_ = iter;
		_tmp8_ = __gtk_tree_iter_dup0 (&_tmp7_);
		_g_free0 (self->priv->last_active_iter);
		self->priv->last_active_iter = _tmp8_;
		_tmp9_ = self->priv->current_channel_id;
		_tmp10_ = self->priv->results_view_selection;
		_tmp12_ = unity_tester_unity_tool_ui_get_selected_result_variant (self, _tmp10_, &_tmp11_);
		_tmp13_ = _tmp12_;
		_tmp13__length1 = _tmp11_;
		unity_tester_unity_tool_ui_activate_preview (self, _tmp9_, _tmp13_, _tmp11_);
		_tmp13_ = (_vala_array_free (_tmp13_, _tmp13__length1, (GDestroyNotify) g_variant_unref), NULL);
		_tmp14_ = model;
		_tmp15_ = iter;
		unity_tester_unity_tool_ui_update_next_prev_buttons (self, _tmp14_, &_tmp15_);
	}
	_g_object_unref0 (model);
}


/**
     * Handler for 'Request preview' context menu item.
     */
void
unity_tester_unity_tool_ui_on_prev_preview_clicked (GtkButton* button,
                                                    UnityTesterUnityToolUi* self)
{
	GtkTreeModel* _tmp0_;
	GtkTreeModel* model = NULL;
	GtkTreeModel* _tmp1_;
	GtkTreeModel* _tmp2_;
	GtkTreeIter iter = {0};
	GtkTreeIter* _tmp3_;
	GtkTreeModel* _tmp4_;
	gboolean _tmp5_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (button != NULL);
	_tmp0_ = self->priv->last_active_model;
	_vala_return_if_fail (_tmp0_ != NULL, "last_active_model != null");
	_tmp1_ = self->priv->last_active_model;
	_tmp2_ = _g_object_ref0 (_tmp1_);
	model = _tmp2_;
	_tmp3_ = self->priv->last_active_iter;
	iter = *_tmp3_;
	_tmp4_ = self->priv->last_active_model;
	_tmp5_ = gtk_tree_model_iter_previous (_tmp4_, &iter);
	if (_tmp5_) {
		GtkTreeIter _tmp6_;
		GtkTreeIter* _tmp7_;
		GtkTreeSelection* _tmp8_;
		GtkTreeIter _tmp9_;
		GVariant** result_arr = NULL;
		GtkTreeSelection* _tmp10_;
		gint _tmp11_ = 0;
		GVariant** _tmp12_;
		gint result_arr_length1;
		gint _result_arr_size_;
		const gchar* _tmp13_;
		GVariant** _tmp14_;
		gint _tmp14__length1;
		GtkTreeModel* _tmp15_;
		GtkTreeIter _tmp16_;
		_tmp6_ = iter;
		_tmp7_ = __gtk_tree_iter_dup0 (&_tmp6_);
		_g_free0 (self->priv->last_active_iter);
		self->priv->last_active_iter = _tmp7_;
		_tmp8_ = self->priv->results_view_selection;
		_tmp9_ = iter;
		gtk_tree_selection_select_iter (_tmp8_, &_tmp9_);
		_tmp10_ = self->priv->results_view_selection;
		_tmp12_ = unity_tester_unity_tool_ui_get_selected_result_variant (self, _tmp10_, &_tmp11_);
		result_arr = _tmp12_;
		result_arr_length1 = _tmp11_;
		_result_arr_size_ = result_arr_length1;
		_tmp13_ = self->priv->current_channel_id;
		_tmp14_ = result_arr;
		_tmp14__length1 = result_arr_length1;
		unity_tester_unity_tool_ui_activate_preview (self, _tmp13_, _tmp14_, _tmp14__length1);
		_tmp15_ = model;
		_tmp16_ = iter;
		unity_tester_unity_tool_ui_update_next_prev_buttons (self, _tmp15_, &_tmp16_);
		result_arr = (_vala_array_free (result_arr, result_arr_length1, (GDestroyNotify) g_variant_unref), NULL);
	}
	_g_object_unref0 (model);
}


/**
     * Handler for 'Request preview' context menu item.
     */
void
unity_tester_unity_tool_ui_on_next_preview_clicked (GtkMenuItem* item,
                                                    UnityTesterUnityToolUi* self)
{
	GtkTreeModel* _tmp0_;
	GtkTreeModel* model = NULL;
	GtkTreeModel* _tmp1_;
	GtkTreeModel* _tmp2_;
	GtkTreeIter iter = {0};
	GtkTreeIter* _tmp3_;
	GtkTreeModel* _tmp4_;
	gboolean _tmp5_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (item != NULL);
	_tmp0_ = self->priv->last_active_model;
	_vala_return_if_fail (_tmp0_ != NULL, "last_active_model != null");
	_tmp1_ = self->priv->last_active_model;
	_tmp2_ = _g_object_ref0 (_tmp1_);
	model = _tmp2_;
	_tmp3_ = self->priv->last_active_iter;
	iter = *_tmp3_;
	_tmp4_ = self->priv->last_active_model;
	_tmp5_ = gtk_tree_model_iter_next (_tmp4_, &iter);
	if (_tmp5_) {
		GtkTreeIter _tmp6_;
		GtkTreeIter* _tmp7_;
		GtkTreeSelection* _tmp8_;
		GtkTreeIter _tmp9_;
		GVariant** result_arr = NULL;
		GtkTreeSelection* _tmp10_;
		gint _tmp11_ = 0;
		GVariant** _tmp12_;
		gint result_arr_length1;
		gint _result_arr_size_;
		const gchar* _tmp13_;
		GVariant** _tmp14_;
		gint _tmp14__length1;
		GtkTreeModel* _tmp15_;
		GtkTreeIter _tmp16_;
		_tmp6_ = iter;
		_tmp7_ = __gtk_tree_iter_dup0 (&_tmp6_);
		_g_free0 (self->priv->last_active_iter);
		self->priv->last_active_iter = _tmp7_;
		_tmp8_ = self->priv->results_view_selection;
		_tmp9_ = iter;
		gtk_tree_selection_select_iter (_tmp8_, &_tmp9_);
		_tmp10_ = self->priv->results_view_selection;
		_tmp12_ = unity_tester_unity_tool_ui_get_selected_result_variant (self, _tmp10_, &_tmp11_);
		result_arr = _tmp12_;
		result_arr_length1 = _tmp11_;
		_result_arr_size_ = result_arr_length1;
		_tmp13_ = self->priv->current_channel_id;
		_tmp14_ = result_arr;
		_tmp14__length1 = result_arr_length1;
		unity_tester_unity_tool_ui_activate_preview (self, _tmp13_, _tmp14_, _tmp14__length1);
		_tmp15_ = model;
		_tmp16_ = iter;
		unity_tester_unity_tool_ui_update_next_prev_buttons (self, _tmp15_, &_tmp16_);
		result_arr = (_vala_array_free (result_arr, result_arr_length1, (GDestroyNotify) g_variant_unref), NULL);
	}
	_g_object_unref0 (model);
}


/**
     * Handler for 'Activate result' context menu item.
     */
static Block12Data*
block12_data_ref (Block12Data* _data12_)
{
	g_atomic_int_inc (&_data12_->_ref_count_);
	return _data12_;
}


static void
block12_data_unref (void * _userdata_)
{
	Block12Data* _data12_;
	_data12_ = (Block12Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data12_->_ref_count_)) {
		UnityTesterUnityToolUi* self;
		self = _data12_->self;
		__vala_UnityProtocolActivationReplyRaw_free0 (_data12_->reply_struct);
		_g_object_unref0 (self);
		g_slice_free (Block12Data, _data12_);
	}
}


static void
__lambda18_ (Block12Data* _data12_,
             GObject* obj,
             GAsyncResult* res)
{
	UnityTesterUnityToolUi* self;
	GError * _inner_error_ = NULL;
	self = _data12_->self;
	g_return_if_fail (res != NULL);
	{
		UnityProtocolActivationReplyRaw _tmp0_ = {0};
		UnityProtocolActivationReplyRaw _tmp1_;
		UnityProtocolActivationReplyRaw _tmp2_;
		UnityProtocolActivationReplyRaw* _tmp3_;
		UnityProtocolActivationReplyRaw _tmp4_;
		unity_tester_unity_tool_ui_send_activate_finish (self, res, &_tmp0_, &_inner_error_);
		__vala_UnityProtocolActivationReplyRaw_free0 (_data12_->reply_struct);
		_tmp1_ = _tmp0_;
		_tmp2_ = _tmp1_;
		_tmp3_ = __unity_protocol_activation_reply_raw_dup0 (&_tmp2_);
		_data12_->reply_struct = _tmp3_;
		unity_protocol_activation_reply_raw_destroy (&_tmp1_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			if (_inner_error_->domain == G_IO_ERROR) {
				goto __catch18_g_io_error;
			}
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
		_tmp4_ = *_data12_->reply_struct;
		unity_tester_unity_tool_ui_handle_activation_reply (self, &_tmp4_);
	}
	goto __finally18;
	__catch18_g_io_error:
	{
		GError* e = NULL;
		GError* _tmp5_;
		const gchar* _tmp6_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp5_ = e;
		_tmp6_ = _tmp5_->message;
		unity_tester_unity_tool_ui_handle_error (self, _tmp6_);
		_g_error_free0 (e);
	}
	__finally18:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
}


static void
___lambda18__gasync_ready_callback (GObject* source_object,
                                    GAsyncResult* res,
                                    gpointer self)
{
	__lambda18_ (self, source_object, res);
	block12_data_unref (self);
}


void
unity_tester_unity_tool_ui_on_activate_result (GtkMenuItem* item,
                                               UnityTesterUnityToolUi* self)
{
	Block12Data* _data12_;
	GVariant** result_arr = NULL;
	GtkTreeSelection* _tmp0_;
	gint _tmp1_ = 0;
	GVariant** _tmp2_;
	gint result_arr_length1;
	gint _result_arr_size_;
	const gchar* _tmp3_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (item != NULL);
	_data12_ = g_slice_new0 (Block12Data);
	_data12_->_ref_count_ = 1;
	_data12_->self = g_object_ref (self);
	_tmp0_ = self->priv->results_view_selection;
	_tmp2_ = unity_tester_unity_tool_ui_get_selected_result_variant (self, _tmp0_, &_tmp1_);
	result_arr = _tmp2_;
	result_arr_length1 = _tmp1_;
	_result_arr_size_ = result_arr_length1;
	_data12_->reply_struct = NULL;
	_tmp3_ = self->priv->current_channel_id;
	unity_tester_unity_tool_ui_send_activate (self, _tmp3_, result_arr, result_arr_length1, (guint) UNITY_PROTOCOL_ACTION_TYPE_ACTIVATE_RESULT, NULL, ___lambda18__gasync_ready_callback, block12_data_ref (_data12_));
	result_arr = (_vala_array_free (result_arr, result_arr_length1, (GDestroyNotify) g_variant_unref), NULL);
	block12_data_unref (_data12_);
	_data12_ = NULL;
}


static GVariant*
_variant_new4 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static GVariant*
_variant_new5 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static GVariant*
_variant_new6 (guint value)
{
	return g_variant_ref_sink (g_variant_new_uint32 (value));
}


static GVariant*
_variant_new7 (guint value)
{
	return g_variant_ref_sink (g_variant_new_uint32 (value));
}


static GVariant*
_variant_new8 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static GVariant*
_variant_new9 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static GVariant*
_variant_new10 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static GVariant*
_variant_new11 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static GVariant**
unity_tester_unity_tool_ui_get_selected_result_variant (UnityTesterUnityToolUi* self,
                                                        GtkTreeSelection* selection,
                                                        int* result_length1)
{
	GVariant** result = NULL;
	GVariant** result_props = NULL;
	GVariant** _tmp0_;
	gint result_props_length1;
	gint _result_props_size_;
	GtkTreeModel* model = NULL;
	GtkTreeIter iter = {0};
	GtkTreeModel* _tmp1_ = NULL;
	GtkTreeIter _tmp2_ = {0};
	gboolean _tmp3_;
	GtkTreeModel* _tmp4_;
	GVariant** _tmp68_;
	gint _tmp68__length1;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (self != NULL, NULL);
	g_return_val_if_fail (selection != NULL, NULL);
	_tmp0_ = g_new0 (GVariant*, 9 + 1);
	result_props = _tmp0_;
	result_props_length1 = 9;
	_result_props_size_ = result_props_length1;
	_tmp3_ = gtk_tree_selection_get_selected (selection, &_tmp1_, &_tmp2_);
	_g_object_unref0 (model);
	_tmp4_ = _g_object_ref0 (_tmp1_);
	model = _tmp4_;
	iter = _tmp2_;
	if (_tmp3_) {
		GValue value = {0};
		GtkTreeModel* _tmp5_;
		GtkTreeIter _tmp6_;
		GValue _tmp7_ = {0};
		GVariant** _tmp8_;
		gint _tmp8__length1;
		const gchar* _tmp9_;
		GVariant* _tmp10_;
		GVariant* _tmp11_;
		GtkTreeModel* _tmp12_;
		GtkTreeIter _tmp13_;
		GValue _tmp14_ = {0};
		GVariant** _tmp15_;
		gint _tmp15__length1;
		const gchar* _tmp16_;
		GVariant* _tmp17_;
		GVariant* _tmp18_;
		GtkTreeModel* _tmp19_;
		GtkTreeIter _tmp20_;
		GValue _tmp21_ = {0};
		GVariant** _tmp22_;
		gint _tmp22__length1;
		GVariant* _tmp23_;
		GVariant* _tmp24_;
		GtkTreeModel* _tmp25_;
		GtkTreeIter _tmp26_;
		GValue _tmp27_ = {0};
		GVariant** _tmp28_;
		gint _tmp28__length1;
		GVariant* _tmp29_;
		GVariant* _tmp30_;
		GtkTreeModel* _tmp31_;
		GtkTreeIter _tmp32_;
		GValue _tmp33_ = {0};
		GVariant** _tmp34_;
		gint _tmp34__length1;
		const gchar* _tmp35_;
		GVariant* _tmp36_;
		GVariant* _tmp37_;
		GtkTreeModel* _tmp38_;
		GtkTreeIter _tmp39_;
		GValue _tmp40_ = {0};
		GVariant** _tmp41_;
		gint _tmp41__length1;
		const gchar* _tmp42_;
		GVariant* _tmp43_;
		GVariant* _tmp44_;
		GtkTreeModel* _tmp45_;
		GtkTreeIter _tmp46_;
		GValue _tmp47_ = {0};
		GVariant** _tmp48_;
		gint _tmp48__length1;
		const gchar* _tmp49_;
		GVariant* _tmp50_;
		GVariant* _tmp51_;
		GtkTreeModel* _tmp52_;
		GtkTreeIter _tmp53_;
		GValue _tmp54_ = {0};
		GVariant** _tmp55_;
		gint _tmp55__length1;
		const gchar* _tmp56_;
		GVariant* _tmp57_;
		GVariant* _tmp58_;
		GtkTreeModel* _tmp59_;
		GtkTreeIter _tmp60_;
		GValue _tmp61_ = {0};
		GVariant* _tmp62_ = NULL;
		const gchar* _tmp63_;
		GVariant* _tmp64_;
		GVariant** _tmp65_;
		gint _tmp65__length1;
		GVariant* _tmp66_;
		GVariant* _tmp67_;
		_tmp5_ = model;
		_tmp6_ = iter;
		gtk_tree_model_get_value (_tmp5_, &_tmp6_, 0, &_tmp7_);
		G_IS_VALUE (&value) ? (g_value_unset (&value), NULL) : NULL;
		value = _tmp7_;
		_tmp8_ = result_props;
		_tmp8__length1 = result_props_length1;
		_tmp9_ = g_value_get_string (&value);
		_tmp10_ = _variant_new4 (_tmp9_);
		_g_variant_unref0 (_tmp8_[0]);
		_tmp8_[0] = _tmp10_;
		_tmp11_ = _tmp8_[0];
		_tmp12_ = model;
		_tmp13_ = iter;
		gtk_tree_model_get_value (_tmp12_, &_tmp13_, 1, &_tmp14_);
		G_IS_VALUE (&value) ? (g_value_unset (&value), NULL) : NULL;
		value = _tmp14_;
		_tmp15_ = result_props;
		_tmp15__length1 = result_props_length1;
		_tmp16_ = g_value_get_string (&value);
		_tmp17_ = _variant_new5 (_tmp16_);
		_g_variant_unref0 (_tmp15_[1]);
		_tmp15_[1] = _tmp17_;
		_tmp18_ = _tmp15_[1];
		_tmp19_ = model;
		_tmp20_ = iter;
		gtk_tree_model_get_value (_tmp19_, &_tmp20_, 2, &_tmp21_);
		G_IS_VALUE (&value) ? (g_value_unset (&value), NULL) : NULL;
		value = _tmp21_;
		_tmp22_ = result_props;
		_tmp22__length1 = result_props_length1;
		_tmp23_ = _variant_new6 (g_value_get_uint (&value));
		_g_variant_unref0 (_tmp22_[2]);
		_tmp22_[2] = _tmp23_;
		_tmp24_ = _tmp22_[2];
		_tmp25_ = model;
		_tmp26_ = iter;
		gtk_tree_model_get_value (_tmp25_, &_tmp26_, 3, &_tmp27_);
		G_IS_VALUE (&value) ? (g_value_unset (&value), NULL) : NULL;
		value = _tmp27_;
		_tmp28_ = result_props;
		_tmp28__length1 = result_props_length1;
		_tmp29_ = _variant_new7 (g_value_get_uint (&value));
		_g_variant_unref0 (_tmp28_[3]);
		_tmp28_[3] = _tmp29_;
		_tmp30_ = _tmp28_[3];
		_tmp31_ = model;
		_tmp32_ = iter;
		gtk_tree_model_get_value (_tmp31_, &_tmp32_, 4, &_tmp33_);
		G_IS_VALUE (&value) ? (g_value_unset (&value), NULL) : NULL;
		value = _tmp33_;
		_tmp34_ = result_props;
		_tmp34__length1 = result_props_length1;
		_tmp35_ = g_value_get_string (&value);
		_tmp36_ = _variant_new8 (_tmp35_);
		_g_variant_unref0 (_tmp34_[4]);
		_tmp34_[4] = _tmp36_;
		_tmp37_ = _tmp34_[4];
		_tmp38_ = model;
		_tmp39_ = iter;
		gtk_tree_model_get_value (_tmp38_, &_tmp39_, 5, &_tmp40_);
		G_IS_VALUE (&value) ? (g_value_unset (&value), NULL) : NULL;
		value = _tmp40_;
		_tmp41_ = result_props;
		_tmp41__length1 = result_props_length1;
		_tmp42_ = g_value_get_string (&value);
		_tmp43_ = _variant_new9 (_tmp42_);
		_g_variant_unref0 (_tmp41_[5]);
		_tmp41_[5] = _tmp43_;
		_tmp44_ = _tmp41_[5];
		_tmp45_ = model;
		_tmp46_ = iter;
		gtk_tree_model_get_value (_tmp45_, &_tmp46_, 6, &_tmp47_);
		G_IS_VALUE (&value) ? (g_value_unset (&value), NULL) : NULL;
		value = _tmp47_;
		_tmp48_ = result_props;
		_tmp48__length1 = result_props_length1;
		_tmp49_ = g_value_get_string (&value);
		_tmp50_ = _variant_new10 (_tmp49_);
		_g_variant_unref0 (_tmp48_[6]);
		_tmp48_[6] = _tmp50_;
		_tmp51_ = _tmp48_[6];
		_tmp52_ = model;
		_tmp53_ = iter;
		gtk_tree_model_get_value (_tmp52_, &_tmp53_, 7, &_tmp54_);
		G_IS_VALUE (&value) ? (g_value_unset (&value), NULL) : NULL;
		value = _tmp54_;
		_tmp55_ = result_props;
		_tmp55__length1 = result_props_length1;
		_tmp56_ = g_value_get_string (&value);
		_tmp57_ = _variant_new11 (_tmp56_);
		_g_variant_unref0 (_tmp55_[7]);
		_tmp55_[7] = _tmp57_;
		_tmp58_ = _tmp55_[7];
		_tmp59_ = model;
		_tmp60_ = iter;
		gtk_tree_model_get_value (_tmp59_, &_tmp60_, 8, &_tmp61_);
		G_IS_VALUE (&value) ? (g_value_unset (&value), NULL) : NULL;
		value = _tmp61_;
		_tmp63_ = g_value_get_string (&value);
		_tmp64_ = g_variant_parse (NULL, _tmp63_, NULL, NULL, &_inner_error_);
		_tmp62_ = _tmp64_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			G_IS_VALUE (&value) ? (g_value_unset (&value), NULL) : NULL;
			_g_object_unref0 (model);
			result_props = (_vala_array_free (result_props, result_props_length1, (GDestroyNotify) g_variant_unref), NULL);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return NULL;
		}
		_tmp65_ = result_props;
		_tmp65__length1 = result_props_length1;
		_tmp66_ = _tmp62_;
		_tmp62_ = NULL;
		_g_variant_unref0 (_tmp65_[8]);
		_tmp65_[8] = _tmp66_;
		_tmp67_ = _tmp65_[8];
		_g_variant_unref0 (_tmp62_);
		G_IS_VALUE (&value) ? (g_value_unset (&value), NULL) : NULL;
	}
	_tmp68_ = result_props;
	_tmp68__length1 = result_props_length1;
	if (result_length1) {
		*result_length1 = _tmp68__length1;
	}
	result = _tmp68_;
	_g_object_unref0 (model);
	return result;
}


/**
     * Render preview and action buttons depending on preview type (if applicable); log reply.
     */
static void
unity_tester_unity_tool_ui_handle_activation_reply (UnityTesterUnityToolUi* self,
                                                    UnityProtocolActivationReplyRaw* reply_struct)
{
	UnityProtocolActivationReplyRaw _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	UnityProtocolActivationReplyRaw _tmp7_;
	guint _tmp8_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (reply_struct != NULL);
	_tmp0_ = *reply_struct;
	_tmp1_ = unity_tester_unity_tool_ui_dump_activation_reply (&_tmp0_);
	_tmp2_ = _tmp1_;
	_tmp3_ = g_strconcat ("Activate reply: ", _tmp2_, NULL);
	_tmp4_ = _tmp3_;
	_tmp5_ = g_strconcat (_tmp4_, "\n", NULL);
	_tmp6_ = _tmp5_;
	unity_tester_unity_tool_ui_append_log_message (self, _tmp6_);
	_g_free0 (_tmp6_);
	_g_free0 (_tmp4_);
	_g_free0 (_tmp2_);
	_tmp7_ = *reply_struct;
	_tmp8_ = _tmp7_.handled;
	if (_tmp8_ == ((guint) UNITY_HANDLED_TYPE_SHOW_PREVIEW)) {
		UnityProtocolActivationReplyRaw _tmp9_;
		GHashTable* _tmp10_;
		_tmp9_ = *reply_struct;
		_tmp10_ = _tmp9_.hints;
		if (g_hash_table_contains (_tmp10_, "preview")) {
			UnityProtocolActivationReplyRaw _tmp11_;
			GHashTable* _tmp12_;
			gconstpointer _tmp13_;
			_tmp11_ = *reply_struct;
			_tmp12_ = _tmp11_.hints;
			_tmp13_ = g_hash_table_lookup (_tmp12_, "preview");
			unity_tester_unity_tool_ui_handle_preview (self, (GVariant*) _tmp13_);
		} else {
			unity_tester_unity_tool_ui_handle_error (self, "Reply hints don't contain preview element");
		}
	} else {
		unity_tester_unity_tool_ui_remove_preview (self);
		unity_tester_unity_tool_ui_show_no_preview (self);
	}
}


static void
unity_tester_unity_tool_ui_handle_preview (UnityTesterUnityToolUi* self,
                                           GVariant* preview_var)
{
	UnityProtocolPreview* reconstructed = NULL;
	UnityProtocolPreview* _tmp0_;
	GtkTextBuffer* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	const gchar* _tmp4_;
	UnityTesterPreviewRenderer* _tmp5_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (preview_var != NULL);
	_tmp0_ = unity_protocol_preview_parse (preview_var);
	reconstructed = _tmp0_;
	_tmp1_ = self->priv->preview_raw_data;
	_tmp2_ = g_variant_print (preview_var, TRUE);
	_tmp3_ = _tmp2_;
	gtk_text_buffer_set_text (_tmp1_, _tmp3_, -1);
	_g_free0 (_tmp3_);
	_tmp4_ = self->priv->preview_scope_uri;
	_tmp5_ = unity_tester_preview_renderer_create (reconstructed, _tmp4_);
	_g_object_unref0 (self->priv->preview_renderer);
	self->priv->preview_renderer = _tmp5_;
	unity_tester_unity_tool_ui_update_preview (self);
	_g_object_unref0 (reconstructed);
}


static void
_unity_tester_unity_tool_ui_on_preview_action_clicked_unity_tester_preview_renderer_preview_action_clicked (UnityTesterPreviewRenderer* _sender,
                                                                                                            const gchar* action_id,
                                                                                                            gpointer self)
{
	unity_tester_unity_tool_ui_on_preview_action_clicked ((UnityTesterUnityToolUi*) self, _sender, action_id);
}


static void
_unity_tester_unity_tool_ui_on_preview_closed_clicked_unity_tester_preview_renderer_preview_closed_clicked (UnityTesterPreviewRenderer* _sender,
                                                                                                            gpointer self)
{
	unity_tester_unity_tool_ui_on_preview_closed_clicked ((UnityTesterUnityToolUi*) self, _sender);
}


static void
_unity_tester_unity_tool_ui_on_change_selected_series_item_clicked_unity_tester_series_preview_renderer_change_selected_series_item_clicked (UnityTesterSeriesPreviewRenderer* _sender,
                                                                                                                                             const gchar* uri,
                                                                                                                                             gint index,
                                                                                                                                             gpointer self)
{
	unity_tester_unity_tool_ui_on_change_selected_series_item_clicked ((UnityTesterUnityToolUi*) self, _sender, uri, index);
}


static void
_unity_tester_unity_tool_ui_on_play_music_track_clicked_unity_tester_music_preview_renderer_play_music_track_clicked (UnityTesterMusicPreviewRenderer* _sender,
                                                                                                                      const gchar* uri,
                                                                                                                      gpointer self)
{
	unity_tester_unity_tool_ui_on_play_music_track_clicked ((UnityTesterUnityToolUi*) self, _sender, uri);
}


static void
_unity_tester_unity_tool_ui_on_pause_music_track_clicked_unity_tester_music_preview_renderer_pause_music_track_clicked (UnityTesterMusicPreviewRenderer* _sender,
                                                                                                                        const gchar* uri,
                                                                                                                        gpointer self)
{
	unity_tester_unity_tool_ui_on_pause_music_track_clicked ((UnityTesterUnityToolUi*) self, _sender, uri);
}


static void
unity_tester_unity_tool_ui_update_preview (UnityTesterUnityToolUi* self)
{
	UnityTesterPreviewRenderer* _tmp0_;
	g_return_if_fail (self != NULL);
	unity_tester_unity_tool_ui_remove_preview (self);
	_tmp0_ = self->priv->preview_renderer;
	if (_tmp0_ != NULL) {
		UnityTesterPreviewRenderer* _tmp1_;
		UnityTesterPreviewRenderer* _tmp2_;
		UnityTesterPreviewRenderer* _tmp3_;
		GtkViewport* _tmp10_;
		UnityTesterPreviewRenderer* _tmp11_;
		GtkWidget* _tmp12_;
		GtkWidget* _tmp13_;
		GtkViewport* _tmp14_;
		GtkAlignment* _tmp15_;
		UnityTesterPreviewRenderer* _tmp16_;
		GtkWidget* _tmp17_;
		GtkWidget* _tmp18_;
		GtkAlignment* _tmp19_;
		GtkAlignment* _tmp20_;
		UnityTesterPreviewRenderer* _tmp21_;
		GtkWidget* _tmp22_;
		GtkWidget* _tmp23_;
		GtkAlignment* _tmp24_;
		_tmp1_ = self->priv->preview_renderer;
		g_signal_connect_object (_tmp1_, "preview-action-clicked", (GCallback) _unity_tester_unity_tool_ui_on_preview_action_clicked_unity_tester_preview_renderer_preview_action_clicked, self, 0);
		_tmp2_ = self->priv->preview_renderer;
		g_signal_connect_object (_tmp2_, "preview-closed-clicked", (GCallback) _unity_tester_unity_tool_ui_on_preview_closed_clicked_unity_tester_preview_renderer_preview_closed_clicked, self, 0);
		_tmp3_ = self->priv->preview_renderer;
		if (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER)) {
			UnityTesterPreviewRenderer* _tmp4_;
			_tmp4_ = self->priv->preview_renderer;
			g_signal_connect_object (G_TYPE_CHECK_INSTANCE_CAST (_tmp4_, UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER, UnityTesterSeriesPreviewRenderer), "change-selected-series-item-clicked", (GCallback) _unity_tester_unity_tool_ui_on_change_selected_series_item_clicked_unity_tester_series_preview_renderer_change_selected_series_item_clicked, self, 0);
		} else {
			UnityTesterPreviewRenderer* _tmp5_;
			_tmp5_ = self->priv->preview_renderer;
			if (G_TYPE_CHECK_INSTANCE_TYPE (_tmp5_, UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER)) {
				UnityTesterMusicPreviewRenderer* renderer = NULL;
				UnityTesterPreviewRenderer* _tmp6_;
				UnityTesterMusicPreviewRenderer* _tmp7_;
				UnityTesterMusicPreviewRenderer* _tmp8_;
				UnityTesterMusicPreviewRenderer* _tmp9_;
				_tmp6_ = self->priv->preview_renderer;
				_tmp7_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp6_, UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER) ? ((UnityTesterMusicPreviewRenderer*) _tmp6_) : NULL);
				renderer = _tmp7_;
				_tmp8_ = renderer;
				g_signal_connect_object (_tmp8_, "play-music-track-clicked", (GCallback) _unity_tester_unity_tool_ui_on_play_music_track_clicked_unity_tester_music_preview_renderer_play_music_track_clicked, self, 0);
				_tmp9_ = renderer;
				g_signal_connect_object (_tmp9_, "pause-music-track-clicked", (GCallback) _unity_tester_unity_tool_ui_on_pause_music_track_clicked_unity_tester_music_preview_renderer_pause_music_track_clicked, self, 0);
				_g_object_unref0 (renderer);
			}
		}
		_tmp10_ = self->priv->preview_viewport;
		_tmp11_ = self->priv->preview_renderer;
		_tmp12_ = unity_tester_preview_renderer_get_widget (_tmp11_);
		_tmp13_ = _tmp12_;
		gtk_container_add_with_properties ((GtkContainer*) _tmp10_, _tmp13_, NULL);
		_g_object_unref0 (_tmp13_);
		_tmp14_ = self->priv->preview_viewport;
		gtk_widget_show_all ((GtkWidget*) _tmp14_);
		_tmp15_ = self->priv->preview_buttons_container;
		_tmp16_ = self->priv->preview_renderer;
		_tmp17_ = unity_tester_preview_renderer_get_buttons (_tmp16_);
		_tmp18_ = _tmp17_;
		gtk_container_add_with_properties ((GtkContainer*) _tmp15_, _tmp18_, NULL);
		_g_object_unref0 (_tmp18_);
		_tmp19_ = self->priv->preview_buttons_container;
		gtk_widget_show_all ((GtkWidget*) _tmp19_);
		_tmp20_ = self->priv->preview_extra_buttons_container;
		_tmp21_ = self->priv->preview_renderer;
		_tmp22_ = unity_tester_preview_renderer_get_extra_buttons (_tmp21_);
		_tmp23_ = _tmp22_;
		gtk_container_add_with_properties ((GtkContainer*) _tmp20_, _tmp23_, NULL);
		_g_object_unref0 (_tmp23_);
		_tmp24_ = self->priv->preview_extra_buttons_container;
		gtk_widget_show_all ((GtkWidget*) _tmp24_);
	} else {
		unity_tester_unity_tool_ui_handle_error (self, "Unknown preview type");
		unity_tester_unity_tool_ui_show_no_preview (self);
	}
}


static void
unity_tester_unity_tool_ui_show_no_preview (UnityTesterUnityToolUi* self)
{
	GtkTextBuffer* _tmp0_;
	GtkBox* box = NULL;
	GtkBox* _tmp1_;
	GtkLabel* label = NULL;
	GtkLabel* _tmp2_;
	GtkViewport* _tmp3_;
	g_return_if_fail (self != NULL);
	_g_object_unref0 (self->priv->preview_renderer);
	self->priv->preview_renderer = NULL;
	_tmp0_ = self->priv->preview_raw_data;
	gtk_text_buffer_set_text (_tmp0_, "", -1);
	_tmp1_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
	g_object_ref_sink (_tmp1_);
	box = _tmp1_;
	_tmp2_ = (GtkLabel*) gtk_label_new ("No preview");
	g_object_ref_sink (_tmp2_);
	label = _tmp2_;
	gtk_box_pack_start (box, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
	_tmp3_ = self->priv->preview_viewport;
	gtk_container_add_with_properties ((GtkContainer*) _tmp3_, (GtkWidget*) box, NULL);
	gtk_widget_show_all ((GtkWidget*) box);
	_g_object_unref0 (label);
	_g_object_unref0 (box);
}


/**
     * Destroys all preview objects in the 'Render' tab.
     */
static void
__lambda7_ (UnityTesterUnityToolUi* self,
            GtkWidget* obj)
{
	g_return_if_fail (obj != NULL);
	gtk_widget_destroy (obj);
}


static void
___lambda7__gtk_callback (GtkWidget* widget,
                          gpointer self)
{
	__lambda7_ ((UnityTesterUnityToolUi*) self, widget);
}


static void
__lambda8_ (UnityTesterUnityToolUi* self,
            GtkWidget* btn)
{
	g_return_if_fail (btn != NULL);
	gtk_widget_destroy (btn);
}


static void
___lambda8__gtk_callback (GtkWidget* widget,
                          gpointer self)
{
	__lambda8_ ((UnityTesterUnityToolUi*) self, widget);
}


static void
__lambda9_ (UnityTesterUnityToolUi* self,
            GtkWidget* btn)
{
	g_return_if_fail (btn != NULL);
	gtk_widget_destroy (btn);
}


static void
___lambda9__gtk_callback (GtkWidget* widget,
                          gpointer self)
{
	__lambda9_ ((UnityTesterUnityToolUi*) self, widget);
}


static void
unity_tester_unity_tool_ui_remove_preview (UnityTesterUnityToolUi* self)
{
	GtkViewport* _tmp0_;
	GtkAlignment* _tmp1_;
	GtkAlignment* _tmp2_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->preview_viewport;
	gtk_container_foreach ((GtkContainer*) _tmp0_, ___lambda7__gtk_callback, self);
	_tmp1_ = self->priv->preview_buttons_container;
	gtk_container_foreach ((GtkContainer*) _tmp1_, ___lambda8__gtk_callback, self);
	_tmp2_ = self->priv->preview_extra_buttons_container;
	gtk_container_foreach ((GtkContainer*) _tmp2_, ___lambda9__gtk_callback, self);
}


static void
unity_tester_unity_tool_ui_on_preview_closed_clicked (UnityTesterUnityToolUi* self,
                                                      UnityTesterPreviewRenderer* renderer)
{
	UnityProtocolPreview* _tmp0_;
	UnityProtocolPreview* _tmp1_;
	UnityProtocolPreview* _tmp2_;
	UnityProtocolPreview* _tmp3_;
	UnityProtocolPreview* _tmp4_;
	UnityProtocolPreview* _tmp5_;
	GHashTable* _tmp6_;
	GHashTable* _tmp7_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (renderer != NULL);
	_tmp0_ = unity_tester_preview_renderer_get_preview (renderer);
	_tmp1_ = _tmp0_;
	unity_protocol_preview_begin_updates (_tmp1_);
	_tmp2_ = unity_tester_preview_renderer_get_preview (renderer);
	_tmp3_ = _tmp2_;
	unity_protocol_preview_preview_closed (_tmp3_);
	_tmp4_ = unity_tester_preview_renderer_get_preview (renderer);
	_tmp5_ = _tmp4_;
	_tmp6_ = unity_protocol_preview_end_updates_as_hashtable (_tmp5_);
	_tmp7_ = _tmp6_;
	unity_tester_unity_tool_ui_handle_preview_signals (self, _tmp7_);
	_g_hash_table_unref0 (_tmp7_);
	unity_tester_unity_tool_ui_remove_preview (self);
}


static Block13Data*
block13_data_ref (Block13Data* _data13_)
{
	g_atomic_int_inc (&_data13_->_ref_count_);
	return _data13_;
}


static void
block13_data_unref (void * _userdata_)
{
	Block13Data* _data13_;
	_data13_ = (Block13Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data13_->_ref_count_)) {
		UnityTesterUnityToolUi* self;
		self = _data13_->self;
		__vala_UnityProtocolActivationReplyRaw_free0 (_data13_->reply_struct);
		_g_object_unref0 (self);
		g_slice_free (Block13Data, _data13_);
	}
}


static GVariant*
_variant_new12 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static void
__lambda15_ (Block13Data* _data13_,
             GObject* obj,
             GAsyncResult* res)
{
	UnityTesterUnityToolUi* self;
	GError * _inner_error_ = NULL;
	self = _data13_->self;
	g_return_if_fail (res != NULL);
	{
		UnityProtocolActivationReplyRaw _tmp0_ = {0};
		UnityProtocolActivationReplyRaw _tmp1_;
		UnityProtocolActivationReplyRaw _tmp2_;
		UnityProtocolActivationReplyRaw* _tmp3_;
		UnityProtocolActivationReplyRaw _tmp4_;
		unity_tester_unity_tool_ui_send_activate_finish (self, res, &_tmp0_, &_inner_error_);
		__vala_UnityProtocolActivationReplyRaw_free0 (_data13_->reply_struct);
		_tmp1_ = _tmp0_;
		_tmp2_ = _tmp1_;
		_tmp3_ = __unity_protocol_activation_reply_raw_dup0 (&_tmp2_);
		_data13_->reply_struct = _tmp3_;
		unity_protocol_activation_reply_raw_destroy (&_tmp1_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			if (_inner_error_->domain == G_IO_ERROR) {
				goto __catch19_g_io_error;
			}
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
		_tmp4_ = *_data13_->reply_struct;
		unity_tester_unity_tool_ui_handle_activation_reply (self, &_tmp4_);
	}
	goto __finally19;
	__catch19_g_io_error:
	{
		GError* e = NULL;
		GError* _tmp5_;
		const gchar* _tmp6_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp5_ = e;
		_tmp6_ = _tmp5_->message;
		unity_tester_unity_tool_ui_handle_error (self, _tmp6_);
		_g_error_free0 (e);
	}
	__finally19:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
}


static void
___lambda15__gasync_ready_callback (GObject* source_object,
                                    GAsyncResult* res,
                                    gpointer self)
{
	__lambda15_ (self, source_object, res);
	block13_data_unref (self);
}


static void
unity_tester_unity_tool_ui_on_preview_action_clicked (UnityTesterUnityToolUi* self,
                                                      UnityTesterPreviewRenderer* renderer,
                                                      const gchar* action_id)
{
	Block13Data* _data13_;
	GHashTable* hints = NULL;
	GHashTable* _tmp0_;
	gchar* _tmp1_;
	GVariant* _tmp2_;
	const gchar* _tmp3_;
	GtkTreeSelection* _tmp4_;
	gint _tmp5_ = 0;
	GVariant** _tmp6_;
	GVariant** _tmp7_;
	gint _tmp7__length1;
	g_return_if_fail (self != NULL);
	g_return_if_fail (renderer != NULL);
	g_return_if_fail (action_id != NULL);
	_data13_ = g_slice_new0 (Block13Data);
	_data13_->_ref_count_ = 1;
	_data13_->self = g_object_ref (self);
	_data13_->reply_struct = NULL;
	_tmp0_ = g_hash_table_new_full (NULL, NULL, _g_free0_, _g_variant_unref0_);
	hints = _tmp0_;
	_tmp1_ = g_strdup ("preview-action-id");
	_tmp2_ = _variant_new12 (action_id);
	g_hash_table_insert (hints, _tmp1_, _tmp2_);
	_tmp3_ = self->priv->current_channel_id;
	_tmp4_ = self->priv->results_view_selection;
	_tmp6_ = unity_tester_unity_tool_ui_get_selected_result_variant (self, _tmp4_, &_tmp5_);
	_tmp7_ = _tmp6_;
	_tmp7__length1 = _tmp5_;
	unity_tester_unity_tool_ui_send_activate (self, _tmp3_, _tmp7_, _tmp5_, (guint) UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_ACTION, hints, ___lambda15__gasync_ready_callback, block13_data_ref (_data13_));
	_tmp7_ = (_vala_array_free (_tmp7_, _tmp7__length1, (GDestroyNotify) g_variant_unref), NULL);
	_g_hash_table_unref0 (hints);
	block13_data_unref (_data13_);
	_data13_ = NULL;
}


static void
unity_tester_unity_tool_ui_on_play_music_track_clicked (UnityTesterUnityToolUi* self,
                                                        UnityTesterMusicPreviewRenderer* renderer,
                                                        const gchar* uri)
{
	UnityProtocolPreviewPlayer* player = NULL;
	UnityProtocolPreviewPlayer* _tmp0_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (renderer != NULL);
	g_return_if_fail (uri != NULL);
	_tmp0_ = unity_protocol_preview_player_new ();
	player = _tmp0_;
	unity_protocol_preview_player_play (player, uri, NULL, NULL);
	_g_object_unref0 (player);
}


static void
unity_tester_unity_tool_ui_on_pause_music_track_clicked (UnityTesterUnityToolUi* self,
                                                         UnityTesterMusicPreviewRenderer* renderer,
                                                         const gchar* uri)
{
	UnityProtocolPreviewPlayer* player = NULL;
	UnityProtocolPreviewPlayer* _tmp0_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (renderer != NULL);
	g_return_if_fail (uri != NULL);
	_tmp0_ = unity_protocol_preview_player_new ();
	player = _tmp0_;
	unity_protocol_preview_player_pause (player, NULL, NULL);
	_g_object_unref0 (player);
}


static Block14Data*
block14_data_ref (Block14Data* _data14_)
{
	g_atomic_int_inc (&_data14_->_ref_count_);
	return _data14_;
}


static void
block14_data_unref (void * _userdata_)
{
	Block14Data* _data14_;
	_data14_ = (Block14Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data14_->_ref_count_)) {
		UnityTesterUnityToolUi* self;
		self = _data14_->self;
		_g_hash_table_unref0 (_data14_->ht);
		_g_object_unref0 (self);
		g_slice_free (Block14Data, _data14_);
	}
}


static void
__lambda16_ (Block14Data* _data14_,
             GObject* obj,
             GAsyncResult* res)
{
	UnityTesterUnityToolUi* self;
	GError * _inner_error_ = NULL;
	self = _data14_->self;
	g_return_if_fail (res != NULL);
	{
		GHashTable* _tmp0_ = NULL;
		unity_tester_unity_tool_ui_send_update_finish (self, res, &_tmp0_, &_inner_error_);
		_g_hash_table_unref0 (_data14_->ht);
		_data14_->ht = _tmp0_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			if (_inner_error_->domain == G_IO_ERROR) {
				goto __catch20_g_io_error;
			}
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
		if (_data14_->ht != NULL) {
			gchar* _tmp1_;
			gchar* _tmp2_;
			gchar* _tmp3_;
			gchar* _tmp4_;
			gchar* _tmp5_;
			gchar* _tmp6_;
			_tmp1_ = unity_tester_unity_tool_ui_dump_ht_reply (_data14_->ht);
			_tmp2_ = _tmp1_;
			_tmp3_ = g_strconcat ("UpdatePreviewProperty reply: ", _tmp2_, NULL);
			_tmp4_ = _tmp3_;
			_tmp5_ = g_strconcat (_tmp4_, "\n", NULL);
			_tmp6_ = _tmp5_;
			unity_tester_unity_tool_ui_append_log_message (self, _tmp6_);
			_g_free0 (_tmp6_);
			_g_free0 (_tmp4_);
			_g_free0 (_tmp2_);
		}
	}
	goto __finally20;
	__catch20_g_io_error:
	{
		GError* e = NULL;
		GError* _tmp7_;
		const gchar* _tmp8_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp7_ = e;
		_tmp8_ = _tmp7_->message;
		unity_tester_unity_tool_ui_handle_error (self, _tmp8_);
		_g_error_free0 (e);
	}
	__finally20:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
}


static void
___lambda16__gasync_ready_callback (GObject* source_object,
                                    GAsyncResult* res,
                                    gpointer self)
{
	__lambda16_ (self, source_object, res);
	block14_data_unref (self);
}


static void
unity_tester_unity_tool_ui_handle_preview_signals (UnityTesterUnityToolUi* self,
                                                   GHashTable* props)
{
	Block14Data* _data14_;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (props != NULL);
	_data14_ = g_slice_new0 (Block14Data);
	_data14_->_ref_count_ = 1;
	_data14_->self = g_object_ref (self);
	_data14_->ht = NULL;
	_tmp0_ = self->priv->current_channel_id;
	_tmp1_ = self->priv->preview_scope_uri;
	unity_tester_unity_tool_ui_send_update (self, _tmp0_, _tmp1_, props, ___lambda16__gasync_ready_callback, block14_data_ref (_data14_));
	block14_data_unref (_data14_);
	_data14_ = NULL;
}


static Block15Data*
block15_data_ref (Block15Data* _data15_)
{
	g_atomic_int_inc (&_data15_->_ref_count_);
	return _data15_;
}


static void
block15_data_unref (void * _userdata_)
{
	Block15Data* _data15_;
	_data15_ = (Block15Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data15_->_ref_count_)) {
		UnityTesterUnityToolUi* self;
		self = _data15_->self;
		_g_hash_table_unref0 (_data15_->ht);
		_g_object_unref0 (self);
		g_slice_free (Block15Data, _data15_);
	}
}


static void
__lambda17_ (Block15Data* _data15_,
             GObject* obj,
             GAsyncResult* res)
{
	UnityTesterUnityToolUi* self;
	GError * _inner_error_ = NULL;
	self = _data15_->self;
	g_return_if_fail (res != NULL);
	{
		GHashTable* _tmp0_ = NULL;
		unity_tester_unity_tool_ui_send_update_finish (self, res, &_tmp0_, &_inner_error_);
		_g_hash_table_unref0 (_data15_->ht);
		_data15_->ht = _tmp0_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			if (_inner_error_->domain == G_IO_ERROR) {
				goto __catch21_g_io_error;
			}
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
		if (_data15_->ht != NULL) {
			gchar* _tmp1_;
			gchar* _tmp2_;
			gchar* _tmp3_;
			gchar* _tmp4_;
			gchar* _tmp5_;
			gchar* _tmp6_;
			_tmp1_ = unity_tester_unity_tool_ui_dump_ht_reply (_data15_->ht);
			_tmp2_ = _tmp1_;
			_tmp3_ = g_strconcat ("UpdatePreviewProperty reply: ", _tmp2_, NULL);
			_tmp4_ = _tmp3_;
			_tmp5_ = g_strconcat (_tmp4_, "\n", NULL);
			_tmp6_ = _tmp5_;
			unity_tester_unity_tool_ui_append_log_message (self, _tmp6_);
			_g_free0 (_tmp6_);
			_g_free0 (_tmp4_);
			_g_free0 (_tmp2_);
			if (g_hash_table_contains (_data15_->ht, "preview")) {
				UnityTesterPreviewRenderer* _tmp7_;
				_tmp7_ = self->priv->preview_renderer;
				if (G_TYPE_CHECK_INSTANCE_TYPE (_tmp7_, UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER)) {
					UnityTesterPreviewRenderer* _tmp8_;
					gconstpointer _tmp9_;
					UnityProtocolPreview* _tmp10_;
					UnityProtocolPreview* _tmp11_;
					_tmp8_ = self->priv->preview_renderer;
					_tmp9_ = g_hash_table_lookup (_data15_->ht, "preview");
					_tmp10_ = unity_protocol_preview_parse ((GVariant*) _tmp9_);
					_tmp11_ = _tmp10_;
					unity_tester_series_preview_renderer_update_child_preview (G_TYPE_CHECK_INSTANCE_TYPE (_tmp8_, UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER) ? ((UnityTesterSeriesPreviewRenderer*) _tmp8_) : NULL, _tmp11_);
					_g_object_unref0 (_tmp11_);
					unity_tester_unity_tool_ui_update_preview (self);
				}
			}
		}
	}
	goto __finally21;
	__catch21_g_io_error:
	{
		GError* e = NULL;
		GError* _tmp12_;
		const gchar* _tmp13_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp12_ = e;
		_tmp13_ = _tmp12_->message;
		unity_tester_unity_tool_ui_handle_error (self, _tmp13_);
		_g_error_free0 (e);
	}
	__finally21:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
}


static void
___lambda17__gasync_ready_callback (GObject* source_object,
                                    GAsyncResult* res,
                                    gpointer self)
{
	__lambda17_ (self, source_object, res);
	block15_data_unref (self);
}


static void
unity_tester_unity_tool_ui_on_change_selected_series_item_clicked (UnityTesterUnityToolUi* self,
                                                                   UnityTesterSeriesPreviewRenderer* renderer,
                                                                   const gchar* uri,
                                                                   gint index)
{
	Block15Data* _data15_;
	GHashTable* props = NULL;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	gchar* _tmp3_;
	GVariant* _tmp4_;
	const gchar* _tmp5_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (renderer != NULL);
	g_return_if_fail (uri != NULL);
	_data15_ = g_slice_new0 (Block15Data);
	_data15_->_ref_count_ = 1;
	_data15_->self = g_object_ref (self);
	_tmp0_ = g_str_hash;
	_tmp1_ = g_str_equal;
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, _g_variant_unref0_);
	props = _tmp2_;
	_tmp3_ = g_strdup ("series-active-index");
	_tmp4_ = g_variant_new_int32 ((gint32) index);
	g_variant_ref_sink (_tmp4_);
	g_hash_table_insert (props, _tmp3_, _tmp4_);
	_data15_->ht = NULL;
	_tmp5_ = self->priv->current_channel_id;
	unity_tester_unity_tool_ui_send_update (self, _tmp5_, uri, props, ___lambda17__gasync_ready_callback, block15_data_ref (_data15_));
	_g_hash_table_unref0 (props);
	block15_data_unref (_data15_);
	_data15_ = NULL;
}


/**
     * Handle 'Request preview' context menu action.
     */
void
unity_tester_unity_tool_ui_on_results_popup_request (GtkWidget* widget,
                                                     UnityTesterUnityToolUi* self)
{
	g_return_if_fail (self != NULL);
	g_return_if_fail (widget != NULL);
}


/**
     * Handles right mouse button click event in 'Results' tab.
     */
gboolean
unity_tester_unity_tool_ui_on_results_right_click (GtkWidget* widget,
                                                   GdkEventButton* event,
                                                   UnityTesterUnityToolUi* self)
{
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	GdkEventType _tmp1_;
	g_return_val_if_fail (self != NULL, FALSE);
	g_return_val_if_fail (widget != NULL, FALSE);
	g_return_val_if_fail (event != NULL, FALSE);
	_tmp1_ = event->type;
	if (_tmp1_ == GDK_BUTTON_PRESS) {
		guint _tmp2_;
		_tmp2_ = event->button;
		_tmp0_ = _tmp2_ == ((guint) 3);
	} else {
		_tmp0_ = FALSE;
	}
	if (_tmp0_) {
		GtkMenu* _tmp3_;
		guint _tmp4_;
		guint32 _tmp5_;
		_tmp3_ = self->priv->results_popup_menu;
		_tmp4_ = event->button;
		_tmp5_ = event->time;
		gtk_menu_popup (_tmp3_, NULL, NULL, NULL, NULL, _tmp4_, _tmp5_);
	}
	result = FALSE;
	return result;
}


static void
unity_tester_unity_tool_ui_class_init (UnityTesterUnityToolUiClass * klass)
{
	unity_tester_unity_tool_ui_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityTesterUnityToolUiPrivate));
	G_OBJECT_CLASS (klass)->finalize = unity_tester_unity_tool_ui_finalize;
}


static void
unity_tester_unity_tool_ui_instance_init (UnityTesterUnityToolUi * self)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	self->priv = UNITY_TESTER_UNITY_TOOL_UI_GET_PRIVATE (self);
	self->priv->preview_renderer = NULL;
	self->priv->scope_proxy = NULL;
	self->priv->dbus_watcher_id = (guint) 0;
	self->priv->notebook = NULL;
	self->priv->preview_viewport = NULL;
	self->priv->results_view_selection = NULL;
	self->priv->preview_buttons_container = NULL;
	self->priv->preview_extra_buttons_container = NULL;
	self->priv->preview_raw_data = NULL;
	self->priv->results_popup_menu = NULL;
	self->priv->results_view = NULL;
	self->priv->search_type_global_rbutton = NULL;
	self->priv->scope_connect_dlg = NULL;
	self->priv->spinner = NULL;
	self->priv->scope_discovery_spinner = NULL;
	self->priv->search_button = NULL;
	self->priv->results_button = NULL;
	self->priv->prev_preview_button = NULL;
	self->priv->next_preview_button = NULL;
	self->priv->statusbar = NULL;
	self->priv->log_buffer = NULL;
	self->priv->search_entry = NULL;
	self->priv->dbus_name_entry = NULL;
	self->priv->dbus_path_entry = NULL;
	self->priv->scope_list_combobox = NULL;
	self->priv->uimodel = NULL;
	self->priv->ui_filter_model = NULL;
	self->priv->scope_list_model = NULL;
	self->priv->ui_cat_model = NULL;
	self->priv->dee_results_model = NULL;
	_tmp0_ = g_strdup ("");
	self->priv->current_channel_id = _tmp0_;
	_tmp1_ = g_strdup ("");
	self->priv->current_swarm_name = _tmp1_;
	self->priv->dee_filters_model = NULL;
	self->priv->dee_categories_model = NULL;
	self->priv->last_active_model = NULL;
	self->priv->last_active_iter = NULL;
}


static void
unity_tester_unity_tool_ui_finalize (GObject * obj)
{
	UnityTesterUnityToolUi * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TESTER_TYPE_UNITY_TOOL_UI, UnityTesterUnityToolUi);
	_g_object_unref0 (self->priv->preview_renderer);
	_g_object_unref0 (self->priv->scope_proxy);
	_g_free0 (self->priv->preview_scope_uri);
	_g_object_unref0 (self->priv->notebook);
	_g_object_unref0 (self->priv->preview_viewport);
	_g_object_unref0 (self->priv->results_view_selection);
	_g_object_unref0 (self->priv->preview_buttons_container);
	_g_object_unref0 (self->priv->preview_extra_buttons_container);
	_g_object_unref0 (self->priv->preview_raw_data);
	_g_object_unref0 (self->priv->results_popup_menu);
	_g_object_unref0 (self->priv->results_view);
	_g_object_unref0 (self->priv->search_type_global_rbutton);
	_g_object_unref0 (self->priv->scope_connect_dlg);
	_g_object_unref0 (self->priv->spinner);
	_g_object_unref0 (self->priv->scope_discovery_spinner);
	_g_object_unref0 (self->priv->search_button);
	_g_object_unref0 (self->priv->results_button);
	_g_object_unref0 (self->priv->prev_preview_button);
	_g_object_unref0 (self->priv->next_preview_button);
	_g_object_unref0 (self->priv->statusbar);
	_g_object_unref0 (self->priv->log_buffer);
	_g_object_unref0 (self->priv->search_entry);
	_g_object_unref0 (self->priv->dbus_name_entry);
	_g_object_unref0 (self->priv->dbus_path_entry);
	_g_object_unref0 (self->priv->scope_list_combobox);
	_g_object_unref0 (self->priv->uimodel);
	_g_object_unref0 (self->priv->ui_filter_model);
	_g_object_unref0 (self->priv->scope_list_model);
	_g_object_unref0 (self->priv->ui_cat_model);
	_g_object_unref0 (self->priv->dee_results_model);
	_g_free0 (self->priv->current_channel_id);
	_g_free0 (self->priv->current_swarm_name);
	_g_object_unref0 (self->priv->dee_filters_model);
	_g_object_unref0 (self->priv->dee_categories_model);
	_g_object_unref0 (self->priv->last_active_model);
	_g_free0 (self->priv->last_active_iter);
	G_OBJECT_CLASS (unity_tester_unity_tool_ui_parent_class)->finalize (obj);
}


GType
unity_tester_unity_tool_ui_get_type (void)
{
	static volatile gsize unity_tester_unity_tool_ui_type_id__volatile = 0;
	if (g_once_init_enter (&unity_tester_unity_tool_ui_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityTesterUnityToolUiClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_tester_unity_tool_ui_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityTesterUnityToolUi), 0, (GInstanceInitFunc) unity_tester_unity_tool_ui_instance_init, NULL };
		GType unity_tester_unity_tool_ui_type_id;
		unity_tester_unity_tool_ui_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityTesterUnityToolUi", &g_define_type_info, 0);
		g_once_init_leave (&unity_tester_unity_tool_ui_type_id__volatile, unity_tester_unity_tool_ui_type_id);
	}
	return unity_tester_unity_tool_ui_type_id__volatile;
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



