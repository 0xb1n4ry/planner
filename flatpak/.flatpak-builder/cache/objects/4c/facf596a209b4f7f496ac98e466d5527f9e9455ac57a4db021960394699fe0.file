/* unity-icon.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-icon.vala, do not modify */

/*
 * Copyright (C) 2012 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Michal Hruby <michal.hruby@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include "unity.h"
#include <unity-protocol.h>
#include <float.h>
#include <math.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>

enum  {
	UNITY_ANNOTATED_ICON_0_PROPERTY,
	UNITY_ANNOTATED_ICON_ICON_PROPERTY,
	UNITY_ANNOTATED_ICON_RIBBON_PROPERTY,
	UNITY_ANNOTATED_ICON_CATEGORY_PROPERTY,
	UNITY_ANNOTATED_ICON_SIZE_HINT_PROPERTY,
	UNITY_ANNOTATED_ICON_NUM_PROPERTIES
};
static GParamSpec* unity_annotated_icon_properties[UNITY_ANNOTATED_ICON_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _UnityAnnotatedIconPrivate {
	UnityProtocolAnnotatedIcon* _pai;
};


static gpointer unity_annotated_icon_parent_class = NULL;

#define UNITY_ANNOTATED_ICON_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_ANNOTATED_ICON, UnityAnnotatedIconPrivate))
static GObject * unity_annotated_icon_constructor (GType type,
                                            guint n_construct_properties,
                                            GObjectConstructParam * construct_properties);
static void unity_annotated_icon_finalize (GObject * obj);
static void _vala_unity_annotated_icon_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec);
static void _vala_unity_annotated_icon_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec);


GType
unity_category_type_get_type (void)
{
	static volatile gsize unity_category_type_type_id__volatile = 0;
	if (g_once_init_enter (&unity_category_type_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_CATEGORY_TYPE_NONE, "UNITY_CATEGORY_TYPE_NONE", "none"}, {UNITY_CATEGORY_TYPE_APPLICATION, "UNITY_CATEGORY_TYPE_APPLICATION", "application"}, {UNITY_CATEGORY_TYPE_BOOK, "UNITY_CATEGORY_TYPE_BOOK", "book"}, {UNITY_CATEGORY_TYPE_MUSIC, "UNITY_CATEGORY_TYPE_MUSIC", "music"}, {UNITY_CATEGORY_TYPE_MOVIE, "UNITY_CATEGORY_TYPE_MOVIE", "movie"}, {UNITY_CATEGORY_TYPE_GAMES, "UNITY_CATEGORY_TYPE_GAMES", "games"}, {UNITY_CATEGORY_TYPE_ELECTRONICS, "UNITY_CATEGORY_TYPE_ELECTRONICS", "electronics"}, {UNITY_CATEGORY_TYPE_COMPUTERS, "UNITY_CATEGORY_TYPE_COMPUTERS", "computers"}, {UNITY_CATEGORY_TYPE_OFFICE, "UNITY_CATEGORY_TYPE_OFFICE", "office"}, {UNITY_CATEGORY_TYPE_HOME, "UNITY_CATEGORY_TYPE_HOME", "home"}, {UNITY_CATEGORY_TYPE_GARDEN, "UNITY_CATEGORY_TYPE_GARDEN", "garden"}, {UNITY_CATEGORY_TYPE_PETS, "UNITY_CATEGORY_TYPE_PETS", "pets"}, {UNITY_CATEGORY_TYPE_TOYS, "UNITY_CATEGORY_TYPE_TOYS", "toys"}, {UNITY_CATEGORY_TYPE_CHILDREN, "UNITY_CATEGORY_TYPE_CHILDREN", "children"}, {UNITY_CATEGORY_TYPE_BABY, "UNITY_CATEGORY_TYPE_BABY", "baby"}, {UNITY_CATEGORY_TYPE_CLOTHES, "UNITY_CATEGORY_TYPE_CLOTHES", "clothes"}, {UNITY_CATEGORY_TYPE_SHOES, "UNITY_CATEGORY_TYPE_SHOES", "shoes"}, {UNITY_CATEGORY_TYPE_WATCHES, "UNITY_CATEGORY_TYPE_WATCHES", "watches"}, {UNITY_CATEGORY_TYPE_SPORTS, "UNITY_CATEGORY_TYPE_SPORTS", "sports"}, {UNITY_CATEGORY_TYPE_OUTDOORS, "UNITY_CATEGORY_TYPE_OUTDOORS", "outdoors"}, {UNITY_CATEGORY_TYPE_GROCERY, "UNITY_CATEGORY_TYPE_GROCERY", "grocery"}, {UNITY_CATEGORY_TYPE_HEALTH, "UNITY_CATEGORY_TYPE_HEALTH", "health"}, {UNITY_CATEGORY_TYPE_BEAUTY, "UNITY_CATEGORY_TYPE_BEAUTY", "beauty"}, {UNITY_CATEGORY_TYPE_DIY, "UNITY_CATEGORY_TYPE_DIY", "diy"}, {UNITY_CATEGORY_TYPE_TOOLS, "UNITY_CATEGORY_TYPE_TOOLS", "tools"}, {UNITY_CATEGORY_TYPE_CAR, "UNITY_CATEGORY_TYPE_CAR", "car"}, {UNITY_CATEGORY_TYPE_N_CATEGORIES, "UNITY_CATEGORY_TYPE_N_CATEGORIES", "n-categories"}, {0, NULL, NULL}};
		GType unity_category_type_type_id;
		unity_category_type_type_id = g_enum_register_static ("UnityCategoryType", values);
		g_once_init_leave (&unity_category_type_type_id__volatile, unity_category_type_type_id);
	}
	return unity_category_type_type_id__volatile;
}


GType
unity_icon_size_hint_get_type (void)
{
	static volatile gsize unity_icon_size_hint_type_id__volatile = 0;
	if (g_once_init_enter (&unity_icon_size_hint_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_ICON_SIZE_HINT_DEFAULT, "UNITY_ICON_SIZE_HINT_DEFAULT", "default"}, {UNITY_ICON_SIZE_HINT_SMALL, "UNITY_ICON_SIZE_HINT_SMALL", "small"}, {UNITY_ICON_SIZE_HINT_LARGE, "UNITY_ICON_SIZE_HINT_LARGE", "large"}, {0, NULL, NULL}};
		GType unity_icon_size_hint_type_id;
		unity_icon_size_hint_type_id = g_enum_register_static ("UnityIconSizeHint", values);
		g_once_init_leave (&unity_icon_size_hint_type_id__volatile, unity_icon_size_hint_type_id);
	}
	return unity_icon_size_hint_type_id__volatile;
}


void
unity_annotated_icon_set_colorize_rgba (UnityAnnotatedIcon* self,
                                        gdouble r,
                                        gdouble g,
                                        gdouble b,
                                        gdouble a)
{
	UnityProtocolAnnotatedIcon* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_pai;
	unity_protocol_annotated_icon_set_colorize_rgba (_tmp0_, r, g, b, a);
}


UnityAnnotatedIcon*
unity_annotated_icon_construct (GType object_type,
                                GIcon* base_icon)
{
	UnityAnnotatedIcon * self = NULL;
	g_return_val_if_fail (base_icon != NULL, NULL);
	self = (UnityAnnotatedIcon*) g_object_new (object_type, "icon", base_icon, NULL);
	return self;
}


UnityAnnotatedIcon*
unity_annotated_icon_new (GIcon* base_icon)
{
	return unity_annotated_icon_construct (UNITY_TYPE_ANNOTATED_ICON, base_icon);
}


gchar*
unity_annotated_icon_to_string (UnityAnnotatedIcon* self)
{
	gchar* result = NULL;
	UnityProtocolAnnotatedIcon* _tmp0_;
	gchar* _tmp1_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_pai;
	_tmp1_ = g_icon_to_string ((GIcon*) _tmp0_);
	result = _tmp1_;
	return result;
}


GIcon*
unity_annotated_icon_get_icon (UnityAnnotatedIcon* self)
{
	GIcon* result;
	UnityProtocolAnnotatedIcon* _tmp0_;
	GIcon* _tmp1_;
	GIcon* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_pai;
	_tmp1_ = unity_protocol_annotated_icon_get_icon (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_annotated_icon_set_icon (UnityAnnotatedIcon* self,
                               GIcon* value)
{
	UnityProtocolAnnotatedIcon* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_pai;
	unity_protocol_annotated_icon_set_icon (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_annotated_icon_properties[UNITY_ANNOTATED_ICON_ICON_PROPERTY]);
}


const gchar*
unity_annotated_icon_get_ribbon (UnityAnnotatedIcon* self)
{
	const gchar* result;
	UnityProtocolAnnotatedIcon* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_pai;
	_tmp1_ = unity_protocol_annotated_icon_get_ribbon (_tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


void
unity_annotated_icon_set_ribbon (UnityAnnotatedIcon* self,
                                 const gchar* value)
{
	UnityProtocolAnnotatedIcon* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_pai;
	unity_protocol_annotated_icon_set_ribbon (_tmp0_, value);
	g_object_notify_by_pspec ((GObject *) self, unity_annotated_icon_properties[UNITY_ANNOTATED_ICON_RIBBON_PROPERTY]);
}


UnityCategoryType
unity_annotated_icon_get_category (UnityAnnotatedIcon* self)
{
	UnityCategoryType result;
	UnityProtocolAnnotatedIcon* _tmp0_;
	UnityProtocolCategoryType _tmp1_;
	UnityProtocolCategoryType _tmp2_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->priv->_pai;
	_tmp1_ = unity_protocol_annotated_icon_get_category (_tmp0_);
	_tmp2_ = _tmp1_;
	result = (UnityCategoryType) _tmp2_;
	return result;
}


void
unity_annotated_icon_set_category (UnityAnnotatedIcon* self,
                                   UnityCategoryType value)
{
	UnityProtocolAnnotatedIcon* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_pai;
	unity_protocol_annotated_icon_set_category (_tmp0_, (UnityProtocolCategoryType) value);
	g_object_notify_by_pspec ((GObject *) self, unity_annotated_icon_properties[UNITY_ANNOTATED_ICON_CATEGORY_PROPERTY]);
}


UnityIconSizeHint
unity_annotated_icon_get_size_hint (UnityAnnotatedIcon* self)
{
	UnityIconSizeHint result;
	UnityIconSizeHint _tmp0_ = 0;
	UnityProtocolAnnotatedIcon* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp1_ = self->priv->_pai;
	_tmp2_ = unity_protocol_annotated_icon_get_use_small_icon (_tmp1_);
	_tmp3_ = _tmp2_;
	if (_tmp3_) {
		_tmp0_ = UNITY_ICON_SIZE_HINT_SMALL;
	} else {
		_tmp0_ = UNITY_ICON_SIZE_HINT_DEFAULT;
	}
	result = _tmp0_;
	return result;
}


void
unity_annotated_icon_set_size_hint (UnityAnnotatedIcon* self,
                                    UnityIconSizeHint value)
{
	UnityProtocolAnnotatedIcon* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_pai;
	unity_protocol_annotated_icon_set_use_small_icon (_tmp0_, value == UNITY_ICON_SIZE_HINT_SMALL);
	g_object_notify_by_pspec ((GObject *) self, unity_annotated_icon_properties[UNITY_ANNOTATED_ICON_SIZE_HINT_PROPERTY]);
}


static GObject *
unity_annotated_icon_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	UnityAnnotatedIcon * self;
	UnityProtocolAnnotatedIcon* _tmp0_;
	parent_class = G_OBJECT_CLASS (unity_annotated_icon_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_ANNOTATED_ICON, UnityAnnotatedIcon);
	G_STATIC_ASSERT (((guint) UNITY_CATEGORY_TYPE_N_CATEGORIES) == ((guint) UNITY_PROTOCOL_CATEGORY_TYPE_N_CATEGORIES));
	_tmp0_ = unity_protocol_annotated_icon_new (NULL);
	_g_object_unref0 (self->priv->_pai);
	self->priv->_pai = _tmp0_;
	return obj;
}


static void
unity_annotated_icon_class_init (UnityAnnotatedIconClass * klass)
{
	unity_annotated_icon_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityAnnotatedIconPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_annotated_icon_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_annotated_icon_set_property;
	G_OBJECT_CLASS (klass)->constructor = unity_annotated_icon_constructor;
	G_OBJECT_CLASS (klass)->finalize = unity_annotated_icon_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_ANNOTATED_ICON_ICON_PROPERTY, unity_annotated_icon_properties[UNITY_ANNOTATED_ICON_ICON_PROPERTY] = g_param_spec_object ("icon", "icon", "icon", g_icon_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_ANNOTATED_ICON_RIBBON_PROPERTY, unity_annotated_icon_properties[UNITY_ANNOTATED_ICON_RIBBON_PROPERTY] = g_param_spec_string ("ribbon", "ribbon", "ribbon", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_ANNOTATED_ICON_CATEGORY_PROPERTY, unity_annotated_icon_properties[UNITY_ANNOTATED_ICON_CATEGORY_PROPERTY] = g_param_spec_enum ("category", "category", "category", UNITY_TYPE_CATEGORY_TYPE, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_ANNOTATED_ICON_SIZE_HINT_PROPERTY, unity_annotated_icon_properties[UNITY_ANNOTATED_ICON_SIZE_HINT_PROPERTY] = g_param_spec_enum ("size-hint", "size-hint", "size-hint", UNITY_TYPE_ICON_SIZE_HINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


static void
unity_annotated_icon_instance_init (UnityAnnotatedIcon * self)
{
	self->priv = UNITY_ANNOTATED_ICON_GET_PRIVATE (self);
}


static void
unity_annotated_icon_finalize (GObject * obj)
{
	UnityAnnotatedIcon * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_ANNOTATED_ICON, UnityAnnotatedIcon);
	_g_object_unref0 (self->priv->_pai);
	G_OBJECT_CLASS (unity_annotated_icon_parent_class)->finalize (obj);
}


GType
unity_annotated_icon_get_type (void)
{
	static volatile gsize unity_annotated_icon_type_id__volatile = 0;
	if (g_once_init_enter (&unity_annotated_icon_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityAnnotatedIconClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_annotated_icon_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityAnnotatedIcon), 0, (GInstanceInitFunc) unity_annotated_icon_instance_init, NULL };
		GType unity_annotated_icon_type_id;
		unity_annotated_icon_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityAnnotatedIcon", &g_define_type_info, 0);
		g_once_init_leave (&unity_annotated_icon_type_id__volatile, unity_annotated_icon_type_id);
	}
	return unity_annotated_icon_type_id__volatile;
}


static void
_vala_unity_annotated_icon_get_property (GObject * object,
                                         guint property_id,
                                         GValue * value,
                                         GParamSpec * pspec)
{
	UnityAnnotatedIcon * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_ANNOTATED_ICON, UnityAnnotatedIcon);
	switch (property_id) {
		case UNITY_ANNOTATED_ICON_ICON_PROPERTY:
		g_value_set_object (value, unity_annotated_icon_get_icon (self));
		break;
		case UNITY_ANNOTATED_ICON_RIBBON_PROPERTY:
		g_value_set_string (value, unity_annotated_icon_get_ribbon (self));
		break;
		case UNITY_ANNOTATED_ICON_CATEGORY_PROPERTY:
		g_value_set_enum (value, unity_annotated_icon_get_category (self));
		break;
		case UNITY_ANNOTATED_ICON_SIZE_HINT_PROPERTY:
		g_value_set_enum (value, unity_annotated_icon_get_size_hint (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_annotated_icon_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec)
{
	UnityAnnotatedIcon * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_ANNOTATED_ICON, UnityAnnotatedIcon);
	switch (property_id) {
		case UNITY_ANNOTATED_ICON_ICON_PROPERTY:
		unity_annotated_icon_set_icon (self, g_value_get_object (value));
		break;
		case UNITY_ANNOTATED_ICON_RIBBON_PROPERTY:
		unity_annotated_icon_set_ribbon (self, g_value_get_string (value));
		break;
		case UNITY_ANNOTATED_ICON_CATEGORY_PROPERTY:
		unity_annotated_icon_set_category (self, g_value_get_enum (value));
		break;
		case UNITY_ANNOTATED_ICON_SIZE_HINT_PROPERTY:
		unity_annotated_icon_set_size_hint (self, g_value_get_enum (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



