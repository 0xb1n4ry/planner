/* protocol-scope-discovery.c generated by valac 0.40.11, the Vala compiler
 * generated from protocol-scope-discovery.vala, do not modify */

/*
 * Copyright (C) 2012-2013 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Pawel Stolowski <pawel.stolowski@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <glib/gstdio.h>
#include <glib/gi18n-lib.h>
#include <gobject/gvaluecollector.h>


#define UNITY_PROTOCOL_TYPE_META_DATA_COLUMN_INFO (unity_protocol_meta_data_column_info_get_type ())
#define UNITY_PROTOCOL_META_DATA_COLUMN_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_TYPE_META_DATA_COLUMN_INFO, UnityProtocolMetaDataColumnInfo))
#define UNITY_PROTOCOL_META_DATA_COLUMN_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_PROTOCOL_TYPE_META_DATA_COLUMN_INFO, UnityProtocolMetaDataColumnInfoClass))
#define UNITY_PROTOCOL_IS_META_DATA_COLUMN_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_TYPE_META_DATA_COLUMN_INFO))
#define UNITY_PROTOCOL_IS_META_DATA_COLUMN_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_PROTOCOL_TYPE_META_DATA_COLUMN_INFO))
#define UNITY_PROTOCOL_META_DATA_COLUMN_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_PROTOCOL_TYPE_META_DATA_COLUMN_INFO, UnityProtocolMetaDataColumnInfoClass))

typedef struct _UnityProtocolMetaDataColumnInfo UnityProtocolMetaDataColumnInfo;
typedef struct _UnityProtocolMetaDataColumnInfoClass UnityProtocolMetaDataColumnInfoClass;
typedef struct _UnityProtocolMetaDataColumnInfoPrivate UnityProtocolMetaDataColumnInfoPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _unity_protocol_meta_data_column_info_unref0(var) ((var == NULL) ? NULL : (var = (unity_protocol_meta_data_column_info_unref (var), NULL)))
typedef struct _UnityProtocolParamSpecMetaDataColumnInfo UnityProtocolParamSpecMetaDataColumnInfo;

#define UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO (unity_protocol_meta_data_schema_info_get_type ())
#define UNITY_PROTOCOL_META_DATA_SCHEMA_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO, UnityProtocolMetaDataSchemaInfo))
#define UNITY_PROTOCOL_META_DATA_SCHEMA_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO, UnityProtocolMetaDataSchemaInfoClass))
#define UNITY_PROTOCOL_IS_META_DATA_SCHEMA_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO))
#define UNITY_PROTOCOL_IS_META_DATA_SCHEMA_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO))
#define UNITY_PROTOCOL_META_DATA_SCHEMA_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO, UnityProtocolMetaDataSchemaInfoClass))

typedef struct _UnityProtocolMetaDataSchemaInfo UnityProtocolMetaDataSchemaInfo;
typedef struct _UnityProtocolMetaDataSchemaInfoClass UnityProtocolMetaDataSchemaInfoClass;
typedef struct _UnityProtocolMetaDataSchemaInfoPrivate UnityProtocolMetaDataSchemaInfoPrivate;
#define _g_ptr_array_unref0(var) ((var == NULL) ? NULL : (var = (g_ptr_array_unref (var), NULL)))
#define _unity_protocol_meta_data_schema_info_unref0(var) ((var == NULL) ? NULL : (var = (unity_protocol_meta_data_schema_info_unref (var), NULL)))
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
typedef struct _UnityProtocolParamSpecMetaDataSchemaInfo UnityProtocolParamSpecMetaDataSchemaInfo;

#define UNITY_PROTOCOL_TYPE_CATEGORY_DEFINITION (unity_protocol_category_definition_get_type ())
#define UNITY_PROTOCOL_CATEGORY_DEFINITION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_TYPE_CATEGORY_DEFINITION, UnityProtocolCategoryDefinition))
#define UNITY_PROTOCOL_CATEGORY_DEFINITION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_PROTOCOL_TYPE_CATEGORY_DEFINITION, UnityProtocolCategoryDefinitionClass))
#define UNITY_PROTOCOL_IS_CATEGORY_DEFINITION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_TYPE_CATEGORY_DEFINITION))
#define UNITY_PROTOCOL_IS_CATEGORY_DEFINITION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_PROTOCOL_TYPE_CATEGORY_DEFINITION))
#define UNITY_PROTOCOL_CATEGORY_DEFINITION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_PROTOCOL_TYPE_CATEGORY_DEFINITION, UnityProtocolCategoryDefinitionClass))

typedef struct _UnityProtocolCategoryDefinition UnityProtocolCategoryDefinition;
typedef struct _UnityProtocolCategoryDefinitionClass UnityProtocolCategoryDefinitionClass;
typedef struct _UnityProtocolCategoryDefinitionPrivate UnityProtocolCategoryDefinitionPrivate;
#define _unity_protocol_category_definition_unref0(var) ((var == NULL) ? NULL : (var = (unity_protocol_category_definition_unref (var), NULL)))
typedef struct _UnityProtocolParamSpecCategoryDefinition UnityProtocolParamSpecCategoryDefinition;

#define UNITY_PROTOCOL_TYPE_FILTER_DEFINITION (unity_protocol_filter_definition_get_type ())
#define UNITY_PROTOCOL_FILTER_DEFINITION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_TYPE_FILTER_DEFINITION, UnityProtocolFilterDefinition))
#define UNITY_PROTOCOL_FILTER_DEFINITION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_PROTOCOL_TYPE_FILTER_DEFINITION, UnityProtocolFilterDefinitionClass))
#define UNITY_PROTOCOL_IS_FILTER_DEFINITION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_TYPE_FILTER_DEFINITION))
#define UNITY_PROTOCOL_IS_FILTER_DEFINITION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_PROTOCOL_TYPE_FILTER_DEFINITION))
#define UNITY_PROTOCOL_FILTER_DEFINITION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_PROTOCOL_TYPE_FILTER_DEFINITION, UnityProtocolFilterDefinitionClass))

typedef struct _UnityProtocolFilterDefinition UnityProtocolFilterDefinition;
typedef struct _UnityProtocolFilterDefinitionClass UnityProtocolFilterDefinitionClass;
typedef struct _UnityProtocolFilterDefinitionPrivate UnityProtocolFilterDefinitionPrivate;
#define _unity_protocol_filter_definition_unref0(var) ((var == NULL) ? NULL : (var = (unity_protocol_filter_definition_unref (var), NULL)))
typedef struct _UnityProtocolParamSpecFilterDefinition UnityProtocolParamSpecFilterDefinition;

#define UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY (unity_protocol_scope_registry_get_type ())
#define UNITY_PROTOCOL_SCOPE_REGISTRY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY, UnityProtocolScopeRegistry))
#define UNITY_PROTOCOL_SCOPE_REGISTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY, UnityProtocolScopeRegistryClass))
#define UNITY_PROTOCOL_IS_SCOPE_REGISTRY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY))
#define UNITY_PROTOCOL_IS_SCOPE_REGISTRY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY))
#define UNITY_PROTOCOL_SCOPE_REGISTRY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY, UnityProtocolScopeRegistryClass))

typedef struct _UnityProtocolScopeRegistry UnityProtocolScopeRegistry;
typedef struct _UnityProtocolScopeRegistryClass UnityProtocolScopeRegistryClass;
typedef struct _UnityProtocolScopeRegistryPrivate UnityProtocolScopeRegistryPrivate;

#define UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_REGISTRY_NODE (unity_protocol_scope_registry_scope_registry_node_get_type ())
#define UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_REGISTRY_NODE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_REGISTRY_NODE, UnityProtocolScopeRegistryScopeRegistryNode))
#define UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_REGISTRY_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_REGISTRY_NODE, UnityProtocolScopeRegistryScopeRegistryNodeClass))
#define UNITY_PROTOCOL_SCOPE_REGISTRY_IS_SCOPE_REGISTRY_NODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_REGISTRY_NODE))
#define UNITY_PROTOCOL_SCOPE_REGISTRY_IS_SCOPE_REGISTRY_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_REGISTRY_NODE))
#define UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_REGISTRY_NODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_REGISTRY_NODE, UnityProtocolScopeRegistryScopeRegistryNodeClass))

typedef struct _UnityProtocolScopeRegistryScopeRegistryNode UnityProtocolScopeRegistryScopeRegistryNode;
typedef struct _UnityProtocolScopeRegistryScopeRegistryNodeClass UnityProtocolScopeRegistryScopeRegistryNodeClass;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _unity_protocol_scope_registry_unref0(var) ((var == NULL) ? NULL : (var = (unity_protocol_scope_registry_unref (var), NULL)))

#define UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA (unity_protocol_scope_registry_scope_metadata_get_type ())
#define UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_METADATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA, UnityProtocolScopeRegistryScopeMetadata))
#define UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_METADATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA, UnityProtocolScopeRegistryScopeMetadataClass))
#define UNITY_PROTOCOL_SCOPE_REGISTRY_IS_SCOPE_METADATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA))
#define UNITY_PROTOCOL_SCOPE_REGISTRY_IS_SCOPE_METADATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA))
#define UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_METADATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA, UnityProtocolScopeRegistryScopeMetadataClass))

typedef struct _UnityProtocolScopeRegistryScopeMetadata UnityProtocolScopeRegistryScopeMetadata;
typedef struct _UnityProtocolScopeRegistryScopeMetadataClass UnityProtocolScopeRegistryScopeMetadataClass;
typedef struct _UnityProtocolScopeRegistryFindScopesData UnityProtocolScopeRegistryFindScopesData;
typedef struct _Block7Data Block7Data;
typedef struct _UnityProtocolScopeRegistryScopeMetadataPrivate UnityProtocolScopeRegistryScopeMetadataPrivate;
#define _g_dir_close0(var) ((var == NULL) ? NULL : (var = (g_dir_close (var), NULL)))
#define _unity_protocol_scope_registry_scope_metadata_unref0(var) ((var == NULL) ? NULL : (var = (unity_protocol_scope_registry_scope_metadata_unref (var), NULL)))
typedef struct _UnityProtocolScopeRegistryBuildScopeNodeTreeData UnityProtocolScopeRegistryBuildScopeNodeTreeData;
typedef struct _Block8Data Block8Data;
#define _unity_protocol_scope_registry_scope_registry_node_unref0(var) ((var == NULL) ? NULL : (var = (unity_protocol_scope_registry_scope_registry_node_unref (var), NULL)))
typedef struct _UnityProtocolScopeRegistryScopeRegistryNodePrivate UnityProtocolScopeRegistryScopeRegistryNodePrivate;
typedef struct _UnityProtocolScopeRegistryFindScopesForIdData UnityProtocolScopeRegistryFindScopesForIdData;
#define _g_settings_schema_unref0(var) ((var == NULL) ? NULL : (var = (g_settings_schema_unref (var), NULL)))
#define _g_key_file_unref0(var) ((var == NULL) ? NULL : (var = (g_key_file_unref (var), NULL)))
typedef struct _UnityProtocolScopeRegistryParamSpecScopeMetadata UnityProtocolScopeRegistryParamSpecScopeMetadata;
typedef struct _UnityProtocolScopeRegistryParamSpecScopeRegistryNode UnityProtocolScopeRegistryParamSpecScopeRegistryNode;
typedef struct _UnityProtocolParamSpecScopeRegistry UnityProtocolParamSpecScopeRegistry;

#define UNITY_PROTOCOL_TYPE_SCOPE_GROUP_SCOPE_INFO (unity_protocol_scope_group_scope_info_get_type ())
typedef struct _UnityProtocolScopeGroupScopeInfo UnityProtocolScopeGroupScopeInfo;

#define UNITY_PROTOCOL_TYPE_SCOPE_GROUP_CONFIG (unity_protocol_scope_group_config_get_type ())
#define UNITY_PROTOCOL_SCOPE_GROUP_CONFIG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_TYPE_SCOPE_GROUP_CONFIG, UnityProtocolScopeGroupConfig))
#define UNITY_PROTOCOL_SCOPE_GROUP_CONFIG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_PROTOCOL_TYPE_SCOPE_GROUP_CONFIG, UnityProtocolScopeGroupConfigClass))
#define UNITY_PROTOCOL_IS_SCOPE_GROUP_CONFIG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_TYPE_SCOPE_GROUP_CONFIG))
#define UNITY_PROTOCOL_IS_SCOPE_GROUP_CONFIG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_PROTOCOL_TYPE_SCOPE_GROUP_CONFIG))
#define UNITY_PROTOCOL_SCOPE_GROUP_CONFIG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_PROTOCOL_TYPE_SCOPE_GROUP_CONFIG, UnityProtocolScopeGroupConfigClass))

typedef struct _UnityProtocolScopeGroupConfig UnityProtocolScopeGroupConfig;
typedef struct _UnityProtocolScopeGroupConfigClass UnityProtocolScopeGroupConfigClass;
typedef struct _UnityProtocolScopeGroupConfigPrivate UnityProtocolScopeGroupConfigPrivate;
#define _unity_protocol_scope_group_config_unref0(var) ((var == NULL) ? NULL : (var = (unity_protocol_scope_group_config_unref (var), NULL)))
typedef struct _UnityProtocolParamSpecScopeGroupConfig UnityProtocolParamSpecScopeGroupConfig;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

typedef enum  {
	UNITY_PROTOCOL_PARSE_ERROR_INVALID_METADATA,
	UNITY_PROTOCOL_PARSE_ERROR_FILE_NOT_FOUND,
	UNITY_PROTOCOL_PARSE_ERROR_INVALID_PATH,
	UNITY_PROTOCOL_PARSE_ERROR_UNKNOWN_FILE
} UnityProtocolParseError;
#define UNITY_PROTOCOL_PARSE_ERROR unity_protocol_parse_error_quark ()
struct _UnityProtocolMetaDataColumnInfo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	UnityProtocolMetaDataColumnInfoPrivate * priv;
};

struct _UnityProtocolMetaDataColumnInfoClass {
	GTypeClass parent_class;
	void (*finalize) (UnityProtocolMetaDataColumnInfo *self);
	gboolean (*equals) (UnityProtocolMetaDataColumnInfo* self, UnityProtocolMetaDataColumnInfo* m);
};

struct _UnityProtocolMetaDataColumnInfoPrivate {
	gchar* _name;
	gchar* _type_id;
};

struct _UnityProtocolParamSpecMetaDataColumnInfo {
	GParamSpec parent_instance;
};

struct _UnityProtocolMetaDataSchemaInfo {
	GTypeInstance parent_instance;
	volatile int ref_count;
	UnityProtocolMetaDataSchemaInfoPrivate * priv;
	GPtrArray* columns;
};

struct _UnityProtocolMetaDataSchemaInfoClass {
	GTypeClass parent_class;
	void (*finalize) (UnityProtocolMetaDataSchemaInfo *self);
};

struct _UnityProtocolParamSpecMetaDataSchemaInfo {
	GParamSpec parent_instance;
};

struct _UnityProtocolCategoryDefinition {
	GTypeInstance parent_instance;
	volatile int ref_count;
	UnityProtocolCategoryDefinitionPrivate * priv;
};

struct _UnityProtocolCategoryDefinitionClass {
	GTypeClass parent_class;
	void (*finalize) (UnityProtocolCategoryDefinition *self);
};

struct _UnityProtocolCategoryDefinitionPrivate {
	gchar* _id;
	gchar* _name;
	gchar* _icon;
	gchar* _renderer;
	gchar* _content_type;
	gchar* _dedup_field;
	gchar* _sort_field;
	gchar* _renderer_hint;
};

struct _UnityProtocolParamSpecCategoryDefinition {
	GParamSpec parent_instance;
};

struct _UnityProtocolFilterDefinition {
	GTypeInstance parent_instance;
	volatile int ref_count;
	UnityProtocolFilterDefinitionPrivate * priv;
};

struct _UnityProtocolFilterDefinitionClass {
	GTypeClass parent_class;
	void (*finalize) (UnityProtocolFilterDefinition *self);
};

struct _UnityProtocolFilterDefinitionPrivate {
	gchar* _id;
	gchar* _filter_type;
	gchar* _name;
	gchar* _sort_type;
	gchar** option_ids;
	gint option_ids_length1;
	gint _option_ids_size_;
	gchar** option_names;
	gint option_names_length1;
	gint _option_names_size_;
};

struct _UnityProtocolParamSpecFilterDefinition {
	GParamSpec parent_instance;
};

struct _UnityProtocolScopeRegistry {
	GTypeInstance parent_instance;
	volatile int ref_count;
	UnityProtocolScopeRegistryPrivate * priv;
};

struct _UnityProtocolScopeRegistryClass {
	GTypeClass parent_class;
	void (*finalize) (UnityProtocolScopeRegistry *self);
};

struct _UnityProtocolScopeRegistryPrivate {
	GSList* scopes_;
};

struct _UnityProtocolScopeRegistryFindScopesData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	gchar* start_path;
	UnityProtocolScopeRegistry* result;
	UnityProtocolScopeRegistry* registry;
	UnityProtocolScopeRegistry* _tmp0_;
	GNode* root_node;
	GNode* _tmp1_;
	gchar** _tmp2_;
	gint _tmp2__length1;
	gchar** scope_dir_collection;
	gint scope_dir_collection_length1;
	gint _scope_dir_collection_size_;
	gint scope_dir_it;
	const gchar* scope_dir;
	const gchar* _tmp3_;
	GNode* _tmp4_;
	const gchar* _tmp5_;
	GError* e;
	const gchar* _tmp6_;
	GError* _tmp7_;
	const gchar* _tmp8_;
	GNode* _tmp9_;
	UnityProtocolScopeRegistry* _tmp10_;
	GNode* _tmp11_;
	GError * _inner_error_;
};

struct _Block7Data {
	int _ref_count_;
	gboolean scope_id_present;
	GNode* found_child;
	gchar* scope_id;
};

struct _UnityProtocolScopeRegistryScopeMetadata {
	GTypeInstance parent_instance;
	volatile int ref_count;
	UnityProtocolScopeRegistryScopeMetadataPrivate * priv;
	gchar* id;
	gchar* domain;
	gchar* full_path;
	gchar* name;
	gchar* dbus_path;
	gchar* dbus_name;
	gchar* icon;
	gchar* category_icon;
	UnityProtocolMetaDataSchemaInfo* required_metadata;
	UnityProtocolMetaDataSchemaInfo* optional_metadata;
	GSList* keywords;
	gchar* type;
	gchar* description;
	gchar* search_hint;
	gboolean is_master;
	gboolean global_searches;
	gboolean visible;
	gboolean remote_content;
	gchar* query_binary;
	gchar* query_pattern;
	gchar* shortcut;
	gchar* no_content_hint;
	gboolean no_export;
	gchar* module;
	gchar* module_type;
	gint timeout;
};

struct _UnityProtocolScopeRegistryScopeMetadataClass {
	GTypeClass parent_class;
	void (*finalize) (UnityProtocolScopeRegistryScopeMetadata *self);
};

struct _UnityProtocolScopeRegistryBuildScopeNodeTreeData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	GNode* root_node;
	gchar* start_path;
	GDir* dir;
	GDir* _tmp0_;
	gchar* name;
	GDir* _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	const gchar* _tmp4_;
	gchar* filename;
	const gchar* _tmp5_;
	gchar* _tmp6_;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	GError* e;
	const gchar* _tmp9_;
	GError* _tmp10_;
	const gchar* _tmp11_;
	GError* _tmp12_;
	UnityProtocolScopeRegistryScopeMetadata* scope_data;
	UnityProtocolScopeRegistryScopeMetadata* _tmp13_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp14_;
	GNode* child_node;
	gboolean scope_id_present;
	UnityProtocolScopeRegistryScopeMetadata* _tmp15_;
	const gchar* _tmp16_;
	GNode* _tmp17_;
	gboolean _tmp18_;
	gboolean _tmp19_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp20_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp21_;
	GNode* _tmp22_;
	GNode* _tmp23_;
	GNode* _tmp24_;
	gconstpointer _tmp25_;
	gboolean _tmp26_;
	gboolean _tmp27_;
	GNode* _tmp28_;
	gconstpointer _tmp29_;
	GNode* _tmp30_;
	GNode* _tmp31_;
	gconstpointer _tmp32_;
	const gchar* _tmp33_;
	gchar** subscopes;
	GNode* _tmp34_;
	gconstpointer _tmp35_;
	gint _tmp36_;
	gchar** _tmp37_;
	gint subscopes_length1;
	gint _subscopes_size_;
	gchar** _tmp38_;
	gint _tmp38__length1;
	gchar** subscope_id_collection;
	gint subscope_id_collection_length1;
	gint _subscope_id_collection_size_;
	gint subscope_id_it;
	const gchar* subscope_id;
	UnityProtocolScopeRegistryScopeMetadata* subscope_data;
	const gchar* _tmp39_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp40_;
	gboolean _tmp41_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp42_;
	GNode* _tmp43_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp44_;
	const gchar* _tmp45_;
	gboolean _tmp46_;
	GNode* _tmp47_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp48_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp49_;
	GError* _vala1_e;
	const gchar* _tmp50_;
	GError* _tmp51_;
	const gchar* _tmp52_;
	GFile* scopefile;
	UnityProtocolScopeRegistryScopeMetadata* _tmp53_;
	const gchar* _tmp54_;
	GFile* _tmp55_;
	GFile* parent;
	GFile* _tmp56_;
	GFile* _tmp57_;
	GFile* _tmp58_;
	gchar* scope_name;
	UnityProtocolScopeRegistryScopeMetadata* _tmp59_;
	const gchar* _tmp60_;
	gchar* _tmp61_;
	gchar* check_path;
	GFile* _tmp62_;
	gchar* _tmp63_;
	gchar* _tmp64_;
	const gchar* _tmp65_;
	gchar* _tmp66_;
	gchar* _tmp67_;
	const gchar* _tmp68_;
	GNode* _tmp69_;
	const gchar* _tmp70_;
	GError * _inner_error_;
};

struct _Block8Data {
	int _ref_count_;
	UnityProtocolScopeRegistry* self;
	UnityProtocolScopeRegistryScopeRegistryNode* scope_node;
};

struct _UnityProtocolScopeRegistryScopeRegistryNode {
	GTypeInstance parent_instance;
	volatile int ref_count;
	UnityProtocolScopeRegistryScopeRegistryNodePrivate * priv;
	UnityProtocolScopeRegistryScopeMetadata* scope_info;
	GSList* sub_scopes;
};

struct _UnityProtocolScopeRegistryScopeRegistryNodeClass {
	GTypeClass parent_class;
	void (*finalize) (UnityProtocolScopeRegistryScopeRegistryNode *self);
};

struct _UnityProtocolScopeRegistryFindScopesForIdData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	gchar* scope_id;
	gchar* root_path;
	UnityProtocolScopeRegistry* result;
	UnityProtocolScopeRegistry* registry;
	UnityProtocolScopeRegistry* _tmp0_;
	GNode* root_node;
	GNode* _tmp1_;
	UnityProtocolScopeRegistryScopeMetadata* scope_metadata;
	UnityProtocolScopeRegistryScopeMetadata* _tmp2_;
	GNode* _tmp3_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp4_;
	const gchar* _tmp5_;
	gchar** _tmp6_;
	gint _tmp6__length1;
	GError* err;
	gchar** _tmp7_;
	gint _tmp7__length1;
	gint __tmp7__size_;
	gchar** _tmp8_;
	gint _tmp8__length1;
	gchar** _tmp9_;
	gint _tmp9__length1;
	gchar* _tmp10_;
	gchar** _tmp11_;
	gchar** dirs;
	gchar** _tmp12_;
	gint _tmp12__length1;
	gint dirs_length1;
	gint _dirs_size_;
	gboolean _tmp13_;
	gchar** _tmp14_;
	gint _tmp14__length1;
	gchar** _tmp15_;
	gint _tmp15__length1;
	GError* _tmp16_;
	GNode* _tmp17_;
	GNode* _tmp18_;
	GNode* _tmp19_;
	GNode* _tmp20_;
	GNode* _tmp21_;
	GNode* node;
	gchar* suffix;
	gchar* _tmp22_;
	gchar** _tmp23_;
	gint _tmp23__length1;
	gchar** path_collection;
	gint path_collection_length1;
	gint _path_collection_size_;
	gint path_it;
	gchar* _tmp24_;
	gchar* path;
	gchar* check_path;
	const gchar* _tmp25_;
	const gchar* _tmp26_;
	gchar* _tmp27_;
	const gchar* _tmp28_;
	GNode* _tmp29_;
	const gchar* _tmp30_;
	UnityProtocolScopeRegistry* _tmp31_;
	GNode* _tmp32_;
	GError * _inner_error_;
};

struct _UnityProtocolScopeRegistryScopeMetadataPrivate {
	UnityProtocolCategoryDefinition** categories;
	gint categories_length1;
	gint _categories_size_;
	UnityProtocolFilterDefinition** filters;
	gint filters_length1;
	gint _filters_size_;
	gchar** subscope_ids;
	gint subscope_ids_length1;
	gint _subscope_ids_size_;
	gboolean overrides_subscopes;
};

struct _UnityProtocolScopeRegistryParamSpecScopeMetadata {
	GParamSpec parent_instance;
};

struct _UnityProtocolScopeRegistryParamSpecScopeRegistryNode {
	GParamSpec parent_instance;
};

struct _UnityProtocolParamSpecScopeRegistry {
	GParamSpec parent_instance;
};

struct _UnityProtocolScopeGroupScopeInfo {
	gchar* scope_id;
	gchar* dbus_name;
	gchar* dbus_path;
	gchar* module;
	gchar* module_type;
};

struct _UnityProtocolScopeGroupConfig {
	GTypeInstance parent_instance;
	volatile int ref_count;
	UnityProtocolScopeGroupConfigPrivate * priv;
	GList* scopes;
	gint timeout;
};

struct _UnityProtocolScopeGroupConfigClass {
	GTypeClass parent_class;
	void (*finalize) (UnityProtocolScopeGroupConfig *self);
};

struct _UnityProtocolParamSpecScopeGroupConfig {
	GParamSpec parent_instance;
};


static gpointer unity_protocol_meta_data_column_info_parent_class = NULL;
static gpointer unity_protocol_meta_data_schema_info_parent_class = NULL;
static gpointer unity_protocol_category_definition_parent_class = NULL;
static gpointer unity_protocol_filter_definition_parent_class = NULL;
static gpointer unity_protocol_scope_registry_parent_class = NULL;
static gchar** unity_protocol_scope_registry_scope_directories;
static gint unity_protocol_scope_registry_scope_directories_length1;
static gchar** unity_protocol_scope_registry_scope_directories = NULL;
static gint unity_protocol_scope_registry_scope_directories_length1 = 0;
static gint _unity_protocol_scope_registry_scope_directories_size_ = 0;
static gchar** unity_protocol_scope_registry_scope_file_prefixes;
static gint unity_protocol_scope_registry_scope_file_prefixes_length1;
static gchar** unity_protocol_scope_registry_scope_file_prefixes = NULL;
static gint unity_protocol_scope_registry_scope_file_prefixes_length1 = 0;
static gint _unity_protocol_scope_registry_scope_file_prefixes_size_ = 0;
static gboolean unity_protocol_scope_registry_overrides_scope_dirs;
static gboolean unity_protocol_scope_registry_overrides_scope_dirs = FALSE;
static gpointer unity_protocol_scope_registry_scope_metadata_parent_class = NULL;
static gchar** unity_protocol_scope_registry_scope_metadata_hidden_scope_ids;
static gint unity_protocol_scope_registry_scope_metadata_hidden_scope_ids_length1;
static gchar** unity_protocol_scope_registry_scope_metadata_hidden_scope_ids = NULL;
static gint unity_protocol_scope_registry_scope_metadata_hidden_scope_ids_length1 = 0;
static gint _unity_protocol_scope_registry_scope_metadata_hidden_scope_ids_size_ = 0;
static gpointer unity_protocol_scope_registry_scope_registry_node_parent_class = NULL;
static gpointer unity_protocol_scope_group_config_parent_class = NULL;

#define UNITY_PROTOCOL_SCOPES_DIR "unity/scopes"
GQuark unity_protocol_parse_error_quark (void);
gpointer unity_protocol_meta_data_column_info_ref (gpointer instance);
void unity_protocol_meta_data_column_info_unref (gpointer instance);
GParamSpec* unity_protocol_param_spec_meta_data_column_info (const gchar* name,
                                                             const gchar* nick,
                                                             const gchar* blurb,
                                                             GType object_type,
                                                             GParamFlags flags);
void unity_protocol_value_set_meta_data_column_info (GValue* value,
                                                     gpointer v_object);
void unity_protocol_value_take_meta_data_column_info (GValue* value,
                                                      gpointer v_object);
gpointer unity_protocol_value_get_meta_data_column_info (const GValue* value);
GType unity_protocol_meta_data_column_info_get_type (void) G_GNUC_CONST;
#define UNITY_PROTOCOL_META_DATA_COLUMN_INFO_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_PROTOCOL_TYPE_META_DATA_COLUMN_INFO, UnityProtocolMetaDataColumnInfoPrivate))
UnityProtocolMetaDataColumnInfo* unity_protocol_meta_data_column_info_new (const gchar* v,
                                                                           GError** error);
UnityProtocolMetaDataColumnInfo* unity_protocol_meta_data_column_info_construct (GType object_type,
                                                                                 const gchar* v,
                                                                                 GError** error);
void unity_protocol_meta_data_column_info_set_name (UnityProtocolMetaDataColumnInfo* self,
                                                    const gchar* value);
void unity_protocol_meta_data_column_info_set_type_id (UnityProtocolMetaDataColumnInfo* self,
                                                       const gchar* value);
gboolean unity_protocol_meta_data_column_info_equals (UnityProtocolMetaDataColumnInfo* self,
                                                      UnityProtocolMetaDataColumnInfo* m);
static gboolean unity_protocol_meta_data_column_info_real_equals (UnityProtocolMetaDataColumnInfo* self,
                                                           UnityProtocolMetaDataColumnInfo* m);
const gchar* unity_protocol_meta_data_column_info_get_name (UnityProtocolMetaDataColumnInfo* self);
const gchar* unity_protocol_meta_data_column_info_get_type_id (UnityProtocolMetaDataColumnInfo* self);
static void unity_protocol_meta_data_column_info_finalize (UnityProtocolMetaDataColumnInfo * obj);
gpointer unity_protocol_meta_data_schema_info_ref (gpointer instance);
void unity_protocol_meta_data_schema_info_unref (gpointer instance);
GParamSpec* unity_protocol_param_spec_meta_data_schema_info (const gchar* name,
                                                             const gchar* nick,
                                                             const gchar* blurb,
                                                             GType object_type,
                                                             GParamFlags flags);
void unity_protocol_value_set_meta_data_schema_info (GValue* value,
                                                     gpointer v_object);
void unity_protocol_value_take_meta_data_schema_info (GValue* value,
                                                      gpointer v_object);
gpointer unity_protocol_value_get_meta_data_schema_info (const GValue* value);
GType unity_protocol_meta_data_schema_info_get_type (void) G_GNUC_CONST;
UnityProtocolMetaDataSchemaInfo* unity_protocol_meta_data_schema_info_from_string (const gchar* mdinfo_str,
                                                                                   GError** error);
UnityProtocolMetaDataSchemaInfo* unity_protocol_meta_data_schema_info_new (void);
UnityProtocolMetaDataSchemaInfo* unity_protocol_meta_data_schema_info_construct (GType object_type);
static void _unity_protocol_meta_data_column_info_unref0_ (gpointer var);
GHashTable* unity_protocol_meta_data_schema_info_as_hash_table (UnityProtocolMetaDataSchemaInfo* self);
static void _g_free0_ (gpointer var);
gboolean unity_protocol_meta_data_schema_info_equals (UnityProtocolMetaDataSchemaInfo* self,
                                                      UnityProtocolMetaDataSchemaInfo* s);
static void unity_protocol_meta_data_schema_info_finalize (UnityProtocolMetaDataSchemaInfo * obj);
gpointer unity_protocol_category_definition_ref (gpointer instance);
void unity_protocol_category_definition_unref (gpointer instance);
GParamSpec* unity_protocol_param_spec_category_definition (const gchar* name,
                                                           const gchar* nick,
                                                           const gchar* blurb,
                                                           GType object_type,
                                                           GParamFlags flags);
void unity_protocol_value_set_category_definition (GValue* value,
                                                   gpointer v_object);
void unity_protocol_value_take_category_definition (GValue* value,
                                                    gpointer v_object);
gpointer unity_protocol_value_get_category_definition (const GValue* value);
GType unity_protocol_category_definition_get_type (void) G_GNUC_CONST;
#define UNITY_PROTOCOL_CATEGORY_DEFINITION_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_PROTOCOL_TYPE_CATEGORY_DEFINITION, UnityProtocolCategoryDefinitionPrivate))
UnityProtocolCategoryDefinition* unity_protocol_category_definition_create (const gchar* id,
                                                                            const gchar* name,
                                                                            const gchar* icon,
                                                                            const gchar* renderer,
                                                                            const gchar* content_type,
                                                                            const gchar* dedup_field,
                                                                            const gchar* sort_field);
UnityProtocolCategoryDefinition* unity_protocol_category_definition_new (void);
UnityProtocolCategoryDefinition* unity_protocol_category_definition_construct (GType object_type);
static void unity_protocol_category_definition_set_id (UnityProtocolCategoryDefinition* self,
                                                const gchar* value);
static void unity_protocol_category_definition_set_name (UnityProtocolCategoryDefinition* self,
                                                  const gchar* value);
static void unity_protocol_category_definition_set_icon (UnityProtocolCategoryDefinition* self,
                                                  const gchar* value);
static void unity_protocol_category_definition_set_renderer (UnityProtocolCategoryDefinition* self,
                                                      const gchar* value);
static void unity_protocol_category_definition_set_content_type (UnityProtocolCategoryDefinition* self,
                                                          const gchar* value);
static void unity_protocol_category_definition_set_dedup_field (UnityProtocolCategoryDefinition* self,
                                                         const gchar* value);
static void unity_protocol_category_definition_set_sort_field (UnityProtocolCategoryDefinition* self,
                                                        const gchar* value);
const gchar* unity_protocol_category_definition_get_id (UnityProtocolCategoryDefinition* self);
const gchar* unity_protocol_category_definition_get_name (UnityProtocolCategoryDefinition* self);
const gchar* unity_protocol_category_definition_get_icon (UnityProtocolCategoryDefinition* self);
const gchar* unity_protocol_category_definition_get_renderer (UnityProtocolCategoryDefinition* self);
const gchar* unity_protocol_category_definition_get_content_type (UnityProtocolCategoryDefinition* self);
const gchar* unity_protocol_category_definition_get_dedup_field (UnityProtocolCategoryDefinition* self);
const gchar* unity_protocol_category_definition_get_sort_field (UnityProtocolCategoryDefinition* self);
const gchar* unity_protocol_category_definition_get_renderer_hint (UnityProtocolCategoryDefinition* self);
void unity_protocol_category_definition_set_renderer_hint (UnityProtocolCategoryDefinition* self,
                                                           const gchar* value);
static void unity_protocol_category_definition_finalize (UnityProtocolCategoryDefinition * obj);
gpointer unity_protocol_filter_definition_ref (gpointer instance);
void unity_protocol_filter_definition_unref (gpointer instance);
GParamSpec* unity_protocol_param_spec_filter_definition (const gchar* name,
                                                         const gchar* nick,
                                                         const gchar* blurb,
                                                         GType object_type,
                                                         GParamFlags flags);
void unity_protocol_value_set_filter_definition (GValue* value,
                                                 gpointer v_object);
void unity_protocol_value_take_filter_definition (GValue* value,
                                                  gpointer v_object);
gpointer unity_protocol_value_get_filter_definition (const GValue* value);
GType unity_protocol_filter_definition_get_type (void) G_GNUC_CONST;
#define UNITY_PROTOCOL_FILTER_DEFINITION_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_PROTOCOL_TYPE_FILTER_DEFINITION, UnityProtocolFilterDefinitionPrivate))
gchar** unity_protocol_filter_definition_get_option_ids (UnityProtocolFilterDefinition* self,
                                                         int* result_length1);
gchar** unity_protocol_filter_definition_get_option_names (UnityProtocolFilterDefinition* self,
                                                           int* result_length1);
void unity_protocol_filter_definition_add_option (UnityProtocolFilterDefinition* self,
                                                  const gchar* id,
                                                  const gchar* name);
static void _vala_array_add5 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static void _vala_array_add6 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
UnityProtocolFilterDefinition* unity_protocol_filter_definition_create (const gchar* id,
                                                                        const gchar* filter_type,
                                                                        const gchar* name,
                                                                        const gchar* sort_type);
UnityProtocolFilterDefinition* unity_protocol_filter_definition_new (void);
UnityProtocolFilterDefinition* unity_protocol_filter_definition_construct (GType object_type);
static void unity_protocol_filter_definition_set_id (UnityProtocolFilterDefinition* self,
                                              const gchar* value);
static void unity_protocol_filter_definition_set_filter_type (UnityProtocolFilterDefinition* self,
                                                       const gchar* value);
static void unity_protocol_filter_definition_set_name (UnityProtocolFilterDefinition* self,
                                                const gchar* value);
static void unity_protocol_filter_definition_set_sort_type (UnityProtocolFilterDefinition* self,
                                                     const gchar* value);
const gchar* unity_protocol_filter_definition_get_id (UnityProtocolFilterDefinition* self);
const gchar* unity_protocol_filter_definition_get_filter_type (UnityProtocolFilterDefinition* self);
const gchar* unity_protocol_filter_definition_get_name (UnityProtocolFilterDefinition* self);
const gchar* unity_protocol_filter_definition_get_sort_type (UnityProtocolFilterDefinition* self);
static void unity_protocol_filter_definition_finalize (UnityProtocolFilterDefinition * obj);
gpointer unity_protocol_scope_registry_ref (gpointer instance);
void unity_protocol_scope_registry_unref (gpointer instance);
GParamSpec* unity_protocol_param_spec_scope_registry (const gchar* name,
                                                      const gchar* nick,
                                                      const gchar* blurb,
                                                      GType object_type,
                                                      GParamFlags flags);
void unity_protocol_value_set_scope_registry (GValue* value,
                                              gpointer v_object);
void unity_protocol_value_take_scope_registry (GValue* value,
                                               gpointer v_object);
gpointer unity_protocol_value_get_scope_registry (const GValue* value);
GType unity_protocol_scope_registry_get_type (void) G_GNUC_CONST;
gpointer unity_protocol_scope_registry_scope_registry_node_ref (gpointer instance);
void unity_protocol_scope_registry_scope_registry_node_unref (gpointer instance);
GParamSpec* unity_protocol_scope_registry_param_spec_scope_registry_node (const gchar* name,
                                                                          const gchar* nick,
                                                                          const gchar* blurb,
                                                                          GType object_type,
                                                                          GParamFlags flags);
void unity_protocol_scope_registry_value_set_scope_registry_node (GValue* value,
                                                                  gpointer v_object);
void unity_protocol_scope_registry_value_take_scope_registry_node (GValue* value,
                                                                   gpointer v_object);
gpointer unity_protocol_scope_registry_value_get_scope_registry_node (const GValue* value);
GType unity_protocol_scope_registry_scope_registry_node_get_type (void) G_GNUC_CONST;
#define UNITY_PROTOCOL_SCOPE_REGISTRY_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY, UnityProtocolScopeRegistryPrivate))
static void _unity_protocol_scope_registry_scope_registry_node_unref0_ (gpointer var);
static inline void _g_slist_free__unity_protocol_scope_registry_scope_registry_node_unref0_ (GSList* self);
#define UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP "Scope"
#define UNITY_PROTOCOL_SCOPE_REGISTRY_DESKTOP_GROUP "Desktop Entry"
static gchar* unity_protocol_scope_registry_extract_scope_id (const gchar* path);
void unity_protocol_scope_registry_init_scope_file_prefixes (void);
void unity_protocol_scope_registry_init_scope_directories (void);
static void _vala_array_add7 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static gchar** _vala_array_dup5 (gchar** self,
                          int length);
static void _vala_array_add8 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static UnityProtocolScopeRegistry* unity_protocol_scope_registry_new (void);
static UnityProtocolScopeRegistry* unity_protocol_scope_registry_construct (GType object_type);
static void unity_protocol_scope_registry_find_scopes_data_free (gpointer _data);
static void unity_protocol_scope_registry_find_scopes_async_ready_wrapper (GObject *source_object,
                                                                    GAsyncResult *res,
                                                                    void *user_data);
void unity_protocol_scope_registry_find_scopes (const gchar* start_path,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_);
UnityProtocolScopeRegistry* unity_protocol_scope_registry_find_scopes_finish (GAsyncResult* _res_,
                                                                              GError** error);
static gboolean unity_protocol_scope_registry_find_scopes_co (UnityProtocolScopeRegistryFindScopesData* _data_);
gpointer unity_protocol_scope_registry_scope_metadata_ref (gpointer instance);
void unity_protocol_scope_registry_scope_metadata_unref (gpointer instance);
GParamSpec* unity_protocol_scope_registry_param_spec_scope_metadata (const gchar* name,
                                                                     const gchar* nick,
                                                                     const gchar* blurb,
                                                                     GType object_type,
                                                                     GParamFlags flags);
void unity_protocol_scope_registry_value_set_scope_metadata (GValue* value,
                                                             gpointer v_object);
void unity_protocol_scope_registry_value_take_scope_metadata (GValue* value,
                                                              gpointer v_object);
gpointer unity_protocol_scope_registry_value_get_scope_metadata (const GValue* value);
GType unity_protocol_scope_registry_scope_metadata_get_type (void) G_GNUC_CONST;
static void unity_protocol_scope_registry_build_scope_node_tree (GNode* root_node,
                                                          const gchar* start_path,
                                                          GAsyncReadyCallback _callback_,
                                                          gpointer _user_data_);
static void unity_protocol_scope_registry_build_scope_node_tree_finish (GAsyncResult* _res_,
                                                                 GError** error);
static void unity_protocol_scope_registry_find_scopes_ready (GObject* source_object,
                                                      GAsyncResult* _res_,
                                                      gpointer _user_data_);
static void _unity_protocol_scope_registry_scope_metadata_unref0_ (gpointer var);
static gboolean _g_node_free_all_node (GNode* node,
                                GDestroyNotify free_func);
static void _g_node_free_all (GNode* self,
                       GDestroyNotify free_func);
static inline void _g_node_destroy__unity_protocol_scope_registry_scope_metadata_unref0_ (GNode* self);
static void unity_protocol_scope_registry_from_tree (UnityProtocolScopeRegistry* self,
                                              GNode* root_node);
static gboolean unity_protocol_scope_registry_node_has_child_with_id (GNode* node,
                                                               const gchar* scope_id,
                                                               GNode* * child);
static Block7Data* block7_data_ref (Block7Data* _data7_);
static void block7_data_unref (void * _userdata_);
static void __lambda39_ (Block7Data* _data7_,
                  GNode* child_);
static void ___lambda39__gnode_foreach_func (GNode* node,
                                      gpointer self);
static void unity_protocol_scope_registry_build_scope_node_tree_data_free (gpointer _data);
static void unity_protocol_scope_registry_build_scope_node_tree_async_ready_wrapper (GObject *source_object,
                                                                              GAsyncResult *res,
                                                                              void *user_data);
static gboolean unity_protocol_scope_registry_build_scope_node_tree_co (UnityProtocolScopeRegistryBuildScopeNodeTreeData* _data_);
static void unity_protocol_scope_registry_build_scope_node_tree_ready (GObject* source_object,
                                                                GAsyncResult* _res_,
                                                                gpointer _user_data_);
UnityProtocolScopeRegistryScopeMetadata* unity_protocol_scope_registry_scope_metadata_for_path (const gchar* path,
                                                                                                GError** error);
gboolean unity_protocol_scope_registry_scope_metadata_get_overrides_subscopes (UnityProtocolScopeRegistryScopeMetadata* self);
gchar** unity_protocol_scope_registry_scope_metadata_get_subscope_ids (UnityProtocolScopeRegistryScopeMetadata* self,
                                                                       int* result_length1);
UnityProtocolScopeRegistryScopeMetadata* unity_protocol_scope_registry_scope_metadata_for_id (const gchar* scope_id,
                                                                                              GError** error);
gchar* unity_protocol_scope_registry_remove_scope_extension (const gchar* scope_id);
static void __lambda40_ (UnityProtocolScopeRegistry* self,
                  GNode* top_child_);
static Block8Data* block8_data_ref (Block8Data* _data8_);
static void block8_data_unref (void * _userdata_);
UnityProtocolScopeRegistryScopeRegistryNode* unity_protocol_scope_registry_scope_registry_node_new (void);
UnityProtocolScopeRegistryScopeRegistryNode* unity_protocol_scope_registry_scope_registry_node_construct (GType object_type);
static inline void _g_slist_free__unity_protocol_scope_registry_scope_metadata_unref0_ (GSList* self);
static void __lambda41_ (Block8Data* _data8_,
                  GNode* child_);
static void ___lambda41__gnode_foreach_func (GNode* node,
                                      gpointer self);
static void ___lambda40__gnode_foreach_func (GNode* node,
                                      gpointer self);
static void unity_protocol_scope_registry_find_scopes_for_id_data_free (gpointer _data);
static void unity_protocol_scope_registry_find_scopes_for_id_async_ready_wrapper (GObject *source_object,
                                                                           GAsyncResult *res,
                                                                           void *user_data);
void unity_protocol_scope_registry_find_scopes_for_id (const gchar* scope_id,
                                                       const gchar* root_path,
                                                       GAsyncReadyCallback _callback_,
                                                       gpointer _user_data_);
UnityProtocolScopeRegistry* unity_protocol_scope_registry_find_scopes_for_id_finish (GAsyncResult* _res_,
                                                                                     GError** error);
static gboolean unity_protocol_scope_registry_find_scopes_for_id_co (UnityProtocolScopeRegistryFindScopesForIdData* _data_);
static void unity_protocol_scope_registry_find_scopes_for_id_ready (GObject* source_object,
                                                             GAsyncResult* _res_,
                                                             gpointer _user_data_);
static gchar** _vala_array_dup6 (gchar** self,
                          int length);
static gchar** _vala_array_dup7 (gchar** self,
                          int length);
GSList* unity_protocol_scope_registry_get_scopes (UnityProtocolScopeRegistry* self);
#define UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_METADATA_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA, UnityProtocolScopeRegistryScopeMetadataPrivate))
static inline void _g_slist_free__g_free0_ (GSList* self);
#define UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_METADATA_SCOPE_SCHEMA "com.canonical.Unity.Lenses"
void unity_protocol_scope_registry_scope_metadata_update_hidden_scope_ids (void);
UnityProtocolCategoryDefinition** unity_protocol_scope_registry_scope_metadata_get_categories (UnityProtocolScopeRegistryScopeMetadata* self,
                                                                                               int* result_length1);
UnityProtocolFilterDefinition** unity_protocol_scope_registry_scope_metadata_get_filters (UnityProtocolScopeRegistryScopeMetadata* self,
                                                                                          int* result_length1);
void unity_protocol_scope_registry_scope_metadata_load_from_key_file (UnityProtocolScopeRegistryScopeMetadata* self,
                                                                      GKeyFile* file,
                                                                      GError** error);
static void _vala_array_add9 (UnityProtocolCategoryDefinition** * array,
                       int* length,
                       int* size,
                       UnityProtocolCategoryDefinition* value);
static void _vala_array_add10 (UnityProtocolFilterDefinition** * array,
                        int* length,
                        int* size,
                        UnityProtocolFilterDefinition* value);
static UnityProtocolScopeRegistryScopeMetadata* unity_protocol_scope_registry_scope_metadata_for_keyfile (GKeyFile* file,
                                                                                                   GError** error);
UnityProtocolScopeRegistryScopeMetadata* unity_protocol_scope_registry_scope_metadata_new (void);
UnityProtocolScopeRegistryScopeMetadata* unity_protocol_scope_registry_scope_metadata_construct (GType object_type);
static gboolean _vala_string_array_contains (gchar* * stack,
                                      int stack_length,
                                      gchar* needle);
static void unity_protocol_scope_registry_scope_metadata_finalize (UnityProtocolScopeRegistryScopeMetadata * obj);
static void unity_protocol_scope_registry_scope_registry_node_finalize (UnityProtocolScopeRegistryScopeRegistryNode * obj);
static void unity_protocol_scope_registry_finalize (UnityProtocolScopeRegistry * obj);
GType unity_protocol_scope_group_scope_info_get_type (void) G_GNUC_CONST;
UnityProtocolScopeGroupScopeInfo* unity_protocol_scope_group_scope_info_dup (const UnityProtocolScopeGroupScopeInfo* self);
void unity_protocol_scope_group_scope_info_free (UnityProtocolScopeGroupScopeInfo* self);
void unity_protocol_scope_group_scope_info_copy (const UnityProtocolScopeGroupScopeInfo* self,
                                                 UnityProtocolScopeGroupScopeInfo* dest);
void unity_protocol_scope_group_scope_info_destroy (UnityProtocolScopeGroupScopeInfo* self);
gpointer unity_protocol_scope_group_config_ref (gpointer instance);
void unity_protocol_scope_group_config_unref (gpointer instance);
GParamSpec* unity_protocol_param_spec_scope_group_config (const gchar* name,
                                                          const gchar* nick,
                                                          const gchar* blurb,
                                                          GType object_type,
                                                          GParamFlags flags);
void unity_protocol_value_set_scope_group_config (GValue* value,
                                                  gpointer v_object);
void unity_protocol_value_take_scope_group_config (GValue* value,
                                                   gpointer v_object);
gpointer unity_protocol_value_get_scope_group_config (const GValue* value);
GType unity_protocol_scope_group_config_get_type (void) G_GNUC_CONST;
static void _unity_protocol_scope_group_scope_info_free0_ (gpointer var);
static inline void _g_list_free__unity_protocol_scope_group_scope_info_free0_ (GList* self);
#define UNITY_PROTOCOL_SCOPE_GROUP_CONFIG_SCOPE_GROUP_GROUP "Scope Group"
UnityProtocolScopeGroupConfig* unity_protocol_scope_group_config_new (const gchar* file_name,
                                                                      GError** error);
UnityProtocolScopeGroupConfig* unity_protocol_scope_group_config_construct (GType object_type,
                                                                            const gchar* file_name,
                                                                            GError** error);
static void unity_protocol_scope_group_config_finalize (UnityProtocolScopeGroupConfig * obj);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


GQuark
unity_protocol_parse_error_quark (void)
{
	return g_quark_from_static_string ("unity_protocol_parse_error-quark");
}


/**
     * Creates MetaDataColumnInfo from a string in format "name[t]", where 't' is GVariant type.
     */
static gint
string_index_of (const gchar* self,
                 const gchar* needle,
                 gint start_index)
{
	gint result = 0;
	gchar* _result_ = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	g_return_val_if_fail (self != NULL, 0);
	g_return_val_if_fail (needle != NULL, 0);
	_tmp0_ = strstr (((gchar*) self) + start_index, (gchar*) needle);
	_result_ = _tmp0_;
	_tmp1_ = _result_;
	if (_tmp1_ != NULL) {
		gchar* _tmp2_;
		_tmp2_ = _result_;
		result = (gint) (_tmp2_ - ((gchar*) self));
		return result;
	} else {
		result = -1;
		return result;
	}
}


static glong
string_strnlen (gchar* str,
                glong maxlen)
{
	glong result = 0L;
	gchar* end = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	_tmp0_ = memchr (str, 0, (gsize) maxlen);
	end = _tmp0_;
	_tmp1_ = end;
	if (_tmp1_ == NULL) {
		result = maxlen;
		return result;
	} else {
		gchar* _tmp2_;
		_tmp2_ = end;
		result = (glong) (_tmp2_ - str);
		return result;
	}
}


static gchar*
string_substring (const gchar* self,
                  glong offset,
                  glong len)
{
	gchar* result = NULL;
	glong string_length = 0L;
	gboolean _tmp0_ = FALSE;
	glong _tmp6_;
	gchar* _tmp7_;
	g_return_val_if_fail (self != NULL, NULL);
	if (offset >= ((glong) 0)) {
		_tmp0_ = len >= ((glong) 0);
	} else {
		_tmp0_ = FALSE;
	}
	if (_tmp0_) {
		string_length = string_strnlen ((gchar*) self, offset + len);
	} else {
		gint _tmp1_;
		gint _tmp2_;
		_tmp1_ = strlen (self);
		_tmp2_ = _tmp1_;
		string_length = (glong) _tmp2_;
	}
	if (offset < ((glong) 0)) {
		glong _tmp3_;
		_tmp3_ = string_length;
		offset = _tmp3_ + offset;
		g_return_val_if_fail (offset >= ((glong) 0), NULL);
	} else {
		glong _tmp4_;
		_tmp4_ = string_length;
		g_return_val_if_fail (offset <= _tmp4_, NULL);
	}
	if (len < ((glong) 0)) {
		glong _tmp5_;
		_tmp5_ = string_length;
		len = _tmp5_ - offset;
	}
	_tmp6_ = string_length;
	g_return_val_if_fail ((offset + len) <= _tmp6_, NULL);
	_tmp7_ = g_strndup (((gchar*) self) + offset, (gsize) len);
	result = _tmp7_;
	return result;
}


static gchar*
string_slice (const gchar* self,
              glong start,
              glong end)
{
	gchar* result = NULL;
	glong string_length = 0L;
	gint _tmp0_;
	gint _tmp1_;
	gboolean _tmp4_ = FALSE;
	gboolean _tmp6_ = FALSE;
	gchar* _tmp8_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = strlen (self);
	_tmp1_ = _tmp0_;
	string_length = (glong) _tmp1_;
	if (start < ((glong) 0)) {
		glong _tmp2_;
		_tmp2_ = string_length;
		start = _tmp2_ + start;
	}
	if (end < ((glong) 0)) {
		glong _tmp3_;
		_tmp3_ = string_length;
		end = _tmp3_ + end;
	}
	if (start >= ((glong) 0)) {
		glong _tmp5_;
		_tmp5_ = string_length;
		_tmp4_ = start <= _tmp5_;
	} else {
		_tmp4_ = FALSE;
	}
	g_return_val_if_fail (_tmp4_, NULL);
	if (end >= ((glong) 0)) {
		glong _tmp7_;
		_tmp7_ = string_length;
		_tmp6_ = end <= _tmp7_;
	} else {
		_tmp6_ = FALSE;
	}
	g_return_val_if_fail (_tmp6_, NULL);
	g_return_val_if_fail (start <= end, NULL);
	_tmp8_ = g_strndup (((gchar*) self) + start, (gsize) (end - start));
	result = _tmp8_;
	return result;
}


UnityProtocolMetaDataColumnInfo*
unity_protocol_meta_data_column_info_construct (GType object_type,
                                                const gchar* v,
                                                GError** error)
{
	UnityProtocolMetaDataColumnInfo* self = NULL;
	gint idx = 0;
	gboolean _tmp0_ = FALSE;
	gint _tmp1_;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (v != NULL, NULL);
	self = (UnityProtocolMetaDataColumnInfo*) g_type_create_instance (object_type);
	idx = string_index_of (v, "[", 0);
	_tmp1_ = idx;
	if (_tmp1_ > 0) {
		gint _tmp2_;
		gint _tmp3_;
		_tmp2_ = strlen (v);
		_tmp3_ = _tmp2_;
		_tmp0_ = string_index_of (v, "]", 0) == (_tmp3_ - 1);
	} else {
		_tmp0_ = FALSE;
	}
	if (_tmp0_) {
		gint _tmp4_;
		gchar* _tmp5_;
		gchar* _tmp6_;
		gint _tmp7_;
		gint _tmp8_;
		gint _tmp9_;
		gchar* _tmp10_;
		gchar* _tmp11_;
		_tmp4_ = idx;
		_tmp5_ = string_substring (v, (glong) 0, (glong) _tmp4_);
		_tmp6_ = _tmp5_;
		unity_protocol_meta_data_column_info_set_name (self, _tmp6_);
		_g_free0 (_tmp6_);
		_tmp7_ = idx;
		_tmp8_ = strlen (v);
		_tmp9_ = _tmp8_;
		_tmp10_ = string_slice (v, (glong) (_tmp7_ + 1), (glong) (_tmp9_ - 1));
		_tmp11_ = _tmp10_;
		unity_protocol_meta_data_column_info_set_type_id (self, _tmp11_);
		_g_free0 (_tmp11_);
	} else {
		GError* _tmp12_;
		_tmp12_ = g_error_new_literal (UNITY_PROTOCOL_PARSE_ERROR, UNITY_PROTOCOL_PARSE_ERROR_INVALID_METADATA, "Invalid format of meta data string");
		_inner_error_ = _tmp12_;
		g_propagate_error (error, _inner_error_);
		_unity_protocol_meta_data_column_info_unref0 (self);
		return NULL;
	}
	return self;
}


UnityProtocolMetaDataColumnInfo*
unity_protocol_meta_data_column_info_new (const gchar* v,
                                          GError** error)
{
	return unity_protocol_meta_data_column_info_construct (UNITY_PROTOCOL_TYPE_META_DATA_COLUMN_INFO, v, error);
}


static gboolean
unity_protocol_meta_data_column_info_real_equals (UnityProtocolMetaDataColumnInfo* self,
                                                  UnityProtocolMetaDataColumnInfo* m)
{
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	g_return_val_if_fail (m != NULL, FALSE);
	_tmp1_ = self->priv->_name;
	_tmp2_ = m->priv->_name;
	if (g_strcmp0 (_tmp1_, _tmp2_) == 0) {
		const gchar* _tmp3_;
		const gchar* _tmp4_;
		_tmp3_ = self->priv->_type_id;
		_tmp4_ = m->priv->_type_id;
		_tmp0_ = g_strcmp0 (_tmp3_, _tmp4_) == 0;
	} else {
		_tmp0_ = FALSE;
	}
	result = _tmp0_;
	return result;
}


gboolean
unity_protocol_meta_data_column_info_equals (UnityProtocolMetaDataColumnInfo* self,
                                             UnityProtocolMetaDataColumnInfo* m)
{
	g_return_val_if_fail (self != NULL, FALSE);
	return UNITY_PROTOCOL_META_DATA_COLUMN_INFO_GET_CLASS (self)->equals (self, m);
}


const gchar*
unity_protocol_meta_data_column_info_get_name (UnityProtocolMetaDataColumnInfo* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_name;
	result = _tmp0_;
	return result;
}


void
unity_protocol_meta_data_column_info_set_name (UnityProtocolMetaDataColumnInfo* self,
                                               const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_name);
	self->priv->_name = _tmp0_;
}


const gchar*
unity_protocol_meta_data_column_info_get_type_id (UnityProtocolMetaDataColumnInfo* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_type_id;
	result = _tmp0_;
	return result;
}


void
unity_protocol_meta_data_column_info_set_type_id (UnityProtocolMetaDataColumnInfo* self,
                                                  const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_type_id);
	self->priv->_type_id = _tmp0_;
}


static void
unity_protocol_value_meta_data_column_info_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}


static void
unity_protocol_value_meta_data_column_info_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		unity_protocol_meta_data_column_info_unref (value->data[0].v_pointer);
	}
}


static void
unity_protocol_value_meta_data_column_info_copy_value (const GValue* src_value,
                                                       GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = unity_protocol_meta_data_column_info_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}


static gpointer
unity_protocol_value_meta_data_column_info_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}


static gchar*
unity_protocol_value_meta_data_column_info_collect_value (GValue* value,
                                                          guint n_collect_values,
                                                          GTypeCValue* collect_values,
                                                          guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		UnityProtocolMetaDataColumnInfo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = unity_protocol_meta_data_column_info_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}


static gchar*
unity_protocol_value_meta_data_column_info_lcopy_value (const GValue* value,
                                                        guint n_collect_values,
                                                        GTypeCValue* collect_values,
                                                        guint collect_flags)
{
	UnityProtocolMetaDataColumnInfo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = unity_protocol_meta_data_column_info_ref (value->data[0].v_pointer);
	}
	return NULL;
}


GParamSpec*
unity_protocol_param_spec_meta_data_column_info (const gchar* name,
                                                 const gchar* nick,
                                                 const gchar* blurb,
                                                 GType object_type,
                                                 GParamFlags flags)
{
	UnityProtocolParamSpecMetaDataColumnInfo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, UNITY_PROTOCOL_TYPE_META_DATA_COLUMN_INFO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}


gpointer
unity_protocol_value_get_meta_data_column_info (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_META_DATA_COLUMN_INFO), NULL);
	return value->data[0].v_pointer;
}


void
unity_protocol_value_set_meta_data_column_info (GValue* value,
                                                gpointer v_object)
{
	UnityProtocolMetaDataColumnInfo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_META_DATA_COLUMN_INFO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_TYPE_META_DATA_COLUMN_INFO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		unity_protocol_meta_data_column_info_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_meta_data_column_info_unref (old);
	}
}


void
unity_protocol_value_take_meta_data_column_info (GValue* value,
                                                 gpointer v_object)
{
	UnityProtocolMetaDataColumnInfo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_META_DATA_COLUMN_INFO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_TYPE_META_DATA_COLUMN_INFO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_meta_data_column_info_unref (old);
	}
}


static void
unity_protocol_meta_data_column_info_class_init (UnityProtocolMetaDataColumnInfoClass * klass)
{
	unity_protocol_meta_data_column_info_parent_class = g_type_class_peek_parent (klass);
	((UnityProtocolMetaDataColumnInfoClass *) klass)->finalize = unity_protocol_meta_data_column_info_finalize;
	g_type_class_add_private (klass, sizeof (UnityProtocolMetaDataColumnInfoPrivate));
	((UnityProtocolMetaDataColumnInfoClass *) klass)->equals = (gboolean (*) (UnityProtocolMetaDataColumnInfo *, UnityProtocolMetaDataColumnInfo*)) unity_protocol_meta_data_column_info_real_equals;
}


static void
unity_protocol_meta_data_column_info_instance_init (UnityProtocolMetaDataColumnInfo * self)
{
	self->priv = UNITY_PROTOCOL_META_DATA_COLUMN_INFO_GET_PRIVATE (self);
	self->ref_count = 1;
}


static void
unity_protocol_meta_data_column_info_finalize (UnityProtocolMetaDataColumnInfo * obj)
{
	UnityProtocolMetaDataColumnInfo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_PROTOCOL_TYPE_META_DATA_COLUMN_INFO, UnityProtocolMetaDataColumnInfo);
	g_signal_handlers_destroy (self);
	_g_free0 (self->priv->_name);
	_g_free0 (self->priv->_type_id);
}


GType
unity_protocol_meta_data_column_info_get_type (void)
{
	static volatile gsize unity_protocol_meta_data_column_info_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_meta_data_column_info_type_id__volatile)) {
		static const GTypeValueTable g_define_type_value_table = { unity_protocol_value_meta_data_column_info_init, unity_protocol_value_meta_data_column_info_free_value, unity_protocol_value_meta_data_column_info_copy_value, unity_protocol_value_meta_data_column_info_peek_pointer, "p", unity_protocol_value_meta_data_column_info_collect_value, "p", unity_protocol_value_meta_data_column_info_lcopy_value };
		static const GTypeInfo g_define_type_info = { sizeof (UnityProtocolMetaDataColumnInfoClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_protocol_meta_data_column_info_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityProtocolMetaDataColumnInfo), 0, (GInstanceInitFunc) unity_protocol_meta_data_column_info_instance_init, &g_define_type_value_table };
		static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
		GType unity_protocol_meta_data_column_info_type_id;
		unity_protocol_meta_data_column_info_type_id = g_type_register_fundamental (g_type_fundamental_next (), "UnityProtocolMetaDataColumnInfo", &g_define_type_info, &g_define_type_fundamental_info, 0);
		g_once_init_leave (&unity_protocol_meta_data_column_info_type_id__volatile, unity_protocol_meta_data_column_info_type_id);
	}
	return unity_protocol_meta_data_column_info_type_id__volatile;
}


gpointer
unity_protocol_meta_data_column_info_ref (gpointer instance)
{
	UnityProtocolMetaDataColumnInfo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}


void
unity_protocol_meta_data_column_info_unref (gpointer instance)
{
	UnityProtocolMetaDataColumnInfo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		UNITY_PROTOCOL_META_DATA_COLUMN_INFO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}


/**
     * Creates a list of MetaDataColumnInfo objects from a semicolon-separated strings, e.g. "name1[type];name2[type2]...".
     *
     * @param mdinfo_str semicolon-separated name[type] entries
     * @return list of MetaDataColumnInfo objects
     */
static void
_unity_protocol_meta_data_column_info_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (unity_protocol_meta_data_column_info_unref (var), NULL));
}


static gpointer
_unity_protocol_meta_data_column_info_ref0 (gpointer self)
{
	return self ? unity_protocol_meta_data_column_info_ref (self) : NULL;
}


UnityProtocolMetaDataSchemaInfo*
unity_protocol_meta_data_schema_info_from_string (const gchar* mdinfo_str,
                                                  GError** error)
{
	UnityProtocolMetaDataSchemaInfo* result = NULL;
	UnityProtocolMetaDataSchemaInfo* schema_info = NULL;
	UnityProtocolMetaDataSchemaInfo* _tmp0_;
	UnityProtocolMetaDataSchemaInfo* _tmp1_;
	GPtrArray* _tmp2_;
	gchar** _tmp3_;
	gchar** _tmp4_;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (mdinfo_str != NULL, NULL);
	_tmp0_ = unity_protocol_meta_data_schema_info_new ();
	schema_info = _tmp0_;
	_tmp1_ = schema_info;
	_tmp2_ = g_ptr_array_new_full ((guint) 0, _unity_protocol_meta_data_column_info_unref0_);
	_g_ptr_array_unref0 (_tmp1_->columns);
	_tmp1_->columns = _tmp2_;
	_tmp4_ = _tmp3_ = g_strsplit (mdinfo_str, ";", 0);
	{
		gchar** m_collection = NULL;
		gint m_collection_length1 = 0;
		gint _m_collection_size_ = 0;
		gint m_it = 0;
		m_collection = _tmp4_;
		m_collection_length1 = _vala_array_length (_tmp3_);
		for (m_it = 0; m_it < _vala_array_length (_tmp3_); m_it = m_it + 1) {
			gchar* _tmp5_;
			gchar* m = NULL;
			_tmp5_ = g_strdup (m_collection[m_it]);
			m = _tmp5_;
			{
				const gchar* _tmp6_;
				gint _tmp7_;
				gint _tmp8_;
				_tmp6_ = m;
				_tmp7_ = strlen (_tmp6_);
				_tmp8_ = _tmp7_;
				if (_tmp8_ > 0) {
					UnityProtocolMetaDataColumnInfo* info = NULL;
					const gchar* _tmp9_;
					UnityProtocolMetaDataColumnInfo* _tmp10_;
					UnityProtocolMetaDataSchemaInfo* _tmp11_;
					GPtrArray* _tmp12_;
					UnityProtocolMetaDataColumnInfo* _tmp13_;
					UnityProtocolMetaDataColumnInfo* _tmp14_;
					_tmp9_ = m;
					_tmp10_ = unity_protocol_meta_data_column_info_new (_tmp9_, &_inner_error_);
					info = _tmp10_;
					if (G_UNLIKELY (_inner_error_ != NULL)) {
						g_propagate_error (error, _inner_error_);
						_g_free0 (m);
						m_collection = (_vala_array_free (m_collection, m_collection_length1, (GDestroyNotify) g_free), NULL);
						_unity_protocol_meta_data_schema_info_unref0 (schema_info);
						return NULL;
					}
					_tmp11_ = schema_info;
					_tmp12_ = _tmp11_->columns;
					_tmp13_ = info;
					_tmp14_ = _unity_protocol_meta_data_column_info_ref0 (_tmp13_);
					g_ptr_array_add (_tmp12_, _tmp14_);
					_unity_protocol_meta_data_column_info_unref0 (info);
				}
				_g_free0 (m);
			}
		}
		m_collection = (_vala_array_free (m_collection, m_collection_length1, (GDestroyNotify) g_free), NULL);
	}
	result = schema_info;
	return result;
}


static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static gint
g_ptr_array_get_length (GPtrArray* self)
{
	gint result;
	guint _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->len;
	result = (gint) _tmp0_;
	return result;
}


static void
g_ptr_array_set_length (GPtrArray* self,
                        gint value)
{
	g_return_if_fail (self != NULL);
	g_ptr_array_set_size (self, value);
}


GHashTable*
unity_protocol_meta_data_schema_info_as_hash_table (UnityProtocolMetaDataSchemaInfo* self)
{
	GHashTable* result = NULL;
	GHashTable* ret = NULL;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = g_str_hash;
	_tmp1_ = g_str_equal;
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, _g_free0_);
	ret = _tmp2_;
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp3_ = FALSE;
			_tmp3_ = TRUE;
			while (TRUE) {
				gint _tmp5_;
				GPtrArray* _tmp6_;
				gint _tmp7_;
				gint _tmp8_;
				UnityProtocolMetaDataColumnInfo* info = NULL;
				GPtrArray* _tmp9_;
				gint _tmp10_;
				gconstpointer _tmp11_;
				GHashTable* _tmp12_;
				UnityProtocolMetaDataColumnInfo* _tmp13_;
				const gchar* _tmp14_;
				const gchar* _tmp15_;
				gchar* _tmp16_;
				UnityProtocolMetaDataColumnInfo* _tmp17_;
				const gchar* _tmp18_;
				const gchar* _tmp19_;
				gchar* _tmp20_;
				if (!_tmp3_) {
					gint _tmp4_;
					_tmp4_ = i;
					i = _tmp4_ + 1;
				}
				_tmp3_ = FALSE;
				_tmp5_ = i;
				_tmp6_ = self->columns;
				_tmp7_ = g_ptr_array_get_length (_tmp6_);
				_tmp8_ = _tmp7_;
				if (!(_tmp5_ < _tmp8_)) {
					break;
				}
				_tmp9_ = self->columns;
				_tmp10_ = i;
				_tmp11_ = g_ptr_array_index (_tmp9_, (guint) _tmp10_);
				info = (UnityProtocolMetaDataColumnInfo*) _tmp11_;
				_tmp12_ = ret;
				_tmp13_ = info;
				_tmp14_ = unity_protocol_meta_data_column_info_get_name (_tmp13_);
				_tmp15_ = _tmp14_;
				_tmp16_ = g_strdup (_tmp15_);
				_tmp17_ = info;
				_tmp18_ = unity_protocol_meta_data_column_info_get_type_id (_tmp17_);
				_tmp19_ = _tmp18_;
				_tmp20_ = g_strdup (_tmp19_);
				g_hash_table_insert (_tmp12_, _tmp16_, _tmp20_);
			}
		}
	}
	result = ret;
	return result;
}


gboolean
unity_protocol_meta_data_schema_info_equals (UnityProtocolMetaDataSchemaInfo* self,
                                             UnityProtocolMetaDataSchemaInfo* s)
{
	gboolean result = FALSE;
	GPtrArray* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	GPtrArray* _tmp3_;
	gint _tmp4_;
	gint _tmp5_;
	g_return_val_if_fail (self != NULL, FALSE);
	g_return_val_if_fail (s != NULL, FALSE);
	_tmp0_ = self->columns;
	_tmp1_ = g_ptr_array_get_length (_tmp0_);
	_tmp2_ = _tmp1_;
	_tmp3_ = s->columns;
	_tmp4_ = g_ptr_array_get_length (_tmp3_);
	_tmp5_ = _tmp4_;
	if (_tmp2_ != _tmp5_) {
		result = FALSE;
		return result;
	}
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp6_ = FALSE;
			_tmp6_ = TRUE;
			while (TRUE) {
				gint _tmp8_;
				GPtrArray* _tmp9_;
				gint _tmp10_;
				gint _tmp11_;
				GPtrArray* _tmp12_;
				gint _tmp13_;
				gconstpointer _tmp14_;
				GPtrArray* _tmp15_;
				gint _tmp16_;
				gconstpointer _tmp17_;
				if (!_tmp6_) {
					gint _tmp7_;
					_tmp7_ = i;
					i = _tmp7_ + 1;
				}
				_tmp6_ = FALSE;
				_tmp8_ = i;
				_tmp9_ = self->columns;
				_tmp10_ = g_ptr_array_get_length (_tmp9_);
				_tmp11_ = _tmp10_;
				if (!(_tmp8_ < _tmp11_)) {
					break;
				}
				_tmp12_ = self->columns;
				_tmp13_ = i;
				_tmp14_ = g_ptr_array_index (_tmp12_, (guint) _tmp13_);
				_tmp15_ = s->columns;
				_tmp16_ = i;
				_tmp17_ = g_ptr_array_index (_tmp15_, (guint) _tmp16_);
				if (!unity_protocol_meta_data_column_info_equals ((UnityProtocolMetaDataColumnInfo*) _tmp14_, (UnityProtocolMetaDataColumnInfo*) _tmp17_)) {
					result = FALSE;
					return result;
				}
			}
		}
	}
	result = TRUE;
	return result;
}


UnityProtocolMetaDataSchemaInfo*
unity_protocol_meta_data_schema_info_construct (GType object_type)
{
	UnityProtocolMetaDataSchemaInfo* self = NULL;
	self = (UnityProtocolMetaDataSchemaInfo*) g_type_create_instance (object_type);
	return self;
}


UnityProtocolMetaDataSchemaInfo*
unity_protocol_meta_data_schema_info_new (void)
{
	return unity_protocol_meta_data_schema_info_construct (UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO);
}


static void
unity_protocol_value_meta_data_schema_info_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}


static void
unity_protocol_value_meta_data_schema_info_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		unity_protocol_meta_data_schema_info_unref (value->data[0].v_pointer);
	}
}


static void
unity_protocol_value_meta_data_schema_info_copy_value (const GValue* src_value,
                                                       GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = unity_protocol_meta_data_schema_info_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}


static gpointer
unity_protocol_value_meta_data_schema_info_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}


static gchar*
unity_protocol_value_meta_data_schema_info_collect_value (GValue* value,
                                                          guint n_collect_values,
                                                          GTypeCValue* collect_values,
                                                          guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		UnityProtocolMetaDataSchemaInfo * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = unity_protocol_meta_data_schema_info_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}


static gchar*
unity_protocol_value_meta_data_schema_info_lcopy_value (const GValue* value,
                                                        guint n_collect_values,
                                                        GTypeCValue* collect_values,
                                                        guint collect_flags)
{
	UnityProtocolMetaDataSchemaInfo ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = unity_protocol_meta_data_schema_info_ref (value->data[0].v_pointer);
	}
	return NULL;
}


GParamSpec*
unity_protocol_param_spec_meta_data_schema_info (const gchar* name,
                                                 const gchar* nick,
                                                 const gchar* blurb,
                                                 GType object_type,
                                                 GParamFlags flags)
{
	UnityProtocolParamSpecMetaDataSchemaInfo* spec;
	g_return_val_if_fail (g_type_is_a (object_type, UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}


gpointer
unity_protocol_value_get_meta_data_schema_info (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO), NULL);
	return value->data[0].v_pointer;
}


void
unity_protocol_value_set_meta_data_schema_info (GValue* value,
                                                gpointer v_object)
{
	UnityProtocolMetaDataSchemaInfo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		unity_protocol_meta_data_schema_info_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_meta_data_schema_info_unref (old);
	}
}


void
unity_protocol_value_take_meta_data_schema_info (GValue* value,
                                                 gpointer v_object)
{
	UnityProtocolMetaDataSchemaInfo * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_meta_data_schema_info_unref (old);
	}
}


static void
unity_protocol_meta_data_schema_info_class_init (UnityProtocolMetaDataSchemaInfoClass * klass)
{
	unity_protocol_meta_data_schema_info_parent_class = g_type_class_peek_parent (klass);
	((UnityProtocolMetaDataSchemaInfoClass *) klass)->finalize = unity_protocol_meta_data_schema_info_finalize;
}


static void
unity_protocol_meta_data_schema_info_instance_init (UnityProtocolMetaDataSchemaInfo * self)
{
	self->ref_count = 1;
}


static void
unity_protocol_meta_data_schema_info_finalize (UnityProtocolMetaDataSchemaInfo * obj)
{
	UnityProtocolMetaDataSchemaInfo * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO, UnityProtocolMetaDataSchemaInfo);
	g_signal_handlers_destroy (self);
	_g_ptr_array_unref0 (self->columns);
}


GType
unity_protocol_meta_data_schema_info_get_type (void)
{
	static volatile gsize unity_protocol_meta_data_schema_info_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_meta_data_schema_info_type_id__volatile)) {
		static const GTypeValueTable g_define_type_value_table = { unity_protocol_value_meta_data_schema_info_init, unity_protocol_value_meta_data_schema_info_free_value, unity_protocol_value_meta_data_schema_info_copy_value, unity_protocol_value_meta_data_schema_info_peek_pointer, "p", unity_protocol_value_meta_data_schema_info_collect_value, "p", unity_protocol_value_meta_data_schema_info_lcopy_value };
		static const GTypeInfo g_define_type_info = { sizeof (UnityProtocolMetaDataSchemaInfoClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_protocol_meta_data_schema_info_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityProtocolMetaDataSchemaInfo), 0, (GInstanceInitFunc) unity_protocol_meta_data_schema_info_instance_init, &g_define_type_value_table };
		static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
		GType unity_protocol_meta_data_schema_info_type_id;
		unity_protocol_meta_data_schema_info_type_id = g_type_register_fundamental (g_type_fundamental_next (), "UnityProtocolMetaDataSchemaInfo", &g_define_type_info, &g_define_type_fundamental_info, 0);
		g_once_init_leave (&unity_protocol_meta_data_schema_info_type_id__volatile, unity_protocol_meta_data_schema_info_type_id);
	}
	return unity_protocol_meta_data_schema_info_type_id__volatile;
}


gpointer
unity_protocol_meta_data_schema_info_ref (gpointer instance)
{
	UnityProtocolMetaDataSchemaInfo * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}


void
unity_protocol_meta_data_schema_info_unref (gpointer instance)
{
	UnityProtocolMetaDataSchemaInfo * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		UNITY_PROTOCOL_META_DATA_SCHEMA_INFO_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}


static gchar
string_get (const gchar* self,
            glong index)
{
	gchar result = '\0';
	gchar _tmp0_;
	g_return_val_if_fail (self != NULL, '\0');
	_tmp0_ = ((gchar*) self)[index];
	result = _tmp0_;
	return result;
}


UnityProtocolCategoryDefinition*
unity_protocol_category_definition_create (const gchar* id,
                                           const gchar* name,
                                           const gchar* icon,
                                           const gchar* renderer,
                                           const gchar* content_type,
                                           const gchar* dedup_field,
                                           const gchar* sort_field)
{
	UnityProtocolCategoryDefinition* result = NULL;
	UnityProtocolCategoryDefinition* def = NULL;
	UnityProtocolCategoryDefinition* _tmp0_;
	g_return_val_if_fail (id != NULL, NULL);
	g_return_val_if_fail (name != NULL, NULL);
	g_return_val_if_fail (icon != NULL, NULL);
	_vala_return_val_if_fail (string_get (id, (glong) 0) != '\0', "id[0] != '\\0'", NULL);
	_tmp0_ = unity_protocol_category_definition_new ();
	def = _tmp0_;
	unity_protocol_category_definition_set_id (def, id);
	unity_protocol_category_definition_set_name (def, name);
	unity_protocol_category_definition_set_icon (def, icon);
	unity_protocol_category_definition_set_renderer (def, renderer);
	unity_protocol_category_definition_set_content_type (def, content_type);
	unity_protocol_category_definition_set_dedup_field (def, dedup_field);
	unity_protocol_category_definition_set_sort_field (def, sort_field);
	result = def;
	return result;
}


UnityProtocolCategoryDefinition*
unity_protocol_category_definition_construct (GType object_type)
{
	UnityProtocolCategoryDefinition* self = NULL;
	self = (UnityProtocolCategoryDefinition*) g_type_create_instance (object_type);
	return self;
}


UnityProtocolCategoryDefinition*
unity_protocol_category_definition_new (void)
{
	return unity_protocol_category_definition_construct (UNITY_PROTOCOL_TYPE_CATEGORY_DEFINITION);
}


const gchar*
unity_protocol_category_definition_get_id (UnityProtocolCategoryDefinition* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_id;
	result = _tmp0_;
	return result;
}


static void
unity_protocol_category_definition_set_id (UnityProtocolCategoryDefinition* self,
                                           const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_id);
	self->priv->_id = _tmp0_;
}


const gchar*
unity_protocol_category_definition_get_name (UnityProtocolCategoryDefinition* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_name;
	result = _tmp0_;
	return result;
}


static void
unity_protocol_category_definition_set_name (UnityProtocolCategoryDefinition* self,
                                             const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_name);
	self->priv->_name = _tmp0_;
}


const gchar*
unity_protocol_category_definition_get_icon (UnityProtocolCategoryDefinition* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_icon;
	result = _tmp0_;
	return result;
}


static void
unity_protocol_category_definition_set_icon (UnityProtocolCategoryDefinition* self,
                                             const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_icon);
	self->priv->_icon = _tmp0_;
}


const gchar*
unity_protocol_category_definition_get_renderer (UnityProtocolCategoryDefinition* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_renderer;
	result = _tmp0_;
	return result;
}


static void
unity_protocol_category_definition_set_renderer (UnityProtocolCategoryDefinition* self,
                                                 const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_renderer);
	self->priv->_renderer = _tmp0_;
}


const gchar*
unity_protocol_category_definition_get_content_type (UnityProtocolCategoryDefinition* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_content_type;
	result = _tmp0_;
	return result;
}


static void
unity_protocol_category_definition_set_content_type (UnityProtocolCategoryDefinition* self,
                                                     const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_content_type);
	self->priv->_content_type = _tmp0_;
}


const gchar*
unity_protocol_category_definition_get_dedup_field (UnityProtocolCategoryDefinition* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_dedup_field;
	result = _tmp0_;
	return result;
}


static void
unity_protocol_category_definition_set_dedup_field (UnityProtocolCategoryDefinition* self,
                                                    const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_dedup_field);
	self->priv->_dedup_field = _tmp0_;
}


const gchar*
unity_protocol_category_definition_get_sort_field (UnityProtocolCategoryDefinition* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_sort_field;
	result = _tmp0_;
	return result;
}


static void
unity_protocol_category_definition_set_sort_field (UnityProtocolCategoryDefinition* self,
                                                   const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_sort_field);
	self->priv->_sort_field = _tmp0_;
}


const gchar*
unity_protocol_category_definition_get_renderer_hint (UnityProtocolCategoryDefinition* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_renderer_hint;
	result = _tmp0_;
	return result;
}


void
unity_protocol_category_definition_set_renderer_hint (UnityProtocolCategoryDefinition* self,
                                                      const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_renderer_hint);
	self->priv->_renderer_hint = _tmp0_;
}


static void
unity_protocol_value_category_definition_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}


static void
unity_protocol_value_category_definition_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		unity_protocol_category_definition_unref (value->data[0].v_pointer);
	}
}


static void
unity_protocol_value_category_definition_copy_value (const GValue* src_value,
                                                     GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = unity_protocol_category_definition_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}


static gpointer
unity_protocol_value_category_definition_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}


static gchar*
unity_protocol_value_category_definition_collect_value (GValue* value,
                                                        guint n_collect_values,
                                                        GTypeCValue* collect_values,
                                                        guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		UnityProtocolCategoryDefinition * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = unity_protocol_category_definition_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}


static gchar*
unity_protocol_value_category_definition_lcopy_value (const GValue* value,
                                                      guint n_collect_values,
                                                      GTypeCValue* collect_values,
                                                      guint collect_flags)
{
	UnityProtocolCategoryDefinition ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = unity_protocol_category_definition_ref (value->data[0].v_pointer);
	}
	return NULL;
}


GParamSpec*
unity_protocol_param_spec_category_definition (const gchar* name,
                                               const gchar* nick,
                                               const gchar* blurb,
                                               GType object_type,
                                               GParamFlags flags)
{
	UnityProtocolParamSpecCategoryDefinition* spec;
	g_return_val_if_fail (g_type_is_a (object_type, UNITY_PROTOCOL_TYPE_CATEGORY_DEFINITION), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}


gpointer
unity_protocol_value_get_category_definition (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_CATEGORY_DEFINITION), NULL);
	return value->data[0].v_pointer;
}


void
unity_protocol_value_set_category_definition (GValue* value,
                                              gpointer v_object)
{
	UnityProtocolCategoryDefinition * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_CATEGORY_DEFINITION));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_TYPE_CATEGORY_DEFINITION));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		unity_protocol_category_definition_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_category_definition_unref (old);
	}
}


void
unity_protocol_value_take_category_definition (GValue* value,
                                               gpointer v_object)
{
	UnityProtocolCategoryDefinition * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_CATEGORY_DEFINITION));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_TYPE_CATEGORY_DEFINITION));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_category_definition_unref (old);
	}
}


static void
unity_protocol_category_definition_class_init (UnityProtocolCategoryDefinitionClass * klass)
{
	unity_protocol_category_definition_parent_class = g_type_class_peek_parent (klass);
	((UnityProtocolCategoryDefinitionClass *) klass)->finalize = unity_protocol_category_definition_finalize;
	g_type_class_add_private (klass, sizeof (UnityProtocolCategoryDefinitionPrivate));
}


static void
unity_protocol_category_definition_instance_init (UnityProtocolCategoryDefinition * self)
{
	self->priv = UNITY_PROTOCOL_CATEGORY_DEFINITION_GET_PRIVATE (self);
	self->ref_count = 1;
}


static void
unity_protocol_category_definition_finalize (UnityProtocolCategoryDefinition * obj)
{
	UnityProtocolCategoryDefinition * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_PROTOCOL_TYPE_CATEGORY_DEFINITION, UnityProtocolCategoryDefinition);
	g_signal_handlers_destroy (self);
	_g_free0 (self->priv->_id);
	_g_free0 (self->priv->_name);
	_g_free0 (self->priv->_icon);
	_g_free0 (self->priv->_renderer);
	_g_free0 (self->priv->_content_type);
	_g_free0 (self->priv->_dedup_field);
	_g_free0 (self->priv->_sort_field);
	_g_free0 (self->priv->_renderer_hint);
}


GType
unity_protocol_category_definition_get_type (void)
{
	static volatile gsize unity_protocol_category_definition_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_category_definition_type_id__volatile)) {
		static const GTypeValueTable g_define_type_value_table = { unity_protocol_value_category_definition_init, unity_protocol_value_category_definition_free_value, unity_protocol_value_category_definition_copy_value, unity_protocol_value_category_definition_peek_pointer, "p", unity_protocol_value_category_definition_collect_value, "p", unity_protocol_value_category_definition_lcopy_value };
		static const GTypeInfo g_define_type_info = { sizeof (UnityProtocolCategoryDefinitionClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_protocol_category_definition_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityProtocolCategoryDefinition), 0, (GInstanceInitFunc) unity_protocol_category_definition_instance_init, &g_define_type_value_table };
		static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
		GType unity_protocol_category_definition_type_id;
		unity_protocol_category_definition_type_id = g_type_register_fundamental (g_type_fundamental_next (), "UnityProtocolCategoryDefinition", &g_define_type_info, &g_define_type_fundamental_info, 0);
		g_once_init_leave (&unity_protocol_category_definition_type_id__volatile, unity_protocol_category_definition_type_id);
	}
	return unity_protocol_category_definition_type_id__volatile;
}


gpointer
unity_protocol_category_definition_ref (gpointer instance)
{
	UnityProtocolCategoryDefinition * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}


void
unity_protocol_category_definition_unref (gpointer instance)
{
	UnityProtocolCategoryDefinition * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		UNITY_PROTOCOL_CATEGORY_DEFINITION_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}


gchar**
unity_protocol_filter_definition_get_option_ids (UnityProtocolFilterDefinition* self,
                                                 int* result_length1)
{
	gchar** result = NULL;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->option_ids;
	_tmp0__length1 = self->priv->option_ids_length1;
	_tmp1_ = _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	if (result_length1) {
		*result_length1 = _tmp1__length1;
	}
	result = _tmp1_;
	return result;
}


gchar**
unity_protocol_filter_definition_get_option_names (UnityProtocolFilterDefinition* self,
                                                   int* result_length1)
{
	gchar** result = NULL;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->option_names;
	_tmp0__length1 = self->priv->option_names_length1;
	_tmp1_ = _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	if (result_length1) {
		*result_length1 = _tmp1__length1;
	}
	result = _tmp1_;
	return result;
}


static void
_vala_array_add5 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (gchar*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


static void
_vala_array_add6 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (gchar*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


void
unity_protocol_filter_definition_add_option (UnityProtocolFilterDefinition* self,
                                             const gchar* id,
                                             const gchar* name)
{
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar* _tmp1_;
	gchar** _tmp2_;
	gint _tmp2__length1;
	gchar* _tmp3_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (id != NULL);
	g_return_if_fail (name != NULL);
	_vala_return_if_fail (string_get (id, (glong) 0) != '\0', "id[0] != '\\0'");
	_tmp0_ = self->priv->option_ids;
	_tmp0__length1 = self->priv->option_ids_length1;
	_tmp1_ = g_strdup (id);
	_vala_array_add5 (&self->priv->option_ids, &self->priv->option_ids_length1, &self->priv->_option_ids_size_, _tmp1_);
	_tmp2_ = self->priv->option_names;
	_tmp2__length1 = self->priv->option_names_length1;
	_tmp3_ = g_strdup (name);
	_vala_array_add6 (&self->priv->option_names, &self->priv->option_names_length1, &self->priv->_option_names_size_, _tmp3_);
}


UnityProtocolFilterDefinition*
unity_protocol_filter_definition_create (const gchar* id,
                                         const gchar* filter_type,
                                         const gchar* name,
                                         const gchar* sort_type)
{
	UnityProtocolFilterDefinition* result = NULL;
	UnityProtocolFilterDefinition* def = NULL;
	UnityProtocolFilterDefinition* _tmp0_;
	g_return_val_if_fail (id != NULL, NULL);
	g_return_val_if_fail (filter_type != NULL, NULL);
	g_return_val_if_fail (name != NULL, NULL);
	_vala_return_val_if_fail (string_get (id, (glong) 0) != '\0', "id[0] != '\\0'", NULL);
	_tmp0_ = unity_protocol_filter_definition_new ();
	def = _tmp0_;
	unity_protocol_filter_definition_set_id (def, id);
	unity_protocol_filter_definition_set_filter_type (def, filter_type);
	unity_protocol_filter_definition_set_name (def, name);
	unity_protocol_filter_definition_set_sort_type (def, sort_type);
	result = def;
	return result;
}


UnityProtocolFilterDefinition*
unity_protocol_filter_definition_construct (GType object_type)
{
	UnityProtocolFilterDefinition* self = NULL;
	self = (UnityProtocolFilterDefinition*) g_type_create_instance (object_type);
	return self;
}


UnityProtocolFilterDefinition*
unity_protocol_filter_definition_new (void)
{
	return unity_protocol_filter_definition_construct (UNITY_PROTOCOL_TYPE_FILTER_DEFINITION);
}


const gchar*
unity_protocol_filter_definition_get_id (UnityProtocolFilterDefinition* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_id;
	result = _tmp0_;
	return result;
}


static void
unity_protocol_filter_definition_set_id (UnityProtocolFilterDefinition* self,
                                         const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_id);
	self->priv->_id = _tmp0_;
}


const gchar*
unity_protocol_filter_definition_get_filter_type (UnityProtocolFilterDefinition* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_filter_type;
	result = _tmp0_;
	return result;
}


static void
unity_protocol_filter_definition_set_filter_type (UnityProtocolFilterDefinition* self,
                                                  const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_filter_type);
	self->priv->_filter_type = _tmp0_;
}


const gchar*
unity_protocol_filter_definition_get_name (UnityProtocolFilterDefinition* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_name;
	result = _tmp0_;
	return result;
}


static void
unity_protocol_filter_definition_set_name (UnityProtocolFilterDefinition* self,
                                           const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_name);
	self->priv->_name = _tmp0_;
}


const gchar*
unity_protocol_filter_definition_get_sort_type (UnityProtocolFilterDefinition* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_sort_type;
	result = _tmp0_;
	return result;
}


static void
unity_protocol_filter_definition_set_sort_type (UnityProtocolFilterDefinition* self,
                                                const gchar* value)
{
	gchar* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = g_strdup (value);
	_g_free0 (self->priv->_sort_type);
	self->priv->_sort_type = _tmp0_;
}


static void
unity_protocol_value_filter_definition_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}


static void
unity_protocol_value_filter_definition_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		unity_protocol_filter_definition_unref (value->data[0].v_pointer);
	}
}


static void
unity_protocol_value_filter_definition_copy_value (const GValue* src_value,
                                                   GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = unity_protocol_filter_definition_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}


static gpointer
unity_protocol_value_filter_definition_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}


static gchar*
unity_protocol_value_filter_definition_collect_value (GValue* value,
                                                      guint n_collect_values,
                                                      GTypeCValue* collect_values,
                                                      guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		UnityProtocolFilterDefinition * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = unity_protocol_filter_definition_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}


static gchar*
unity_protocol_value_filter_definition_lcopy_value (const GValue* value,
                                                    guint n_collect_values,
                                                    GTypeCValue* collect_values,
                                                    guint collect_flags)
{
	UnityProtocolFilterDefinition ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = unity_protocol_filter_definition_ref (value->data[0].v_pointer);
	}
	return NULL;
}


GParamSpec*
unity_protocol_param_spec_filter_definition (const gchar* name,
                                             const gchar* nick,
                                             const gchar* blurb,
                                             GType object_type,
                                             GParamFlags flags)
{
	UnityProtocolParamSpecFilterDefinition* spec;
	g_return_val_if_fail (g_type_is_a (object_type, UNITY_PROTOCOL_TYPE_FILTER_DEFINITION), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}


gpointer
unity_protocol_value_get_filter_definition (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_FILTER_DEFINITION), NULL);
	return value->data[0].v_pointer;
}


void
unity_protocol_value_set_filter_definition (GValue* value,
                                            gpointer v_object)
{
	UnityProtocolFilterDefinition * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_FILTER_DEFINITION));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_TYPE_FILTER_DEFINITION));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		unity_protocol_filter_definition_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_filter_definition_unref (old);
	}
}


void
unity_protocol_value_take_filter_definition (GValue* value,
                                             gpointer v_object)
{
	UnityProtocolFilterDefinition * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_FILTER_DEFINITION));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_TYPE_FILTER_DEFINITION));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_filter_definition_unref (old);
	}
}


static void
unity_protocol_filter_definition_class_init (UnityProtocolFilterDefinitionClass * klass)
{
	unity_protocol_filter_definition_parent_class = g_type_class_peek_parent (klass);
	((UnityProtocolFilterDefinitionClass *) klass)->finalize = unity_protocol_filter_definition_finalize;
	g_type_class_add_private (klass, sizeof (UnityProtocolFilterDefinitionPrivate));
}


static void
unity_protocol_filter_definition_instance_init (UnityProtocolFilterDefinition * self)
{
	self->priv = UNITY_PROTOCOL_FILTER_DEFINITION_GET_PRIVATE (self);
	self->ref_count = 1;
}


static void
unity_protocol_filter_definition_finalize (UnityProtocolFilterDefinition * obj)
{
	UnityProtocolFilterDefinition * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_PROTOCOL_TYPE_FILTER_DEFINITION, UnityProtocolFilterDefinition);
	g_signal_handlers_destroy (self);
	_g_free0 (self->priv->_id);
	_g_free0 (self->priv->_filter_type);
	_g_free0 (self->priv->_name);
	_g_free0 (self->priv->_sort_type);
	self->priv->option_ids = (_vala_array_free (self->priv->option_ids, self->priv->option_ids_length1, (GDestroyNotify) g_free), NULL);
	self->priv->option_names = (_vala_array_free (self->priv->option_names, self->priv->option_names_length1, (GDestroyNotify) g_free), NULL);
}


GType
unity_protocol_filter_definition_get_type (void)
{
	static volatile gsize unity_protocol_filter_definition_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_filter_definition_type_id__volatile)) {
		static const GTypeValueTable g_define_type_value_table = { unity_protocol_value_filter_definition_init, unity_protocol_value_filter_definition_free_value, unity_protocol_value_filter_definition_copy_value, unity_protocol_value_filter_definition_peek_pointer, "p", unity_protocol_value_filter_definition_collect_value, "p", unity_protocol_value_filter_definition_lcopy_value };
		static const GTypeInfo g_define_type_info = { sizeof (UnityProtocolFilterDefinitionClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_protocol_filter_definition_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityProtocolFilterDefinition), 0, (GInstanceInitFunc) unity_protocol_filter_definition_instance_init, &g_define_type_value_table };
		static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
		GType unity_protocol_filter_definition_type_id;
		unity_protocol_filter_definition_type_id = g_type_register_fundamental (g_type_fundamental_next (), "UnityProtocolFilterDefinition", &g_define_type_info, &g_define_type_fundamental_info, 0);
		g_once_init_leave (&unity_protocol_filter_definition_type_id__volatile, unity_protocol_filter_definition_type_id);
	}
	return unity_protocol_filter_definition_type_id__volatile;
}


gpointer
unity_protocol_filter_definition_ref (gpointer instance)
{
	UnityProtocolFilterDefinition * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}


void
unity_protocol_filter_definition_unref (gpointer instance)
{
	UnityProtocolFilterDefinition * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		UNITY_PROTOCOL_FILTER_DEFINITION_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}


static void
_unity_protocol_scope_registry_scope_registry_node_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (unity_protocol_scope_registry_scope_registry_node_unref (var), NULL));
}


static inline void
_g_slist_free__unity_protocol_scope_registry_scope_registry_node_unref0_ (GSList* self)
{
	g_slist_free_full (self, (GDestroyNotify) _unity_protocol_scope_registry_scope_registry_node_unref0_);
}


static gchar*
string_replace (const gchar* self,
                const gchar* old,
                const gchar* replacement)
{
	gchar* result = NULL;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (self != NULL, NULL);
	g_return_val_if_fail (old != NULL, NULL);
	g_return_val_if_fail (replacement != NULL, NULL);
	if ((*((gchar*) self)) == '\0') {
		_tmp1_ = TRUE;
	} else {
		_tmp1_ = (*((gchar*) old)) == '\0';
	}
	if (_tmp1_) {
		_tmp0_ = TRUE;
	} else {
		_tmp0_ = g_strcmp0 (old, replacement) == 0;
	}
	if (_tmp0_) {
		gchar* _tmp2_;
		_tmp2_ = g_strdup (self);
		result = _tmp2_;
		return result;
	}
	{
		GRegex* regex = NULL;
		gchar* _tmp3_;
		gchar* _tmp4_;
		GRegex* _tmp5_;
		GRegex* _tmp6_;
		gchar* _tmp7_ = NULL;
		GRegex* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
		_tmp3_ = g_regex_escape_string (old, -1);
		_tmp4_ = _tmp3_;
		_tmp5_ = g_regex_new (_tmp4_, 0, 0, &_inner_error_);
		_tmp6_ = _tmp5_;
		_g_free0 (_tmp4_);
		regex = _tmp6_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			if (_inner_error_->domain == G_REGEX_ERROR) {
				goto __catch1_g_regex_error;
			}
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return NULL;
		}
		_tmp8_ = regex;
		_tmp9_ = g_regex_replace_literal (_tmp8_, self, (gssize) -1, 0, replacement, 0, &_inner_error_);
		_tmp7_ = _tmp9_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			_g_regex_unref0 (regex);
			if (_inner_error_->domain == G_REGEX_ERROR) {
				goto __catch1_g_regex_error;
			}
			_g_regex_unref0 (regex);
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return NULL;
		}
		_tmp10_ = _tmp7_;
		_tmp7_ = NULL;
		result = _tmp10_;
		_g_free0 (_tmp7_);
		_g_regex_unref0 (regex);
		return result;
	}
	goto __finally1;
	__catch1_g_regex_error:
	{
		GError* e = NULL;
		e = _inner_error_;
		_inner_error_ = NULL;
		g_assert_not_reached ();
		_g_error_free0 (e);
	}
	__finally1:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return NULL;
	}
}


static gboolean
string_contains (const gchar* self,
                 const gchar* needle)
{
	gboolean result = FALSE;
	gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	g_return_val_if_fail (needle != NULL, FALSE);
	_tmp0_ = strstr ((gchar*) self, (gchar*) needle);
	result = _tmp0_ != NULL;
	return result;
}


static gchar*
unity_protocol_scope_registry_extract_scope_id (const gchar* path)
{
	gchar* result = NULL;
	gchar* real_path = NULL;
	gchar** _tmp4_;
	gint _tmp4__length1;
	gchar* normalized_path = NULL;
	gchar* _tmp5_;
	gchar** _tmp6_;
	gint _tmp6__length1;
	gchar* _tmp17_;
	g_return_val_if_fail (path != NULL, NULL);
	real_path = NULL;
	if (!g_path_is_absolute (path)) {
		GFile* f = NULL;
		GFile* _tmp0_;
		GFile* _tmp1_;
		gchar* _tmp2_;
		const gchar* _tmp3_;
		_tmp0_ = g_file_new_for_path (path);
		f = _tmp0_;
		_tmp1_ = f;
		_tmp2_ = g_file_get_path (_tmp1_);
		_g_free0 (real_path);
		real_path = _tmp2_;
		_tmp3_ = real_path;
		path = _tmp3_;
		_g_object_unref0 (f);
	}
	_tmp4_ = unity_protocol_scope_registry_scope_file_prefixes;
	_tmp4__length1 = unity_protocol_scope_registry_scope_file_prefixes_length1;
	if (_tmp4_ == NULL) {
		unity_protocol_scope_registry_init_scope_file_prefixes ();
	}
	_tmp5_ = string_replace (path, "//", "/");
	normalized_path = _tmp5_;
	_tmp6_ = unity_protocol_scope_registry_scope_file_prefixes;
	_tmp6__length1 = unity_protocol_scope_registry_scope_file_prefixes_length1;
	{
		gchar** prefix_collection = NULL;
		gint prefix_collection_length1 = 0;
		gint _prefix_collection_size_ = 0;
		gint prefix_it = 0;
		prefix_collection = _tmp6_;
		prefix_collection_length1 = _tmp6__length1;
		for (prefix_it = 0; prefix_it < _tmp6__length1; prefix_it = prefix_it + 1) {
			const gchar* prefix = NULL;
			prefix = prefix_collection[prefix_it];
			{
				const gchar* _tmp7_;
				const gchar* _tmp8_;
				_tmp7_ = normalized_path;
				_tmp8_ = prefix;
				if (g_str_has_prefix (_tmp7_, _tmp8_)) {
					gchar* without_prefix = NULL;
					const gchar* _tmp9_;
					const gchar* _tmp10_;
					gint _tmp11_;
					gint _tmp12_;
					gchar* _tmp13_;
					const gchar* _tmp14_;
					_tmp9_ = normalized_path;
					_tmp10_ = prefix;
					_tmp11_ = strlen (_tmp10_);
					_tmp12_ = _tmp11_;
					_tmp13_ = string_substring (_tmp9_, (glong) _tmp12_, (glong) -1);
					without_prefix = _tmp13_;
					_tmp14_ = without_prefix;
					if (string_contains (_tmp14_, G_DIR_SEPARATOR_S)) {
						const gchar* _tmp15_;
						gchar* _tmp16_;
						_tmp15_ = without_prefix;
						_tmp16_ = string_replace (_tmp15_, G_DIR_SEPARATOR_S, "-");
						result = _tmp16_;
						_g_free0 (without_prefix);
						_g_free0 (normalized_path);
						_g_free0 (real_path);
						return result;
					}
					result = without_prefix;
					_g_free0 (normalized_path);
					_g_free0 (real_path);
					return result;
				}
			}
		}
	}
	_tmp17_ = g_path_get_basename (path);
	result = _tmp17_;
	_g_free0 (normalized_path);
	_g_free0 (real_path);
	return result;
}


static void
_vala_array_add7 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (gchar*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


void
unity_protocol_scope_registry_init_scope_file_prefixes (void)
{
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gchar** _tmp2_;
	gint _tmp2__length1;
	_tmp0_ = unity_protocol_scope_registry_scope_directories;
	_tmp0__length1 = unity_protocol_scope_registry_scope_directories_length1;
	if (_tmp0_ == NULL) {
		unity_protocol_scope_registry_init_scope_directories ();
	}
	_tmp1_ = g_new0 (gchar*, 0 + 1);
	unity_protocol_scope_registry_scope_file_prefixes = (_vala_array_free (unity_protocol_scope_registry_scope_file_prefixes, unity_protocol_scope_registry_scope_file_prefixes_length1, (GDestroyNotify) g_free), NULL);
	unity_protocol_scope_registry_scope_file_prefixes = _tmp1_;
	unity_protocol_scope_registry_scope_file_prefixes_length1 = 0;
	_unity_protocol_scope_registry_scope_file_prefixes_size_ = unity_protocol_scope_registry_scope_file_prefixes_length1;
	_tmp2_ = unity_protocol_scope_registry_scope_directories;
	_tmp2__length1 = unity_protocol_scope_registry_scope_directories_length1;
	{
		gchar** scope_dir_collection = NULL;
		gint scope_dir_collection_length1 = 0;
		gint _scope_dir_collection_size_ = 0;
		gint scope_dir_it = 0;
		scope_dir_collection = _tmp2_;
		scope_dir_collection_length1 = _tmp2__length1;
		for (scope_dir_it = 0; scope_dir_it < _tmp2__length1; scope_dir_it = scope_dir_it + 1) {
			const gchar* scope_dir = NULL;
			scope_dir = scope_dir_collection[scope_dir_it];
			{
				GFile* f = NULL;
				const gchar* _tmp3_;
				GFile* _tmp4_;
				gchar** _tmp5_;
				gint _tmp5__length1;
				GFile* _tmp6_;
				gchar* _tmp7_;
				gchar* _tmp8_;
				gchar* _tmp9_;
				_tmp3_ = scope_dir;
				_tmp4_ = g_file_new_for_path (_tmp3_);
				f = _tmp4_;
				_tmp5_ = unity_protocol_scope_registry_scope_file_prefixes;
				_tmp5__length1 = unity_protocol_scope_registry_scope_file_prefixes_length1;
				_tmp6_ = f;
				_tmp7_ = g_file_get_path (_tmp6_);
				_tmp8_ = _tmp7_;
				_tmp9_ = g_strdup_printf ("%s/", _tmp8_);
				_vala_array_add7 (&unity_protocol_scope_registry_scope_file_prefixes, &unity_protocol_scope_registry_scope_file_prefixes_length1, &_unity_protocol_scope_registry_scope_file_prefixes_size_, _tmp9_);
				_g_free0 (_tmp8_);
				_g_object_unref0 (f);
			}
		}
	}
}


static gchar**
_vala_array_dup5 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
	result = g_new0 (gchar*, length + 1);
	for (i = 0; i < length; i++) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (self[i]);
		result[i] = _tmp0_;
	}
	return result;
}


static void
_vala_array_add8 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (gchar*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


void
unity_protocol_scope_registry_init_scope_directories (void)
{
	gchar* overriden_dirs = NULL;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	_tmp0_ = g_getenv ("LIBUNITY_SCOPE_DIRECTORIES");
	_tmp1_ = g_strdup (_tmp0_);
	overriden_dirs = _tmp1_;
	_tmp2_ = overriden_dirs;
	unity_protocol_scope_registry_overrides_scope_dirs = _tmp2_ != NULL;
	_tmp3_ = overriden_dirs;
	if (_tmp3_ == NULL) {
		gchar** _tmp4_;
		gchar** data_dirs = NULL;
		gchar** _tmp5_;
		gchar** _tmp6_;
		gchar** _tmp7_;
		gint _tmp7__length1;
		gint data_dirs_length1;
		gint _data_dirs_size_;
		gchar** _tmp8_;
		gint _tmp8__length1;
		_tmp4_ = g_new0 (gchar*, 0 + 1);
		unity_protocol_scope_registry_scope_directories = (_vala_array_free (unity_protocol_scope_registry_scope_directories, unity_protocol_scope_registry_scope_directories_length1, (GDestroyNotify) g_free), NULL);
		unity_protocol_scope_registry_scope_directories = _tmp4_;
		unity_protocol_scope_registry_scope_directories_length1 = 0;
		_unity_protocol_scope_registry_scope_directories_size_ = unity_protocol_scope_registry_scope_directories_length1;
		_tmp6_ = _tmp5_ = g_get_system_data_dirs ();
		_tmp7_ = (_tmp6_ != NULL) ? _vala_array_dup5 (_tmp6_, _vala_array_length (_tmp5_)) : ((gpointer) _tmp6_);
		_tmp7__length1 = _vala_array_length (_tmp5_);
		data_dirs = _tmp7_;
		data_dirs_length1 = _tmp7__length1;
		_data_dirs_size_ = data_dirs_length1;
		_tmp8_ = data_dirs;
		_tmp8__length1 = data_dirs_length1;
		{
			gchar** data_dir_collection = NULL;
			gint data_dir_collection_length1 = 0;
			gint _data_dir_collection_size_ = 0;
			gint data_dir_it = 0;
			data_dir_collection = _tmp8_;
			data_dir_collection_length1 = _tmp8__length1;
			for (data_dir_it = 0; data_dir_it < _tmp8__length1; data_dir_it = data_dir_it + 1) {
				const gchar* data_dir = NULL;
				data_dir = data_dir_collection[data_dir_it];
				{
					gchar** _tmp9_;
					gint _tmp9__length1;
					const gchar* _tmp10_;
					gchar* _tmp11_;
					_tmp9_ = unity_protocol_scope_registry_scope_directories;
					_tmp9__length1 = unity_protocol_scope_registry_scope_directories_length1;
					_tmp10_ = data_dir;
					_tmp11_ = g_build_filename (_tmp10_, UNITY_PROTOCOL_SCOPES_DIR, NULL);
					_vala_array_add8 (&unity_protocol_scope_registry_scope_directories, &unity_protocol_scope_registry_scope_directories_length1, &_unity_protocol_scope_registry_scope_directories_size_, _tmp11_);
				}
			}
		}
		data_dirs = (_vala_array_free (data_dirs, data_dirs_length1, (GDestroyNotify) g_free), NULL);
	} else {
		const gchar* _tmp12_;
		gchar** _tmp13_;
		gchar** _tmp14_;
		_tmp12_ = overriden_dirs;
		_tmp14_ = _tmp13_ = g_strsplit (_tmp12_, ":", 0);
		unity_protocol_scope_registry_scope_directories = (_vala_array_free (unity_protocol_scope_registry_scope_directories, unity_protocol_scope_registry_scope_directories_length1, (GDestroyNotify) g_free), NULL);
		unity_protocol_scope_registry_scope_directories = _tmp14_;
		unity_protocol_scope_registry_scope_directories_length1 = _vala_array_length (_tmp13_);
		_unity_protocol_scope_registry_scope_directories_size_ = unity_protocol_scope_registry_scope_directories_length1;
	}
	_g_free0 (overriden_dirs);
}


static UnityProtocolScopeRegistry*
unity_protocol_scope_registry_construct (GType object_type)
{
	UnityProtocolScopeRegistry* self = NULL;
	self = (UnityProtocolScopeRegistry*) g_type_create_instance (object_type);
	return self;
}


static UnityProtocolScopeRegistry*
unity_protocol_scope_registry_new (void)
{
	return unity_protocol_scope_registry_construct (UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY);
}


static void
unity_protocol_scope_registry_find_scopes_data_free (gpointer _data)
{
	UnityProtocolScopeRegistryFindScopesData* _data_;
	_data_ = _data;
	_g_free0 (_data_->start_path);
	_unity_protocol_scope_registry_unref0 (_data_->result);
	g_slice_free (UnityProtocolScopeRegistryFindScopesData, _data_);
}


static void
unity_protocol_scope_registry_find_scopes_async_ready_wrapper (GObject *source_object,
                                                               GAsyncResult *res,
                                                               void *user_data)
{
	UnityProtocolScopeRegistryFindScopesData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


void
unity_protocol_scope_registry_find_scopes (const gchar* start_path,
                                           GAsyncReadyCallback _callback_,
                                           gpointer _user_data_)
{
	UnityProtocolScopeRegistryFindScopesData* _data_;
	gchar* _tmp0_;
	_data_ = g_slice_new0 (UnityProtocolScopeRegistryFindScopesData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (NULL, NULL, unity_protocol_scope_registry_find_scopes_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_registry_find_scopes_data_free);
	_tmp0_ = g_strdup (start_path);
	_g_free0 (_data_->start_path);
	_data_->start_path = _tmp0_;
	unity_protocol_scope_registry_find_scopes_co (_data_);
}


UnityProtocolScopeRegistry*
unity_protocol_scope_registry_find_scopes_finish (GAsyncResult* _res_,
                                                  GError** error)
{
	UnityProtocolScopeRegistry* result;
	UnityProtocolScopeRegistryFindScopesData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


/**
     * Build registry of all scopes in start_path.
     * start_path can be a directory, a .scope file path or just scope id (.scope file name, including extenstion).
     *
     * @param start_path starting directory or specific .scope file
     * @return registry of all scopes (if start_path is a dir) or just one scope and its subscopes.
     */
static void
unity_protocol_scope_registry_find_scopes_ready (GObject* source_object,
                                                 GAsyncResult* _res_,
                                                 gpointer _user_data_)
{
	UnityProtocolScopeRegistryFindScopesData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_protocol_scope_registry_find_scopes_co (_data_);
}


static void
_unity_protocol_scope_registry_scope_metadata_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (unity_protocol_scope_registry_scope_metadata_unref (var), NULL));
}


static gboolean
_g_node_free_all_node (GNode* node,
                       GDestroyNotify free_func)
{
	(node->data == NULL) ? NULL : free_func (node->data);
	return FALSE;
}


static void
_g_node_free_all (GNode* self,
                  GDestroyNotify free_func)
{
	(free_func == NULL) ? NULL : g_node_traverse (self, G_POST_ORDER, G_TRAVERSE_ALL, -1, (GNodeTraverseFunc) _g_node_free_all_node, free_func);
	g_node_destroy (self);
}


static inline void
_g_node_destroy__unity_protocol_scope_registry_scope_metadata_unref0_ (GNode* self)
{
	_g_node_free_all (self, (GDestroyNotify) _unity_protocol_scope_registry_scope_metadata_unref0_);
}


static gboolean
unity_protocol_scope_registry_find_scopes_co (UnityProtocolScopeRegistryFindScopesData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		case 2:
		goto _state_2;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = unity_protocol_scope_registry_new ();
	_data_->registry = _data_->_tmp0_;
	_data_->_tmp1_ = g_node_new (NULL);
	_data_->root_node = _data_->_tmp1_;
	if (_data_->start_path == NULL) {
		_data_->_tmp2_ = unity_protocol_scope_registry_scope_directories;
		_data_->_tmp2__length1 = unity_protocol_scope_registry_scope_directories_length1;
		{
			_data_->scope_dir_collection_length1 = 0;
			_data_->_scope_dir_collection_size_ = 0;
			_data_->scope_dir_collection = _data_->_tmp2_;
			_data_->scope_dir_collection_length1 = _data_->_tmp2__length1;
			for (_data_->scope_dir_it = 0; _data_->scope_dir_it < _data_->_tmp2__length1; _data_->scope_dir_it = _data_->scope_dir_it + 1) {
				_data_->scope_dir = _data_->scope_dir_collection[_data_->scope_dir_it];
				{
					_data_->_tmp3_ = _data_->scope_dir;
					if (!g_file_test (_data_->_tmp3_, G_FILE_TEST_IS_DIR)) {
						continue;
					}
					{
						_data_->_tmp4_ = _data_->root_node;
						_data_->_tmp5_ = _data_->scope_dir;
						_data_->_state_ = 1;
						unity_protocol_scope_registry_build_scope_node_tree (_data_->_tmp4_, _data_->_tmp5_, unity_protocol_scope_registry_find_scopes_ready, _data_);
						return FALSE;
						_state_1:
						unity_protocol_scope_registry_build_scope_node_tree_finish (_data_->_res_, &_data_->_inner_error_);
						if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
							goto __catch2_g_error;
						}
					}
					goto __finally2;
					__catch2_g_error:
					{
						_data_->e = _data_->_inner_error_;
						_data_->_inner_error_ = NULL;
						_data_->_tmp6_ = _data_->scope_dir;
						_data_->_tmp7_ = _data_->e;
						_data_->_tmp8_ = _data_->_tmp7_->message;
						g_warning ("protocol-scope-discovery.vala:677: Unable to process scope directory %" \
"s: %s", _data_->_tmp6_, _data_->_tmp8_);
						_g_error_free0 (_data_->e);
					}
					__finally2:
					if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
						g_task_return_error (_data_->_async_result, _data_->_inner_error_);
						(_data_->root_node == NULL) ? NULL : (_data_->root_node = (_g_node_destroy__unity_protocol_scope_registry_scope_metadata_unref0_ (_data_->root_node), NULL));
						_unity_protocol_scope_registry_unref0 (_data_->registry);
						g_object_unref (_data_->_async_result);
						return FALSE;
					}
				}
			}
		}
	} else {
		_data_->_tmp9_ = _data_->root_node;
		_data_->_state_ = 2;
		unity_protocol_scope_registry_build_scope_node_tree (_data_->_tmp9_, _data_->start_path, unity_protocol_scope_registry_find_scopes_ready, _data_);
		return FALSE;
		_state_2:
		unity_protocol_scope_registry_build_scope_node_tree_finish (_data_->_res_, &_data_->_inner_error_);
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			(_data_->root_node == NULL) ? NULL : (_data_->root_node = (_g_node_destroy__unity_protocol_scope_registry_scope_metadata_unref0_ (_data_->root_node), NULL));
			_unity_protocol_scope_registry_unref0 (_data_->registry);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->_tmp10_ = _data_->registry;
	_data_->_tmp11_ = _data_->root_node;
	unity_protocol_scope_registry_from_tree (_data_->_tmp10_, _data_->_tmp11_);
	_data_->result = _data_->registry;
	(_data_->root_node == NULL) ? NULL : (_data_->root_node = (_g_node_destroy__unity_protocol_scope_registry_scope_metadata_unref0_ (_data_->root_node), NULL));
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static Block7Data*
block7_data_ref (Block7Data* _data7_)
{
	g_atomic_int_inc (&_data7_->_ref_count_);
	return _data7_;
}


static void
block7_data_unref (void * _userdata_)
{
	Block7Data* _data7_;
	_data7_ = (Block7Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data7_->_ref_count_)) {
		_g_free0 (_data7_->scope_id);
		g_slice_free (Block7Data, _data7_);
	}
}


static void
__lambda39_ (Block7Data* _data7_,
             GNode* child_)
{
	GNode* child_node = NULL;
	GNode* _tmp0_;
	gconstpointer _tmp1_;
	const gchar* _tmp2_;
	g_return_if_fail (child_ != NULL);
	child_node = child_;
	_tmp0_ = child_node;
	_tmp1_ = _tmp0_->data;
	_tmp2_ = ((UnityProtocolScopeRegistryScopeMetadata*) _tmp1_)->id;
	if (g_strcmp0 (_tmp2_, _data7_->scope_id) == 0) {
		GNode* _tmp3_;
		_data7_->scope_id_present = TRUE;
		_tmp3_ = child_node;
		_data7_->found_child = _tmp3_;
	}
}


static void
___lambda39__gnode_foreach_func (GNode* node,
                                 gpointer self)
{
	__lambda39_ (self, node);
}


static gboolean
unity_protocol_scope_registry_node_has_child_with_id (GNode* node,
                                                      const gchar* scope_id,
                                                      GNode* * child)
{
	GNode* _vala_child = NULL;
	gboolean result = FALSE;
	Block7Data* _data7_;
	gchar* _tmp0_;
	g_return_val_if_fail (node != NULL, FALSE);
	g_return_val_if_fail (scope_id != NULL, FALSE);
	_data7_ = g_slice_new0 (Block7Data);
	_data7_->_ref_count_ = 1;
	_tmp0_ = g_strdup (scope_id);
	_g_free0 (_data7_->scope_id);
	_data7_->scope_id = _tmp0_;
	_data7_->scope_id_present = FALSE;
	_data7_->found_child = NULL;
	g_node_children_foreach (node, G_TRAVERSE_ALL, ___lambda39__gnode_foreach_func, _data7_);
	_vala_child = _data7_->found_child;
	result = _data7_->scope_id_present;
	block7_data_unref (_data7_);
	_data7_ = NULL;
	if (child) {
		*child = _vala_child;
	}
	return result;
}


static void
unity_protocol_scope_registry_build_scope_node_tree_data_free (gpointer _data)
{
	UnityProtocolScopeRegistryBuildScopeNodeTreeData* _data_;
	_data_ = _data;
	_g_free0 (_data_->start_path);
	g_slice_free (UnityProtocolScopeRegistryBuildScopeNodeTreeData, _data_);
}


static void
unity_protocol_scope_registry_build_scope_node_tree_async_ready_wrapper (GObject *source_object,
                                                                         GAsyncResult *res,
                                                                         void *user_data)
{
	UnityProtocolScopeRegistryBuildScopeNodeTreeData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_protocol_scope_registry_build_scope_node_tree (GNode* root_node,
                                                     const gchar* start_path,
                                                     GAsyncReadyCallback _callback_,
                                                     gpointer _user_data_)
{
	UnityProtocolScopeRegistryBuildScopeNodeTreeData* _data_;
	gchar* _tmp0_;
	_data_ = g_slice_new0 (UnityProtocolScopeRegistryBuildScopeNodeTreeData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (NULL, NULL, unity_protocol_scope_registry_build_scope_node_tree_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_registry_build_scope_node_tree_data_free);
	_data_->root_node = root_node;
	_tmp0_ = g_strdup (start_path);
	_g_free0 (_data_->start_path);
	_data_->start_path = _tmp0_;
	unity_protocol_scope_registry_build_scope_node_tree_co (_data_);
}


static void
unity_protocol_scope_registry_build_scope_node_tree_finish (GAsyncResult* _res_,
                                                            GError** error)
{
	UnityProtocolScopeRegistryBuildScopeNodeTreeData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
}


static void
unity_protocol_scope_registry_build_scope_node_tree_ready (GObject* source_object,
                                                           GAsyncResult* _res_,
                                                           gpointer _user_data_)
{
	UnityProtocolScopeRegistryBuildScopeNodeTreeData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_protocol_scope_registry_build_scope_node_tree_co (_data_);
}


static gpointer
_unity_protocol_scope_registry_scope_metadata_ref0 (gpointer self)
{
	return self ? unity_protocol_scope_registry_scope_metadata_ref (self) : NULL;
}


static gboolean
unity_protocol_scope_registry_build_scope_node_tree_co (UnityProtocolScopeRegistryBuildScopeNodeTreeData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		case 2:
		goto _state_2;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	g_debug ("protocol-scope-discovery.vala:716: build_scope_node_tree [level: %u]: " \
"%s", g_node_depth (_data_->root_node), _data_->start_path);
	if (g_file_test (_data_->start_path, G_FILE_TEST_IS_DIR)) {
		_data_->_tmp0_ = g_dir_open (_data_->start_path, (guint) 0, &_data_->_inner_error_);
		_data_->dir = _data_->_tmp0_;
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
		while (TRUE) {
			_data_->_tmp1_ = _data_->dir;
			_data_->_tmp2_ = g_dir_read_name (_data_->_tmp1_);
			_data_->_tmp3_ = g_strdup (_data_->_tmp2_);
			_g_free0 (_data_->name);
			_data_->name = _data_->_tmp3_;
			_data_->_tmp4_ = _data_->name;
			if (!(_data_->_tmp4_ != NULL)) {
				break;
			}
			_data_->_tmp5_ = _data_->name;
			_data_->_tmp6_ = g_build_filename (_data_->start_path, _data_->_tmp5_, NULL);
			_data_->filename = _data_->_tmp6_;
			_data_->_tmp7_ = _data_->filename;
			if (!g_str_has_suffix (_data_->_tmp7_, ".scope")) {
				_g_free0 (_data_->filename);
				continue;
			}
			{
				_data_->_tmp8_ = _data_->filename;
				_data_->_state_ = 1;
				unity_protocol_scope_registry_build_scope_node_tree (_data_->root_node, _data_->_tmp8_, unity_protocol_scope_registry_build_scope_node_tree_ready, _data_);
				return FALSE;
				_state_1:
				unity_protocol_scope_registry_build_scope_node_tree_finish (_data_->_res_, &_data_->_inner_error_);
				if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
					goto __catch3_g_error;
				}
			}
			goto __finally3;
			__catch3_g_error:
			{
				_data_->e = _data_->_inner_error_;
				_data_->_inner_error_ = NULL;
				_data_->_tmp9_ = _data_->filename;
				_data_->_tmp10_ = _data_->e;
				_data_->_tmp11_ = _data_->_tmp10_->message;
				g_warning ("protocol-scope-discovery.vala:733: Failed to process '%s': %s", _data_->_tmp9_, _data_->_tmp11_);
				_g_error_free0 (_data_->e);
			}
			__finally3:
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
				_g_free0 (_data_->filename);
				_g_free0 (_data_->name);
				_g_dir_close0 (_data_->dir);
				g_object_unref (_data_->_async_result);
				return FALSE;
			}
			_g_free0 (_data_->filename);
		}
		_g_free0 (_data_->name);
		_g_dir_close0 (_data_->dir);
	} else {
		if (!g_str_has_suffix (_data_->start_path, ".scope")) {
			_data_->_tmp12_ = g_error_new (UNITY_PROTOCOL_PARSE_ERROR, UNITY_PROTOCOL_PARSE_ERROR_UNKNOWN_FILE, "Unknown file type: \"%s\"", _data_->start_path);
			_data_->_inner_error_ = _data_->_tmp12_;
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
		g_debug ("protocol-scope-discovery.vala:743: Found scope file: %s", _data_->start_path);
		_data_->_tmp13_ = unity_protocol_scope_registry_scope_metadata_for_path (_data_->start_path, &_data_->_inner_error_);
		_data_->scope_data = _data_->_tmp13_;
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
		_data_->_tmp14_ = _data_->scope_data;
		if (_data_->_tmp14_ == NULL) {
			_unity_protocol_scope_registry_scope_metadata_unref0 (_data_->scope_data);
			g_task_return_pointer (_data_->_async_result, _data_, NULL);
			if (_data_->_state_ != 0) {
				while (_data_->_task_complete_ != TRUE) {
					g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
				}
			}
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
		_data_->child_node = NULL;
		_data_->_tmp15_ = _data_->scope_data;
		_data_->_tmp16_ = _data_->_tmp15_->id;
		_data_->_tmp17_ = NULL;
		_data_->_tmp18_ = unity_protocol_scope_registry_node_has_child_with_id (_data_->root_node, _data_->_tmp16_, &_data_->_tmp17_);
		_data_->child_node = _data_->_tmp17_;
		_data_->scope_id_present = _data_->_tmp18_;
		_data_->_tmp19_ = _data_->scope_id_present;
		if (!_data_->_tmp19_) {
			_data_->_tmp20_ = _data_->scope_data;
			_data_->_tmp21_ = _unity_protocol_scope_registry_scope_metadata_ref0 (_data_->_tmp20_);
			_data_->_tmp22_ = g_node_append_data (_data_->root_node, _data_->_tmp21_);
			_data_->child_node = _data_->_tmp22_;
		}
		_data_->_tmp23_ = _data_->child_node;
		_vala_assert (_data_->_tmp23_ != NULL, "child_node != null");
		_data_->_tmp24_ = _data_->child_node;
		_data_->_tmp25_ = _data_->_tmp24_->data;
		_data_->_tmp26_ = ((UnityProtocolScopeRegistryScopeMetadata*) _data_->_tmp25_)->is_master;
		if (_data_->_tmp26_) {
			_data_->_tmp28_ = _data_->child_node;
			_data_->_tmp29_ = _data_->_tmp28_->data;
			if (unity_protocol_scope_registry_scope_metadata_get_overrides_subscopes ((UnityProtocolScopeRegistryScopeMetadata*) _data_->_tmp29_)) {
				_data_->_tmp30_ = _data_->child_node;
				_data_->_tmp27_ = g_node_n_children (_data_->_tmp30_) == ((guint) 0);
			} else {
				_data_->_tmp27_ = FALSE;
			}
			if (_data_->_tmp27_) {
				_data_->_tmp31_ = _data_->child_node;
				_data_->_tmp32_ = _data_->_tmp31_->data;
				_data_->_tmp33_ = ((UnityProtocolScopeRegistryScopeMetadata*) _data_->_tmp32_)->id;
				g_debug ("protocol-scope-discovery.vala:770: Scope %s overrides its children", _data_->_tmp33_);
				_data_->_tmp34_ = _data_->child_node;
				_data_->_tmp35_ = _data_->_tmp34_->data;
				_data_->_tmp36_ = 0;
				_data_->_tmp37_ = unity_protocol_scope_registry_scope_metadata_get_subscope_ids ((UnityProtocolScopeRegistryScopeMetadata*) _data_->_tmp35_, &_data_->_tmp36_);
				_data_->subscopes = _data_->_tmp37_;
				_data_->subscopes_length1 = _data_->_tmp36_;
				_data_->_subscopes_size_ = _data_->subscopes_length1;
				_data_->_tmp38_ = _data_->subscopes;
				_data_->_tmp38__length1 = _data_->subscopes_length1;
				{
					_data_->subscope_id_collection_length1 = 0;
					_data_->_subscope_id_collection_size_ = 0;
					_data_->subscope_id_collection = _data_->_tmp38_;
					_data_->subscope_id_collection_length1 = _data_->_tmp38__length1;
					for (_data_->subscope_id_it = 0; _data_->subscope_id_it < _data_->_tmp38__length1; _data_->subscope_id_it = _data_->subscope_id_it + 1) {
						_data_->subscope_id = _data_->subscope_id_collection[_data_->subscope_id_it];
						{
							{
								_data_->_tmp39_ = _data_->subscope_id;
								_data_->_tmp40_ = unity_protocol_scope_registry_scope_metadata_for_id (_data_->_tmp39_, &_data_->_inner_error_);
								_data_->subscope_data = _data_->_tmp40_;
								if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
									goto __catch4_g_error;
								}
								_data_->_tmp42_ = _data_->subscope_data;
								if (_data_->_tmp42_ != NULL) {
									_data_->_tmp43_ = _data_->child_node;
									_data_->_tmp44_ = _data_->subscope_data;
									_data_->_tmp45_ = _data_->_tmp44_->id;
									_data_->_tmp46_ = unity_protocol_scope_registry_node_has_child_with_id (_data_->_tmp43_, _data_->_tmp45_, NULL);
									_data_->_tmp41_ = !_data_->_tmp46_;
								} else {
									_data_->_tmp41_ = FALSE;
								}
								if (_data_->_tmp41_) {
									_data_->_tmp47_ = _data_->child_node;
									_data_->_tmp48_ = _data_->subscope_data;
									_data_->_tmp49_ = _unity_protocol_scope_registry_scope_metadata_ref0 (_data_->_tmp48_);
									g_node_append_data (_data_->_tmp47_, _data_->_tmp49_);
								}
								_unity_protocol_scope_registry_scope_metadata_unref0 (_data_->subscope_data);
							}
							goto __finally4;
							__catch4_g_error:
							{
								_data_->_vala1_e = _data_->_inner_error_;
								_data_->_inner_error_ = NULL;
								_data_->_tmp50_ = _data_->subscope_id;
								_data_->_tmp51_ = _data_->_vala1_e;
								_data_->_tmp52_ = _data_->_tmp51_->message;
								g_warning ("protocol-scope-discovery.vala:787: Failed to process '%s': %s", _data_->_tmp50_, _data_->_tmp52_);
								_g_error_free0 (_data_->_vala1_e);
							}
							__finally4:
							if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
								g_task_return_error (_data_->_async_result, _data_->_inner_error_);
								_unity_protocol_scope_registry_scope_metadata_unref0 (_data_->scope_data);
								g_object_unref (_data_->_async_result);
								return FALSE;
							}
						}
					}
				}
			} else {
				_data_->_tmp53_ = _data_->scope_data;
				_data_->_tmp54_ = _data_->_tmp53_->full_path;
				_data_->_tmp55_ = g_file_new_for_path (_data_->_tmp54_);
				_data_->scopefile = _data_->_tmp55_;
				_data_->_tmp56_ = _data_->scopefile;
				_data_->_tmp57_ = g_file_get_parent (_data_->_tmp56_);
				_data_->parent = _data_->_tmp57_;
				_data_->_tmp58_ = _data_->parent;
				if (_data_->_tmp58_ == NULL) {
					_g_object_unref0 (_data_->parent);
					_g_object_unref0 (_data_->scopefile);
					_unity_protocol_scope_registry_scope_metadata_unref0 (_data_->scope_data);
					g_task_return_pointer (_data_->_async_result, _data_, NULL);
					if (_data_->_state_ != 0) {
						while (_data_->_task_complete_ != TRUE) {
							g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
						}
					}
					g_object_unref (_data_->_async_result);
					return FALSE;
				}
				_data_->_tmp59_ = _data_->scope_data;
				_data_->_tmp60_ = _data_->_tmp59_->id;
				_data_->_tmp61_ = unity_protocol_scope_registry_remove_scope_extension (_data_->_tmp60_);
				_data_->scope_name = _data_->_tmp61_;
				_data_->_tmp62_ = _data_->parent;
				_data_->_tmp63_ = g_file_get_path (_data_->_tmp62_);
				_data_->_tmp64_ = _data_->_tmp63_;
				_data_->_tmp65_ = _data_->scope_name;
				_data_->_tmp66_ = g_build_filename (_data_->_tmp64_, _data_->_tmp65_, NULL);
				_data_->_tmp67_ = _data_->_tmp66_;
				_g_free0 (_data_->_tmp64_);
				_data_->check_path = _data_->_tmp67_;
				_data_->_tmp68_ = _data_->check_path;
				if (!g_file_test (_data_->_tmp68_, G_FILE_TEST_IS_DIR)) {
					_g_free0 (_data_->check_path);
					_g_free0 (_data_->scope_name);
					_g_object_unref0 (_data_->parent);
					_g_object_unref0 (_data_->scopefile);
					_unity_protocol_scope_registry_scope_metadata_unref0 (_data_->scope_data);
					g_task_return_pointer (_data_->_async_result, _data_, NULL);
					if (_data_->_state_ != 0) {
						while (_data_->_task_complete_ != TRUE) {
							g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
						}
					}
					g_object_unref (_data_->_async_result);
					return FALSE;
				}
				_data_->_tmp69_ = _data_->child_node;
				_data_->_tmp70_ = _data_->check_path;
				_data_->_state_ = 2;
				unity_protocol_scope_registry_build_scope_node_tree (_data_->_tmp69_, _data_->_tmp70_, unity_protocol_scope_registry_build_scope_node_tree_ready, _data_);
				return FALSE;
				_state_2:
				unity_protocol_scope_registry_build_scope_node_tree_finish (_data_->_res_, &_data_->_inner_error_);
				if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
					g_task_return_error (_data_->_async_result, _data_->_inner_error_);
					_g_free0 (_data_->check_path);
					_g_free0 (_data_->scope_name);
					_g_object_unref0 (_data_->parent);
					_g_object_unref0 (_data_->scopefile);
					_unity_protocol_scope_registry_scope_metadata_unref0 (_data_->scope_data);
					g_object_unref (_data_->_async_result);
					return FALSE;
				}
				_g_free0 (_data_->check_path);
				_g_free0 (_data_->scope_name);
				_g_object_unref0 (_data_->parent);
				_g_object_unref0 (_data_->scopefile);
			}
		}
		_unity_protocol_scope_registry_scope_metadata_unref0 (_data_->scope_data);
	}
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static Block8Data*
block8_data_ref (Block8Data* _data8_)
{
	g_atomic_int_inc (&_data8_->_ref_count_);
	return _data8_;
}


static void
block8_data_unref (void * _userdata_)
{
	Block8Data* _data8_;
	_data8_ = (Block8Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data8_->_ref_count_)) {
		UnityProtocolScopeRegistry* self;
		self = _data8_->self;
		_unity_protocol_scope_registry_scope_registry_node_unref0 (_data8_->scope_node);
		_unity_protocol_scope_registry_unref0 (self);
		g_slice_free (Block8Data, _data8_);
	}
}


static inline void
_g_slist_free__unity_protocol_scope_registry_scope_metadata_unref0_ (GSList* self)
{
	g_slist_free_full (self, (GDestroyNotify) _unity_protocol_scope_registry_scope_metadata_unref0_);
}


static void
__lambda41_ (Block8Data* _data8_,
             GNode* child_)
{
	UnityProtocolScopeRegistry* self;
	GNode* child = NULL;
	gconstpointer _tmp0_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp1_;
	self = _data8_->self;
	g_return_if_fail (child_ != NULL);
	child = child_;
	_tmp0_ = child->data;
	_tmp1_ = _unity_protocol_scope_registry_scope_metadata_ref0 ((UnityProtocolScopeRegistryScopeMetadata*) _tmp0_);
	_data8_->scope_node->sub_scopes = g_slist_append (_data8_->scope_node->sub_scopes, _tmp1_);
}


static void
___lambda41__gnode_foreach_func (GNode* node,
                                 gpointer self)
{
	__lambda41_ (self, node);
}


static gpointer
_unity_protocol_scope_registry_scope_registry_node_ref0 (gpointer self)
{
	return self ? unity_protocol_scope_registry_scope_registry_node_ref (self) : NULL;
}


static void
__lambda40_ (UnityProtocolScopeRegistry* self,
             GNode* top_child_)
{
	Block8Data* _data8_;
	GNode* top_child = NULL;
	gconstpointer _tmp0_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp1_;
	UnityProtocolScopeRegistryScopeRegistryNode* _tmp2_ = NULL;
	UnityProtocolScopeRegistryScopeRegistryNode* _tmp3_;
	g_return_if_fail (top_child_ != NULL);
	_data8_ = g_slice_new0 (Block8Data);
	_data8_->_ref_count_ = 1;
	_data8_->self = unity_protocol_scope_registry_ref (self);
	top_child = top_child_;
	_tmp0_ = top_child->data;
	_tmp1_ = _unity_protocol_scope_registry_scope_metadata_ref0 ((UnityProtocolScopeRegistryScopeMetadata*) _tmp0_);
	_tmp2_ = unity_protocol_scope_registry_scope_registry_node_new ();
	_unity_protocol_scope_registry_scope_metadata_unref0 (_tmp2_->scope_info);
	_tmp2_->scope_info = _tmp1_;
	(_tmp2_->sub_scopes == NULL) ? NULL : (_tmp2_->sub_scopes = (_g_slist_free__unity_protocol_scope_registry_scope_metadata_unref0_ (_tmp2_->sub_scopes), NULL));
	_tmp2_->sub_scopes = NULL;
	_data8_->scope_node = _tmp2_;
	g_node_children_foreach (top_child, G_TRAVERSE_ALL, ___lambda41__gnode_foreach_func, _data8_);
	_tmp3_ = _unity_protocol_scope_registry_scope_registry_node_ref0 (_data8_->scope_node);
	self->priv->scopes_ = g_slist_append (self->priv->scopes_, _tmp3_);
	block8_data_unref (_data8_);
	_data8_ = NULL;
}


static void
___lambda40__gnode_foreach_func (GNode* node,
                                 gpointer self)
{
	__lambda40_ ((UnityProtocolScopeRegistry*) self, node);
}


static void
unity_protocol_scope_registry_from_tree (UnityProtocolScopeRegistry* self,
                                         GNode* root_node)
{
	g_return_if_fail (self != NULL);
	g_return_if_fail (root_node != NULL);
	g_node_children_foreach (root_node, G_TRAVERSE_ALL, ___lambda40__gnode_foreach_func, self);
}


static gint
string_last_index_of (const gchar* self,
                      const gchar* needle,
                      gint start_index)
{
	gint result = 0;
	gchar* _result_ = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	g_return_val_if_fail (self != NULL, 0);
	g_return_val_if_fail (needle != NULL, 0);
	_tmp0_ = g_strrstr (((gchar*) self) + start_index, (gchar*) needle);
	_result_ = _tmp0_;
	_tmp1_ = _result_;
	if (_tmp1_ != NULL) {
		gchar* _tmp2_;
		_tmp2_ = _result_;
		result = (gint) (_tmp2_ - ((gchar*) self));
		return result;
	} else {
		result = -1;
		return result;
	}
}


gchar*
unity_protocol_scope_registry_remove_scope_extension (const gchar* scope_id)
{
	gchar* result = NULL;
	gchar* _tmp1_;
	g_return_val_if_fail (scope_id != NULL, NULL);
	if (g_str_has_suffix (scope_id, ".scope")) {
		gchar* _tmp0_;
		_tmp0_ = string_substring (scope_id, (glong) 0, (glong) string_last_index_of (scope_id, ".", 0));
		result = _tmp0_;
		return result;
	}
	_tmp1_ = g_strdup (scope_id);
	result = _tmp1_;
	return result;
}


static void
unity_protocol_scope_registry_find_scopes_for_id_data_free (gpointer _data)
{
	UnityProtocolScopeRegistryFindScopesForIdData* _data_;
	_data_ = _data;
	_g_free0 (_data_->scope_id);
	_g_free0 (_data_->root_path);
	_unity_protocol_scope_registry_unref0 (_data_->result);
	g_slice_free (UnityProtocolScopeRegistryFindScopesForIdData, _data_);
}


static void
unity_protocol_scope_registry_find_scopes_for_id_async_ready_wrapper (GObject *source_object,
                                                                      GAsyncResult *res,
                                                                      void *user_data)
{
	UnityProtocolScopeRegistryFindScopesForIdData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


void
unity_protocol_scope_registry_find_scopes_for_id (const gchar* scope_id,
                                                  const gchar* root_path,
                                                  GAsyncReadyCallback _callback_,
                                                  gpointer _user_data_)
{
	UnityProtocolScopeRegistryFindScopesForIdData* _data_;
	gchar* _tmp0_;
	gchar* _tmp1_;
	_data_ = g_slice_new0 (UnityProtocolScopeRegistryFindScopesForIdData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (NULL, NULL, unity_protocol_scope_registry_find_scopes_for_id_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_registry_find_scopes_for_id_data_free);
	_tmp0_ = g_strdup (scope_id);
	_g_free0 (_data_->scope_id);
	_data_->scope_id = _tmp0_;
	_tmp1_ = g_strdup (root_path);
	_g_free0 (_data_->root_path);
	_data_->root_path = _tmp1_;
	unity_protocol_scope_registry_find_scopes_for_id_co (_data_);
}


UnityProtocolScopeRegistry*
unity_protocol_scope_registry_find_scopes_for_id_finish (GAsyncResult* _res_,
                                                         GError** error)
{
	UnityProtocolScopeRegistry* result;
	UnityProtocolScopeRegistryFindScopesForIdData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


/**
     * Find sub-scopes for given master scope id in unity/scopes subdirectory
     * of XDG_DATA_DIRS dirs or in root_path.
     * @param scope_id id of a master scope (with .scope suffix)
     * @param root_path base directory of scopes, defaults to XDG_DATA_DIRS paths + "/unity/scopes"
     * @return scope registry with scopes property populated with all sub-scopes of the master scope.
     */
static void
unity_protocol_scope_registry_find_scopes_for_id_ready (GObject* source_object,
                                                        GAsyncResult* _res_,
                                                        gpointer _user_data_)
{
	UnityProtocolScopeRegistryFindScopesForIdData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_protocol_scope_registry_find_scopes_for_id_co (_data_);
}


static gchar**
_vala_array_dup6 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
	result = g_new0 (gchar*, length + 1);
	for (i = 0; i < length; i++) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (self[i]);
		result[i] = _tmp0_;
	}
	return result;
}


static gchar**
_vala_array_dup7 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
	result = g_new0 (gchar*, length + 1);
	for (i = 0; i < length; i++) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (self[i]);
		result[i] = _tmp0_;
	}
	return result;
}


static gboolean
unity_protocol_scope_registry_find_scopes_for_id_co (UnityProtocolScopeRegistryFindScopesForIdData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		case 2:
		goto _state_2;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = unity_protocol_scope_registry_new ();
	_data_->registry = _data_->_tmp0_;
	g_debug ("protocol-scope-discovery.vala:846: find_scopes_for_id: %s", _data_->scope_id);
	_data_->_tmp1_ = g_node_new (NULL);
	_data_->root_node = _data_->_tmp1_;
	{
		_data_->_tmp2_ = unity_protocol_scope_registry_scope_metadata_for_id (_data_->scope_id, &_data_->_inner_error_);
		_data_->scope_metadata = _data_->_tmp2_;
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			goto __catch5_g_error;
		}
		_data_->_tmp3_ = _data_->root_node;
		_data_->_tmp4_ = _data_->scope_metadata;
		_data_->_tmp5_ = _data_->_tmp4_->full_path;
		_data_->_state_ = 1;
		unity_protocol_scope_registry_build_scope_node_tree (_data_->_tmp3_, _data_->_tmp5_, unity_protocol_scope_registry_find_scopes_for_id_ready, _data_);
		return FALSE;
		_state_1:
		unity_protocol_scope_registry_build_scope_node_tree_finish (_data_->_res_, &_data_->_inner_error_);
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			_unity_protocol_scope_registry_scope_metadata_unref0 (_data_->scope_metadata);
			goto __catch5_g_error;
		}
		_data_->_tmp6_ = unity_protocol_scope_registry_scope_file_prefixes;
		_data_->_tmp6__length1 = unity_protocol_scope_registry_scope_file_prefixes_length1;
		if (_data_->_tmp6_ == NULL) {
			unity_protocol_scope_registry_init_scope_file_prefixes ();
		}
		_unity_protocol_scope_registry_scope_metadata_unref0 (_data_->scope_metadata);
	}
	goto __finally5;
	__catch5_g_error:
	{
		_data_->err = _data_->_inner_error_;
		_data_->_inner_error_ = NULL;
		_g_error_free0 (_data_->err);
	}
	__finally5:
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		(_data_->root_node == NULL) ? NULL : (_data_->root_node = (_g_node_destroy__unity_protocol_scope_registry_scope_metadata_unref0_ (_data_->root_node), NULL));
		_unity_protocol_scope_registry_unref0 (_data_->registry);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp7__length1 = 0;
	_data_->__tmp7__size_ = 0;
	if (_data_->root_path == NULL) {
		_data_->_tmp8_ = unity_protocol_scope_registry_scope_directories;
		_data_->_tmp8__length1 = unity_protocol_scope_registry_scope_directories_length1;
		_data_->_tmp9_ = (_data_->_tmp8_ != NULL) ? _vala_array_dup6 (_data_->_tmp8_, _data_->_tmp8__length1) : ((gpointer) _data_->_tmp8_);
		_data_->_tmp9__length1 = _data_->_tmp8__length1;
		_data_->_tmp7_ = (_vala_array_free (_data_->_tmp7_, _data_->_tmp7__length1, (GDestroyNotify) g_free), NULL);
		_data_->_tmp7_ = _data_->_tmp9_;
		_data_->_tmp7__length1 = _data_->_tmp9__length1;
		_data_->__tmp7__size_ = _data_->_tmp7__length1;
	} else {
		_data_->_tmp10_ = g_strdup (_data_->root_path);
		_data_->_tmp11_ = g_new0 (gchar*, 1 + 1);
		_data_->_tmp11_[0] = _data_->_tmp10_;
		_data_->_tmp7_ = (_vala_array_free (_data_->_tmp7_, _data_->_tmp7__length1, (GDestroyNotify) g_free), NULL);
		_data_->_tmp7_ = _data_->_tmp11_;
		_data_->_tmp7__length1 = 1;
		_data_->__tmp7__size_ = _data_->_tmp7__length1;
	}
	_data_->_tmp12_ = (_data_->_tmp7_ != NULL) ? _vala_array_dup7 (_data_->_tmp7_, _data_->_tmp7__length1) : ((gpointer) _data_->_tmp7_);
	_data_->_tmp12__length1 = _data_->_tmp7__length1;
	_data_->dirs = _data_->_tmp12_;
	_data_->dirs_length1 = _data_->_tmp12__length1;
	_data_->_dirs_size_ = _data_->dirs_length1;
	_data_->_tmp14_ = _data_->dirs;
	_data_->_tmp14__length1 = _data_->dirs_length1;
	if (_data_->_tmp14_ == NULL) {
		_data_->_tmp13_ = TRUE;
	} else {
		_data_->_tmp15_ = _data_->dirs;
		_data_->_tmp15__length1 = _data_->dirs_length1;
		_data_->_tmp13_ = _data_->_tmp15__length1 == 0;
	}
	if (_data_->_tmp13_) {
		_data_->_tmp16_ = g_error_new_literal (UNITY_PROTOCOL_PARSE_ERROR, UNITY_PROTOCOL_PARSE_ERROR_INVALID_PATH, "Invalid scopes path");
		_data_->_inner_error_ = _data_->_tmp16_;
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		_data_->dirs = (_vala_array_free (_data_->dirs, _data_->dirs_length1, (GDestroyNotify) g_free), NULL);
		_data_->_tmp7_ = (_vala_array_free (_data_->_tmp7_, _data_->_tmp7__length1, (GDestroyNotify) g_free), NULL);
		(_data_->root_node == NULL) ? NULL : (_data_->root_node = (_g_node_destroy__unity_protocol_scope_registry_scope_metadata_unref0_ (_data_->root_node), NULL));
		_unity_protocol_scope_registry_unref0 (_data_->registry);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp18_ = _data_->root_node;
	if (g_node_n_children (_data_->_tmp18_) > ((guint) 0)) {
		_data_->_tmp19_ = _data_->root_node;
		_data_->_tmp20_ = g_node_first_child (_data_->_tmp19_);
		_data_->_tmp17_ = _data_->_tmp20_;
	} else {
		_data_->_tmp21_ = _data_->root_node;
		_data_->_tmp17_ = _data_->_tmp21_;
	}
	_data_->node = _data_->_tmp17_;
	_data_->_tmp22_ = unity_protocol_scope_registry_remove_scope_extension (_data_->scope_id);
	_data_->suffix = _data_->_tmp22_;
	_data_->_tmp23_ = _data_->dirs;
	_data_->_tmp23__length1 = _data_->dirs_length1;
	{
		_data_->path_collection_length1 = 0;
		_data_->_path_collection_size_ = 0;
		_data_->path_collection = _data_->_tmp23_;
		_data_->path_collection_length1 = _data_->_tmp23__length1;
		for (_data_->path_it = 0; _data_->path_it < _data_->_tmp23__length1; _data_->path_it = _data_->path_it + 1) {
			_data_->_tmp24_ = g_strdup (_data_->path_collection[_data_->path_it]);
			_data_->path = _data_->_tmp24_;
			{
				_data_->_tmp25_ = _data_->path;
				_data_->_tmp26_ = _data_->suffix;
				_data_->_tmp27_ = g_build_filename (_data_->_tmp25_, _data_->_tmp26_, NULL);
				_data_->check_path = _data_->_tmp27_;
				_data_->_tmp28_ = _data_->check_path;
				if (!g_file_test (_data_->_tmp28_, G_FILE_TEST_IS_DIR)) {
					_g_free0 (_data_->check_path);
					_g_free0 (_data_->path);
					continue;
				}
				_data_->_tmp29_ = _data_->node;
				_data_->_tmp30_ = _data_->check_path;
				_data_->_state_ = 2;
				unity_protocol_scope_registry_build_scope_node_tree (_data_->_tmp29_, _data_->_tmp30_, unity_protocol_scope_registry_find_scopes_for_id_ready, _data_);
				return FALSE;
				_state_2:
				unity_protocol_scope_registry_build_scope_node_tree_finish (_data_->_res_, &_data_->_inner_error_);
				if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
					g_task_return_error (_data_->_async_result, _data_->_inner_error_);
					_g_free0 (_data_->check_path);
					_g_free0 (_data_->path);
					_g_free0 (_data_->suffix);
					_data_->dirs = (_vala_array_free (_data_->dirs, _data_->dirs_length1, (GDestroyNotify) g_free), NULL);
					_data_->_tmp7_ = (_vala_array_free (_data_->_tmp7_, _data_->_tmp7__length1, (GDestroyNotify) g_free), NULL);
					(_data_->root_node == NULL) ? NULL : (_data_->root_node = (_g_node_destroy__unity_protocol_scope_registry_scope_metadata_unref0_ (_data_->root_node), NULL));
					_unity_protocol_scope_registry_unref0 (_data_->registry);
					g_object_unref (_data_->_async_result);
					return FALSE;
				}
				_g_free0 (_data_->check_path);
				_g_free0 (_data_->path);
			}
		}
	}
	_data_->_tmp31_ = _data_->registry;
	_data_->_tmp32_ = _data_->node;
	unity_protocol_scope_registry_from_tree (_data_->_tmp31_, _data_->_tmp32_);
	_data_->result = _data_->registry;
	_g_free0 (_data_->suffix);
	_data_->dirs = (_vala_array_free (_data_->dirs, _data_->dirs_length1, (GDestroyNotify) g_free), NULL);
	_data_->_tmp7_ = (_vala_array_free (_data_->_tmp7_, _data_->_tmp7__length1, (GDestroyNotify) g_free), NULL);
	(_data_->root_node == NULL) ? NULL : (_data_->root_node = (_g_node_destroy__unity_protocol_scope_registry_scope_metadata_unref0_ (_data_->root_node), NULL));
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


GSList*
unity_protocol_scope_registry_get_scopes (UnityProtocolScopeRegistry* self)
{
	GSList* result;
	GSList* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->scopes_;
	result = _tmp0_;
	return result;
}


static inline void
_g_slist_free__g_free0_ (GSList* self)
{
	g_slist_free_full (self, (GDestroyNotify) _g_free0_);
}


void
unity_protocol_scope_registry_scope_metadata_update_hidden_scope_ids (void)
{
	GSettingsSchema* schema_src = NULL;
	GSettingsSchemaSource* _tmp0_;
	GSettingsSchema* _tmp1_;
	GSettingsSchema* _tmp2_;
	_tmp0_ = g_settings_schema_source_get_default ();
	_tmp1_ = g_settings_schema_source_lookup (_tmp0_, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_METADATA_SCOPE_SCHEMA, FALSE);
	schema_src = _tmp1_;
	_tmp2_ = schema_src;
	if (_tmp2_ != NULL) {
		GSettings* settings = NULL;
		GSettingsSchema* _tmp3_;
		GSettings* _tmp4_;
		GSettings* _tmp5_;
		gchar** _tmp6_;
		gchar** _tmp7_;
		_tmp3_ = schema_src;
		_tmp4_ = g_settings_new_full (_tmp3_, NULL, NULL);
		settings = _tmp4_;
		_tmp5_ = settings;
		_tmp7_ = _tmp6_ = g_settings_get_strv (_tmp5_, "hidden-scopes");
		unity_protocol_scope_registry_scope_metadata_hidden_scope_ids = (_vala_array_free (unity_protocol_scope_registry_scope_metadata_hidden_scope_ids, unity_protocol_scope_registry_scope_metadata_hidden_scope_ids_length1, (GDestroyNotify) g_free), NULL);
		unity_protocol_scope_registry_scope_metadata_hidden_scope_ids = _tmp7_;
		unity_protocol_scope_registry_scope_metadata_hidden_scope_ids_length1 = _vala_array_length (_tmp6_);
		_unity_protocol_scope_registry_scope_metadata_hidden_scope_ids_size_ = unity_protocol_scope_registry_scope_metadata_hidden_scope_ids_length1;
		_g_object_unref0 (settings);
	} else {
		gchar** _tmp8_;
		_tmp8_ = g_new0 (gchar*, 0 + 1);
		unity_protocol_scope_registry_scope_metadata_hidden_scope_ids = (_vala_array_free (unity_protocol_scope_registry_scope_metadata_hidden_scope_ids, unity_protocol_scope_registry_scope_metadata_hidden_scope_ids_length1, (GDestroyNotify) g_free), NULL);
		unity_protocol_scope_registry_scope_metadata_hidden_scope_ids = _tmp8_;
		unity_protocol_scope_registry_scope_metadata_hidden_scope_ids_length1 = 0;
		_unity_protocol_scope_registry_scope_metadata_hidden_scope_ids_size_ = unity_protocol_scope_registry_scope_metadata_hidden_scope_ids_length1;
	}
	_g_settings_schema_unref0 (schema_src);
}


UnityProtocolCategoryDefinition**
unity_protocol_scope_registry_scope_metadata_get_categories (UnityProtocolScopeRegistryScopeMetadata* self,
                                                             int* result_length1)
{
	UnityProtocolCategoryDefinition** result = NULL;
	UnityProtocolCategoryDefinition** _tmp0_;
	gint _tmp0__length1;
	UnityProtocolCategoryDefinition** _tmp1_;
	gint _tmp1__length1;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->categories;
	_tmp0__length1 = self->priv->categories_length1;
	_tmp1_ = _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	if (result_length1) {
		*result_length1 = _tmp1__length1;
	}
	result = _tmp1_;
	return result;
}


UnityProtocolFilterDefinition**
unity_protocol_scope_registry_scope_metadata_get_filters (UnityProtocolScopeRegistryScopeMetadata* self,
                                                          int* result_length1)
{
	UnityProtocolFilterDefinition** result = NULL;
	UnityProtocolFilterDefinition** _tmp0_;
	gint _tmp0__length1;
	UnityProtocolFilterDefinition** _tmp1_;
	gint _tmp1__length1;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->filters;
	_tmp0__length1 = self->priv->filters_length1;
	_tmp1_ = _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	if (result_length1) {
		*result_length1 = _tmp1__length1;
	}
	result = _tmp1_;
	return result;
}


gchar**
unity_protocol_scope_registry_scope_metadata_get_subscope_ids (UnityProtocolScopeRegistryScopeMetadata* self,
                                                               int* result_length1)
{
	gchar** result = NULL;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->subscope_ids;
	_tmp0__length1 = self->priv->subscope_ids_length1;
	_tmp1_ = _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	if (result_length1) {
		*result_length1 = _tmp1__length1;
	}
	result = _tmp1_;
	return result;
}


gboolean
unity_protocol_scope_registry_scope_metadata_get_overrides_subscopes (UnityProtocolScopeRegistryScopeMetadata* self)
{
	gboolean result = FALSE;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->overrides_subscopes;
	result = _tmp0_;
	return result;
}


static gchar*
string_strip (const gchar* self)
{
	gchar* result = NULL;
	gchar* _result_ = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = g_strdup (self);
	_result_ = _tmp0_;
	_tmp1_ = _result_;
	g_strstrip (_tmp1_);
	result = _result_;
	return result;
}


static gpointer
_unity_protocol_category_definition_ref0 (gpointer self)
{
	return self ? unity_protocol_category_definition_ref (self) : NULL;
}


static void
_vala_array_add9 (UnityProtocolCategoryDefinition** * array,
                  int* length,
                  int* size,
                  UnityProtocolCategoryDefinition* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (UnityProtocolCategoryDefinition*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


static guint8*
string_get_data (const gchar* self,
                 int* result_length1)
{
	guint8* result;
	guint8* res = NULL;
	gint res_length1;
	gint _res_size_;
	gint _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	guint8* _tmp3_;
	gint _tmp3__length1;
	guint8* _tmp4_;
	gint _tmp4__length1;
	g_return_val_if_fail (self != NULL, NULL);
	res = (guint8*) self;
	res_length1 = -1;
	_res_size_ = res_length1;
	_tmp0_ = strlen (self);
	_tmp1_ = _tmp0_;
	res_length1 = (gint) _tmp1_;
	_tmp2_ = res_length1;
	_tmp3_ = res;
	_tmp3__length1 = res_length1;
	_tmp4_ = _tmp3_;
	_tmp4__length1 = _tmp3__length1;
	if (result_length1) {
		*result_length1 = _tmp4__length1;
	}
	result = _tmp4_;
	return result;
}


static gpointer
_unity_protocol_filter_definition_ref0 (gpointer self)
{
	return self ? unity_protocol_filter_definition_ref (self) : NULL;
}


static void
_vala_array_add10 (UnityProtocolFilterDefinition** * array,
                   int* length,
                   int* size,
                   UnityProtocolFilterDefinition* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (UnityProtocolFilterDefinition*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


void
unity_protocol_scope_registry_scope_metadata_load_from_key_file (UnityProtocolScopeRegistryScopeMetadata* self,
                                                                 GKeyFile* file,
                                                                 GError** error)
{
	gboolean _tmp0_ = FALSE;
	gchar* _tmp5_ = NULL;
	gchar* _tmp6_;
	const gchar* _tmp7_;
	gchar* _tmp8_;
	gboolean _tmp9_ = FALSE;
	gboolean _tmp16_ = FALSE;
	gchar* _tmp23_ = NULL;
	gchar* _tmp24_;
	gchar* _tmp25_;
	gchar* _tmp26_ = NULL;
	gchar* _tmp27_;
	gchar* _tmp28_;
	gboolean _tmp29_ = FALSE;
	gboolean _tmp31_ = FALSE;
	gboolean _tmp35_ = FALSE;
	gboolean _tmp39_ = FALSE;
	gboolean _tmp41_ = FALSE;
	gboolean _tmp43_ = FALSE;
	gboolean _tmp45_ = FALSE;
	gboolean _tmp49_ = FALSE;
	gboolean _tmp53_ = FALSE;
	gboolean _tmp57_ = FALSE;
	gboolean _tmp61_ = FALSE;
	gboolean _tmp66_ = FALSE;
	gboolean _tmp72_ = FALSE;
	gboolean _tmp78_ = FALSE;
	gboolean _tmp89_ = FALSE;
	gboolean _tmp93_ = FALSE;
	gboolean _tmp95_ = FALSE;
	gboolean _tmp97_ = FALSE;
	gboolean _tmp102_ = FALSE;
	static const char FILTER_PREFIX[] = "Filter ";
	static const char CATEGORY_PREFIX[] = "Category ";
	gsize _tmp107_;
	gchar** _tmp108_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	g_return_if_fail (file != NULL);
	_g_free0 (self->domain);
	self->domain = NULL;
	if (g_key_file_has_group (file, UNITY_PROTOCOL_SCOPE_REGISTRY_DESKTOP_GROUP)) {
		gboolean _tmp1_ = FALSE;
		_tmp1_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_DESKTOP_GROUP, "X-Ubuntu-Gettext-Domain", &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			return;
		}
		_tmp0_ = _tmp1_;
	} else {
		_tmp0_ = FALSE;
	}
	if (_tmp0_) {
		gchar* _tmp2_ = NULL;
		gchar* _tmp3_;
		gchar* _tmp4_;
		_tmp3_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_DESKTOP_GROUP, "X-Ubuntu-Gettext-Domain", &_inner_error_);
		_tmp2_ = _tmp3_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			return;
		}
		_tmp4_ = _tmp2_;
		_tmp2_ = NULL;
		_g_free0 (self->domain);
		self->domain = _tmp4_;
		_g_free0 (_tmp2_);
	}
	_tmp6_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Name", &_inner_error_);
	_tmp5_ = _tmp6_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		return;
	}
	_tmp7_ = self->domain;
	_tmp8_ = g_strdup (g_dgettext (_tmp7_, _tmp5_));
	_g_free0 (self->name);
	self->name = _tmp8_;
	_tmp9_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "DBusName", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp9_) {
		gchar* _tmp10_ = NULL;
		gchar* _tmp11_;
		gchar* _tmp12_;
		_tmp11_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "DBusName", &_inner_error_);
		_tmp10_ = _tmp11_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp12_ = _tmp10_;
		_tmp10_ = NULL;
		_g_free0 (self->dbus_name);
		self->dbus_name = _tmp12_;
		_g_free0 (_tmp10_);
	} else {
		gchar* _tmp13_ = NULL;
		gchar* _tmp14_;
		gchar* _tmp15_;
		_tmp14_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "GroupName", &_inner_error_);
		_tmp13_ = _tmp14_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp15_ = _tmp13_;
		_tmp13_ = NULL;
		_g_free0 (self->dbus_name);
		self->dbus_name = _tmp15_;
		_g_free0 (_tmp13_);
	}
	_tmp16_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "DBusPath", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp16_) {
		gchar* _tmp17_ = NULL;
		gchar* _tmp18_;
		gchar* _tmp19_;
		_tmp18_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "DBusPath", &_inner_error_);
		_tmp17_ = _tmp18_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp19_ = _tmp17_;
		_tmp17_ = NULL;
		_g_free0 (self->dbus_path);
		self->dbus_path = _tmp19_;
		_g_free0 (_tmp17_);
	} else {
		gchar* _tmp20_ = NULL;
		gchar* _tmp21_;
		gchar* _tmp22_;
		_tmp21_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "UniqueName", &_inner_error_);
		_tmp20_ = _tmp21_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp22_ = _tmp20_;
		_tmp20_ = NULL;
		_g_free0 (self->dbus_path);
		self->dbus_path = _tmp22_;
		_g_free0 (_tmp20_);
	}
	_tmp24_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Icon", &_inner_error_);
	_tmp23_ = _tmp24_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp5_);
		return;
	}
	_tmp25_ = _tmp23_;
	_tmp23_ = NULL;
	_g_free0 (self->icon);
	self->icon = _tmp25_;
	_tmp27_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Type", &_inner_error_);
	_tmp26_ = _tmp27_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	_tmp28_ = _tmp26_;
	_tmp26_ = NULL;
	_g_free0 (self->type);
	self->type = _tmp28_;
	_tmp29_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "IsMaster", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp29_) {
		gboolean _tmp30_ = FALSE;
		_tmp30_ = g_key_file_get_boolean (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "IsMaster", &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		self->is_master = _tmp30_;
	} else {
		self->is_master = FALSE;
	}
	_tmp31_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Module", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp31_) {
		gchar* _tmp32_ = NULL;
		gchar* _tmp33_;
		gchar* _tmp34_;
		_tmp33_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Module", &_inner_error_);
		_tmp32_ = _tmp33_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp34_ = _tmp32_;
		_tmp32_ = NULL;
		_g_free0 (self->module);
		self->module = _tmp34_;
		_g_free0 (_tmp32_);
	} else {
		_g_free0 (self->module);
		self->module = NULL;
	}
	_tmp35_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "ModuleType", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp35_) {
		gchar* _tmp36_ = NULL;
		gchar* _tmp37_;
		gchar* _tmp38_;
		_tmp37_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "ModuleType", &_inner_error_);
		_tmp36_ = _tmp37_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp38_ = _tmp36_;
		_tmp36_ = NULL;
		_g_free0 (self->module_type);
		self->module_type = _tmp38_;
		_g_free0 (_tmp36_);
	} else {
		_g_free0 (self->module_type);
		self->module_type = NULL;
	}
	_tmp39_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Visible", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp39_) {
		gboolean _tmp40_ = FALSE;
		_tmp40_ = g_key_file_get_boolean (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Visible", &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		self->visible = _tmp40_;
	} else {
		self->visible = TRUE;
	}
	_tmp41_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "GlobalSearches", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp41_) {
		gboolean _tmp42_ = FALSE;
		_tmp42_ = g_key_file_get_boolean (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "GlobalSearches", &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		self->global_searches = _tmp42_;
	} else {
		self->global_searches = TRUE;
	}
	_tmp43_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "RemoteContent", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp43_) {
		gboolean _tmp44_ = FALSE;
		_tmp44_ = g_key_file_get_boolean (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "RemoteContent", &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		self->remote_content = _tmp44_;
	} else {
		self->remote_content = FALSE;
	}
	_tmp45_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "QueryBinary", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp45_) {
		gchar* _tmp46_ = NULL;
		gchar* _tmp47_;
		gchar* _tmp48_;
		_tmp47_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "QueryBinary", &_inner_error_);
		_tmp46_ = _tmp47_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp48_ = _tmp46_;
		_tmp46_ = NULL;
		_g_free0 (self->query_binary);
		self->query_binary = _tmp48_;
		_g_free0 (_tmp46_);
	}
	_tmp49_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "CategoryIcon", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp49_) {
		gchar* _tmp50_ = NULL;
		gchar* _tmp51_;
		gchar* _tmp52_;
		_tmp51_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "CategoryIcon", &_inner_error_);
		_tmp50_ = _tmp51_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp52_ = _tmp50_;
		_tmp50_ = NULL;
		_g_free0 (self->category_icon);
		self->category_icon = _tmp52_;
		_g_free0 (_tmp50_);
	}
	_tmp53_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "QueryPattern", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp53_) {
		gchar* _tmp54_ = NULL;
		gchar* _tmp55_;
		gchar* _tmp56_;
		_tmp55_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "QueryPattern", &_inner_error_);
		_tmp54_ = _tmp55_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp56_ = _tmp54_;
		_tmp54_ = NULL;
		_g_free0 (self->query_pattern);
		self->query_pattern = _tmp56_;
		_g_free0 (_tmp54_);
	}
	_tmp57_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Description", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp57_) {
		gchar* _tmp58_ = NULL;
		gchar* _tmp59_;
		gchar* _tmp60_;
		_tmp59_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Description", &_inner_error_);
		_tmp58_ = _tmp59_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp60_ = _tmp58_;
		_tmp58_ = NULL;
		_g_free0 (self->description);
		self->description = _tmp60_;
		_g_free0 (_tmp58_);
	}
	_tmp61_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "SearchHint", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp61_) {
		gchar* _tmp62_ = NULL;
		gchar* _tmp63_;
		const gchar* _tmp64_;
		gchar* _tmp65_;
		_tmp63_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "SearchHint", &_inner_error_);
		_tmp62_ = _tmp63_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp64_ = self->domain;
		_tmp65_ = g_strdup (g_dgettext (_tmp64_, _tmp62_));
		_g_free0 (self->search_hint);
		self->search_hint = _tmp65_;
		_g_free0 (_tmp62_);
	}
	_tmp66_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "RequiredMetadata", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp66_) {
		gchar* _tmp67_ = NULL;
		gchar* _tmp68_;
		UnityProtocolMetaDataSchemaInfo* _tmp69_ = NULL;
		UnityProtocolMetaDataSchemaInfo* _tmp70_;
		UnityProtocolMetaDataSchemaInfo* _tmp71_;
		_tmp68_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "RequiredMetadata", &_inner_error_);
		_tmp67_ = _tmp68_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp70_ = unity_protocol_meta_data_schema_info_from_string (_tmp67_, &_inner_error_);
		_tmp69_ = _tmp70_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp67_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp71_ = _tmp69_;
		_tmp69_ = NULL;
		_unity_protocol_meta_data_schema_info_unref0 (self->required_metadata);
		self->required_metadata = _tmp71_;
		_unity_protocol_meta_data_schema_info_unref0 (_tmp69_);
		_g_free0 (_tmp67_);
	}
	_tmp72_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "OptionalMetadata", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp72_) {
		gchar* _tmp73_ = NULL;
		gchar* _tmp74_;
		UnityProtocolMetaDataSchemaInfo* _tmp75_ = NULL;
		UnityProtocolMetaDataSchemaInfo* _tmp76_;
		UnityProtocolMetaDataSchemaInfo* _tmp77_;
		_tmp74_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "OptionalMetadata", &_inner_error_);
		_tmp73_ = _tmp74_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp76_ = unity_protocol_meta_data_schema_info_from_string (_tmp73_, &_inner_error_);
		_tmp75_ = _tmp76_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp73_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp77_ = _tmp75_;
		_tmp75_ = NULL;
		_unity_protocol_meta_data_schema_info_unref0 (self->optional_metadata);
		self->optional_metadata = _tmp77_;
		_unity_protocol_meta_data_schema_info_unref0 (_tmp75_);
		_g_free0 (_tmp73_);
	}
	_tmp78_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Keywords", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp78_) {
		gchar* _tmp79_ = NULL;
		gchar* _tmp80_;
		gchar** _tmp81_;
		gchar** _tmp82_;
		(self->keywords == NULL) ? NULL : (self->keywords = (_g_slist_free__g_free0_ (self->keywords), NULL));
		self->keywords = NULL;
		_tmp80_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Keywords", &_inner_error_);
		_tmp79_ = _tmp80_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp82_ = _tmp81_ = g_strsplit (_tmp79_, ";", 0);
		{
			gchar** k_collection = NULL;
			gint k_collection_length1 = 0;
			gint _k_collection_size_ = 0;
			gint k_it = 0;
			k_collection = _tmp82_;
			k_collection_length1 = _vala_array_length (_tmp81_);
			for (k_it = 0; k_it < _vala_array_length (_tmp81_); k_it = k_it + 1) {
				gchar* _tmp83_;
				gchar* k = NULL;
				_tmp83_ = g_strdup (k_collection[k_it]);
				k = _tmp83_;
				{
					const gchar* _tmp84_;
					gint _tmp85_;
					gint _tmp86_;
					_tmp84_ = k;
					_tmp85_ = strlen (_tmp84_);
					_tmp86_ = _tmp85_;
					if (_tmp86_ > 0) {
						const gchar* _tmp87_;
						gchar* _tmp88_;
						_tmp87_ = k;
						_tmp88_ = g_strdup (_tmp87_);
						self->keywords = g_slist_append (self->keywords, _tmp88_);
					}
					_g_free0 (k);
				}
			}
			k_collection = (_vala_array_free (k_collection, k_collection_length1, (GDestroyNotify) g_free), NULL);
		}
		_g_free0 (_tmp79_);
	}
	_tmp89_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Shortcut", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp89_) {
		gchar* _tmp90_ = NULL;
		gchar* _tmp91_;
		gchar* _tmp92_;
		_tmp91_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Shortcut", &_inner_error_);
		_tmp90_ = _tmp91_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp92_ = _tmp90_;
		_tmp90_ = NULL;
		_g_free0 (self->shortcut);
		self->shortcut = _tmp92_;
		_g_free0 (_tmp90_);
	}
	_tmp93_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Timeout", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp93_) {
		gint _tmp94_ = 0;
		_tmp94_ = g_key_file_get_integer (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Timeout", &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		self->timeout = _tmp94_;
	}
	_tmp95_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "NoExport", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp95_) {
		gboolean _tmp96_ = FALSE;
		_tmp96_ = g_key_file_get_boolean (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "NoExport", &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		self->no_export = _tmp96_;
	} else {
		self->no_export = FALSE;
	}
	_tmp97_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "NoContentHint", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp97_) {
		gchar* _tmp98_ = NULL;
		gchar* _tmp99_;
		const gchar* _tmp100_;
		gchar* _tmp101_;
		_tmp99_ = g_key_file_get_string (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "NoContentHint", &_inner_error_);
		_tmp98_ = _tmp99_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp100_ = self->domain;
		_tmp101_ = g_strdup (g_dgettext (_tmp100_, _tmp98_));
		_g_free0 (self->no_content_hint);
		self->no_content_hint = _tmp101_;
		_g_free0 (_tmp98_);
	}
	_tmp102_ = g_key_file_has_key (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Subscopes", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp23_);
		_g_free0 (_tmp5_);
		return;
	}
	if (_tmp102_) {
		gchar** _tmp103_ = NULL;
		gsize _tmp104_;
		gchar** _tmp105_;
		gint _tmp103__length1;
		gint __tmp103__size_;
		gchar** _tmp106_;
		gint _tmp106__length1;
		_tmp105_ = g_key_file_get_string_list (file, UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_GROUP, "Subscopes", &_tmp104_, &_inner_error_);
		_tmp103_ = _tmp105_;
		_tmp103__length1 = _tmp104_;
		__tmp103__size_ = _tmp103__length1;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (_tmp26_);
			_g_free0 (_tmp23_);
			_g_free0 (_tmp5_);
			return;
		}
		_tmp106_ = _tmp103_;
		_tmp106__length1 = _tmp103__length1;
		_tmp103_ = NULL;
		_tmp103__length1 = 0;
		self->priv->subscope_ids = (_vala_array_free (self->priv->subscope_ids, self->priv->subscope_ids_length1, (GDestroyNotify) g_free), NULL);
		self->priv->subscope_ids = _tmp106_;
		self->priv->subscope_ids_length1 = _tmp106__length1;
		self->priv->_subscope_ids_size_ = self->priv->subscope_ids_length1;
		self->priv->overrides_subscopes = TRUE;
		_tmp103_ = (_vala_array_free (_tmp103_, _tmp103__length1, (GDestroyNotify) g_free), NULL);
	}
	_tmp108_ = g_key_file_get_groups (file, &_tmp107_);
	{
		gchar** group_name_collection = NULL;
		gint group_name_collection_length1 = 0;
		gint _group_name_collection_size_ = 0;
		gint group_name_it = 0;
		group_name_collection = _tmp108_;
		group_name_collection_length1 = _tmp107_;
		for (group_name_it = 0; group_name_it < _tmp107_; group_name_it = group_name_it + 1) {
			const gchar* group_name = NULL;
			group_name = group_name_collection[group_name_it];
			{
				gchar* stripped = NULL;
				const gchar* _tmp109_;
				gchar* _tmp110_;
				gboolean _tmp111_ = FALSE;
				const gchar* _tmp112_;
				_tmp109_ = group_name;
				_tmp110_ = string_strip (_tmp109_);
				stripped = _tmp110_;
				_tmp112_ = group_name;
				if (g_str_has_prefix (_tmp112_, CATEGORY_PREFIX)) {
					const gchar* _tmp113_;
					gint _tmp114_;
					gint _tmp115_;
					gint _tmp116_;
					gint _tmp117_;
					_tmp113_ = stripped;
					_tmp114_ = strlen (_tmp113_);
					_tmp115_ = _tmp114_;
					_tmp116_ = strlen (CATEGORY_PREFIX);
					_tmp117_ = _tmp116_;
					_tmp111_ = _tmp115_ >= (_tmp117_ + 1);
				} else {
					_tmp111_ = FALSE;
				}
				if (_tmp111_) {
					gchar* id = NULL;
					const gchar* _tmp118_;
					gint _tmp119_;
					gint _tmp120_;
					gchar* _tmp121_;
					gchar* _tmp122_;
					gchar* _tmp123_;
					gchar* _tmp124_;
					gchar* _tmp125_ = NULL;
					const gchar* _tmp126_;
					gchar* _tmp127_;
					gchar* name = NULL;
					const gchar* _tmp128_;
					gchar* _tmp129_;
					gchar* icon = NULL;
					const gchar* _tmp130_;
					gchar* _tmp131_;
					gchar* dedup_field = NULL;
					gboolean _tmp132_ = FALSE;
					const gchar* _tmp133_;
					gchar* sort_field = NULL;
					gboolean _tmp138_ = FALSE;
					const gchar* _tmp139_;
					gchar* renderer = NULL;
					gboolean _tmp144_ = FALSE;
					const gchar* _tmp145_;
					gchar* cat_content_type = NULL;
					gboolean _tmp150_ = FALSE;
					const gchar* _tmp151_;
					gchar* renderer_hint = NULL;
					gboolean _tmp156_ = FALSE;
					const gchar* _tmp157_;
					UnityProtocolCategoryDefinition* category_definition = NULL;
					const gchar* _tmp162_;
					const gchar* _tmp163_;
					const gchar* _tmp164_;
					const gchar* _tmp165_;
					const gchar* _tmp166_;
					const gchar* _tmp167_;
					const gchar* _tmp168_;
					UnityProtocolCategoryDefinition* _tmp169_;
					UnityProtocolCategoryDefinition* _tmp170_;
					_tmp118_ = stripped;
					_tmp119_ = strlen (CATEGORY_PREFIX);
					_tmp120_ = _tmp119_;
					_tmp121_ = string_substring (_tmp118_, (glong) _tmp120_, (glong) -1);
					_tmp122_ = _tmp121_;
					_tmp123_ = string_strip (_tmp122_);
					_tmp124_ = _tmp123_;
					_g_free0 (_tmp122_);
					id = _tmp124_;
					_tmp126_ = group_name;
					_tmp127_ = g_key_file_get_string (file, _tmp126_, "Name", &_inner_error_);
					_tmp125_ = _tmp127_;
					if (G_UNLIKELY (_inner_error_ != NULL)) {
						g_propagate_error (error, _inner_error_);
						_g_free0 (id);
						_g_free0 (stripped);
						group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
						_g_free0 (_tmp26_);
						_g_free0 (_tmp23_);
						_g_free0 (_tmp5_);
						return;
					}
					_tmp128_ = self->domain;
					_tmp129_ = g_strdup (g_dgettext (_tmp128_, _tmp125_));
					name = _tmp129_;
					_tmp130_ = group_name;
					_tmp131_ = g_key_file_get_string (file, _tmp130_, "Icon", &_inner_error_);
					icon = _tmp131_;
					if (G_UNLIKELY (_inner_error_ != NULL)) {
						g_propagate_error (error, _inner_error_);
						_g_free0 (name);
						_g_free0 (_tmp125_);
						_g_free0 (id);
						_g_free0 (stripped);
						group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
						_g_free0 (_tmp26_);
						_g_free0 (_tmp23_);
						_g_free0 (_tmp5_);
						return;
					}
					dedup_field = NULL;
					_tmp133_ = group_name;
					_tmp132_ = g_key_file_has_key (file, _tmp133_, "DedupField", &_inner_error_);
					if (G_UNLIKELY (_inner_error_ != NULL)) {
						g_propagate_error (error, _inner_error_);
						_g_free0 (dedup_field);
						_g_free0 (icon);
						_g_free0 (name);
						_g_free0 (_tmp125_);
						_g_free0 (id);
						_g_free0 (stripped);
						group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
						_g_free0 (_tmp26_);
						_g_free0 (_tmp23_);
						_g_free0 (_tmp5_);
						return;
					}
					if (_tmp132_) {
						gchar* _tmp134_ = NULL;
						const gchar* _tmp135_;
						gchar* _tmp136_;
						gchar* _tmp137_;
						_tmp135_ = group_name;
						_tmp136_ = g_key_file_get_string (file, _tmp135_, "DedupField", &_inner_error_);
						_tmp134_ = _tmp136_;
						if (G_UNLIKELY (_inner_error_ != NULL)) {
							g_propagate_error (error, _inner_error_);
							_g_free0 (dedup_field);
							_g_free0 (icon);
							_g_free0 (name);
							_g_free0 (_tmp125_);
							_g_free0 (id);
							_g_free0 (stripped);
							group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
							_g_free0 (_tmp26_);
							_g_free0 (_tmp23_);
							_g_free0 (_tmp5_);
							return;
						}
						_tmp137_ = _tmp134_;
						_tmp134_ = NULL;
						_g_free0 (dedup_field);
						dedup_field = _tmp137_;
						_g_free0 (_tmp134_);
					}
					sort_field = NULL;
					_tmp139_ = group_name;
					_tmp138_ = g_key_file_has_key (file, _tmp139_, "SortField", &_inner_error_);
					if (G_UNLIKELY (_inner_error_ != NULL)) {
						g_propagate_error (error, _inner_error_);
						_g_free0 (sort_field);
						_g_free0 (dedup_field);
						_g_free0 (icon);
						_g_free0 (name);
						_g_free0 (_tmp125_);
						_g_free0 (id);
						_g_free0 (stripped);
						group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
						_g_free0 (_tmp26_);
						_g_free0 (_tmp23_);
						_g_free0 (_tmp5_);
						return;
					}
					if (_tmp138_) {
						gchar* _tmp140_ = NULL;
						const gchar* _tmp141_;
						gchar* _tmp142_;
						gchar* _tmp143_;
						_tmp141_ = group_name;
						_tmp142_ = g_key_file_get_string (file, _tmp141_, "SortField", &_inner_error_);
						_tmp140_ = _tmp142_;
						if (G_UNLIKELY (_inner_error_ != NULL)) {
							g_propagate_error (error, _inner_error_);
							_g_free0 (sort_field);
							_g_free0 (dedup_field);
							_g_free0 (icon);
							_g_free0 (name);
							_g_free0 (_tmp125_);
							_g_free0 (id);
							_g_free0 (stripped);
							group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
							_g_free0 (_tmp26_);
							_g_free0 (_tmp23_);
							_g_free0 (_tmp5_);
							return;
						}
						_tmp143_ = _tmp140_;
						_tmp140_ = NULL;
						_g_free0 (sort_field);
						sort_field = _tmp143_;
						_g_free0 (_tmp140_);
					}
					renderer = NULL;
					_tmp145_ = group_name;
					_tmp144_ = g_key_file_has_key (file, _tmp145_, "Renderer", &_inner_error_);
					if (G_UNLIKELY (_inner_error_ != NULL)) {
						g_propagate_error (error, _inner_error_);
						_g_free0 (renderer);
						_g_free0 (sort_field);
						_g_free0 (dedup_field);
						_g_free0 (icon);
						_g_free0 (name);
						_g_free0 (_tmp125_);
						_g_free0 (id);
						_g_free0 (stripped);
						group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
						_g_free0 (_tmp26_);
						_g_free0 (_tmp23_);
						_g_free0 (_tmp5_);
						return;
					}
					if (_tmp144_) {
						gchar* _tmp146_ = NULL;
						const gchar* _tmp147_;
						gchar* _tmp148_;
						gchar* _tmp149_;
						_tmp147_ = group_name;
						_tmp148_ = g_key_file_get_string (file, _tmp147_, "Renderer", &_inner_error_);
						_tmp146_ = _tmp148_;
						if (G_UNLIKELY (_inner_error_ != NULL)) {
							g_propagate_error (error, _inner_error_);
							_g_free0 (renderer);
							_g_free0 (sort_field);
							_g_free0 (dedup_field);
							_g_free0 (icon);
							_g_free0 (name);
							_g_free0 (_tmp125_);
							_g_free0 (id);
							_g_free0 (stripped);
							group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
							_g_free0 (_tmp26_);
							_g_free0 (_tmp23_);
							_g_free0 (_tmp5_);
							return;
						}
						_tmp149_ = _tmp146_;
						_tmp146_ = NULL;
						_g_free0 (renderer);
						renderer = _tmp149_;
						_g_free0 (_tmp146_);
					}
					cat_content_type = NULL;
					_tmp151_ = group_name;
					_tmp150_ = g_key_file_has_key (file, _tmp151_, "ContentType", &_inner_error_);
					if (G_UNLIKELY (_inner_error_ != NULL)) {
						g_propagate_error (error, _inner_error_);
						_g_free0 (cat_content_type);
						_g_free0 (renderer);
						_g_free0 (sort_field);
						_g_free0 (dedup_field);
						_g_free0 (icon);
						_g_free0 (name);
						_g_free0 (_tmp125_);
						_g_free0 (id);
						_g_free0 (stripped);
						group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
						_g_free0 (_tmp26_);
						_g_free0 (_tmp23_);
						_g_free0 (_tmp5_);
						return;
					}
					if (_tmp150_) {
						gchar* _tmp152_ = NULL;
						const gchar* _tmp153_;
						gchar* _tmp154_;
						gchar* _tmp155_;
						_tmp153_ = group_name;
						_tmp154_ = g_key_file_get_string (file, _tmp153_, "ContentType", &_inner_error_);
						_tmp152_ = _tmp154_;
						if (G_UNLIKELY (_inner_error_ != NULL)) {
							g_propagate_error (error, _inner_error_);
							_g_free0 (cat_content_type);
							_g_free0 (renderer);
							_g_free0 (sort_field);
							_g_free0 (dedup_field);
							_g_free0 (icon);
							_g_free0 (name);
							_g_free0 (_tmp125_);
							_g_free0 (id);
							_g_free0 (stripped);
							group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
							_g_free0 (_tmp26_);
							_g_free0 (_tmp23_);
							_g_free0 (_tmp5_);
							return;
						}
						_tmp155_ = _tmp152_;
						_tmp152_ = NULL;
						_g_free0 (cat_content_type);
						cat_content_type = _tmp155_;
						_g_free0 (_tmp152_);
					}
					renderer_hint = NULL;
					_tmp157_ = group_name;
					_tmp156_ = g_key_file_has_key (file, _tmp157_, "RendererHint", &_inner_error_);
					if (G_UNLIKELY (_inner_error_ != NULL)) {
						g_propagate_error (error, _inner_error_);
						_g_free0 (renderer_hint);
						_g_free0 (cat_content_type);
						_g_free0 (renderer);
						_g_free0 (sort_field);
						_g_free0 (dedup_field);
						_g_free0 (icon);
						_g_free0 (name);
						_g_free0 (_tmp125_);
						_g_free0 (id);
						_g_free0 (stripped);
						group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
						_g_free0 (_tmp26_);
						_g_free0 (_tmp23_);
						_g_free0 (_tmp5_);
						return;
					}
					if (_tmp156_) {
						gchar* _tmp158_ = NULL;
						const gchar* _tmp159_;
						gchar* _tmp160_;
						gchar* _tmp161_;
						_tmp159_ = group_name;
						_tmp160_ = g_key_file_get_string (file, _tmp159_, "RendererHint", &_inner_error_);
						_tmp158_ = _tmp160_;
						if (G_UNLIKELY (_inner_error_ != NULL)) {
							g_propagate_error (error, _inner_error_);
							_g_free0 (renderer_hint);
							_g_free0 (cat_content_type);
							_g_free0 (renderer);
							_g_free0 (sort_field);
							_g_free0 (dedup_field);
							_g_free0 (icon);
							_g_free0 (name);
							_g_free0 (_tmp125_);
							_g_free0 (id);
							_g_free0 (stripped);
							group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
							_g_free0 (_tmp26_);
							_g_free0 (_tmp23_);
							_g_free0 (_tmp5_);
							return;
						}
						_tmp161_ = _tmp158_;
						_tmp158_ = NULL;
						_g_free0 (renderer_hint);
						renderer_hint = _tmp161_;
						_g_free0 (_tmp158_);
					}
					_tmp162_ = id;
					_tmp163_ = name;
					_tmp164_ = icon;
					_tmp165_ = renderer;
					_tmp166_ = cat_content_type;
					_tmp167_ = dedup_field;
					_tmp168_ = sort_field;
					_tmp169_ = unity_protocol_category_definition_create (_tmp162_, _tmp163_, _tmp164_, _tmp165_, _tmp166_, _tmp167_, _tmp168_);
					category_definition = _tmp169_;
					_tmp170_ = category_definition;
					if (_tmp170_ != NULL) {
						UnityProtocolCategoryDefinition* _tmp171_;
						const gchar* _tmp172_;
						UnityProtocolCategoryDefinition** _tmp173_;
						gint _tmp173__length1;
						UnityProtocolCategoryDefinition* _tmp174_;
						UnityProtocolCategoryDefinition* _tmp175_;
						_tmp171_ = category_definition;
						_tmp172_ = renderer_hint;
						unity_protocol_category_definition_set_renderer_hint (_tmp171_, _tmp172_);
						_tmp173_ = self->priv->categories;
						_tmp173__length1 = self->priv->categories_length1;
						_tmp174_ = category_definition;
						_tmp175_ = _unity_protocol_category_definition_ref0 (_tmp174_);
						_vala_array_add9 (&self->priv->categories, &self->priv->categories_length1, &self->priv->_categories_size_, _tmp175_);
					}
					_unity_protocol_category_definition_unref0 (category_definition);
					_g_free0 (renderer_hint);
					_g_free0 (cat_content_type);
					_g_free0 (renderer);
					_g_free0 (sort_field);
					_g_free0 (dedup_field);
					_g_free0 (icon);
					_g_free0 (name);
					_g_free0 (_tmp125_);
					_g_free0 (id);
				} else {
					gboolean _tmp176_ = FALSE;
					const gchar* _tmp177_;
					_tmp177_ = group_name;
					if (g_str_has_prefix (_tmp177_, FILTER_PREFIX)) {
						const gchar* _tmp178_;
						gint _tmp179_;
						gint _tmp180_;
						gint _tmp181_;
						gint _tmp182_;
						_tmp178_ = stripped;
						_tmp179_ = strlen (_tmp178_);
						_tmp180_ = _tmp179_;
						_tmp181_ = strlen (FILTER_PREFIX);
						_tmp182_ = _tmp181_;
						_tmp176_ = _tmp180_ >= (_tmp182_ + 1);
					} else {
						_tmp176_ = FALSE;
					}
					if (_tmp176_) {
						gchar* id = NULL;
						const gchar* _tmp183_;
						gint _tmp184_;
						gint _tmp185_;
						gchar* _tmp186_;
						gchar* _tmp187_;
						gchar* _tmp188_;
						gchar* _tmp189_;
						gchar* type = NULL;
						const gchar* _tmp190_;
						gchar* _tmp191_;
						gchar* _tmp192_ = NULL;
						const gchar* _tmp193_;
						gchar* _tmp194_;
						gchar* name = NULL;
						const gchar* _tmp195_;
						gchar* _tmp196_;
						gchar* sort_type = NULL;
						gboolean _tmp197_ = FALSE;
						const gchar* _tmp198_;
						UnityProtocolFilterDefinition* filter_definition = NULL;
						const gchar* _tmp203_;
						const gchar* _tmp204_;
						const gchar* _tmp205_;
						const gchar* _tmp206_;
						UnityProtocolFilterDefinition* _tmp207_;
						gchar** option_ids = NULL;
						const gchar* _tmp208_;
						gsize _tmp209_;
						gchar** _tmp210_;
						gint option_ids_length1;
						gint _option_ids_size_;
						gchar* _tmp211_ = NULL;
						const gchar* _tmp212_;
						gchar* _tmp213_;
						gchar* option_names_str = NULL;
						const gchar* _tmp214_;
						gchar* _tmp215_;
						const gchar* _tmp216_;
						const gchar* _tmp217_;
						gint _tmp218_;
						gint _tmp219_;
						gchar** option_names = NULL;
						const gchar* _tmp227_;
						gchar** _tmp228_;
						gchar** _tmp229_;
						gint option_names_length1;
						gint _option_names_size_;
						gchar** _tmp230_;
						gint _tmp230__length1;
						gchar** _tmp231_;
						gint _tmp231__length1;
						UnityProtocolFilterDefinition* _tmp248_;
						_tmp183_ = stripped;
						_tmp184_ = strlen (FILTER_PREFIX);
						_tmp185_ = _tmp184_;
						_tmp186_ = string_substring (_tmp183_, (glong) _tmp185_, (glong) -1);
						_tmp187_ = _tmp186_;
						_tmp188_ = string_strip (_tmp187_);
						_tmp189_ = _tmp188_;
						_g_free0 (_tmp187_);
						id = _tmp189_;
						_tmp190_ = group_name;
						_tmp191_ = g_key_file_get_string (file, _tmp190_, "Type", &_inner_error_);
						type = _tmp191_;
						if (G_UNLIKELY (_inner_error_ != NULL)) {
							g_propagate_error (error, _inner_error_);
							_g_free0 (id);
							_g_free0 (stripped);
							group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
							_g_free0 (_tmp26_);
							_g_free0 (_tmp23_);
							_g_free0 (_tmp5_);
							return;
						}
						_tmp193_ = group_name;
						_tmp194_ = g_key_file_get_string (file, _tmp193_, "Name", &_inner_error_);
						_tmp192_ = _tmp194_;
						if (G_UNLIKELY (_inner_error_ != NULL)) {
							g_propagate_error (error, _inner_error_);
							_g_free0 (type);
							_g_free0 (id);
							_g_free0 (stripped);
							group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
							_g_free0 (_tmp26_);
							_g_free0 (_tmp23_);
							_g_free0 (_tmp5_);
							return;
						}
						_tmp195_ = self->domain;
						_tmp196_ = g_strdup (g_dgettext (_tmp195_, _tmp192_));
						name = _tmp196_;
						sort_type = NULL;
						_tmp198_ = group_name;
						_tmp197_ = g_key_file_has_key (file, _tmp198_, "SortType", &_inner_error_);
						if (G_UNLIKELY (_inner_error_ != NULL)) {
							g_propagate_error (error, _inner_error_);
							_g_free0 (sort_type);
							_g_free0 (name);
							_g_free0 (_tmp192_);
							_g_free0 (type);
							_g_free0 (id);
							_g_free0 (stripped);
							group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
							_g_free0 (_tmp26_);
							_g_free0 (_tmp23_);
							_g_free0 (_tmp5_);
							return;
						}
						if (_tmp197_) {
							gchar* _tmp199_ = NULL;
							const gchar* _tmp200_;
							gchar* _tmp201_;
							gchar* _tmp202_;
							_tmp200_ = group_name;
							_tmp201_ = g_key_file_get_string (file, _tmp200_, "SortType", &_inner_error_);
							_tmp199_ = _tmp201_;
							if (G_UNLIKELY (_inner_error_ != NULL)) {
								g_propagate_error (error, _inner_error_);
								_g_free0 (sort_type);
								_g_free0 (name);
								_g_free0 (_tmp192_);
								_g_free0 (type);
								_g_free0 (id);
								_g_free0 (stripped);
								group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
								_g_free0 (_tmp26_);
								_g_free0 (_tmp23_);
								_g_free0 (_tmp5_);
								return;
							}
							_tmp202_ = _tmp199_;
							_tmp199_ = NULL;
							_g_free0 (sort_type);
							sort_type = _tmp202_;
							_g_free0 (_tmp199_);
						}
						_tmp203_ = id;
						_tmp204_ = type;
						_tmp205_ = name;
						_tmp206_ = sort_type;
						_tmp207_ = unity_protocol_filter_definition_create (_tmp203_, _tmp204_, _tmp205_, _tmp206_);
						filter_definition = _tmp207_;
						_tmp208_ = group_name;
						_tmp210_ = g_key_file_get_string_list (file, _tmp208_, "OptionIDs", &_tmp209_, &_inner_error_);
						option_ids = _tmp210_;
						option_ids_length1 = _tmp209_;
						_option_ids_size_ = option_ids_length1;
						if (G_UNLIKELY (_inner_error_ != NULL)) {
							g_propagate_error (error, _inner_error_);
							_unity_protocol_filter_definition_unref0 (filter_definition);
							_g_free0 (sort_type);
							_g_free0 (name);
							_g_free0 (_tmp192_);
							_g_free0 (type);
							_g_free0 (id);
							_g_free0 (stripped);
							group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
							_g_free0 (_tmp26_);
							_g_free0 (_tmp23_);
							_g_free0 (_tmp5_);
							return;
						}
						_tmp212_ = group_name;
						_tmp213_ = g_key_file_get_string (file, _tmp212_, "OptionNames", &_inner_error_);
						_tmp211_ = _tmp213_;
						if (G_UNLIKELY (_inner_error_ != NULL)) {
							g_propagate_error (error, _inner_error_);
							option_ids = (_vala_array_free (option_ids, option_ids_length1, (GDestroyNotify) g_free), NULL);
							_unity_protocol_filter_definition_unref0 (filter_definition);
							_g_free0 (sort_type);
							_g_free0 (name);
							_g_free0 (_tmp192_);
							_g_free0 (type);
							_g_free0 (id);
							_g_free0 (stripped);
							group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
							_g_free0 (_tmp26_);
							_g_free0 (_tmp23_);
							_g_free0 (_tmp5_);
							return;
						}
						_tmp214_ = self->domain;
						_tmp215_ = g_strdup (g_dgettext (_tmp214_, _tmp211_));
						option_names_str = _tmp215_;
						_tmp216_ = option_names_str;
						_tmp217_ = option_names_str;
						_tmp218_ = strlen (_tmp217_);
						_tmp219_ = _tmp218_;
						if (string_get (_tmp216_, (glong) (_tmp219_ - 1)) == ';') {
							const gchar* _tmp220_;
							guint8* _tmp221_;
							gint _tmp221__length1;
							guint8* _tmp222_;
							gint _tmp222__length1;
							const gchar* _tmp223_;
							gint _tmp224_;
							gint _tmp225_;
							guint8 _tmp226_;
							_tmp220_ = option_names_str;
							_tmp221_ = string_get_data (_tmp220_, &_tmp221__length1);
							_tmp222_ = _tmp221_;
							_tmp222__length1 = _tmp221__length1;
							_tmp223_ = option_names_str;
							_tmp224_ = strlen (_tmp223_);
							_tmp225_ = _tmp224_;
							_tmp222_[_tmp225_ - 1] = (guint8) 0;
							_tmp226_ = _tmp222_[_tmp225_ - 1];
						}
						_tmp227_ = option_names_str;
						_tmp229_ = _tmp228_ = g_strsplit (_tmp227_, ";", 0);
						option_names = _tmp229_;
						option_names_length1 = _vala_array_length (_tmp228_);
						_option_names_size_ = option_names_length1;
						_tmp230_ = option_ids;
						_tmp230__length1 = option_ids_length1;
						_tmp231_ = option_names;
						_tmp231__length1 = option_names_length1;
						if (_tmp230__length1 != _tmp231__length1) {
							gchar** _tmp232_;
							gint _tmp232__length1;
							gchar** _tmp233_;
							gint _tmp233__length1;
							_tmp232_ = option_ids;
							_tmp232__length1 = option_ids_length1;
							_tmp233_ = option_names;
							_tmp233__length1 = option_names_length1;
							g_warning ("protocol-scope-discovery.vala:543: Number of elements of OptionIDs doe" \
"sn't match OptionNames (%d vs %d)", _tmp232__length1, _tmp233__length1);
						}
						{
							gint i = 0;
							i = 0;
							{
								gboolean _tmp234_ = FALSE;
								_tmp234_ = TRUE;
								while (TRUE) {
									gboolean _tmp236_ = FALSE;
									gint _tmp237_;
									gchar** _tmp238_;
									gint _tmp238__length1;
									UnityProtocolFilterDefinition* _tmp241_;
									gchar** _tmp242_;
									gint _tmp242__length1;
									gint _tmp243_;
									const gchar* _tmp244_;
									gchar** _tmp245_;
									gint _tmp245__length1;
									gint _tmp246_;
									const gchar* _tmp247_;
									if (!_tmp234_) {
										gint _tmp235_;
										_tmp235_ = i;
										i = _tmp235_ + 1;
									}
									_tmp234_ = FALSE;
									_tmp237_ = i;
									_tmp238_ = option_ids;
									_tmp238__length1 = option_ids_length1;
									if (_tmp237_ < _tmp238__length1) {
										gint _tmp239_;
										gchar** _tmp240_;
										gint _tmp240__length1;
										_tmp239_ = i;
										_tmp240_ = option_names;
										_tmp240__length1 = option_names_length1;
										_tmp236_ = _tmp239_ < _tmp240__length1;
									} else {
										_tmp236_ = FALSE;
									}
									if (!_tmp236_) {
										break;
									}
									_tmp241_ = filter_definition;
									_tmp242_ = option_ids;
									_tmp242__length1 = option_ids_length1;
									_tmp243_ = i;
									_tmp244_ = _tmp242_[_tmp243_];
									_tmp245_ = option_names;
									_tmp245__length1 = option_names_length1;
									_tmp246_ = i;
									_tmp247_ = _tmp245_[_tmp246_];
									unity_protocol_filter_definition_add_option (_tmp241_, _tmp244_, _tmp247_);
								}
							}
						}
						_tmp248_ = filter_definition;
						if (_tmp248_ != NULL) {
							UnityProtocolFilterDefinition** _tmp249_;
							gint _tmp249__length1;
							UnityProtocolFilterDefinition* _tmp250_;
							UnityProtocolFilterDefinition* _tmp251_;
							_tmp249_ = self->priv->filters;
							_tmp249__length1 = self->priv->filters_length1;
							_tmp250_ = filter_definition;
							_tmp251_ = _unity_protocol_filter_definition_ref0 (_tmp250_);
							_vala_array_add10 (&self->priv->filters, &self->priv->filters_length1, &self->priv->_filters_size_, _tmp251_);
						}
						option_names = (_vala_array_free (option_names, option_names_length1, (GDestroyNotify) g_free), NULL);
						_g_free0 (option_names_str);
						_g_free0 (_tmp211_);
						option_ids = (_vala_array_free (option_ids, option_ids_length1, (GDestroyNotify) g_free), NULL);
						_unity_protocol_filter_definition_unref0 (filter_definition);
						_g_free0 (sort_type);
						_g_free0 (name);
						_g_free0 (_tmp192_);
						_g_free0 (type);
						_g_free0 (id);
					}
				}
				_g_free0 (stripped);
			}
		}
		group_name_collection = (_vala_array_free (group_name_collection, group_name_collection_length1, (GDestroyNotify) g_free), NULL);
	}
	_g_free0 (_tmp26_);
	_g_free0 (_tmp23_);
	_g_free0 (_tmp5_);
}


static UnityProtocolScopeRegistryScopeMetadata*
unity_protocol_scope_registry_scope_metadata_for_keyfile (GKeyFile* file,
                                                          GError** error)
{
	UnityProtocolScopeRegistryScopeMetadata* result = NULL;
	UnityProtocolScopeRegistryScopeMetadata* data = NULL;
	UnityProtocolScopeRegistryScopeMetadata* _tmp0_;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (file != NULL, NULL);
	_tmp0_ = unity_protocol_scope_registry_scope_metadata_new ();
	data = _tmp0_;
	unity_protocol_scope_registry_scope_metadata_load_from_key_file (data, file, &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_unity_protocol_scope_registry_scope_metadata_unref0 (data);
		return NULL;
	}
	result = data;
	return result;
}


static gboolean
_vala_string_array_contains (gchar* * stack,
                             int stack_length,
                             gchar* needle)
{
	int i;
	for (i = 0; i < stack_length; i++) {
		if (g_strcmp0 (stack[i], needle) == 0) {
			return TRUE;
		}
	}
	return FALSE;
}


UnityProtocolScopeRegistryScopeMetadata*
unity_protocol_scope_registry_scope_metadata_for_id (const gchar* scope_id,
                                                     GError** error)
{
	UnityProtocolScopeRegistryScopeMetadata* result = NULL;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar* full_path = NULL;
	GKeyFile* file = NULL;
	GKeyFile* _tmp2_;
	gboolean loaded = FALSE;
	gboolean _tmp3_;
	gboolean _tmp15_;
	UnityProtocolScopeRegistryScopeMetadata* data = NULL;
	GKeyFile* _tmp17_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp18_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp19_;
	gchar* _tmp20_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp21_;
	const gchar* _tmp22_;
	gchar* _tmp23_;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (scope_id != NULL, NULL);
	g_debug ("protocol-scope-discovery.vala:569: for_id: %s", scope_id);
	_tmp0_ = unity_protocol_scope_registry_scope_metadata_hidden_scope_ids;
	_tmp0__length1 = unity_protocol_scope_registry_scope_metadata_hidden_scope_ids_length1;
	if (_vala_string_array_contains (_tmp0_, _tmp0__length1, scope_id)) {
		GError* _tmp1_;
		_tmp1_ = g_error_new (UNITY_PROTOCOL_PARSE_ERROR, UNITY_PROTOCOL_PARSE_ERROR_FILE_NOT_FOUND, "Scope is disabled: %s", scope_id);
		_inner_error_ = _tmp1_;
		g_propagate_error (error, _inner_error_);
		return NULL;
	}
	_tmp2_ = g_key_file_new ();
	file = _tmp2_;
	_tmp3_ = unity_protocol_scope_registry_overrides_scope_dirs;
	if (_tmp3_) {
		gboolean _tmp4_ = FALSE;
		GKeyFile* _tmp5_;
		gchar** _tmp6_;
		gint _tmp6__length1;
		gchar* _tmp7_ = NULL;
		gboolean _tmp8_;
		_tmp5_ = file;
		_tmp6_ = unity_protocol_scope_registry_scope_directories;
		_tmp6__length1 = unity_protocol_scope_registry_scope_directories_length1;
		_tmp8_ = g_key_file_load_from_dirs (_tmp5_, scope_id, _tmp6_, &_tmp7_, G_KEY_FILE_NONE, &_inner_error_);
		_g_free0 (full_path);
		full_path = _tmp7_;
		_tmp4_ = _tmp8_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_key_file_unref0 (file);
			_g_free0 (full_path);
			return NULL;
		}
		loaded = _tmp4_;
	} else {
		gchar* path = NULL;
		gchar* _tmp9_;
		gboolean _tmp10_ = FALSE;
		GKeyFile* _tmp11_;
		const gchar* _tmp12_;
		gchar* _tmp13_ = NULL;
		gboolean _tmp14_;
		_tmp9_ = g_strdup_printf ("%s/%s", UNITY_PROTOCOL_SCOPES_DIR, scope_id);
		path = _tmp9_;
		_tmp11_ = file;
		_tmp12_ = path;
		_tmp14_ = g_key_file_load_from_data_dirs (_tmp11_, _tmp12_, &_tmp13_, G_KEY_FILE_NONE, &_inner_error_);
		_g_free0 (full_path);
		full_path = _tmp13_;
		_tmp10_ = _tmp14_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_free0 (path);
			_g_key_file_unref0 (file);
			_g_free0 (full_path);
			return NULL;
		}
		loaded = _tmp10_;
		_g_free0 (path);
	}
	_tmp15_ = loaded;
	if (!_tmp15_) {
		GError* _tmp16_;
		_tmp16_ = g_error_new (UNITY_PROTOCOL_PARSE_ERROR, UNITY_PROTOCOL_PARSE_ERROR_FILE_NOT_FOUND, "Scope not found: %s", scope_id);
		_inner_error_ = _tmp16_;
		g_propagate_error (error, _inner_error_);
		_g_key_file_unref0 (file);
		_g_free0 (full_path);
		return NULL;
	}
	_tmp17_ = file;
	_tmp18_ = unity_protocol_scope_registry_scope_metadata_for_keyfile (_tmp17_, &_inner_error_);
	data = _tmp18_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_key_file_unref0 (file);
		_g_free0 (full_path);
		return NULL;
	}
	_tmp19_ = data;
	_tmp20_ = g_strdup (scope_id);
	_g_free0 (_tmp19_->id);
	_tmp19_->id = _tmp20_;
	_tmp21_ = data;
	_tmp22_ = full_path;
	_tmp23_ = g_strdup (_tmp22_);
	_g_free0 (_tmp21_->full_path);
	_tmp21_->full_path = _tmp23_;
	result = data;
	_g_key_file_unref0 (file);
	_g_free0 (full_path);
	return result;
}


UnityProtocolScopeRegistryScopeMetadata*
unity_protocol_scope_registry_scope_metadata_for_path (const gchar* path,
                                                       GError** error)
{
	UnityProtocolScopeRegistryScopeMetadata* result = NULL;
	gboolean loaded = FALSE;
	gchar* full_path = NULL;
	GKeyFile* keyfile = NULL;
	GKeyFile* _tmp0_;
	gboolean _tmp8_;
	UnityProtocolScopeRegistryScopeMetadata* data = NULL;
	GKeyFile* _tmp10_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp11_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp12_;
	const gchar* _tmp13_;
	gchar* _tmp14_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp15_;
	const gchar* _tmp16_;
	gchar* _tmp17_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp18_;
	const gchar* _tmp19_;
	gchar** _tmp20_;
	gint _tmp20__length1;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (path != NULL, NULL);
	g_debug ("protocol-scope-discovery.vala:601: for_path: %s", path);
	loaded = TRUE;
	_tmp0_ = g_key_file_new ();
	keyfile = _tmp0_;
	if (g_path_is_absolute (path)) {
		gboolean _tmp1_ = FALSE;
		GKeyFile* _tmp2_;
		gchar* _tmp3_;
		_tmp2_ = keyfile;
		_tmp1_ = g_key_file_load_from_file (_tmp2_, path, G_KEY_FILE_NONE, &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_key_file_unref0 (keyfile);
			_g_free0 (full_path);
			return NULL;
		}
		loaded = _tmp1_;
		_tmp3_ = g_strdup (path);
		_g_free0 (full_path);
		full_path = _tmp3_;
	} else {
		gboolean _tmp4_ = FALSE;
		GKeyFile* _tmp5_;
		gchar* _tmp6_ = NULL;
		gboolean _tmp7_;
		_tmp5_ = keyfile;
		_tmp7_ = g_key_file_load_from_data_dirs (_tmp5_, path, &_tmp6_, G_KEY_FILE_NONE, &_inner_error_);
		_g_free0 (full_path);
		full_path = _tmp6_;
		_tmp4_ = _tmp7_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_key_file_unref0 (keyfile);
			_g_free0 (full_path);
			return NULL;
		}
		loaded = _tmp4_;
	}
	_tmp8_ = loaded;
	if (!_tmp8_) {
		GError* _tmp9_;
		_tmp9_ = g_error_new (UNITY_PROTOCOL_PARSE_ERROR, UNITY_PROTOCOL_PARSE_ERROR_FILE_NOT_FOUND, "File not found: %s", path);
		_inner_error_ = _tmp9_;
		g_propagate_error (error, _inner_error_);
		_g_key_file_unref0 (keyfile);
		_g_free0 (full_path);
		return NULL;
	}
	_tmp10_ = keyfile;
	_tmp11_ = unity_protocol_scope_registry_scope_metadata_for_keyfile (_tmp10_, &_inner_error_);
	data = _tmp11_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_key_file_unref0 (keyfile);
		_g_free0 (full_path);
		return NULL;
	}
	_tmp12_ = data;
	_tmp13_ = full_path;
	_tmp14_ = g_strdup (_tmp13_);
	_g_free0 (_tmp12_->full_path);
	_tmp12_->full_path = _tmp14_;
	_tmp15_ = data;
	_tmp16_ = full_path;
	_tmp17_ = unity_protocol_scope_registry_extract_scope_id (_tmp16_);
	_g_free0 (_tmp15_->id);
	_tmp15_->id = _tmp17_;
	_tmp18_ = data;
	_tmp19_ = _tmp18_->id;
	_tmp20_ = unity_protocol_scope_registry_scope_metadata_hidden_scope_ids;
	_tmp20__length1 = unity_protocol_scope_registry_scope_metadata_hidden_scope_ids_length1;
	if (_vala_string_array_contains (_tmp20_, _tmp20__length1, _tmp19_)) {
		UnityProtocolScopeRegistryScopeMetadata* _tmp21_;
		const gchar* _tmp22_;
		GError* _tmp23_;
		_tmp21_ = data;
		_tmp22_ = _tmp21_->id;
		_tmp23_ = g_error_new (UNITY_PROTOCOL_PARSE_ERROR, UNITY_PROTOCOL_PARSE_ERROR_FILE_NOT_FOUND, "Scope is disabled: %s", _tmp22_);
		_inner_error_ = _tmp23_;
		g_propagate_error (error, _inner_error_);
		_unity_protocol_scope_registry_scope_metadata_unref0 (data);
		_g_key_file_unref0 (keyfile);
		_g_free0 (full_path);
		return NULL;
	}
	result = data;
	_g_key_file_unref0 (keyfile);
	_g_free0 (full_path);
	return result;
}


UnityProtocolScopeRegistryScopeMetadata*
unity_protocol_scope_registry_scope_metadata_construct (GType object_type)
{
	UnityProtocolScopeRegistryScopeMetadata* self = NULL;
	self = (UnityProtocolScopeRegistryScopeMetadata*) g_type_create_instance (object_type);
	return self;
}


UnityProtocolScopeRegistryScopeMetadata*
unity_protocol_scope_registry_scope_metadata_new (void)
{
	return unity_protocol_scope_registry_scope_metadata_construct (UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA);
}


static void
unity_protocol_scope_registry_value_scope_metadata_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}


static void
unity_protocol_scope_registry_value_scope_metadata_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		unity_protocol_scope_registry_scope_metadata_unref (value->data[0].v_pointer);
	}
}


static void
unity_protocol_scope_registry_value_scope_metadata_copy_value (const GValue* src_value,
                                                               GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = unity_protocol_scope_registry_scope_metadata_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}


static gpointer
unity_protocol_scope_registry_value_scope_metadata_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}


static gchar*
unity_protocol_scope_registry_value_scope_metadata_collect_value (GValue* value,
                                                                  guint n_collect_values,
                                                                  GTypeCValue* collect_values,
                                                                  guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		UnityProtocolScopeRegistryScopeMetadata * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = unity_protocol_scope_registry_scope_metadata_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}


static gchar*
unity_protocol_scope_registry_value_scope_metadata_lcopy_value (const GValue* value,
                                                                guint n_collect_values,
                                                                GTypeCValue* collect_values,
                                                                guint collect_flags)
{
	UnityProtocolScopeRegistryScopeMetadata ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = unity_protocol_scope_registry_scope_metadata_ref (value->data[0].v_pointer);
	}
	return NULL;
}


GParamSpec*
unity_protocol_scope_registry_param_spec_scope_metadata (const gchar* name,
                                                         const gchar* nick,
                                                         const gchar* blurb,
                                                         GType object_type,
                                                         GParamFlags flags)
{
	UnityProtocolScopeRegistryParamSpecScopeMetadata* spec;
	g_return_val_if_fail (g_type_is_a (object_type, UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}


gpointer
unity_protocol_scope_registry_value_get_scope_metadata (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA), NULL);
	return value->data[0].v_pointer;
}


void
unity_protocol_scope_registry_value_set_scope_metadata (GValue* value,
                                                        gpointer v_object)
{
	UnityProtocolScopeRegistryScopeMetadata * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		unity_protocol_scope_registry_scope_metadata_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_scope_registry_scope_metadata_unref (old);
	}
}


void
unity_protocol_scope_registry_value_take_scope_metadata (GValue* value,
                                                         gpointer v_object)
{
	UnityProtocolScopeRegistryScopeMetadata * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_scope_registry_scope_metadata_unref (old);
	}
}


static void
unity_protocol_scope_registry_scope_metadata_class_init (UnityProtocolScopeRegistryScopeMetadataClass * klass)
{
	unity_protocol_scope_registry_scope_metadata_parent_class = g_type_class_peek_parent (klass);
	((UnityProtocolScopeRegistryScopeMetadataClass *) klass)->finalize = unity_protocol_scope_registry_scope_metadata_finalize;
	g_type_class_add_private (klass, sizeof (UnityProtocolScopeRegistryScopeMetadataPrivate));
	unity_protocol_scope_registry_scope_metadata_update_hidden_scope_ids ();
}


static void
unity_protocol_scope_registry_scope_metadata_instance_init (UnityProtocolScopeRegistryScopeMetadata * self)
{
	self->priv = UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_METADATA_GET_PRIVATE (self);
	self->ref_count = 1;
}


static void
unity_protocol_scope_registry_scope_metadata_finalize (UnityProtocolScopeRegistryScopeMetadata * obj)
{
	UnityProtocolScopeRegistryScopeMetadata * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA, UnityProtocolScopeRegistryScopeMetadata);
	g_signal_handlers_destroy (self);
	_g_free0 (self->id);
	_g_free0 (self->domain);
	_g_free0 (self->full_path);
	_g_free0 (self->name);
	_g_free0 (self->dbus_path);
	_g_free0 (self->dbus_name);
	_g_free0 (self->icon);
	_g_free0 (self->category_icon);
	_unity_protocol_meta_data_schema_info_unref0 (self->required_metadata);
	_unity_protocol_meta_data_schema_info_unref0 (self->optional_metadata);
	(self->keywords == NULL) ? NULL : (self->keywords = (_g_slist_free__g_free0_ (self->keywords), NULL));
	_g_free0 (self->type);
	_g_free0 (self->description);
	_g_free0 (self->search_hint);
	_g_free0 (self->query_binary);
	_g_free0 (self->query_pattern);
	_g_free0 (self->shortcut);
	_g_free0 (self->no_content_hint);
	_g_free0 (self->module);
	_g_free0 (self->module_type);
	self->priv->categories = (_vala_array_free (self->priv->categories, self->priv->categories_length1, (GDestroyNotify) unity_protocol_category_definition_unref), NULL);
	self->priv->filters = (_vala_array_free (self->priv->filters, self->priv->filters_length1, (GDestroyNotify) unity_protocol_filter_definition_unref), NULL);
	self->priv->subscope_ids = (_vala_array_free (self->priv->subscope_ids, self->priv->subscope_ids_length1, (GDestroyNotify) g_free), NULL);
}


GType
unity_protocol_scope_registry_scope_metadata_get_type (void)
{
	static volatile gsize unity_protocol_scope_registry_scope_metadata_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_scope_registry_scope_metadata_type_id__volatile)) {
		static const GTypeValueTable g_define_type_value_table = { unity_protocol_scope_registry_value_scope_metadata_init, unity_protocol_scope_registry_value_scope_metadata_free_value, unity_protocol_scope_registry_value_scope_metadata_copy_value, unity_protocol_scope_registry_value_scope_metadata_peek_pointer, "p", unity_protocol_scope_registry_value_scope_metadata_collect_value, "p", unity_protocol_scope_registry_value_scope_metadata_lcopy_value };
		static const GTypeInfo g_define_type_info = { sizeof (UnityProtocolScopeRegistryScopeMetadataClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_protocol_scope_registry_scope_metadata_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityProtocolScopeRegistryScopeMetadata), 0, (GInstanceInitFunc) unity_protocol_scope_registry_scope_metadata_instance_init, &g_define_type_value_table };
		static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
		GType unity_protocol_scope_registry_scope_metadata_type_id;
		unity_protocol_scope_registry_scope_metadata_type_id = g_type_register_fundamental (g_type_fundamental_next (), "UnityProtocolScopeRegistryScopeMetadata", &g_define_type_info, &g_define_type_fundamental_info, 0);
		g_once_init_leave (&unity_protocol_scope_registry_scope_metadata_type_id__volatile, unity_protocol_scope_registry_scope_metadata_type_id);
	}
	return unity_protocol_scope_registry_scope_metadata_type_id__volatile;
}


gpointer
unity_protocol_scope_registry_scope_metadata_ref (gpointer instance)
{
	UnityProtocolScopeRegistryScopeMetadata * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}


void
unity_protocol_scope_registry_scope_metadata_unref (gpointer instance)
{
	UnityProtocolScopeRegistryScopeMetadata * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_METADATA_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}


UnityProtocolScopeRegistryScopeRegistryNode*
unity_protocol_scope_registry_scope_registry_node_construct (GType object_type)
{
	UnityProtocolScopeRegistryScopeRegistryNode* self = NULL;
	self = (UnityProtocolScopeRegistryScopeRegistryNode*) g_type_create_instance (object_type);
	return self;
}


UnityProtocolScopeRegistryScopeRegistryNode*
unity_protocol_scope_registry_scope_registry_node_new (void)
{
	return unity_protocol_scope_registry_scope_registry_node_construct (UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_REGISTRY_NODE);
}


static void
unity_protocol_scope_registry_value_scope_registry_node_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}


static void
unity_protocol_scope_registry_value_scope_registry_node_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		unity_protocol_scope_registry_scope_registry_node_unref (value->data[0].v_pointer);
	}
}


static void
unity_protocol_scope_registry_value_scope_registry_node_copy_value (const GValue* src_value,
                                                                    GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = unity_protocol_scope_registry_scope_registry_node_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}


static gpointer
unity_protocol_scope_registry_value_scope_registry_node_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}


static gchar*
unity_protocol_scope_registry_value_scope_registry_node_collect_value (GValue* value,
                                                                       guint n_collect_values,
                                                                       GTypeCValue* collect_values,
                                                                       guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		UnityProtocolScopeRegistryScopeRegistryNode * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = unity_protocol_scope_registry_scope_registry_node_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}


static gchar*
unity_protocol_scope_registry_value_scope_registry_node_lcopy_value (const GValue* value,
                                                                     guint n_collect_values,
                                                                     GTypeCValue* collect_values,
                                                                     guint collect_flags)
{
	UnityProtocolScopeRegistryScopeRegistryNode ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = unity_protocol_scope_registry_scope_registry_node_ref (value->data[0].v_pointer);
	}
	return NULL;
}


GParamSpec*
unity_protocol_scope_registry_param_spec_scope_registry_node (const gchar* name,
                                                              const gchar* nick,
                                                              const gchar* blurb,
                                                              GType object_type,
                                                              GParamFlags flags)
{
	UnityProtocolScopeRegistryParamSpecScopeRegistryNode* spec;
	g_return_val_if_fail (g_type_is_a (object_type, UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_REGISTRY_NODE), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}


gpointer
unity_protocol_scope_registry_value_get_scope_registry_node (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_REGISTRY_NODE), NULL);
	return value->data[0].v_pointer;
}


void
unity_protocol_scope_registry_value_set_scope_registry_node (GValue* value,
                                                             gpointer v_object)
{
	UnityProtocolScopeRegistryScopeRegistryNode * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_REGISTRY_NODE));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_REGISTRY_NODE));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		unity_protocol_scope_registry_scope_registry_node_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_scope_registry_scope_registry_node_unref (old);
	}
}


void
unity_protocol_scope_registry_value_take_scope_registry_node (GValue* value,
                                                              gpointer v_object)
{
	UnityProtocolScopeRegistryScopeRegistryNode * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_REGISTRY_NODE));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_REGISTRY_NODE));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_scope_registry_scope_registry_node_unref (old);
	}
}


static void
unity_protocol_scope_registry_scope_registry_node_class_init (UnityProtocolScopeRegistryScopeRegistryNodeClass * klass)
{
	unity_protocol_scope_registry_scope_registry_node_parent_class = g_type_class_peek_parent (klass);
	((UnityProtocolScopeRegistryScopeRegistryNodeClass *) klass)->finalize = unity_protocol_scope_registry_scope_registry_node_finalize;
}


static void
unity_protocol_scope_registry_scope_registry_node_instance_init (UnityProtocolScopeRegistryScopeRegistryNode * self)
{
	self->ref_count = 1;
}


static void
unity_protocol_scope_registry_scope_registry_node_finalize (UnityProtocolScopeRegistryScopeRegistryNode * obj)
{
	UnityProtocolScopeRegistryScopeRegistryNode * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_REGISTRY_NODE, UnityProtocolScopeRegistryScopeRegistryNode);
	g_signal_handlers_destroy (self);
	_unity_protocol_scope_registry_scope_metadata_unref0 (self->scope_info);
	(self->sub_scopes == NULL) ? NULL : (self->sub_scopes = (_g_slist_free__unity_protocol_scope_registry_scope_metadata_unref0_ (self->sub_scopes), NULL));
}


GType
unity_protocol_scope_registry_scope_registry_node_get_type (void)
{
	static volatile gsize unity_protocol_scope_registry_scope_registry_node_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_scope_registry_scope_registry_node_type_id__volatile)) {
		static const GTypeValueTable g_define_type_value_table = { unity_protocol_scope_registry_value_scope_registry_node_init, unity_protocol_scope_registry_value_scope_registry_node_free_value, unity_protocol_scope_registry_value_scope_registry_node_copy_value, unity_protocol_scope_registry_value_scope_registry_node_peek_pointer, "p", unity_protocol_scope_registry_value_scope_registry_node_collect_value, "p", unity_protocol_scope_registry_value_scope_registry_node_lcopy_value };
		static const GTypeInfo g_define_type_info = { sizeof (UnityProtocolScopeRegistryScopeRegistryNodeClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_protocol_scope_registry_scope_registry_node_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityProtocolScopeRegistryScopeRegistryNode), 0, (GInstanceInitFunc) unity_protocol_scope_registry_scope_registry_node_instance_init, &g_define_type_value_table };
		static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
		GType unity_protocol_scope_registry_scope_registry_node_type_id;
		unity_protocol_scope_registry_scope_registry_node_type_id = g_type_register_fundamental (g_type_fundamental_next (), "UnityProtocolScopeRegistryScopeRegistryNode", &g_define_type_info, &g_define_type_fundamental_info, 0);
		g_once_init_leave (&unity_protocol_scope_registry_scope_registry_node_type_id__volatile, unity_protocol_scope_registry_scope_registry_node_type_id);
	}
	return unity_protocol_scope_registry_scope_registry_node_type_id__volatile;
}


gpointer
unity_protocol_scope_registry_scope_registry_node_ref (gpointer instance)
{
	UnityProtocolScopeRegistryScopeRegistryNode * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}


void
unity_protocol_scope_registry_scope_registry_node_unref (gpointer instance)
{
	UnityProtocolScopeRegistryScopeRegistryNode * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_REGISTRY_NODE_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}


static void
unity_protocol_value_scope_registry_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}


static void
unity_protocol_value_scope_registry_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		unity_protocol_scope_registry_unref (value->data[0].v_pointer);
	}
}


static void
unity_protocol_value_scope_registry_copy_value (const GValue* src_value,
                                                GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = unity_protocol_scope_registry_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}


static gpointer
unity_protocol_value_scope_registry_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}


static gchar*
unity_protocol_value_scope_registry_collect_value (GValue* value,
                                                   guint n_collect_values,
                                                   GTypeCValue* collect_values,
                                                   guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		UnityProtocolScopeRegistry * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = unity_protocol_scope_registry_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}


static gchar*
unity_protocol_value_scope_registry_lcopy_value (const GValue* value,
                                                 guint n_collect_values,
                                                 GTypeCValue* collect_values,
                                                 guint collect_flags)
{
	UnityProtocolScopeRegistry ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = unity_protocol_scope_registry_ref (value->data[0].v_pointer);
	}
	return NULL;
}


GParamSpec*
unity_protocol_param_spec_scope_registry (const gchar* name,
                                          const gchar* nick,
                                          const gchar* blurb,
                                          GType object_type,
                                          GParamFlags flags)
{
	UnityProtocolParamSpecScopeRegistry* spec;
	g_return_val_if_fail (g_type_is_a (object_type, UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}


gpointer
unity_protocol_value_get_scope_registry (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY), NULL);
	return value->data[0].v_pointer;
}


void
unity_protocol_value_set_scope_registry (GValue* value,
                                         gpointer v_object)
{
	UnityProtocolScopeRegistry * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		unity_protocol_scope_registry_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_scope_registry_unref (old);
	}
}


void
unity_protocol_value_take_scope_registry (GValue* value,
                                          gpointer v_object)
{
	UnityProtocolScopeRegistry * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_scope_registry_unref (old);
	}
}


static void
unity_protocol_scope_registry_class_init (UnityProtocolScopeRegistryClass * klass)
{
	unity_protocol_scope_registry_parent_class = g_type_class_peek_parent (klass);
	((UnityProtocolScopeRegistryClass *) klass)->finalize = unity_protocol_scope_registry_finalize;
	g_type_class_add_private (klass, sizeof (UnityProtocolScopeRegistryPrivate));
	unity_protocol_scope_registry_init_scope_directories ();
}


static void
unity_protocol_scope_registry_instance_init (UnityProtocolScopeRegistry * self)
{
	self->priv = UNITY_PROTOCOL_SCOPE_REGISTRY_GET_PRIVATE (self);
	self->priv->scopes_ = NULL;
	self->ref_count = 1;
}


static void
unity_protocol_scope_registry_finalize (UnityProtocolScopeRegistry * obj)
{
	UnityProtocolScopeRegistry * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY, UnityProtocolScopeRegistry);
	g_signal_handlers_destroy (self);
	(self->priv->scopes_ == NULL) ? NULL : (self->priv->scopes_ = (_g_slist_free__unity_protocol_scope_registry_scope_registry_node_unref0_ (self->priv->scopes_), NULL));
}


GType
unity_protocol_scope_registry_get_type (void)
{
	static volatile gsize unity_protocol_scope_registry_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_scope_registry_type_id__volatile)) {
		static const GTypeValueTable g_define_type_value_table = { unity_protocol_value_scope_registry_init, unity_protocol_value_scope_registry_free_value, unity_protocol_value_scope_registry_copy_value, unity_protocol_value_scope_registry_peek_pointer, "p", unity_protocol_value_scope_registry_collect_value, "p", unity_protocol_value_scope_registry_lcopy_value };
		static const GTypeInfo g_define_type_info = { sizeof (UnityProtocolScopeRegistryClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_protocol_scope_registry_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityProtocolScopeRegistry), 0, (GInstanceInitFunc) unity_protocol_scope_registry_instance_init, &g_define_type_value_table };
		static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
		GType unity_protocol_scope_registry_type_id;
		unity_protocol_scope_registry_type_id = g_type_register_fundamental (g_type_fundamental_next (), "UnityProtocolScopeRegistry", &g_define_type_info, &g_define_type_fundamental_info, 0);
		g_once_init_leave (&unity_protocol_scope_registry_type_id__volatile, unity_protocol_scope_registry_type_id);
	}
	return unity_protocol_scope_registry_type_id__volatile;
}


gpointer
unity_protocol_scope_registry_ref (gpointer instance)
{
	UnityProtocolScopeRegistry * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}


void
unity_protocol_scope_registry_unref (gpointer instance)
{
	UnityProtocolScopeRegistry * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		UNITY_PROTOCOL_SCOPE_REGISTRY_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}


void
unity_protocol_scope_group_scope_info_copy (const UnityProtocolScopeGroupScopeInfo* self,
                                            UnityProtocolScopeGroupScopeInfo* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	const gchar* _tmp6_;
	gchar* _tmp7_;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	_tmp0_ = (*self).scope_id;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).scope_id);
	(*dest).scope_id = _tmp1_;
	_tmp2_ = (*self).dbus_name;
	_tmp3_ = g_strdup (_tmp2_);
	_g_free0 ((*dest).dbus_name);
	(*dest).dbus_name = _tmp3_;
	_tmp4_ = (*self).dbus_path;
	_tmp5_ = g_strdup (_tmp4_);
	_g_free0 ((*dest).dbus_path);
	(*dest).dbus_path = _tmp5_;
	_tmp6_ = (*self).module;
	_tmp7_ = g_strdup (_tmp6_);
	_g_free0 ((*dest).module);
	(*dest).module = _tmp7_;
	_tmp8_ = (*self).module_type;
	_tmp9_ = g_strdup (_tmp8_);
	_g_free0 ((*dest).module_type);
	(*dest).module_type = _tmp9_;
}


void
unity_protocol_scope_group_scope_info_destroy (UnityProtocolScopeGroupScopeInfo* self)
{
	_g_free0 ((*self).scope_id);
	_g_free0 ((*self).dbus_name);
	_g_free0 ((*self).dbus_path);
	_g_free0 ((*self).module);
	_g_free0 ((*self).module_type);
}


UnityProtocolScopeGroupScopeInfo*
unity_protocol_scope_group_scope_info_dup (const UnityProtocolScopeGroupScopeInfo* self)
{
	UnityProtocolScopeGroupScopeInfo* dup;
	dup = g_new0 (UnityProtocolScopeGroupScopeInfo, 1);
	unity_protocol_scope_group_scope_info_copy (self, dup);
	return dup;
}


void
unity_protocol_scope_group_scope_info_free (UnityProtocolScopeGroupScopeInfo* self)
{
	unity_protocol_scope_group_scope_info_destroy (self);
	g_free (self);
}


GType
unity_protocol_scope_group_scope_info_get_type (void)
{
	static volatile gsize unity_protocol_scope_group_scope_info_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_scope_group_scope_info_type_id__volatile)) {
		GType unity_protocol_scope_group_scope_info_type_id;
		unity_protocol_scope_group_scope_info_type_id = g_boxed_type_register_static ("UnityProtocolScopeGroupScopeInfo", (GBoxedCopyFunc) unity_protocol_scope_group_scope_info_dup, (GBoxedFreeFunc) unity_protocol_scope_group_scope_info_free);
		g_once_init_leave (&unity_protocol_scope_group_scope_info_type_id__volatile, unity_protocol_scope_group_scope_info_type_id);
	}
	return unity_protocol_scope_group_scope_info_type_id__volatile;
}


static void
_unity_protocol_scope_group_scope_info_free0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (unity_protocol_scope_group_scope_info_free (var), NULL));
}


static inline void
_g_list_free__unity_protocol_scope_group_scope_info_free0_ (GList* self)
{
	g_list_free_full (self, (GDestroyNotify) _unity_protocol_scope_group_scope_info_free0_);
}


static const gchar*
string_to_string (const gchar* self)
{
	const gchar* result = NULL;
	g_return_val_if_fail (self != NULL, NULL);
	result = self;
	return result;
}


static gpointer
_unity_protocol_scope_group_scope_info_dup0 (gpointer self)
{
	return self ? unity_protocol_scope_group_scope_info_dup (self) : NULL;
}


UnityProtocolScopeGroupConfig*
unity_protocol_scope_group_config_construct (GType object_type,
                                             const gchar* file_name,
                                             GError** error)
{
	UnityProtocolScopeGroupConfig* self = NULL;
	GKeyFile* file = NULL;
	GKeyFile* _tmp0_;
	gboolean _tmp1_ = FALSE;
	GKeyFile* _tmp2_;
	gboolean _tmp8_ = FALSE;
	GKeyFile* _tmp9_;
	gchar* _tmp12_ = NULL;
	GKeyFile* _tmp13_;
	gchar* _tmp14_;
	gchar** _tmp15_;
	gchar** _tmp16_;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (file_name != NULL, NULL);
	self = (UnityProtocolScopeGroupConfig*) g_type_create_instance (object_type);
	_tmp0_ = g_key_file_new ();
	file = _tmp0_;
	_tmp2_ = file;
	_tmp1_ = g_key_file_load_from_file (_tmp2_, file_name, G_KEY_FILE_NONE, &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_key_file_unref0 (file);
		_unity_protocol_scope_group_config_unref0 (self);
		return NULL;
	}
	if (!_tmp1_) {
		const gchar* _tmp3_;
		gchar* _tmp4_;
		gchar* _tmp5_;
		GError* _tmp6_;
		GError* _tmp7_;
		_tmp3_ = string_to_string (file_name);
		_tmp4_ = g_strconcat ("Scope group not found: ", _tmp3_, NULL);
		_tmp5_ = _tmp4_;
		_tmp6_ = g_error_new_literal (G_IO_ERROR, G_IO_ERROR_NOT_FOUND, _tmp5_);
		_tmp7_ = _tmp6_;
		_g_free0 (_tmp5_);
		_inner_error_ = _tmp7_;
		g_propagate_error (error, _inner_error_);
		_g_key_file_unref0 (file);
		_unity_protocol_scope_group_config_unref0 (self);
		return NULL;
	}
	_tmp9_ = file;
	_tmp8_ = g_key_file_has_key (_tmp9_, UNITY_PROTOCOL_SCOPE_GROUP_CONFIG_SCOPE_GROUP_GROUP, "Timeout", &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_key_file_unref0 (file);
		_unity_protocol_scope_group_config_unref0 (self);
		return NULL;
	}
	if (_tmp8_) {
		gint _tmp10_ = 0;
		GKeyFile* _tmp11_;
		_tmp11_ = file;
		_tmp10_ = g_key_file_get_integer (_tmp11_, UNITY_PROTOCOL_SCOPE_GROUP_CONFIG_SCOPE_GROUP_GROUP, "Timeout", &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_key_file_unref0 (file);
			_unity_protocol_scope_group_config_unref0 (self);
			return NULL;
		}
		self->timeout = _tmp10_;
	} else {
		self->timeout = 0;
	}
	(self->scopes == NULL) ? NULL : (self->scopes = (_g_list_free__unity_protocol_scope_group_scope_info_free0_ (self->scopes), NULL));
	self->scopes = NULL;
	_tmp13_ = file;
	_tmp14_ = g_key_file_get_string (_tmp13_, UNITY_PROTOCOL_SCOPE_GROUP_CONFIG_SCOPE_GROUP_GROUP, "Scopes", &_inner_error_);
	_tmp12_ = _tmp14_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_key_file_unref0 (file);
		_unity_protocol_scope_group_config_unref0 (self);
		return NULL;
	}
	_tmp16_ = _tmp15_ = g_strsplit (_tmp12_, ";", 0);
	{
		gchar** scope_id_collection = NULL;
		gint scope_id_collection_length1 = 0;
		gint _scope_id_collection_size_ = 0;
		gint scope_id_it = 0;
		scope_id_collection = _tmp16_;
		scope_id_collection_length1 = _vala_array_length (_tmp15_);
		for (scope_id_it = 0; scope_id_it < _vala_array_length (_tmp15_); scope_id_it = scope_id_it + 1) {
			gchar* _tmp17_;
			gchar* scope_id = NULL;
			_tmp17_ = g_strdup (scope_id_collection[scope_id_it]);
			scope_id = _tmp17_;
			{
				UnityProtocolScopeRegistryScopeMetadata* metadata = NULL;
				const gchar* _tmp18_;
				UnityProtocolScopeRegistryScopeMetadata* _tmp19_;
				const gchar* _tmp20_;
				gchar* _tmp21_;
				UnityProtocolScopeRegistryScopeMetadata* _tmp22_;
				const gchar* _tmp23_;
				gchar* _tmp24_;
				UnityProtocolScopeRegistryScopeMetadata* _tmp25_;
				const gchar* _tmp26_;
				gchar* _tmp27_;
				UnityProtocolScopeRegistryScopeMetadata* _tmp28_;
				const gchar* _tmp29_;
				gchar* _tmp30_;
				UnityProtocolScopeRegistryScopeMetadata* _tmp31_;
				const gchar* _tmp32_;
				gchar* _tmp33_;
				UnityProtocolScopeGroupScopeInfo _tmp34_ = {0};
				UnityProtocolScopeGroupScopeInfo _tmp35_;
				UnityProtocolScopeGroupScopeInfo* _tmp36_;
				_tmp18_ = scope_id;
				_tmp19_ = unity_protocol_scope_registry_scope_metadata_for_id (_tmp18_, &_inner_error_);
				metadata = _tmp19_;
				if (G_UNLIKELY (_inner_error_ != NULL)) {
					g_propagate_error (error, _inner_error_);
					_g_free0 (scope_id);
					scope_id_collection = (_vala_array_free (scope_id_collection, scope_id_collection_length1, (GDestroyNotify) g_free), NULL);
					_g_free0 (_tmp12_);
					_g_key_file_unref0 (file);
					_unity_protocol_scope_group_config_unref0 (self);
					return NULL;
				}
				_tmp20_ = scope_id;
				_tmp21_ = g_strdup (_tmp20_);
				_tmp22_ = metadata;
				_tmp23_ = _tmp22_->dbus_name;
				_tmp24_ = g_strdup (_tmp23_);
				_tmp25_ = metadata;
				_tmp26_ = _tmp25_->dbus_path;
				_tmp27_ = g_strdup (_tmp26_);
				_tmp28_ = metadata;
				_tmp29_ = _tmp28_->module;
				_tmp30_ = g_strdup (_tmp29_);
				_tmp31_ = metadata;
				_tmp32_ = _tmp31_->module_type;
				_tmp33_ = g_strdup (_tmp32_);
				_g_free0 (_tmp34_.scope_id);
				_tmp34_.scope_id = _tmp21_;
				_g_free0 (_tmp34_.dbus_name);
				_tmp34_.dbus_name = _tmp24_;
				_g_free0 (_tmp34_.dbus_path);
				_tmp34_.dbus_path = _tmp27_;
				_g_free0 (_tmp34_.module);
				_tmp34_.module = _tmp30_;
				_g_free0 (_tmp34_.module_type);
				_tmp34_.module_type = _tmp33_;
				_tmp35_ = _tmp34_;
				_tmp36_ = _unity_protocol_scope_group_scope_info_dup0 (&_tmp35_);
				self->scopes = g_list_append (self->scopes, _tmp36_);
				unity_protocol_scope_group_scope_info_destroy (&_tmp35_);
				_unity_protocol_scope_registry_scope_metadata_unref0 (metadata);
				_g_free0 (scope_id);
			}
		}
		scope_id_collection = (_vala_array_free (scope_id_collection, scope_id_collection_length1, (GDestroyNotify) g_free), NULL);
	}
	_g_free0 (_tmp12_);
	_g_key_file_unref0 (file);
	return self;
}


UnityProtocolScopeGroupConfig*
unity_protocol_scope_group_config_new (const gchar* file_name,
                                       GError** error)
{
	return unity_protocol_scope_group_config_construct (UNITY_PROTOCOL_TYPE_SCOPE_GROUP_CONFIG, file_name, error);
}


static void
unity_protocol_value_scope_group_config_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}


static void
unity_protocol_value_scope_group_config_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		unity_protocol_scope_group_config_unref (value->data[0].v_pointer);
	}
}


static void
unity_protocol_value_scope_group_config_copy_value (const GValue* src_value,
                                                    GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = unity_protocol_scope_group_config_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}


static gpointer
unity_protocol_value_scope_group_config_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}


static gchar*
unity_protocol_value_scope_group_config_collect_value (GValue* value,
                                                       guint n_collect_values,
                                                       GTypeCValue* collect_values,
                                                       guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		UnityProtocolScopeGroupConfig * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = unity_protocol_scope_group_config_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}


static gchar*
unity_protocol_value_scope_group_config_lcopy_value (const GValue* value,
                                                     guint n_collect_values,
                                                     GTypeCValue* collect_values,
                                                     guint collect_flags)
{
	UnityProtocolScopeGroupConfig ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = unity_protocol_scope_group_config_ref (value->data[0].v_pointer);
	}
	return NULL;
}


GParamSpec*
unity_protocol_param_spec_scope_group_config (const gchar* name,
                                              const gchar* nick,
                                              const gchar* blurb,
                                              GType object_type,
                                              GParamFlags flags)
{
	UnityProtocolParamSpecScopeGroupConfig* spec;
	g_return_val_if_fail (g_type_is_a (object_type, UNITY_PROTOCOL_TYPE_SCOPE_GROUP_CONFIG), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}


gpointer
unity_protocol_value_get_scope_group_config (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_SCOPE_GROUP_CONFIG), NULL);
	return value->data[0].v_pointer;
}


void
unity_protocol_value_set_scope_group_config (GValue* value,
                                             gpointer v_object)
{
	UnityProtocolScopeGroupConfig * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_SCOPE_GROUP_CONFIG));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_TYPE_SCOPE_GROUP_CONFIG));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		unity_protocol_scope_group_config_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_scope_group_config_unref (old);
	}
}


void
unity_protocol_value_take_scope_group_config (GValue* value,
                                              gpointer v_object)
{
	UnityProtocolScopeGroupConfig * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_TYPE_SCOPE_GROUP_CONFIG));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_TYPE_SCOPE_GROUP_CONFIG));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_scope_group_config_unref (old);
	}
}


static void
unity_protocol_scope_group_config_class_init (UnityProtocolScopeGroupConfigClass * klass)
{
	unity_protocol_scope_group_config_parent_class = g_type_class_peek_parent (klass);
	((UnityProtocolScopeGroupConfigClass *) klass)->finalize = unity_protocol_scope_group_config_finalize;
}


static void
unity_protocol_scope_group_config_instance_init (UnityProtocolScopeGroupConfig * self)
{
	self->ref_count = 1;
}


static void
unity_protocol_scope_group_config_finalize (UnityProtocolScopeGroupConfig * obj)
{
	UnityProtocolScopeGroupConfig * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_PROTOCOL_TYPE_SCOPE_GROUP_CONFIG, UnityProtocolScopeGroupConfig);
	g_signal_handlers_destroy (self);
	(self->scopes == NULL) ? NULL : (self->scopes = (_g_list_free__unity_protocol_scope_group_scope_info_free0_ (self->scopes), NULL));
}


GType
unity_protocol_scope_group_config_get_type (void)
{
	static volatile gsize unity_protocol_scope_group_config_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_scope_group_config_type_id__volatile)) {
		static const GTypeValueTable g_define_type_value_table = { unity_protocol_value_scope_group_config_init, unity_protocol_value_scope_group_config_free_value, unity_protocol_value_scope_group_config_copy_value, unity_protocol_value_scope_group_config_peek_pointer, "p", unity_protocol_value_scope_group_config_collect_value, "p", unity_protocol_value_scope_group_config_lcopy_value };
		static const GTypeInfo g_define_type_info = { sizeof (UnityProtocolScopeGroupConfigClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_protocol_scope_group_config_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityProtocolScopeGroupConfig), 0, (GInstanceInitFunc) unity_protocol_scope_group_config_instance_init, &g_define_type_value_table };
		static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
		GType unity_protocol_scope_group_config_type_id;
		unity_protocol_scope_group_config_type_id = g_type_register_fundamental (g_type_fundamental_next (), "UnityProtocolScopeGroupConfig", &g_define_type_info, &g_define_type_fundamental_info, 0);
		g_once_init_leave (&unity_protocol_scope_group_config_type_id__volatile, unity_protocol_scope_group_config_type_id);
	}
	return unity_protocol_scope_group_config_type_id__volatile;
}


gpointer
unity_protocol_scope_group_config_ref (gpointer instance)
{
	UnityProtocolScopeGroupConfig * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}


void
unity_protocol_scope_group_config_unref (gpointer instance)
{
	UnityProtocolScopeGroupConfig * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		UNITY_PROTOCOL_SCOPE_GROUP_CONFIG_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



