/* MoveButton.c generated by valac 0.40.11, the Vala compiler
 * generated from MoveButton.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <glib/gi18n-lib.h>


#define WIDGETS_TYPE_MOVE_BUTTON (widgets_move_button_get_type ())
#define WIDGETS_MOVE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_MOVE_BUTTON, WidgetsMoveButton))
#define WIDGETS_MOVE_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_MOVE_BUTTON, WidgetsMoveButtonClass))
#define WIDGETS_IS_MOVE_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_MOVE_BUTTON))
#define WIDGETS_IS_MOVE_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_MOVE_BUTTON))
#define WIDGETS_MOVE_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_MOVE_BUTTON, WidgetsMoveButtonClass))

typedef struct _WidgetsMoveButton WidgetsMoveButton;
typedef struct _WidgetsMoveButtonClass WidgetsMoveButtonClass;
typedef struct _WidgetsMoveButtonPrivate WidgetsMoveButtonPrivate;

#define WIDGETS_POPOVERS_TYPE_MOVE_POPOVER (widgets_popovers_move_popover_get_type ())
#define WIDGETS_POPOVERS_MOVE_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_POPOVERS_TYPE_MOVE_POPOVER, WidgetsPopoversMovePopover))
#define WIDGETS_POPOVERS_MOVE_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_POPOVERS_TYPE_MOVE_POPOVER, WidgetsPopoversMovePopoverClass))
#define WIDGETS_POPOVERS_IS_MOVE_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_POPOVERS_TYPE_MOVE_POPOVER))
#define WIDGETS_POPOVERS_IS_MOVE_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_POPOVERS_TYPE_MOVE_POPOVER))
#define WIDGETS_POPOVERS_MOVE_POPOVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_POPOVERS_TYPE_MOVE_POPOVER, WidgetsPopoversMovePopoverClass))

typedef struct _WidgetsPopoversMovePopover WidgetsPopoversMovePopover;
typedef struct _WidgetsPopoversMovePopoverClass WidgetsPopoversMovePopoverClass;
enum  {
	WIDGETS_MOVE_BUTTON_0_PROPERTY,
	WIDGETS_MOVE_BUTTON_NUM_PROPERTIES
};
static GParamSpec* widgets_move_button_properties[WIDGETS_MOVE_BUTTON_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;
enum  {
	WIDGETS_MOVE_BUTTON_ON_SELECTED_PROJECT_SIGNAL,
	WIDGETS_MOVE_BUTTON_NUM_SIGNALS
};
static guint widgets_move_button_signals[WIDGETS_MOVE_BUTTON_NUM_SIGNALS] = {0};

struct _WidgetsMoveButton {
	GtkToggleButton parent_instance;
	WidgetsMoveButtonPrivate * priv;
};

struct _WidgetsMoveButtonClass {
	GtkToggleButtonClass parent_class;
};

struct _WidgetsMoveButtonPrivate {
	WidgetsPopoversMovePopover* move_popover;
};


static gpointer widgets_move_button_parent_class = NULL;

GType widgets_move_button_get_type (void) G_GNUC_CONST;
GType widgets_popovers_move_popover_get_type (void) G_GNUC_CONST;
#define WIDGETS_MOVE_BUTTON_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_MOVE_BUTTON, WidgetsMoveButtonPrivate))
WidgetsMoveButton* widgets_move_button_new (void);
WidgetsMoveButton* widgets_move_button_construct (GType object_type);
gpointer objects_project_ref (gpointer instance);
void objects_project_unref (gpointer instance);
GParamSpec* objects_param_spec_project (const gchar* name,
                                        const gchar* nick,
                                        const gchar* blurb,
                                        GType object_type,
                                        GParamFlags flags);
void objects_value_set_project (GValue* value,
                                gpointer v_object);
void objects_value_take_project (GValue* value,
                                 gpointer v_object);
gpointer objects_value_get_project (const GValue* value);
GType objects_project_get_type (void) G_GNUC_CONST;
static void g_cclosure_user_marshal_VOID__BOOLEAN_OBJECTS_PROJECT (GClosure * closure,
                                                            GValue * return_value,
                                                            guint n_param_values,
                                                            const GValue * param_values,
                                                            gpointer invocation_hint,
                                                            gpointer marshal_data);
static GObject * widgets_move_button_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties);
WidgetsPopoversMovePopover* widgets_popovers_move_popover_new (GtkWidget* relative);
WidgetsPopoversMovePopover* widgets_popovers_move_popover_construct (GType object_type,
                                                                     GtkWidget* relative);
static void _widgets_move_button___lambda63_ (WidgetsMoveButton* self);
void widgets_popovers_move_popover_update_project_list (WidgetsPopoversMovePopover* self);
static void __widgets_move_button___lambda63__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                                  gpointer self);
static void _widgets_move_button___lambda64_ (WidgetsMoveButton* self);
static void __widgets_move_button___lambda64__gtk_popover_closed (GtkPopover* _sender,
                                                           gpointer self);
static void _widgets_move_button___lambda65_ (WidgetsMoveButton* self,
                                       gboolean is_inbox,
                                       ObjectsProject* project);
static void __widgets_move_button___lambda65__widgets_popovers_move_popover_on_selected_project (WidgetsPopoversMovePopover* _sender,
                                                                                          gboolean is_inbox,
                                                                                          ObjectsProject* project,
                                                                                          gpointer self);
static void widgets_move_button_finalize (GObject * obj);


WidgetsMoveButton*
widgets_move_button_construct (GType object_type)
{
	WidgetsMoveButton * self = NULL;
#line 27 "/run/build/planner/src/Widgets/MoveButton.vala"
	self = (WidgetsMoveButton*) g_object_new (object_type, "valign", GTK_ALIGN_CENTER, NULL);
#line 26 "/run/build/planner/src/Widgets/MoveButton.vala"
	return self;
#line 146 "MoveButton.c"
}


WidgetsMoveButton*
widgets_move_button_new (void)
{
#line 26 "/run/build/planner/src/Widgets/MoveButton.vala"
	return widgets_move_button_construct (WIDGETS_TYPE_MOVE_BUTTON);
#line 155 "MoveButton.c"
}


static void
g_cclosure_user_marshal_VOID__BOOLEAN_OBJECTS_PROJECT (GClosure * closure,
                                                       GValue * return_value,
                                                       guint n_param_values,
                                                       const GValue * param_values,
                                                       gpointer invocation_hint,
                                                       gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__BOOLEAN_OBJECTS_PROJECT) (gpointer data1, gboolean arg_1, gpointer arg_2, gpointer data2);
	register GMarshalFunc_VOID__BOOLEAN_OBJECTS_PROJECT callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
	g_return_if_fail (n_param_values == 3);
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
		data1 = closure->data;
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
		data2 = param_values->data[0].v_pointer;
#line 181 "MoveButton.c"
	} else {
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
		data1 = param_values->data[0].v_pointer;
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
		data2 = closure->data;
#line 187 "MoveButton.c"
	}
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
	callback = (GMarshalFunc_VOID__BOOLEAN_OBJECTS_PROJECT) (marshal_data ? marshal_data : cc->callback);
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
	callback (data1, g_value_get_boolean (param_values + 1), objects_value_get_project (param_values + 2), data2);
#line 193 "MoveButton.c"
}


static void
_widgets_move_button___lambda63_ (WidgetsMoveButton* self)
{
	gboolean _tmp0_;
	gboolean _tmp1_;
#line 48 "/run/build/planner/src/Widgets/MoveButton.vala"
	_tmp0_ = gtk_toggle_button_get_active ((GtkToggleButton*) self);
#line 48 "/run/build/planner/src/Widgets/MoveButton.vala"
	_tmp1_ = _tmp0_;
#line 48 "/run/build/planner/src/Widgets/MoveButton.vala"
	if (_tmp1_) {
#line 208 "MoveButton.c"
		WidgetsPopoversMovePopover* _tmp2_;
		WidgetsPopoversMovePopover* _tmp3_;
#line 49 "/run/build/planner/src/Widgets/MoveButton.vala"
		_tmp2_ = self->priv->move_popover;
#line 49 "/run/build/planner/src/Widgets/MoveButton.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp2_);
#line 50 "/run/build/planner/src/Widgets/MoveButton.vala"
		_tmp3_ = self->priv->move_popover;
#line 50 "/run/build/planner/src/Widgets/MoveButton.vala"
		widgets_popovers_move_popover_update_project_list (_tmp3_);
#line 219 "MoveButton.c"
	}
}


static void
__widgets_move_button___lambda63__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                             gpointer self)
{
#line 47 "/run/build/planner/src/Widgets/MoveButton.vala"
	_widgets_move_button___lambda63_ ((WidgetsMoveButton*) self);
#line 230 "MoveButton.c"
}


static void
_widgets_move_button___lambda64_ (WidgetsMoveButton* self)
{
#line 55 "/run/build/planner/src/Widgets/MoveButton.vala"
	gtk_toggle_button_set_active ((GtkToggleButton*) self, FALSE);
#line 239 "MoveButton.c"
}


static void
__widgets_move_button___lambda64__gtk_popover_closed (GtkPopover* _sender,
                                                      gpointer self)
{
#line 54 "/run/build/planner/src/Widgets/MoveButton.vala"
	_widgets_move_button___lambda64_ ((WidgetsMoveButton*) self);
#line 249 "MoveButton.c"
}


static void
_widgets_move_button___lambda65_ (WidgetsMoveButton* self,
                                  gboolean is_inbox,
                                  ObjectsProject* project)
{
#line 58 "/run/build/planner/src/Widgets/MoveButton.vala"
	g_return_if_fail (project != NULL);
#line 59 "/run/build/planner/src/Widgets/MoveButton.vala"
	g_signal_emit (self, widgets_move_button_signals[WIDGETS_MOVE_BUTTON_ON_SELECTED_PROJECT_SIGNAL], 0, is_inbox, project);
#line 262 "MoveButton.c"
}


static void
__widgets_move_button___lambda65__widgets_popovers_move_popover_on_selected_project (WidgetsPopoversMovePopover* _sender,
                                                                                     gboolean is_inbox,
                                                                                     ObjectsProject* project,
                                                                                     gpointer self)
{
#line 58 "/run/build/planner/src/Widgets/MoveButton.vala"
	_widgets_move_button___lambda65_ ((WidgetsMoveButton*) self, is_inbox, project);
#line 274 "MoveButton.c"
}


static GObject *
widgets_move_button_constructor (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsMoveButton * self;
	GtkStyleContext* _tmp0_;
	GtkLabel* move_label = NULL;
	GtkLabel* _tmp1_;
	GtkImage* move_icon = NULL;
	GtkImage* _tmp2_;
	GtkImage* _tmp3_;
	WidgetsPopoversMovePopover* _tmp4_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp5_;
	GtkBox* _tmp6_;
	GtkLabel* _tmp7_;
	GtkBox* _tmp8_;
	GtkImage* _tmp9_;
	GtkBox* _tmp10_;
	WidgetsPopoversMovePopover* _tmp11_;
	WidgetsPopoversMovePopover* _tmp12_;
#line 32 "/run/build/planner/src/Widgets/MoveButton.vala"
	parent_class = G_OBJECT_CLASS (widgets_move_button_parent_class);
#line 32 "/run/build/planner/src/Widgets/MoveButton.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 32 "/run/build/planner/src/Widgets/MoveButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_MOVE_BUTTON, WidgetsMoveButton);
#line 33 "/run/build/planner/src/Widgets/MoveButton.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 33 "/run/build/planner/src/Widgets/MoveButton.vala"
	gtk_style_context_add_class (_tmp0_, GTK_STYLE_CLASS_FLAT);
#line 35 "/run/build/planner/src/Widgets/MoveButton.vala"
	_tmp1_ = (GtkLabel*) gtk_label_new (_ ("Move"));
#line 35 "/run/build/planner/src/Widgets/MoveButton.vala"
	g_object_ref_sink (_tmp1_);
#line 35 "/run/build/planner/src/Widgets/MoveButton.vala"
	move_label = _tmp1_;
#line 36 "/run/build/planner/src/Widgets/MoveButton.vala"
	_tmp2_ = (GtkImage*) gtk_image_new_from_icon_name ("pan-end-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 36 "/run/build/planner/src/Widgets/MoveButton.vala"
	g_object_ref_sink (_tmp2_);
#line 36 "/run/build/planner/src/Widgets/MoveButton.vala"
	move_icon = _tmp2_;
#line 37 "/run/build/planner/src/Widgets/MoveButton.vala"
	_tmp3_ = move_icon;
#line 37 "/run/build/planner/src/Widgets/MoveButton.vala"
	g_object_set ((GtkMisc*) _tmp3_, "yalign", 0.9f, NULL);
#line 39 "/run/build/planner/src/Widgets/MoveButton.vala"
	_tmp4_ = widgets_popovers_move_popover_new ((GtkWidget*) self);
#line 39 "/run/build/planner/src/Widgets/MoveButton.vala"
	g_object_ref_sink (_tmp4_);
#line 39 "/run/build/planner/src/Widgets/MoveButton.vala"
	_g_object_unref0 (self->priv->move_popover);
#line 39 "/run/build/planner/src/Widgets/MoveButton.vala"
	self->priv->move_popover = _tmp4_;
#line 41 "/run/build/planner/src/Widgets/MoveButton.vala"
	_tmp5_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 41 "/run/build/planner/src/Widgets/MoveButton.vala"
	g_object_ref_sink (_tmp5_);
#line 41 "/run/build/planner/src/Widgets/MoveButton.vala"
	main_box = _tmp5_;
#line 42 "/run/build/planner/src/Widgets/MoveButton.vala"
	_tmp6_ = main_box;
#line 42 "/run/build/planner/src/Widgets/MoveButton.vala"
	_tmp7_ = move_label;
#line 42 "/run/build/planner/src/Widgets/MoveButton.vala"
	gtk_box_pack_start (_tmp6_, (GtkWidget*) _tmp7_, FALSE, FALSE, (guint) 0);
#line 43 "/run/build/planner/src/Widgets/MoveButton.vala"
	_tmp8_ = main_box;
#line 43 "/run/build/planner/src/Widgets/MoveButton.vala"
	_tmp9_ = move_icon;
#line 43 "/run/build/planner/src/Widgets/MoveButton.vala"
	gtk_box_pack_start (_tmp8_, (GtkWidget*) _tmp9_, FALSE, FALSE, (guint) 0);
#line 45 "/run/build/planner/src/Widgets/MoveButton.vala"
	_tmp10_ = main_box;
#line 45 "/run/build/planner/src/Widgets/MoveButton.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp10_);
#line 47 "/run/build/planner/src/Widgets/MoveButton.vala"
	g_signal_connect_object ((GtkToggleButton*) self, "toggled", (GCallback) __widgets_move_button___lambda63__gtk_toggle_button_toggled, self, 0);
#line 54 "/run/build/planner/src/Widgets/MoveButton.vala"
	_tmp11_ = self->priv->move_popover;
#line 54 "/run/build/planner/src/Widgets/MoveButton.vala"
	g_signal_connect_object ((GtkPopover*) _tmp11_, "closed", (GCallback) __widgets_move_button___lambda64__gtk_popover_closed, self, 0);
#line 58 "/run/build/planner/src/Widgets/MoveButton.vala"
	_tmp12_ = self->priv->move_popover;
#line 58 "/run/build/planner/src/Widgets/MoveButton.vala"
	g_signal_connect_object (_tmp12_, "on-selected-project", (GCallback) __widgets_move_button___lambda65__widgets_popovers_move_popover_on_selected_project, self, 0);
#line 32 "/run/build/planner/src/Widgets/MoveButton.vala"
	_g_object_unref0 (main_box);
#line 32 "/run/build/planner/src/Widgets/MoveButton.vala"
	_g_object_unref0 (move_icon);
#line 32 "/run/build/planner/src/Widgets/MoveButton.vala"
	_g_object_unref0 (move_label);
#line 32 "/run/build/planner/src/Widgets/MoveButton.vala"
	return obj;
#line 376 "MoveButton.c"
}


static void
widgets_move_button_class_init (WidgetsMoveButtonClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
	widgets_move_button_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
	g_type_class_add_private (klass, sizeof (WidgetsMoveButtonPrivate));
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_move_button_constructor;
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_move_button_finalize;
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
	widgets_move_button_signals[WIDGETS_MOVE_BUTTON_ON_SELECTED_PROJECT_SIGNAL] = g_signal_new ("on-selected-project", WIDGETS_TYPE_MOVE_BUTTON, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__BOOLEAN_OBJECTS_PROJECT, G_TYPE_NONE, 2, G_TYPE_BOOLEAN, OBJECTS_TYPE_PROJECT);
#line 393 "MoveButton.c"
}


static void
widgets_move_button_instance_init (WidgetsMoveButton * self)
{
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
	self->priv = WIDGETS_MOVE_BUTTON_GET_PRIVATE (self);
#line 402 "MoveButton.c"
}


static void
widgets_move_button_finalize (GObject * obj)
{
	WidgetsMoveButton * self;
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_MOVE_BUTTON, WidgetsMoveButton);
#line 23 "/run/build/planner/src/Widgets/MoveButton.vala"
	_g_object_unref0 (self->priv->move_popover);
#line 22 "/run/build/planner/src/Widgets/MoveButton.vala"
	G_OBJECT_CLASS (widgets_move_button_parent_class)->finalize (obj);
#line 416 "MoveButton.c"
}


GType
widgets_move_button_get_type (void)
{
	static volatile gsize widgets_move_button_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_move_button_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsMoveButtonClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_move_button_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsMoveButton), 0, (GInstanceInitFunc) widgets_move_button_instance_init, NULL };
		GType widgets_move_button_type_id;
		widgets_move_button_type_id = g_type_register_static (gtk_toggle_button_get_type (), "WidgetsMoveButton", &g_define_type_info, 0);
		g_once_init_leave (&widgets_move_button_type_id__volatile, widgets_move_button_type_id);
	}
	return widgets_move_button_type_id__volatile;
}



