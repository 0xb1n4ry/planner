/* unity-scope-proxy.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-scope-proxy.vala, do not modify */

/*
 * Copyright (C) 2012 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Michal Hruby <michal.hruby@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <dee.h>


#define UNITY_PROTOCOL_TYPE_SCOPE_PROXY (unity_protocol_scope_proxy_get_type ())
#define UNITY_PROTOCOL_SCOPE_PROXY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_TYPE_SCOPE_PROXY, UnityProtocolScopeProxy))
#define UNITY_PROTOCOL_IS_SCOPE_PROXY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_TYPE_SCOPE_PROXY))
#define UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), UNITY_PROTOCOL_TYPE_SCOPE_PROXY, UnityProtocolScopeProxyIface))

typedef struct _UnityProtocolScopeProxy UnityProtocolScopeProxy;
typedef struct _UnityProtocolScopeProxyIface UnityProtocolScopeProxyIface;

#define UNITY_PROTOCOL_TYPE_ACTION_TYPE (unity_protocol_action_type_get_type ())

#define UNITY_PROTOCOL_TYPE_ACTIVATION_REPLY_RAW (unity_protocol_activation_reply_raw_get_type ())
typedef struct _UnityProtocolActivationReplyRaw UnityProtocolActivationReplyRaw;

#define UNITY_PROTOCOL_TYPE_CHANNEL_TYPE (unity_protocol_channel_type_get_type ())

#define UNITY_PROTOCOL_TYPE_CHANNEL_FLAGS (unity_protocol_channel_flags_get_type ())

#define UNITY_PROTOCOL_TYPE_VIEW_TYPE (unity_protocol_view_type_get_type ())
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _UnityProtocolScopeProxyNewForIdData UnityProtocolScopeProxyNewForIdData;

#define UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE (unity_protocol_scope_proxy_remote_get_type ())
#define UNITY_PROTOCOL_SCOPE_PROXY_REMOTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE, UnityProtocolScopeProxyRemote))
#define UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE, UnityProtocolScopeProxyRemoteClass))
#define UNITY_PROTOCOL_IS_SCOPE_PROXY_REMOTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE))
#define UNITY_PROTOCOL_IS_SCOPE_PROXY_REMOTE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE))
#define UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE, UnityProtocolScopeProxyRemoteClass))

typedef struct _UnityProtocolScopeProxyRemote UnityProtocolScopeProxyRemote;
typedef struct _UnityProtocolScopeProxyRemoteClass UnityProtocolScopeProxyRemoteClass;
typedef struct _UnityProtocolScopeProxyNewFromDbusData UnityProtocolScopeProxyNewFromDbusData;
#define _unity_protocol_scope_registry_scope_metadata_unref0(var) ((var == NULL) ? NULL : (var = (unity_protocol_scope_registry_scope_metadata_unref (var), NULL)))

#define UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA (unity_protocol_scope_registry_scope_metadata_get_type ())
#define UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_METADATA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA, UnityProtocolScopeRegistryScopeMetadata))
#define UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_METADATA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA, UnityProtocolScopeRegistryScopeMetadataClass))
#define UNITY_PROTOCOL_SCOPE_REGISTRY_IS_SCOPE_METADATA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA))
#define UNITY_PROTOCOL_SCOPE_REGISTRY_IS_SCOPE_METADATA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA))
#define UNITY_PROTOCOL_SCOPE_REGISTRY_SCOPE_METADATA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_PROTOCOL_SCOPE_REGISTRY_TYPE_SCOPE_METADATA, UnityProtocolScopeRegistryScopeMetadataClass))

typedef struct _UnityProtocolScopeRegistryScopeMetadata UnityProtocolScopeRegistryScopeMetadata;
typedef struct _UnityProtocolScopeRegistryScopeMetadataClass UnityProtocolScopeRegistryScopeMetadataClass;
typedef struct _UnityProtocolScopeRegistryScopeMetadataPrivate UnityProtocolScopeRegistryScopeMetadataPrivate;

#define UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO (unity_protocol_meta_data_schema_info_get_type ())
#define UNITY_PROTOCOL_META_DATA_SCHEMA_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO, UnityProtocolMetaDataSchemaInfo))
#define UNITY_PROTOCOL_META_DATA_SCHEMA_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO, UnityProtocolMetaDataSchemaInfoClass))
#define UNITY_PROTOCOL_IS_META_DATA_SCHEMA_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO))
#define UNITY_PROTOCOL_IS_META_DATA_SCHEMA_INFO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO))
#define UNITY_PROTOCOL_META_DATA_SCHEMA_INFO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_PROTOCOL_TYPE_META_DATA_SCHEMA_INFO, UnityProtocolMetaDataSchemaInfoClass))

typedef struct _UnityProtocolMetaDataSchemaInfo UnityProtocolMetaDataSchemaInfo;
typedef struct _UnityProtocolMetaDataSchemaInfoClass UnityProtocolMetaDataSchemaInfoClass;
typedef struct _UnityProtocolScopeProxyNewFromMetadataData UnityProtocolScopeProxyNewFromMetadataData;
enum  {
	UNITY_PROTOCOL_SCOPE_PROXY_CATEGORY_ORDER_CHANGED_SIGNAL,
	UNITY_PROTOCOL_SCOPE_PROXY_FILTER_SETTINGS_CHANGED_SIGNAL,
	UNITY_PROTOCOL_SCOPE_PROXY_RESULTS_INVALIDATED_SIGNAL,
	UNITY_PROTOCOL_SCOPE_PROXY_CHANNELS_INVALIDATED_SIGNAL,
	UNITY_PROTOCOL_SCOPE_PROXY_NUM_SIGNALS
};
static guint unity_protocol_scope_proxy_signals[UNITY_PROTOCOL_SCOPE_PROXY_NUM_SIGNALS] = {0};

typedef enum  {
	UNITY_PROTOCOL_ACTION_TYPE_ACTIVATE_RESULT,
	UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_RESULT,
	UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_ACTION,
	UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_BUILTIN_ACTION
} UnityProtocolActionType;

struct _UnityProtocolActivationReplyRaw {
	gchar* uri;
	guint handled;
	GHashTable* hints;
};

typedef enum  {
	UNITY_PROTOCOL_CHANNEL_TYPE_DEFAULT,
	UNITY_PROTOCOL_CHANNEL_TYPE_GLOBAL
} UnityProtocolChannelType;

typedef enum  {
	UNITY_PROTOCOL_CHANNEL_FLAGS_NONE = 0,
	UNITY_PROTOCOL_CHANNEL_FLAGS_PRIVATE = 1 << 0,
	UNITY_PROTOCOL_CHANNEL_FLAGS_NO_FILTERING = 1 << 1,
	UNITY_PROTOCOL_CHANNEL_FLAGS_DIFF_CHANGES = 1 << 2
} UnityProtocolChannelFlags;

typedef enum  {
	UNITY_PROTOCOL_VIEW_TYPE_HIDDEN,
	UNITY_PROTOCOL_VIEW_TYPE_HOME_VIEW,
	UNITY_PROTOCOL_VIEW_TYPE_LENS_VIEW
} UnityProtocolViewType;

struct _UnityProtocolScopeProxyIface {
	GTypeInterface parent_iface;
	void (*activate) (UnityProtocolScopeProxy* self, const gchar* channel_id, GVariant** result_arr, int result_arr_length1, UnityProtocolActionType action_type, GHashTable* hints, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*activate_finish) (UnityProtocolScopeProxy* self, GAsyncResult* _res_, UnityProtocolActivationReplyRaw* result, GError** error);
	void (*search) (UnityProtocolScopeProxy* self, const gchar* channel_id, const gchar* search_string, GHashTable* hints, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*search_finish) (UnityProtocolScopeProxy* self, GAsyncResult* _res_, GError** error);
	void (*open_channel) (UnityProtocolScopeProxy* self, UnityProtocolChannelType channel_type, UnityProtocolChannelFlags channel_flags, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*open_channel_finish) (UnityProtocolScopeProxy* self, GAsyncResult* _res_, DeeSerializableModel* * results_model, GError** error);
	void (*close_channel) (UnityProtocolScopeProxy* self, const gchar* channel_id, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*close_channel_finish) (UnityProtocolScopeProxy* self, GAsyncResult* _res_, GError** error);
	void (*set_active_sources) (UnityProtocolScopeProxy* self, const gchar* channel_id, gchar** sources, int sources_length1, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_active_sources_finish) (UnityProtocolScopeProxy* self, GAsyncResult* _res_, GError** error);
	void (*push_results) (UnityProtocolScopeProxy* self, const gchar* channel_id, const gchar* search_string, const gchar* source_scope_id, DeeSerializableModel* model, gchar** categories, int categories_length1, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*push_results_finish) (UnityProtocolScopeProxy* self, GAsyncResult* _res_, GError** error);
	gboolean (*get_visible) (UnityProtocolScopeProxy* self);
	gboolean (*get_is_master) (UnityProtocolScopeProxy* self);
	gboolean (*get_connected) (UnityProtocolScopeProxy* self);
	const gchar* (*get_search_hint) (UnityProtocolScopeProxy* self);
	UnityProtocolViewType (*get_view_type) (UnityProtocolScopeProxy* self);
	void (*set_view_type) (UnityProtocolScopeProxy* self, UnityProtocolViewType value);
	DeeSerializableModel* (*get_filters_model) (UnityProtocolScopeProxy* self);
	DeeSerializableModel* (*get_categories_model) (UnityProtocolScopeProxy* self);
	GVariant* (*get_sources) (UnityProtocolScopeProxy* self);
	GHashTable* (*get_metadata) (UnityProtocolScopeProxy* self);
	GHashTable* (*get_optional_metadata) (UnityProtocolScopeProxy* self);
};

struct _UnityProtocolScopeProxyNewForIdData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	gchar* id;
	GCancellable* cancellable;
	UnityProtocolScopeProxy* result;
	GError* _tmp0_;
	GError * _inner_error_;
};

struct _UnityProtocolScopeProxyNewFromDbusData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	gchar* dbus_name;
	gchar* dbus_path;
	GCancellable* cancellable;
	UnityProtocolScopeProxy* result;
	UnityProtocolScopeProxyRemote* proxy;
	UnityProtocolScopeProxyRemote* _tmp0_;
	GError * _inner_error_;
};

struct _UnityProtocolScopeRegistryScopeMetadata {
	GTypeInstance parent_instance;
	volatile int ref_count;
	UnityProtocolScopeRegistryScopeMetadataPrivate * priv;
	gchar* id;
	gchar* domain;
	gchar* full_path;
	gchar* name;
	gchar* dbus_path;
	gchar* dbus_name;
	gchar* icon;
	gchar* category_icon;
	UnityProtocolMetaDataSchemaInfo* required_metadata;
	UnityProtocolMetaDataSchemaInfo* optional_metadata;
	GSList* keywords;
	gchar* type;
	gchar* description;
	gchar* search_hint;
	gboolean is_master;
	gboolean global_searches;
	gboolean visible;
	gboolean remote_content;
	gchar* query_binary;
	gchar* query_pattern;
	gchar* shortcut;
	gchar* no_content_hint;
	gboolean no_export;
	gchar* module;
	gchar* module_type;
	gint timeout;
};

struct _UnityProtocolScopeRegistryScopeMetadataClass {
	GTypeClass parent_class;
	void (*finalize) (UnityProtocolScopeRegistryScopeMetadata *self);
};

struct _UnityProtocolScopeProxyNewFromMetadataData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityProtocolScopeRegistryScopeMetadata* metadata;
	GCancellable* cancellable;
	UnityProtocolScopeProxy* result;
	UnityProtocolScopeProxyRemote* proxy;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	UnityProtocolScopeProxyRemote* _tmp2_;
	GError * _inner_error_;
};



GType unity_protocol_action_type_get_type (void) G_GNUC_CONST;
GType unity_protocol_activation_reply_raw_get_type (void) G_GNUC_CONST;
UnityProtocolActivationReplyRaw* unity_protocol_activation_reply_raw_dup (const UnityProtocolActivationReplyRaw* self);
void unity_protocol_activation_reply_raw_free (UnityProtocolActivationReplyRaw* self);
void unity_protocol_activation_reply_raw_copy (const UnityProtocolActivationReplyRaw* self,
                                               UnityProtocolActivationReplyRaw* dest);
void unity_protocol_activation_reply_raw_destroy (UnityProtocolActivationReplyRaw* self);
GType unity_protocol_channel_type_get_type (void) G_GNUC_CONST;
GType unity_protocol_channel_flags_get_type (void) G_GNUC_CONST;
GType unity_protocol_view_type_get_type (void) G_GNUC_CONST;
GType unity_protocol_scope_proxy_get_type (void) G_GNUC_CONST;
void unity_protocol_scope_proxy_activate (UnityProtocolScopeProxy* self,
                                          const gchar* channel_id,
                                          GVariant** result_arr,
                                          int result_arr_length1,
                                          UnityProtocolActionType action_type,
                                          GHashTable* hints,
                                          GCancellable* cancellable,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_);
void unity_protocol_scope_proxy_activate_finish (UnityProtocolScopeProxy* self,
                                                 GAsyncResult* _res_,
                                                 UnityProtocolActivationReplyRaw* result,
                                                 GError** error);
void unity_protocol_scope_proxy_search (UnityProtocolScopeProxy* self,
                                        const gchar* channel_id,
                                        const gchar* search_string,
                                        GHashTable* hints,
                                        GCancellable* cancellable,
                                        GAsyncReadyCallback _callback_,
                                        gpointer _user_data_);
GHashTable* unity_protocol_scope_proxy_search_finish (UnityProtocolScopeProxy* self,
                                                      GAsyncResult* _res_,
                                                      GError** error);
void unity_protocol_scope_proxy_open_channel (UnityProtocolScopeProxy* self,
                                              UnityProtocolChannelType channel_type,
                                              UnityProtocolChannelFlags channel_flags,
                                              GCancellable* cancellable,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_);
gchar* unity_protocol_scope_proxy_open_channel_finish (UnityProtocolScopeProxy* self,
                                                       GAsyncResult* _res_,
                                                       DeeSerializableModel* * results_model,
                                                       GError** error);
void unity_protocol_scope_proxy_close_channel (UnityProtocolScopeProxy* self,
                                               const gchar* channel_id,
                                               GCancellable* cancellable,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
void unity_protocol_scope_proxy_close_channel_finish (UnityProtocolScopeProxy* self,
                                                      GAsyncResult* _res_,
                                                      GError** error);
void unity_protocol_scope_proxy_set_active_sources (UnityProtocolScopeProxy* self,
                                                    const gchar* channel_id,
                                                    gchar** sources,
                                                    int sources_length1,
                                                    GCancellable* cancellable,
                                                    GAsyncReadyCallback _callback_,
                                                    gpointer _user_data_);
void unity_protocol_scope_proxy_set_active_sources_finish (UnityProtocolScopeProxy* self,
                                                           GAsyncResult* _res_,
                                                           GError** error);
void unity_protocol_scope_proxy_push_results (UnityProtocolScopeProxy* self,
                                              const gchar* channel_id,
                                              const gchar* search_string,
                                              const gchar* source_scope_id,
                                              DeeSerializableModel* model,
                                              gchar** categories,
                                              int categories_length1,
                                              GCancellable* cancellable,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_);
GHashTable* unity_protocol_scope_proxy_push_results_finish (UnityProtocolScopeProxy* self,
                                                            GAsyncResult* _res_,
                                                            GError** error);
static void unity_protocol_scope_proxy_new_for_id_data_free (gpointer _data);
static void unity_protocol_scope_proxy_new_for_id_async_ready_wrapper (GObject *source_object,
                                                                GAsyncResult *res,
                                                                void *user_data);
void unity_protocol_scope_proxy_new_for_id (const gchar* id,
                                            GCancellable* cancellable,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
UnityProtocolScopeProxy* unity_protocol_scope_proxy_new_for_id_finish (GAsyncResult* _res_,
                                                                       GError** error);
static gboolean unity_protocol_scope_proxy_new_for_id_co (UnityProtocolScopeProxyNewForIdData* _data_);
static void unity_protocol_scope_proxy_new_from_dbus_data_free (gpointer _data);
static void unity_protocol_scope_proxy_new_from_dbus_async_ready_wrapper (GObject *source_object,
                                                                   GAsyncResult *res,
                                                                   void *user_data);
void unity_protocol_scope_proxy_new_from_dbus (const gchar* dbus_name,
                                               const gchar* dbus_path,
                                               GCancellable* cancellable,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
UnityProtocolScopeProxy* unity_protocol_scope_proxy_new_from_dbus_finish (GAsyncResult* _res_,
                                                                          GError** error);
static gboolean unity_protocol_scope_proxy_new_from_dbus_co (UnityProtocolScopeProxyNewFromDbusData* _data_);
GType unity_protocol_scope_proxy_remote_get_type (void) G_GNUC_CONST;
void unity_protocol_scope_proxy_remote_create (const gchar* dbus_name,
                                               const gchar* dbus_path,
                                               GCancellable* cancellable,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
UnityProtocolScopeProxyRemote* unity_protocol_scope_proxy_remote_create_finish (GAsyncResult* _res_,
                                                                                GError** error);
static void unity_protocol_scope_proxy_new_from_dbus_ready (GObject* source_object,
                                                     GAsyncResult* _res_,
                                                     gpointer _user_data_);
static void unity_protocol_scope_proxy_new_from_metadata_data_free (gpointer _data);
static void unity_protocol_scope_proxy_new_from_metadata_async_ready_wrapper (GObject *source_object,
                                                                       GAsyncResult *res,
                                                                       void *user_data);
gpointer unity_protocol_scope_registry_scope_metadata_ref (gpointer instance);
void unity_protocol_scope_registry_scope_metadata_unref (gpointer instance);
GParamSpec* unity_protocol_scope_registry_param_spec_scope_metadata (const gchar* name,
                                                                     const gchar* nick,
                                                                     const gchar* blurb,
                                                                     GType object_type,
                                                                     GParamFlags flags);
void unity_protocol_scope_registry_value_set_scope_metadata (GValue* value,
                                                             gpointer v_object);
void unity_protocol_scope_registry_value_take_scope_metadata (GValue* value,
                                                              gpointer v_object);
gpointer unity_protocol_scope_registry_value_get_scope_metadata (const GValue* value);
GType unity_protocol_scope_registry_scope_metadata_get_type (void) G_GNUC_CONST;
void unity_protocol_scope_proxy_new_from_metadata (UnityProtocolScopeRegistryScopeMetadata* metadata,
                                                   GCancellable* cancellable,
                                                   GAsyncReadyCallback _callback_,
                                                   gpointer _user_data_);
UnityProtocolScopeProxy* unity_protocol_scope_proxy_new_from_metadata_finish (GAsyncResult* _res_,
                                                                              GError** error);
static gboolean unity_protocol_scope_proxy_new_from_metadata_co (UnityProtocolScopeProxyNewFromMetadataData* _data_);
gpointer unity_protocol_meta_data_schema_info_ref (gpointer instance);
void unity_protocol_meta_data_schema_info_unref (gpointer instance);
GParamSpec* unity_protocol_param_spec_meta_data_schema_info (const gchar* name,
                                                             const gchar* nick,
                                                             const gchar* blurb,
                                                             GType object_type,
                                                             GParamFlags flags);
void unity_protocol_value_set_meta_data_schema_info (GValue* value,
                                                     gpointer v_object);
void unity_protocol_value_take_meta_data_schema_info (GValue* value,
                                                      gpointer v_object);
gpointer unity_protocol_value_get_meta_data_schema_info (const GValue* value);
GType unity_protocol_meta_data_schema_info_get_type (void) G_GNUC_CONST;
static void unity_protocol_scope_proxy_new_from_metadata_ready (GObject* source_object,
                                                         GAsyncResult* _res_,
                                                         gpointer _user_data_);
gboolean unity_protocol_scope_proxy_get_visible (UnityProtocolScopeProxy* self);
gboolean unity_protocol_scope_proxy_get_is_master (UnityProtocolScopeProxy* self);
gboolean unity_protocol_scope_proxy_get_connected (UnityProtocolScopeProxy* self);
const gchar* unity_protocol_scope_proxy_get_search_hint (UnityProtocolScopeProxy* self);
UnityProtocolViewType unity_protocol_scope_proxy_get_view_type (UnityProtocolScopeProxy* self);
void unity_protocol_scope_proxy_set_view_type (UnityProtocolScopeProxy* self,
                                               UnityProtocolViewType value);
DeeSerializableModel* unity_protocol_scope_proxy_get_filters_model (UnityProtocolScopeProxy* self);
DeeSerializableModel* unity_protocol_scope_proxy_get_categories_model (UnityProtocolScopeProxy* self);
GVariant* unity_protocol_scope_proxy_get_sources (UnityProtocolScopeProxy* self);
GHashTable* unity_protocol_scope_proxy_get_metadata (UnityProtocolScopeProxy* self);
GHashTable* unity_protocol_scope_proxy_get_optional_metadata (UnityProtocolScopeProxy* self);
static void g_cclosure_user_marshal_VOID__STRING_POINTER_INT (GClosure * closure,
                                                       GValue * return_value,
                                                       guint n_param_values,
                                                       const GValue * param_values,
                                                       gpointer invocation_hint,
                                                       gpointer marshal_data);
static void g_cclosure_user_marshal_VOID__STRING_VARIANT (GClosure * closure,
                                                   GValue * return_value,
                                                   guint n_param_values,
                                                   const GValue * param_values,
                                                   gpointer invocation_hint,
                                                   gpointer marshal_data);


void
unity_protocol_scope_proxy_activate (UnityProtocolScopeProxy* self,
                                     const gchar* channel_id,
                                     GVariant** result_arr,
                                     int result_arr_length1,
                                     UnityProtocolActionType action_type,
                                     GHashTable* hints,
                                     GCancellable* cancellable,
                                     GAsyncReadyCallback _callback_,
                                     gpointer _user_data_)
{
	UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->activate (self, channel_id, result_arr, result_arr_length1, action_type, hints, cancellable, _callback_, _user_data_);
}


void
unity_protocol_scope_proxy_activate_finish (UnityProtocolScopeProxy* self,
                                            GAsyncResult* _res_,
                                            UnityProtocolActivationReplyRaw* result,
                                            GError** error)
{
	UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->activate_finish (self, _res_, result, error);
}


void
unity_protocol_scope_proxy_search (UnityProtocolScopeProxy* self,
                                   const gchar* channel_id,
                                   const gchar* search_string,
                                   GHashTable* hints,
                                   GCancellable* cancellable,
                                   GAsyncReadyCallback _callback_,
                                   gpointer _user_data_)
{
	UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->search (self, channel_id, search_string, hints, cancellable, _callback_, _user_data_);
}


GHashTable*
unity_protocol_scope_proxy_search_finish (UnityProtocolScopeProxy* self,
                                          GAsyncResult* _res_,
                                          GError** error)
{
	return UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->search_finish (self, _res_, error);
}


void
unity_protocol_scope_proxy_open_channel (UnityProtocolScopeProxy* self,
                                         UnityProtocolChannelType channel_type,
                                         UnityProtocolChannelFlags channel_flags,
                                         GCancellable* cancellable,
                                         GAsyncReadyCallback _callback_,
                                         gpointer _user_data_)
{
	UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->open_channel (self, channel_type, channel_flags, cancellable, _callback_, _user_data_);
}


gchar*
unity_protocol_scope_proxy_open_channel_finish (UnityProtocolScopeProxy* self,
                                                GAsyncResult* _res_,
                                                DeeSerializableModel* * results_model,
                                                GError** error)
{
	return UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->open_channel_finish (self, _res_, results_model, error);
}


void
unity_protocol_scope_proxy_close_channel (UnityProtocolScopeProxy* self,
                                          const gchar* channel_id,
                                          GCancellable* cancellable,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_)
{
	UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->close_channel (self, channel_id, cancellable, _callback_, _user_data_);
}


void
unity_protocol_scope_proxy_close_channel_finish (UnityProtocolScopeProxy* self,
                                                 GAsyncResult* _res_,
                                                 GError** error)
{
	UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->close_channel_finish (self, _res_, error);
}


void
unity_protocol_scope_proxy_set_active_sources (UnityProtocolScopeProxy* self,
                                               const gchar* channel_id,
                                               gchar** sources,
                                               int sources_length1,
                                               GCancellable* cancellable,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_)
{
	UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->set_active_sources (self, channel_id, sources, sources_length1, cancellable, _callback_, _user_data_);
}


void
unity_protocol_scope_proxy_set_active_sources_finish (UnityProtocolScopeProxy* self,
                                                      GAsyncResult* _res_,
                                                      GError** error)
{
	UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->set_active_sources_finish (self, _res_, error);
}


void
unity_protocol_scope_proxy_push_results (UnityProtocolScopeProxy* self,
                                         const gchar* channel_id,
                                         const gchar* search_string,
                                         const gchar* source_scope_id,
                                         DeeSerializableModel* model,
                                         gchar** categories,
                                         int categories_length1,
                                         GCancellable* cancellable,
                                         GAsyncReadyCallback _callback_,
                                         gpointer _user_data_)
{
	UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->push_results (self, channel_id, search_string, source_scope_id, model, categories, categories_length1, cancellable, _callback_, _user_data_);
}


GHashTable*
unity_protocol_scope_proxy_push_results_finish (UnityProtocolScopeProxy* self,
                                                GAsyncResult* _res_,
                                                GError** error)
{
	return UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->push_results_finish (self, _res_, error);
}


static void
unity_protocol_scope_proxy_new_for_id_data_free (gpointer _data)
{
	UnityProtocolScopeProxyNewForIdData* _data_;
	_data_ = _data;
	_g_free0 (_data_->id);
	_g_object_unref0 (_data_->cancellable);
	_g_object_unref0 (_data_->result);
	g_slice_free (UnityProtocolScopeProxyNewForIdData, _data_);
}


static void
unity_protocol_scope_proxy_new_for_id_async_ready_wrapper (GObject *source_object,
                                                           GAsyncResult *res,
                                                           void *user_data)
{
	UnityProtocolScopeProxyNewForIdData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


void
unity_protocol_scope_proxy_new_for_id (const gchar* id,
                                       GCancellable* cancellable,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_)
{
	UnityProtocolScopeProxyNewForIdData* _data_;
	gchar* _tmp0_;
	GCancellable* _tmp1_;
	_data_ = g_slice_new0 (UnityProtocolScopeProxyNewForIdData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (NULL, cancellable, unity_protocol_scope_proxy_new_for_id_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_proxy_new_for_id_data_free);
	_tmp0_ = g_strdup (id);
	_g_free0 (_data_->id);
	_data_->id = _tmp0_;
	_tmp1_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp1_;
	unity_protocol_scope_proxy_new_for_id_co (_data_);
}


UnityProtocolScopeProxy*
unity_protocol_scope_proxy_new_for_id_finish (GAsyncResult* _res_,
                                              GError** error)
{
	UnityProtocolScopeProxy* result;
	UnityProtocolScopeProxyNewForIdData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static gboolean
unity_protocol_scope_proxy_new_for_id_co (UnityProtocolScopeProxyNewForIdData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = g_error_new_literal (G_IO_ERROR, G_IO_ERROR_FAILED, "Unimplemented!");
	_data_->_inner_error_ = _data_->_tmp0_;
	g_task_return_error (_data_->_async_result, _data_->_inner_error_);
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_protocol_scope_proxy_new_from_dbus_data_free (gpointer _data)
{
	UnityProtocolScopeProxyNewFromDbusData* _data_;
	_data_ = _data;
	_g_free0 (_data_->dbus_name);
	_g_free0 (_data_->dbus_path);
	_g_object_unref0 (_data_->cancellable);
	_g_object_unref0 (_data_->result);
	g_slice_free (UnityProtocolScopeProxyNewFromDbusData, _data_);
}


static void
unity_protocol_scope_proxy_new_from_dbus_async_ready_wrapper (GObject *source_object,
                                                              GAsyncResult *res,
                                                              void *user_data)
{
	UnityProtocolScopeProxyNewFromDbusData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


void
unity_protocol_scope_proxy_new_from_dbus (const gchar* dbus_name,
                                          const gchar* dbus_path,
                                          GCancellable* cancellable,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_)
{
	UnityProtocolScopeProxyNewFromDbusData* _data_;
	gchar* _tmp0_;
	gchar* _tmp1_;
	GCancellable* _tmp2_;
	_data_ = g_slice_new0 (UnityProtocolScopeProxyNewFromDbusData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (NULL, cancellable, unity_protocol_scope_proxy_new_from_dbus_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_proxy_new_from_dbus_data_free);
	_tmp0_ = g_strdup (dbus_name);
	_g_free0 (_data_->dbus_name);
	_data_->dbus_name = _tmp0_;
	_tmp1_ = g_strdup (dbus_path);
	_g_free0 (_data_->dbus_path);
	_data_->dbus_path = _tmp1_;
	_tmp2_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp2_;
	unity_protocol_scope_proxy_new_from_dbus_co (_data_);
}


UnityProtocolScopeProxy*
unity_protocol_scope_proxy_new_from_dbus_finish (GAsyncResult* _res_,
                                                 GError** error)
{
	UnityProtocolScopeProxy* result;
	UnityProtocolScopeProxyNewFromDbusData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static void
unity_protocol_scope_proxy_new_from_dbus_ready (GObject* source_object,
                                                GAsyncResult* _res_,
                                                gpointer _user_data_)
{
	UnityProtocolScopeProxyNewFromDbusData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_protocol_scope_proxy_new_from_dbus_co (_data_);
}


static gboolean
unity_protocol_scope_proxy_new_from_dbus_co (UnityProtocolScopeProxyNewFromDbusData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_state_ = 1;
	unity_protocol_scope_proxy_remote_create (_data_->dbus_name, _data_->dbus_path, _data_->cancellable, unity_protocol_scope_proxy_new_from_dbus_ready, _data_);
	return FALSE;
	_state_1:
	_data_->_tmp0_ = unity_protocol_scope_proxy_remote_create_finish (_data_->_res_, &_data_->_inner_error_);
	_data_->proxy = _data_->_tmp0_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->result = (UnityProtocolScopeProxy*) _data_->proxy;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_protocol_scope_proxy_new_from_metadata_data_free (gpointer _data)
{
	UnityProtocolScopeProxyNewFromMetadataData* _data_;
	_data_ = _data;
	_unity_protocol_scope_registry_scope_metadata_unref0 (_data_->metadata);
	_g_object_unref0 (_data_->cancellable);
	_g_object_unref0 (_data_->result);
	g_slice_free (UnityProtocolScopeProxyNewFromMetadataData, _data_);
}


static void
unity_protocol_scope_proxy_new_from_metadata_async_ready_wrapper (GObject *source_object,
                                                                  GAsyncResult *res,
                                                                  void *user_data)
{
	UnityProtocolScopeProxyNewFromMetadataData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static gpointer
_unity_protocol_scope_registry_scope_metadata_ref0 (gpointer self)
{
	return self ? unity_protocol_scope_registry_scope_metadata_ref (self) : NULL;
}


void
unity_protocol_scope_proxy_new_from_metadata (UnityProtocolScopeRegistryScopeMetadata* metadata,
                                              GCancellable* cancellable,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_)
{
	UnityProtocolScopeProxyNewFromMetadataData* _data_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp0_;
	GCancellable* _tmp1_;
	_data_ = g_slice_new0 (UnityProtocolScopeProxyNewFromMetadataData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (NULL, cancellable, unity_protocol_scope_proxy_new_from_metadata_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_proxy_new_from_metadata_data_free);
	_tmp0_ = _unity_protocol_scope_registry_scope_metadata_ref0 (metadata);
	_unity_protocol_scope_registry_scope_metadata_unref0 (_data_->metadata);
	_data_->metadata = _tmp0_;
	_tmp1_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp1_;
	unity_protocol_scope_proxy_new_from_metadata_co (_data_);
}


UnityProtocolScopeProxy*
unity_protocol_scope_proxy_new_from_metadata_finish (GAsyncResult* _res_,
                                                     GError** error)
{
	UnityProtocolScopeProxy* result;
	UnityProtocolScopeProxyNewFromMetadataData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static void
unity_protocol_scope_proxy_new_from_metadata_ready (GObject* source_object,
                                                    GAsyncResult* _res_,
                                                    gpointer _user_data_)
{
	UnityProtocolScopeProxyNewFromMetadataData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_protocol_scope_proxy_new_from_metadata_co (_data_);
}


static gboolean
unity_protocol_scope_proxy_new_from_metadata_co (UnityProtocolScopeProxyNewFromMetadataData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = _data_->metadata->dbus_name;
	_data_->_tmp1_ = _data_->metadata->dbus_path;
	_data_->_state_ = 1;
	unity_protocol_scope_proxy_remote_create (_data_->_tmp0_, _data_->_tmp1_, _data_->cancellable, unity_protocol_scope_proxy_new_from_metadata_ready, _data_);
	return FALSE;
	_state_1:
	_data_->_tmp2_ = unity_protocol_scope_proxy_remote_create_finish (_data_->_res_, &_data_->_inner_error_);
	_data_->proxy = _data_->_tmp2_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->result = (UnityProtocolScopeProxy*) _data_->proxy;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


gboolean
unity_protocol_scope_proxy_get_visible (UnityProtocolScopeProxy* self)
{
	g_return_val_if_fail (self != NULL, FALSE);
	return UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->get_visible (self);
}


gboolean
unity_protocol_scope_proxy_get_is_master (UnityProtocolScopeProxy* self)
{
	g_return_val_if_fail (self != NULL, FALSE);
	return UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->get_is_master (self);
}


gboolean
unity_protocol_scope_proxy_get_connected (UnityProtocolScopeProxy* self)
{
	g_return_val_if_fail (self != NULL, FALSE);
	return UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->get_connected (self);
}


const gchar*
unity_protocol_scope_proxy_get_search_hint (UnityProtocolScopeProxy* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->get_search_hint (self);
}


UnityProtocolViewType
unity_protocol_scope_proxy_get_view_type (UnityProtocolScopeProxy* self)
{
	g_return_val_if_fail (self != NULL, 0);
	return UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->get_view_type (self);
}


void
unity_protocol_scope_proxy_set_view_type (UnityProtocolScopeProxy* self,
                                          UnityProtocolViewType value)
{
	g_return_if_fail (self != NULL);
	UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->set_view_type (self, value);
}


DeeSerializableModel*
unity_protocol_scope_proxy_get_filters_model (UnityProtocolScopeProxy* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->get_filters_model (self);
}


DeeSerializableModel*
unity_protocol_scope_proxy_get_categories_model (UnityProtocolScopeProxy* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->get_categories_model (self);
}


GVariant*
unity_protocol_scope_proxy_get_sources (UnityProtocolScopeProxy* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->get_sources (self);
}


GHashTable*
unity_protocol_scope_proxy_get_metadata (UnityProtocolScopeProxy* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->get_metadata (self);
}


GHashTable*
unity_protocol_scope_proxy_get_optional_metadata (UnityProtocolScopeProxy* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE (self)->get_optional_metadata (self);
}


static void
g_cclosure_user_marshal_VOID__STRING_POINTER_INT (GClosure * closure,
                                                  GValue * return_value,
                                                  guint n_param_values,
                                                  const GValue * param_values,
                                                  gpointer invocation_hint,
                                                  gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__STRING_POINTER_INT) (gpointer data1, const char* arg_1, gpointer arg_2, gint arg_3, gpointer data2);
	register GMarshalFunc_VOID__STRING_POINTER_INT callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
	g_return_if_fail (n_param_values == 4);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_VOID__STRING_POINTER_INT) (marshal_data ? marshal_data : cc->callback);
	callback (data1, g_value_get_string (param_values + 1), g_value_get_pointer (param_values + 2), g_value_get_int (param_values + 3), data2);
}


static void
g_cclosure_user_marshal_VOID__STRING_VARIANT (GClosure * closure,
                                              GValue * return_value,
                                              guint n_param_values,
                                              const GValue * param_values,
                                              gpointer invocation_hint,
                                              gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__STRING_VARIANT) (gpointer data1, const char* arg_1, gpointer arg_2, gpointer data2);
	register GMarshalFunc_VOID__STRING_VARIANT callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
	g_return_if_fail (n_param_values == 3);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_VOID__STRING_VARIANT) (marshal_data ? marshal_data : cc->callback);
	callback (data1, g_value_get_string (param_values + 1), g_value_get_variant (param_values + 2), data2);
}


static void
unity_protocol_scope_proxy_default_init (UnityProtocolScopeProxyIface * iface)
{
	g_object_interface_install_property (iface, g_param_spec_boolean ("visible", "visible", "visible", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_interface_install_property (iface, g_param_spec_boolean ("is-master", "is-master", "is-master", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_interface_install_property (iface, g_param_spec_boolean ("connected", "connected", "connected", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_interface_install_property (iface, g_param_spec_string ("search-hint", "search-hint", "search-hint", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_interface_install_property (iface, g_param_spec_enum ("view-type", "view-type", "view-type", UNITY_PROTOCOL_TYPE_VIEW_TYPE, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_interface_install_property (iface, g_param_spec_object ("filters-model", "filters-model", "filters-model", dee_serializable_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_interface_install_property (iface, g_param_spec_object ("categories-model", "categories-model", "categories-model", dee_serializable_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_interface_install_property (iface, g_param_spec_variant ("sources", "sources", "sources", G_VARIANT_TYPE_ANY, NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_interface_install_property (iface, g_param_spec_boxed ("metadata", "metadata", "metadata", G_TYPE_HASH_TABLE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_interface_install_property (iface, g_param_spec_boxed ("optional-metadata", "optional-metadata", "optional-metadata", G_TYPE_HASH_TABLE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	unity_protocol_scope_proxy_signals[UNITY_PROTOCOL_SCOPE_PROXY_CATEGORY_ORDER_CHANGED_SIGNAL] = g_signal_new ("category-order-changed", UNITY_PROTOCOL_TYPE_SCOPE_PROXY, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__STRING_POINTER_INT, G_TYPE_NONE, 3, G_TYPE_STRING, G_TYPE_POINTER, G_TYPE_INT);
	unity_protocol_scope_proxy_signals[UNITY_PROTOCOL_SCOPE_PROXY_FILTER_SETTINGS_CHANGED_SIGNAL] = g_signal_new ("filter-settings-changed", UNITY_PROTOCOL_TYPE_SCOPE_PROXY, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__STRING_VARIANT, G_TYPE_NONE, 2, G_TYPE_STRING, G_TYPE_VARIANT);
	unity_protocol_scope_proxy_signals[UNITY_PROTOCOL_SCOPE_PROXY_RESULTS_INVALIDATED_SIGNAL] = g_signal_new ("results-invalidated", UNITY_PROTOCOL_TYPE_SCOPE_PROXY, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__ENUM, G_TYPE_NONE, 1, UNITY_PROTOCOL_TYPE_CHANNEL_TYPE);
	unity_protocol_scope_proxy_signals[UNITY_PROTOCOL_SCOPE_PROXY_CHANNELS_INVALIDATED_SIGNAL] = g_signal_new ("channels-invalidated", UNITY_PROTOCOL_TYPE_SCOPE_PROXY, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
}


GType
unity_protocol_scope_proxy_get_type (void)
{
	static volatile gsize unity_protocol_scope_proxy_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_scope_proxy_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityProtocolScopeProxyIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_protocol_scope_proxy_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
		GType unity_protocol_scope_proxy_type_id;
		unity_protocol_scope_proxy_type_id = g_type_register_static (G_TYPE_INTERFACE, "UnityProtocolScopeProxy", &g_define_type_info, 0);
		g_type_interface_add_prerequisite (unity_protocol_scope_proxy_type_id, G_TYPE_OBJECT);
		g_once_init_leave (&unity_protocol_scope_proxy_type_id__volatile, unity_protocol_scope_proxy_type_id);
	}
	return unity_protocol_scope_proxy_type_id__volatile;
}



