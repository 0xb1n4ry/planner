/* protocol-scope-interface.c generated by valac 0.40.11, the Vala compiler
 * generated from protocol-scope-interface.vala, do not modify */

/*
 * Copyright (C) 2011-2012 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Neil Jagdish Patel <neil.patel@canonical.com>
 *             Michal Hruby <michal.hruby@canonical.com>
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>


#define UNITY_PROTOCOL_TYPE_ACTIVATION_REPLY_RAW (unity_protocol_activation_reply_raw_get_type ())
typedef struct _UnityProtocolActivationReplyRaw UnityProtocolActivationReplyRaw;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))

#define UNITY_PROTOCOL_TYPE_HANDLED_TYPE (unity_protocol_handled_type_get_type ())

#define UNITY_PROTOCOL_TYPE_ACTION_TYPE (unity_protocol_action_type_get_type ())

#define UNITY_PROTOCOL_TYPE_VIEW_TYPE (unity_protocol_view_type_get_type ())

#define UNITY_PROTOCOL_TYPE_CHANNEL_TYPE (unity_protocol_channel_type_get_type ())

#define UNITY_PROTOCOL_TYPE_CHANNEL_FLAGS (unity_protocol_channel_flags_get_type ())

#define UNITY_PROTOCOL_TYPE_SCOPE_SERVICE (unity_protocol_scope_service_get_type ())
#define UNITY_PROTOCOL_SCOPE_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_TYPE_SCOPE_SERVICE, UnityProtocolScopeService))
#define UNITY_PROTOCOL_IS_SCOPE_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_TYPE_SCOPE_SERVICE))
#define UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), UNITY_PROTOCOL_TYPE_SCOPE_SERVICE, UnityProtocolScopeServiceIface))

typedef struct _UnityProtocolScopeService UnityProtocolScopeService;
typedef struct _UnityProtocolScopeServiceIface UnityProtocolScopeServiceIface;

#define UNITY_PROTOCOL_TYPE_SCOPE_SERVICE_PROXY (unity_protocol_scope_service_proxy_get_type ())
enum  {
	UNITY_PROTOCOL_SCOPE_SERVICE_CATEGORY_ORDER_CHANGED_SIGNAL,
	UNITY_PROTOCOL_SCOPE_SERVICE_FILTER_SETTINGS_CHANGED_SIGNAL,
	UNITY_PROTOCOL_SCOPE_SERVICE_RESULTS_INVALIDATED_SIGNAL,
	UNITY_PROTOCOL_SCOPE_SERVICE_NUM_SIGNALS
};
static guint unity_protocol_scope_service_signals[UNITY_PROTOCOL_SCOPE_SERVICE_NUM_SIGNALS] = {0};
typedef GDBusProxy UnityProtocolScopeServiceProxy;
typedef GDBusProxyClass UnityProtocolScopeServiceProxyClass;
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))

struct _UnityProtocolActivationReplyRaw {
	gchar* uri;
	guint handled;
	GHashTable* hints;
};

typedef enum  {
	UNITY_PROTOCOL_HANDLED_TYPE_NOT_HANDLED,
	UNITY_PROTOCOL_HANDLED_TYPE_SHOW_DASH,
	UNITY_PROTOCOL_HANDLED_TYPE_HIDE_DASH,
	UNITY_PROTOCOL_HANDLED_TYPE_GOTO_DASH_URI,
	UNITY_PROTOCOL_HANDLED_TYPE_SHOW_PREVIEW,
	UNITY_PROTOCOL_HANDLED_TYPE_PERFORM_SEARCH
} UnityProtocolHandledType;

typedef enum  {
	UNITY_PROTOCOL_ACTION_TYPE_ACTIVATE_RESULT,
	UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_RESULT,
	UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_ACTION,
	UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_BUILTIN_ACTION
} UnityProtocolActionType;

typedef enum  {
	UNITY_PROTOCOL_VIEW_TYPE_HIDDEN,
	UNITY_PROTOCOL_VIEW_TYPE_HOME_VIEW,
	UNITY_PROTOCOL_VIEW_TYPE_LENS_VIEW
} UnityProtocolViewType;

typedef enum  {
	UNITY_PROTOCOL_CHANNEL_TYPE_DEFAULT,
	UNITY_PROTOCOL_CHANNEL_TYPE_GLOBAL
} UnityProtocolChannelType;

typedef enum  {
	UNITY_PROTOCOL_CHANNEL_FLAGS_NONE = 0,
	UNITY_PROTOCOL_CHANNEL_FLAGS_PRIVATE = 1 << 0,
	UNITY_PROTOCOL_CHANNEL_FLAGS_NO_FILTERING = 1 << 1,
	UNITY_PROTOCOL_CHANNEL_FLAGS_DIFF_CHANGES = 1 << 2
} UnityProtocolChannelFlags;

typedef enum  {
	UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED,
	UNITY_PROTOCOL_SCOPE_ERROR_DATA_MISMATCH,
	UNITY_PROTOCOL_SCOPE_ERROR_INVALID_CHANNEL,
	UNITY_PROTOCOL_SCOPE_ERROR_SEARCH_CANCELLED,
	UNITY_PROTOCOL_SCOPE_ERROR_DISABLED_CONTENT,
	UNITY_PROTOCOL_SCOPE_ERROR_UNKNOWN
} UnityProtocolScopeError;
#define UNITY_PROTOCOL_SCOPE_ERROR unity_protocol_scope_error_quark ()
struct _UnityProtocolScopeServiceIface {
	GTypeInterface parent_iface;
	void (*activate) (UnityProtocolScopeService* self, const gchar* channel_id, GVariant** result_arr, int result_arr_length1, guint action_type, GHashTable* hints, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*activate_finish) (UnityProtocolScopeService* self, GAsyncResult* _res_, UnityProtocolActivationReplyRaw* result, GError** error);
	void (*search) (UnityProtocolScopeService* self, const gchar* channel_id, const gchar* search_string, GHashTable* hints, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*search_finish) (UnityProtocolScopeService* self, GAsyncResult* _res_, GError** error);
	void (*open_channel) (UnityProtocolScopeService* self, guint channel_type, GHashTable* hints, GCancellable* cancellable, const char* sender, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*open_channel_finish) (UnityProtocolScopeService* self, GAsyncResult* _res_, GHashTable* * out_hints, GError** error);
	void (*close_channel) (UnityProtocolScopeService* self, const gchar* channel_id, GHashTable* hints, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*close_channel_finish) (UnityProtocolScopeService* self, GAsyncResult* _res_, GError** error);
	void (*push_results) (UnityProtocolScopeService* self, const gchar* channel_id, const gchar* search_string, const gchar* source_scope_id, GVariant* result_variant, gchar** categories, int categories_length1, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*push_results_finish) (UnityProtocolScopeService* self, GAsyncResult* _res_, GError** error);
	void (*set_view_type) (UnityProtocolScopeService* self, guint view_type, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_view_type_finish) (UnityProtocolScopeService* self, GAsyncResult* _res_, GError** error);
	gint (*get_protocol_version) (UnityProtocolScopeService* self);
	gboolean (*get_visible) (UnityProtocolScopeService* self);
	gboolean (*get_is_master) (UnityProtocolScopeService* self);
	gchar* (*get_search_hint) (UnityProtocolScopeService* self);
	GHashTable* (*get_metadata) (UnityProtocolScopeService* self);
	GHashTable* (*get_optional_metadata) (UnityProtocolScopeService* self);
	GVariant* (*get_categories) (UnityProtocolScopeService* self);
	GVariant* (*get_filters) (UnityProtocolScopeService* self);
	GHashTable* (*get_hints) (UnityProtocolScopeService* self);
};



GType unity_protocol_activation_reply_raw_get_type (void) G_GNUC_CONST;
UnityProtocolActivationReplyRaw* unity_protocol_activation_reply_raw_dup (const UnityProtocolActivationReplyRaw* self);
void unity_protocol_activation_reply_raw_free (UnityProtocolActivationReplyRaw* self);
void unity_protocol_activation_reply_raw_copy (const UnityProtocolActivationReplyRaw* self,
                                               UnityProtocolActivationReplyRaw* dest);
void unity_protocol_activation_reply_raw_destroy (UnityProtocolActivationReplyRaw* self);
GType unity_protocol_handled_type_get_type (void) G_GNUC_CONST;
GType unity_protocol_action_type_get_type (void) G_GNUC_CONST;
GType unity_protocol_view_type_get_type (void) G_GNUC_CONST;
GType unity_protocol_channel_type_get_type (void) G_GNUC_CONST;
GType unity_protocol_channel_flags_get_type (void) G_GNUC_CONST;
UnityProtocolChannelFlags unity_protocol_channel_flags_from_hints (GHashTable* hints);
#define UNITY_PROTOCOL_CHANNEL_PRIVATE_HINT "private-channel"
#define UNITY_PROTOCOL_CHANNEL_DIFF_MODEL_HINT "diff-model"
GQuark unity_protocol_scope_error_quark (void);
#define UNITY_PROTOCOL_CHANNEL_SWARM_NAME_HINT "model-swarm-name"
GType unity_protocol_scope_service_proxy_get_type (void) G_GNUC_CONST;
guint unity_protocol_scope_service_register_object (void* object,
                                                    GDBusConnection* connection,
                                                    const gchar* path,
                                                    GError** error);
GType unity_protocol_scope_service_get_type (void) G_GNUC_CONST;
void unity_protocol_scope_service_activate (UnityProtocolScopeService* self,
                                            const gchar* channel_id,
                                            GVariant** result_arr,
                                            int result_arr_length1,
                                            guint action_type,
                                            GHashTable* hints,
                                            GCancellable* cancellable,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
void unity_protocol_scope_service_activate_finish (UnityProtocolScopeService* self,
                                                   GAsyncResult* _res_,
                                                   UnityProtocolActivationReplyRaw* result,
                                                   GError** error);
void unity_protocol_scope_service_search (UnityProtocolScopeService* self,
                                          const gchar* channel_id,
                                          const gchar* search_string,
                                          GHashTable* hints,
                                          GCancellable* cancellable,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_);
GHashTable* unity_protocol_scope_service_search_finish (UnityProtocolScopeService* self,
                                                        GAsyncResult* _res_,
                                                        GError** error);
void unity_protocol_scope_service_open_channel (UnityProtocolScopeService* self,
                                                guint channel_type,
                                                GHashTable* hints,
                                                GCancellable* cancellable,
                                                const char* sender,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_);
gchar* unity_protocol_scope_service_open_channel_finish (UnityProtocolScopeService* self,
                                                         GAsyncResult* _res_,
                                                         GHashTable* * out_hints,
                                                         GError** error);
void unity_protocol_scope_service_close_channel (UnityProtocolScopeService* self,
                                                 const gchar* channel_id,
                                                 GHashTable* hints,
                                                 GCancellable* cancellable,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_);
void unity_protocol_scope_service_close_channel_finish (UnityProtocolScopeService* self,
                                                        GAsyncResult* _res_,
                                                        GError** error);
void unity_protocol_scope_service_push_results (UnityProtocolScopeService* self,
                                                const gchar* channel_id,
                                                const gchar* search_string,
                                                const gchar* source_scope_id,
                                                GVariant* result_variant,
                                                gchar** categories,
                                                int categories_length1,
                                                GCancellable* cancellable,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_);
GHashTable* unity_protocol_scope_service_push_results_finish (UnityProtocolScopeService* self,
                                                              GAsyncResult* _res_,
                                                              GError** error);
void unity_protocol_scope_service_set_view_type (UnityProtocolScopeService* self,
                                                 guint view_type,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_);
void unity_protocol_scope_service_set_view_type_finish (UnityProtocolScopeService* self,
                                                        GAsyncResult* _res_,
                                                        GError** error);
#define UNITY_PROTOCOL_SCOPE_SERVICE_INTERFACE_NAME "com.canonical.Unity.Scope"
gint unity_protocol_scope_service_get_protocol_version (UnityProtocolScopeService* self);
gboolean unity_protocol_scope_service_get_visible (UnityProtocolScopeService* self);
gboolean unity_protocol_scope_service_get_is_master (UnityProtocolScopeService* self);
gchar* unity_protocol_scope_service_get_search_hint (UnityProtocolScopeService* self);
GHashTable* unity_protocol_scope_service_get_metadata (UnityProtocolScopeService* self);
GHashTable* unity_protocol_scope_service_get_optional_metadata (UnityProtocolScopeService* self);
GVariant* unity_protocol_scope_service_get_categories (UnityProtocolScopeService* self);
GVariant* unity_protocol_scope_service_get_filters (UnityProtocolScopeService* self);
GHashTable* unity_protocol_scope_service_get_hints (UnityProtocolScopeService* self);
static void g_cclosure_user_marshal_VOID__STRING_POINTER_INT (GClosure * closure,
                                                       GValue * return_value,
                                                       guint n_param_values,
                                                       const GValue * param_values,
                                                       gpointer invocation_hint,
                                                       gpointer marshal_data);
static void g_cclosure_user_marshal_VOID__STRING_VARIANT (GClosure * closure,
                                                   GValue * return_value,
                                                   guint n_param_values,
                                                   const GValue * param_values,
                                                   gpointer invocation_hint,
                                                   gpointer marshal_data);
static void unity_protocol_scope_service_proxy_g_signal (GDBusProxy* proxy,
                                                  const gchar* sender_name,
                                                  const gchar* signal_name,
                                                  GVariant* parameters);
static void _dbus_handle_unity_protocol_scope_service_category_order_changed (UnityProtocolScopeService* self,
                                                                       GVariant* parameters);
static void _dbus_handle_unity_protocol_scope_service_filter_settings_changed (UnityProtocolScopeService* self,
                                                                        GVariant* parameters);
static void _dbus_handle_unity_protocol_scope_service_results_invalidated (UnityProtocolScopeService* self,
                                                                    GVariant* parameters);
static void _vala_g_async_ready_callback (GObject *source_object,
                                   GAsyncResult *res,
                                   void *user_data);
static void unity_protocol_scope_service_proxy_activate_async (UnityProtocolScopeService* self,
                                                        const gchar* channel_id,
                                                        GVariant** result_arr,
                                                        int result_arr_length1,
                                                        guint action_type,
                                                        GHashTable* hints,
                                                        GCancellable* cancellable,
                                                        GAsyncReadyCallback _callback_,
                                                        gpointer _user_data_);
static void unity_protocol_scope_service_proxy_activate_finish (UnityProtocolScopeService* self,
                                                         GAsyncResult* _res_,
                                                         UnityProtocolActivationReplyRaw* result,
                                                         GError** error);
static void unity_protocol_scope_service_proxy_search_async (UnityProtocolScopeService* self,
                                                      const gchar* channel_id,
                                                      const gchar* search_string,
                                                      GHashTable* hints,
                                                      GCancellable* cancellable,
                                                      GAsyncReadyCallback _callback_,
                                                      gpointer _user_data_);
static GHashTable* unity_protocol_scope_service_proxy_search_finish (UnityProtocolScopeService* self,
                                                              GAsyncResult* _res_,
                                                              GError** error);
static void unity_protocol_scope_service_proxy_open_channel_async (UnityProtocolScopeService* self,
                                                            guint channel_type,
                                                            GHashTable* hints,
                                                            GCancellable* cancellable,
                                                            const char* sender,
                                                            GAsyncReadyCallback _callback_,
                                                            gpointer _user_data_);
static gchar* unity_protocol_scope_service_proxy_open_channel_finish (UnityProtocolScopeService* self,
                                                               GAsyncResult* _res_,
                                                               GHashTable* * out_hints,
                                                               GError** error);
static void unity_protocol_scope_service_proxy_close_channel_async (UnityProtocolScopeService* self,
                                                             const gchar* channel_id,
                                                             GHashTable* hints,
                                                             GCancellable* cancellable,
                                                             GAsyncReadyCallback _callback_,
                                                             gpointer _user_data_);
static void unity_protocol_scope_service_proxy_close_channel_finish (UnityProtocolScopeService* self,
                                                              GAsyncResult* _res_,
                                                              GError** error);
static void unity_protocol_scope_service_proxy_push_results_async (UnityProtocolScopeService* self,
                                                            const gchar* channel_id,
                                                            const gchar* search_string,
                                                            const gchar* source_scope_id,
                                                            GVariant* result_variant,
                                                            gchar** categories,
                                                            int categories_length1,
                                                            GCancellable* cancellable,
                                                            GAsyncReadyCallback _callback_,
                                                            gpointer _user_data_);
static GHashTable* unity_protocol_scope_service_proxy_push_results_finish (UnityProtocolScopeService* self,
                                                                    GAsyncResult* _res_,
                                                                    GError** error);
static void unity_protocol_scope_service_proxy_set_view_type_async (UnityProtocolScopeService* self,
                                                             guint view_type,
                                                             GAsyncReadyCallback _callback_,
                                                             gpointer _user_data_);
static void unity_protocol_scope_service_proxy_set_view_type_finish (UnityProtocolScopeService* self,
                                                              GAsyncResult* _res_,
                                                              GError** error);
static gint unity_protocol_scope_service_dbus_proxy_get_protocol_version (UnityProtocolScopeService* self);
static gboolean unity_protocol_scope_service_dbus_proxy_get_visible (UnityProtocolScopeService* self);
static gboolean unity_protocol_scope_service_dbus_proxy_get_is_master (UnityProtocolScopeService* self);
static gchar* unity_protocol_scope_service_dbus_proxy_get_search_hint (UnityProtocolScopeService* self);
static GHashTable* unity_protocol_scope_service_dbus_proxy_get_metadata (UnityProtocolScopeService* self);
static GHashTable* unity_protocol_scope_service_dbus_proxy_get_optional_metadata (UnityProtocolScopeService* self);
static GVariant* unity_protocol_scope_service_dbus_proxy_get_categories (UnityProtocolScopeService* self);
static GVariant* unity_protocol_scope_service_dbus_proxy_get_filters (UnityProtocolScopeService* self);
static GHashTable* unity_protocol_scope_service_dbus_proxy_get_hints (UnityProtocolScopeService* self);
static void unity_protocol_scope_service_proxy_unity_protocol_scope_service_interface_init (UnityProtocolScopeServiceIface* iface);
static void _dbus_unity_protocol_scope_service_activate (UnityProtocolScopeService* self,
                                                  GVariant* _parameters_,
                                                  GDBusMethodInvocation* invocation);
static void _dbus_unity_protocol_scope_service_activate_ready (GObject * source_object,
                                                        GAsyncResult * _res_,
                                                        gpointer _user_data_);
static void _dbus_unity_protocol_scope_service_search (UnityProtocolScopeService* self,
                                                GVariant* _parameters_,
                                                GDBusMethodInvocation* invocation);
static void _dbus_unity_protocol_scope_service_search_ready (GObject * source_object,
                                                      GAsyncResult * _res_,
                                                      gpointer _user_data_);
static void _dbus_unity_protocol_scope_service_open_channel (UnityProtocolScopeService* self,
                                                      GVariant* _parameters_,
                                                      GDBusMethodInvocation* invocation);
static void _dbus_unity_protocol_scope_service_open_channel_ready (GObject * source_object,
                                                            GAsyncResult * _res_,
                                                            gpointer _user_data_);
static void _dbus_unity_protocol_scope_service_close_channel (UnityProtocolScopeService* self,
                                                       GVariant* _parameters_,
                                                       GDBusMethodInvocation* invocation);
static void _dbus_unity_protocol_scope_service_close_channel_ready (GObject * source_object,
                                                             GAsyncResult * _res_,
                                                             gpointer _user_data_);
static void _dbus_unity_protocol_scope_service_push_results (UnityProtocolScopeService* self,
                                                      GVariant* _parameters_,
                                                      GDBusMethodInvocation* invocation);
static void _dbus_unity_protocol_scope_service_push_results_ready (GObject * source_object,
                                                            GAsyncResult * _res_,
                                                            gpointer _user_data_);
static void _dbus_unity_protocol_scope_service_set_view_type (UnityProtocolScopeService* self,
                                                       GVariant* _parameters_,
                                                       GDBusMethodInvocation* invocation);
static void _dbus_unity_protocol_scope_service_set_view_type_ready (GObject * source_object,
                                                             GAsyncResult * _res_,
                                                             gpointer _user_data_);
static void unity_protocol_scope_service_dbus_interface_method_call (GDBusConnection* connection,
                                                              const gchar* sender,
                                                              const gchar* object_path,
                                                              const gchar* interface_name,
                                                              const gchar* method_name,
                                                              GVariant* parameters,
                                                              GDBusMethodInvocation* invocation,
                                                              gpointer user_data);
static GVariant* unity_protocol_scope_service_dbus_interface_get_property (GDBusConnection* connection,
                                                                    const gchar* sender,
                                                                    const gchar* object_path,
                                                                    const gchar* interface_name,
                                                                    const gchar* property_name,
                                                                    GError** error,
                                                                    gpointer user_data);
static GVariant* _dbus_unity_protocol_scope_service_get_protocol_version (UnityProtocolScopeService* self);
static GVariant* _dbus_unity_protocol_scope_service_get_visible (UnityProtocolScopeService* self);
static GVariant* _dbus_unity_protocol_scope_service_get_is_master (UnityProtocolScopeService* self);
static GVariant* _dbus_unity_protocol_scope_service_get_search_hint (UnityProtocolScopeService* self);
static GVariant* _dbus_unity_protocol_scope_service_get_metadata (UnityProtocolScopeService* self);
static GVariant* _dbus_unity_protocol_scope_service_get_optional_metadata (UnityProtocolScopeService* self);
static GVariant* _dbus_unity_protocol_scope_service_get_categories (UnityProtocolScopeService* self);
static GVariant* _dbus_unity_protocol_scope_service_get_filters (UnityProtocolScopeService* self);
static GVariant* _dbus_unity_protocol_scope_service_get_hints (UnityProtocolScopeService* self);
static gboolean unity_protocol_scope_service_dbus_interface_set_property (GDBusConnection* connection,
                                                                   const gchar* sender,
                                                                   const gchar* object_path,
                                                                   const gchar* interface_name,
                                                                   const gchar* property_name,
                                                                   GVariant* value,
                                                                   GError** error,
                                                                   gpointer user_data);
static void _dbus_unity_protocol_scope_service_category_order_changed (GObject* _sender,
                                                                const gchar* channel_id,
                                                                guint32* new_order,
                                                                int new_order_length1,
                                                                gpointer* _data);
static void _dbus_unity_protocol_scope_service_filter_settings_changed (GObject* _sender,
                                                                 const gchar* channel_id,
                                                                 GVariant* filter_rows,
                                                                 gpointer* _data);
static void _dbus_unity_protocol_scope_service_results_invalidated (GObject* _sender,
                                                             guint channel_type,
                                                             gpointer* _data);
static void _unity_protocol_scope_service_unregister_object (gpointer user_data);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);

static const GDBusErrorEntry unity_protocol_scope_error_entries[] = {{UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, "com.canonical.Unity.ScopeError.RequestFailed"}, {UNITY_PROTOCOL_SCOPE_ERROR_DATA_MISMATCH, "com.canonical.Unity.ScopeError.DataMismatch"}, {UNITY_PROTOCOL_SCOPE_ERROR_INVALID_CHANNEL, "com.canonical.Unity.ScopeError.InvalidChannel"}, {UNITY_PROTOCOL_SCOPE_ERROR_SEARCH_CANCELLED, "com.canonical.Unity.ScopeError.SearchCancelled"}, {UNITY_PROTOCOL_SCOPE_ERROR_DISABLED_CONTENT, "com.canonical.Unity.ScopeError.DisabledContent"}, {UNITY_PROTOCOL_SCOPE_ERROR_UNKNOWN, "com.canonical.Unity.ScopeError.Unknown"}};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_activate_channel_id = {-1, "channel_id", "s"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_activate_result_arr = {-1, "result_arr", "av"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_activate_action_type = {-1, "action_type", "u"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_activate_hints = {-1, "hints", "a{sv}"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_activate_result = {-1, "result", "(sua{sv})"};
static const GDBusArgInfo * const _unity_protocol_scope_service_dbus_arg_info_activate_in[] = {&_unity_protocol_scope_service_dbus_arg_info_activate_channel_id, &_unity_protocol_scope_service_dbus_arg_info_activate_result_arr, &_unity_protocol_scope_service_dbus_arg_info_activate_action_type, &_unity_protocol_scope_service_dbus_arg_info_activate_hints, NULL};
static const GDBusArgInfo * const _unity_protocol_scope_service_dbus_arg_info_activate_out[] = {&_unity_protocol_scope_service_dbus_arg_info_activate_result, NULL};
static const GDBusMethodInfo _unity_protocol_scope_service_dbus_method_info_activate = {-1, "Activate", (GDBusArgInfo **) (&_unity_protocol_scope_service_dbus_arg_info_activate_in), (GDBusArgInfo **) (&_unity_protocol_scope_service_dbus_arg_info_activate_out)};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_search_channel_id = {-1, "channel_id", "s"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_search_search_string = {-1, "search_string", "s"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_search_hints = {-1, "hints", "a{sv}"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_search_result = {-1, "result", "a{sv}"};
static const GDBusArgInfo * const _unity_protocol_scope_service_dbus_arg_info_search_in[] = {&_unity_protocol_scope_service_dbus_arg_info_search_channel_id, &_unity_protocol_scope_service_dbus_arg_info_search_search_string, &_unity_protocol_scope_service_dbus_arg_info_search_hints, NULL};
static const GDBusArgInfo * const _unity_protocol_scope_service_dbus_arg_info_search_out[] = {&_unity_protocol_scope_service_dbus_arg_info_search_result, NULL};
static const GDBusMethodInfo _unity_protocol_scope_service_dbus_method_info_search = {-1, "Search", (GDBusArgInfo **) (&_unity_protocol_scope_service_dbus_arg_info_search_in), (GDBusArgInfo **) (&_unity_protocol_scope_service_dbus_arg_info_search_out)};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_open_channel_channel_type = {-1, "channel_type", "u"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_open_channel_hints = {-1, "hints", "a{sv}"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_open_channel_out_hints = {-1, "out_hints", "a{sv}"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_open_channel_result = {-1, "result", "s"};
static const GDBusArgInfo * const _unity_protocol_scope_service_dbus_arg_info_open_channel_in[] = {&_unity_protocol_scope_service_dbus_arg_info_open_channel_channel_type, &_unity_protocol_scope_service_dbus_arg_info_open_channel_hints, NULL};
static const GDBusArgInfo * const _unity_protocol_scope_service_dbus_arg_info_open_channel_out[] = {&_unity_protocol_scope_service_dbus_arg_info_open_channel_out_hints, &_unity_protocol_scope_service_dbus_arg_info_open_channel_result, NULL};
static const GDBusMethodInfo _unity_protocol_scope_service_dbus_method_info_open_channel = {-1, "OpenChannel", (GDBusArgInfo **) (&_unity_protocol_scope_service_dbus_arg_info_open_channel_in), (GDBusArgInfo **) (&_unity_protocol_scope_service_dbus_arg_info_open_channel_out)};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_close_channel_channel_id = {-1, "channel_id", "s"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_close_channel_hints = {-1, "hints", "a{sv}"};
static const GDBusArgInfo * const _unity_protocol_scope_service_dbus_arg_info_close_channel_in[] = {&_unity_protocol_scope_service_dbus_arg_info_close_channel_channel_id, &_unity_protocol_scope_service_dbus_arg_info_close_channel_hints, NULL};
static const GDBusArgInfo * const _unity_protocol_scope_service_dbus_arg_info_close_channel_out[] = {NULL};
static const GDBusMethodInfo _unity_protocol_scope_service_dbus_method_info_close_channel = {-1, "CloseChannel", (GDBusArgInfo **) (&_unity_protocol_scope_service_dbus_arg_info_close_channel_in), (GDBusArgInfo **) (&_unity_protocol_scope_service_dbus_arg_info_close_channel_out)};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_push_results_channel_id = {-1, "channel_id", "s"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_push_results_search_string = {-1, "search_string", "s"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_push_results_source_scope_id = {-1, "source_scope_id", "s"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_push_results_result_variant = {-1, "result_variant", "v"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_push_results_categories = {-1, "categories", "as"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_push_results_result = {-1, "result", "a{sv}"};
static const GDBusArgInfo * const _unity_protocol_scope_service_dbus_arg_info_push_results_in[] = {&_unity_protocol_scope_service_dbus_arg_info_push_results_channel_id, &_unity_protocol_scope_service_dbus_arg_info_push_results_search_string, &_unity_protocol_scope_service_dbus_arg_info_push_results_source_scope_id, &_unity_protocol_scope_service_dbus_arg_info_push_results_result_variant, &_unity_protocol_scope_service_dbus_arg_info_push_results_categories, NULL};
static const GDBusArgInfo * const _unity_protocol_scope_service_dbus_arg_info_push_results_out[] = {&_unity_protocol_scope_service_dbus_arg_info_push_results_result, NULL};
static const GDBusMethodInfo _unity_protocol_scope_service_dbus_method_info_push_results = {-1, "PushResults", (GDBusArgInfo **) (&_unity_protocol_scope_service_dbus_arg_info_push_results_in), (GDBusArgInfo **) (&_unity_protocol_scope_service_dbus_arg_info_push_results_out)};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_set_view_type_view_type = {-1, "view_type", "u"};
static const GDBusArgInfo * const _unity_protocol_scope_service_dbus_arg_info_set_view_type_in[] = {&_unity_protocol_scope_service_dbus_arg_info_set_view_type_view_type, NULL};
static const GDBusArgInfo * const _unity_protocol_scope_service_dbus_arg_info_set_view_type_out[] = {NULL};
static const GDBusMethodInfo _unity_protocol_scope_service_dbus_method_info_set_view_type = {-1, "SetViewType", (GDBusArgInfo **) (&_unity_protocol_scope_service_dbus_arg_info_set_view_type_in), (GDBusArgInfo **) (&_unity_protocol_scope_service_dbus_arg_info_set_view_type_out)};
static const GDBusMethodInfo * const _unity_protocol_scope_service_dbus_method_info[] = {&_unity_protocol_scope_service_dbus_method_info_activate, &_unity_protocol_scope_service_dbus_method_info_search, &_unity_protocol_scope_service_dbus_method_info_open_channel, &_unity_protocol_scope_service_dbus_method_info_close_channel, &_unity_protocol_scope_service_dbus_method_info_push_results, &_unity_protocol_scope_service_dbus_method_info_set_view_type, NULL};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_category_order_changed_channel_id = {-1, "channel_id", "s"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_category_order_changed_new_order = {-1, "new_order", "au"};
static const GDBusArgInfo * const _unity_protocol_scope_service_dbus_arg_info_category_order_changed[] = {&_unity_protocol_scope_service_dbus_arg_info_category_order_changed_channel_id, &_unity_protocol_scope_service_dbus_arg_info_category_order_changed_new_order, NULL};
static const GDBusSignalInfo _unity_protocol_scope_service_dbus_signal_info_category_order_changed = {-1, "CategoryOrderChanged", (GDBusArgInfo **) (&_unity_protocol_scope_service_dbus_arg_info_category_order_changed)};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_filter_settings_changed_channel_id = {-1, "channel_id", "s"};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_filter_settings_changed_filter_rows = {-1, "filter_rows", "a(ssssa{sv}bbb)"};
static const GDBusArgInfo * const _unity_protocol_scope_service_dbus_arg_info_filter_settings_changed[] = {&_unity_protocol_scope_service_dbus_arg_info_filter_settings_changed_channel_id, &_unity_protocol_scope_service_dbus_arg_info_filter_settings_changed_filter_rows, NULL};
static const GDBusSignalInfo _unity_protocol_scope_service_dbus_signal_info_filter_settings_changed = {-1, "FilterSettingsChanged", (GDBusArgInfo **) (&_unity_protocol_scope_service_dbus_arg_info_filter_settings_changed)};
static const GDBusArgInfo _unity_protocol_scope_service_dbus_arg_info_results_invalidated_channel_type = {-1, "channel_type", "u"};
static const GDBusArgInfo * const _unity_protocol_scope_service_dbus_arg_info_results_invalidated[] = {&_unity_protocol_scope_service_dbus_arg_info_results_invalidated_channel_type, NULL};
static const GDBusSignalInfo _unity_protocol_scope_service_dbus_signal_info_results_invalidated = {-1, "ResultsInvalidated", (GDBusArgInfo **) (&_unity_protocol_scope_service_dbus_arg_info_results_invalidated)};
static const GDBusSignalInfo * const _unity_protocol_scope_service_dbus_signal_info[] = {&_unity_protocol_scope_service_dbus_signal_info_category_order_changed, &_unity_protocol_scope_service_dbus_signal_info_filter_settings_changed, &_unity_protocol_scope_service_dbus_signal_info_results_invalidated, NULL};
static const GDBusPropertyInfo _unity_protocol_scope_service_dbus_property_info_protocol_version = {-1, "ProtocolVersion", "i", G_DBUS_PROPERTY_INFO_FLAGS_READABLE};
static const GDBusPropertyInfo _unity_protocol_scope_service_dbus_property_info_visible = {-1, "Visible", "b", G_DBUS_PROPERTY_INFO_FLAGS_READABLE};
static const GDBusPropertyInfo _unity_protocol_scope_service_dbus_property_info_is_master = {-1, "IsMaster", "b", G_DBUS_PROPERTY_INFO_FLAGS_READABLE};
static const GDBusPropertyInfo _unity_protocol_scope_service_dbus_property_info_search_hint = {-1, "SearchHint", "s", G_DBUS_PROPERTY_INFO_FLAGS_READABLE};
static const GDBusPropertyInfo _unity_protocol_scope_service_dbus_property_info_metadata = {-1, "Metadata", "a{ss}", G_DBUS_PROPERTY_INFO_FLAGS_READABLE};
static const GDBusPropertyInfo _unity_protocol_scope_service_dbus_property_info_optional_metadata = {-1, "OptionalMetadata", "a{ss}", G_DBUS_PROPERTY_INFO_FLAGS_READABLE};
static const GDBusPropertyInfo _unity_protocol_scope_service_dbus_property_info_categories = {-1, "Categories", "v", G_DBUS_PROPERTY_INFO_FLAGS_READABLE};
static const GDBusPropertyInfo _unity_protocol_scope_service_dbus_property_info_filters = {-1, "Filters", "v", G_DBUS_PROPERTY_INFO_FLAGS_READABLE};
static const GDBusPropertyInfo _unity_protocol_scope_service_dbus_property_info_hints = {-1, "Hints", "a{sv}", G_DBUS_PROPERTY_INFO_FLAGS_READABLE};
static const GDBusPropertyInfo * const _unity_protocol_scope_service_dbus_property_info[] = {&_unity_protocol_scope_service_dbus_property_info_protocol_version, &_unity_protocol_scope_service_dbus_property_info_visible, &_unity_protocol_scope_service_dbus_property_info_is_master, &_unity_protocol_scope_service_dbus_property_info_search_hint, &_unity_protocol_scope_service_dbus_property_info_metadata, &_unity_protocol_scope_service_dbus_property_info_optional_metadata, &_unity_protocol_scope_service_dbus_property_info_categories, &_unity_protocol_scope_service_dbus_property_info_filters, &_unity_protocol_scope_service_dbus_property_info_hints, NULL};
static const GDBusInterfaceInfo _unity_protocol_scope_service_dbus_interface_info = {-1, "com.canonical.Unity.Scope", (GDBusMethodInfo **) (&_unity_protocol_scope_service_dbus_method_info), (GDBusSignalInfo **) (&_unity_protocol_scope_service_dbus_signal_info), (GDBusPropertyInfo **) (&_unity_protocol_scope_service_dbus_property_info)};
static const GDBusInterfaceVTable _unity_protocol_scope_service_dbus_interface_vtable = {unity_protocol_scope_service_dbus_interface_method_call, unity_protocol_scope_service_dbus_interface_get_property, unity_protocol_scope_service_dbus_interface_set_property};

static gpointer
_g_hash_table_ref0 (gpointer self)
{
	return self ? g_hash_table_ref (self) : NULL;
}


void
unity_protocol_activation_reply_raw_copy (const UnityProtocolActivationReplyRaw* self,
                                          UnityProtocolActivationReplyRaw* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	guint _tmp2_;
	GHashTable* _tmp3_;
	GHashTable* _tmp4_;
	_tmp0_ = (*self).uri;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).uri);
	(*dest).uri = _tmp1_;
	_tmp2_ = (*self).handled;
	(*dest).handled = _tmp2_;
	_tmp3_ = (*self).hints;
	_tmp4_ = _g_hash_table_ref0 (_tmp3_);
	_g_hash_table_unref0 ((*dest).hints);
	(*dest).hints = _tmp4_;
}


void
unity_protocol_activation_reply_raw_destroy (UnityProtocolActivationReplyRaw* self)
{
	_g_free0 ((*self).uri);
	_g_hash_table_unref0 ((*self).hints);
}


UnityProtocolActivationReplyRaw*
unity_protocol_activation_reply_raw_dup (const UnityProtocolActivationReplyRaw* self)
{
	UnityProtocolActivationReplyRaw* dup;
	dup = g_new0 (UnityProtocolActivationReplyRaw, 1);
	unity_protocol_activation_reply_raw_copy (self, dup);
	return dup;
}


void
unity_protocol_activation_reply_raw_free (UnityProtocolActivationReplyRaw* self)
{
	unity_protocol_activation_reply_raw_destroy (self);
	g_free (self);
}


GType
unity_protocol_activation_reply_raw_get_type (void)
{
	static volatile gsize unity_protocol_activation_reply_raw_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_activation_reply_raw_type_id__volatile)) {
		GType unity_protocol_activation_reply_raw_type_id;
		unity_protocol_activation_reply_raw_type_id = g_boxed_type_register_static ("UnityProtocolActivationReplyRaw", (GBoxedCopyFunc) unity_protocol_activation_reply_raw_dup, (GBoxedFreeFunc) unity_protocol_activation_reply_raw_free);
		g_once_init_leave (&unity_protocol_activation_reply_raw_type_id__volatile, unity_protocol_activation_reply_raw_type_id);
	}
	return unity_protocol_activation_reply_raw_type_id__volatile;
}


GType
unity_protocol_handled_type_get_type (void)
{
	static volatile gsize unity_protocol_handled_type_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_handled_type_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_PROTOCOL_HANDLED_TYPE_NOT_HANDLED, "UNITY_PROTOCOL_HANDLED_TYPE_NOT_HANDLED", "not-handled"}, {UNITY_PROTOCOL_HANDLED_TYPE_SHOW_DASH, "UNITY_PROTOCOL_HANDLED_TYPE_SHOW_DASH", "show-dash"}, {UNITY_PROTOCOL_HANDLED_TYPE_HIDE_DASH, "UNITY_PROTOCOL_HANDLED_TYPE_HIDE_DASH", "hide-dash"}, {UNITY_PROTOCOL_HANDLED_TYPE_GOTO_DASH_URI, "UNITY_PROTOCOL_HANDLED_TYPE_GOTO_DASH_URI", "goto-dash-uri"}, {UNITY_PROTOCOL_HANDLED_TYPE_SHOW_PREVIEW, "UNITY_PROTOCOL_HANDLED_TYPE_SHOW_PREVIEW", "show-preview"}, {UNITY_PROTOCOL_HANDLED_TYPE_PERFORM_SEARCH, "UNITY_PROTOCOL_HANDLED_TYPE_PERFORM_SEARCH", "perform-search"}, {0, NULL, NULL}};
		GType unity_protocol_handled_type_type_id;
		unity_protocol_handled_type_type_id = g_enum_register_static ("UnityProtocolHandledType", values);
		g_once_init_leave (&unity_protocol_handled_type_type_id__volatile, unity_protocol_handled_type_type_id);
	}
	return unity_protocol_handled_type_type_id__volatile;
}


GType
unity_protocol_action_type_get_type (void)
{
	static volatile gsize unity_protocol_action_type_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_action_type_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_PROTOCOL_ACTION_TYPE_ACTIVATE_RESULT, "UNITY_PROTOCOL_ACTION_TYPE_ACTIVATE_RESULT", "activate-result"}, {UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_RESULT, "UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_RESULT", "preview-result"}, {UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_ACTION, "UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_ACTION", "preview-action"}, {UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_BUILTIN_ACTION, "UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_BUILTIN_ACTION", "preview-builtin-action"}, {0, NULL, NULL}};
		GType unity_protocol_action_type_type_id;
		unity_protocol_action_type_type_id = g_enum_register_static ("UnityProtocolActionType", values);
		g_once_init_leave (&unity_protocol_action_type_type_id__volatile, unity_protocol_action_type_type_id);
	}
	return unity_protocol_action_type_type_id__volatile;
}


GType
unity_protocol_view_type_get_type (void)
{
	static volatile gsize unity_protocol_view_type_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_view_type_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_PROTOCOL_VIEW_TYPE_HIDDEN, "UNITY_PROTOCOL_VIEW_TYPE_HIDDEN", "hidden"}, {UNITY_PROTOCOL_VIEW_TYPE_HOME_VIEW, "UNITY_PROTOCOL_VIEW_TYPE_HOME_VIEW", "home-view"}, {UNITY_PROTOCOL_VIEW_TYPE_LENS_VIEW, "UNITY_PROTOCOL_VIEW_TYPE_LENS_VIEW", "lens-view"}, {0, NULL, NULL}};
		GType unity_protocol_view_type_type_id;
		unity_protocol_view_type_type_id = g_enum_register_static ("UnityProtocolViewType", values);
		g_once_init_leave (&unity_protocol_view_type_type_id__volatile, unity_protocol_view_type_type_id);
	}
	return unity_protocol_view_type_type_id__volatile;
}


GType
unity_protocol_channel_type_get_type (void)
{
	static volatile gsize unity_protocol_channel_type_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_channel_type_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_PROTOCOL_CHANNEL_TYPE_DEFAULT, "UNITY_PROTOCOL_CHANNEL_TYPE_DEFAULT", "default"}, {UNITY_PROTOCOL_CHANNEL_TYPE_GLOBAL, "UNITY_PROTOCOL_CHANNEL_TYPE_GLOBAL", "global"}, {0, NULL, NULL}};
		GType unity_protocol_channel_type_type_id;
		unity_protocol_channel_type_type_id = g_enum_register_static ("UnityProtocolChannelType", values);
		g_once_init_leave (&unity_protocol_channel_type_type_id__volatile, unity_protocol_channel_type_type_id);
	}
	return unity_protocol_channel_type_type_id__volatile;
}


UnityProtocolChannelFlags
unity_protocol_channel_flags_from_hints (GHashTable* hints)
{
	UnityProtocolChannelFlags result = 0;
	UnityProtocolChannelFlags flags = 0;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp3_ = FALSE;
	g_return_val_if_fail (hints != NULL, 0);
	flags = 0;
	if (g_hash_table_contains (hints, UNITY_PROTOCOL_CHANNEL_PRIVATE_HINT)) {
		gconstpointer _tmp1_;
		_tmp1_ = g_hash_table_lookup (hints, UNITY_PROTOCOL_CHANNEL_PRIVATE_HINT);
		_tmp0_ = g_variant_get_boolean ((GVariant*) _tmp1_);
	} else {
		_tmp0_ = FALSE;
	}
	if (_tmp0_) {
		UnityProtocolChannelFlags _tmp2_;
		_tmp2_ = flags;
		flags = _tmp2_ | UNITY_PROTOCOL_CHANNEL_FLAGS_PRIVATE;
	}
	if (g_hash_table_contains (hints, UNITY_PROTOCOL_CHANNEL_DIFF_MODEL_HINT)) {
		gconstpointer _tmp4_;
		_tmp4_ = g_hash_table_lookup (hints, UNITY_PROTOCOL_CHANNEL_DIFF_MODEL_HINT);
		_tmp3_ = g_variant_get_boolean ((GVariant*) _tmp4_);
	} else {
		_tmp3_ = FALSE;
	}
	if (_tmp3_) {
		UnityProtocolChannelFlags _tmp5_;
		_tmp5_ = flags;
		flags = _tmp5_ | UNITY_PROTOCOL_CHANNEL_FLAGS_DIFF_CHANGES;
	}
	result = flags;
	return result;
}


GType
unity_protocol_channel_flags_get_type (void)
{
	static volatile gsize unity_protocol_channel_flags_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_channel_flags_type_id__volatile)) {
		static const GFlagsValue values[] = {{UNITY_PROTOCOL_CHANNEL_FLAGS_NONE, "UNITY_PROTOCOL_CHANNEL_FLAGS_NONE", "none"}, {UNITY_PROTOCOL_CHANNEL_FLAGS_PRIVATE, "UNITY_PROTOCOL_CHANNEL_FLAGS_PRIVATE", "private"}, {UNITY_PROTOCOL_CHANNEL_FLAGS_NO_FILTERING, "UNITY_PROTOCOL_CHANNEL_FLAGS_NO_FILTERING", "no-filtering"}, {UNITY_PROTOCOL_CHANNEL_FLAGS_DIFF_CHANGES, "UNITY_PROTOCOL_CHANNEL_FLAGS_DIFF_CHANGES", "diff-changes"}, {0, NULL, NULL}};
		GType unity_protocol_channel_flags_type_id;
		unity_protocol_channel_flags_type_id = g_flags_register_static ("UnityProtocolChannelFlags", values);
		g_once_init_leave (&unity_protocol_channel_flags_type_id__volatile, unity_protocol_channel_flags_type_id);
	}
	return unity_protocol_channel_flags_type_id__volatile;
}


GQuark
unity_protocol_scope_error_quark (void)
{
	static volatile gsize unity_protocol_scope_error_quark_volatile = 0;
	g_dbus_error_register_error_domain ("unity_protocol_scope_error-quark", &unity_protocol_scope_error_quark_volatile, unity_protocol_scope_error_entries, G_N_ELEMENTS (unity_protocol_scope_error_entries));
	return (GQuark) unity_protocol_scope_error_quark_volatile;
}


void
unity_protocol_scope_service_activate (UnityProtocolScopeService* self,
                                       const gchar* channel_id,
                                       GVariant** result_arr,
                                       int result_arr_length1,
                                       guint action_type,
                                       GHashTable* hints,
                                       GCancellable* cancellable,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_)
{
	UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->activate (self, channel_id, result_arr, result_arr_length1, action_type, hints, cancellable, _callback_, _user_data_);
}


void
unity_protocol_scope_service_activate_finish (UnityProtocolScopeService* self,
                                              GAsyncResult* _res_,
                                              UnityProtocolActivationReplyRaw* result,
                                              GError** error)
{
	UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->activate_finish (self, _res_, result, error);
}


void
unity_protocol_scope_service_search (UnityProtocolScopeService* self,
                                     const gchar* channel_id,
                                     const gchar* search_string,
                                     GHashTable* hints,
                                     GCancellable* cancellable,
                                     GAsyncReadyCallback _callback_,
                                     gpointer _user_data_)
{
	UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->search (self, channel_id, search_string, hints, cancellable, _callback_, _user_data_);
}


GHashTable*
unity_protocol_scope_service_search_finish (UnityProtocolScopeService* self,
                                            GAsyncResult* _res_,
                                            GError** error)
{
	return UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->search_finish (self, _res_, error);
}


void
unity_protocol_scope_service_open_channel (UnityProtocolScopeService* self,
                                           guint channel_type,
                                           GHashTable* hints,
                                           GCancellable* cancellable,
                                           const char* sender,
                                           GAsyncReadyCallback _callback_,
                                           gpointer _user_data_)
{
	UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->open_channel (self, channel_type, hints, cancellable, sender, _callback_, _user_data_);
}


gchar*
unity_protocol_scope_service_open_channel_finish (UnityProtocolScopeService* self,
                                                  GAsyncResult* _res_,
                                                  GHashTable* * out_hints,
                                                  GError** error)
{
	return UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->open_channel_finish (self, _res_, out_hints, error);
}


void
unity_protocol_scope_service_close_channel (UnityProtocolScopeService* self,
                                            const gchar* channel_id,
                                            GHashTable* hints,
                                            GCancellable* cancellable,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_)
{
	UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->close_channel (self, channel_id, hints, cancellable, _callback_, _user_data_);
}


void
unity_protocol_scope_service_close_channel_finish (UnityProtocolScopeService* self,
                                                   GAsyncResult* _res_,
                                                   GError** error)
{
	UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->close_channel_finish (self, _res_, error);
}


void
unity_protocol_scope_service_push_results (UnityProtocolScopeService* self,
                                           const gchar* channel_id,
                                           const gchar* search_string,
                                           const gchar* source_scope_id,
                                           GVariant* result_variant,
                                           gchar** categories,
                                           int categories_length1,
                                           GCancellable* cancellable,
                                           GAsyncReadyCallback _callback_,
                                           gpointer _user_data_)
{
	UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->push_results (self, channel_id, search_string, source_scope_id, result_variant, categories, categories_length1, cancellable, _callback_, _user_data_);
}


GHashTable*
unity_protocol_scope_service_push_results_finish (UnityProtocolScopeService* self,
                                                  GAsyncResult* _res_,
                                                  GError** error)
{
	return UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->push_results_finish (self, _res_, error);
}


void
unity_protocol_scope_service_set_view_type (UnityProtocolScopeService* self,
                                            guint view_type,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_)
{
	UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->set_view_type (self, view_type, _callback_, _user_data_);
}


void
unity_protocol_scope_service_set_view_type_finish (UnityProtocolScopeService* self,
                                                   GAsyncResult* _res_,
                                                   GError** error)
{
	UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->set_view_type_finish (self, _res_, error);
}


gint
unity_protocol_scope_service_get_protocol_version (UnityProtocolScopeService* self)
{
	g_return_val_if_fail (self != NULL, 0);
	return UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->get_protocol_version (self);
}


gboolean
unity_protocol_scope_service_get_visible (UnityProtocolScopeService* self)
{
	g_return_val_if_fail (self != NULL, FALSE);
	return UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->get_visible (self);
}


gboolean
unity_protocol_scope_service_get_is_master (UnityProtocolScopeService* self)
{
	g_return_val_if_fail (self != NULL, FALSE);
	return UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->get_is_master (self);
}


gchar*
unity_protocol_scope_service_get_search_hint (UnityProtocolScopeService* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->get_search_hint (self);
}


GHashTable*
unity_protocol_scope_service_get_metadata (UnityProtocolScopeService* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->get_metadata (self);
}


GHashTable*
unity_protocol_scope_service_get_optional_metadata (UnityProtocolScopeService* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->get_optional_metadata (self);
}


GVariant*
unity_protocol_scope_service_get_categories (UnityProtocolScopeService* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->get_categories (self);
}


GVariant*
unity_protocol_scope_service_get_filters (UnityProtocolScopeService* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->get_filters (self);
}


GHashTable*
unity_protocol_scope_service_get_hints (UnityProtocolScopeService* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE (self)->get_hints (self);
}


static void
g_cclosure_user_marshal_VOID__STRING_POINTER_INT (GClosure * closure,
                                                  GValue * return_value,
                                                  guint n_param_values,
                                                  const GValue * param_values,
                                                  gpointer invocation_hint,
                                                  gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__STRING_POINTER_INT) (gpointer data1, const char* arg_1, gpointer arg_2, gint arg_3, gpointer data2);
	register GMarshalFunc_VOID__STRING_POINTER_INT callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
	g_return_if_fail (n_param_values == 4);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_VOID__STRING_POINTER_INT) (marshal_data ? marshal_data : cc->callback);
	callback (data1, g_value_get_string (param_values + 1), g_value_get_pointer (param_values + 2), g_value_get_int (param_values + 3), data2);
}


static void
g_cclosure_user_marshal_VOID__STRING_VARIANT (GClosure * closure,
                                              GValue * return_value,
                                              guint n_param_values,
                                              const GValue * param_values,
                                              gpointer invocation_hint,
                                              gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__STRING_VARIANT) (gpointer data1, const char* arg_1, gpointer arg_2, gpointer data2);
	register GMarshalFunc_VOID__STRING_VARIANT callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
	g_return_if_fail (n_param_values == 3);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_VOID__STRING_VARIANT) (marshal_data ? marshal_data : cc->callback);
	callback (data1, g_value_get_string (param_values + 1), g_value_get_variant (param_values + 2), data2);
}


static void
unity_protocol_scope_service_default_init (UnityProtocolScopeServiceIface * iface)
{
	unity_protocol_scope_service_signals[UNITY_PROTOCOL_SCOPE_SERVICE_CATEGORY_ORDER_CHANGED_SIGNAL] = g_signal_new ("category-order-changed", UNITY_PROTOCOL_TYPE_SCOPE_SERVICE, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__STRING_POINTER_INT, G_TYPE_NONE, 3, G_TYPE_STRING, G_TYPE_POINTER, G_TYPE_INT);
	unity_protocol_scope_service_signals[UNITY_PROTOCOL_SCOPE_SERVICE_FILTER_SETTINGS_CHANGED_SIGNAL] = g_signal_new ("filter-settings-changed", UNITY_PROTOCOL_TYPE_SCOPE_SERVICE, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__STRING_VARIANT, G_TYPE_NONE, 2, G_TYPE_STRING, G_TYPE_VARIANT);
	unity_protocol_scope_service_signals[UNITY_PROTOCOL_SCOPE_SERVICE_RESULTS_INVALIDATED_SIGNAL] = g_signal_new ("results-invalidated", UNITY_PROTOCOL_TYPE_SCOPE_SERVICE, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__UINT, G_TYPE_NONE, 1, G_TYPE_UINT);
}


/**
 * ScopeService:
 *
 * The Scope interface exported on DBus
 */
GType
unity_protocol_scope_service_get_type (void)
{
	static volatile gsize unity_protocol_scope_service_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_scope_service_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityProtocolScopeServiceIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_protocol_scope_service_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
		GType unity_protocol_scope_service_type_id;
		unity_protocol_scope_service_type_id = g_type_register_static (G_TYPE_INTERFACE, "UnityProtocolScopeService", &g_define_type_info, 0);
		g_type_interface_add_prerequisite (unity_protocol_scope_service_type_id, G_TYPE_OBJECT);
		g_type_set_qdata (unity_protocol_scope_service_type_id, g_quark_from_static_string ("vala-dbus-proxy-type"), (void*) unity_protocol_scope_service_proxy_get_type);
		g_type_set_qdata (unity_protocol_scope_service_type_id, g_quark_from_static_string ("vala-dbus-interface-name"), "com.canonical.Unity.Scope");
		g_type_set_qdata (unity_protocol_scope_service_type_id, g_quark_from_static_string ("vala-dbus-interface-info"), (void*) (&_unity_protocol_scope_service_dbus_interface_info));
		g_type_set_qdata (unity_protocol_scope_service_type_id, g_quark_from_static_string ("vala-dbus-register-object"), (void*) unity_protocol_scope_service_register_object);
		g_once_init_leave (&unity_protocol_scope_service_type_id__volatile, unity_protocol_scope_service_type_id);
	}
	return unity_protocol_scope_service_type_id__volatile;
}


G_DEFINE_TYPE_EXTENDED (UnityProtocolScopeServiceProxy, unity_protocol_scope_service_proxy, G_TYPE_DBUS_PROXY, 0, G_IMPLEMENT_INTERFACE (UNITY_PROTOCOL_TYPE_SCOPE_SERVICE, unity_protocol_scope_service_proxy_unity_protocol_scope_service_interface_init) )
static void
unity_protocol_scope_service_proxy_class_init (UnityProtocolScopeServiceProxyClass* klass)
{
	G_DBUS_PROXY_CLASS (klass)->g_signal = unity_protocol_scope_service_proxy_g_signal;
}


static void
_dbus_handle_unity_protocol_scope_service_category_order_changed (UnityProtocolScopeService* self,
                                                                  GVariant* parameters)
{
	GVariantIter _arguments_iter;
	gchar* channel_id = NULL;
	GVariant* _tmp0_;
	guint32* new_order = NULL;
	int new_order_length1;
	GVariant* _tmp1_;
	guint32* _tmp2_;
	int _tmp2__length;
	int _tmp2__size;
	int _tmp2__length1;
	GVariantIter _tmp3_;
	GVariant* _tmp4_;
	g_variant_iter_init (&_arguments_iter, parameters);
	_tmp0_ = g_variant_iter_next_value (&_arguments_iter);
	channel_id = g_variant_dup_string (_tmp0_, NULL);
	g_variant_unref (_tmp0_);
	new_order_length1 = 0;
	_tmp1_ = g_variant_iter_next_value (&_arguments_iter);
	_tmp2_ = g_new (guint32, 5);
	_tmp2__length = 0;
	_tmp2__size = 4;
	_tmp2__length1 = 0;
	g_variant_iter_init (&_tmp3_, _tmp1_);
	for (; (_tmp4_ = g_variant_iter_next_value (&_tmp3_)) != NULL; _tmp2__length1++) {
		if (_tmp2__size == _tmp2__length) {
			_tmp2__size = 2 * _tmp2__size;
			_tmp2_ = g_renew (guint32, _tmp2_, _tmp2__size + 1);
		}
		_tmp2_[_tmp2__length++] = g_variant_get_uint32 (_tmp4_);
		g_variant_unref (_tmp4_);
	}
	new_order_length1 = _tmp2__length1;
	new_order = _tmp2_;
	g_variant_unref (_tmp1_);
	g_signal_emit_by_name (self, "category-order-changed", channel_id, new_order, new_order_length1);
	_g_free0 (channel_id);
	new_order = (g_free (new_order), NULL);
}


static void
_dbus_handle_unity_protocol_scope_service_filter_settings_changed (UnityProtocolScopeService* self,
                                                                   GVariant* parameters)
{
	GVariantIter _arguments_iter;
	gchar* channel_id = NULL;
	GVariant* _tmp5_;
	GVariant* filter_rows = NULL;
	g_variant_iter_init (&_arguments_iter, parameters);
	_tmp5_ = g_variant_iter_next_value (&_arguments_iter);
	channel_id = g_variant_dup_string (_tmp5_, NULL);
	g_variant_unref (_tmp5_);
	filter_rows = g_variant_iter_next_value (&_arguments_iter);
	g_signal_emit_by_name (self, "filter-settings-changed", channel_id, filter_rows);
	_g_free0 (channel_id);
	_g_variant_unref0 (filter_rows);
}


static void
_dbus_handle_unity_protocol_scope_service_results_invalidated (UnityProtocolScopeService* self,
                                                               GVariant* parameters)
{
	GVariantIter _arguments_iter;
	guint channel_type = 0U;
	GVariant* _tmp6_;
	g_variant_iter_init (&_arguments_iter, parameters);
	_tmp6_ = g_variant_iter_next_value (&_arguments_iter);
	channel_type = g_variant_get_uint32 (_tmp6_);
	g_variant_unref (_tmp6_);
	g_signal_emit_by_name (self, "results-invalidated", channel_type);
}


static void
unity_protocol_scope_service_proxy_g_signal (GDBusProxy* proxy,
                                             const gchar* sender_name,
                                             const gchar* signal_name,
                                             GVariant* parameters)
{
	if (strcmp (signal_name, "CategoryOrderChanged") == 0) {
		_dbus_handle_unity_protocol_scope_service_category_order_changed ((UnityProtocolScopeService*) proxy, parameters);
	} else if (strcmp (signal_name, "FilterSettingsChanged") == 0) {
		_dbus_handle_unity_protocol_scope_service_filter_settings_changed ((UnityProtocolScopeService*) proxy, parameters);
	} else if (strcmp (signal_name, "ResultsInvalidated") == 0) {
		_dbus_handle_unity_protocol_scope_service_results_invalidated ((UnityProtocolScopeService*) proxy, parameters);
	}
}


static void
unity_protocol_scope_service_proxy_init (UnityProtocolScopeServiceProxy* self)
{
}


static void
_vala_g_async_ready_callback (GObject *source_object,
                              GAsyncResult *res,
                              void *user_data)
{
	g_task_return_pointer (user_data, g_object_ref (res), g_object_unref);
	g_object_unref (user_data);
}


static void
unity_protocol_scope_service_proxy_activate_async (UnityProtocolScopeService* self,
                                                   const gchar* channel_id,
                                                   GVariant** result_arr,
                                                   int result_arr_length1,
                                                   guint action_type,
                                                   GHashTable* hints,
                                                   GCancellable* cancellable,
                                                   GAsyncReadyCallback _callback_,
                                                   gpointer _user_data_)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	GVariant** _tmp7_;
	GVariantBuilder _tmp8_;
	int _tmp9_;
	GVariantBuilder _tmp10_;
	GHashTableIter _tmp11_;
	gpointer _tmp12_;
	gpointer _tmp13_;
	G_IO_ERROR;
	UNITY_PROTOCOL_SCOPE_ERROR;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "com.canonical.Unity.Scope", "Activate");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (channel_id));
	_tmp7_ = result_arr;
	g_variant_builder_init (&_tmp8_, G_VARIANT_TYPE ("av"));
	for (_tmp9_ = 0; _tmp9_ < result_arr_length1; _tmp9_++) {
		g_variant_builder_add_value (&_tmp8_, g_variant_new_variant (*_tmp7_));
		_tmp7_++;
	}
	g_variant_builder_add_value (&_arguments_builder, g_variant_builder_end (&_tmp8_));
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_uint32 (action_type));
	g_hash_table_iter_init (&_tmp11_, hints);
	g_variant_builder_init (&_tmp10_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp11_, &_tmp12_, &_tmp13_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp12_;
		_value = (GVariant*) _tmp13_;
		g_variant_builder_add (&_tmp10_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	g_variant_builder_add_value (&_arguments_builder, g_variant_builder_end (&_tmp10_));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	g_dbus_connection_send_message_with_reply (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, cancellable, _vala_g_async_ready_callback, g_task_new ((GObject *) self, NULL, _callback_, _user_data_));
	g_object_unref (_message);
}


static void
unity_protocol_scope_service_proxy_activate_finish (UnityProtocolScopeService* self,
                                                    GAsyncResult* _res_,
                                                    UnityProtocolActivationReplyRaw* result,
                                                    GError** error)
{
	GAsyncResult *_inner_res;
	GDBusMessage *_reply_message;
	GVariant *_reply;
	GVariantIter _reply_iter;
	GVariant* _tmp14_;
	UnityProtocolActivationReplyRaw _tmp15_;
	GVariantIter _tmp16_;
	GVariant* _tmp17_;
	GVariant* _tmp18_;
	GVariant* _tmp19_;
	GHashTable* _tmp20_;
	GVariantIter _tmp21_;
	GVariant* _tmp22_;
	GVariant* _tmp23_;
	_inner_res = g_task_propagate_pointer ((GTask *) _res_, NULL);
	_reply_message = g_dbus_connection_send_message_with_reply_finish (g_dbus_proxy_get_connection ((GDBusProxy *) self), _inner_res, error);
	g_object_unref (_inner_res);
	if (!_reply_message) {
		return;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return;
	}
	_reply = g_dbus_message_get_body (_reply_message);
	g_variant_iter_init (&_reply_iter, _reply);
	_tmp14_ = g_variant_iter_next_value (&_reply_iter);
	g_variant_iter_init (&_tmp16_, _tmp14_);
	_tmp17_ = g_variant_iter_next_value (&_tmp16_);
	_tmp15_.uri = g_variant_dup_string (_tmp17_, NULL);
	g_variant_unref (_tmp17_);
	_tmp18_ = g_variant_iter_next_value (&_tmp16_);
	_tmp15_.handled = g_variant_get_uint32 (_tmp18_);
	g_variant_unref (_tmp18_);
	_tmp19_ = g_variant_iter_next_value (&_tmp16_);
	_tmp20_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
	g_variant_iter_init (&_tmp21_, _tmp19_);
	while (g_variant_iter_loop (&_tmp21_, "{?*}", &_tmp22_, &_tmp23_)) {
		g_hash_table_insert (_tmp20_, g_variant_dup_string (_tmp22_, NULL), g_variant_get_variant (_tmp23_));
	}
	_tmp15_.hints = _tmp20_;
	g_variant_unref (_tmp19_);
	*result = _tmp15_;
	g_variant_unref (_tmp14_);
	g_object_unref (_reply_message);
}


static void
unity_protocol_scope_service_proxy_search_async (UnityProtocolScopeService* self,
                                                 const gchar* channel_id,
                                                 const gchar* search_string,
                                                 GHashTable* hints,
                                                 GCancellable* cancellable,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	GVariantBuilder _tmp24_;
	GHashTableIter _tmp25_;
	gpointer _tmp26_;
	gpointer _tmp27_;
	G_IO_ERROR;
	UNITY_PROTOCOL_SCOPE_ERROR;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "com.canonical.Unity.Scope", "Search");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (channel_id));
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (search_string));
	g_hash_table_iter_init (&_tmp25_, hints);
	g_variant_builder_init (&_tmp24_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp25_, &_tmp26_, &_tmp27_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp26_;
		_value = (GVariant*) _tmp27_;
		g_variant_builder_add (&_tmp24_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	g_variant_builder_add_value (&_arguments_builder, g_variant_builder_end (&_tmp24_));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	g_dbus_connection_send_message_with_reply (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, cancellable, _vala_g_async_ready_callback, g_task_new ((GObject *) self, NULL, _callback_, _user_data_));
	g_object_unref (_message);
}


static GHashTable*
unity_protocol_scope_service_proxy_search_finish (UnityProtocolScopeService* self,
                                                  GAsyncResult* _res_,
                                                  GError** error)
{
	GAsyncResult *_inner_res;
	GDBusMessage *_reply_message;
	GVariant *_reply;
	GVariantIter _reply_iter;
	GHashTable* _result = NULL;
	GVariant* _tmp28_;
	GHashTable* _tmp29_;
	GVariantIter _tmp30_;
	GVariant* _tmp31_;
	GVariant* _tmp32_;
	_inner_res = g_task_propagate_pointer ((GTask *) _res_, NULL);
	_reply_message = g_dbus_connection_send_message_with_reply_finish (g_dbus_proxy_get_connection ((GDBusProxy *) self), _inner_res, error);
	g_object_unref (_inner_res);
	if (!_reply_message) {
		return NULL;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return NULL;
	}
	_reply = g_dbus_message_get_body (_reply_message);
	g_variant_iter_init (&_reply_iter, _reply);
	_tmp28_ = g_variant_iter_next_value (&_reply_iter);
	_tmp29_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
	g_variant_iter_init (&_tmp30_, _tmp28_);
	while (g_variant_iter_loop (&_tmp30_, "{?*}", &_tmp31_, &_tmp32_)) {
		g_hash_table_insert (_tmp29_, g_variant_dup_string (_tmp31_, NULL), g_variant_get_variant (_tmp32_));
	}
	_result = _tmp29_;
	g_variant_unref (_tmp28_);
	g_object_unref (_reply_message);
	return _result;
}


static void
unity_protocol_scope_service_proxy_open_channel_async (UnityProtocolScopeService* self,
                                                       guint channel_type,
                                                       GHashTable* hints,
                                                       GCancellable* cancellable,
                                                       const char* sender,
                                                       GAsyncReadyCallback _callback_,
                                                       gpointer _user_data_)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	GVariantBuilder _tmp33_;
	GHashTableIter _tmp34_;
	gpointer _tmp35_;
	gpointer _tmp36_;
	G_IO_ERROR;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "com.canonical.Unity.Scope", "OpenChannel");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_uint32 (channel_type));
	g_hash_table_iter_init (&_tmp34_, hints);
	g_variant_builder_init (&_tmp33_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp34_, &_tmp35_, &_tmp36_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp35_;
		_value = (GVariant*) _tmp36_;
		g_variant_builder_add (&_tmp33_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	g_variant_builder_add_value (&_arguments_builder, g_variant_builder_end (&_tmp33_));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	g_dbus_connection_send_message_with_reply (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, cancellable, _vala_g_async_ready_callback, g_task_new ((GObject *) self, NULL, _callback_, _user_data_));
	g_object_unref (_message);
}


static gchar*
unity_protocol_scope_service_proxy_open_channel_finish (UnityProtocolScopeService* self,
                                                        GAsyncResult* _res_,
                                                        GHashTable* * out_hints,
                                                        GError** error)
{
	GAsyncResult *_inner_res;
	GDBusMessage *_reply_message;
	GVariant *_reply;
	GVariantIter _reply_iter;
	GHashTable* _vala_out_hints = NULL;
	GVariant* _tmp37_;
	GHashTable* _tmp38_;
	GVariantIter _tmp39_;
	GVariant* _tmp40_;
	GVariant* _tmp41_;
	gchar* _result = NULL;
	GVariant* _tmp42_;
	_inner_res = g_task_propagate_pointer ((GTask *) _res_, NULL);
	_reply_message = g_dbus_connection_send_message_with_reply_finish (g_dbus_proxy_get_connection ((GDBusProxy *) self), _inner_res, error);
	g_object_unref (_inner_res);
	if (!_reply_message) {
		return NULL;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return NULL;
	}
	_reply = g_dbus_message_get_body (_reply_message);
	g_variant_iter_init (&_reply_iter, _reply);
	_tmp37_ = g_variant_iter_next_value (&_reply_iter);
	_tmp38_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
	g_variant_iter_init (&_tmp39_, _tmp37_);
	while (g_variant_iter_loop (&_tmp39_, "{?*}", &_tmp40_, &_tmp41_)) {
		g_hash_table_insert (_tmp38_, g_variant_dup_string (_tmp40_, NULL), g_variant_get_variant (_tmp41_));
	}
	_vala_out_hints = _tmp38_;
	g_variant_unref (_tmp37_);
	*out_hints = _vala_out_hints;
	_tmp42_ = g_variant_iter_next_value (&_reply_iter);
	_result = g_variant_dup_string (_tmp42_, NULL);
	g_variant_unref (_tmp42_);
	g_object_unref (_reply_message);
	return _result;
}


static void
unity_protocol_scope_service_proxy_close_channel_async (UnityProtocolScopeService* self,
                                                        const gchar* channel_id,
                                                        GHashTable* hints,
                                                        GCancellable* cancellable,
                                                        GAsyncReadyCallback _callback_,
                                                        gpointer _user_data_)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	GVariantBuilder _tmp43_;
	GHashTableIter _tmp44_;
	gpointer _tmp45_;
	gpointer _tmp46_;
	G_IO_ERROR;
	UNITY_PROTOCOL_SCOPE_ERROR;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "com.canonical.Unity.Scope", "CloseChannel");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (channel_id));
	g_hash_table_iter_init (&_tmp44_, hints);
	g_variant_builder_init (&_tmp43_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp44_, &_tmp45_, &_tmp46_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp45_;
		_value = (GVariant*) _tmp46_;
		g_variant_builder_add (&_tmp43_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	g_variant_builder_add_value (&_arguments_builder, g_variant_builder_end (&_tmp43_));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	g_dbus_connection_send_message_with_reply (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, cancellable, _vala_g_async_ready_callback, g_task_new ((GObject *) self, NULL, _callback_, _user_data_));
	g_object_unref (_message);
}


static void
unity_protocol_scope_service_proxy_close_channel_finish (UnityProtocolScopeService* self,
                                                         GAsyncResult* _res_,
                                                         GError** error)
{
	GAsyncResult *_inner_res;
	GDBusMessage *_reply_message;
	_inner_res = g_task_propagate_pointer ((GTask *) _res_, NULL);
	_reply_message = g_dbus_connection_send_message_with_reply_finish (g_dbus_proxy_get_connection ((GDBusProxy *) self), _inner_res, error);
	g_object_unref (_inner_res);
	if (!_reply_message) {
		return;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return;
	}
	g_object_unref (_reply_message);
}


static void
unity_protocol_scope_service_proxy_push_results_async (UnityProtocolScopeService* self,
                                                       const gchar* channel_id,
                                                       const gchar* search_string,
                                                       const gchar* source_scope_id,
                                                       GVariant* result_variant,
                                                       gchar** categories,
                                                       int categories_length1,
                                                       GCancellable* cancellable,
                                                       GAsyncReadyCallback _callback_,
                                                       gpointer _user_data_)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	gchar** _tmp47_;
	GVariantBuilder _tmp48_;
	int _tmp49_;
	G_IO_ERROR;
	UNITY_PROTOCOL_SCOPE_ERROR;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "com.canonical.Unity.Scope", "PushResults");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (channel_id));
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (search_string));
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (source_scope_id));
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_variant (result_variant));
	_tmp47_ = categories;
	g_variant_builder_init (&_tmp48_, G_VARIANT_TYPE ("as"));
	for (_tmp49_ = 0; _tmp49_ < categories_length1; _tmp49_++) {
		g_variant_builder_add_value (&_tmp48_, g_variant_new_string (*_tmp47_));
		_tmp47_++;
	}
	g_variant_builder_add_value (&_arguments_builder, g_variant_builder_end (&_tmp48_));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	g_dbus_connection_send_message_with_reply (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, cancellable, _vala_g_async_ready_callback, g_task_new ((GObject *) self, NULL, _callback_, _user_data_));
	g_object_unref (_message);
}


static GHashTable*
unity_protocol_scope_service_proxy_push_results_finish (UnityProtocolScopeService* self,
                                                        GAsyncResult* _res_,
                                                        GError** error)
{
	GAsyncResult *_inner_res;
	GDBusMessage *_reply_message;
	GVariant *_reply;
	GVariantIter _reply_iter;
	GHashTable* _result = NULL;
	GVariant* _tmp50_;
	GHashTable* _tmp51_;
	GVariantIter _tmp52_;
	GVariant* _tmp53_;
	GVariant* _tmp54_;
	_inner_res = g_task_propagate_pointer ((GTask *) _res_, NULL);
	_reply_message = g_dbus_connection_send_message_with_reply_finish (g_dbus_proxy_get_connection ((GDBusProxy *) self), _inner_res, error);
	g_object_unref (_inner_res);
	if (!_reply_message) {
		return NULL;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return NULL;
	}
	_reply = g_dbus_message_get_body (_reply_message);
	g_variant_iter_init (&_reply_iter, _reply);
	_tmp50_ = g_variant_iter_next_value (&_reply_iter);
	_tmp51_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
	g_variant_iter_init (&_tmp52_, _tmp50_);
	while (g_variant_iter_loop (&_tmp52_, "{?*}", &_tmp53_, &_tmp54_)) {
		g_hash_table_insert (_tmp51_, g_variant_dup_string (_tmp53_, NULL), g_variant_get_variant (_tmp54_));
	}
	_result = _tmp51_;
	g_variant_unref (_tmp50_);
	g_object_unref (_reply_message);
	return _result;
}


static void
unity_protocol_scope_service_proxy_set_view_type_async (UnityProtocolScopeService* self,
                                                        guint view_type,
                                                        GAsyncReadyCallback _callback_,
                                                        gpointer _user_data_)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	G_IO_ERROR;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "com.canonical.Unity.Scope", "SetViewType");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_uint32 (view_type));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	g_dbus_connection_send_message_with_reply (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, _vala_g_async_ready_callback, g_task_new ((GObject *) self, NULL, _callback_, _user_data_));
	g_object_unref (_message);
}


static void
unity_protocol_scope_service_proxy_set_view_type_finish (UnityProtocolScopeService* self,
                                                         GAsyncResult* _res_,
                                                         GError** error)
{
	GAsyncResult *_inner_res;
	GDBusMessage *_reply_message;
	_inner_res = g_task_propagate_pointer ((GTask *) _res_, NULL);
	_reply_message = g_dbus_connection_send_message_with_reply_finish (g_dbus_proxy_get_connection ((GDBusProxy *) self), _inner_res, error);
	g_object_unref (_inner_res);
	if (!_reply_message) {
		return;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return;
	}
	g_object_unref (_reply_message);
}


static gint
unity_protocol_scope_service_dbus_proxy_get_protocol_version (UnityProtocolScopeService* self)
{
	GVariant *_inner_reply;
	gint _result;
	_inner_reply = g_dbus_proxy_get_cached_property ((GDBusProxy *) self, "ProtocolVersion");
	if (!_inner_reply) {
		GVariant *_arguments;
		GVariant *_reply;
		GVariantBuilder _arguments_builder;
		g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("com.canonical.Unity.Scope"));
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("ProtocolVersion"));
		_arguments = g_variant_builder_end (&_arguments_builder);
		_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Get", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
		if (!_reply) {
			gint _tmp55_ = 0;
			return _tmp55_;
		}
		g_variant_get (_reply, "(v)", &_inner_reply);
		g_variant_unref (_reply);
	}
	_result = g_variant_get_int32 (_inner_reply);
	g_variant_unref (_inner_reply);
	return _result;
}


static gboolean
unity_protocol_scope_service_dbus_proxy_get_visible (UnityProtocolScopeService* self)
{
	GVariant *_inner_reply;
	gboolean _result;
	_inner_reply = g_dbus_proxy_get_cached_property ((GDBusProxy *) self, "Visible");
	if (!_inner_reply) {
		GVariant *_arguments;
		GVariant *_reply;
		GVariantBuilder _arguments_builder;
		g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("com.canonical.Unity.Scope"));
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("Visible"));
		_arguments = g_variant_builder_end (&_arguments_builder);
		_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Get", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
		if (!_reply) {
			gboolean _tmp56_ = FALSE;
			return _tmp56_;
		}
		g_variant_get (_reply, "(v)", &_inner_reply);
		g_variant_unref (_reply);
	}
	_result = g_variant_get_boolean (_inner_reply);
	g_variant_unref (_inner_reply);
	return _result;
}


static gboolean
unity_protocol_scope_service_dbus_proxy_get_is_master (UnityProtocolScopeService* self)
{
	GVariant *_inner_reply;
	gboolean _result;
	_inner_reply = g_dbus_proxy_get_cached_property ((GDBusProxy *) self, "IsMaster");
	if (!_inner_reply) {
		GVariant *_arguments;
		GVariant *_reply;
		GVariantBuilder _arguments_builder;
		g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("com.canonical.Unity.Scope"));
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("IsMaster"));
		_arguments = g_variant_builder_end (&_arguments_builder);
		_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Get", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
		if (!_reply) {
			gboolean _tmp57_ = FALSE;
			return _tmp57_;
		}
		g_variant_get (_reply, "(v)", &_inner_reply);
		g_variant_unref (_reply);
	}
	_result = g_variant_get_boolean (_inner_reply);
	g_variant_unref (_inner_reply);
	return _result;
}


static gchar*
unity_protocol_scope_service_dbus_proxy_get_search_hint (UnityProtocolScopeService* self)
{
	GVariant *_inner_reply;
	gchar* _result;
	_inner_reply = g_dbus_proxy_get_cached_property ((GDBusProxy *) self, "SearchHint");
	if (!_inner_reply) {
		GVariant *_arguments;
		GVariant *_reply;
		GVariantBuilder _arguments_builder;
		g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("com.canonical.Unity.Scope"));
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("SearchHint"));
		_arguments = g_variant_builder_end (&_arguments_builder);
		_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Get", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
		if (!_reply) {
			return NULL;
		}
		g_variant_get (_reply, "(v)", &_inner_reply);
		g_variant_unref (_reply);
	}
	_result = g_variant_dup_string (_inner_reply, NULL);
	g_variant_unref (_inner_reply);
	return _result;
}


static GHashTable*
unity_protocol_scope_service_dbus_proxy_get_metadata (UnityProtocolScopeService* self)
{
	GVariant *_inner_reply;
	GHashTable* _result;
	GHashTable* _tmp58_;
	GVariantIter _tmp59_;
	GVariant* _tmp60_;
	GVariant* _tmp61_;
	_inner_reply = g_dbus_proxy_get_cached_property ((GDBusProxy *) self, "Metadata");
	if (!_inner_reply) {
		GVariant *_arguments;
		GVariant *_reply;
		GVariantBuilder _arguments_builder;
		g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("com.canonical.Unity.Scope"));
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("Metadata"));
		_arguments = g_variant_builder_end (&_arguments_builder);
		_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Get", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
		if (!_reply) {
			return NULL;
		}
		g_variant_get (_reply, "(v)", &_inner_reply);
		g_variant_unref (_reply);
	}
	_tmp58_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, g_free);
	g_variant_iter_init (&_tmp59_, _inner_reply);
	while (g_variant_iter_loop (&_tmp59_, "{?*}", &_tmp60_, &_tmp61_)) {
		g_hash_table_insert (_tmp58_, g_variant_dup_string (_tmp60_, NULL), g_variant_dup_string (_tmp61_, NULL));
	}
	_result = _tmp58_;
	g_variant_unref (_inner_reply);
	return _result;
}


static GHashTable*
unity_protocol_scope_service_dbus_proxy_get_optional_metadata (UnityProtocolScopeService* self)
{
	GVariant *_inner_reply;
	GHashTable* _result;
	GHashTable* _tmp62_;
	GVariantIter _tmp63_;
	GVariant* _tmp64_;
	GVariant* _tmp65_;
	_inner_reply = g_dbus_proxy_get_cached_property ((GDBusProxy *) self, "OptionalMetadata");
	if (!_inner_reply) {
		GVariant *_arguments;
		GVariant *_reply;
		GVariantBuilder _arguments_builder;
		g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("com.canonical.Unity.Scope"));
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("OptionalMetadata"));
		_arguments = g_variant_builder_end (&_arguments_builder);
		_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Get", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
		if (!_reply) {
			return NULL;
		}
		g_variant_get (_reply, "(v)", &_inner_reply);
		g_variant_unref (_reply);
	}
	_tmp62_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, g_free);
	g_variant_iter_init (&_tmp63_, _inner_reply);
	while (g_variant_iter_loop (&_tmp63_, "{?*}", &_tmp64_, &_tmp65_)) {
		g_hash_table_insert (_tmp62_, g_variant_dup_string (_tmp64_, NULL), g_variant_dup_string (_tmp65_, NULL));
	}
	_result = _tmp62_;
	g_variant_unref (_inner_reply);
	return _result;
}


static GVariant*
unity_protocol_scope_service_dbus_proxy_get_categories (UnityProtocolScopeService* self)
{
	GVariant *_inner_reply;
	GVariant* _result;
	_inner_reply = g_dbus_proxy_get_cached_property ((GDBusProxy *) self, "Categories");
	if (!_inner_reply) {
		GVariant *_arguments;
		GVariant *_reply;
		GVariantBuilder _arguments_builder;
		g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("com.canonical.Unity.Scope"));
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("Categories"));
		_arguments = g_variant_builder_end (&_arguments_builder);
		_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Get", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
		if (!_reply) {
			return NULL;
		}
		g_variant_get (_reply, "(v)", &_inner_reply);
		g_variant_unref (_reply);
	}
	_result = g_variant_get_variant (_inner_reply);
	g_variant_unref (_inner_reply);
	return _result;
}


static GVariant*
unity_protocol_scope_service_dbus_proxy_get_filters (UnityProtocolScopeService* self)
{
	GVariant *_inner_reply;
	GVariant* _result;
	_inner_reply = g_dbus_proxy_get_cached_property ((GDBusProxy *) self, "Filters");
	if (!_inner_reply) {
		GVariant *_arguments;
		GVariant *_reply;
		GVariantBuilder _arguments_builder;
		g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("com.canonical.Unity.Scope"));
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("Filters"));
		_arguments = g_variant_builder_end (&_arguments_builder);
		_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Get", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
		if (!_reply) {
			return NULL;
		}
		g_variant_get (_reply, "(v)", &_inner_reply);
		g_variant_unref (_reply);
	}
	_result = g_variant_get_variant (_inner_reply);
	g_variant_unref (_inner_reply);
	return _result;
}


static GHashTable*
unity_protocol_scope_service_dbus_proxy_get_hints (UnityProtocolScopeService* self)
{
	GVariant *_inner_reply;
	GHashTable* _result;
	GHashTable* _tmp66_;
	GVariantIter _tmp67_;
	GVariant* _tmp68_;
	GVariant* _tmp69_;
	_inner_reply = g_dbus_proxy_get_cached_property ((GDBusProxy *) self, "Hints");
	if (!_inner_reply) {
		GVariant *_arguments;
		GVariant *_reply;
		GVariantBuilder _arguments_builder;
		g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("com.canonical.Unity.Scope"));
		g_variant_builder_add_value (&_arguments_builder, g_variant_new_string ("Hints"));
		_arguments = g_variant_builder_end (&_arguments_builder);
		_reply = g_dbus_proxy_call_sync ((GDBusProxy *) self, "org.freedesktop.DBus.Properties.Get", _arguments, G_DBUS_CALL_FLAGS_NONE, -1, NULL, NULL);
		if (!_reply) {
			return NULL;
		}
		g_variant_get (_reply, "(v)", &_inner_reply);
		g_variant_unref (_reply);
	}
	_tmp66_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
	g_variant_iter_init (&_tmp67_, _inner_reply);
	while (g_variant_iter_loop (&_tmp67_, "{?*}", &_tmp68_, &_tmp69_)) {
		g_hash_table_insert (_tmp66_, g_variant_dup_string (_tmp68_, NULL), g_variant_get_variant (_tmp69_));
	}
	_result = _tmp66_;
	g_variant_unref (_inner_reply);
	return _result;
}


static void
unity_protocol_scope_service_proxy_unity_protocol_scope_service_interface_init (UnityProtocolScopeServiceIface* iface)
{
	iface->activate = unity_protocol_scope_service_proxy_activate_async;
	iface->activate_finish = unity_protocol_scope_service_proxy_activate_finish;
	iface->search = unity_protocol_scope_service_proxy_search_async;
	iface->search_finish = unity_protocol_scope_service_proxy_search_finish;
	iface->open_channel = unity_protocol_scope_service_proxy_open_channel_async;
	iface->open_channel_finish = unity_protocol_scope_service_proxy_open_channel_finish;
	iface->close_channel = unity_protocol_scope_service_proxy_close_channel_async;
	iface->close_channel_finish = unity_protocol_scope_service_proxy_close_channel_finish;
	iface->push_results = unity_protocol_scope_service_proxy_push_results_async;
	iface->push_results_finish = unity_protocol_scope_service_proxy_push_results_finish;
	iface->set_view_type = unity_protocol_scope_service_proxy_set_view_type_async;
	iface->set_view_type_finish = unity_protocol_scope_service_proxy_set_view_type_finish;
	iface->get_protocol_version = unity_protocol_scope_service_dbus_proxy_get_protocol_version;
	iface->get_visible = unity_protocol_scope_service_dbus_proxy_get_visible;
	iface->get_is_master = unity_protocol_scope_service_dbus_proxy_get_is_master;
	iface->get_search_hint = unity_protocol_scope_service_dbus_proxy_get_search_hint;
	iface->get_metadata = unity_protocol_scope_service_dbus_proxy_get_metadata;
	iface->get_optional_metadata = unity_protocol_scope_service_dbus_proxy_get_optional_metadata;
	iface->get_categories = unity_protocol_scope_service_dbus_proxy_get_categories;
	iface->get_filters = unity_protocol_scope_service_dbus_proxy_get_filters;
	iface->get_hints = unity_protocol_scope_service_dbus_proxy_get_hints;
}


static void
_dbus_unity_protocol_scope_service_activate (UnityProtocolScopeService* self,
                                             GVariant* _parameters_,
                                             GDBusMethodInvocation* invocation)
{
	GVariantIter _arguments_iter;
	gchar* channel_id = NULL;
	GVariant* _tmp70_;
	GVariant** result_arr = NULL;
	int result_arr_length1 = 0;
	GVariant* _tmp71_;
	GVariant** _tmp72_;
	int _tmp72__length;
	int _tmp72__size;
	int _tmp72__length1;
	GVariantIter _tmp73_;
	GVariant* _tmp74_;
	guint action_type = 0U;
	GVariant* _tmp75_;
	GHashTable* hints = NULL;
	GVariant* _tmp76_;
	GHashTable* _tmp77_;
	GVariantIter _tmp78_;
	GVariant* _tmp79_;
	GVariant* _tmp80_;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp70_ = g_variant_iter_next_value (&_arguments_iter);
	channel_id = g_variant_dup_string (_tmp70_, NULL);
	g_variant_unref (_tmp70_);
	_tmp71_ = g_variant_iter_next_value (&_arguments_iter);
	_tmp72_ = g_new (GVariant*, 5);
	_tmp72__length = 0;
	_tmp72__size = 4;
	_tmp72__length1 = 0;
	g_variant_iter_init (&_tmp73_, _tmp71_);
	for (; (_tmp74_ = g_variant_iter_next_value (&_tmp73_)) != NULL; _tmp72__length1++) {
		if (_tmp72__size == _tmp72__length) {
			_tmp72__size = 2 * _tmp72__size;
			_tmp72_ = g_renew (GVariant*, _tmp72_, _tmp72__size + 1);
		}
		_tmp72_[_tmp72__length++] = g_variant_get_variant (_tmp74_);
		g_variant_unref (_tmp74_);
	}
	result_arr_length1 = _tmp72__length1;
	_tmp72_[_tmp72__length] = NULL;
	result_arr = _tmp72_;
	g_variant_unref (_tmp71_);
	_tmp75_ = g_variant_iter_next_value (&_arguments_iter);
	action_type = g_variant_get_uint32 (_tmp75_);
	g_variant_unref (_tmp75_);
	_tmp76_ = g_variant_iter_next_value (&_arguments_iter);
	_tmp77_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
	g_variant_iter_init (&_tmp78_, _tmp76_);
	while (g_variant_iter_loop (&_tmp78_, "{?*}", &_tmp79_, &_tmp80_)) {
		g_hash_table_insert (_tmp77_, g_variant_dup_string (_tmp79_, NULL), g_variant_get_variant (_tmp80_));
	}
	hints = _tmp77_;
	g_variant_unref (_tmp76_);
	unity_protocol_scope_service_activate (self, channel_id, result_arr, result_arr_length1, action_type, hints, NULL, (GAsyncReadyCallback) _dbus_unity_protocol_scope_service_activate_ready, invocation);
	_g_free0 (channel_id);
	result_arr = (_vala_array_free (result_arr, result_arr_length1, (GDestroyNotify) g_variant_unref), NULL);
	_g_hash_table_unref0 (hints);
}


static void
_dbus_unity_protocol_scope_service_activate_ready (GObject * source_object,
                                                   GAsyncResult * _res_,
                                                   gpointer _user_data_)
{
	GDBusMethodInvocation * invocation;
	GError* error = NULL;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	UnityProtocolActivationReplyRaw result = {0};
	GVariantBuilder _tmp81_;
	GVariantBuilder _tmp82_;
	GHashTableIter _tmp83_;
	gpointer _tmp84_;
	gpointer _tmp85_;
	invocation = _user_data_;
	unity_protocol_scope_service_activate_finish ((UnityProtocolScopeService*) source_object, _res_, &result, &error);
	if (error) {
		g_dbus_method_invocation_return_gerror (invocation, error);
		g_error_free (error);
		return;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_init (&_tmp81_, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_tmp81_, g_variant_new_string (result.uri));
	g_variant_builder_add_value (&_tmp81_, g_variant_new_uint32 (result.handled));
	g_hash_table_iter_init (&_tmp83_, result.hints);
	g_variant_builder_init (&_tmp82_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp83_, &_tmp84_, &_tmp85_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp84_;
		_value = (GVariant*) _tmp85_;
		g_variant_builder_add (&_tmp82_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	g_variant_builder_add_value (&_tmp81_, g_variant_builder_end (&_tmp82_));
	g_variant_builder_add_value (&_reply_builder, g_variant_builder_end (&_tmp81_));
	unity_protocol_activation_reply_raw_destroy (&result);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
}


static void
_dbus_unity_protocol_scope_service_search (UnityProtocolScopeService* self,
                                           GVariant* _parameters_,
                                           GDBusMethodInvocation* invocation)
{
	GVariantIter _arguments_iter;
	gchar* channel_id = NULL;
	GVariant* _tmp86_;
	gchar* search_string = NULL;
	GVariant* _tmp87_;
	GHashTable* hints = NULL;
	GVariant* _tmp88_;
	GHashTable* _tmp89_;
	GVariantIter _tmp90_;
	GVariant* _tmp91_;
	GVariant* _tmp92_;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp86_ = g_variant_iter_next_value (&_arguments_iter);
	channel_id = g_variant_dup_string (_tmp86_, NULL);
	g_variant_unref (_tmp86_);
	_tmp87_ = g_variant_iter_next_value (&_arguments_iter);
	search_string = g_variant_dup_string (_tmp87_, NULL);
	g_variant_unref (_tmp87_);
	_tmp88_ = g_variant_iter_next_value (&_arguments_iter);
	_tmp89_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
	g_variant_iter_init (&_tmp90_, _tmp88_);
	while (g_variant_iter_loop (&_tmp90_, "{?*}", &_tmp91_, &_tmp92_)) {
		g_hash_table_insert (_tmp89_, g_variant_dup_string (_tmp91_, NULL), g_variant_get_variant (_tmp92_));
	}
	hints = _tmp89_;
	g_variant_unref (_tmp88_);
	unity_protocol_scope_service_search (self, channel_id, search_string, hints, NULL, (GAsyncReadyCallback) _dbus_unity_protocol_scope_service_search_ready, invocation);
	_g_free0 (channel_id);
	_g_free0 (search_string);
	_g_hash_table_unref0 (hints);
}


static void
_dbus_unity_protocol_scope_service_search_ready (GObject * source_object,
                                                 GAsyncResult * _res_,
                                                 gpointer _user_data_)
{
	GDBusMethodInvocation * invocation;
	GError* error = NULL;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	GHashTable* result;
	GVariantBuilder _tmp93_;
	GHashTableIter _tmp94_;
	gpointer _tmp95_;
	gpointer _tmp96_;
	invocation = _user_data_;
	result = unity_protocol_scope_service_search_finish ((UnityProtocolScopeService*) source_object, _res_, &error);
	if (error) {
		g_dbus_method_invocation_return_gerror (invocation, error);
		g_error_free (error);
		return;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	g_hash_table_iter_init (&_tmp94_, result);
	g_variant_builder_init (&_tmp93_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp94_, &_tmp95_, &_tmp96_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp95_;
		_value = (GVariant*) _tmp96_;
		g_variant_builder_add (&_tmp93_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	g_variant_builder_add_value (&_reply_builder, g_variant_builder_end (&_tmp93_));
	_g_hash_table_unref0 (result);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
}


static void
_dbus_unity_protocol_scope_service_open_channel (UnityProtocolScopeService* self,
                                                 GVariant* _parameters_,
                                                 GDBusMethodInvocation* invocation)
{
	GVariantIter _arguments_iter;
	guint channel_type = 0U;
	GVariant* _tmp97_;
	GHashTable* hints = NULL;
	GVariant* _tmp98_;
	GHashTable* _tmp99_;
	GVariantIter _tmp100_;
	GVariant* _tmp101_;
	GVariant* _tmp102_;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp97_ = g_variant_iter_next_value (&_arguments_iter);
	channel_type = g_variant_get_uint32 (_tmp97_);
	g_variant_unref (_tmp97_);
	_tmp98_ = g_variant_iter_next_value (&_arguments_iter);
	_tmp99_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
	g_variant_iter_init (&_tmp100_, _tmp98_);
	while (g_variant_iter_loop (&_tmp100_, "{?*}", &_tmp101_, &_tmp102_)) {
		g_hash_table_insert (_tmp99_, g_variant_dup_string (_tmp101_, NULL), g_variant_get_variant (_tmp102_));
	}
	hints = _tmp99_;
	g_variant_unref (_tmp98_);
	unity_protocol_scope_service_open_channel (self, channel_type, hints, NULL, g_dbus_method_invocation_get_sender (invocation), (GAsyncReadyCallback) _dbus_unity_protocol_scope_service_open_channel_ready, invocation);
	_g_hash_table_unref0 (hints);
}


static void
_dbus_unity_protocol_scope_service_open_channel_ready (GObject * source_object,
                                                       GAsyncResult * _res_,
                                                       gpointer _user_data_)
{
	GDBusMethodInvocation * invocation;
	GError* error = NULL;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	GHashTable* out_hints = NULL;
	GVariantBuilder _tmp103_;
	GHashTableIter _tmp104_;
	gpointer _tmp105_;
	gpointer _tmp106_;
	gchar* result;
	invocation = _user_data_;
	result = unity_protocol_scope_service_open_channel_finish ((UnityProtocolScopeService*) source_object, _res_, &out_hints, &error);
	if (error) {
		g_dbus_method_invocation_return_gerror (invocation, error);
		g_error_free (error);
		return;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	g_hash_table_iter_init (&_tmp104_, out_hints);
	g_variant_builder_init (&_tmp103_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp104_, &_tmp105_, &_tmp106_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp105_;
		_value = (GVariant*) _tmp106_;
		g_variant_builder_add (&_tmp103_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	g_variant_builder_add_value (&_reply_builder, g_variant_builder_end (&_tmp103_));
	g_variant_builder_add_value (&_reply_builder, g_variant_new_string (result));
	_g_free0 (result);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
	_g_hash_table_unref0 (out_hints);
}


static void
_dbus_unity_protocol_scope_service_close_channel (UnityProtocolScopeService* self,
                                                  GVariant* _parameters_,
                                                  GDBusMethodInvocation* invocation)
{
	GVariantIter _arguments_iter;
	gchar* channel_id = NULL;
	GVariant* _tmp107_;
	GHashTable* hints = NULL;
	GVariant* _tmp108_;
	GHashTable* _tmp109_;
	GVariantIter _tmp110_;
	GVariant* _tmp111_;
	GVariant* _tmp112_;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp107_ = g_variant_iter_next_value (&_arguments_iter);
	channel_id = g_variant_dup_string (_tmp107_, NULL);
	g_variant_unref (_tmp107_);
	_tmp108_ = g_variant_iter_next_value (&_arguments_iter);
	_tmp109_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
	g_variant_iter_init (&_tmp110_, _tmp108_);
	while (g_variant_iter_loop (&_tmp110_, "{?*}", &_tmp111_, &_tmp112_)) {
		g_hash_table_insert (_tmp109_, g_variant_dup_string (_tmp111_, NULL), g_variant_get_variant (_tmp112_));
	}
	hints = _tmp109_;
	g_variant_unref (_tmp108_);
	unity_protocol_scope_service_close_channel (self, channel_id, hints, NULL, (GAsyncReadyCallback) _dbus_unity_protocol_scope_service_close_channel_ready, invocation);
	_g_free0 (channel_id);
	_g_hash_table_unref0 (hints);
}


static void
_dbus_unity_protocol_scope_service_close_channel_ready (GObject * source_object,
                                                        GAsyncResult * _res_,
                                                        gpointer _user_data_)
{
	GDBusMethodInvocation * invocation;
	GError* error = NULL;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	invocation = _user_data_;
	unity_protocol_scope_service_close_channel_finish ((UnityProtocolScopeService*) source_object, _res_, &error);
	if (error) {
		g_dbus_method_invocation_return_gerror (invocation, error);
		g_error_free (error);
		return;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
}


static void
_dbus_unity_protocol_scope_service_push_results (UnityProtocolScopeService* self,
                                                 GVariant* _parameters_,
                                                 GDBusMethodInvocation* invocation)
{
	GVariantIter _arguments_iter;
	gchar* channel_id = NULL;
	GVariant* _tmp113_;
	gchar* search_string = NULL;
	GVariant* _tmp114_;
	gchar* source_scope_id = NULL;
	GVariant* _tmp115_;
	GVariant* result_variant = NULL;
	GVariant* _tmp116_;
	gchar** categories = NULL;
	int categories_length1 = 0;
	GVariant* _tmp117_;
	gchar** _tmp118_;
	int _tmp118__length;
	int _tmp118__size;
	int _tmp118__length1;
	GVariantIter _tmp119_;
	GVariant* _tmp120_;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp113_ = g_variant_iter_next_value (&_arguments_iter);
	channel_id = g_variant_dup_string (_tmp113_, NULL);
	g_variant_unref (_tmp113_);
	_tmp114_ = g_variant_iter_next_value (&_arguments_iter);
	search_string = g_variant_dup_string (_tmp114_, NULL);
	g_variant_unref (_tmp114_);
	_tmp115_ = g_variant_iter_next_value (&_arguments_iter);
	source_scope_id = g_variant_dup_string (_tmp115_, NULL);
	g_variant_unref (_tmp115_);
	_tmp116_ = g_variant_iter_next_value (&_arguments_iter);
	result_variant = g_variant_get_variant (_tmp116_);
	g_variant_unref (_tmp116_);
	_tmp117_ = g_variant_iter_next_value (&_arguments_iter);
	_tmp118_ = g_new (gchar*, 5);
	_tmp118__length = 0;
	_tmp118__size = 4;
	_tmp118__length1 = 0;
	g_variant_iter_init (&_tmp119_, _tmp117_);
	for (; (_tmp120_ = g_variant_iter_next_value (&_tmp119_)) != NULL; _tmp118__length1++) {
		if (_tmp118__size == _tmp118__length) {
			_tmp118__size = 2 * _tmp118__size;
			_tmp118_ = g_renew (gchar*, _tmp118_, _tmp118__size + 1);
		}
		_tmp118_[_tmp118__length++] = g_variant_dup_string (_tmp120_, NULL);
		g_variant_unref (_tmp120_);
	}
	categories_length1 = _tmp118__length1;
	_tmp118_[_tmp118__length] = NULL;
	categories = _tmp118_;
	g_variant_unref (_tmp117_);
	unity_protocol_scope_service_push_results (self, channel_id, search_string, source_scope_id, result_variant, categories, categories_length1, NULL, (GAsyncReadyCallback) _dbus_unity_protocol_scope_service_push_results_ready, invocation);
	_g_free0 (channel_id);
	_g_free0 (search_string);
	_g_free0 (source_scope_id);
	_g_variant_unref0 (result_variant);
	categories = (_vala_array_free (categories, categories_length1, (GDestroyNotify) g_free), NULL);
}


static void
_dbus_unity_protocol_scope_service_push_results_ready (GObject * source_object,
                                                       GAsyncResult * _res_,
                                                       gpointer _user_data_)
{
	GDBusMethodInvocation * invocation;
	GError* error = NULL;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	GHashTable* result;
	GVariantBuilder _tmp121_;
	GHashTableIter _tmp122_;
	gpointer _tmp123_;
	gpointer _tmp124_;
	invocation = _user_data_;
	result = unity_protocol_scope_service_push_results_finish ((UnityProtocolScopeService*) source_object, _res_, &error);
	if (error) {
		g_dbus_method_invocation_return_gerror (invocation, error);
		g_error_free (error);
		return;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	g_hash_table_iter_init (&_tmp122_, result);
	g_variant_builder_init (&_tmp121_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp122_, &_tmp123_, &_tmp124_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp123_;
		_value = (GVariant*) _tmp124_;
		g_variant_builder_add (&_tmp121_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	g_variant_builder_add_value (&_reply_builder, g_variant_builder_end (&_tmp121_));
	_g_hash_table_unref0 (result);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
}


static void
_dbus_unity_protocol_scope_service_set_view_type (UnityProtocolScopeService* self,
                                                  GVariant* _parameters_,
                                                  GDBusMethodInvocation* invocation)
{
	GVariantIter _arguments_iter;
	guint view_type = 0U;
	GVariant* _tmp125_;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp125_ = g_variant_iter_next_value (&_arguments_iter);
	view_type = g_variant_get_uint32 (_tmp125_);
	g_variant_unref (_tmp125_);
	unity_protocol_scope_service_set_view_type (self, view_type, (GAsyncReadyCallback) _dbus_unity_protocol_scope_service_set_view_type_ready, invocation);
}


static void
_dbus_unity_protocol_scope_service_set_view_type_ready (GObject * source_object,
                                                        GAsyncResult * _res_,
                                                        gpointer _user_data_)
{
	GDBusMethodInvocation * invocation;
	GError* error = NULL;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	invocation = _user_data_;
	unity_protocol_scope_service_set_view_type_finish ((UnityProtocolScopeService*) source_object, _res_, &error);
	if (error) {
		g_dbus_method_invocation_return_gerror (invocation, error);
		g_error_free (error);
		return;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
}


static void
unity_protocol_scope_service_dbus_interface_method_call (GDBusConnection* connection,
                                                         const gchar* sender,
                                                         const gchar* object_path,
                                                         const gchar* interface_name,
                                                         const gchar* method_name,
                                                         GVariant* parameters,
                                                         GDBusMethodInvocation* invocation,
                                                         gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (method_name, "Activate") == 0) {
		_dbus_unity_protocol_scope_service_activate (object, parameters, invocation);
	} else if (strcmp (method_name, "Search") == 0) {
		_dbus_unity_protocol_scope_service_search (object, parameters, invocation);
	} else if (strcmp (method_name, "OpenChannel") == 0) {
		_dbus_unity_protocol_scope_service_open_channel (object, parameters, invocation);
	} else if (strcmp (method_name, "CloseChannel") == 0) {
		_dbus_unity_protocol_scope_service_close_channel (object, parameters, invocation);
	} else if (strcmp (method_name, "PushResults") == 0) {
		_dbus_unity_protocol_scope_service_push_results (object, parameters, invocation);
	} else if (strcmp (method_name, "SetViewType") == 0) {
		_dbus_unity_protocol_scope_service_set_view_type (object, parameters, invocation);
	} else {
		g_object_unref (invocation);
	}
}


static GVariant*
_dbus_unity_protocol_scope_service_get_protocol_version (UnityProtocolScopeService* self)
{
	gint result;
	GVariant* _reply;
	result = unity_protocol_scope_service_get_protocol_version (self);
	_reply = g_variant_new_int32 (result);
	return _reply;
}


static GVariant*
_dbus_unity_protocol_scope_service_get_visible (UnityProtocolScopeService* self)
{
	gboolean result;
	GVariant* _reply;
	result = unity_protocol_scope_service_get_visible (self);
	_reply = g_variant_new_boolean (result);
	return _reply;
}


static GVariant*
_dbus_unity_protocol_scope_service_get_is_master (UnityProtocolScopeService* self)
{
	gboolean result;
	GVariant* _reply;
	result = unity_protocol_scope_service_get_is_master (self);
	_reply = g_variant_new_boolean (result);
	return _reply;
}


static GVariant*
_dbus_unity_protocol_scope_service_get_search_hint (UnityProtocolScopeService* self)
{
	gchar* result;
	GVariant* _reply;
	result = unity_protocol_scope_service_get_search_hint (self);
	_reply = g_variant_new_string (result);
	_g_free0 (result);
	return _reply;
}


static GVariant*
_dbus_unity_protocol_scope_service_get_metadata (UnityProtocolScopeService* self)
{
	GHashTable* result;
	GVariant* _reply;
	GVariantBuilder _tmp126_;
	GHashTableIter _tmp127_;
	gpointer _tmp128_;
	gpointer _tmp129_;
	result = unity_protocol_scope_service_get_metadata (self);
	g_hash_table_iter_init (&_tmp127_, result);
	g_variant_builder_init (&_tmp126_, G_VARIANT_TYPE ("a{ss}"));
	while (g_hash_table_iter_next (&_tmp127_, &_tmp128_, &_tmp129_)) {
		gchar* _key;
		gchar* _value;
		_key = (gchar*) _tmp128_;
		_value = (gchar*) _tmp129_;
		g_variant_builder_add (&_tmp126_, "{?*}", g_variant_new_string (_key), g_variant_new_string (_value));
	}
	_reply = g_variant_builder_end (&_tmp126_);
	_g_hash_table_unref0 (result);
	return _reply;
}


static GVariant*
_dbus_unity_protocol_scope_service_get_optional_metadata (UnityProtocolScopeService* self)
{
	GHashTable* result;
	GVariant* _reply;
	GVariantBuilder _tmp130_;
	GHashTableIter _tmp131_;
	gpointer _tmp132_;
	gpointer _tmp133_;
	result = unity_protocol_scope_service_get_optional_metadata (self);
	g_hash_table_iter_init (&_tmp131_, result);
	g_variant_builder_init (&_tmp130_, G_VARIANT_TYPE ("a{ss}"));
	while (g_hash_table_iter_next (&_tmp131_, &_tmp132_, &_tmp133_)) {
		gchar* _key;
		gchar* _value;
		_key = (gchar*) _tmp132_;
		_value = (gchar*) _tmp133_;
		g_variant_builder_add (&_tmp130_, "{?*}", g_variant_new_string (_key), g_variant_new_string (_value));
	}
	_reply = g_variant_builder_end (&_tmp130_);
	_g_hash_table_unref0 (result);
	return _reply;
}


static GVariant*
_dbus_unity_protocol_scope_service_get_categories (UnityProtocolScopeService* self)
{
	GVariant* result;
	GVariant* _reply;
	result = unity_protocol_scope_service_get_categories (self);
	_reply = g_variant_new_variant (result);
	_g_variant_unref0 (result);
	return _reply;
}


static GVariant*
_dbus_unity_protocol_scope_service_get_filters (UnityProtocolScopeService* self)
{
	GVariant* result;
	GVariant* _reply;
	result = unity_protocol_scope_service_get_filters (self);
	_reply = g_variant_new_variant (result);
	_g_variant_unref0 (result);
	return _reply;
}


static GVariant*
_dbus_unity_protocol_scope_service_get_hints (UnityProtocolScopeService* self)
{
	GHashTable* result;
	GVariant* _reply;
	GVariantBuilder _tmp134_;
	GHashTableIter _tmp135_;
	gpointer _tmp136_;
	gpointer _tmp137_;
	result = unity_protocol_scope_service_get_hints (self);
	g_hash_table_iter_init (&_tmp135_, result);
	g_variant_builder_init (&_tmp134_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp135_, &_tmp136_, &_tmp137_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp136_;
		_value = (GVariant*) _tmp137_;
		g_variant_builder_add (&_tmp134_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	_reply = g_variant_builder_end (&_tmp134_);
	_g_hash_table_unref0 (result);
	return _reply;
}


static GVariant*
unity_protocol_scope_service_dbus_interface_get_property (GDBusConnection* connection,
                                                          const gchar* sender,
                                                          const gchar* object_path,
                                                          const gchar* interface_name,
                                                          const gchar* property_name,
                                                          GError** error,
                                                          gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (property_name, "ProtocolVersion") == 0) {
		return _dbus_unity_protocol_scope_service_get_protocol_version (object);
	} else if (strcmp (property_name, "Visible") == 0) {
		return _dbus_unity_protocol_scope_service_get_visible (object);
	} else if (strcmp (property_name, "IsMaster") == 0) {
		return _dbus_unity_protocol_scope_service_get_is_master (object);
	} else if (strcmp (property_name, "SearchHint") == 0) {
		return _dbus_unity_protocol_scope_service_get_search_hint (object);
	} else if (strcmp (property_name, "Metadata") == 0) {
		return _dbus_unity_protocol_scope_service_get_metadata (object);
	} else if (strcmp (property_name, "OptionalMetadata") == 0) {
		return _dbus_unity_protocol_scope_service_get_optional_metadata (object);
	} else if (strcmp (property_name, "Categories") == 0) {
		return _dbus_unity_protocol_scope_service_get_categories (object);
	} else if (strcmp (property_name, "Filters") == 0) {
		return _dbus_unity_protocol_scope_service_get_filters (object);
	} else if (strcmp (property_name, "Hints") == 0) {
		return _dbus_unity_protocol_scope_service_get_hints (object);
	}
	return NULL;
}


static gboolean
unity_protocol_scope_service_dbus_interface_set_property (GDBusConnection* connection,
                                                          const gchar* sender,
                                                          const gchar* object_path,
                                                          const gchar* interface_name,
                                                          const gchar* property_name,
                                                          GVariant* value,
                                                          GError** error,
                                                          gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	return FALSE;
}


static void
_dbus_unity_protocol_scope_service_category_order_changed (GObject* _sender,
                                                           const gchar* channel_id,
                                                           guint32* new_order,
                                                           int new_order_length1,
                                                           gpointer* _data)
{
	GDBusConnection * _connection;
	const gchar * _path;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	guint32* _tmp138_;
	GVariantBuilder _tmp139_;
	int _tmp140_;
	_connection = _data[1];
	_path = _data[2];
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (channel_id));
	_tmp138_ = new_order;
	g_variant_builder_init (&_tmp139_, G_VARIANT_TYPE ("au"));
	for (_tmp140_ = 0; _tmp140_ < new_order_length1; _tmp140_++) {
		g_variant_builder_add_value (&_tmp139_, g_variant_new_uint32 (*_tmp138_));
		_tmp138_++;
	}
	g_variant_builder_add_value (&_arguments_builder, g_variant_builder_end (&_tmp139_));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_connection_emit_signal (_connection, NULL, _path, "com.canonical.Unity.Scope", "CategoryOrderChanged", _arguments, NULL);
}


static void
_dbus_unity_protocol_scope_service_filter_settings_changed (GObject* _sender,
                                                            const gchar* channel_id,
                                                            GVariant* filter_rows,
                                                            gpointer* _data)
{
	GDBusConnection * _connection;
	const gchar * _path;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	_connection = _data[1];
	_path = _data[2];
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (channel_id));
	g_variant_builder_add_value (&_arguments_builder, filter_rows);
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_connection_emit_signal (_connection, NULL, _path, "com.canonical.Unity.Scope", "FilterSettingsChanged", _arguments, NULL);
}


static void
_dbus_unity_protocol_scope_service_results_invalidated (GObject* _sender,
                                                        guint channel_type,
                                                        gpointer* _data)
{
	GDBusConnection * _connection;
	const gchar * _path;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	_connection = _data[1];
	_path = _data[2];
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_uint32 (channel_type));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_connection_emit_signal (_connection, NULL, _path, "com.canonical.Unity.Scope", "ResultsInvalidated", _arguments, NULL);
}


guint
unity_protocol_scope_service_register_object (gpointer object,
                                              GDBusConnection* connection,
                                              const gchar* path,
                                              GError** error)
{
	guint result;
	gpointer *data;
	data = g_new (gpointer, 3);
	data[0] = g_object_ref (object);
	data[1] = g_object_ref (connection);
	data[2] = g_strdup (path);
	result = g_dbus_connection_register_object (connection, path, (GDBusInterfaceInfo *) (&_unity_protocol_scope_service_dbus_interface_info), &_unity_protocol_scope_service_dbus_interface_vtable, data, _unity_protocol_scope_service_unregister_object, error);
	if (!result) {
		return 0;
	}
	g_signal_connect (object, "category-order-changed", (GCallback) _dbus_unity_protocol_scope_service_category_order_changed, data);
	g_signal_connect (object, "filter-settings-changed", (GCallback) _dbus_unity_protocol_scope_service_filter_settings_changed, data);
	g_signal_connect (object, "results-invalidated", (GCallback) _dbus_unity_protocol_scope_service_results_invalidated, data);
	return result;
}


static void
_unity_protocol_scope_service_unregister_object (gpointer user_data)
{
	gpointer* data;
	data = user_data;
	g_signal_handlers_disconnect_by_func (data[0], _dbus_unity_protocol_scope_service_category_order_changed, data);
	g_signal_handlers_disconnect_by_func (data[0], _dbus_unity_protocol_scope_service_filter_settings_changed, data);
	g_signal_handlers_disconnect_by_func (data[0], _dbus_unity_protocol_scope_service_results_invalidated, data);
	g_object_unref (data[0]);
	g_object_unref (data[1]);
	g_free (data[2]);
	g_free (data);
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}



