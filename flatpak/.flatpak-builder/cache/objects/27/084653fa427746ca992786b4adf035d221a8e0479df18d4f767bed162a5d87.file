/* Inbox.c generated by valac 0.40.11, the Vala compiler
 * generated from Inbox.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>
#include <float.h>
#include <math.h>
#include <gee.h>
#include <granite.h>
#include <gdk/gdk.h>
#include <sqlite3.h>
#include <gio/gio.h>


#define VIEWS_TYPE_INBOX (views_inbox_get_type ())
#define VIEWS_INBOX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_INBOX, ViewsInbox))
#define VIEWS_INBOX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_INBOX, ViewsInboxClass))
#define VIEWS_IS_INBOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_INBOX))
#define VIEWS_IS_INBOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_INBOX))
#define VIEWS_INBOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_INBOX, ViewsInboxClass))

typedef struct _ViewsInbox ViewsInbox;
typedef struct _ViewsInboxClass ViewsInboxClass;
typedef struct _ViewsInboxPrivate ViewsInboxPrivate;

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;

#define WIDGETS_TYPE_TASK_NEW (widgets_task_new_get_type ())
#define WIDGETS_TASK_NEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TASK_NEW, WidgetsTaskNew))
#define WIDGETS_TASK_NEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TASK_NEW, WidgetsTaskNewClass))
#define WIDGETS_IS_TASK_NEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TASK_NEW))
#define WIDGETS_IS_TASK_NEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TASK_NEW))
#define WIDGETS_TASK_NEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TASK_NEW, WidgetsTaskNewClass))

typedef struct _WidgetsTaskNew WidgetsTaskNew;
typedef struct _WidgetsTaskNewClass WidgetsTaskNewClass;

#define WIDGETS_TYPE_ALERT_VIEW (widgets_alert_view_get_type ())
#define WIDGETS_ALERT_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_ALERT_VIEW, WidgetsAlertView))
#define WIDGETS_ALERT_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_ALERT_VIEW, WidgetsAlertViewClass))
#define WIDGETS_IS_ALERT_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_ALERT_VIEW))
#define WIDGETS_IS_ALERT_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_ALERT_VIEW))
#define WIDGETS_ALERT_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_ALERT_VIEW, WidgetsAlertViewClass))

typedef struct _WidgetsAlertView WidgetsAlertView;
typedef struct _WidgetsAlertViewClass WidgetsAlertViewClass;

#define WIDGETS_POPOVERS_TYPE_LABELS_POPOVER (widgets_popovers_labels_popover_get_type ())
#define WIDGETS_POPOVERS_LABELS_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER, WidgetsPopoversLabelsPopover))
#define WIDGETS_POPOVERS_LABELS_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER, WidgetsPopoversLabelsPopoverClass))
#define WIDGETS_POPOVERS_IS_LABELS_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER))
#define WIDGETS_POPOVERS_IS_LABELS_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER))
#define WIDGETS_POPOVERS_LABELS_POPOVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER, WidgetsPopoversLabelsPopoverClass))

typedef struct _WidgetsPopoversLabelsPopover WidgetsPopoversLabelsPopover;
typedef struct _WidgetsPopoversLabelsPopoverClass WidgetsPopoversLabelsPopoverClass;
enum  {
	VIEWS_INBOX_0_PROPERTY,
	VIEWS_INBOX_WINDOW_PROPERTY,
	VIEWS_INBOX_NUM_PROPERTIES
};
static GParamSpec* views_inbox_properties[VIEWS_INBOX_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define OBJECTS_TYPE_TASK (objects_task_get_type ())
#define OBJECTS_TASK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TASK, ObjectsTask))
#define OBJECTS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TASK, ObjectsTaskClass))
#define OBJECTS_IS_TASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TASK))
#define OBJECTS_IS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TASK))
#define OBJECTS_TASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TASK, ObjectsTaskClass))

typedef struct _ObjectsTask ObjectsTask;
typedef struct _ObjectsTaskClass ObjectsTaskClass;
#define _objects_task_unref0(var) ((var == NULL) ? NULL : (var = (objects_task_unref (var), NULL)))
typedef struct _Block15Data Block15Data;
typedef struct _ObjectsTaskPrivate ObjectsTaskPrivate;

#define WIDGETS_TYPE_TASK_ROW (widgets_task_row_get_type ())
#define WIDGETS_TASK_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRow))
#define WIDGETS_TASK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRowClass))
#define WIDGETS_IS_TASK_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TASK_ROW))
#define WIDGETS_IS_TASK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TASK_ROW))
#define WIDGETS_TASK_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRowClass))

typedef struct _WidgetsTaskRow WidgetsTaskRow;
typedef struct _WidgetsTaskRowClass WidgetsTaskRowClass;
typedef struct _Block16Data Block16Data;
typedef struct _WidgetsTaskRowPrivate WidgetsTaskRowPrivate;
#define _g_time_zone_unref0(var) ((var == NULL) ? NULL : (var = (g_time_zone_unref (var), NULL)))

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
#define _g_free0(var) (var = (g_free (var), NULL))

#define SERVICES_TYPE_NOTIFICATIONS (services_notifications_get_type ())
#define SERVICES_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotifications))
#define SERVICES_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))
#define SERVICES_IS_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_IS_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_NOTIFICATIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))

typedef struct _ServicesNotifications ServicesNotifications;
typedef struct _ServicesNotificationsClass ServicesNotificationsClass;
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
typedef struct _Block17Data Block17Data;
typedef struct _WidgetsTaskNewPrivate WidgetsTaskNewPrivate;

#define WIDGETS_TYPE_WHEN_BUTTON (widgets_when_button_get_type ())
#define WIDGETS_WHEN_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButton))
#define WIDGETS_WHEN_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButtonClass))
#define WIDGETS_IS_WHEN_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_WHEN_BUTTON))
#define WIDGETS_IS_WHEN_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_WHEN_BUTTON))
#define WIDGETS_WHEN_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButtonClass))

typedef struct _WidgetsWhenButton WidgetsWhenButton;
typedef struct _WidgetsWhenButtonClass WidgetsWhenButtonClass;
typedef struct _Block18Data Block18Data;

#define DIALOGS_TYPE_SHARE_DIALOG (dialogs_share_dialog_get_type ())
#define DIALOGS_SHARE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_TYPE_SHARE_DIALOG, DialogsShareDialog))
#define DIALOGS_SHARE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_TYPE_SHARE_DIALOG, DialogsShareDialogClass))
#define DIALOGS_IS_SHARE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_TYPE_SHARE_DIALOG))
#define DIALOGS_IS_SHARE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_TYPE_SHARE_DIALOG))
#define DIALOGS_SHARE_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_TYPE_SHARE_DIALOG, DialogsShareDialogClass))

typedef struct _DialogsShareDialog DialogsShareDialog;
typedef struct _DialogsShareDialogClass DialogsShareDialogClass;

#define TYPE_APPLICATION (application_get_type ())
#define APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_APPLICATION, Application))
#define APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_APPLICATION, ApplicationClass))
#define IS_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_APPLICATION))
#define IS_APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_APPLICATION))
#define APPLICATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_APPLICATION, ApplicationClass))

typedef struct _Application Application;
typedef struct _ApplicationClass ApplicationClass;
typedef struct _ApplicationPrivate ApplicationPrivate;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
typedef struct _ObjectsLabelPrivate ObjectsLabelPrivate;

#define WIDGETS_TYPE_LABEL_CHILD (widgets_label_child_get_type ())
#define WIDGETS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChild))
#define WIDGETS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChildClass))
#define WIDGETS_IS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_LABEL_CHILD))
#define WIDGETS_IS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_LABEL_CHILD))
#define WIDGETS_LABEL_CHILD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChildClass))

typedef struct _WidgetsLabelChild WidgetsLabelChild;
typedef struct _WidgetsLabelChildClass WidgetsLabelChildClass;
typedef struct _Block19Data Block19Data;

struct _ViewsInbox {
	GtkEventBox parent_instance;
	ViewsInboxPrivate * priv;
};

struct _ViewsInboxClass {
	GtkEventBoxClass parent_class;
};

struct _ViewsInboxPrivate {
	MainWindow* _window;
	WidgetsTaskNew* task_new_revealer;
	GtkListBox* tasks_list;
	GtkButton* add_task_button;
	GtkRevealer* add_task_revealer;
	GtkFlowBox* labels_flowbox;
	WidgetsAlertView* alert_view;
	WidgetsPopoversLabelsPopover* labels_popover;
	GtkStack* main_stack;
};

struct _Block15Data {
	int _ref_count_;
	ViewsInbox* self;
	ObjectsTask* task;
};

struct _ObjectsTask {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsTaskPrivate * priv;
	gint id;
	gint checked;
	gint project_id;
	gint list_id;
	gint task_order;
	gint is_inbox;
	gint has_reminder;
	gint sidebar_width;
	gint was_notified;
	gchar* content;
	gchar* note;
	gchar* when_date_utc;
	gchar* reminder_time;
	gchar* labels;
	gchar* checklist;
};

struct _ObjectsTaskClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsTask *self);
};

struct _Block16Data {
	int _ref_count_;
	Block15Data * _data15_;
	WidgetsTaskRow* row;
};

struct _WidgetsTaskRow {
	GtkListBoxRow parent_instance;
	WidgetsTaskRowPrivate * priv;
	GtkLabel* name_label;
	GtkBox* previews_box;
	GtkBox* project_preview_box;
	GtkRevealer* bottom_box_revealer;
	GtkBox* project_box;
};

struct _WidgetsTaskRowClass {
	GtkListBoxRowClass parent_class;
};

struct _Block17Data {
	int _ref_count_;
	ViewsInbox* self;
	ObjectsTask* task;
	WidgetsTaskRow* row;
};

struct _WidgetsTaskNew {
	GtkRevealer parent_instance;
	WidgetsTaskNewPrivate * priv;
	GtkEntry* name_entry;
	WidgetsWhenButton* when_button;
};

struct _WidgetsTaskNewClass {
	GtkRevealerClass parent_class;
};

struct _Block18Data {
	int _ref_count_;
	ViewsInbox* self;
	GtkToggleButton* show_hide_all_button;
	GtkImage* show_hide_image;
	GtkRevealer* labels_flowbox_revealer;
	GtkClipboard* clipboard;
};

struct _Application {
	GtkApplication parent_instance;
	ApplicationPrivate * priv;
	MainWindow* main_window;
};

struct _ApplicationClass {
	GtkApplicationClass parent_class;
};

struct _ObjectsLabel {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsLabelPrivate * priv;
	gint id;
	gchar* name;
	gchar* color;
};

struct _ObjectsLabelClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsLabel *self);
};

struct _Block19Data {
	int _ref_count_;
	ViewsInbox* self;
	WidgetsTaskRow* row;
};


static gpointer views_inbox_parent_class = NULL;
extern Utils* application_utils;
extern ServicesNotifications* application_notification;
extern ServicesDatabase* application_database;
extern GSettings* application_settings;

GType views_inbox_get_type (void) G_GNUC_CONST;
GType main_window_get_type (void) G_GNUC_CONST;
GType widgets_task_new_get_type (void) G_GNUC_CONST;
GType widgets_alert_view_get_type (void) G_GNUC_CONST;
GType widgets_popovers_labels_popover_get_type (void) G_GNUC_CONST;
#define VIEWS_INBOX_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), VIEWS_TYPE_INBOX, ViewsInboxPrivate))
ViewsInbox* views_inbox_new (void);
ViewsInbox* views_inbox_construct (GType object_type);
gpointer objects_task_ref (gpointer instance);
void objects_task_unref (gpointer instance);
GParamSpec* objects_param_spec_task (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void objects_value_set_task (GValue* value,
                             gpointer v_object);
void objects_value_take_task (GValue* value,
                              gpointer v_object);
gpointer objects_value_get_task (const GValue* value);
GType objects_task_get_type (void) G_GNUC_CONST;
static void views_inbox_add_new_task (ViewsInbox* self,
                               ObjectsTask* task);
static Block15Data* block15_data_ref (Block15Data* _data15_);
static void block15_data_unref (void * _userdata_);
GType widgets_task_row_get_type (void) G_GNUC_CONST;
static Block16Data* block16_data_ref (Block16Data* _data16_);
static void block16_data_unref (void * _userdata_);
WidgetsTaskRow* widgets_task_row_new (ObjectsTask* _task);
WidgetsTaskRow* widgets_task_row_construct (GType object_type,
                                            ObjectsTask* _task);
static void ___lambda252_ (Block16Data* _data16_,
                    ObjectsTask* _task);
GType utils_get_type (void) G_GNUC_CONST;
gboolean utils_is_today (Utils* self,
                         GDateTime* date_1);
gboolean utils_is_upcoming (Utils* self,
                            GDateTime* date);
GType services_notifications_get_type (void) G_GNUC_CONST;
static gboolean ___lambda253_ (Block16Data* _data16_);
static gboolean ____lambda253__gsource_func (gpointer self);
static void ____lambda252__widgets_task_row_on_signal_update (WidgetsTaskRow* _sender,
                                                       ObjectsTask* task,
                                                       gpointer self);
void views_inbox_check_visible_alertview (ViewsInbox* self);
gboolean utils_is_listbox_empty (Utils* self,
                                 GtkListBox* listbox);
void views_inbox_apply_remove (ViewsInbox* self);
ObjectsTask* widgets_task_row_get_task (WidgetsTaskRow* self);
void views_inbox_update_tasks_list (ViewsInbox* self);
GType services_database_get_type (void) G_GNUC_CONST;
GeeArrayList* services_database_get_all_inbox_tasks (ServicesDatabase* self);
static Block17Data* block17_data_ref (Block17Data* _data17_);
static void block17_data_unref (void * _userdata_);
static void ____lambda254_ (Block17Data* _data17_,
                     ObjectsTask* _task);
static gboolean ____lambda255_ (Block17Data* _data17_);
static gboolean _____lambda255__gsource_func (gpointer self);
static void _____lambda254__widgets_task_row_on_signal_update (WidgetsTaskRow* _sender,
                                                        ObjectsTask* task,
                                                        gpointer self);
static void views_inbox_task_on_revealer (ViewsInbox* self);
GType widgets_when_button_get_type (void) G_GNUC_CONST;
MainWindow* views_inbox_get_window (ViewsInbox* self);
static void views_inbox_set_window (ViewsInbox* self,
                             MainWindow* value);
static GObject * views_inbox_constructor (GType type,
                                   guint n_construct_properties,
                                   GObjectConstructParam * construct_properties);
static Block18Data* block18_data_ref (Block18Data* _data18_);
static void block18_data_unref (void * _userdata_);
WidgetsAlertView* widgets_alert_view_new (const gchar* title,
                                          const gchar* description,
                                          const gchar* icon_name);
WidgetsAlertView* widgets_alert_view_construct (GType object_type,
                                                const gchar* title,
                                                const gchar* description,
                                                const gchar* icon_name);
static void _views_inbox___lambda256_ (Block18Data* _data18_);
void widgets_task_row_show_content (WidgetsTaskRow* self);
void widgets_task_row_hide_content (WidgetsTaskRow* self);
static void __views_inbox___lambda256__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                           gpointer self);
WidgetsPopoversLabelsPopover* widgets_popovers_labels_popover_new (GtkWidget* relative);
WidgetsPopoversLabelsPopover* widgets_popovers_labels_popover_construct (GType object_type,
                                                                         GtkWidget* relative);
static void _views_inbox___lambda257_ (ViewsInbox* self);
GType dialogs_share_dialog_get_type (void) G_GNUC_CONST;
GType application_get_type (void) G_GNUC_CONST;
Application* application_get_instance (void);
DialogsShareDialog* dialogs_share_dialog_new (MainWindow* parent);
DialogsShareDialog* dialogs_share_dialog_construct (GType object_type,
                                                    MainWindow* parent);
void dialogs_share_dialog_set_inbox (DialogsShareDialog* self,
                                     gboolean value);
static void _gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                        gpointer self);
static void __views_inbox___lambda257__gtk_button_clicked (GtkButton* _sender,
                                                    gpointer self);
WidgetsTaskNew* widgets_task_new_new (gboolean _is_inbox,
                                      gint _project_id);
WidgetsTaskNew* widgets_task_new_construct (GType object_type,
                                            gboolean _is_inbox,
                                            gint _project_id);
static gboolean _views_inbox____lambda258_ (ViewsInbox* self);
static gboolean __views_inbox____lambda258__gsource_func (gpointer self);
static gboolean _views_inbox____lambda259_ (ViewsInbox* self);
static gboolean __views_inbox____lambda259__gsource_func (gpointer self);
static gint _views_inbox___lambda260_ (ViewsInbox* self,
                                GtkListBoxRow* row1,
                                GtkListBoxRow* row2);
static gint __views_inbox___lambda260__gtk_list_box_sort_func (GtkListBoxRow* row1,
                                                        GtkListBoxRow* row2,
                                                        gpointer self);
static void _views_inbox___lambda261_ (ViewsInbox* self);
static void __views_inbox___lambda261__gtk_button_clicked (GtkButton* _sender,
                                                    gpointer self);
static void _views_inbox___lambda262_ (Block18Data* _data18_);
ObjectsTask* objects_task_new (gint id,
                               gint checked,
                               gint project_id,
                               gint list_id,
                               gint task_order,
                               gint is_inbox,
                               gint has_reminder,
                               gint sidebar_width,
                               gint was_notified,
                               const gchar* content,
                               const gchar* note,
                               const gchar* when_date_utc,
                               const gchar* reminder_time,
                               const gchar* labels,
                               const gchar* checklist);
ObjectsTask* objects_task_construct (GType object_type,
                                     gint id,
                                     gint checked,
                                     gint project_id,
                                     gint list_id,
                                     gint task_order,
                                     gint is_inbox,
                                     gint has_reminder,
                                     gint sidebar_width,
                                     gint was_notified,
                                     const gchar* content,
                                     const gchar* note,
                                     const gchar* when_date_utc,
                                     const gchar* reminder_time,
                                     const gchar* labels,
                                     const gchar* checklist);
gint services_database_add_task (ServicesDatabase* self,
                                 ObjectsTask* task);
static void __views_inbox___lambda262__gtk_button_clicked (GtkButton* _sender,
                                                    gpointer self);
static gboolean _views_inbox___lambda263_ (ViewsInbox* self,
                                    GdkEvent* event);
static gboolean __views_inbox___lambda263__gtk_widget_event (GtkWidget* _sender,
                                                      GdkEvent* event,
                                                      gpointer self);
static void _views_inbox___lambda264_ (ViewsInbox* self);
static void __views_inbox___lambda264__widgets_task_new_on_signal_close (WidgetsTaskNew* _sender,
                                                                  gpointer self);
static void _views_inbox___lambda265_ (ViewsInbox* self);
void widgets_popovers_labels_popover_update_label_list (WidgetsPopoversLabelsPopover* self);
static void __views_inbox___lambda265__gtk_button_clicked (GtkButton* _sender,
                                                    gpointer self);
gpointer objects_label_ref (gpointer instance);
void objects_label_unref (gpointer instance);
GParamSpec* objects_param_spec_label (const gchar* name,
                                      const gchar* nick,
                                      const gchar* blurb,
                                      GType object_type,
                                      GParamFlags flags);
void objects_value_set_label (GValue* value,
                              gpointer v_object);
void objects_value_take_label (GValue* value,
                               gpointer v_object);
gpointer objects_value_get_label (const GValue* value);
GType objects_label_get_type (void) G_GNUC_CONST;
static void _views_inbox___lambda266_ (Block18Data* _data18_,
                                ObjectsLabel* label);
gboolean utils_is_label_repeted (Utils* self,
                                 GtkFlowBox* flowbox,
                                 gint id);
GType widgets_label_child_get_type (void) G_GNUC_CONST;
WidgetsLabelChild* widgets_label_child_new (ObjectsLabel* _label);
WidgetsLabelChild* widgets_label_child_construct (GType object_type,
                                                  ObjectsLabel* _label);
gboolean utils_is_empty (Utils* self,
                         GtkFlowBox* flowbox);
static gboolean __lambda267_ (ViewsInbox* self,
                       GtkListBoxRow* row);
ObjectsLabel* widgets_label_child_get_label (WidgetsLabelChild* self);
static gboolean ___lambda267__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                 gpointer self);
static void __views_inbox___lambda266__widgets_popovers_labels_popover_on_selected_label (WidgetsPopoversLabelsPopover* _sender,
                                                                                   ObjectsLabel* label,
                                                                                   gpointer self);
static void _views_inbox___lambda268_ (Block18Data* _data18_,
                                GtkWidget* widget);
static gboolean ___lambda269_ (ViewsInbox* self,
                        GtkListBoxRow* row);
static gboolean ____lambda269__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                  gpointer self);
static gboolean ___lambda270_ (ViewsInbox* self,
                        GtkListBoxRow* row);
static gboolean ____lambda270__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                  gpointer self);
static void __views_inbox___lambda268__gtk_container_remove (GtkContainer* _sender,
                                                      GtkWidget* widget,
                                                      gpointer self);
static void _views_inbox___lambda271_ (ViewsInbox* self,
                                GtkWidget* widget);
static void __views_inbox___lambda271__gtk_container_remove (GtkContainer* _sender,
                                                      GtkWidget* widget,
                                                      gpointer self);
static void _views_inbox___lambda272_ (ViewsInbox* self,
                                ObjectsTask* task);
gboolean utils_is_task_repeted (Utils* self,
                                GtkListBox* listbox,
                                gint id);
static void __views_inbox___lambda272__services_database_update_task_signal (ServicesDatabase* _sender,
                                                                      ObjectsTask* task,
                                                                      gpointer self);
static void _views_inbox___lambda273_ (ViewsInbox* self,
                                ObjectsTask* task);
static void __views_inbox___lambda273__services_database_add_task_signal (ServicesDatabase* _sender,
                                                                   ObjectsTask* task,
                                                                   gpointer self);
static void _views_inbox___lambda274_ (ViewsInbox* self,
                                ObjectsTask* task);
static Block19Data* block19_data_ref (Block19Data* _data19_);
static void block19_data_unref (void * _userdata_);
static gboolean ______lambda275_ (Block19Data* _data19_);
static gboolean _______lambda275__gsource_func (gpointer self);
static void __views_inbox___lambda274__services_database_on_signal_remove_task (ServicesDatabase* _sender,
                                                                         ObjectsTask* task,
                                                                         gpointer self);
static void views_inbox_finalize (GObject * obj);
static void _vala_views_inbox_get_property (GObject * object,
                                     guint property_id,
                                     GValue * value,
                                     GParamSpec * pspec);
static void _vala_views_inbox_set_property (GObject * object,
                                     guint property_id,
                                     const GValue * value,
                                     GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


ViewsInbox*
views_inbox_construct (GType object_type)
{
	ViewsInbox * self = NULL;
#line 34 "/run/build/planner/src/Views/Inbox.vala"
	self = (ViewsInbox*) g_object_new (object_type, "expand", TRUE, NULL);
#line 33 "/run/build/planner/src/Views/Inbox.vala"
	return self;
#line 614 "Inbox.c"
}


ViewsInbox*
views_inbox_new (void)
{
#line 33 "/run/build/planner/src/Views/Inbox.vala"
	return views_inbox_construct (VIEWS_TYPE_INBOX);
#line 623 "Inbox.c"
}


static gpointer
_objects_task_ref0 (gpointer self)
{
#line 406 "/run/build/planner/src/Views/Inbox.vala"
	return self ? objects_task_ref (self) : NULL;
#line 632 "Inbox.c"
}


static Block15Data*
block15_data_ref (Block15Data* _data15_)
{
#line 406 "/run/build/planner/src/Views/Inbox.vala"
	g_atomic_int_inc (&_data15_->_ref_count_);
#line 406 "/run/build/planner/src/Views/Inbox.vala"
	return _data15_;
#line 643 "Inbox.c"
}


static void
block15_data_unref (void * _userdata_)
{
	Block15Data* _data15_;
	_data15_ = (Block15Data*) _userdata_;
#line 406 "/run/build/planner/src/Views/Inbox.vala"
	if (g_atomic_int_dec_and_test (&_data15_->_ref_count_)) {
#line 654 "Inbox.c"
		ViewsInbox* self;
#line 406 "/run/build/planner/src/Views/Inbox.vala"
		self = _data15_->self;
#line 406 "/run/build/planner/src/Views/Inbox.vala"
		_objects_task_unref0 (_data15_->task);
#line 406 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (self);
#line 406 "/run/build/planner/src/Views/Inbox.vala"
		g_slice_free (Block15Data, _data15_);
#line 664 "Inbox.c"
	}
}


static Block16Data*
block16_data_ref (Block16Data* _data16_)
{
#line 407 "/run/build/planner/src/Views/Inbox.vala"
	g_atomic_int_inc (&_data16_->_ref_count_);
#line 407 "/run/build/planner/src/Views/Inbox.vala"
	return _data16_;
#line 676 "Inbox.c"
}


static void
block16_data_unref (void * _userdata_)
{
	Block16Data* _data16_;
	_data16_ = (Block16Data*) _userdata_;
#line 407 "/run/build/planner/src/Views/Inbox.vala"
	if (g_atomic_int_dec_and_test (&_data16_->_ref_count_)) {
#line 687 "Inbox.c"
		ViewsInbox* self;
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		self = _data16_->_data15_->self;
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (_data16_->row);
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		block15_data_unref (_data16_->_data15_);
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		_data16_->_data15_ = NULL;
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		g_slice_free (Block16Data, _data16_);
#line 699 "Inbox.c"
	}
}


static gboolean
___lambda253_ (Block16Data* _data16_)
{
	Block15Data* _data15_;
	ViewsInbox* self;
	gboolean result = FALSE;
	WidgetsTaskRow* _tmp0_;
	WidgetsTaskRow* _tmp1_;
	gdouble _tmp2_;
	gdouble _tmp3_;
	WidgetsTaskRow* _tmp4_;
	gdouble _tmp5_;
	gdouble _tmp6_;
#line 435 "/run/build/planner/src/Views/Inbox.vala"
	_data15_ = _data16_->_data15_;
#line 435 "/run/build/planner/src/Views/Inbox.vala"
	self = _data15_->self;
#line 436 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = _data16_->row;
#line 436 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = _data16_->row;
#line 436 "/run/build/planner/src/Views/Inbox.vala"
	_tmp2_ = gtk_widget_get_opacity ((GtkWidget*) _tmp1_);
#line 436 "/run/build/planner/src/Views/Inbox.vala"
	_tmp3_ = _tmp2_;
#line 436 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_opacity ((GtkWidget*) _tmp0_, _tmp3_ - 0.1);
#line 438 "/run/build/planner/src/Views/Inbox.vala"
	_tmp4_ = _data16_->row;
#line 438 "/run/build/planner/src/Views/Inbox.vala"
	_tmp5_ = gtk_widget_get_opacity ((GtkWidget*) _tmp4_);
#line 438 "/run/build/planner/src/Views/Inbox.vala"
	_tmp6_ = _tmp5_;
#line 438 "/run/build/planner/src/Views/Inbox.vala"
	if (_tmp6_ <= ((gdouble) 0)) {
#line 739 "Inbox.c"
		WidgetsTaskRow* _tmp7_;
#line 439 "/run/build/planner/src/Views/Inbox.vala"
		_tmp7_ = _data16_->row;
#line 439 "/run/build/planner/src/Views/Inbox.vala"
		gtk_widget_destroy ((GtkWidget*) _tmp7_);
#line 440 "/run/build/planner/src/Views/Inbox.vala"
		result = FALSE;
#line 440 "/run/build/planner/src/Views/Inbox.vala"
		return result;
#line 749 "Inbox.c"
	}
#line 443 "/run/build/planner/src/Views/Inbox.vala"
	result = TRUE;
#line 443 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 755 "Inbox.c"
}


static gboolean
____lambda253__gsource_func (gpointer self)
{
	gboolean result;
	result = ___lambda253_ (self);
#line 435 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 766 "Inbox.c"
}


static void
___lambda252_ (Block16Data* _data16_,
               ObjectsTask* _task)
{
	Block15Data* _data15_;
	ViewsInbox* self;
	gboolean _tmp0_ = FALSE;
	gint _tmp1_;
	GtkListBox* _tmp21_;
#line 414 "/run/build/planner/src/Views/Inbox.vala"
	_data15_ = _data16_->_data15_;
#line 414 "/run/build/planner/src/Views/Inbox.vala"
	self = _data15_->self;
#line 414 "/run/build/planner/src/Views/Inbox.vala"
	g_return_if_fail (_task != NULL);
#line 415 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = _task->is_inbox;
#line 415 "/run/build/planner/src/Views/Inbox.vala"
	if (_tmp1_ == 0) {
#line 415 "/run/build/planner/src/Views/Inbox.vala"
		_tmp0_ = TRUE;
#line 791 "Inbox.c"
	} else {
		const gchar* _tmp2_;
#line 415 "/run/build/planner/src/Views/Inbox.vala"
		_tmp2_ = _task->when_date_utc;
#line 415 "/run/build/planner/src/Views/Inbox.vala"
		_tmp0_ = g_strcmp0 (_tmp2_, "") != 0;
#line 798 "Inbox.c"
	}
#line 415 "/run/build/planner/src/Views/Inbox.vala"
	if (_tmp0_) {
#line 802 "Inbox.c"
		const gchar* _tmp3_;
#line 416 "/run/build/planner/src/Views/Inbox.vala"
		_tmp3_ = _task->when_date_utc;
#line 416 "/run/build/planner/src/Views/Inbox.vala"
		if (g_strcmp0 (_tmp3_, "") != 0) {
#line 808 "Inbox.c"
			GDateTime* _when = NULL;
			const gchar* _tmp4_;
			GTimeZone* _tmp5_;
			GTimeZone* _tmp6_;
			GDateTime* _tmp7_;
			GDateTime* _tmp8_;
			gchar* view = NULL;
			gchar* _tmp9_;
			Utils* _tmp10_;
			GDateTime* _tmp11_;
			ServicesNotifications* _tmp16_;
			const gchar* _tmp17_;
			const gchar* _tmp18_;
			gchar* _tmp19_;
			gchar* _tmp20_;
#line 418 "/run/build/planner/src/Views/Inbox.vala"
			_tmp4_ = _task->when_date_utc;
#line 418 "/run/build/planner/src/Views/Inbox.vala"
			_tmp5_ = g_time_zone_new_local ();
#line 418 "/run/build/planner/src/Views/Inbox.vala"
			_tmp6_ = _tmp5_;
#line 418 "/run/build/planner/src/Views/Inbox.vala"
			_tmp7_ = g_date_time_new_from_iso8601 (_tmp4_, _tmp6_);
#line 418 "/run/build/planner/src/Views/Inbox.vala"
			_tmp8_ = _tmp7_;
#line 418 "/run/build/planner/src/Views/Inbox.vala"
			_g_time_zone_unref0 (_tmp6_);
#line 418 "/run/build/planner/src/Views/Inbox.vala"
			_when = _tmp8_;
#line 419 "/run/build/planner/src/Views/Inbox.vala"
			_tmp9_ = g_strdup ("");
#line 419 "/run/build/planner/src/Views/Inbox.vala"
			view = _tmp9_;
#line 421 "/run/build/planner/src/Views/Inbox.vala"
			_tmp10_ = application_utils;
#line 421 "/run/build/planner/src/Views/Inbox.vala"
			_tmp11_ = _when;
#line 421 "/run/build/planner/src/Views/Inbox.vala"
			if (utils_is_today (_tmp10_, _tmp11_)) {
#line 848 "Inbox.c"
				gchar* _tmp12_;
#line 422 "/run/build/planner/src/Views/Inbox.vala"
				_tmp12_ = g_strdup (_ ("Today"));
#line 422 "/run/build/planner/src/Views/Inbox.vala"
				_g_free0 (view);
#line 422 "/run/build/planner/src/Views/Inbox.vala"
				view = _tmp12_;
#line 856 "Inbox.c"
			} else {
				Utils* _tmp13_;
				GDateTime* _tmp14_;
#line 423 "/run/build/planner/src/Views/Inbox.vala"
				_tmp13_ = application_utils;
#line 423 "/run/build/planner/src/Views/Inbox.vala"
				_tmp14_ = _when;
#line 423 "/run/build/planner/src/Views/Inbox.vala"
				if (utils_is_upcoming (_tmp13_, _tmp14_)) {
#line 866 "Inbox.c"
					gchar* _tmp15_;
#line 424 "/run/build/planner/src/Views/Inbox.vala"
					_tmp15_ = g_strdup (_ ("Upcoming"));
#line 424 "/run/build/planner/src/Views/Inbox.vala"
					_g_free0 (view);
#line 424 "/run/build/planner/src/Views/Inbox.vala"
					view = _tmp15_;
#line 874 "Inbox.c"
				}
			}
#line 427 "/run/build/planner/src/Views/Inbox.vala"
			_tmp16_ = application_notification;
#line 427 "/run/build/planner/src/Views/Inbox.vala"
			_tmp17_ = _data15_->task->content;
#line 427 "/run/build/planner/src/Views/Inbox.vala"
			_tmp18_ = view;
#line 427 "/run/build/planner/src/Views/Inbox.vala"
			_tmp19_ = g_strdup_printf (_ ("It was moved to %s"), _tmp18_);
#line 427 "/run/build/planner/src/Views/Inbox.vala"
			_tmp20_ = _tmp19_;
#line 427 "/run/build/planner/src/Views/Inbox.vala"
			g_signal_emit_by_name (_tmp16_, "send-local-notification", _tmp17_, _tmp20_, "document-export", 3, FALSE);
#line 427 "/run/build/planner/src/Views/Inbox.vala"
			_g_free0 (_tmp20_);
#line 416 "/run/build/planner/src/Views/Inbox.vala"
			_g_free0 (view);
#line 416 "/run/build/planner/src/Views/Inbox.vala"
			_g_date_time_unref0 (_when);
#line 895 "Inbox.c"
		}
#line 435 "/run/build/planner/src/Views/Inbox.vala"
		g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 20, ____lambda253__gsource_func, block16_data_ref (_data16_), block16_data_unref);
#line 899 "Inbox.c"
	}
#line 447 "/run/build/planner/src/Views/Inbox.vala"
	_tmp21_ = self->priv->tasks_list;
#line 447 "/run/build/planner/src/Views/Inbox.vala"
	gtk_list_box_unselect_all (_tmp21_);
#line 905 "Inbox.c"
}


static void
____lambda252__widgets_task_row_on_signal_update (WidgetsTaskRow* _sender,
                                                  ObjectsTask* task,
                                                  gpointer self)
{
#line 414 "/run/build/planner/src/Views/Inbox.vala"
	___lambda252_ (self, task);
#line 916 "Inbox.c"
}


static void
views_inbox_add_new_task (ViewsInbox* self,
                          ObjectsTask* task)
{
	Block15Data* _data15_;
	ObjectsTask* _tmp0_;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp2_ = FALSE;
	gint _tmp3_;
#line 406 "/run/build/planner/src/Views/Inbox.vala"
	g_return_if_fail (self != NULL);
#line 406 "/run/build/planner/src/Views/Inbox.vala"
	g_return_if_fail (task != NULL);
#line 406 "/run/build/planner/src/Views/Inbox.vala"
	_data15_ = g_slice_new0 (Block15Data);
#line 406 "/run/build/planner/src/Views/Inbox.vala"
	_data15_->_ref_count_ = 1;
#line 406 "/run/build/planner/src/Views/Inbox.vala"
	_data15_->self = g_object_ref (self);
#line 406 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = _objects_task_ref0 (task);
#line 406 "/run/build/planner/src/Views/Inbox.vala"
	_objects_task_unref0 (_data15_->task);
#line 406 "/run/build/planner/src/Views/Inbox.vala"
	_data15_->task = _tmp0_;
#line 407 "/run/build/planner/src/Views/Inbox.vala"
	_tmp3_ = _data15_->task->is_inbox;
#line 407 "/run/build/planner/src/Views/Inbox.vala"
	if (_tmp3_ == 1) {
#line 949 "Inbox.c"
		const gchar* _tmp4_;
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		_tmp4_ = _data15_->task->when_date_utc;
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		_tmp2_ = g_strcmp0 (_tmp4_, "") == 0;
#line 955 "Inbox.c"
	} else {
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		_tmp2_ = FALSE;
#line 959 "Inbox.c"
	}
#line 407 "/run/build/planner/src/Views/Inbox.vala"
	if (_tmp2_) {
#line 963 "Inbox.c"
		gint _tmp5_;
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		_tmp5_ = _data15_->task->checked;
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		_tmp1_ = _tmp5_ == 0;
#line 969 "Inbox.c"
	} else {
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		_tmp1_ = FALSE;
#line 973 "Inbox.c"
	}
#line 407 "/run/build/planner/src/Views/Inbox.vala"
	if (_tmp1_) {
#line 977 "Inbox.c"
		Block16Data* _data16_;
		WidgetsTaskRow* _tmp6_;
		WidgetsTaskRow* _tmp7_;
		GtkBox* _tmp8_;
		WidgetsTaskRow* _tmp9_;
		GtkBox* _tmp10_;
		GtkListBox* _tmp11_;
		WidgetsTaskRow* _tmp12_;
		WidgetsTaskRow* _tmp13_;
		GtkListBox* _tmp14_;
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		_data16_ = g_slice_new0 (Block16Data);
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		_data16_->_ref_count_ = 1;
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		_data16_->_data15_ = block15_data_ref (_data15_);
#line 408 "/run/build/planner/src/Views/Inbox.vala"
		_tmp6_ = widgets_task_row_new (_data15_->task);
#line 408 "/run/build/planner/src/Views/Inbox.vala"
		g_object_ref_sink (_tmp6_);
#line 408 "/run/build/planner/src/Views/Inbox.vala"
		_data16_->row = _tmp6_;
#line 409 "/run/build/planner/src/Views/Inbox.vala"
		_tmp7_ = _data16_->row;
#line 409 "/run/build/planner/src/Views/Inbox.vala"
		_tmp8_ = _tmp7_->project_preview_box;
#line 409 "/run/build/planner/src/Views/Inbox.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp8_, FALSE);
#line 410 "/run/build/planner/src/Views/Inbox.vala"
		_tmp9_ = _data16_->row;
#line 410 "/run/build/planner/src/Views/Inbox.vala"
		_tmp10_ = _tmp9_->project_preview_box;
#line 410 "/run/build/planner/src/Views/Inbox.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp10_, TRUE);
#line 412 "/run/build/planner/src/Views/Inbox.vala"
		_tmp11_ = self->priv->tasks_list;
#line 412 "/run/build/planner/src/Views/Inbox.vala"
		_tmp12_ = _data16_->row;
#line 412 "/run/build/planner/src/Views/Inbox.vala"
		gtk_container_add ((GtkContainer*) _tmp11_, (GtkWidget*) _tmp12_);
#line 414 "/run/build/planner/src/Views/Inbox.vala"
		_tmp13_ = _data16_->row;
#line 414 "/run/build/planner/src/Views/Inbox.vala"
		g_signal_connect_data (_tmp13_, "on-signal-update", (GCallback) ____lambda252__widgets_task_row_on_signal_update, block16_data_ref (_data16_), (GClosureNotify) block16_data_unref, 0);
#line 450 "/run/build/planner/src/Views/Inbox.vala"
		_tmp14_ = self->priv->tasks_list;
#line 450 "/run/build/planner/src/Views/Inbox.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp14_);
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		block16_data_unref (_data16_);
#line 407 "/run/build/planner/src/Views/Inbox.vala"
		_data16_ = NULL;
#line 1030 "Inbox.c"
	}
#line 453 "/run/build/planner/src/Views/Inbox.vala"
	views_inbox_check_visible_alertview (self);
#line 406 "/run/build/planner/src/Views/Inbox.vala"
	block15_data_unref (_data15_);
#line 406 "/run/build/planner/src/Views/Inbox.vala"
	_data15_ = NULL;
#line 1038 "Inbox.c"
}


void
views_inbox_check_visible_alertview (ViewsInbox* self)
{
	Utils* _tmp0_;
	GtkListBox* _tmp1_;
#line 456 "/run/build/planner/src/Views/Inbox.vala"
	g_return_if_fail (self != NULL);
#line 457 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = application_utils;
#line 457 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = self->priv->tasks_list;
#line 457 "/run/build/planner/src/Views/Inbox.vala"
	if (utils_is_listbox_empty (_tmp0_, _tmp1_)) {
#line 1055 "Inbox.c"
		GtkStack* _tmp2_;
#line 458 "/run/build/planner/src/Views/Inbox.vala"
		_tmp2_ = self->priv->main_stack;
#line 458 "/run/build/planner/src/Views/Inbox.vala"
		gtk_stack_set_visible_child_name (_tmp2_, "alert");
#line 1061 "Inbox.c"
	} else {
		GtkStack* _tmp3_;
#line 460 "/run/build/planner/src/Views/Inbox.vala"
		_tmp3_ = self->priv->main_stack;
#line 460 "/run/build/planner/src/Views/Inbox.vala"
		gtk_stack_set_visible_child_name (_tmp3_, "main");
#line 1068 "Inbox.c"
	}
#line 463 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 1072 "Inbox.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 467 "/run/build/planner/src/Views/Inbox.vala"
	return self ? g_object_ref (self) : NULL;
#line 1081 "Inbox.c"
}


void
views_inbox_apply_remove (ViewsInbox* self)
{
	GtkListBox* _tmp0_;
	GList* _tmp1_;
	GtkListBox* _tmp16_;
#line 466 "/run/build/planner/src/Views/Inbox.vala"
	g_return_if_fail (self != NULL);
#line 467 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = self->priv->tasks_list;
#line 467 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 1097 "Inbox.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 467 "/run/build/planner/src/Views/Inbox.vala"
		element_collection = _tmp1_;
#line 467 "/run/build/planner/src/Views/Inbox.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 1105 "Inbox.c"
			GtkWidget* _tmp2_;
			GtkWidget* element = NULL;
#line 467 "/run/build/planner/src/Views/Inbox.vala"
			_tmp2_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 467 "/run/build/planner/src/Views/Inbox.vala"
			element = _tmp2_;
#line 1112 "Inbox.c"
			{
				WidgetsTaskRow* row = NULL;
				GtkWidget* _tmp3_;
				WidgetsTaskRow* _tmp4_;
				gboolean _tmp5_ = FALSE;
				WidgetsTaskRow* _tmp6_;
				ObjectsTask* _tmp7_;
				ObjectsTask* _tmp8_;
				gint _tmp9_;
#line 468 "/run/build/planner/src/Views/Inbox.vala"
				_tmp3_ = element;
#line 468 "/run/build/planner/src/Views/Inbox.vala"
				_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp3_) : NULL);
#line 468 "/run/build/planner/src/Views/Inbox.vala"
				row = _tmp4_;
#line 470 "/run/build/planner/src/Views/Inbox.vala"
				_tmp6_ = row;
#line 470 "/run/build/planner/src/Views/Inbox.vala"
				_tmp7_ = widgets_task_row_get_task (_tmp6_);
#line 470 "/run/build/planner/src/Views/Inbox.vala"
				_tmp8_ = _tmp7_;
#line 470 "/run/build/planner/src/Views/Inbox.vala"
				_tmp9_ = _tmp8_->is_inbox;
#line 470 "/run/build/planner/src/Views/Inbox.vala"
				if (_tmp9_ == 0) {
#line 470 "/run/build/planner/src/Views/Inbox.vala"
					_tmp5_ = TRUE;
#line 1140 "Inbox.c"
				} else {
					WidgetsTaskRow* _tmp10_;
					ObjectsTask* _tmp11_;
					ObjectsTask* _tmp12_;
					const gchar* _tmp13_;
#line 470 "/run/build/planner/src/Views/Inbox.vala"
					_tmp10_ = row;
#line 470 "/run/build/planner/src/Views/Inbox.vala"
					_tmp11_ = widgets_task_row_get_task (_tmp10_);
#line 470 "/run/build/planner/src/Views/Inbox.vala"
					_tmp12_ = _tmp11_;
#line 470 "/run/build/planner/src/Views/Inbox.vala"
					_tmp13_ = _tmp12_->when_date_utc;
#line 470 "/run/build/planner/src/Views/Inbox.vala"
					_tmp5_ = g_strcmp0 (_tmp13_, "") != 0;
#line 1156 "Inbox.c"
				}
#line 470 "/run/build/planner/src/Views/Inbox.vala"
				if (_tmp5_) {
#line 1160 "Inbox.c"
					GtkListBox* _tmp14_;
					GtkWidget* _tmp15_;
#line 471 "/run/build/planner/src/Views/Inbox.vala"
					_tmp14_ = self->priv->tasks_list;
#line 471 "/run/build/planner/src/Views/Inbox.vala"
					_tmp15_ = element;
#line 471 "/run/build/planner/src/Views/Inbox.vala"
					gtk_container_remove ((GtkContainer*) _tmp14_, _tmp15_);
#line 1169 "Inbox.c"
				}
#line 467 "/run/build/planner/src/Views/Inbox.vala"
				_g_object_unref0 (row);
#line 467 "/run/build/planner/src/Views/Inbox.vala"
				_g_object_unref0 (element);
#line 1175 "Inbox.c"
			}
		}
#line 467 "/run/build/planner/src/Views/Inbox.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 1180 "Inbox.c"
	}
#line 475 "/run/build/planner/src/Views/Inbox.vala"
	_tmp16_ = self->priv->tasks_list;
#line 475 "/run/build/planner/src/Views/Inbox.vala"
	gtk_list_box_invalidate_sort (_tmp16_);
#line 1186 "Inbox.c"
}


static Block17Data*
block17_data_ref (Block17Data* _data17_)
{
#line 482 "/run/build/planner/src/Views/Inbox.vala"
	g_atomic_int_inc (&_data17_->_ref_count_);
#line 482 "/run/build/planner/src/Views/Inbox.vala"
	return _data17_;
#line 1197 "Inbox.c"
}


static void
block17_data_unref (void * _userdata_)
{
	Block17Data* _data17_;
	_data17_ = (Block17Data*) _userdata_;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
	if (g_atomic_int_dec_and_test (&_data17_->_ref_count_)) {
#line 1208 "Inbox.c"
		ViewsInbox* self;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
		self = _data17_->self;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (_data17_->row);
#line 482 "/run/build/planner/src/Views/Inbox.vala"
		_objects_task_unref0 (_data17_->task);
#line 482 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (self);
#line 482 "/run/build/planner/src/Views/Inbox.vala"
		g_slice_free (Block17Data, _data17_);
#line 1220 "Inbox.c"
	}
}


static gboolean
____lambda255_ (Block17Data* _data17_)
{
	ViewsInbox* self;
	gboolean result = FALSE;
	WidgetsTaskRow* _tmp0_;
#line 511 "/run/build/planner/src/Views/Inbox.vala"
	self = _data17_->self;
#line 512 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = _data17_->row;
#line 512 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_destroy ((GtkWidget*) _tmp0_);
#line 513 "/run/build/planner/src/Views/Inbox.vala"
	result = G_SOURCE_REMOVE;
#line 513 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 1241 "Inbox.c"
}


static gboolean
_____lambda255__gsource_func (gpointer self)
{
	gboolean result;
	result = ____lambda255_ (self);
#line 511 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 1252 "Inbox.c"
}


static void
____lambda254_ (Block17Data* _data17_,
                ObjectsTask* _task)
{
	ViewsInbox* self;
	gboolean _tmp0_ = FALSE;
	gint _tmp1_;
	GtkListBox* _tmp23_;
#line 489 "/run/build/planner/src/Views/Inbox.vala"
	self = _data17_->self;
#line 489 "/run/build/planner/src/Views/Inbox.vala"
	g_return_if_fail (_task != NULL);
#line 490 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = _task->is_inbox;
#line 490 "/run/build/planner/src/Views/Inbox.vala"
	if (_tmp1_ == 0) {
#line 490 "/run/build/planner/src/Views/Inbox.vala"
		_tmp0_ = TRUE;
#line 1274 "Inbox.c"
	} else {
		const gchar* _tmp2_;
#line 490 "/run/build/planner/src/Views/Inbox.vala"
		_tmp2_ = _task->when_date_utc;
#line 490 "/run/build/planner/src/Views/Inbox.vala"
		_tmp0_ = g_strcmp0 (_tmp2_, "") != 0;
#line 1281 "Inbox.c"
	}
#line 490 "/run/build/planner/src/Views/Inbox.vala"
	if (_tmp0_) {
#line 1285 "Inbox.c"
		const gchar* _tmp3_;
		WidgetsTaskRow* _tmp22_;
#line 491 "/run/build/planner/src/Views/Inbox.vala"
		_tmp3_ = _task->when_date_utc;
#line 491 "/run/build/planner/src/Views/Inbox.vala"
		if (g_strcmp0 (_tmp3_, "") != 0) {
#line 1292 "Inbox.c"
			GDateTime* _when = NULL;
			const gchar* _tmp4_;
			GTimeZone* _tmp5_;
			GTimeZone* _tmp6_;
			GDateTime* _tmp7_;
			GDateTime* _tmp8_;
			gchar* view = NULL;
			gchar* _tmp9_;
			Utils* _tmp10_;
			GDateTime* _tmp11_;
			ServicesNotifications* _tmp16_;
			ObjectsTask* _tmp17_;
			const gchar* _tmp18_;
			const gchar* _tmp19_;
			gchar* _tmp20_;
			gchar* _tmp21_;
#line 493 "/run/build/planner/src/Views/Inbox.vala"
			_tmp4_ = _task->when_date_utc;
#line 493 "/run/build/planner/src/Views/Inbox.vala"
			_tmp5_ = g_time_zone_new_local ();
#line 493 "/run/build/planner/src/Views/Inbox.vala"
			_tmp6_ = _tmp5_;
#line 493 "/run/build/planner/src/Views/Inbox.vala"
			_tmp7_ = g_date_time_new_from_iso8601 (_tmp4_, _tmp6_);
#line 493 "/run/build/planner/src/Views/Inbox.vala"
			_tmp8_ = _tmp7_;
#line 493 "/run/build/planner/src/Views/Inbox.vala"
			_g_time_zone_unref0 (_tmp6_);
#line 493 "/run/build/planner/src/Views/Inbox.vala"
			_when = _tmp8_;
#line 494 "/run/build/planner/src/Views/Inbox.vala"
			_tmp9_ = g_strdup ("");
#line 494 "/run/build/planner/src/Views/Inbox.vala"
			view = _tmp9_;
#line 496 "/run/build/planner/src/Views/Inbox.vala"
			_tmp10_ = application_utils;
#line 496 "/run/build/planner/src/Views/Inbox.vala"
			_tmp11_ = _when;
#line 496 "/run/build/planner/src/Views/Inbox.vala"
			if (utils_is_today (_tmp10_, _tmp11_)) {
#line 1333 "Inbox.c"
				gchar* _tmp12_;
#line 497 "/run/build/planner/src/Views/Inbox.vala"
				_tmp12_ = g_strdup (_ ("Today"));
#line 497 "/run/build/planner/src/Views/Inbox.vala"
				_g_free0 (view);
#line 497 "/run/build/planner/src/Views/Inbox.vala"
				view = _tmp12_;
#line 1341 "Inbox.c"
			} else {
				Utils* _tmp13_;
				GDateTime* _tmp14_;
#line 498 "/run/build/planner/src/Views/Inbox.vala"
				_tmp13_ = application_utils;
#line 498 "/run/build/planner/src/Views/Inbox.vala"
				_tmp14_ = _when;
#line 498 "/run/build/planner/src/Views/Inbox.vala"
				if (utils_is_upcoming (_tmp13_, _tmp14_)) {
#line 1351 "Inbox.c"
					gchar* _tmp15_;
#line 499 "/run/build/planner/src/Views/Inbox.vala"
					_tmp15_ = g_strdup (_ ("Upcoming"));
#line 499 "/run/build/planner/src/Views/Inbox.vala"
					_g_free0 (view);
#line 499 "/run/build/planner/src/Views/Inbox.vala"
					view = _tmp15_;
#line 1359 "Inbox.c"
				}
			}
#line 502 "/run/build/planner/src/Views/Inbox.vala"
			_tmp16_ = application_notification;
#line 502 "/run/build/planner/src/Views/Inbox.vala"
			_tmp17_ = _data17_->task;
#line 502 "/run/build/planner/src/Views/Inbox.vala"
			_tmp18_ = _tmp17_->content;
#line 502 "/run/build/planner/src/Views/Inbox.vala"
			_tmp19_ = view;
#line 502 "/run/build/planner/src/Views/Inbox.vala"
			_tmp20_ = g_strdup_printf (_ ("It was moved to %s"), _tmp19_);
#line 502 "/run/build/planner/src/Views/Inbox.vala"
			_tmp21_ = _tmp20_;
#line 502 "/run/build/planner/src/Views/Inbox.vala"
			g_signal_emit_by_name (_tmp16_, "send-local-notification", _tmp18_, _tmp21_, "document-export", 3, FALSE);
#line 502 "/run/build/planner/src/Views/Inbox.vala"
			_g_free0 (_tmp21_);
#line 491 "/run/build/planner/src/Views/Inbox.vala"
			_g_free0 (view);
#line 491 "/run/build/planner/src/Views/Inbox.vala"
			_g_date_time_unref0 (_when);
#line 1382 "Inbox.c"
		}
#line 510 "/run/build/planner/src/Views/Inbox.vala"
		_tmp22_ = _data17_->row;
#line 510 "/run/build/planner/src/Views/Inbox.vala"
		if (G_TYPE_CHECK_INSTANCE_TYPE (_tmp22_, gtk_widget_get_type ())) {
#line 511 "/run/build/planner/src/Views/Inbox.vala"
			g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 250, _____lambda255__gsource_func, block17_data_ref (_data17_), block17_data_unref);
#line 1390 "Inbox.c"
		}
	}
#line 518 "/run/build/planner/src/Views/Inbox.vala"
	_tmp23_ = self->priv->tasks_list;
#line 518 "/run/build/planner/src/Views/Inbox.vala"
	gtk_list_box_unselect_all (_tmp23_);
#line 1397 "Inbox.c"
}


static void
_____lambda254__widgets_task_row_on_signal_update (WidgetsTaskRow* _sender,
                                                   ObjectsTask* task,
                                                   gpointer self)
{
#line 489 "/run/build/planner/src/Views/Inbox.vala"
	____lambda254_ (self, task);
#line 1408 "Inbox.c"
}


void
views_inbox_update_tasks_list (ViewsInbox* self)
{
	GeeArrayList* all_tasks = NULL;
	GeeArrayList* _tmp0_;
	ServicesDatabase* _tmp1_;
	GeeArrayList* _tmp2_;
	GtkListBox* _tmp23_;
	Utils* _tmp24_;
	GtkListBox* _tmp25_;
#line 478 "/run/build/planner/src/Views/Inbox.vala"
	g_return_if_fail (self != NULL);
#line 479 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = gee_array_list_new (OBJECTS_TYPE_TASK, (GBoxedCopyFunc) objects_task_ref, (GDestroyNotify) objects_task_unref, NULL, NULL, NULL);
#line 479 "/run/build/planner/src/Views/Inbox.vala"
	all_tasks = _tmp0_;
#line 480 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = application_database;
#line 480 "/run/build/planner/src/Views/Inbox.vala"
	_tmp2_ = services_database_get_all_inbox_tasks (_tmp1_);
#line 480 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (all_tasks);
#line 480 "/run/build/planner/src/Views/Inbox.vala"
	all_tasks = _tmp2_;
#line 1436 "Inbox.c"
	{
		GeeArrayList* _task_list = NULL;
		GeeArrayList* _tmp3_;
		GeeArrayList* _tmp4_;
		gint _task_size = 0;
		GeeArrayList* _tmp5_;
		gint _tmp6_;
		gint _tmp7_;
		gint _task_index = 0;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
		_tmp3_ = all_tasks;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
		_tmp4_ = _g_object_ref0 (_tmp3_);
#line 482 "/run/build/planner/src/Views/Inbox.vala"
		_task_list = _tmp4_;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
		_tmp5_ = _task_list;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
		_tmp6_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp5_);
#line 482 "/run/build/planner/src/Views/Inbox.vala"
		_tmp7_ = _tmp6_;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
		_task_size = _tmp7_;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
		_task_index = -1;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
		while (TRUE) {
#line 1464 "Inbox.c"
			Block17Data* _data17_;
			gint _tmp8_;
			gint _tmp9_;
			gint _tmp10_;
			GeeArrayList* _tmp11_;
			gint _tmp12_;
			gpointer _tmp13_;
			ObjectsTask* _tmp14_;
			WidgetsTaskRow* _tmp15_;
			WidgetsTaskRow* _tmp16_;
			GtkBox* _tmp17_;
			WidgetsTaskRow* _tmp18_;
			GtkBox* _tmp19_;
			GtkListBox* _tmp20_;
			WidgetsTaskRow* _tmp21_;
			WidgetsTaskRow* _tmp22_;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
			_data17_ = g_slice_new0 (Block17Data);
#line 482 "/run/build/planner/src/Views/Inbox.vala"
			_data17_->_ref_count_ = 1;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
			_data17_->self = g_object_ref (self);
#line 482 "/run/build/planner/src/Views/Inbox.vala"
			_tmp8_ = _task_index;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
			_task_index = _tmp8_ + 1;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
			_tmp9_ = _task_index;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
			_tmp10_ = _task_size;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
			if (!(_tmp9_ < _tmp10_)) {
#line 482 "/run/build/planner/src/Views/Inbox.vala"
				block17_data_unref (_data17_);
#line 482 "/run/build/planner/src/Views/Inbox.vala"
				_data17_ = NULL;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
				break;
#line 1503 "Inbox.c"
			}
#line 482 "/run/build/planner/src/Views/Inbox.vala"
			_tmp11_ = _task_list;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
			_tmp12_ = _task_index;
#line 482 "/run/build/planner/src/Views/Inbox.vala"
			_tmp13_ = gee_abstract_list_get ((GeeAbstractList*) _tmp11_, _tmp12_);
#line 482 "/run/build/planner/src/Views/Inbox.vala"
			_data17_->task = (ObjectsTask*) _tmp13_;
#line 483 "/run/build/planner/src/Views/Inbox.vala"
			_tmp14_ = _data17_->task;
#line 483 "/run/build/planner/src/Views/Inbox.vala"
			_tmp15_ = widgets_task_row_new (_tmp14_);
#line 483 "/run/build/planner/src/Views/Inbox.vala"
			g_object_ref_sink (_tmp15_);
#line 483 "/run/build/planner/src/Views/Inbox.vala"
			_data17_->row = _tmp15_;
#line 484 "/run/build/planner/src/Views/Inbox.vala"
			_tmp16_ = _data17_->row;
#line 484 "/run/build/planner/src/Views/Inbox.vala"
			_tmp17_ = _tmp16_->project_preview_box;
#line 484 "/run/build/planner/src/Views/Inbox.vala"
			gtk_widget_set_visible ((GtkWidget*) _tmp17_, FALSE);
#line 485 "/run/build/planner/src/Views/Inbox.vala"
			_tmp18_ = _data17_->row;
#line 485 "/run/build/planner/src/Views/Inbox.vala"
			_tmp19_ = _tmp18_->project_preview_box;
#line 485 "/run/build/planner/src/Views/Inbox.vala"
			gtk_widget_set_no_show_all ((GtkWidget*) _tmp19_, TRUE);
#line 487 "/run/build/planner/src/Views/Inbox.vala"
			_tmp20_ = self->priv->tasks_list;
#line 487 "/run/build/planner/src/Views/Inbox.vala"
			_tmp21_ = _data17_->row;
#line 487 "/run/build/planner/src/Views/Inbox.vala"
			gtk_container_add ((GtkContainer*) _tmp20_, (GtkWidget*) _tmp21_);
#line 489 "/run/build/planner/src/Views/Inbox.vala"
			_tmp22_ = _data17_->row;
#line 489 "/run/build/planner/src/Views/Inbox.vala"
			g_signal_connect_data (_tmp22_, "on-signal-update", (GCallback) _____lambda254__widgets_task_row_on_signal_update, block17_data_ref (_data17_), (GClosureNotify) block17_data_unref, 0);
#line 482 "/run/build/planner/src/Views/Inbox.vala"
			block17_data_unref (_data17_);
#line 482 "/run/build/planner/src/Views/Inbox.vala"
			_data17_ = NULL;
#line 1547 "Inbox.c"
		}
#line 482 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (_task_list);
#line 1551 "Inbox.c"
	}
#line 522 "/run/build/planner/src/Views/Inbox.vala"
	_tmp23_ = self->priv->tasks_list;
#line 522 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp23_);
#line 524 "/run/build/planner/src/Views/Inbox.vala"
	_tmp24_ = application_utils;
#line 524 "/run/build/planner/src/Views/Inbox.vala"
	_tmp25_ = self->priv->tasks_list;
#line 524 "/run/build/planner/src/Views/Inbox.vala"
	if (utils_is_listbox_empty (_tmp24_, _tmp25_)) {
#line 1563 "Inbox.c"
		GtkStack* _tmp26_;
#line 525 "/run/build/planner/src/Views/Inbox.vala"
		_tmp26_ = self->priv->main_stack;
#line 525 "/run/build/planner/src/Views/Inbox.vala"
		gtk_stack_set_visible_child_name (_tmp26_, "alert");
#line 1569 "Inbox.c"
	}
#line 478 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (all_tasks);
#line 1573 "Inbox.c"
}


static void
views_inbox_task_on_revealer (ViewsInbox* self)
{
	WidgetsTaskNew* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	GtkListBox* _tmp11_;
#line 529 "/run/build/planner/src/Views/Inbox.vala"
	g_return_if_fail (self != NULL);
#line 530 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = self->priv->task_new_revealer;
#line 530 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = gtk_revealer_get_reveal_child ((GtkRevealer*) _tmp0_);
#line 530 "/run/build/planner/src/Views/Inbox.vala"
	_tmp2_ = _tmp1_;
#line 530 "/run/build/planner/src/Views/Inbox.vala"
	if (_tmp2_) {
#line 1594 "Inbox.c"
		WidgetsTaskNew* _tmp3_;
		WidgetsTaskNew* _tmp4_;
		GtkRevealer* _tmp5_;
#line 531 "/run/build/planner/src/Views/Inbox.vala"
		_tmp3_ = self->priv->task_new_revealer;
#line 531 "/run/build/planner/src/Views/Inbox.vala"
		gtk_revealer_set_transition_type ((GtkRevealer*) _tmp3_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP);
#line 532 "/run/build/planner/src/Views/Inbox.vala"
		_tmp4_ = self->priv->task_new_revealer;
#line 532 "/run/build/planner/src/Views/Inbox.vala"
		gtk_revealer_set_reveal_child ((GtkRevealer*) _tmp4_, FALSE);
#line 534 "/run/build/planner/src/Views/Inbox.vala"
		_tmp5_ = self->priv->add_task_revealer;
#line 534 "/run/build/planner/src/Views/Inbox.vala"
		gtk_revealer_set_reveal_child (_tmp5_, TRUE);
#line 1610 "Inbox.c"
	} else {
		WidgetsTaskNew* _tmp6_;
		WidgetsTaskNew* _tmp7_;
		GtkRevealer* _tmp8_;
		WidgetsTaskNew* _tmp9_;
		GtkEntry* _tmp10_;
#line 536 "/run/build/planner/src/Views/Inbox.vala"
		_tmp6_ = self->priv->task_new_revealer;
#line 536 "/run/build/planner/src/Views/Inbox.vala"
		gtk_revealer_set_transition_type ((GtkRevealer*) _tmp6_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN);
#line 537 "/run/build/planner/src/Views/Inbox.vala"
		_tmp7_ = self->priv->task_new_revealer;
#line 537 "/run/build/planner/src/Views/Inbox.vala"
		gtk_revealer_set_reveal_child ((GtkRevealer*) _tmp7_, TRUE);
#line 539 "/run/build/planner/src/Views/Inbox.vala"
		_tmp8_ = self->priv->add_task_revealer;
#line 539 "/run/build/planner/src/Views/Inbox.vala"
		gtk_revealer_set_reveal_child (_tmp8_, FALSE);
#line 540 "/run/build/planner/src/Views/Inbox.vala"
		_tmp9_ = self->priv->task_new_revealer;
#line 540 "/run/build/planner/src/Views/Inbox.vala"
		_tmp10_ = _tmp9_->name_entry;
#line 540 "/run/build/planner/src/Views/Inbox.vala"
		gtk_widget_grab_focus ((GtkWidget*) _tmp10_);
#line 1635 "Inbox.c"
	}
#line 543 "/run/build/planner/src/Views/Inbox.vala"
	_tmp11_ = self->priv->tasks_list;
#line 543 "/run/build/planner/src/Views/Inbox.vala"
	gtk_list_box_unselect_all (_tmp11_);
#line 1641 "Inbox.c"
}


MainWindow*
views_inbox_get_window (ViewsInbox* self)
{
	MainWindow* result;
	MainWindow* _tmp0_;
#line 23 "/run/build/planner/src/Views/Inbox.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = self->priv->_window;
#line 23 "/run/build/planner/src/Views/Inbox.vala"
	result = _tmp0_;
#line 23 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 1658 "Inbox.c"
}


static void
views_inbox_set_window (ViewsInbox* self,
                        MainWindow* value)
{
#line 23 "/run/build/planner/src/Views/Inbox.vala"
	g_return_if_fail (self != NULL);
#line 23 "/run/build/planner/src/Views/Inbox.vala"
	if (views_inbox_get_window (self) != value) {
#line 1670 "Inbox.c"
		MainWindow* _tmp0_;
#line 23 "/run/build/planner/src/Views/Inbox.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 23 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (self->priv->_window);
#line 23 "/run/build/planner/src/Views/Inbox.vala"
		self->priv->_window = _tmp0_;
#line 23 "/run/build/planner/src/Views/Inbox.vala"
		g_object_notify_by_pspec ((GObject *) self, views_inbox_properties[VIEWS_INBOX_WINDOW_PROPERTY]);
#line 1680 "Inbox.c"
	}
}


static Block18Data*
block18_data_ref (Block18Data* _data18_)
{
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	g_atomic_int_inc (&_data18_->_ref_count_);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	return _data18_;
#line 1692 "Inbox.c"
}


static void
block18_data_unref (void * _userdata_)
{
	Block18Data* _data18_;
	_data18_ = (Block18Data*) _userdata_;
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	if (g_atomic_int_dec_and_test (&_data18_->_ref_count_)) {
#line 1703 "Inbox.c"
		ViewsInbox* self;
#line 39 "/run/build/planner/src/Views/Inbox.vala"
		self = _data18_->self;
#line 39 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (_data18_->clipboard);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (_data18_->labels_flowbox_revealer);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (_data18_->show_hide_image);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (_data18_->show_hide_all_button);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (self);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
		g_slice_free (Block18Data, _data18_);
#line 1719 "Inbox.c"
	}
}


static void
_views_inbox___lambda256_ (Block18Data* _data18_)
{
	ViewsInbox* self;
	GtkToggleButton* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 63 "/run/build/planner/src/Views/Inbox.vala"
	self = _data18_->self;
#line 64 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = _data18_->show_hide_all_button;
#line 64 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = gtk_toggle_button_get_active (_tmp0_);
#line 64 "/run/build/planner/src/Views/Inbox.vala"
	_tmp2_ = _tmp1_;
#line 64 "/run/build/planner/src/Views/Inbox.vala"
	if (_tmp2_) {
#line 1741 "Inbox.c"
		GtkToggleButton* _tmp3_;
		GtkImage* _tmp4_;
		GtkListBox* _tmp5_;
		GList* _tmp6_;
#line 65 "/run/build/planner/src/Views/Inbox.vala"
		_tmp3_ = _data18_->show_hide_all_button;
#line 65 "/run/build/planner/src/Views/Inbox.vala"
		gtk_widget_set_tooltip_text ((GtkWidget*) _tmp3_, _ ("Close all tasks"));
#line 66 "/run/build/planner/src/Views/Inbox.vala"
		_tmp4_ = _data18_->show_hide_image;
#line 66 "/run/build/planner/src/Views/Inbox.vala"
		g_object_set (_tmp4_, "icon-name", "zoom-out-symbolic", NULL);
#line 68 "/run/build/planner/src/Views/Inbox.vala"
		_tmp5_ = self->priv->tasks_list;
#line 68 "/run/build/planner/src/Views/Inbox.vala"
		_tmp6_ = gtk_container_get_children ((GtkContainer*) _tmp5_);
#line 1758 "Inbox.c"
		{
			GList* element_collection = NULL;
			GList* element_it = NULL;
#line 68 "/run/build/planner/src/Views/Inbox.vala"
			element_collection = _tmp6_;
#line 68 "/run/build/planner/src/Views/Inbox.vala"
			for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 1766 "Inbox.c"
				GtkWidget* _tmp7_;
				GtkWidget* element = NULL;
#line 68 "/run/build/planner/src/Views/Inbox.vala"
				_tmp7_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 68 "/run/build/planner/src/Views/Inbox.vala"
				element = _tmp7_;
#line 1773 "Inbox.c"
				{
					WidgetsTaskRow* row = NULL;
					GtkWidget* _tmp8_;
					WidgetsTaskRow* _tmp9_;
					WidgetsTaskRow* _tmp10_;
#line 69 "/run/build/planner/src/Views/Inbox.vala"
					_tmp8_ = element;
#line 69 "/run/build/planner/src/Views/Inbox.vala"
					_tmp9_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp8_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp8_) : NULL);
#line 69 "/run/build/planner/src/Views/Inbox.vala"
					row = _tmp9_;
#line 70 "/run/build/planner/src/Views/Inbox.vala"
					_tmp10_ = row;
#line 70 "/run/build/planner/src/Views/Inbox.vala"
					widgets_task_row_show_content (_tmp10_);
#line 68 "/run/build/planner/src/Views/Inbox.vala"
					_g_object_unref0 (row);
#line 68 "/run/build/planner/src/Views/Inbox.vala"
					_g_object_unref0 (element);
#line 1793 "Inbox.c"
				}
			}
#line 68 "/run/build/planner/src/Views/Inbox.vala"
			(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 1798 "Inbox.c"
		}
	} else {
		GtkToggleButton* _tmp11_;
		GtkImage* _tmp12_;
		GtkListBox* _tmp13_;
		GList* _tmp14_;
#line 73 "/run/build/planner/src/Views/Inbox.vala"
		_tmp11_ = _data18_->show_hide_all_button;
#line 73 "/run/build/planner/src/Views/Inbox.vala"
		gtk_widget_set_tooltip_text ((GtkWidget*) _tmp11_, _ ("Open all tasks"));
#line 74 "/run/build/planner/src/Views/Inbox.vala"
		_tmp12_ = _data18_->show_hide_image;
#line 74 "/run/build/planner/src/Views/Inbox.vala"
		g_object_set (_tmp12_, "icon-name", "zoom-in-symbolic", NULL);
#line 76 "/run/build/planner/src/Views/Inbox.vala"
		_tmp13_ = self->priv->tasks_list;
#line 76 "/run/build/planner/src/Views/Inbox.vala"
		_tmp14_ = gtk_container_get_children ((GtkContainer*) _tmp13_);
#line 1817 "Inbox.c"
		{
			GList* element_collection = NULL;
			GList* element_it = NULL;
#line 76 "/run/build/planner/src/Views/Inbox.vala"
			element_collection = _tmp14_;
#line 76 "/run/build/planner/src/Views/Inbox.vala"
			for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 1825 "Inbox.c"
				GtkWidget* _tmp15_;
				GtkWidget* element = NULL;
#line 76 "/run/build/planner/src/Views/Inbox.vala"
				_tmp15_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 76 "/run/build/planner/src/Views/Inbox.vala"
				element = _tmp15_;
#line 1832 "Inbox.c"
				{
					WidgetsTaskRow* row = NULL;
					GtkWidget* _tmp16_;
					WidgetsTaskRow* _tmp17_;
					WidgetsTaskRow* _tmp18_;
#line 77 "/run/build/planner/src/Views/Inbox.vala"
					_tmp16_ = element;
#line 77 "/run/build/planner/src/Views/Inbox.vala"
					_tmp17_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp16_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp16_) : NULL);
#line 77 "/run/build/planner/src/Views/Inbox.vala"
					row = _tmp17_;
#line 78 "/run/build/planner/src/Views/Inbox.vala"
					_tmp18_ = row;
#line 78 "/run/build/planner/src/Views/Inbox.vala"
					widgets_task_row_hide_content (_tmp18_);
#line 76 "/run/build/planner/src/Views/Inbox.vala"
					_g_object_unref0 (row);
#line 76 "/run/build/planner/src/Views/Inbox.vala"
					_g_object_unref0 (element);
#line 1852 "Inbox.c"
				}
			}
#line 76 "/run/build/planner/src/Views/Inbox.vala"
			(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 1857 "Inbox.c"
		}
	}
}


static void
__views_inbox___lambda256__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                      gpointer self)
{
#line 63 "/run/build/planner/src/Views/Inbox.vala"
	_views_inbox___lambda256_ (self);
#line 1869 "Inbox.c"
}


static void
_gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                   gpointer self)
{
#line 107 "/run/build/planner/src/Views/Inbox.vala"
	gtk_main_quit ();
#line 1879 "Inbox.c"
}


static void
_views_inbox___lambda257_ (ViewsInbox* self)
{
	DialogsShareDialog* share_dialog = NULL;
	Application* _tmp0_;
	Application* _tmp1_;
	MainWindow* _tmp2_;
	DialogsShareDialog* _tmp3_;
	DialogsShareDialog* _tmp4_;
	DialogsShareDialog* _tmp5_;
	DialogsShareDialog* _tmp6_;
#line 105 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = application_get_instance ();
#line 105 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = _tmp0_;
#line 105 "/run/build/planner/src/Views/Inbox.vala"
	_tmp2_ = _tmp1_->main_window;
#line 105 "/run/build/planner/src/Views/Inbox.vala"
	_tmp3_ = dialogs_share_dialog_new (_tmp2_);
#line 105 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp3_);
#line 105 "/run/build/planner/src/Views/Inbox.vala"
	share_dialog = _tmp3_;
#line 106 "/run/build/planner/src/Views/Inbox.vala"
	_tmp4_ = share_dialog;
#line 106 "/run/build/planner/src/Views/Inbox.vala"
	dialogs_share_dialog_set_inbox (_tmp4_, TRUE);
#line 107 "/run/build/planner/src/Views/Inbox.vala"
	_tmp5_ = share_dialog;
#line 107 "/run/build/planner/src/Views/Inbox.vala"
	g_signal_connect ((GtkWidget*) _tmp5_, "destroy", (GCallback) _gtk_main_quit_gtk_widget_destroy, NULL);
#line 108 "/run/build/planner/src/Views/Inbox.vala"
	_tmp6_ = share_dialog;
#line 108 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp6_);
#line 104 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (share_dialog);
#line 1920 "Inbox.c"
}


static void
__views_inbox___lambda257__gtk_button_clicked (GtkButton* _sender,
                                               gpointer self)
{
#line 104 "/run/build/planner/src/Views/Inbox.vala"
	_views_inbox___lambda257_ ((ViewsInbox*) self);
#line 1930 "Inbox.c"
}


static gboolean
_views_inbox____lambda258_ (ViewsInbox* self)
{
	gboolean result = FALSE;
	GtkStack* _tmp0_;
#line 208 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = self->priv->main_stack;
#line 208 "/run/build/planner/src/Views/Inbox.vala"
	gtk_stack_set_visible_child_name (_tmp0_, "alert");
#line 209 "/run/build/planner/src/Views/Inbox.vala"
	result = FALSE;
#line 209 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 1947 "Inbox.c"
}


static gboolean
__views_inbox____lambda258__gsource_func (gpointer self)
{
	gboolean result;
	result = _views_inbox____lambda258_ ((ViewsInbox*) self);
#line 207 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 1958 "Inbox.c"
}


static gboolean
_views_inbox____lambda259_ (ViewsInbox* self)
{
	gboolean result = FALSE;
	GtkStack* _tmp0_;
#line 213 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = self->priv->main_stack;
#line 213 "/run/build/planner/src/Views/Inbox.vala"
	gtk_stack_set_visible_child_name (_tmp0_, "main");
#line 214 "/run/build/planner/src/Views/Inbox.vala"
	result = FALSE;
#line 214 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 1975 "Inbox.c"
}


static gboolean
__views_inbox____lambda259__gsource_func (gpointer self)
{
	gboolean result;
	result = _views_inbox____lambda259_ ((ViewsInbox*) self);
#line 212 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 1986 "Inbox.c"
}


static gint
_views_inbox___lambda260_ (ViewsInbox* self,
                           GtkListBoxRow* row1,
                           GtkListBoxRow* row2)
{
	gint result = 0;
	WidgetsTaskRow* item1 = NULL;
	WidgetsTaskRow* _tmp0_;
	WidgetsTaskRow* _tmp1_;
	ObjectsTask* _tmp2_;
	ObjectsTask* _tmp3_;
	gint _tmp4_;
#line 218 "/run/build/planner/src/Views/Inbox.vala"
	g_return_val_if_fail (row1 != NULL, 0);
#line 218 "/run/build/planner/src/Views/Inbox.vala"
	g_return_val_if_fail (row2 != NULL, 0);
#line 219 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row1, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) row1) : NULL);
#line 219 "/run/build/planner/src/Views/Inbox.vala"
	item1 = _tmp0_;
#line 220 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = item1;
#line 220 "/run/build/planner/src/Views/Inbox.vala"
	_tmp2_ = widgets_task_row_get_task (_tmp1_);
#line 220 "/run/build/planner/src/Views/Inbox.vala"
	_tmp3_ = _tmp2_;
#line 220 "/run/build/planner/src/Views/Inbox.vala"
	_tmp4_ = _tmp3_->checked;
#line 220 "/run/build/planner/src/Views/Inbox.vala"
	if (_tmp4_ == 0) {
#line 221 "/run/build/planner/src/Views/Inbox.vala"
		result = 0;
#line 221 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (item1);
#line 221 "/run/build/planner/src/Views/Inbox.vala"
		return result;
#line 2026 "Inbox.c"
	} else {
#line 223 "/run/build/planner/src/Views/Inbox.vala"
		result = 1;
#line 223 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (item1);
#line 223 "/run/build/planner/src/Views/Inbox.vala"
		return result;
#line 2034 "Inbox.c"
	}
#line 218 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (item1);
#line 2038 "Inbox.c"
}


static gint
__views_inbox___lambda260__gtk_list_box_sort_func (GtkListBoxRow* row1,
                                                   GtkListBoxRow* row2,
                                                   gpointer self)
{
	gint result;
	result = _views_inbox___lambda260_ ((ViewsInbox*) self, row1, row2);
#line 218 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 2051 "Inbox.c"
}


static void
_views_inbox___lambda261_ (ViewsInbox* self)
{
#line 233 "/run/build/planner/src/Views/Inbox.vala"
	views_inbox_task_on_revealer (self);
#line 2060 "Inbox.c"
}


static void
__views_inbox___lambda261__gtk_button_clicked (GtkButton* _sender,
                                               gpointer self)
{
#line 232 "/run/build/planner/src/Views/Inbox.vala"
	_views_inbox___lambda261_ ((ViewsInbox*) self);
#line 2070 "Inbox.c"
}


static void
_views_inbox___lambda262_ (Block18Data* _data18_)
{
	ViewsInbox* self;
	gchar* text = NULL;
	gchar* _tmp0_;
	GtkClipboard* _tmp1_;
	gchar* _tmp2_;
	gboolean _tmp3_ = FALSE;
	const gchar* _tmp4_;
	GtkListBox* _tmp15_;
#line 236 "/run/build/planner/src/Views/Inbox.vala"
	self = _data18_->self;
#line 237 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = g_strdup ("");
#line 237 "/run/build/planner/src/Views/Inbox.vala"
	text = _tmp0_;
#line 238 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = _data18_->clipboard;
#line 238 "/run/build/planner/src/Views/Inbox.vala"
	_tmp2_ = gtk_clipboard_wait_for_text (_tmp1_);
#line 238 "/run/build/planner/src/Views/Inbox.vala"
	_g_free0 (text);
#line 238 "/run/build/planner/src/Views/Inbox.vala"
	text = _tmp2_;
#line 240 "/run/build/planner/src/Views/Inbox.vala"
	_tmp4_ = text;
#line 240 "/run/build/planner/src/Views/Inbox.vala"
	if (g_strcmp0 (_tmp4_, "") == 0) {
#line 240 "/run/build/planner/src/Views/Inbox.vala"
		_tmp3_ = TRUE;
#line 2105 "Inbox.c"
	} else {
		const gchar* _tmp5_;
#line 240 "/run/build/planner/src/Views/Inbox.vala"
		_tmp5_ = text;
#line 240 "/run/build/planner/src/Views/Inbox.vala"
		_tmp3_ = _tmp5_ == NULL;
#line 2112 "Inbox.c"
	}
#line 240 "/run/build/planner/src/Views/Inbox.vala"
	if (_tmp3_) {
#line 2116 "Inbox.c"
		ServicesNotifications* _tmp6_;
#line 242 "/run/build/planner/src/Views/Inbox.vala"
		_tmp6_ = application_notification;
#line 242 "/run/build/planner/src/Views/Inbox.vala"
		g_signal_emit_by_name (_tmp6_, "send-local-notification", _ ("Empty clipboard"), _ ("Try copying some text and try again"), "dialog-error", 3, FALSE);
#line 2122 "Inbox.c"
	} else {
		ObjectsTask* task = NULL;
		ObjectsTask* _tmp7_;
		ObjectsTask* _tmp8_;
		const gchar* _tmp9_;
		gchar* _tmp10_;
		ObjectsTask* _tmp11_;
		ServicesDatabase* _tmp12_;
		ObjectsTask* _tmp13_;
#line 249 "/run/build/planner/src/Views/Inbox.vala"
		_tmp7_ = objects_task_new (0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "", "", "", "");
#line 249 "/run/build/planner/src/Views/Inbox.vala"
		task = _tmp7_;
#line 250 "/run/build/planner/src/Views/Inbox.vala"
		_tmp8_ = task;
#line 250 "/run/build/planner/src/Views/Inbox.vala"
		_tmp9_ = text;
#line 250 "/run/build/planner/src/Views/Inbox.vala"
		_tmp10_ = g_strdup (_tmp9_);
#line 250 "/run/build/planner/src/Views/Inbox.vala"
		_g_free0 (_tmp8_->content);
#line 250 "/run/build/planner/src/Views/Inbox.vala"
		_tmp8_->content = _tmp10_;
#line 251 "/run/build/planner/src/Views/Inbox.vala"
		_tmp11_ = task;
#line 251 "/run/build/planner/src/Views/Inbox.vala"
		_tmp11_->is_inbox = 1;
#line 253 "/run/build/planner/src/Views/Inbox.vala"
		_tmp12_ = application_database;
#line 253 "/run/build/planner/src/Views/Inbox.vala"
		_tmp13_ = task;
#line 253 "/run/build/planner/src/Views/Inbox.vala"
		if (services_database_add_task (_tmp12_, _tmp13_) == SQLITE_DONE) {
#line 2156 "Inbox.c"
			ServicesNotifications* _tmp14_;
#line 254 "/run/build/planner/src/Views/Inbox.vala"
			_tmp14_ = application_notification;
#line 254 "/run/build/planner/src/Views/Inbox.vala"
			g_signal_emit_by_name (_tmp14_, "send-local-notification", _ ("His task was created from the clipboard"), _ ("Tap to undo"), "edit-paste", 3, TRUE);
#line 2162 "Inbox.c"
		}
#line 240 "/run/build/planner/src/Views/Inbox.vala"
		_objects_task_unref0 (task);
#line 2166 "Inbox.c"
	}
#line 263 "/run/build/planner/src/Views/Inbox.vala"
	_tmp15_ = self->priv->tasks_list;
#line 263 "/run/build/planner/src/Views/Inbox.vala"
	gtk_list_box_unselect_all (_tmp15_);
#line 236 "/run/build/planner/src/Views/Inbox.vala"
	_g_free0 (text);
#line 2174 "Inbox.c"
}


static void
__views_inbox___lambda262__gtk_button_clicked (GtkButton* _sender,
                                               gpointer self)
{
#line 236 "/run/build/planner/src/Views/Inbox.vala"
	_views_inbox___lambda262_ (self);
#line 2184 "Inbox.c"
}


static gboolean
_views_inbox___lambda263_ (ViewsInbox* self,
                           GdkEvent* event)
{
	gboolean result = FALSE;
	gint button_press = 0;
	GSettings* _tmp0_;
	gint _tmp1_;
	GtkListBox* _tmp25_;
#line 266 "/run/build/planner/src/Views/Inbox.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 267 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = application_settings;
#line 267 "/run/build/planner/src/Views/Inbox.vala"
	button_press = g_settings_get_enum (_tmp0_, "quick-save");
#line 269 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = button_press;
#line 269 "/run/build/planner/src/Views/Inbox.vala"
	if (_tmp1_ == 0) {
#line 2207 "Inbox.c"
	} else {
		gint _tmp2_;
#line 271 "/run/build/planner/src/Views/Inbox.vala"
		_tmp2_ = button_press;
#line 271 "/run/build/planner/src/Views/Inbox.vala"
		if (_tmp2_ == 1) {
#line 2214 "Inbox.c"
			GdkEventType _tmp3_;
#line 272 "/run/build/planner/src/Views/Inbox.vala"
			_tmp3_ = event->type;
#line 272 "/run/build/planner/src/Views/Inbox.vala"
			if (_tmp3_ == GDK_2BUTTON_PRESS) {
#line 2220 "Inbox.c"
				GtkListBox* _tmp4_;
				GList* _tmp5_;
#line 273 "/run/build/planner/src/Views/Inbox.vala"
				_tmp4_ = self->priv->tasks_list;
#line 273 "/run/build/planner/src/Views/Inbox.vala"
				_tmp5_ = gtk_container_get_children ((GtkContainer*) _tmp4_);
#line 2227 "Inbox.c"
				{
					GList* element_collection = NULL;
					GList* element_it = NULL;
#line 273 "/run/build/planner/src/Views/Inbox.vala"
					element_collection = _tmp5_;
#line 273 "/run/build/planner/src/Views/Inbox.vala"
					for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 2235 "Inbox.c"
						GtkWidget* _tmp6_;
						GtkWidget* element = NULL;
#line 273 "/run/build/planner/src/Views/Inbox.vala"
						_tmp6_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 273 "/run/build/planner/src/Views/Inbox.vala"
						element = _tmp6_;
#line 2242 "Inbox.c"
						{
							WidgetsTaskRow* row = NULL;
							GtkWidget* _tmp7_;
							WidgetsTaskRow* _tmp8_;
							WidgetsTaskRow* _tmp9_;
							GtkRevealer* _tmp10_;
							gboolean _tmp11_;
							gboolean _tmp12_;
#line 274 "/run/build/planner/src/Views/Inbox.vala"
							_tmp7_ = element;
#line 274 "/run/build/planner/src/Views/Inbox.vala"
							_tmp8_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp7_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp7_) : NULL);
#line 274 "/run/build/planner/src/Views/Inbox.vala"
							row = _tmp8_;
#line 276 "/run/build/planner/src/Views/Inbox.vala"
							_tmp9_ = row;
#line 276 "/run/build/planner/src/Views/Inbox.vala"
							_tmp10_ = _tmp9_->bottom_box_revealer;
#line 276 "/run/build/planner/src/Views/Inbox.vala"
							_tmp11_ = gtk_revealer_get_reveal_child (_tmp10_);
#line 276 "/run/build/planner/src/Views/Inbox.vala"
							_tmp12_ = _tmp11_;
#line 276 "/run/build/planner/src/Views/Inbox.vala"
							if (_tmp12_) {
#line 2267 "Inbox.c"
								WidgetsTaskRow* _tmp13_;
#line 277 "/run/build/planner/src/Views/Inbox.vala"
								_tmp13_ = row;
#line 277 "/run/build/planner/src/Views/Inbox.vala"
								widgets_task_row_hide_content (_tmp13_);
#line 2273 "Inbox.c"
							}
#line 273 "/run/build/planner/src/Views/Inbox.vala"
							_g_object_unref0 (row);
#line 273 "/run/build/planner/src/Views/Inbox.vala"
							_g_object_unref0 (element);
#line 2279 "Inbox.c"
						}
					}
#line 273 "/run/build/planner/src/Views/Inbox.vala"
					(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 2284 "Inbox.c"
				}
			}
		} else {
			GdkEventType _tmp14_;
#line 282 "/run/build/planner/src/Views/Inbox.vala"
			_tmp14_ = event->type;
#line 282 "/run/build/planner/src/Views/Inbox.vala"
			if (_tmp14_ == GDK_3BUTTON_PRESS) {
#line 2293 "Inbox.c"
				GtkListBox* _tmp15_;
				GList* _tmp16_;
#line 283 "/run/build/planner/src/Views/Inbox.vala"
				_tmp15_ = self->priv->tasks_list;
#line 283 "/run/build/planner/src/Views/Inbox.vala"
				_tmp16_ = gtk_container_get_children ((GtkContainer*) _tmp15_);
#line 2300 "Inbox.c"
				{
					GList* element_collection = NULL;
					GList* element_it = NULL;
#line 283 "/run/build/planner/src/Views/Inbox.vala"
					element_collection = _tmp16_;
#line 283 "/run/build/planner/src/Views/Inbox.vala"
					for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 2308 "Inbox.c"
						GtkWidget* _tmp17_;
						GtkWidget* element = NULL;
#line 283 "/run/build/planner/src/Views/Inbox.vala"
						_tmp17_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 283 "/run/build/planner/src/Views/Inbox.vala"
						element = _tmp17_;
#line 2315 "Inbox.c"
						{
							WidgetsTaskRow* row = NULL;
							GtkWidget* _tmp18_;
							WidgetsTaskRow* _tmp19_;
							WidgetsTaskRow* _tmp20_;
							GtkRevealer* _tmp21_;
							gboolean _tmp22_;
							gboolean _tmp23_;
#line 284 "/run/build/planner/src/Views/Inbox.vala"
							_tmp18_ = element;
#line 284 "/run/build/planner/src/Views/Inbox.vala"
							_tmp19_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp18_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp18_) : NULL);
#line 284 "/run/build/planner/src/Views/Inbox.vala"
							row = _tmp19_;
#line 286 "/run/build/planner/src/Views/Inbox.vala"
							_tmp20_ = row;
#line 286 "/run/build/planner/src/Views/Inbox.vala"
							_tmp21_ = _tmp20_->bottom_box_revealer;
#line 286 "/run/build/planner/src/Views/Inbox.vala"
							_tmp22_ = gtk_revealer_get_reveal_child (_tmp21_);
#line 286 "/run/build/planner/src/Views/Inbox.vala"
							_tmp23_ = _tmp22_;
#line 286 "/run/build/planner/src/Views/Inbox.vala"
							if (_tmp23_) {
#line 2340 "Inbox.c"
								WidgetsTaskRow* _tmp24_;
#line 287 "/run/build/planner/src/Views/Inbox.vala"
								_tmp24_ = row;
#line 287 "/run/build/planner/src/Views/Inbox.vala"
								widgets_task_row_hide_content (_tmp24_);
#line 2346 "Inbox.c"
							}
#line 283 "/run/build/planner/src/Views/Inbox.vala"
							_g_object_unref0 (row);
#line 283 "/run/build/planner/src/Views/Inbox.vala"
							_g_object_unref0 (element);
#line 2352 "Inbox.c"
						}
					}
#line 283 "/run/build/planner/src/Views/Inbox.vala"
					(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 2357 "Inbox.c"
				}
			}
		}
	}
#line 293 "/run/build/planner/src/Views/Inbox.vala"
	_tmp25_ = self->priv->tasks_list;
#line 293 "/run/build/planner/src/Views/Inbox.vala"
	gtk_list_box_unselect_all (_tmp25_);
#line 294 "/run/build/planner/src/Views/Inbox.vala"
	result = FALSE;
#line 294 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 2370 "Inbox.c"
}


static gboolean
__views_inbox___lambda263__gtk_widget_event (GtkWidget* _sender,
                                             GdkEvent* event,
                                             gpointer self)
{
	gboolean result;
	result = _views_inbox___lambda263_ ((ViewsInbox*) self, event);
#line 266 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 2383 "Inbox.c"
}


static void
_views_inbox___lambda264_ (ViewsInbox* self)
{
#line 298 "/run/build/planner/src/Views/Inbox.vala"
	views_inbox_task_on_revealer (self);
#line 2392 "Inbox.c"
}


static void
__views_inbox___lambda264__widgets_task_new_on_signal_close (WidgetsTaskNew* _sender,
                                                             gpointer self)
{
#line 297 "/run/build/planner/src/Views/Inbox.vala"
	_views_inbox___lambda264_ ((ViewsInbox*) self);
#line 2402 "Inbox.c"
}


static void
_views_inbox___lambda265_ (ViewsInbox* self)
{
	WidgetsPopoversLabelsPopover* _tmp0_;
	WidgetsPopoversLabelsPopover* _tmp1_;
#line 302 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = self->priv->labels_popover;
#line 302 "/run/build/planner/src/Views/Inbox.vala"
	widgets_popovers_labels_popover_update_label_list (_tmp0_);
#line 303 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = self->priv->labels_popover;
#line 303 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp1_);
#line 2419 "Inbox.c"
}


static void
__views_inbox___lambda265__gtk_button_clicked (GtkButton* _sender,
                                               gpointer self)
{
#line 301 "/run/build/planner/src/Views/Inbox.vala"
	_views_inbox___lambda265_ ((ViewsInbox*) self);
#line 2429 "Inbox.c"
}


static gboolean
__lambda267_ (ViewsInbox* self,
              GtkListBoxRow* row)
{
	gboolean result = FALSE;
	WidgetsTaskRow* item = NULL;
	WidgetsTaskRow* _tmp0_;
	GeeArrayList* labels = NULL;
	GeeArrayList* _tmp1_;
	GeeArrayList* _labels = NULL;
	GeeArrayList* _tmp2_;
	WidgetsTaskRow* _tmp3_;
	ObjectsTask* _tmp4_;
	ObjectsTask* _tmp5_;
	const gchar* _tmp6_;
	gchar** _tmp7_;
	gchar** _tmp8_;
	GtkFlowBox* _tmp12_;
	GList* _tmp13_;
#line 317 "/run/build/planner/src/Views/Inbox.vala"
	g_return_val_if_fail (row != NULL, FALSE);
#line 318 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) row) : NULL);
#line 318 "/run/build/planner/src/Views/Inbox.vala"
	item = _tmp0_;
#line 319 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = gee_array_list_new (G_TYPE_INT, NULL, NULL, NULL, NULL, NULL);
#line 319 "/run/build/planner/src/Views/Inbox.vala"
	labels = _tmp1_;
#line 320 "/run/build/planner/src/Views/Inbox.vala"
	_tmp2_ = gee_array_list_new (G_TYPE_INT, NULL, NULL, NULL, NULL, NULL);
#line 320 "/run/build/planner/src/Views/Inbox.vala"
	_labels = _tmp2_;
#line 322 "/run/build/planner/src/Views/Inbox.vala"
	_tmp3_ = item;
#line 322 "/run/build/planner/src/Views/Inbox.vala"
	_tmp4_ = widgets_task_row_get_task (_tmp3_);
#line 322 "/run/build/planner/src/Views/Inbox.vala"
	_tmp5_ = _tmp4_;
#line 322 "/run/build/planner/src/Views/Inbox.vala"
	_tmp6_ = _tmp5_->labels;
#line 322 "/run/build/planner/src/Views/Inbox.vala"
	_tmp8_ = _tmp7_ = g_strsplit (_tmp6_, ";", 0);
#line 2476 "Inbox.c"
	{
		gchar** label_id_collection = NULL;
		gint label_id_collection_length1 = 0;
		gint _label_id_collection_size_ = 0;
		gint label_id_it = 0;
#line 322 "/run/build/planner/src/Views/Inbox.vala"
		label_id_collection = _tmp8_;
#line 322 "/run/build/planner/src/Views/Inbox.vala"
		label_id_collection_length1 = _vala_array_length (_tmp7_);
#line 322 "/run/build/planner/src/Views/Inbox.vala"
		for (label_id_it = 0; label_id_it < _vala_array_length (_tmp7_); label_id_it = label_id_it + 1) {
#line 2488 "Inbox.c"
			gchar* _tmp9_;
			gchar* label_id = NULL;
#line 322 "/run/build/planner/src/Views/Inbox.vala"
			_tmp9_ = g_strdup (label_id_collection[label_id_it]);
#line 322 "/run/build/planner/src/Views/Inbox.vala"
			label_id = _tmp9_;
#line 2495 "Inbox.c"
			{
				GeeArrayList* _tmp10_;
				const gchar* _tmp11_;
#line 323 "/run/build/planner/src/Views/Inbox.vala"
				_tmp10_ = labels;
#line 323 "/run/build/planner/src/Views/Inbox.vala"
				_tmp11_ = label_id;
#line 323 "/run/build/planner/src/Views/Inbox.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp10_, (gpointer) ((gintptr) atoi (_tmp11_)));
#line 322 "/run/build/planner/src/Views/Inbox.vala"
				_g_free0 (label_id);
#line 2507 "Inbox.c"
			}
		}
#line 322 "/run/build/planner/src/Views/Inbox.vala"
		label_id_collection = (_vala_array_free (label_id_collection, label_id_collection_length1, (GDestroyNotify) g_free), NULL);
#line 2512 "Inbox.c"
	}
#line 326 "/run/build/planner/src/Views/Inbox.vala"
	_tmp12_ = self->priv->labels_flowbox;
#line 326 "/run/build/planner/src/Views/Inbox.vala"
	_tmp13_ = gtk_container_get_children ((GtkContainer*) _tmp12_);
#line 2518 "Inbox.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 326 "/run/build/planner/src/Views/Inbox.vala"
		element_collection = _tmp13_;
#line 326 "/run/build/planner/src/Views/Inbox.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 2526 "Inbox.c"
			GtkWidget* _tmp14_;
			GtkWidget* element = NULL;
#line 326 "/run/build/planner/src/Views/Inbox.vala"
			_tmp14_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 326 "/run/build/planner/src/Views/Inbox.vala"
			element = _tmp14_;
#line 2533 "Inbox.c"
			{
				WidgetsLabelChild* child = NULL;
				GtkWidget* _tmp15_;
				WidgetsLabelChild* _tmp16_;
				GeeArrayList* _tmp17_;
				WidgetsLabelChild* _tmp18_;
				ObjectsLabel* _tmp19_;
				ObjectsLabel* _tmp20_;
				gint _tmp21_;
#line 327 "/run/build/planner/src/Views/Inbox.vala"
				_tmp15_ = element;
#line 327 "/run/build/planner/src/Views/Inbox.vala"
				_tmp16_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp15_, WIDGETS_TYPE_LABEL_CHILD) ? ((WidgetsLabelChild*) _tmp15_) : NULL);
#line 327 "/run/build/planner/src/Views/Inbox.vala"
				child = _tmp16_;
#line 328 "/run/build/planner/src/Views/Inbox.vala"
				_tmp17_ = _labels;
#line 328 "/run/build/planner/src/Views/Inbox.vala"
				_tmp18_ = child;
#line 328 "/run/build/planner/src/Views/Inbox.vala"
				_tmp19_ = widgets_label_child_get_label (_tmp18_);
#line 328 "/run/build/planner/src/Views/Inbox.vala"
				_tmp20_ = _tmp19_;
#line 328 "/run/build/planner/src/Views/Inbox.vala"
				_tmp21_ = _tmp20_->id;
#line 328 "/run/build/planner/src/Views/Inbox.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp17_, (gpointer) ((gintptr) _tmp21_));
#line 326 "/run/build/planner/src/Views/Inbox.vala"
				_g_object_unref0 (child);
#line 326 "/run/build/planner/src/Views/Inbox.vala"
				_g_object_unref0 (element);
#line 2565 "Inbox.c"
			}
		}
#line 326 "/run/build/planner/src/Views/Inbox.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 2570 "Inbox.c"
	}
	{
		GeeArrayList* _x_list = NULL;
		GeeArrayList* _tmp22_;
		GeeArrayList* _tmp23_;
		gint _x_size = 0;
		GeeArrayList* _tmp24_;
		gint _tmp25_;
		gint _tmp26_;
		gint _x_index = 0;
#line 332 "/run/build/planner/src/Views/Inbox.vala"
		_tmp22_ = labels;
#line 332 "/run/build/planner/src/Views/Inbox.vala"
		_tmp23_ = _g_object_ref0 (_tmp22_);
#line 332 "/run/build/planner/src/Views/Inbox.vala"
		_x_list = _tmp23_;
#line 332 "/run/build/planner/src/Views/Inbox.vala"
		_tmp24_ = _x_list;
#line 332 "/run/build/planner/src/Views/Inbox.vala"
		_tmp25_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp24_);
#line 332 "/run/build/planner/src/Views/Inbox.vala"
		_tmp26_ = _tmp25_;
#line 332 "/run/build/planner/src/Views/Inbox.vala"
		_x_size = _tmp26_;
#line 332 "/run/build/planner/src/Views/Inbox.vala"
		_x_index = -1;
#line 332 "/run/build/planner/src/Views/Inbox.vala"
		while (TRUE) {
#line 2599 "Inbox.c"
			gint _tmp27_;
			gint _tmp28_;
			gint _tmp29_;
			gint x = 0;
			GeeArrayList* _tmp30_;
			gint _tmp31_;
			gpointer _tmp32_;
			GeeArrayList* _tmp33_;
			gint _tmp34_;
#line 332 "/run/build/planner/src/Views/Inbox.vala"
			_tmp27_ = _x_index;
#line 332 "/run/build/planner/src/Views/Inbox.vala"
			_x_index = _tmp27_ + 1;
#line 332 "/run/build/planner/src/Views/Inbox.vala"
			_tmp28_ = _x_index;
#line 332 "/run/build/planner/src/Views/Inbox.vala"
			_tmp29_ = _x_size;
#line 332 "/run/build/planner/src/Views/Inbox.vala"
			if (!(_tmp28_ < _tmp29_)) {
#line 332 "/run/build/planner/src/Views/Inbox.vala"
				break;
#line 2621 "Inbox.c"
			}
#line 332 "/run/build/planner/src/Views/Inbox.vala"
			_tmp30_ = _x_list;
#line 332 "/run/build/planner/src/Views/Inbox.vala"
			_tmp31_ = _x_index;
#line 332 "/run/build/planner/src/Views/Inbox.vala"
			_tmp32_ = gee_abstract_list_get ((GeeAbstractList*) _tmp30_, _tmp31_);
#line 332 "/run/build/planner/src/Views/Inbox.vala"
			x = (gint) ((gintptr) _tmp32_);
#line 333 "/run/build/planner/src/Views/Inbox.vala"
			_tmp33_ = _labels;
#line 333 "/run/build/planner/src/Views/Inbox.vala"
			_tmp34_ = x;
#line 333 "/run/build/planner/src/Views/Inbox.vala"
			if (gee_abstract_collection_contains ((GeeAbstractCollection*) _tmp33_, (gpointer) ((gintptr) _tmp34_))) {
#line 334 "/run/build/planner/src/Views/Inbox.vala"
				result = TRUE;
#line 334 "/run/build/planner/src/Views/Inbox.vala"
				_g_object_unref0 (_x_list);
#line 334 "/run/build/planner/src/Views/Inbox.vala"
				_g_object_unref0 (_labels);
#line 334 "/run/build/planner/src/Views/Inbox.vala"
				_g_object_unref0 (labels);
#line 334 "/run/build/planner/src/Views/Inbox.vala"
				_g_object_unref0 (item);
#line 334 "/run/build/planner/src/Views/Inbox.vala"
				return result;
#line 2649 "Inbox.c"
			}
		}
#line 332 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (_x_list);
#line 2654 "Inbox.c"
	}
#line 338 "/run/build/planner/src/Views/Inbox.vala"
	result = FALSE;
#line 338 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (_labels);
#line 338 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (labels);
#line 338 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (item);
#line 338 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 2666 "Inbox.c"
}


static gboolean
___lambda267__gtk_list_box_filter_func (GtkListBoxRow* row,
                                        gpointer self)
{
	gboolean result;
	result = __lambda267_ ((ViewsInbox*) self, row);
#line 317 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 2678 "Inbox.c"
}


static void
_views_inbox___lambda266_ (Block18Data* _data18_,
                           ObjectsLabel* label)
{
	ViewsInbox* self;
	Utils* _tmp0_;
	GtkFlowBox* _tmp1_;
	gint _tmp2_;
	GtkRevealer* _tmp6_;
	Utils* _tmp7_;
	GtkFlowBox* _tmp8_;
	GtkFlowBox* _tmp9_;
	WidgetsPopoversLabelsPopover* _tmp10_;
	GtkListBox* _tmp11_;
#line 306 "/run/build/planner/src/Views/Inbox.vala"
	self = _data18_->self;
#line 306 "/run/build/planner/src/Views/Inbox.vala"
	g_return_if_fail (label != NULL);
#line 307 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = application_utils;
#line 307 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = self->priv->labels_flowbox;
#line 307 "/run/build/planner/src/Views/Inbox.vala"
	_tmp2_ = label->id;
#line 307 "/run/build/planner/src/Views/Inbox.vala"
	if (utils_is_label_repeted (_tmp0_, _tmp1_, _tmp2_) == FALSE) {
#line 2708 "Inbox.c"
		WidgetsLabelChild* child = NULL;
		WidgetsLabelChild* _tmp3_;
		GtkFlowBox* _tmp4_;
		WidgetsLabelChild* _tmp5_;
#line 308 "/run/build/planner/src/Views/Inbox.vala"
		_tmp3_ = widgets_label_child_new (label);
#line 308 "/run/build/planner/src/Views/Inbox.vala"
		g_object_ref_sink (_tmp3_);
#line 308 "/run/build/planner/src/Views/Inbox.vala"
		child = _tmp3_;
#line 309 "/run/build/planner/src/Views/Inbox.vala"
		_tmp4_ = self->priv->labels_flowbox;
#line 309 "/run/build/planner/src/Views/Inbox.vala"
		_tmp5_ = child;
#line 309 "/run/build/planner/src/Views/Inbox.vala"
		gtk_container_add ((GtkContainer*) _tmp4_, (GtkWidget*) _tmp5_);
#line 307 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (child);
#line 2727 "Inbox.c"
	}
#line 312 "/run/build/planner/src/Views/Inbox.vala"
	_tmp6_ = _data18_->labels_flowbox_revealer;
#line 312 "/run/build/planner/src/Views/Inbox.vala"
	_tmp7_ = application_utils;
#line 312 "/run/build/planner/src/Views/Inbox.vala"
	_tmp8_ = self->priv->labels_flowbox;
#line 312 "/run/build/planner/src/Views/Inbox.vala"
	gtk_revealer_set_reveal_child (_tmp6_, !utils_is_empty (_tmp7_, _tmp8_));
#line 313 "/run/build/planner/src/Views/Inbox.vala"
	_tmp9_ = self->priv->labels_flowbox;
#line 313 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp9_);
#line 314 "/run/build/planner/src/Views/Inbox.vala"
	_tmp10_ = self->priv->labels_popover;
#line 314 "/run/build/planner/src/Views/Inbox.vala"
	gtk_popover_popdown ((GtkPopover*) _tmp10_);
#line 317 "/run/build/planner/src/Views/Inbox.vala"
	_tmp11_ = self->priv->tasks_list;
#line 317 "/run/build/planner/src/Views/Inbox.vala"
	gtk_list_box_set_filter_func (_tmp11_, ___lambda267__gtk_list_box_filter_func, g_object_ref (self), g_object_unref);
#line 2749 "Inbox.c"
}


static void
__views_inbox___lambda266__widgets_popovers_labels_popover_on_selected_label (WidgetsPopoversLabelsPopover* _sender,
                                                                              ObjectsLabel* label,
                                                                              gpointer self)
{
#line 306 "/run/build/planner/src/Views/Inbox.vala"
	_views_inbox___lambda266_ (self, label);
#line 2760 "Inbox.c"
}


static gboolean
___lambda269_ (ViewsInbox* self,
               GtkListBoxRow* row)
{
	gboolean result = FALSE;
#line 345 "/run/build/planner/src/Views/Inbox.vala"
	g_return_val_if_fail (row != NULL, FALSE);
#line 346 "/run/build/planner/src/Views/Inbox.vala"
	result = TRUE;
#line 346 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 2775 "Inbox.c"
}


static gboolean
____lambda269__gtk_list_box_filter_func (GtkListBoxRow* row,
                                         gpointer self)
{
	gboolean result;
	result = ___lambda269_ ((ViewsInbox*) self, row);
#line 345 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 2787 "Inbox.c"
}


static gboolean
___lambda270_ (ViewsInbox* self,
               GtkListBoxRow* row)
{
	gboolean result = FALSE;
	WidgetsTaskRow* item = NULL;
	WidgetsTaskRow* _tmp0_;
	GeeArrayList* labels = NULL;
	GeeArrayList* _tmp1_;
	GeeArrayList* _labels = NULL;
	GeeArrayList* _tmp2_;
	WidgetsTaskRow* _tmp3_;
	ObjectsTask* _tmp4_;
	ObjectsTask* _tmp5_;
	const gchar* _tmp6_;
	gchar** _tmp7_;
	gchar** _tmp8_;
	GtkFlowBox* _tmp12_;
	GList* _tmp13_;
#line 350 "/run/build/planner/src/Views/Inbox.vala"
	g_return_val_if_fail (row != NULL, FALSE);
#line 351 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) row) : NULL);
#line 351 "/run/build/planner/src/Views/Inbox.vala"
	item = _tmp0_;
#line 352 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = gee_array_list_new (G_TYPE_INT, NULL, NULL, NULL, NULL, NULL);
#line 352 "/run/build/planner/src/Views/Inbox.vala"
	labels = _tmp1_;
#line 353 "/run/build/planner/src/Views/Inbox.vala"
	_tmp2_ = gee_array_list_new (G_TYPE_INT, NULL, NULL, NULL, NULL, NULL);
#line 353 "/run/build/planner/src/Views/Inbox.vala"
	_labels = _tmp2_;
#line 355 "/run/build/planner/src/Views/Inbox.vala"
	_tmp3_ = item;
#line 355 "/run/build/planner/src/Views/Inbox.vala"
	_tmp4_ = widgets_task_row_get_task (_tmp3_);
#line 355 "/run/build/planner/src/Views/Inbox.vala"
	_tmp5_ = _tmp4_;
#line 355 "/run/build/planner/src/Views/Inbox.vala"
	_tmp6_ = _tmp5_->labels;
#line 355 "/run/build/planner/src/Views/Inbox.vala"
	_tmp8_ = _tmp7_ = g_strsplit (_tmp6_, ";", 0);
#line 2834 "Inbox.c"
	{
		gchar** label_id_collection = NULL;
		gint label_id_collection_length1 = 0;
		gint _label_id_collection_size_ = 0;
		gint label_id_it = 0;
#line 355 "/run/build/planner/src/Views/Inbox.vala"
		label_id_collection = _tmp8_;
#line 355 "/run/build/planner/src/Views/Inbox.vala"
		label_id_collection_length1 = _vala_array_length (_tmp7_);
#line 355 "/run/build/planner/src/Views/Inbox.vala"
		for (label_id_it = 0; label_id_it < _vala_array_length (_tmp7_); label_id_it = label_id_it + 1) {
#line 2846 "Inbox.c"
			gchar* _tmp9_;
			gchar* label_id = NULL;
#line 355 "/run/build/planner/src/Views/Inbox.vala"
			_tmp9_ = g_strdup (label_id_collection[label_id_it]);
#line 355 "/run/build/planner/src/Views/Inbox.vala"
			label_id = _tmp9_;
#line 2853 "Inbox.c"
			{
				GeeArrayList* _tmp10_;
				const gchar* _tmp11_;
#line 356 "/run/build/planner/src/Views/Inbox.vala"
				_tmp10_ = labels;
#line 356 "/run/build/planner/src/Views/Inbox.vala"
				_tmp11_ = label_id;
#line 356 "/run/build/planner/src/Views/Inbox.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp10_, (gpointer) ((gintptr) atoi (_tmp11_)));
#line 355 "/run/build/planner/src/Views/Inbox.vala"
				_g_free0 (label_id);
#line 2865 "Inbox.c"
			}
		}
#line 355 "/run/build/planner/src/Views/Inbox.vala"
		label_id_collection = (_vala_array_free (label_id_collection, label_id_collection_length1, (GDestroyNotify) g_free), NULL);
#line 2870 "Inbox.c"
	}
#line 359 "/run/build/planner/src/Views/Inbox.vala"
	_tmp12_ = self->priv->labels_flowbox;
#line 359 "/run/build/planner/src/Views/Inbox.vala"
	_tmp13_ = gtk_container_get_children ((GtkContainer*) _tmp12_);
#line 2876 "Inbox.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 359 "/run/build/planner/src/Views/Inbox.vala"
		element_collection = _tmp13_;
#line 359 "/run/build/planner/src/Views/Inbox.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 2884 "Inbox.c"
			GtkWidget* _tmp14_;
			GtkWidget* element = NULL;
#line 359 "/run/build/planner/src/Views/Inbox.vala"
			_tmp14_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 359 "/run/build/planner/src/Views/Inbox.vala"
			element = _tmp14_;
#line 2891 "Inbox.c"
			{
				WidgetsLabelChild* child = NULL;
				GtkWidget* _tmp15_;
				WidgetsLabelChild* _tmp16_;
				GeeArrayList* _tmp17_;
				WidgetsLabelChild* _tmp18_;
				ObjectsLabel* _tmp19_;
				ObjectsLabel* _tmp20_;
				gint _tmp21_;
#line 360 "/run/build/planner/src/Views/Inbox.vala"
				_tmp15_ = element;
#line 360 "/run/build/planner/src/Views/Inbox.vala"
				_tmp16_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp15_, WIDGETS_TYPE_LABEL_CHILD) ? ((WidgetsLabelChild*) _tmp15_) : NULL);
#line 360 "/run/build/planner/src/Views/Inbox.vala"
				child = _tmp16_;
#line 361 "/run/build/planner/src/Views/Inbox.vala"
				_tmp17_ = _labels;
#line 361 "/run/build/planner/src/Views/Inbox.vala"
				_tmp18_ = child;
#line 361 "/run/build/planner/src/Views/Inbox.vala"
				_tmp19_ = widgets_label_child_get_label (_tmp18_);
#line 361 "/run/build/planner/src/Views/Inbox.vala"
				_tmp20_ = _tmp19_;
#line 361 "/run/build/planner/src/Views/Inbox.vala"
				_tmp21_ = _tmp20_->id;
#line 361 "/run/build/planner/src/Views/Inbox.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp17_, (gpointer) ((gintptr) _tmp21_));
#line 359 "/run/build/planner/src/Views/Inbox.vala"
				_g_object_unref0 (child);
#line 359 "/run/build/planner/src/Views/Inbox.vala"
				_g_object_unref0 (element);
#line 2923 "Inbox.c"
			}
		}
#line 359 "/run/build/planner/src/Views/Inbox.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 2928 "Inbox.c"
	}
	{
		GeeArrayList* _x_list = NULL;
		GeeArrayList* _tmp22_;
		GeeArrayList* _tmp23_;
		gint _x_size = 0;
		GeeArrayList* _tmp24_;
		gint _tmp25_;
		gint _tmp26_;
		gint _x_index = 0;
#line 365 "/run/build/planner/src/Views/Inbox.vala"
		_tmp22_ = labels;
#line 365 "/run/build/planner/src/Views/Inbox.vala"
		_tmp23_ = _g_object_ref0 (_tmp22_);
#line 365 "/run/build/planner/src/Views/Inbox.vala"
		_x_list = _tmp23_;
#line 365 "/run/build/planner/src/Views/Inbox.vala"
		_tmp24_ = _x_list;
#line 365 "/run/build/planner/src/Views/Inbox.vala"
		_tmp25_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp24_);
#line 365 "/run/build/planner/src/Views/Inbox.vala"
		_tmp26_ = _tmp25_;
#line 365 "/run/build/planner/src/Views/Inbox.vala"
		_x_size = _tmp26_;
#line 365 "/run/build/planner/src/Views/Inbox.vala"
		_x_index = -1;
#line 365 "/run/build/planner/src/Views/Inbox.vala"
		while (TRUE) {
#line 2957 "Inbox.c"
			gint _tmp27_;
			gint _tmp28_;
			gint _tmp29_;
			gint x = 0;
			GeeArrayList* _tmp30_;
			gint _tmp31_;
			gpointer _tmp32_;
			GeeArrayList* _tmp33_;
			gint _tmp34_;
#line 365 "/run/build/planner/src/Views/Inbox.vala"
			_tmp27_ = _x_index;
#line 365 "/run/build/planner/src/Views/Inbox.vala"
			_x_index = _tmp27_ + 1;
#line 365 "/run/build/planner/src/Views/Inbox.vala"
			_tmp28_ = _x_index;
#line 365 "/run/build/planner/src/Views/Inbox.vala"
			_tmp29_ = _x_size;
#line 365 "/run/build/planner/src/Views/Inbox.vala"
			if (!(_tmp28_ < _tmp29_)) {
#line 365 "/run/build/planner/src/Views/Inbox.vala"
				break;
#line 2979 "Inbox.c"
			}
#line 365 "/run/build/planner/src/Views/Inbox.vala"
			_tmp30_ = _x_list;
#line 365 "/run/build/planner/src/Views/Inbox.vala"
			_tmp31_ = _x_index;
#line 365 "/run/build/planner/src/Views/Inbox.vala"
			_tmp32_ = gee_abstract_list_get ((GeeAbstractList*) _tmp30_, _tmp31_);
#line 365 "/run/build/planner/src/Views/Inbox.vala"
			x = (gint) ((gintptr) _tmp32_);
#line 366 "/run/build/planner/src/Views/Inbox.vala"
			_tmp33_ = _labels;
#line 366 "/run/build/planner/src/Views/Inbox.vala"
			_tmp34_ = x;
#line 366 "/run/build/planner/src/Views/Inbox.vala"
			if (gee_abstract_collection_contains ((GeeAbstractCollection*) _tmp33_, (gpointer) ((gintptr) _tmp34_))) {
#line 367 "/run/build/planner/src/Views/Inbox.vala"
				result = TRUE;
#line 367 "/run/build/planner/src/Views/Inbox.vala"
				_g_object_unref0 (_x_list);
#line 367 "/run/build/planner/src/Views/Inbox.vala"
				_g_object_unref0 (_labels);
#line 367 "/run/build/planner/src/Views/Inbox.vala"
				_g_object_unref0 (labels);
#line 367 "/run/build/planner/src/Views/Inbox.vala"
				_g_object_unref0 (item);
#line 367 "/run/build/planner/src/Views/Inbox.vala"
				return result;
#line 3007 "Inbox.c"
			}
		}
#line 365 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (_x_list);
#line 3012 "Inbox.c"
	}
#line 371 "/run/build/planner/src/Views/Inbox.vala"
	result = FALSE;
#line 371 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (_labels);
#line 371 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (labels);
#line 371 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (item);
#line 371 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 3024 "Inbox.c"
}


static gboolean
____lambda270__gtk_list_box_filter_func (GtkListBoxRow* row,
                                         gpointer self)
{
	gboolean result;
	result = ___lambda270_ ((ViewsInbox*) self, row);
#line 350 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 3036 "Inbox.c"
}


static void
_views_inbox___lambda268_ (Block18Data* _data18_,
                           GtkWidget* widget)
{
	ViewsInbox* self;
	Utils* _tmp0_;
	GtkFlowBox* _tmp1_;
#line 342 "/run/build/planner/src/Views/Inbox.vala"
	self = _data18_->self;
#line 342 "/run/build/planner/src/Views/Inbox.vala"
	g_return_if_fail (widget != NULL);
#line 343 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = application_utils;
#line 343 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = self->priv->labels_flowbox;
#line 343 "/run/build/planner/src/Views/Inbox.vala"
	if (utils_is_empty (_tmp0_, _tmp1_)) {
#line 3057 "Inbox.c"
		GtkRevealer* _tmp2_;
		GtkListBox* _tmp3_;
#line 344 "/run/build/planner/src/Views/Inbox.vala"
		_tmp2_ = _data18_->labels_flowbox_revealer;
#line 344 "/run/build/planner/src/Views/Inbox.vala"
		gtk_revealer_set_reveal_child (_tmp2_, FALSE);
#line 345 "/run/build/planner/src/Views/Inbox.vala"
		_tmp3_ = self->priv->tasks_list;
#line 345 "/run/build/planner/src/Views/Inbox.vala"
		gtk_list_box_set_filter_func (_tmp3_, ____lambda269__gtk_list_box_filter_func, g_object_ref (self), g_object_unref);
#line 3068 "Inbox.c"
	} else {
		GtkListBox* _tmp4_;
#line 350 "/run/build/planner/src/Views/Inbox.vala"
		_tmp4_ = self->priv->tasks_list;
#line 350 "/run/build/planner/src/Views/Inbox.vala"
		gtk_list_box_set_filter_func (_tmp4_, ____lambda270__gtk_list_box_filter_func, g_object_ref (self), g_object_unref);
#line 3075 "Inbox.c"
	}
}


static void
__views_inbox___lambda268__gtk_container_remove (GtkContainer* _sender,
                                                 GtkWidget* widget,
                                                 gpointer self)
{
#line 342 "/run/build/planner/src/Views/Inbox.vala"
	_views_inbox___lambda268_ (self, widget);
#line 3087 "Inbox.c"
}


static void
_views_inbox___lambda271_ (ViewsInbox* self,
                           GtkWidget* widget)
{
#line 376 "/run/build/planner/src/Views/Inbox.vala"
	g_return_if_fail (widget != NULL);
#line 377 "/run/build/planner/src/Views/Inbox.vala"
	views_inbox_check_visible_alertview (self);
#line 3099 "Inbox.c"
}


static void
__views_inbox___lambda271__gtk_container_remove (GtkContainer* _sender,
                                                 GtkWidget* widget,
                                                 gpointer self)
{
#line 376 "/run/build/planner/src/Views/Inbox.vala"
	_views_inbox___lambda271_ ((ViewsInbox*) self, widget);
#line 3110 "Inbox.c"
}


static void
_views_inbox___lambda272_ (ViewsInbox* self,
                           ObjectsTask* task)
{
	Utils* _tmp0_;
	GtkListBox* _tmp1_;
	gint _tmp2_;
#line 380 "/run/build/planner/src/Views/Inbox.vala"
	g_return_if_fail (task != NULL);
#line 381 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = application_utils;
#line 381 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = self->priv->tasks_list;
#line 381 "/run/build/planner/src/Views/Inbox.vala"
	_tmp2_ = task->id;
#line 381 "/run/build/planner/src/Views/Inbox.vala"
	if (utils_is_task_repeted (_tmp0_, _tmp1_, _tmp2_) == FALSE) {
#line 382 "/run/build/planner/src/Views/Inbox.vala"
		views_inbox_add_new_task (self, task);
#line 3133 "Inbox.c"
	}
}


static void
__views_inbox___lambda272__services_database_update_task_signal (ServicesDatabase* _sender,
                                                                 ObjectsTask* task,
                                                                 gpointer self)
{
#line 380 "/run/build/planner/src/Views/Inbox.vala"
	_views_inbox___lambda272_ ((ViewsInbox*) self, task);
#line 3145 "Inbox.c"
}


static void
_views_inbox___lambda273_ (ViewsInbox* self,
                           ObjectsTask* task)
{
#line 386 "/run/build/planner/src/Views/Inbox.vala"
	g_return_if_fail (task != NULL);
#line 387 "/run/build/planner/src/Views/Inbox.vala"
	views_inbox_add_new_task (self, task);
#line 3157 "Inbox.c"
}


static void
__views_inbox___lambda273__services_database_add_task_signal (ServicesDatabase* _sender,
                                                              ObjectsTask* task,
                                                              gpointer self)
{
#line 386 "/run/build/planner/src/Views/Inbox.vala"
	_views_inbox___lambda273_ ((ViewsInbox*) self, task);
#line 3168 "Inbox.c"
}


static Block19Data*
block19_data_ref (Block19Data* _data19_)
{
#line 391 "/run/build/planner/src/Views/Inbox.vala"
	g_atomic_int_inc (&_data19_->_ref_count_);
#line 391 "/run/build/planner/src/Views/Inbox.vala"
	return _data19_;
#line 3179 "Inbox.c"
}


static void
block19_data_unref (void * _userdata_)
{
	Block19Data* _data19_;
	_data19_ = (Block19Data*) _userdata_;
#line 391 "/run/build/planner/src/Views/Inbox.vala"
	if (g_atomic_int_dec_and_test (&_data19_->_ref_count_)) {
#line 3190 "Inbox.c"
		ViewsInbox* self;
#line 391 "/run/build/planner/src/Views/Inbox.vala"
		self = _data19_->self;
#line 391 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (_data19_->row);
#line 391 "/run/build/planner/src/Views/Inbox.vala"
		_g_object_unref0 (self);
#line 391 "/run/build/planner/src/Views/Inbox.vala"
		g_slice_free (Block19Data, _data19_);
#line 3200 "Inbox.c"
	}
}


static gboolean
______lambda275_ (Block19Data* _data19_)
{
	ViewsInbox* self;
	gboolean result = FALSE;
	WidgetsTaskRow* _tmp0_;
#line 396 "/run/build/planner/src/Views/Inbox.vala"
	self = _data19_->self;
#line 397 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = _data19_->row;
#line 397 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_destroy ((GtkWidget*) _tmp0_);
#line 398 "/run/build/planner/src/Views/Inbox.vala"
	result = G_SOURCE_REMOVE;
#line 398 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 3221 "Inbox.c"
}


static gboolean
_______lambda275__gsource_func (gpointer self)
{
	gboolean result;
	result = ______lambda275_ (self);
#line 396 "/run/build/planner/src/Views/Inbox.vala"
	return result;
#line 3232 "Inbox.c"
}


static void
_views_inbox___lambda274_ (ViewsInbox* self,
                           ObjectsTask* task)
{
	GtkListBox* _tmp0_;
	GList* _tmp1_;
#line 390 "/run/build/planner/src/Views/Inbox.vala"
	g_return_if_fail (task != NULL);
#line 391 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = self->priv->tasks_list;
#line 391 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 3248 "Inbox.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 391 "/run/build/planner/src/Views/Inbox.vala"
		element_collection = _tmp1_;
#line 391 "/run/build/planner/src/Views/Inbox.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 3256 "Inbox.c"
			GtkWidget* _tmp2_;
			GtkWidget* element = NULL;
#line 391 "/run/build/planner/src/Views/Inbox.vala"
			_tmp2_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 391 "/run/build/planner/src/Views/Inbox.vala"
			element = _tmp2_;
#line 3263 "Inbox.c"
			{
				Block19Data* _data19_;
				GtkWidget* _tmp3_;
				WidgetsTaskRow* _tmp4_;
				WidgetsTaskRow* _tmp5_;
				ObjectsTask* _tmp6_;
				ObjectsTask* _tmp7_;
				gint _tmp8_;
				gint _tmp9_;
#line 391 "/run/build/planner/src/Views/Inbox.vala"
				_data19_ = g_slice_new0 (Block19Data);
#line 391 "/run/build/planner/src/Views/Inbox.vala"
				_data19_->_ref_count_ = 1;
#line 391 "/run/build/planner/src/Views/Inbox.vala"
				_data19_->self = g_object_ref (self);
#line 392 "/run/build/planner/src/Views/Inbox.vala"
				_tmp3_ = element;
#line 392 "/run/build/planner/src/Views/Inbox.vala"
				_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp3_) : NULL);
#line 392 "/run/build/planner/src/Views/Inbox.vala"
				_data19_->row = _tmp4_;
#line 394 "/run/build/planner/src/Views/Inbox.vala"
				_tmp5_ = _data19_->row;
#line 394 "/run/build/planner/src/Views/Inbox.vala"
				_tmp6_ = widgets_task_row_get_task (_tmp5_);
#line 394 "/run/build/planner/src/Views/Inbox.vala"
				_tmp7_ = _tmp6_;
#line 394 "/run/build/planner/src/Views/Inbox.vala"
				_tmp8_ = _tmp7_->id;
#line 394 "/run/build/planner/src/Views/Inbox.vala"
				_tmp9_ = task->id;
#line 394 "/run/build/planner/src/Views/Inbox.vala"
				if (_tmp8_ == _tmp9_) {
#line 3297 "Inbox.c"
					WidgetsTaskRow* _tmp10_;
#line 395 "/run/build/planner/src/Views/Inbox.vala"
					_tmp10_ = _data19_->row;
#line 395 "/run/build/planner/src/Views/Inbox.vala"
					if (G_TYPE_CHECK_INSTANCE_TYPE (_tmp10_, gtk_widget_get_type ())) {
#line 396 "/run/build/planner/src/Views/Inbox.vala"
						g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 250, _______lambda275__gsource_func, block19_data_ref (_data19_), block19_data_unref);
#line 3305 "Inbox.c"
					}
				}
#line 391 "/run/build/planner/src/Views/Inbox.vala"
				_g_object_unref0 (element);
#line 391 "/run/build/planner/src/Views/Inbox.vala"
				block19_data_unref (_data19_);
#line 391 "/run/build/planner/src/Views/Inbox.vala"
				_data19_ = NULL;
#line 3314 "Inbox.c"
			}
		}
#line 391 "/run/build/planner/src/Views/Inbox.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 3319 "Inbox.c"
	}
}


static void
__views_inbox___lambda274__services_database_on_signal_remove_task (ServicesDatabase* _sender,
                                                                    ObjectsTask* task,
                                                                    gpointer self)
{
#line 390 "/run/build/planner/src/Views/Inbox.vala"
	_views_inbox___lambda274_ ((ViewsInbox*) self, task);
#line 3331 "Inbox.c"
}


static GObject *
views_inbox_constructor (GType type,
                         guint n_construct_properties,
                         GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsInbox * self;
	Block18Data* _data18_;
	GtkStyleContext* _tmp0_;
	WidgetsAlertView* _tmp1_;
	GtkImage* inbox_icon = NULL;
	GtkImage* _tmp2_;
	GtkLabel* inbox_label = NULL;
	gchar* _tmp3_;
	gchar* _tmp4_;
	GtkLabel* _tmp5_;
	GtkLabel* _tmp6_;
	GtkLabel* _tmp7_;
	GtkStyleContext* _tmp8_;
	GtkLabel* _tmp9_;
	GtkToggleButton* _tmp10_;
	GtkToggleButton* _tmp11_;
	GtkToggleButton* _tmp12_;
	GtkToggleButton* _tmp13_;
	GtkStyleContext* _tmp14_;
	GtkToggleButton* _tmp15_;
	GtkImage* _tmp16_;
	GtkToggleButton* _tmp17_;
	GtkImage* _tmp18_;
	GtkToggleButton* _tmp19_;
	GtkButton* paste_button = NULL;
	GtkButton* _tmp20_;
	GtkButton* _tmp21_;
	GtkStyleContext* _tmp22_;
	GtkButton* _tmp23_;
	GtkButton* _tmp24_;
	GtkButton* _tmp25_;
	GtkButton* labels_button = NULL;
	GtkButton* _tmp26_;
	GtkButton* _tmp27_;
	GtkStyleContext* _tmp28_;
	GtkButton* _tmp29_;
	GtkButton* _tmp30_;
	GtkButton* _tmp31_;
	GtkButton* _tmp32_;
	WidgetsPopoversLabelsPopover* _tmp33_;
	WidgetsPopoversLabelsPopover* _tmp34_;
	GtkButton* share_button = NULL;
	GtkButton* _tmp35_;
	GtkButton* _tmp36_;
	GtkStyleContext* _tmp37_;
	GtkButton* _tmp38_;
	GtkButton* _tmp39_;
	GtkButton* _tmp40_;
	GtkButton* _tmp41_;
	GtkGrid* action_grid = NULL;
	GtkGrid* _tmp42_;
	GtkGrid* _tmp43_;
	GtkGrid* _tmp44_;
	GtkGrid* _tmp45_;
	GtkButton* _tmp46_;
	GtkGrid* _tmp47_;
	GtkButton* _tmp48_;
	GtkGrid* _tmp49_;
	GtkButton* _tmp50_;
	GtkGrid* _tmp51_;
	GtkToggleButton* _tmp52_;
	GtkBox* top_box = NULL;
	GtkBox* _tmp53_;
	GtkBox* _tmp54_;
	GtkBox* _tmp55_;
	GtkBox* _tmp56_;
	GtkBox* _tmp57_;
	GtkImage* _tmp58_;
	GtkBox* _tmp59_;
	GtkLabel* _tmp60_;
	GtkBox* _tmp61_;
	GtkGrid* _tmp62_;
	GtkListBox* _tmp63_;
	GtkListBox* _tmp64_;
	GtkListBox* _tmp65_;
	GtkListBox* _tmp66_;
	GtkButton* _tmp67_;
	GtkButton* _tmp68_;
	GtkButton* _tmp69_;
	GtkButton* _tmp70_;
	GtkStyleContext* _tmp71_;
	GtkButton* _tmp72_;
	GtkStyleContext* _tmp73_;
	GtkButton* _tmp74_;
	GtkRevealer* _tmp75_;
	GtkRevealer* _tmp76_;
	GtkRevealer* _tmp77_;
	GtkRevealer* _tmp78_;
	GtkRevealer* _tmp79_;
	GtkButton* _tmp80_;
	GtkRevealer* _tmp81_;
	GtkRevealer* _tmp82_;
	WidgetsTaskNew* _tmp83_;
	WidgetsTaskNew* _tmp84_;
	GtkFlowBox* _tmp85_;
	GtkFlowBox* _tmp86_;
	GtkFlowBox* _tmp87_;
	GtkFlowBox* _tmp88_;
	GtkFlowBox* _tmp89_;
	GtkRevealer* _tmp90_;
	GtkRevealer* _tmp91_;
	GtkRevealer* _tmp92_;
	GtkRevealer* _tmp93_;
	GtkFlowBox* _tmp94_;
	GtkRevealer* _tmp95_;
	GtkBox* t_box = NULL;
	GtkBox* _tmp96_;
	GtkBox* _tmp97_;
	GtkBox* _tmp98_;
	GtkBox* _tmp99_;
	GtkBox* _tmp100_;
	GtkRevealer* _tmp101_;
	GtkBox* b_box = NULL;
	GtkBox* _tmp102_;
	GtkBox* _tmp103_;
	GtkBox* _tmp104_;
	GtkListBox* _tmp105_;
	GtkStack* _tmp106_;
	GtkStack* _tmp107_;
	GtkStack* _tmp108_;
	GtkStack* _tmp109_;
	GtkStack* _tmp110_;
	GtkStack* _tmp111_;
	GtkStack* _tmp112_;
	GtkBox* _tmp113_;
	GtkStack* _tmp114_;
	WidgetsAlertView* _tmp115_;
	GtkStack* _tmp116_;
	GtkBox* box = NULL;
	GtkBox* _tmp117_;
	GtkBox* _tmp118_;
	GtkBox* _tmp119_;
	GtkBox* _tmp120_;
	GtkBox* _tmp121_;
	GtkStack* _tmp122_;
	GtkScrolledWindow* scrolled = NULL;
	GtkScrolledWindow* _tmp123_;
	GtkScrolledWindow* _tmp124_;
	GtkBox* _tmp125_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp126_;
	GtkBox* _tmp127_;
	GtkBox* _tmp128_;
	GtkScrolledWindow* _tmp129_;
	GtkOverlay* main_overlay = NULL;
	GtkOverlay* _tmp130_;
	GtkOverlay* _tmp131_;
	GtkRevealer* _tmp132_;
	GtkOverlay* _tmp133_;
	WidgetsTaskNew* _tmp134_;
	GtkOverlay* _tmp135_;
	GtkBox* _tmp136_;
	GtkOverlay* _tmp137_;
	Utils* _tmp138_;
	GtkListBox* _tmp139_;
	GtkListBox* _tmp140_;
	GdkDisplay* display = NULL;
	GdkDisplay* _tmp141_;
	GdkDisplay* _tmp142_;
	GdkDisplay* _tmp143_;
	GtkClipboard* _tmp144_;
	GtkClipboard* _tmp145_;
	GtkButton* _tmp146_;
	GtkButton* _tmp147_;
	WidgetsTaskNew* _tmp148_;
	GtkButton* _tmp149_;
	WidgetsPopoversLabelsPopover* _tmp150_;
	GtkFlowBox* _tmp151_;
	GtkListBox* _tmp152_;
	ServicesDatabase* _tmp153_;
	ServicesDatabase* _tmp154_;
	ServicesDatabase* _tmp155_;
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	parent_class = G_OBJECT_CLASS (views_inbox_parent_class);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_INBOX, ViewsInbox);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_data18_ = g_slice_new0 (Block18Data);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_data18_->_ref_count_ = 1;
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_data18_->self = g_object_ref (self);
#line 40 "/run/build/planner/src/Views/Inbox.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 40 "/run/build/planner/src/Views/Inbox.vala"
	gtk_style_context_add_class (_tmp0_, GRANITE_STYLE_CLASS_WELCOME);
#line 42 "/run/build/planner/src/Views/Inbox.vala"
	_tmp1_ = widgets_alert_view_new (_ ("All clear"), _ ("Looks like everything's is organized. Tap + to add a task."), "mail-mailbox-symbolic");
#line 42 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp1_);
#line 42 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->alert_view);
#line 42 "/run/build/planner/src/Views/Inbox.vala"
	self->priv->alert_view = _tmp1_;
#line 48 "/run/build/planner/src/Views/Inbox.vala"
	_tmp2_ = (GtkImage*) gtk_image_new_from_icon_name ("planner-inbox", (GtkIconSize) GTK_ICON_SIZE_DND);
#line 48 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp2_);
#line 48 "/run/build/planner/src/Views/Inbox.vala"
	inbox_icon = _tmp2_;
#line 50 "/run/build/planner/src/Views/Inbox.vala"
	_tmp3_ = g_strdup_printf ("<b>%s</b>", _ ("Inbox"));
#line 50 "/run/build/planner/src/Views/Inbox.vala"
	_tmp4_ = _tmp3_;
#line 50 "/run/build/planner/src/Views/Inbox.vala"
	_tmp5_ = (GtkLabel*) gtk_label_new (_tmp4_);
#line 50 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp5_);
#line 50 "/run/build/planner/src/Views/Inbox.vala"
	_tmp6_ = _tmp5_;
#line 50 "/run/build/planner/src/Views/Inbox.vala"
	_g_free0 (_tmp4_);
#line 50 "/run/build/planner/src/Views/Inbox.vala"
	inbox_label = _tmp6_;
#line 51 "/run/build/planner/src/Views/Inbox.vala"
	_tmp7_ = inbox_label;
#line 51 "/run/build/planner/src/Views/Inbox.vala"
	_tmp8_ = gtk_widget_get_style_context ((GtkWidget*) _tmp7_);
#line 51 "/run/build/planner/src/Views/Inbox.vala"
	gtk_style_context_add_class (_tmp8_, GRANITE_STYLE_CLASS_H2_LABEL);
#line 52 "/run/build/planner/src/Views/Inbox.vala"
	_tmp9_ = inbox_label;
#line 52 "/run/build/planner/src/Views/Inbox.vala"
	gtk_label_set_use_markup (_tmp9_, TRUE);
#line 54 "/run/build/planner/src/Views/Inbox.vala"
	_tmp10_ = (GtkToggleButton*) gtk_toggle_button_new ();
#line 54 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp10_);
#line 54 "/run/build/planner/src/Views/Inbox.vala"
	_data18_->show_hide_all_button = _tmp10_;
#line 55 "/run/build/planner/src/Views/Inbox.vala"
	_tmp11_ = _data18_->show_hide_all_button;
#line 55 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp11_, GTK_ALIGN_CENTER);
#line 56 "/run/build/planner/src/Views/Inbox.vala"
	_tmp12_ = _data18_->show_hide_all_button;
#line 56 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp12_, GTK_ALIGN_CENTER);
#line 57 "/run/build/planner/src/Views/Inbox.vala"
	_tmp13_ = _data18_->show_hide_all_button;
#line 57 "/run/build/planner/src/Views/Inbox.vala"
	_tmp14_ = gtk_widget_get_style_context ((GtkWidget*) _tmp13_);
#line 57 "/run/build/planner/src/Views/Inbox.vala"
	gtk_style_context_add_class (_tmp14_, "planner-zoom-in-menu");
#line 58 "/run/build/planner/src/Views/Inbox.vala"
	_tmp15_ = _data18_->show_hide_all_button;
#line 58 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp15_, _ ("Open all tasks"));
#line 60 "/run/build/planner/src/Views/Inbox.vala"
	_tmp16_ = (GtkImage*) gtk_image_new_from_icon_name ("zoom-in-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 60 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp16_);
#line 60 "/run/build/planner/src/Views/Inbox.vala"
	_data18_->show_hide_image = _tmp16_;
#line 61 "/run/build/planner/src/Views/Inbox.vala"
	_tmp17_ = _data18_->show_hide_all_button;
#line 61 "/run/build/planner/src/Views/Inbox.vala"
	_tmp18_ = _data18_->show_hide_image;
#line 61 "/run/build/planner/src/Views/Inbox.vala"
	gtk_container_add ((GtkContainer*) _tmp17_, (GtkWidget*) _tmp18_);
#line 63 "/run/build/planner/src/Views/Inbox.vala"
	_tmp19_ = _data18_->show_hide_all_button;
#line 63 "/run/build/planner/src/Views/Inbox.vala"
	g_signal_connect_data (_tmp19_, "toggled", (GCallback) __views_inbox___lambda256__gtk_toggle_button_toggled, block18_data_ref (_data18_), (GClosureNotify) block18_data_unref, 0);
#line 83 "/run/build/planner/src/Views/Inbox.vala"
	_tmp20_ = (GtkButton*) gtk_button_new_from_icon_name ("planner-paste-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 83 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp20_);
#line 83 "/run/build/planner/src/Views/Inbox.vala"
	paste_button = _tmp20_;
#line 84 "/run/build/planner/src/Views/Inbox.vala"
	_tmp21_ = paste_button;
#line 84 "/run/build/planner/src/Views/Inbox.vala"
	_tmp22_ = gtk_widget_get_style_context ((GtkWidget*) _tmp21_);
#line 84 "/run/build/planner/src/Views/Inbox.vala"
	gtk_style_context_add_class (_tmp22_, "planner-paste-menu");
#line 85 "/run/build/planner/src/Views/Inbox.vala"
	_tmp23_ = paste_button;
#line 85 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp23_, _ ("Paste"));
#line 86 "/run/build/planner/src/Views/Inbox.vala"
	_tmp24_ = paste_button;
#line 86 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp24_, GTK_ALIGN_CENTER);
#line 87 "/run/build/planner/src/Views/Inbox.vala"
	_tmp25_ = paste_button;
#line 87 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp25_, GTK_ALIGN_CENTER);
#line 89 "/run/build/planner/src/Views/Inbox.vala"
	_tmp26_ = (GtkButton*) gtk_button_new_from_icon_name ("planner-label-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 89 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp26_);
#line 89 "/run/build/planner/src/Views/Inbox.vala"
	labels_button = _tmp26_;
#line 90 "/run/build/planner/src/Views/Inbox.vala"
	_tmp27_ = labels_button;
#line 90 "/run/build/planner/src/Views/Inbox.vala"
	_tmp28_ = gtk_widget_get_style_context ((GtkWidget*) _tmp27_);
#line 90 "/run/build/planner/src/Views/Inbox.vala"
	gtk_style_context_add_class (_tmp28_, "planner-label-menu");
#line 91 "/run/build/planner/src/Views/Inbox.vala"
	_tmp29_ = labels_button;
#line 91 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp29_, _ ("Filter by Label"));
#line 92 "/run/build/planner/src/Views/Inbox.vala"
	_tmp30_ = labels_button;
#line 92 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp30_, GTK_ALIGN_CENTER);
#line 93 "/run/build/planner/src/Views/Inbox.vala"
	_tmp31_ = labels_button;
#line 93 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp31_, GTK_ALIGN_CENTER);
#line 95 "/run/build/planner/src/Views/Inbox.vala"
	_tmp32_ = labels_button;
#line 95 "/run/build/planner/src/Views/Inbox.vala"
	_tmp33_ = widgets_popovers_labels_popover_new ((GtkWidget*) _tmp32_);
#line 95 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp33_);
#line 95 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->labels_popover);
#line 95 "/run/build/planner/src/Views/Inbox.vala"
	self->priv->labels_popover = _tmp33_;
#line 96 "/run/build/planner/src/Views/Inbox.vala"
	_tmp34_ = self->priv->labels_popover;
#line 96 "/run/build/planner/src/Views/Inbox.vala"
	gtk_popover_set_position ((GtkPopover*) _tmp34_, GTK_POS_BOTTOM);
#line 98 "/run/build/planner/src/Views/Inbox.vala"
	_tmp35_ = (GtkButton*) gtk_button_new_from_icon_name ("planner-share-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 98 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp35_);
#line 98 "/run/build/planner/src/Views/Inbox.vala"
	share_button = _tmp35_;
#line 99 "/run/build/planner/src/Views/Inbox.vala"
	_tmp36_ = share_button;
#line 99 "/run/build/planner/src/Views/Inbox.vala"
	_tmp37_ = gtk_widget_get_style_context ((GtkWidget*) _tmp36_);
#line 99 "/run/build/planner/src/Views/Inbox.vala"
	gtk_style_context_add_class (_tmp37_, "planner-share-menu");
#line 100 "/run/build/planner/src/Views/Inbox.vala"
	_tmp38_ = share_button;
#line 100 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp38_, _ ("Share"));
#line 101 "/run/build/planner/src/Views/Inbox.vala"
	_tmp39_ = share_button;
#line 101 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp39_, GTK_ALIGN_CENTER);
#line 102 "/run/build/planner/src/Views/Inbox.vala"
	_tmp40_ = share_button;
#line 102 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp40_, GTK_ALIGN_CENTER);
#line 104 "/run/build/planner/src/Views/Inbox.vala"
	_tmp41_ = share_button;
#line 104 "/run/build/planner/src/Views/Inbox.vala"
	g_signal_connect_object (_tmp41_, "clicked", (GCallback) __views_inbox___lambda257__gtk_button_clicked, self, 0);
#line 111 "/run/build/planner/src/Views/Inbox.vala"
	_tmp42_ = (GtkGrid*) gtk_grid_new ();
#line 111 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp42_);
#line 111 "/run/build/planner/src/Views/Inbox.vala"
	action_grid = _tmp42_;
#line 112 "/run/build/planner/src/Views/Inbox.vala"
	_tmp43_ = action_grid;
#line 112 "/run/build/planner/src/Views/Inbox.vala"
	gtk_grid_set_column_spacing (_tmp43_, 12);
#line 113 "/run/build/planner/src/Views/Inbox.vala"
	_tmp44_ = action_grid;
#line 113 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp44_, GTK_ALIGN_CENTER);
#line 115 "/run/build/planner/src/Views/Inbox.vala"
	_tmp45_ = action_grid;
#line 115 "/run/build/planner/src/Views/Inbox.vala"
	_tmp46_ = labels_button;
#line 115 "/run/build/planner/src/Views/Inbox.vala"
	gtk_container_add ((GtkContainer*) _tmp45_, (GtkWidget*) _tmp46_);
#line 116 "/run/build/planner/src/Views/Inbox.vala"
	_tmp47_ = action_grid;
#line 116 "/run/build/planner/src/Views/Inbox.vala"
	_tmp48_ = paste_button;
#line 116 "/run/build/planner/src/Views/Inbox.vala"
	gtk_container_add ((GtkContainer*) _tmp47_, (GtkWidget*) _tmp48_);
#line 117 "/run/build/planner/src/Views/Inbox.vala"
	_tmp49_ = action_grid;
#line 117 "/run/build/planner/src/Views/Inbox.vala"
	_tmp50_ = share_button;
#line 117 "/run/build/planner/src/Views/Inbox.vala"
	gtk_container_add ((GtkContainer*) _tmp49_, (GtkWidget*) _tmp50_);
#line 118 "/run/build/planner/src/Views/Inbox.vala"
	_tmp51_ = action_grid;
#line 118 "/run/build/planner/src/Views/Inbox.vala"
	_tmp52_ = _data18_->show_hide_all_button;
#line 118 "/run/build/planner/src/Views/Inbox.vala"
	gtk_container_add ((GtkContainer*) _tmp51_, (GtkWidget*) _tmp52_);
#line 120 "/run/build/planner/src/Views/Inbox.vala"
	_tmp53_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 120 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp53_);
#line 120 "/run/build/planner/src/Views/Inbox.vala"
	top_box = _tmp53_;
#line 121 "/run/build/planner/src/Views/Inbox.vala"
	_tmp54_ = top_box;
#line 121 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp54_, TRUE);
#line 122 "/run/build/planner/src/Views/Inbox.vala"
	_tmp55_ = top_box;
#line 122 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp55_, 12);
#line 123 "/run/build/planner/src/Views/Inbox.vala"
	_tmp56_ = top_box;
#line 123 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp56_, 12);
#line 125 "/run/build/planner/src/Views/Inbox.vala"
	_tmp57_ = top_box;
#line 125 "/run/build/planner/src/Views/Inbox.vala"
	_tmp58_ = inbox_icon;
#line 125 "/run/build/planner/src/Views/Inbox.vala"
	gtk_box_pack_start (_tmp57_, (GtkWidget*) _tmp58_, FALSE, FALSE, (guint) 0);
#line 126 "/run/build/planner/src/Views/Inbox.vala"
	_tmp59_ = top_box;
#line 126 "/run/build/planner/src/Views/Inbox.vala"
	_tmp60_ = inbox_label;
#line 126 "/run/build/planner/src/Views/Inbox.vala"
	gtk_box_pack_start (_tmp59_, (GtkWidget*) _tmp60_, FALSE, FALSE, (guint) 12);
#line 127 "/run/build/planner/src/Views/Inbox.vala"
	_tmp61_ = top_box;
#line 127 "/run/build/planner/src/Views/Inbox.vala"
	_tmp62_ = action_grid;
#line 127 "/run/build/planner/src/Views/Inbox.vala"
	gtk_box_pack_end (_tmp61_, (GtkWidget*) _tmp62_, FALSE, FALSE, (guint) 12);
#line 129 "/run/build/planner/src/Views/Inbox.vala"
	_tmp63_ = (GtkListBox*) gtk_list_box_new ();
#line 129 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp63_);
#line 129 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->tasks_list);
#line 129 "/run/build/planner/src/Views/Inbox.vala"
	self->priv->tasks_list = _tmp63_;
#line 130 "/run/build/planner/src/Views/Inbox.vala"
	_tmp64_ = self->priv->tasks_list;
#line 130 "/run/build/planner/src/Views/Inbox.vala"
	gtk_list_box_set_activate_on_single_click (_tmp64_, TRUE);
#line 131 "/run/build/planner/src/Views/Inbox.vala"
	_tmp65_ = self->priv->tasks_list;
#line 131 "/run/build/planner/src/Views/Inbox.vala"
	gtk_list_box_set_selection_mode (_tmp65_, GTK_SELECTION_SINGLE);
#line 132 "/run/build/planner/src/Views/Inbox.vala"
	_tmp66_ = self->priv->tasks_list;
#line 132 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp66_, TRUE);
#line 134 "/run/build/planner/src/Views/Inbox.vala"
	_tmp67_ = (GtkButton*) gtk_button_new_from_icon_name ("list-add-symbolic", (GtkIconSize) GTK_ICON_SIZE_SMALL_TOOLBAR);
#line 134 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp67_);
#line 134 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->add_task_button);
#line 134 "/run/build/planner/src/Views/Inbox.vala"
	self->priv->add_task_button = _tmp67_;
#line 135 "/run/build/planner/src/Views/Inbox.vala"
	_tmp68_ = self->priv->add_task_button;
#line 135 "/run/build/planner/src/Views/Inbox.vala"
	g_object_set ((GtkWidget*) _tmp68_, "height-request", 32, NULL);
#line 136 "/run/build/planner/src/Views/Inbox.vala"
	_tmp69_ = self->priv->add_task_button;
#line 136 "/run/build/planner/src/Views/Inbox.vala"
	g_object_set ((GtkWidget*) _tmp69_, "width-request", 32, NULL);
#line 137 "/run/build/planner/src/Views/Inbox.vala"
	_tmp70_ = self->priv->add_task_button;
#line 137 "/run/build/planner/src/Views/Inbox.vala"
	_tmp71_ = gtk_widget_get_style_context ((GtkWidget*) _tmp70_);
#line 137 "/run/build/planner/src/Views/Inbox.vala"
	gtk_style_context_add_class (_tmp71_, "button-circular");
#line 138 "/run/build/planner/src/Views/Inbox.vala"
	_tmp72_ = self->priv->add_task_button;
#line 138 "/run/build/planner/src/Views/Inbox.vala"
	_tmp73_ = gtk_widget_get_style_context ((GtkWidget*) _tmp72_);
#line 138 "/run/build/planner/src/Views/Inbox.vala"
	gtk_style_context_add_class (_tmp73_, "no-padding");
#line 139 "/run/build/planner/src/Views/Inbox.vala"
	_tmp74_ = self->priv->add_task_button;
#line 139 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp74_, _ ("Add new task"));
#line 141 "/run/build/planner/src/Views/Inbox.vala"
	_tmp75_ = (GtkRevealer*) gtk_revealer_new ();
#line 141 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp75_);
#line 141 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->add_task_revealer);
#line 141 "/run/build/planner/src/Views/Inbox.vala"
	self->priv->add_task_revealer = _tmp75_;
#line 142 "/run/build/planner/src/Views/Inbox.vala"
	_tmp76_ = self->priv->add_task_revealer;
#line 142 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp76_, GTK_ALIGN_END);
#line 143 "/run/build/planner/src/Views/Inbox.vala"
	_tmp77_ = self->priv->add_task_revealer;
#line 143 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp77_, GTK_ALIGN_END);
#line 144 "/run/build/planner/src/Views/Inbox.vala"
	_tmp78_ = self->priv->add_task_revealer;
#line 144 "/run/build/planner/src/Views/Inbox.vala"
	gtk_revealer_set_transition_type (_tmp78_, GTK_REVEALER_TRANSITION_TYPE_CROSSFADE);
#line 145 "/run/build/planner/src/Views/Inbox.vala"
	_tmp79_ = self->priv->add_task_revealer;
#line 145 "/run/build/planner/src/Views/Inbox.vala"
	_tmp80_ = self->priv->add_task_button;
#line 145 "/run/build/planner/src/Views/Inbox.vala"
	gtk_container_add ((GtkContainer*) _tmp79_, (GtkWidget*) _tmp80_);
#line 146 "/run/build/planner/src/Views/Inbox.vala"
	_tmp81_ = self->priv->add_task_revealer;
#line 146 "/run/build/planner/src/Views/Inbox.vala"
	g_object_set ((GtkWidget*) _tmp81_, "margin", 12, NULL);
#line 147 "/run/build/planner/src/Views/Inbox.vala"
	_tmp82_ = self->priv->add_task_revealer;
#line 147 "/run/build/planner/src/Views/Inbox.vala"
	gtk_revealer_set_reveal_child (_tmp82_, TRUE);
#line 149 "/run/build/planner/src/Views/Inbox.vala"
	_tmp83_ = widgets_task_new_new (TRUE, 0);
#line 149 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp83_);
#line 149 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->task_new_revealer);
#line 149 "/run/build/planner/src/Views/Inbox.vala"
	self->priv->task_new_revealer = _tmp83_;
#line 150 "/run/build/planner/src/Views/Inbox.vala"
	_tmp84_ = self->priv->task_new_revealer;
#line 150 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp84_, GTK_ALIGN_END);
#line 152 "/run/build/planner/src/Views/Inbox.vala"
	_tmp85_ = (GtkFlowBox*) gtk_flow_box_new ();
#line 152 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp85_);
#line 152 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->labels_flowbox);
#line 152 "/run/build/planner/src/Views/Inbox.vala"
	self->priv->labels_flowbox = _tmp85_;
#line 153 "/run/build/planner/src/Views/Inbox.vala"
	_tmp86_ = self->priv->labels_flowbox;
#line 153 "/run/build/planner/src/Views/Inbox.vala"
	gtk_flow_box_set_selection_mode (_tmp86_, GTK_SELECTION_NONE);
#line 154 "/run/build/planner/src/Views/Inbox.vala"
	_tmp87_ = self->priv->labels_flowbox;
#line 154 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp87_, 6);
#line 155 "/run/build/planner/src/Views/Inbox.vala"
	_tmp88_ = self->priv->labels_flowbox;
#line 155 "/run/build/planner/src/Views/Inbox.vala"
	g_object_set ((GtkWidget*) _tmp88_, "height-request", 38, NULL);
#line 156 "/run/build/planner/src/Views/Inbox.vala"
	_tmp89_ = self->priv->labels_flowbox;
#line 156 "/run/build/planner/src/Views/Inbox.vala"
	g_object_set ((GtkWidget*) _tmp89_, "expand", FALSE, NULL);
#line 158 "/run/build/planner/src/Views/Inbox.vala"
	_tmp90_ = (GtkRevealer*) gtk_revealer_new ();
#line 158 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp90_);
#line 158 "/run/build/planner/src/Views/Inbox.vala"
	_data18_->labels_flowbox_revealer = _tmp90_;
#line 159 "/run/build/planner/src/Views/Inbox.vala"
	_tmp91_ = _data18_->labels_flowbox_revealer;
#line 159 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp91_, 3);
#line 160 "/run/build/planner/src/Views/Inbox.vala"
	_tmp92_ = _data18_->labels_flowbox_revealer;
#line 160 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp92_, 6);
#line 161 "/run/build/planner/src/Views/Inbox.vala"
	_tmp93_ = _data18_->labels_flowbox_revealer;
#line 161 "/run/build/planner/src/Views/Inbox.vala"
	_tmp94_ = self->priv->labels_flowbox;
#line 161 "/run/build/planner/src/Views/Inbox.vala"
	gtk_container_add ((GtkContainer*) _tmp93_, (GtkWidget*) _tmp94_);
#line 162 "/run/build/planner/src/Views/Inbox.vala"
	_tmp95_ = _data18_->labels_flowbox_revealer;
#line 162 "/run/build/planner/src/Views/Inbox.vala"
	gtk_revealer_set_reveal_child (_tmp95_, FALSE);
#line 164 "/run/build/planner/src/Views/Inbox.vala"
	_tmp96_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 164 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp96_);
#line 164 "/run/build/planner/src/Views/Inbox.vala"
	t_box = _tmp96_;
#line 165 "/run/build/planner/src/Views/Inbox.vala"
	_tmp97_ = t_box;
#line 165 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp97_, TRUE);
#line 166 "/run/build/planner/src/Views/Inbox.vala"
	_tmp98_ = t_box;
#line 166 "/run/build/planner/src/Views/Inbox.vala"
	_tmp99_ = top_box;
#line 166 "/run/build/planner/src/Views/Inbox.vala"
	gtk_box_pack_start (_tmp98_, (GtkWidget*) _tmp99_, FALSE, FALSE, (guint) 0);
#line 167 "/run/build/planner/src/Views/Inbox.vala"
	_tmp100_ = t_box;
#line 167 "/run/build/planner/src/Views/Inbox.vala"
	_tmp101_ = _data18_->labels_flowbox_revealer;
#line 167 "/run/build/planner/src/Views/Inbox.vala"
	gtk_box_pack_start (_tmp100_, (GtkWidget*) _tmp101_, FALSE, FALSE, (guint) 0);
#line 169 "/run/build/planner/src/Views/Inbox.vala"
	_tmp102_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 169 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp102_);
#line 169 "/run/build/planner/src/Views/Inbox.vala"
	b_box = _tmp102_;
#line 170 "/run/build/planner/src/Views/Inbox.vala"
	_tmp103_ = b_box;
#line 170 "/run/build/planner/src/Views/Inbox.vala"
	g_object_set ((GtkWidget*) _tmp103_, "expand", TRUE, NULL);
#line 171 "/run/build/planner/src/Views/Inbox.vala"
	_tmp104_ = b_box;
#line 171 "/run/build/planner/src/Views/Inbox.vala"
	_tmp105_ = self->priv->tasks_list;
#line 171 "/run/build/planner/src/Views/Inbox.vala"
	gtk_box_pack_start (_tmp104_, (GtkWidget*) _tmp105_, FALSE, TRUE, (guint) 0);
#line 173 "/run/build/planner/src/Views/Inbox.vala"
	_tmp106_ = (GtkStack*) gtk_stack_new ();
#line 173 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp106_);
#line 173 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->main_stack);
#line 173 "/run/build/planner/src/Views/Inbox.vala"
	self->priv->main_stack = _tmp106_;
#line 174 "/run/build/planner/src/Views/Inbox.vala"
	_tmp107_ = self->priv->main_stack;
#line 174 "/run/build/planner/src/Views/Inbox.vala"
	g_object_set ((GtkWidget*) _tmp107_, "expand", TRUE, NULL);
#line 175 "/run/build/planner/src/Views/Inbox.vala"
	_tmp108_ = self->priv->main_stack;
#line 175 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp108_, 9);
#line 176 "/run/build/planner/src/Views/Inbox.vala"
	_tmp109_ = self->priv->main_stack;
#line 176 "/run/build/planner/src/Views/Inbox.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp109_, 9);
#line 177 "/run/build/planner/src/Views/Inbox.vala"
	_tmp110_ = self->priv->main_stack;
#line 177 "/run/build/planner/src/Views/Inbox.vala"
	gtk_stack_set_transition_duration (_tmp110_, (guint) 350);
#line 178 "/run/build/planner/src/Views/Inbox.vala"
	_tmp111_ = self->priv->main_stack;
#line 178 "/run/build/planner/src/Views/Inbox.vala"
	gtk_stack_set_transition_type (_tmp111_, GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT);
#line 180 "/run/build/planner/src/Views/Inbox.vala"
	_tmp112_ = self->priv->main_stack;
#line 180 "/run/build/planner/src/Views/Inbox.vala"
	_tmp113_ = b_box;
#line 180 "/run/build/planner/src/Views/Inbox.vala"
	gtk_stack_add_named (_tmp112_, (GtkWidget*) _tmp113_, "main");
#line 181 "/run/build/planner/src/Views/Inbox.vala"
	_tmp114_ = self->priv->main_stack;
#line 181 "/run/build/planner/src/Views/Inbox.vala"
	_tmp115_ = self->priv->alert_view;
#line 181 "/run/build/planner/src/Views/Inbox.vala"
	gtk_stack_add_named (_tmp114_, (GtkWidget*) _tmp115_, "alert");
#line 183 "/run/build/planner/src/Views/Inbox.vala"
	_tmp116_ = self->priv->main_stack;
#line 183 "/run/build/planner/src/Views/Inbox.vala"
	gtk_stack_set_visible_child_name (_tmp116_, "main");
#line 185 "/run/build/planner/src/Views/Inbox.vala"
	_tmp117_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 185 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp117_);
#line 185 "/run/build/planner/src/Views/Inbox.vala"
	box = _tmp117_;
#line 186 "/run/build/planner/src/Views/Inbox.vala"
	_tmp118_ = box;
#line 186 "/run/build/planner/src/Views/Inbox.vala"
	g_object_set ((GtkWidget*) _tmp118_, "expand", TRUE, NULL);
#line 187 "/run/build/planner/src/Views/Inbox.vala"
	_tmp119_ = box;
#line 187 "/run/build/planner/src/Views/Inbox.vala"
	_tmp120_ = t_box;
#line 187 "/run/build/planner/src/Views/Inbox.vala"
	gtk_box_pack_start (_tmp119_, (GtkWidget*) _tmp120_, FALSE, TRUE, (guint) 0);
#line 188 "/run/build/planner/src/Views/Inbox.vala"
	_tmp121_ = box;
#line 188 "/run/build/planner/src/Views/Inbox.vala"
	_tmp122_ = self->priv->main_stack;
#line 188 "/run/build/planner/src/Views/Inbox.vala"
	gtk_box_pack_start (_tmp121_, (GtkWidget*) _tmp122_, FALSE, TRUE, (guint) 0);
#line 190 "/run/build/planner/src/Views/Inbox.vala"
	_tmp123_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
#line 190 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp123_);
#line 190 "/run/build/planner/src/Views/Inbox.vala"
	scrolled = _tmp123_;
#line 191 "/run/build/planner/src/Views/Inbox.vala"
	_tmp124_ = scrolled;
#line 191 "/run/build/planner/src/Views/Inbox.vala"
	_tmp125_ = box;
#line 191 "/run/build/planner/src/Views/Inbox.vala"
	gtk_container_add ((GtkContainer*) _tmp124_, (GtkWidget*) _tmp125_);
#line 193 "/run/build/planner/src/Views/Inbox.vala"
	_tmp126_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 193 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp126_);
#line 193 "/run/build/planner/src/Views/Inbox.vala"
	main_box = _tmp126_;
#line 194 "/run/build/planner/src/Views/Inbox.vala"
	_tmp127_ = main_box;
#line 194 "/run/build/planner/src/Views/Inbox.vala"
	g_object_set ((GtkWidget*) _tmp127_, "expand", TRUE, NULL);
#line 195 "/run/build/planner/src/Views/Inbox.vala"
	_tmp128_ = main_box;
#line 195 "/run/build/planner/src/Views/Inbox.vala"
	_tmp129_ = scrolled;
#line 195 "/run/build/planner/src/Views/Inbox.vala"
	gtk_box_pack_start (_tmp128_, (GtkWidget*) _tmp129_, TRUE, TRUE, (guint) 0);
#line 197 "/run/build/planner/src/Views/Inbox.vala"
	_tmp130_ = (GtkOverlay*) gtk_overlay_new ();
#line 197 "/run/build/planner/src/Views/Inbox.vala"
	g_object_ref_sink (_tmp130_);
#line 197 "/run/build/planner/src/Views/Inbox.vala"
	main_overlay = _tmp130_;
#line 198 "/run/build/planner/src/Views/Inbox.vala"
	_tmp131_ = main_overlay;
#line 198 "/run/build/planner/src/Views/Inbox.vala"
	_tmp132_ = self->priv->add_task_revealer;
#line 198 "/run/build/planner/src/Views/Inbox.vala"
	gtk_overlay_add_overlay (_tmp131_, (GtkWidget*) _tmp132_);
#line 199 "/run/build/planner/src/Views/Inbox.vala"
	_tmp133_ = main_overlay;
#line 199 "/run/build/planner/src/Views/Inbox.vala"
	_tmp134_ = self->priv->task_new_revealer;
#line 199 "/run/build/planner/src/Views/Inbox.vala"
	gtk_overlay_add_overlay (_tmp133_, (GtkWidget*) _tmp134_);
#line 200 "/run/build/planner/src/Views/Inbox.vala"
	_tmp135_ = main_overlay;
#line 200 "/run/build/planner/src/Views/Inbox.vala"
	_tmp136_ = main_box;
#line 200 "/run/build/planner/src/Views/Inbox.vala"
	gtk_container_add ((GtkContainer*) _tmp135_, (GtkWidget*) _tmp136_);
#line 202 "/run/build/planner/src/Views/Inbox.vala"
	_tmp137_ = main_overlay;
#line 202 "/run/build/planner/src/Views/Inbox.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp137_);
#line 203 "/run/build/planner/src/Views/Inbox.vala"
	views_inbox_update_tasks_list (self);
#line 204 "/run/build/planner/src/Views/Inbox.vala"
	views_inbox_check_visible_alertview (self);
#line 206 "/run/build/planner/src/Views/Inbox.vala"
	_tmp138_ = application_utils;
#line 206 "/run/build/planner/src/Views/Inbox.vala"
	_tmp139_ = self->priv->tasks_list;
#line 206 "/run/build/planner/src/Views/Inbox.vala"
	if (utils_is_listbox_empty (_tmp138_, _tmp139_)) {
#line 207 "/run/build/planner/src/Views/Inbox.vala"
		g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 200, __views_inbox____lambda258__gsource_func, g_object_ref (self), g_object_unref);
#line 4090 "Inbox.c"
	} else {
#line 212 "/run/build/planner/src/Views/Inbox.vala"
		g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 200, __views_inbox____lambda259__gsource_func, g_object_ref (self), g_object_unref);
#line 4094 "Inbox.c"
	}
#line 218 "/run/build/planner/src/Views/Inbox.vala"
	_tmp140_ = self->priv->tasks_list;
#line 218 "/run/build/planner/src/Views/Inbox.vala"
	gtk_list_box_set_sort_func (_tmp140_, __views_inbox___lambda260__gtk_list_box_sort_func, g_object_ref (self), g_object_unref);
#line 229 "/run/build/planner/src/Views/Inbox.vala"
	_tmp141_ = gdk_display_get_default ();
#line 229 "/run/build/planner/src/Views/Inbox.vala"
	_tmp142_ = _g_object_ref0 (_tmp141_);
#line 229 "/run/build/planner/src/Views/Inbox.vala"
	display = _tmp142_;
#line 230 "/run/build/planner/src/Views/Inbox.vala"
	_tmp143_ = display;
#line 230 "/run/build/planner/src/Views/Inbox.vala"
	_tmp144_ = gtk_clipboard_get_for_display (_tmp143_, GDK_SELECTION_CLIPBOARD);
#line 230 "/run/build/planner/src/Views/Inbox.vala"
	_tmp145_ = _g_object_ref0 (_tmp144_);
#line 230 "/run/build/planner/src/Views/Inbox.vala"
	_data18_->clipboard = _tmp145_;
#line 232 "/run/build/planner/src/Views/Inbox.vala"
	_tmp146_ = self->priv->add_task_button;
#line 232 "/run/build/planner/src/Views/Inbox.vala"
	g_signal_connect_object (_tmp146_, "clicked", (GCallback) __views_inbox___lambda261__gtk_button_clicked, self, 0);
#line 236 "/run/build/planner/src/Views/Inbox.vala"
	_tmp147_ = paste_button;
#line 236 "/run/build/planner/src/Views/Inbox.vala"
	g_signal_connect_data (_tmp147_, "clicked", (GCallback) __views_inbox___lambda262__gtk_button_clicked, block18_data_ref (_data18_), (GClosureNotify) block18_data_unref, 0);
#line 266 "/run/build/planner/src/Views/Inbox.vala"
	g_signal_connect_object ((GtkWidget*) self, "event", (GCallback) __views_inbox___lambda263__gtk_widget_event, self, 0);
#line 297 "/run/build/planner/src/Views/Inbox.vala"
	_tmp148_ = self->priv->task_new_revealer;
#line 297 "/run/build/planner/src/Views/Inbox.vala"
	g_signal_connect_object (_tmp148_, "on-signal-close", (GCallback) __views_inbox___lambda264__widgets_task_new_on_signal_close, self, 0);
#line 301 "/run/build/planner/src/Views/Inbox.vala"
	_tmp149_ = labels_button;
#line 301 "/run/build/planner/src/Views/Inbox.vala"
	g_signal_connect_object (_tmp149_, "clicked", (GCallback) __views_inbox___lambda265__gtk_button_clicked, self, 0);
#line 306 "/run/build/planner/src/Views/Inbox.vala"
	_tmp150_ = self->priv->labels_popover;
#line 306 "/run/build/planner/src/Views/Inbox.vala"
	g_signal_connect_data (_tmp150_, "on-selected-label", (GCallback) __views_inbox___lambda266__widgets_popovers_labels_popover_on_selected_label, block18_data_ref (_data18_), (GClosureNotify) block18_data_unref, 0);
#line 342 "/run/build/planner/src/Views/Inbox.vala"
	_tmp151_ = self->priv->labels_flowbox;
#line 342 "/run/build/planner/src/Views/Inbox.vala"
	g_signal_connect_data ((GtkContainer*) _tmp151_, "remove", (GCallback) __views_inbox___lambda268__gtk_container_remove, block18_data_ref (_data18_), (GClosureNotify) block18_data_unref, 0);
#line 376 "/run/build/planner/src/Views/Inbox.vala"
	_tmp152_ = self->priv->tasks_list;
#line 376 "/run/build/planner/src/Views/Inbox.vala"
	g_signal_connect_object ((GtkContainer*) _tmp152_, "remove", (GCallback) __views_inbox___lambda271__gtk_container_remove, self, 0);
#line 380 "/run/build/planner/src/Views/Inbox.vala"
	_tmp153_ = application_database;
#line 380 "/run/build/planner/src/Views/Inbox.vala"
	g_signal_connect_object (_tmp153_, "update-task-signal", (GCallback) __views_inbox___lambda272__services_database_update_task_signal, self, 0);
#line 386 "/run/build/planner/src/Views/Inbox.vala"
	_tmp154_ = application_database;
#line 386 "/run/build/planner/src/Views/Inbox.vala"
	g_signal_connect_object (_tmp154_, "add-task-signal", (GCallback) __views_inbox___lambda273__services_database_add_task_signal, self, 0);
#line 390 "/run/build/planner/src/Views/Inbox.vala"
	_tmp155_ = application_database;
#line 390 "/run/build/planner/src/Views/Inbox.vala"
	g_signal_connect_object (_tmp155_, "on-signal-remove-task", (GCallback) __views_inbox___lambda274__services_database_on_signal_remove_task, self, 0);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (display);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (main_overlay);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (main_box);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (scrolled);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (box);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (b_box);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (t_box);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (top_box);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (action_grid);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (share_button);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (labels_button);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (paste_button);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (inbox_label);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (inbox_icon);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	block18_data_unref (_data18_);
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	_data18_ = NULL;
#line 39 "/run/build/planner/src/Views/Inbox.vala"
	return obj;
#line 4190 "Inbox.c"
}


static void
views_inbox_class_init (ViewsInboxClass * klass)
{
#line 22 "/run/build/planner/src/Views/Inbox.vala"
	views_inbox_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Views/Inbox.vala"
	g_type_class_add_private (klass, sizeof (ViewsInboxPrivate));
#line 22 "/run/build/planner/src/Views/Inbox.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_views_inbox_get_property;
#line 22 "/run/build/planner/src/Views/Inbox.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_views_inbox_set_property;
#line 22 "/run/build/planner/src/Views/Inbox.vala"
	G_OBJECT_CLASS (klass)->constructor = views_inbox_constructor;
#line 22 "/run/build/planner/src/Views/Inbox.vala"
	G_OBJECT_CLASS (klass)->finalize = views_inbox_finalize;
#line 22 "/run/build/planner/src/Views/Inbox.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_INBOX_WINDOW_PROPERTY, views_inbox_properties[VIEWS_INBOX_WINDOW_PROPERTY] = g_param_spec_object ("window", "window", "window", TYPE_MAIN_WINDOW, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 4211 "Inbox.c"
}


static void
views_inbox_instance_init (ViewsInbox * self)
{
#line 22 "/run/build/planner/src/Views/Inbox.vala"
	self->priv = VIEWS_INBOX_GET_PRIVATE (self);
#line 4220 "Inbox.c"
}


static void
views_inbox_finalize (GObject * obj)
{
	ViewsInbox * self;
#line 22 "/run/build/planner/src/Views/Inbox.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_INBOX, ViewsInbox);
#line 23 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->_window);
#line 24 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->task_new_revealer);
#line 25 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->tasks_list);
#line 26 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->add_task_button);
#line 27 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->add_task_revealer);
#line 28 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->labels_flowbox);
#line 29 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->alert_view);
#line 30 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->labels_popover);
#line 31 "/run/build/planner/src/Views/Inbox.vala"
	_g_object_unref0 (self->priv->main_stack);
#line 22 "/run/build/planner/src/Views/Inbox.vala"
	G_OBJECT_CLASS (views_inbox_parent_class)->finalize (obj);
#line 4250 "Inbox.c"
}


GType
views_inbox_get_type (void)
{
	static volatile gsize views_inbox_type_id__volatile = 0;
	if (g_once_init_enter (&views_inbox_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ViewsInboxClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_inbox_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsInbox), 0, (GInstanceInitFunc) views_inbox_instance_init, NULL };
		GType views_inbox_type_id;
		views_inbox_type_id = g_type_register_static (gtk_event_box_get_type (), "ViewsInbox", &g_define_type_info, 0);
		g_once_init_leave (&views_inbox_type_id__volatile, views_inbox_type_id);
	}
	return views_inbox_type_id__volatile;
}


static void
_vala_views_inbox_get_property (GObject * object,
                                guint property_id,
                                GValue * value,
                                GParamSpec * pspec)
{
	ViewsInbox * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_INBOX, ViewsInbox);
#line 22 "/run/build/planner/src/Views/Inbox.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Views/Inbox.vala"
		case VIEWS_INBOX_WINDOW_PROPERTY:
#line 22 "/run/build/planner/src/Views/Inbox.vala"
		g_value_set_object (value, views_inbox_get_window (self));
#line 22 "/run/build/planner/src/Views/Inbox.vala"
		break;
#line 4284 "Inbox.c"
		default:
#line 22 "/run/build/planner/src/Views/Inbox.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Views/Inbox.vala"
		break;
#line 4290 "Inbox.c"
	}
}


static void
_vala_views_inbox_set_property (GObject * object,
                                guint property_id,
                                const GValue * value,
                                GParamSpec * pspec)
{
	ViewsInbox * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_INBOX, ViewsInbox);
#line 22 "/run/build/planner/src/Views/Inbox.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Views/Inbox.vala"
		case VIEWS_INBOX_WINDOW_PROPERTY:
#line 22 "/run/build/planner/src/Views/Inbox.vala"
		views_inbox_set_window (self, g_value_get_object (value));
#line 22 "/run/build/planner/src/Views/Inbox.vala"
		break;
#line 4311 "Inbox.c"
		default:
#line 22 "/run/build/planner/src/Views/Inbox.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Views/Inbox.vala"
		break;
#line 4317 "Inbox.c"
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



