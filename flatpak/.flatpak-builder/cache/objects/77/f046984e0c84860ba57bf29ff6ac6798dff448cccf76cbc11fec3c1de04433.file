/* Weather.c generated by valac 0.40.11, the Vala compiler
 * generated from Weather.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>


#define WIDGETS_TYPE_WEATHER (widgets_weather_get_type ())
#define WIDGETS_WEATHER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_WEATHER, WidgetsWeather))
#define WIDGETS_WEATHER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_WEATHER, WidgetsWeatherClass))
#define WIDGETS_IS_WEATHER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_WEATHER))
#define WIDGETS_IS_WEATHER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_WEATHER))
#define WIDGETS_WEATHER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_WEATHER, WidgetsWeatherClass))

typedef struct _WidgetsWeather WidgetsWeather;
typedef struct _WidgetsWeatherClass WidgetsWeatherClass;
typedef struct _WidgetsWeatherPrivate WidgetsWeatherPrivate;

#define SERVICES_TYPE_WEATHER (services_weather_get_type ())
#define SERVICES_WEATHER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_WEATHER, ServicesWeather))
#define SERVICES_WEATHER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_WEATHER, ServicesWeatherClass))
#define SERVICES_IS_WEATHER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_WEATHER))
#define SERVICES_IS_WEATHER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_WEATHER))
#define SERVICES_WEATHER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_WEATHER, ServicesWeatherClass))

typedef struct _ServicesWeather ServicesWeather;
typedef struct _ServicesWeatherClass ServicesWeatherClass;
enum  {
	WIDGETS_WEATHER_0_PROPERTY,
	WIDGETS_WEATHER_NUM_PROPERTIES
};
static GParamSpec* widgets_weather_properties[WIDGETS_WEATHER_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block65Data Block65Data;
#define _g_free0(var) (var = (g_free (var), NULL))

struct _WidgetsWeather {
	GtkEventBox parent_instance;
	WidgetsWeatherPrivate * priv;
};

struct _WidgetsWeatherClass {
	GtkEventBoxClass parent_class;
};

struct _WidgetsWeatherPrivate {
	GtkLabel* temperature_label;
	GtkLabel* description_label;
	GtkLabel* location_label;
	GtkImage* weather_icon;
	GtkSpinner* loading_spinner;
	GtkStack* main_stack;
	GNetworkMonitor* monitor;
	ServicesWeather* weather_info;
};

struct _Block65Data {
	int _ref_count_;
	WidgetsWeather* self;
	gboolean connection_available;
};


static gpointer widgets_weather_parent_class = NULL;
extern GSettings* application_settings;

GType widgets_weather_get_type (void) G_GNUC_CONST;
GType services_weather_get_type (void) G_GNUC_CONST;
#define WIDGETS_WEATHER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_WEATHER, WidgetsWeatherPrivate))
WidgetsWeather* widgets_weather_new (void);
WidgetsWeather* widgets_weather_construct (GType object_type);
static void widgets_weather_check_network_available (WidgetsWeather* self);
static Block65Data* block65_data_ref (Block65Data* _data65_);
static void block65_data_unref (void * _userdata_);
static gboolean __lambda284_ (Block65Data* _data65_);
static gboolean ___lambda284__gsource_func (gpointer self);
static GObject * widgets_weather_constructor (GType type,
                                       guint n_construct_properties,
                                       GObjectConstructParam * construct_properties);
ServicesWeather* services_weather_new (void);
ServicesWeather* services_weather_construct (GType object_type);
gchar* services_weather_get_temperature (ServicesWeather* self);
const gchar* services_weather_get_description (ServicesWeather* self);
const gchar* services_weather_get_city (ServicesWeather* self);
gchar* services_weather_get_symbolic_icon_name (ServicesWeather* self);
static void _widgets_weather___lambda285_ (WidgetsWeather* self);
const gchar* services_weather_get_country (ServicesWeather* self);
static void __widgets_weather___lambda285__services_weather_weather_info_updated (ServicesWeather* _sender,
                                                                           gpointer self);
static void _widgets_weather___lambda286_ (WidgetsWeather* self);
static void __widgets_weather___lambda286__services_weather_weather_error (ServicesWeather* _sender,
                                                                    gpointer self);
static void _widgets_weather___lambda287_ (WidgetsWeather* self);
void services_weather_set_automatic_location (ServicesWeather* self,
                                              gboolean fetch_weather_info);
void services_weather_set_manual_location (ServicesWeather* self,
                                           const gchar* location);
static void __widgets_weather___lambda287__g_network_monitor_network_changed (GNetworkMonitor* _sender,
                                                                       gboolean network_available,
                                                                       gpointer self);
static void widgets_weather_finalize (GObject * obj);


WidgetsWeather*
widgets_weather_construct (GType object_type)
{
	WidgetsWeather * self = NULL;
#line 35 "/run/build/planner/src/Widgets/Weather.vala"
	self = (WidgetsWeather*) g_object_new (object_type, "hexpand", TRUE, "margin", 6, NULL);
#line 34 "/run/build/planner/src/Widgets/Weather.vala"
	return self;
#line 139 "Weather.c"
}


WidgetsWeather*
widgets_weather_new (void)
{
#line 34 "/run/build/planner/src/Widgets/Weather.vala"
	return widgets_weather_construct (WIDGETS_TYPE_WEATHER);
#line 148 "Weather.c"
}


static Block65Data*
block65_data_ref (Block65Data* _data65_)
{
#line 122 "/run/build/planner/src/Widgets/Weather.vala"
	g_atomic_int_inc (&_data65_->_ref_count_);
#line 122 "/run/build/planner/src/Widgets/Weather.vala"
	return _data65_;
#line 159 "Weather.c"
}


static void
block65_data_unref (void * _userdata_)
{
	Block65Data* _data65_;
	_data65_ = (Block65Data*) _userdata_;
#line 122 "/run/build/planner/src/Widgets/Weather.vala"
	if (g_atomic_int_dec_and_test (&_data65_->_ref_count_)) {
#line 170 "Weather.c"
		WidgetsWeather* self;
#line 122 "/run/build/planner/src/Widgets/Weather.vala"
		self = _data65_->self;
#line 122 "/run/build/planner/src/Widgets/Weather.vala"
		_g_object_unref0 (self);
#line 122 "/run/build/planner/src/Widgets/Weather.vala"
		g_slice_free (Block65Data, _data65_);
#line 178 "Weather.c"
	}
}


static gboolean
__lambda284_ (Block65Data* _data65_)
{
	WidgetsWeather* self;
	gboolean result = FALSE;
#line 125 "/run/build/planner/src/Widgets/Weather.vala"
	self = _data65_->self;
#line 126 "/run/build/planner/src/Widgets/Weather.vala"
	if (_data65_->connection_available) {
#line 192 "Weather.c"
		GtkStack* _tmp0_;
#line 127 "/run/build/planner/src/Widgets/Weather.vala"
		_tmp0_ = self->priv->main_stack;
#line 127 "/run/build/planner/src/Widgets/Weather.vala"
		gtk_stack_set_visible_child_name (_tmp0_, "weather");
#line 198 "Weather.c"
	} else {
		GtkStack* _tmp1_;
#line 129 "/run/build/planner/src/Widgets/Weather.vala"
		_tmp1_ = self->priv->main_stack;
#line 129 "/run/build/planner/src/Widgets/Weather.vala"
		gtk_stack_set_visible_child_name (_tmp1_, "error");
#line 205 "Weather.c"
	}
#line 131 "/run/build/planner/src/Widgets/Weather.vala"
	result = FALSE;
#line 131 "/run/build/planner/src/Widgets/Weather.vala"
	return result;
#line 211 "Weather.c"
}


static gboolean
___lambda284__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda284_ (self);
#line 125 "/run/build/planner/src/Widgets/Weather.vala"
	return result;
#line 222 "Weather.c"
}


static void
widgets_weather_check_network_available (WidgetsWeather* self)
{
	Block65Data* _data65_;
	GNetworkMonitor* _tmp0_;
#line 122 "/run/build/planner/src/Widgets/Weather.vala"
	g_return_if_fail (self != NULL);
#line 122 "/run/build/planner/src/Widgets/Weather.vala"
	_data65_ = g_slice_new0 (Block65Data);
#line 122 "/run/build/planner/src/Widgets/Weather.vala"
	_data65_->_ref_count_ = 1;
#line 122 "/run/build/planner/src/Widgets/Weather.vala"
	_data65_->self = g_object_ref (self);
#line 123 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp0_ = self->priv->monitor;
#line 123 "/run/build/planner/src/Widgets/Weather.vala"
	_data65_->connection_available = g_network_monitor_get_network_available (_tmp0_);
#line 125 "/run/build/planner/src/Widgets/Weather.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 200, ___lambda284__gsource_func, block65_data_ref (_data65_), block65_data_unref);
#line 122 "/run/build/planner/src/Widgets/Weather.vala"
	block65_data_unref (_data65_);
#line 122 "/run/build/planner/src/Widgets/Weather.vala"
	_data65_ = NULL;
#line 249 "Weather.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 43 "/run/build/planner/src/Widgets/Weather.vala"
	return self ? g_object_ref (self) : NULL;
#line 258 "Weather.c"
}


static void
_widgets_weather___lambda285_ (WidgetsWeather* self)
{
	GtkLabel* _tmp0_;
	ServicesWeather* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	ServicesWeather* _tmp6_;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	gchar* _tmp10_;
	GtkImage* _tmp11_;
	ServicesWeather* _tmp12_;
	gchar* _tmp13_;
	gchar* _tmp14_;
	GtkLabel* _tmp15_;
	ServicesWeather* _tmp16_;
	const gchar* _tmp17_;
	const gchar* _tmp18_;
	GtkLabel* _tmp19_;
	ServicesWeather* _tmp20_;
	gchar* _tmp21_;
	gchar* _tmp22_;
	GtkStack* _tmp23_;
#line 89 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp0_ = self->priv->location_label;
#line 89 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp1_ = self->priv->weather_info;
#line 89 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp2_ = services_weather_get_city (_tmp1_);
#line 89 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp3_ = _tmp2_;
#line 89 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp4_ = g_strconcat (_tmp3_, ", ", NULL);
#line 89 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp5_ = _tmp4_;
#line 89 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp6_ = self->priv->weather_info;
#line 89 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp7_ = services_weather_get_country (_tmp6_);
#line 89 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp8_ = _tmp7_;
#line 89 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp9_ = g_strconcat (_tmp5_, _tmp8_, NULL);
#line 89 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp10_ = _tmp9_;
#line 89 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_label_set_label (_tmp0_, _tmp10_);
#line 89 "/run/build/planner/src/Widgets/Weather.vala"
	_g_free0 (_tmp10_);
#line 89 "/run/build/planner/src/Widgets/Weather.vala"
	_g_free0 (_tmp5_);
#line 91 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp11_ = self->priv->weather_icon;
#line 91 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp12_ = self->priv->weather_info;
#line 91 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp13_ = services_weather_get_symbolic_icon_name (_tmp12_);
#line 91 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp14_ = _tmp13_;
#line 91 "/run/build/planner/src/Widgets/Weather.vala"
	g_object_set (_tmp11_, "icon-name", _tmp14_, NULL);
#line 91 "/run/build/planner/src/Widgets/Weather.vala"
	_g_free0 (_tmp14_);
#line 92 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp15_ = self->priv->description_label;
#line 92 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp16_ = self->priv->weather_info;
#line 92 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp17_ = services_weather_get_description (_tmp16_);
#line 92 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp18_ = _tmp17_;
#line 92 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_label_set_label (_tmp15_, _tmp18_);
#line 94 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp19_ = self->priv->temperature_label;
#line 94 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp20_ = self->priv->weather_info;
#line 94 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp21_ = services_weather_get_temperature (_tmp20_);
#line 94 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp22_ = _tmp21_;
#line 94 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_label_set_label (_tmp19_, _tmp22_);
#line 94 "/run/build/planner/src/Widgets/Weather.vala"
	_g_free0 (_tmp22_);
#line 96 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp23_ = self->priv->main_stack;
#line 96 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_stack_set_visible_child_name (_tmp23_, "weather");
#line 355 "Weather.c"
}


static void
__widgets_weather___lambda285__services_weather_weather_info_updated (ServicesWeather* _sender,
                                                                      gpointer self)
{
#line 88 "/run/build/planner/src/Widgets/Weather.vala"
	_widgets_weather___lambda285_ ((WidgetsWeather*) self);
#line 365 "Weather.c"
}


static void
_widgets_weather___lambda286_ (WidgetsWeather* self)
{
	GtkStack* _tmp0_;
#line 100 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp0_ = self->priv->main_stack;
#line 100 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_stack_set_visible_child_name (_tmp0_, "error");
#line 377 "Weather.c"
}


static void
__widgets_weather___lambda286__services_weather_weather_error (ServicesWeather* _sender,
                                                               gpointer self)
{
#line 99 "/run/build/planner/src/Widgets/Weather.vala"
	_widgets_weather___lambda286_ ((WidgetsWeather*) self);
#line 387 "Weather.c"
}


static void
_widgets_weather___lambda287_ (WidgetsWeather* self)
{
	gboolean connection_available = FALSE;
	GNetworkMonitor* _tmp0_;
	gboolean _tmp1_;
#line 104 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp0_ = self->priv->monitor;
#line 104 "/run/build/planner/src/Widgets/Weather.vala"
	connection_available = g_network_monitor_get_network_available (_tmp0_);
#line 106 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp1_ = connection_available;
#line 106 "/run/build/planner/src/Widgets/Weather.vala"
	if (_tmp1_) {
#line 405 "Weather.c"
		ServicesWeather* _tmp2_;
		GSettings* _tmp3_;
		GtkStack* _tmp9_;
#line 107 "/run/build/planner/src/Widgets/Weather.vala"
		_tmp2_ = self->priv->weather_info;
#line 107 "/run/build/planner/src/Widgets/Weather.vala"
		services_weather_set_automatic_location (_tmp2_, FALSE);
#line 109 "/run/build/planner/src/Widgets/Weather.vala"
		_tmp3_ = application_settings;
#line 109 "/run/build/planner/src/Widgets/Weather.vala"
		if (g_settings_get_boolean (_tmp3_, "location-automatic") == FALSE) {
#line 417 "Weather.c"
			ServicesWeather* _tmp4_;
			GSettings* _tmp5_;
			gchar* _tmp6_;
			gchar* _tmp7_;
#line 110 "/run/build/planner/src/Widgets/Weather.vala"
			_tmp4_ = self->priv->weather_info;
#line 110 "/run/build/planner/src/Widgets/Weather.vala"
			_tmp5_ = application_settings;
#line 110 "/run/build/planner/src/Widgets/Weather.vala"
			_tmp6_ = g_settings_get_string (_tmp5_, "location-manual-value");
#line 110 "/run/build/planner/src/Widgets/Weather.vala"
			_tmp7_ = _tmp6_;
#line 110 "/run/build/planner/src/Widgets/Weather.vala"
			services_weather_set_manual_location (_tmp4_, _tmp7_);
#line 110 "/run/build/planner/src/Widgets/Weather.vala"
			_g_free0 (_tmp7_);
#line 434 "Weather.c"
		} else {
			ServicesWeather* _tmp8_;
#line 112 "/run/build/planner/src/Widgets/Weather.vala"
			_tmp8_ = self->priv->weather_info;
#line 112 "/run/build/planner/src/Widgets/Weather.vala"
			g_signal_emit_by_name (_tmp8_, "weather-info-updated");
#line 441 "Weather.c"
		}
#line 115 "/run/build/planner/src/Widgets/Weather.vala"
		_tmp9_ = self->priv->main_stack;
#line 115 "/run/build/planner/src/Widgets/Weather.vala"
		gtk_stack_set_visible_child_name (_tmp9_, "weather");
#line 447 "Weather.c"
	} else {
		GtkStack* _tmp10_;
#line 117 "/run/build/planner/src/Widgets/Weather.vala"
		_tmp10_ = self->priv->main_stack;
#line 117 "/run/build/planner/src/Widgets/Weather.vala"
		gtk_stack_set_visible_child_name (_tmp10_, "error");
#line 454 "Weather.c"
	}
}


static void
__widgets_weather___lambda287__g_network_monitor_network_changed (GNetworkMonitor* _sender,
                                                                  gboolean network_available,
                                                                  gpointer self)
{
#line 103 "/run/build/planner/src/Widgets/Weather.vala"
	_widgets_weather___lambda287_ ((WidgetsWeather*) self);
#line 466 "Weather.c"
}


static GObject *
widgets_weather_constructor (GType type,
                             guint n_construct_properties,
                             GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsWeather * self;
	ServicesWeather* _tmp0_;
	GNetworkMonitor* _tmp1_;
	GNetworkMonitor* _tmp2_;
	ServicesWeather* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	GtkLabel* _tmp6_;
	GtkLabel* _tmp7_;
	GtkStyleContext* _tmp8_;
	ServicesWeather* _tmp9_;
	const gchar* _tmp10_;
	const gchar* _tmp11_;
	GtkLabel* _tmp12_;
	GtkLabel* _tmp13_;
	ServicesWeather* _tmp14_;
	const gchar* _tmp15_;
	const gchar* _tmp16_;
	GtkLabel* _tmp17_;
	GtkLabel* _tmp18_;
	GtkGrid* info_grid = NULL;
	GtkGrid* _tmp19_;
	GtkGrid* _tmp20_;
	GtkGrid* _tmp21_;
	GtkGrid* _tmp22_;
	GtkLabel* _tmp23_;
	GtkGrid* _tmp24_;
	GtkLabel* _tmp25_;
	GtkImage* _tmp26_;
	GtkImage* _tmp27_;
	ServicesWeather* _tmp28_;
	gchar* _tmp29_;
	gchar* _tmp30_;
	GThemedIcon* _tmp31_;
	GThemedIcon* _tmp32_;
	GtkImage* _tmp33_;
	GtkSpinner* _tmp34_;
	GtkSpinner* _tmp35_;
	GtkSpinner* _tmp36_;
	GtkSpinner* _tmp37_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp38_;
	GtkBox* _tmp39_;
	GtkBox* _tmp40_;
	GtkLabel* _tmp41_;
	GtkBox* _tmp42_;
	GtkGrid* _tmp43_;
	GtkBox* _tmp44_;
	GtkImage* _tmp45_;
	GtkStack* _tmp46_;
	GtkStack* _tmp47_;
	GtkStyleContext* _tmp48_;
	GtkStack* _tmp49_;
	GtkStack* _tmp50_;
	GtkStack* _tmp51_;
	GtkBox* _tmp52_;
	GtkStack* _tmp53_;
	GtkSpinner* _tmp54_;
	GtkStack* _tmp55_;
	GtkStack* _tmp56_;
	ServicesWeather* _tmp57_;
	ServicesWeather* _tmp58_;
	GNetworkMonitor* _tmp59_;
#line 41 "/run/build/planner/src/Widgets/Weather.vala"
	parent_class = G_OBJECT_CLASS (widgets_weather_parent_class);
#line 41 "/run/build/planner/src/Widgets/Weather.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 41 "/run/build/planner/src/Widgets/Weather.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_WEATHER, WidgetsWeather);
#line 42 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp0_ = services_weather_new ();
#line 42 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->weather_info);
#line 42 "/run/build/planner/src/Widgets/Weather.vala"
	self->priv->weather_info = _tmp0_;
#line 43 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp1_ = g_network_monitor_get_default ();
#line 43 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp2_ = _g_object_ref0 (_tmp1_);
#line 43 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->monitor);
#line 43 "/run/build/planner/src/Widgets/Weather.vala"
	self->priv->monitor = _tmp2_;
#line 45 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp3_ = self->priv->weather_info;
#line 45 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp4_ = services_weather_get_temperature (_tmp3_);
#line 45 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp5_ = _tmp4_;
#line 45 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp6_ = (GtkLabel*) gtk_label_new (_tmp5_);
#line 45 "/run/build/planner/src/Widgets/Weather.vala"
	g_object_ref_sink (_tmp6_);
#line 45 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->temperature_label);
#line 45 "/run/build/planner/src/Widgets/Weather.vala"
	self->priv->temperature_label = _tmp6_;
#line 45 "/run/build/planner/src/Widgets/Weather.vala"
	_g_free0 (_tmp5_);
#line 46 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp7_ = self->priv->temperature_label;
#line 46 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp8_ = gtk_widget_get_style_context ((GtkWidget*) _tmp7_);
#line 46 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_style_context_add_class (_tmp8_, "h1");
#line 48 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp9_ = self->priv->weather_info;
#line 48 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp10_ = services_weather_get_description (_tmp9_);
#line 48 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp11_ = _tmp10_;
#line 48 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp12_ = (GtkLabel*) gtk_label_new (_tmp11_);
#line 48 "/run/build/planner/src/Widgets/Weather.vala"
	g_object_ref_sink (_tmp12_);
#line 48 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->description_label);
#line 48 "/run/build/planner/src/Widgets/Weather.vala"
	self->priv->description_label = _tmp12_;
#line 49 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp13_ = self->priv->description_label;
#line 49 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp13_, GTK_ALIGN_START);
#line 51 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp14_ = self->priv->weather_info;
#line 51 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp15_ = services_weather_get_city (_tmp14_);
#line 51 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp16_ = _tmp15_;
#line 51 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp17_ = (GtkLabel*) gtk_label_new (_tmp16_);
#line 51 "/run/build/planner/src/Widgets/Weather.vala"
	g_object_ref_sink (_tmp17_);
#line 51 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->location_label);
#line 51 "/run/build/planner/src/Widgets/Weather.vala"
	self->priv->location_label = _tmp17_;
#line 52 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp18_ = self->priv->location_label;
#line 52 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp18_, GTK_ALIGN_START);
#line 54 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp19_ = (GtkGrid*) gtk_grid_new ();
#line 54 "/run/build/planner/src/Widgets/Weather.vala"
	g_object_ref_sink (_tmp19_);
#line 54 "/run/build/planner/src/Widgets/Weather.vala"
	info_grid = _tmp19_;
#line 55 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp20_ = info_grid;
#line 55 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp20_, GTK_ALIGN_CENTER);
#line 56 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp21_ = info_grid;
#line 56 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp21_, GTK_ORIENTATION_VERTICAL);
#line 57 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp22_ = info_grid;
#line 57 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp23_ = self->priv->description_label;
#line 57 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_container_add ((GtkContainer*) _tmp22_, (GtkWidget*) _tmp23_);
#line 58 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp24_ = info_grid;
#line 58 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp25_ = self->priv->location_label;
#line 58 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_container_add ((GtkContainer*) _tmp24_, (GtkWidget*) _tmp25_);
#line 60 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp26_ = (GtkImage*) gtk_image_new ();
#line 60 "/run/build/planner/src/Widgets/Weather.vala"
	g_object_ref_sink (_tmp26_);
#line 60 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->weather_icon);
#line 60 "/run/build/planner/src/Widgets/Weather.vala"
	self->priv->weather_icon = _tmp26_;
#line 61 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp27_ = self->priv->weather_icon;
#line 61 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp28_ = self->priv->weather_info;
#line 61 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp29_ = services_weather_get_symbolic_icon_name (_tmp28_);
#line 61 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp30_ = _tmp29_;
#line 61 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp31_ = (GThemedIcon*) g_themed_icon_new (_tmp30_);
#line 61 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp32_ = _tmp31_;
#line 61 "/run/build/planner/src/Widgets/Weather.vala"
	g_object_set (_tmp27_, "gicon", (GIcon*) _tmp32_, NULL);
#line 61 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (_tmp32_);
#line 61 "/run/build/planner/src/Widgets/Weather.vala"
	_g_free0 (_tmp30_);
#line 62 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp33_ = self->priv->weather_icon;
#line 62 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_image_set_pixel_size (_tmp33_, 32);
#line 64 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp34_ = (GtkSpinner*) gtk_spinner_new ();
#line 64 "/run/build/planner/src/Widgets/Weather.vala"
	g_object_ref_sink (_tmp34_);
#line 64 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->loading_spinner);
#line 64 "/run/build/planner/src/Widgets/Weather.vala"
	self->priv->loading_spinner = _tmp34_;
#line 65 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp35_ = self->priv->loading_spinner;
#line 65 "/run/build/planner/src/Widgets/Weather.vala"
	g_object_set (_tmp35_, "active", TRUE, NULL);
#line 66 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp36_ = self->priv->loading_spinner;
#line 66 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp36_, GTK_ALIGN_CENTER);
#line 67 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp37_ = self->priv->loading_spinner;
#line 67 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp37_, GTK_ALIGN_CENTER);
#line 69 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp38_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 69 "/run/build/planner/src/Widgets/Weather.vala"
	g_object_ref_sink (_tmp38_);
#line 69 "/run/build/planner/src/Widgets/Weather.vala"
	main_box = _tmp38_;
#line 70 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp39_ = main_box;
#line 70 "/run/build/planner/src/Widgets/Weather.vala"
	g_object_set ((GtkWidget*) _tmp39_, "margin", 6, NULL);
#line 71 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp40_ = main_box;
#line 71 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp41_ = self->priv->temperature_label;
#line 71 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_box_pack_start (_tmp40_, (GtkWidget*) _tmp41_, FALSE, FALSE, (guint) 0);
#line 72 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp42_ = main_box;
#line 72 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp43_ = info_grid;
#line 72 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_box_pack_start (_tmp42_, (GtkWidget*) _tmp43_, FALSE, FALSE, (guint) 12);
#line 73 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp44_ = main_box;
#line 73 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp45_ = self->priv->weather_icon;
#line 73 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_box_pack_end (_tmp44_, (GtkWidget*) _tmp45_, FALSE, FALSE, (guint) 0);
#line 75 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp46_ = (GtkStack*) gtk_stack_new ();
#line 75 "/run/build/planner/src/Widgets/Weather.vala"
	g_object_ref_sink (_tmp46_);
#line 75 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->main_stack);
#line 75 "/run/build/planner/src/Widgets/Weather.vala"
	self->priv->main_stack = _tmp46_;
#line 76 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp47_ = self->priv->main_stack;
#line 76 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp48_ = gtk_widget_get_style_context ((GtkWidget*) _tmp47_);
#line 76 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_style_context_add_class (_tmp48_, "planner-weather-widget");
#line 77 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp49_ = self->priv->main_stack;
#line 77 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp49_, TRUE);
#line 78 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp50_ = self->priv->main_stack;
#line 78 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_stack_set_transition_type (_tmp50_, GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT);
#line 80 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp51_ = self->priv->main_stack;
#line 80 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp52_ = main_box;
#line 80 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_stack_add_named (_tmp51_, (GtkWidget*) _tmp52_, "weather");
#line 81 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp53_ = self->priv->main_stack;
#line 81 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp54_ = self->priv->loading_spinner;
#line 81 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_stack_add_named (_tmp53_, (GtkWidget*) _tmp54_, "error");
#line 83 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp55_ = self->priv->main_stack;
#line 83 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_stack_set_visible_child_name (_tmp55_, "weather");
#line 85 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp56_ = self->priv->main_stack;
#line 85 "/run/build/planner/src/Widgets/Weather.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp56_);
#line 86 "/run/build/planner/src/Widgets/Weather.vala"
	widgets_weather_check_network_available (self);
#line 88 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp57_ = self->priv->weather_info;
#line 88 "/run/build/planner/src/Widgets/Weather.vala"
	g_signal_connect_object (_tmp57_, "weather-info-updated", (GCallback) __widgets_weather___lambda285__services_weather_weather_info_updated, self, 0);
#line 99 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp58_ = self->priv->weather_info;
#line 99 "/run/build/planner/src/Widgets/Weather.vala"
	g_signal_connect_object (_tmp58_, "weather-error", (GCallback) __widgets_weather___lambda286__services_weather_weather_error, self, 0);
#line 103 "/run/build/planner/src/Widgets/Weather.vala"
	_tmp59_ = self->priv->monitor;
#line 103 "/run/build/planner/src/Widgets/Weather.vala"
	g_signal_connect_object (_tmp59_, "network-changed", (GCallback) __widgets_weather___lambda287__g_network_monitor_network_changed, self, 0);
#line 41 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (main_box);
#line 41 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (info_grid);
#line 41 "/run/build/planner/src/Widgets/Weather.vala"
	return obj;
#line 784 "Weather.c"
}


static void
widgets_weather_class_init (WidgetsWeatherClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/Weather.vala"
	widgets_weather_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/Weather.vala"
	g_type_class_add_private (klass, sizeof (WidgetsWeatherPrivate));
#line 22 "/run/build/planner/src/Widgets/Weather.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_weather_constructor;
#line 22 "/run/build/planner/src/Widgets/Weather.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_weather_finalize;
#line 799 "Weather.c"
}


static void
widgets_weather_instance_init (WidgetsWeather * self)
{
#line 22 "/run/build/planner/src/Widgets/Weather.vala"
	self->priv = WIDGETS_WEATHER_GET_PRIVATE (self);
#line 808 "Weather.c"
}


static void
widgets_weather_finalize (GObject * obj)
{
	WidgetsWeather * self;
#line 22 "/run/build/planner/src/Widgets/Weather.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_WEATHER, WidgetsWeather);
#line 23 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->temperature_label);
#line 24 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->description_label);
#line 25 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->location_label);
#line 26 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->weather_icon);
#line 28 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->loading_spinner);
#line 30 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->main_stack);
#line 32 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->monitor);
#line 33 "/run/build/planner/src/Widgets/Weather.vala"
	_g_object_unref0 (self->priv->weather_info);
#line 22 "/run/build/planner/src/Widgets/Weather.vala"
	G_OBJECT_CLASS (widgets_weather_parent_class)->finalize (obj);
#line 836 "Weather.c"
}


GType
widgets_weather_get_type (void)
{
	static volatile gsize widgets_weather_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_weather_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsWeatherClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_weather_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsWeather), 0, (GInstanceInitFunc) widgets_weather_instance_init, NULL };
		GType widgets_weather_type_id;
		widgets_weather_type_id = g_type_register_static (gtk_event_box_get_type (), "WidgetsWeather", &g_define_type_info, 0);
		g_once_init_leave (&widgets_weather_type_id__volatile, widgets_weather_type_id);
	}
	return widgets_weather_type_id__volatile;
}



