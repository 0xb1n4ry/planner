/* CompletedTasks.c generated by valac 0.40.11, the Vala compiler
 * generated from CompletedTasks.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <granite.h>
#include <glib/gi18n-lib.h>
#include <gdk/gdk.h>
#include <gio/gio.h>


#define VIEWS_TYPE_COMPLETED_TASKS (views_completed_tasks_get_type ())
#define VIEWS_COMPLETED_TASKS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_COMPLETED_TASKS, ViewsCompletedTasks))
#define VIEWS_COMPLETED_TASKS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_COMPLETED_TASKS, ViewsCompletedTasksClass))
#define VIEWS_IS_COMPLETED_TASKS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_COMPLETED_TASKS))
#define VIEWS_IS_COMPLETED_TASKS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_COMPLETED_TASKS))
#define VIEWS_COMPLETED_TASKS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_COMPLETED_TASKS, ViewsCompletedTasksClass))

typedef struct _ViewsCompletedTasks ViewsCompletedTasks;
typedef struct _ViewsCompletedTasksClass ViewsCompletedTasksClass;
typedef struct _ViewsCompletedTasksPrivate ViewsCompletedTasksPrivate;

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;

#define WIDGETS_TYPE_ALERT_VIEW (widgets_alert_view_get_type ())
#define WIDGETS_ALERT_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_ALERT_VIEW, WidgetsAlertView))
#define WIDGETS_ALERT_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_ALERT_VIEW, WidgetsAlertViewClass))
#define WIDGETS_IS_ALERT_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_ALERT_VIEW))
#define WIDGETS_IS_ALERT_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_ALERT_VIEW))
#define WIDGETS_ALERT_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_ALERT_VIEW, WidgetsAlertViewClass))

typedef struct _WidgetsAlertView WidgetsAlertView;
typedef struct _WidgetsAlertViewClass WidgetsAlertViewClass;

#define WIDGETS_POPOVERS_TYPE_LABELS_POPOVER (widgets_popovers_labels_popover_get_type ())
#define WIDGETS_POPOVERS_LABELS_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER, WidgetsPopoversLabelsPopover))
#define WIDGETS_POPOVERS_LABELS_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER, WidgetsPopoversLabelsPopoverClass))
#define WIDGETS_POPOVERS_IS_LABELS_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER))
#define WIDGETS_POPOVERS_IS_LABELS_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER))
#define WIDGETS_POPOVERS_LABELS_POPOVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER, WidgetsPopoversLabelsPopoverClass))

typedef struct _WidgetsPopoversLabelsPopover WidgetsPopoversLabelsPopover;
typedef struct _WidgetsPopoversLabelsPopoverClass WidgetsPopoversLabelsPopoverClass;
enum  {
	VIEWS_COMPLETED_TASKS_0_PROPERTY,
	VIEWS_COMPLETED_TASKS_WINDOW_PROPERTY,
	VIEWS_COMPLETED_TASKS_NUM_PROPERTIES
};
static GParamSpec* views_completed_tasks_properties[VIEWS_COMPLETED_TASKS_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define OBJECTS_TYPE_TASK (objects_task_get_type ())
#define OBJECTS_TASK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TASK, ObjectsTask))
#define OBJECTS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TASK, ObjectsTaskClass))
#define OBJECTS_IS_TASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TASK))
#define OBJECTS_IS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TASK))
#define OBJECTS_TASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TASK, ObjectsTaskClass))

typedef struct _ObjectsTask ObjectsTask;
typedef struct _ObjectsTaskClass ObjectsTaskClass;
typedef struct _ObjectsTaskPrivate ObjectsTaskPrivate;

#define WIDGETS_TYPE_TASK_ROW (widgets_task_row_get_type ())
#define WIDGETS_TASK_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRow))
#define WIDGETS_TASK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRowClass))
#define WIDGETS_IS_TASK_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TASK_ROW))
#define WIDGETS_IS_TASK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TASK_ROW))
#define WIDGETS_TASK_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRowClass))

typedef struct _WidgetsTaskRow WidgetsTaskRow;
typedef struct _WidgetsTaskRowClass WidgetsTaskRowClass;
typedef struct _Block36Data Block36Data;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
typedef struct _Block37Data Block37Data;
#define _objects_task_unref0(var) ((var == NULL) ? NULL : (var = (objects_task_unref (var), NULL)))
typedef struct _Block38Data Block38Data;
#define _g_free0(var) (var = (g_free (var), NULL))

#define DIALOGS_TYPE_SHARE_DIALOG (dialogs_share_dialog_get_type ())
#define DIALOGS_SHARE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_TYPE_SHARE_DIALOG, DialogsShareDialog))
#define DIALOGS_SHARE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_TYPE_SHARE_DIALOG, DialogsShareDialogClass))
#define DIALOGS_IS_SHARE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_TYPE_SHARE_DIALOG))
#define DIALOGS_IS_SHARE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_TYPE_SHARE_DIALOG))
#define DIALOGS_SHARE_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_TYPE_SHARE_DIALOG, DialogsShareDialogClass))

typedef struct _DialogsShareDialog DialogsShareDialog;
typedef struct _DialogsShareDialogClass DialogsShareDialogClass;

#define TYPE_APPLICATION (application_get_type ())
#define APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_APPLICATION, Application))
#define APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_APPLICATION, ApplicationClass))
#define IS_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_APPLICATION))
#define IS_APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_APPLICATION))
#define APPLICATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_APPLICATION, ApplicationClass))

typedef struct _Application Application;
typedef struct _ApplicationClass ApplicationClass;
typedef struct _ApplicationPrivate ApplicationPrivate;
typedef struct _WidgetsTaskRowPrivate WidgetsTaskRowPrivate;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
typedef struct _ObjectsLabelPrivate ObjectsLabelPrivate;

#define WIDGETS_TYPE_LABEL_CHILD (widgets_label_child_get_type ())
#define WIDGETS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChild))
#define WIDGETS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChildClass))
#define WIDGETS_IS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_LABEL_CHILD))
#define WIDGETS_IS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_LABEL_CHILD))
#define WIDGETS_LABEL_CHILD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChildClass))

typedef struct _WidgetsLabelChild WidgetsLabelChild;
typedef struct _WidgetsLabelChildClass WidgetsLabelChildClass;
typedef struct _Block39Data Block39Data;
typedef struct _Block40Data Block40Data;

struct _ViewsCompletedTasks {
	GtkEventBox parent_instance;
	ViewsCompletedTasksPrivate * priv;
};

struct _ViewsCompletedTasksClass {
	GtkEventBoxClass parent_class;
};

struct _ViewsCompletedTasksPrivate {
	MainWindow* _window;
	GtkListBox* tasks_list;
	GtkFlowBox* labels_flowbox;
	WidgetsAlertView* alert_view;
	WidgetsPopoversLabelsPopover* labels_popover;
	GtkStack* main_stack;
};

struct _ObjectsTask {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsTaskPrivate * priv;
	gint id;
	gint checked;
	gint project_id;
	gint list_id;
	gint task_order;
	gint is_inbox;
	gint has_reminder;
	gint sidebar_width;
	gint was_notified;
	gchar* content;
	gchar* note;
	gchar* when_date_utc;
	gchar* reminder_time;
	gchar* labels;
	gchar* checklist;
};

struct _ObjectsTaskClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsTask *self);
};

struct _Block36Data {
	int _ref_count_;
	ViewsCompletedTasks* self;
	WidgetsTaskRow* row;
};

struct _Block37Data {
	int _ref_count_;
	ViewsCompletedTasks* self;
	WidgetsTaskRow* row;
};

struct _Block38Data {
	int _ref_count_;
	ViewsCompletedTasks* self;
	GtkToggleButton* show_hide_all_button;
	GtkImage* show_hide_image;
	GtkRevealer* labels_flowbox_revealer;
};

struct _Application {
	GtkApplication parent_instance;
	ApplicationPrivate * priv;
	MainWindow* main_window;
};

struct _ApplicationClass {
	GtkApplicationClass parent_class;
};

struct _WidgetsTaskRow {
	GtkListBoxRow parent_instance;
	WidgetsTaskRowPrivate * priv;
	GtkLabel* name_label;
	GtkBox* previews_box;
	GtkBox* project_preview_box;
	GtkRevealer* bottom_box_revealer;
	GtkBox* project_box;
};

struct _WidgetsTaskRowClass {
	GtkListBoxRowClass parent_class;
};

struct _ObjectsLabel {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsLabelPrivate * priv;
	gint id;
	gchar* name;
	gchar* color;
};

struct _ObjectsLabelClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsLabel *self);
};

struct _Block39Data {
	int _ref_count_;
	ViewsCompletedTasks* self;
	WidgetsTaskRow* row;
};

struct _Block40Data {
	int _ref_count_;
	ViewsCompletedTasks* self;
	WidgetsTaskRow* row;
};


static gpointer views_completed_tasks_parent_class = NULL;
extern Utils* application_utils;
extern ServicesDatabase* application_database;
extern GSettings* application_settings;

GType views_completed_tasks_get_type (void) G_GNUC_CONST;
GType main_window_get_type (void) G_GNUC_CONST;
GType widgets_alert_view_get_type (void) G_GNUC_CONST;
GType widgets_popovers_labels_popover_get_type (void) G_GNUC_CONST;
#define VIEWS_COMPLETED_TASKS_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), VIEWS_TYPE_COMPLETED_TASKS, ViewsCompletedTasksPrivate))
ViewsCompletedTasks* views_completed_tasks_new (void);
ViewsCompletedTasks* views_completed_tasks_construct (GType object_type);
gpointer objects_task_ref (gpointer instance);
void objects_task_unref (gpointer instance);
GParamSpec* objects_param_spec_task (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void objects_value_set_task (GValue* value,
                             gpointer v_object);
void objects_value_take_task (GValue* value,
                              gpointer v_object);
gpointer objects_value_get_task (const GValue* value);
GType objects_task_get_type (void) G_GNUC_CONST;
static void views_completed_tasks_add_new_task (ViewsCompletedTasks* self,
                                         ObjectsTask* task);
GType widgets_task_row_get_type (void) G_GNUC_CONST;
static Block36Data* block36_data_ref (Block36Data* _data36_);
static void block36_data_unref (void * _userdata_);
WidgetsTaskRow* widgets_task_row_new (ObjectsTask* _task);
WidgetsTaskRow* widgets_task_row_construct (GType object_type,
                                            ObjectsTask* _task);
static void ___lambda374_ (Block36Data* _data36_,
                    ObjectsTask* _task);
static gboolean ____lambda375_ (Block36Data* _data36_);
static gboolean _____lambda375__gsource_func (gpointer self);
static void ____lambda374__widgets_task_row_on_signal_update (WidgetsTaskRow* _sender,
                                                       ObjectsTask* task,
                                                       gpointer self);
void views_completed_tasks_check_visible_alertview (ViewsCompletedTasks* self);
GType utils_get_type (void) G_GNUC_CONST;
gboolean utils_is_listbox_all_empty (Utils* self,
                                     GtkListBox* listbox);
void views_completed_tasks_apply_remove (ViewsCompletedTasks* self);
ObjectsTask* widgets_task_row_get_task (WidgetsTaskRow* self);
void views_completed_tasks_update_tasks_list (ViewsCompletedTasks* self);
GType services_database_get_type (void) G_GNUC_CONST;
GeeArrayList* services_database_get_all_completed_tasks_2 (ServicesDatabase* self);
static Block37Data* block37_data_ref (Block37Data* _data37_);
static void block37_data_unref (void * _userdata_);
static void ____lambda376_ (Block37Data* _data37_,
                     ObjectsTask* _task);
static gboolean ____lambda377_ (Block37Data* _data37_);
static gboolean _____lambda377__gsource_func (gpointer self);
static void _____lambda376__widgets_task_row_on_signal_update (WidgetsTaskRow* _sender,
                                                        ObjectsTask* task,
                                                        gpointer self);
MainWindow* views_completed_tasks_get_window (ViewsCompletedTasks* self);
static void views_completed_tasks_set_window (ViewsCompletedTasks* self,
                                       MainWindow* value);
static GObject * views_completed_tasks_constructor (GType type,
                                             guint n_construct_properties,
                                             GObjectConstructParam * construct_properties);
static Block38Data* block38_data_ref (Block38Data* _data38_);
static void block38_data_unref (void * _userdata_);
WidgetsAlertView* widgets_alert_view_new (const gchar* title,
                                          const gchar* description,
                                          const gchar* icon_name);
WidgetsAlertView* widgets_alert_view_construct (GType object_type,
                                                const gchar* title,
                                                const gchar* description,
                                                const gchar* icon_name);
static void _views_completed_tasks___lambda378_ (Block38Data* _data38_);
void widgets_task_row_show_content (WidgetsTaskRow* self);
void widgets_task_row_hide_content (WidgetsTaskRow* self);
static void __views_completed_tasks___lambda378__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                                     gpointer self);
WidgetsPopoversLabelsPopover* widgets_popovers_labels_popover_new (GtkWidget* relative);
WidgetsPopoversLabelsPopover* widgets_popovers_labels_popover_construct (GType object_type,
                                                                         GtkWidget* relative);
static void _views_completed_tasks___lambda379_ (ViewsCompletedTasks* self);
GType dialogs_share_dialog_get_type (void) G_GNUC_CONST;
GType application_get_type (void) G_GNUC_CONST;
Application* application_get_instance (void);
DialogsShareDialog* dialogs_share_dialog_new (MainWindow* parent);
DialogsShareDialog* dialogs_share_dialog_construct (GType object_type,
                                                    MainWindow* parent);
void dialogs_share_dialog_set_inbox (DialogsShareDialog* self,
                                     gboolean value);
static void _gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                        gpointer self);
static void __views_completed_tasks___lambda379__gtk_button_clicked (GtkButton* _sender,
                                                              gpointer self);
static gboolean _views_completed_tasks____lambda380_ (ViewsCompletedTasks* self);
static gboolean __views_completed_tasks____lambda380__gsource_func (gpointer self);
static gboolean _views_completed_tasks____lambda381_ (ViewsCompletedTasks* self);
static gboolean __views_completed_tasks____lambda381__gsource_func (gpointer self);
static gint _views_completed_tasks___lambda382_ (ViewsCompletedTasks* self,
                                          GtkListBoxRow* row1,
                                          GtkListBoxRow* row2);
static gint __views_completed_tasks___lambda382__gtk_list_box_sort_func (GtkListBoxRow* row1,
                                                                  GtkListBoxRow* row2,
                                                                  gpointer self);
static gboolean _views_completed_tasks___lambda383_ (ViewsCompletedTasks* self,
                                              GdkEvent* event);
static gboolean __views_completed_tasks___lambda383__gtk_widget_event (GtkWidget* _sender,
                                                                GdkEvent* event,
                                                                gpointer self);
static void _views_completed_tasks___lambda384_ (ViewsCompletedTasks* self);
void widgets_popovers_labels_popover_update_label_list (WidgetsPopoversLabelsPopover* self);
static void __views_completed_tasks___lambda384__gtk_button_clicked (GtkButton* _sender,
                                                              gpointer self);
gpointer objects_label_ref (gpointer instance);
void objects_label_unref (gpointer instance);
GParamSpec* objects_param_spec_label (const gchar* name,
                                      const gchar* nick,
                                      const gchar* blurb,
                                      GType object_type,
                                      GParamFlags flags);
void objects_value_set_label (GValue* value,
                              gpointer v_object);
void objects_value_take_label (GValue* value,
                               gpointer v_object);
gpointer objects_value_get_label (const GValue* value);
GType objects_label_get_type (void) G_GNUC_CONST;
static void _views_completed_tasks___lambda385_ (Block38Data* _data38_,
                                          ObjectsLabel* label);
gboolean utils_is_label_repeted (Utils* self,
                                 GtkFlowBox* flowbox,
                                 gint id);
GType widgets_label_child_get_type (void) G_GNUC_CONST;
WidgetsLabelChild* widgets_label_child_new (ObjectsLabel* _label);
WidgetsLabelChild* widgets_label_child_construct (GType object_type,
                                                  ObjectsLabel* _label);
gboolean utils_is_empty (Utils* self,
                         GtkFlowBox* flowbox);
static gboolean __lambda386_ (ViewsCompletedTasks* self,
                       GtkListBoxRow* row);
ObjectsLabel* widgets_label_child_get_label (WidgetsLabelChild* self);
static gboolean ___lambda386__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                 gpointer self);
static void __views_completed_tasks___lambda385__widgets_popovers_labels_popover_on_selected_label (WidgetsPopoversLabelsPopover* _sender,
                                                                                             ObjectsLabel* label,
                                                                                             gpointer self);
static void _views_completed_tasks___lambda387_ (Block38Data* _data38_,
                                          GtkWidget* widget);
static gboolean ___lambda388_ (ViewsCompletedTasks* self,
                        GtkListBoxRow* row);
static gboolean ____lambda388__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                  gpointer self);
static gboolean ___lambda389_ (ViewsCompletedTasks* self,
                        GtkListBoxRow* row);
static gboolean ____lambda389__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                  gpointer self);
static void __views_completed_tasks___lambda387__gtk_container_remove (GtkContainer* _sender,
                                                                GtkWidget* widget,
                                                                gpointer self);
static void _views_completed_tasks___lambda390_ (ViewsCompletedTasks* self,
                                          GtkWidget* widget);
static void __views_completed_tasks___lambda390__gtk_container_remove (GtkContainer* _sender,
                                                                GtkWidget* widget,
                                                                gpointer self);
static void _views_completed_tasks___lambda391_ (ViewsCompletedTasks* self,
                                          ObjectsTask* task);
gboolean utils_is_task_repeted (Utils* self,
                                GtkListBox* listbox,
                                gint id);
static Block39Data* block39_data_ref (Block39Data* _data39_);
static void block39_data_unref (void * _userdata_);
static gboolean _______lambda392_ (Block39Data* _data39_);
static gboolean ________lambda392__gsource_func (gpointer self);
void widgets_task_row_set_update_task (WidgetsTaskRow* self,
                                       ObjectsTask* _task);
static void __views_completed_tasks___lambda391__services_database_update_task_signal (ServicesDatabase* _sender,
                                                                                ObjectsTask* task,
                                                                                gpointer self);
static void _views_completed_tasks___lambda393_ (ViewsCompletedTasks* self,
                                          ObjectsTask* task);
static void __views_completed_tasks___lambda393__services_database_add_task_signal (ServicesDatabase* _sender,
                                                                             ObjectsTask* task,
                                                                             gpointer self);
static void _views_completed_tasks___lambda394_ (ViewsCompletedTasks* self,
                                          ObjectsTask* task);
static Block40Data* block40_data_ref (Block40Data* _data40_);
static void block40_data_unref (void * _userdata_);
static gboolean ______lambda395_ (Block40Data* _data40_);
static gboolean _______lambda395__gsource_func (gpointer self);
static void __views_completed_tasks___lambda394__services_database_on_signal_remove_task (ServicesDatabase* _sender,
                                                                                   ObjectsTask* task,
                                                                                   gpointer self);
static void views_completed_tasks_finalize (GObject * obj);
static void _vala_views_completed_tasks_get_property (GObject * object,
                                               guint property_id,
                                               GValue * value,
                                               GParamSpec * pspec);
static void _vala_views_completed_tasks_set_property (GObject * object,
                                               guint property_id,
                                               const GValue * value,
                                               GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


ViewsCompletedTasks*
views_completed_tasks_construct (GType object_type)
{
	ViewsCompletedTasks * self = NULL;
#line 31 "/run/build/planner/src/Views/CompletedTasks.vala"
	self = (ViewsCompletedTasks*) g_object_new (object_type, "expand", TRUE, NULL);
#line 30 "/run/build/planner/src/Views/CompletedTasks.vala"
	return self;
#line 510 "CompletedTasks.c"
}


ViewsCompletedTasks*
views_completed_tasks_new (void)
{
#line 30 "/run/build/planner/src/Views/CompletedTasks.vala"
	return views_completed_tasks_construct (VIEWS_TYPE_COMPLETED_TASKS);
#line 519 "CompletedTasks.c"
}


static Block36Data*
block36_data_ref (Block36Data* _data36_)
{
#line 355 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_atomic_int_inc (&_data36_->_ref_count_);
#line 355 "/run/build/planner/src/Views/CompletedTasks.vala"
	return _data36_;
#line 530 "CompletedTasks.c"
}


static void
block36_data_unref (void * _userdata_)
{
	Block36Data* _data36_;
	_data36_ = (Block36Data*) _userdata_;
#line 355 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (g_atomic_int_dec_and_test (&_data36_->_ref_count_)) {
#line 541 "CompletedTasks.c"
		ViewsCompletedTasks* self;
#line 355 "/run/build/planner/src/Views/CompletedTasks.vala"
		self = _data36_->self;
#line 355 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (_data36_->row);
#line 355 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (self);
#line 355 "/run/build/planner/src/Views/CompletedTasks.vala"
		g_slice_free (Block36Data, _data36_);
#line 551 "CompletedTasks.c"
	}
}


static gboolean
____lambda375_ (Block36Data* _data36_)
{
	ViewsCompletedTasks* self;
	gboolean result = FALSE;
	WidgetsTaskRow* _tmp0_;
#line 363 "/run/build/planner/src/Views/CompletedTasks.vala"
	self = _data36_->self;
#line 364 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = _data36_->row;
#line 364 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_destroy ((GtkWidget*) _tmp0_);
#line 365 "/run/build/planner/src/Views/CompletedTasks.vala"
	result = G_SOURCE_REMOVE;
#line 365 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 572 "CompletedTasks.c"
}


static gboolean
_____lambda375__gsource_func (gpointer self)
{
	gboolean result;
	result = ____lambda375_ (self);
#line 363 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 583 "CompletedTasks.c"
}


static void
___lambda374_ (Block36Data* _data36_,
               ObjectsTask* _task)
{
	ViewsCompletedTasks* self;
	gint _tmp0_;
	GtkListBox* _tmp2_;
#line 360 "/run/build/planner/src/Views/CompletedTasks.vala"
	self = _data36_->self;
#line 360 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_if_fail (_task != NULL);
#line 361 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = _task->checked;
#line 361 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (_tmp0_ == 0) {
#line 602 "CompletedTasks.c"
		WidgetsTaskRow* _tmp1_;
#line 362 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp1_ = _data36_->row;
#line 362 "/run/build/planner/src/Views/CompletedTasks.vala"
		if (G_TYPE_CHECK_INSTANCE_TYPE (_tmp1_, gtk_widget_get_type ())) {
#line 363 "/run/build/planner/src/Views/CompletedTasks.vala"
			g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 250, _____lambda375__gsource_func, block36_data_ref (_data36_), block36_data_unref);
#line 610 "CompletedTasks.c"
		}
	}
#line 370 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp2_ = self->priv->tasks_list;
#line 370 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_list_box_unselect_all (_tmp2_);
#line 617 "CompletedTasks.c"
}


static void
____lambda374__widgets_task_row_on_signal_update (WidgetsTaskRow* _sender,
                                                  ObjectsTask* task,
                                                  gpointer self)
{
#line 360 "/run/build/planner/src/Views/CompletedTasks.vala"
	___lambda374_ (self, task);
#line 628 "CompletedTasks.c"
}


static void
views_completed_tasks_add_new_task (ViewsCompletedTasks* self,
                                    ObjectsTask* task)
{
	gint _tmp0_;
#line 354 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_if_fail (self != NULL);
#line 354 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_if_fail (task != NULL);
#line 355 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = task->checked;
#line 355 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (_tmp0_ == 1) {
#line 645 "CompletedTasks.c"
		Block36Data* _data36_;
		WidgetsTaskRow* _tmp1_;
		GtkListBox* _tmp2_;
		WidgetsTaskRow* _tmp3_;
		WidgetsTaskRow* _tmp4_;
		GtkListBox* _tmp5_;
#line 355 "/run/build/planner/src/Views/CompletedTasks.vala"
		_data36_ = g_slice_new0 (Block36Data);
#line 355 "/run/build/planner/src/Views/CompletedTasks.vala"
		_data36_->_ref_count_ = 1;
#line 355 "/run/build/planner/src/Views/CompletedTasks.vala"
		_data36_->self = g_object_ref (self);
#line 356 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp1_ = widgets_task_row_new (task);
#line 356 "/run/build/planner/src/Views/CompletedTasks.vala"
		g_object_ref_sink (_tmp1_);
#line 356 "/run/build/planner/src/Views/CompletedTasks.vala"
		_data36_->row = _tmp1_;
#line 358 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp2_ = self->priv->tasks_list;
#line 358 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp3_ = _data36_->row;
#line 358 "/run/build/planner/src/Views/CompletedTasks.vala"
		gtk_container_add ((GtkContainer*) _tmp2_, (GtkWidget*) _tmp3_);
#line 360 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp4_ = _data36_->row;
#line 360 "/run/build/planner/src/Views/CompletedTasks.vala"
		g_signal_connect_data (_tmp4_, "on-signal-update", (GCallback) ____lambda374__widgets_task_row_on_signal_update, block36_data_ref (_data36_), (GClosureNotify) block36_data_unref, 0);
#line 373 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp5_ = self->priv->tasks_list;
#line 373 "/run/build/planner/src/Views/CompletedTasks.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp5_);
#line 355 "/run/build/planner/src/Views/CompletedTasks.vala"
		block36_data_unref (_data36_);
#line 355 "/run/build/planner/src/Views/CompletedTasks.vala"
		_data36_ = NULL;
#line 682 "CompletedTasks.c"
	}
#line 376 "/run/build/planner/src/Views/CompletedTasks.vala"
	views_completed_tasks_check_visible_alertview (self);
#line 686 "CompletedTasks.c"
}


void
views_completed_tasks_check_visible_alertview (ViewsCompletedTasks* self)
{
	Utils* _tmp0_;
	GtkListBox* _tmp1_;
#line 379 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_if_fail (self != NULL);
#line 380 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = application_utils;
#line 380 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp1_ = self->priv->tasks_list;
#line 380 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (utils_is_listbox_all_empty (_tmp0_, _tmp1_)) {
#line 703 "CompletedTasks.c"
		GtkStack* _tmp2_;
#line 381 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp2_ = self->priv->main_stack;
#line 381 "/run/build/planner/src/Views/CompletedTasks.vala"
		gtk_stack_set_visible_child_name (_tmp2_, "alert");
#line 709 "CompletedTasks.c"
	} else {
		GtkStack* _tmp3_;
#line 383 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp3_ = self->priv->main_stack;
#line 383 "/run/build/planner/src/Views/CompletedTasks.vala"
		gtk_stack_set_visible_child_name (_tmp3_, "main");
#line 716 "CompletedTasks.c"
	}
#line 386 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 720 "CompletedTasks.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 390 "/run/build/planner/src/Views/CompletedTasks.vala"
	return self ? g_object_ref (self) : NULL;
#line 729 "CompletedTasks.c"
}


void
views_completed_tasks_apply_remove (ViewsCompletedTasks* self)
{
	GtkListBox* _tmp0_;
	GList* _tmp1_;
	GtkListBox* _tmp16_;
#line 389 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_if_fail (self != NULL);
#line 390 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = self->priv->tasks_list;
#line 390 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 745 "CompletedTasks.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 390 "/run/build/planner/src/Views/CompletedTasks.vala"
		element_collection = _tmp1_;
#line 390 "/run/build/planner/src/Views/CompletedTasks.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 753 "CompletedTasks.c"
			GtkWidget* _tmp2_;
			GtkWidget* element = NULL;
#line 390 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp2_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 390 "/run/build/planner/src/Views/CompletedTasks.vala"
			element = _tmp2_;
#line 760 "CompletedTasks.c"
			{
				WidgetsTaskRow* row = NULL;
				GtkWidget* _tmp3_;
				WidgetsTaskRow* _tmp4_;
				gboolean _tmp5_ = FALSE;
				WidgetsTaskRow* _tmp6_;
				ObjectsTask* _tmp7_;
				ObjectsTask* _tmp8_;
				gint _tmp9_;
#line 391 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp3_ = element;
#line 391 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp3_) : NULL);
#line 391 "/run/build/planner/src/Views/CompletedTasks.vala"
				row = _tmp4_;
#line 393 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp6_ = row;
#line 393 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp7_ = widgets_task_row_get_task (_tmp6_);
#line 393 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp8_ = _tmp7_;
#line 393 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp9_ = _tmp8_->is_inbox;
#line 393 "/run/build/planner/src/Views/CompletedTasks.vala"
				if (_tmp9_ == 0) {
#line 393 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp5_ = TRUE;
#line 788 "CompletedTasks.c"
				} else {
					WidgetsTaskRow* _tmp10_;
					ObjectsTask* _tmp11_;
					ObjectsTask* _tmp12_;
					const gchar* _tmp13_;
#line 393 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp10_ = row;
#line 393 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp11_ = widgets_task_row_get_task (_tmp10_);
#line 393 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp12_ = _tmp11_;
#line 393 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp13_ = _tmp12_->when_date_utc;
#line 393 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp5_ = g_strcmp0 (_tmp13_, "") != 0;
#line 804 "CompletedTasks.c"
				}
#line 393 "/run/build/planner/src/Views/CompletedTasks.vala"
				if (_tmp5_) {
#line 808 "CompletedTasks.c"
					GtkListBox* _tmp14_;
					GtkWidget* _tmp15_;
#line 394 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp14_ = self->priv->tasks_list;
#line 394 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp15_ = element;
#line 394 "/run/build/planner/src/Views/CompletedTasks.vala"
					gtk_container_remove ((GtkContainer*) _tmp14_, _tmp15_);
#line 817 "CompletedTasks.c"
				}
#line 390 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (row);
#line 390 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (element);
#line 823 "CompletedTasks.c"
			}
		}
#line 390 "/run/build/planner/src/Views/CompletedTasks.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 828 "CompletedTasks.c"
	}
#line 398 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp16_ = self->priv->tasks_list;
#line 398 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_list_box_invalidate_sort (_tmp16_);
#line 834 "CompletedTasks.c"
}


static Block37Data*
block37_data_ref (Block37Data* _data37_)
{
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_atomic_int_inc (&_data37_->_ref_count_);
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
	return _data37_;
#line 845 "CompletedTasks.c"
}


static void
block37_data_unref (void * _userdata_)
{
	Block37Data* _data37_;
	_data37_ = (Block37Data*) _userdata_;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (g_atomic_int_dec_and_test (&_data37_->_ref_count_)) {
#line 856 "CompletedTasks.c"
		ViewsCompletedTasks* self;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
		self = _data37_->self;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (_data37_->row);
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (self);
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
		g_slice_free (Block37Data, _data37_);
#line 866 "CompletedTasks.c"
	}
}


static gboolean
____lambda377_ (Block37Data* _data37_)
{
	ViewsCompletedTasks* self;
	gboolean result = FALSE;
	WidgetsTaskRow* _tmp0_;
#line 413 "/run/build/planner/src/Views/CompletedTasks.vala"
	self = _data37_->self;
#line 414 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = _data37_->row;
#line 414 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_destroy ((GtkWidget*) _tmp0_);
#line 415 "/run/build/planner/src/Views/CompletedTasks.vala"
	result = G_SOURCE_REMOVE;
#line 415 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 887 "CompletedTasks.c"
}


static gboolean
_____lambda377__gsource_func (gpointer self)
{
	gboolean result;
	result = ____lambda377_ (self);
#line 413 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 898 "CompletedTasks.c"
}


static void
____lambda376_ (Block37Data* _data37_,
                ObjectsTask* _task)
{
	ViewsCompletedTasks* self;
	gint _tmp0_;
	GtkListBox* _tmp2_;
#line 410 "/run/build/planner/src/Views/CompletedTasks.vala"
	self = _data37_->self;
#line 410 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_if_fail (_task != NULL);
#line 411 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = _task->checked;
#line 411 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (_tmp0_ == 0) {
#line 917 "CompletedTasks.c"
		WidgetsTaskRow* _tmp1_;
#line 412 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp1_ = _data37_->row;
#line 412 "/run/build/planner/src/Views/CompletedTasks.vala"
		if (G_TYPE_CHECK_INSTANCE_TYPE (_tmp1_, gtk_widget_get_type ())) {
#line 413 "/run/build/planner/src/Views/CompletedTasks.vala"
			g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 250, _____lambda377__gsource_func, block37_data_ref (_data37_), block37_data_unref);
#line 925 "CompletedTasks.c"
		}
	}
#line 420 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp2_ = self->priv->tasks_list;
#line 420 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_list_box_unselect_all (_tmp2_);
#line 932 "CompletedTasks.c"
}


static void
_____lambda376__widgets_task_row_on_signal_update (WidgetsTaskRow* _sender,
                                                   ObjectsTask* task,
                                                   gpointer self)
{
#line 410 "/run/build/planner/src/Views/CompletedTasks.vala"
	____lambda376_ (self, task);
#line 943 "CompletedTasks.c"
}


void
views_completed_tasks_update_tasks_list (ViewsCompletedTasks* self)
{
	GeeArrayList* all_tasks = NULL;
	GeeArrayList* _tmp0_;
	ServicesDatabase* _tmp1_;
	GeeArrayList* _tmp2_;
	GtkListBox* _tmp19_;
	Utils* _tmp20_;
	GtkListBox* _tmp21_;
#line 401 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_if_fail (self != NULL);
#line 402 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = gee_array_list_new (OBJECTS_TYPE_TASK, (GBoxedCopyFunc) objects_task_ref, (GDestroyNotify) objects_task_unref, NULL, NULL, NULL);
#line 402 "/run/build/planner/src/Views/CompletedTasks.vala"
	all_tasks = _tmp0_;
#line 403 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp1_ = application_database;
#line 403 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp2_ = services_database_get_all_completed_tasks_2 (_tmp1_);
#line 403 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (all_tasks);
#line 403 "/run/build/planner/src/Views/CompletedTasks.vala"
	all_tasks = _tmp2_;
#line 971 "CompletedTasks.c"
	{
		GeeArrayList* _task_list = NULL;
		GeeArrayList* _tmp3_;
		GeeArrayList* _tmp4_;
		gint _task_size = 0;
		GeeArrayList* _tmp5_;
		gint _tmp6_;
		gint _tmp7_;
		gint _task_index = 0;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp3_ = all_tasks;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp4_ = _g_object_ref0 (_tmp3_);
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
		_task_list = _tmp4_;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp5_ = _task_list;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp6_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp5_);
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp7_ = _tmp6_;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
		_task_size = _tmp7_;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
		_task_index = -1;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
		while (TRUE) {
#line 999 "CompletedTasks.c"
			Block37Data* _data37_;
			gint _tmp8_;
			gint _tmp9_;
			gint _tmp10_;
			ObjectsTask* task = NULL;
			GeeArrayList* _tmp11_;
			gint _tmp12_;
			gpointer _tmp13_;
			ObjectsTask* _tmp14_;
			WidgetsTaskRow* _tmp15_;
			GtkListBox* _tmp16_;
			WidgetsTaskRow* _tmp17_;
			WidgetsTaskRow* _tmp18_;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
			_data37_ = g_slice_new0 (Block37Data);
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
			_data37_->_ref_count_ = 1;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
			_data37_->self = g_object_ref (self);
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp8_ = _task_index;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
			_task_index = _tmp8_ + 1;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp9_ = _task_index;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp10_ = _task_size;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
			if (!(_tmp9_ < _tmp10_)) {
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
				block37_data_unref (_data37_);
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
				_data37_ = NULL;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
				break;
#line 1035 "CompletedTasks.c"
			}
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp11_ = _task_list;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp12_ = _task_index;
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp13_ = gee_abstract_list_get ((GeeAbstractList*) _tmp11_, _tmp12_);
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
			task = (ObjectsTask*) _tmp13_;
#line 406 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp14_ = task;
#line 406 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp15_ = widgets_task_row_new (_tmp14_);
#line 406 "/run/build/planner/src/Views/CompletedTasks.vala"
			g_object_ref_sink (_tmp15_);
#line 406 "/run/build/planner/src/Views/CompletedTasks.vala"
			_data37_->row = _tmp15_;
#line 408 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp16_ = self->priv->tasks_list;
#line 408 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp17_ = _data37_->row;
#line 408 "/run/build/planner/src/Views/CompletedTasks.vala"
			gtk_container_add ((GtkContainer*) _tmp16_, (GtkWidget*) _tmp17_);
#line 410 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp18_ = _data37_->row;
#line 410 "/run/build/planner/src/Views/CompletedTasks.vala"
			g_signal_connect_data (_tmp18_, "on-signal-update", (GCallback) _____lambda376__widgets_task_row_on_signal_update, block37_data_ref (_data37_), (GClosureNotify) block37_data_unref, 0);
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
			_objects_task_unref0 (task);
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
			block37_data_unref (_data37_);
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
			_data37_ = NULL;
#line 1069 "CompletedTasks.c"
		}
#line 405 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (_task_list);
#line 1073 "CompletedTasks.c"
	}
#line 424 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp19_ = self->priv->tasks_list;
#line 424 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp19_);
#line 426 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp20_ = application_utils;
#line 426 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp21_ = self->priv->tasks_list;
#line 426 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (utils_is_listbox_all_empty (_tmp20_, _tmp21_)) {
#line 1085 "CompletedTasks.c"
		GtkStack* _tmp22_;
#line 427 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp22_ = self->priv->main_stack;
#line 427 "/run/build/planner/src/Views/CompletedTasks.vala"
		gtk_stack_set_visible_child_name (_tmp22_, "alert");
#line 1091 "CompletedTasks.c"
	}
#line 401 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (all_tasks);
#line 1095 "CompletedTasks.c"
}


MainWindow*
views_completed_tasks_get_window (ViewsCompletedTasks* self)
{
	MainWindow* result;
	MainWindow* _tmp0_;
#line 23 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = self->priv->_window;
#line 23 "/run/build/planner/src/Views/CompletedTasks.vala"
	result = _tmp0_;
#line 23 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 1112 "CompletedTasks.c"
}


static void
views_completed_tasks_set_window (ViewsCompletedTasks* self,
                                  MainWindow* value)
{
#line 23 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_if_fail (self != NULL);
#line 23 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (views_completed_tasks_get_window (self) != value) {
#line 1124 "CompletedTasks.c"
		MainWindow* _tmp0_;
#line 23 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 23 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (self->priv->_window);
#line 23 "/run/build/planner/src/Views/CompletedTasks.vala"
		self->priv->_window = _tmp0_;
#line 23 "/run/build/planner/src/Views/CompletedTasks.vala"
		g_object_notify_by_pspec ((GObject *) self, views_completed_tasks_properties[VIEWS_COMPLETED_TASKS_WINDOW_PROPERTY]);
#line 1134 "CompletedTasks.c"
	}
}


static Block38Data*
block38_data_ref (Block38Data* _data38_)
{
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_atomic_int_inc (&_data38_->_ref_count_);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	return _data38_;
#line 1146 "CompletedTasks.c"
}


static void
block38_data_unref (void * _userdata_)
{
	Block38Data* _data38_;
	_data38_ = (Block38Data*) _userdata_;
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (g_atomic_int_dec_and_test (&_data38_->_ref_count_)) {
#line 1157 "CompletedTasks.c"
		ViewsCompletedTasks* self;
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
		self = _data38_->self;
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (_data38_->labels_flowbox_revealer);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (_data38_->show_hide_image);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (_data38_->show_hide_all_button);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (self);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
		g_slice_free (Block38Data, _data38_);
#line 1171 "CompletedTasks.c"
	}
}


static void
_views_completed_tasks___lambda378_ (Block38Data* _data38_)
{
	ViewsCompletedTasks* self;
	GtkToggleButton* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 60 "/run/build/planner/src/Views/CompletedTasks.vala"
	self = _data38_->self;
#line 61 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = _data38_->show_hide_all_button;
#line 61 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp1_ = gtk_toggle_button_get_active (_tmp0_);
#line 61 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp2_ = _tmp1_;
#line 61 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (_tmp2_) {
#line 1193 "CompletedTasks.c"
		GtkToggleButton* _tmp3_;
		GtkImage* _tmp4_;
		GtkListBox* _tmp5_;
		GList* _tmp6_;
#line 62 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp3_ = _data38_->show_hide_all_button;
#line 62 "/run/build/planner/src/Views/CompletedTasks.vala"
		gtk_widget_set_tooltip_text ((GtkWidget*) _tmp3_, _ ("Close all tasks"));
#line 63 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp4_ = _data38_->show_hide_image;
#line 63 "/run/build/planner/src/Views/CompletedTasks.vala"
		g_object_set (_tmp4_, "icon-name", "zoom-out-symbolic", NULL);
#line 65 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp5_ = self->priv->tasks_list;
#line 65 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp6_ = gtk_container_get_children ((GtkContainer*) _tmp5_);
#line 1210 "CompletedTasks.c"
		{
			GList* element_collection = NULL;
			GList* element_it = NULL;
#line 65 "/run/build/planner/src/Views/CompletedTasks.vala"
			element_collection = _tmp6_;
#line 65 "/run/build/planner/src/Views/CompletedTasks.vala"
			for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 1218 "CompletedTasks.c"
				GtkWidget* _tmp7_;
				GtkWidget* element = NULL;
#line 65 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp7_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 65 "/run/build/planner/src/Views/CompletedTasks.vala"
				element = _tmp7_;
#line 1225 "CompletedTasks.c"
				{
					WidgetsTaskRow* row = NULL;
					GtkWidget* _tmp8_;
					WidgetsTaskRow* _tmp9_;
					WidgetsTaskRow* _tmp10_;
#line 66 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp8_ = element;
#line 66 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp9_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp8_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp8_) : NULL);
#line 66 "/run/build/planner/src/Views/CompletedTasks.vala"
					row = _tmp9_;
#line 67 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp10_ = row;
#line 67 "/run/build/planner/src/Views/CompletedTasks.vala"
					widgets_task_row_show_content (_tmp10_);
#line 65 "/run/build/planner/src/Views/CompletedTasks.vala"
					_g_object_unref0 (row);
#line 65 "/run/build/planner/src/Views/CompletedTasks.vala"
					_g_object_unref0 (element);
#line 1245 "CompletedTasks.c"
				}
			}
#line 65 "/run/build/planner/src/Views/CompletedTasks.vala"
			(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 1250 "CompletedTasks.c"
		}
	} else {
		GtkToggleButton* _tmp11_;
		GtkImage* _tmp12_;
		GtkListBox* _tmp13_;
		GList* _tmp14_;
#line 70 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp11_ = _data38_->show_hide_all_button;
#line 70 "/run/build/planner/src/Views/CompletedTasks.vala"
		gtk_widget_set_tooltip_text ((GtkWidget*) _tmp11_, _ ("Open all tasks"));
#line 71 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp12_ = _data38_->show_hide_image;
#line 71 "/run/build/planner/src/Views/CompletedTasks.vala"
		g_object_set (_tmp12_, "icon-name", "zoom-in-symbolic", NULL);
#line 73 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp13_ = self->priv->tasks_list;
#line 73 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp14_ = gtk_container_get_children ((GtkContainer*) _tmp13_);
#line 1269 "CompletedTasks.c"
		{
			GList* element_collection = NULL;
			GList* element_it = NULL;
#line 73 "/run/build/planner/src/Views/CompletedTasks.vala"
			element_collection = _tmp14_;
#line 73 "/run/build/planner/src/Views/CompletedTasks.vala"
			for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 1277 "CompletedTasks.c"
				GtkWidget* _tmp15_;
				GtkWidget* element = NULL;
#line 73 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp15_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 73 "/run/build/planner/src/Views/CompletedTasks.vala"
				element = _tmp15_;
#line 1284 "CompletedTasks.c"
				{
					WidgetsTaskRow* row = NULL;
					GtkWidget* _tmp16_;
					WidgetsTaskRow* _tmp17_;
					WidgetsTaskRow* _tmp18_;
#line 74 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp16_ = element;
#line 74 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp17_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp16_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp16_) : NULL);
#line 74 "/run/build/planner/src/Views/CompletedTasks.vala"
					row = _tmp17_;
#line 75 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp18_ = row;
#line 75 "/run/build/planner/src/Views/CompletedTasks.vala"
					widgets_task_row_hide_content (_tmp18_);
#line 73 "/run/build/planner/src/Views/CompletedTasks.vala"
					_g_object_unref0 (row);
#line 73 "/run/build/planner/src/Views/CompletedTasks.vala"
					_g_object_unref0 (element);
#line 1304 "CompletedTasks.c"
				}
			}
#line 73 "/run/build/planner/src/Views/CompletedTasks.vala"
			(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 1309 "CompletedTasks.c"
		}
	}
}


static void
__views_completed_tasks___lambda378__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                                gpointer self)
{
#line 60 "/run/build/planner/src/Views/CompletedTasks.vala"
	_views_completed_tasks___lambda378_ (self);
#line 1321 "CompletedTasks.c"
}


static void
_gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                   gpointer self)
{
#line 98 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_main_quit ();
#line 1331 "CompletedTasks.c"
}


static void
_views_completed_tasks___lambda379_ (ViewsCompletedTasks* self)
{
	DialogsShareDialog* share_dialog = NULL;
	Application* _tmp0_;
	Application* _tmp1_;
	MainWindow* _tmp2_;
	DialogsShareDialog* _tmp3_;
	DialogsShareDialog* _tmp4_;
	DialogsShareDialog* _tmp5_;
	DialogsShareDialog* _tmp6_;
#line 96 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = application_get_instance ();
#line 96 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp1_ = _tmp0_;
#line 96 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp2_ = _tmp1_->main_window;
#line 96 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp3_ = dialogs_share_dialog_new (_tmp2_);
#line 96 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp3_);
#line 96 "/run/build/planner/src/Views/CompletedTasks.vala"
	share_dialog = _tmp3_;
#line 97 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp4_ = share_dialog;
#line 97 "/run/build/planner/src/Views/CompletedTasks.vala"
	dialogs_share_dialog_set_inbox (_tmp4_, TRUE);
#line 98 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp5_ = share_dialog;
#line 98 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_signal_connect ((GtkWidget*) _tmp5_, "destroy", (GCallback) _gtk_main_quit_gtk_widget_destroy, NULL);
#line 99 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp6_ = share_dialog;
#line 99 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp6_);
#line 95 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (share_dialog);
#line 1372 "CompletedTasks.c"
}


static void
__views_completed_tasks___lambda379__gtk_button_clicked (GtkButton* _sender,
                                                         gpointer self)
{
#line 95 "/run/build/planner/src/Views/CompletedTasks.vala"
	_views_completed_tasks___lambda379_ ((ViewsCompletedTasks*) self);
#line 1382 "CompletedTasks.c"
}


static gboolean
_views_completed_tasks____lambda380_ (ViewsCompletedTasks* self)
{
	gboolean result = FALSE;
	GtkStack* _tmp0_;
#line 177 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = self->priv->main_stack;
#line 177 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_stack_set_visible_child_name (_tmp0_, "alert");
#line 178 "/run/build/planner/src/Views/CompletedTasks.vala"
	result = FALSE;
#line 178 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 1399 "CompletedTasks.c"
}


static gboolean
__views_completed_tasks____lambda380__gsource_func (gpointer self)
{
	gboolean result;
	result = _views_completed_tasks____lambda380_ ((ViewsCompletedTasks*) self);
#line 176 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 1410 "CompletedTasks.c"
}


static gboolean
_views_completed_tasks____lambda381_ (ViewsCompletedTasks* self)
{
	gboolean result = FALSE;
	GtkStack* _tmp0_;
#line 182 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = self->priv->main_stack;
#line 182 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_stack_set_visible_child_name (_tmp0_, "main");
#line 183 "/run/build/planner/src/Views/CompletedTasks.vala"
	result = FALSE;
#line 183 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 1427 "CompletedTasks.c"
}


static gboolean
__views_completed_tasks____lambda381__gsource_func (gpointer self)
{
	gboolean result;
	result = _views_completed_tasks____lambda381_ ((ViewsCompletedTasks*) self);
#line 181 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 1438 "CompletedTasks.c"
}


static gint
_views_completed_tasks___lambda382_ (ViewsCompletedTasks* self,
                                     GtkListBoxRow* row1,
                                     GtkListBoxRow* row2)
{
	gint result = 0;
	WidgetsTaskRow* item1 = NULL;
	WidgetsTaskRow* _tmp0_;
	WidgetsTaskRow* _tmp1_;
	ObjectsTask* _tmp2_;
	ObjectsTask* _tmp3_;
	gint _tmp4_;
#line 187 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_val_if_fail (row1 != NULL, 0);
#line 187 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_val_if_fail (row2 != NULL, 0);
#line 188 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row1, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) row1) : NULL);
#line 188 "/run/build/planner/src/Views/CompletedTasks.vala"
	item1 = _tmp0_;
#line 189 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp1_ = item1;
#line 189 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp2_ = widgets_task_row_get_task (_tmp1_);
#line 189 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp3_ = _tmp2_;
#line 189 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp4_ = _tmp3_->checked;
#line 189 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (_tmp4_ == 0) {
#line 190 "/run/build/planner/src/Views/CompletedTasks.vala"
		result = 0;
#line 190 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (item1);
#line 190 "/run/build/planner/src/Views/CompletedTasks.vala"
		return result;
#line 1478 "CompletedTasks.c"
	} else {
#line 192 "/run/build/planner/src/Views/CompletedTasks.vala"
		result = 1;
#line 192 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (item1);
#line 192 "/run/build/planner/src/Views/CompletedTasks.vala"
		return result;
#line 1486 "CompletedTasks.c"
	}
#line 187 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (item1);
#line 1490 "CompletedTasks.c"
}


static gint
__views_completed_tasks___lambda382__gtk_list_box_sort_func (GtkListBoxRow* row1,
                                                             GtkListBoxRow* row2,
                                                             gpointer self)
{
	gint result;
	result = _views_completed_tasks___lambda382_ ((ViewsCompletedTasks*) self, row1, row2);
#line 187 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 1503 "CompletedTasks.c"
}


static gboolean
_views_completed_tasks___lambda383_ (ViewsCompletedTasks* self,
                                     GdkEvent* event)
{
	gboolean result = FALSE;
	gint button_press = 0;
	GSettings* _tmp0_;
	gint _tmp1_;
	GtkListBox* _tmp25_;
#line 201 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 202 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = application_settings;
#line 202 "/run/build/planner/src/Views/CompletedTasks.vala"
	button_press = g_settings_get_enum (_tmp0_, "quick-save");
#line 204 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp1_ = button_press;
#line 204 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (_tmp1_ == 0) {
#line 1526 "CompletedTasks.c"
	} else {
		gint _tmp2_;
#line 206 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp2_ = button_press;
#line 206 "/run/build/planner/src/Views/CompletedTasks.vala"
		if (_tmp2_ == 1) {
#line 1533 "CompletedTasks.c"
			GdkEventType _tmp3_;
#line 207 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp3_ = event->type;
#line 207 "/run/build/planner/src/Views/CompletedTasks.vala"
			if (_tmp3_ == GDK_2BUTTON_PRESS) {
#line 1539 "CompletedTasks.c"
				GtkListBox* _tmp4_;
				GList* _tmp5_;
#line 208 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp4_ = self->priv->tasks_list;
#line 208 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp5_ = gtk_container_get_children ((GtkContainer*) _tmp4_);
#line 1546 "CompletedTasks.c"
				{
					GList* element_collection = NULL;
					GList* element_it = NULL;
#line 208 "/run/build/planner/src/Views/CompletedTasks.vala"
					element_collection = _tmp5_;
#line 208 "/run/build/planner/src/Views/CompletedTasks.vala"
					for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 1554 "CompletedTasks.c"
						GtkWidget* _tmp6_;
						GtkWidget* element = NULL;
#line 208 "/run/build/planner/src/Views/CompletedTasks.vala"
						_tmp6_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 208 "/run/build/planner/src/Views/CompletedTasks.vala"
						element = _tmp6_;
#line 1561 "CompletedTasks.c"
						{
							WidgetsTaskRow* row = NULL;
							GtkWidget* _tmp7_;
							WidgetsTaskRow* _tmp8_;
							WidgetsTaskRow* _tmp9_;
							GtkRevealer* _tmp10_;
							gboolean _tmp11_;
							gboolean _tmp12_;
#line 209 "/run/build/planner/src/Views/CompletedTasks.vala"
							_tmp7_ = element;
#line 209 "/run/build/planner/src/Views/CompletedTasks.vala"
							_tmp8_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp7_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp7_) : NULL);
#line 209 "/run/build/planner/src/Views/CompletedTasks.vala"
							row = _tmp8_;
#line 211 "/run/build/planner/src/Views/CompletedTasks.vala"
							_tmp9_ = row;
#line 211 "/run/build/planner/src/Views/CompletedTasks.vala"
							_tmp10_ = _tmp9_->bottom_box_revealer;
#line 211 "/run/build/planner/src/Views/CompletedTasks.vala"
							_tmp11_ = gtk_revealer_get_reveal_child (_tmp10_);
#line 211 "/run/build/planner/src/Views/CompletedTasks.vala"
							_tmp12_ = _tmp11_;
#line 211 "/run/build/planner/src/Views/CompletedTasks.vala"
							if (_tmp12_) {
#line 1586 "CompletedTasks.c"
								WidgetsTaskRow* _tmp13_;
#line 212 "/run/build/planner/src/Views/CompletedTasks.vala"
								_tmp13_ = row;
#line 212 "/run/build/planner/src/Views/CompletedTasks.vala"
								widgets_task_row_hide_content (_tmp13_);
#line 1592 "CompletedTasks.c"
							}
#line 208 "/run/build/planner/src/Views/CompletedTasks.vala"
							_g_object_unref0 (row);
#line 208 "/run/build/planner/src/Views/CompletedTasks.vala"
							_g_object_unref0 (element);
#line 1598 "CompletedTasks.c"
						}
					}
#line 208 "/run/build/planner/src/Views/CompletedTasks.vala"
					(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 1603 "CompletedTasks.c"
				}
			}
		} else {
			GdkEventType _tmp14_;
#line 217 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp14_ = event->type;
#line 217 "/run/build/planner/src/Views/CompletedTasks.vala"
			if (_tmp14_ == GDK_3BUTTON_PRESS) {
#line 1612 "CompletedTasks.c"
				GtkListBox* _tmp15_;
				GList* _tmp16_;
#line 218 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp15_ = self->priv->tasks_list;
#line 218 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp16_ = gtk_container_get_children ((GtkContainer*) _tmp15_);
#line 1619 "CompletedTasks.c"
				{
					GList* element_collection = NULL;
					GList* element_it = NULL;
#line 218 "/run/build/planner/src/Views/CompletedTasks.vala"
					element_collection = _tmp16_;
#line 218 "/run/build/planner/src/Views/CompletedTasks.vala"
					for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 1627 "CompletedTasks.c"
						GtkWidget* _tmp17_;
						GtkWidget* element = NULL;
#line 218 "/run/build/planner/src/Views/CompletedTasks.vala"
						_tmp17_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 218 "/run/build/planner/src/Views/CompletedTasks.vala"
						element = _tmp17_;
#line 1634 "CompletedTasks.c"
						{
							WidgetsTaskRow* row = NULL;
							GtkWidget* _tmp18_;
							WidgetsTaskRow* _tmp19_;
							WidgetsTaskRow* _tmp20_;
							GtkRevealer* _tmp21_;
							gboolean _tmp22_;
							gboolean _tmp23_;
#line 219 "/run/build/planner/src/Views/CompletedTasks.vala"
							_tmp18_ = element;
#line 219 "/run/build/planner/src/Views/CompletedTasks.vala"
							_tmp19_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp18_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp18_) : NULL);
#line 219 "/run/build/planner/src/Views/CompletedTasks.vala"
							row = _tmp19_;
#line 221 "/run/build/planner/src/Views/CompletedTasks.vala"
							_tmp20_ = row;
#line 221 "/run/build/planner/src/Views/CompletedTasks.vala"
							_tmp21_ = _tmp20_->bottom_box_revealer;
#line 221 "/run/build/planner/src/Views/CompletedTasks.vala"
							_tmp22_ = gtk_revealer_get_reveal_child (_tmp21_);
#line 221 "/run/build/planner/src/Views/CompletedTasks.vala"
							_tmp23_ = _tmp22_;
#line 221 "/run/build/planner/src/Views/CompletedTasks.vala"
							if (_tmp23_) {
#line 1659 "CompletedTasks.c"
								WidgetsTaskRow* _tmp24_;
#line 222 "/run/build/planner/src/Views/CompletedTasks.vala"
								_tmp24_ = row;
#line 222 "/run/build/planner/src/Views/CompletedTasks.vala"
								widgets_task_row_hide_content (_tmp24_);
#line 1665 "CompletedTasks.c"
							}
#line 218 "/run/build/planner/src/Views/CompletedTasks.vala"
							_g_object_unref0 (row);
#line 218 "/run/build/planner/src/Views/CompletedTasks.vala"
							_g_object_unref0 (element);
#line 1671 "CompletedTasks.c"
						}
					}
#line 218 "/run/build/planner/src/Views/CompletedTasks.vala"
					(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 1676 "CompletedTasks.c"
				}
			}
		}
	}
#line 228 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp25_ = self->priv->tasks_list;
#line 228 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_list_box_unselect_all (_tmp25_);
#line 229 "/run/build/planner/src/Views/CompletedTasks.vala"
	result = FALSE;
#line 229 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 1689 "CompletedTasks.c"
}


static gboolean
__views_completed_tasks___lambda383__gtk_widget_event (GtkWidget* _sender,
                                                       GdkEvent* event,
                                                       gpointer self)
{
	gboolean result;
	result = _views_completed_tasks___lambda383_ ((ViewsCompletedTasks*) self, event);
#line 201 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 1702 "CompletedTasks.c"
}


static void
_views_completed_tasks___lambda384_ (ViewsCompletedTasks* self)
{
	WidgetsPopoversLabelsPopover* _tmp0_;
	WidgetsPopoversLabelsPopover* _tmp1_;
#line 233 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = self->priv->labels_popover;
#line 233 "/run/build/planner/src/Views/CompletedTasks.vala"
	widgets_popovers_labels_popover_update_label_list (_tmp0_);
#line 234 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp1_ = self->priv->labels_popover;
#line 234 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp1_);
#line 1719 "CompletedTasks.c"
}


static void
__views_completed_tasks___lambda384__gtk_button_clicked (GtkButton* _sender,
                                                         gpointer self)
{
#line 232 "/run/build/planner/src/Views/CompletedTasks.vala"
	_views_completed_tasks___lambda384_ ((ViewsCompletedTasks*) self);
#line 1729 "CompletedTasks.c"
}


static gboolean
__lambda386_ (ViewsCompletedTasks* self,
              GtkListBoxRow* row)
{
	gboolean result = FALSE;
	WidgetsTaskRow* item = NULL;
	WidgetsTaskRow* _tmp0_;
	GeeArrayList* labels = NULL;
	GeeArrayList* _tmp1_;
	GeeArrayList* _labels = NULL;
	GeeArrayList* _tmp2_;
	WidgetsTaskRow* _tmp3_;
	ObjectsTask* _tmp4_;
	ObjectsTask* _tmp5_;
	const gchar* _tmp6_;
	gchar** _tmp7_;
	gchar** _tmp8_;
	GtkFlowBox* _tmp12_;
	GList* _tmp13_;
#line 248 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_val_if_fail (row != NULL, FALSE);
#line 249 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) row) : NULL);
#line 249 "/run/build/planner/src/Views/CompletedTasks.vala"
	item = _tmp0_;
#line 250 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp1_ = gee_array_list_new (G_TYPE_INT, NULL, NULL, NULL, NULL, NULL);
#line 250 "/run/build/planner/src/Views/CompletedTasks.vala"
	labels = _tmp1_;
#line 251 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp2_ = gee_array_list_new (G_TYPE_INT, NULL, NULL, NULL, NULL, NULL);
#line 251 "/run/build/planner/src/Views/CompletedTasks.vala"
	_labels = _tmp2_;
#line 253 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp3_ = item;
#line 253 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp4_ = widgets_task_row_get_task (_tmp3_);
#line 253 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp5_ = _tmp4_;
#line 253 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp6_ = _tmp5_->labels;
#line 253 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp8_ = _tmp7_ = g_strsplit (_tmp6_, ";", 0);
#line 1776 "CompletedTasks.c"
	{
		gchar** label_id_collection = NULL;
		gint label_id_collection_length1 = 0;
		gint _label_id_collection_size_ = 0;
		gint label_id_it = 0;
#line 253 "/run/build/planner/src/Views/CompletedTasks.vala"
		label_id_collection = _tmp8_;
#line 253 "/run/build/planner/src/Views/CompletedTasks.vala"
		label_id_collection_length1 = _vala_array_length (_tmp7_);
#line 253 "/run/build/planner/src/Views/CompletedTasks.vala"
		for (label_id_it = 0; label_id_it < _vala_array_length (_tmp7_); label_id_it = label_id_it + 1) {
#line 1788 "CompletedTasks.c"
			gchar* _tmp9_;
			gchar* label_id = NULL;
#line 253 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp9_ = g_strdup (label_id_collection[label_id_it]);
#line 253 "/run/build/planner/src/Views/CompletedTasks.vala"
			label_id = _tmp9_;
#line 1795 "CompletedTasks.c"
			{
				GeeArrayList* _tmp10_;
				const gchar* _tmp11_;
#line 254 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp10_ = labels;
#line 254 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp11_ = label_id;
#line 254 "/run/build/planner/src/Views/CompletedTasks.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp10_, (gpointer) ((gintptr) atoi (_tmp11_)));
#line 253 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_free0 (label_id);
#line 1807 "CompletedTasks.c"
			}
		}
#line 253 "/run/build/planner/src/Views/CompletedTasks.vala"
		label_id_collection = (_vala_array_free (label_id_collection, label_id_collection_length1, (GDestroyNotify) g_free), NULL);
#line 1812 "CompletedTasks.c"
	}
#line 257 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp12_ = self->priv->labels_flowbox;
#line 257 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp13_ = gtk_container_get_children ((GtkContainer*) _tmp12_);
#line 1818 "CompletedTasks.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 257 "/run/build/planner/src/Views/CompletedTasks.vala"
		element_collection = _tmp13_;
#line 257 "/run/build/planner/src/Views/CompletedTasks.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 1826 "CompletedTasks.c"
			GtkWidget* _tmp14_;
			GtkWidget* element = NULL;
#line 257 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp14_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 257 "/run/build/planner/src/Views/CompletedTasks.vala"
			element = _tmp14_;
#line 1833 "CompletedTasks.c"
			{
				WidgetsLabelChild* child = NULL;
				GtkWidget* _tmp15_;
				WidgetsLabelChild* _tmp16_;
				GeeArrayList* _tmp17_;
				WidgetsLabelChild* _tmp18_;
				ObjectsLabel* _tmp19_;
				ObjectsLabel* _tmp20_;
				gint _tmp21_;
#line 258 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp15_ = element;
#line 258 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp16_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp15_, WIDGETS_TYPE_LABEL_CHILD) ? ((WidgetsLabelChild*) _tmp15_) : NULL);
#line 258 "/run/build/planner/src/Views/CompletedTasks.vala"
				child = _tmp16_;
#line 259 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp17_ = _labels;
#line 259 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp18_ = child;
#line 259 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp19_ = widgets_label_child_get_label (_tmp18_);
#line 259 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp20_ = _tmp19_;
#line 259 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp21_ = _tmp20_->id;
#line 259 "/run/build/planner/src/Views/CompletedTasks.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp17_, (gpointer) ((gintptr) _tmp21_));
#line 257 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (child);
#line 257 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (element);
#line 1865 "CompletedTasks.c"
			}
		}
#line 257 "/run/build/planner/src/Views/CompletedTasks.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 1870 "CompletedTasks.c"
	}
	{
		GeeArrayList* _x_list = NULL;
		GeeArrayList* _tmp22_;
		GeeArrayList* _tmp23_;
		gint _x_size = 0;
		GeeArrayList* _tmp24_;
		gint _tmp25_;
		gint _tmp26_;
		gint _x_index = 0;
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp22_ = labels;
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp23_ = _g_object_ref0 (_tmp22_);
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
		_x_list = _tmp23_;
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp24_ = _x_list;
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp25_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp24_);
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp26_ = _tmp25_;
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
		_x_size = _tmp26_;
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
		_x_index = -1;
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
		while (TRUE) {
#line 1899 "CompletedTasks.c"
			gint _tmp27_;
			gint _tmp28_;
			gint _tmp29_;
			gint x = 0;
			GeeArrayList* _tmp30_;
			gint _tmp31_;
			gpointer _tmp32_;
			GeeArrayList* _tmp33_;
			gint _tmp34_;
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp27_ = _x_index;
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
			_x_index = _tmp27_ + 1;
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp28_ = _x_index;
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp29_ = _x_size;
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
			if (!(_tmp28_ < _tmp29_)) {
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
				break;
#line 1921 "CompletedTasks.c"
			}
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp30_ = _x_list;
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp31_ = _x_index;
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp32_ = gee_abstract_list_get ((GeeAbstractList*) _tmp30_, _tmp31_);
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
			x = (gint) ((gintptr) _tmp32_);
#line 264 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp33_ = _labels;
#line 264 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp34_ = x;
#line 264 "/run/build/planner/src/Views/CompletedTasks.vala"
			if (gee_abstract_collection_contains ((GeeAbstractCollection*) _tmp33_, (gpointer) ((gintptr) _tmp34_))) {
#line 265 "/run/build/planner/src/Views/CompletedTasks.vala"
				result = TRUE;
#line 265 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (_x_list);
#line 265 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (_labels);
#line 265 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (labels);
#line 265 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (item);
#line 265 "/run/build/planner/src/Views/CompletedTasks.vala"
				return result;
#line 1949 "CompletedTasks.c"
			}
		}
#line 263 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (_x_list);
#line 1954 "CompletedTasks.c"
	}
#line 269 "/run/build/planner/src/Views/CompletedTasks.vala"
	result = FALSE;
#line 269 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (_labels);
#line 269 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (labels);
#line 269 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (item);
#line 269 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 1966 "CompletedTasks.c"
}


static gboolean
___lambda386__gtk_list_box_filter_func (GtkListBoxRow* row,
                                        gpointer self)
{
	gboolean result;
	result = __lambda386_ ((ViewsCompletedTasks*) self, row);
#line 248 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 1978 "CompletedTasks.c"
}


static void
_views_completed_tasks___lambda385_ (Block38Data* _data38_,
                                     ObjectsLabel* label)
{
	ViewsCompletedTasks* self;
	Utils* _tmp0_;
	GtkFlowBox* _tmp1_;
	gint _tmp2_;
	GtkRevealer* _tmp6_;
	Utils* _tmp7_;
	GtkFlowBox* _tmp8_;
	GtkFlowBox* _tmp9_;
	WidgetsPopoversLabelsPopover* _tmp10_;
	GtkListBox* _tmp11_;
#line 237 "/run/build/planner/src/Views/CompletedTasks.vala"
	self = _data38_->self;
#line 237 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_if_fail (label != NULL);
#line 238 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = application_utils;
#line 238 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp1_ = self->priv->labels_flowbox;
#line 238 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp2_ = label->id;
#line 238 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (utils_is_label_repeted (_tmp0_, _tmp1_, _tmp2_) == FALSE) {
#line 2008 "CompletedTasks.c"
		WidgetsLabelChild* child = NULL;
		WidgetsLabelChild* _tmp3_;
		GtkFlowBox* _tmp4_;
		WidgetsLabelChild* _tmp5_;
#line 239 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp3_ = widgets_label_child_new (label);
#line 239 "/run/build/planner/src/Views/CompletedTasks.vala"
		g_object_ref_sink (_tmp3_);
#line 239 "/run/build/planner/src/Views/CompletedTasks.vala"
		child = _tmp3_;
#line 240 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp4_ = self->priv->labels_flowbox;
#line 240 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp5_ = child;
#line 240 "/run/build/planner/src/Views/CompletedTasks.vala"
		gtk_container_add ((GtkContainer*) _tmp4_, (GtkWidget*) _tmp5_);
#line 238 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (child);
#line 2027 "CompletedTasks.c"
	}
#line 243 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp6_ = _data38_->labels_flowbox_revealer;
#line 243 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp7_ = application_utils;
#line 243 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp8_ = self->priv->labels_flowbox;
#line 243 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_revealer_set_reveal_child (_tmp6_, !utils_is_empty (_tmp7_, _tmp8_));
#line 244 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp9_ = self->priv->labels_flowbox;
#line 244 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp9_);
#line 245 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp10_ = self->priv->labels_popover;
#line 245 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_popover_popdown ((GtkPopover*) _tmp10_);
#line 248 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp11_ = self->priv->tasks_list;
#line 248 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_list_box_set_filter_func (_tmp11_, ___lambda386__gtk_list_box_filter_func, g_object_ref (self), g_object_unref);
#line 2049 "CompletedTasks.c"
}


static void
__views_completed_tasks___lambda385__widgets_popovers_labels_popover_on_selected_label (WidgetsPopoversLabelsPopover* _sender,
                                                                                        ObjectsLabel* label,
                                                                                        gpointer self)
{
#line 237 "/run/build/planner/src/Views/CompletedTasks.vala"
	_views_completed_tasks___lambda385_ (self, label);
#line 2060 "CompletedTasks.c"
}


static gboolean
___lambda388_ (ViewsCompletedTasks* self,
               GtkListBoxRow* row)
{
	gboolean result = FALSE;
#line 276 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_val_if_fail (row != NULL, FALSE);
#line 277 "/run/build/planner/src/Views/CompletedTasks.vala"
	result = TRUE;
#line 277 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 2075 "CompletedTasks.c"
}


static gboolean
____lambda388__gtk_list_box_filter_func (GtkListBoxRow* row,
                                         gpointer self)
{
	gboolean result;
	result = ___lambda388_ ((ViewsCompletedTasks*) self, row);
#line 276 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 2087 "CompletedTasks.c"
}


static gboolean
___lambda389_ (ViewsCompletedTasks* self,
               GtkListBoxRow* row)
{
	gboolean result = FALSE;
	WidgetsTaskRow* item = NULL;
	WidgetsTaskRow* _tmp0_;
	GeeArrayList* labels = NULL;
	GeeArrayList* _tmp1_;
	GeeArrayList* _labels = NULL;
	GeeArrayList* _tmp2_;
	WidgetsTaskRow* _tmp3_;
	ObjectsTask* _tmp4_;
	ObjectsTask* _tmp5_;
	const gchar* _tmp6_;
	gchar** _tmp7_;
	gchar** _tmp8_;
	GtkFlowBox* _tmp12_;
	GList* _tmp13_;
#line 281 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_val_if_fail (row != NULL, FALSE);
#line 282 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) row) : NULL);
#line 282 "/run/build/planner/src/Views/CompletedTasks.vala"
	item = _tmp0_;
#line 283 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp1_ = gee_array_list_new (G_TYPE_INT, NULL, NULL, NULL, NULL, NULL);
#line 283 "/run/build/planner/src/Views/CompletedTasks.vala"
	labels = _tmp1_;
#line 284 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp2_ = gee_array_list_new (G_TYPE_INT, NULL, NULL, NULL, NULL, NULL);
#line 284 "/run/build/planner/src/Views/CompletedTasks.vala"
	_labels = _tmp2_;
#line 286 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp3_ = item;
#line 286 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp4_ = widgets_task_row_get_task (_tmp3_);
#line 286 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp5_ = _tmp4_;
#line 286 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp6_ = _tmp5_->labels;
#line 286 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp8_ = _tmp7_ = g_strsplit (_tmp6_, ";", 0);
#line 2134 "CompletedTasks.c"
	{
		gchar** label_id_collection = NULL;
		gint label_id_collection_length1 = 0;
		gint _label_id_collection_size_ = 0;
		gint label_id_it = 0;
#line 286 "/run/build/planner/src/Views/CompletedTasks.vala"
		label_id_collection = _tmp8_;
#line 286 "/run/build/planner/src/Views/CompletedTasks.vala"
		label_id_collection_length1 = _vala_array_length (_tmp7_);
#line 286 "/run/build/planner/src/Views/CompletedTasks.vala"
		for (label_id_it = 0; label_id_it < _vala_array_length (_tmp7_); label_id_it = label_id_it + 1) {
#line 2146 "CompletedTasks.c"
			gchar* _tmp9_;
			gchar* label_id = NULL;
#line 286 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp9_ = g_strdup (label_id_collection[label_id_it]);
#line 286 "/run/build/planner/src/Views/CompletedTasks.vala"
			label_id = _tmp9_;
#line 2153 "CompletedTasks.c"
			{
				GeeArrayList* _tmp10_;
				const gchar* _tmp11_;
#line 287 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp10_ = labels;
#line 287 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp11_ = label_id;
#line 287 "/run/build/planner/src/Views/CompletedTasks.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp10_, (gpointer) ((gintptr) atoi (_tmp11_)));
#line 286 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_free0 (label_id);
#line 2165 "CompletedTasks.c"
			}
		}
#line 286 "/run/build/planner/src/Views/CompletedTasks.vala"
		label_id_collection = (_vala_array_free (label_id_collection, label_id_collection_length1, (GDestroyNotify) g_free), NULL);
#line 2170 "CompletedTasks.c"
	}
#line 290 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp12_ = self->priv->labels_flowbox;
#line 290 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp13_ = gtk_container_get_children ((GtkContainer*) _tmp12_);
#line 2176 "CompletedTasks.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 290 "/run/build/planner/src/Views/CompletedTasks.vala"
		element_collection = _tmp13_;
#line 290 "/run/build/planner/src/Views/CompletedTasks.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 2184 "CompletedTasks.c"
			GtkWidget* _tmp14_;
			GtkWidget* element = NULL;
#line 290 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp14_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 290 "/run/build/planner/src/Views/CompletedTasks.vala"
			element = _tmp14_;
#line 2191 "CompletedTasks.c"
			{
				WidgetsLabelChild* child = NULL;
				GtkWidget* _tmp15_;
				WidgetsLabelChild* _tmp16_;
				GeeArrayList* _tmp17_;
				WidgetsLabelChild* _tmp18_;
				ObjectsLabel* _tmp19_;
				ObjectsLabel* _tmp20_;
				gint _tmp21_;
#line 291 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp15_ = element;
#line 291 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp16_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp15_, WIDGETS_TYPE_LABEL_CHILD) ? ((WidgetsLabelChild*) _tmp15_) : NULL);
#line 291 "/run/build/planner/src/Views/CompletedTasks.vala"
				child = _tmp16_;
#line 292 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp17_ = _labels;
#line 292 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp18_ = child;
#line 292 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp19_ = widgets_label_child_get_label (_tmp18_);
#line 292 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp20_ = _tmp19_;
#line 292 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp21_ = _tmp20_->id;
#line 292 "/run/build/planner/src/Views/CompletedTasks.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp17_, (gpointer) ((gintptr) _tmp21_));
#line 290 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (child);
#line 290 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (element);
#line 2223 "CompletedTasks.c"
			}
		}
#line 290 "/run/build/planner/src/Views/CompletedTasks.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 2228 "CompletedTasks.c"
	}
	{
		GeeArrayList* _x_list = NULL;
		GeeArrayList* _tmp22_;
		GeeArrayList* _tmp23_;
		gint _x_size = 0;
		GeeArrayList* _tmp24_;
		gint _tmp25_;
		gint _tmp26_;
		gint _x_index = 0;
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp22_ = labels;
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp23_ = _g_object_ref0 (_tmp22_);
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
		_x_list = _tmp23_;
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp24_ = _x_list;
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp25_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp24_);
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp26_ = _tmp25_;
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
		_x_size = _tmp26_;
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
		_x_index = -1;
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
		while (TRUE) {
#line 2257 "CompletedTasks.c"
			gint _tmp27_;
			gint _tmp28_;
			gint _tmp29_;
			gint x = 0;
			GeeArrayList* _tmp30_;
			gint _tmp31_;
			gpointer _tmp32_;
			GeeArrayList* _tmp33_;
			gint _tmp34_;
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp27_ = _x_index;
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
			_x_index = _tmp27_ + 1;
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp28_ = _x_index;
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp29_ = _x_size;
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
			if (!(_tmp28_ < _tmp29_)) {
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
				break;
#line 2279 "CompletedTasks.c"
			}
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp30_ = _x_list;
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp31_ = _x_index;
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp32_ = gee_abstract_list_get ((GeeAbstractList*) _tmp30_, _tmp31_);
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
			x = (gint) ((gintptr) _tmp32_);
#line 297 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp33_ = _labels;
#line 297 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp34_ = x;
#line 297 "/run/build/planner/src/Views/CompletedTasks.vala"
			if (gee_abstract_collection_contains ((GeeAbstractCollection*) _tmp33_, (gpointer) ((gintptr) _tmp34_))) {
#line 298 "/run/build/planner/src/Views/CompletedTasks.vala"
				result = TRUE;
#line 298 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (_x_list);
#line 298 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (_labels);
#line 298 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (labels);
#line 298 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (item);
#line 298 "/run/build/planner/src/Views/CompletedTasks.vala"
				return result;
#line 2307 "CompletedTasks.c"
			}
		}
#line 296 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (_x_list);
#line 2312 "CompletedTasks.c"
	}
#line 302 "/run/build/planner/src/Views/CompletedTasks.vala"
	result = FALSE;
#line 302 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (_labels);
#line 302 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (labels);
#line 302 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (item);
#line 302 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 2324 "CompletedTasks.c"
}


static gboolean
____lambda389__gtk_list_box_filter_func (GtkListBoxRow* row,
                                         gpointer self)
{
	gboolean result;
	result = ___lambda389_ ((ViewsCompletedTasks*) self, row);
#line 281 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 2336 "CompletedTasks.c"
}


static void
_views_completed_tasks___lambda387_ (Block38Data* _data38_,
                                     GtkWidget* widget)
{
	ViewsCompletedTasks* self;
	Utils* _tmp0_;
	GtkFlowBox* _tmp1_;
#line 273 "/run/build/planner/src/Views/CompletedTasks.vala"
	self = _data38_->self;
#line 273 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_if_fail (widget != NULL);
#line 274 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = application_utils;
#line 274 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp1_ = self->priv->labels_flowbox;
#line 274 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (utils_is_empty (_tmp0_, _tmp1_)) {
#line 2357 "CompletedTasks.c"
		GtkRevealer* _tmp2_;
		GtkListBox* _tmp3_;
#line 275 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp2_ = _data38_->labels_flowbox_revealer;
#line 275 "/run/build/planner/src/Views/CompletedTasks.vala"
		gtk_revealer_set_reveal_child (_tmp2_, FALSE);
#line 276 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp3_ = self->priv->tasks_list;
#line 276 "/run/build/planner/src/Views/CompletedTasks.vala"
		gtk_list_box_set_filter_func (_tmp3_, ____lambda388__gtk_list_box_filter_func, g_object_ref (self), g_object_unref);
#line 2368 "CompletedTasks.c"
	} else {
		GtkListBox* _tmp4_;
#line 281 "/run/build/planner/src/Views/CompletedTasks.vala"
		_tmp4_ = self->priv->tasks_list;
#line 281 "/run/build/planner/src/Views/CompletedTasks.vala"
		gtk_list_box_set_filter_func (_tmp4_, ____lambda389__gtk_list_box_filter_func, g_object_ref (self), g_object_unref);
#line 2375 "CompletedTasks.c"
	}
}


static void
__views_completed_tasks___lambda387__gtk_container_remove (GtkContainer* _sender,
                                                           GtkWidget* widget,
                                                           gpointer self)
{
#line 273 "/run/build/planner/src/Views/CompletedTasks.vala"
	_views_completed_tasks___lambda387_ (self, widget);
#line 2387 "CompletedTasks.c"
}


static void
_views_completed_tasks___lambda390_ (ViewsCompletedTasks* self,
                                     GtkWidget* widget)
{
#line 307 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_if_fail (widget != NULL);
#line 308 "/run/build/planner/src/Views/CompletedTasks.vala"
	views_completed_tasks_check_visible_alertview (self);
#line 2399 "CompletedTasks.c"
}


static void
__views_completed_tasks___lambda390__gtk_container_remove (GtkContainer* _sender,
                                                           GtkWidget* widget,
                                                           gpointer self)
{
#line 307 "/run/build/planner/src/Views/CompletedTasks.vala"
	_views_completed_tasks___lambda390_ ((ViewsCompletedTasks*) self, widget);
#line 2410 "CompletedTasks.c"
}


static Block39Data*
block39_data_ref (Block39Data* _data39_)
{
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_atomic_int_inc (&_data39_->_ref_count_);
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
	return _data39_;
#line 2421 "CompletedTasks.c"
}


static void
block39_data_unref (void * _userdata_)
{
	Block39Data* _data39_;
	_data39_ = (Block39Data*) _userdata_;
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (g_atomic_int_dec_and_test (&_data39_->_ref_count_)) {
#line 2432 "CompletedTasks.c"
		ViewsCompletedTasks* self;
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
		self = _data39_->self;
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (_data39_->row);
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (self);
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
		g_slice_free (Block39Data, _data39_);
#line 2442 "CompletedTasks.c"
	}
}


static gboolean
_______lambda392_ (Block39Data* _data39_)
{
	ViewsCompletedTasks* self;
	gboolean result = FALSE;
	WidgetsTaskRow* _tmp0_;
#line 322 "/run/build/planner/src/Views/CompletedTasks.vala"
	self = _data39_->self;
#line 323 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = _data39_->row;
#line 323 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_destroy ((GtkWidget*) _tmp0_);
#line 324 "/run/build/planner/src/Views/CompletedTasks.vala"
	result = G_SOURCE_REMOVE;
#line 324 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 2463 "CompletedTasks.c"
}


static gboolean
________lambda392__gsource_func (gpointer self)
{
	gboolean result;
	result = _______lambda392_ (self);
#line 322 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 2474 "CompletedTasks.c"
}


static void
_views_completed_tasks___lambda391_ (ViewsCompletedTasks* self,
                                     ObjectsTask* task)
{
	Utils* _tmp0_;
	GtkListBox* _tmp1_;
	gint _tmp2_;
	GtkListBox* _tmp3_;
	GList* _tmp4_;
#line 311 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_if_fail (task != NULL);
#line 312 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = application_utils;
#line 312 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp1_ = self->priv->tasks_list;
#line 312 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp2_ = task->id;
#line 312 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (utils_is_task_repeted (_tmp0_, _tmp1_, _tmp2_) == FALSE) {
#line 313 "/run/build/planner/src/Views/CompletedTasks.vala"
		views_completed_tasks_add_new_task (self, task);
#line 2499 "CompletedTasks.c"
	}
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp3_ = self->priv->tasks_list;
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp4_ = gtk_container_get_children ((GtkContainer*) _tmp3_);
#line 2505 "CompletedTasks.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
		element_collection = _tmp4_;
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 2513 "CompletedTasks.c"
			GtkWidget* _tmp5_;
			GtkWidget* element = NULL;
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp5_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
			element = _tmp5_;
#line 2520 "CompletedTasks.c"
			{
				Block39Data* _data39_;
				GtkWidget* _tmp6_;
				WidgetsTaskRow* _tmp7_;
				WidgetsTaskRow* _tmp8_;
				ObjectsTask* _tmp9_;
				ObjectsTask* _tmp10_;
				gint _tmp11_;
				gint _tmp12_;
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
				_data39_ = g_slice_new0 (Block39Data);
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
				_data39_->_ref_count_ = 1;
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
				_data39_->self = g_object_ref (self);
#line 317 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp6_ = element;
#line 317 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp7_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp6_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp6_) : NULL);
#line 317 "/run/build/planner/src/Views/CompletedTasks.vala"
				_data39_->row = _tmp7_;
#line 319 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp8_ = _data39_->row;
#line 319 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp9_ = widgets_task_row_get_task (_tmp8_);
#line 319 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp10_ = _tmp9_;
#line 319 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp11_ = _tmp10_->id;
#line 319 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp12_ = task->id;
#line 319 "/run/build/planner/src/Views/CompletedTasks.vala"
				if (_tmp11_ == _tmp12_) {
#line 2554 "CompletedTasks.c"
					WidgetsTaskRow* _tmp13_;
					ObjectsTask* _tmp14_;
					ObjectsTask* _tmp15_;
					gint _tmp16_;
#line 320 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp13_ = _data39_->row;
#line 320 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp14_ = widgets_task_row_get_task (_tmp13_);
#line 320 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp15_ = _tmp14_;
#line 320 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp16_ = _tmp15_->checked;
#line 320 "/run/build/planner/src/Views/CompletedTasks.vala"
					if (_tmp16_ == 0) {
#line 2569 "CompletedTasks.c"
						WidgetsTaskRow* _tmp17_;
#line 321 "/run/build/planner/src/Views/CompletedTasks.vala"
						_tmp17_ = _data39_->row;
#line 321 "/run/build/planner/src/Views/CompletedTasks.vala"
						if (G_TYPE_CHECK_INSTANCE_TYPE (_tmp17_, gtk_widget_get_type ())) {
#line 322 "/run/build/planner/src/Views/CompletedTasks.vala"
							g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 250, ________lambda392__gsource_func, block39_data_ref (_data39_), block39_data_unref);
#line 2577 "CompletedTasks.c"
						}
					} else {
						WidgetsTaskRow* _tmp18_;
#line 328 "/run/build/planner/src/Views/CompletedTasks.vala"
						_tmp18_ = _data39_->row;
#line 328 "/run/build/planner/src/Views/CompletedTasks.vala"
						widgets_task_row_set_update_task (_tmp18_, task);
#line 2585 "CompletedTasks.c"
					}
				}
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (element);
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
				block39_data_unref (_data39_);
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
				_data39_ = NULL;
#line 2594 "CompletedTasks.c"
			}
		}
#line 316 "/run/build/planner/src/Views/CompletedTasks.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 2599 "CompletedTasks.c"
	}
}


static void
__views_completed_tasks___lambda391__services_database_update_task_signal (ServicesDatabase* _sender,
                                                                           ObjectsTask* task,
                                                                           gpointer self)
{
#line 311 "/run/build/planner/src/Views/CompletedTasks.vala"
	_views_completed_tasks___lambda391_ ((ViewsCompletedTasks*) self, task);
#line 2611 "CompletedTasks.c"
}


static void
_views_completed_tasks___lambda393_ (ViewsCompletedTasks* self,
                                     ObjectsTask* task)
{
#line 334 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_if_fail (task != NULL);
#line 335 "/run/build/planner/src/Views/CompletedTasks.vala"
	views_completed_tasks_add_new_task (self, task);
#line 2623 "CompletedTasks.c"
}


static void
__views_completed_tasks___lambda393__services_database_add_task_signal (ServicesDatabase* _sender,
                                                                        ObjectsTask* task,
                                                                        gpointer self)
{
#line 334 "/run/build/planner/src/Views/CompletedTasks.vala"
	_views_completed_tasks___lambda393_ ((ViewsCompletedTasks*) self, task);
#line 2634 "CompletedTasks.c"
}


static Block40Data*
block40_data_ref (Block40Data* _data40_)
{
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_atomic_int_inc (&_data40_->_ref_count_);
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
	return _data40_;
#line 2645 "CompletedTasks.c"
}


static void
block40_data_unref (void * _userdata_)
{
	Block40Data* _data40_;
	_data40_ = (Block40Data*) _userdata_;
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (g_atomic_int_dec_and_test (&_data40_->_ref_count_)) {
#line 2656 "CompletedTasks.c"
		ViewsCompletedTasks* self;
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
		self = _data40_->self;
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (_data40_->row);
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
		_g_object_unref0 (self);
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
		g_slice_free (Block40Data, _data40_);
#line 2666 "CompletedTasks.c"
	}
}


static gboolean
______lambda395_ (Block40Data* _data40_)
{
	ViewsCompletedTasks* self;
	gboolean result = FALSE;
	WidgetsTaskRow* _tmp0_;
#line 344 "/run/build/planner/src/Views/CompletedTasks.vala"
	self = _data40_->self;
#line 345 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = _data40_->row;
#line 345 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_destroy ((GtkWidget*) _tmp0_);
#line 346 "/run/build/planner/src/Views/CompletedTasks.vala"
	result = G_SOURCE_REMOVE;
#line 346 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 2687 "CompletedTasks.c"
}


static gboolean
_______lambda395__gsource_func (gpointer self)
{
	gboolean result;
	result = ______lambda395_ (self);
#line 344 "/run/build/planner/src/Views/CompletedTasks.vala"
	return result;
#line 2698 "CompletedTasks.c"
}


static void
_views_completed_tasks___lambda394_ (ViewsCompletedTasks* self,
                                     ObjectsTask* task)
{
	GtkListBox* _tmp0_;
	GList* _tmp1_;
#line 338 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_return_if_fail (task != NULL);
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = self->priv->tasks_list;
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 2714 "CompletedTasks.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
		element_collection = _tmp1_;
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 2722 "CompletedTasks.c"
			GtkWidget* _tmp2_;
			GtkWidget* element = NULL;
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
			_tmp2_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
			element = _tmp2_;
#line 2729 "CompletedTasks.c"
			{
				Block40Data* _data40_;
				GtkWidget* _tmp3_;
				WidgetsTaskRow* _tmp4_;
				WidgetsTaskRow* _tmp5_;
				ObjectsTask* _tmp6_;
				ObjectsTask* _tmp7_;
				gint _tmp8_;
				gint _tmp9_;
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
				_data40_ = g_slice_new0 (Block40Data);
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
				_data40_->_ref_count_ = 1;
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
				_data40_->self = g_object_ref (self);
#line 340 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp3_ = element;
#line 340 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp3_) : NULL);
#line 340 "/run/build/planner/src/Views/CompletedTasks.vala"
				_data40_->row = _tmp4_;
#line 342 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp5_ = _data40_->row;
#line 342 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp6_ = widgets_task_row_get_task (_tmp5_);
#line 342 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp7_ = _tmp6_;
#line 342 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp8_ = _tmp7_->id;
#line 342 "/run/build/planner/src/Views/CompletedTasks.vala"
				_tmp9_ = task->id;
#line 342 "/run/build/planner/src/Views/CompletedTasks.vala"
				if (_tmp8_ == _tmp9_) {
#line 2763 "CompletedTasks.c"
					WidgetsTaskRow* _tmp10_;
#line 343 "/run/build/planner/src/Views/CompletedTasks.vala"
					_tmp10_ = _data40_->row;
#line 343 "/run/build/planner/src/Views/CompletedTasks.vala"
					if (G_TYPE_CHECK_INSTANCE_TYPE (_tmp10_, gtk_widget_get_type ())) {
#line 344 "/run/build/planner/src/Views/CompletedTasks.vala"
						g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 250, _______lambda395__gsource_func, block40_data_ref (_data40_), block40_data_unref);
#line 2771 "CompletedTasks.c"
					}
				}
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
				_g_object_unref0 (element);
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
				block40_data_unref (_data40_);
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
				_data40_ = NULL;
#line 2780 "CompletedTasks.c"
			}
		}
#line 339 "/run/build/planner/src/Views/CompletedTasks.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 2785 "CompletedTasks.c"
	}
}


static void
__views_completed_tasks___lambda394__services_database_on_signal_remove_task (ServicesDatabase* _sender,
                                                                              ObjectsTask* task,
                                                                              gpointer self)
{
#line 338 "/run/build/planner/src/Views/CompletedTasks.vala"
	_views_completed_tasks___lambda394_ ((ViewsCompletedTasks*) self, task);
#line 2797 "CompletedTasks.c"
}


static GObject *
views_completed_tasks_constructor (GType type,
                                   guint n_construct_properties,
                                   GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsCompletedTasks * self;
	Block38Data* _data38_;
	GtkStyleContext* _tmp0_;
	WidgetsAlertView* _tmp1_;
	GtkImage* completed_tasks_icon = NULL;
	GtkImage* _tmp2_;
	GtkLabel* completed_tasks_label = NULL;
	gchar* _tmp3_;
	gchar* _tmp4_;
	GtkLabel* _tmp5_;
	GtkLabel* _tmp6_;
	GtkLabel* _tmp7_;
	GtkStyleContext* _tmp8_;
	GtkLabel* _tmp9_;
	GtkToggleButton* _tmp10_;
	GtkToggleButton* _tmp11_;
	GtkToggleButton* _tmp12_;
	GtkToggleButton* _tmp13_;
	GtkStyleContext* _tmp14_;
	GtkToggleButton* _tmp15_;
	GtkImage* _tmp16_;
	GtkToggleButton* _tmp17_;
	GtkImage* _tmp18_;
	GtkToggleButton* _tmp19_;
	GtkButton* labels_button = NULL;
	GtkButton* _tmp20_;
	GtkButton* _tmp21_;
	GtkStyleContext* _tmp22_;
	GtkButton* _tmp23_;
	GtkButton* _tmp24_;
	GtkButton* _tmp25_;
	GtkButton* _tmp26_;
	WidgetsPopoversLabelsPopover* _tmp27_;
	WidgetsPopoversLabelsPopover* _tmp28_;
	GtkButton* share_button = NULL;
	GtkButton* _tmp29_;
	GtkButton* _tmp30_;
	GtkStyleContext* _tmp31_;
	GtkButton* _tmp32_;
	GtkButton* _tmp33_;
	GtkButton* _tmp34_;
	GtkButton* _tmp35_;
	GtkGrid* action_grid = NULL;
	GtkGrid* _tmp36_;
	GtkGrid* _tmp37_;
	GtkGrid* _tmp38_;
	GtkGrid* _tmp39_;
	GtkButton* _tmp40_;
	GtkGrid* _tmp41_;
	GtkButton* _tmp42_;
	GtkGrid* _tmp43_;
	GtkToggleButton* _tmp44_;
	GtkBox* top_box = NULL;
	GtkBox* _tmp45_;
	GtkBox* _tmp46_;
	GtkBox* _tmp47_;
	GtkBox* _tmp48_;
	GtkBox* _tmp49_;
	GtkImage* _tmp50_;
	GtkBox* _tmp51_;
	GtkLabel* _tmp52_;
	GtkBox* _tmp53_;
	GtkGrid* _tmp54_;
	GtkListBox* _tmp55_;
	GtkListBox* _tmp56_;
	GtkListBox* _tmp57_;
	GtkListBox* _tmp58_;
	GtkFlowBox* _tmp59_;
	GtkFlowBox* _tmp60_;
	GtkFlowBox* _tmp61_;
	GtkFlowBox* _tmp62_;
	GtkFlowBox* _tmp63_;
	GtkRevealer* _tmp64_;
	GtkRevealer* _tmp65_;
	GtkRevealer* _tmp66_;
	GtkRevealer* _tmp67_;
	GtkFlowBox* _tmp68_;
	GtkRevealer* _tmp69_;
	GtkBox* t_box = NULL;
	GtkBox* _tmp70_;
	GtkBox* _tmp71_;
	GtkBox* _tmp72_;
	GtkBox* _tmp73_;
	GtkBox* _tmp74_;
	GtkRevealer* _tmp75_;
	GtkBox* b_box = NULL;
	GtkBox* _tmp76_;
	GtkBox* _tmp77_;
	GtkBox* _tmp78_;
	GtkListBox* _tmp79_;
	GtkStack* _tmp80_;
	GtkStack* _tmp81_;
	GtkStack* _tmp82_;
	GtkStack* _tmp83_;
	GtkStack* _tmp84_;
	GtkStack* _tmp85_;
	GtkStack* _tmp86_;
	GtkBox* _tmp87_;
	GtkStack* _tmp88_;
	WidgetsAlertView* _tmp89_;
	GtkStack* _tmp90_;
	GtkBox* box = NULL;
	GtkBox* _tmp91_;
	GtkBox* _tmp92_;
	GtkBox* _tmp93_;
	GtkBox* _tmp94_;
	GtkBox* _tmp95_;
	GtkStack* _tmp96_;
	GtkScrolledWindow* scrolled = NULL;
	GtkScrolledWindow* _tmp97_;
	GtkScrolledWindow* _tmp98_;
	GtkBox* _tmp99_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp100_;
	GtkBox* _tmp101_;
	GtkBox* _tmp102_;
	GtkScrolledWindow* _tmp103_;
	GtkOverlay* main_overlay = NULL;
	GtkOverlay* _tmp104_;
	GtkOverlay* _tmp105_;
	GtkBox* _tmp106_;
	GtkOverlay* _tmp107_;
	Utils* _tmp108_;
	GtkListBox* _tmp109_;
	GtkListBox* _tmp110_;
	GdkDisplay* display = NULL;
	GdkDisplay* _tmp111_;
	GdkDisplay* _tmp112_;
	GtkClipboard* clipboard = NULL;
	GdkDisplay* _tmp113_;
	GtkClipboard* _tmp114_;
	GtkClipboard* _tmp115_;
	GtkButton* _tmp116_;
	WidgetsPopoversLabelsPopover* _tmp117_;
	GtkFlowBox* _tmp118_;
	GtkListBox* _tmp119_;
	ServicesDatabase* _tmp120_;
	ServicesDatabase* _tmp121_;
	ServicesDatabase* _tmp122_;
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	parent_class = G_OBJECT_CLASS (views_completed_tasks_parent_class);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_COMPLETED_TASKS, ViewsCompletedTasks);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_data38_ = g_slice_new0 (Block38Data);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_data38_->_ref_count_ = 1;
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_data38_->self = g_object_ref (self);
#line 37 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 37 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_style_context_add_class (_tmp0_, GRANITE_STYLE_CLASS_WELCOME);
#line 39 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp1_ = widgets_alert_view_new (_ ("All clear"), _ ("Start to complete tasks to fill this space."), "mail-mailbox-symbolic");
#line 39 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp1_);
#line 39 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (self->priv->alert_view);
#line 39 "/run/build/planner/src/Views/CompletedTasks.vala"
	self->priv->alert_view = _tmp1_;
#line 45 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp2_ = (GtkImage*) gtk_image_new_from_icon_name ("emblem-default", (GtkIconSize) GTK_ICON_SIZE_DND);
#line 45 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp2_);
#line 45 "/run/build/planner/src/Views/CompletedTasks.vala"
	completed_tasks_icon = _tmp2_;
#line 47 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp3_ = g_strdup_printf ("<b>%s</b>", _ ("Completed Tasks"));
#line 47 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp4_ = _tmp3_;
#line 47 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp5_ = (GtkLabel*) gtk_label_new (_tmp4_);
#line 47 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp5_);
#line 47 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp6_ = _tmp5_;
#line 47 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_free0 (_tmp4_);
#line 47 "/run/build/planner/src/Views/CompletedTasks.vala"
	completed_tasks_label = _tmp6_;
#line 48 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp7_ = completed_tasks_label;
#line 48 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp8_ = gtk_widget_get_style_context ((GtkWidget*) _tmp7_);
#line 48 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_style_context_add_class (_tmp8_, GRANITE_STYLE_CLASS_H2_LABEL);
#line 49 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp9_ = completed_tasks_label;
#line 49 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_label_set_use_markup (_tmp9_, TRUE);
#line 51 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp10_ = (GtkToggleButton*) gtk_toggle_button_new ();
#line 51 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp10_);
#line 51 "/run/build/planner/src/Views/CompletedTasks.vala"
	_data38_->show_hide_all_button = _tmp10_;
#line 52 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp11_ = _data38_->show_hide_all_button;
#line 52 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp11_, GTK_ALIGN_CENTER);
#line 53 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp12_ = _data38_->show_hide_all_button;
#line 53 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp12_, GTK_ALIGN_CENTER);
#line 54 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp13_ = _data38_->show_hide_all_button;
#line 54 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp14_ = gtk_widget_get_style_context ((GtkWidget*) _tmp13_);
#line 54 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_style_context_add_class (_tmp14_, "planner-zoom-in-menu");
#line 55 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp15_ = _data38_->show_hide_all_button;
#line 55 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp15_, _ ("Open all tasks"));
#line 57 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp16_ = (GtkImage*) gtk_image_new_from_icon_name ("zoom-in-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 57 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp16_);
#line 57 "/run/build/planner/src/Views/CompletedTasks.vala"
	_data38_->show_hide_image = _tmp16_;
#line 58 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp17_ = _data38_->show_hide_all_button;
#line 58 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp18_ = _data38_->show_hide_image;
#line 58 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_container_add ((GtkContainer*) _tmp17_, (GtkWidget*) _tmp18_);
#line 60 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp19_ = _data38_->show_hide_all_button;
#line 60 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_signal_connect_data (_tmp19_, "toggled", (GCallback) __views_completed_tasks___lambda378__gtk_toggle_button_toggled, block38_data_ref (_data38_), (GClosureNotify) block38_data_unref, 0);
#line 80 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp20_ = (GtkButton*) gtk_button_new_from_icon_name ("planner-label-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 80 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp20_);
#line 80 "/run/build/planner/src/Views/CompletedTasks.vala"
	labels_button = _tmp20_;
#line 81 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp21_ = labels_button;
#line 81 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp22_ = gtk_widget_get_style_context ((GtkWidget*) _tmp21_);
#line 81 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_style_context_add_class (_tmp22_, "planner-label-menu");
#line 82 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp23_ = labels_button;
#line 82 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp23_, _ ("Filter by Label"));
#line 83 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp24_ = labels_button;
#line 83 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp24_, GTK_ALIGN_CENTER);
#line 84 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp25_ = labels_button;
#line 84 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp25_, GTK_ALIGN_CENTER);
#line 86 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp26_ = labels_button;
#line 86 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp27_ = widgets_popovers_labels_popover_new ((GtkWidget*) _tmp26_);
#line 86 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp27_);
#line 86 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (self->priv->labels_popover);
#line 86 "/run/build/planner/src/Views/CompletedTasks.vala"
	self->priv->labels_popover = _tmp27_;
#line 87 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp28_ = self->priv->labels_popover;
#line 87 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_popover_set_position ((GtkPopover*) _tmp28_, GTK_POS_BOTTOM);
#line 89 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp29_ = (GtkButton*) gtk_button_new_from_icon_name ("planner-share-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 89 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp29_);
#line 89 "/run/build/planner/src/Views/CompletedTasks.vala"
	share_button = _tmp29_;
#line 90 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp30_ = share_button;
#line 90 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp31_ = gtk_widget_get_style_context ((GtkWidget*) _tmp30_);
#line 90 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_style_context_add_class (_tmp31_, "planner-share-menu");
#line 91 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp32_ = share_button;
#line 91 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp32_, _ ("Share"));
#line 92 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp33_ = share_button;
#line 92 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp33_, GTK_ALIGN_CENTER);
#line 93 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp34_ = share_button;
#line 93 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp34_, GTK_ALIGN_CENTER);
#line 95 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp35_ = share_button;
#line 95 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_signal_connect_object (_tmp35_, "clicked", (GCallback) __views_completed_tasks___lambda379__gtk_button_clicked, self, 0);
#line 102 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp36_ = (GtkGrid*) gtk_grid_new ();
#line 102 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp36_);
#line 102 "/run/build/planner/src/Views/CompletedTasks.vala"
	action_grid = _tmp36_;
#line 103 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp37_ = action_grid;
#line 103 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_grid_set_column_spacing (_tmp37_, 12);
#line 104 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp38_ = action_grid;
#line 104 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp38_, GTK_ALIGN_CENTER);
#line 105 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp39_ = action_grid;
#line 105 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp40_ = labels_button;
#line 105 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_container_add ((GtkContainer*) _tmp39_, (GtkWidget*) _tmp40_);
#line 106 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp41_ = action_grid;
#line 106 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp42_ = share_button;
#line 106 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_container_add ((GtkContainer*) _tmp41_, (GtkWidget*) _tmp42_);
#line 107 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp43_ = action_grid;
#line 107 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp44_ = _data38_->show_hide_all_button;
#line 107 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_container_add ((GtkContainer*) _tmp43_, (GtkWidget*) _tmp44_);
#line 109 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp45_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 109 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp45_);
#line 109 "/run/build/planner/src/Views/CompletedTasks.vala"
	top_box = _tmp45_;
#line 110 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp46_ = top_box;
#line 110 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp46_, TRUE);
#line 111 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp47_ = top_box;
#line 111 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp47_, 12);
#line 112 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp48_ = top_box;
#line 112 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp48_, 12);
#line 114 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp49_ = top_box;
#line 114 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp50_ = completed_tasks_icon;
#line 114 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_box_pack_start (_tmp49_, (GtkWidget*) _tmp50_, FALSE, FALSE, (guint) 0);
#line 115 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp51_ = top_box;
#line 115 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp52_ = completed_tasks_label;
#line 115 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_box_pack_start (_tmp51_, (GtkWidget*) _tmp52_, FALSE, FALSE, (guint) 12);
#line 116 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp53_ = top_box;
#line 116 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp54_ = action_grid;
#line 116 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_box_pack_end (_tmp53_, (GtkWidget*) _tmp54_, FALSE, FALSE, (guint) 12);
#line 118 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp55_ = (GtkListBox*) gtk_list_box_new ();
#line 118 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp55_);
#line 118 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (self->priv->tasks_list);
#line 118 "/run/build/planner/src/Views/CompletedTasks.vala"
	self->priv->tasks_list = _tmp55_;
#line 119 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp56_ = self->priv->tasks_list;
#line 119 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_list_box_set_activate_on_single_click (_tmp56_, TRUE);
#line 120 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp57_ = self->priv->tasks_list;
#line 120 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_list_box_set_selection_mode (_tmp57_, GTK_SELECTION_SINGLE);
#line 121 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp58_ = self->priv->tasks_list;
#line 121 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp58_, TRUE);
#line 123 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp59_ = (GtkFlowBox*) gtk_flow_box_new ();
#line 123 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp59_);
#line 123 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (self->priv->labels_flowbox);
#line 123 "/run/build/planner/src/Views/CompletedTasks.vala"
	self->priv->labels_flowbox = _tmp59_;
#line 124 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp60_ = self->priv->labels_flowbox;
#line 124 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_flow_box_set_selection_mode (_tmp60_, GTK_SELECTION_NONE);
#line 125 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp61_ = self->priv->labels_flowbox;
#line 125 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp61_, 6);
#line 126 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp62_ = self->priv->labels_flowbox;
#line 126 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_set ((GtkWidget*) _tmp62_, "height-request", 38, NULL);
#line 127 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp63_ = self->priv->labels_flowbox;
#line 127 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_set ((GtkWidget*) _tmp63_, "expand", FALSE, NULL);
#line 129 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp64_ = (GtkRevealer*) gtk_revealer_new ();
#line 129 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp64_);
#line 129 "/run/build/planner/src/Views/CompletedTasks.vala"
	_data38_->labels_flowbox_revealer = _tmp64_;
#line 130 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp65_ = _data38_->labels_flowbox_revealer;
#line 130 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp65_, 3);
#line 131 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp66_ = _data38_->labels_flowbox_revealer;
#line 131 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp66_, 6);
#line 132 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp67_ = _data38_->labels_flowbox_revealer;
#line 132 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp68_ = self->priv->labels_flowbox;
#line 132 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_container_add ((GtkContainer*) _tmp67_, (GtkWidget*) _tmp68_);
#line 133 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp69_ = _data38_->labels_flowbox_revealer;
#line 133 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_revealer_set_reveal_child (_tmp69_, FALSE);
#line 135 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp70_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 135 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp70_);
#line 135 "/run/build/planner/src/Views/CompletedTasks.vala"
	t_box = _tmp70_;
#line 136 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp71_ = t_box;
#line 136 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp71_, TRUE);
#line 137 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp72_ = t_box;
#line 137 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp73_ = top_box;
#line 137 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_box_pack_start (_tmp72_, (GtkWidget*) _tmp73_, FALSE, FALSE, (guint) 0);
#line 138 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp74_ = t_box;
#line 138 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp75_ = _data38_->labels_flowbox_revealer;
#line 138 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_box_pack_start (_tmp74_, (GtkWidget*) _tmp75_, FALSE, FALSE, (guint) 0);
#line 140 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp76_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 140 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp76_);
#line 140 "/run/build/planner/src/Views/CompletedTasks.vala"
	b_box = _tmp76_;
#line 141 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp77_ = b_box;
#line 141 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_set ((GtkWidget*) _tmp77_, "expand", TRUE, NULL);
#line 142 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp78_ = b_box;
#line 142 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp79_ = self->priv->tasks_list;
#line 142 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_box_pack_start (_tmp78_, (GtkWidget*) _tmp79_, FALSE, TRUE, (guint) 0);
#line 144 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp80_ = (GtkStack*) gtk_stack_new ();
#line 144 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp80_);
#line 144 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (self->priv->main_stack);
#line 144 "/run/build/planner/src/Views/CompletedTasks.vala"
	self->priv->main_stack = _tmp80_;
#line 145 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp81_ = self->priv->main_stack;
#line 145 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_set ((GtkWidget*) _tmp81_, "expand", TRUE, NULL);
#line 146 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp82_ = self->priv->main_stack;
#line 146 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp82_, 9);
#line 147 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp83_ = self->priv->main_stack;
#line 147 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp83_, 9);
#line 148 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp84_ = self->priv->main_stack;
#line 148 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_stack_set_transition_duration (_tmp84_, (guint) 350);
#line 149 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp85_ = self->priv->main_stack;
#line 149 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_stack_set_transition_type (_tmp85_, GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT);
#line 151 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp86_ = self->priv->main_stack;
#line 151 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp87_ = b_box;
#line 151 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_stack_add_named (_tmp86_, (GtkWidget*) _tmp87_, "main");
#line 152 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp88_ = self->priv->main_stack;
#line 152 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp89_ = self->priv->alert_view;
#line 152 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_stack_add_named (_tmp88_, (GtkWidget*) _tmp89_, "alert");
#line 154 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp90_ = self->priv->main_stack;
#line 154 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_stack_set_visible_child_name (_tmp90_, "main");
#line 156 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp91_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 156 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp91_);
#line 156 "/run/build/planner/src/Views/CompletedTasks.vala"
	box = _tmp91_;
#line 157 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp92_ = box;
#line 157 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_set ((GtkWidget*) _tmp92_, "expand", TRUE, NULL);
#line 158 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp93_ = box;
#line 158 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp94_ = t_box;
#line 158 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_box_pack_start (_tmp93_, (GtkWidget*) _tmp94_, FALSE, TRUE, (guint) 0);
#line 159 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp95_ = box;
#line 159 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp96_ = self->priv->main_stack;
#line 159 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_box_pack_start (_tmp95_, (GtkWidget*) _tmp96_, FALSE, TRUE, (guint) 0);
#line 161 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp97_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
#line 161 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp97_);
#line 161 "/run/build/planner/src/Views/CompletedTasks.vala"
	scrolled = _tmp97_;
#line 162 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp98_ = scrolled;
#line 162 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp99_ = box;
#line 162 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_container_add ((GtkContainer*) _tmp98_, (GtkWidget*) _tmp99_);
#line 164 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp100_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 164 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp100_);
#line 164 "/run/build/planner/src/Views/CompletedTasks.vala"
	main_box = _tmp100_;
#line 165 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp101_ = main_box;
#line 165 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_set ((GtkWidget*) _tmp101_, "expand", TRUE, NULL);
#line 166 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp102_ = main_box;
#line 166 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp103_ = scrolled;
#line 166 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_box_pack_start (_tmp102_, (GtkWidget*) _tmp103_, TRUE, TRUE, (guint) 0);
#line 168 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp104_ = (GtkOverlay*) gtk_overlay_new ();
#line 168 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_ref_sink (_tmp104_);
#line 168 "/run/build/planner/src/Views/CompletedTasks.vala"
	main_overlay = _tmp104_;
#line 169 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp105_ = main_overlay;
#line 169 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp106_ = main_box;
#line 169 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_container_add ((GtkContainer*) _tmp105_, (GtkWidget*) _tmp106_);
#line 171 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp107_ = main_overlay;
#line 171 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp107_);
#line 172 "/run/build/planner/src/Views/CompletedTasks.vala"
	views_completed_tasks_update_tasks_list (self);
#line 173 "/run/build/planner/src/Views/CompletedTasks.vala"
	views_completed_tasks_check_visible_alertview (self);
#line 175 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp108_ = application_utils;
#line 175 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp109_ = self->priv->tasks_list;
#line 175 "/run/build/planner/src/Views/CompletedTasks.vala"
	if (utils_is_listbox_all_empty (_tmp108_, _tmp109_)) {
#line 176 "/run/build/planner/src/Views/CompletedTasks.vala"
		g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 200, __views_completed_tasks____lambda380__gsource_func, g_object_ref (self), g_object_unref);
#line 3403 "CompletedTasks.c"
	} else {
#line 181 "/run/build/planner/src/Views/CompletedTasks.vala"
		g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 200, __views_completed_tasks____lambda381__gsource_func, g_object_ref (self), g_object_unref);
#line 3407 "CompletedTasks.c"
	}
#line 187 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp110_ = self->priv->tasks_list;
#line 187 "/run/build/planner/src/Views/CompletedTasks.vala"
	gtk_list_box_set_sort_func (_tmp110_, __views_completed_tasks___lambda382__gtk_list_box_sort_func, g_object_ref (self), g_object_unref);
#line 198 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp111_ = gdk_display_get_default ();
#line 198 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp112_ = _g_object_ref0 (_tmp111_);
#line 198 "/run/build/planner/src/Views/CompletedTasks.vala"
	display = _tmp112_;
#line 199 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp113_ = display;
#line 199 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp114_ = gtk_clipboard_get_for_display (_tmp113_, GDK_SELECTION_CLIPBOARD);
#line 199 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp115_ = _g_object_ref0 (_tmp114_);
#line 199 "/run/build/planner/src/Views/CompletedTasks.vala"
	clipboard = _tmp115_;
#line 201 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_signal_connect_object ((GtkWidget*) self, "event", (GCallback) __views_completed_tasks___lambda383__gtk_widget_event, self, 0);
#line 232 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp116_ = labels_button;
#line 232 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_signal_connect_object (_tmp116_, "clicked", (GCallback) __views_completed_tasks___lambda384__gtk_button_clicked, self, 0);
#line 237 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp117_ = self->priv->labels_popover;
#line 237 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_signal_connect_data (_tmp117_, "on-selected-label", (GCallback) __views_completed_tasks___lambda385__widgets_popovers_labels_popover_on_selected_label, block38_data_ref (_data38_), (GClosureNotify) block38_data_unref, 0);
#line 273 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp118_ = self->priv->labels_flowbox;
#line 273 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_signal_connect_data ((GtkContainer*) _tmp118_, "remove", (GCallback) __views_completed_tasks___lambda387__gtk_container_remove, block38_data_ref (_data38_), (GClosureNotify) block38_data_unref, 0);
#line 307 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp119_ = self->priv->tasks_list;
#line 307 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_signal_connect_object ((GtkContainer*) _tmp119_, "remove", (GCallback) __views_completed_tasks___lambda390__gtk_container_remove, self, 0);
#line 311 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp120_ = application_database;
#line 311 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_signal_connect_object (_tmp120_, "update-task-signal", (GCallback) __views_completed_tasks___lambda391__services_database_update_task_signal, self, 0);
#line 334 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp121_ = application_database;
#line 334 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_signal_connect_object (_tmp121_, "add-task-signal", (GCallback) __views_completed_tasks___lambda393__services_database_add_task_signal, self, 0);
#line 338 "/run/build/planner/src/Views/CompletedTasks.vala"
	_tmp122_ = application_database;
#line 338 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_signal_connect_object (_tmp122_, "on-signal-remove-task", (GCallback) __views_completed_tasks___lambda394__services_database_on_signal_remove_task, self, 0);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (clipboard);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (display);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (main_overlay);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (main_box);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (scrolled);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (box);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (b_box);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (t_box);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (top_box);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (action_grid);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (share_button);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (labels_button);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (completed_tasks_label);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (completed_tasks_icon);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	block38_data_unref (_data38_);
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	_data38_ = NULL;
#line 36 "/run/build/planner/src/Views/CompletedTasks.vala"
	return obj;
#line 3491 "CompletedTasks.c"
}


static void
views_completed_tasks_class_init (ViewsCompletedTasksClass * klass)
{
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
	views_completed_tasks_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_type_class_add_private (klass, sizeof (ViewsCompletedTasksPrivate));
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_views_completed_tasks_get_property;
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_views_completed_tasks_set_property;
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
	G_OBJECT_CLASS (klass)->constructor = views_completed_tasks_constructor;
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
	G_OBJECT_CLASS (klass)->finalize = views_completed_tasks_finalize;
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_COMPLETED_TASKS_WINDOW_PROPERTY, views_completed_tasks_properties[VIEWS_COMPLETED_TASKS_WINDOW_PROPERTY] = g_param_spec_object ("window", "window", "window", TYPE_MAIN_WINDOW, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 3512 "CompletedTasks.c"
}


static void
views_completed_tasks_instance_init (ViewsCompletedTasks * self)
{
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
	self->priv = VIEWS_COMPLETED_TASKS_GET_PRIVATE (self);
#line 3521 "CompletedTasks.c"
}


static void
views_completed_tasks_finalize (GObject * obj)
{
	ViewsCompletedTasks * self;
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_COMPLETED_TASKS, ViewsCompletedTasks);
#line 23 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (self->priv->_window);
#line 24 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (self->priv->tasks_list);
#line 25 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (self->priv->labels_flowbox);
#line 26 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (self->priv->alert_view);
#line 27 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (self->priv->labels_popover);
#line 28 "/run/build/planner/src/Views/CompletedTasks.vala"
	_g_object_unref0 (self->priv->main_stack);
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
	G_OBJECT_CLASS (views_completed_tasks_parent_class)->finalize (obj);
#line 3545 "CompletedTasks.c"
}


GType
views_completed_tasks_get_type (void)
{
	static volatile gsize views_completed_tasks_type_id__volatile = 0;
	if (g_once_init_enter (&views_completed_tasks_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ViewsCompletedTasksClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_completed_tasks_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsCompletedTasks), 0, (GInstanceInitFunc) views_completed_tasks_instance_init, NULL };
		GType views_completed_tasks_type_id;
		views_completed_tasks_type_id = g_type_register_static (gtk_event_box_get_type (), "ViewsCompletedTasks", &g_define_type_info, 0);
		g_once_init_leave (&views_completed_tasks_type_id__volatile, views_completed_tasks_type_id);
	}
	return views_completed_tasks_type_id__volatile;
}


static void
_vala_views_completed_tasks_get_property (GObject * object,
                                          guint property_id,
                                          GValue * value,
                                          GParamSpec * pspec)
{
	ViewsCompletedTasks * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_COMPLETED_TASKS, ViewsCompletedTasks);
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
		case VIEWS_COMPLETED_TASKS_WINDOW_PROPERTY:
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
		g_value_set_object (value, views_completed_tasks_get_window (self));
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
		break;
#line 3579 "CompletedTasks.c"
		default:
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
		break;
#line 3585 "CompletedTasks.c"
	}
}


static void
_vala_views_completed_tasks_set_property (GObject * object,
                                          guint property_id,
                                          const GValue * value,
                                          GParamSpec * pspec)
{
	ViewsCompletedTasks * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_COMPLETED_TASKS, ViewsCompletedTasks);
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
		case VIEWS_COMPLETED_TASKS_WINDOW_PROPERTY:
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
		views_completed_tasks_set_window (self, g_value_get_object (value));
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
		break;
#line 3606 "CompletedTasks.c"
		default:
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Views/CompletedTasks.vala"
		break;
#line 3612 "CompletedTasks.c"
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



