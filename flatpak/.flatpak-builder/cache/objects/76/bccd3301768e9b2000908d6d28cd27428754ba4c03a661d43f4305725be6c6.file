/* potential-match.c generated by valac 0.40.11, the Vala compiler
 * generated from potential-match.vala, do not modify */

/*
 * Copyright (C) 2011 Collabora Ltd.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Raul Gutierrez Segales <raul.gutierrez.segales@collabora.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <folks/small-set.h>
#include <float.h>
#include <math.h>
#include <gio/gio.h>


#define FOLKS_TYPE_MATCH_RESULT (folks_match_result_get_type ())

#define FOLKS_TYPE_POTENTIAL_MATCH (folks_potential_match_get_type ())
#define FOLKS_POTENTIAL_MATCH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_POTENTIAL_MATCH, FolksPotentialMatch))
#define FOLKS_POTENTIAL_MATCH_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_POTENTIAL_MATCH, FolksPotentialMatchClass))
#define FOLKS_IS_POTENTIAL_MATCH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_POTENTIAL_MATCH))
#define FOLKS_IS_POTENTIAL_MATCH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_POTENTIAL_MATCH))
#define FOLKS_POTENTIAL_MATCH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_POTENTIAL_MATCH, FolksPotentialMatchClass))

typedef struct _FolksPotentialMatch FolksPotentialMatch;
typedef struct _FolksPotentialMatchClass FolksPotentialMatchClass;
typedef struct _FolksPotentialMatchPrivate FolksPotentialMatchPrivate;

#define FOLKS_TYPE_INDIVIDUAL (folks_individual_get_type ())
#define FOLKS_INDIVIDUAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_INDIVIDUAL, FolksIndividual))
#define FOLKS_INDIVIDUAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_INDIVIDUAL, FolksIndividualClass))
#define FOLKS_IS_INDIVIDUAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_INDIVIDUAL))
#define FOLKS_IS_INDIVIDUAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_INDIVIDUAL))
#define FOLKS_INDIVIDUAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_INDIVIDUAL, FolksIndividualClass))

typedef struct _FolksIndividual FolksIndividual;
typedef struct _FolksIndividualClass FolksIndividualClass;
enum  {
	FOLKS_POTENTIAL_MATCH_0_PROPERTY,
	FOLKS_POTENTIAL_MATCH_NUM_PROPERTIES
};
static GParamSpec* folks_potential_match_properties[FOLKS_POTENTIAL_MATCH_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define FOLKS_TYPE_TRUST_LEVEL (folks_trust_level_get_type ())

#define FOLKS_TYPE_GENDER_DETAILS (folks_gender_details_get_type ())
#define FOLKS_GENDER_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_GENDER_DETAILS, FolksGenderDetails))
#define FOLKS_IS_GENDER_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_GENDER_DETAILS))
#define FOLKS_GENDER_DETAILS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_GENDER_DETAILS, FolksGenderDetailsIface))

typedef struct _FolksGenderDetails FolksGenderDetails;
typedef struct _FolksGenderDetailsIface FolksGenderDetailsIface;

#define FOLKS_TYPE_GENDER (folks_gender_get_type ())

#define FOLKS_TYPE_ABSTRACT_FIELD_DETAILS (folks_abstract_field_details_get_type ())
#define FOLKS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails))
#define FOLKS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))

typedef struct _FolksAbstractFieldDetails FolksAbstractFieldDetails;
typedef struct _FolksAbstractFieldDetailsClass FolksAbstractFieldDetailsClass;

#define FOLKS_TYPE_PHONE_FIELD_DETAILS (folks_phone_field_details_get_type ())
#define FOLKS_PHONE_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_PHONE_FIELD_DETAILS, FolksPhoneFieldDetails))
#define FOLKS_PHONE_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_PHONE_FIELD_DETAILS, FolksPhoneFieldDetailsClass))
#define FOLKS_IS_PHONE_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_PHONE_FIELD_DETAILS))
#define FOLKS_IS_PHONE_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_PHONE_FIELD_DETAILS))
#define FOLKS_PHONE_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_PHONE_FIELD_DETAILS, FolksPhoneFieldDetailsClass))

typedef struct _FolksPhoneFieldDetails FolksPhoneFieldDetails;
typedef struct _FolksPhoneFieldDetailsClass FolksPhoneFieldDetailsClass;

#define FOLKS_TYPE_PHONE_DETAILS (folks_phone_details_get_type ())
#define FOLKS_PHONE_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_PHONE_DETAILS, FolksPhoneDetails))
#define FOLKS_IS_PHONE_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_PHONE_DETAILS))
#define FOLKS_PHONE_DETAILS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_PHONE_DETAILS, FolksPhoneDetailsIface))

typedef struct _FolksPhoneDetails FolksPhoneDetails;
typedef struct _FolksPhoneDetailsIface FolksPhoneDetailsIface;

#define FOLKS_TYPE_NAME_DETAILS (folks_name_details_get_type ())
#define FOLKS_NAME_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_NAME_DETAILS, FolksNameDetails))
#define FOLKS_IS_NAME_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_NAME_DETAILS))
#define FOLKS_NAME_DETAILS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_NAME_DETAILS, FolksNameDetailsIface))

typedef struct _FolksNameDetails FolksNameDetails;
typedef struct _FolksNameDetailsIface FolksNameDetailsIface;

#define FOLKS_TYPE_STRUCTURED_NAME (folks_structured_name_get_type ())
#define FOLKS_STRUCTURED_NAME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_STRUCTURED_NAME, FolksStructuredName))
#define FOLKS_STRUCTURED_NAME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_STRUCTURED_NAME, FolksStructuredNameClass))
#define FOLKS_IS_STRUCTURED_NAME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_STRUCTURED_NAME))
#define FOLKS_IS_STRUCTURED_NAME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_STRUCTURED_NAME))
#define FOLKS_STRUCTURED_NAME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_STRUCTURED_NAME, FolksStructuredNameClass))

typedef struct _FolksStructuredName FolksStructuredName;
typedef struct _FolksStructuredNameClass FolksStructuredNameClass;

#define FOLKS_TYPE_ALIAS_DETAILS (folks_alias_details_get_type ())
#define FOLKS_ALIAS_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_ALIAS_DETAILS, FolksAliasDetails))
#define FOLKS_IS_ALIAS_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_ALIAS_DETAILS))
#define FOLKS_ALIAS_DETAILS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_ALIAS_DETAILS, FolksAliasDetailsIface))

typedef struct _FolksAliasDetails FolksAliasDetails;
typedef struct _FolksAliasDetailsIface FolksAliasDetailsIface;

#define FOLKS_TYPE_IM_FIELD_DETAILS (folks_im_field_details_get_type ())
#define FOLKS_IM_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_IM_FIELD_DETAILS, FolksImFieldDetails))
#define FOLKS_IM_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_IM_FIELD_DETAILS, FolksImFieldDetailsClass))
#define FOLKS_IS_IM_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_IM_FIELD_DETAILS))
#define FOLKS_IS_IM_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_IM_FIELD_DETAILS))
#define FOLKS_IM_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_IM_FIELD_DETAILS, FolksImFieldDetailsClass))

typedef struct _FolksImFieldDetails FolksImFieldDetails;
typedef struct _FolksImFieldDetailsClass FolksImFieldDetailsClass;

#define FOLKS_TYPE_IM_DETAILS (folks_im_details_get_type ())
#define FOLKS_IM_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_IM_DETAILS, FolksImDetails))
#define FOLKS_IS_IM_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_IM_DETAILS))
#define FOLKS_IM_DETAILS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_IM_DETAILS, FolksImDetailsIface))

typedef struct _FolksImDetails FolksImDetails;
typedef struct _FolksImDetailsIface FolksImDetailsIface;

#define FOLKS_TYPE_EMAIL_FIELD_DETAILS (folks_email_field_details_get_type ())
#define FOLKS_EMAIL_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_EMAIL_FIELD_DETAILS, FolksEmailFieldDetails))
#define FOLKS_EMAIL_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_EMAIL_FIELD_DETAILS, FolksEmailFieldDetailsClass))
#define FOLKS_IS_EMAIL_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_EMAIL_FIELD_DETAILS))
#define FOLKS_IS_EMAIL_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_EMAIL_FIELD_DETAILS))
#define FOLKS_EMAIL_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_EMAIL_FIELD_DETAILS, FolksEmailFieldDetailsClass))

typedef struct _FolksEmailFieldDetails FolksEmailFieldDetails;
typedef struct _FolksEmailFieldDetailsClass FolksEmailFieldDetailsClass;

#define FOLKS_TYPE_EMAIL_DETAILS (folks_email_details_get_type ())
#define FOLKS_EMAIL_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_EMAIL_DETAILS, FolksEmailDetails))
#define FOLKS_IS_EMAIL_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_EMAIL_DETAILS))
#define FOLKS_EMAIL_DETAILS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_EMAIL_DETAILS, FolksEmailDetailsIface))

typedef struct _FolksEmailDetails FolksEmailDetails;
typedef struct _FolksEmailDetailsIface FolksEmailDetailsIface;

typedef enum  {
	FOLKS_MATCH_RESULT_NONE = -1,
	FOLKS_MATCH_RESULT_VERY_LOW = 0,
	FOLKS_MATCH_RESULT_LOW = 1,
	FOLKS_MATCH_RESULT_MEDIUM = 2,
	FOLKS_MATCH_RESULT_HIGH = 3,
	FOLKS_MATCH_RESULT_VERY_HIGH = 4,
	FOLKS_MATCH_RESULT_MIN = FOLKS_MATCH_RESULT_NONE,
	FOLKS_MATCH_RESULT_MAX = FOLKS_MATCH_RESULT_VERY_HIGH
} FolksMatchResult;

struct _FolksPotentialMatch {
	GObject parent_instance;
	FolksPotentialMatchPrivate * priv;
};

struct _FolksPotentialMatchClass {
	GObjectClass parent_class;
};

struct _FolksPotentialMatchPrivate {
	FolksIndividual* _individual_a;
	FolksIndividual* _individual_b;
};

typedef enum  {
	FOLKS_TRUST_LEVEL_NONE,
	FOLKS_TRUST_LEVEL_PERSONAS
} FolksTrustLevel;

typedef enum  {
	FOLKS_GENDER_UNSPECIFIED,
	FOLKS_GENDER_MALE,
	FOLKS_GENDER_FEMALE
} FolksGender;

typedef enum  {
	FOLKS_PROPERTY_ERROR_NOT_WRITEABLE,
	FOLKS_PROPERTY_ERROR_INVALID_VALUE,
	FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR,
	FOLKS_PROPERTY_ERROR_UNAVAILABLE
} FolksPropertyError;
#define FOLKS_PROPERTY_ERROR folks_property_error_quark ()
struct _FolksGenderDetailsIface {
	GTypeInterface parent_iface;
	void (*change_gender) (FolksGenderDetails* self, FolksGender gender, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_gender_finish) (FolksGenderDetails* self, GAsyncResult* _res_, GError** error);
	FolksGender (*get_gender) (FolksGenderDetails* self);
	void (*set_gender) (FolksGenderDetails* self, FolksGender value);
};

struct _FolksPhoneDetailsIface {
	GTypeInterface parent_iface;
	void (*change_phone_numbers) (FolksPhoneDetails* self, GeeSet* phone_numbers, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_phone_numbers_finish) (FolksPhoneDetails* self, GAsyncResult* _res_, GError** error);
	GeeSet* (*get_phone_numbers) (FolksPhoneDetails* self);
	void (*set_phone_numbers) (FolksPhoneDetails* self, GeeSet* value);
};

struct _FolksNameDetailsIface {
	GTypeInterface parent_iface;
	void (*change_structured_name) (FolksNameDetails* self, FolksStructuredName* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_structured_name_finish) (FolksNameDetails* self, GAsyncResult* _res_, GError** error);
	void (*change_full_name) (FolksNameDetails* self, const gchar* full_name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_full_name_finish) (FolksNameDetails* self, GAsyncResult* _res_, GError** error);
	void (*change_nickname) (FolksNameDetails* self, const gchar* nickname, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_nickname_finish) (FolksNameDetails* self, GAsyncResult* _res_, GError** error);
	FolksStructuredName* (*get_structured_name) (FolksNameDetails* self);
	void (*set_structured_name) (FolksNameDetails* self, FolksStructuredName* value);
	const gchar* (*get_full_name) (FolksNameDetails* self);
	void (*set_full_name) (FolksNameDetails* self, const gchar* value);
	const gchar* (*get_nickname) (FolksNameDetails* self);
	void (*set_nickname) (FolksNameDetails* self, const gchar* value);
};

struct _FolksAliasDetailsIface {
	GTypeInterface parent_iface;
	void (*change_alias) (FolksAliasDetails* self, const gchar* alias, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_alias_finish) (FolksAliasDetails* self, GAsyncResult* _res_, GError** error);
	const gchar* (*get_alias) (FolksAliasDetails* self);
	void (*set_alias) (FolksAliasDetails* self, const gchar* value);
};

struct _FolksImDetailsIface {
	GTypeInterface parent_iface;
	void (*change_im_addresses) (FolksImDetails* self, GeeMultiMap* im_addresses, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_im_addresses_finish) (FolksImDetails* self, GAsyncResult* _res_, GError** error);
	GeeMultiMap* (*get_im_addresses) (FolksImDetails* self);
	void (*set_im_addresses) (FolksImDetails* self, GeeMultiMap* value);
};

struct _FolksEmailDetailsIface {
	GTypeInterface parent_iface;
	void (*change_email_addresses) (FolksEmailDetails* self, GeeSet* email_addresses, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_email_addresses_finish) (FolksEmailDetails* self, GAsyncResult* _res_, GError** error);
	GeeSet* (*get_email_addresses) (FolksEmailDetails* self);
	void (*set_email_addresses) (FolksEmailDetails* self, GeeSet* value);
};


static gpointer folks_potential_match_parent_class = NULL;
extern GeeSet* folks_potential_match_known_email_aliases;
GeeSet* folks_potential_match_known_email_aliases = NULL;
static gdouble folks_potential_match__DIST_THRESHOLD;
static gdouble folks_potential_match__DIST_THRESHOLD = 0.70;

GType folks_match_result_get_type (void) G_GNUC_CONST;
GType folks_potential_match_get_type (void) G_GNUC_CONST;
GType folks_individual_get_type (void) G_GNUC_CONST;
#define FOLKS_POTENTIAL_MATCH_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_TYPE_POTENTIAL_MATCH, FolksPotentialMatchPrivate))
#define FOLKS_POTENTIAL_MATCH__SEPARATORS "._-+"
FolksPotentialMatch* folks_potential_match_new (void);
FolksPotentialMatch* folks_potential_match_construct (GType object_type);
FolksMatchResult folks_potential_match_potential_match (FolksPotentialMatch* self,
                                                        FolksIndividual* a,
                                                        FolksIndividual* b);
GType folks_trust_level_get_type (void) G_GNUC_CONST;
FolksTrustLevel folks_individual_get_trust_level (FolksIndividual* self);
gboolean folks_individual_has_anti_link_with_individual (FolksIndividual* self,
                                                         FolksIndividual* i);
GType folks_gender_get_type (void) G_GNUC_CONST;
GQuark folks_property_error_quark (void);
GType folks_gender_details_get_type (void) G_GNUC_CONST;
FolksGender folks_gender_details_get_gender (FolksGenderDetails* self);
static FolksMatchResult _folks_potential_match_inspect_im_addresses (FolksPotentialMatch* self,
                                                              FolksMatchResult old_result);
static FolksMatchResult _folks_potential_match_inspect_emails (FolksPotentialMatch* self,
                                                        FolksMatchResult old_result);
static FolksMatchResult _folks_potential_match_inspect_phone_numbers (FolksPotentialMatch* self,
                                                               FolksMatchResult old_result);
static FolksMatchResult _folks_potential_match_name_similarity (FolksPotentialMatch* self,
                                                         FolksMatchResult old_result);
GType folks_abstract_field_details_get_type (void) G_GNUC_CONST;
GType folks_phone_field_details_get_type (void) G_GNUC_CONST;
GType folks_phone_details_get_type (void) G_GNUC_CONST;
GeeSet* folks_phone_details_get_phone_numbers (FolksPhoneDetails* self);
gboolean folks_abstract_field_details_values_equal (FolksAbstractFieldDetails* self,
                                                    FolksAbstractFieldDetails* that);
static gboolean _folks_potential_match_look_alike (FolksPotentialMatch* self,
                                            const gchar* a,
                                            const gchar* b);
GType folks_structured_name_get_type (void) G_GNUC_CONST;
GType folks_name_details_get_type (void) G_GNUC_CONST;
const gchar* folks_name_details_get_nickname (FolksNameDetails* self);
static gboolean _folks_potential_match_look_alike_or_identical (FolksPotentialMatch* self,
                                                         const gchar* a,
                                                         const gchar* b,
                                                         gboolean* exact);
const gchar* folks_name_details_get_full_name (FolksNameDetails* self);
GType folks_alias_details_get_type (void) G_GNUC_CONST;
const gchar* folks_alias_details_get_alias (FolksAliasDetails* self);
FolksStructuredName* folks_name_details_get_structured_name (FolksNameDetails* self);
gboolean folks_structured_name_is_empty (FolksStructuredName* self);
gboolean folks_structured_name_equal (FolksStructuredName* self,
                                      FolksStructuredName* other);
gboolean _folks_utils_str_equal_safe (const gchar* a,
                                      const gchar* b);
const gchar* folks_structured_name_get_given_name (FolksStructuredName* self);
const gchar* folks_structured_name_get_family_name (FolksStructuredName* self);
const gchar* folks_structured_name_get_additional_names (FolksStructuredName* self);
const gchar* folks_structured_name_get_prefixes (FolksStructuredName* self);
const gchar* folks_structured_name_get_suffixes (FolksStructuredName* self);
static FolksMatchResult _folks_potential_match_inc_match_level (FolksPotentialMatch* self,
                                                         FolksMatchResult current_level,
                                                         gint times);
GType folks_im_field_details_get_type (void) G_GNUC_CONST;
GType folks_im_details_get_type (void) G_GNUC_CONST;
GeeMultiMap* folks_im_details_get_im_addresses (FolksImDetails* self);
gconstpointer folks_abstract_field_details_get_value (FolksAbstractFieldDetails* self);
GType folks_email_field_details_get_type (void) G_GNUC_CONST;
GType folks_email_details_get_type (void) G_GNUC_CONST;
GeeSet* folks_email_details_get_email_addresses (FolksEmailDetails* self);
static gboolean _folks_potential_match_check_initials_expansion (FolksPotentialMatch* self,
                                                          gchar** tokens_a,
                                                          int tokens_a_length1,
                                                          gchar** tokens_b,
                                                          int tokens_b_length1);
static gboolean _folks_potential_match_match_tokens (FolksPotentialMatch* self,
                                              gchar** tokens_a,
                                              int tokens_a_length1,
                                              gchar** tokens_b,
                                              int tokens_b_length1);
static gboolean _folks_potential_match_do_check_initials_expansion (FolksPotentialMatch* self,
                                                             gchar** expanded_name,
                                                             int expanded_name_length1,
                                                             const gchar* initials);
static gboolean _folks_potential_match_do_match_tokens (FolksPotentialMatch* self,
                                                 gchar** bigger_set,
                                                 int bigger_set_length1,
                                                 gchar** smaller_set,
                                                 int smaller_set_length1);
static gunichar* _folks_potential_match_strip_string (FolksPotentialMatch* self,
                                               const gchar* s,
                                               int* result_length1);
static gdouble _folks_potential_match_jaro_dist (FolksPotentialMatch* self,
                                          gunichar* s1,
                                          int s1_length1,
                                          gunichar* s2,
                                          int s2_length1);
static gint _folks_potential_match_matches (FolksPotentialMatch* self,
                                     gunichar* s1,
                                     int s1_length1,
                                     gunichar* s2,
                                     int s2_length1,
                                     gint max_dist,
                                     gdouble* t);
static gunichar _folks_potential_match_stripped_char (FolksPotentialMatch* self,
                                               gunichar ch);
static gint _folks_potential_match_contains (FolksPotentialMatch* self,
                                      gunichar* haystack,
                                      int haystack_length1,
                                      gunichar c,
                                      guint pos,
                                      guint max_dist);
static void folks_potential_match_finalize (GObject * obj);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


/**
 * Likely-ness of a potential match.
 *
 * Note that the order should be maintained.
 *
 * @since 0.5.0
 */
GType
folks_match_result_get_type (void)
{
	static volatile gsize folks_match_result_type_id__volatile = 0;
	if (g_once_init_enter (&folks_match_result_type_id__volatile)) {
		static const GEnumValue values[] = {{FOLKS_MATCH_RESULT_NONE, "FOLKS_MATCH_RESULT_NONE", "none"}, {FOLKS_MATCH_RESULT_VERY_LOW, "FOLKS_MATCH_RESULT_VERY_LOW", "very-low"}, {FOLKS_MATCH_RESULT_LOW, "FOLKS_MATCH_RESULT_LOW", "low"}, {FOLKS_MATCH_RESULT_MEDIUM, "FOLKS_MATCH_RESULT_MEDIUM", "medium"}, {FOLKS_MATCH_RESULT_HIGH, "FOLKS_MATCH_RESULT_HIGH", "high"}, {FOLKS_MATCH_RESULT_VERY_HIGH, "FOLKS_MATCH_RESULT_VERY_HIGH", "very-high"}, {FOLKS_MATCH_RESULT_MIN, "FOLKS_MATCH_RESULT_MIN", "min"}, {FOLKS_MATCH_RESULT_MAX, "FOLKS_MATCH_RESULT_MAX", "max"}, {0, NULL, NULL}};
		GType folks_match_result_type_id;
		folks_match_result_type_id = g_enum_register_static ("FolksMatchResult", values);
		g_once_init_leave (&folks_match_result_type_id__volatile, folks_match_result_type_id);
	}
	return folks_match_result_type_id__volatile;
}


/**
   * Create a new PotentialMatch.
   *
   * @return a new PotentialMatch
   *
   * @since 0.5.0
   */
FolksPotentialMatch*
folks_potential_match_construct (GType object_type)
{
	FolksPotentialMatch * self = NULL;
#line 125 "/run/build/folks/folks/potential-match.vala"
	self = (FolksPotentialMatch*) g_object_new (object_type, NULL);
#line 123 "/run/build/folks/folks/potential-match.vala"
	return self;
#line 428 "potential-match.c"
}


FolksPotentialMatch*
folks_potential_match_new (void)
{
#line 123 "/run/build/folks/folks/potential-match.vala"
	return folks_potential_match_construct (FOLKS_TYPE_POTENTIAL_MATCH);
#line 437 "potential-match.c"
}


/**
   * Whether two individuals are likely to be the same person.
   *
   * @param a an individual to compare
   * @param b another individual to compare
   *
   * @since 0.5.0
   */
static gpointer
_g_object_ref0 (gpointer self)
{
#line 138 "/run/build/folks/folks/potential-match.vala"
	return self ? g_object_ref (self) : NULL;
#line 454 "potential-match.c"
}


FolksMatchResult
folks_potential_match_potential_match (FolksPotentialMatch* self,
                                       FolksIndividual* a,
                                       FolksIndividual* b)
{
	FolksMatchResult result = 0;
	FolksIndividual* _tmp0_;
	FolksIndividual* _tmp1_;
	FolksMatchResult _result_ = 0;
	gboolean _tmp2_ = FALSE;
	FolksTrustLevel _tmp3_;
	FolksTrustLevel _tmp4_;
	gboolean _tmp7_ = FALSE;
	gboolean _tmp8_ = FALSE;
	FolksIndividual* _tmp9_;
	FolksGender _tmp10_;
	FolksGender _tmp11_;
	FolksMatchResult _tmp21_;
	FolksMatchResult _tmp22_;
	FolksMatchResult _tmp23_;
	FolksMatchResult _tmp24_;
	FolksMatchResult _tmp25_;
	FolksMatchResult _tmp26_;
	FolksMatchResult _tmp27_;
	FolksMatchResult _tmp28_;
#line 136 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 136 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (a != NULL, 0);
#line 136 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (b != NULL, 0);
#line 138 "/run/build/folks/folks/potential-match.vala"
	_tmp0_ = _g_object_ref0 (a);
#line 138 "/run/build/folks/folks/potential-match.vala"
	_g_object_unref0 (self->priv->_individual_a);
#line 138 "/run/build/folks/folks/potential-match.vala"
	self->priv->_individual_a = _tmp0_;
#line 139 "/run/build/folks/folks/potential-match.vala"
	_tmp1_ = _g_object_ref0 (b);
#line 139 "/run/build/folks/folks/potential-match.vala"
	_g_object_unref0 (self->priv->_individual_b);
#line 139 "/run/build/folks/folks/potential-match.vala"
	self->priv->_individual_b = _tmp1_;
#line 140 "/run/build/folks/folks/potential-match.vala"
	_result_ = FOLKS_MATCH_RESULT_MIN;
#line 145 "/run/build/folks/folks/potential-match.vala"
	_tmp3_ = folks_individual_get_trust_level (a);
#line 145 "/run/build/folks/folks/potential-match.vala"
	_tmp4_ = _tmp3_;
#line 145 "/run/build/folks/folks/potential-match.vala"
	if (_tmp4_ == FOLKS_TRUST_LEVEL_NONE) {
#line 145 "/run/build/folks/folks/potential-match.vala"
		_tmp2_ = TRUE;
#line 511 "potential-match.c"
	} else {
		FolksTrustLevel _tmp5_;
		FolksTrustLevel _tmp6_;
#line 145 "/run/build/folks/folks/potential-match.vala"
		_tmp5_ = folks_individual_get_trust_level (b);
#line 145 "/run/build/folks/folks/potential-match.vala"
		_tmp6_ = _tmp5_;
#line 145 "/run/build/folks/folks/potential-match.vala"
		_tmp2_ = _tmp6_ == FOLKS_TRUST_LEVEL_NONE;
#line 521 "potential-match.c"
	}
#line 145 "/run/build/folks/folks/potential-match.vala"
	if (_tmp2_) {
#line 147 "/run/build/folks/folks/potential-match.vala"
		result = _result_;
#line 147 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 529 "potential-match.c"
	}
#line 152 "/run/build/folks/folks/potential-match.vala"
	if (folks_individual_has_anti_link_with_individual (a, b)) {
#line 154 "/run/build/folks/folks/potential-match.vala"
		result = _result_;
#line 154 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 537 "potential-match.c"
	}
#line 157 "/run/build/folks/folks/potential-match.vala"
	_result_ = FOLKS_MATCH_RESULT_VERY_LOW;
#line 160 "/run/build/folks/folks/potential-match.vala"
	_tmp9_ = self->priv->_individual_a;
#line 160 "/run/build/folks/folks/potential-match.vala"
	_tmp10_ = folks_gender_details_get_gender ((FolksGenderDetails*) _tmp9_);
#line 160 "/run/build/folks/folks/potential-match.vala"
	_tmp11_ = _tmp10_;
#line 160 "/run/build/folks/folks/potential-match.vala"
	if (_tmp11_ != FOLKS_GENDER_UNSPECIFIED) {
#line 549 "potential-match.c"
		FolksIndividual* _tmp12_;
		FolksGender _tmp13_;
		FolksGender _tmp14_;
#line 161 "/run/build/folks/folks/potential-match.vala"
		_tmp12_ = self->priv->_individual_b;
#line 161 "/run/build/folks/folks/potential-match.vala"
		_tmp13_ = folks_gender_details_get_gender ((FolksGenderDetails*) _tmp12_);
#line 161 "/run/build/folks/folks/potential-match.vala"
		_tmp14_ = _tmp13_;
#line 161 "/run/build/folks/folks/potential-match.vala"
		_tmp8_ = _tmp14_ != FOLKS_GENDER_UNSPECIFIED;
#line 561 "potential-match.c"
	} else {
#line 160 "/run/build/folks/folks/potential-match.vala"
		_tmp8_ = FALSE;
#line 565 "potential-match.c"
	}
#line 160 "/run/build/folks/folks/potential-match.vala"
	if (_tmp8_) {
#line 569 "potential-match.c"
		FolksIndividual* _tmp15_;
		FolksGender _tmp16_;
		FolksGender _tmp17_;
		FolksIndividual* _tmp18_;
		FolksGender _tmp19_;
		FolksGender _tmp20_;
#line 162 "/run/build/folks/folks/potential-match.vala"
		_tmp15_ = self->priv->_individual_a;
#line 162 "/run/build/folks/folks/potential-match.vala"
		_tmp16_ = folks_gender_details_get_gender ((FolksGenderDetails*) _tmp15_);
#line 162 "/run/build/folks/folks/potential-match.vala"
		_tmp17_ = _tmp16_;
#line 162 "/run/build/folks/folks/potential-match.vala"
		_tmp18_ = self->priv->_individual_b;
#line 162 "/run/build/folks/folks/potential-match.vala"
		_tmp19_ = folks_gender_details_get_gender ((FolksGenderDetails*) _tmp18_);
#line 162 "/run/build/folks/folks/potential-match.vala"
		_tmp20_ = _tmp19_;
#line 162 "/run/build/folks/folks/potential-match.vala"
		_tmp7_ = _tmp17_ != _tmp20_;
#line 590 "potential-match.c"
	} else {
#line 160 "/run/build/folks/folks/potential-match.vala"
		_tmp7_ = FALSE;
#line 594 "potential-match.c"
	}
#line 160 "/run/build/folks/folks/potential-match.vala"
	if (_tmp7_) {
#line 164 "/run/build/folks/folks/potential-match.vala"
		result = _result_;
#line 164 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 602 "potential-match.c"
	}
#line 168 "/run/build/folks/folks/potential-match.vala"
	_tmp21_ = _result_;
#line 168 "/run/build/folks/folks/potential-match.vala"
	_result_ = _folks_potential_match_inspect_im_addresses (self, _tmp21_);
#line 169 "/run/build/folks/folks/potential-match.vala"
	_tmp22_ = _result_;
#line 169 "/run/build/folks/folks/potential-match.vala"
	if (_tmp22_ == FOLKS_MATCH_RESULT_MAX) {
#line 170 "/run/build/folks/folks/potential-match.vala"
		result = _result_;
#line 170 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 616 "potential-match.c"
	}
#line 173 "/run/build/folks/folks/potential-match.vala"
	_tmp23_ = _result_;
#line 173 "/run/build/folks/folks/potential-match.vala"
	_result_ = _folks_potential_match_inspect_emails (self, _tmp23_);
#line 174 "/run/build/folks/folks/potential-match.vala"
	_tmp24_ = _result_;
#line 174 "/run/build/folks/folks/potential-match.vala"
	if (_tmp24_ == FOLKS_MATCH_RESULT_MAX) {
#line 175 "/run/build/folks/folks/potential-match.vala"
		result = _result_;
#line 175 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 630 "potential-match.c"
	}
#line 178 "/run/build/folks/folks/potential-match.vala"
	_tmp25_ = _result_;
#line 178 "/run/build/folks/folks/potential-match.vala"
	_result_ = _folks_potential_match_inspect_phone_numbers (self, _tmp25_);
#line 179 "/run/build/folks/folks/potential-match.vala"
	_tmp26_ = _result_;
#line 179 "/run/build/folks/folks/potential-match.vala"
	if (_tmp26_ == FOLKS_MATCH_RESULT_MAX) {
#line 180 "/run/build/folks/folks/potential-match.vala"
		result = _result_;
#line 180 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 644 "potential-match.c"
	}
#line 183 "/run/build/folks/folks/potential-match.vala"
	_tmp27_ = _result_;
#line 183 "/run/build/folks/folks/potential-match.vala"
	_result_ = _folks_potential_match_name_similarity (self, _tmp27_);
#line 184 "/run/build/folks/folks/potential-match.vala"
	_tmp28_ = _result_;
#line 184 "/run/build/folks/folks/potential-match.vala"
	if (_tmp28_ == FOLKS_MATCH_RESULT_MAX) {
#line 185 "/run/build/folks/folks/potential-match.vala"
		result = _result_;
#line 185 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 658 "potential-match.c"
	}
#line 187 "/run/build/folks/folks/potential-match.vala"
	result = _result_;
#line 187 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 664 "potential-match.c"
}


static FolksMatchResult
_folks_potential_match_inspect_phone_numbers (FolksPotentialMatch* self,
                                              FolksMatchResult old_result)
{
	FolksMatchResult result = 0;
	GeeSet* set_a = NULL;
	FolksIndividual* _tmp0_;
	GeeSet* _tmp1_;
	GeeSet* _tmp2_;
	GeeSet* _tmp3_;
	GeeSet* set_b = NULL;
	FolksIndividual* _tmp4_;
	GeeSet* _tmp5_;
	GeeSet* _tmp6_;
	GeeSet* _tmp7_;
#line 190 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 192 "/run/build/folks/folks/potential-match.vala"
	_tmp0_ = self->priv->_individual_a;
#line 192 "/run/build/folks/folks/potential-match.vala"
	_tmp1_ = folks_phone_details_get_phone_numbers ((FolksPhoneDetails*) _tmp0_);
#line 192 "/run/build/folks/folks/potential-match.vala"
	_tmp2_ = _tmp1_;
#line 192 "/run/build/folks/folks/potential-match.vala"
	_tmp3_ = _g_object_ref0 (_tmp2_);
#line 192 "/run/build/folks/folks/potential-match.vala"
	set_a = _tmp3_;
#line 193 "/run/build/folks/folks/potential-match.vala"
	_tmp4_ = self->priv->_individual_b;
#line 193 "/run/build/folks/folks/potential-match.vala"
	_tmp5_ = folks_phone_details_get_phone_numbers ((FolksPhoneDetails*) _tmp4_);
#line 193 "/run/build/folks/folks/potential-match.vala"
	_tmp6_ = _tmp5_;
#line 193 "/run/build/folks/folks/potential-match.vala"
	_tmp7_ = _g_object_ref0 (_tmp6_);
#line 193 "/run/build/folks/folks/potential-match.vala"
	set_b = _tmp7_;
#line 705 "potential-match.c"
	{
		GeeIterator* _phone_fd_a_it = NULL;
		GeeSet* _tmp8_;
		GeeIterator* _tmp9_;
#line 195 "/run/build/folks/folks/potential-match.vala"
		_tmp8_ = set_a;
#line 195 "/run/build/folks/folks/potential-match.vala"
		_tmp9_ = gee_iterable_iterator ((GeeIterable*) _tmp8_);
#line 195 "/run/build/folks/folks/potential-match.vala"
		_phone_fd_a_it = _tmp9_;
#line 195 "/run/build/folks/folks/potential-match.vala"
		while (TRUE) {
#line 718 "potential-match.c"
			GeeIterator* _tmp10_;
			FolksPhoneFieldDetails* phone_fd_a = NULL;
			GeeIterator* _tmp11_;
			gpointer _tmp12_;
#line 195 "/run/build/folks/folks/potential-match.vala"
			_tmp10_ = _phone_fd_a_it;
#line 195 "/run/build/folks/folks/potential-match.vala"
			if (!gee_iterator_next (_tmp10_)) {
#line 195 "/run/build/folks/folks/potential-match.vala"
				break;
#line 729 "potential-match.c"
			}
#line 195 "/run/build/folks/folks/potential-match.vala"
			_tmp11_ = _phone_fd_a_it;
#line 195 "/run/build/folks/folks/potential-match.vala"
			_tmp12_ = gee_iterator_get (_tmp11_);
#line 195 "/run/build/folks/folks/potential-match.vala"
			phone_fd_a = (FolksPhoneFieldDetails*) _tmp12_;
#line 737 "potential-match.c"
			{
				GeeIterator* _phone_fd_b_it = NULL;
				GeeSet* _tmp13_;
				GeeIterator* _tmp14_;
#line 197 "/run/build/folks/folks/potential-match.vala"
				_tmp13_ = set_b;
#line 197 "/run/build/folks/folks/potential-match.vala"
				_tmp14_ = gee_iterable_iterator ((GeeIterable*) _tmp13_);
#line 197 "/run/build/folks/folks/potential-match.vala"
				_phone_fd_b_it = _tmp14_;
#line 197 "/run/build/folks/folks/potential-match.vala"
				while (TRUE) {
#line 750 "potential-match.c"
					GeeIterator* _tmp15_;
					FolksPhoneFieldDetails* phone_fd_b = NULL;
					GeeIterator* _tmp16_;
					gpointer _tmp17_;
					FolksPhoneFieldDetails* _tmp18_;
					FolksPhoneFieldDetails* _tmp19_;
#line 197 "/run/build/folks/folks/potential-match.vala"
					_tmp15_ = _phone_fd_b_it;
#line 197 "/run/build/folks/folks/potential-match.vala"
					if (!gee_iterator_next (_tmp15_)) {
#line 197 "/run/build/folks/folks/potential-match.vala"
						break;
#line 763 "potential-match.c"
					}
#line 197 "/run/build/folks/folks/potential-match.vala"
					_tmp16_ = _phone_fd_b_it;
#line 197 "/run/build/folks/folks/potential-match.vala"
					_tmp17_ = gee_iterator_get (_tmp16_);
#line 197 "/run/build/folks/folks/potential-match.vala"
					phone_fd_b = (FolksPhoneFieldDetails*) _tmp17_;
#line 199 "/run/build/folks/folks/potential-match.vala"
					_tmp18_ = phone_fd_a;
#line 199 "/run/build/folks/folks/potential-match.vala"
					_tmp19_ = phone_fd_b;
#line 199 "/run/build/folks/folks/potential-match.vala"
					if (folks_abstract_field_details_values_equal ((FolksAbstractFieldDetails*) _tmp18_, (FolksAbstractFieldDetails*) _tmp19_)) {
#line 201 "/run/build/folks/folks/potential-match.vala"
						result = FOLKS_MATCH_RESULT_HIGH;
#line 201 "/run/build/folks/folks/potential-match.vala"
						_g_object_unref0 (phone_fd_b);
#line 201 "/run/build/folks/folks/potential-match.vala"
						_g_object_unref0 (_phone_fd_b_it);
#line 201 "/run/build/folks/folks/potential-match.vala"
						_g_object_unref0 (phone_fd_a);
#line 201 "/run/build/folks/folks/potential-match.vala"
						_g_object_unref0 (_phone_fd_a_it);
#line 201 "/run/build/folks/folks/potential-match.vala"
						_g_object_unref0 (set_b);
#line 201 "/run/build/folks/folks/potential-match.vala"
						_g_object_unref0 (set_a);
#line 201 "/run/build/folks/folks/potential-match.vala"
						return result;
#line 793 "potential-match.c"
					}
#line 197 "/run/build/folks/folks/potential-match.vala"
					_g_object_unref0 (phone_fd_b);
#line 797 "potential-match.c"
				}
#line 197 "/run/build/folks/folks/potential-match.vala"
				_g_object_unref0 (_phone_fd_b_it);
#line 801 "potential-match.c"
			}
#line 195 "/run/build/folks/folks/potential-match.vala"
			_g_object_unref0 (phone_fd_a);
#line 805 "potential-match.c"
		}
#line 195 "/run/build/folks/folks/potential-match.vala"
		_g_object_unref0 (_phone_fd_a_it);
#line 809 "potential-match.c"
	}
#line 206 "/run/build/folks/folks/potential-match.vala"
	result = old_result;
#line 206 "/run/build/folks/folks/potential-match.vala"
	_g_object_unref0 (set_b);
#line 206 "/run/build/folks/folks/potential-match.vala"
	_g_object_unref0 (set_a);
#line 206 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 819 "potential-match.c"
}


static FolksMatchResult
_folks_potential_match_name_similarity (FolksPotentialMatch* self,
                                        FolksMatchResult old_result)
{
	FolksMatchResult result = 0;
	gdouble similarity = 0.0;
	gboolean exact_match = FALSE;
	FolksIndividual* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	FolksIndividual* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	gboolean _tmp7_ = FALSE;
	gboolean _tmp8_ = FALSE;
	gboolean _tmp9_ = FALSE;
	FolksIndividual* _tmp10_;
	const gchar* _tmp11_;
	const gchar* _tmp12_;
	FolksIndividual* _tmp13_;
	const gchar* _tmp14_;
	const gchar* _tmp15_;
	gboolean _tmp16_ = FALSE;
	gboolean _tmp17_;
	FolksStructuredName* _a = NULL;
	FolksIndividual* _tmp43_;
	FolksStructuredName* _tmp44_;
	FolksStructuredName* _tmp45_;
	FolksStructuredName* _tmp46_;
	FolksStructuredName* _b = NULL;
	FolksIndividual* _tmp47_;
	FolksStructuredName* _tmp48_;
	FolksStructuredName* _tmp49_;
	FolksStructuredName* _tmp50_;
	gboolean _tmp51_ = FALSE;
	FolksStructuredName* _tmp52_;
	gdouble _tmp104_;
	gdouble _tmp105_;
	gdouble _tmp106_;
#line 215 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 217 "/run/build/folks/folks/potential-match.vala"
	similarity = 0.0;
#line 218 "/run/build/folks/folks/potential-match.vala"
	exact_match = FALSE;
#line 220 "/run/build/folks/folks/potential-match.vala"
	_tmp0_ = self->priv->_individual_a;
#line 220 "/run/build/folks/folks/potential-match.vala"
	_tmp1_ = folks_name_details_get_nickname ((FolksNameDetails*) _tmp0_);
#line 220 "/run/build/folks/folks/potential-match.vala"
	_tmp2_ = _tmp1_;
#line 220 "/run/build/folks/folks/potential-match.vala"
	_tmp3_ = self->priv->_individual_b;
#line 220 "/run/build/folks/folks/potential-match.vala"
	_tmp4_ = folks_name_details_get_nickname ((FolksNameDetails*) _tmp3_);
#line 220 "/run/build/folks/folks/potential-match.vala"
	_tmp5_ = _tmp4_;
#line 220 "/run/build/folks/folks/potential-match.vala"
	if (_folks_potential_match_look_alike (self, _tmp2_, _tmp5_)) {
#line 882 "potential-match.c"
		gdouble _tmp6_;
#line 223 "/run/build/folks/folks/potential-match.vala"
		_tmp6_ = similarity;
#line 223 "/run/build/folks/folks/potential-match.vala"
		similarity = _tmp6_ + 0.20;
#line 888 "potential-match.c"
	}
#line 226 "/run/build/folks/folks/potential-match.vala"
	_tmp10_ = self->priv->_individual_a;
#line 226 "/run/build/folks/folks/potential-match.vala"
	_tmp11_ = folks_name_details_get_full_name ((FolksNameDetails*) _tmp10_);
#line 226 "/run/build/folks/folks/potential-match.vala"
	_tmp12_ = _tmp11_;
#line 226 "/run/build/folks/folks/potential-match.vala"
	_tmp13_ = self->priv->_individual_b;
#line 226 "/run/build/folks/folks/potential-match.vala"
	_tmp14_ = folks_name_details_get_full_name ((FolksNameDetails*) _tmp13_);
#line 226 "/run/build/folks/folks/potential-match.vala"
	_tmp15_ = _tmp14_;
#line 226 "/run/build/folks/folks/potential-match.vala"
	_tmp17_ = _folks_potential_match_look_alike_or_identical (self, _tmp12_, _tmp15_, &_tmp16_);
#line 226 "/run/build/folks/folks/potential-match.vala"
	exact_match = _tmp16_;
#line 226 "/run/build/folks/folks/potential-match.vala"
	if (_tmp17_) {
#line 226 "/run/build/folks/folks/potential-match.vala"
		_tmp9_ = TRUE;
#line 910 "potential-match.c"
	} else {
		FolksIndividual* _tmp18_;
		const gchar* _tmp19_;
		const gchar* _tmp20_;
		FolksIndividual* _tmp21_;
		const gchar* _tmp22_;
		const gchar* _tmp23_;
		gboolean _tmp24_ = FALSE;
		gboolean _tmp25_;
#line 229 "/run/build/folks/folks/potential-match.vala"
		_tmp18_ = self->priv->_individual_a;
#line 229 "/run/build/folks/folks/potential-match.vala"
		_tmp19_ = folks_alias_details_get_alias ((FolksAliasDetails*) _tmp18_);
#line 229 "/run/build/folks/folks/potential-match.vala"
		_tmp20_ = _tmp19_;
#line 229 "/run/build/folks/folks/potential-match.vala"
		_tmp21_ = self->priv->_individual_b;
#line 229 "/run/build/folks/folks/potential-match.vala"
		_tmp22_ = folks_name_details_get_full_name ((FolksNameDetails*) _tmp21_);
#line 229 "/run/build/folks/folks/potential-match.vala"
		_tmp23_ = _tmp22_;
#line 229 "/run/build/folks/folks/potential-match.vala"
		_tmp25_ = _folks_potential_match_look_alike_or_identical (self, _tmp20_, _tmp23_, &_tmp24_);
#line 229 "/run/build/folks/folks/potential-match.vala"
		exact_match = _tmp24_;
#line 229 "/run/build/folks/folks/potential-match.vala"
		_tmp9_ = _tmp25_;
#line 938 "potential-match.c"
	}
#line 226 "/run/build/folks/folks/potential-match.vala"
	if (_tmp9_) {
#line 226 "/run/build/folks/folks/potential-match.vala"
		_tmp8_ = TRUE;
#line 944 "potential-match.c"
	} else {
		FolksIndividual* _tmp26_;
		const gchar* _tmp27_;
		const gchar* _tmp28_;
		FolksIndividual* _tmp29_;
		const gchar* _tmp30_;
		const gchar* _tmp31_;
		gboolean _tmp32_ = FALSE;
		gboolean _tmp33_;
#line 232 "/run/build/folks/folks/potential-match.vala"
		_tmp26_ = self->priv->_individual_a;
#line 232 "/run/build/folks/folks/potential-match.vala"
		_tmp27_ = folks_name_details_get_full_name ((FolksNameDetails*) _tmp26_);
#line 232 "/run/build/folks/folks/potential-match.vala"
		_tmp28_ = _tmp27_;
#line 232 "/run/build/folks/folks/potential-match.vala"
		_tmp29_ = self->priv->_individual_b;
#line 232 "/run/build/folks/folks/potential-match.vala"
		_tmp30_ = folks_alias_details_get_alias ((FolksAliasDetails*) _tmp29_);
#line 232 "/run/build/folks/folks/potential-match.vala"
		_tmp31_ = _tmp30_;
#line 232 "/run/build/folks/folks/potential-match.vala"
		_tmp33_ = _folks_potential_match_look_alike_or_identical (self, _tmp28_, _tmp31_, &_tmp32_);
#line 232 "/run/build/folks/folks/potential-match.vala"
		exact_match = _tmp32_;
#line 232 "/run/build/folks/folks/potential-match.vala"
		_tmp8_ = _tmp33_;
#line 972 "potential-match.c"
	}
#line 226 "/run/build/folks/folks/potential-match.vala"
	if (_tmp8_) {
#line 226 "/run/build/folks/folks/potential-match.vala"
		_tmp7_ = TRUE;
#line 978 "potential-match.c"
	} else {
		FolksIndividual* _tmp34_;
		const gchar* _tmp35_;
		const gchar* _tmp36_;
		FolksIndividual* _tmp37_;
		const gchar* _tmp38_;
		const gchar* _tmp39_;
		gboolean _tmp40_ = FALSE;
		gboolean _tmp41_;
#line 235 "/run/build/folks/folks/potential-match.vala"
		_tmp34_ = self->priv->_individual_a;
#line 235 "/run/build/folks/folks/potential-match.vala"
		_tmp35_ = folks_alias_details_get_alias ((FolksAliasDetails*) _tmp34_);
#line 235 "/run/build/folks/folks/potential-match.vala"
		_tmp36_ = _tmp35_;
#line 235 "/run/build/folks/folks/potential-match.vala"
		_tmp37_ = self->priv->_individual_b;
#line 235 "/run/build/folks/folks/potential-match.vala"
		_tmp38_ = folks_alias_details_get_alias ((FolksAliasDetails*) _tmp37_);
#line 235 "/run/build/folks/folks/potential-match.vala"
		_tmp39_ = _tmp38_;
#line 235 "/run/build/folks/folks/potential-match.vala"
		_tmp41_ = _folks_potential_match_look_alike_or_identical (self, _tmp36_, _tmp39_, &_tmp40_);
#line 235 "/run/build/folks/folks/potential-match.vala"
		exact_match = _tmp40_;
#line 235 "/run/build/folks/folks/potential-match.vala"
		_tmp7_ = _tmp41_;
#line 1006 "potential-match.c"
	}
#line 226 "/run/build/folks/folks/potential-match.vala"
	if (_tmp7_) {
#line 1010 "potential-match.c"
		gdouble _tmp42_;
#line 239 "/run/build/folks/folks/potential-match.vala"
		_tmp42_ = similarity;
#line 239 "/run/build/folks/folks/potential-match.vala"
		similarity = _tmp42_ + 0.70;
#line 1016 "potential-match.c"
	}
#line 242 "/run/build/folks/folks/potential-match.vala"
	_tmp43_ = self->priv->_individual_a;
#line 242 "/run/build/folks/folks/potential-match.vala"
	_tmp44_ = folks_name_details_get_structured_name ((FolksNameDetails*) _tmp43_);
#line 242 "/run/build/folks/folks/potential-match.vala"
	_tmp45_ = _tmp44_;
#line 242 "/run/build/folks/folks/potential-match.vala"
	_tmp46_ = _g_object_ref0 (_tmp45_);
#line 242 "/run/build/folks/folks/potential-match.vala"
	_a = _tmp46_;
#line 243 "/run/build/folks/folks/potential-match.vala"
	_tmp47_ = self->priv->_individual_b;
#line 243 "/run/build/folks/folks/potential-match.vala"
	_tmp48_ = folks_name_details_get_structured_name ((FolksNameDetails*) _tmp47_);
#line 243 "/run/build/folks/folks/potential-match.vala"
	_tmp49_ = _tmp48_;
#line 243 "/run/build/folks/folks/potential-match.vala"
	_tmp50_ = _g_object_ref0 (_tmp49_);
#line 243 "/run/build/folks/folks/potential-match.vala"
	_b = _tmp50_;
#line 245 "/run/build/folks/folks/potential-match.vala"
	_tmp52_ = _a;
#line 245 "/run/build/folks/folks/potential-match.vala"
	if (_tmp52_ != NULL) {
#line 1042 "potential-match.c"
		FolksStructuredName* _tmp53_;
#line 245 "/run/build/folks/folks/potential-match.vala"
		_tmp53_ = _b;
#line 245 "/run/build/folks/folks/potential-match.vala"
		_tmp51_ = _tmp53_ != NULL;
#line 1048 "potential-match.c"
	} else {
#line 245 "/run/build/folks/folks/potential-match.vala"
		_tmp51_ = FALSE;
#line 1052 "potential-match.c"
	}
#line 245 "/run/build/folks/folks/potential-match.vala"
	if (_tmp51_) {
#line 1056 "potential-match.c"
		FolksStructuredName* a = NULL;
		FolksStructuredName* _tmp54_;
		FolksStructuredName* _tmp55_;
		FolksStructuredName* b = NULL;
		FolksStructuredName* _tmp56_;
		FolksStructuredName* _tmp57_;
		gboolean _tmp58_ = FALSE;
		FolksStructuredName* _tmp59_;
		FolksStructuredName* _tmp62_;
		const gchar* _tmp63_;
		const gchar* _tmp64_;
		FolksStructuredName* _tmp65_;
		const gchar* _tmp66_;
		const gchar* _tmp67_;
		gboolean _tmp69_ = FALSE;
		FolksStructuredName* _tmp70_;
		const gchar* _tmp71_;
		const gchar* _tmp72_;
		FolksStructuredName* _tmp73_;
		const gchar* _tmp74_;
		const gchar* _tmp75_;
		FolksStructuredName* _tmp83_;
		const gchar* _tmp84_;
		const gchar* _tmp85_;
		FolksStructuredName* _tmp86_;
		const gchar* _tmp87_;
		const gchar* _tmp88_;
		FolksStructuredName* _tmp90_;
		const gchar* _tmp91_;
		const gchar* _tmp92_;
		FolksStructuredName* _tmp93_;
		const gchar* _tmp94_;
		const gchar* _tmp95_;
		FolksStructuredName* _tmp97_;
		const gchar* _tmp98_;
		const gchar* _tmp99_;
		FolksStructuredName* _tmp100_;
		const gchar* _tmp101_;
		const gchar* _tmp102_;
#line 247 "/run/build/folks/folks/potential-match.vala"
		_tmp54_ = _a;
#line 247 "/run/build/folks/folks/potential-match.vala"
		_tmp55_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp54_, FOLKS_TYPE_STRUCTURED_NAME, FolksStructuredName));
#line 247 "/run/build/folks/folks/potential-match.vala"
		a = _tmp55_;
#line 248 "/run/build/folks/folks/potential-match.vala"
		_tmp56_ = _b;
#line 248 "/run/build/folks/folks/potential-match.vala"
		_tmp57_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp56_, FOLKS_TYPE_STRUCTURED_NAME, FolksStructuredName));
#line 248 "/run/build/folks/folks/potential-match.vala"
		b = _tmp57_;
#line 250 "/run/build/folks/folks/potential-match.vala"
		_tmp59_ = a;
#line 250 "/run/build/folks/folks/potential-match.vala"
		if (folks_structured_name_is_empty (_tmp59_) == FALSE) {
#line 1112 "potential-match.c"
			FolksStructuredName* _tmp60_;
			FolksStructuredName* _tmp61_;
#line 250 "/run/build/folks/folks/potential-match.vala"
			_tmp60_ = a;
#line 250 "/run/build/folks/folks/potential-match.vala"
			_tmp61_ = b;
#line 250 "/run/build/folks/folks/potential-match.vala"
			_tmp58_ = folks_structured_name_equal (_tmp60_, _tmp61_);
#line 1121 "potential-match.c"
		} else {
#line 250 "/run/build/folks/folks/potential-match.vala"
			_tmp58_ = FALSE;
#line 1125 "potential-match.c"
		}
#line 250 "/run/build/folks/folks/potential-match.vala"
		if (_tmp58_) {
#line 252 "/run/build/folks/folks/potential-match.vala"
			result = FOLKS_MATCH_RESULT_HIGH;
#line 252 "/run/build/folks/folks/potential-match.vala"
			_g_object_unref0 (b);
#line 252 "/run/build/folks/folks/potential-match.vala"
			_g_object_unref0 (a);
#line 252 "/run/build/folks/folks/potential-match.vala"
			_g_object_unref0 (_b);
#line 252 "/run/build/folks/folks/potential-match.vala"
			_g_object_unref0 (_a);
#line 252 "/run/build/folks/folks/potential-match.vala"
			return result;
#line 1141 "potential-match.c"
		}
#line 255 "/run/build/folks/folks/potential-match.vala"
		_tmp62_ = a;
#line 255 "/run/build/folks/folks/potential-match.vala"
		_tmp63_ = folks_structured_name_get_given_name (_tmp62_);
#line 255 "/run/build/folks/folks/potential-match.vala"
		_tmp64_ = _tmp63_;
#line 255 "/run/build/folks/folks/potential-match.vala"
		_tmp65_ = b;
#line 255 "/run/build/folks/folks/potential-match.vala"
		_tmp66_ = folks_structured_name_get_given_name (_tmp65_);
#line 255 "/run/build/folks/folks/potential-match.vala"
		_tmp67_ = _tmp66_;
#line 255 "/run/build/folks/folks/potential-match.vala"
		if (_folks_utils_str_equal_safe (_tmp64_, _tmp67_)) {
#line 1157 "potential-match.c"
			gdouble _tmp68_;
#line 256 "/run/build/folks/folks/potential-match.vala"
			_tmp68_ = similarity;
#line 256 "/run/build/folks/folks/potential-match.vala"
			similarity = _tmp68_ + 0.20;
#line 1163 "potential-match.c"
		}
#line 258 "/run/build/folks/folks/potential-match.vala"
		_tmp70_ = a;
#line 258 "/run/build/folks/folks/potential-match.vala"
		_tmp71_ = folks_structured_name_get_family_name (_tmp70_);
#line 258 "/run/build/folks/folks/potential-match.vala"
		_tmp72_ = _tmp71_;
#line 258 "/run/build/folks/folks/potential-match.vala"
		_tmp73_ = b;
#line 258 "/run/build/folks/folks/potential-match.vala"
		_tmp74_ = folks_structured_name_get_family_name (_tmp73_);
#line 258 "/run/build/folks/folks/potential-match.vala"
		_tmp75_ = _tmp74_;
#line 258 "/run/build/folks/folks/potential-match.vala"
		if (_folks_potential_match_look_alike (self, _tmp72_, _tmp75_)) {
#line 1179 "potential-match.c"
			FolksStructuredName* _tmp76_;
			const gchar* _tmp77_;
			const gchar* _tmp78_;
			FolksStructuredName* _tmp79_;
			const gchar* _tmp80_;
			const gchar* _tmp81_;
#line 259 "/run/build/folks/folks/potential-match.vala"
			_tmp76_ = a;
#line 259 "/run/build/folks/folks/potential-match.vala"
			_tmp77_ = folks_structured_name_get_given_name (_tmp76_);
#line 259 "/run/build/folks/folks/potential-match.vala"
			_tmp78_ = _tmp77_;
#line 259 "/run/build/folks/folks/potential-match.vala"
			_tmp79_ = b;
#line 259 "/run/build/folks/folks/potential-match.vala"
			_tmp80_ = folks_structured_name_get_given_name (_tmp79_);
#line 259 "/run/build/folks/folks/potential-match.vala"
			_tmp81_ = _tmp80_;
#line 259 "/run/build/folks/folks/potential-match.vala"
			_tmp69_ = _folks_potential_match_look_alike (self, _tmp78_, _tmp81_);
#line 1200 "potential-match.c"
		} else {
#line 258 "/run/build/folks/folks/potential-match.vala"
			_tmp69_ = FALSE;
#line 1204 "potential-match.c"
		}
#line 258 "/run/build/folks/folks/potential-match.vala"
		if (_tmp69_) {
#line 1208 "potential-match.c"
			gdouble _tmp82_;
#line 261 "/run/build/folks/folks/potential-match.vala"
			_tmp82_ = similarity;
#line 261 "/run/build/folks/folks/potential-match.vala"
			similarity = _tmp82_ + 0.40;
#line 1214 "potential-match.c"
		}
#line 264 "/run/build/folks/folks/potential-match.vala"
		_tmp83_ = a;
#line 264 "/run/build/folks/folks/potential-match.vala"
		_tmp84_ = folks_structured_name_get_additional_names (_tmp83_);
#line 264 "/run/build/folks/folks/potential-match.vala"
		_tmp85_ = _tmp84_;
#line 264 "/run/build/folks/folks/potential-match.vala"
		_tmp86_ = b;
#line 264 "/run/build/folks/folks/potential-match.vala"
		_tmp87_ = folks_structured_name_get_additional_names (_tmp86_);
#line 264 "/run/build/folks/folks/potential-match.vala"
		_tmp88_ = _tmp87_;
#line 264 "/run/build/folks/folks/potential-match.vala"
		if (_folks_utils_str_equal_safe (_tmp85_, _tmp88_)) {
#line 1230 "potential-match.c"
			gdouble _tmp89_;
#line 266 "/run/build/folks/folks/potential-match.vala"
			_tmp89_ = similarity;
#line 266 "/run/build/folks/folks/potential-match.vala"
			similarity = _tmp89_ + 0.5;
#line 1236 "potential-match.c"
		}
#line 268 "/run/build/folks/folks/potential-match.vala"
		_tmp90_ = a;
#line 268 "/run/build/folks/folks/potential-match.vala"
		_tmp91_ = folks_structured_name_get_prefixes (_tmp90_);
#line 268 "/run/build/folks/folks/potential-match.vala"
		_tmp92_ = _tmp91_;
#line 268 "/run/build/folks/folks/potential-match.vala"
		_tmp93_ = b;
#line 268 "/run/build/folks/folks/potential-match.vala"
		_tmp94_ = folks_structured_name_get_prefixes (_tmp93_);
#line 268 "/run/build/folks/folks/potential-match.vala"
		_tmp95_ = _tmp94_;
#line 268 "/run/build/folks/folks/potential-match.vala"
		if (_folks_utils_str_equal_safe (_tmp92_, _tmp95_)) {
#line 1252 "potential-match.c"
			gdouble _tmp96_;
#line 269 "/run/build/folks/folks/potential-match.vala"
			_tmp96_ = similarity;
#line 269 "/run/build/folks/folks/potential-match.vala"
			similarity = _tmp96_ + 0.5;
#line 1258 "potential-match.c"
		}
#line 271 "/run/build/folks/folks/potential-match.vala"
		_tmp97_ = a;
#line 271 "/run/build/folks/folks/potential-match.vala"
		_tmp98_ = folks_structured_name_get_suffixes (_tmp97_);
#line 271 "/run/build/folks/folks/potential-match.vala"
		_tmp99_ = _tmp98_;
#line 271 "/run/build/folks/folks/potential-match.vala"
		_tmp100_ = b;
#line 271 "/run/build/folks/folks/potential-match.vala"
		_tmp101_ = folks_structured_name_get_suffixes (_tmp100_);
#line 271 "/run/build/folks/folks/potential-match.vala"
		_tmp102_ = _tmp101_;
#line 271 "/run/build/folks/folks/potential-match.vala"
		if (_folks_utils_str_equal_safe (_tmp99_, _tmp102_)) {
#line 1274 "potential-match.c"
			gdouble _tmp103_;
#line 272 "/run/build/folks/folks/potential-match.vala"
			_tmp103_ = similarity;
#line 272 "/run/build/folks/folks/potential-match.vala"
			similarity = _tmp103_ + 0.5;
#line 1280 "potential-match.c"
		}
#line 245 "/run/build/folks/folks/potential-match.vala"
		_g_object_unref0 (b);
#line 245 "/run/build/folks/folks/potential-match.vala"
		_g_object_unref0 (a);
#line 1286 "potential-match.c"
	}
#line 275 "/run/build/folks/folks/potential-match.vala"
	_tmp104_ = similarity;
#line 275 "/run/build/folks/folks/potential-match.vala"
	g_debug ("potential-match.vala:275: [name_similarity] Got %f\n", _tmp104_);
#line 277 "/run/build/folks/folks/potential-match.vala"
	_tmp105_ = similarity;
#line 277 "/run/build/folks/folks/potential-match.vala"
	_tmp106_ = folks_potential_match__DIST_THRESHOLD;
#line 277 "/run/build/folks/folks/potential-match.vala"
	if (_tmp105_ >= _tmp106_) {
#line 1298 "potential-match.c"
		gint inc = 0;
		gboolean _tmp107_;
		gint _tmp109_;
#line 279 "/run/build/folks/folks/potential-match.vala"
		inc = 2;
#line 284 "/run/build/folks/folks/potential-match.vala"
		_tmp107_ = exact_match;
#line 284 "/run/build/folks/folks/potential-match.vala"
		if (_tmp107_) {
#line 1308 "potential-match.c"
			gint _tmp108_;
#line 285 "/run/build/folks/folks/potential-match.vala"
			_tmp108_ = inc;
#line 285 "/run/build/folks/folks/potential-match.vala"
			inc = _tmp108_ + 1;
#line 1314 "potential-match.c"
		}
#line 286 "/run/build/folks/folks/potential-match.vala"
		_tmp109_ = inc;
#line 286 "/run/build/folks/folks/potential-match.vala"
		result = _folks_potential_match_inc_match_level (self, old_result, _tmp109_);
#line 286 "/run/build/folks/folks/potential-match.vala"
		_g_object_unref0 (_b);
#line 286 "/run/build/folks/folks/potential-match.vala"
		_g_object_unref0 (_a);
#line 286 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 1326 "potential-match.c"
	}
#line 289 "/run/build/folks/folks/potential-match.vala"
	result = old_result;
#line 289 "/run/build/folks/folks/potential-match.vala"
	_g_object_unref0 (_b);
#line 289 "/run/build/folks/folks/potential-match.vala"
	_g_object_unref0 (_a);
#line 289 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 1336 "potential-match.c"
}


/**
   * Number of equal IM addresses between two individuals.
   *
   * This compares the addresses without comparing their associated protocols.
   *
   * @since 0.5.0
   */
static FolksMatchResult
_folks_potential_match_inspect_im_addresses (FolksPotentialMatch* self,
                                             FolksMatchResult old_result)
{
	FolksMatchResult result = 0;
	GeeHashSet* addrs = NULL;
	GeeHashSet* _tmp0_;
#line 299 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 301 "/run/build/folks/folks/potential-match.vala"
	_tmp0_ = gee_hash_set_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, NULL, NULL, NULL, NULL, NULL, NULL);
#line 301 "/run/build/folks/folks/potential-match.vala"
	addrs = _tmp0_;
#line 1360 "potential-match.c"
	{
		GeeIterator* _im_a_it = NULL;
		FolksIndividual* _tmp1_;
		GeeMultiMap* _tmp2_;
		GeeMultiMap* _tmp3_;
		GeeCollection* _tmp4_;
		GeeCollection* _tmp5_;
		GeeIterator* _tmp6_;
		GeeIterator* _tmp7_;
#line 303 "/run/build/folks/folks/potential-match.vala"
		_tmp1_ = self->priv->_individual_a;
#line 303 "/run/build/folks/folks/potential-match.vala"
		_tmp2_ = folks_im_details_get_im_addresses ((FolksImDetails*) _tmp1_);
#line 303 "/run/build/folks/folks/potential-match.vala"
		_tmp3_ = _tmp2_;
#line 303 "/run/build/folks/folks/potential-match.vala"
		_tmp4_ = gee_multi_map_get_values (_tmp3_);
#line 303 "/run/build/folks/folks/potential-match.vala"
		_tmp5_ = _tmp4_;
#line 303 "/run/build/folks/folks/potential-match.vala"
		_tmp6_ = gee_iterable_iterator ((GeeIterable*) _tmp5_);
#line 303 "/run/build/folks/folks/potential-match.vala"
		_tmp7_ = _tmp6_;
#line 303 "/run/build/folks/folks/potential-match.vala"
		_g_object_unref0 (_tmp5_);
#line 303 "/run/build/folks/folks/potential-match.vala"
		_im_a_it = _tmp7_;
#line 303 "/run/build/folks/folks/potential-match.vala"
		while (TRUE) {
#line 1390 "potential-match.c"
			GeeIterator* _tmp8_;
			FolksImFieldDetails* im_a = NULL;
			GeeIterator* _tmp9_;
			gpointer _tmp10_;
			GeeHashSet* _tmp11_;
			FolksImFieldDetails* _tmp12_;
			gconstpointer _tmp13_;
			const gchar* _tmp14_;
#line 303 "/run/build/folks/folks/potential-match.vala"
			_tmp8_ = _im_a_it;
#line 303 "/run/build/folks/folks/potential-match.vala"
			if (!gee_iterator_next (_tmp8_)) {
#line 303 "/run/build/folks/folks/potential-match.vala"
				break;
#line 1405 "potential-match.c"
			}
#line 303 "/run/build/folks/folks/potential-match.vala"
			_tmp9_ = _im_a_it;
#line 303 "/run/build/folks/folks/potential-match.vala"
			_tmp10_ = gee_iterator_get (_tmp9_);
#line 303 "/run/build/folks/folks/potential-match.vala"
			im_a = (FolksImFieldDetails*) _tmp10_;
#line 305 "/run/build/folks/folks/potential-match.vala"
			_tmp11_ = addrs;
#line 305 "/run/build/folks/folks/potential-match.vala"
			_tmp12_ = im_a;
#line 305 "/run/build/folks/folks/potential-match.vala"
			_tmp13_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) _tmp12_);
#line 305 "/run/build/folks/folks/potential-match.vala"
			_tmp14_ = _tmp13_;
#line 305 "/run/build/folks/folks/potential-match.vala"
			gee_abstract_collection_add ((GeeAbstractCollection*) _tmp11_, (const gchar*) _tmp14_);
#line 303 "/run/build/folks/folks/potential-match.vala"
			_g_object_unref0 (im_a);
#line 1425 "potential-match.c"
		}
#line 303 "/run/build/folks/folks/potential-match.vala"
		_g_object_unref0 (_im_a_it);
#line 1429 "potential-match.c"
	}
	{
		GeeIterator* _im_b_it = NULL;
		FolksIndividual* _tmp15_;
		GeeMultiMap* _tmp16_;
		GeeMultiMap* _tmp17_;
		GeeCollection* _tmp18_;
		GeeCollection* _tmp19_;
		GeeIterator* _tmp20_;
		GeeIterator* _tmp21_;
#line 308 "/run/build/folks/folks/potential-match.vala"
		_tmp15_ = self->priv->_individual_b;
#line 308 "/run/build/folks/folks/potential-match.vala"
		_tmp16_ = folks_im_details_get_im_addresses ((FolksImDetails*) _tmp15_);
#line 308 "/run/build/folks/folks/potential-match.vala"
		_tmp17_ = _tmp16_;
#line 308 "/run/build/folks/folks/potential-match.vala"
		_tmp18_ = gee_multi_map_get_values (_tmp17_);
#line 308 "/run/build/folks/folks/potential-match.vala"
		_tmp19_ = _tmp18_;
#line 308 "/run/build/folks/folks/potential-match.vala"
		_tmp20_ = gee_iterable_iterator ((GeeIterable*) _tmp19_);
#line 308 "/run/build/folks/folks/potential-match.vala"
		_tmp21_ = _tmp20_;
#line 308 "/run/build/folks/folks/potential-match.vala"
		_g_object_unref0 (_tmp19_);
#line 308 "/run/build/folks/folks/potential-match.vala"
		_im_b_it = _tmp21_;
#line 308 "/run/build/folks/folks/potential-match.vala"
		while (TRUE) {
#line 1460 "potential-match.c"
			GeeIterator* _tmp22_;
			FolksImFieldDetails* im_b = NULL;
			GeeIterator* _tmp23_;
			gpointer _tmp24_;
			GeeHashSet* _tmp25_;
			FolksImFieldDetails* _tmp26_;
			gconstpointer _tmp27_;
			const gchar* _tmp28_;
#line 308 "/run/build/folks/folks/potential-match.vala"
			_tmp22_ = _im_b_it;
#line 308 "/run/build/folks/folks/potential-match.vala"
			if (!gee_iterator_next (_tmp22_)) {
#line 308 "/run/build/folks/folks/potential-match.vala"
				break;
#line 1475 "potential-match.c"
			}
#line 308 "/run/build/folks/folks/potential-match.vala"
			_tmp23_ = _im_b_it;
#line 308 "/run/build/folks/folks/potential-match.vala"
			_tmp24_ = gee_iterator_get (_tmp23_);
#line 308 "/run/build/folks/folks/potential-match.vala"
			im_b = (FolksImFieldDetails*) _tmp24_;
#line 310 "/run/build/folks/folks/potential-match.vala"
			_tmp25_ = addrs;
#line 310 "/run/build/folks/folks/potential-match.vala"
			_tmp26_ = im_b;
#line 310 "/run/build/folks/folks/potential-match.vala"
			_tmp27_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) _tmp26_);
#line 310 "/run/build/folks/folks/potential-match.vala"
			_tmp28_ = _tmp27_;
#line 310 "/run/build/folks/folks/potential-match.vala"
			if (gee_abstract_collection_contains ((GeeAbstractCollection*) _tmp25_, (const gchar*) _tmp28_) == TRUE) {
#line 312 "/run/build/folks/folks/potential-match.vala"
				result = FOLKS_MATCH_RESULT_HIGH;
#line 312 "/run/build/folks/folks/potential-match.vala"
				_g_object_unref0 (im_b);
#line 312 "/run/build/folks/folks/potential-match.vala"
				_g_object_unref0 (_im_b_it);
#line 312 "/run/build/folks/folks/potential-match.vala"
				_g_object_unref0 (addrs);
#line 312 "/run/build/folks/folks/potential-match.vala"
				return result;
#line 1503 "potential-match.c"
			}
#line 308 "/run/build/folks/folks/potential-match.vala"
			_g_object_unref0 (im_b);
#line 1507 "potential-match.c"
		}
#line 308 "/run/build/folks/folks/potential-match.vala"
		_g_object_unref0 (_im_b_it);
#line 1511 "potential-match.c"
	}
#line 316 "/run/build/folks/folks/potential-match.vala"
	result = old_result;
#line 316 "/run/build/folks/folks/potential-match.vala"
	_g_object_unref0 (addrs);
#line 316 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 1519 "potential-match.c"
}


/**
   * Inspect email addresses.
   *
   * @since 0.5.0
   */
static FolksMatchResult
_folks_potential_match_inspect_emails (FolksPotentialMatch* self,
                                       FolksMatchResult old_result)
{
	FolksMatchResult result = 0;
	GeeSet* set_a = NULL;
	FolksIndividual* _tmp0_;
	GeeSet* _tmp1_;
	GeeSet* _tmp2_;
	GeeSet* _tmp3_;
	GeeSet* set_b = NULL;
	FolksIndividual* _tmp4_;
	GeeSet* _tmp5_;
	GeeSet* _tmp6_;
	GeeSet* _tmp7_;
	FolksMatchResult _result_ = 0;
#line 324 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 326 "/run/build/folks/folks/potential-match.vala"
	_tmp0_ = self->priv->_individual_a;
#line 326 "/run/build/folks/folks/potential-match.vala"
	_tmp1_ = folks_email_details_get_email_addresses ((FolksEmailDetails*) _tmp0_);
#line 326 "/run/build/folks/folks/potential-match.vala"
	_tmp2_ = _tmp1_;
#line 326 "/run/build/folks/folks/potential-match.vala"
	_tmp3_ = _g_object_ref0 (_tmp2_);
#line 326 "/run/build/folks/folks/potential-match.vala"
	set_a = _tmp3_;
#line 327 "/run/build/folks/folks/potential-match.vala"
	_tmp4_ = self->priv->_individual_b;
#line 327 "/run/build/folks/folks/potential-match.vala"
	_tmp5_ = folks_email_details_get_email_addresses ((FolksEmailDetails*) _tmp4_);
#line 327 "/run/build/folks/folks/potential-match.vala"
	_tmp6_ = _tmp5_;
#line 327 "/run/build/folks/folks/potential-match.vala"
	_tmp7_ = _g_object_ref0 (_tmp6_);
#line 327 "/run/build/folks/folks/potential-match.vala"
	set_b = _tmp7_;
#line 328 "/run/build/folks/folks/potential-match.vala"
	_result_ = old_result;
#line 1568 "potential-match.c"
	{
		GeeIterator* _fd_a_it = NULL;
		GeeSet* _tmp8_;
		GeeIterator* _tmp9_;
#line 330 "/run/build/folks/folks/potential-match.vala"
		_tmp8_ = set_a;
#line 330 "/run/build/folks/folks/potential-match.vala"
		_tmp9_ = gee_iterable_iterator ((GeeIterable*) _tmp8_);
#line 330 "/run/build/folks/folks/potential-match.vala"
		_fd_a_it = _tmp9_;
#line 330 "/run/build/folks/folks/potential-match.vala"
		while (TRUE) {
#line 1581 "potential-match.c"
			GeeIterator* _tmp10_;
			FolksEmailFieldDetails* fd_a = NULL;
			GeeIterator* _tmp11_;
			gpointer _tmp12_;
			gchar** email_split_a = NULL;
			FolksEmailFieldDetails* _tmp13_;
			gconstpointer _tmp14_;
			const gchar* _tmp15_;
			gchar** _tmp16_;
			gchar** _tmp17_;
			gint email_split_a_length1;
			gint _email_split_a_size_;
			gchar** _tmp18_;
			gint _tmp18__length1;
			gchar** tokens_a = NULL;
			gchar** _tmp22_;
			gint _tmp22__length1;
			const gchar* _tmp23_;
			gchar** _tmp24_;
			gchar** _tmp25_;
			gint tokens_a_length1;
			gint _tokens_a_size_;
#line 330 "/run/build/folks/folks/potential-match.vala"
			_tmp10_ = _fd_a_it;
#line 330 "/run/build/folks/folks/potential-match.vala"
			if (!gee_iterator_next (_tmp10_)) {
#line 330 "/run/build/folks/folks/potential-match.vala"
				break;
#line 1610 "potential-match.c"
			}
#line 330 "/run/build/folks/folks/potential-match.vala"
			_tmp11_ = _fd_a_it;
#line 330 "/run/build/folks/folks/potential-match.vala"
			_tmp12_ = gee_iterator_get (_tmp11_);
#line 330 "/run/build/folks/folks/potential-match.vala"
			fd_a = (FolksEmailFieldDetails*) _tmp12_;
#line 332 "/run/build/folks/folks/potential-match.vala"
			_tmp13_ = fd_a;
#line 332 "/run/build/folks/folks/potential-match.vala"
			_tmp14_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) _tmp13_);
#line 332 "/run/build/folks/folks/potential-match.vala"
			_tmp15_ = _tmp14_;
#line 332 "/run/build/folks/folks/potential-match.vala"
			_tmp17_ = _tmp16_ = g_strsplit ((const gchar*) _tmp15_, "@", 0);
#line 332 "/run/build/folks/folks/potential-match.vala"
			email_split_a = _tmp17_;
#line 332 "/run/build/folks/folks/potential-match.vala"
			email_split_a_length1 = _vala_array_length (_tmp16_);
#line 332 "/run/build/folks/folks/potential-match.vala"
			_email_split_a_size_ = email_split_a_length1;
#line 335 "/run/build/folks/folks/potential-match.vala"
			_tmp18_ = email_split_a;
#line 335 "/run/build/folks/folks/potential-match.vala"
			_tmp18__length1 = email_split_a_length1;
#line 335 "/run/build/folks/folks/potential-match.vala"
			if (_tmp18__length1 < 2) {
#line 1638 "potential-match.c"
				FolksEmailFieldDetails* _tmp19_;
				gconstpointer _tmp20_;
				const gchar* _tmp21_;
#line 337 "/run/build/folks/folks/potential-match.vala"
				_tmp19_ = fd_a;
#line 337 "/run/build/folks/folks/potential-match.vala"
				_tmp20_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) _tmp19_);
#line 337 "/run/build/folks/folks/potential-match.vala"
				_tmp21_ = _tmp20_;
#line 337 "/run/build/folks/folks/potential-match.vala"
				g_warning ("Invalid e-mail address when looking for potential " "match: %s", (const gchar*) _tmp21_);
#line 339 "/run/build/folks/folks/potential-match.vala"
				email_split_a = (_vala_array_free (email_split_a, email_split_a_length1, (GDestroyNotify) g_free), NULL);
#line 339 "/run/build/folks/folks/potential-match.vala"
				_g_object_unref0 (fd_a);
#line 339 "/run/build/folks/folks/potential-match.vala"
				continue;
#line 1656 "potential-match.c"
			}
#line 342 "/run/build/folks/folks/potential-match.vala"
			_tmp22_ = email_split_a;
#line 342 "/run/build/folks/folks/potential-match.vala"
			_tmp22__length1 = email_split_a_length1;
#line 342 "/run/build/folks/folks/potential-match.vala"
			_tmp23_ = _tmp22_[0];
#line 342 "/run/build/folks/folks/potential-match.vala"
			_tmp25_ = _tmp24_ = g_strsplit_set (_tmp23_, FOLKS_POTENTIAL_MATCH__SEPARATORS, 0);
#line 342 "/run/build/folks/folks/potential-match.vala"
			tokens_a = _tmp25_;
#line 342 "/run/build/folks/folks/potential-match.vala"
			tokens_a_length1 = _vala_array_length (_tmp24_);
#line 342 "/run/build/folks/folks/potential-match.vala"
			_tokens_a_size_ = tokens_a_length1;
#line 1672 "potential-match.c"
			{
				GeeIterator* _fd_b_it = NULL;
				GeeSet* _tmp26_;
				GeeIterator* _tmp27_;
#line 345 "/run/build/folks/folks/potential-match.vala"
				_tmp26_ = set_b;
#line 345 "/run/build/folks/folks/potential-match.vala"
				_tmp27_ = gee_iterable_iterator ((GeeIterable*) _tmp26_);
#line 345 "/run/build/folks/folks/potential-match.vala"
				_fd_b_it = _tmp27_;
#line 345 "/run/build/folks/folks/potential-match.vala"
				while (TRUE) {
#line 1685 "potential-match.c"
					GeeIterator* _tmp28_;
					FolksEmailFieldDetails* fd_b = NULL;
					GeeIterator* _tmp29_;
					gpointer _tmp30_;
					gchar** email_split_b = NULL;
					FolksEmailFieldDetails* _tmp31_;
					gconstpointer _tmp32_;
					const gchar* _tmp33_;
					gchar** _tmp34_;
					gchar** _tmp35_;
					gint email_split_b_length1;
					gint _email_split_b_size_;
					gchar** _tmp36_;
					gint _tmp36__length1;
					FolksEmailFieldDetails* _tmp40_;
					gconstpointer _tmp41_;
					const gchar* _tmp42_;
					FolksEmailFieldDetails* _tmp43_;
					gconstpointer _tmp44_;
					const gchar* _tmp45_;
#line 345 "/run/build/folks/folks/potential-match.vala"
					_tmp28_ = _fd_b_it;
#line 345 "/run/build/folks/folks/potential-match.vala"
					if (!gee_iterator_next (_tmp28_)) {
#line 345 "/run/build/folks/folks/potential-match.vala"
						break;
#line 1712 "potential-match.c"
					}
#line 345 "/run/build/folks/folks/potential-match.vala"
					_tmp29_ = _fd_b_it;
#line 345 "/run/build/folks/folks/potential-match.vala"
					_tmp30_ = gee_iterator_get (_tmp29_);
#line 345 "/run/build/folks/folks/potential-match.vala"
					fd_b = (FolksEmailFieldDetails*) _tmp30_;
#line 347 "/run/build/folks/folks/potential-match.vala"
					_tmp31_ = fd_b;
#line 347 "/run/build/folks/folks/potential-match.vala"
					_tmp32_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) _tmp31_);
#line 347 "/run/build/folks/folks/potential-match.vala"
					_tmp33_ = _tmp32_;
#line 347 "/run/build/folks/folks/potential-match.vala"
					_tmp35_ = _tmp34_ = g_strsplit ((const gchar*) _tmp33_, "@", 0);
#line 347 "/run/build/folks/folks/potential-match.vala"
					email_split_b = _tmp35_;
#line 347 "/run/build/folks/folks/potential-match.vala"
					email_split_b_length1 = _vala_array_length (_tmp34_);
#line 347 "/run/build/folks/folks/potential-match.vala"
					_email_split_b_size_ = email_split_b_length1;
#line 350 "/run/build/folks/folks/potential-match.vala"
					_tmp36_ = email_split_b;
#line 350 "/run/build/folks/folks/potential-match.vala"
					_tmp36__length1 = email_split_b_length1;
#line 350 "/run/build/folks/folks/potential-match.vala"
					if (_tmp36__length1 < 2) {
#line 1740 "potential-match.c"
						FolksEmailFieldDetails* _tmp37_;
						gconstpointer _tmp38_;
						const gchar* _tmp39_;
#line 352 "/run/build/folks/folks/potential-match.vala"
						_tmp37_ = fd_b;
#line 352 "/run/build/folks/folks/potential-match.vala"
						_tmp38_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) _tmp37_);
#line 352 "/run/build/folks/folks/potential-match.vala"
						_tmp39_ = _tmp38_;
#line 352 "/run/build/folks/folks/potential-match.vala"
						g_warning ("Invalid e-mail address when looking for " "potential match: %s", (const gchar*) _tmp39_);
#line 354 "/run/build/folks/folks/potential-match.vala"
						email_split_b = (_vala_array_free (email_split_b, email_split_b_length1, (GDestroyNotify) g_free), NULL);
#line 354 "/run/build/folks/folks/potential-match.vala"
						_g_object_unref0 (fd_b);
#line 354 "/run/build/folks/folks/potential-match.vala"
						continue;
#line 1758 "potential-match.c"
					}
#line 357 "/run/build/folks/folks/potential-match.vala"
					_tmp40_ = fd_a;
#line 357 "/run/build/folks/folks/potential-match.vala"
					_tmp41_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) _tmp40_);
#line 357 "/run/build/folks/folks/potential-match.vala"
					_tmp42_ = _tmp41_;
#line 357 "/run/build/folks/folks/potential-match.vala"
					_tmp43_ = fd_b;
#line 357 "/run/build/folks/folks/potential-match.vala"
					_tmp44_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) _tmp43_);
#line 357 "/run/build/folks/folks/potential-match.vala"
					_tmp45_ = _tmp44_;
#line 357 "/run/build/folks/folks/potential-match.vala"
					if (g_strcmp0 ((const gchar*) _tmp42_, (const gchar*) _tmp45_) == 0) {
#line 1774 "potential-match.c"
						GeeSet* _tmp46_;
						gchar** _tmp47_;
						gint _tmp47__length1;
						const gchar* _tmp48_;
#line 359 "/run/build/folks/folks/potential-match.vala"
						_tmp46_ = folks_potential_match_known_email_aliases;
#line 359 "/run/build/folks/folks/potential-match.vala"
						_tmp47_ = email_split_a;
#line 359 "/run/build/folks/folks/potential-match.vala"
						_tmp47__length1 = email_split_a_length1;
#line 359 "/run/build/folks/folks/potential-match.vala"
						_tmp48_ = _tmp47_[0];
#line 359 "/run/build/folks/folks/potential-match.vala"
						if (gee_collection_contains ((GeeCollection*) _tmp46_, _tmp48_) == TRUE) {
#line 1789 "potential-match.c"
							FolksMatchResult _tmp49_;
#line 362 "/run/build/folks/folks/potential-match.vala"
							_tmp49_ = _result_;
#line 362 "/run/build/folks/folks/potential-match.vala"
							if (_tmp49_ < FOLKS_MATCH_RESULT_HIGH) {
#line 364 "/run/build/folks/folks/potential-match.vala"
								_result_ = FOLKS_MATCH_RESULT_LOW;
#line 1797 "potential-match.c"
							}
						} else {
#line 369 "/run/build/folks/folks/potential-match.vala"
							result = FOLKS_MATCH_RESULT_HIGH;
#line 369 "/run/build/folks/folks/potential-match.vala"
							email_split_b = (_vala_array_free (email_split_b, email_split_b_length1, (GDestroyNotify) g_free), NULL);
#line 369 "/run/build/folks/folks/potential-match.vala"
							_g_object_unref0 (fd_b);
#line 369 "/run/build/folks/folks/potential-match.vala"
							_g_object_unref0 (_fd_b_it);
#line 369 "/run/build/folks/folks/potential-match.vala"
							tokens_a = (_vala_array_free (tokens_a, tokens_a_length1, (GDestroyNotify) g_free), NULL);
#line 369 "/run/build/folks/folks/potential-match.vala"
							email_split_a = (_vala_array_free (email_split_a, email_split_a_length1, (GDestroyNotify) g_free), NULL);
#line 369 "/run/build/folks/folks/potential-match.vala"
							_g_object_unref0 (fd_a);
#line 369 "/run/build/folks/folks/potential-match.vala"
							_g_object_unref0 (_fd_a_it);
#line 369 "/run/build/folks/folks/potential-match.vala"
							_g_object_unref0 (set_b);
#line 369 "/run/build/folks/folks/potential-match.vala"
							_g_object_unref0 (set_a);
#line 369 "/run/build/folks/folks/potential-match.vala"
							return result;
#line 1822 "potential-match.c"
						}
					} else {
						gchar** tokens_b = NULL;
						gchar** _tmp50_;
						gint _tmp50__length1;
						const gchar* _tmp51_;
						gchar** _tmp52_;
						gchar** _tmp53_;
						gint tokens_b_length1;
						gint _tokens_b_size_;
						gchar** _tmp54_;
						gint _tmp54__length1;
						gchar** _tmp55_;
						gint _tmp55__length1;
#line 374 "/run/build/folks/folks/potential-match.vala"
						_tmp50_ = email_split_b;
#line 374 "/run/build/folks/folks/potential-match.vala"
						_tmp50__length1 = email_split_b_length1;
#line 374 "/run/build/folks/folks/potential-match.vala"
						_tmp51_ = _tmp50_[0];
#line 374 "/run/build/folks/folks/potential-match.vala"
						_tmp53_ = _tmp52_ = g_strsplit_set (_tmp51_, FOLKS_POTENTIAL_MATCH__SEPARATORS, 0);
#line 374 "/run/build/folks/folks/potential-match.vala"
						tokens_b = _tmp53_;
#line 374 "/run/build/folks/folks/potential-match.vala"
						tokens_b_length1 = _vala_array_length (_tmp52_);
#line 374 "/run/build/folks/folks/potential-match.vala"
						_tokens_b_size_ = tokens_b_length1;
#line 378 "/run/build/folks/folks/potential-match.vala"
						_tmp54_ = tokens_a;
#line 378 "/run/build/folks/folks/potential-match.vala"
						_tmp54__length1 = tokens_a_length1;
#line 378 "/run/build/folks/folks/potential-match.vala"
						_tmp55_ = tokens_b;
#line 378 "/run/build/folks/folks/potential-match.vala"
						_tmp55__length1 = tokens_b_length1;
#line 378 "/run/build/folks/folks/potential-match.vala"
						if (_folks_potential_match_check_initials_expansion (self, _tmp54_, _tmp54__length1, _tmp55_, _tmp55__length1)) {
#line 380 "/run/build/folks/folks/potential-match.vala"
							_result_ = FOLKS_MATCH_RESULT_MEDIUM;
#line 1863 "potential-match.c"
						} else {
							gchar** _tmp56_;
							gint _tmp56__length1;
							gchar** _tmp57_;
							gint _tmp57__length1;
#line 386 "/run/build/folks/folks/potential-match.vala"
							_tmp56_ = tokens_a;
#line 386 "/run/build/folks/folks/potential-match.vala"
							_tmp56__length1 = tokens_a_length1;
#line 386 "/run/build/folks/folks/potential-match.vala"
							_tmp57_ = tokens_b;
#line 386 "/run/build/folks/folks/potential-match.vala"
							_tmp57__length1 = tokens_b_length1;
#line 386 "/run/build/folks/folks/potential-match.vala"
							if (_folks_potential_match_match_tokens (self, _tmp56_, _tmp56__length1, _tmp57_, _tmp57__length1)) {
#line 388 "/run/build/folks/folks/potential-match.vala"
								_result_ = FOLKS_MATCH_RESULT_MEDIUM;
#line 1881 "potential-match.c"
							}
						}
#line 357 "/run/build/folks/folks/potential-match.vala"
						tokens_b = (_vala_array_free (tokens_b, tokens_b_length1, (GDestroyNotify) g_free), NULL);
#line 1886 "potential-match.c"
					}
#line 345 "/run/build/folks/folks/potential-match.vala"
					email_split_b = (_vala_array_free (email_split_b, email_split_b_length1, (GDestroyNotify) g_free), NULL);
#line 345 "/run/build/folks/folks/potential-match.vala"
					_g_object_unref0 (fd_b);
#line 1892 "potential-match.c"
				}
#line 345 "/run/build/folks/folks/potential-match.vala"
				_g_object_unref0 (_fd_b_it);
#line 1896 "potential-match.c"
			}
#line 330 "/run/build/folks/folks/potential-match.vala"
			tokens_a = (_vala_array_free (tokens_a, tokens_a_length1, (GDestroyNotify) g_free), NULL);
#line 330 "/run/build/folks/folks/potential-match.vala"
			email_split_a = (_vala_array_free (email_split_a, email_split_a_length1, (GDestroyNotify) g_free), NULL);
#line 330 "/run/build/folks/folks/potential-match.vala"
			_g_object_unref0 (fd_a);
#line 1904 "potential-match.c"
		}
#line 330 "/run/build/folks/folks/potential-match.vala"
		_g_object_unref0 (_fd_a_it);
#line 1908 "potential-match.c"
	}
#line 394 "/run/build/folks/folks/potential-match.vala"
	result = _result_;
#line 394 "/run/build/folks/folks/potential-match.vala"
	_g_object_unref0 (set_b);
#line 394 "/run/build/folks/folks/potential-match.vala"
	_g_object_unref0 (set_a);
#line 394 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 1918 "potential-match.c"
}


static gboolean
_folks_potential_match_check_initials_expansion (FolksPotentialMatch* self,
                                                 gchar** tokens_a,
                                                 int tokens_a_length1,
                                                 gchar** tokens_b,
                                                 int tokens_b_length1)
{
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
#line 400 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 402 "/run/build/folks/folks/potential-match.vala"
	if (tokens_a_length1 > tokens_b_length1) {
#line 403 "/run/build/folks/folks/potential-match.vala"
		_tmp0_ = tokens_b_length1 == 1;
#line 1937 "potential-match.c"
	} else {
#line 402 "/run/build/folks/folks/potential-match.vala"
		_tmp0_ = FALSE;
#line 1941 "potential-match.c"
	}
#line 402 "/run/build/folks/folks/potential-match.vala"
	if (_tmp0_) {
#line 1945 "potential-match.c"
		const gchar* _tmp1_;
#line 405 "/run/build/folks/folks/potential-match.vala"
		_tmp1_ = tokens_b[0];
#line 405 "/run/build/folks/folks/potential-match.vala"
		result = _folks_potential_match_do_check_initials_expansion (self, tokens_a, tokens_a_length1, _tmp1_);
#line 405 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 1953 "potential-match.c"
	} else {
		gboolean _tmp2_ = FALSE;
#line 407 "/run/build/folks/folks/potential-match.vala"
		if (tokens_b_length1 > tokens_a_length1) {
#line 408 "/run/build/folks/folks/potential-match.vala"
			_tmp2_ = tokens_a_length1 == 1;
#line 1960 "potential-match.c"
		} else {
#line 407 "/run/build/folks/folks/potential-match.vala"
			_tmp2_ = FALSE;
#line 1964 "potential-match.c"
		}
#line 407 "/run/build/folks/folks/potential-match.vala"
		if (_tmp2_) {
#line 1968 "potential-match.c"
			const gchar* _tmp3_;
#line 410 "/run/build/folks/folks/potential-match.vala"
			_tmp3_ = tokens_a[0];
#line 410 "/run/build/folks/folks/potential-match.vala"
			result = _folks_potential_match_do_check_initials_expansion (self, tokens_b, tokens_b_length1, _tmp3_);
#line 410 "/run/build/folks/folks/potential-match.vala"
			return result;
#line 1976 "potential-match.c"
		}
	}
#line 412 "/run/build/folks/folks/potential-match.vala"
	result = FALSE;
#line 412 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 1983 "potential-match.c"
}


static gchar
string_get (const gchar* self,
            glong index)
{
	gchar result = '\0';
	gchar _tmp0_;
#line 1180 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, '\0');
#line 1181 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = ((gchar*) self)[index];
#line 1181 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _tmp0_;
#line 1181 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 2001 "potential-match.c"
}


static gboolean
_folks_potential_match_do_check_initials_expansion (FolksPotentialMatch* self,
                                                    gchar** expanded_name,
                                                    int expanded_name_length1,
                                                    const gchar* initials)
{
	gboolean result = FALSE;
	gint _tmp0_;
	gint _tmp1_;
#line 415 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 415 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (initials != NULL, FALSE);
#line 418 "/run/build/folks/folks/potential-match.vala"
	_tmp0_ = strlen (initials);
#line 418 "/run/build/folks/folks/potential-match.vala"
	_tmp1_ = _tmp0_;
#line 418 "/run/build/folks/folks/potential-match.vala"
	if (expanded_name_length1 != _tmp1_) {
#line 419 "/run/build/folks/folks/potential-match.vala"
		result = FALSE;
#line 419 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 2028 "potential-match.c"
	}
	{
		gint i = 0;
#line 421 "/run/build/folks/folks/potential-match.vala"
		i = 0;
#line 2034 "potential-match.c"
		{
			gboolean _tmp2_ = FALSE;
#line 421 "/run/build/folks/folks/potential-match.vala"
			_tmp2_ = TRUE;
#line 421 "/run/build/folks/folks/potential-match.vala"
			while (TRUE) {
#line 2041 "potential-match.c"
				gint _tmp4_;
				gint _tmp5_;
				const gchar* _tmp6_;
				gint _tmp7_;
#line 421 "/run/build/folks/folks/potential-match.vala"
				if (!_tmp2_) {
#line 2048 "potential-match.c"
					gint _tmp3_;
#line 421 "/run/build/folks/folks/potential-match.vala"
					_tmp3_ = i;
#line 421 "/run/build/folks/folks/potential-match.vala"
					i = _tmp3_ + 1;
#line 2054 "potential-match.c"
				}
#line 421 "/run/build/folks/folks/potential-match.vala"
				_tmp2_ = FALSE;
#line 421 "/run/build/folks/folks/potential-match.vala"
				_tmp4_ = i;
#line 421 "/run/build/folks/folks/potential-match.vala"
				if (!(_tmp4_ < expanded_name_length1)) {
#line 421 "/run/build/folks/folks/potential-match.vala"
					break;
#line 2064 "potential-match.c"
				}
#line 423 "/run/build/folks/folks/potential-match.vala"
				_tmp5_ = i;
#line 423 "/run/build/folks/folks/potential-match.vala"
				_tmp6_ = expanded_name[_tmp5_];
#line 423 "/run/build/folks/folks/potential-match.vala"
				_tmp7_ = i;
#line 423 "/run/build/folks/folks/potential-match.vala"
				if (string_get (_tmp6_, (glong) 0) != string_get (initials, (glong) _tmp7_)) {
#line 424 "/run/build/folks/folks/potential-match.vala"
					result = FALSE;
#line 424 "/run/build/folks/folks/potential-match.vala"
					return result;
#line 2078 "potential-match.c"
				}
			}
		}
	}
#line 427 "/run/build/folks/folks/potential-match.vala"
	result = TRUE;
#line 427 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 2087 "potential-match.c"
}


static gboolean
_folks_potential_match_match_tokens (FolksPotentialMatch* self,
                                     gchar** tokens_a,
                                     int tokens_a_length1,
                                     gchar** tokens_b,
                                     int tokens_b_length1)
{
	gboolean result = FALSE;
#line 433 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 437 "/run/build/folks/folks/potential-match.vala"
	if (tokens_a_length1 > tokens_b_length1) {
#line 438 "/run/build/folks/folks/potential-match.vala"
		result = _folks_potential_match_do_match_tokens (self, tokens_a, tokens_a_length1, tokens_b, tokens_b_length1);
#line 438 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 2107 "potential-match.c"
	} else {
#line 440 "/run/build/folks/folks/potential-match.vala"
		result = _folks_potential_match_do_match_tokens (self, tokens_b, tokens_b_length1, tokens_a, tokens_a_length1);
#line 440 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 2113 "potential-match.c"
	}
}


static gboolean
_folks_potential_match_do_match_tokens (FolksPotentialMatch* self,
                                        gchar** bigger_set,
                                        int bigger_set_length1,
                                        gchar** smaller_set,
                                        int smaller_set_length1)
{
	gboolean result = FALSE;
#line 443 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 2128 "potential-match.c"
	{
		gint i = 0;
#line 445 "/run/build/folks/folks/potential-match.vala"
		i = 0;
#line 2133 "potential-match.c"
		{
			gboolean _tmp0_ = FALSE;
#line 445 "/run/build/folks/folks/potential-match.vala"
			_tmp0_ = TRUE;
#line 445 "/run/build/folks/folks/potential-match.vala"
			while (TRUE) {
#line 2140 "potential-match.c"
				gint _tmp2_;
#line 445 "/run/build/folks/folks/potential-match.vala"
				if (!_tmp0_) {
#line 2144 "potential-match.c"
					gint _tmp1_;
#line 445 "/run/build/folks/folks/potential-match.vala"
					_tmp1_ = i;
#line 445 "/run/build/folks/folks/potential-match.vala"
					i = _tmp1_ + 1;
#line 2150 "potential-match.c"
				}
#line 445 "/run/build/folks/folks/potential-match.vala"
				_tmp0_ = FALSE;
#line 445 "/run/build/folks/folks/potential-match.vala"
				_tmp2_ = i;
#line 445 "/run/build/folks/folks/potential-match.vala"
				if (!(_tmp2_ < smaller_set_length1)) {
#line 445 "/run/build/folks/folks/potential-match.vala"
					break;
#line 2160 "potential-match.c"
				}
				{
					gint j = 0;
#line 447 "/run/build/folks/folks/potential-match.vala"
					j = 0;
#line 2166 "potential-match.c"
					{
						gboolean _tmp3_ = FALSE;
#line 447 "/run/build/folks/folks/potential-match.vala"
						_tmp3_ = TRUE;
#line 447 "/run/build/folks/folks/potential-match.vala"
						while (TRUE) {
#line 2173 "potential-match.c"
							gint _tmp5_;
							gint _tmp6_;
							const gchar* _tmp7_;
							gint _tmp8_;
							const gchar* _tmp9_;
#line 447 "/run/build/folks/folks/potential-match.vala"
							if (!_tmp3_) {
#line 2181 "potential-match.c"
								gint _tmp4_;
#line 447 "/run/build/folks/folks/potential-match.vala"
								_tmp4_ = j;
#line 447 "/run/build/folks/folks/potential-match.vala"
								j = _tmp4_ + 1;
#line 2187 "potential-match.c"
							}
#line 447 "/run/build/folks/folks/potential-match.vala"
							_tmp3_ = FALSE;
#line 447 "/run/build/folks/folks/potential-match.vala"
							_tmp5_ = j;
#line 447 "/run/build/folks/folks/potential-match.vala"
							if (!(_tmp5_ < bigger_set_length1)) {
#line 447 "/run/build/folks/folks/potential-match.vala"
								break;
#line 2197 "potential-match.c"
							}
#line 449 "/run/build/folks/folks/potential-match.vala"
							_tmp6_ = i;
#line 449 "/run/build/folks/folks/potential-match.vala"
							_tmp7_ = smaller_set[_tmp6_];
#line 449 "/run/build/folks/folks/potential-match.vala"
							_tmp8_ = j;
#line 449 "/run/build/folks/folks/potential-match.vala"
							_tmp9_ = bigger_set[_tmp8_];
#line 449 "/run/build/folks/folks/potential-match.vala"
							if (g_strcmp0 (_tmp7_, _tmp9_) == 0) {
#line 450 "/run/build/folks/folks/potential-match.vala"
								result = TRUE;
#line 450 "/run/build/folks/folks/potential-match.vala"
								return result;
#line 2213 "potential-match.c"
							}
						}
					}
				}
			}
		}
	}
#line 454 "/run/build/folks/folks/potential-match.vala"
	result = FALSE;
#line 454 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 2225 "potential-match.c"
}


static FolksMatchResult
_folks_potential_match_inc_match_level (FolksPotentialMatch* self,
                                        FolksMatchResult current_level,
                                        gint times)
{
	FolksMatchResult result = 0;
	FolksMatchResult ret = 0;
	FolksMatchResult _tmp0_;
#line 457 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 460 "/run/build/folks/folks/potential-match.vala"
	ret = current_level + times;
#line 461 "/run/build/folks/folks/potential-match.vala"
	_tmp0_ = ret;
#line 461 "/run/build/folks/folks/potential-match.vala"
	if (_tmp0_ > FOLKS_MATCH_RESULT_MAX) {
#line 462 "/run/build/folks/folks/potential-match.vala"
		ret = FOLKS_MATCH_RESULT_MAX;
#line 2247 "potential-match.c"
	}
#line 464 "/run/build/folks/folks/potential-match.vala"
	result = ret;
#line 464 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 2253 "potential-match.c"
}


static gboolean
_folks_potential_match_look_alike_or_identical (FolksPotentialMatch* self,
                                                const gchar* a,
                                                const gchar* b,
                                                gboolean* exact)
{
	gboolean _vala_exact = FALSE;
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp2_ = FALSE;
	gboolean _tmp3_;
	gboolean _tmp4_;
	gunichar* a_stripped = NULL;
	gint _tmp5_ = 0;
	gunichar* _tmp6_;
	gint a_stripped_length1;
	gint _a_stripped_size_;
	gunichar* b_stripped = NULL;
	gint _tmp7_ = 0;
	gunichar* _tmp8_;
	gint b_stripped_length1;
	gint _b_stripped_size_;
	gdouble jaro_dist = 0.0;
	gunichar* _tmp9_;
	gint _tmp9__length1;
	gunichar* _tmp10_;
	gint _tmp10__length1;
	gdouble _tmp11_;
	gdouble _tmp12_;
	gdouble _tmp13_;
#line 467 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 469 "/run/build/folks/folks/potential-match.vala"
	_vala_exact = FALSE;
#line 470 "/run/build/folks/folks/potential-match.vala"
	if (a == NULL) {
#line 470 "/run/build/folks/folks/potential-match.vala"
		_tmp2_ = TRUE;
#line 2296 "potential-match.c"
	} else {
#line 470 "/run/build/folks/folks/potential-match.vala"
		_tmp2_ = g_strcmp0 (a, "") == 0;
#line 2300 "potential-match.c"
	}
#line 470 "/run/build/folks/folks/potential-match.vala"
	if (_tmp2_) {
#line 470 "/run/build/folks/folks/potential-match.vala"
		_tmp1_ = TRUE;
#line 2306 "potential-match.c"
	} else {
#line 470 "/run/build/folks/folks/potential-match.vala"
		_tmp1_ = b == NULL;
#line 2310 "potential-match.c"
	}
#line 470 "/run/build/folks/folks/potential-match.vala"
	if (_tmp1_) {
#line 470 "/run/build/folks/folks/potential-match.vala"
		_tmp0_ = TRUE;
#line 2316 "potential-match.c"
	} else {
#line 470 "/run/build/folks/folks/potential-match.vala"
		_tmp0_ = g_strcmp0 (b, "") == 0;
#line 2320 "potential-match.c"
	}
#line 470 "/run/build/folks/folks/potential-match.vala"
	if (_tmp0_) {
#line 472 "/run/build/folks/folks/potential-match.vala"
		result = FALSE;
#line 472 "/run/build/folks/folks/potential-match.vala"
		if (exact) {
#line 472 "/run/build/folks/folks/potential-match.vala"
			*exact = _vala_exact;
#line 2330 "potential-match.c"
		}
#line 472 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 2334 "potential-match.c"
	}
#line 475 "/run/build/folks/folks/potential-match.vala"
	_tmp3_ = g_utf8_validate (a, (gssize) -1, NULL);
#line 475 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (_tmp3_, FALSE);
#line 476 "/run/build/folks/folks/potential-match.vala"
	_tmp4_ = g_utf8_validate (b, (gssize) -1, NULL);
#line 476 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (_tmp4_, FALSE);
#line 478 "/run/build/folks/folks/potential-match.vala"
	_tmp6_ = _folks_potential_match_strip_string (self, (const gchar*) a, &_tmp5_);
#line 478 "/run/build/folks/folks/potential-match.vala"
	a_stripped = _tmp6_;
#line 478 "/run/build/folks/folks/potential-match.vala"
	a_stripped_length1 = _tmp5_;
#line 478 "/run/build/folks/folks/potential-match.vala"
	_a_stripped_size_ = a_stripped_length1;
#line 479 "/run/build/folks/folks/potential-match.vala"
	_tmp8_ = _folks_potential_match_strip_string (self, (const gchar*) b, &_tmp7_);
#line 479 "/run/build/folks/folks/potential-match.vala"
	b_stripped = _tmp8_;
#line 479 "/run/build/folks/folks/potential-match.vala"
	b_stripped_length1 = _tmp7_;
#line 479 "/run/build/folks/folks/potential-match.vala"
	_b_stripped_size_ = b_stripped_length1;
#line 481 "/run/build/folks/folks/potential-match.vala"
	_tmp9_ = a_stripped;
#line 481 "/run/build/folks/folks/potential-match.vala"
	_tmp9__length1 = a_stripped_length1;
#line 481 "/run/build/folks/folks/potential-match.vala"
	_tmp10_ = b_stripped;
#line 481 "/run/build/folks/folks/potential-match.vala"
	_tmp10__length1 = b_stripped_length1;
#line 481 "/run/build/folks/folks/potential-match.vala"
	jaro_dist = _folks_potential_match_jaro_dist (self, _tmp9_, _tmp9__length1, _tmp10_, _tmp10__length1);
#line 484 "/run/build/folks/folks/potential-match.vala"
	_tmp11_ = jaro_dist;
#line 484 "/run/build/folks/folks/potential-match.vala"
	if (_tmp11_ == 1.0) {
#line 486 "/run/build/folks/folks/potential-match.vala"
		_vala_exact = TRUE;
#line 487 "/run/build/folks/folks/potential-match.vala"
		result = TRUE;
#line 487 "/run/build/folks/folks/potential-match.vala"
		b_stripped = (g_free (b_stripped), NULL);
#line 487 "/run/build/folks/folks/potential-match.vala"
		a_stripped = (g_free (a_stripped), NULL);
#line 487 "/run/build/folks/folks/potential-match.vala"
		if (exact) {
#line 487 "/run/build/folks/folks/potential-match.vala"
			*exact = _vala_exact;
#line 2386 "potential-match.c"
		}
#line 487 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 2390 "potential-match.c"
	}
#line 491 "/run/build/folks/folks/potential-match.vala"
	_tmp12_ = jaro_dist;
#line 491 "/run/build/folks/folks/potential-match.vala"
	_tmp13_ = folks_potential_match__DIST_THRESHOLD;
#line 491 "/run/build/folks/folks/potential-match.vala"
	result = _tmp12_ >= _tmp13_;
#line 491 "/run/build/folks/folks/potential-match.vala"
	b_stripped = (g_free (b_stripped), NULL);
#line 491 "/run/build/folks/folks/potential-match.vala"
	a_stripped = (g_free (a_stripped), NULL);
#line 491 "/run/build/folks/folks/potential-match.vala"
	if (exact) {
#line 491 "/run/build/folks/folks/potential-match.vala"
		*exact = _vala_exact;
#line 2406 "potential-match.c"
	}
#line 491 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 2410 "potential-match.c"
}


static gboolean
_folks_potential_match_look_alike (FolksPotentialMatch* self,
                                   const gchar* a,
                                   const gchar* b)
{
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp2_ = FALSE;
	gboolean _tmp3_;
	gboolean _tmp4_;
	gunichar* a_stripped = NULL;
	gint _tmp5_ = 0;
	gunichar* _tmp6_;
	gint a_stripped_length1;
	gint _a_stripped_size_;
	gunichar* b_stripped = NULL;
	gint _tmp7_ = 0;
	gunichar* _tmp8_;
	gint b_stripped_length1;
	gint _b_stripped_size_;
	gunichar* _tmp9_;
	gint _tmp9__length1;
	gunichar* _tmp10_;
	gint _tmp10__length1;
	gdouble _tmp11_;
#line 494 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 496 "/run/build/folks/folks/potential-match.vala"
	if (a == NULL) {
#line 496 "/run/build/folks/folks/potential-match.vala"
		_tmp2_ = TRUE;
#line 2446 "potential-match.c"
	} else {
#line 496 "/run/build/folks/folks/potential-match.vala"
		_tmp2_ = g_strcmp0 (a, "") == 0;
#line 2450 "potential-match.c"
	}
#line 496 "/run/build/folks/folks/potential-match.vala"
	if (_tmp2_) {
#line 496 "/run/build/folks/folks/potential-match.vala"
		_tmp1_ = TRUE;
#line 2456 "potential-match.c"
	} else {
#line 496 "/run/build/folks/folks/potential-match.vala"
		_tmp1_ = b == NULL;
#line 2460 "potential-match.c"
	}
#line 496 "/run/build/folks/folks/potential-match.vala"
	if (_tmp1_) {
#line 496 "/run/build/folks/folks/potential-match.vala"
		_tmp0_ = TRUE;
#line 2466 "potential-match.c"
	} else {
#line 496 "/run/build/folks/folks/potential-match.vala"
		_tmp0_ = g_strcmp0 (b, "") == 0;
#line 2470 "potential-match.c"
	}
#line 496 "/run/build/folks/folks/potential-match.vala"
	if (_tmp0_) {
#line 498 "/run/build/folks/folks/potential-match.vala"
		result = FALSE;
#line 498 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 2478 "potential-match.c"
	}
#line 501 "/run/build/folks/folks/potential-match.vala"
	_tmp3_ = g_utf8_validate (a, (gssize) -1, NULL);
#line 501 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (_tmp3_, FALSE);
#line 502 "/run/build/folks/folks/potential-match.vala"
	_tmp4_ = g_utf8_validate (b, (gssize) -1, NULL);
#line 502 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (_tmp4_, FALSE);
#line 504 "/run/build/folks/folks/potential-match.vala"
	_tmp6_ = _folks_potential_match_strip_string (self, (const gchar*) a, &_tmp5_);
#line 504 "/run/build/folks/folks/potential-match.vala"
	a_stripped = _tmp6_;
#line 504 "/run/build/folks/folks/potential-match.vala"
	a_stripped_length1 = _tmp5_;
#line 504 "/run/build/folks/folks/potential-match.vala"
	_a_stripped_size_ = a_stripped_length1;
#line 505 "/run/build/folks/folks/potential-match.vala"
	_tmp8_ = _folks_potential_match_strip_string (self, (const gchar*) b, &_tmp7_);
#line 505 "/run/build/folks/folks/potential-match.vala"
	b_stripped = _tmp8_;
#line 505 "/run/build/folks/folks/potential-match.vala"
	b_stripped_length1 = _tmp7_;
#line 505 "/run/build/folks/folks/potential-match.vala"
	_b_stripped_size_ = b_stripped_length1;
#line 508 "/run/build/folks/folks/potential-match.vala"
	_tmp9_ = a_stripped;
#line 508 "/run/build/folks/folks/potential-match.vala"
	_tmp9__length1 = a_stripped_length1;
#line 508 "/run/build/folks/folks/potential-match.vala"
	_tmp10_ = b_stripped;
#line 508 "/run/build/folks/folks/potential-match.vala"
	_tmp10__length1 = b_stripped_length1;
#line 508 "/run/build/folks/folks/potential-match.vala"
	_tmp11_ = folks_potential_match__DIST_THRESHOLD;
#line 508 "/run/build/folks/folks/potential-match.vala"
	result = _folks_potential_match_jaro_dist (self, _tmp9_, _tmp9__length1, _tmp10_, _tmp10__length1) >= _tmp11_;
#line 508 "/run/build/folks/folks/potential-match.vala"
	b_stripped = (g_free (b_stripped), NULL);
#line 508 "/run/build/folks/folks/potential-match.vala"
	a_stripped = (g_free (a_stripped), NULL);
#line 508 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 2522 "potential-match.c"
}


static gdouble
_folks_potential_match_jaro_dist (FolksPotentialMatch* self,
                                  gunichar* s1,
                                  int s1_length1,
                                  gunichar* s2,
                                  int s2_length1)
{
	gdouble result = 0.0;
	gdouble distance = 0.0;
	gint _tmp0_ = 0;
	gint max = 0;
	gint max_dist = 0;
	gint _tmp1_;
	gdouble t = 0.0;
	gdouble m = 0.0;
	gint _tmp2_;
	gdouble _tmp3_ = 0.0;
	gint _tmp4_;
	gdouble len_s1 = 0.0;
	gdouble len_s2 = 0.0;
	gdouble a = 0.0;
	gdouble _tmp5_;
	gdouble _tmp6_;
	gdouble b = 0.0;
	gdouble _tmp7_;
	gdouble _tmp8_;
	gdouble c = 0.0;
	gdouble _tmp9_;
	gdouble _tmp13_;
	gdouble _tmp14_;
	gdouble _tmp15_;
	gdouble _tmp16_;
	gdouble _tmp17_;
	gdouble _tmp18_;
#line 521 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, 0.0);
#line 524 "/run/build/folks/folks/potential-match.vala"
	if (s1_length1 > s2_length1) {
#line 524 "/run/build/folks/folks/potential-match.vala"
		_tmp0_ = s1_length1;
#line 2566 "potential-match.c"
	} else {
#line 524 "/run/build/folks/folks/potential-match.vala"
		_tmp0_ = s2_length1;
#line 2570 "potential-match.c"
	}
#line 524 "/run/build/folks/folks/potential-match.vala"
	max = _tmp0_;
#line 525 "/run/build/folks/folks/potential-match.vala"
	_tmp1_ = max;
#line 525 "/run/build/folks/folks/potential-match.vala"
	max_dist = (_tmp1_ / 2) - 1;
#line 527 "/run/build/folks/folks/potential-match.vala"
	_tmp2_ = max_dist;
#line 527 "/run/build/folks/folks/potential-match.vala"
	_tmp4_ = _folks_potential_match_matches (self, s1, s1_length1, s2, s2_length1, _tmp2_, &_tmp3_);
#line 527 "/run/build/folks/folks/potential-match.vala"
	t = _tmp3_;
#line 527 "/run/build/folks/folks/potential-match.vala"
	m = (gdouble) _tmp4_;
#line 528 "/run/build/folks/folks/potential-match.vala"
	len_s1 = (gdouble) s1_length1;
#line 529 "/run/build/folks/folks/potential-match.vala"
	len_s2 = (gdouble) s2_length1;
#line 530 "/run/build/folks/folks/potential-match.vala"
	_tmp5_ = m;
#line 530 "/run/build/folks/folks/potential-match.vala"
	_tmp6_ = len_s1;
#line 530 "/run/build/folks/folks/potential-match.vala"
	a = _tmp5_ / _tmp6_;
#line 531 "/run/build/folks/folks/potential-match.vala"
	_tmp7_ = m;
#line 531 "/run/build/folks/folks/potential-match.vala"
	_tmp8_ = len_s2;
#line 531 "/run/build/folks/folks/potential-match.vala"
	b = _tmp7_ / _tmp8_;
#line 532 "/run/build/folks/folks/potential-match.vala"
	c = (gdouble) 0;
#line 534 "/run/build/folks/folks/potential-match.vala"
	_tmp9_ = m;
#line 534 "/run/build/folks/folks/potential-match.vala"
	if (((gint) _tmp9_) > 0) {
#line 2608 "potential-match.c"
		gdouble _tmp10_;
		gdouble _tmp11_;
		gdouble _tmp12_;
#line 535 "/run/build/folks/folks/potential-match.vala"
		_tmp10_ = m;
#line 535 "/run/build/folks/folks/potential-match.vala"
		_tmp11_ = t;
#line 535 "/run/build/folks/folks/potential-match.vala"
		_tmp12_ = m;
#line 535 "/run/build/folks/folks/potential-match.vala"
		c = (_tmp10_ - _tmp11_) / _tmp12_;
#line 2620 "potential-match.c"
	}
#line 537 "/run/build/folks/folks/potential-match.vala"
	_tmp13_ = a;
#line 537 "/run/build/folks/folks/potential-match.vala"
	_tmp14_ = b;
#line 537 "/run/build/folks/folks/potential-match.vala"
	_tmp15_ = c;
#line 537 "/run/build/folks/folks/potential-match.vala"
	distance = (1.0 / 3.0) * ((_tmp13_ + _tmp14_) + _tmp15_);
#line 539 "/run/build/folks/folks/potential-match.vala"
	_tmp16_ = a;
#line 539 "/run/build/folks/folks/potential-match.vala"
	_tmp17_ = b;
#line 539 "/run/build/folks/folks/potential-match.vala"
	_tmp18_ = c;
#line 539 "/run/build/folks/folks/potential-match.vala"
	g_debug ("potential-match.vala:539: Jaro distance: %f (a = %f, b = %f, c = %f)", distance, _tmp16_, _tmp17_, _tmp18_);
#line 541 "/run/build/folks/folks/potential-match.vala"
	result = distance;
#line 541 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 2642 "potential-match.c"
}


/**
   * stripped_char:
   *
   * Returns a stripped version of @ch, removing any case, accentuation
   * mark, or any special mark on it.
   *
   * Copied from Empathy's libempathy-gtk/empathy-live-search.c.
   *
   * Copyright (C) 2010 Collabora Ltd.
   * Copyright (C) 2007-2010 Nokia Corporation.
   *
   * Authors: Felix Kaser <felix.kaser@collabora.co.uk>
   *          Xavier Claessens <xavier.claessens@collabora.co.uk>
   *          Claudio Saavedra <csaavedra@igalia.com>
   */
static gunichar
_folks_potential_match_stripped_char (FolksPotentialMatch* self,
                                      gunichar ch)
{
	gunichar result = 0U;
	gunichar retval[1] = {0};
	gunichar _tmp0_[1] = {0};
	GUnicodeType utype = 0;
	GUnicodeType _tmp1_;
	gunichar _tmp3_;
#line 559 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, 0U);
#line 561 "/run/build/folks/folks/potential-match.vala"
	_tmp0_[0] = (gunichar) 0;
#line 561 "/run/build/folks/folks/potential-match.vala"
	memcpy (retval, _tmp0_, 1 * sizeof (gunichar));
#line 562 "/run/build/folks/folks/potential-match.vala"
	utype = g_unichar_type (ch);
#line 564 "/run/build/folks/folks/potential-match.vala"
	_tmp1_ = utype;
#line 564 "/run/build/folks/folks/potential-match.vala"
	switch (_tmp1_) {
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_CONTROL:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_FORMAT:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_UNASSIGNED:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_NON_SPACING_MARK:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_COMBINING_MARK:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_ENCLOSING_MARK:
#line 2695 "potential-match.c"
		{
#line 573 "/run/build/folks/folks/potential-match.vala"
			break;
#line 2699 "potential-match.c"
		}
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_DECIMAL_NUMBER:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_LETTER_NUMBER:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_OTHER_NUMBER:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_CONNECT_PUNCTUATION:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_DASH_PUNCTUATION:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_CLOSE_PUNCTUATION:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_FINAL_PUNCTUATION:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_INITIAL_PUNCTUATION:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_OTHER_PUNCTUATION:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_OPEN_PUNCTUATION:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_CURRENCY_SYMBOL:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_MODIFIER_SYMBOL:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_MATH_SYMBOL:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_OTHER_SYMBOL:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_LINE_SEPARATOR:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_PARAGRAPH_SEPARATOR:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_SPACE_SEPARATOR:
#line 2735 "potential-match.c"
		{
			gunichar _tmp2_;
#line 592 "/run/build/folks/folks/potential-match.vala"
			retval[0] = (gunichar) ' ';
#line 592 "/run/build/folks/folks/potential-match.vala"
			_tmp2_ = retval[0];
#line 593 "/run/build/folks/folks/potential-match.vala"
			break;
#line 2744 "potential-match.c"
		}
		default:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_PRIVATE_USE:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_SURROGATE:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_LOWERCASE_LETTER:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_MODIFIER_LETTER:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_OTHER_LETTER:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_TITLECASE_LETTER:
#line 564 "/run/build/folks/folks/potential-match.vala"
		case G_UNICODE_UPPERCASE_LETTER:
#line 2761 "potential-match.c"
		{
#line 602 "/run/build/folks/folks/potential-match.vala"
			ch = g_unichar_tolower (ch);
#line 603 "/run/build/folks/folks/potential-match.vala"
			g_unichar_fully_decompose (ch, FALSE, retval, 1);
#line 604 "/run/build/folks/folks/potential-match.vala"
			break;
#line 2769 "potential-match.c"
		}
	}
#line 607 "/run/build/folks/folks/potential-match.vala"
	_tmp3_ = retval[0];
#line 607 "/run/build/folks/folks/potential-match.vala"
	result = _tmp3_;
#line 607 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 2778 "potential-match.c"
}


static gboolean
string_get_next_char (const gchar* self,
                      gint* index,
                      gunichar* c)
{
	gunichar _vala_c = 0U;
	gboolean result = FALSE;
	gunichar _tmp0_;
#line 1199 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, FALSE);
#line 1200 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_vala_c = g_utf8_get_char (((gchar*) self) + (*index));
#line 1201 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = _vala_c;
#line 1201 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (_tmp0_ != ((gunichar) 0)) {
#line 2798 "potential-match.c"
		gchar* _tmp1_;
#line 1202 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp1_ = g_utf8_next_char (((gchar*) self) + (*index));
#line 1202 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		*index = (gint) (_tmp1_ - ((gchar*) self));
#line 1203 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = TRUE;
#line 1203 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		if (c) {
#line 1203 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			*c = _vala_c;
#line 2810 "potential-match.c"
		}
#line 1203 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 2814 "potential-match.c"
	} else {
#line 1205 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = FALSE;
#line 1205 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		if (c) {
#line 1205 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			*c = _vala_c;
#line 2822 "potential-match.c"
		}
#line 1205 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 2826 "potential-match.c"
	}
#line 1199 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (c) {
#line 1199 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		*c = _vala_c;
#line 2832 "potential-match.c"
	}
}


static gunichar*
_folks_potential_match_strip_string (FolksPotentialMatch* self,
                                     const gchar* s,
                                     int* result_length1)
{
	gunichar* result = NULL;
	gint next_idx = 0;
	guint write_idx = 0U;
	gunichar ch = 0U;
	gunichar* output = NULL;
	gint _tmp0_;
	gint _tmp1_;
	gunichar* _tmp2_;
	gint output_length1;
	gint _output_size_;
	guint _tmp11_;
	gint _tmp12_;
	gunichar* _tmp13_;
	gint _tmp13__length1;
#line 610 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 610 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (s != NULL, NULL);
#line 612 "/run/build/folks/folks/potential-match.vala"
	next_idx = 0;
#line 613 "/run/build/folks/folks/potential-match.vala"
	write_idx = (guint) 0;
#line 614 "/run/build/folks/folks/potential-match.vala"
	ch = (gunichar) 0;
#line 615 "/run/build/folks/folks/potential-match.vala"
	_tmp0_ = strlen (s);
#line 615 "/run/build/folks/folks/potential-match.vala"
	_tmp1_ = _tmp0_;
#line 615 "/run/build/folks/folks/potential-match.vala"
	_tmp2_ = g_new0 (gunichar, _tmp1_);
#line 615 "/run/build/folks/folks/potential-match.vala"
	output = _tmp2_;
#line 615 "/run/build/folks/folks/potential-match.vala"
	output_length1 = _tmp1_;
#line 615 "/run/build/folks/folks/potential-match.vala"
	_output_size_ = output_length1;
#line 617 "/run/build/folks/folks/potential-match.vala"
	while (TRUE) {
#line 2880 "potential-match.c"
		gunichar _tmp3_ = 0U;
		gboolean _tmp4_;
		gunichar _tmp5_;
		gunichar _tmp6_;
#line 617 "/run/build/folks/folks/potential-match.vala"
		_tmp4_ = string_get_next_char (s, &next_idx, &_tmp3_);
#line 617 "/run/build/folks/folks/potential-match.vala"
		ch = _tmp3_;
#line 617 "/run/build/folks/folks/potential-match.vala"
		if (!_tmp4_) {
#line 617 "/run/build/folks/folks/potential-match.vala"
			break;
#line 2893 "potential-match.c"
		}
#line 619 "/run/build/folks/folks/potential-match.vala"
		_tmp5_ = ch;
#line 619 "/run/build/folks/folks/potential-match.vala"
		ch = _folks_potential_match_stripped_char (self, _tmp5_);
#line 620 "/run/build/folks/folks/potential-match.vala"
		_tmp6_ = ch;
#line 620 "/run/build/folks/folks/potential-match.vala"
		if (_tmp6_ != ((gunichar) 0)) {
#line 2903 "potential-match.c"
			gunichar* _tmp7_;
			gint _tmp7__length1;
			guint _tmp8_;
			gunichar _tmp9_;
			gunichar _tmp10_;
#line 622 "/run/build/folks/folks/potential-match.vala"
			_tmp7_ = output;
#line 622 "/run/build/folks/folks/potential-match.vala"
			_tmp7__length1 = output_length1;
#line 622 "/run/build/folks/folks/potential-match.vala"
			_tmp8_ = write_idx;
#line 622 "/run/build/folks/folks/potential-match.vala"
			write_idx = _tmp8_ + 1;
#line 622 "/run/build/folks/folks/potential-match.vala"
			_tmp9_ = ch;
#line 622 "/run/build/folks/folks/potential-match.vala"
			_tmp7_[_tmp8_] = _tmp9_;
#line 622 "/run/build/folks/folks/potential-match.vala"
			_tmp10_ = _tmp7_[_tmp8_];
#line 2923 "potential-match.c"
		}
	}
#line 626 "/run/build/folks/folks/potential-match.vala"
	_tmp11_ = write_idx;
#line 626 "/run/build/folks/folks/potential-match.vala"
	output_length1 = (gint) _tmp11_;
#line 626 "/run/build/folks/folks/potential-match.vala"
	_tmp12_ = output_length1;
#line 627 "/run/build/folks/folks/potential-match.vala"
	_tmp13_ = output;
#line 627 "/run/build/folks/folks/potential-match.vala"
	_tmp13__length1 = output_length1;
#line 627 "/run/build/folks/folks/potential-match.vala"
	if (result_length1) {
#line 627 "/run/build/folks/folks/potential-match.vala"
		*result_length1 = _tmp13__length1;
#line 2940 "potential-match.c"
	}
#line 627 "/run/build/folks/folks/potential-match.vala"
	result = _tmp13_;
#line 627 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 2946 "potential-match.c"
}


static gint
_folks_potential_match_matches (FolksPotentialMatch* self,
                                gunichar* s1,
                                int s1_length1,
                                gunichar* s2,
                                int s2_length1,
                                gint max_dist,
                                gdouble* t)
{
	gdouble _vala_t = 0.0;
	gint result = 0;
	gint matches = 0;
	gint len_s1 = 0;
	gunichar look_for = 0U;
	gint _tmp14_;
	gdouble _tmp15_;
	gdouble _tmp16_;
#line 632 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 634 "/run/build/folks/folks/potential-match.vala"
	matches = 0;
#line 635 "/run/build/folks/folks/potential-match.vala"
	_vala_t = 0.0;
#line 636 "/run/build/folks/folks/potential-match.vala"
	len_s1 = s1_length1;
#line 638 "/run/build/folks/folks/potential-match.vala"
	look_for = (gunichar) 0;
#line 2977 "potential-match.c"
	{
		guint idx = 0U;
#line 640 "/run/build/folks/folks/potential-match.vala"
		idx = (guint) 0;
#line 2982 "potential-match.c"
		{
			gboolean _tmp0_ = FALSE;
#line 640 "/run/build/folks/folks/potential-match.vala"
			_tmp0_ = TRUE;
#line 640 "/run/build/folks/folks/potential-match.vala"
			while (TRUE) {
#line 2989 "potential-match.c"
				gboolean _tmp2_ = FALSE;
				guint _tmp3_;
				gint _tmp4_;
				gint contains = 0;
				gunichar _tmp8_;
				guint _tmp9_;
				gint _tmp10_;
#line 640 "/run/build/folks/folks/potential-match.vala"
				if (!_tmp0_) {
#line 2999 "potential-match.c"
					guint _tmp1_;
#line 640 "/run/build/folks/folks/potential-match.vala"
					_tmp1_ = idx;
#line 640 "/run/build/folks/folks/potential-match.vala"
					idx = _tmp1_ + 1;
#line 3005 "potential-match.c"
				}
#line 640 "/run/build/folks/folks/potential-match.vala"
				_tmp0_ = FALSE;
#line 640 "/run/build/folks/folks/potential-match.vala"
				_tmp3_ = idx;
#line 640 "/run/build/folks/folks/potential-match.vala"
				_tmp4_ = len_s1;
#line 640 "/run/build/folks/folks/potential-match.vala"
				if (_tmp3_ < ((guint) _tmp4_)) {
#line 3015 "potential-match.c"
					guint _tmp5_;
					gunichar _tmp6_;
					gunichar _tmp7_;
#line 640 "/run/build/folks/folks/potential-match.vala"
					_tmp5_ = idx;
#line 640 "/run/build/folks/folks/potential-match.vala"
					_tmp6_ = s1[_tmp5_];
#line 640 "/run/build/folks/folks/potential-match.vala"
					look_for = _tmp6_;
#line 640 "/run/build/folks/folks/potential-match.vala"
					_tmp7_ = look_for;
#line 640 "/run/build/folks/folks/potential-match.vala"
					_tmp2_ = _tmp7_ != ((gunichar) 0);
#line 3029 "potential-match.c"
				} else {
#line 640 "/run/build/folks/folks/potential-match.vala"
					_tmp2_ = FALSE;
#line 3033 "potential-match.c"
				}
#line 640 "/run/build/folks/folks/potential-match.vala"
				if (!_tmp2_) {
#line 640 "/run/build/folks/folks/potential-match.vala"
					break;
#line 3039 "potential-match.c"
				}
#line 642 "/run/build/folks/folks/potential-match.vala"
				_tmp8_ = look_for;
#line 642 "/run/build/folks/folks/potential-match.vala"
				_tmp9_ = idx;
#line 642 "/run/build/folks/folks/potential-match.vala"
				contains = _folks_potential_match_contains (self, s2, s2_length1, _tmp8_, _tmp9_, (guint) max_dist);
#line 643 "/run/build/folks/folks/potential-match.vala"
				_tmp10_ = contains;
#line 643 "/run/build/folks/folks/potential-match.vala"
				if (_tmp10_ >= 0) {
#line 3051 "potential-match.c"
					gint _tmp11_;
					gint _tmp12_;
#line 645 "/run/build/folks/folks/potential-match.vala"
					_tmp11_ = matches;
#line 645 "/run/build/folks/folks/potential-match.vala"
					matches = _tmp11_ + 1;
#line 646 "/run/build/folks/folks/potential-match.vala"
					_tmp12_ = contains;
#line 646 "/run/build/folks/folks/potential-match.vala"
					if (_tmp12_ > 0) {
#line 3062 "potential-match.c"
						gdouble _tmp13_;
#line 647 "/run/build/folks/folks/potential-match.vala"
						_tmp13_ = _vala_t;
#line 647 "/run/build/folks/folks/potential-match.vala"
						_vala_t = _tmp13_ + 1.0;
#line 3068 "potential-match.c"
					}
				}
			}
		}
	}
#line 651 "/run/build/folks/folks/potential-match.vala"
	_tmp14_ = matches;
#line 651 "/run/build/folks/folks/potential-match.vala"
	_tmp15_ = _vala_t;
#line 651 "/run/build/folks/folks/potential-match.vala"
	g_debug ("potential-match.vala:651: %d matches and %f / 2 transpositions", _tmp14_, _tmp15_);
#line 653 "/run/build/folks/folks/potential-match.vala"
	_tmp16_ = _vala_t;
#line 653 "/run/build/folks/folks/potential-match.vala"
	_vala_t = _tmp16_ / 2.0;
#line 654 "/run/build/folks/folks/potential-match.vala"
	result = matches;
#line 654 "/run/build/folks/folks/potential-match.vala"
	if (t) {
#line 654 "/run/build/folks/folks/potential-match.vala"
		*t = _vala_t;
#line 3090 "potential-match.c"
	}
#line 654 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 3094 "potential-match.c"
}


static gint
_folks_potential_match_contains (FolksPotentialMatch* self,
                                 gunichar* haystack,
                                 int haystack_length1,
                                 gunichar c,
                                 guint pos,
                                 guint max_dist)
{
	gint result = 0;
	gint haystack_len = 0;
	gboolean _tmp0_ = FALSE;
	gint _tmp1_;
	guint idx = 0U;
	gint _tmp3_;
	gunichar ch = 0U;
#line 665 "/run/build/folks/folks/potential-match.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 667 "/run/build/folks/folks/potential-match.vala"
	haystack_len = haystack_length1;
#line 669 "/run/build/folks/folks/potential-match.vala"
	_tmp1_ = haystack_len;
#line 669 "/run/build/folks/folks/potential-match.vala"
	if (pos < ((guint) _tmp1_)) {
#line 3121 "potential-match.c"
		gunichar _tmp2_;
#line 669 "/run/build/folks/folks/potential-match.vala"
		_tmp2_ = haystack[pos];
#line 669 "/run/build/folks/folks/potential-match.vala"
		_tmp0_ = _tmp2_ == c;
#line 3127 "potential-match.c"
	} else {
#line 669 "/run/build/folks/folks/potential-match.vala"
		_tmp0_ = FALSE;
#line 3131 "potential-match.c"
	}
#line 669 "/run/build/folks/folks/potential-match.vala"
	if (_tmp0_) {
#line 670 "/run/build/folks/folks/potential-match.vala"
		result = 0;
#line 670 "/run/build/folks/folks/potential-match.vala"
		return result;
#line 3139 "potential-match.c"
	}
#line 672 "/run/build/folks/folks/potential-match.vala"
	_tmp3_ = haystack_len;
#line 672 "/run/build/folks/folks/potential-match.vala"
	idx = (guint) CLAMP (((gint) pos) - ((gint) max_dist), 0, _tmp3_ - 1);
#line 673 "/run/build/folks/folks/potential-match.vala"
	ch = (gunichar) 0;
#line 675 "/run/build/folks/folks/potential-match.vala"
	while (TRUE) {
#line 3149 "potential-match.c"
		gboolean _tmp4_ = FALSE;
		gboolean _tmp5_ = FALSE;
		guint _tmp6_;
		gunichar _tmp12_;
		guint _tmp14_;
#line 675 "/run/build/folks/folks/potential-match.vala"
		_tmp6_ = idx;
#line 675 "/run/build/folks/folks/potential-match.vala"
		if (_tmp6_ < (pos + max_dist)) {
#line 3159 "potential-match.c"
			guint _tmp7_;
			gint _tmp8_;
#line 675 "/run/build/folks/folks/potential-match.vala"
			_tmp7_ = idx;
#line 675 "/run/build/folks/folks/potential-match.vala"
			_tmp8_ = haystack_len;
#line 675 "/run/build/folks/folks/potential-match.vala"
			_tmp5_ = _tmp7_ < ((guint) _tmp8_);
#line 3168 "potential-match.c"
		} else {
#line 675 "/run/build/folks/folks/potential-match.vala"
			_tmp5_ = FALSE;
#line 3172 "potential-match.c"
		}
#line 675 "/run/build/folks/folks/potential-match.vala"
		if (_tmp5_) {
#line 3176 "potential-match.c"
			guint _tmp9_;
			gunichar _tmp10_;
			gunichar _tmp11_;
#line 676 "/run/build/folks/folks/potential-match.vala"
			_tmp9_ = idx;
#line 676 "/run/build/folks/folks/potential-match.vala"
			_tmp10_ = haystack[_tmp9_];
#line 676 "/run/build/folks/folks/potential-match.vala"
			ch = _tmp10_;
#line 676 "/run/build/folks/folks/potential-match.vala"
			_tmp11_ = ch;
#line 676 "/run/build/folks/folks/potential-match.vala"
			_tmp4_ = _tmp11_ != ((gunichar) 0);
#line 3190 "potential-match.c"
		} else {
#line 675 "/run/build/folks/folks/potential-match.vala"
			_tmp4_ = FALSE;
#line 3194 "potential-match.c"
		}
#line 675 "/run/build/folks/folks/potential-match.vala"
		if (!_tmp4_) {
#line 675 "/run/build/folks/folks/potential-match.vala"
			break;
#line 3200 "potential-match.c"
		}
#line 678 "/run/build/folks/folks/potential-match.vala"
		_tmp12_ = ch;
#line 678 "/run/build/folks/folks/potential-match.vala"
		if (_tmp12_ == c) {
#line 3206 "potential-match.c"
			guint _tmp13_;
#line 679 "/run/build/folks/folks/potential-match.vala"
			_tmp13_ = idx;
#line 679 "/run/build/folks/folks/potential-match.vala"
			result = abs (((gint) pos) - ((gint) _tmp13_));
#line 679 "/run/build/folks/folks/potential-match.vala"
			return result;
#line 3214 "potential-match.c"
		}
#line 681 "/run/build/folks/folks/potential-match.vala"
		_tmp14_ = idx;
#line 681 "/run/build/folks/folks/potential-match.vala"
		idx = _tmp14_ + 1;
#line 3220 "potential-match.c"
	}
#line 684 "/run/build/folks/folks/potential-match.vala"
	result = -1;
#line 684 "/run/build/folks/folks/potential-match.vala"
	return result;
#line 3226 "potential-match.c"
}


static void
folks_potential_match_class_init (FolksPotentialMatchClass * klass)
{
	FolksSmallSet* _tmp0_;
	GeeSet* _tmp1_;
	GeeSet* _tmp2_;
	GeeSet* _tmp3_;
#line 93 "/run/build/folks/folks/potential-match.vala"
	folks_potential_match_parent_class = g_type_class_peek_parent (klass);
#line 93 "/run/build/folks/folks/potential-match.vala"
	g_type_class_add_private (klass, sizeof (FolksPotentialMatchPrivate));
#line 93 "/run/build/folks/folks/potential-match.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_potential_match_finalize;
#line 104 "/run/build/folks/folks/potential-match.vala"
	_tmp0_ = folks_small_set_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, NULL, NULL, NULL, NULL, NULL, NULL);
#line 104 "/run/build/folks/folks/potential-match.vala"
	folks_potential_match_known_email_aliases = (GeeSet*) _tmp0_;
#line 111 "/run/build/folks/folks/potential-match.vala"
	_tmp1_ = folks_potential_match_known_email_aliases;
#line 111 "/run/build/folks/folks/potential-match.vala"
	gee_collection_add ((GeeCollection*) _tmp1_, "admin");
#line 112 "/run/build/folks/folks/potential-match.vala"
	_tmp2_ = folks_potential_match_known_email_aliases;
#line 112 "/run/build/folks/folks/potential-match.vala"
	gee_collection_add ((GeeCollection*) _tmp2_, "abuse");
#line 113 "/run/build/folks/folks/potential-match.vala"
	_tmp3_ = folks_potential_match_known_email_aliases;
#line 113 "/run/build/folks/folks/potential-match.vala"
	gee_collection_add ((GeeCollection*) _tmp3_, "webmaster");
#line 3259 "potential-match.c"
}


static void
folks_potential_match_instance_init (FolksPotentialMatch * self)
{
#line 93 "/run/build/folks/folks/potential-match.vala"
	self->priv = FOLKS_POTENTIAL_MATCH_GET_PRIVATE (self);
#line 3268 "potential-match.c"
}


static void
folks_potential_match_finalize (GObject * obj)
{
	FolksPotentialMatch * self;
#line 93 "/run/build/folks/folks/potential-match.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_POTENTIAL_MATCH, FolksPotentialMatch);
#line 95 "/run/build/folks/folks/potential-match.vala"
	_g_object_unref0 (self->priv->_individual_a);
#line 96 "/run/build/folks/folks/potential-match.vala"
	_g_object_unref0 (self->priv->_individual_b);
#line 93 "/run/build/folks/folks/potential-match.vala"
	G_OBJECT_CLASS (folks_potential_match_parent_class)->finalize (obj);
#line 3284 "potential-match.c"
}


/**
 * Match calculator for pairs of individuals.
 *
 * This provides functionality to explore the degree of a potential match
 * between two individuals. It compares the similarity of the individuals'
 * properties to determine how likely it is that the individuals represent the
 * same physical person.
 *
 * This can be used by folks clients to, for example, present suggestions of
 * pairs of individuals which should be linked by the user.
 *
 * @since 0.5.0
 */
GType
folks_potential_match_get_type (void)
{
	static volatile gsize folks_potential_match_type_id__volatile = 0;
	if (g_once_init_enter (&folks_potential_match_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksPotentialMatchClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_potential_match_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksPotentialMatch), 0, (GInstanceInitFunc) folks_potential_match_instance_init, NULL };
		GType folks_potential_match_type_id;
		folks_potential_match_type_id = g_type_register_static (G_TYPE_OBJECT, "FolksPotentialMatch", &g_define_type_info, 0);
		g_once_init_leave (&folks_potential_match_type_id__volatile, folks_potential_match_type_id);
	}
	return folks_potential_match_type_id__volatile;
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



