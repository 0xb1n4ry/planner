/* Notifications.c generated by valac 0.40.11, the Vala compiler
 * generated from Notifications.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <libnotify/notify.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <glib/gi18n-lib.h>


#define SERVICES_TYPE_NOTIFICATIONS (services_notifications_get_type ())
#define SERVICES_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotifications))
#define SERVICES_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))
#define SERVICES_IS_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_IS_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_NOTIFICATIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))

typedef struct _ServicesNotifications ServicesNotifications;
typedef struct _ServicesNotificationsClass ServicesNotificationsClass;
typedef struct _ServicesNotificationsPrivate ServicesNotificationsPrivate;
enum  {
	SERVICES_NOTIFICATIONS_0_PROPERTY,
	SERVICES_NOTIFICATIONS_NUM_PROPERTIES
};
static GParamSpec* services_notifications_properties[SERVICES_NOTIFICATIONS_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

#define OBJECTS_TYPE_TASK (objects_task_get_type ())
#define OBJECTS_TASK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TASK, ObjectsTask))
#define OBJECTS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TASK, ObjectsTaskClass))
#define OBJECTS_IS_TASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TASK))
#define OBJECTS_IS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TASK))
#define OBJECTS_TASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TASK, ObjectsTaskClass))

typedef struct _ObjectsTask ObjectsTask;
typedef struct _ObjectsTaskClass ObjectsTaskClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
typedef struct _ObjectsTaskPrivate ObjectsTaskPrivate;
#define _g_time_zone_unref0(var) ((var == NULL) ? NULL : (var = (g_time_zone_unref (var), NULL)))

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
#define _g_free0(var) (var = (g_free (var), NULL))

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;
typedef struct _ObjectsProjectPrivate ObjectsProjectPrivate;
#define _objects_project_unref0(var) ((var == NULL) ? NULL : (var = (objects_project_unref (var), NULL)))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
#define _objects_task_unref0(var) ((var == NULL) ? NULL : (var = (objects_task_unref (var), NULL)))
enum  {
	SERVICES_NOTIFICATIONS_ON_SIGNAL_WEATHER_UPDATE_SIGNAL,
	SERVICES_NOTIFICATIONS_ON_SIGNAL_LOCATION_MANUAL_SIGNAL,
	SERVICES_NOTIFICATIONS_ON_SIGNAL_HIGHLIGHT_TASK_SIGNAL,
	SERVICES_NOTIFICATIONS_SEND_LOCAL_NOTIFICATION_SIGNAL,
	SERVICES_NOTIFICATIONS_NUM_SIGNALS
};
static guint services_notifications_signals[SERVICES_NOTIFICATIONS_NUM_SIGNALS] = {0};

struct _ServicesNotifications {
	GObject parent_instance;
	ServicesNotificationsPrivate * priv;
};

struct _ServicesNotificationsClass {
	GObjectClass parent_class;
};

struct _ServicesNotificationsPrivate {
	NotifyNotification* notification;
};

struct _ObjectsTask {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsTaskPrivate * priv;
	gint id;
	gint checked;
	gint project_id;
	gint list_id;
	gint task_order;
	gint is_inbox;
	gint has_reminder;
	gint sidebar_width;
	gint was_notified;
	gchar* content;
	gchar* note;
	gchar* when_date_utc;
	gchar* reminder_time;
	gchar* labels;
	gchar* checklist;
};

struct _ObjectsTaskClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsTask *self);
};

struct _ObjectsProject {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsProjectPrivate * priv;
	gint id;
	gchar* name;
	gchar* note;
	gchar* deadline;
	gint item_order;
	gint is_deleted;
	gchar* color;
};

struct _ObjectsProjectClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsProject *self);
};


static gpointer services_notifications_parent_class = NULL;
extern ServicesDatabase* application_database;
extern Utils* application_utils;

GType services_notifications_get_type (void) G_GNUC_CONST;
#define SERVICES_NOTIFICATIONS_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsPrivate))
ServicesNotifications* services_notifications_new (void);
ServicesNotifications* services_notifications_construct (GType object_type);
void services_notifications_start_notification (ServicesNotifications* self);
void services_notifications_send_notification (ServicesNotifications* self,
                                               const gchar* summary,
                                               const gchar* body,
                                               const gchar* icon);
static gboolean __lambda45_ (ServicesNotifications* self);
gpointer objects_task_ref (gpointer instance);
void objects_task_unref (gpointer instance);
GParamSpec* objects_param_spec_task (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void objects_value_set_task (GValue* value,
                             gpointer v_object);
void objects_value_take_task (GValue* value,
                              gpointer v_object);
gpointer objects_value_get_task (const GValue* value);
GType objects_task_get_type (void) G_GNUC_CONST;
GType services_database_get_type (void) G_GNUC_CONST;
GeeArrayList* services_database_get_all_reminder_tasks (ServicesDatabase* self);
GType utils_get_type (void) G_GNUC_CONST;
gboolean utils_is_today (Utils* self,
                         GDateTime* date_1);
gpointer objects_project_ref (gpointer instance);
void objects_project_unref (gpointer instance);
GParamSpec* objects_param_spec_project (const gchar* name,
                                        const gchar* nick,
                                        const gchar* blurb,
                                        GType object_type,
                                        GParamFlags flags);
void objects_value_set_project (GValue* value,
                                gpointer v_object);
void objects_value_take_project (GValue* value,
                                 gpointer v_object);
gpointer objects_value_get_project (const GValue* value);
GType objects_project_get_type (void) G_GNUC_CONST;
ObjectsProject* services_database_get_project (ServicesDatabase* self,
                                               gint id);
gint services_database_update_task (ServicesDatabase* self,
                                    ObjectsTask* task);
static gboolean ___lambda45__gsource_func (gpointer self);
static void g_cclosure_user_marshal_VOID__OBJECTS_TASK (GClosure * closure,
                                                 GValue * return_value,
                                                 guint n_param_values,
                                                 const GValue * param_values,
                                                 gpointer invocation_hint,
                                                 gpointer marshal_data);
static void g_cclosure_user_marshal_VOID__STRING_STRING_STRING_INT_BOOLEAN (GClosure * closure,
                                                                     GValue * return_value,
                                                                     guint n_param_values,
                                                                     const GValue * param_values,
                                                                     gpointer invocation_hint,
                                                                     gpointer marshal_data);
static void services_notifications_finalize (GObject * obj);


ServicesNotifications*
services_notifications_construct (GType object_type)
{
	ServicesNotifications * self = NULL;
#line 35 "/run/build/planner/src/Services/Notifications.vala"
	self = (ServicesNotifications*) g_object_new (object_type, NULL);
#line 36 "/run/build/planner/src/Services/Notifications.vala"
	notify_init ("Planner");
#line 37 "/run/build/planner/src/Services/Notifications.vala"
	services_notifications_start_notification (self);
#line 35 "/run/build/planner/src/Services/Notifications.vala"
	return self;
#line 244 "Notifications.c"
}


ServicesNotifications*
services_notifications_new (void)
{
#line 35 "/run/build/planner/src/Services/Notifications.vala"
	return services_notifications_construct (SERVICES_TYPE_NOTIFICATIONS);
#line 253 "Notifications.c"
}


void
services_notifications_send_notification (ServicesNotifications* self,
                                          const gchar* summary,
                                          const gchar* body,
                                          const gchar* icon)
{
	NotifyNotification* notification = NULL;
	NotifyNotification* _tmp0_;
	GError * _inner_error_ = NULL;
#line 40 "/run/build/planner/src/Services/Notifications.vala"
	g_return_if_fail (self != NULL);
#line 40 "/run/build/planner/src/Services/Notifications.vala"
	g_return_if_fail (summary != NULL);
#line 40 "/run/build/planner/src/Services/Notifications.vala"
	g_return_if_fail (body != NULL);
#line 40 "/run/build/planner/src/Services/Notifications.vala"
	g_return_if_fail (icon != NULL);
#line 41 "/run/build/planner/src/Services/Notifications.vala"
	_tmp0_ = notify_notification_new (summary, body, icon);
#line 41 "/run/build/planner/src/Services/Notifications.vala"
	notification = _tmp0_;
#line 42 "/run/build/planner/src/Services/Notifications.vala"
	notify_notification_set_urgency (notification, NOTIFY_URGENCY_NORMAL);
#line 280 "Notifications.c"
	{
#line 45 "/run/build/planner/src/Services/Notifications.vala"
		notify_notification_show (notification, &_inner_error_);
#line 45 "/run/build/planner/src/Services/Notifications.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 286 "Notifications.c"
			goto __catch2_g_error;
		}
	}
	goto __finally2;
	__catch2_g_error:
	{
		GError* e = NULL;
		GError* _tmp1_;
		const gchar* _tmp2_;
#line 44 "/run/build/planner/src/Services/Notifications.vala"
		e = _inner_error_;
#line 44 "/run/build/planner/src/Services/Notifications.vala"
		_inner_error_ = NULL;
#line 47 "/run/build/planner/src/Services/Notifications.vala"
		_tmp1_ = e;
#line 47 "/run/build/planner/src/Services/Notifications.vala"
		_tmp2_ = _tmp1_->message;
#line 47 "/run/build/planner/src/Services/Notifications.vala"
		g_warning ("Notifications.vala:47: Failed to show notification: %s", _tmp2_);
#line 44 "/run/build/planner/src/Services/Notifications.vala"
		_g_error_free0 (e);
#line 308 "Notifications.c"
	}
	__finally2:
#line 44 "/run/build/planner/src/Services/Notifications.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 44 "/run/build/planner/src/Services/Notifications.vala"
		_g_object_unref0 (notification);
#line 44 "/run/build/planner/src/Services/Notifications.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 44 "/run/build/planner/src/Services/Notifications.vala"
		g_clear_error (&_inner_error_);
#line 44 "/run/build/planner/src/Services/Notifications.vala"
		return;
#line 321 "Notifications.c"
	}
#line 40 "/run/build/planner/src/Services/Notifications.vala"
	_g_object_unref0 (notification);
#line 325 "Notifications.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 56 "/run/build/planner/src/Services/Notifications.vala"
	return self ? g_object_ref (self) : NULL;
#line 334 "Notifications.c"
}


static gboolean
__lambda45_ (ServicesNotifications* self)
{
	gboolean result = FALSE;
	GeeArrayList* all_tasks = NULL;
	GeeArrayList* _tmp0_;
	ServicesDatabase* _tmp1_;
	GeeArrayList* _tmp2_;
	GError * _inner_error_ = NULL;
#line 53 "/run/build/planner/src/Services/Notifications.vala"
	_tmp0_ = gee_array_list_new (OBJECTS_TYPE_TASK, (GBoxedCopyFunc) objects_task_ref, (GDestroyNotify) objects_task_unref, NULL, NULL, NULL);
#line 53 "/run/build/planner/src/Services/Notifications.vala"
	all_tasks = _tmp0_;
#line 54 "/run/build/planner/src/Services/Notifications.vala"
	_tmp1_ = application_database;
#line 54 "/run/build/planner/src/Services/Notifications.vala"
	_tmp2_ = services_database_get_all_reminder_tasks (_tmp1_);
#line 54 "/run/build/planner/src/Services/Notifications.vala"
	_g_object_unref0 (all_tasks);
#line 54 "/run/build/planner/src/Services/Notifications.vala"
	all_tasks = _tmp2_;
#line 359 "Notifications.c"
	{
		GeeArrayList* _task_list = NULL;
		GeeArrayList* _tmp3_;
		GeeArrayList* _tmp4_;
		gint _task_size = 0;
		GeeArrayList* _tmp5_;
		gint _tmp6_;
		gint _tmp7_;
		gint _task_index = 0;
#line 56 "/run/build/planner/src/Services/Notifications.vala"
		_tmp3_ = all_tasks;
#line 56 "/run/build/planner/src/Services/Notifications.vala"
		_tmp4_ = _g_object_ref0 (_tmp3_);
#line 56 "/run/build/planner/src/Services/Notifications.vala"
		_task_list = _tmp4_;
#line 56 "/run/build/planner/src/Services/Notifications.vala"
		_tmp5_ = _task_list;
#line 56 "/run/build/planner/src/Services/Notifications.vala"
		_tmp6_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp5_);
#line 56 "/run/build/planner/src/Services/Notifications.vala"
		_tmp7_ = _tmp6_;
#line 56 "/run/build/planner/src/Services/Notifications.vala"
		_task_size = _tmp7_;
#line 56 "/run/build/planner/src/Services/Notifications.vala"
		_task_index = -1;
#line 56 "/run/build/planner/src/Services/Notifications.vala"
		while (TRUE) {
#line 387 "Notifications.c"
			gint _tmp8_;
			gint _tmp9_;
			gint _tmp10_;
			ObjectsTask* task = NULL;
			GeeArrayList* _tmp11_;
			gint _tmp12_;
			gpointer _tmp13_;
			GDateTime* now_date = NULL;
			GDateTime* _tmp14_;
			GDateTime* reminder_date = NULL;
			ObjectsTask* _tmp15_;
			const gchar* _tmp16_;
			GTimeZone* _tmp17_;
			GTimeZone* _tmp18_;
			GDateTime* _tmp19_;
			GDateTime* _tmp20_;
			Utils* _tmp21_;
			GDateTime* _tmp22_;
#line 56 "/run/build/planner/src/Services/Notifications.vala"
			_tmp8_ = _task_index;
#line 56 "/run/build/planner/src/Services/Notifications.vala"
			_task_index = _tmp8_ + 1;
#line 56 "/run/build/planner/src/Services/Notifications.vala"
			_tmp9_ = _task_index;
#line 56 "/run/build/planner/src/Services/Notifications.vala"
			_tmp10_ = _task_size;
#line 56 "/run/build/planner/src/Services/Notifications.vala"
			if (!(_tmp9_ < _tmp10_)) {
#line 56 "/run/build/planner/src/Services/Notifications.vala"
				break;
#line 418 "Notifications.c"
			}
#line 56 "/run/build/planner/src/Services/Notifications.vala"
			_tmp11_ = _task_list;
#line 56 "/run/build/planner/src/Services/Notifications.vala"
			_tmp12_ = _task_index;
#line 56 "/run/build/planner/src/Services/Notifications.vala"
			_tmp13_ = gee_abstract_list_get ((GeeAbstractList*) _tmp11_, _tmp12_);
#line 56 "/run/build/planner/src/Services/Notifications.vala"
			task = (ObjectsTask*) _tmp13_;
#line 57 "/run/build/planner/src/Services/Notifications.vala"
			_tmp14_ = g_date_time_new_now_local ();
#line 57 "/run/build/planner/src/Services/Notifications.vala"
			now_date = _tmp14_;
#line 58 "/run/build/planner/src/Services/Notifications.vala"
			_tmp15_ = task;
#line 58 "/run/build/planner/src/Services/Notifications.vala"
			_tmp16_ = _tmp15_->reminder_time;
#line 58 "/run/build/planner/src/Services/Notifications.vala"
			_tmp17_ = g_time_zone_new_local ();
#line 58 "/run/build/planner/src/Services/Notifications.vala"
			_tmp18_ = _tmp17_;
#line 58 "/run/build/planner/src/Services/Notifications.vala"
			_tmp19_ = g_date_time_new_from_iso8601 (_tmp16_, _tmp18_);
#line 58 "/run/build/planner/src/Services/Notifications.vala"
			_tmp20_ = _tmp19_;
#line 58 "/run/build/planner/src/Services/Notifications.vala"
			_g_time_zone_unref0 (_tmp18_);
#line 58 "/run/build/planner/src/Services/Notifications.vala"
			reminder_date = _tmp20_;
#line 60 "/run/build/planner/src/Services/Notifications.vala"
			_tmp21_ = application_utils;
#line 60 "/run/build/planner/src/Services/Notifications.vala"
			_tmp22_ = reminder_date;
#line 60 "/run/build/planner/src/Services/Notifications.vala"
			if (utils_is_today (_tmp21_, _tmp22_)) {
#line 454 "Notifications.c"
				GDateTime* _tmp23_;
				GDateTime* _tmp24_;
#line 61 "/run/build/planner/src/Services/Notifications.vala"
				_tmp23_ = now_date;
#line 61 "/run/build/planner/src/Services/Notifications.vala"
				_tmp24_ = reminder_date;
#line 61 "/run/build/planner/src/Services/Notifications.vala"
				if (g_date_time_get_hour (_tmp23_) == g_date_time_get_hour (_tmp24_)) {
#line 463 "Notifications.c"
					GDateTime* _tmp25_;
					GDateTime* _tmp26_;
#line 62 "/run/build/planner/src/Services/Notifications.vala"
					_tmp25_ = now_date;
#line 62 "/run/build/planner/src/Services/Notifications.vala"
					_tmp26_ = reminder_date;
#line 62 "/run/build/planner/src/Services/Notifications.vala"
					if (g_date_time_get_minute (_tmp25_) == g_date_time_get_minute (_tmp26_)) {
#line 472 "Notifications.c"
						gchar* summary = NULL;
						gchar* _tmp27_;
						gchar* body = NULL;
						ObjectsTask* _tmp28_;
						const gchar* _tmp29_;
						gchar* _tmp30_;
						ObjectsTask* _tmp31_;
						gint _tmp32_;
						const gchar* _tmp41_;
						const gchar* _tmp42_;
						NotifyNotification* _tmp43_;
						NotifyNotification* _tmp44_;
#line 63 "/run/build/planner/src/Services/Notifications.vala"
						_tmp27_ = g_strdup ("");
#line 63 "/run/build/planner/src/Services/Notifications.vala"
						summary = _tmp27_;
#line 64 "/run/build/planner/src/Services/Notifications.vala"
						_tmp28_ = task;
#line 64 "/run/build/planner/src/Services/Notifications.vala"
						_tmp29_ = _tmp28_->content;
#line 64 "/run/build/planner/src/Services/Notifications.vala"
						_tmp30_ = g_strdup (_tmp29_);
#line 64 "/run/build/planner/src/Services/Notifications.vala"
						body = _tmp30_;
#line 66 "/run/build/planner/src/Services/Notifications.vala"
						_tmp31_ = task;
#line 66 "/run/build/planner/src/Services/Notifications.vala"
						_tmp32_ = _tmp31_->is_inbox;
#line 66 "/run/build/planner/src/Services/Notifications.vala"
						if (_tmp32_ == 1) {
#line 503 "Notifications.c"
							gchar* _tmp33_;
#line 67 "/run/build/planner/src/Services/Notifications.vala"
							_tmp33_ = g_strdup (_ ("Inbox"));
#line 67 "/run/build/planner/src/Services/Notifications.vala"
							_g_free0 (summary);
#line 67 "/run/build/planner/src/Services/Notifications.vala"
							summary = _tmp33_;
#line 511 "Notifications.c"
						} else {
							ServicesDatabase* _tmp34_;
							ObjectsTask* _tmp35_;
							gint _tmp36_;
							ObjectsProject* _tmp37_;
							ObjectsProject* _tmp38_;
							const gchar* _tmp39_;
							gchar* _tmp40_;
#line 69 "/run/build/planner/src/Services/Notifications.vala"
							_tmp34_ = application_database;
#line 69 "/run/build/planner/src/Services/Notifications.vala"
							_tmp35_ = task;
#line 69 "/run/build/planner/src/Services/Notifications.vala"
							_tmp36_ = _tmp35_->project_id;
#line 69 "/run/build/planner/src/Services/Notifications.vala"
							_tmp37_ = services_database_get_project (_tmp34_, _tmp36_);
#line 69 "/run/build/planner/src/Services/Notifications.vala"
							_tmp38_ = _tmp37_;
#line 69 "/run/build/planner/src/Services/Notifications.vala"
							_tmp39_ = _tmp38_->name;
#line 69 "/run/build/planner/src/Services/Notifications.vala"
							_tmp40_ = g_strdup (_tmp39_);
#line 69 "/run/build/planner/src/Services/Notifications.vala"
							_g_free0 (summary);
#line 69 "/run/build/planner/src/Services/Notifications.vala"
							summary = _tmp40_;
#line 69 "/run/build/planner/src/Services/Notifications.vala"
							_objects_project_unref0 (_tmp38_);
#line 540 "Notifications.c"
						}
#line 72 "/run/build/planner/src/Services/Notifications.vala"
						_tmp41_ = summary;
#line 72 "/run/build/planner/src/Services/Notifications.vala"
						_tmp42_ = body;
#line 72 "/run/build/planner/src/Services/Notifications.vala"
						_tmp43_ = notify_notification_new (_tmp41_, _tmp42_, "com.github.alainm23.planner");
#line 72 "/run/build/planner/src/Services/Notifications.vala"
						_g_object_unref0 (self->priv->notification);
#line 72 "/run/build/planner/src/Services/Notifications.vala"
						self->priv->notification = _tmp43_;
#line 73 "/run/build/planner/src/Services/Notifications.vala"
						_tmp44_ = self->priv->notification;
#line 73 "/run/build/planner/src/Services/Notifications.vala"
						notify_notification_set_urgency (_tmp44_, NOTIFY_URGENCY_CRITICAL);
#line 556 "Notifications.c"
						{
							NotifyNotification* _tmp45_;
							ObjectsTask* _tmp46_;
							ServicesDatabase* _tmp47_;
							ObjectsTask* _tmp48_;
#line 76 "/run/build/planner/src/Services/Notifications.vala"
							_tmp45_ = self->priv->notification;
#line 76 "/run/build/planner/src/Services/Notifications.vala"
							notify_notification_show (_tmp45_, &_inner_error_);
#line 76 "/run/build/planner/src/Services/Notifications.vala"
							if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 568 "Notifications.c"
								goto __catch3_g_error;
							}
#line 77 "/run/build/planner/src/Services/Notifications.vala"
							_tmp46_ = task;
#line 77 "/run/build/planner/src/Services/Notifications.vala"
							_tmp46_->was_notified = 1;
#line 78 "/run/build/planner/src/Services/Notifications.vala"
							_tmp47_ = application_database;
#line 78 "/run/build/planner/src/Services/Notifications.vala"
							_tmp48_ = task;
#line 78 "/run/build/planner/src/Services/Notifications.vala"
							services_database_update_task (_tmp47_, _tmp48_);
#line 581 "Notifications.c"
						}
						goto __finally3;
						__catch3_g_error:
						{
							GError* e = NULL;
							GError* _tmp49_;
							const gchar* _tmp50_;
#line 75 "/run/build/planner/src/Services/Notifications.vala"
							e = _inner_error_;
#line 75 "/run/build/planner/src/Services/Notifications.vala"
							_inner_error_ = NULL;
#line 80 "/run/build/planner/src/Services/Notifications.vala"
							_tmp49_ = e;
#line 80 "/run/build/planner/src/Services/Notifications.vala"
							_tmp50_ = _tmp49_->message;
#line 80 "/run/build/planner/src/Services/Notifications.vala"
							g_warning ("Notifications.vala:80: Failed to show notification: %s", _tmp50_);
#line 75 "/run/build/planner/src/Services/Notifications.vala"
							_g_error_free0 (e);
#line 601 "Notifications.c"
						}
						__finally3:
#line 75 "/run/build/planner/src/Services/Notifications.vala"
						if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 606 "Notifications.c"
							gboolean _tmp51_ = FALSE;
#line 75 "/run/build/planner/src/Services/Notifications.vala"
							_g_free0 (body);
#line 75 "/run/build/planner/src/Services/Notifications.vala"
							_g_free0 (summary);
#line 75 "/run/build/planner/src/Services/Notifications.vala"
							_g_date_time_unref0 (reminder_date);
#line 75 "/run/build/planner/src/Services/Notifications.vala"
							_g_date_time_unref0 (now_date);
#line 75 "/run/build/planner/src/Services/Notifications.vala"
							_objects_task_unref0 (task);
#line 75 "/run/build/planner/src/Services/Notifications.vala"
							_g_object_unref0 (_task_list);
#line 75 "/run/build/planner/src/Services/Notifications.vala"
							_g_object_unref0 (all_tasks);
#line 75 "/run/build/planner/src/Services/Notifications.vala"
							g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 75 "/run/build/planner/src/Services/Notifications.vala"
							g_clear_error (&_inner_error_);
#line 75 "/run/build/planner/src/Services/Notifications.vala"
							return _tmp51_;
#line 628 "Notifications.c"
						}
#line 62 "/run/build/planner/src/Services/Notifications.vala"
						_g_free0 (body);
#line 62 "/run/build/planner/src/Services/Notifications.vala"
						_g_free0 (summary);
#line 634 "Notifications.c"
					}
				}
			}
#line 56 "/run/build/planner/src/Services/Notifications.vala"
			_g_date_time_unref0 (reminder_date);
#line 56 "/run/build/planner/src/Services/Notifications.vala"
			_g_date_time_unref0 (now_date);
#line 56 "/run/build/planner/src/Services/Notifications.vala"
			_objects_task_unref0 (task);
#line 644 "Notifications.c"
		}
#line 56 "/run/build/planner/src/Services/Notifications.vala"
		_g_object_unref0 (_task_list);
#line 648 "Notifications.c"
	}
#line 87 "/run/build/planner/src/Services/Notifications.vala"
	result = TRUE;
#line 87 "/run/build/planner/src/Services/Notifications.vala"
	_g_object_unref0 (all_tasks);
#line 87 "/run/build/planner/src/Services/Notifications.vala"
	return result;
#line 656 "Notifications.c"
}


static gboolean
___lambda45__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda45_ ((ServicesNotifications*) self);
#line 52 "/run/build/planner/src/Services/Notifications.vala"
	return result;
#line 667 "Notifications.c"
}


void
services_notifications_start_notification (ServicesNotifications* self)
{
#line 51 "/run/build/planner/src/Services/Notifications.vala"
	g_return_if_fail (self != NULL);
#line 52 "/run/build/planner/src/Services/Notifications.vala"
	g_timeout_add_seconds_full (G_PRIORITY_DEFAULT, (guint) 15, ___lambda45__gsource_func, g_object_ref (self), g_object_unref);
#line 678 "Notifications.c"
}


static void
g_cclosure_user_marshal_VOID__OBJECTS_TASK (GClosure * closure,
                                            GValue * return_value,
                                            guint n_param_values,
                                            const GValue * param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECTS_TASK) (gpointer data1, gpointer arg_1, gpointer data2);
	register GMarshalFunc_VOID__OBJECTS_TASK callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	g_return_if_fail (n_param_values == 2);
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 22 "/run/build/planner/src/Services/Notifications.vala"
		data1 = closure->data;
#line 22 "/run/build/planner/src/Services/Notifications.vala"
		data2 = param_values->data[0].v_pointer;
#line 704 "Notifications.c"
	} else {
#line 22 "/run/build/planner/src/Services/Notifications.vala"
		data1 = param_values->data[0].v_pointer;
#line 22 "/run/build/planner/src/Services/Notifications.vala"
		data2 = closure->data;
#line 710 "Notifications.c"
	}
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	callback = (GMarshalFunc_VOID__OBJECTS_TASK) (marshal_data ? marshal_data : cc->callback);
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	callback (data1, objects_value_get_task (param_values + 1), data2);
#line 716 "Notifications.c"
}


static void
g_cclosure_user_marshal_VOID__STRING_STRING_STRING_INT_BOOLEAN (GClosure * closure,
                                                                GValue * return_value,
                                                                guint n_param_values,
                                                                const GValue * param_values,
                                                                gpointer invocation_hint,
                                                                gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__STRING_STRING_STRING_INT_BOOLEAN) (gpointer data1, const char* arg_1, const char* arg_2, const char* arg_3, gint arg_4, gboolean arg_5, gpointer data2);
	register GMarshalFunc_VOID__STRING_STRING_STRING_INT_BOOLEAN callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	g_return_if_fail (n_param_values == 6);
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 22 "/run/build/planner/src/Services/Notifications.vala"
		data1 = closure->data;
#line 22 "/run/build/planner/src/Services/Notifications.vala"
		data2 = param_values->data[0].v_pointer;
#line 742 "Notifications.c"
	} else {
#line 22 "/run/build/planner/src/Services/Notifications.vala"
		data1 = param_values->data[0].v_pointer;
#line 22 "/run/build/planner/src/Services/Notifications.vala"
		data2 = closure->data;
#line 748 "Notifications.c"
	}
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	callback = (GMarshalFunc_VOID__STRING_STRING_STRING_INT_BOOLEAN) (marshal_data ? marshal_data : cc->callback);
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	callback (data1, g_value_get_string (param_values + 1), g_value_get_string (param_values + 2), g_value_get_string (param_values + 3), g_value_get_int (param_values + 4), g_value_get_boolean (param_values + 5), data2);
#line 754 "Notifications.c"
}


static void
services_notifications_class_init (ServicesNotificationsClass * klass)
{
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	services_notifications_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	g_type_class_add_private (klass, sizeof (ServicesNotificationsPrivate));
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	G_OBJECT_CLASS (klass)->finalize = services_notifications_finalize;
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	services_notifications_signals[SERVICES_NOTIFICATIONS_ON_SIGNAL_WEATHER_UPDATE_SIGNAL] = g_signal_new ("on-signal-weather-update", SERVICES_TYPE_NOTIFICATIONS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	services_notifications_signals[SERVICES_NOTIFICATIONS_ON_SIGNAL_LOCATION_MANUAL_SIGNAL] = g_signal_new ("on-signal-location-manual", SERVICES_TYPE_NOTIFICATIONS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	services_notifications_signals[SERVICES_NOTIFICATIONS_ON_SIGNAL_HIGHLIGHT_TASK_SIGNAL] = g_signal_new ("on-signal-highlight-task", SERVICES_TYPE_NOTIFICATIONS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECTS_TASK, G_TYPE_NONE, 1, OBJECTS_TYPE_TASK);
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	services_notifications_signals[SERVICES_NOTIFICATIONS_SEND_LOCAL_NOTIFICATION_SIGNAL] = g_signal_new ("send-local-notification", SERVICES_TYPE_NOTIFICATIONS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__STRING_STRING_STRING_INT_BOOLEAN, G_TYPE_NONE, 5, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_INT, G_TYPE_BOOLEAN);
#line 775 "Notifications.c"
}


static void
services_notifications_instance_init (ServicesNotifications * self)
{
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	self->priv = SERVICES_NOTIFICATIONS_GET_PRIVATE (self);
#line 784 "Notifications.c"
}


static void
services_notifications_finalize (GObject * obj)
{
	ServicesNotifications * self;
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SERVICES_TYPE_NOTIFICATIONS, ServicesNotifications);
#line 23 "/run/build/planner/src/Services/Notifications.vala"
	_g_object_unref0 (self->priv->notification);
#line 22 "/run/build/planner/src/Services/Notifications.vala"
	G_OBJECT_CLASS (services_notifications_parent_class)->finalize (obj);
#line 798 "Notifications.c"
}


GType
services_notifications_get_type (void)
{
	static volatile gsize services_notifications_type_id__volatile = 0;
	if (g_once_init_enter (&services_notifications_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ServicesNotificationsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) services_notifications_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ServicesNotifications), 0, (GInstanceInitFunc) services_notifications_instance_init, NULL };
		GType services_notifications_type_id;
		services_notifications_type_id = g_type_register_static (G_TYPE_OBJECT, "ServicesNotifications", &g_define_type_info, 0);
		g_once_init_leave (&services_notifications_type_id__volatile, services_notifications_type_id);
	}
	return services_notifications_type_id__volatile;
}



