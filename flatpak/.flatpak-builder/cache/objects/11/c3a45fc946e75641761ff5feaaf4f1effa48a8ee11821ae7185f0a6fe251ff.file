/* role-details.c generated by valac 0.40.11, the Vala compiler
 * generated from role-details.vala, do not modify */

/*
 * Copyright (C) 2011 Collabora Ltd.
 * Copyright (C) 2011 Philip Withnall
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Raul Gutierrez Segales <raul.gutierrez.segales@collabora.co.uk>
 *       Travis Reitter <travis.reitter@collabora.co.uk>
 *       Philip Withnall <philip@tecnocode.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>
#include <gee.h>
#include <gio/gio.h>


#define FOLKS_TYPE_ROLE (folks_role_get_type ())
#define FOLKS_ROLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_ROLE, FolksRole))
#define FOLKS_ROLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_ROLE, FolksRoleClass))
#define FOLKS_IS_ROLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_ROLE))
#define FOLKS_IS_ROLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_ROLE))
#define FOLKS_ROLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_ROLE, FolksRoleClass))

typedef struct _FolksRole FolksRole;
typedef struct _FolksRoleClass FolksRoleClass;
typedef struct _FolksRolePrivate FolksRolePrivate;
enum  {
	FOLKS_ROLE_0_PROPERTY,
	FOLKS_ROLE_ORGANISATION_NAME_PROPERTY,
	FOLKS_ROLE_TITLE_PROPERTY,
	FOLKS_ROLE_ROLE_PROPERTY,
	FOLKS_ROLE_UID_PROPERTY,
	FOLKS_ROLE_NUM_PROPERTIES
};
static GParamSpec* folks_role_properties[FOLKS_ROLE_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))

#define FOLKS_TYPE_ABSTRACT_FIELD_DETAILS (folks_abstract_field_details_get_type ())
#define FOLKS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails))
#define FOLKS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))

typedef struct _FolksAbstractFieldDetails FolksAbstractFieldDetails;
typedef struct _FolksAbstractFieldDetailsClass FolksAbstractFieldDetailsClass;
typedef struct _FolksAbstractFieldDetailsPrivate FolksAbstractFieldDetailsPrivate;

#define FOLKS_TYPE_ROLE_FIELD_DETAILS (folks_role_field_details_get_type ())
#define FOLKS_ROLE_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_ROLE_FIELD_DETAILS, FolksRoleFieldDetails))
#define FOLKS_ROLE_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_ROLE_FIELD_DETAILS, FolksRoleFieldDetailsClass))
#define FOLKS_IS_ROLE_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_ROLE_FIELD_DETAILS))
#define FOLKS_IS_ROLE_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_ROLE_FIELD_DETAILS))
#define FOLKS_ROLE_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_ROLE_FIELD_DETAILS, FolksRoleFieldDetailsClass))

typedef struct _FolksRoleFieldDetails FolksRoleFieldDetails;
typedef struct _FolksRoleFieldDetailsClass FolksRoleFieldDetailsClass;
typedef struct _FolksRoleFieldDetailsPrivate FolksRoleFieldDetailsPrivate;
enum  {
	FOLKS_ROLE_FIELD_DETAILS_0_PROPERTY,
	FOLKS_ROLE_FIELD_DETAILS_ID_PROPERTY,
	FOLKS_ROLE_FIELD_DETAILS_NUM_PROPERTIES
};
static GParamSpec* folks_role_field_details_properties[FOLKS_ROLE_FIELD_DETAILS_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define FOLKS_TYPE_ROLE_DETAILS (folks_role_details_get_type ())
#define FOLKS_ROLE_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_ROLE_DETAILS, FolksRoleDetails))
#define FOLKS_IS_ROLE_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_ROLE_DETAILS))
#define FOLKS_ROLE_DETAILS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_ROLE_DETAILS, FolksRoleDetailsIface))

typedef struct _FolksRoleDetails FolksRoleDetails;
typedef struct _FolksRoleDetailsIface FolksRoleDetailsIface;
typedef struct _FolksRoleDetailsChangeRolesData FolksRoleDetailsChangeRolesData;

struct _FolksRole {
	GObject parent_instance;
	FolksRolePrivate * priv;
};

struct _FolksRoleClass {
	GObjectClass parent_class;
};

struct _FolksRolePrivate {
	gchar* _organisation_name;
	gchar* _title;
	gchar* _role;
	gchar* _uid;
};

struct _FolksAbstractFieldDetails {
	GObject parent_instance;
	FolksAbstractFieldDetailsPrivate * priv;
};

struct _FolksAbstractFieldDetailsClass {
	GObjectClass parent_class;
	gboolean (*equal) (FolksAbstractFieldDetails* self, FolksAbstractFieldDetails* that);
	gboolean (*parameters_equal) (FolksAbstractFieldDetails* self, FolksAbstractFieldDetails* that);
	gboolean (*values_equal) (FolksAbstractFieldDetails* self, FolksAbstractFieldDetails* that);
	guint (*hash) (FolksAbstractFieldDetails* self);
	gconstpointer (*get_value) (FolksAbstractFieldDetails* self);
	void (*set_value) (FolksAbstractFieldDetails* self, gconstpointer value);
	const gchar* (*get_id) (FolksAbstractFieldDetails* self);
	void (*set_id) (FolksAbstractFieldDetails* self, const gchar* value);
	GeeMultiMap* (*get_parameters) (FolksAbstractFieldDetails* self);
	void (*set_parameters) (FolksAbstractFieldDetails* self, GeeMultiMap* value);
};

struct _FolksRoleFieldDetails {
	FolksAbstractFieldDetails parent_instance;
	FolksRoleFieldDetailsPrivate * priv;
};

struct _FolksRoleFieldDetailsClass {
	FolksAbstractFieldDetailsClass parent_class;
};

struct _FolksRoleFieldDetailsPrivate {
	gchar* _id;
};

typedef enum  {
	FOLKS_PROPERTY_ERROR_NOT_WRITEABLE,
	FOLKS_PROPERTY_ERROR_INVALID_VALUE,
	FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR,
	FOLKS_PROPERTY_ERROR_UNAVAILABLE
} FolksPropertyError;
#define FOLKS_PROPERTY_ERROR folks_property_error_quark ()
struct _FolksRoleDetailsIface {
	GTypeInterface parent_iface;
	void (*change_roles) (FolksRoleDetails* self, GeeSet* roles, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_roles_finish) (FolksRoleDetails* self, GAsyncResult* _res_, GError** error);
	GeeSet* (*get_roles) (FolksRoleDetails* self);
	void (*set_roles) (FolksRoleDetails* self, GeeSet* value);
};

struct _FolksRoleDetailsChangeRolesData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksRoleDetails* self;
	GeeSet* roles;
	GError* _tmp0_;
	GError * _inner_error_;
};


static gpointer folks_role_parent_class = NULL;
static gpointer folks_role_field_details_parent_class = NULL;

GType folks_role_get_type (void) G_GNUC_CONST;
#define FOLKS_ROLE_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_TYPE_ROLE, FolksRolePrivate))
FolksRole* folks_role_new (const gchar* title,
                           const gchar* organisation_name,
                           const gchar* uid);
FolksRole* folks_role_construct (GType object_type,
                                 const gchar* title,
                                 const gchar* organisation_name,
                                 const gchar* uid);
gboolean folks_role_is_empty (FolksRole* self);
const gchar* folks_role_get_organisation_name (FolksRole* self);
const gchar* folks_role_get_title (FolksRole* self);
const gchar* folks_role_get_role (FolksRole* self);
gboolean folks_role_equal (FolksRole* a,
                           FolksRole* b);
guint folks_role_hash (FolksRole* r);
gchar* folks_role_to_string (FolksRole* self);
void folks_role_set_organisation_name (FolksRole* self,
                                       const gchar* value);
void folks_role_set_title (FolksRole* self,
                           const gchar* value);
void folks_role_set_role (FolksRole* self,
                          const gchar* value);
const gchar* folks_role_get_uid (FolksRole* self) G_GNUC_DEPRECATED;
void folks_role_set_uid (FolksRole* self,
                         const gchar* value) G_GNUC_DEPRECATED;
static void folks_role_finalize (GObject * obj);
static void _vala_folks_role_get_property (GObject * object,
                                    guint property_id,
                                    GValue * value,
                                    GParamSpec * pspec);
static void _vala_folks_role_set_property (GObject * object,
                                    guint property_id,
                                    const GValue * value,
                                    GParamSpec * pspec);
GType folks_abstract_field_details_get_type (void) G_GNUC_CONST;
GType folks_role_field_details_get_type (void) G_GNUC_CONST;
#define FOLKS_ROLE_FIELD_DETAILS_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_TYPE_ROLE_FIELD_DETAILS, FolksRoleFieldDetailsPrivate))
FolksRoleFieldDetails* folks_role_field_details_new (FolksRole* value,
                                                     GeeMultiMap* parameters);
FolksRoleFieldDetails* folks_role_field_details_construct (GType object_type,
                                                           FolksRole* value,
                                                           GeeMultiMap* parameters);
static gboolean folks_role_field_details_real_equal (FolksAbstractFieldDetails* base,
                                              FolksAbstractFieldDetails* that);
gboolean folks_abstract_field_details_parameters_equal (FolksAbstractFieldDetails* self,
                                                        FolksAbstractFieldDetails* that);
gconstpointer folks_abstract_field_details_get_value (FolksAbstractFieldDetails* self);
static guint folks_role_field_details_real_hash (FolksAbstractFieldDetails* base);
static GObject * folks_role_field_details_constructor (GType type,
                                                guint n_construct_properties,
                                                GObjectConstructParam * construct_properties);
static void _folks_role_field_details___lambda5_ (FolksRoleFieldDetails* self,
                                           GObject* s,
                                           GParamSpec* p);
const gchar* folks_abstract_field_details_get_id (FolksAbstractFieldDetails* self);
void folks_abstract_field_details_set_id (FolksAbstractFieldDetails* self,
                                          const gchar* value);
static void __folks_role_field_details___lambda5__g_object_notify (GObject* _sender,
                                                            GParamSpec* pspec,
                                                            gpointer self);
static void folks_role_field_details_finalize (GObject * obj);
static void _vala_folks_role_field_details_get_property (GObject * object,
                                                  guint property_id,
                                                  GValue * value,
                                                  GParamSpec * pspec);
static void _vala_folks_role_field_details_set_property (GObject * object,
                                                  guint property_id,
                                                  const GValue * value,
                                                  GParamSpec * pspec);
GQuark folks_property_error_quark (void);
GType folks_role_details_get_type (void) G_GNUC_CONST;
static void folks_role_details_real_change_roles_data_free (gpointer _data);
static void folks_role_details_real_change_roles_async_ready_wrapper (GObject *source_object,
                                                               GAsyncResult *res,
                                                               void *user_data);
static void folks_role_details_real_change_roles (FolksRoleDetails* self,
                                           GeeSet* roles,
                                           GAsyncReadyCallback _callback_,
                                           gpointer _user_data_);
void folks_role_details_change_roles (FolksRoleDetails* self,
                                      GeeSet* roles,
                                      GAsyncReadyCallback _callback_,
                                      gpointer _user_data_);
void folks_role_details_change_roles_finish (FolksRoleDetails* self,
                                             GAsyncResult* _res_,
                                             GError** error);
static gboolean folks_role_details_real_change_roles_co (FolksRoleDetailsChangeRolesData* _data_);
GeeSet* folks_role_details_get_roles (FolksRoleDetails* self);
void folks_role_details_set_roles (FolksRoleDetails* self,
                                   GeeSet* value);


/**
   * Default constructor.
   *
   * @param title title of the position
   * @param organisation_name organisation where the role is hold
   * @param uid a Unique ID associated to this Role
   * @return a new Role
   *
   * @since 0.4.0
   */
FolksRole*
folks_role_construct (GType object_type,
                      const gchar* title,
                      const gchar* organisation_name,
                      const gchar* uid)
{
	FolksRole * self = NULL;
#line 98 "/run/build/folks/folks/role-details.vala"
	self = (FolksRole*) g_object_new (object_type, "uid", uid, "title", title, "organisation-name", organisation_name, NULL);
#line 95 "/run/build/folks/folks/role-details.vala"
	return self;
#line 291 "role-details.c"
}


FolksRole*
folks_role_new (const gchar* title,
                const gchar* organisation_name,
                const gchar* uid)
{
#line 95 "/run/build/folks/folks/role-details.vala"
	return folks_role_construct (FOLKS_TYPE_ROLE, title, organisation_name, uid);
#line 302 "role-details.c"
}


/**
   * Whether none of the components is set.
   *
   * @return ``true`` if all the components are the empty string, ``false``
   * otherwise.
   *
   * @since 0.6.7
   */
gboolean
folks_role_is_empty (FolksRole* self)
{
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
#line 111 "/run/build/folks/folks/role-details.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 113 "/run/build/folks/folks/role-details.vala"
	_tmp2_ = folks_role_get_organisation_name (self);
#line 113 "/run/build/folks/folks/role-details.vala"
	_tmp3_ = _tmp2_;
#line 113 "/run/build/folks/folks/role-details.vala"
	if (g_strcmp0 (_tmp3_, "") == 0) {
#line 330 "role-details.c"
		const gchar* _tmp4_;
		const gchar* _tmp5_;
#line 114 "/run/build/folks/folks/role-details.vala"
		_tmp4_ = folks_role_get_title (self);
#line 114 "/run/build/folks/folks/role-details.vala"
		_tmp5_ = _tmp4_;
#line 114 "/run/build/folks/folks/role-details.vala"
		_tmp1_ = g_strcmp0 (_tmp5_, "") == 0;
#line 339 "role-details.c"
	} else {
#line 113 "/run/build/folks/folks/role-details.vala"
		_tmp1_ = FALSE;
#line 343 "role-details.c"
	}
#line 113 "/run/build/folks/folks/role-details.vala"
	if (_tmp1_) {
#line 347 "role-details.c"
		const gchar* _tmp6_;
		const gchar* _tmp7_;
#line 115 "/run/build/folks/folks/role-details.vala"
		_tmp6_ = folks_role_get_role (self);
#line 115 "/run/build/folks/folks/role-details.vala"
		_tmp7_ = _tmp6_;
#line 115 "/run/build/folks/folks/role-details.vala"
		_tmp0_ = g_strcmp0 (_tmp7_, "") == 0;
#line 356 "role-details.c"
	} else {
#line 113 "/run/build/folks/folks/role-details.vala"
		_tmp0_ = FALSE;
#line 360 "role-details.c"
	}
#line 113 "/run/build/folks/folks/role-details.vala"
	result = _tmp0_;
#line 113 "/run/build/folks/folks/role-details.vala"
	return result;
#line 366 "role-details.c"
}


/**
   * Compare if two roles are equal. Roles are equal if their titles and
   * organisation names are equal.
   *
   * @param a a role to compare
   * @param b another role to compare
   * @return ``true`` if the roles are equal, ``false`` otherwise
   */
gboolean
folks_role_equal (FolksRole* a,
                  FolksRole* b)
{
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
#line 126 "/run/build/folks/folks/role-details.vala"
	g_return_val_if_fail (a != NULL, FALSE);
#line 126 "/run/build/folks/folks/role-details.vala"
	g_return_val_if_fail (b != NULL, FALSE);
#line 128 "/run/build/folks/folks/role-details.vala"
	_tmp2_ = folks_role_get_title (a);
#line 128 "/run/build/folks/folks/role-details.vala"
	_tmp3_ = _tmp2_;
#line 128 "/run/build/folks/folks/role-details.vala"
	_tmp4_ = folks_role_get_title (b);
#line 128 "/run/build/folks/folks/role-details.vala"
	_tmp5_ = _tmp4_;
#line 128 "/run/build/folks/folks/role-details.vala"
	if (g_strcmp0 (_tmp3_, _tmp5_) == 0) {
#line 403 "role-details.c"
		const gchar* _tmp6_;
		const gchar* _tmp7_;
		const gchar* _tmp8_;
		const gchar* _tmp9_;
#line 129 "/run/build/folks/folks/role-details.vala"
		_tmp6_ = folks_role_get_role (a);
#line 129 "/run/build/folks/folks/role-details.vala"
		_tmp7_ = _tmp6_;
#line 129 "/run/build/folks/folks/role-details.vala"
		_tmp8_ = folks_role_get_role (b);
#line 129 "/run/build/folks/folks/role-details.vala"
		_tmp9_ = _tmp8_;
#line 129 "/run/build/folks/folks/role-details.vala"
		_tmp1_ = g_strcmp0 (_tmp7_, _tmp9_) == 0;
#line 418 "role-details.c"
	} else {
#line 128 "/run/build/folks/folks/role-details.vala"
		_tmp1_ = FALSE;
#line 422 "role-details.c"
	}
#line 128 "/run/build/folks/folks/role-details.vala"
	if (_tmp1_) {
#line 426 "role-details.c"
		const gchar* _tmp10_;
		const gchar* _tmp11_;
		const gchar* _tmp12_;
		const gchar* _tmp13_;
#line 130 "/run/build/folks/folks/role-details.vala"
		_tmp10_ = folks_role_get_organisation_name (a);
#line 130 "/run/build/folks/folks/role-details.vala"
		_tmp11_ = _tmp10_;
#line 130 "/run/build/folks/folks/role-details.vala"
		_tmp12_ = folks_role_get_organisation_name (b);
#line 130 "/run/build/folks/folks/role-details.vala"
		_tmp13_ = _tmp12_;
#line 130 "/run/build/folks/folks/role-details.vala"
		_tmp0_ = g_strcmp0 (_tmp11_, _tmp13_) == 0;
#line 441 "role-details.c"
	} else {
#line 128 "/run/build/folks/folks/role-details.vala"
		_tmp0_ = FALSE;
#line 445 "role-details.c"
	}
#line 128 "/run/build/folks/folks/role-details.vala"
	result = _tmp0_;
#line 128 "/run/build/folks/folks/role-details.vala"
	return result;
#line 451 "role-details.c"
}


/**
   * Hash function for the class. Suitable for use as a hash table key.
   *
   * @param r a role to hash
   * @return hash value for the role instance
   */
guint
folks_role_hash (FolksRole* r)
{
	guint result = 0U;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
#line 139 "/run/build/folks/folks/role-details.vala"
	g_return_val_if_fail (r != NULL, 0U);
#line 141 "/run/build/folks/folks/role-details.vala"
	_tmp0_ = folks_role_get_organisation_name (r);
#line 141 "/run/build/folks/folks/role-details.vala"
	_tmp1_ = _tmp0_;
#line 141 "/run/build/folks/folks/role-details.vala"
	_tmp2_ = folks_role_get_title (r);
#line 141 "/run/build/folks/folks/role-details.vala"
	_tmp3_ = _tmp2_;
#line 141 "/run/build/folks/folks/role-details.vala"
	_tmp4_ = folks_role_get_role (r);
#line 141 "/run/build/folks/folks/role-details.vala"
	_tmp5_ = _tmp4_;
#line 141 "/run/build/folks/folks/role-details.vala"
	result = (g_str_hash (_tmp1_) ^ g_str_hash (_tmp3_)) ^ g_str_hash (_tmp5_);
#line 141 "/run/build/folks/folks/role-details.vala"
	return result;
#line 489 "role-details.c"
}


/**
   * Formatted version of this role.
   *
   * @since 0.4.0
   */
gchar*
folks_role_to_string (FolksRole* self)
{
	gchar* result = NULL;
	gchar* str = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	gchar* _tmp7_;
#line 149 "/run/build/folks/folks/role-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 151 "/run/build/folks/folks/role-details.vala"
	_tmp0_ = g_strdup (_ ("Title: %s, Organisation: %s, Role: %s"));
#line 151 "/run/build/folks/folks/role-details.vala"
	str = _tmp0_;
#line 152 "/run/build/folks/folks/role-details.vala"
	_tmp1_ = folks_role_get_title (self);
#line 152 "/run/build/folks/folks/role-details.vala"
	_tmp2_ = _tmp1_;
#line 152 "/run/build/folks/folks/role-details.vala"
	_tmp3_ = folks_role_get_organisation_name (self);
#line 152 "/run/build/folks/folks/role-details.vala"
	_tmp4_ = _tmp3_;
#line 152 "/run/build/folks/folks/role-details.vala"
	_tmp5_ = folks_role_get_role (self);
#line 152 "/run/build/folks/folks/role-details.vala"
	_tmp6_ = _tmp5_;
#line 152 "/run/build/folks/folks/role-details.vala"
	_tmp7_ = g_strdup_printf (str, _tmp2_, _tmp4_, _tmp6_);
#line 152 "/run/build/folks/folks/role-details.vala"
	result = _tmp7_;
#line 152 "/run/build/folks/folks/role-details.vala"
	_g_free0 (str);
#line 152 "/run/build/folks/folks/role-details.vala"
	return result;
#line 537 "role-details.c"
}


const gchar*
folks_role_get_organisation_name (FolksRole* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 43 "/run/build/folks/folks/role-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 43 "/run/build/folks/folks/role-details.vala"
	_tmp0_ = self->priv->_organisation_name;
#line 43 "/run/build/folks/folks/role-details.vala"
	result = _tmp0_;
#line 43 "/run/build/folks/folks/role-details.vala"
	return result;
#line 554 "role-details.c"
}


void
folks_role_set_organisation_name (FolksRole* self,
                                  const gchar* value)
{
	const gchar* _tmp0_ = NULL;
	gchar* _tmp1_;
#line 44 "/run/build/folks/folks/role-details.vala"
	g_return_if_fail (self != NULL);
#line 44 "/run/build/folks/folks/role-details.vala"
	if (value != NULL) {
#line 44 "/run/build/folks/folks/role-details.vala"
		_tmp0_ = value;
#line 570 "role-details.c"
	} else {
#line 44 "/run/build/folks/folks/role-details.vala"
		_tmp0_ = "";
#line 574 "role-details.c"
	}
#line 44 "/run/build/folks/folks/role-details.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 44 "/run/build/folks/folks/role-details.vala"
	_g_free0 (self->priv->_organisation_name);
#line 44 "/run/build/folks/folks/role-details.vala"
	self->priv->_organisation_name = _tmp1_;
#line 44 "/run/build/folks/folks/role-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_role_properties[FOLKS_ROLE_ORGANISATION_NAME_PROPERTY]);
#line 584 "role-details.c"
}


const gchar*
folks_role_get_title (FolksRole* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 55 "/run/build/folks/folks/role-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 55 "/run/build/folks/folks/role-details.vala"
	_tmp0_ = self->priv->_title;
#line 55 "/run/build/folks/folks/role-details.vala"
	result = _tmp0_;
#line 55 "/run/build/folks/folks/role-details.vala"
	return result;
#line 601 "role-details.c"
}


void
folks_role_set_title (FolksRole* self,
                      const gchar* value)
{
	const gchar* _tmp0_ = NULL;
	gchar* _tmp1_;
#line 56 "/run/build/folks/folks/role-details.vala"
	g_return_if_fail (self != NULL);
#line 56 "/run/build/folks/folks/role-details.vala"
	if (value != NULL) {
#line 56 "/run/build/folks/folks/role-details.vala"
		_tmp0_ = value;
#line 617 "role-details.c"
	} else {
#line 56 "/run/build/folks/folks/role-details.vala"
		_tmp0_ = "";
#line 621 "role-details.c"
	}
#line 56 "/run/build/folks/folks/role-details.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 56 "/run/build/folks/folks/role-details.vala"
	_g_free0 (self->priv->_title);
#line 56 "/run/build/folks/folks/role-details.vala"
	self->priv->_title = _tmp1_;
#line 56 "/run/build/folks/folks/role-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_role_properties[FOLKS_ROLE_TITLE_PROPERTY]);
#line 631 "role-details.c"
}


const gchar*
folks_role_get_role (FolksRole* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 69 "/run/build/folks/folks/role-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 69 "/run/build/folks/folks/role-details.vala"
	_tmp0_ = self->priv->_role;
#line 69 "/run/build/folks/folks/role-details.vala"
	result = _tmp0_;
#line 69 "/run/build/folks/folks/role-details.vala"
	return result;
#line 648 "role-details.c"
}


void
folks_role_set_role (FolksRole* self,
                     const gchar* value)
{
	const gchar* _tmp0_ = NULL;
	gchar* _tmp1_;
#line 70 "/run/build/folks/folks/role-details.vala"
	g_return_if_fail (self != NULL);
#line 70 "/run/build/folks/folks/role-details.vala"
	if (value != NULL) {
#line 70 "/run/build/folks/folks/role-details.vala"
		_tmp0_ = value;
#line 664 "role-details.c"
	} else {
#line 70 "/run/build/folks/folks/role-details.vala"
		_tmp0_ = "";
#line 668 "role-details.c"
	}
#line 70 "/run/build/folks/folks/role-details.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 70 "/run/build/folks/folks/role-details.vala"
	_g_free0 (self->priv->_role);
#line 70 "/run/build/folks/folks/role-details.vala"
	self->priv->_role = _tmp1_;
#line 70 "/run/build/folks/folks/role-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_role_properties[FOLKS_ROLE_ROLE_PROPERTY]);
#line 678 "role-details.c"
}


const gchar*
folks_role_get_uid (FolksRole* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 81 "/run/build/folks/folks/role-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 81 "/run/build/folks/folks/role-details.vala"
	_tmp0_ = self->priv->_uid;
#line 81 "/run/build/folks/folks/role-details.vala"
	result = _tmp0_;
#line 81 "/run/build/folks/folks/role-details.vala"
	return result;
#line 695 "role-details.c"
}


void
folks_role_set_uid (FolksRole* self,
                    const gchar* value)
{
	const gchar* _tmp0_ = NULL;
	gchar* _tmp1_;
#line 82 "/run/build/folks/folks/role-details.vala"
	g_return_if_fail (self != NULL);
#line 82 "/run/build/folks/folks/role-details.vala"
	if (value != NULL) {
#line 82 "/run/build/folks/folks/role-details.vala"
		_tmp0_ = value;
#line 711 "role-details.c"
	} else {
#line 82 "/run/build/folks/folks/role-details.vala"
		_tmp0_ = "";
#line 715 "role-details.c"
	}
#line 82 "/run/build/folks/folks/role-details.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 82 "/run/build/folks/folks/role-details.vala"
	_g_free0 (self->priv->_uid);
#line 82 "/run/build/folks/folks/role-details.vala"
	self->priv->_uid = _tmp1_;
#line 82 "/run/build/folks/folks/role-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_role_properties[FOLKS_ROLE_UID_PROPERTY]);
#line 725 "role-details.c"
}


static void
folks_role_class_init (FolksRoleClass * klass)
{
#line 35 "/run/build/folks/folks/role-details.vala"
	folks_role_parent_class = g_type_class_peek_parent (klass);
#line 35 "/run/build/folks/folks/role-details.vala"
	g_type_class_add_private (klass, sizeof (FolksRolePrivate));
#line 35 "/run/build/folks/folks/role-details.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_folks_role_get_property;
#line 35 "/run/build/folks/folks/role-details.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_folks_role_set_property;
#line 35 "/run/build/folks/folks/role-details.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_role_finalize;
#line 742 "role-details.c"
	/**
	   * The name of the organisation in which the role is held.
	   */
#line 35 "/run/build/folks/folks/role-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_ROLE_ORGANISATION_NAME_PROPERTY, folks_role_properties[FOLKS_ROLE_ORGANISATION_NAME_PROPERTY] = g_param_spec_string ("organisation-name", "organisation-name", "organisation-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 748 "role-details.c"
	/**
	   * The title of the position held.
	   *
	   * For example: “Director, Ministry of Silly Walks”
	   */
#line 35 "/run/build/folks/folks/role-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_ROLE_TITLE_PROPERTY, folks_role_properties[FOLKS_ROLE_TITLE_PROPERTY] = g_param_spec_string ("title", "title", "title", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 756 "role-details.c"
	/**
	   * The role of the position.
	   *
	   * For example: “Programmer”
	   *
	   * @since 0.6.0
	   */
#line 35 "/run/build/folks/folks/role-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_ROLE_ROLE_PROPERTY, folks_role_properties[FOLKS_ROLE_ROLE_PROPERTY] = g_param_spec_string ("role", "role", "role", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 766 "role-details.c"
	/**
	   * The UID that distinguishes this role.
	   */
#line 35 "/run/build/folks/folks/role-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_ROLE_UID_PROPERTY, folks_role_properties[FOLKS_ROLE_UID_PROPERTY] = g_param_spec_string ("uid", "uid", "uid", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_DEPRECATED));
#line 772 "role-details.c"
}


static void
folks_role_instance_init (FolksRole * self)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
#line 35 "/run/build/folks/folks/role-details.vala"
	self->priv = FOLKS_ROLE_GET_PRIVATE (self);
#line 37 "/run/build/folks/folks/role-details.vala"
	_tmp0_ = g_strdup ("");
#line 37 "/run/build/folks/folks/role-details.vala"
	self->priv->_organisation_name = _tmp0_;
#line 47 "/run/build/folks/folks/role-details.vala"
	_tmp1_ = g_strdup ("");
#line 47 "/run/build/folks/folks/role-details.vala"
	self->priv->_title = _tmp1_;
#line 59 "/run/build/folks/folks/role-details.vala"
	_tmp2_ = g_strdup ("");
#line 59 "/run/build/folks/folks/role-details.vala"
	self->priv->_role = _tmp2_;
#line 73 "/run/build/folks/folks/role-details.vala"
	_tmp3_ = g_strdup ("");
#line 73 "/run/build/folks/folks/role-details.vala"
	self->priv->_uid = _tmp3_;
#line 801 "role-details.c"
}


static void
folks_role_finalize (GObject * obj)
{
	FolksRole * self;
#line 35 "/run/build/folks/folks/role-details.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_ROLE, FolksRole);
#line 37 "/run/build/folks/folks/role-details.vala"
	_g_free0 (self->priv->_organisation_name);
#line 47 "/run/build/folks/folks/role-details.vala"
	_g_free0 (self->priv->_title);
#line 59 "/run/build/folks/folks/role-details.vala"
	_g_free0 (self->priv->_role);
#line 73 "/run/build/folks/folks/role-details.vala"
	_g_free0 (self->priv->_uid);
#line 35 "/run/build/folks/folks/role-details.vala"
	G_OBJECT_CLASS (folks_role_parent_class)->finalize (obj);
#line 821 "role-details.c"
}


/**
 * Role a contact has in an organisation.
 *
 * This represents the role a {@link Persona} or {@link Individual} has in a
 * single given organisation, such as a company.
 *
 * @since 0.4.0
 */
GType
folks_role_get_type (void)
{
	static volatile gsize folks_role_type_id__volatile = 0;
	if (g_once_init_enter (&folks_role_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksRoleClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_role_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksRole), 0, (GInstanceInitFunc) folks_role_instance_init, NULL };
		GType folks_role_type_id;
		folks_role_type_id = g_type_register_static (G_TYPE_OBJECT, "FolksRole", &g_define_type_info, 0);
		g_once_init_leave (&folks_role_type_id__volatile, folks_role_type_id);
	}
	return folks_role_type_id__volatile;
}


static void
_vala_folks_role_get_property (GObject * object,
                               guint property_id,
                               GValue * value,
                               GParamSpec * pspec)
{
	FolksRole * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_ROLE, FolksRole);
#line 35 "/run/build/folks/folks/role-details.vala"
	switch (property_id) {
#line 35 "/run/build/folks/folks/role-details.vala"
		case FOLKS_ROLE_ORGANISATION_NAME_PROPERTY:
#line 35 "/run/build/folks/folks/role-details.vala"
		g_value_set_string (value, folks_role_get_organisation_name (self));
#line 35 "/run/build/folks/folks/role-details.vala"
		break;
#line 35 "/run/build/folks/folks/role-details.vala"
		case FOLKS_ROLE_TITLE_PROPERTY:
#line 35 "/run/build/folks/folks/role-details.vala"
		g_value_set_string (value, folks_role_get_title (self));
#line 35 "/run/build/folks/folks/role-details.vala"
		break;
#line 35 "/run/build/folks/folks/role-details.vala"
		case FOLKS_ROLE_ROLE_PROPERTY:
#line 35 "/run/build/folks/folks/role-details.vala"
		g_value_set_string (value, folks_role_get_role (self));
#line 35 "/run/build/folks/folks/role-details.vala"
		break;
#line 35 "/run/build/folks/folks/role-details.vala"
		case FOLKS_ROLE_UID_PROPERTY:
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
#line 878 "role-details.c"
		g_value_set_string (value, folks_role_get_uid (self));
G_GNUC_END_IGNORE_DEPRECATIONS
#line 35 "/run/build/folks/folks/role-details.vala"
		break;
#line 883 "role-details.c"
		default:
#line 35 "/run/build/folks/folks/role-details.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 35 "/run/build/folks/folks/role-details.vala"
		break;
#line 889 "role-details.c"
	}
}


static void
_vala_folks_role_set_property (GObject * object,
                               guint property_id,
                               const GValue * value,
                               GParamSpec * pspec)
{
	FolksRole * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_ROLE, FolksRole);
#line 35 "/run/build/folks/folks/role-details.vala"
	switch (property_id) {
#line 35 "/run/build/folks/folks/role-details.vala"
		case FOLKS_ROLE_ORGANISATION_NAME_PROPERTY:
#line 35 "/run/build/folks/folks/role-details.vala"
		folks_role_set_organisation_name (self, g_value_get_string (value));
#line 35 "/run/build/folks/folks/role-details.vala"
		break;
#line 35 "/run/build/folks/folks/role-details.vala"
		case FOLKS_ROLE_TITLE_PROPERTY:
#line 35 "/run/build/folks/folks/role-details.vala"
		folks_role_set_title (self, g_value_get_string (value));
#line 35 "/run/build/folks/folks/role-details.vala"
		break;
#line 35 "/run/build/folks/folks/role-details.vala"
		case FOLKS_ROLE_ROLE_PROPERTY:
#line 35 "/run/build/folks/folks/role-details.vala"
		folks_role_set_role (self, g_value_get_string (value));
#line 35 "/run/build/folks/folks/role-details.vala"
		break;
#line 35 "/run/build/folks/folks/role-details.vala"
		case FOLKS_ROLE_UID_PROPERTY:
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
#line 925 "role-details.c"
		folks_role_set_uid (self, g_value_get_string (value));
G_GNUC_END_IGNORE_DEPRECATIONS
#line 35 "/run/build/folks/folks/role-details.vala"
		break;
#line 930 "role-details.c"
		default:
#line 35 "/run/build/folks/folks/role-details.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 35 "/run/build/folks/folks/role-details.vala"
		break;
#line 936 "role-details.c"
	}
}


/**
   * Create a new RoleFieldDetails.
   *
   * @param value the non-empty {@link Role} of the field
   * @param parameters initial parameters. See
   * {@link AbstractFieldDetails.parameters}. A ``null`` value is equivalent to an
   * empty map of parameters.
   *
   * @return a new RoleFieldDetails
   *
   * @since 0.6.0
   */
FolksRoleFieldDetails*
folks_role_field_details_construct (GType object_type,
                                    FolksRole* value,
                                    GeeMultiMap* parameters)
{
	FolksRoleFieldDetails * self = NULL;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
#line 195 "/run/build/folks/folks/role-details.vala"
	g_return_val_if_fail (value != NULL, NULL);
#line 198 "/run/build/folks/folks/role-details.vala"
	if (folks_role_is_empty (value)) {
#line 200 "/run/build/folks/folks/role-details.vala"
		g_warning ("role-details.vala:200: Empty role passed to RoleFieldDetails.");
#line 967 "role-details.c"
	}
#line 204 "/run/build/folks/folks/role-details.vala"
	_tmp0_ = folks_role_get_uid (value);
#line 204 "/run/build/folks/folks/role-details.vala"
	_tmp1_ = _tmp0_;
#line 204 "/run/build/folks/folks/role-details.vala"
	self = (FolksRoleFieldDetails*) g_object_new (object_type, "t_type", FOLKS_TYPE_ROLE, "t_dup_func", (GBoxedCopyFunc) g_object_ref, "t_destroy_func", (GDestroyNotify) g_object_unref, "value", value, "parameters", parameters, "id", _tmp1_, NULL);
#line 195 "/run/build/folks/folks/role-details.vala"
	return self;
#line 977 "role-details.c"
}


FolksRoleFieldDetails*
folks_role_field_details_new (FolksRole* value,
                              GeeMultiMap* parameters)
{
#line 195 "/run/build/folks/folks/role-details.vala"
	return folks_role_field_details_construct (FOLKS_TYPE_ROLE_FIELD_DETAILS, value, parameters);
#line 987 "role-details.c"
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.0 
   */
static gpointer
_g_object_ref0 (gpointer self)
{
#line 226 "/run/build/folks/folks/role-details.vala"
	return self ? g_object_ref (self) : NULL;
#line 1001 "role-details.c"
}


static gboolean
folks_role_field_details_real_equal (FolksAbstractFieldDetails* base,
                                     FolksAbstractFieldDetails* that)
{
	FolksRoleFieldDetails * self;
	gboolean result = FALSE;
	FolksRoleFieldDetails* _that_fd = NULL;
	FolksRoleFieldDetails* _tmp0_;
	FolksRoleFieldDetails* _tmp1_;
	FolksRoleFieldDetails* that_fd = NULL;
	FolksRoleFieldDetails* _tmp2_;
	FolksRoleFieldDetails* _tmp3_;
	gconstpointer _tmp4_;
	FolksRole* _tmp5_;
	FolksRoleFieldDetails* _tmp6_;
	gconstpointer _tmp7_;
	FolksRole* _tmp8_;
#line 224 "/run/build/folks/folks/role-details.vala"
	self = (FolksRoleFieldDetails*) base;
#line 224 "/run/build/folks/folks/role-details.vala"
	g_return_val_if_fail (that != NULL, FALSE);
#line 226 "/run/build/folks/folks/role-details.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (that, FOLKS_TYPE_ROLE_FIELD_DETAILS) ? ((FolksRoleFieldDetails*) that) : NULL);
#line 226 "/run/build/folks/folks/role-details.vala"
	_that_fd = _tmp0_;
#line 227 "/run/build/folks/folks/role-details.vala"
	_tmp1_ = _that_fd;
#line 227 "/run/build/folks/folks/role-details.vala"
	if (_tmp1_ == NULL) {
#line 228 "/run/build/folks/folks/role-details.vala"
		result = FALSE;
#line 228 "/run/build/folks/folks/role-details.vala"
		_g_object_unref0 (_that_fd);
#line 228 "/run/build/folks/folks/role-details.vala"
		return result;
#line 1040 "role-details.c"
	}
#line 229 "/run/build/folks/folks/role-details.vala"
	_tmp2_ = _that_fd;
#line 229 "/run/build/folks/folks/role-details.vala"
	_tmp3_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp2_, FOLKS_TYPE_ROLE_FIELD_DETAILS, FolksRoleFieldDetails));
#line 229 "/run/build/folks/folks/role-details.vala"
	that_fd = _tmp3_;
#line 231 "/run/build/folks/folks/role-details.vala"
	if (!FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (folks_role_field_details_parent_class)->parameters_equal (G_TYPE_CHECK_INSTANCE_CAST (self, FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails), that)) {
#line 232 "/run/build/folks/folks/role-details.vala"
		result = FALSE;
#line 232 "/run/build/folks/folks/role-details.vala"
		_g_object_unref0 (that_fd);
#line 232 "/run/build/folks/folks/role-details.vala"
		_g_object_unref0 (_that_fd);
#line 232 "/run/build/folks/folks/role-details.vala"
		return result;
#line 1058 "role-details.c"
	}
#line 234 "/run/build/folks/folks/role-details.vala"
	_tmp4_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) self);
#line 234 "/run/build/folks/folks/role-details.vala"
	_tmp5_ = _tmp4_;
#line 234 "/run/build/folks/folks/role-details.vala"
	_tmp6_ = that_fd;
#line 234 "/run/build/folks/folks/role-details.vala"
	_tmp7_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) _tmp6_);
#line 234 "/run/build/folks/folks/role-details.vala"
	_tmp8_ = _tmp7_;
#line 234 "/run/build/folks/folks/role-details.vala"
	result = folks_role_equal ((FolksRole*) _tmp5_, (FolksRole*) _tmp8_);
#line 234 "/run/build/folks/folks/role-details.vala"
	_g_object_unref0 (that_fd);
#line 234 "/run/build/folks/folks/role-details.vala"
	_g_object_unref0 (_that_fd);
#line 234 "/run/build/folks/folks/role-details.vala"
	return result;
#line 1078 "role-details.c"
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.0
   */
static guint
folks_role_field_details_real_hash (FolksAbstractFieldDetails* base)
{
	FolksRoleFieldDetails * self;
	guint result = 0U;
	GHashFunc _tmp0_;
	gconstpointer _tmp1_;
	FolksRole* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	guint _tmp5_;
#line 242 "/run/build/folks/folks/role-details.vala"
	self = (FolksRoleFieldDetails*) base;
#line 244 "/run/build/folks/folks/role-details.vala"
	_tmp0_ = g_str_hash;
#line 244 "/run/build/folks/folks/role-details.vala"
	_tmp1_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) self);
#line 244 "/run/build/folks/folks/role-details.vala"
	_tmp2_ = _tmp1_;
#line 244 "/run/build/folks/folks/role-details.vala"
	_tmp3_ = folks_role_to_string ((FolksRole*) _tmp2_);
#line 244 "/run/build/folks/folks/role-details.vala"
	_tmp4_ = _tmp3_;
#line 244 "/run/build/folks/folks/role-details.vala"
	_tmp5_ = _tmp0_ (_tmp4_);
#line 244 "/run/build/folks/folks/role-details.vala"
	_g_free0 (_tmp4_);
#line 244 "/run/build/folks/folks/role-details.vala"
	result = _tmp5_;
#line 244 "/run/build/folks/folks/role-details.vala"
	return result;
#line 1118 "role-details.c"
}


static const gchar*
folks_role_field_details_real_get_id (FolksAbstractFieldDetails* base)
{
	const gchar* result;
	FolksRoleFieldDetails* self;
	const gchar* _tmp0_;
#line 172 "/run/build/folks/folks/role-details.vala"
	self = (FolksRoleFieldDetails*) base;
#line 172 "/run/build/folks/folks/role-details.vala"
	_tmp0_ = self->priv->_id;
#line 172 "/run/build/folks/folks/role-details.vala"
	result = _tmp0_;
#line 172 "/run/build/folks/folks/role-details.vala"
	return result;
#line 1136 "role-details.c"
}


static void
folks_role_field_details_real_set_id (FolksAbstractFieldDetails* base,
                                      const gchar* value)
{
	FolksRoleFieldDetails* self;
	const gchar* _tmp0_ = NULL;
	gchar* _tmp1_;
	const gchar* _tmp2_;
	gconstpointer _tmp3_;
	FolksRole* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
#line 173 "/run/build/folks/folks/role-details.vala"
	self = (FolksRoleFieldDetails*) base;
#line 175 "/run/build/folks/folks/role-details.vala"
	if (value != NULL) {
#line 175 "/run/build/folks/folks/role-details.vala"
		_tmp0_ = value;
#line 1158 "role-details.c"
	} else {
#line 175 "/run/build/folks/folks/role-details.vala"
		_tmp0_ = "";
#line 1162 "role-details.c"
	}
#line 175 "/run/build/folks/folks/role-details.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 175 "/run/build/folks/folks/role-details.vala"
	_g_free0 (self->priv->_id);
#line 175 "/run/build/folks/folks/role-details.vala"
	self->priv->_id = _tmp1_;
#line 178 "/run/build/folks/folks/role-details.vala"
	_tmp2_ = self->priv->_id;
#line 178 "/run/build/folks/folks/role-details.vala"
	_tmp3_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) self);
#line 178 "/run/build/folks/folks/role-details.vala"
	_tmp4_ = _tmp3_;
#line 178 "/run/build/folks/folks/role-details.vala"
	_tmp5_ = folks_role_get_uid ((FolksRole*) _tmp4_);
#line 178 "/run/build/folks/folks/role-details.vala"
	_tmp6_ = _tmp5_;
#line 178 "/run/build/folks/folks/role-details.vala"
	if (g_strcmp0 (_tmp2_, _tmp6_) != 0) {
#line 1182 "role-details.c"
		gconstpointer _tmp7_;
		FolksRole* _tmp8_;
		const gchar* _tmp9_;
#line 179 "/run/build/folks/folks/role-details.vala"
		_tmp7_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) self);
#line 179 "/run/build/folks/folks/role-details.vala"
		_tmp8_ = _tmp7_;
#line 179 "/run/build/folks/folks/role-details.vala"
		_tmp9_ = self->priv->_id;
#line 179 "/run/build/folks/folks/role-details.vala"
		folks_role_set_uid ((FolksRole*) _tmp8_, _tmp9_);
#line 1194 "role-details.c"
	}
#line 173 "/run/build/folks/folks/role-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_role_field_details_properties[FOLKS_ROLE_FIELD_DETAILS_ID_PROPERTY]);
#line 1198 "role-details.c"
}


static void
_folks_role_field_details___lambda5_ (FolksRoleFieldDetails* self,
                                      GObject* s,
                                      GParamSpec* p)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	gconstpointer _tmp2_;
	FolksRole* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
#line 212 "/run/build/folks/folks/role-details.vala"
	g_return_if_fail (s != NULL);
#line 212 "/run/build/folks/folks/role-details.vala"
	g_return_if_fail (p != NULL);
#line 214 "/run/build/folks/folks/role-details.vala"
	_tmp0_ = folks_abstract_field_details_get_id ((FolksAbstractFieldDetails*) self);
#line 214 "/run/build/folks/folks/role-details.vala"
	_tmp1_ = _tmp0_;
#line 214 "/run/build/folks/folks/role-details.vala"
	_tmp2_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) self);
#line 214 "/run/build/folks/folks/role-details.vala"
	_tmp3_ = _tmp2_;
#line 214 "/run/build/folks/folks/role-details.vala"
	_tmp4_ = folks_role_get_uid ((FolksRole*) _tmp3_);
#line 214 "/run/build/folks/folks/role-details.vala"
	_tmp5_ = _tmp4_;
#line 214 "/run/build/folks/folks/role-details.vala"
	if (g_strcmp0 (_tmp1_, _tmp5_) != 0) {
#line 1231 "role-details.c"
		gconstpointer _tmp6_;
		FolksRole* _tmp7_;
		const gchar* _tmp8_;
		const gchar* _tmp9_;
#line 215 "/run/build/folks/folks/role-details.vala"
		_tmp6_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) self);
#line 215 "/run/build/folks/folks/role-details.vala"
		_tmp7_ = _tmp6_;
#line 215 "/run/build/folks/folks/role-details.vala"
		_tmp8_ = folks_role_get_uid ((FolksRole*) _tmp7_);
#line 215 "/run/build/folks/folks/role-details.vala"
		_tmp9_ = _tmp8_;
#line 215 "/run/build/folks/folks/role-details.vala"
		folks_abstract_field_details_set_id ((FolksAbstractFieldDetails*) self, _tmp9_);
#line 1246 "role-details.c"
	}
}


static void
__folks_role_field_details___lambda5__g_object_notify (GObject* _sender,
                                                       GParamSpec* pspec,
                                                       gpointer self)
{
#line 212 "/run/build/folks/folks/role-details.vala"
	_folks_role_field_details___lambda5_ ((FolksRoleFieldDetails*) self, _sender, pspec);
#line 1258 "role-details.c"
}


static GObject *
folks_role_field_details_constructor (GType type,
                                      guint n_construct_properties,
                                      GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	FolksRoleFieldDetails * self;
	gconstpointer _tmp0_;
	FolksRole* _tmp1_;
#line 209 "/run/build/folks/folks/role-details.vala"
	parent_class = G_OBJECT_CLASS (folks_role_field_details_parent_class);
#line 209 "/run/build/folks/folks/role-details.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 209 "/run/build/folks/folks/role-details.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_ROLE_FIELD_DETAILS, FolksRoleFieldDetails);
#line 212 "/run/build/folks/folks/role-details.vala"
	_tmp0_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) self);
#line 212 "/run/build/folks/folks/role-details.vala"
	_tmp1_ = _tmp0_;
#line 212 "/run/build/folks/folks/role-details.vala"
	g_signal_connect_object ((GObject*) ((FolksRole*) _tmp1_), "notify::uid", (GCallback) __folks_role_field_details___lambda5__g_object_notify, self, 0);
#line 209 "/run/build/folks/folks/role-details.vala"
	return obj;
#line 1286 "role-details.c"
}


static void
folks_role_field_details_class_init (FolksRoleFieldDetailsClass * klass)
{
#line 164 "/run/build/folks/folks/role-details.vala"
	folks_role_field_details_parent_class = g_type_class_peek_parent (klass);
#line 164 "/run/build/folks/folks/role-details.vala"
	g_type_class_add_private (klass, sizeof (FolksRoleFieldDetailsPrivate));
#line 164 "/run/build/folks/folks/role-details.vala"
	((FolksAbstractFieldDetailsClass *) klass)->equal = (gboolean (*) (FolksAbstractFieldDetails *, FolksAbstractFieldDetails*)) folks_role_field_details_real_equal;
#line 164 "/run/build/folks/folks/role-details.vala"
	((FolksAbstractFieldDetailsClass *) klass)->hash = (guint (*) (FolksAbstractFieldDetails *)) folks_role_field_details_real_hash;
#line 164 "/run/build/folks/folks/role-details.vala"
	FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (klass)->get_id = folks_role_field_details_real_get_id;
#line 164 "/run/build/folks/folks/role-details.vala"
	FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (klass)->set_id = folks_role_field_details_real_set_id;
#line 164 "/run/build/folks/folks/role-details.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_folks_role_field_details_get_property;
#line 164 "/run/build/folks/folks/role-details.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_folks_role_field_details_set_property;
#line 164 "/run/build/folks/folks/role-details.vala"
	G_OBJECT_CLASS (klass)->constructor = folks_role_field_details_constructor;
#line 164 "/run/build/folks/folks/role-details.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_role_field_details_finalize;
#line 1313 "role-details.c"
	/**
	   * {@inheritDoc}
	   */
#line 164 "/run/build/folks/folks/role-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_ROLE_FIELD_DETAILS_ID_PROPERTY, folks_role_field_details_properties[FOLKS_ROLE_FIELD_DETAILS_ID_PROPERTY] = g_param_spec_string ("id", "id", "id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 1319 "role-details.c"
}


static void
folks_role_field_details_instance_init (FolksRoleFieldDetails * self)
{
	gchar* _tmp0_;
#line 164 "/run/build/folks/folks/role-details.vala"
	self->priv = FOLKS_ROLE_FIELD_DETAILS_GET_PRIVATE (self);
#line 166 "/run/build/folks/folks/role-details.vala"
	_tmp0_ = g_strdup ("");
#line 166 "/run/build/folks/folks/role-details.vala"
	self->priv->_id = _tmp0_;
#line 1333 "role-details.c"
}


static void
folks_role_field_details_finalize (GObject * obj)
{
	FolksRoleFieldDetails * self;
#line 164 "/run/build/folks/folks/role-details.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_ROLE_FIELD_DETAILS, FolksRoleFieldDetails);
#line 166 "/run/build/folks/folks/role-details.vala"
	_g_free0 (self->priv->_id);
#line 164 "/run/build/folks/folks/role-details.vala"
	G_OBJECT_CLASS (folks_role_field_details_parent_class)->finalize (obj);
#line 1347 "role-details.c"
}


/**
 * Object representing details of a contact in an organisation which can have
 * some parameters associated with it.
 *
 * See {@link Folks.AbstractFieldDetails}.
 *
 * @since 0.6.0
 */
GType
folks_role_field_details_get_type (void)
{
	static volatile gsize folks_role_field_details_type_id__volatile = 0;
	if (g_once_init_enter (&folks_role_field_details_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksRoleFieldDetailsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_role_field_details_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksRoleFieldDetails), 0, (GInstanceInitFunc) folks_role_field_details_instance_init, NULL };
		GType folks_role_field_details_type_id;
		folks_role_field_details_type_id = g_type_register_static (FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, "FolksRoleFieldDetails", &g_define_type_info, 0);
		g_once_init_leave (&folks_role_field_details_type_id__volatile, folks_role_field_details_type_id);
	}
	return folks_role_field_details_type_id__volatile;
}


static void
_vala_folks_role_field_details_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec)
{
	FolksRoleFieldDetails * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_ROLE_FIELD_DETAILS, FolksRoleFieldDetails);
#line 164 "/run/build/folks/folks/role-details.vala"
	switch (property_id) {
#line 164 "/run/build/folks/folks/role-details.vala"
		case FOLKS_ROLE_FIELD_DETAILS_ID_PROPERTY:
#line 164 "/run/build/folks/folks/role-details.vala"
		g_value_set_string (value, folks_abstract_field_details_get_id ((FolksAbstractFieldDetails*) self));
#line 164 "/run/build/folks/folks/role-details.vala"
		break;
#line 1389 "role-details.c"
		default:
#line 164 "/run/build/folks/folks/role-details.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 164 "/run/build/folks/folks/role-details.vala"
		break;
#line 1395 "role-details.c"
	}
}


static void
_vala_folks_role_field_details_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec)
{
	FolksRoleFieldDetails * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_ROLE_FIELD_DETAILS, FolksRoleFieldDetails);
#line 164 "/run/build/folks/folks/role-details.vala"
	switch (property_id) {
#line 164 "/run/build/folks/folks/role-details.vala"
		case FOLKS_ROLE_FIELD_DETAILS_ID_PROPERTY:
#line 164 "/run/build/folks/folks/role-details.vala"
		folks_abstract_field_details_set_id ((FolksAbstractFieldDetails*) self, g_value_get_string (value));
#line 164 "/run/build/folks/folks/role-details.vala"
		break;
#line 1416 "role-details.c"
		default:
#line 164 "/run/build/folks/folks/role-details.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 164 "/run/build/folks/folks/role-details.vala"
		break;
#line 1422 "role-details.c"
	}
}


static void
folks_role_details_real_change_roles_data_free (gpointer _data)
{
	FolksRoleDetailsChangeRolesData* _data_;
	_data_ = _data;
#line 254 "/run/build/folks/folks/role-details.vala"
	_g_object_unref0 (_data_->roles);
#line 254 "/run/build/folks/folks/role-details.vala"
	_g_object_unref0 (_data_->self);
#line 254 "/run/build/folks/folks/role-details.vala"
	g_slice_free (FolksRoleDetailsChangeRolesData, _data_);
#line 1438 "role-details.c"
}


static void
folks_role_details_real_change_roles_async_ready_wrapper (GObject *source_object,
                                                          GAsyncResult *res,
                                                          void *user_data)
{
	FolksRoleDetailsChangeRolesData* _task_data_;
#line 254 "/run/build/folks/folks/role-details.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 254 "/run/build/folks/folks/role-details.vala"
	if (_task_data_->_callback_ != NULL) {
#line 254 "/run/build/folks/folks/role-details.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 1454 "role-details.c"
	}
#line 254 "/run/build/folks/folks/role-details.vala"
	_task_data_->_task_complete_ = TRUE;
#line 1458 "role-details.c"
}


static void
folks_role_details_real_change_roles (FolksRoleDetails* self,
                                      GeeSet* roles,
                                      GAsyncReadyCallback _callback_,
                                      gpointer _user_data_)
{
	FolksRoleDetailsChangeRolesData* _data_;
	FolksRoleDetails* _tmp0_;
	GeeSet* _tmp1_;
#line 254 "/run/build/folks/folks/role-details.vala"
	_data_ = g_slice_new0 (FolksRoleDetailsChangeRolesData);
#line 254 "/run/build/folks/folks/role-details.vala"
	_data_->_callback_ = _callback_;
#line 254 "/run/build/folks/folks/role-details.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_role_details_real_change_roles_async_ready_wrapper, _user_data_);
#line 254 "/run/build/folks/folks/role-details.vala"
	if (_callback_ == NULL) {
#line 254 "/run/build/folks/folks/role-details.vala"
		_data_->_task_complete_ = TRUE;
#line 1481 "role-details.c"
	}
#line 254 "/run/build/folks/folks/role-details.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_role_details_real_change_roles_data_free);
#line 254 "/run/build/folks/folks/role-details.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 254 "/run/build/folks/folks/role-details.vala"
	_data_->self = _tmp0_;
#line 254 "/run/build/folks/folks/role-details.vala"
	_tmp1_ = _g_object_ref0 (roles);
#line 254 "/run/build/folks/folks/role-details.vala"
	_g_object_unref0 (_data_->roles);
#line 254 "/run/build/folks/folks/role-details.vala"
	_data_->roles = _tmp1_;
#line 254 "/run/build/folks/folks/role-details.vala"
	folks_role_details_real_change_roles_co (_data_);
#line 1497 "role-details.c"
}


static void
folks_role_details_real_change_roles_finish (FolksRoleDetails* self,
                                             GAsyncResult* _res_,
                                             GError** error)
{
	FolksRoleDetailsChangeRolesData* _data_;
#line 254 "/run/build/folks/folks/role-details.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 254 "/run/build/folks/folks/role-details.vala"
	if (NULL == _data_) {
#line 254 "/run/build/folks/folks/role-details.vala"
		return;
#line 1513 "role-details.c"
	}
}


/**
   * Change the contact's roles.
   *
   * It's preferred to call this rather than setting {@link RoleDetails.roles}
   * directly, as this method gives error notification and will only return once
   * the roles have been written to the relevant backing store (or the
   * operation's failed).
   *
   * @param roles the set of roles
   * @throws PropertyError if setting the roles failed
   * @since 0.6.2
   */
static gboolean
folks_role_details_real_change_roles_co (FolksRoleDetailsChangeRolesData* _data_)
{
#line 275 "/run/build/folks/folks/role-details.vala"
	switch (_data_->_state_) {
#line 275 "/run/build/folks/folks/role-details.vala"
		case 0:
#line 1537 "role-details.c"
		goto _state_0;
		default:
#line 275 "/run/build/folks/folks/role-details.vala"
		g_assert_not_reached ();
#line 1542 "role-details.c"
	}
	_state_0:
#line 279 "/run/build/folks/folks/role-details.vala"
	_data_->_tmp0_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_NOT_WRITEABLE, _ ("Roles are not writeable on this contact."));
#line 279 "/run/build/folks/folks/role-details.vala"
	_data_->_inner_error_ = _data_->_tmp0_;
#line 279 "/run/build/folks/folks/role-details.vala"
	if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 279 "/run/build/folks/folks/role-details.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 279 "/run/build/folks/folks/role-details.vala"
		g_object_unref (_data_->_async_result);
#line 279 "/run/build/folks/folks/role-details.vala"
		return FALSE;
#line 1557 "role-details.c"
	} else {
#line 279 "/run/build/folks/folks/role-details.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 279 "/run/build/folks/folks/role-details.vala"
		g_clear_error (&_data_->_inner_error_);
#line 279 "/run/build/folks/folks/role-details.vala"
		g_object_unref (_data_->_async_result);
#line 279 "/run/build/folks/folks/role-details.vala"
		return FALSE;
#line 1567 "role-details.c"
	}
#line 275 "/run/build/folks/folks/role-details.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 275 "/run/build/folks/folks/role-details.vala"
	if (_data_->_state_ != 0) {
#line 275 "/run/build/folks/folks/role-details.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 275 "/run/build/folks/folks/role-details.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1577 "role-details.c"
		}
	}
#line 275 "/run/build/folks/folks/role-details.vala"
	g_object_unref (_data_->_async_result);
#line 275 "/run/build/folks/folks/role-details.vala"
	return FALSE;
#line 1584 "role-details.c"
}


void
folks_role_details_change_roles (FolksRoleDetails* self,
                                 GeeSet* roles,
                                 GAsyncReadyCallback _callback_,
                                 gpointer _user_data_)
{
#line 254 "/run/build/folks/folks/role-details.vala"
	FOLKS_ROLE_DETAILS_GET_INTERFACE (self)->change_roles (self, roles, _callback_, _user_data_);
#line 1596 "role-details.c"
}


void
folks_role_details_change_roles_finish (FolksRoleDetails* self,
                                        GAsyncResult* _res_,
                                        GError** error)
{
#line 254 "/run/build/folks/folks/role-details.vala"
	FOLKS_ROLE_DETAILS_GET_INTERFACE (self)->change_roles_finish (self, _res_, error);
#line 1607 "role-details.c"
}


GeeSet*
folks_role_details_get_roles (FolksRoleDetails* self)
{
#line 261 "/run/build/folks/folks/role-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 261 "/run/build/folks/folks/role-details.vala"
	return FOLKS_ROLE_DETAILS_GET_INTERFACE (self)->get_roles (self);
#line 1618 "role-details.c"
}


void
folks_role_details_set_roles (FolksRoleDetails* self,
                              GeeSet* value)
{
#line 261 "/run/build/folks/folks/role-details.vala"
	g_return_if_fail (self != NULL);
#line 261 "/run/build/folks/folks/role-details.vala"
	FOLKS_ROLE_DETAILS_GET_INTERFACE (self)->set_roles (self, value);
#line 1630 "role-details.c"
}


static void
folks_role_details_default_init (FolksRoleDetailsIface * iface)
{
	/**
	   * The roles of the contact.
	   *
	   * @since 0.6.0
	   */
#line 254 "/run/build/folks/folks/role-details.vala"
	g_object_interface_install_property (iface, g_param_spec_object ("roles", "roles", "roles", GEE_TYPE_SET, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 254 "/run/build/folks/folks/role-details.vala"
	iface->change_roles = folks_role_details_real_change_roles;
#line 254 "/run/build/folks/folks/role-details.vala"
	iface->change_roles_finish = folks_role_details_real_change_roles_finish;
#line 1648 "role-details.c"
}


/**
 * This interfaces represents the list of roles a {@link Persona} and
 * {@link Individual} might have.
 *
 * @since 0.4.0
 */
GType
folks_role_details_get_type (void)
{
	static volatile gsize folks_role_details_type_id__volatile = 0;
	if (g_once_init_enter (&folks_role_details_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksRoleDetailsIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_role_details_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
		GType folks_role_details_type_id;
		folks_role_details_type_id = g_type_register_static (G_TYPE_INTERFACE, "FolksRoleDetails", &g_define_type_info, 0);
		g_type_interface_add_prerequisite (folks_role_details_type_id, G_TYPE_OBJECT);
		g_once_init_leave (&folks_role_details_type_id__volatile, folks_role_details_type_id);
	}
	return folks_role_details_type_id__volatile;
}



