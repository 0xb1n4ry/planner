/* unity-scope-proxy-remote.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-scope-proxy-remote.vala, do not modify */

/*
 * Copyright (C) 2011 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Neil Jagdish Patel <neil.patel@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <dee.h>
#include <gobject/gvaluecollector.h>


#define UNITY_PROTOCOL_TYPE_SCOPE_PROXY (unity_protocol_scope_proxy_get_type ())
#define UNITY_PROTOCOL_SCOPE_PROXY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_TYPE_SCOPE_PROXY, UnityProtocolScopeProxy))
#define UNITY_PROTOCOL_IS_SCOPE_PROXY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_TYPE_SCOPE_PROXY))
#define UNITY_PROTOCOL_SCOPE_PROXY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), UNITY_PROTOCOL_TYPE_SCOPE_PROXY, UnityProtocolScopeProxyIface))

typedef struct _UnityProtocolScopeProxy UnityProtocolScopeProxy;
typedef struct _UnityProtocolScopeProxyIface UnityProtocolScopeProxyIface;

#define UNITY_PROTOCOL_TYPE_ACTION_TYPE (unity_protocol_action_type_get_type ())

#define UNITY_PROTOCOL_TYPE_ACTIVATION_REPLY_RAW (unity_protocol_activation_reply_raw_get_type ())
typedef struct _UnityProtocolActivationReplyRaw UnityProtocolActivationReplyRaw;

#define UNITY_PROTOCOL_TYPE_CHANNEL_TYPE (unity_protocol_channel_type_get_type ())

#define UNITY_PROTOCOL_TYPE_CHANNEL_FLAGS (unity_protocol_channel_flags_get_type ())

#define UNITY_PROTOCOL_TYPE_VIEW_TYPE (unity_protocol_view_type_get_type ())

#define UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE (unity_protocol_scope_proxy_remote_get_type ())
#define UNITY_PROTOCOL_SCOPE_PROXY_REMOTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE, UnityProtocolScopeProxyRemote))
#define UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE, UnityProtocolScopeProxyRemoteClass))
#define UNITY_PROTOCOL_IS_SCOPE_PROXY_REMOTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE))
#define UNITY_PROTOCOL_IS_SCOPE_PROXY_REMOTE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE))
#define UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE, UnityProtocolScopeProxyRemoteClass))

typedef struct _UnityProtocolScopeProxyRemote UnityProtocolScopeProxyRemote;
typedef struct _UnityProtocolScopeProxyRemoteClass UnityProtocolScopeProxyRemoteClass;
typedef struct _UnityProtocolScopeProxyRemotePrivate UnityProtocolScopeProxyRemotePrivate;

#define UNITY_PROTOCOL_TYPE_SCOPE_SERVICE (unity_protocol_scope_service_get_type ())
#define UNITY_PROTOCOL_SCOPE_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_TYPE_SCOPE_SERVICE, UnityProtocolScopeService))
#define UNITY_PROTOCOL_IS_SCOPE_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_TYPE_SCOPE_SERVICE))
#define UNITY_PROTOCOL_SCOPE_SERVICE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), UNITY_PROTOCOL_TYPE_SCOPE_SERVICE, UnityProtocolScopeServiceIface))

typedef struct _UnityProtocolScopeService UnityProtocolScopeService;
typedef struct _UnityProtocolScopeServiceIface UnityProtocolScopeServiceIface;

#define UNITY_PROTOCOL_TYPE_SCOPE_SERVICE_PROXY (unity_protocol_scope_service_proxy_get_type ())

#define UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_TYPE_NAME_WATCHER (unity_protocol_scope_proxy_remote_name_watcher_get_type ())
#define UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_NAME_WATCHER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_TYPE_NAME_WATCHER, UnityProtocolScopeProxyRemoteNameWatcher))
#define UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_NAME_WATCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_TYPE_NAME_WATCHER, UnityProtocolScopeProxyRemoteNameWatcherClass))
#define UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_IS_NAME_WATCHER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_TYPE_NAME_WATCHER))
#define UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_IS_NAME_WATCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_TYPE_NAME_WATCHER))
#define UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_NAME_WATCHER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_TYPE_NAME_WATCHER, UnityProtocolScopeProxyRemoteNameWatcherClass))

typedef struct _UnityProtocolScopeProxyRemoteNameWatcher UnityProtocolScopeProxyRemoteNameWatcher;
typedef struct _UnityProtocolScopeProxyRemoteNameWatcherClass UnityProtocolScopeProxyRemoteNameWatcherClass;
enum  {
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_0_PROPERTY,
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_DBUS_NAME_PROPERTY,
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_DBUS_PATH_PROPERTY,
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_AUTO_RECONNECT_PROPERTY,
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_VISIBLE_PROPERTY,
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_IS_MASTER_PROPERTY,
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_CONNECTED_PROPERTY,
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_SOURCES_PROPERTY,
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_SEARCH_HINT_PROPERTY,
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_FILTERS_MODEL_PROPERTY,
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_CATEGORIES_MODEL_PROPERTY,
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_METADATA_PROPERTY,
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_OPTIONAL_METADATA_PROPERTY,
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_VIEW_TYPE_PROPERTY,
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_NUM_PROPERTIES
};
static GParamSpec* unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
#define _unity_protocol_scope_proxy_remote_name_watcher_unref0(var) ((var == NULL) ? NULL : (var = (unity_protocol_scope_proxy_remote_name_watcher_unref (var), NULL)))
typedef struct _UnityProtocolScopeProxyRemoteCreateData UnityProtocolScopeProxyRemoteCreateData;
typedef struct _Block9Data Block9Data;
typedef struct _UnityProtocolScopeProxyRemoteWaitForProxyData UnityProtocolScopeProxyRemoteWaitForProxyData;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _UnityProtocolScopeProxyRemoteConnectToScopeData UnityProtocolScopeProxyRemoteConnectToScopeData;
#define _g_variant_iter_free0(var) ((var == NULL) ? NULL : (var = (g_variant_iter_free (var), NULL)))
typedef struct _UnityProtocolScopeProxyRemoteActivateData UnityProtocolScopeProxyRemoteActivateData;
typedef struct _UnityProtocolScopeProxyRemoteSearchData UnityProtocolScopeProxyRemoteSearchData;
typedef struct _UnityProtocolScopeProxyRemoteOpenChannelData UnityProtocolScopeProxyRemoteOpenChannelData;
typedef struct _UnityProtocolScopeProxyRemoteCloseChannelData UnityProtocolScopeProxyRemoteCloseChannelData;
typedef struct _UnityProtocolScopeProxyRemoteSetViewTypeData UnityProtocolScopeProxyRemoteSetViewTypeData;
typedef struct _UnityProtocolScopeProxyRemoteSetActiveSourcesData UnityProtocolScopeProxyRemoteSetActiveSourcesData;
typedef struct _UnityProtocolScopeProxyRemotePushResultsData UnityProtocolScopeProxyRemotePushResultsData;
typedef struct _UnityProtocolScopeProxyRemoteNameWatcherPrivate UnityProtocolScopeProxyRemoteNameWatcherPrivate;
typedef struct _UnityProtocolScopeProxyRemoteParamSpecNameWatcher UnityProtocolScopeProxyRemoteParamSpecNameWatcher;
enum  {
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_PROXY_INITIALIZED_SIGNAL,
	UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_NUM_SIGNALS
};
static guint unity_protocol_scope_proxy_remote_signals[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_NUM_SIGNALS] = {0};

typedef enum  {
	UNITY_PROTOCOL_ACTION_TYPE_ACTIVATE_RESULT,
	UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_RESULT,
	UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_ACTION,
	UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_BUILTIN_ACTION
} UnityProtocolActionType;

struct _UnityProtocolActivationReplyRaw {
	gchar* uri;
	guint handled;
	GHashTable* hints;
};

typedef enum  {
	UNITY_PROTOCOL_CHANNEL_TYPE_DEFAULT,
	UNITY_PROTOCOL_CHANNEL_TYPE_GLOBAL
} UnityProtocolChannelType;

typedef enum  {
	UNITY_PROTOCOL_CHANNEL_FLAGS_NONE = 0,
	UNITY_PROTOCOL_CHANNEL_FLAGS_PRIVATE = 1 << 0,
	UNITY_PROTOCOL_CHANNEL_FLAGS_NO_FILTERING = 1 << 1,
	UNITY_PROTOCOL_CHANNEL_FLAGS_DIFF_CHANGES = 1 << 2
} UnityProtocolChannelFlags;

typedef enum  {
	UNITY_PROTOCOL_VIEW_TYPE_HIDDEN,
	UNITY_PROTOCOL_VIEW_TYPE_HOME_VIEW,
	UNITY_PROTOCOL_VIEW_TYPE_LENS_VIEW
} UnityProtocolViewType;

struct _UnityProtocolScopeProxyIface {
	GTypeInterface parent_iface;
	void (*activate) (UnityProtocolScopeProxy* self, const gchar* channel_id, GVariant** result_arr, int result_arr_length1, UnityProtocolActionType action_type, GHashTable* hints, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*activate_finish) (UnityProtocolScopeProxy* self, GAsyncResult* _res_, UnityProtocolActivationReplyRaw* result, GError** error);
	void (*search) (UnityProtocolScopeProxy* self, const gchar* channel_id, const gchar* search_string, GHashTable* hints, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*search_finish) (UnityProtocolScopeProxy* self, GAsyncResult* _res_, GError** error);
	void (*open_channel) (UnityProtocolScopeProxy* self, UnityProtocolChannelType channel_type, UnityProtocolChannelFlags channel_flags, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*open_channel_finish) (UnityProtocolScopeProxy* self, GAsyncResult* _res_, DeeSerializableModel* * results_model, GError** error);
	void (*close_channel) (UnityProtocolScopeProxy* self, const gchar* channel_id, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*close_channel_finish) (UnityProtocolScopeProxy* self, GAsyncResult* _res_, GError** error);
	void (*set_active_sources) (UnityProtocolScopeProxy* self, const gchar* channel_id, gchar** sources, int sources_length1, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_active_sources_finish) (UnityProtocolScopeProxy* self, GAsyncResult* _res_, GError** error);
	void (*push_results) (UnityProtocolScopeProxy* self, const gchar* channel_id, const gchar* search_string, const gchar* source_scope_id, DeeSerializableModel* model, gchar** categories, int categories_length1, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*push_results_finish) (UnityProtocolScopeProxy* self, GAsyncResult* _res_, GError** error);
	gboolean (*get_visible) (UnityProtocolScopeProxy* self);
	gboolean (*get_is_master) (UnityProtocolScopeProxy* self);
	gboolean (*get_connected) (UnityProtocolScopeProxy* self);
	const gchar* (*get_search_hint) (UnityProtocolScopeProxy* self);
	UnityProtocolViewType (*get_view_type) (UnityProtocolScopeProxy* self);
	void (*set_view_type) (UnityProtocolScopeProxy* self, UnityProtocolViewType value);
	DeeSerializableModel* (*get_filters_model) (UnityProtocolScopeProxy* self);
	DeeSerializableModel* (*get_categories_model) (UnityProtocolScopeProxy* self);
	GVariant* (*get_sources) (UnityProtocolScopeProxy* self);
	GHashTable* (*get_metadata) (UnityProtocolScopeProxy* self);
	GHashTable* (*get_optional_metadata) (UnityProtocolScopeProxy* self);
};

struct _UnityProtocolScopeProxyRemote {
	GObject parent_instance;
	UnityProtocolScopeProxyRemotePrivate * priv;
};

struct _UnityProtocolScopeProxyRemoteClass {
	GObjectClass parent_class;
};

typedef enum  {
	UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED,
	UNITY_PROTOCOL_SCOPE_ERROR_DATA_MISMATCH,
	UNITY_PROTOCOL_SCOPE_ERROR_INVALID_CHANNEL,
	UNITY_PROTOCOL_SCOPE_ERROR_SEARCH_CANCELLED,
	UNITY_PROTOCOL_SCOPE_ERROR_DISABLED_CONTENT,
	UNITY_PROTOCOL_SCOPE_ERROR_UNKNOWN
} UnityProtocolScopeError;
#define UNITY_PROTOCOL_SCOPE_ERROR unity_protocol_scope_error_quark ()
struct _UnityProtocolScopeServiceIface {
	GTypeInterface parent_iface;
	void (*activate) (UnityProtocolScopeService* self, const gchar* channel_id, GVariant** result_arr, int result_arr_length1, guint action_type, GHashTable* hints, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*activate_finish) (UnityProtocolScopeService* self, GAsyncResult* _res_, UnityProtocolActivationReplyRaw* result, GError** error);
	void (*search) (UnityProtocolScopeService* self, const gchar* channel_id, const gchar* search_string, GHashTable* hints, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*search_finish) (UnityProtocolScopeService* self, GAsyncResult* _res_, GError** error);
	void (*open_channel) (UnityProtocolScopeService* self, guint channel_type, GHashTable* hints, GCancellable* cancellable, const char* sender, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*open_channel_finish) (UnityProtocolScopeService* self, GAsyncResult* _res_, GHashTable* * out_hints, GError** error);
	void (*close_channel) (UnityProtocolScopeService* self, const gchar* channel_id, GHashTable* hints, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*close_channel_finish) (UnityProtocolScopeService* self, GAsyncResult* _res_, GError** error);
	void (*push_results) (UnityProtocolScopeService* self, const gchar* channel_id, const gchar* search_string, const gchar* source_scope_id, GVariant* result_variant, gchar** categories, int categories_length1, GCancellable* cancellable, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*push_results_finish) (UnityProtocolScopeService* self, GAsyncResult* _res_, GError** error);
	void (*set_view_type) (UnityProtocolScopeService* self, guint view_type, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_view_type_finish) (UnityProtocolScopeService* self, GAsyncResult* _res_, GError** error);
	gint (*get_protocol_version) (UnityProtocolScopeService* self);
	gboolean (*get_visible) (UnityProtocolScopeService* self);
	gboolean (*get_is_master) (UnityProtocolScopeService* self);
	gchar* (*get_search_hint) (UnityProtocolScopeService* self);
	GHashTable* (*get_metadata) (UnityProtocolScopeService* self);
	GHashTable* (*get_optional_metadata) (UnityProtocolScopeService* self);
	GVariant* (*get_categories) (UnityProtocolScopeService* self);
	GVariant* (*get_filters) (UnityProtocolScopeService* self);
	GHashTable* (*get_hints) (UnityProtocolScopeService* self);
};

struct _UnityProtocolScopeProxyRemotePrivate {
	gchar* _dbus_name;
	gchar* _dbus_path;
	gboolean _auto_reconnect;
	gboolean _visible;
	gboolean _is_master;
	gboolean _is_connected;
	GVariant* _sources;
	gchar* _search_hint;
	DeeSerializableModel* _filters_model;
	DeeSerializableModel* _categories_model;
	GHashTable* _metadata;
	GHashTable* _optional_metadata;
	UnityProtocolViewType _view_type;
	GDBusConnection* _bus;
	UnityProtocolScopeService* _service;
	gboolean _connecting_to_proxy;
	guint _reconnection_id;
	gint64 _last_scope_crash;
	guint _scope_crashes;
	gulong _cat_sig_id;
	gulong _filters_sig_id;
	gulong _results_invalidated_sig_id;
	UnityProtocolScopeProxyRemoteNameWatcher* _watcher;
};

struct _UnityProtocolScopeProxyRemoteCreateData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	gchar* dbus_name;
	gchar* dbus_path;
	GCancellable* cancellable;
	UnityProtocolScopeProxyRemote* result;
	UnityProtocolScopeProxyRemote* proxy;
	UnityProtocolScopeProxyRemote* _tmp0_;
	UnityProtocolScopeProxyRemote* _tmp1_;
	GError * _inner_error_;
};

struct _Block9Data {
	int _ref_count_;
	UnityProtocolScopeProxyRemote* self;
	gpointer _async_data_;
};

struct _UnityProtocolScopeProxyRemoteWaitForProxyData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityProtocolScopeProxyRemote* self;
	Block9Data* _data9_;
	UnityProtocolScopeService* _tmp0_;
	gulong sig_id;
	gulong _tmp1_;
	gulong _tmp2_;
};

struct _UnityProtocolScopeProxyRemoteConnectToScopeData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityProtocolScopeProxyRemote* self;
	gboolean _tmp0_;
	UnityProtocolScopeService* _tmp1_;
	GDBusConnection* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	UnityProtocolScopeService* _tmp5_;
	UnityProtocolScopeService* _tmp6_;
	GDBusProxy* proxy;
	UnityProtocolScopeService* _tmp7_;
	GDBusProxy* _tmp8_;
	GDBusProxy* _tmp9_;
	gchar* _tmp10_;
	gchar* _tmp11_;
	gchar* _tmp12_;
	gboolean _tmp13_;
	UnityProtocolScopeService* _tmp14_;
	gint _tmp15_;
	gint _tmp16_;
	GError* _tmp17_;
	UnityProtocolScopeService* _tmp18_;
	gboolean _tmp19_;
	gboolean _tmp20_;
	UnityProtocolScopeService* _tmp21_;
	gboolean _tmp22_;
	gboolean _tmp23_;
	UnityProtocolScopeService* _tmp24_;
	gchar* _tmp25_;
	gchar* _tmp26_;
	UnityProtocolScopeService* _tmp27_;
	GHashTable* _tmp28_;
	GHashTable* _tmp29_;
	UnityProtocolScopeService* _tmp30_;
	GHashTable* _tmp31_;
	GHashTable* _tmp32_;
	UnityProtocolScopeService* _tmp33_;
	GVariant* _tmp34_;
	GVariant* _tmp35_;
	GVariant* _tmp36_;
	GObject* _tmp37_;
	DeeSerializableModel* _tmp38_;
	UnityProtocolScopeService* _tmp39_;
	GVariant* _tmp40_;
	GVariant* _tmp41_;
	GVariant* _tmp42_;
	GObject* _tmp43_;
	DeeSerializableModel* _tmp44_;
	UnityProtocolScopeService* _tmp45_;
	gulong _tmp46_;
	UnityProtocolScopeService* _tmp47_;
	gulong _tmp48_;
	UnityProtocolScopeService* _tmp49_;
	gulong _tmp50_;
	GDBusProxy* _tmp51_;
	GError* e;
	const gchar* _tmp52_;
	const gchar* _tmp53_;
	GError* _tmp54_;
	const gchar* _tmp55_;
	GError * _inner_error_;
};

struct _UnityProtocolScopeProxyRemoteActivateData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityProtocolScopeProxyRemote* self;
	gchar* channel_id;
	GVariant** result_arr;
	gint result_arr_length1;
	UnityProtocolActionType action_type;
	GHashTable* hints;
	GCancellable* cancellable;
	UnityProtocolActivationReplyRaw result;
	UnityProtocolActivationReplyRaw raw;
	UnityProtocolScopeService* _tmp0_;
	UnityProtocolActivationReplyRaw _tmp1_;
	GError * _inner_error_;
};

struct _UnityProtocolScopeProxyRemoteSearchData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityProtocolScopeProxyRemote* self;
	gchar* channel_id;
	gchar* search_string;
	GHashTable* hints;
	GCancellable* cancellable;
	GHashTable* result;
	GHashTable* ht;
	UnityProtocolScopeService* _tmp0_;
	GHashTable* _tmp1_;
	GError * _inner_error_;
};

struct _UnityProtocolScopeProxyRemoteOpenChannelData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityProtocolScopeProxyRemote* self;
	UnityProtocolChannelType channel_type;
	UnityProtocolChannelFlags channel_flags;
	GCancellable* cancellable;
	DeeSerializableModel* results_model;
	gchar* result;
	GHashTable* hints;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	gboolean private_channel;
	gboolean diff_model;
	gboolean _tmp3_;
	GHashTable* _tmp4_;
	gchar* _tmp5_;
	GVariant* _tmp6_;
	gboolean _tmp7_;
	GHashTable* _tmp8_;
	gchar* _tmp9_;
	GVariant* _tmp10_;
	GHashTable* out_hints;
	gchar* channel_id;
	UnityProtocolScopeService* _tmp11_;
	GHashTable* _tmp12_;
	GHashTable* _tmp13_;
	gchar* _tmp14_;
	DeePeer* _tmp15_;
	gboolean _tmp16_;
	GHashTable* _tmp17_;
	gconstpointer _tmp18_;
	const gchar* _tmp19_;
	DeeClient* _tmp20_;
	GHashTable* _tmp21_;
	gconstpointer _tmp22_;
	const gchar* _tmp23_;
	DeePeer* _tmp24_;
	DeePeer* peer;
	DeePeer* _tmp25_;
	DeeSharedModel* model;
	DeePeer* _tmp26_;
	DeePeer* _tmp27_;
	DeeSharedModel* _tmp28_;
	DeeSharedModel* _tmp29_;
	DeeSerializableModel* _tmp30_;
	GError * _inner_error_;
};

struct _UnityProtocolScopeProxyRemoteCloseChannelData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityProtocolScopeProxyRemote* self;
	gchar* channel_id;
	GCancellable* cancellable;
	GHashTable* hints;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	UnityProtocolScopeService* _tmp3_;
	GHashTable* _tmp4_;
	GError * _inner_error_;
};

struct _UnityProtocolScopeProxyRemoteSetViewTypeData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityProtocolScopeProxyRemote* self;
	UnityProtocolViewType view_type;
	UnityProtocolScopeService* _tmp0_;
	GError* e;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	GError* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	GError * _inner_error_;
};

struct _UnityProtocolScopeProxyRemoteSetActiveSourcesData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityProtocolScopeProxyRemote* self;
	gchar* channel_id;
	gchar** sources;
	gint sources_length1;
	GCancellable* cancellable;
	GError * _inner_error_;
};

struct _UnityProtocolScopeProxyRemotePushResultsData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityProtocolScopeProxyRemote* self;
	gchar* channel_id;
	gchar* search_string;
	gchar* source_scope_id;
	DeeSerializableModel* model;
	gchar** categories;
	gint categories_length1;
	GCancellable* cancellable;
	GHashTable* result;
	GHashTable* _tmp0_;
	UnityProtocolScopeService* _tmp1_;
	GVariant* _tmp2_;
	GVariant* _tmp3_;
	GHashTable* _tmp4_;
	GHashTable* _tmp5_;
	GHashTable* _tmp6_;
	GError * _inner_error_;
};

struct _UnityProtocolScopeProxyRemoteNameWatcher {
	GTypeInstance parent_instance;
	volatile int ref_count;
	UnityProtocolScopeProxyRemoteNameWatcherPrivate * priv;
};

struct _UnityProtocolScopeProxyRemoteNameWatcherClass {
	GTypeClass parent_class;
	void (*finalize) (UnityProtocolScopeProxyRemoteNameWatcher *self);
};

struct _UnityProtocolScopeProxyRemoteNameWatcherPrivate {
	guint watch_id;
	UnityProtocolScopeProxyRemote* owner;
};

struct _UnityProtocolScopeProxyRemoteParamSpecNameWatcher {
	GParamSpec parent_instance;
};


static gpointer unity_protocol_scope_proxy_remote_parent_class = NULL;
static gpointer unity_protocol_scope_proxy_remote_name_watcher_parent_class = NULL;
static UnityProtocolScopeProxyIface * unity_protocol_scope_proxy_remote_unity_protocol_scope_proxy_parent_iface = NULL;

GType unity_protocol_action_type_get_type (void) G_GNUC_CONST;
GType unity_protocol_activation_reply_raw_get_type (void) G_GNUC_CONST;
UnityProtocolActivationReplyRaw* unity_protocol_activation_reply_raw_dup (const UnityProtocolActivationReplyRaw* self);
void unity_protocol_activation_reply_raw_free (UnityProtocolActivationReplyRaw* self);
void unity_protocol_activation_reply_raw_copy (const UnityProtocolActivationReplyRaw* self,
                                               UnityProtocolActivationReplyRaw* dest);
void unity_protocol_activation_reply_raw_destroy (UnityProtocolActivationReplyRaw* self);
GType unity_protocol_channel_type_get_type (void) G_GNUC_CONST;
GType unity_protocol_channel_flags_get_type (void) G_GNUC_CONST;
GType unity_protocol_view_type_get_type (void) G_GNUC_CONST;
GType unity_protocol_scope_proxy_get_type (void) G_GNUC_CONST;
GType unity_protocol_scope_proxy_remote_get_type (void) G_GNUC_CONST;
GType unity_protocol_scope_service_proxy_get_type (void) G_GNUC_CONST;
guint unity_protocol_scope_service_register_object (void* object,
                                                    GDBusConnection* connection,
                                                    const gchar* path,
                                                    GError** error);
GQuark unity_protocol_scope_error_quark (void);
GType unity_protocol_scope_service_get_type (void) G_GNUC_CONST;
static gpointer unity_protocol_scope_proxy_remote_name_watcher_ref (gpointer instance);
static void unity_protocol_scope_proxy_remote_name_watcher_unref (gpointer instance);
static GParamSpec* unity_protocol_scope_proxy_remote_param_spec_name_watcher (const gchar* name,
                                                                       const gchar* nick,
                                                                       const gchar* blurb,
                                                                       GType object_type,
                                                                       GParamFlags flags) G_GNUC_UNUSED;
static void unity_protocol_scope_proxy_remote_value_set_name_watcher (GValue* value,
                                                               gpointer v_object) G_GNUC_UNUSED;
static void unity_protocol_scope_proxy_remote_value_take_name_watcher (GValue* value,
                                                                gpointer v_object) G_GNUC_UNUSED;
static gpointer unity_protocol_scope_proxy_remote_value_get_name_watcher (const GValue* value) G_GNUC_UNUSED;
static GType unity_protocol_scope_proxy_remote_name_watcher_get_type (void) G_GNUC_CONST G_GNUC_UNUSED;
#define UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE, UnityProtocolScopeProxyRemotePrivate))
static void unity_protocol_scope_proxy_remote_name_watcher_unwatch (UnityProtocolScopeProxyRemoteNameWatcher* self);
#define UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_REQUIRED_PROTOCOL_VERSION 1
static UnityProtocolScopeProxyRemote* unity_protocol_scope_proxy_remote_new (const gchar* dbus_name_,
                                                                      const gchar* dbus_path_);
static UnityProtocolScopeProxyRemote* unity_protocol_scope_proxy_remote_construct (GType object_type,
                                                                            const gchar* dbus_name_,
                                                                            const gchar* dbus_path_);
static void unity_protocol_scope_proxy_remote_create_data_free (gpointer _data);
static void unity_protocol_scope_proxy_remote_create_async_ready_wrapper (GObject *source_object,
                                                                   GAsyncResult *res,
                                                                   void *user_data);
void unity_protocol_scope_proxy_remote_create (const gchar* dbus_name,
                                               const gchar* dbus_path,
                                               GCancellable* cancellable,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
UnityProtocolScopeProxyRemote* unity_protocol_scope_proxy_remote_create_finish (GAsyncResult* _res_,
                                                                                GError** error);
static gboolean unity_protocol_scope_proxy_remote_create_co (UnityProtocolScopeProxyRemoteCreateData* _data_);
static void unity_protocol_scope_proxy_remote_wait_for_proxy (UnityProtocolScopeProxyRemote* self,
                                                       GAsyncReadyCallback _callback_,
                                                       gpointer _user_data_);
static void unity_protocol_scope_proxy_remote_wait_for_proxy_finish (UnityProtocolScopeProxyRemote* self,
                                                              GAsyncResult* _res_);
static void unity_protocol_scope_proxy_remote_create_ready (GObject* source_object,
                                                     GAsyncResult* _res_,
                                                     gpointer _user_data_);
static void unity_protocol_scope_proxy_remote_wait_for_proxy_data_free (gpointer _data);
static void unity_protocol_scope_proxy_remote_wait_for_proxy_async_ready_wrapper (GObject *source_object,
                                                                           GAsyncResult *res,
                                                                           void *user_data);
static gboolean unity_protocol_scope_proxy_remote_wait_for_proxy_co (UnityProtocolScopeProxyRemoteWaitForProxyData* _data_);
static Block9Data* block9_data_ref (Block9Data* _data9_);
static void block9_data_unref (void * _userdata_);
static void ___lambda45_ (Block9Data* _data9_);
static void ____lambda45__unity_protocol_scope_proxy_remote_proxy_initialized (UnityProtocolScopeProxyRemote* _sender,
                                                                        gpointer self);
static void unity_protocol_scope_proxy_remote_connect_to_scope_data_free (gpointer _data);
static void unity_protocol_scope_proxy_remote_connect_to_scope_async_ready_wrapper (GObject *source_object,
                                                                             GAsyncResult *res,
                                                                             void *user_data);
static void unity_protocol_scope_proxy_remote_connect_to_scope (UnityProtocolScopeProxyRemote* self,
                                                         GAsyncReadyCallback _callback_,
                                                         gpointer _user_data_);
static void unity_protocol_scope_proxy_remote_connect_to_scope_finish (UnityProtocolScopeProxyRemote* self,
                                                                GAsyncResult* _res_);
static gboolean unity_protocol_scope_proxy_remote_connect_to_scope_co (UnityProtocolScopeProxyRemoteConnectToScopeData* _data_);
const gchar* unity_protocol_scope_proxy_remote_get_dbus_name (UnityProtocolScopeProxyRemote* self);
const gchar* unity_protocol_scope_proxy_remote_get_dbus_path (UnityProtocolScopeProxyRemote* self);
static void unity_protocol_scope_proxy_remote_connect_to_scope_ready (GObject* source_object,
                                                               GAsyncResult* _res_,
                                                               gpointer _user_data_);
gint unity_protocol_scope_service_get_protocol_version (UnityProtocolScopeService* self);
gboolean unity_protocol_scope_service_get_is_master (UnityProtocolScopeService* self);
gboolean unity_protocol_scope_service_get_visible (UnityProtocolScopeService* self);
gchar* unity_protocol_scope_service_get_search_hint (UnityProtocolScopeService* self);
GHashTable* unity_protocol_scope_service_get_metadata (UnityProtocolScopeService* self);
GHashTable* unity_protocol_scope_service_get_optional_metadata (UnityProtocolScopeService* self);
GVariant* unity_protocol_scope_service_get_categories (UnityProtocolScopeService* self);
GVariant* unity_protocol_scope_service_get_filters (UnityProtocolScopeService* self);
static void unity_protocol_scope_proxy_remote_on_category_order_changed (UnityProtocolScopeProxyRemote* self,
                                                                  const gchar* channel_id,
                                                                  guint32* new_order,
                                                                  int new_order_length1);
static void _unity_protocol_scope_proxy_remote_on_category_order_changed_unity_protocol_scope_service_category_order_changed (UnityProtocolScopeService* _sender,
                                                                                                                       const gchar* channel_id,
                                                                                                                       guint32* new_order,
                                                                                                                       int new_order_length1,
                                                                                                                       gpointer self);
static void unity_protocol_scope_proxy_remote_on_filter_settings_changed (UnityProtocolScopeProxyRemote* self,
                                                                   const gchar* channel_id,
                                                                   GVariant* filter_rows);
static void _unity_protocol_scope_proxy_remote_on_filter_settings_changed_unity_protocol_scope_service_filter_settings_changed (UnityProtocolScopeService* _sender,
                                                                                                                         const gchar* channel_id,
                                                                                                                         GVariant* filter_rows,
                                                                                                                         gpointer self);
static void unity_protocol_scope_proxy_remote_on_results_invalidated (UnityProtocolScopeProxyRemote* self,
                                                               guint channel_type);
static void _unity_protocol_scope_proxy_remote_on_results_invalidated_unity_protocol_scope_service_results_invalidated (UnityProtocolScopeService* _sender,
                                                                                                                 guint channel_type,
                                                                                                                 gpointer self);
static void unity_protocol_scope_proxy_remote_properties_changed (UnityProtocolScopeProxyRemote* self,
                                                           GDBusProxy* proxy,
                                                           GVariant* changed_properties,
                                                           gchar** invalidated_properties);
static void _unity_protocol_scope_proxy_remote_properties_changed_g_dbus_proxy_g_properties_changed (GDBusProxy* _sender,
                                                                                              GVariant* changed_properties,
                                                                                              gchar** invalidated_properties,
                                                                                              gpointer self);
void unity_protocol_scope_proxy_remote_on_scope_appeared (UnityProtocolScopeProxyRemote* self);
void unity_protocol_scope_proxy_remote_on_scope_vanished (UnityProtocolScopeProxyRemote* self);
static void unity_protocol_scope_proxy_remote_start_reconnection_timeout (UnityProtocolScopeProxyRemote* self);
gboolean unity_protocol_scope_proxy_remote_get_auto_reconnect (UnityProtocolScopeProxyRemote* self);
static gboolean __lambda44_ (UnityProtocolScopeProxyRemote* self);
void unity_protocol_scope_proxy_close_channel (UnityProtocolScopeProxy* self,
                                               const gchar* channel_id,
                                               GCancellable* cancellable,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
void unity_protocol_scope_proxy_close_channel_finish (UnityProtocolScopeProxy* self,
                                                      GAsyncResult* _res_,
                                                      GError** error);
static gboolean ___lambda44__gsource_func (gpointer self);
static void unity_protocol_scope_proxy_remote_check_proxy (UnityProtocolScopeProxyRemote* self,
                                                    GError** error);
static void unity_protocol_scope_proxy_remote_real_activate_data_free (gpointer _data);
static void unity_protocol_scope_proxy_remote_real_activate_async_ready_wrapper (GObject *source_object,
                                                                          GAsyncResult *res,
                                                                          void *user_data);
static void unity_protocol_scope_proxy_remote_real_activate (UnityProtocolScopeProxy* base,
                                                      const gchar* channel_id,
                                                      GVariant** result_arr,
                                                      int result_arr_length1,
                                                      UnityProtocolActionType action_type,
                                                      GHashTable* hints,
                                                      GCancellable* cancellable,
                                                      GAsyncReadyCallback _callback_,
                                                      gpointer _user_data_);
static gboolean unity_protocol_scope_proxy_remote_real_activate_co (UnityProtocolScopeProxyRemoteActivateData* _data_);
void unity_protocol_scope_service_activate (UnityProtocolScopeService* self,
                                            const gchar* channel_id,
                                            GVariant** result_arr,
                                            int result_arr_length1,
                                            guint action_type,
                                            GHashTable* hints,
                                            GCancellable* cancellable,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
void unity_protocol_scope_service_activate_finish (UnityProtocolScopeService* self,
                                                   GAsyncResult* _res_,
                                                   UnityProtocolActivationReplyRaw* result,
                                                   GError** error);
static void unity_protocol_scope_proxy_remote_activate_ready (GObject* source_object,
                                                       GAsyncResult* _res_,
                                                       gpointer _user_data_);
static void unity_protocol_scope_proxy_remote_real_search_data_free (gpointer _data);
static void unity_protocol_scope_proxy_remote_real_search_async_ready_wrapper (GObject *source_object,
                                                                        GAsyncResult *res,
                                                                        void *user_data);
static void unity_protocol_scope_proxy_remote_real_search (UnityProtocolScopeProxy* base,
                                                    const gchar* channel_id,
                                                    const gchar* search_string,
                                                    GHashTable* hints,
                                                    GCancellable* cancellable,
                                                    GAsyncReadyCallback _callback_,
                                                    gpointer _user_data_);
static gboolean unity_protocol_scope_proxy_remote_real_search_co (UnityProtocolScopeProxyRemoteSearchData* _data_);
void unity_protocol_scope_service_search (UnityProtocolScopeService* self,
                                          const gchar* channel_id,
                                          const gchar* search_string,
                                          GHashTable* hints,
                                          GCancellable* cancellable,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_);
GHashTable* unity_protocol_scope_service_search_finish (UnityProtocolScopeService* self,
                                                        GAsyncResult* _res_,
                                                        GError** error);
static void unity_protocol_scope_proxy_remote_search_ready (GObject* source_object,
                                                     GAsyncResult* _res_,
                                                     gpointer _user_data_);
static void unity_protocol_scope_proxy_remote_real_open_channel_data_free (gpointer _data);
static void unity_protocol_scope_proxy_remote_real_open_channel_async_ready_wrapper (GObject *source_object,
                                                                              GAsyncResult *res,
                                                                              void *user_data);
static void unity_protocol_scope_proxy_remote_real_open_channel (UnityProtocolScopeProxy* base,
                                                          UnityProtocolChannelType channel_type,
                                                          UnityProtocolChannelFlags channel_flags,
                                                          GCancellable* cancellable,
                                                          GAsyncReadyCallback _callback_,
                                                          gpointer _user_data_);
static gboolean unity_protocol_scope_proxy_remote_real_open_channel_co (UnityProtocolScopeProxyRemoteOpenChannelData* _data_);
static void _g_free0_ (gpointer var);
static void _g_variant_unref0_ (gpointer var);
#define UNITY_PROTOCOL_CHANNEL_PRIVATE_HINT "private-channel"
#define UNITY_PROTOCOL_CHANNEL_DIFF_MODEL_HINT "diff-model"
void unity_protocol_scope_service_open_channel (UnityProtocolScopeService* self,
                                                guint channel_type,
                                                GHashTable* hints,
                                                GCancellable* cancellable,
                                                const char* sender,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_);
gchar* unity_protocol_scope_service_open_channel_finish (UnityProtocolScopeService* self,
                                                         GAsyncResult* _res_,
                                                         GHashTable* * out_hints,
                                                         GError** error);
static void unity_protocol_scope_proxy_remote_open_channel_ready (GObject* source_object,
                                                           GAsyncResult* _res_,
                                                           gpointer _user_data_);
#define UNITY_PROTOCOL_CHANNEL_SWARM_NAME_HINT "model-swarm-name"
static void unity_protocol_scope_proxy_remote_real_close_channel_data_free (gpointer _data);
static void unity_protocol_scope_proxy_remote_real_close_channel_async_ready_wrapper (GObject *source_object,
                                                                               GAsyncResult *res,
                                                                               void *user_data);
static void unity_protocol_scope_proxy_remote_real_close_channel (UnityProtocolScopeProxy* base,
                                                           const gchar* channel_id,
                                                           GCancellable* cancellable,
                                                           GAsyncReadyCallback _callback_,
                                                           gpointer _user_data_);
static gboolean unity_protocol_scope_proxy_remote_real_close_channel_co (UnityProtocolScopeProxyRemoteCloseChannelData* _data_);
void unity_protocol_scope_service_close_channel (UnityProtocolScopeService* self,
                                                 const gchar* channel_id,
                                                 GHashTable* hints,
                                                 GCancellable* cancellable,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_);
void unity_protocol_scope_service_close_channel_finish (UnityProtocolScopeService* self,
                                                        GAsyncResult* _res_,
                                                        GError** error);
static void unity_protocol_scope_proxy_remote_close_channel_ready (GObject* source_object,
                                                            GAsyncResult* _res_,
                                                            gpointer _user_data_);
static void unity_protocol_scope_proxy_remote_set_view_type_data_free (gpointer _data);
static void unity_protocol_scope_proxy_remote_set_view_type_async_ready_wrapper (GObject *source_object,
                                                                          GAsyncResult *res,
                                                                          void *user_data);
void unity_protocol_scope_proxy_remote_set_view_type (UnityProtocolScopeProxyRemote* self,
                                                      UnityProtocolViewType view_type,
                                                      GAsyncReadyCallback _callback_,
                                                      gpointer _user_data_);
void unity_protocol_scope_proxy_remote_set_view_type_finish (UnityProtocolScopeProxyRemote* self,
                                                             GAsyncResult* _res_);
static gboolean unity_protocol_scope_proxy_remote_set_view_type_co (UnityProtocolScopeProxyRemoteSetViewTypeData* _data_);
void unity_protocol_scope_service_set_view_type (UnityProtocolScopeService* self,
                                                 guint view_type,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_);
void unity_protocol_scope_service_set_view_type_finish (UnityProtocolScopeService* self,
                                                        GAsyncResult* _res_,
                                                        GError** error);
static void unity_protocol_scope_proxy_remote_set_view_type_ready (GObject* source_object,
                                                            GAsyncResult* _res_,
                                                            gpointer _user_data_);
static void unity_protocol_scope_proxy_remote_real_set_active_sources_data_free (gpointer _data);
static void unity_protocol_scope_proxy_remote_real_set_active_sources_async_ready_wrapper (GObject *source_object,
                                                                                    GAsyncResult *res,
                                                                                    void *user_data);
static void unity_protocol_scope_proxy_remote_real_set_active_sources (UnityProtocolScopeProxy* base,
                                                                const gchar* channel_id,
                                                                gchar** sources,
                                                                int sources_length1,
                                                                GCancellable* cancellable,
                                                                GAsyncReadyCallback _callback_,
                                                                gpointer _user_data_);
static gboolean unity_protocol_scope_proxy_remote_real_set_active_sources_co (UnityProtocolScopeProxyRemoteSetActiveSourcesData* _data_);
static void unity_protocol_scope_proxy_remote_real_push_results_data_free (gpointer _data);
static void unity_protocol_scope_proxy_remote_real_push_results_async_ready_wrapper (GObject *source_object,
                                                                              GAsyncResult *res,
                                                                              void *user_data);
static void unity_protocol_scope_proxy_remote_real_push_results (UnityProtocolScopeProxy* base,
                                                          const gchar* channel_id,
                                                          const gchar* search_string,
                                                          const gchar* source_scope_id,
                                                          DeeSerializableModel* model,
                                                          gchar** categories,
                                                          int categories_length1,
                                                          GCancellable* cancellable,
                                                          GAsyncReadyCallback _callback_,
                                                          gpointer _user_data_);
static gboolean unity_protocol_scope_proxy_remote_real_push_results_co (UnityProtocolScopeProxyRemotePushResultsData* _data_);
void unity_protocol_scope_service_push_results (UnityProtocolScopeService* self,
                                                const gchar* channel_id,
                                                const gchar* search_string,
                                                const gchar* source_scope_id,
                                                GVariant* result_variant,
                                                gchar** categories,
                                                int categories_length1,
                                                GCancellable* cancellable,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_);
GHashTable* unity_protocol_scope_service_push_results_finish (UnityProtocolScopeService* self,
                                                              GAsyncResult* _res_,
                                                              GError** error);
static void unity_protocol_scope_proxy_remote_push_results_ready (GObject* source_object,
                                                           GAsyncResult* _res_,
                                                           gpointer _user_data_);
static void unity_protocol_scope_proxy_remote_set_dbus_name (UnityProtocolScopeProxyRemote* self,
                                                      const gchar* value);
static void unity_protocol_scope_proxy_remote_set_dbus_path (UnityProtocolScopeProxyRemote* self,
                                                      const gchar* value);
void unity_protocol_scope_proxy_remote_set_auto_reconnect (UnityProtocolScopeProxyRemote* self,
                                                           gboolean value);
static GObject * unity_protocol_scope_proxy_remote_constructor (GType type,
                                                         guint n_construct_properties,
                                                         GObjectConstructParam * construct_properties);
static UnityProtocolScopeProxyRemoteNameWatcher* unity_protocol_scope_proxy_remote_name_watcher_new (GDBusConnection* bus,
                                                                                              const gchar* dbus_name,
                                                                                              UnityProtocolScopeProxyRemote* parent,
                                                                                              gboolean auto_start);
static UnityProtocolScopeProxyRemoteNameWatcher* unity_protocol_scope_proxy_remote_name_watcher_construct (GType object_type,
                                                                                                    GDBusConnection* bus,
                                                                                                    const gchar* dbus_name,
                                                                                                    UnityProtocolScopeProxyRemote* parent,
                                                                                                    gboolean auto_start);
#define UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_NAME_WATCHER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_TYPE_NAME_WATCHER, UnityProtocolScopeProxyRemoteNameWatcherPrivate))
static void __lambda42_ (UnityProtocolScopeProxyRemoteNameWatcher* self);
static void ___lambda42__gbus_name_appeared_callback (GDBusConnection* connection,
                                               const gchar* name,
                                               const gchar* name_owner,
                                               gpointer self);
static void __lambda43_ (UnityProtocolScopeProxyRemoteNameWatcher* self);
static void ___lambda43__gbus_name_vanished_callback (GDBusConnection* connection,
                                               const gchar* name,
                                               gpointer self);
static void unity_protocol_scope_proxy_remote_name_watcher_finalize (UnityProtocolScopeProxyRemoteNameWatcher * obj);
static void unity_protocol_scope_proxy_remote_finalize (GObject * obj);
gboolean unity_protocol_scope_proxy_get_visible (UnityProtocolScopeProxy* self);
gboolean unity_protocol_scope_proxy_get_is_master (UnityProtocolScopeProxy* self);
gboolean unity_protocol_scope_proxy_get_connected (UnityProtocolScopeProxy* self);
GVariant* unity_protocol_scope_proxy_get_sources (UnityProtocolScopeProxy* self);
const gchar* unity_protocol_scope_proxy_get_search_hint (UnityProtocolScopeProxy* self);
DeeSerializableModel* unity_protocol_scope_proxy_get_filters_model (UnityProtocolScopeProxy* self);
DeeSerializableModel* unity_protocol_scope_proxy_get_categories_model (UnityProtocolScopeProxy* self);
GHashTable* unity_protocol_scope_proxy_get_metadata (UnityProtocolScopeProxy* self);
GHashTable* unity_protocol_scope_proxy_get_optional_metadata (UnityProtocolScopeProxy* self);
UnityProtocolViewType unity_protocol_scope_proxy_get_view_type (UnityProtocolScopeProxy* self);
static void _vala_unity_protocol_scope_proxy_remote_get_property (GObject * object,
                                                           guint property_id,
                                                           GValue * value,
                                                           GParamSpec * pspec);
void unity_protocol_scope_proxy_set_view_type (UnityProtocolScopeProxy* self,
                                               UnityProtocolViewType value);
static void _vala_unity_protocol_scope_proxy_remote_set_property (GObject * object,
                                                           guint property_id,
                                                           const GValue * value,
                                                           GParamSpec * pspec);


static UnityProtocolScopeProxyRemote*
unity_protocol_scope_proxy_remote_construct (GType object_type,
                                             const gchar* dbus_name_,
                                             const gchar* dbus_path_)
{
	UnityProtocolScopeProxyRemote * self = NULL;
	g_return_val_if_fail (dbus_name_ != NULL, NULL);
	g_return_val_if_fail (dbus_path_ != NULL, NULL);
	self = (UnityProtocolScopeProxyRemote*) g_object_new (object_type, "dbus-name", dbus_name_, "dbus-path", dbus_path_, NULL);
	return self;
}


static UnityProtocolScopeProxyRemote*
unity_protocol_scope_proxy_remote_new (const gchar* dbus_name_,
                                       const gchar* dbus_path_)
{
	return unity_protocol_scope_proxy_remote_construct (UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE, dbus_name_, dbus_path_);
}


static void
unity_protocol_scope_proxy_remote_create_data_free (gpointer _data)
{
	UnityProtocolScopeProxyRemoteCreateData* _data_;
	_data_ = _data;
	_g_free0 (_data_->dbus_name);
	_g_free0 (_data_->dbus_path);
	_g_object_unref0 (_data_->cancellable);
	_g_object_unref0 (_data_->result);
	g_slice_free (UnityProtocolScopeProxyRemoteCreateData, _data_);
}


static void
unity_protocol_scope_proxy_remote_create_async_ready_wrapper (GObject *source_object,
                                                              GAsyncResult *res,
                                                              void *user_data)
{
	UnityProtocolScopeProxyRemoteCreateData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


void
unity_protocol_scope_proxy_remote_create (const gchar* dbus_name,
                                          const gchar* dbus_path,
                                          GCancellable* cancellable,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_)
{
	UnityProtocolScopeProxyRemoteCreateData* _data_;
	gchar* _tmp0_;
	gchar* _tmp1_;
	GCancellable* _tmp2_;
	_data_ = g_slice_new0 (UnityProtocolScopeProxyRemoteCreateData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (NULL, cancellable, unity_protocol_scope_proxy_remote_create_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_proxy_remote_create_data_free);
	_tmp0_ = g_strdup (dbus_name);
	_g_free0 (_data_->dbus_name);
	_data_->dbus_name = _tmp0_;
	_tmp1_ = g_strdup (dbus_path);
	_g_free0 (_data_->dbus_path);
	_data_->dbus_path = _tmp1_;
	_tmp2_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp2_;
	unity_protocol_scope_proxy_remote_create_co (_data_);
}


UnityProtocolScopeProxyRemote*
unity_protocol_scope_proxy_remote_create_finish (GAsyncResult* _res_,
                                                 GError** error)
{
	UnityProtocolScopeProxyRemote* result;
	UnityProtocolScopeProxyRemoteCreateData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static void
unity_protocol_scope_proxy_remote_create_ready (GObject* source_object,
                                                GAsyncResult* _res_,
                                                gpointer _user_data_)
{
	UnityProtocolScopeProxyRemoteCreateData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_protocol_scope_proxy_remote_create_co (_data_);
}


static gboolean
unity_protocol_scope_proxy_remote_create_co (UnityProtocolScopeProxyRemoteCreateData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = unity_protocol_scope_proxy_remote_new (_data_->dbus_name, _data_->dbus_path);
	_data_->proxy = _data_->_tmp0_;
	_data_->_tmp1_ = _data_->proxy;
	_data_->_state_ = 1;
	unity_protocol_scope_proxy_remote_wait_for_proxy (_data_->_tmp1_, unity_protocol_scope_proxy_remote_create_ready, _data_);
	return FALSE;
	_state_1:
	unity_protocol_scope_proxy_remote_wait_for_proxy_finish (_data_->_tmp1_, _data_->_res_);
	if (_data_->cancellable != NULL) {
		g_cancellable_set_error_if_cancelled (_data_->cancellable, &_data_->_inner_error_);
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			_g_object_unref0 (_data_->proxy);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->result = _data_->proxy;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_protocol_scope_proxy_remote_wait_for_proxy_data_free (gpointer _data)
{
	UnityProtocolScopeProxyRemoteWaitForProxyData* _data_;
	_data_ = _data;
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityProtocolScopeProxyRemoteWaitForProxyData, _data_);
}


static void
unity_protocol_scope_proxy_remote_wait_for_proxy_async_ready_wrapper (GObject *source_object,
                                                                      GAsyncResult *res,
                                                                      void *user_data)
{
	UnityProtocolScopeProxyRemoteWaitForProxyData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_protocol_scope_proxy_remote_wait_for_proxy (UnityProtocolScopeProxyRemote* self,
                                                  GAsyncReadyCallback _callback_,
                                                  gpointer _user_data_)
{
	UnityProtocolScopeProxyRemoteWaitForProxyData* _data_;
	UnityProtocolScopeProxyRemote* _tmp0_;
	_data_ = g_slice_new0 (UnityProtocolScopeProxyRemoteWaitForProxyData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, unity_protocol_scope_proxy_remote_wait_for_proxy_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_proxy_remote_wait_for_proxy_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	unity_protocol_scope_proxy_remote_wait_for_proxy_co (_data_);
}


static void
unity_protocol_scope_proxy_remote_wait_for_proxy_finish (UnityProtocolScopeProxyRemote* self,
                                                         GAsyncResult* _res_)
{
	UnityProtocolScopeProxyRemoteWaitForProxyData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}


static Block9Data*
block9_data_ref (Block9Data* _data9_)
{
	g_atomic_int_inc (&_data9_->_ref_count_);
	return _data9_;
}


static void
block9_data_unref (void * _userdata_)
{
	Block9Data* _data9_;
	_data9_ = (Block9Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data9_->_ref_count_)) {
		UnityProtocolScopeProxyRemote* self;
		self = _data9_->self;
		_g_object_unref0 (self);
		g_slice_free (Block9Data, _data9_);
	}
}


static void
___lambda45_ (Block9Data* _data9_)
{
	UnityProtocolScopeProxyRemote* self;
	self = _data9_->self;
	unity_protocol_scope_proxy_remote_wait_for_proxy_co (_data9_->_async_data_);
}


static void
____lambda45__unity_protocol_scope_proxy_remote_proxy_initialized (UnityProtocolScopeProxyRemote* _sender,
                                                                   gpointer self)
{
	___lambda45_ (self);
}


static gboolean
unity_protocol_scope_proxy_remote_wait_for_proxy_co (UnityProtocolScopeProxyRemoteWaitForProxyData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_data9_ = g_slice_new0 (Block9Data);
	_data_->_data9_->_ref_count_ = 1;
	_data_->_data9_->self = g_object_ref (_data_->self);
	_data_->_data9_->_async_data_ = _data_;
	_data_->_tmp0_ = _data_->self->priv->_service;
	if (_data_->_tmp0_ == NULL) {
		_data_->_tmp1_ = g_signal_connect_data (_data_->self, "proxy-initialized", (GCallback) ____lambda45__unity_protocol_scope_proxy_remote_proxy_initialized, block9_data_ref (_data_->_data9_), (GClosureNotify) block9_data_unref, 0);
		_data_->sig_id = _data_->_tmp1_;
		_data_->_state_ = 1;
		return FALSE;
		_state_1:
		;
		_data_->_tmp2_ = _data_->sig_id;
		g_signal_handler_disconnect (_data_->self, _data_->_tmp2_);
	}
	block9_data_unref (_data_->_data9_);
	_data_->_data9_ = NULL;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_protocol_scope_proxy_remote_connect_to_scope_data_free (gpointer _data)
{
	UnityProtocolScopeProxyRemoteConnectToScopeData* _data_;
	_data_ = _data;
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityProtocolScopeProxyRemoteConnectToScopeData, _data_);
}


static void
unity_protocol_scope_proxy_remote_connect_to_scope_async_ready_wrapper (GObject *source_object,
                                                                        GAsyncResult *res,
                                                                        void *user_data)
{
	UnityProtocolScopeProxyRemoteConnectToScopeData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_protocol_scope_proxy_remote_connect_to_scope (UnityProtocolScopeProxyRemote* self,
                                                    GAsyncReadyCallback _callback_,
                                                    gpointer _user_data_)
{
	UnityProtocolScopeProxyRemoteConnectToScopeData* _data_;
	UnityProtocolScopeProxyRemote* _tmp0_;
	_data_ = g_slice_new0 (UnityProtocolScopeProxyRemoteConnectToScopeData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, unity_protocol_scope_proxy_remote_connect_to_scope_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_proxy_remote_connect_to_scope_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	unity_protocol_scope_proxy_remote_connect_to_scope_co (_data_);
}


static void
unity_protocol_scope_proxy_remote_connect_to_scope_finish (UnityProtocolScopeProxyRemote* self,
                                                           GAsyncResult* _res_)
{
	UnityProtocolScopeProxyRemoteConnectToScopeData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}


static void
unity_protocol_scope_proxy_remote_connect_to_scope_ready (GObject* source_object,
                                                          GAsyncResult* _res_,
                                                          gpointer _user_data_)
{
	UnityProtocolScopeProxyRemoteConnectToScopeData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_protocol_scope_proxy_remote_connect_to_scope_co (_data_);
}


static void
_unity_protocol_scope_proxy_remote_on_category_order_changed_unity_protocol_scope_service_category_order_changed (UnityProtocolScopeService* _sender,
                                                                                                                  const gchar* channel_id,
                                                                                                                  guint32* new_order,
                                                                                                                  int new_order_length1,
                                                                                                                  gpointer self)
{
	unity_protocol_scope_proxy_remote_on_category_order_changed ((UnityProtocolScopeProxyRemote*) self, channel_id, new_order, new_order_length1);
}


static void
_unity_protocol_scope_proxy_remote_on_filter_settings_changed_unity_protocol_scope_service_filter_settings_changed (UnityProtocolScopeService* _sender,
                                                                                                                    const gchar* channel_id,
                                                                                                                    GVariant* filter_rows,
                                                                                                                    gpointer self)
{
	unity_protocol_scope_proxy_remote_on_filter_settings_changed ((UnityProtocolScopeProxyRemote*) self, channel_id, filter_rows);
}


static void
_unity_protocol_scope_proxy_remote_on_results_invalidated_unity_protocol_scope_service_results_invalidated (UnityProtocolScopeService* _sender,
                                                                                                            guint channel_type,
                                                                                                            gpointer self)
{
	unity_protocol_scope_proxy_remote_on_results_invalidated ((UnityProtocolScopeProxyRemote*) self, channel_type);
}


static void
_unity_protocol_scope_proxy_remote_properties_changed_g_dbus_proxy_g_properties_changed (GDBusProxy* _sender,
                                                                                         GVariant* changed_properties,
                                                                                         gchar** invalidated_properties,
                                                                                         gpointer self)
{
	unity_protocol_scope_proxy_remote_properties_changed ((UnityProtocolScopeProxyRemote*) self, _sender, changed_properties, invalidated_properties);
}


static gboolean
unity_protocol_scope_proxy_remote_connect_to_scope_co (UnityProtocolScopeProxyRemoteConnectToScopeData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = _data_->self->priv->_connecting_to_proxy;
	if (_data_->_tmp0_) {
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
		if (_data_->_state_ != 0) {
			while (_data_->_task_complete_ != TRUE) {
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
			}
		}
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	{
		_data_->self->priv->_connecting_to_proxy = TRUE;
		_data_->_tmp2_ = _data_->self->priv->_bus;
		_data_->_tmp3_ = _data_->self->priv->_dbus_name;
		_data_->_tmp4_ = _data_->self->priv->_dbus_path;
		_data_->_state_ = 1;
		g_async_initable_new_async (UNITY_PROTOCOL_TYPE_SCOPE_SERVICE_PROXY, 0, NULL, unity_protocol_scope_proxy_remote_connect_to_scope_ready, _data_, "g-flags", 0, "g-name", _data_->_tmp3_, "g-connection", _data_->_tmp2_, "g-object-path", _data_->_tmp4_, "g-interface-name", "com.canonical.Unity.Scope", "g-interface-info", g_type_get_qdata (UNITY_PROTOCOL_TYPE_SCOPE_SERVICE, g_quark_from_static_string ("vala-dbus-interface-info")), NULL);
		return FALSE;
		_state_1:
		_data_->_tmp5_ = g_async_initable_new_finish (_data_->_source_object_, _data_->_res_, &_data_->_inner_error_);
		_data_->_tmp1_ = (UnityProtocolScopeService*) _data_->_tmp5_;
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			goto __catch6_g_error;
		}
		_data_->_tmp6_ = _data_->_tmp1_;
		_data_->_tmp1_ = NULL;
		_g_object_unref0 (_data_->self->priv->_service);
		_data_->self->priv->_service = _data_->_tmp6_;
		_data_->_tmp7_ = _data_->self->priv->_service;
		_data_->_tmp8_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp7_, g_dbus_proxy_get_type ()) ? ((GDBusProxy*) _data_->_tmp7_) : NULL);
		_data_->proxy = _data_->_tmp8_;
		_data_->_tmp9_ = _data_->proxy;
		g_object_get (_data_->_tmp9_, "g-name-owner", &_data_->_tmp10_, NULL);
		_data_->_tmp11_ = _data_->_tmp10_;
		_data_->_tmp12_ = _data_->_tmp11_;
		_data_->self->priv->_is_connected = _data_->_tmp12_ != NULL;
		_g_free0 (_data_->_tmp12_);
		_data_->_tmp13_ = _data_->self->priv->_is_connected;
		if (_data_->_tmp13_) {
			_data_->_tmp14_ = _data_->self->priv->_service;
			_data_->_tmp15_ = unity_protocol_scope_service_get_protocol_version (_data_->_tmp14_);
			_data_->_tmp16_ = _data_->_tmp15_;
			if (_data_->_tmp16_ < UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_REQUIRED_PROTOCOL_VERSION) {
				_data_->_tmp17_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_UNKNOWN, "Unsupported scope proxy");
				_data_->_inner_error_ = _data_->_tmp17_;
				_g_object_unref0 (_data_->proxy);
				_g_object_unref0 (_data_->_tmp1_);
				goto __catch6_g_error;
			}
			_data_->_tmp18_ = _data_->self->priv->_service;
			_data_->_tmp19_ = unity_protocol_scope_service_get_is_master (_data_->_tmp18_);
			_data_->_tmp20_ = _data_->_tmp19_;
			_data_->self->priv->_is_master = _data_->_tmp20_;
			_data_->_tmp21_ = _data_->self->priv->_service;
			_data_->_tmp22_ = unity_protocol_scope_service_get_visible (_data_->_tmp21_);
			_data_->_tmp23_ = _data_->_tmp22_;
			_data_->self->priv->_visible = _data_->_tmp23_;
			_data_->_tmp24_ = _data_->self->priv->_service;
			_data_->_tmp25_ = unity_protocol_scope_service_get_search_hint (_data_->_tmp24_);
			_data_->_tmp26_ = _data_->_tmp25_;
			_g_free0 (_data_->self->priv->_search_hint);
			_data_->self->priv->_search_hint = _data_->_tmp26_;
			_data_->_tmp27_ = _data_->self->priv->_service;
			_data_->_tmp28_ = unity_protocol_scope_service_get_metadata (_data_->_tmp27_);
			_data_->_tmp29_ = _data_->_tmp28_;
			_g_hash_table_unref0 (_data_->self->priv->_metadata);
			_data_->self->priv->_metadata = _data_->_tmp29_;
			_data_->_tmp30_ = _data_->self->priv->_service;
			_data_->_tmp31_ = unity_protocol_scope_service_get_optional_metadata (_data_->_tmp30_);
			_data_->_tmp32_ = _data_->_tmp31_;
			_g_hash_table_unref0 (_data_->self->priv->_optional_metadata);
			_data_->self->priv->_optional_metadata = _data_->_tmp32_;
			_data_->_tmp33_ = _data_->self->priv->_service;
			_data_->_tmp34_ = unity_protocol_scope_service_get_categories (_data_->_tmp33_);
			_data_->_tmp35_ = _data_->_tmp34_;
			_data_->_tmp36_ = _data_->_tmp35_;
			_data_->_tmp37_ = dee_serializable_parse (_data_->_tmp36_, dee_sequence_model_get_type ());
			_data_->_tmp38_ = G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp37_, dee_serializable_model_get_type ()) ? ((DeeSerializableModel*) _data_->_tmp37_) : NULL;
			if (_data_->_tmp38_ == NULL) {
				_g_object_unref0 (_data_->_tmp37_);
			}
			_g_object_unref0 (_data_->self->priv->_categories_model);
			_data_->self->priv->_categories_model = _data_->_tmp38_;
			_g_variant_unref0 (_data_->_tmp36_);
			_data_->_tmp39_ = _data_->self->priv->_service;
			_data_->_tmp40_ = unity_protocol_scope_service_get_filters (_data_->_tmp39_);
			_data_->_tmp41_ = _data_->_tmp40_;
			_data_->_tmp42_ = _data_->_tmp41_;
			_data_->_tmp43_ = dee_serializable_parse (_data_->_tmp42_, dee_sequence_model_get_type ());
			_data_->_tmp44_ = G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp43_, dee_serializable_model_get_type ()) ? ((DeeSerializableModel*) _data_->_tmp43_) : NULL;
			if (_data_->_tmp44_ == NULL) {
				_g_object_unref0 (_data_->_tmp43_);
			}
			_g_object_unref0 (_data_->self->priv->_filters_model);
			_data_->self->priv->_filters_model = _data_->_tmp44_;
			_g_variant_unref0 (_data_->_tmp42_);
			_data_->_tmp45_ = _data_->self->priv->_service;
			_data_->_tmp46_ = g_signal_connect_object (_data_->_tmp45_, "category-order-changed", (GCallback) _unity_protocol_scope_proxy_remote_on_category_order_changed_unity_protocol_scope_service_category_order_changed, _data_->self, 0);
			_data_->self->priv->_cat_sig_id = _data_->_tmp46_;
			_data_->_tmp47_ = _data_->self->priv->_service;
			_data_->_tmp48_ = g_signal_connect_object (_data_->_tmp47_, "filter-settings-changed", (GCallback) _unity_protocol_scope_proxy_remote_on_filter_settings_changed_unity_protocol_scope_service_filter_settings_changed, _data_->self, 0);
			_data_->self->priv->_filters_sig_id = _data_->_tmp48_;
			_data_->_tmp49_ = _data_->self->priv->_service;
			_data_->_tmp50_ = g_signal_connect_object (_data_->_tmp49_, "results-invalidated", (GCallback) _unity_protocol_scope_proxy_remote_on_results_invalidated_unity_protocol_scope_service_results_invalidated, _data_->self, 0);
			_data_->self->priv->_results_invalidated_sig_id = _data_->_tmp50_;
		}
		_data_->_tmp51_ = _data_->proxy;
		g_signal_connect_object (_data_->_tmp51_, "g-properties-changed", (GCallback) _unity_protocol_scope_proxy_remote_properties_changed_g_dbus_proxy_g_properties_changed, _data_->self, 0);
		_g_object_unref0 (_data_->proxy);
		_g_object_unref0 (_data_->_tmp1_);
	}
	goto __finally6;
	__catch6_g_error:
	{
		_data_->e = _data_->_inner_error_;
		_data_->_inner_error_ = NULL;
		_data_->self->priv->_is_connected = FALSE;
		_data_->_tmp52_ = _data_->self->priv->_dbus_path;
		_data_->_tmp53_ = _data_->self->priv->_dbus_name;
		_data_->_tmp54_ = _data_->e;
		_data_->_tmp55_ = _data_->_tmp54_->message;
		g_warning ("unity-scope-proxy-remote.vala:187: Unable to connect to Scope (%s @ %s" \
"): %s", _data_->_tmp52_, _data_->_tmp53_, _data_->_tmp55_);
		_g_error_free0 (_data_->e);
	}
	__finally6:
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
		g_clear_error (&_data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->self->priv->_connecting_to_proxy = FALSE;
	g_object_notify ((GObject*) _data_->self, "connected");
	g_signal_emit (_data_->self, unity_protocol_scope_proxy_remote_signals[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_PROXY_INITIALIZED_SIGNAL], 0);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_protocol_scope_proxy_remote_properties_changed (UnityProtocolScopeProxyRemote* self,
                                                      GDBusProxy* proxy,
                                                      GVariant* changed_properties,
                                                      gchar** invalidated_properties)
{
	GVariantIter* iter = NULL;
	GVariantIter* _tmp0_;
	const gchar* prop_name = NULL;
	GVariant* prop_value = NULL;
	g_return_if_fail (self != NULL);
	g_return_if_fail (proxy != NULL);
	g_return_if_fail (changed_properties != NULL);
	_tmp0_ = g_variant_iter_new (changed_properties);
	iter = _tmp0_;
	while (TRUE) {
		GVariantIter* _tmp1_;
		const gchar* _tmp2_;
		_tmp1_ = iter;
		if (!g_variant_iter_next (_tmp1_, "{&sv}", &prop_name, &prop_value, NULL)) {
			break;
		}
		_tmp2_ = prop_name;
		if (g_strcmp0 (_tmp2_, "Filters") == 0) {
			UnityProtocolScopeService* _tmp3_;
			GVariant* _tmp4_;
			GVariant* _tmp5_;
			GVariant* _tmp6_;
			GObject* _tmp7_;
			DeeSerializableModel* _tmp8_;
			_tmp3_ = self->priv->_service;
			_tmp4_ = unity_protocol_scope_service_get_filters (_tmp3_);
			_tmp5_ = _tmp4_;
			_tmp6_ = _tmp5_;
			_tmp7_ = dee_serializable_parse (_tmp6_, dee_sequence_model_get_type ());
			_tmp8_ = G_TYPE_CHECK_INSTANCE_TYPE (_tmp7_, dee_serializable_model_get_type ()) ? ((DeeSerializableModel*) _tmp7_) : NULL;
			if (_tmp8_ == NULL) {
				_g_object_unref0 (_tmp7_);
			}
			_g_object_unref0 (self->priv->_filters_model);
			self->priv->_filters_model = _tmp8_;
			_g_variant_unref0 (_tmp6_);
			g_object_notify ((GObject*) self, "filters-model");
		} else {
			const gchar* _tmp9_;
			_tmp9_ = prop_name;
			if (g_strcmp0 (_tmp9_, "Categories") == 0) {
				UnityProtocolScopeService* _tmp10_;
				GVariant* _tmp11_;
				GVariant* _tmp12_;
				GVariant* _tmp13_;
				GObject* _tmp14_;
				DeeSerializableModel* _tmp15_;
				_tmp10_ = self->priv->_service;
				_tmp11_ = unity_protocol_scope_service_get_categories (_tmp10_);
				_tmp12_ = _tmp11_;
				_tmp13_ = _tmp12_;
				_tmp14_ = dee_serializable_parse (_tmp13_, dee_sequence_model_get_type ());
				_tmp15_ = G_TYPE_CHECK_INSTANCE_TYPE (_tmp14_, dee_serializable_model_get_type ()) ? ((DeeSerializableModel*) _tmp14_) : NULL;
				if (_tmp15_ == NULL) {
					_g_object_unref0 (_tmp14_);
				}
				_g_object_unref0 (self->priv->_categories_model);
				self->priv->_categories_model = _tmp15_;
				_g_variant_unref0 (_tmp13_);
				g_object_notify ((GObject*) self, "categories-model");
			}
		}
	}
	_g_variant_unref0 (prop_value);
	_g_variant_iter_free0 (iter);
}


static void
unity_protocol_scope_proxy_remote_on_category_order_changed (UnityProtocolScopeProxyRemote* self,
                                                             const gchar* channel_id,
                                                             guint32* new_order,
                                                             int new_order_length1)
{
	g_return_if_fail (self != NULL);
	g_return_if_fail (channel_id != NULL);
	g_signal_emit_by_name ((UnityProtocolScopeProxy*) self, "category-order-changed", channel_id, new_order, new_order_length1);
}


static void
unity_protocol_scope_proxy_remote_on_filter_settings_changed (UnityProtocolScopeProxyRemote* self,
                                                              const gchar* channel_id,
                                                              GVariant* filter_rows)
{
	g_return_if_fail (self != NULL);
	g_return_if_fail (channel_id != NULL);
	g_return_if_fail (filter_rows != NULL);
	g_signal_emit_by_name ((UnityProtocolScopeProxy*) self, "filter-settings-changed", channel_id, filter_rows);
}


static void
unity_protocol_scope_proxy_remote_on_results_invalidated (UnityProtocolScopeProxyRemote* self,
                                                          guint channel_type)
{
	g_return_if_fail (self != NULL);
	g_signal_emit_by_name ((UnityProtocolScopeProxy*) self, "results-invalidated", (UnityProtocolChannelType) channel_type);
}


void
unity_protocol_scope_proxy_remote_on_scope_appeared (UnityProtocolScopeProxyRemote* self)
{
	guint _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_reconnection_id;
	if (_tmp0_ != ((guint) 0)) {
		guint _tmp1_;
		_tmp1_ = self->priv->_reconnection_id;
		g_source_remove (_tmp1_);
	}
	unity_protocol_scope_proxy_remote_connect_to_scope (self, NULL, NULL);
}


void
unity_protocol_scope_proxy_remote_on_scope_vanished (UnityProtocolScopeProxyRemote* self)
{
	UnityProtocolScopeService* _tmp0_;
	g_return_if_fail (self != NULL);
	_g_object_unref0 (self->priv->_filters_model);
	self->priv->_filters_model = NULL;
	_tmp0_ = self->priv->_service;
	if (_tmp0_ != NULL) {
		gulong _tmp1_;
		gulong _tmp4_;
		gulong _tmp7_;
		guint _tmp10_;
		gint64 cur_time = 0LL;
		gint64 time_since_last_crash = 0LL;
		gint64 _tmp11_;
		gint64 _tmp12_;
		gint64 _tmp13_;
		_tmp1_ = self->priv->_cat_sig_id;
		if (_tmp1_ > ((gulong) 0)) {
			UnityProtocolScopeService* _tmp2_;
			gulong _tmp3_;
			_tmp2_ = self->priv->_service;
			_tmp3_ = self->priv->_cat_sig_id;
			g_signal_handler_disconnect (_tmp2_, _tmp3_);
			self->priv->_cat_sig_id = (gulong) 0;
		}
		_tmp4_ = self->priv->_filters_sig_id;
		if (_tmp4_ > ((gulong) 0)) {
			UnityProtocolScopeService* _tmp5_;
			gulong _tmp6_;
			_tmp5_ = self->priv->_service;
			_tmp6_ = self->priv->_filters_sig_id;
			g_signal_handler_disconnect (_tmp5_, _tmp6_);
			self->priv->_filters_sig_id = (gulong) 0;
		}
		_tmp7_ = self->priv->_results_invalidated_sig_id;
		if (_tmp7_ > ((gulong) 0)) {
			UnityProtocolScopeService* _tmp8_;
			gulong _tmp9_;
			_tmp8_ = self->priv->_service;
			_tmp9_ = self->priv->_results_invalidated_sig_id;
			g_signal_handler_disconnect (_tmp8_, _tmp9_);
			self->priv->_results_invalidated_sig_id = (gulong) 0;
		}
		_tmp10_ = self->priv->_scope_crashes;
		self->priv->_scope_crashes = _tmp10_ + 1;
		cur_time = g_get_monotonic_time ();
		_tmp11_ = cur_time;
		_tmp12_ = self->priv->_last_scope_crash;
		time_since_last_crash = _tmp11_ - _tmp12_;
		_tmp13_ = time_since_last_crash;
		if (_tmp13_ >= ((gint64) (15 * 60000000))) {
			gint64 _tmp14_;
			_tmp14_ = cur_time;
			self->priv->_last_scope_crash = _tmp14_;
			self->priv->_scope_crashes = (guint) 1;
		} else {
			guint _tmp15_;
			_tmp15_ = self->priv->_scope_crashes;
			if (_tmp15_ >= ((guint) 10)) {
				const gchar* _tmp16_;
				_tmp16_ = self->priv->_dbus_name;
				g_warning ("unity-scope-proxy-remote.vala:284: Scope %s is crashing too often, dis" \
"abling it", _tmp16_);
				return;
			}
		}
		unity_protocol_scope_proxy_remote_start_reconnection_timeout (self);
	} else {
		unity_protocol_scope_proxy_remote_start_reconnection_timeout (self);
	}
	self->priv->_is_connected = FALSE;
	g_signal_emit_by_name ((UnityProtocolScopeProxy*) self, "channels-invalidated");
	g_object_notify ((GObject*) self, "connected");
}


static gboolean
__lambda44_ (UnityProtocolScopeProxyRemote* self)
{
	gboolean result = FALSE;
	UnityProtocolScopeService* _tmp0_;
	_tmp0_ = self->priv->_service;
	if (_tmp0_ == NULL) {
		unity_protocol_scope_proxy_remote_connect_to_scope (self, NULL, NULL);
	} else {
		UnityProtocolScopeService* _tmp1_;
		gchar* _tmp2_;
		gchar* _tmp3_;
		gchar* _tmp4_;
		gboolean _tmp5_;
		_tmp1_ = self->priv->_service;
		g_object_get (G_TYPE_CHECK_INSTANCE_TYPE (_tmp1_, g_dbus_proxy_get_type ()) ? ((GDBusProxy*) _tmp1_) : NULL, "g-name-owner", &_tmp2_, NULL);
		_tmp3_ = _tmp2_;
		_tmp4_ = _tmp3_;
		_tmp5_ = _tmp4_ == NULL;
		_g_free0 (_tmp4_);
		if (_tmp5_) {
			unity_protocol_scope_proxy_close_channel ((UnityProtocolScopeProxy*) self, "", NULL, NULL, NULL);
		}
	}
	self->priv->_reconnection_id = (guint) 0;
	result = FALSE;
	return result;
}


static gboolean
___lambda44__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda44_ ((UnityProtocolScopeProxyRemote*) self);
	return result;
}


static void
unity_protocol_scope_proxy_remote_start_reconnection_timeout (UnityProtocolScopeProxyRemote* self)
{
	guint _tmp0_;
	gboolean _tmp2_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_reconnection_id;
	if (_tmp0_ != ((guint) 0)) {
		guint _tmp1_;
		_tmp1_ = self->priv->_reconnection_id;
		g_source_remove (_tmp1_);
	}
	_tmp2_ = self->priv->_auto_reconnect;
	if (!_tmp2_) {
		return;
	}
	self->priv->_reconnection_id = g_timeout_add_seconds_full (G_PRIORITY_DEFAULT, (guint) 2, ___lambda44__gsource_func, g_object_ref (self), g_object_unref);
}


static void
unity_protocol_scope_proxy_remote_check_proxy (UnityProtocolScopeProxyRemote* self,
                                               GError** error)
{
	UnityProtocolScopeService* _tmp0_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_service;
	if (_tmp0_ == NULL) {
		GError* _tmp1_;
		_tmp1_ = g_error_new_literal (G_DBUS_ERROR, G_DBUS_ERROR_SERVICE_UNKNOWN, "Unable to connect to service");
		_inner_error_ = _tmp1_;
		g_propagate_error (error, _inner_error_);
		return;
	}
}


static void
unity_protocol_scope_proxy_remote_real_activate_data_free (gpointer _data)
{
	UnityProtocolScopeProxyRemoteActivateData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_hash_table_unref0 (_data_->hints);
	_g_object_unref0 (_data_->cancellable);
	unity_protocol_activation_reply_raw_destroy (&_data_->result);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityProtocolScopeProxyRemoteActivateData, _data_);
}


static void
unity_protocol_scope_proxy_remote_real_activate_async_ready_wrapper (GObject *source_object,
                                                                     GAsyncResult *res,
                                                                     void *user_data)
{
	UnityProtocolScopeProxyRemoteActivateData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static gpointer
_g_hash_table_ref0 (gpointer self)
{
	return self ? g_hash_table_ref (self) : NULL;
}


static void
unity_protocol_scope_proxy_remote_real_activate (UnityProtocolScopeProxy* base,
                                                 const gchar* channel_id,
                                                 GVariant** result_arr,
                                                 int result_arr_length1,
                                                 UnityProtocolActionType action_type,
                                                 GHashTable* hints,
                                                 GCancellable* cancellable,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_)
{
	UnityProtocolScopeProxyRemote * self;
	UnityProtocolScopeProxyRemoteActivateData* _data_;
	UnityProtocolScopeProxyRemote* _tmp0_;
	gchar* _tmp1_;
	GHashTable* _tmp2_;
	GCancellable* _tmp3_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_data_ = g_slice_new0 (UnityProtocolScopeProxyRemoteActivateData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_protocol_scope_proxy_remote_real_activate_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_proxy_remote_real_activate_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_data_->result_arr = result_arr;
	_data_->result_arr_length1 = result_arr_length1;
	_data_->action_type = action_type;
	_tmp2_ = _g_hash_table_ref0 (hints);
	_g_hash_table_unref0 (_data_->hints);
	_data_->hints = _tmp2_;
	_tmp3_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp3_;
	unity_protocol_scope_proxy_remote_real_activate_co (_data_);
}


static void
unity_protocol_scope_proxy_remote_real_activate_finish (UnityProtocolScopeProxy* base,
                                                        GAsyncResult* _res_,
                                                        UnityProtocolActivationReplyRaw* result,
                                                        GError** error)
{
	UnityProtocolScopeProxyRemoteActivateData* _data_;
	UnityProtocolActivationReplyRaw _tmp0_ = {0};
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
	unity_protocol_activation_reply_raw_copy (&_data_->result, &_tmp0_);
	*result = _tmp0_;
}


static void
unity_protocol_scope_proxy_remote_activate_ready (GObject* source_object,
                                                  GAsyncResult* _res_,
                                                  gpointer _user_data_)
{
	UnityProtocolScopeProxyRemoteActivateData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_protocol_scope_proxy_remote_real_activate_co (_data_);
}


static gboolean
unity_protocol_scope_proxy_remote_real_activate_co (UnityProtocolScopeProxyRemoteActivateData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	unity_protocol_scope_proxy_remote_check_proxy (_data_->self, &_data_->_inner_error_);
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp0_ = _data_->self->priv->_service;
	memset (&_data_->_tmp1_, 0, sizeof (UnityProtocolActivationReplyRaw));
	_data_->_state_ = 1;
	unity_protocol_scope_service_activate (_data_->_tmp0_, _data_->channel_id, _data_->result_arr, _data_->result_arr_length1, (guint) _data_->action_type, _data_->hints, _data_->cancellable, unity_protocol_scope_proxy_remote_activate_ready, _data_);
	return FALSE;
	_state_1:
	unity_protocol_scope_service_activate_finish (_data_->_tmp0_, _data_->_res_, &_data_->_tmp1_, &_data_->_inner_error_);
	_data_->raw = _data_->_tmp1_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->result = _data_->raw;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_protocol_scope_proxy_remote_real_search_data_free (gpointer _data)
{
	UnityProtocolScopeProxyRemoteSearchData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_free0 (_data_->search_string);
	_g_hash_table_unref0 (_data_->hints);
	_g_object_unref0 (_data_->cancellable);
	_g_hash_table_unref0 (_data_->result);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityProtocolScopeProxyRemoteSearchData, _data_);
}


static void
unity_protocol_scope_proxy_remote_real_search_async_ready_wrapper (GObject *source_object,
                                                                   GAsyncResult *res,
                                                                   void *user_data)
{
	UnityProtocolScopeProxyRemoteSearchData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_protocol_scope_proxy_remote_real_search (UnityProtocolScopeProxy* base,
                                               const gchar* channel_id,
                                               const gchar* search_string,
                                               GHashTable* hints,
                                               GCancellable* cancellable,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_)
{
	UnityProtocolScopeProxyRemote * self;
	UnityProtocolScopeProxyRemoteSearchData* _data_;
	UnityProtocolScopeProxyRemote* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	GHashTable* _tmp3_;
	GCancellable* _tmp4_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_data_ = g_slice_new0 (UnityProtocolScopeProxyRemoteSearchData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_protocol_scope_proxy_remote_real_search_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_proxy_remote_real_search_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_tmp2_ = g_strdup (search_string);
	_g_free0 (_data_->search_string);
	_data_->search_string = _tmp2_;
	_tmp3_ = _g_hash_table_ref0 (hints);
	_g_hash_table_unref0 (_data_->hints);
	_data_->hints = _tmp3_;
	_tmp4_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp4_;
	unity_protocol_scope_proxy_remote_real_search_co (_data_);
}


static GHashTable*
unity_protocol_scope_proxy_remote_real_search_finish (UnityProtocolScopeProxy* base,
                                                      GAsyncResult* _res_,
                                                      GError** error)
{
	GHashTable* result;
	UnityProtocolScopeProxyRemoteSearchData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static void
unity_protocol_scope_proxy_remote_search_ready (GObject* source_object,
                                                GAsyncResult* _res_,
                                                gpointer _user_data_)
{
	UnityProtocolScopeProxyRemoteSearchData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_protocol_scope_proxy_remote_real_search_co (_data_);
}


static gboolean
unity_protocol_scope_proxy_remote_real_search_co (UnityProtocolScopeProxyRemoteSearchData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	unity_protocol_scope_proxy_remote_check_proxy (_data_->self, &_data_->_inner_error_);
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp0_ = _data_->self->priv->_service;
	_data_->_state_ = 1;
	unity_protocol_scope_service_search (_data_->_tmp0_, _data_->channel_id, _data_->search_string, _data_->hints, _data_->cancellable, unity_protocol_scope_proxy_remote_search_ready, _data_);
	return FALSE;
	_state_1:
	_data_->_tmp1_ = unity_protocol_scope_service_search_finish (_data_->_tmp0_, _data_->_res_, &_data_->_inner_error_);
	_data_->ht = _data_->_tmp1_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->result = _data_->ht;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_protocol_scope_proxy_remote_real_open_channel_data_free (gpointer _data)
{
	UnityProtocolScopeProxyRemoteOpenChannelData* _data_;
	_data_ = _data;
	_g_object_unref0 (_data_->cancellable);
	_g_free0 (_data_->result);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityProtocolScopeProxyRemoteOpenChannelData, _data_);
}


static void
unity_protocol_scope_proxy_remote_real_open_channel_async_ready_wrapper (GObject *source_object,
                                                                         GAsyncResult *res,
                                                                         void *user_data)
{
	UnityProtocolScopeProxyRemoteOpenChannelData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_protocol_scope_proxy_remote_real_open_channel (UnityProtocolScopeProxy* base,
                                                     UnityProtocolChannelType channel_type,
                                                     UnityProtocolChannelFlags channel_flags,
                                                     GCancellable* cancellable,
                                                     GAsyncReadyCallback _callback_,
                                                     gpointer _user_data_)
{
	UnityProtocolScopeProxyRemote * self;
	UnityProtocolScopeProxyRemoteOpenChannelData* _data_;
	UnityProtocolScopeProxyRemote* _tmp0_;
	GCancellable* _tmp1_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_data_ = g_slice_new0 (UnityProtocolScopeProxyRemoteOpenChannelData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_protocol_scope_proxy_remote_real_open_channel_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_proxy_remote_real_open_channel_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_data_->channel_type = channel_type;
	_data_->channel_flags = channel_flags;
	_tmp1_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp1_;
	unity_protocol_scope_proxy_remote_real_open_channel_co (_data_);
}


static gchar*
unity_protocol_scope_proxy_remote_real_open_channel_finish (UnityProtocolScopeProxy* base,
                                                            GAsyncResult* _res_,
                                                            DeeSerializableModel* * results_model,
                                                            GError** error)
{
	gchar* result;
	UnityProtocolScopeProxyRemoteOpenChannelData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	if (results_model) {
		*results_model = _data_->results_model;
	} else {
		_g_object_unref0 (_data_->results_model);
	}
	_data_->results_model = NULL;
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static void
_g_variant_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_variant_unref (var), NULL));
}


static void
unity_protocol_scope_proxy_remote_open_channel_ready (GObject* source_object,
                                                      GAsyncResult* _res_,
                                                      gpointer _user_data_)
{
	UnityProtocolScopeProxyRemoteOpenChannelData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_protocol_scope_proxy_remote_real_open_channel_co (_data_);
}


static gboolean
unity_protocol_scope_proxy_remote_real_open_channel_co (UnityProtocolScopeProxyRemoteOpenChannelData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	unity_protocol_scope_proxy_remote_check_proxy (_data_->self, &_data_->_inner_error_);
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp0_ = g_str_hash;
	_data_->_tmp1_ = g_str_equal;
	_data_->_tmp2_ = g_hash_table_new_full (_data_->_tmp0_, _data_->_tmp1_, _g_free0_, _g_variant_unref0_);
	_data_->hints = _data_->_tmp2_;
	_data_->private_channel = (_data_->channel_flags & UNITY_PROTOCOL_CHANNEL_FLAGS_PRIVATE) == UNITY_PROTOCOL_CHANNEL_FLAGS_PRIVATE;
	_data_->diff_model = (_data_->channel_flags & UNITY_PROTOCOL_CHANNEL_FLAGS_DIFF_CHANGES) == UNITY_PROTOCOL_CHANNEL_FLAGS_DIFF_CHANGES;
	_data_->_tmp3_ = _data_->private_channel;
	if (_data_->_tmp3_) {
		_data_->_tmp4_ = _data_->hints;
		_data_->_tmp5_ = g_strdup (UNITY_PROTOCOL_CHANNEL_PRIVATE_HINT);
		_data_->_tmp6_ = g_variant_new_boolean (TRUE);
		g_variant_ref_sink (_data_->_tmp6_);
		g_hash_table_insert (_data_->_tmp4_, _data_->_tmp5_, _data_->_tmp6_);
	}
	_data_->_tmp7_ = _data_->diff_model;
	if (_data_->_tmp7_) {
		_data_->_tmp8_ = _data_->hints;
		_data_->_tmp9_ = g_strdup (UNITY_PROTOCOL_CHANNEL_DIFF_MODEL_HINT);
		_data_->_tmp10_ = g_variant_new_boolean (TRUE);
		g_variant_ref_sink (_data_->_tmp10_);
		g_hash_table_insert (_data_->_tmp8_, _data_->_tmp9_, _data_->_tmp10_);
	}
	_data_->_tmp11_ = _data_->self->priv->_service;
	_data_->_tmp12_ = _data_->hints;
	_data_->_tmp13_ = NULL;
	_data_->_state_ = 1;
	unity_protocol_scope_service_open_channel (_data_->_tmp11_, (guint) _data_->channel_type, _data_->_tmp12_, _data_->cancellable, NULL, unity_protocol_scope_proxy_remote_open_channel_ready, _data_);
	return FALSE;
	_state_1:
	_data_->_tmp14_ = unity_protocol_scope_service_open_channel_finish (_data_->_tmp11_, _data_->_res_, &_data_->_tmp13_, &_data_->_inner_error_);
	_g_hash_table_unref0 (_data_->out_hints);
	_data_->out_hints = _data_->_tmp13_;
	_data_->channel_id = _data_->_tmp14_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		_g_hash_table_unref0 (_data_->out_hints);
		_g_hash_table_unref0 (_data_->hints);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp16_ = _data_->private_channel;
	if (_data_->_tmp16_) {
		_data_->_tmp17_ = _data_->out_hints;
		_data_->_tmp18_ = g_hash_table_lookup (_data_->_tmp17_, UNITY_PROTOCOL_CHANNEL_SWARM_NAME_HINT);
		_data_->_tmp19_ = g_variant_get_string ((GVariant*) _data_->_tmp18_, NULL);
		_data_->_tmp20_ = dee_client_new (_data_->_tmp19_);
		_g_object_unref0 (_data_->_tmp15_);
		_data_->_tmp15_ = (DeePeer*) _data_->_tmp20_;
	} else {
		_data_->_tmp21_ = _data_->out_hints;
		_data_->_tmp22_ = g_hash_table_lookup (_data_->_tmp21_, UNITY_PROTOCOL_CHANNEL_SWARM_NAME_HINT);
		_data_->_tmp23_ = g_variant_get_string ((GVariant*) _data_->_tmp22_, NULL);
		_data_->_tmp24_ = dee_peer_new (_data_->_tmp23_);
		_g_object_unref0 (_data_->_tmp15_);
		_data_->_tmp15_ = _data_->_tmp24_;
	}
	_data_->_tmp25_ = _g_object_ref0 (_data_->_tmp15_);
	_data_->peer = _data_->_tmp25_;
	_data_->_tmp26_ = _data_->peer;
	_data_->_tmp27_ = _g_object_ref0 (_data_->_tmp26_);
	_data_->_tmp28_ = (DeeSharedModel*) dee_shared_model_new_for_peer (_data_->_tmp27_);
	_data_->model = _data_->_tmp28_;
	_data_->_tmp29_ = _data_->model;
	_data_->_tmp30_ = _g_object_ref0 ((DeeSerializableModel*) _data_->_tmp29_);
	_g_object_unref0 (_data_->results_model);
	_data_->results_model = _data_->_tmp30_;
	_data_->result = _data_->channel_id;
	_g_object_unref0 (_data_->model);
	_g_object_unref0 (_data_->peer);
	_g_object_unref0 (_data_->_tmp15_);
	_g_hash_table_unref0 (_data_->out_hints);
	_g_hash_table_unref0 (_data_->hints);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_protocol_scope_proxy_remote_real_close_channel_data_free (gpointer _data)
{
	UnityProtocolScopeProxyRemoteCloseChannelData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_object_unref0 (_data_->cancellable);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityProtocolScopeProxyRemoteCloseChannelData, _data_);
}


static void
unity_protocol_scope_proxy_remote_real_close_channel_async_ready_wrapper (GObject *source_object,
                                                                          GAsyncResult *res,
                                                                          void *user_data)
{
	UnityProtocolScopeProxyRemoteCloseChannelData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_protocol_scope_proxy_remote_real_close_channel (UnityProtocolScopeProxy* base,
                                                      const gchar* channel_id,
                                                      GCancellable* cancellable,
                                                      GAsyncReadyCallback _callback_,
                                                      gpointer _user_data_)
{
	UnityProtocolScopeProxyRemote * self;
	UnityProtocolScopeProxyRemoteCloseChannelData* _data_;
	UnityProtocolScopeProxyRemote* _tmp0_;
	gchar* _tmp1_;
	GCancellable* _tmp2_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_data_ = g_slice_new0 (UnityProtocolScopeProxyRemoteCloseChannelData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_protocol_scope_proxy_remote_real_close_channel_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_proxy_remote_real_close_channel_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_tmp2_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp2_;
	unity_protocol_scope_proxy_remote_real_close_channel_co (_data_);
}


static void
unity_protocol_scope_proxy_remote_real_close_channel_finish (UnityProtocolScopeProxy* base,
                                                             GAsyncResult* _res_,
                                                             GError** error)
{
	UnityProtocolScopeProxyRemoteCloseChannelData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
}


static void
unity_protocol_scope_proxy_remote_close_channel_ready (GObject* source_object,
                                                       GAsyncResult* _res_,
                                                       gpointer _user_data_)
{
	UnityProtocolScopeProxyRemoteCloseChannelData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_protocol_scope_proxy_remote_real_close_channel_co (_data_);
}


static gboolean
unity_protocol_scope_proxy_remote_real_close_channel_co (UnityProtocolScopeProxyRemoteCloseChannelData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	unity_protocol_scope_proxy_remote_check_proxy (_data_->self, &_data_->_inner_error_);
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp0_ = g_str_hash;
	_data_->_tmp1_ = g_str_equal;
	_data_->_tmp2_ = g_hash_table_new_full (_data_->_tmp0_, _data_->_tmp1_, _g_free0_, _g_variant_unref0_);
	_data_->hints = _data_->_tmp2_;
	_data_->_tmp3_ = _data_->self->priv->_service;
	_data_->_tmp4_ = _data_->hints;
	_data_->_state_ = 1;
	unity_protocol_scope_service_close_channel (_data_->_tmp3_, _data_->channel_id, _data_->_tmp4_, _data_->cancellable, unity_protocol_scope_proxy_remote_close_channel_ready, _data_);
	return FALSE;
	_state_1:
	unity_protocol_scope_service_close_channel_finish (_data_->_tmp3_, _data_->_res_, &_data_->_inner_error_);
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		_g_hash_table_unref0 (_data_->hints);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_g_hash_table_unref0 (_data_->hints);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_protocol_scope_proxy_remote_set_view_type_data_free (gpointer _data)
{
	UnityProtocolScopeProxyRemoteSetViewTypeData* _data_;
	_data_ = _data;
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityProtocolScopeProxyRemoteSetViewTypeData, _data_);
}


static void
unity_protocol_scope_proxy_remote_set_view_type_async_ready_wrapper (GObject *source_object,
                                                                     GAsyncResult *res,
                                                                     void *user_data)
{
	UnityProtocolScopeProxyRemoteSetViewTypeData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


void
unity_protocol_scope_proxy_remote_set_view_type (UnityProtocolScopeProxyRemote* self,
                                                 UnityProtocolViewType view_type,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_)
{
	UnityProtocolScopeProxyRemoteSetViewTypeData* _data_;
	UnityProtocolScopeProxyRemote* _tmp0_;
	_data_ = g_slice_new0 (UnityProtocolScopeProxyRemoteSetViewTypeData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, unity_protocol_scope_proxy_remote_set_view_type_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_proxy_remote_set_view_type_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_data_->view_type = view_type;
	unity_protocol_scope_proxy_remote_set_view_type_co (_data_);
}


void
unity_protocol_scope_proxy_remote_set_view_type_finish (UnityProtocolScopeProxyRemote* self,
                                                        GAsyncResult* _res_)
{
	UnityProtocolScopeProxyRemoteSetViewTypeData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}


static void
unity_protocol_scope_proxy_remote_set_view_type_ready (GObject* source_object,
                                                       GAsyncResult* _res_,
                                                       gpointer _user_data_)
{
	UnityProtocolScopeProxyRemoteSetViewTypeData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_protocol_scope_proxy_remote_set_view_type_co (_data_);
}


static const gchar*
string_to_string (const gchar* self)
{
	const gchar* result = NULL;
	g_return_val_if_fail (self != NULL, NULL);
	result = self;
	return result;
}


static gboolean
unity_protocol_scope_proxy_remote_set_view_type_co (UnityProtocolScopeProxyRemoteSetViewTypeData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->self->priv->_view_type = _data_->view_type;
	{
		unity_protocol_scope_proxy_remote_check_proxy (_data_->self, &_data_->_inner_error_);
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			goto __catch7_g_error;
		}
		_data_->_tmp0_ = _data_->self->priv->_service;
		_data_->_state_ = 1;
		unity_protocol_scope_service_set_view_type (_data_->_tmp0_, (guint) _data_->view_type, unity_protocol_scope_proxy_remote_set_view_type_ready, _data_);
		return FALSE;
		_state_1:
		unity_protocol_scope_service_set_view_type_finish (_data_->_tmp0_, _data_->_res_, &_data_->_inner_error_);
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			goto __catch7_g_error;
		}
	}
	goto __finally7;
	__catch7_g_error:
	{
		_data_->e = _data_->_inner_error_;
		_data_->_inner_error_ = NULL;
		_data_->_tmp1_ = _data_->self->priv->_dbus_path;
		_data_->_tmp2_ = string_to_string (_data_->_tmp1_);
		_data_->_tmp3_ = _data_->e;
		_data_->_tmp4_ = _data_->_tmp3_->message;
		_data_->_tmp5_ = string_to_string (_data_->_tmp4_);
		_data_->_tmp6_ = g_strconcat ("Unable to set_active (", _data_->_tmp2_, "): ", _data_->_tmp5_, NULL);
		_data_->_tmp7_ = _data_->_tmp6_;
		g_warning ("unity-scope-proxy-remote.vala:399: %s", _data_->_tmp7_);
		_g_free0 (_data_->_tmp7_);
		_g_error_free0 (_data_->e);
	}
	__finally7:
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
		g_clear_error (&_data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_protocol_scope_proxy_remote_real_set_active_sources_data_free (gpointer _data)
{
	UnityProtocolScopeProxyRemoteSetActiveSourcesData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_object_unref0 (_data_->cancellable);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityProtocolScopeProxyRemoteSetActiveSourcesData, _data_);
}


static void
unity_protocol_scope_proxy_remote_real_set_active_sources_async_ready_wrapper (GObject *source_object,
                                                                               GAsyncResult *res,
                                                                               void *user_data)
{
	UnityProtocolScopeProxyRemoteSetActiveSourcesData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_protocol_scope_proxy_remote_real_set_active_sources (UnityProtocolScopeProxy* base,
                                                           const gchar* channel_id,
                                                           gchar** sources,
                                                           int sources_length1,
                                                           GCancellable* cancellable,
                                                           GAsyncReadyCallback _callback_,
                                                           gpointer _user_data_)
{
	UnityProtocolScopeProxyRemote * self;
	UnityProtocolScopeProxyRemoteSetActiveSourcesData* _data_;
	UnityProtocolScopeProxyRemote* _tmp0_;
	gchar* _tmp1_;
	GCancellable* _tmp2_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_data_ = g_slice_new0 (UnityProtocolScopeProxyRemoteSetActiveSourcesData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_protocol_scope_proxy_remote_real_set_active_sources_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_proxy_remote_real_set_active_sources_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_data_->sources = sources;
	_data_->sources_length1 = sources_length1;
	_tmp2_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp2_;
	unity_protocol_scope_proxy_remote_real_set_active_sources_co (_data_);
}


static void
unity_protocol_scope_proxy_remote_real_set_active_sources_finish (UnityProtocolScopeProxy* base,
                                                                  GAsyncResult* _res_,
                                                                  GError** error)
{
	UnityProtocolScopeProxyRemoteSetActiveSourcesData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
}


static gboolean
unity_protocol_scope_proxy_remote_real_set_active_sources_co (UnityProtocolScopeProxyRemoteSetActiveSourcesData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	unity_protocol_scope_proxy_remote_check_proxy (_data_->self, &_data_->_inner_error_);
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	if (_data_->cancellable != NULL) {
		g_cancellable_set_error_if_cancelled (_data_->cancellable, &_data_->_inner_error_);
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_protocol_scope_proxy_remote_real_push_results_data_free (gpointer _data)
{
	UnityProtocolScopeProxyRemotePushResultsData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_free0 (_data_->search_string);
	_g_free0 (_data_->source_scope_id);
	_g_object_unref0 (_data_->model);
	_g_object_unref0 (_data_->cancellable);
	_g_hash_table_unref0 (_data_->result);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityProtocolScopeProxyRemotePushResultsData, _data_);
}


static void
unity_protocol_scope_proxy_remote_real_push_results_async_ready_wrapper (GObject *source_object,
                                                                         GAsyncResult *res,
                                                                         void *user_data)
{
	UnityProtocolScopeProxyRemotePushResultsData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_protocol_scope_proxy_remote_real_push_results (UnityProtocolScopeProxy* base,
                                                     const gchar* channel_id,
                                                     const gchar* search_string,
                                                     const gchar* source_scope_id,
                                                     DeeSerializableModel* model,
                                                     gchar** categories,
                                                     int categories_length1,
                                                     GCancellable* cancellable,
                                                     GAsyncReadyCallback _callback_,
                                                     gpointer _user_data_)
{
	UnityProtocolScopeProxyRemote * self;
	UnityProtocolScopeProxyRemotePushResultsData* _data_;
	UnityProtocolScopeProxyRemote* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	DeeSerializableModel* _tmp4_;
	GCancellable* _tmp5_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_data_ = g_slice_new0 (UnityProtocolScopeProxyRemotePushResultsData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_protocol_scope_proxy_remote_real_push_results_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_protocol_scope_proxy_remote_real_push_results_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_tmp2_ = g_strdup (search_string);
	_g_free0 (_data_->search_string);
	_data_->search_string = _tmp2_;
	_tmp3_ = g_strdup (source_scope_id);
	_g_free0 (_data_->source_scope_id);
	_data_->source_scope_id = _tmp3_;
	_tmp4_ = _g_object_ref0 (model);
	_g_object_unref0 (_data_->model);
	_data_->model = _tmp4_;
	_data_->categories = categories;
	_data_->categories_length1 = categories_length1;
	_tmp5_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp5_;
	unity_protocol_scope_proxy_remote_real_push_results_co (_data_);
}


static GHashTable*
unity_protocol_scope_proxy_remote_real_push_results_finish (UnityProtocolScopeProxy* base,
                                                            GAsyncResult* _res_,
                                                            GError** error)
{
	GHashTable* result;
	UnityProtocolScopeProxyRemotePushResultsData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static void
unity_protocol_scope_proxy_remote_push_results_ready (GObject* source_object,
                                                      GAsyncResult* _res_,
                                                      gpointer _user_data_)
{
	UnityProtocolScopeProxyRemotePushResultsData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_protocol_scope_proxy_remote_real_push_results_co (_data_);
}


static gboolean
unity_protocol_scope_proxy_remote_real_push_results_co (UnityProtocolScopeProxyRemotePushResultsData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	unity_protocol_scope_proxy_remote_check_proxy (_data_->self, &_data_->_inner_error_);
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp1_ = _data_->self->priv->_service;
	_data_->_tmp2_ = dee_serializable_serialize ((DeeSerializable*) _data_->model);
	_data_->_tmp3_ = _data_->_tmp2_;
	_data_->_state_ = 1;
	unity_protocol_scope_service_push_results (_data_->_tmp1_, _data_->channel_id, _data_->search_string, _data_->source_scope_id, _data_->_tmp3_, _data_->categories, _data_->categories_length1, _data_->cancellable, unity_protocol_scope_proxy_remote_push_results_ready, _data_);
	return FALSE;
	_state_1:
	_data_->_tmp4_ = unity_protocol_scope_service_push_results_finish (_data_->_tmp1_, _data_->_res_, &_data_->_inner_error_);
	_data_->_tmp5_ = _data_->_tmp4_;
	_g_variant_unref0 (_data_->_tmp3_);
	_data_->_tmp0_ = _data_->_tmp5_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp6_ = _data_->_tmp0_;
	_data_->_tmp0_ = NULL;
	_data_->result = _data_->_tmp6_;
	_g_hash_table_unref0 (_data_->_tmp0_);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


const gchar*
unity_protocol_scope_proxy_remote_get_dbus_name (UnityProtocolScopeProxyRemote* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_dbus_name;
	result = _tmp0_;
	return result;
}


static void
unity_protocol_scope_proxy_remote_set_dbus_name (UnityProtocolScopeProxyRemote* self,
                                                 const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_protocol_scope_proxy_remote_get_dbus_name (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_dbus_name);
		self->priv->_dbus_name = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_DBUS_NAME_PROPERTY]);
	}
}


const gchar*
unity_protocol_scope_proxy_remote_get_dbus_path (UnityProtocolScopeProxyRemote* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_dbus_path;
	result = _tmp0_;
	return result;
}


static void
unity_protocol_scope_proxy_remote_set_dbus_path (UnityProtocolScopeProxyRemote* self,
                                                 const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_protocol_scope_proxy_remote_get_dbus_path (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_dbus_path);
		self->priv->_dbus_path = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_DBUS_PATH_PROPERTY]);
	}
}


gboolean
unity_protocol_scope_proxy_remote_get_auto_reconnect (UnityProtocolScopeProxyRemote* self)
{
	gboolean result;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_auto_reconnect;
	result = _tmp0_;
	return result;
}


void
unity_protocol_scope_proxy_remote_set_auto_reconnect (UnityProtocolScopeProxyRemote* self,
                                                      gboolean value)
{
	g_return_if_fail (self != NULL);
	if (unity_protocol_scope_proxy_remote_get_auto_reconnect (self) != value) {
		self->priv->_auto_reconnect = value;
		g_object_notify_by_pspec ((GObject *) self, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_AUTO_RECONNECT_PROPERTY]);
	}
}


static gboolean
unity_protocol_scope_proxy_remote_real_get_visible (UnityProtocolScopeProxy* base)
{
	gboolean result;
	UnityProtocolScopeProxyRemote* self;
	gboolean _tmp0_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_tmp0_ = self->priv->_visible;
	result = _tmp0_;
	return result;
}


static gboolean
unity_protocol_scope_proxy_remote_real_get_is_master (UnityProtocolScopeProxy* base)
{
	gboolean result;
	UnityProtocolScopeProxyRemote* self;
	gboolean _tmp0_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_tmp0_ = self->priv->_is_master;
	result = _tmp0_;
	return result;
}


static gboolean
unity_protocol_scope_proxy_remote_real_get_connected (UnityProtocolScopeProxy* base)
{
	gboolean result;
	UnityProtocolScopeProxyRemote* self;
	gboolean _tmp0_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_tmp0_ = self->priv->_is_connected;
	result = _tmp0_;
	return result;
}


static GVariant*
unity_protocol_scope_proxy_remote_real_get_sources (UnityProtocolScopeProxy* base)
{
	GVariant* result;
	UnityProtocolScopeProxyRemote* self;
	GVariant* _tmp0_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_tmp0_ = self->priv->_sources;
	result = _tmp0_;
	return result;
}


static const gchar*
unity_protocol_scope_proxy_remote_real_get_search_hint (UnityProtocolScopeProxy* base)
{
	const gchar* result;
	UnityProtocolScopeProxyRemote* self;
	const gchar* _tmp0_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_tmp0_ = self->priv->_search_hint;
	result = _tmp0_;
	return result;
}


static DeeSerializableModel*
unity_protocol_scope_proxy_remote_real_get_filters_model (UnityProtocolScopeProxy* base)
{
	DeeSerializableModel* result;
	UnityProtocolScopeProxyRemote* self;
	DeeSerializableModel* _tmp0_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_tmp0_ = self->priv->_filters_model;
	result = _tmp0_;
	return result;
}


static DeeSerializableModel*
unity_protocol_scope_proxy_remote_real_get_categories_model (UnityProtocolScopeProxy* base)
{
	DeeSerializableModel* result;
	UnityProtocolScopeProxyRemote* self;
	DeeSerializableModel* _tmp0_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_tmp0_ = self->priv->_categories_model;
	result = _tmp0_;
	return result;
}


static GHashTable*
unity_protocol_scope_proxy_remote_real_get_metadata (UnityProtocolScopeProxy* base)
{
	GHashTable* result;
	UnityProtocolScopeProxyRemote* self;
	GHashTable* _tmp0_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_tmp0_ = self->priv->_metadata;
	result = _tmp0_;
	return result;
}


static GHashTable*
unity_protocol_scope_proxy_remote_real_get_optional_metadata (UnityProtocolScopeProxy* base)
{
	GHashTable* result;
	UnityProtocolScopeProxyRemote* self;
	GHashTable* _tmp0_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_tmp0_ = self->priv->_optional_metadata;
	result = _tmp0_;
	return result;
}


static UnityProtocolViewType
unity_protocol_scope_proxy_remote_real_get_view_type (UnityProtocolScopeProxy* base)
{
	UnityProtocolViewType result;
	UnityProtocolScopeProxyRemote* self;
	UnityProtocolViewType _tmp0_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_tmp0_ = self->priv->_view_type;
	result = _tmp0_;
	return result;
}


static void
unity_protocol_scope_proxy_remote_real_set_view_type (UnityProtocolScopeProxy* base,
                                                      UnityProtocolViewType value)
{
	UnityProtocolScopeProxyRemote* self;
	UnityProtocolViewType _tmp0_;
	self = (UnityProtocolScopeProxyRemote*) base;
	_tmp0_ = self->priv->_view_type;
	if (_tmp0_ != value) {
		unity_protocol_scope_proxy_remote_set_view_type (self, value, NULL, NULL);
	}
	g_object_notify_by_pspec ((GObject *) self, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_VIEW_TYPE_PROPERTY]);
}


static GObject *
unity_protocol_scope_proxy_remote_constructor (GType type,
                                               guint n_construct_properties,
                                               GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	UnityProtocolScopeProxyRemote * self;
	GError * _inner_error_ = NULL;
	parent_class = G_OBJECT_CLASS (unity_protocol_scope_proxy_remote_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE, UnityProtocolScopeProxyRemote);
	{
		GDBusConnection* _tmp0_ = NULL;
		GDBusConnection* _tmp1_;
		GDBusConnection* _tmp2_;
		GDBusConnection* _tmp3_;
		const gchar* _tmp4_;
		UnityProtocolScopeProxyRemoteNameWatcher* _tmp5_;
		_tmp1_ = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &_inner_error_);
		_tmp0_ = _tmp1_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch8_g_error;
		}
		_tmp2_ = _tmp0_;
		_tmp0_ = NULL;
		_g_object_unref0 (self->priv->_bus);
		self->priv->_bus = _tmp2_;
		_tmp3_ = self->priv->_bus;
		_tmp4_ = self->priv->_dbus_name;
		_tmp5_ = unity_protocol_scope_proxy_remote_name_watcher_new (_tmp3_, _tmp4_, self, TRUE);
		_unity_protocol_scope_proxy_remote_name_watcher_unref0 (self->priv->_watcher);
		self->priv->_watcher = _tmp5_;
		_g_object_unref0 (_tmp0_);
	}
	goto __finally8;
	__catch8_g_error:
	{
		GError* e = NULL;
		GError* _tmp6_;
		const gchar* _tmp7_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp6_ = e;
		_tmp7_ = _tmp6_->message;
		g_critical ("unity-scope-proxy-remote.vala:118: Unable to connect to session bus: %" \
"s", _tmp7_);
		_g_error_free0 (e);
	}
	__finally8:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
	}
	return obj;
}


static void
__lambda42_ (UnityProtocolScopeProxyRemoteNameWatcher* self)
{
	UnityProtocolScopeProxyRemote* _tmp0_;
	_tmp0_ = self->priv->owner;
	unity_protocol_scope_proxy_remote_on_scope_appeared (_tmp0_);
}


static void
___lambda42__gbus_name_appeared_callback (GDBusConnection* connection,
                                          const gchar* name,
                                          const gchar* name_owner,
                                          gpointer self)
{
	__lambda42_ ((UnityProtocolScopeProxyRemoteNameWatcher*) self);
}


static void
__lambda43_ (UnityProtocolScopeProxyRemoteNameWatcher* self)
{
	UnityProtocolScopeProxyRemote* _tmp0_;
	_tmp0_ = self->priv->owner;
	unity_protocol_scope_proxy_remote_on_scope_vanished (_tmp0_);
}


static void
___lambda43__gbus_name_vanished_callback (GDBusConnection* connection,
                                          const gchar* name,
                                          gpointer self)
{
	__lambda43_ ((UnityProtocolScopeProxyRemoteNameWatcher*) self);
}


static UnityProtocolScopeProxyRemoteNameWatcher*
unity_protocol_scope_proxy_remote_name_watcher_construct (GType object_type,
                                                          GDBusConnection* bus,
                                                          const gchar* dbus_name,
                                                          UnityProtocolScopeProxyRemote* parent,
                                                          gboolean auto_start)
{
	UnityProtocolScopeProxyRemoteNameWatcher* self = NULL;
	GBusNameWatcherFlags _tmp0_ = 0;
	GBusNameWatcherFlags flags = 0;
	g_return_val_if_fail (bus != NULL, NULL);
	g_return_val_if_fail (dbus_name != NULL, NULL);
	g_return_val_if_fail (parent != NULL, NULL);
	self = (UnityProtocolScopeProxyRemoteNameWatcher*) g_type_create_instance (object_type);
	self->priv->owner = parent;
	if (auto_start) {
		_tmp0_ = G_BUS_NAME_WATCHER_FLAGS_AUTO_START;
	} else {
		_tmp0_ = G_BUS_NAME_WATCHER_FLAGS_NONE;
	}
	flags = _tmp0_;
	self->priv->watch_id = g_bus_watch_name_on_connection_with_closures (bus, dbus_name, flags, (GClosure*) ((___lambda42__gbus_name_appeared_callback == NULL) ? NULL : g_cclosure_new ((GCallback) ___lambda42__gbus_name_appeared_callback, unity_protocol_scope_proxy_remote_name_watcher_ref (self), (GClosureNotify) unity_protocol_scope_proxy_remote_name_watcher_unref)), (GClosure*) ((___lambda43__gbus_name_vanished_callback == NULL) ? NULL : g_cclosure_new ((GCallback) ___lambda43__gbus_name_vanished_callback, unity_protocol_scope_proxy_remote_name_watcher_ref (self), (GClosureNotify) unity_protocol_scope_proxy_remote_name_watcher_unref)));
	return self;
}


static UnityProtocolScopeProxyRemoteNameWatcher*
unity_protocol_scope_proxy_remote_name_watcher_new (GDBusConnection* bus,
                                                    const gchar* dbus_name,
                                                    UnityProtocolScopeProxyRemote* parent,
                                                    gboolean auto_start)
{
	return unity_protocol_scope_proxy_remote_name_watcher_construct (UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_TYPE_NAME_WATCHER, bus, dbus_name, parent, auto_start);
}


static void
unity_protocol_scope_proxy_remote_name_watcher_unwatch (UnityProtocolScopeProxyRemoteNameWatcher* self)
{
	guint _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->watch_id;
	if (_tmp0_ != ((guint) 0)) {
		guint _tmp1_;
		_tmp1_ = self->priv->watch_id;
		g_bus_unwatch_name (_tmp1_);
		self->priv->watch_id = (guint) 0;
	}
}


static void
unity_protocol_scope_proxy_remote_value_name_watcher_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}


static void
unity_protocol_scope_proxy_remote_value_name_watcher_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		unity_protocol_scope_proxy_remote_name_watcher_unref (value->data[0].v_pointer);
	}
}


static void
unity_protocol_scope_proxy_remote_value_name_watcher_copy_value (const GValue* src_value,
                                                                 GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = unity_protocol_scope_proxy_remote_name_watcher_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}


static gpointer
unity_protocol_scope_proxy_remote_value_name_watcher_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}


static gchar*
unity_protocol_scope_proxy_remote_value_name_watcher_collect_value (GValue* value,
                                                                    guint n_collect_values,
                                                                    GTypeCValue* collect_values,
                                                                    guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		UnityProtocolScopeProxyRemoteNameWatcher * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = unity_protocol_scope_proxy_remote_name_watcher_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}


static gchar*
unity_protocol_scope_proxy_remote_value_name_watcher_lcopy_value (const GValue* value,
                                                                  guint n_collect_values,
                                                                  GTypeCValue* collect_values,
                                                                  guint collect_flags)
{
	UnityProtocolScopeProxyRemoteNameWatcher ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = unity_protocol_scope_proxy_remote_name_watcher_ref (value->data[0].v_pointer);
	}
	return NULL;
}


static GParamSpec*
unity_protocol_scope_proxy_remote_param_spec_name_watcher (const gchar* name,
                                                           const gchar* nick,
                                                           const gchar* blurb,
                                                           GType object_type,
                                                           GParamFlags flags)
{
	UnityProtocolScopeProxyRemoteParamSpecNameWatcher* spec;
	g_return_val_if_fail (g_type_is_a (object_type, UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_TYPE_NAME_WATCHER), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}


static gpointer
unity_protocol_scope_proxy_remote_value_get_name_watcher (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_TYPE_NAME_WATCHER), NULL);
	return value->data[0].v_pointer;
}


static void
unity_protocol_scope_proxy_remote_value_set_name_watcher (GValue* value,
                                                          gpointer v_object)
{
	UnityProtocolScopeProxyRemoteNameWatcher * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_TYPE_NAME_WATCHER));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_TYPE_NAME_WATCHER));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		unity_protocol_scope_proxy_remote_name_watcher_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_scope_proxy_remote_name_watcher_unref (old);
	}
}


static void
unity_protocol_scope_proxy_remote_value_take_name_watcher (GValue* value,
                                                           gpointer v_object)
{
	UnityProtocolScopeProxyRemoteNameWatcher * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_TYPE_NAME_WATCHER));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_TYPE_NAME_WATCHER));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_protocol_scope_proxy_remote_name_watcher_unref (old);
	}
}


static void
unity_protocol_scope_proxy_remote_name_watcher_class_init (UnityProtocolScopeProxyRemoteNameWatcherClass * klass)
{
	unity_protocol_scope_proxy_remote_name_watcher_parent_class = g_type_class_peek_parent (klass);
	((UnityProtocolScopeProxyRemoteNameWatcherClass *) klass)->finalize = unity_protocol_scope_proxy_remote_name_watcher_finalize;
	g_type_class_add_private (klass, sizeof (UnityProtocolScopeProxyRemoteNameWatcherPrivate));
}


static void
unity_protocol_scope_proxy_remote_name_watcher_instance_init (UnityProtocolScopeProxyRemoteNameWatcher * self)
{
	self->priv = UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_NAME_WATCHER_GET_PRIVATE (self);
	self->ref_count = 1;
}


static void
unity_protocol_scope_proxy_remote_name_watcher_finalize (UnityProtocolScopeProxyRemoteNameWatcher * obj)
{
	UnityProtocolScopeProxyRemoteNameWatcher * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_TYPE_NAME_WATCHER, UnityProtocolScopeProxyRemoteNameWatcher);
	g_signal_handlers_destroy (self);
}


static GType
unity_protocol_scope_proxy_remote_name_watcher_get_type (void)
{
	static volatile gsize unity_protocol_scope_proxy_remote_name_watcher_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_scope_proxy_remote_name_watcher_type_id__volatile)) {
		static const GTypeValueTable g_define_type_value_table = { unity_protocol_scope_proxy_remote_value_name_watcher_init, unity_protocol_scope_proxy_remote_value_name_watcher_free_value, unity_protocol_scope_proxy_remote_value_name_watcher_copy_value, unity_protocol_scope_proxy_remote_value_name_watcher_peek_pointer, "p", unity_protocol_scope_proxy_remote_value_name_watcher_collect_value, "p", unity_protocol_scope_proxy_remote_value_name_watcher_lcopy_value };
		static const GTypeInfo g_define_type_info = { sizeof (UnityProtocolScopeProxyRemoteNameWatcherClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_protocol_scope_proxy_remote_name_watcher_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityProtocolScopeProxyRemoteNameWatcher), 0, (GInstanceInitFunc) unity_protocol_scope_proxy_remote_name_watcher_instance_init, &g_define_type_value_table };
		static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
		GType unity_protocol_scope_proxy_remote_name_watcher_type_id;
		unity_protocol_scope_proxy_remote_name_watcher_type_id = g_type_register_fundamental (g_type_fundamental_next (), "UnityProtocolScopeProxyRemoteNameWatcher", &g_define_type_info, &g_define_type_fundamental_info, 0);
		g_once_init_leave (&unity_protocol_scope_proxy_remote_name_watcher_type_id__volatile, unity_protocol_scope_proxy_remote_name_watcher_type_id);
	}
	return unity_protocol_scope_proxy_remote_name_watcher_type_id__volatile;
}


static gpointer
unity_protocol_scope_proxy_remote_name_watcher_ref (gpointer instance)
{
	UnityProtocolScopeProxyRemoteNameWatcher * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}


static void
unity_protocol_scope_proxy_remote_name_watcher_unref (gpointer instance)
{
	UnityProtocolScopeProxyRemoteNameWatcher * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_NAME_WATCHER_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}


static void
unity_protocol_scope_proxy_remote_class_init (UnityProtocolScopeProxyRemoteClass * klass)
{
	unity_protocol_scope_proxy_remote_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityProtocolScopeProxyRemotePrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_protocol_scope_proxy_remote_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_protocol_scope_proxy_remote_set_property;
	G_OBJECT_CLASS (klass)->constructor = unity_protocol_scope_proxy_remote_constructor;
	G_OBJECT_CLASS (klass)->finalize = unity_protocol_scope_proxy_remote_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_DBUS_NAME_PROPERTY, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_DBUS_NAME_PROPERTY] = g_param_spec_string ("dbus-name", "dbus-name", "dbus-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_DBUS_PATH_PROPERTY, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_DBUS_PATH_PROPERTY] = g_param_spec_string ("dbus-path", "dbus-path", "dbus-path", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_AUTO_RECONNECT_PROPERTY, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_AUTO_RECONNECT_PROPERTY] = g_param_spec_boolean ("auto-reconnect", "auto-reconnect", "auto-reconnect", TRUE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_VISIBLE_PROPERTY, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_VISIBLE_PROPERTY] = g_param_spec_boolean ("visible", "visible", "visible", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_IS_MASTER_PROPERTY, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_IS_MASTER_PROPERTY] = g_param_spec_boolean ("is-master", "is-master", "is-master", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_CONNECTED_PROPERTY, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_CONNECTED_PROPERTY] = g_param_spec_boolean ("connected", "connected", "connected", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_SOURCES_PROPERTY, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_SOURCES_PROPERTY] = g_param_spec_variant ("sources", "sources", "sources", G_VARIANT_TYPE_ANY, NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_SEARCH_HINT_PROPERTY, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_SEARCH_HINT_PROPERTY] = g_param_spec_string ("search-hint", "search-hint", "search-hint", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_FILTERS_MODEL_PROPERTY, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_FILTERS_MODEL_PROPERTY] = g_param_spec_object ("filters-model", "filters-model", "filters-model", dee_serializable_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_CATEGORIES_MODEL_PROPERTY, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_CATEGORIES_MODEL_PROPERTY] = g_param_spec_object ("categories-model", "categories-model", "categories-model", dee_serializable_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_METADATA_PROPERTY, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_METADATA_PROPERTY] = g_param_spec_boxed ("metadata", "metadata", "metadata", G_TYPE_HASH_TABLE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_OPTIONAL_METADATA_PROPERTY, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_OPTIONAL_METADATA_PROPERTY] = g_param_spec_boxed ("optional-metadata", "optional-metadata", "optional-metadata", G_TYPE_HASH_TABLE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_VIEW_TYPE_PROPERTY, unity_protocol_scope_proxy_remote_properties[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_VIEW_TYPE_PROPERTY] = g_param_spec_enum ("view-type", "view-type", "view-type", UNITY_PROTOCOL_TYPE_VIEW_TYPE, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	unity_protocol_scope_proxy_remote_signals[UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_PROXY_INITIALIZED_SIGNAL] = g_signal_new ("proxy-initialized", UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
}


static void
unity_protocol_scope_proxy_remote_unity_protocol_scope_proxy_interface_init (UnityProtocolScopeProxyIface * iface)
{
	unity_protocol_scope_proxy_remote_unity_protocol_scope_proxy_parent_iface = g_type_interface_peek_parent (iface);
	iface->activate = (void (*) (UnityProtocolScopeProxy *, const gchar*, GVariant**, int, UnityProtocolActionType, GHashTable*, GCancellable*, GAsyncReadyCallback, gpointer)) unity_protocol_scope_proxy_remote_real_activate;
	iface->activate_finish = (void (*) (UnityProtocolScopeProxy *, GAsyncResult*, UnityProtocolActivationReplyRaw*, GError**)) unity_protocol_scope_proxy_remote_real_activate_finish;
	iface->search = (void (*) (UnityProtocolScopeProxy *, const gchar*, const gchar*, GHashTable*, GCancellable*, GAsyncReadyCallback, gpointer)) unity_protocol_scope_proxy_remote_real_search;
	iface->search_finish = (GHashTable* (*) (UnityProtocolScopeProxy *, GAsyncResult*, GError**)) unity_protocol_scope_proxy_remote_real_search_finish;
	iface->open_channel = (void (*) (UnityProtocolScopeProxy *, UnityProtocolChannelType, UnityProtocolChannelFlags, GCancellable*, GAsyncReadyCallback, gpointer)) unity_protocol_scope_proxy_remote_real_open_channel;
	iface->open_channel_finish = (gchar* (*) (UnityProtocolScopeProxy *, GAsyncResult*, DeeSerializableModel* *, GError**)) unity_protocol_scope_proxy_remote_real_open_channel_finish;
	iface->close_channel = (void (*) (UnityProtocolScopeProxy *, const gchar*, GCancellable*, GAsyncReadyCallback, gpointer)) unity_protocol_scope_proxy_remote_real_close_channel;
	iface->close_channel_finish = (void (*) (UnityProtocolScopeProxy *, GAsyncResult*, GError**)) unity_protocol_scope_proxy_remote_real_close_channel_finish;
	iface->set_active_sources = (void (*) (UnityProtocolScopeProxy *, const gchar*, gchar**, int, GCancellable*, GAsyncReadyCallback, gpointer)) unity_protocol_scope_proxy_remote_real_set_active_sources;
	iface->set_active_sources_finish = (void (*) (UnityProtocolScopeProxy *, GAsyncResult*, GError**)) unity_protocol_scope_proxy_remote_real_set_active_sources_finish;
	iface->push_results = (void (*) (UnityProtocolScopeProxy *, const gchar*, const gchar*, const gchar*, DeeSerializableModel*, gchar**, int, GCancellable*, GAsyncReadyCallback, gpointer)) unity_protocol_scope_proxy_remote_real_push_results;
	iface->push_results_finish = (GHashTable* (*) (UnityProtocolScopeProxy *, GAsyncResult*, GError**)) unity_protocol_scope_proxy_remote_real_push_results_finish;
	iface->get_visible = unity_protocol_scope_proxy_remote_real_get_visible;
	iface->get_is_master = unity_protocol_scope_proxy_remote_real_get_is_master;
	iface->get_connected = unity_protocol_scope_proxy_remote_real_get_connected;
	iface->get_sources = unity_protocol_scope_proxy_remote_real_get_sources;
	iface->get_search_hint = unity_protocol_scope_proxy_remote_real_get_search_hint;
	iface->get_filters_model = unity_protocol_scope_proxy_remote_real_get_filters_model;
	iface->get_categories_model = unity_protocol_scope_proxy_remote_real_get_categories_model;
	iface->get_metadata = unity_protocol_scope_proxy_remote_real_get_metadata;
	iface->get_optional_metadata = unity_protocol_scope_proxy_remote_real_get_optional_metadata;
	iface->get_view_type = unity_protocol_scope_proxy_remote_real_get_view_type;
	iface->set_view_type = unity_protocol_scope_proxy_remote_real_set_view_type;
}


static void
unity_protocol_scope_proxy_remote_instance_init (UnityProtocolScopeProxyRemote * self)
{
	self->priv = UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_GET_PRIVATE (self);
	self->priv->_auto_reconnect = TRUE;
	self->priv->_reconnection_id = (guint) 0;
	self->priv->_last_scope_crash = (gint64) 0;
	self->priv->_scope_crashes = (guint) 0;
	self->priv->_cat_sig_id = (gulong) 0;
	self->priv->_filters_sig_id = (gulong) 0;
	self->priv->_results_invalidated_sig_id = (gulong) 0;
}


static void
unity_protocol_scope_proxy_remote_finalize (GObject * obj)
{
	UnityProtocolScopeProxyRemote * self;
	UnityProtocolScopeProxyRemoteNameWatcher* _tmp0_;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE, UnityProtocolScopeProxyRemote);
	_tmp0_ = self->priv->_watcher;
	unity_protocol_scope_proxy_remote_name_watcher_unwatch (_tmp0_);
	_g_free0 (self->priv->_dbus_name);
	_g_free0 (self->priv->_dbus_path);
	_g_variant_unref0 (self->priv->_sources);
	_g_free0 (self->priv->_search_hint);
	_g_object_unref0 (self->priv->_filters_model);
	_g_object_unref0 (self->priv->_categories_model);
	_g_hash_table_unref0 (self->priv->_metadata);
	_g_hash_table_unref0 (self->priv->_optional_metadata);
	_g_object_unref0 (self->priv->_bus);
	_g_object_unref0 (self->priv->_service);
	_unity_protocol_scope_proxy_remote_name_watcher_unref0 (self->priv->_watcher);
	G_OBJECT_CLASS (unity_protocol_scope_proxy_remote_parent_class)->finalize (obj);
}


GType
unity_protocol_scope_proxy_remote_get_type (void)
{
	static volatile gsize unity_protocol_scope_proxy_remote_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_scope_proxy_remote_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityProtocolScopeProxyRemoteClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_protocol_scope_proxy_remote_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityProtocolScopeProxyRemote), 0, (GInstanceInitFunc) unity_protocol_scope_proxy_remote_instance_init, NULL };
		static const GInterfaceInfo unity_protocol_scope_proxy_info = { (GInterfaceInitFunc) unity_protocol_scope_proxy_remote_unity_protocol_scope_proxy_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		GType unity_protocol_scope_proxy_remote_type_id;
		unity_protocol_scope_proxy_remote_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityProtocolScopeProxyRemote", &g_define_type_info, 0);
		g_type_add_interface_static (unity_protocol_scope_proxy_remote_type_id, UNITY_PROTOCOL_TYPE_SCOPE_PROXY, &unity_protocol_scope_proxy_info);
		g_once_init_leave (&unity_protocol_scope_proxy_remote_type_id__volatile, unity_protocol_scope_proxy_remote_type_id);
	}
	return unity_protocol_scope_proxy_remote_type_id__volatile;
}


static void
_vala_unity_protocol_scope_proxy_remote_get_property (GObject * object,
                                                      guint property_id,
                                                      GValue * value,
                                                      GParamSpec * pspec)
{
	UnityProtocolScopeProxyRemote * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE, UnityProtocolScopeProxyRemote);
	switch (property_id) {
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_DBUS_NAME_PROPERTY:
		g_value_set_string (value, unity_protocol_scope_proxy_remote_get_dbus_name (self));
		break;
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_DBUS_PATH_PROPERTY:
		g_value_set_string (value, unity_protocol_scope_proxy_remote_get_dbus_path (self));
		break;
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_AUTO_RECONNECT_PROPERTY:
		g_value_set_boolean (value, unity_protocol_scope_proxy_remote_get_auto_reconnect (self));
		break;
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_VISIBLE_PROPERTY:
		g_value_set_boolean (value, unity_protocol_scope_proxy_get_visible ((UnityProtocolScopeProxy*) self));
		break;
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_IS_MASTER_PROPERTY:
		g_value_set_boolean (value, unity_protocol_scope_proxy_get_is_master ((UnityProtocolScopeProxy*) self));
		break;
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_CONNECTED_PROPERTY:
		g_value_set_boolean (value, unity_protocol_scope_proxy_get_connected ((UnityProtocolScopeProxy*) self));
		break;
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_SOURCES_PROPERTY:
		g_value_set_variant (value, unity_protocol_scope_proxy_get_sources ((UnityProtocolScopeProxy*) self));
		break;
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_SEARCH_HINT_PROPERTY:
		g_value_set_string (value, unity_protocol_scope_proxy_get_search_hint ((UnityProtocolScopeProxy*) self));
		break;
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_FILTERS_MODEL_PROPERTY:
		g_value_set_object (value, unity_protocol_scope_proxy_get_filters_model ((UnityProtocolScopeProxy*) self));
		break;
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_CATEGORIES_MODEL_PROPERTY:
		g_value_set_object (value, unity_protocol_scope_proxy_get_categories_model ((UnityProtocolScopeProxy*) self));
		break;
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_METADATA_PROPERTY:
		g_value_set_boxed (value, unity_protocol_scope_proxy_get_metadata ((UnityProtocolScopeProxy*) self));
		break;
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_OPTIONAL_METADATA_PROPERTY:
		g_value_set_boxed (value, unity_protocol_scope_proxy_get_optional_metadata ((UnityProtocolScopeProxy*) self));
		break;
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_VIEW_TYPE_PROPERTY:
		g_value_set_enum (value, unity_protocol_scope_proxy_get_view_type ((UnityProtocolScopeProxy*) self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_protocol_scope_proxy_remote_set_property (GObject * object,
                                                      guint property_id,
                                                      const GValue * value,
                                                      GParamSpec * pspec)
{
	UnityProtocolScopeProxyRemote * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_PROTOCOL_TYPE_SCOPE_PROXY_REMOTE, UnityProtocolScopeProxyRemote);
	switch (property_id) {
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_DBUS_NAME_PROPERTY:
		unity_protocol_scope_proxy_remote_set_dbus_name (self, g_value_get_string (value));
		break;
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_DBUS_PATH_PROPERTY:
		unity_protocol_scope_proxy_remote_set_dbus_path (self, g_value_get_string (value));
		break;
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_AUTO_RECONNECT_PROPERTY:
		unity_protocol_scope_proxy_remote_set_auto_reconnect (self, g_value_get_boolean (value));
		break;
		case UNITY_PROTOCOL_SCOPE_PROXY_REMOTE_VIEW_TYPE_PROPERTY:
		unity_protocol_scope_proxy_set_view_type ((UnityProtocolScopeProxy*) self, g_value_get_enum (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



