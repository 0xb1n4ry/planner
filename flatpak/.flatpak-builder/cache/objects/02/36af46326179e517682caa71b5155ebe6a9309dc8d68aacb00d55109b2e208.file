/* tp-backend.c generated by valac 0.40.11, the Vala compiler
 * generated from tp-backend.vala, do not modify */

/*
 * Copyright (C) 2010 Collabora Ltd.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Travis Reitter <travis.reitter@collabora.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <folks/folks.h>
#include <telepathy-glib/telepathy-glib.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <folks/folks-telepathy.h>
#include <folks-internal.h>


#define FOLKS_BACKENDS_TP_TYPE_BACKEND (folks_backends_tp_backend_get_type ())
#define FOLKS_BACKENDS_TP_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_BACKENDS_TP_TYPE_BACKEND, FolksBackendsTpBackend))
#define FOLKS_BACKENDS_TP_BACKEND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_BACKENDS_TP_TYPE_BACKEND, FolksBackendsTpBackendClass))
#define FOLKS_BACKENDS_TP_IS_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_BACKENDS_TP_TYPE_BACKEND))
#define FOLKS_BACKENDS_TP_IS_BACKEND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_BACKENDS_TP_TYPE_BACKEND))
#define FOLKS_BACKENDS_TP_BACKEND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_BACKENDS_TP_TYPE_BACKEND, FolksBackendsTpBackendClass))

typedef struct _FolksBackendsTpBackend FolksBackendsTpBackend;
typedef struct _FolksBackendsTpBackendClass FolksBackendsTpBackendClass;
typedef struct _FolksBackendsTpBackendPrivate FolksBackendsTpBackendPrivate;
enum  {
	FOLKS_BACKENDS_TP_BACKEND_0_PROPERTY,
	FOLKS_BACKENDS_TP_BACKEND_NAME_PROPERTY,
	FOLKS_BACKENDS_TP_BACKEND_PERSONA_STORES_PROPERTY,
	FOLKS_BACKENDS_TP_BACKEND_IS_PREPARED_PROPERTY,
	FOLKS_BACKENDS_TP_BACKEND_IS_QUIESCENT_PROPERTY,
	FOLKS_BACKENDS_TP_BACKEND_NUM_PROPERTIES
};
static GParamSpec* folks_backends_tp_backend_properties[FOLKS_BACKENDS_TP_BACKEND_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _FolksBackendsTpBackendPrepareData FolksBackendsTpBackendPrepareData;
typedef struct _FolksBackendsTpBackendUnprepareData FolksBackendsTpBackendUnprepareData;

struct _FolksBackendsTpBackend {
	FolksBackend parent_instance;
	FolksBackendsTpBackendPrivate * priv;
};

struct _FolksBackendsTpBackendClass {
	FolksBackendClass parent_class;
};

struct _FolksBackendsTpBackendPrivate {
	TpAccountManager* _account_manager;
	gboolean _is_prepared;
	gboolean _prepare_pending;
	gboolean _is_quiescent;
	GeeSet* _storeids;
};

struct _FolksBackendsTpBackendPrepareData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksBackendsTpBackend* self;
	gboolean _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	TpAccountManager* _tmp3_;
	TpAccountManager* _tmp4_;
	TpAccountManager* _tmp5_;
	TpAccountManager* _tmp6_;
	GList* accounts;
	TpAccountManager* _tmp7_;
	GList* _tmp8_;
	GList* _tmp9_;
	GList* account_collection;
	GList* account_it;
	TpAccount* _tmp10_;
	TpAccount* account;
	TpAccount* _tmp11_;
	GError * _inner_error_;
};

struct _FolksBackendsTpBackendUnprepareData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksBackendsTpBackend* self;
	gboolean _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	TpAccountManager* _tmp3_;
	guint _tmp4_;
	TpAccountManager* _tmp5_;
	guint _tmp6_;
	GError * _inner_error_;
};


static gpointer folks_backends_tp_backend_parent_class = NULL;

GType folks_backends_tp_backend_get_type (void) G_GNUC_CONST;
#define FOLKS_BACKENDS_TP_BACKEND_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_BACKENDS_TP_TYPE_BACKEND, FolksBackendsTpBackendPrivate))
static void folks_backends_tp_backend_real_enable_persona_store (FolksBackend* base,
                                                          FolksPersonaStore* store);
static void _folks_backends_tp_backend_add_store (FolksBackendsTpBackend* self,
                                           FolksPersonaStore* store,
                                           gboolean notify);
static void folks_backends_tp_backend_real_disable_persona_store (FolksBackend* base,
                                                           FolksPersonaStore* store);
static void _folks_backends_tp_backend_remove_store (FolksBackendsTpBackend* self,
                                              FolksPersonaStore* store,
                                              gboolean notify);
static void folks_backends_tp_backend_real_set_persona_stores (FolksBackend* base,
                                                        GeeSet* storeids);
static void _vala_array_add1 (FolksPersonaStore** * array,
                       int* length,
                       int* size,
                       FolksPersonaStore* value);
static void _g_object_unref0_ (gpointer var);
static inline void _g_list_free__g_object_unref0_ (GList* self);
FolksBackendsTpBackend* folks_backends_tp_backend_new (void);
FolksBackendsTpBackend* folks_backends_tp_backend_construct (GType object_type);
static void folks_backends_tp_backend_real_prepare_data_free (gpointer _data);
static void folks_backends_tp_backend_real_prepare_async_ready_wrapper (GObject *source_object,
                                                                 GAsyncResult *res,
                                                                 void *user_data);
static void folks_backends_tp_backend_real_prepare (FolksBackend* base,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
static gboolean folks_backends_tp_backend_real_prepare_co (FolksBackendsTpBackendPrepareData* _data_);
static void folks_backends_tp_backend_prepare_ready (GObject* source_object,
                                              GAsyncResult* _res_,
                                              gpointer _user_data_);
static void _folks_backends_tp_backend_account_enabled_cb (FolksBackendsTpBackend* self,
                                                    TpAccount* account);
static void __folks_backends_tp_backend_account_enabled_cb_tp_account_manager_account_enabled (TpAccountManager* _sender,
                                                                                        TpAccount* account,
                                                                                        gpointer self);
static void _folks_backends_tp_backend_account_validity_changed_cb (FolksBackendsTpBackend* self,
                                                             TpAccount* account,
                                                             gboolean valid);
static void __folks_backends_tp_backend_account_validity_changed_cb_tp_account_manager_account_validity_changed (TpAccountManager* _sender,
                                                                                                          TpAccount* account,
                                                                                                          gboolean valid,
                                                                                                          gpointer self);
static void folks_backends_tp_backend_real_unprepare_data_free (gpointer _data);
static void folks_backends_tp_backend_real_unprepare_async_ready_wrapper (GObject *source_object,
                                                                   GAsyncResult *res,
                                                                   void *user_data);
static void folks_backends_tp_backend_real_unprepare (FolksBackend* base,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
static gboolean folks_backends_tp_backend_real_unprepare_co (FolksBackendsTpBackendUnprepareData* _data_);
static void _folks_backends_tp_backend_store_removed_cb (FolksBackendsTpBackend* self,
                                                  FolksPersonaStore* store);
static void __folks_backends_tp_backend_store_removed_cb_folks_persona_store_removed (FolksPersonaStore* _sender,
                                                                               gpointer self);
static void folks_backends_tp_backend_finalize (GObject * obj);
static void _vala_folks_backends_tp_backend_get_property (GObject * object,
                                                   guint property_id,
                                                   GValue * value,
                                                   GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);


/**
   * {@inheritDoc}
   */
static void
folks_backends_tp_backend_real_enable_persona_store (FolksBackend* base,
                                                     FolksPersonaStore* store)
{
	FolksBackendsTpBackend * self;
	GeeMap* _tmp0_;
	GeeMap* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
#line 57 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self = (FolksBackendsTpBackend*) base;
#line 57 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_return_if_fail (store != NULL);
#line 59 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp0_ = folks_backend_get_persona_stores ((FolksBackend*) self);
#line 59 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp1_ = _tmp0_;
#line 59 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp2_ = folks_persona_store_get_id (store);
#line 59 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp3_ = _tmp2_;
#line 59 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (gee_map_has_key (_tmp1_, _tmp3_) == FALSE) {
#line 61 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_folks_backends_tp_backend_add_store (self, store, TRUE);
#line 225 "tp-backend.c"
	}
}


/**
   * {@inheritDoc}
   */
static void
folks_backends_tp_backend_real_disable_persona_store (FolksBackend* base,
                                                      FolksPersonaStore* store)
{
	FolksBackendsTpBackend * self;
	GeeMap* _tmp0_;
	GeeMap* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
#line 68 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self = (FolksBackendsTpBackend*) base;
#line 68 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_return_if_fail (store != NULL);
#line 70 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp0_ = folks_backend_get_persona_stores ((FolksBackend*) self);
#line 70 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp1_ = _tmp0_;
#line 70 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp2_ = folks_persona_store_get_id (store);
#line 70 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp3_ = _tmp2_;
#line 70 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (gee_map_has_key (_tmp1_, _tmp3_)) {
#line 72 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_folks_backends_tp_backend_remove_store (self, store, TRUE);
#line 258 "tp-backend.c"
	}
}


/**
   * {@inheritDoc}
   */
static gpointer
_g_object_ref0 (gpointer self)
{
#line 81 "/run/build/folks/backends/telepathy/tp-backend.vala"
	return self ? g_object_ref (self) : NULL;
#line 271 "tp-backend.c"
}


static void
_vala_array_add1 (FolksPersonaStore** * array,
                  int* length,
                  int* size,
                  FolksPersonaStore* value)
{
#line 104 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if ((*length) == (*size)) {
#line 104 "/run/build/folks/backends/telepathy/tp-backend.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 104 "/run/build/folks/backends/telepathy/tp-backend.vala"
		*array = g_renew (FolksPersonaStore*, *array, (*size) + 1);
#line 287 "tp-backend.c"
	}
#line 104 "/run/build/folks/backends/telepathy/tp-backend.vala"
	(*array)[(*length)++] = value;
#line 104 "/run/build/folks/backends/telepathy/tp-backend.vala"
	(*array)[*length] = NULL;
#line 293 "tp-backend.c"
}


static void
_g_object_unref0_ (gpointer var)
{
#line 79 "/run/build/folks/backends/telepathy/tp-backend.vala"
	(var == NULL) ? NULL : (var = (g_object_unref (var), NULL));
#line 302 "tp-backend.c"
}


static inline void
_g_list_free__g_object_unref0_ (GList* self)
{
#line 79 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_list_free_full (self, (GDestroyNotify) _g_object_unref0_);
#line 311 "tp-backend.c"
}


static void
folks_backends_tp_backend_real_set_persona_stores (FolksBackend* base,
                                                   GeeSet* storeids)
{
	FolksBackendsTpBackend * self;
	GeeSet* _tmp0_;
	gboolean added_stores = FALSE;
	FolksPersonaStore** removed_stores = NULL;
	FolksPersonaStore** _tmp1_;
	gint removed_stores_length1;
	gint _removed_stores_size_;
	GList* accounts = NULL;
	TpAccountManager* _tmp2_;
	GList* _tmp3_;
	GList* _tmp4_;
	FolksPersonaStore** _tmp33_;
	gint _tmp33__length1;
	gboolean _tmp36_ = FALSE;
	gboolean _tmp37_;
#line 79 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self = (FolksBackendsTpBackend*) base;
#line 81 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp0_ = _g_object_ref0 (storeids);
#line 81 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_g_object_unref0 (self->priv->_storeids);
#line 81 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self->priv->_storeids = _tmp0_;
#line 83 "/run/build/folks/backends/telepathy/tp-backend.vala"
	added_stores = FALSE;
#line 84 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp1_ = g_new0 (FolksPersonaStore*, 0 + 1);
#line 84 "/run/build/folks/backends/telepathy/tp-backend.vala"
	removed_stores = _tmp1_;
#line 84 "/run/build/folks/backends/telepathy/tp-backend.vala"
	removed_stores_length1 = 0;
#line 84 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_removed_stores_size_ = removed_stores_length1;
#line 87 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp2_ = self->priv->_account_manager;
#line 87 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp3_ = tp_account_manager_dup_valid_accounts (_tmp2_);
#line 87 "/run/build/folks/backends/telepathy/tp-backend.vala"
	accounts = _tmp3_;
#line 88 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp4_ = accounts;
#line 360 "tp-backend.c"
	{
		GList* account_collection = NULL;
		GList* account_it = NULL;
#line 88 "/run/build/folks/backends/telepathy/tp-backend.vala"
		account_collection = _tmp4_;
#line 88 "/run/build/folks/backends/telepathy/tp-backend.vala"
		for (account_it = account_collection; account_it != NULL; account_it = account_it->next) {
#line 368 "tp-backend.c"
			TpAccount* _tmp5_;
			TpAccount* account = NULL;
#line 88 "/run/build/folks/backends/telepathy/tp-backend.vala"
			_tmp5_ = _g_object_ref0 ((TpAccount*) account_it->data);
#line 88 "/run/build/folks/backends/telepathy/tp-backend.vala"
			account = _tmp5_;
#line 375 "tp-backend.c"
			{
				gchar* id = NULL;
				TpAccount* _tmp6_;
				const gchar* _tmp7_;
				gchar* _tmp8_;
				gboolean _tmp9_ = FALSE;
				GeeMap* _tmp10_;
				GeeMap* _tmp11_;
				const gchar* _tmp12_;
#line 90 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_tmp6_ = account;
#line 90 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_tmp7_ = tp_proxy_get_object_path ((TpProxy*) _tmp6_);
#line 90 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_tmp8_ = g_strdup (_tmp7_);
#line 90 "/run/build/folks/backends/telepathy/tp-backend.vala"
				id = _tmp8_;
#line 91 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_tmp10_ = folks_backend_get_persona_stores ((FolksBackend*) self);
#line 91 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_tmp11_ = _tmp10_;
#line 91 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_tmp12_ = id;
#line 91 "/run/build/folks/backends/telepathy/tp-backend.vala"
				if (gee_map_has_key (_tmp11_, _tmp12_) == FALSE) {
#line 401 "tp-backend.c"
					const gchar* _tmp13_;
#line 92 "/run/build/folks/backends/telepathy/tp-backend.vala"
					_tmp13_ = id;
#line 92 "/run/build/folks/backends/telepathy/tp-backend.vala"
					_tmp9_ = gee_collection_contains ((GeeCollection*) storeids, _tmp13_);
#line 407 "tp-backend.c"
				} else {
#line 91 "/run/build/folks/backends/telepathy/tp-backend.vala"
					_tmp9_ = FALSE;
#line 411 "tp-backend.c"
				}
#line 91 "/run/build/folks/backends/telepathy/tp-backend.vala"
				if (_tmp9_) {
#line 415 "tp-backend.c"
					TpfPersonaStore* store = NULL;
					TpAccount* _tmp14_;
					TpfPersonaStore* _tmp15_;
					TpfPersonaStore* _tmp16_;
#line 94 "/run/build/folks/backends/telepathy/tp-backend.vala"
					_tmp14_ = account;
#line 94 "/run/build/folks/backends/telepathy/tp-backend.vala"
					_tmp15_ = tpf_persona_store_dup_for_account (_tmp14_);
#line 94 "/run/build/folks/backends/telepathy/tp-backend.vala"
					store = _tmp15_;
#line 95 "/run/build/folks/backends/telepathy/tp-backend.vala"
					_tmp16_ = store;
#line 95 "/run/build/folks/backends/telepathy/tp-backend.vala"
					_folks_backends_tp_backend_add_store (self, (FolksPersonaStore*) _tmp16_, FALSE);
#line 96 "/run/build/folks/backends/telepathy/tp-backend.vala"
					added_stores = TRUE;
#line 91 "/run/build/folks/backends/telepathy/tp-backend.vala"
					_g_object_unref0 (store);
#line 434 "tp-backend.c"
				}
#line 88 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_g_free0 (id);
#line 88 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_g_object_unref0 (account);
#line 440 "tp-backend.c"
			}
		}
	}
	{
		GeeIterator* _store_it = NULL;
		GeeMap* _tmp17_;
		GeeMap* _tmp18_;
		GeeCollection* _tmp19_;
		GeeCollection* _tmp20_;
		GeeCollection* _tmp21_;
		GeeIterator* _tmp22_;
		GeeIterator* _tmp23_;
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_tmp17_ = folks_backend_get_persona_stores ((FolksBackend*) self);
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_tmp18_ = _tmp17_;
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_tmp19_ = gee_map_get_values (_tmp18_);
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_tmp20_ = _tmp19_;
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_tmp21_ = _tmp20_;
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_tmp22_ = gee_iterable_iterator ((GeeIterable*) _tmp21_);
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_tmp23_ = _tmp22_;
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_g_object_unref0 (_tmp21_);
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_store_it = _tmp23_;
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
		while (TRUE) {
#line 473 "tp-backend.c"
			GeeIterator* _tmp24_;
			FolksPersonaStore* store = NULL;
			GeeIterator* _tmp25_;
			gpointer _tmp26_;
			FolksPersonaStore* _tmp27_;
			const gchar* _tmp28_;
			const gchar* _tmp29_;
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
			_tmp24_ = _store_it;
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
			if (!gee_iterator_next (_tmp24_)) {
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
				break;
#line 487 "tp-backend.c"
			}
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
			_tmp25_ = _store_it;
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
			_tmp26_ = gee_iterator_get (_tmp25_);
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
			store = (FolksPersonaStore*) _tmp26_;
#line 102 "/run/build/folks/backends/telepathy/tp-backend.vala"
			_tmp27_ = store;
#line 102 "/run/build/folks/backends/telepathy/tp-backend.vala"
			_tmp28_ = folks_persona_store_get_id (_tmp27_);
#line 102 "/run/build/folks/backends/telepathy/tp-backend.vala"
			_tmp29_ = _tmp28_;
#line 102 "/run/build/folks/backends/telepathy/tp-backend.vala"
			if (!gee_collection_contains ((GeeCollection*) storeids, _tmp29_)) {
#line 503 "tp-backend.c"
				FolksPersonaStore** _tmp30_;
				gint _tmp30__length1;
				FolksPersonaStore* _tmp31_;
				FolksPersonaStore* _tmp32_;
#line 104 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_tmp30_ = removed_stores;
#line 104 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_tmp30__length1 = removed_stores_length1;
#line 104 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_tmp31_ = store;
#line 104 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_tmp32_ = _g_object_ref0 (_tmp31_);
#line 104 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_vala_array_add1 (&removed_stores, &removed_stores_length1, &_removed_stores_size_, _tmp32_);
#line 518 "tp-backend.c"
			}
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
			_g_object_unref0 (store);
#line 522 "tp-backend.c"
		}
#line 100 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_g_object_unref0 (_store_it);
#line 526 "tp-backend.c"
	}
#line 108 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp33_ = removed_stores;
#line 108 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp33__length1 = removed_stores_length1;
#line 532 "tp-backend.c"
	{
		FolksPersonaStore** store_collection = NULL;
		gint store_collection_length1 = 0;
		gint _store_collection_size_ = 0;
		gint store_it = 0;
#line 108 "/run/build/folks/backends/telepathy/tp-backend.vala"
		store_collection = _tmp33_;
#line 108 "/run/build/folks/backends/telepathy/tp-backend.vala"
		store_collection_length1 = _tmp33__length1;
#line 108 "/run/build/folks/backends/telepathy/tp-backend.vala"
		for (store_it = 0; store_it < _tmp33__length1; store_it = store_it + 1) {
#line 544 "tp-backend.c"
			FolksPersonaStore* _tmp34_;
			FolksPersonaStore* store = NULL;
#line 108 "/run/build/folks/backends/telepathy/tp-backend.vala"
			_tmp34_ = _g_object_ref0 (store_collection[store_it]);
#line 108 "/run/build/folks/backends/telepathy/tp-backend.vala"
			store = _tmp34_;
#line 551 "tp-backend.c"
			{
				FolksPersonaStore* _tmp35_;
#line 110 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_tmp35_ = store;
#line 110 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_folks_backends_tp_backend_remove_store (self, (FolksPersonaStore*) G_TYPE_CHECK_INSTANCE_CAST (_tmp35_, TPF_TYPE_PERSONA_STORE, TpfPersonaStore), FALSE);
#line 108 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_g_object_unref0 (store);
#line 560 "tp-backend.c"
			}
		}
	}
#line 114 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp37_ = added_stores;
#line 114 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (_tmp37_) {
#line 114 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_tmp36_ = TRUE;
#line 570 "tp-backend.c"
	} else {
		FolksPersonaStore** _tmp38_;
		gint _tmp38__length1;
#line 114 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_tmp38_ = removed_stores;
#line 114 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_tmp38__length1 = removed_stores_length1;
#line 114 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_tmp36_ = _tmp38__length1 > 0;
#line 580 "tp-backend.c"
	}
#line 114 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (_tmp36_) {
#line 116 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_object_notify ((GObject*) self, "persona-stores");
#line 586 "tp-backend.c"
	}
#line 79 "/run/build/folks/backends/telepathy/tp-backend.vala"
	(accounts == NULL) ? NULL : (accounts = (_g_list_free__g_object_unref0_ (accounts), NULL));
#line 79 "/run/build/folks/backends/telepathy/tp-backend.vala"
	removed_stores = (_vala_array_free (removed_stores, removed_stores_length1, (GDestroyNotify) g_object_unref), NULL);
#line 592 "tp-backend.c"
}


/**
   * {@inheritDoc}
   */
FolksBackendsTpBackend*
folks_backends_tp_backend_construct (GType object_type)
{
	FolksBackendsTpBackend * self = NULL;
#line 126 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self = (FolksBackendsTpBackend*) g_object_new (object_type, NULL);
#line 124 "/run/build/folks/backends/telepathy/tp-backend.vala"
	return self;
#line 607 "tp-backend.c"
}


FolksBackendsTpBackend*
folks_backends_tp_backend_new (void)
{
#line 124 "/run/build/folks/backends/telepathy/tp-backend.vala"
	return folks_backends_tp_backend_construct (FOLKS_BACKENDS_TP_TYPE_BACKEND);
#line 616 "tp-backend.c"
}


static void
folks_backends_tp_backend_real_prepare_data_free (gpointer _data)
{
	FolksBackendsTpBackendPrepareData* _data_;
	_data_ = _data;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_g_object_unref0 (_data_->self);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_slice_free (FolksBackendsTpBackendPrepareData, _data_);
#line 629 "tp-backend.c"
}


static void
folks_backends_tp_backend_real_prepare_async_ready_wrapper (GObject *source_object,
                                                            GAsyncResult *res,
                                                            void *user_data)
{
	FolksBackendsTpBackendPrepareData* _task_data_;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (_task_data_->_callback_ != NULL) {
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 645 "tp-backend.c"
	}
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_task_data_->_task_complete_ = TRUE;
#line 649 "tp-backend.c"
}


static void
folks_backends_tp_backend_real_prepare (FolksBackend* base,
                                        GAsyncReadyCallback _callback_,
                                        gpointer _user_data_)
{
	FolksBackendsTpBackend * self;
	FolksBackendsTpBackendPrepareData* _data_;
	FolksBackendsTpBackend* _tmp0_;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self = (FolksBackendsTpBackend*) base;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_ = g_slice_new0 (FolksBackendsTpBackendPrepareData);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_->_callback_ = _callback_;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_backends_tp_backend_real_prepare_async_ready_wrapper, _user_data_);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (_callback_ == NULL) {
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_task_complete_ = TRUE;
#line 673 "tp-backend.c"
	}
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_backends_tp_backend_real_prepare_data_free);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_->self = _tmp0_;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	folks_backends_tp_backend_real_prepare_co (_data_);
#line 683 "tp-backend.c"
}


static void
folks_backends_tp_backend_real_prepare_finish (FolksBackend* base,
                                               GAsyncResult* _res_,
                                               GError** error)
{
	FolksBackendsTpBackendPrepareData* _data_;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (NULL == _data_) {
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		return;
#line 699 "tp-backend.c"
	}
}


/**
   * {@inheritDoc}
   */
static void
folks_backends_tp_backend_prepare_ready (GObject* source_object,
                                         GAsyncResult* _res_,
                                         gpointer _user_data_)
{
	FolksBackendsTpBackendPrepareData* _data_;
#line 171 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_ = _user_data_;
#line 171 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_->_source_object_ = source_object;
#line 171 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_->_res_ = _res_;
#line 171 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_->_task_complete_ = TRUE;
#line 171 "/run/build/folks/backends/telepathy/tp-backend.vala"
	folks_backends_tp_backend_real_prepare_co (_data_);
#line 723 "tp-backend.c"
}


static void
__folks_backends_tp_backend_account_enabled_cb_tp_account_manager_account_enabled (TpAccountManager* _sender,
                                                                                   TpAccount* account,
                                                                                   gpointer self)
{
#line 172 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_folks_backends_tp_backend_account_enabled_cb ((FolksBackendsTpBackend*) self, account);
#line 734 "tp-backend.c"
}


static void
__folks_backends_tp_backend_account_validity_changed_cb_tp_account_manager_account_validity_changed (TpAccountManager* _sender,
                                                                                                     TpAccount* account,
                                                                                                     gboolean valid,
                                                                                                     gpointer self)
{
#line 174 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_folks_backends_tp_backend_account_validity_changed_cb ((FolksBackendsTpBackend*) self, account, valid);
#line 746 "tp-backend.c"
}


static gboolean
folks_backends_tp_backend_real_prepare_co (FolksBackendsTpBackendPrepareData* _data_)
{
#line 156 "/run/build/folks/backends/telepathy/tp-backend.vala"
	switch (_data_->_state_) {
#line 156 "/run/build/folks/backends/telepathy/tp-backend.vala"
		case 0:
#line 757 "tp-backend.c"
		goto _state_0;
#line 156 "/run/build/folks/backends/telepathy/tp-backend.vala"
		case 1:
#line 761 "tp-backend.c"
		goto _state_1;
		default:
#line 156 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_assert_not_reached ();
#line 766 "tp-backend.c"
	}
	_state_0:
#line 158 "/run/build/folks/backends/telepathy/tp-backend.vala"
	folks_internal_profiling_start ("preparing Tp.Backend", NULL);
#line 160 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_->_tmp1_ = _data_->self->priv->_is_prepared;
#line 160 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (_data_->_tmp1_) {
#line 160 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_tmp0_ = TRUE;
#line 777 "tp-backend.c"
	} else {
#line 160 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_tmp2_ = _data_->self->priv->_prepare_pending;
#line 160 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_tmp0_ = _data_->_tmp2_;
#line 783 "tp-backend.c"
	}
#line 160 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (_data_->_tmp0_) {
#line 162 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 162 "/run/build/folks/backends/telepathy/tp-backend.vala"
		if (_data_->_state_ != 0) {
#line 162 "/run/build/folks/backends/telepathy/tp-backend.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 162 "/run/build/folks/backends/telepathy/tp-backend.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 795 "tp-backend.c"
			}
		}
#line 162 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_object_unref (_data_->_async_result);
#line 162 "/run/build/folks/backends/telepathy/tp-backend.vala"
		return FALSE;
#line 802 "tp-backend.c"
	}
	{
#line 167 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->self->priv->_prepare_pending = TRUE;
#line 168 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_object_freeze_notify ((GObject*) _data_->self);
#line 170 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_tmp3_ = tp_account_manager_dup ();
#line 170 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_g_object_unref0 (_data_->self->priv->_account_manager);
#line 170 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->self->priv->_account_manager = _data_->_tmp3_;
#line 171 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_tmp4_ = _data_->self->priv->_account_manager;
#line 171 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_state_ = 1;
#line 171 "/run/build/folks/backends/telepathy/tp-backend.vala"
		tp_proxy_prepare_async ((TpProxy*) _data_->_tmp4_, NULL, folks_backends_tp_backend_prepare_ready, _data_);
#line 171 "/run/build/folks/backends/telepathy/tp-backend.vala"
		return FALSE;
#line 823 "tp-backend.c"
		_state_1:
#line 171 "/run/build/folks/backends/telepathy/tp-backend.vala"
		tp_proxy_prepare_finish ((TpProxy*) _data_->_tmp4_, _data_->_res_, &_data_->_inner_error_);
#line 171 "/run/build/folks/backends/telepathy/tp-backend.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 829 "tp-backend.c"
			goto __finally0;
		}
#line 172 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_tmp5_ = _data_->self->priv->_account_manager;
#line 172 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_signal_connect_object (_data_->_tmp5_, "account-enabled", (GCallback) __folks_backends_tp_backend_account_enabled_cb_tp_account_manager_account_enabled, _data_->self, 0);
#line 174 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_tmp6_ = _data_->self->priv->_account_manager;
#line 174 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_signal_connect_object (_data_->_tmp6_, "account-validity-changed", (GCallback) __folks_backends_tp_backend_account_validity_changed_cb_tp_account_manager_account_validity_changed, _data_->self, 0);
#line 177 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_tmp7_ = _data_->self->priv->_account_manager;
#line 177 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_tmp8_ = tp_account_manager_dup_valid_accounts (_data_->_tmp7_);
#line 177 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->accounts = _data_->_tmp8_;
#line 178 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_tmp9_ = _data_->accounts;
#line 848 "tp-backend.c"
		{
#line 178 "/run/build/folks/backends/telepathy/tp-backend.vala"
			_data_->account_collection = _data_->_tmp9_;
#line 178 "/run/build/folks/backends/telepathy/tp-backend.vala"
			for (_data_->account_it = _data_->account_collection; _data_->account_it != NULL; _data_->account_it = _data_->account_it->next) {
#line 178 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_data_->_tmp10_ = _g_object_ref0 ((TpAccount*) _data_->account_it->data);
#line 178 "/run/build/folks/backends/telepathy/tp-backend.vala"
				_data_->account = _data_->_tmp10_;
#line 858 "tp-backend.c"
				{
#line 180 "/run/build/folks/backends/telepathy/tp-backend.vala"
					_data_->_tmp11_ = _data_->account;
#line 180 "/run/build/folks/backends/telepathy/tp-backend.vala"
					_folks_backends_tp_backend_account_enabled_cb (_data_->self, _data_->_tmp11_);
#line 178 "/run/build/folks/backends/telepathy/tp-backend.vala"
					_g_object_unref0 (_data_->account);
#line 866 "tp-backend.c"
				}
			}
		}
#line 183 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->self->priv->_is_prepared = TRUE;
#line 184 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_object_notify ((GObject*) _data_->self, "is-prepared");
#line 186 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->self->priv->_is_quiescent = TRUE;
#line 187 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_object_notify ((GObject*) _data_->self, "is-quiescent");
#line 165 "/run/build/folks/backends/telepathy/tp-backend.vala"
		(_data_->accounts == NULL) ? NULL : (_data_->accounts = (_g_list_free__g_object_unref0_ (_data_->accounts), NULL));
#line 880 "tp-backend.c"
	}
	__finally0:
	{
#line 191 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_object_thaw_notify ((GObject*) _data_->self);
#line 192 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->self->priv->_prepare_pending = FALSE;
#line 888 "tp-backend.c"
	}
#line 165 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 165 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 165 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_object_unref (_data_->_async_result);
#line 165 "/run/build/folks/backends/telepathy/tp-backend.vala"
		return FALSE;
#line 898 "tp-backend.c"
	}
#line 195 "/run/build/folks/backends/telepathy/tp-backend.vala"
	folks_internal_profiling_end ("preparing Tp.Backend", NULL);
#line 156 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 156 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (_data_->_state_ != 0) {
#line 156 "/run/build/folks/backends/telepathy/tp-backend.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 156 "/run/build/folks/backends/telepathy/tp-backend.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 910 "tp-backend.c"
		}
	}
#line 156 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_object_unref (_data_->_async_result);
#line 156 "/run/build/folks/backends/telepathy/tp-backend.vala"
	return FALSE;
#line 917 "tp-backend.c"
}


static void
folks_backends_tp_backend_real_unprepare_data_free (gpointer _data)
{
	FolksBackendsTpBackendUnprepareData* _data_;
	_data_ = _data;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_g_object_unref0 (_data_->self);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_slice_free (FolksBackendsTpBackendUnprepareData, _data_);
#line 930 "tp-backend.c"
}


static void
folks_backends_tp_backend_real_unprepare_async_ready_wrapper (GObject *source_object,
                                                              GAsyncResult *res,
                                                              void *user_data)
{
	FolksBackendsTpBackendUnprepareData* _task_data_;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (_task_data_->_callback_ != NULL) {
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 946 "tp-backend.c"
	}
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_task_data_->_task_complete_ = TRUE;
#line 950 "tp-backend.c"
}


static void
folks_backends_tp_backend_real_unprepare (FolksBackend* base,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_)
{
	FolksBackendsTpBackend * self;
	FolksBackendsTpBackendUnprepareData* _data_;
	FolksBackendsTpBackend* _tmp0_;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self = (FolksBackendsTpBackend*) base;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_ = g_slice_new0 (FolksBackendsTpBackendUnprepareData);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_->_callback_ = _callback_;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_backends_tp_backend_real_unprepare_async_ready_wrapper, _user_data_);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (_callback_ == NULL) {
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_task_complete_ = TRUE;
#line 974 "tp-backend.c"
	}
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_backends_tp_backend_real_unprepare_data_free);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_->self = _tmp0_;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	folks_backends_tp_backend_real_unprepare_co (_data_);
#line 984 "tp-backend.c"
}


static void
folks_backends_tp_backend_real_unprepare_finish (FolksBackend* base,
                                                 GAsyncResult* _res_,
                                                 GError** error)
{
	FolksBackendsTpBackendUnprepareData* _data_;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (NULL == _data_) {
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		return;
#line 1000 "tp-backend.c"
	}
}


/**
   * {@inheritDoc}
   */
static gboolean
folks_backends_tp_backend_real_unprepare_co (FolksBackendsTpBackendUnprepareData* _data_)
{
#line 201 "/run/build/folks/backends/telepathy/tp-backend.vala"
	switch (_data_->_state_) {
#line 201 "/run/build/folks/backends/telepathy/tp-backend.vala"
		case 0:
#line 1015 "tp-backend.c"
		goto _state_0;
		default:
#line 201 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_assert_not_reached ();
#line 1020 "tp-backend.c"
	}
	_state_0:
#line 203 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_data_->_tmp1_ = _data_->self->priv->_is_prepared;
#line 203 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (!_data_->_tmp1_) {
#line 203 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_tmp0_ = TRUE;
#line 1029 "tp-backend.c"
	} else {
#line 203 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_tmp2_ = _data_->self->priv->_prepare_pending;
#line 203 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_tmp0_ = _data_->_tmp2_;
#line 1035 "tp-backend.c"
	}
#line 203 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (_data_->_tmp0_) {
#line 205 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 205 "/run/build/folks/backends/telepathy/tp-backend.vala"
		if (_data_->_state_ != 0) {
#line 205 "/run/build/folks/backends/telepathy/tp-backend.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 205 "/run/build/folks/backends/telepathy/tp-backend.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1047 "tp-backend.c"
			}
		}
#line 205 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_object_unref (_data_->_async_result);
#line 205 "/run/build/folks/backends/telepathy/tp-backend.vala"
		return FALSE;
#line 1054 "tp-backend.c"
	}
	{
#line 210 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->self->priv->_prepare_pending = TRUE;
#line 211 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_object_freeze_notify ((GObject*) _data_->self);
#line 213 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_tmp3_ = _data_->self->priv->_account_manager;
#line 213 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_signal_parse_name ("account-enabled", tp_account_manager_get_type (), &_data_->_tmp4_, NULL, FALSE);
#line 213 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_signal_handlers_disconnect_matched (_data_->_tmp3_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _data_->_tmp4_, 0, NULL, (GCallback) __folks_backends_tp_backend_account_enabled_cb_tp_account_manager_account_enabled, _data_->self);
#line 215 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->_tmp5_ = _data_->self->priv->_account_manager;
#line 215 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_signal_parse_name ("account-validity-changed", tp_account_manager_get_type (), &_data_->_tmp6_, NULL, FALSE);
#line 215 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_signal_handlers_disconnect_matched (_data_->_tmp5_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _data_->_tmp6_, 0, NULL, (GCallback) __folks_backends_tp_backend_account_validity_changed_cb_tp_account_manager_account_validity_changed, _data_->self);
#line 217 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_g_object_unref0 (_data_->self->priv->_account_manager);
#line 217 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->self->priv->_account_manager = NULL;
#line 219 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->self->priv->_is_quiescent = FALSE;
#line 220 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_object_notify ((GObject*) _data_->self, "is-quiescent");
#line 222 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->self->priv->_is_prepared = FALSE;
#line 223 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_object_notify ((GObject*) _data_->self, "is-prepared");
#line 1085 "tp-backend.c"
	}
	__finally1:
	{
#line 227 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_object_thaw_notify ((GObject*) _data_->self);
#line 228 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_data_->self->priv->_prepare_pending = FALSE;
#line 1093 "tp-backend.c"
	}
#line 208 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 208 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 208 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_object_unref (_data_->_async_result);
#line 208 "/run/build/folks/backends/telepathy/tp-backend.vala"
		return FALSE;
#line 1103 "tp-backend.c"
	}
#line 201 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 201 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (_data_->_state_ != 0) {
#line 201 "/run/build/folks/backends/telepathy/tp-backend.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 201 "/run/build/folks/backends/telepathy/tp-backend.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1113 "tp-backend.c"
		}
	}
#line 201 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_object_unref (_data_->_async_result);
#line 201 "/run/build/folks/backends/telepathy/tp-backend.vala"
	return FALSE;
#line 1120 "tp-backend.c"
}


static void
_folks_backends_tp_backend_account_validity_changed_cb (FolksBackendsTpBackend* self,
                                                        TpAccount* account,
                                                        gboolean valid)
{
#line 232 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_return_if_fail (self != NULL);
#line 232 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_return_if_fail (account != NULL);
#line 234 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (valid) {
#line 235 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_folks_backends_tp_backend_account_enabled_cb (self, account);
#line 1137 "tp-backend.c"
	}
}


static void
_folks_backends_tp_backend_account_enabled_cb (FolksBackendsTpBackend* self,
                                               TpAccount* account)
{
	gboolean _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_ = FALSE;
	GeeSet* _tmp3_;
	TpfPersonaStore* store = NULL;
	TpfPersonaStore* _tmp6_;
	TpfPersonaStore* _tmp7_;
#line 238 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_return_if_fail (self != NULL);
#line 238 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_return_if_fail (account != NULL);
#line 240 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_object_get (account, "enabled", &_tmp0_, NULL);
#line 240 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp1_ = _tmp0_;
#line 240 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (!_tmp1_) {
#line 242 "/run/build/folks/backends/telepathy/tp-backend.vala"
		return;
#line 1165 "tp-backend.c"
	}
#line 246 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp3_ = self->priv->_storeids;
#line 246 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (_tmp3_ != NULL) {
#line 1171 "tp-backend.c"
		GeeSet* _tmp4_;
		const gchar* _tmp5_;
#line 246 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_tmp4_ = self->priv->_storeids;
#line 246 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_tmp5_ = tp_proxy_get_object_path ((TpProxy*) account);
#line 246 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_tmp2_ = gee_collection_contains ((GeeCollection*) _tmp4_, _tmp5_) == FALSE;
#line 1180 "tp-backend.c"
	} else {
#line 246 "/run/build/folks/backends/telepathy/tp-backend.vala"
		_tmp2_ = FALSE;
#line 1184 "tp-backend.c"
	}
#line 246 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (_tmp2_) {
#line 249 "/run/build/folks/backends/telepathy/tp-backend.vala"
		return;
#line 1190 "tp-backend.c"
	}
#line 252 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp6_ = tpf_persona_store_dup_for_account (account);
#line 252 "/run/build/folks/backends/telepathy/tp-backend.vala"
	store = _tmp6_;
#line 253 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp7_ = store;
#line 253 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_folks_backends_tp_backend_add_store (self, (FolksPersonaStore*) _tmp7_, TRUE);
#line 238 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_g_object_unref0 (store);
#line 1202 "tp-backend.c"
}


static void
__folks_backends_tp_backend_store_removed_cb_folks_persona_store_removed (FolksPersonaStore* _sender,
                                                                          gpointer self)
{
#line 258 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_folks_backends_tp_backend_store_removed_cb ((FolksBackendsTpBackend*) self, _sender);
#line 1212 "tp-backend.c"
}


static void
_folks_backends_tp_backend_add_store (FolksBackendsTpBackend* self,
                                      FolksPersonaStore* store,
                                      gboolean notify)
{
#line 256 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_return_if_fail (self != NULL);
#line 256 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_return_if_fail (store != NULL);
#line 258 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_signal_connect_object (store, "removed", (GCallback) __folks_backends_tp_backend_store_removed_cb_folks_persona_store_removed, self, 0);
#line 259 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_signal_emit_by_name ((FolksBackend*) self, "persona-store-added", store);
#line 261 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (notify) {
#line 263 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_object_notify ((GObject*) self, "persona-stores");
#line 1233 "tp-backend.c"
	}
}


static void
_folks_backends_tp_backend_remove_store (FolksBackendsTpBackend* self,
                                         FolksPersonaStore* store,
                                         gboolean notify)
{
	guint _tmp0_;
#line 267 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_return_if_fail (self != NULL);
#line 267 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_return_if_fail (store != NULL);
#line 269 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_signal_parse_name ("removed", FOLKS_TYPE_PERSONA_STORE, &_tmp0_, NULL, FALSE);
#line 269 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_signal_handlers_disconnect_matched (store, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp0_, 0, NULL, (GCallback) __folks_backends_tp_backend_store_removed_cb_folks_persona_store_removed, self);
#line 270 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_signal_emit_by_name ((FolksBackend*) self, "persona-store-removed", store);
#line 272 "/run/build/folks/backends/telepathy/tp-backend.vala"
	if (notify) {
#line 274 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_object_notify ((GObject*) self, "persona-stores");
#line 1258 "tp-backend.c"
	}
}


static void
_folks_backends_tp_backend_store_removed_cb (FolksBackendsTpBackend* self,
                                             FolksPersonaStore* store)
{
#line 278 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_return_if_fail (self != NULL);
#line 278 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_return_if_fail (store != NULL);
#line 280 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_folks_backends_tp_backend_remove_store (self, store, TRUE);
#line 1273 "tp-backend.c"
}


static const gchar*
folks_backends_tp_backend_real_get_name (FolksBackend* base)
{
	const gchar* result;
	FolksBackendsTpBackend* self;
#line 44 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self = (FolksBackendsTpBackend*) base;
#line 44 "/run/build/folks/backends/telepathy/tp-backend.vala"
	result = BACKEND_NAME;
#line 44 "/run/build/folks/backends/telepathy/tp-backend.vala"
	return result;
#line 1288 "tp-backend.c"
}


static GeeMap*
folks_backends_tp_backend_real_get_persona_stores (FolksBackend* base)
{
	GeeMap* result;
	FolksBackendsTpBackend* self;
	GeeMap* _tmp0_;
#line 51 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self = (FolksBackendsTpBackend*) base;
#line 51 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp0_ = tpf_persona_store_list_persona_stores ();
#line 51 "/run/build/folks/backends/telepathy/tp-backend.vala"
	result = _tmp0_;
#line 51 "/run/build/folks/backends/telepathy/tp-backend.vala"
	return result;
#line 1306 "tp-backend.c"
}


static gboolean
folks_backends_tp_backend_real_get_is_prepared (FolksBackend* base)
{
	gboolean result;
	FolksBackendsTpBackend* self;
	gboolean _tmp0_;
#line 138 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self = (FolksBackendsTpBackend*) base;
#line 138 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp0_ = self->priv->_is_prepared;
#line 138 "/run/build/folks/backends/telepathy/tp-backend.vala"
	result = _tmp0_;
#line 138 "/run/build/folks/backends/telepathy/tp-backend.vala"
	return result;
#line 1324 "tp-backend.c"
}


static gboolean
folks_backends_tp_backend_real_get_is_quiescent (FolksBackend* base)
{
	gboolean result;
	FolksBackendsTpBackend* self;
	gboolean _tmp0_;
#line 150 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self = (FolksBackendsTpBackend*) base;
#line 150 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_tmp0_ = self->priv->_is_quiescent;
#line 150 "/run/build/folks/backends/telepathy/tp-backend.vala"
	result = _tmp0_;
#line 150 "/run/build/folks/backends/telepathy/tp-backend.vala"
	return result;
#line 1342 "tp-backend.c"
}


static void
folks_backends_tp_backend_class_init (FolksBackendsTpBackendClass * klass)
{
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	folks_backends_tp_backend_parent_class = g_type_class_peek_parent (klass);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_type_class_add_private (klass, sizeof (FolksBackendsTpBackendPrivate));
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	((FolksBackendClass *) klass)->enable_persona_store = (void (*) (FolksBackend *, FolksPersonaStore*)) folks_backends_tp_backend_real_enable_persona_store;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	((FolksBackendClass *) klass)->disable_persona_store = (void (*) (FolksBackend *, FolksPersonaStore*)) folks_backends_tp_backend_real_disable_persona_store;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	((FolksBackendClass *) klass)->set_persona_stores = (void (*) (FolksBackend *, GeeSet*)) folks_backends_tp_backend_real_set_persona_stores;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	((FolksBackendClass *) klass)->prepare = (void (*) (FolksBackend *, GAsyncReadyCallback, gpointer)) folks_backends_tp_backend_real_prepare;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	((FolksBackendClass *) klass)->prepare_finish = (void (*) (FolksBackend *, GAsyncResult*, GError**)) folks_backends_tp_backend_real_prepare_finish;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	((FolksBackendClass *) klass)->unprepare = (void (*) (FolksBackend *, GAsyncReadyCallback, gpointer)) folks_backends_tp_backend_real_unprepare;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	((FolksBackendClass *) klass)->unprepare_finish = (void (*) (FolksBackend *, GAsyncResult*, GError**)) folks_backends_tp_backend_real_unprepare_finish;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	FOLKS_BACKEND_CLASS (klass)->get_name = folks_backends_tp_backend_real_get_name;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	FOLKS_BACKEND_CLASS (klass)->get_persona_stores = folks_backends_tp_backend_real_get_persona_stores;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	FOLKS_BACKEND_CLASS (klass)->get_is_prepared = folks_backends_tp_backend_real_get_is_prepared;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	FOLKS_BACKEND_CLASS (klass)->get_is_quiescent = folks_backends_tp_backend_real_get_is_quiescent;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_folks_backends_tp_backend_get_property;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_backends_tp_backend_finalize;
#line 1379 "tp-backend.c"
	/**
	   * {@inheritDoc}
	   */
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_BACKENDS_TP_BACKEND_NAME_PROPERTY, folks_backends_tp_backend_properties[FOLKS_BACKENDS_TP_BACKEND_NAME_PROPERTY] = g_param_spec_string ("name", "name", "name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1385 "tp-backend.c"
	/**
	   * {@inheritDoc}
	   */
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_BACKENDS_TP_BACKEND_PERSONA_STORES_PROPERTY, folks_backends_tp_backend_properties[FOLKS_BACKENDS_TP_BACKEND_PERSONA_STORES_PROPERTY] = g_param_spec_object ("persona-stores", "persona-stores", "persona-stores", GEE_TYPE_MAP, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1391 "tp-backend.c"
	/**
	   * Whether this Backend has been prepared.
	   *
	   * See {@link Folks.Backend.is_prepared}.
	   *
	   * @since 0.3.0
	   */
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_BACKENDS_TP_BACKEND_IS_PREPARED_PROPERTY, folks_backends_tp_backend_properties[FOLKS_BACKENDS_TP_BACKEND_IS_PREPARED_PROPERTY] = g_param_spec_boolean ("is-prepared", "is-prepared", "is-prepared", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1401 "tp-backend.c"
	/**
	   * Whether this Backend has reached a quiescent state.
	   *
	   * See {@link Folks.Backend.is_quiescent}.
	   *
	   * @since 0.6.2
	   */
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_BACKENDS_TP_BACKEND_IS_QUIESCENT_PROPERTY, folks_backends_tp_backend_properties[FOLKS_BACKENDS_TP_BACKEND_IS_QUIESCENT_PROPERTY] = g_param_spec_boolean ("is-quiescent", "is-quiescent", "is-quiescent", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1411 "tp-backend.c"
}


static void
folks_backends_tp_backend_instance_init (FolksBackendsTpBackend * self)
{
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self->priv = FOLKS_BACKENDS_TP_BACKEND_GET_PRIVATE (self);
#line 36 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self->priv->_is_prepared = FALSE;
#line 37 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self->priv->_prepare_pending = FALSE;
#line 38 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self->priv->_is_quiescent = FALSE;
#line 39 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self->priv->_storeids = NULL;
#line 1428 "tp-backend.c"
}


static void
folks_backends_tp_backend_finalize (GObject * obj)
{
	FolksBackendsTpBackend * self;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_BACKENDS_TP_TYPE_BACKEND, FolksBackendsTpBackend);
#line 35 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_g_object_unref0 (self->priv->_account_manager);
#line 39 "/run/build/folks/backends/telepathy/tp-backend.vala"
	_g_object_unref0 (self->priv->_storeids);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	G_OBJECT_CLASS (folks_backends_tp_backend_parent_class)->finalize (obj);
#line 1444 "tp-backend.c"
}


/**
 * A backend which connects to the Telepathy accounts service and creates a
 * {@link PersonaStore} for each valid account known to Telepathy.
 */
GType
folks_backends_tp_backend_get_type (void)
{
	static volatile gsize folks_backends_tp_backend_type_id__volatile = 0;
	if (g_once_init_enter (&folks_backends_tp_backend_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksBackendsTpBackendClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_backends_tp_backend_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksBackendsTpBackend), 0, (GInstanceInitFunc) folks_backends_tp_backend_instance_init, NULL };
		GType folks_backends_tp_backend_type_id;
		folks_backends_tp_backend_type_id = g_type_register_static (FOLKS_TYPE_BACKEND, "FolksBackendsTpBackend", &g_define_type_info, 0);
		g_once_init_leave (&folks_backends_tp_backend_type_id__volatile, folks_backends_tp_backend_type_id);
	}
	return folks_backends_tp_backend_type_id__volatile;
}


static void
_vala_folks_backends_tp_backend_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec)
{
	FolksBackendsTpBackend * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_BACKENDS_TP_TYPE_BACKEND, FolksBackendsTpBackend);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
	switch (property_id) {
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		case FOLKS_BACKENDS_TP_BACKEND_NAME_PROPERTY:
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_value_set_string (value, folks_backend_get_name ((FolksBackend*) self));
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		break;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		case FOLKS_BACKENDS_TP_BACKEND_PERSONA_STORES_PROPERTY:
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_value_set_object (value, folks_backend_get_persona_stores ((FolksBackend*) self));
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		break;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		case FOLKS_BACKENDS_TP_BACKEND_IS_PREPARED_PROPERTY:
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_value_set_boolean (value, folks_backend_get_is_prepared ((FolksBackend*) self));
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		break;
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		case FOLKS_BACKENDS_TP_BACKEND_IS_QUIESCENT_PROPERTY:
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		g_value_set_boolean (value, folks_backend_get_is_quiescent ((FolksBackend*) self));
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		break;
#line 1500 "tp-backend.c"
		default:
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 33 "/run/build/folks/backends/telepathy/tp-backend.vala"
		break;
#line 1506 "tp-backend.c"
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}



