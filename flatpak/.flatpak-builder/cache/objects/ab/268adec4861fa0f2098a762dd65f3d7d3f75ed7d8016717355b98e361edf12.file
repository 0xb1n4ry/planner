/* AgendaEventRow.c generated by valac 0.40.11, the Vala compiler
 * generated from AgendaEventRow.vala, do not modify */

/*
 * Copyright 2011-2018 elementary, Inc. (https://elementary.io)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authored by: Maxwell Barvian
 *              Niels Avonds <niels.avonds@gmail.com>
 *              Corentin NoÃ«l <corentin@elementaryos.org>
 */


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <libecal/libecal.h>
#include <libedataserver/libedataserver.h>
#include <libical/ical.h>
#include <pango/pango.h>
#include <float.h>
#include <math.h>
#include <gdk/gdk.h>
#include <glib/gi18n-lib.h>


#define TYPE_AGENDA_EVENT_ROW (agenda_event_row_get_type ())
#define AGENDA_EVENT_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_AGENDA_EVENT_ROW, AgendaEventRow))
#define AGENDA_EVENT_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_AGENDA_EVENT_ROW, AgendaEventRowClass))
#define IS_AGENDA_EVENT_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_AGENDA_EVENT_ROW))
#define IS_AGENDA_EVENT_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_AGENDA_EVENT_ROW))
#define AGENDA_EVENT_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_AGENDA_EVENT_ROW, AgendaEventRowClass))

typedef struct _AgendaEventRow AgendaEventRow;
typedef struct _AgendaEventRowClass AgendaEventRowClass;
typedef struct _AgendaEventRowPrivate AgendaEventRowPrivate;
enum  {
	AGENDA_EVENT_ROW_0_PROPERTY,
	AGENDA_EVENT_ROW_UID_PROPERTY,
	AGENDA_EVENT_ROW_SUMMARY_PROPERTY,
	AGENDA_EVENT_ROW_CALEVENT_PROPERTY,
	AGENDA_EVENT_ROW_IS_ALLDAY_PROPERTY,
	AGENDA_EVENT_ROW_IS_MULTIDAY_PROPERTY,
	AGENDA_EVENT_ROW_REVEALER_PROPERTY,
	AGENDA_EVENT_ROW_NUM_PROPERTIES
};
static GParamSpec* agenda_event_row_properties[AGENDA_EVENT_ROW_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block66Data Block66Data;
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
enum  {
	AGENDA_EVENT_ROW_REMOVED_SIGNAL,
	AGENDA_EVENT_ROW_MODIFIED_SIGNAL,
	AGENDA_EVENT_ROW_NUM_SIGNALS
};
static guint agenda_event_row_signals[AGENDA_EVENT_ROW_NUM_SIGNALS] = {0};

struct _AgendaEventRow {
	GtkListBoxRow parent_instance;
	AgendaEventRowPrivate * priv;
};

struct _AgendaEventRowClass {
	GtkListBoxRowClass parent_class;
};

struct _AgendaEventRowPrivate {
	gchar* _uid;
	gchar* _summary;
	ECalComponent* _calevent;
	gboolean _is_allday;
	gboolean _is_multiday;
	GtkRevealer* _revealer;
	GtkLabel* event_label;
	GtkLabel* name_label;
	GtkLabel* source_label;
	GtkLabel* datatime_label;
	GtkLabel* location_label;
	gboolean isUpcoming;
};

struct _Block66Data {
	int _ref_count_;
	AgendaEventRow* self;
	ESourceCalendar* cal;
	GtkRevealer* source_revealer;
	GtkRevealer* location_revealer;
};


static gpointer agenda_event_row_parent_class = NULL;

GType agenda_event_row_get_type (void) G_GNUC_CONST;
#define AGENDA_EVENT_ROW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), TYPE_AGENDA_EVENT_ROW, AgendaEventRowPrivate))
AgendaEventRow* agenda_event_row_new (ESource* source,
                                      ECalComponent* calevent,
                                      gboolean isUpcoming);
AgendaEventRow* agenda_event_row_construct (GType object_type,
                                            ESource* source,
                                            ECalComponent* calevent,
                                            gboolean isUpcoming);
static Block66Data* block66_data_ref (Block66Data* _data66_);
static void block66_data_unref (void * _userdata_);
static void agenda_event_row_set_calevent (AgendaEventRow* self,
                                    ECalComponent* value);
static void agenda_event_row_set_uid (AgendaEventRow* self,
                               const gchar* value);
void maya_util_style_calendar_color (GtkWidget* widget,
                                     const gchar* color,
                                     gboolean background);
static void __lambda288_ (Block66Data* _data66_);
static void ___lambda288__g_object_notify (GObject* _sender,
                                    GParamSpec* pspec,
                                    gpointer self);
gchar* maya_util_get_source_location (ESource* source);
static void agenda_event_row_set_revealer (AgendaEventRow* self,
                                    GtkRevealer* value);
GtkRevealer* agenda_event_row_get_revealer (AgendaEventRow* self);
static void __lambda289_ (AgendaEventRow* self);
static void ___lambda289__gtk_widget_show (GtkWidget* _sender,
                                    gpointer self);
static void __lambda290_ (AgendaEventRow* self);
static void ___lambda290__gtk_widget_hide (GtkWidget* _sender,
                                    gpointer self);
static gboolean __lambda291_ (Block66Data* _data66_,
                       GdkEventCrossing* event);
static gboolean ___lambda291__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                      GdkEventCrossing* event,
                                                      gpointer self);
static gboolean __lambda292_ (Block66Data* _data66_,
                       GdkEventCrossing* event);
static gboolean ___lambda292__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                      GdkEventCrossing* event,
                                                      gpointer self);
void agenda_event_row_update (AgendaEventRow* self,
                              ECalComponent* event);
static void agenda_event_row_set_summary (AgendaEventRow* self,
                                   const gchar* value);
const gchar* agenda_event_row_get_summary (AgendaEventRow* self);
void maya_util_get_local_datetimes_from_icalcomponent (icalcomponent* comp,
                                                       GDateTime* * start_date,
                                                       GDateTime* * end_date);
gboolean maya_util_is_all_day (GDateTime* dtstart,
                               GDateTime* dtend);
static void agenda_event_row_set_is_allday (AgendaEventRow* self,
                                     gboolean value);
gboolean maya_util_is_multiday_event (icalcomponent* comp);
static void agenda_event_row_set_is_multiday (AgendaEventRow* self,
                                       gboolean value);
gchar* maya_settings_DateFormat_Complete (void);
gchar* maya_settings_TimeFormat (void);
gboolean agenda_event_row_get_is_multiday (AgendaEventRow* self);
gboolean agenda_event_row_get_is_allday (AgendaEventRow* self);
const gchar* agenda_event_row_get_uid (AgendaEventRow* self);
ECalComponent* agenda_event_row_get_calevent (AgendaEventRow* self);
static void agenda_event_row_finalize (GObject * obj);
static void _vala_agenda_event_row_get_property (GObject * object,
                                          guint property_id,
                                          GValue * value,
                                          GParamSpec * pspec);
static void _vala_agenda_event_row_set_property (GObject * object,
                                          guint property_id,
                                          const GValue * value,
                                          GParamSpec * pspec);


static Block66Data*
block66_data_ref (Block66Data* _data66_)
{
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_atomic_int_inc (&_data66_->_ref_count_);
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	return _data66_;
#line 190 "AgendaEventRow.c"
}


static void
block66_data_unref (void * _userdata_)
{
	Block66Data* _data66_;
	_data66_ = (Block66Data*) _userdata_;
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	if (g_atomic_int_dec_and_test (&_data66_->_ref_count_)) {
#line 201 "AgendaEventRow.c"
		AgendaEventRow* self;
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		self = _data66_->self;
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_g_object_unref0 (_data66_->location_revealer);
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_g_object_unref0 (_data66_->source_revealer);
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_g_object_unref0 (_data66_->cal);
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_g_object_unref0 (self);
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		g_slice_free (Block66Data, _data66_);
#line 215 "AgendaEventRow.c"
	}
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 49 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	return self ? g_object_ref (self) : NULL;
#line 225 "AgendaEventRow.c"
}


static void
__lambda288_ (Block66Data* _data66_)
{
	AgendaEventRow* self;
	GtkLabel* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
#line 56 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	self = _data66_->self;
#line 57 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp0_ = self->priv->event_label;
#line 57 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp1_ = e_source_selectable_dup_color ((ESourceSelectable*) _data66_->cal);
#line 57 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp2_ = _tmp1_;
#line 57 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	maya_util_style_calendar_color ((GtkWidget*) _tmp0_, _tmp2_, TRUE);
#line 57 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_free0 (_tmp2_);
#line 248 "AgendaEventRow.c"
}


static void
___lambda288__g_object_notify (GObject* _sender,
                               GParamSpec* pspec,
                               gpointer self)
{
#line 56 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	__lambda288_ (self);
#line 259 "AgendaEventRow.c"
}


static void
__lambda289_ (AgendaEventRow* self)
{
	GtkRevealer* _tmp0_;
#line 118 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp0_ = self->priv->_revealer;
#line 118 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_revealer_set_reveal_child (_tmp0_, TRUE);
#line 271 "AgendaEventRow.c"
}


static void
___lambda289__gtk_widget_show (GtkWidget* _sender,
                               gpointer self)
{
#line 117 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	__lambda289_ ((AgendaEventRow*) self);
#line 281 "AgendaEventRow.c"
}


static void
__lambda290_ (AgendaEventRow* self)
{
	GtkRevealer* _tmp0_;
#line 122 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp0_ = self->priv->_revealer;
#line 122 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_revealer_set_reveal_child (_tmp0_, FALSE);
#line 293 "AgendaEventRow.c"
}


static void
___lambda290__gtk_widget_hide (GtkWidget* _sender,
                               gpointer self)
{
#line 121 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	__lambda290_ ((AgendaEventRow*) self);
#line 303 "AgendaEventRow.c"
}


static gboolean
__lambda291_ (Block66Data* _data66_,
              GdkEventCrossing* event)
{
	AgendaEventRow* self;
	gboolean result = FALSE;
#line 125 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	self = _data66_->self;
#line 125 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 126 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_revealer_set_reveal_child (_data66_->location_revealer, FALSE);
#line 127 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_revealer_set_reveal_child (_data66_->source_revealer, TRUE);
#line 129 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	result = FALSE;
#line 129 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	return result;
#line 325 "AgendaEventRow.c"
}


static gboolean
___lambda291__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                             GdkEventCrossing* event,
                                             gpointer self)
{
	gboolean result;
	result = __lambda291_ (self, event);
#line 125 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	return result;
#line 338 "AgendaEventRow.c"
}


static gboolean
__lambda292_ (Block66Data* _data66_,
              GdkEventCrossing* event)
{
	AgendaEventRow* self;
	gboolean result = FALSE;
	GdkNotifyType _tmp0_;
#line 132 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	self = _data66_->self;
#line 132 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 133 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp0_ = event->detail;
#line 133 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	if (_tmp0_ == GDK_NOTIFY_INFERIOR) {
#line 134 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		result = FALSE;
#line 134 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		return result;
#line 361 "AgendaEventRow.c"
	}
#line 137 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_revealer_set_reveal_child (_data66_->location_revealer, TRUE);
#line 138 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_revealer_set_reveal_child (_data66_->source_revealer, FALSE);
#line 140 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	result = FALSE;
#line 140 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	return result;
#line 371 "AgendaEventRow.c"
}


static gboolean
___lambda292__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                             GdkEventCrossing* event,
                                             gpointer self)
{
	gboolean result;
	result = __lambda292_ (self, event);
#line 132 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	return result;
#line 384 "AgendaEventRow.c"
}


AgendaEventRow*
agenda_event_row_construct (GType object_type,
                            ESource* source,
                            ECalComponent* calevent,
                            gboolean isUpcoming)
{
	AgendaEventRow * self = NULL;
	Block66Data* _data66_;
	icalcomponent* ical_event = NULL;
	icalcomponent* _tmp0_;
	const gchar* _tmp1_;
	ESourceExtension* _tmp2_;
	ESourceCalendar* _tmp3_;
	GtkLabel* _tmp4_;
	GtkLabel* _tmp5_;
	GtkLabel* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	GtkLabel* _tmp9_;
	GtkLabel* _tmp10_;
	GtkLabel* _tmp11_;
	GtkLabel* _tmp12_;
	GtkLabel* _tmp13_;
	GtkLabel* _tmp14_;
	gchar* _tmp15_;
	gchar* _tmp16_;
	GtkLabel* _tmp17_;
	GtkLabel* _tmp18_;
	GtkLabel* _tmp19_;
	GtkLabel* _tmp20_;
	GtkRevealer* _tmp21_;
	GtkLabel* _tmp22_;
	GtkLabel* _tmp23_;
	GtkLabel* _tmp24_;
	GtkLabel* _tmp25_;
	GtkLabel* _tmp26_;
	GtkLabel* _tmp27_;
	GtkLabel* _tmp28_;
	GtkStyleContext* _tmp29_;
	GtkLabel* _tmp30_;
	GtkLabel* _tmp31_;
	GtkLabel* _tmp32_;
	GtkLabel* _tmp33_;
	GtkRevealer* _tmp34_;
	GtkLabel* _tmp35_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp36_;
	GtkBox* box = NULL;
	GtkBox* _tmp37_;
	GtkLabel* _tmp38_;
	GtkLabel* _tmp39_;
	GtkLabel* _tmp40_;
	GtkEventBox* event_box = NULL;
	GtkEventBox* _tmp41_;
	GtkRevealer* _tmp42_;
	GtkRevealer* _tmp43_;
	GtkRevealer* _tmp44_;
	GtkRevealer* _tmp45_;
	GtkRevealer* _tmp46_;
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_val_if_fail (source != NULL, NULL);
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_val_if_fail (calevent != NULL, NULL);
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_data66_ = g_slice_new0 (Block66Data);
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_data66_->_ref_count_ = 1;
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	self = (AgendaEventRow*) g_object_new (object_type, NULL);
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_data66_->self = g_object_ref (self);
#line 42 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) self, 3);
#line 44 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	agenda_event_row_set_calevent (self, calevent);
#line 45 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	self->priv->isUpcoming = isUpcoming;
#line 46 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp0_ = e_cal_component_get_icalcomponent (calevent);
#line 46 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	ical_event = _tmp0_;
#line 47 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp1_ = icalcomponent_get_uid (ical_event);
#line 47 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	agenda_event_row_set_uid (self, _tmp1_);
#line 49 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp2_ = e_source_get_extension (source, E_SOURCE_EXTENSION_CALENDAR);
#line 49 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp3_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp2_, e_source_calendar_get_type (), ESourceCalendar));
#line 49 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_data66_->cal = _tmp3_;
#line 52 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp4_ = (GtkLabel*) gtk_label_new (NULL);
#line 52 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_ref_sink (_tmp4_);
#line 52 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (self->priv->event_label);
#line 52 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	self->priv->event_label = _tmp4_;
#line 53 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp5_ = self->priv->event_label;
#line 53 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_set ((GtkWidget*) _tmp5_, "width-request", 3, NULL);
#line 54 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp6_ = self->priv->event_label;
#line 54 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp7_ = e_source_selectable_dup_color ((ESourceSelectable*) _data66_->cal);
#line 54 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp8_ = _tmp7_;
#line 54 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	maya_util_style_calendar_color ((GtkWidget*) _tmp6_, _tmp8_, TRUE);
#line 54 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_free0 (_tmp8_);
#line 56 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_signal_connect_data ((GObject*) _data66_->cal, "notify::color", (GCallback) ___lambda288__g_object_notify, block66_data_ref (_data66_), (GClosureNotify) block66_data_unref, 0);
#line 60 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp9_ = (GtkLabel*) gtk_label_new ("");
#line 60 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_ref_sink (_tmp9_);
#line 60 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (self->priv->name_label);
#line 60 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	self->priv->name_label = _tmp9_;
#line 61 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp10_ = self->priv->name_label;
#line 61 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp10_, 1);
#line 62 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp11_ = self->priv->name_label;
#line 62 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp11_, TRUE);
#line 63 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp12_ = self->priv->name_label;
#line 63 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_set (_tmp12_, "wrap", TRUE, NULL);
#line 64 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp13_ = self->priv->name_label;
#line 64 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_set (_tmp13_, "wrap-mode", PANGO_WRAP_WORD_CHAR, NULL);
#line 65 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp14_ = self->priv->name_label;
#line 65 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_label_set_xalign (_tmp14_, (gfloat) 0);
#line 67 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp15_ = maya_util_get_source_location (source);
#line 67 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp16_ = _tmp15_;
#line 67 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp17_ = (GtkLabel*) gtk_label_new (_tmp16_);
#line 67 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_ref_sink (_tmp17_);
#line 67 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (self->priv->source_label);
#line 67 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	self->priv->source_label = _tmp17_;
#line 67 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_free0 (_tmp16_);
#line 68 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp18_ = self->priv->source_label;
#line 68 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_set (_tmp18_, "wrap", TRUE, NULL);
#line 69 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp19_ = self->priv->source_label;
#line 69 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_set (_tmp19_, "wrap-mode", PANGO_WRAP_WORD_CHAR, NULL);
#line 70 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp20_ = self->priv->source_label;
#line 70 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_label_set_xalign (_tmp20_, (gfloat) 0);
#line 72 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp21_ = (GtkRevealer*) gtk_revealer_new ();
#line 72 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_ref_sink (_tmp21_);
#line 72 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_data66_->source_revealer = _tmp21_;
#line 73 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_revealer_set_transition_type (_data66_->source_revealer, GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP);
#line 74 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp22_ = self->priv->source_label;
#line 74 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_container_add ((GtkContainer*) _data66_->source_revealer, (GtkWidget*) _tmp22_);
#line 75 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_revealer_set_reveal_child (_data66_->source_revealer, FALSE);
#line 77 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp23_ = (GtkLabel*) gtk_label_new (NULL);
#line 77 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_ref_sink (_tmp23_);
#line 77 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (self->priv->datatime_label);
#line 77 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	self->priv->datatime_label = _tmp23_;
#line 78 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp24_ = self->priv->datatime_label;
#line 78 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_label_set_use_markup (_tmp24_, TRUE);
#line 79 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp25_ = self->priv->datatime_label;
#line 79 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_label_set_ellipsize (_tmp25_, PANGO_ELLIPSIZE_END);
#line 80 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp26_ = self->priv->datatime_label;
#line 80 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_label_set_xalign (_tmp26_, (gfloat) 0);
#line 81 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp27_ = self->priv->datatime_label;
#line 81 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp27_, GTK_ALIGN_START);
#line 82 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp28_ = self->priv->datatime_label;
#line 82 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp29_ = gtk_widget_get_style_context ((GtkWidget*) _tmp28_);
#line 82 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_style_context_add_class (_tmp29_, GTK_STYLE_CLASS_DIM_LABEL);
#line 84 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp30_ = (GtkLabel*) gtk_label_new ("");
#line 84 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_ref_sink (_tmp30_);
#line 84 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (self->priv->location_label);
#line 84 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	self->priv->location_label = _tmp30_;
#line 85 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp31_ = self->priv->location_label;
#line 85 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_widget_set_no_show_all ((GtkWidget*) _tmp31_, TRUE);
#line 86 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp32_ = self->priv->location_label;
#line 86 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_set (_tmp32_, "wrap", TRUE, NULL);
#line 87 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp33_ = self->priv->location_label;
#line 87 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_label_set_xalign (_tmp33_, (gfloat) 0);
#line 90 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp34_ = (GtkRevealer*) gtk_revealer_new ();
#line 90 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_ref_sink (_tmp34_);
#line 90 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_data66_->location_revealer = _tmp34_;
#line 91 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_revealer_set_transition_type (_data66_->location_revealer, GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN);
#line 92 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp35_ = self->priv->location_label;
#line 92 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_container_add ((GtkContainer*) _data66_->location_revealer, (GtkWidget*) _tmp35_);
#line 93 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_revealer_set_reveal_child (_data66_->location_revealer, TRUE);
#line 95 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp36_ = (GtkGrid*) gtk_grid_new ();
#line 95 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_ref_sink (_tmp36_);
#line 95 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	main_grid = _tmp36_;
#line 96 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_grid_set_column_spacing (main_grid, 6);
#line 97 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_set ((GtkWidget*) main_grid, "margin", 6, NULL);
#line 99 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp37_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 99 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_ref_sink (_tmp37_);
#line 99 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	box = _tmp37_;
#line 100 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp38_ = self->priv->name_label;
#line 100 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_box_pack_start (box, (GtkWidget*) _tmp38_, FALSE, FALSE, (guint) 0);
#line 101 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_box_pack_start (box, (GtkWidget*) _data66_->location_revealer, FALSE, FALSE, (guint) 0);
#line 102 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_box_pack_start (box, (GtkWidget*) _data66_->source_revealer, FALSE, FALSE, (guint) 0);
#line 104 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp39_ = self->priv->datatime_label;
#line 104 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_container_add ((GtkContainer*) main_grid, (GtkWidget*) _tmp39_);
#line 105 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp40_ = self->priv->event_label;
#line 105 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_container_add ((GtkContainer*) main_grid, (GtkWidget*) _tmp40_);
#line 106 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_container_add ((GtkContainer*) main_grid, (GtkWidget*) box);
#line 108 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp41_ = (GtkEventBox*) gtk_event_box_new ();
#line 108 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_ref_sink (_tmp41_);
#line 108 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	event_box = _tmp41_;
#line 109 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_widget_add_events ((GtkWidget*) event_box, (gint) (GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK));
#line 110 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_container_add ((GtkContainer*) event_box, (GtkWidget*) main_grid);
#line 112 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp42_ = (GtkRevealer*) gtk_revealer_new ();
#line 112 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_ref_sink (_tmp42_);
#line 112 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp43_ = _tmp42_;
#line 112 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	agenda_event_row_set_revealer (self, _tmp43_);
#line 112 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (_tmp43_);
#line 113 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp44_ = self->priv->_revealer;
#line 113 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_revealer_set_transition_type (_tmp44_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN);
#line 114 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp45_ = self->priv->_revealer;
#line 114 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_container_add ((GtkContainer*) _tmp45_, (GtkWidget*) event_box);
#line 115 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp46_ = self->priv->_revealer;
#line 115 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp46_);
#line 117 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_signal_connect_object ((GtkWidget*) self, "show", (GCallback) ___lambda289__gtk_widget_show, self, 0);
#line 121 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_signal_connect_object ((GtkWidget*) self, "hide", (GCallback) ___lambda290__gtk_widget_hide, self, 0);
#line 125 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_signal_connect_data ((GtkWidget*) event_box, "enter-notify-event", (GCallback) ___lambda291__gtk_widget_enter_notify_event, block66_data_ref (_data66_), (GClosureNotify) block66_data_unref, 0);
#line 132 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_signal_connect_data ((GtkWidget*) event_box, "leave-notify-event", (GCallback) ___lambda292__gtk_widget_leave_notify_event, block66_data_ref (_data66_), (GClosureNotify) block66_data_unref, 0);
#line 144 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	agenda_event_row_update (self, calevent);
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (event_box);
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (box);
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (main_grid);
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	block66_data_unref (_data66_);
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_data66_ = NULL;
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	return self;
#line 723 "AgendaEventRow.c"
}


AgendaEventRow*
agenda_event_row_new (ESource* source,
                      ECalComponent* calevent,
                      gboolean isUpcoming)
{
#line 41 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	return agenda_event_row_construct (TYPE_AGENDA_EVENT_ROW, source, calevent, isUpcoming);
#line 734 "AgendaEventRow.c"
}


/**
     * Updates the event to match the given event.
     */
void
agenda_event_row_update (AgendaEventRow* self,
                         ECalComponent* event)
{
	icalcomponent* ical_event = NULL;
	icalcomponent* _tmp0_;
	icalcomponent* _tmp1_;
	const gchar* _tmp2_;
	GtkLabel* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	GDateTime* start_date = NULL;
	GDateTime* end_date = NULL;
	icalcomponent* _tmp7_;
	GDateTime* _tmp8_ = NULL;
	GDateTime* _tmp9_ = NULL;
	GDateTime* _tmp10_;
	GDateTime* _tmp11_;
	icalcomponent* _tmp12_;
	gchar* start_date_string = NULL;
	GDateTime* _tmp13_;
	gchar* _tmp14_;
	gchar* _tmp15_;
	gchar* _tmp16_;
	gchar* _tmp17_;
	gchar* end_date_string = NULL;
	GDateTime* _tmp18_;
	gchar* _tmp19_;
	gchar* _tmp20_;
	gchar* _tmp21_;
	gchar* _tmp22_;
	gchar* start_time_string = NULL;
	GDateTime* _tmp23_;
	gchar* _tmp24_;
	gchar* _tmp25_;
	gchar* _tmp26_;
	gchar* _tmp27_;
	gchar* end_time_string = NULL;
	GDateTime* _tmp28_;
	gchar* _tmp29_;
	gchar* _tmp30_;
	gchar* _tmp31_;
	gchar* _tmp32_;
	GtkLabel* _tmp33_;
	GtkLabel* _tmp34_;
	gboolean _tmp35_;
	gchar* location = NULL;
	icalcomponent* _tmp69_;
	const gchar* _tmp70_;
	gchar* _tmp71_;
	gboolean _tmp72_ = FALSE;
	const gchar* _tmp73_;
#line 149 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_if_fail (self != NULL);
#line 149 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_if_fail (event != NULL);
#line 150 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp0_ = e_cal_component_get_icalcomponent (event);
#line 150 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	ical_event = _tmp0_;
#line 151 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp1_ = ical_event;
#line 151 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp2_ = icalcomponent_get_summary (_tmp1_);
#line 151 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	agenda_event_row_set_summary (self, _tmp2_);
#line 152 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp3_ = self->priv->name_label;
#line 152 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp4_ = self->priv->_summary;
#line 152 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp5_ = g_markup_escape_text (_tmp4_, (gssize) -1);
#line 152 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp6_ = _tmp5_;
#line 152 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_label_set_markup (_tmp3_, _tmp6_);
#line 152 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_free0 (_tmp6_);
#line 155 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp7_ = ical_event;
#line 155 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	maya_util_get_local_datetimes_from_icalcomponent (_tmp7_, &_tmp8_, &_tmp9_);
#line 155 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_date_time_unref0 (start_date);
#line 155 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	start_date = _tmp8_;
#line 155 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_date_time_unref0 (end_date);
#line 155 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	end_date = _tmp9_;
#line 157 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp10_ = start_date;
#line 157 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp11_ = end_date;
#line 157 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	agenda_event_row_set_is_allday (self, maya_util_is_all_day (_tmp10_, _tmp11_));
#line 158 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp12_ = ical_event;
#line 158 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	agenda_event_row_set_is_multiday (self, maya_util_is_multiday_event (_tmp12_));
#line 160 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp13_ = start_date;
#line 160 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp14_ = maya_settings_DateFormat_Complete ();
#line 160 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp15_ = _tmp14_;
#line 160 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp16_ = g_date_time_format (_tmp13_, _tmp15_);
#line 160 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp17_ = _tmp16_;
#line 160 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_free0 (_tmp15_);
#line 160 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	start_date_string = _tmp17_;
#line 161 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp18_ = end_date;
#line 161 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp19_ = maya_settings_DateFormat_Complete ();
#line 161 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp20_ = _tmp19_;
#line 161 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp21_ = g_date_time_format (_tmp18_, _tmp20_);
#line 161 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp22_ = _tmp21_;
#line 161 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_free0 (_tmp20_);
#line 161 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	end_date_string = _tmp22_;
#line 162 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp23_ = start_date;
#line 162 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp24_ = maya_settings_TimeFormat ();
#line 162 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp25_ = _tmp24_;
#line 162 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp26_ = g_date_time_format (_tmp23_, _tmp25_);
#line 162 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp27_ = _tmp26_;
#line 162 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_free0 (_tmp25_);
#line 162 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	start_time_string = _tmp27_;
#line 163 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp28_ = end_date;
#line 163 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp29_ = maya_settings_TimeFormat ();
#line 163 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp30_ = _tmp29_;
#line 163 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp31_ = g_date_time_format (_tmp28_, _tmp30_);
#line 163 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp32_ = _tmp31_;
#line 163 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_free0 (_tmp30_);
#line 163 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	end_time_string = _tmp32_;
#line 165 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp33_ = self->priv->datatime_label;
#line 165 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_widget_show ((GtkWidget*) _tmp33_);
#line 166 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp34_ = self->priv->datatime_label;
#line 166 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	gtk_widget_set_no_show_all ((GtkWidget*) _tmp34_, FALSE);
#line 167 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp35_ = self->priv->_is_multiday;
#line 167 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	if (_tmp35_) {
#line 910 "AgendaEventRow.c"
		gboolean _tmp36_;
#line 168 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_tmp36_ = self->priv->_is_allday;
#line 168 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		if (_tmp36_) {
#line 916 "AgendaEventRow.c"
			GtkLabel* _tmp37_;
			const gchar* _tmp38_;
			const gchar* _tmp39_;
			gchar* _tmp40_;
			gchar* _tmp41_;
#line 169 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_tmp37_ = self->priv->datatime_label;
#line 169 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_tmp38_ = start_date_string;
#line 169 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_tmp39_ = end_date_string;
#line 169 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_tmp40_ = g_strdup_printf (_ ("%s\n%s"), _tmp38_, _tmp39_);
#line 169 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_tmp41_ = _tmp40_;
#line 169 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			gtk_label_set_label (_tmp37_, _tmp41_);
#line 169 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_g_free0 (_tmp41_);
#line 936 "AgendaEventRow.c"
		} else {
			GtkLabel* _tmp42_;
			const gchar* _tmp43_;
			const gchar* _tmp44_;
			const gchar* _tmp45_;
			const gchar* _tmp46_;
			gchar* _tmp47_;
			gchar* _tmp48_;
#line 171 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_tmp42_ = self->priv->datatime_label;
#line 171 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_tmp43_ = start_date_string;
#line 171 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_tmp44_ = start_time_string;
#line 171 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_tmp45_ = end_date_string;
#line 171 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_tmp46_ = end_time_string;
#line 171 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_tmp47_ = g_strdup_printf (_ ("%s, %s\n%s, %s"), _tmp43_, _tmp44_, _tmp45_, _tmp46_);
#line 171 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_tmp48_ = _tmp47_;
#line 171 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			gtk_label_set_label (_tmp42_, _tmp48_);
#line 171 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_g_free0 (_tmp48_);
#line 963 "AgendaEventRow.c"
		}
	} else {
		gboolean _tmp49_;
#line 174 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_tmp49_ = self->priv->isUpcoming;
#line 174 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		if (!_tmp49_) {
#line 971 "AgendaEventRow.c"
			gboolean _tmp50_;
#line 175 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_tmp50_ = self->priv->_is_allday;
#line 175 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			if (_tmp50_) {
#line 977 "AgendaEventRow.c"
				GtkLabel* _tmp51_;
				GtkLabel* _tmp52_;
#line 176 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp51_ = self->priv->datatime_label;
#line 176 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				gtk_widget_hide ((GtkWidget*) _tmp51_);
#line 177 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp52_ = self->priv->datatime_label;
#line 177 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				gtk_widget_set_no_show_all ((GtkWidget*) _tmp52_, TRUE);
#line 988 "AgendaEventRow.c"
			} else {
				GtkLabel* _tmp53_;
				const gchar* _tmp54_;
				const gchar* _tmp55_;
				gchar* _tmp56_;
				gchar* _tmp57_;
#line 179 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp53_ = self->priv->datatime_label;
#line 179 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp54_ = start_time_string;
#line 179 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp55_ = end_time_string;
#line 179 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp56_ = g_strdup_printf (_ ("%s\n%s"), _tmp54_, _tmp55_);
#line 179 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp57_ = _tmp56_;
#line 179 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				gtk_label_set_label (_tmp53_, _tmp57_);
#line 179 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_g_free0 (_tmp57_);
#line 1009 "AgendaEventRow.c"
			}
		} else {
			gboolean _tmp58_;
#line 182 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			_tmp58_ = self->priv->_is_allday;
#line 182 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
			if (_tmp58_) {
#line 1017 "AgendaEventRow.c"
				GtkLabel* _tmp59_;
				const gchar* _tmp60_;
				gchar* _tmp61_;
				gchar* _tmp62_;
#line 183 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp59_ = self->priv->datatime_label;
#line 183 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp60_ = start_date_string;
#line 183 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp61_ = g_strdup_printf (_ ("%s"), _tmp60_);
#line 183 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp62_ = _tmp61_;
#line 183 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				gtk_label_set_label (_tmp59_, _tmp62_);
#line 183 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_g_free0 (_tmp62_);
#line 1034 "AgendaEventRow.c"
			} else {
				GtkLabel* _tmp63_;
				const gchar* _tmp64_;
				const gchar* _tmp65_;
				const gchar* _tmp66_;
				gchar* _tmp67_;
				gchar* _tmp68_;
#line 185 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp63_ = self->priv->datatime_label;
#line 185 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp64_ = start_date_string;
#line 185 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp65_ = start_time_string;
#line 185 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp66_ = end_time_string;
#line 185 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp67_ = g_strdup_printf (_ ("%s, %s\n%s"), _tmp64_, _tmp65_, _tmp66_);
#line 185 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_tmp68_ = _tmp67_;
#line 185 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				gtk_label_set_label (_tmp63_, _tmp68_);
#line 185 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
				_g_free0 (_tmp68_);
#line 1058 "AgendaEventRow.c"
			}
		}
	}
#line 190 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp69_ = ical_event;
#line 190 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp70_ = icalcomponent_get_location (_tmp69_);
#line 190 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp71_ = g_strdup (_tmp70_);
#line 190 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	location = _tmp71_;
#line 191 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp73_ = location;
#line 191 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	if (_tmp73_ != NULL) {
#line 1074 "AgendaEventRow.c"
		const gchar* _tmp74_;
#line 191 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_tmp74_ = location;
#line 191 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_tmp72_ = g_strcmp0 (_tmp74_, "") != 0;
#line 1080 "AgendaEventRow.c"
	} else {
#line 191 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_tmp72_ = FALSE;
#line 1084 "AgendaEventRow.c"
	}
#line 191 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	if (_tmp72_) {
#line 1088 "AgendaEventRow.c"
		GtkLabel* _tmp75_;
		const gchar* _tmp76_;
		GtkLabel* _tmp77_;
#line 192 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_tmp75_ = self->priv->location_label;
#line 192 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_tmp76_ = location;
#line 192 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		gtk_label_set_label (_tmp75_, _tmp76_);
#line 193 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_tmp77_ = self->priv->location_label;
#line 193 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		gtk_widget_show ((GtkWidget*) _tmp77_);
#line 1102 "AgendaEventRow.c"
	} else {
		GtkLabel* _tmp78_;
		GtkLabel* _tmp79_;
#line 195 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_tmp78_ = self->priv->location_label;
#line 195 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		gtk_widget_hide ((GtkWidget*) _tmp78_);
#line 196 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_tmp79_ = self->priv->location_label;
#line 196 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp79_, TRUE);
#line 1114 "AgendaEventRow.c"
	}
#line 149 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_free0 (location);
#line 149 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_free0 (end_time_string);
#line 149 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_free0 (start_time_string);
#line 149 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_free0 (end_date_string);
#line 149 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_free0 (start_date_string);
#line 149 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_date_time_unref0 (end_date);
#line 149 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_date_time_unref0 (start_date);
#line 1130 "AgendaEventRow.c"
}


const gchar*
agenda_event_row_get_uid (AgendaEventRow* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 26 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 26 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp0_ = self->priv->_uid;
#line 26 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	result = _tmp0_;
#line 26 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	return result;
#line 1147 "AgendaEventRow.c"
}


static void
agenda_event_row_set_uid (AgendaEventRow* self,
                          const gchar* value)
{
#line 26 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_if_fail (self != NULL);
#line 26 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	if (g_strcmp0 (value, agenda_event_row_get_uid (self)) != 0) {
#line 1159 "AgendaEventRow.c"
		gchar* _tmp0_;
#line 26 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_tmp0_ = g_strdup (value);
#line 26 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_g_free0 (self->priv->_uid);
#line 26 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		self->priv->_uid = _tmp0_;
#line 26 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		g_object_notify_by_pspec ((GObject *) self, agenda_event_row_properties[AGENDA_EVENT_ROW_UID_PROPERTY]);
#line 1169 "AgendaEventRow.c"
	}
}


const gchar*
agenda_event_row_get_summary (AgendaEventRow* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 27 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 27 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp0_ = self->priv->_summary;
#line 27 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	result = _tmp0_;
#line 27 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	return result;
#line 1187 "AgendaEventRow.c"
}


static void
agenda_event_row_set_summary (AgendaEventRow* self,
                              const gchar* value)
{
#line 27 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_if_fail (self != NULL);
#line 27 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	if (g_strcmp0 (value, agenda_event_row_get_summary (self)) != 0) {
#line 1199 "AgendaEventRow.c"
		gchar* _tmp0_;
#line 27 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_tmp0_ = g_strdup (value);
#line 27 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_g_free0 (self->priv->_summary);
#line 27 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		self->priv->_summary = _tmp0_;
#line 27 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		g_object_notify_by_pspec ((GObject *) self, agenda_event_row_properties[AGENDA_EVENT_ROW_SUMMARY_PROPERTY]);
#line 1209 "AgendaEventRow.c"
	}
}


ECalComponent*
agenda_event_row_get_calevent (AgendaEventRow* self)
{
	ECalComponent* result;
	ECalComponent* _tmp0_;
#line 28 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 28 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp0_ = self->priv->_calevent;
#line 28 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	result = _tmp0_;
#line 28 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	return result;
#line 1227 "AgendaEventRow.c"
}


static void
agenda_event_row_set_calevent (AgendaEventRow* self,
                               ECalComponent* value)
{
#line 28 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_if_fail (self != NULL);
#line 28 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	if (agenda_event_row_get_calevent (self) != value) {
#line 1239 "AgendaEventRow.c"
		ECalComponent* _tmp0_;
#line 28 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 28 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_g_object_unref0 (self->priv->_calevent);
#line 28 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		self->priv->_calevent = _tmp0_;
#line 28 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		g_object_notify_by_pspec ((GObject *) self, agenda_event_row_properties[AGENDA_EVENT_ROW_CALEVENT_PROPERTY]);
#line 1249 "AgendaEventRow.c"
	}
}


gboolean
agenda_event_row_get_is_allday (AgendaEventRow* self)
{
	gboolean result;
	gboolean _tmp0_;
#line 29 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 29 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp0_ = self->priv->_is_allday;
#line 29 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	result = _tmp0_;
#line 29 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	return result;
#line 1267 "AgendaEventRow.c"
}


static void
agenda_event_row_set_is_allday (AgendaEventRow* self,
                                gboolean value)
{
#line 29 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_if_fail (self != NULL);
#line 29 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	if (agenda_event_row_get_is_allday (self) != value) {
#line 29 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		self->priv->_is_allday = value;
#line 29 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		g_object_notify_by_pspec ((GObject *) self, agenda_event_row_properties[AGENDA_EVENT_ROW_IS_ALLDAY_PROPERTY]);
#line 1283 "AgendaEventRow.c"
	}
}


gboolean
agenda_event_row_get_is_multiday (AgendaEventRow* self)
{
	gboolean result;
	gboolean _tmp0_;
#line 30 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 30 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp0_ = self->priv->_is_multiday;
#line 30 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	result = _tmp0_;
#line 30 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	return result;
#line 1301 "AgendaEventRow.c"
}


static void
agenda_event_row_set_is_multiday (AgendaEventRow* self,
                                  gboolean value)
{
#line 30 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_if_fail (self != NULL);
#line 30 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	if (agenda_event_row_get_is_multiday (self) != value) {
#line 30 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		self->priv->_is_multiday = value;
#line 30 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		g_object_notify_by_pspec ((GObject *) self, agenda_event_row_properties[AGENDA_EVENT_ROW_IS_MULTIDAY_PROPERTY]);
#line 1317 "AgendaEventRow.c"
	}
}


GtkRevealer*
agenda_event_row_get_revealer (AgendaEventRow* self)
{
	GtkRevealer* result;
	GtkRevealer* _tmp0_;
#line 31 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 31 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_tmp0_ = self->priv->_revealer;
#line 31 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	result = _tmp0_;
#line 31 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	return result;
#line 1335 "AgendaEventRow.c"
}


static void
agenda_event_row_set_revealer (AgendaEventRow* self,
                               GtkRevealer* value)
{
#line 31 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_return_if_fail (self != NULL);
#line 31 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	if (agenda_event_row_get_revealer (self) != value) {
#line 1347 "AgendaEventRow.c"
		GtkRevealer* _tmp0_;
#line 31 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 31 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		_g_object_unref0 (self->priv->_revealer);
#line 31 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		self->priv->_revealer = _tmp0_;
#line 31 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		g_object_notify_by_pspec ((GObject *) self, agenda_event_row_properties[AGENDA_EVENT_ROW_REVEALER_PROPERTY]);
#line 1357 "AgendaEventRow.c"
	}
}


static void
agenda_event_row_class_init (AgendaEventRowClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	agenda_event_row_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_type_class_add_private (klass, sizeof (AgendaEventRowPrivate));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_agenda_event_row_get_property;
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_agenda_event_row_set_property;
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	G_OBJECT_CLASS (klass)->finalize = agenda_event_row_finalize;
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), AGENDA_EVENT_ROW_UID_PROPERTY, agenda_event_row_properties[AGENDA_EVENT_ROW_UID_PROPERTY] = g_param_spec_string ("uid", "uid", "uid", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), AGENDA_EVENT_ROW_SUMMARY_PROPERTY, agenda_event_row_properties[AGENDA_EVENT_ROW_SUMMARY_PROPERTY] = g_param_spec_string ("summary", "summary", "summary", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), AGENDA_EVENT_ROW_CALEVENT_PROPERTY, agenda_event_row_properties[AGENDA_EVENT_ROW_CALEVENT_PROPERTY] = g_param_spec_object ("calevent", "calevent", "calevent", e_cal_component_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), AGENDA_EVENT_ROW_IS_ALLDAY_PROPERTY, agenda_event_row_properties[AGENDA_EVENT_ROW_IS_ALLDAY_PROPERTY] = g_param_spec_boolean ("is-allday", "is-allday", "is-allday", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), AGENDA_EVENT_ROW_IS_MULTIDAY_PROPERTY, agenda_event_row_properties[AGENDA_EVENT_ROW_IS_MULTIDAY_PROPERTY] = g_param_spec_boolean ("is-multiday", "is-multiday", "is-multiday", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), AGENDA_EVENT_ROW_REVEALER_PROPERTY, agenda_event_row_properties[AGENDA_EVENT_ROW_REVEALER_PROPERTY] = g_param_spec_object ("revealer", "revealer", "revealer", gtk_revealer_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	agenda_event_row_signals[AGENDA_EVENT_ROW_REMOVED_SIGNAL] = g_signal_new ("removed", TYPE_AGENDA_EVENT_ROW, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, e_cal_component_get_type ());
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	agenda_event_row_signals[AGENDA_EVENT_ROW_MODIFIED_SIGNAL] = g_signal_new ("modified", TYPE_AGENDA_EVENT_ROW, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, e_cal_component_get_type ());
#line 1391 "AgendaEventRow.c"
}


static void
agenda_event_row_instance_init (AgendaEventRow * self)
{
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	self->priv = AGENDA_EVENT_ROW_GET_PRIVATE (self);
#line 29 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	self->priv->_is_allday = FALSE;
#line 30 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	self->priv->_is_multiday = FALSE;
#line 1404 "AgendaEventRow.c"
}


static void
agenda_event_row_finalize (GObject * obj)
{
	AgendaEventRow * self;
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_AGENDA_EVENT_ROW, AgendaEventRow);
#line 26 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_free0 (self->priv->_uid);
#line 27 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_free0 (self->priv->_summary);
#line 28 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (self->priv->_calevent);
#line 31 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (self->priv->_revealer);
#line 33 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (self->priv->event_label);
#line 34 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (self->priv->name_label);
#line 35 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (self->priv->source_label);
#line 36 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (self->priv->datatime_label);
#line 37 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	_g_object_unref0 (self->priv->location_label);
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	G_OBJECT_CLASS (agenda_event_row_parent_class)->finalize (obj);
#line 1434 "AgendaEventRow.c"
}


GType
agenda_event_row_get_type (void)
{
	static volatile gsize agenda_event_row_type_id__volatile = 0;
	if (g_once_init_enter (&agenda_event_row_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (AgendaEventRowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) agenda_event_row_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (AgendaEventRow), 0, (GInstanceInitFunc) agenda_event_row_instance_init, NULL };
		GType agenda_event_row_type_id;
		agenda_event_row_type_id = g_type_register_static (gtk_list_box_row_get_type (), "AgendaEventRow", &g_define_type_info, 0);
		g_once_init_leave (&agenda_event_row_type_id__volatile, agenda_event_row_type_id);
	}
	return agenda_event_row_type_id__volatile;
}


static void
_vala_agenda_event_row_get_property (GObject * object,
                                     guint property_id,
                                     GValue * value,
                                     GParamSpec * pspec)
{
	AgendaEventRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_AGENDA_EVENT_ROW, AgendaEventRow);
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		case AGENDA_EVENT_ROW_UID_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		g_value_set_string (value, agenda_event_row_get_uid (self));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		case AGENDA_EVENT_ROW_SUMMARY_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		g_value_set_string (value, agenda_event_row_get_summary (self));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		case AGENDA_EVENT_ROW_CALEVENT_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		g_value_set_object (value, agenda_event_row_get_calevent (self));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		case AGENDA_EVENT_ROW_IS_ALLDAY_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		g_value_set_boolean (value, agenda_event_row_get_is_allday (self));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		case AGENDA_EVENT_ROW_IS_MULTIDAY_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		g_value_set_boolean (value, agenda_event_row_get_is_multiday (self));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		case AGENDA_EVENT_ROW_REVEALER_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		g_value_set_object (value, agenda_event_row_get_revealer (self));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		break;
#line 1498 "AgendaEventRow.c"
		default:
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		break;
#line 1504 "AgendaEventRow.c"
	}
}


static void
_vala_agenda_event_row_set_property (GObject * object,
                                     guint property_id,
                                     const GValue * value,
                                     GParamSpec * pspec)
{
	AgendaEventRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_AGENDA_EVENT_ROW, AgendaEventRow);
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		case AGENDA_EVENT_ROW_UID_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		agenda_event_row_set_uid (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		case AGENDA_EVENT_ROW_SUMMARY_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		agenda_event_row_set_summary (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		case AGENDA_EVENT_ROW_CALEVENT_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		agenda_event_row_set_calevent (self, g_value_get_object (value));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		case AGENDA_EVENT_ROW_IS_ALLDAY_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		agenda_event_row_set_is_allday (self, g_value_get_boolean (value));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		case AGENDA_EVENT_ROW_IS_MULTIDAY_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		agenda_event_row_set_is_multiday (self, g_value_get_boolean (value));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		case AGENDA_EVENT_ROW_REVEALER_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		agenda_event_row_set_revealer (self, g_value_get_object (value));
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		break;
#line 1555 "AgendaEventRow.c"
		default:
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/AgendaEventRow.vala"
		break;
#line 1561 "AgendaEventRow.c"
	}
}



