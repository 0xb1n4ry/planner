/* im-details.c generated by valac 0.40.11, the Vala compiler
 * generated from im-details.vala, do not modify */

/*
 * Copyright (C) 2010 Collabora Ltd.
 * Copyright (C) 2011 Philip Withnall
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Philip Withnall <philip.withnall@collabora.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <gio/gio.h>
#include <glib/gi18n-lib.h>


#define FOLKS_TYPE_ABSTRACT_FIELD_DETAILS (folks_abstract_field_details_get_type ())
#define FOLKS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails))
#define FOLKS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))

typedef struct _FolksAbstractFieldDetails FolksAbstractFieldDetails;
typedef struct _FolksAbstractFieldDetailsClass FolksAbstractFieldDetailsClass;
typedef struct _FolksAbstractFieldDetailsPrivate FolksAbstractFieldDetailsPrivate;

#define FOLKS_TYPE_IM_FIELD_DETAILS (folks_im_field_details_get_type ())
#define FOLKS_IM_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_IM_FIELD_DETAILS, FolksImFieldDetails))
#define FOLKS_IM_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_IM_FIELD_DETAILS, FolksImFieldDetailsClass))
#define FOLKS_IS_IM_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_IM_FIELD_DETAILS))
#define FOLKS_IS_IM_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_IM_FIELD_DETAILS))
#define FOLKS_IM_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_IM_FIELD_DETAILS, FolksImFieldDetailsClass))

typedef struct _FolksImFieldDetails FolksImFieldDetails;
typedef struct _FolksImFieldDetailsClass FolksImFieldDetailsClass;
typedef struct _FolksImFieldDetailsPrivate FolksImFieldDetailsPrivate;
enum  {
	FOLKS_IM_FIELD_DETAILS_0_PROPERTY,
	FOLKS_IM_FIELD_DETAILS_NUM_PROPERTIES
};
static GParamSpec* folks_im_field_details_properties[FOLKS_IM_FIELD_DETAILS_NUM_PROPERTIES];

#define FOLKS_TYPE_IM_DETAILS (folks_im_details_get_type ())
#define FOLKS_IM_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_IM_DETAILS, FolksImDetails))
#define FOLKS_IS_IM_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_IM_DETAILS))
#define FOLKS_IM_DETAILS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_IM_DETAILS, FolksImDetailsIface))

typedef struct _FolksImDetails FolksImDetails;
typedef struct _FolksImDetailsIface FolksImDetailsIface;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _FolksImDetailsChangeImAddressesData FolksImDetailsChangeImAddressesData;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

/**
 * Errors related to IM addresses and IM address handling.
 */
typedef enum  {
	FOLKS_IM_DETAILS_ERROR_INVALID_IM_ADDRESS
} FolksImDetailsError;
#define FOLKS_IM_DETAILS_ERROR folks_im_details_error_quark ()
struct _FolksAbstractFieldDetails {
	GObject parent_instance;
	FolksAbstractFieldDetailsPrivate * priv;
};

struct _FolksAbstractFieldDetailsClass {
	GObjectClass parent_class;
	gboolean (*equal) (FolksAbstractFieldDetails* self, FolksAbstractFieldDetails* that);
	gboolean (*parameters_equal) (FolksAbstractFieldDetails* self, FolksAbstractFieldDetails* that);
	gboolean (*values_equal) (FolksAbstractFieldDetails* self, FolksAbstractFieldDetails* that);
	guint (*hash) (FolksAbstractFieldDetails* self);
	gconstpointer (*get_value) (FolksAbstractFieldDetails* self);
	void (*set_value) (FolksAbstractFieldDetails* self, gconstpointer value);
	const gchar* (*get_id) (FolksAbstractFieldDetails* self);
	void (*set_id) (FolksAbstractFieldDetails* self, const gchar* value);
	GeeMultiMap* (*get_parameters) (FolksAbstractFieldDetails* self);
	void (*set_parameters) (FolksAbstractFieldDetails* self, GeeMultiMap* value);
};

struct _FolksImFieldDetails {
	FolksAbstractFieldDetails parent_instance;
	FolksImFieldDetailsPrivate * priv;
};

struct _FolksImFieldDetailsClass {
	FolksAbstractFieldDetailsClass parent_class;
};

typedef enum  {
	FOLKS_PROPERTY_ERROR_NOT_WRITEABLE,
	FOLKS_PROPERTY_ERROR_INVALID_VALUE,
	FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR,
	FOLKS_PROPERTY_ERROR_UNAVAILABLE
} FolksPropertyError;
#define FOLKS_PROPERTY_ERROR folks_property_error_quark ()
struct _FolksImDetailsIface {
	GTypeInterface parent_iface;
	void (*change_im_addresses) (FolksImDetails* self, GeeMultiMap* im_addresses, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_im_addresses_finish) (FolksImDetails* self, GAsyncResult* _res_, GError** error);
	GeeMultiMap* (*get_im_addresses) (FolksImDetails* self);
	void (*set_im_addresses) (FolksImDetails* self, GeeMultiMap* value);
};

struct _FolksImDetailsChangeImAddressesData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksImDetails* self;
	GeeMultiMap* im_addresses;
	GError* _tmp0_;
	GError * _inner_error_;
};


static gpointer folks_im_field_details_parent_class = NULL;

GQuark folks_im_details_error_quark (void);
GType folks_abstract_field_details_get_type (void) G_GNUC_CONST;
GType folks_im_field_details_get_type (void) G_GNUC_CONST;
FolksImFieldDetails* folks_im_field_details_new (const gchar* value,
                                                 GeeMultiMap* parameters);
FolksImFieldDetails* folks_im_field_details_construct (GType object_type,
                                                       const gchar* value,
                                                       GeeMultiMap* parameters);
FolksAbstractFieldDetails* folks_abstract_field_details_construct (GType object_type,
                                                                   GType t_type,
                                                                   GBoxedCopyFunc t_dup_func,
                                                                   GDestroyNotify t_destroy_func);
void folks_abstract_field_details_set_value (FolksAbstractFieldDetails* self,
                                             gconstpointer value);
void folks_abstract_field_details_set_parameters (FolksAbstractFieldDetails* self,
                                                  GeeMultiMap* value);
static gboolean folks_im_field_details_real_equal (FolksAbstractFieldDetails* base,
                                            FolksAbstractFieldDetails* that);
gboolean folks_abstract_field_details_equal (FolksAbstractFieldDetails* self,
                                             FolksAbstractFieldDetails* that);
static guint folks_im_field_details_real_hash (FolksAbstractFieldDetails* base);
guint folks_abstract_field_details_hash (FolksAbstractFieldDetails* self);
GQuark folks_property_error_quark (void);
GType folks_im_details_get_type (void) G_GNUC_CONST;
static void folks_im_details_real_change_im_addresses_data_free (gpointer _data);
static void folks_im_details_real_change_im_addresses_async_ready_wrapper (GObject *source_object,
                                                                    GAsyncResult *res,
                                                                    void *user_data);
static void folks_im_details_real_change_im_addresses (FolksImDetails* self,
                                                GeeMultiMap* im_addresses,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_);
void folks_im_details_change_im_addresses (FolksImDetails* self,
                                           GeeMultiMap* im_addresses,
                                           GAsyncReadyCallback _callback_,
                                           gpointer _user_data_);
void folks_im_details_change_im_addresses_finish (FolksImDetails* self,
                                                  GAsyncResult* _res_,
                                                  GError** error);
static gboolean folks_im_details_real_change_im_addresses_co (FolksImDetailsChangeImAddressesData* _data_);
gchar* folks_im_details_normalise_im_address (const gchar* im_address,
                                              const gchar* protocol,
                                              GError** error);
GeeMultiMap* folks_im_details_get_im_addresses (FolksImDetails* self);
void folks_im_details_set_im_addresses (FolksImDetails* self,
                                        GeeMultiMap* value);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


GQuark
folks_im_details_error_quark (void)
{
	return g_quark_from_static_string ("folks_im_details_error-quark");
}


/**
   * Create a new ImFieldDetails.
   *
   * @param value the value of the field, which should be a valid, non-empty
   * IM address
   * @param parameters initial parameters. See
   * {@link AbstractFieldDetails.parameters}. A ``null`` value is equivalent to
   * an empty map of parameters.
   *
   * @return a new ImFieldDetails
   *
   * @since 0.6.0
   */
FolksImFieldDetails*
folks_im_field_details_construct (GType object_type,
                                  const gchar* value,
                                  GeeMultiMap* parameters)
{
	FolksImFieldDetails * self = NULL;
#line 59 "/run/build/folks/folks/im-details.vala"
	g_return_val_if_fail (value != NULL, NULL);
#line 59 "/run/build/folks/folks/im-details.vala"
	self = (FolksImFieldDetails*) folks_abstract_field_details_construct (object_type, G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free);
#line 62 "/run/build/folks/folks/im-details.vala"
	if (g_strcmp0 (value, "") == 0) {
#line 64 "/run/build/folks/folks/im-details.vala"
		g_warning ("im-details.vala:64: Empty IM address passed to ImFieldDetails.");
#line 231 "im-details.c"
	}
#line 67 "/run/build/folks/folks/im-details.vala"
	folks_abstract_field_details_set_value ((FolksAbstractFieldDetails*) self, value);
#line 68 "/run/build/folks/folks/im-details.vala"
	if (parameters != NULL) {
#line 69 "/run/build/folks/folks/im-details.vala"
		folks_abstract_field_details_set_parameters ((FolksAbstractFieldDetails*) self, G_TYPE_CHECK_INSTANCE_CAST (parameters, GEE_TYPE_MULTI_MAP, GeeMultiMap));
#line 239 "im-details.c"
	}
#line 59 "/run/build/folks/folks/im-details.vala"
	return self;
#line 243 "im-details.c"
}


FolksImFieldDetails*
folks_im_field_details_new (const gchar* value,
                            GeeMultiMap* parameters)
{
#line 59 "/run/build/folks/folks/im-details.vala"
	return folks_im_field_details_construct (FOLKS_TYPE_IM_FIELD_DETAILS, value, parameters);
#line 253 "im-details.c"
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.0
   */
static gboolean
folks_im_field_details_real_equal (FolksAbstractFieldDetails* base,
                                   FolksAbstractFieldDetails* that)
{
	FolksImFieldDetails * self;
	gboolean result = FALSE;
#line 77 "/run/build/folks/folks/im-details.vala"
	self = (FolksImFieldDetails*) base;
#line 77 "/run/build/folks/folks/im-details.vala"
	g_return_val_if_fail (that != NULL, FALSE);
#line 79 "/run/build/folks/folks/im-details.vala"
	result = FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (folks_im_field_details_parent_class)->equal (G_TYPE_CHECK_INSTANCE_CAST (self, FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails), that);
#line 79 "/run/build/folks/folks/im-details.vala"
	return result;
#line 276 "im-details.c"
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.0
   */
static guint
folks_im_field_details_real_hash (FolksAbstractFieldDetails* base)
{
	FolksImFieldDetails * self;
	guint result = 0U;
#line 87 "/run/build/folks/folks/im-details.vala"
	self = (FolksImFieldDetails*) base;
#line 89 "/run/build/folks/folks/im-details.vala"
	result = FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (folks_im_field_details_parent_class)->hash (G_TYPE_CHECK_INSTANCE_CAST (self, FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails));
#line 89 "/run/build/folks/folks/im-details.vala"
	return result;
#line 296 "im-details.c"
}


static void
folks_im_field_details_class_init (FolksImFieldDetailsClass * klass)
{
#line 44 "/run/build/folks/folks/im-details.vala"
	folks_im_field_details_parent_class = g_type_class_peek_parent (klass);
#line 44 "/run/build/folks/folks/im-details.vala"
	((FolksAbstractFieldDetailsClass *) klass)->equal = (gboolean (*) (FolksAbstractFieldDetails *, FolksAbstractFieldDetails*)) folks_im_field_details_real_equal;
#line 44 "/run/build/folks/folks/im-details.vala"
	((FolksAbstractFieldDetailsClass *) klass)->hash = (guint (*) (FolksAbstractFieldDetails *)) folks_im_field_details_real_hash;
#line 309 "im-details.c"
}


static void
folks_im_field_details_instance_init (FolksImFieldDetails * self)
{
}


/**
 * Object representing an IM address value that can have some parameters
 * associated with it.
 *
 * See {@link Folks.AbstractFieldDetails}.
 *
 * @since 0.6.0
 */
GType
folks_im_field_details_get_type (void)
{
	static volatile gsize folks_im_field_details_type_id__volatile = 0;
	if (g_once_init_enter (&folks_im_field_details_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksImFieldDetailsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_im_field_details_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksImFieldDetails), 0, (GInstanceInitFunc) folks_im_field_details_instance_init, NULL };
		GType folks_im_field_details_type_id;
		folks_im_field_details_type_id = g_type_register_static (FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, "FolksImFieldDetails", &g_define_type_info, 0);
		g_once_init_leave (&folks_im_field_details_type_id__volatile, folks_im_field_details_type_id);
	}
	return folks_im_field_details_type_id__volatile;
}


static void
folks_im_details_real_change_im_addresses_data_free (gpointer _data)
{
	FolksImDetailsChangeImAddressesData* _data_;
	_data_ = _data;
#line 98 "/run/build/folks/folks/im-details.vala"
	_g_object_unref0 (_data_->im_addresses);
#line 98 "/run/build/folks/folks/im-details.vala"
	_g_object_unref0 (_data_->self);
#line 98 "/run/build/folks/folks/im-details.vala"
	g_slice_free (FolksImDetailsChangeImAddressesData, _data_);
#line 352 "im-details.c"
}


static void
folks_im_details_real_change_im_addresses_async_ready_wrapper (GObject *source_object,
                                                               GAsyncResult *res,
                                                               void *user_data)
{
	FolksImDetailsChangeImAddressesData* _task_data_;
#line 98 "/run/build/folks/folks/im-details.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 98 "/run/build/folks/folks/im-details.vala"
	if (_task_data_->_callback_ != NULL) {
#line 98 "/run/build/folks/folks/im-details.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 368 "im-details.c"
	}
#line 98 "/run/build/folks/folks/im-details.vala"
	_task_data_->_task_complete_ = TRUE;
#line 372 "im-details.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 98 "/run/build/folks/folks/im-details.vala"
	return self ? g_object_ref (self) : NULL;
#line 381 "im-details.c"
}


static void
folks_im_details_real_change_im_addresses (FolksImDetails* self,
                                           GeeMultiMap* im_addresses,
                                           GAsyncReadyCallback _callback_,
                                           gpointer _user_data_)
{
	FolksImDetailsChangeImAddressesData* _data_;
	FolksImDetails* _tmp0_;
	GeeMultiMap* _tmp1_;
#line 98 "/run/build/folks/folks/im-details.vala"
	_data_ = g_slice_new0 (FolksImDetailsChangeImAddressesData);
#line 98 "/run/build/folks/folks/im-details.vala"
	_data_->_callback_ = _callback_;
#line 98 "/run/build/folks/folks/im-details.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_im_details_real_change_im_addresses_async_ready_wrapper, _user_data_);
#line 98 "/run/build/folks/folks/im-details.vala"
	if (_callback_ == NULL) {
#line 98 "/run/build/folks/folks/im-details.vala"
		_data_->_task_complete_ = TRUE;
#line 404 "im-details.c"
	}
#line 98 "/run/build/folks/folks/im-details.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_im_details_real_change_im_addresses_data_free);
#line 98 "/run/build/folks/folks/im-details.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 98 "/run/build/folks/folks/im-details.vala"
	_data_->self = _tmp0_;
#line 98 "/run/build/folks/folks/im-details.vala"
	_tmp1_ = _g_object_ref0 (im_addresses);
#line 98 "/run/build/folks/folks/im-details.vala"
	_g_object_unref0 (_data_->im_addresses);
#line 98 "/run/build/folks/folks/im-details.vala"
	_data_->im_addresses = _tmp1_;
#line 98 "/run/build/folks/folks/im-details.vala"
	folks_im_details_real_change_im_addresses_co (_data_);
#line 420 "im-details.c"
}


static void
folks_im_details_real_change_im_addresses_finish (FolksImDetails* self,
                                                  GAsyncResult* _res_,
                                                  GError** error)
{
	FolksImDetailsChangeImAddressesData* _data_;
#line 98 "/run/build/folks/folks/im-details.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 98 "/run/build/folks/folks/im-details.vala"
	if (NULL == _data_) {
#line 98 "/run/build/folks/folks/im-details.vala"
		return;
#line 436 "im-details.c"
	}
}


/**
   * Change the contact's set of IM addresses.
   *
   * It's preferred to call this rather than setting
   * {@link ImDetails.im_addresses} directly, as this method gives error
   * notification and will only return once the IM addresses have been written
   * to the relevant backing store (or the operation's failed).
   *
   * @param im_addresses the new map of protocols to IM addresses
   * @throws PropertyError if setting the IM addresses failed
   * @since 0.6.2
   */
static gboolean
folks_im_details_real_change_im_addresses_co (FolksImDetailsChangeImAddressesData* _data_)
{
#line 131 "/run/build/folks/folks/im-details.vala"
	switch (_data_->_state_) {
#line 131 "/run/build/folks/folks/im-details.vala"
		case 0:
#line 460 "im-details.c"
		goto _state_0;
		default:
#line 131 "/run/build/folks/folks/im-details.vala"
		g_assert_not_reached ();
#line 465 "im-details.c"
	}
	_state_0:
#line 135 "/run/build/folks/folks/im-details.vala"
	_data_->_tmp0_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_NOT_WRITEABLE, _ ("IM addresses are not writeable on this contact."));
#line 135 "/run/build/folks/folks/im-details.vala"
	_data_->_inner_error_ = _data_->_tmp0_;
#line 135 "/run/build/folks/folks/im-details.vala"
	if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 135 "/run/build/folks/folks/im-details.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 135 "/run/build/folks/folks/im-details.vala"
		g_object_unref (_data_->_async_result);
#line 135 "/run/build/folks/folks/im-details.vala"
		return FALSE;
#line 480 "im-details.c"
	} else {
#line 135 "/run/build/folks/folks/im-details.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 135 "/run/build/folks/folks/im-details.vala"
		g_clear_error (&_data_->_inner_error_);
#line 135 "/run/build/folks/folks/im-details.vala"
		g_object_unref (_data_->_async_result);
#line 135 "/run/build/folks/folks/im-details.vala"
		return FALSE;
#line 490 "im-details.c"
	}
#line 131 "/run/build/folks/folks/im-details.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 131 "/run/build/folks/folks/im-details.vala"
	if (_data_->_state_ != 0) {
#line 131 "/run/build/folks/folks/im-details.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 131 "/run/build/folks/folks/im-details.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 500 "im-details.c"
		}
	}
#line 131 "/run/build/folks/folks/im-details.vala"
	g_object_unref (_data_->_async_result);
#line 131 "/run/build/folks/folks/im-details.vala"
	return FALSE;
#line 507 "im-details.c"
}


void
folks_im_details_change_im_addresses (FolksImDetails* self,
                                      GeeMultiMap* im_addresses,
                                      GAsyncReadyCallback _callback_,
                                      gpointer _user_data_)
{
#line 98 "/run/build/folks/folks/im-details.vala"
	FOLKS_IM_DETAILS_GET_INTERFACE (self)->change_im_addresses (self, im_addresses, _callback_, _user_data_);
#line 519 "im-details.c"
}


void
folks_im_details_change_im_addresses_finish (FolksImDetails* self,
                                             GAsyncResult* _res_,
                                             GError** error)
{
#line 98 "/run/build/folks/folks/im-details.vala"
	FOLKS_IM_DETAILS_GET_INTERFACE (self)->change_im_addresses_finish (self, _res_, error);
#line 530 "im-details.c"
}


/**
   * Normalise an IM address so that it's suitable for string comparison.
   *
   * IM addresses for various protocols can be represented in different ways,
   * only one of which is canonical. In order to allow simple string comparisons
   * of IM addresses to work, the IM addresses must be normalised beforehand.
   *
   * If the provided IM address is invalid,
   * {@link Folks.ImDetailsError.INVALID_IM_ADDRESS} will be thrown. Note that
   * this isn't guaranteed to be thrown for all invalid addresses, but if it is
   * thrown, the address is guaranteed to be invalid.
   *
   * @param im_address the address to normalise
   * @param protocol the protocol of this im_address
   *
   * @since 0.2.0
   * @throws Folks.ImDetailsError if the provided IM address was invalid
   */
static gchar*
string_replace (const gchar* self,
                const gchar* old,
                const gchar* replacement)
{
	gchar* result = NULL;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	GError * _inner_error_ = NULL;
#line 1477 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1477 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (old != NULL, NULL);
#line 1477 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (replacement != NULL, NULL);
#line 1478 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if ((*((gchar*) self)) == '\0') {
#line 1478 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp1_ = TRUE;
#line 571 "im-details.c"
	} else {
#line 1478 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp1_ = (*((gchar*) old)) == '\0';
#line 575 "im-details.c"
	}
#line 1478 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (_tmp1_) {
#line 1478 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp0_ = TRUE;
#line 581 "im-details.c"
	} else {
#line 1478 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp0_ = g_strcmp0 (old, replacement) == 0;
#line 585 "im-details.c"
	}
#line 1478 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (_tmp0_) {
#line 589 "im-details.c"
		gchar* _tmp2_;
#line 1479 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp2_ = g_strdup (self);
#line 1479 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = _tmp2_;
#line 1479 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 597 "im-details.c"
	}
	{
		GRegex* regex = NULL;
		gchar* _tmp3_;
		gchar* _tmp4_;
		GRegex* _tmp5_;
		GRegex* _tmp6_;
		gchar* _tmp7_ = NULL;
		GRegex* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp3_ = g_regex_escape_string (old, -1);
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp4_ = _tmp3_;
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp5_ = g_regex_new (_tmp4_, 0, 0, &_inner_error_);
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp6_ = _tmp5_;
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_g_free0 (_tmp4_);
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		regex = _tmp6_;
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			if (_inner_error_->domain == G_REGEX_ERROR) {
#line 625 "im-details.c"
				goto __catch9_g_regex_error;
			}
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			g_clear_error (&_inner_error_);
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			return NULL;
#line 634 "im-details.c"
		}
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp8_ = regex;
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp9_ = g_regex_replace_literal (_tmp8_, self, (gssize) -1, 0, replacement, 0, &_inner_error_);
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp7_ = _tmp9_;
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			_g_regex_unref0 (regex);
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			if (_inner_error_->domain == G_REGEX_ERROR) {
#line 648 "im-details.c"
				goto __catch9_g_regex_error;
			}
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			_g_regex_unref0 (regex);
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			g_clear_error (&_inner_error_);
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			return NULL;
#line 659 "im-details.c"
		}
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp10_ = _tmp7_;
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp7_ = NULL;
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = _tmp10_;
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_g_free0 (_tmp7_);
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_g_regex_unref0 (regex);
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 673 "im-details.c"
	}
	goto __finally9;
	__catch9_g_regex_error:
	{
		GError* e = NULL;
#line 1481 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		e = _inner_error_;
#line 1481 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_inner_error_ = NULL;
#line 1485 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		g_assert_not_reached ();
#line 1481 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_g_error_free0 (e);
#line 687 "im-details.c"
	}
	__finally9:
#line 1481 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 1481 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 1481 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		g_clear_error (&_inner_error_);
#line 1481 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return NULL;
#line 698 "im-details.c"
	}
}


gchar*
folks_im_details_normalise_im_address (const gchar* im_address,
                                       const gchar* protocol,
                                       GError** error)
{
	gchar* result = NULL;
	gboolean _tmp0_ = FALSE;
	GError * _inner_error_ = NULL;
#line 157 "/run/build/folks/folks/im-details.vala"
	g_return_val_if_fail (im_address != NULL, NULL);
#line 157 "/run/build/folks/folks/im-details.vala"
	g_return_val_if_fail (protocol != NULL, NULL);
#line 160 "/run/build/folks/folks/im-details.vala"
	if (g_strcmp0 (protocol, "aim") == 0) {
#line 160 "/run/build/folks/folks/im-details.vala"
		_tmp0_ = TRUE;
#line 719 "im-details.c"
	} else {
#line 160 "/run/build/folks/folks/im-details.vala"
		_tmp0_ = g_strcmp0 (protocol, "myspace") == 0;
#line 723 "im-details.c"
	}
#line 160 "/run/build/folks/folks/im-details.vala"
	if (_tmp0_) {
#line 727 "im-details.c"
		gchar* _tmp1_;
		gchar* _tmp2_;
		gchar* _tmp3_;
		gchar* _tmp4_;
		gchar* _tmp5_;
		gchar* _tmp6_;
#line 162 "/run/build/folks/folks/im-details.vala"
		_tmp1_ = string_replace (im_address, " ", "");
#line 162 "/run/build/folks/folks/im-details.vala"
		_tmp2_ = _tmp1_;
#line 162 "/run/build/folks/folks/im-details.vala"
		_tmp3_ = g_utf8_strdown (_tmp2_, (gssize) -1);
#line 162 "/run/build/folks/folks/im-details.vala"
		_tmp4_ = _tmp3_;
#line 162 "/run/build/folks/folks/im-details.vala"
		_tmp5_ = g_utf8_normalize (_tmp4_, (gssize) -1, G_NORMALIZE_DEFAULT);
#line 162 "/run/build/folks/folks/im-details.vala"
		_tmp6_ = _tmp5_;
#line 162 "/run/build/folks/folks/im-details.vala"
		_g_free0 (_tmp4_);
#line 162 "/run/build/folks/folks/im-details.vala"
		_g_free0 (_tmp2_);
#line 162 "/run/build/folks/folks/im-details.vala"
		result = _tmp6_;
#line 162 "/run/build/folks/folks/im-details.vala"
		return result;
#line 754 "im-details.c"
	} else {
		gboolean _tmp7_ = FALSE;
		gboolean _tmp8_ = FALSE;
		gboolean _tmp9_ = FALSE;
#line 164 "/run/build/folks/folks/im-details.vala"
		if (g_strcmp0 (protocol, "irc") == 0) {
#line 164 "/run/build/folks/folks/im-details.vala"
			_tmp9_ = TRUE;
#line 763 "im-details.c"
		} else {
#line 164 "/run/build/folks/folks/im-details.vala"
			_tmp9_ = g_strcmp0 (protocol, "yahoo") == 0;
#line 767 "im-details.c"
		}
#line 164 "/run/build/folks/folks/im-details.vala"
		if (_tmp9_) {
#line 164 "/run/build/folks/folks/im-details.vala"
			_tmp8_ = TRUE;
#line 773 "im-details.c"
		} else {
#line 165 "/run/build/folks/folks/im-details.vala"
			_tmp8_ = g_strcmp0 (protocol, "yahoojp") == 0;
#line 777 "im-details.c"
		}
#line 164 "/run/build/folks/folks/im-details.vala"
		if (_tmp8_) {
#line 164 "/run/build/folks/folks/im-details.vala"
			_tmp7_ = TRUE;
#line 783 "im-details.c"
		} else {
#line 165 "/run/build/folks/folks/im-details.vala"
			_tmp7_ = g_strcmp0 (protocol, "groupwise") == 0;
#line 787 "im-details.c"
		}
#line 164 "/run/build/folks/folks/im-details.vala"
		if (_tmp7_) {
#line 791 "im-details.c"
			gchar* _tmp10_;
			gchar* _tmp11_;
			gchar* _tmp12_;
			gchar* _tmp13_;
#line 167 "/run/build/folks/folks/im-details.vala"
			_tmp10_ = g_utf8_strdown (im_address, (gssize) -1);
#line 167 "/run/build/folks/folks/im-details.vala"
			_tmp11_ = _tmp10_;
#line 167 "/run/build/folks/folks/im-details.vala"
			_tmp12_ = g_utf8_normalize (_tmp11_, (gssize) -1, G_NORMALIZE_DEFAULT);
#line 167 "/run/build/folks/folks/im-details.vala"
			_tmp13_ = _tmp12_;
#line 167 "/run/build/folks/folks/im-details.vala"
			_g_free0 (_tmp11_);
#line 167 "/run/build/folks/folks/im-details.vala"
			result = _tmp13_;
#line 167 "/run/build/folks/folks/im-details.vala"
			return result;
#line 810 "im-details.c"
		} else {
#line 169 "/run/build/folks/folks/im-details.vala"
			if (g_strcmp0 (protocol, "jabber") == 0) {
#line 814 "im-details.c"
				gchar** parts = NULL;
				gchar** _tmp14_;
				gchar** _tmp15_;
				gint parts_length1;
				gint _parts_size_;
				gchar** _tmp16_;
				gint _tmp16__length1;
				gchar* resource = NULL;
				gchar** _tmp18_;
				gint _tmp18__length1;
				gchar** _tmp22_;
				gint _tmp22__length1;
				const gchar* _tmp23_;
				gchar** _tmp24_;
				gchar** _tmp25_;
				gchar** _tmp26_;
				gint _tmp26__length1;
				gchar* node = NULL;
				gchar* _domain = NULL;
				gchar** _tmp28_;
				gint _tmp28__length1;
				gboolean _tmp38_ = FALSE;
				gboolean _tmp39_ = FALSE;
				gboolean _tmp40_ = FALSE;
				const gchar* _tmp41_;
				gchar* domain = NULL;
				const gchar* _tmp50_;
				gchar* _tmp51_;
				const gchar* _tmp52_;
				gchar* normalised = NULL;
				gboolean _tmp55_ = FALSE;
				const gchar* _tmp56_;
				const gchar* _tmp71_;
				gchar* _tmp72_;
#line 172 "/run/build/folks/folks/im-details.vala"
				_tmp15_ = _tmp14_ = g_strsplit (im_address, "/", 2);
#line 172 "/run/build/folks/folks/im-details.vala"
				parts = _tmp15_;
#line 172 "/run/build/folks/folks/im-details.vala"
				parts_length1 = _vala_array_length (_tmp14_);
#line 172 "/run/build/folks/folks/im-details.vala"
				_parts_size_ = parts_length1;
#line 174 "/run/build/folks/folks/im-details.vala"
				_tmp16_ = parts;
#line 174 "/run/build/folks/folks/im-details.vala"
				_tmp16__length1 = parts_length1;
#line 174 "/run/build/folks/folks/im-details.vala"
				if (_tmp16__length1 < 1) {
#line 863 "im-details.c"
					GError* _tmp17_;
#line 176 "/run/build/folks/folks/im-details.vala"
					_tmp17_ = g_error_new (FOLKS_IM_DETAILS_ERROR, FOLKS_IM_DETAILS_ERROR_INVALID_IM_ADDRESS, _ ("The IM address ‘%s’ could not be understood."), im_address);
#line 176 "/run/build/folks/folks/im-details.vala"
					_inner_error_ = _tmp17_;
#line 176 "/run/build/folks/folks/im-details.vala"
					if (_inner_error_->domain == FOLKS_IM_DETAILS_ERROR) {
#line 176 "/run/build/folks/folks/im-details.vala"
						g_propagate_error (error, _inner_error_);
#line 176 "/run/build/folks/folks/im-details.vala"
						parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 176 "/run/build/folks/folks/im-details.vala"
						return NULL;
#line 877 "im-details.c"
					} else {
#line 176 "/run/build/folks/folks/im-details.vala"
						parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 176 "/run/build/folks/folks/im-details.vala"
						g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 176 "/run/build/folks/folks/im-details.vala"
						g_clear_error (&_inner_error_);
#line 176 "/run/build/folks/folks/im-details.vala"
						return NULL;
#line 887 "im-details.c"
					}
				}
#line 182 "/run/build/folks/folks/im-details.vala"
				resource = NULL;
#line 183 "/run/build/folks/folks/im-details.vala"
				_tmp18_ = parts;
#line 183 "/run/build/folks/folks/im-details.vala"
				_tmp18__length1 = parts_length1;
#line 183 "/run/build/folks/folks/im-details.vala"
				if (_tmp18__length1 == 2) {
#line 898 "im-details.c"
					gchar** _tmp19_;
					gint _tmp19__length1;
					const gchar* _tmp20_;
					gchar* _tmp21_;
#line 184 "/run/build/folks/folks/im-details.vala"
					_tmp19_ = parts;
#line 184 "/run/build/folks/folks/im-details.vala"
					_tmp19__length1 = parts_length1;
#line 184 "/run/build/folks/folks/im-details.vala"
					_tmp20_ = _tmp19_[1];
#line 184 "/run/build/folks/folks/im-details.vala"
					_tmp21_ = g_strdup (_tmp20_);
#line 184 "/run/build/folks/folks/im-details.vala"
					_g_free0 (resource);
#line 184 "/run/build/folks/folks/im-details.vala"
					resource = _tmp21_;
#line 915 "im-details.c"
				}
#line 186 "/run/build/folks/folks/im-details.vala"
				_tmp22_ = parts;
#line 186 "/run/build/folks/folks/im-details.vala"
				_tmp22__length1 = parts_length1;
#line 186 "/run/build/folks/folks/im-details.vala"
				_tmp23_ = _tmp22_[0];
#line 186 "/run/build/folks/folks/im-details.vala"
				_tmp25_ = _tmp24_ = g_strsplit (_tmp23_, "@", 2);
#line 186 "/run/build/folks/folks/im-details.vala"
				parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 186 "/run/build/folks/folks/im-details.vala"
				parts = _tmp25_;
#line 186 "/run/build/folks/folks/im-details.vala"
				parts_length1 = _vala_array_length (_tmp24_);
#line 186 "/run/build/folks/folks/im-details.vala"
				_parts_size_ = parts_length1;
#line 188 "/run/build/folks/folks/im-details.vala"
				_tmp26_ = parts;
#line 188 "/run/build/folks/folks/im-details.vala"
				_tmp26__length1 = parts_length1;
#line 188 "/run/build/folks/folks/im-details.vala"
				if (_tmp26__length1 < 1) {
#line 939 "im-details.c"
					GError* _tmp27_;
#line 190 "/run/build/folks/folks/im-details.vala"
					_tmp27_ = g_error_new (FOLKS_IM_DETAILS_ERROR, FOLKS_IM_DETAILS_ERROR_INVALID_IM_ADDRESS, _ ("The IM address ‘%s’ could not be understood."), im_address);
#line 190 "/run/build/folks/folks/im-details.vala"
					_inner_error_ = _tmp27_;
#line 190 "/run/build/folks/folks/im-details.vala"
					if (_inner_error_->domain == FOLKS_IM_DETAILS_ERROR) {
#line 190 "/run/build/folks/folks/im-details.vala"
						g_propagate_error (error, _inner_error_);
#line 190 "/run/build/folks/folks/im-details.vala"
						_g_free0 (resource);
#line 190 "/run/build/folks/folks/im-details.vala"
						parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 190 "/run/build/folks/folks/im-details.vala"
						return NULL;
#line 955 "im-details.c"
					} else {
#line 190 "/run/build/folks/folks/im-details.vala"
						_g_free0 (resource);
#line 190 "/run/build/folks/folks/im-details.vala"
						parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 190 "/run/build/folks/folks/im-details.vala"
						g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 190 "/run/build/folks/folks/im-details.vala"
						g_clear_error (&_inner_error_);
#line 190 "/run/build/folks/folks/im-details.vala"
						return NULL;
#line 967 "im-details.c"
					}
				}
#line 197 "/run/build/folks/folks/im-details.vala"
				_tmp28_ = parts;
#line 197 "/run/build/folks/folks/im-details.vala"
				_tmp28__length1 = parts_length1;
#line 197 "/run/build/folks/folks/im-details.vala"
				if (_tmp28__length1 == 2) {
#line 976 "im-details.c"
					gchar** _tmp29_;
					gint _tmp29__length1;
					const gchar* _tmp30_;
					gchar* _tmp31_;
					gchar** _tmp32_;
					gint _tmp32__length1;
					const gchar* _tmp33_;
					gchar* _tmp34_;
#line 199 "/run/build/folks/folks/im-details.vala"
					_tmp29_ = parts;
#line 199 "/run/build/folks/folks/im-details.vala"
					_tmp29__length1 = parts_length1;
#line 199 "/run/build/folks/folks/im-details.vala"
					_tmp30_ = _tmp29_[0];
#line 199 "/run/build/folks/folks/im-details.vala"
					_tmp31_ = g_strdup (_tmp30_);
#line 199 "/run/build/folks/folks/im-details.vala"
					_g_free0 (node);
#line 199 "/run/build/folks/folks/im-details.vala"
					node = _tmp31_;
#line 200 "/run/build/folks/folks/im-details.vala"
					_tmp32_ = parts;
#line 200 "/run/build/folks/folks/im-details.vala"
					_tmp32__length1 = parts_length1;
#line 200 "/run/build/folks/folks/im-details.vala"
					_tmp33_ = _tmp32_[1];
#line 200 "/run/build/folks/folks/im-details.vala"
					_tmp34_ = g_strdup (_tmp33_);
#line 200 "/run/build/folks/folks/im-details.vala"
					_g_free0 (_domain);
#line 200 "/run/build/folks/folks/im-details.vala"
					_domain = _tmp34_;
#line 1009 "im-details.c"
				} else {
					gchar** _tmp35_;
					gint _tmp35__length1;
					const gchar* _tmp36_;
					gchar* _tmp37_;
#line 204 "/run/build/folks/folks/im-details.vala"
					_g_free0 (node);
#line 204 "/run/build/folks/folks/im-details.vala"
					node = NULL;
#line 205 "/run/build/folks/folks/im-details.vala"
					_tmp35_ = parts;
#line 205 "/run/build/folks/folks/im-details.vala"
					_tmp35__length1 = parts_length1;
#line 205 "/run/build/folks/folks/im-details.vala"
					_tmp36_ = _tmp35_[0];
#line 205 "/run/build/folks/folks/im-details.vala"
					_tmp37_ = g_strdup (_tmp36_);
#line 205 "/run/build/folks/folks/im-details.vala"
					_g_free0 (_domain);
#line 205 "/run/build/folks/folks/im-details.vala"
					_domain = _tmp37_;
#line 1031 "im-details.c"
				}
#line 208 "/run/build/folks/folks/im-details.vala"
				_tmp41_ = node;
#line 208 "/run/build/folks/folks/im-details.vala"
				if (_tmp41_ != NULL) {
#line 1037 "im-details.c"
					const gchar* _tmp42_;
#line 208 "/run/build/folks/folks/im-details.vala"
					_tmp42_ = node;
#line 208 "/run/build/folks/folks/im-details.vala"
					_tmp40_ = g_strcmp0 (_tmp42_, "") == 0;
#line 1043 "im-details.c"
				} else {
#line 208 "/run/build/folks/folks/im-details.vala"
					_tmp40_ = FALSE;
#line 1047 "im-details.c"
				}
#line 208 "/run/build/folks/folks/im-details.vala"
				if (_tmp40_) {
#line 208 "/run/build/folks/folks/im-details.vala"
					_tmp39_ = TRUE;
#line 1053 "im-details.c"
				} else {
					gboolean _tmp43_ = FALSE;
					const gchar* _tmp44_;
#line 209 "/run/build/folks/folks/im-details.vala"
					_tmp44_ = _domain;
#line 209 "/run/build/folks/folks/im-details.vala"
					if (_tmp44_ == NULL) {
#line 209 "/run/build/folks/folks/im-details.vala"
						_tmp43_ = TRUE;
#line 1063 "im-details.c"
					} else {
						const gchar* _tmp45_;
#line 209 "/run/build/folks/folks/im-details.vala"
						_tmp45_ = _domain;
#line 209 "/run/build/folks/folks/im-details.vala"
						_tmp43_ = g_strcmp0 (_tmp45_, "") == 0;
#line 1070 "im-details.c"
					}
#line 209 "/run/build/folks/folks/im-details.vala"
					_tmp39_ = _tmp43_;
#line 1074 "im-details.c"
				}
#line 208 "/run/build/folks/folks/im-details.vala"
				if (_tmp39_) {
#line 208 "/run/build/folks/folks/im-details.vala"
					_tmp38_ = TRUE;
#line 1080 "im-details.c"
				} else {
					gboolean _tmp46_ = FALSE;
					const gchar* _tmp47_;
#line 210 "/run/build/folks/folks/im-details.vala"
					_tmp47_ = resource;
#line 210 "/run/build/folks/folks/im-details.vala"
					if (_tmp47_ != NULL) {
#line 1088 "im-details.c"
						const gchar* _tmp48_;
#line 210 "/run/build/folks/folks/im-details.vala"
						_tmp48_ = resource;
#line 210 "/run/build/folks/folks/im-details.vala"
						_tmp46_ = g_strcmp0 (_tmp48_, "") == 0;
#line 1094 "im-details.c"
					} else {
#line 210 "/run/build/folks/folks/im-details.vala"
						_tmp46_ = FALSE;
#line 1098 "im-details.c"
					}
#line 210 "/run/build/folks/folks/im-details.vala"
					_tmp38_ = _tmp46_;
#line 1102 "im-details.c"
				}
#line 208 "/run/build/folks/folks/im-details.vala"
				if (_tmp38_) {
#line 1106 "im-details.c"
					GError* _tmp49_;
#line 212 "/run/build/folks/folks/im-details.vala"
					_tmp49_ = g_error_new (FOLKS_IM_DETAILS_ERROR, FOLKS_IM_DETAILS_ERROR_INVALID_IM_ADDRESS, _ ("The IM address ‘%s’ could not be understood."), im_address);
#line 212 "/run/build/folks/folks/im-details.vala"
					_inner_error_ = _tmp49_;
#line 212 "/run/build/folks/folks/im-details.vala"
					if (_inner_error_->domain == FOLKS_IM_DETAILS_ERROR) {
#line 212 "/run/build/folks/folks/im-details.vala"
						g_propagate_error (error, _inner_error_);
#line 212 "/run/build/folks/folks/im-details.vala"
						_g_free0 (_domain);
#line 212 "/run/build/folks/folks/im-details.vala"
						_g_free0 (node);
#line 212 "/run/build/folks/folks/im-details.vala"
						_g_free0 (resource);
#line 212 "/run/build/folks/folks/im-details.vala"
						parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 212 "/run/build/folks/folks/im-details.vala"
						return NULL;
#line 1126 "im-details.c"
					} else {
#line 212 "/run/build/folks/folks/im-details.vala"
						_g_free0 (_domain);
#line 212 "/run/build/folks/folks/im-details.vala"
						_g_free0 (node);
#line 212 "/run/build/folks/folks/im-details.vala"
						_g_free0 (resource);
#line 212 "/run/build/folks/folks/im-details.vala"
						parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 212 "/run/build/folks/folks/im-details.vala"
						g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 212 "/run/build/folks/folks/im-details.vala"
						g_clear_error (&_inner_error_);
#line 212 "/run/build/folks/folks/im-details.vala"
						return NULL;
#line 1142 "im-details.c"
					}
				}
#line 218 "/run/build/folks/folks/im-details.vala"
				_tmp50_ = _domain;
#line 218 "/run/build/folks/folks/im-details.vala"
				_tmp51_ = g_utf8_strdown ((const gchar*) _tmp50_, (gssize) -1);
#line 218 "/run/build/folks/folks/im-details.vala"
				domain = _tmp51_;
#line 219 "/run/build/folks/folks/im-details.vala"
				_tmp52_ = node;
#line 219 "/run/build/folks/folks/im-details.vala"
				if (_tmp52_ != NULL) {
#line 1155 "im-details.c"
					const gchar* _tmp53_;
					gchar* _tmp54_;
#line 220 "/run/build/folks/folks/im-details.vala"
					_tmp53_ = node;
#line 220 "/run/build/folks/folks/im-details.vala"
					_tmp54_ = g_utf8_strdown ((const gchar*) _tmp53_, (gssize) -1);
#line 220 "/run/build/folks/folks/im-details.vala"
					_g_free0 (node);
#line 220 "/run/build/folks/folks/im-details.vala"
					node = _tmp54_;
#line 1166 "im-details.c"
				}
#line 223 "/run/build/folks/folks/im-details.vala"
				normalised = NULL;
#line 225 "/run/build/folks/folks/im-details.vala"
				_tmp56_ = node;
#line 225 "/run/build/folks/folks/im-details.vala"
				if (_tmp56_ != NULL) {
#line 1174 "im-details.c"
					const gchar* _tmp57_;
#line 225 "/run/build/folks/folks/im-details.vala"
					_tmp57_ = resource;
#line 225 "/run/build/folks/folks/im-details.vala"
					_tmp55_ = _tmp57_ != NULL;
#line 1180 "im-details.c"
				} else {
#line 225 "/run/build/folks/folks/im-details.vala"
					_tmp55_ = FALSE;
#line 1184 "im-details.c"
				}
#line 225 "/run/build/folks/folks/im-details.vala"
				if (_tmp55_) {
#line 1188 "im-details.c"
					const gchar* _tmp58_;
					const gchar* _tmp59_;
					const gchar* _tmp60_;
					gchar* _tmp61_;
#line 227 "/run/build/folks/folks/im-details.vala"
					_tmp58_ = node;
#line 227 "/run/build/folks/folks/im-details.vala"
					_tmp59_ = domain;
#line 227 "/run/build/folks/folks/im-details.vala"
					_tmp60_ = resource;
#line 227 "/run/build/folks/folks/im-details.vala"
					_tmp61_ = g_strdup_printf ("%s@%s/%s", (const gchar*) _tmp58_, _tmp59_, (const gchar*) _tmp60_);
#line 227 "/run/build/folks/folks/im-details.vala"
					_g_free0 (normalised);
#line 227 "/run/build/folks/folks/im-details.vala"
					normalised = _tmp61_;
#line 1205 "im-details.c"
				} else {
					const gchar* _tmp62_;
#line 229 "/run/build/folks/folks/im-details.vala"
					_tmp62_ = node;
#line 229 "/run/build/folks/folks/im-details.vala"
					if (_tmp62_ != NULL) {
#line 1212 "im-details.c"
						const gchar* _tmp63_;
						const gchar* _tmp64_;
						gchar* _tmp65_;
#line 231 "/run/build/folks/folks/im-details.vala"
						_tmp63_ = node;
#line 231 "/run/build/folks/folks/im-details.vala"
						_tmp64_ = domain;
#line 231 "/run/build/folks/folks/im-details.vala"
						_tmp65_ = g_strdup_printf ("%s@%s", (const gchar*) _tmp63_, _tmp64_);
#line 231 "/run/build/folks/folks/im-details.vala"
						_g_free0 (normalised);
#line 231 "/run/build/folks/folks/im-details.vala"
						normalised = _tmp65_;
#line 1226 "im-details.c"
					} else {
						const gchar* _tmp66_;
#line 233 "/run/build/folks/folks/im-details.vala"
						_tmp66_ = resource;
#line 233 "/run/build/folks/folks/im-details.vala"
						if (_tmp66_ != NULL) {
#line 1233 "im-details.c"
							const gchar* _tmp67_;
							const gchar* _tmp68_;
							gchar* _tmp69_;
#line 235 "/run/build/folks/folks/im-details.vala"
							_tmp67_ = domain;
#line 235 "/run/build/folks/folks/im-details.vala"
							_tmp68_ = resource;
#line 235 "/run/build/folks/folks/im-details.vala"
							_tmp69_ = g_strdup_printf ("%s/%s", _tmp67_, (const gchar*) _tmp68_);
#line 235 "/run/build/folks/folks/im-details.vala"
							_g_free0 (normalised);
#line 235 "/run/build/folks/folks/im-details.vala"
							normalised = _tmp69_;
#line 1247 "im-details.c"
						} else {
							GError* _tmp70_;
#line 239 "/run/build/folks/folks/im-details.vala"
							_tmp70_ = g_error_new (FOLKS_IM_DETAILS_ERROR, FOLKS_IM_DETAILS_ERROR_INVALID_IM_ADDRESS, _ ("The IM address ‘%s’ could not be understood."), im_address);
#line 239 "/run/build/folks/folks/im-details.vala"
							_inner_error_ = _tmp70_;
#line 239 "/run/build/folks/folks/im-details.vala"
							if (_inner_error_->domain == FOLKS_IM_DETAILS_ERROR) {
#line 239 "/run/build/folks/folks/im-details.vala"
								g_propagate_error (error, _inner_error_);
#line 239 "/run/build/folks/folks/im-details.vala"
								_g_free0 (normalised);
#line 239 "/run/build/folks/folks/im-details.vala"
								_g_free0 (domain);
#line 239 "/run/build/folks/folks/im-details.vala"
								_g_free0 (_domain);
#line 239 "/run/build/folks/folks/im-details.vala"
								_g_free0 (node);
#line 239 "/run/build/folks/folks/im-details.vala"
								_g_free0 (resource);
#line 239 "/run/build/folks/folks/im-details.vala"
								parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 239 "/run/build/folks/folks/im-details.vala"
								return NULL;
#line 1272 "im-details.c"
							} else {
#line 239 "/run/build/folks/folks/im-details.vala"
								_g_free0 (normalised);
#line 239 "/run/build/folks/folks/im-details.vala"
								_g_free0 (domain);
#line 239 "/run/build/folks/folks/im-details.vala"
								_g_free0 (_domain);
#line 239 "/run/build/folks/folks/im-details.vala"
								_g_free0 (node);
#line 239 "/run/build/folks/folks/im-details.vala"
								_g_free0 (resource);
#line 239 "/run/build/folks/folks/im-details.vala"
								parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 239 "/run/build/folks/folks/im-details.vala"
								g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 239 "/run/build/folks/folks/im-details.vala"
								g_clear_error (&_inner_error_);
#line 239 "/run/build/folks/folks/im-details.vala"
								return NULL;
#line 1292 "im-details.c"
							}
						}
					}
				}
#line 245 "/run/build/folks/folks/im-details.vala"
				_tmp71_ = normalised;
#line 245 "/run/build/folks/folks/im-details.vala"
				_tmp72_ = g_utf8_normalize ((const gchar*) _tmp71_, (gssize) -1, G_NORMALIZE_NFKC);
#line 245 "/run/build/folks/folks/im-details.vala"
				result = _tmp72_;
#line 245 "/run/build/folks/folks/im-details.vala"
				_g_free0 (normalised);
#line 245 "/run/build/folks/folks/im-details.vala"
				_g_free0 (domain);
#line 245 "/run/build/folks/folks/im-details.vala"
				_g_free0 (_domain);
#line 245 "/run/build/folks/folks/im-details.vala"
				_g_free0 (node);
#line 245 "/run/build/folks/folks/im-details.vala"
				_g_free0 (resource);
#line 245 "/run/build/folks/folks/im-details.vala"
				parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 245 "/run/build/folks/folks/im-details.vala"
				return result;
#line 1317 "im-details.c"
			} else {
				gchar* _tmp73_;
#line 250 "/run/build/folks/folks/im-details.vala"
				_tmp73_ = g_utf8_normalize (im_address, (gssize) -1, G_NORMALIZE_DEFAULT);
#line 250 "/run/build/folks/folks/im-details.vala"
				result = _tmp73_;
#line 250 "/run/build/folks/folks/im-details.vala"
				return result;
#line 1326 "im-details.c"
			}
		}
	}
}


GeeMultiMap*
folks_im_details_get_im_addresses (FolksImDetails* self)
{
#line 116 "/run/build/folks/folks/im-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 116 "/run/build/folks/folks/im-details.vala"
	return FOLKS_IM_DETAILS_GET_INTERFACE (self)->get_im_addresses (self);
#line 1340 "im-details.c"
}


void
folks_im_details_set_im_addresses (FolksImDetails* self,
                                   GeeMultiMap* value)
{
#line 116 "/run/build/folks/folks/im-details.vala"
	g_return_if_fail (self != NULL);
#line 116 "/run/build/folks/folks/im-details.vala"
	FOLKS_IM_DETAILS_GET_INTERFACE (self)->set_im_addresses (self, value);
#line 1352 "im-details.c"
}


static void
folks_im_details_default_init (FolksImDetailsIface * iface)
{
	/**
	   * A mapping of IM protocol to an (unordered) set of IM addresses.
	   *
	   * Each mapping is from an arbitrary protocol identifier to a set of IM
	   * addresses on that protocol for the contact, listed in no particular order.
	   *
	   * There must be no duplicate IM addresses in each set, though a given
	   * IM address may be present in the sets for different protocols.
	   *
	   * All the IM addresses must be normalised using
	   * {@link ImDetails.normalise_im_address} before being added to this property.
	   *
	   * @since 0.5.1
	   */
#line 98 "/run/build/folks/folks/im-details.vala"
	g_object_interface_install_property (iface, g_param_spec_object ("im-addresses", "im-addresses", "im-addresses", GEE_TYPE_MULTI_MAP, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 98 "/run/build/folks/folks/im-details.vala"
	iface->change_im_addresses = folks_im_details_real_change_im_addresses;
#line 98 "/run/build/folks/folks/im-details.vala"
	iface->change_im_addresses_finish = folks_im_details_real_change_im_addresses_finish;
#line 1379 "im-details.c"
}


/**
 * IM addresses exposed by an object implementing {@link PresenceDetails}.
 *
 * @since 0.1.13
 */
GType
folks_im_details_get_type (void)
{
	static volatile gsize folks_im_details_type_id__volatile = 0;
	if (g_once_init_enter (&folks_im_details_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksImDetailsIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_im_details_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
		GType folks_im_details_type_id;
		folks_im_details_type_id = g_type_register_static (G_TYPE_INTERFACE, "FolksImDetails", &g_define_type_info, 0);
		g_type_interface_add_prerequisite (folks_im_details_type_id, G_TYPE_OBJECT);
		g_once_init_leave (&folks_im_details_type_id__volatile, folks_im_details_type_id);
	}
	return folks_im_details_type_id__volatile;
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



