/*
 * Generated by gdbus-codegen 2.58.1 from org.gnome.evolution.dataserver.Calendar.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifdef HAVE_CONFIG_H
#  include "config.h"
#endif

#include "e-dbus-calendar.h"

#include <string.h>
#ifdef G_OS_UNIX
#  include <gio/gunixfdlist.h>
#endif

typedef struct
{
  GDBusArgInfo parent_struct;
  gboolean use_gvariant;
} _ExtendedGDBusArgInfo;

typedef struct
{
  GDBusMethodInfo parent_struct;
  const gchar *signal_name;
  gboolean pass_fdlist;
} _ExtendedGDBusMethodInfo;

typedef struct
{
  GDBusSignalInfo parent_struct;
  const gchar *signal_name;
} _ExtendedGDBusSignalInfo;

typedef struct
{
  GDBusPropertyInfo parent_struct;
  const gchar *hyphen_name;
  gboolean use_gvariant;
} _ExtendedGDBusPropertyInfo;

typedef struct
{
  GDBusInterfaceInfo parent_struct;
  const gchar *hyphen_name;
} _ExtendedGDBusInterfaceInfo;

typedef struct
{
  const _ExtendedGDBusPropertyInfo *info;
  guint prop_id;
  GValue orig_value; /* the value before the change */
} ChangedProperty;

static void
_changed_property_free (ChangedProperty *data)
{
  g_value_unset (&data->orig_value);
  g_free (data);
}

static gboolean
_g_strv_equal0 (gchar **a, gchar **b)
{
  gboolean ret = FALSE;
  guint n;
  if (a == NULL && b == NULL)
    {
      ret = TRUE;
      goto out;
    }
  if (a == NULL || b == NULL)
    goto out;
  if (g_strv_length (a) != g_strv_length (b))
    goto out;
  for (n = 0; a[n] != NULL; n++)
    if (g_strcmp0 (a[n], b[n]) != 0)
      goto out;
  ret = TRUE;
out:
  return ret;
}

static gboolean
_g_variant_equal0 (GVariant *a, GVariant *b)
{
  gboolean ret = FALSE;
  if (a == NULL && b == NULL)
    {
      ret = TRUE;
      goto out;
    }
  if (a == NULL || b == NULL)
    goto out;
  ret = g_variant_equal (a, b);
out:
  return ret;
}

G_GNUC_UNUSED static gboolean
_g_value_equal (const GValue *a, const GValue *b)
{
  gboolean ret = FALSE;
  g_assert (G_VALUE_TYPE (a) == G_VALUE_TYPE (b));
  switch (G_VALUE_TYPE (a))
    {
      case G_TYPE_BOOLEAN:
        ret = (g_value_get_boolean (a) == g_value_get_boolean (b));
        break;
      case G_TYPE_UCHAR:
        ret = (g_value_get_uchar (a) == g_value_get_uchar (b));
        break;
      case G_TYPE_INT:
        ret = (g_value_get_int (a) == g_value_get_int (b));
        break;
      case G_TYPE_UINT:
        ret = (g_value_get_uint (a) == g_value_get_uint (b));
        break;
      case G_TYPE_INT64:
        ret = (g_value_get_int64 (a) == g_value_get_int64 (b));
        break;
      case G_TYPE_UINT64:
        ret = (g_value_get_uint64 (a) == g_value_get_uint64 (b));
        break;
      case G_TYPE_DOUBLE:
        {
          /* Avoid -Wfloat-equal warnings by doing a direct bit compare */
          gdouble da = g_value_get_double (a);
          gdouble db = g_value_get_double (b);
          ret = memcmp (&da, &db, sizeof (gdouble)) == 0;
        }
        break;
      case G_TYPE_STRING:
        ret = (g_strcmp0 (g_value_get_string (a), g_value_get_string (b)) == 0);
        break;
      case G_TYPE_VARIANT:
        ret = _g_variant_equal0 (g_value_get_variant (a), g_value_get_variant (b));
        break;
      default:
        if (G_VALUE_TYPE (a) == G_TYPE_STRV)
          ret = _g_strv_equal0 (g_value_get_boxed (a), g_value_get_boxed (b));
        else
          g_critical ("_g_value_equal() does not handle type %s", g_type_name (G_VALUE_TYPE (a)));
        break;
    }
  return ret;
}

/* ------------------------------------------------------------------------
 * Code for interface org.gnome.evolution.dataserver.Calendar
 * ------------------------------------------------------------------------
 */

/**
 * SECTION:EDBusCalendar
 * @title: EDBusCalendar
 * @short_description: Generated C code for the org.gnome.evolution.dataserver.Calendar D-Bus interface
 *
 * This section contains code for working with the <link linkend="gdbus-interface-org-gnome-evolution-dataserver-Calendar.top_of_page">org.gnome.evolution.dataserver.Calendar</link> D-Bus interface in C.
 */

/* ---- Introspection data for org.gnome.evolution.dataserver.Calendar ---- */

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_retrieve_properties_OUT_ARG_properties =
{
  {
    -1,
    (gchar *) "properties",
    (gchar *) "as",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_retrieve_properties_OUT_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_retrieve_properties_OUT_ARG_properties.parent_struct,
  NULL
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_retrieve_properties =
{
  {
    -1,
    (gchar *) "RetrieveProperties",
    NULL,
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_retrieve_properties_OUT_ARG_pointers,
    NULL
  },
  "handle-retrieve-properties",
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_open_OUT_ARG_properties =
{
  {
    -1,
    (gchar *) "properties",
    (gchar *) "as",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_open_OUT_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_open_OUT_ARG_properties.parent_struct,
  NULL
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_open =
{
  {
    -1,
    (gchar *) "Open",
    NULL,
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_open_OUT_ARG_pointers,
    NULL
  },
  "handle-open",
  FALSE
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_close =
{
  {
    -1,
    (gchar *) "Close",
    NULL,
    NULL,
    NULL
  },
  "handle-close",
  FALSE
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_refresh =
{
  {
    -1,
    (gchar *) "Refresh",
    NULL,
    NULL,
    NULL
  },
  "handle-refresh",
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_create_objects_IN_ARG_ics_objects =
{
  {
    -1,
    (gchar *) "ics_objects",
    (gchar *) "as",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_create_objects_IN_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_create_objects_IN_ARG_ics_objects.parent_struct,
  NULL
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_create_objects_OUT_ARG_uids =
{
  {
    -1,
    (gchar *) "uids",
    (gchar *) "as",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_create_objects_OUT_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_create_objects_OUT_ARG_uids.parent_struct,
  NULL
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_create_objects =
{
  {
    -1,
    (gchar *) "CreateObjects",
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_create_objects_IN_ARG_pointers,
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_create_objects_OUT_ARG_pointers,
    NULL
  },
  "handle-create-objects",
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_modify_objects_IN_ARG_ics_objects =
{
  {
    -1,
    (gchar *) "ics_objects",
    (gchar *) "as",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_modify_objects_IN_ARG_mod_type =
{
  {
    -1,
    (gchar *) "mod_type",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_modify_objects_IN_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_modify_objects_IN_ARG_ics_objects.parent_struct,
  &_e_dbus_calendar_method_info_modify_objects_IN_ARG_mod_type.parent_struct,
  NULL
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_modify_objects =
{
  {
    -1,
    (gchar *) "ModifyObjects",
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_modify_objects_IN_ARG_pointers,
    NULL,
    NULL
  },
  "handle-modify-objects",
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_remove_objects_IN_ARG_uid_rid_array =
{
  {
    -1,
    (gchar *) "uid_rid_array",
    (gchar *) "a(ss)",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_remove_objects_IN_ARG_mod_type =
{
  {
    -1,
    (gchar *) "mod_type",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_remove_objects_IN_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_remove_objects_IN_ARG_uid_rid_array.parent_struct,
  &_e_dbus_calendar_method_info_remove_objects_IN_ARG_mod_type.parent_struct,
  NULL
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_remove_objects =
{
  {
    -1,
    (gchar *) "RemoveObjects",
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_remove_objects_IN_ARG_pointers,
    NULL,
    NULL
  },
  "handle-remove-objects",
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_receive_objects_IN_ARG_ics_object =
{
  {
    -1,
    (gchar *) "ics_object",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_receive_objects_IN_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_receive_objects_IN_ARG_ics_object.parent_struct,
  NULL
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_receive_objects =
{
  {
    -1,
    (gchar *) "ReceiveObjects",
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_receive_objects_IN_ARG_pointers,
    NULL,
    NULL
  },
  "handle-receive-objects",
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_send_objects_IN_ARG_ics_object =
{
  {
    -1,
    (gchar *) "ics_object",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_send_objects_IN_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_send_objects_IN_ARG_ics_object.parent_struct,
  NULL
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_send_objects_OUT_ARG_users =
{
  {
    -1,
    (gchar *) "users",
    (gchar *) "as",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_send_objects_OUT_ARG_out_ics_object =
{
  {
    -1,
    (gchar *) "out_ics_object",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_send_objects_OUT_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_send_objects_OUT_ARG_users.parent_struct,
  &_e_dbus_calendar_method_info_send_objects_OUT_ARG_out_ics_object.parent_struct,
  NULL
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_send_objects =
{
  {
    -1,
    (gchar *) "SendObjects",
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_send_objects_IN_ARG_pointers,
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_send_objects_OUT_ARG_pointers,
    NULL
  },
  "handle-send-objects",
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_object_IN_ARG_uid =
{
  {
    -1,
    (gchar *) "uid",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_object_IN_ARG_rid =
{
  {
    -1,
    (gchar *) "rid",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_get_object_IN_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_get_object_IN_ARG_uid.parent_struct,
  &_e_dbus_calendar_method_info_get_object_IN_ARG_rid.parent_struct,
  NULL
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_object_OUT_ARG_ics_object =
{
  {
    -1,
    (gchar *) "ics_object",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_get_object_OUT_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_get_object_OUT_ARG_ics_object.parent_struct,
  NULL
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_get_object =
{
  {
    -1,
    (gchar *) "GetObject",
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_get_object_IN_ARG_pointers,
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_get_object_OUT_ARG_pointers,
    NULL
  },
  "handle-get-object",
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_object_list_IN_ARG_query =
{
  {
    -1,
    (gchar *) "query",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_get_object_list_IN_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_get_object_list_IN_ARG_query.parent_struct,
  NULL
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_object_list_OUT_ARG_ics_objects =
{
  {
    -1,
    (gchar *) "ics_objects",
    (gchar *) "as",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_get_object_list_OUT_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_get_object_list_OUT_ARG_ics_objects.parent_struct,
  NULL
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_get_object_list =
{
  {
    -1,
    (gchar *) "GetObjectList",
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_get_object_list_IN_ARG_pointers,
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_get_object_list_OUT_ARG_pointers,
    NULL
  },
  "handle-get-object-list",
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_free_busy_IN_ARG_start =
{
  {
    -1,
    (gchar *) "start",
    (gchar *) "x",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_free_busy_IN_ARG_end =
{
  {
    -1,
    (gchar *) "end",
    (gchar *) "x",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_free_busy_IN_ARG_users =
{
  {
    -1,
    (gchar *) "users",
    (gchar *) "as",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_get_free_busy_IN_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_get_free_busy_IN_ARG_start.parent_struct,
  &_e_dbus_calendar_method_info_get_free_busy_IN_ARG_end.parent_struct,
  &_e_dbus_calendar_method_info_get_free_busy_IN_ARG_users.parent_struct,
  NULL
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_free_busy_OUT_ARG_freebusy =
{
  {
    -1,
    (gchar *) "freebusy",
    (gchar *) "as",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_get_free_busy_OUT_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_get_free_busy_OUT_ARG_freebusy.parent_struct,
  NULL
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_get_free_busy =
{
  {
    -1,
    (gchar *) "GetFreeBusy",
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_get_free_busy_IN_ARG_pointers,
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_get_free_busy_OUT_ARG_pointers,
    NULL
  },
  "handle-get-free-busy",
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_attachment_uris_IN_ARG_uid =
{
  {
    -1,
    (gchar *) "uid",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_attachment_uris_IN_ARG_rid =
{
  {
    -1,
    (gchar *) "rid",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_get_attachment_uris_IN_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_get_attachment_uris_IN_ARG_uid.parent_struct,
  &_e_dbus_calendar_method_info_get_attachment_uris_IN_ARG_rid.parent_struct,
  NULL
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_attachment_uris_OUT_ARG_uris =
{
  {
    -1,
    (gchar *) "uris",
    (gchar *) "as",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_get_attachment_uris_OUT_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_get_attachment_uris_OUT_ARG_uris.parent_struct,
  NULL
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_get_attachment_uris =
{
  {
    -1,
    (gchar *) "GetAttachmentUris",
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_get_attachment_uris_IN_ARG_pointers,
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_get_attachment_uris_OUT_ARG_pointers,
    NULL
  },
  "handle-get-attachment-uris",
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_discard_alarm_IN_ARG_uid =
{
  {
    -1,
    (gchar *) "uid",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_discard_alarm_IN_ARG_rid =
{
  {
    -1,
    (gchar *) "rid",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_discard_alarm_IN_ARG_alarm_uid =
{
  {
    -1,
    (gchar *) "alarm_uid",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_discard_alarm_IN_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_discard_alarm_IN_ARG_uid.parent_struct,
  &_e_dbus_calendar_method_info_discard_alarm_IN_ARG_rid.parent_struct,
  &_e_dbus_calendar_method_info_discard_alarm_IN_ARG_alarm_uid.parent_struct,
  NULL
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_discard_alarm =
{
  {
    -1,
    (gchar *) "DiscardAlarm",
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_discard_alarm_IN_ARG_pointers,
    NULL,
    NULL
  },
  "handle-discard-alarm",
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_timezone_IN_ARG_tz_id =
{
  {
    -1,
    (gchar *) "tz_id",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_get_timezone_IN_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_get_timezone_IN_ARG_tz_id.parent_struct,
  NULL
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_timezone_OUT_ARG_tz_object =
{
  {
    -1,
    (gchar *) "tz_object",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_get_timezone_OUT_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_get_timezone_OUT_ARG_tz_object.parent_struct,
  NULL
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_get_timezone =
{
  {
    -1,
    (gchar *) "GetTimezone",
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_get_timezone_IN_ARG_pointers,
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_get_timezone_OUT_ARG_pointers,
    NULL
  },
  "handle-get-timezone",
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_add_timezone_IN_ARG_tz_object =
{
  {
    -1,
    (gchar *) "tz_object",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_add_timezone_IN_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_add_timezone_IN_ARG_tz_object.parent_struct,
  NULL
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_add_timezone =
{
  {
    -1,
    (gchar *) "AddTimezone",
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_add_timezone_IN_ARG_pointers,
    NULL,
    NULL
  },
  "handle-add-timezone",
  FALSE
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_view_IN_ARG_query =
{
  {
    -1,
    (gchar *) "query",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_get_view_IN_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_get_view_IN_ARG_query.parent_struct,
  NULL
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_method_info_get_view_OUT_ARG_object_path =
{
  {
    -1,
    (gchar *) "object_path",
    (gchar *) "o",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_method_info_get_view_OUT_ARG_pointers[] =
{
  &_e_dbus_calendar_method_info_get_view_OUT_ARG_object_path.parent_struct,
  NULL
};

static const _ExtendedGDBusMethodInfo _e_dbus_calendar_method_info_get_view =
{
  {
    -1,
    (gchar *) "GetView",
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_get_view_IN_ARG_pointers,
    (GDBusArgInfo **) &_e_dbus_calendar_method_info_get_view_OUT_ARG_pointers,
    NULL
  },
  "handle-get-view",
  FALSE
};

static const GDBusMethodInfo * const _e_dbus_calendar_method_info_pointers[] =
{
  &_e_dbus_calendar_method_info_retrieve_properties.parent_struct,
  &_e_dbus_calendar_method_info_open.parent_struct,
  &_e_dbus_calendar_method_info_close.parent_struct,
  &_e_dbus_calendar_method_info_refresh.parent_struct,
  &_e_dbus_calendar_method_info_create_objects.parent_struct,
  &_e_dbus_calendar_method_info_modify_objects.parent_struct,
  &_e_dbus_calendar_method_info_remove_objects.parent_struct,
  &_e_dbus_calendar_method_info_receive_objects.parent_struct,
  &_e_dbus_calendar_method_info_send_objects.parent_struct,
  &_e_dbus_calendar_method_info_get_object.parent_struct,
  &_e_dbus_calendar_method_info_get_object_list.parent_struct,
  &_e_dbus_calendar_method_info_get_free_busy.parent_struct,
  &_e_dbus_calendar_method_info_get_attachment_uris.parent_struct,
  &_e_dbus_calendar_method_info_discard_alarm.parent_struct,
  &_e_dbus_calendar_method_info_get_timezone.parent_struct,
  &_e_dbus_calendar_method_info_add_timezone.parent_struct,
  &_e_dbus_calendar_method_info_get_view.parent_struct,
  NULL
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_signal_info_error_ARG_error_message =
{
  {
    -1,
    (gchar *) "error_message",
    (gchar *) "s",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_signal_info_error_ARG_pointers[] =
{
  &_e_dbus_calendar_signal_info_error_ARG_error_message.parent_struct,
  NULL
};

static const _ExtendedGDBusSignalInfo _e_dbus_calendar_signal_info_error =
{
  {
    -1,
    (gchar *) "Error",
    (GDBusArgInfo **) &_e_dbus_calendar_signal_info_error_ARG_pointers,
    NULL
  },
  "error"
};

static const _ExtendedGDBusArgInfo _e_dbus_calendar_signal_info_free_busy_data_ARG_ics_objects =
{
  {
    -1,
    (gchar *) "ics_objects",
    (gchar *) "as",
    NULL
  },
  FALSE
};

static const GDBusArgInfo * const _e_dbus_calendar_signal_info_free_busy_data_ARG_pointers[] =
{
  &_e_dbus_calendar_signal_info_free_busy_data_ARG_ics_objects.parent_struct,
  NULL
};

static const _ExtendedGDBusSignalInfo _e_dbus_calendar_signal_info_free_busy_data =
{
  {
    -1,
    (gchar *) "FreeBusyData",
    (GDBusArgInfo **) &_e_dbus_calendar_signal_info_free_busy_data_ARG_pointers,
    NULL
  },
  "free-busy-data"
};

static const GDBusSignalInfo * const _e_dbus_calendar_signal_info_pointers[] =
{
  &_e_dbus_calendar_signal_info_error.parent_struct,
  &_e_dbus_calendar_signal_info_free_busy_data.parent_struct,
  NULL
};

static const _ExtendedGDBusPropertyInfo _e_dbus_calendar_property_info_online =
{
  {
    -1,
    (gchar *) "Online",
    (gchar *) "b",
    G_DBUS_PROPERTY_INFO_FLAGS_READABLE,
    NULL
  },
  "online",
  FALSE
};

static const _ExtendedGDBusPropertyInfo _e_dbus_calendar_property_info_revision =
{
  {
    -1,
    (gchar *) "Revision",
    (gchar *) "s",
    G_DBUS_PROPERTY_INFO_FLAGS_READABLE,
    NULL
  },
  "revision",
  FALSE
};

static const _ExtendedGDBusPropertyInfo _e_dbus_calendar_property_info_writable =
{
  {
    -1,
    (gchar *) "Writable",
    (gchar *) "b",
    G_DBUS_PROPERTY_INFO_FLAGS_READABLE,
    NULL
  },
  "writable",
  FALSE
};

static const _ExtendedGDBusPropertyInfo _e_dbus_calendar_property_info_cache_dir =
{
  {
    -1,
    (gchar *) "CacheDir",
    (gchar *) "s",
    G_DBUS_PROPERTY_INFO_FLAGS_READABLE,
    NULL
  },
  "cache-dir",
  FALSE
};

static const _ExtendedGDBusPropertyInfo _e_dbus_calendar_property_info_capabilities =
{
  {
    -1,
    (gchar *) "Capabilities",
    (gchar *) "as",
    G_DBUS_PROPERTY_INFO_FLAGS_READABLE,
    NULL
  },
  "capabilities",
  FALSE
};

static const _ExtendedGDBusPropertyInfo _e_dbus_calendar_property_info_default_object =
{
  {
    -1,
    (gchar *) "DefaultObject",
    (gchar *) "s",
    G_DBUS_PROPERTY_INFO_FLAGS_READABLE,
    NULL
  },
  "default-object",
  FALSE
};

static const _ExtendedGDBusPropertyInfo _e_dbus_calendar_property_info_cal_email_address =
{
  {
    -1,
    (gchar *) "CalEmailAddress",
    (gchar *) "s",
    G_DBUS_PROPERTY_INFO_FLAGS_READABLE,
    NULL
  },
  "cal-email-address",
  FALSE
};

static const _ExtendedGDBusPropertyInfo _e_dbus_calendar_property_info_alarm_email_address =
{
  {
    -1,
    (gchar *) "AlarmEmailAddress",
    (gchar *) "s",
    G_DBUS_PROPERTY_INFO_FLAGS_READABLE,
    NULL
  },
  "alarm-email-address",
  FALSE
};

static const GDBusPropertyInfo * const _e_dbus_calendar_property_info_pointers[] =
{
  &_e_dbus_calendar_property_info_online.parent_struct,
  &_e_dbus_calendar_property_info_revision.parent_struct,
  &_e_dbus_calendar_property_info_writable.parent_struct,
  &_e_dbus_calendar_property_info_cache_dir.parent_struct,
  &_e_dbus_calendar_property_info_capabilities.parent_struct,
  &_e_dbus_calendar_property_info_default_object.parent_struct,
  &_e_dbus_calendar_property_info_cal_email_address.parent_struct,
  &_e_dbus_calendar_property_info_alarm_email_address.parent_struct,
  NULL
};

static const _ExtendedGDBusInterfaceInfo _e_dbus_calendar_interface_info =
{
  {
    -1,
    (gchar *) "org.gnome.evolution.dataserver.Calendar",
    (GDBusMethodInfo **) &_e_dbus_calendar_method_info_pointers,
    (GDBusSignalInfo **) &_e_dbus_calendar_signal_info_pointers,
    (GDBusPropertyInfo **) &_e_dbus_calendar_property_info_pointers,
    NULL
  },
  "calendar",
};


/**
 * e_dbus_calendar_interface_info:
 *
 * Gets a machine-readable description of the <link linkend="gdbus-interface-org-gnome-evolution-dataserver-Calendar.top_of_page">org.gnome.evolution.dataserver.Calendar</link> D-Bus interface.
 *
 * Returns: (transfer none): A #GDBusInterfaceInfo. Do not free.
 *
 * Since: 3.8
 */
GDBusInterfaceInfo *
e_dbus_calendar_interface_info (void)
{
  return (GDBusInterfaceInfo *) &_e_dbus_calendar_interface_info.parent_struct;
}

/**
 * e_dbus_calendar_override_properties:
 * @klass: The class structure for a #GObject derived class.
 * @property_id_begin: The property id to assign to the first overridden property.
 *
 * Overrides all #GObject properties in the #EDBusCalendar interface for a concrete class.
 * The properties are overridden in the order they are defined.
 *
 * Returns: The last property id.
 *
 * Since: 3.8
 */
guint
e_dbus_calendar_override_properties (GObjectClass *klass, guint property_id_begin)
{
  g_object_class_override_property (klass, property_id_begin++, "online");
  g_object_class_override_property (klass, property_id_begin++, "revision");
  g_object_class_override_property (klass, property_id_begin++, "writable");
  g_object_class_override_property (klass, property_id_begin++, "cache-dir");
  g_object_class_override_property (klass, property_id_begin++, "capabilities");
  g_object_class_override_property (klass, property_id_begin++, "default-object");
  g_object_class_override_property (klass, property_id_begin++, "cal-email-address");
  g_object_class_override_property (klass, property_id_begin++, "alarm-email-address");
  return property_id_begin - 1;
}



/**
 * EDBusCalendar:
 *
 * Abstract interface type for the D-Bus interface <link linkend="gdbus-interface-org-gnome-evolution-dataserver-Calendar.top_of_page">org.gnome.evolution.dataserver.Calendar</link>.
 *
 * Since: 3.8
 */

/**
 * EDBusCalendarIface:
 * @parent_iface: The parent interface.
 * @handle_add_timezone: Handler for the #EDBusCalendar::handle-add-timezone signal.
 * @handle_close: Handler for the #EDBusCalendar::handle-close signal.
 * @handle_create_objects: Handler for the #EDBusCalendar::handle-create-objects signal.
 * @handle_discard_alarm: Handler for the #EDBusCalendar::handle-discard-alarm signal.
 * @handle_get_attachment_uris: Handler for the #EDBusCalendar::handle-get-attachment-uris signal.
 * @handle_get_free_busy: Handler for the #EDBusCalendar::handle-get-free-busy signal.
 * @handle_get_object: Handler for the #EDBusCalendar::handle-get-object signal.
 * @handle_get_object_list: Handler for the #EDBusCalendar::handle-get-object-list signal.
 * @handle_get_timezone: Handler for the #EDBusCalendar::handle-get-timezone signal.
 * @handle_get_view: Handler for the #EDBusCalendar::handle-get-view signal.
 * @handle_modify_objects: Handler for the #EDBusCalendar::handle-modify-objects signal.
 * @handle_open: Handler for the #EDBusCalendar::handle-open signal.
 * @handle_receive_objects: Handler for the #EDBusCalendar::handle-receive-objects signal.
 * @handle_refresh: Handler for the #EDBusCalendar::handle-refresh signal.
 * @handle_remove_objects: Handler for the #EDBusCalendar::handle-remove-objects signal.
 * @handle_retrieve_properties: Handler for the #EDBusCalendar::handle-retrieve-properties signal.
 * @handle_send_objects: Handler for the #EDBusCalendar::handle-send-objects signal.
 * @get_alarm_email_address: Getter for the #EDBusCalendar:alarm-email-address property.
 * @get_cache_dir: Getter for the #EDBusCalendar:cache-dir property.
 * @get_cal_email_address: Getter for the #EDBusCalendar:cal-email-address property.
 * @get_capabilities: Getter for the #EDBusCalendar:capabilities property.
 * @get_default_object: Getter for the #EDBusCalendar:default-object property.
 * @get_online: Getter for the #EDBusCalendar:online property.
 * @get_revision: Getter for the #EDBusCalendar:revision property.
 * @get_writable: Getter for the #EDBusCalendar:writable property.
 * @error: Handler for the #EDBusCalendar::error signal.
 * @free_busy_data: Handler for the #EDBusCalendar::free-busy-data signal.
 *
 * Virtual table for the D-Bus interface <link linkend="gdbus-interface-org-gnome-evolution-dataserver-Calendar.top_of_page">org.gnome.evolution.dataserver.Calendar</link>.
 *
 * Since: 3.8
 */

typedef EDBusCalendarIface EDBusCalendarInterface;
G_DEFINE_INTERFACE (EDBusCalendar, e_dbus_calendar, G_TYPE_OBJECT)

static void
e_dbus_calendar_default_init (EDBusCalendarIface *iface)
{
  /* GObject signals for incoming D-Bus method calls: */
  /**
   * EDBusCalendar::handle-retrieve-properties:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.RetrieveProperties">RetrieveProperties()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_retrieve_properties() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-retrieve-properties",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_retrieve_properties),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    1,
    G_TYPE_DBUS_METHOD_INVOCATION);

  /**
   * EDBusCalendar::handle-open:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.Open">Open()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_open() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-open",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_open),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    1,
    G_TYPE_DBUS_METHOD_INVOCATION);

  /**
   * EDBusCalendar::handle-close:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.Close">Close()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_close() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-close",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_close),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    1,
    G_TYPE_DBUS_METHOD_INVOCATION);

  /**
   * EDBusCalendar::handle-refresh:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.Refresh">Refresh()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_refresh() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-refresh",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_refresh),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    1,
    G_TYPE_DBUS_METHOD_INVOCATION);

  /**
   * EDBusCalendar::handle-create-objects:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_ics_objects: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.CreateObjects">CreateObjects()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_create_objects() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-create-objects",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_create_objects),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    2,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRV);

  /**
   * EDBusCalendar::handle-modify-objects:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_ics_objects: Argument passed by remote caller.
   * @arg_mod_type: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.ModifyObjects">ModifyObjects()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_modify_objects() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-modify-objects",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_modify_objects),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    3,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRV, G_TYPE_STRING);

  /**
   * EDBusCalendar::handle-remove-objects:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_uid_rid_array: Argument passed by remote caller.
   * @arg_mod_type: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.RemoveObjects">RemoveObjects()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_remove_objects() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-remove-objects",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_remove_objects),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    3,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_VARIANT, G_TYPE_STRING);

  /**
   * EDBusCalendar::handle-receive-objects:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_ics_object: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.ReceiveObjects">ReceiveObjects()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_receive_objects() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-receive-objects",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_receive_objects),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    2,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING);

  /**
   * EDBusCalendar::handle-send-objects:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_ics_object: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.SendObjects">SendObjects()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_send_objects() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-send-objects",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_send_objects),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    2,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING);

  /**
   * EDBusCalendar::handle-get-object:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_uid: Argument passed by remote caller.
   * @arg_rid: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetObject">GetObject()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_get_object() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-get-object",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_get_object),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    3,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING, G_TYPE_STRING);

  /**
   * EDBusCalendar::handle-get-object-list:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_query: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetObjectList">GetObjectList()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_get_object_list() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-get-object-list",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_get_object_list),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    2,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING);

  /**
   * EDBusCalendar::handle-get-free-busy:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_start: Argument passed by remote caller.
   * @arg_end: Argument passed by remote caller.
   * @arg_users: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetFreeBusy">GetFreeBusy()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_get_free_busy() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-get-free-busy",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_get_free_busy),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    4,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_INT64, G_TYPE_INT64, G_TYPE_STRV);

  /**
   * EDBusCalendar::handle-get-attachment-uris:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_uid: Argument passed by remote caller.
   * @arg_rid: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetAttachmentUris">GetAttachmentUris()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_get_attachment_uris() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-get-attachment-uris",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_get_attachment_uris),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    3,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING, G_TYPE_STRING);

  /**
   * EDBusCalendar::handle-discard-alarm:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_uid: Argument passed by remote caller.
   * @arg_rid: Argument passed by remote caller.
   * @arg_alarm_uid: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.DiscardAlarm">DiscardAlarm()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_discard_alarm() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-discard-alarm",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_discard_alarm),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    4,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING);

  /**
   * EDBusCalendar::handle-get-timezone:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_tz_id: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetTimezone">GetTimezone()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_get_timezone() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-get-timezone",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_get_timezone),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    2,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING);

  /**
   * EDBusCalendar::handle-add-timezone:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_tz_object: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.AddTimezone">AddTimezone()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_add_timezone() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-add-timezone",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_add_timezone),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    2,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING);

  /**
   * EDBusCalendar::handle-get-view:
   * @object: A #EDBusCalendar.
   * @invocation: A #GDBusMethodInvocation.
   * @arg_query: Argument passed by remote caller.
   *
   * Signal emitted when a remote caller is invoking the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetView">GetView()</link> D-Bus method.
   *
   * If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call e_dbus_calendar_complete_get_view() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.
   *
   * Returns: %TRUE if the invocation was handled, %FALSE to let other signal handlers run.
   *
   * Since: 3.8
   */
  g_signal_new ("handle-get-view",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, handle_get_view),
    g_signal_accumulator_true_handled,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_BOOLEAN,
    2,
    G_TYPE_DBUS_METHOD_INVOCATION, G_TYPE_STRING);

  /* GObject signals for received D-Bus signals: */
  /**
   * EDBusCalendar::error:
   * @object: A #EDBusCalendar.
   * @arg_error_message: Argument.
   *
   * On the client-side, this signal is emitted whenever the D-Bus signal <link linkend="gdbus-signal-org-gnome-evolution-dataserver-Calendar.Error">"Error"</link> is received.
   *
   * On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.
   *
   * Since: 3.8
   */
  g_signal_new ("error",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, error),
    NULL,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_NONE,
    1, G_TYPE_STRING);

  /**
   * EDBusCalendar::free-busy-data:
   * @object: A #EDBusCalendar.
   * @arg_ics_objects: Argument.
   *
   * On the client-side, this signal is emitted whenever the D-Bus signal <link linkend="gdbus-signal-org-gnome-evolution-dataserver-Calendar.FreeBusyData">"FreeBusyData"</link> is received.
   *
   * On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.
   *
   * Since: 3.8
   */
  g_signal_new ("free-busy-data",
    G_TYPE_FROM_INTERFACE (iface),
    G_SIGNAL_RUN_LAST,
    G_STRUCT_OFFSET (EDBusCalendarIface, free_busy_data),
    NULL,
    NULL,
    g_cclosure_marshal_generic,
    G_TYPE_NONE,
    1, G_TYPE_STRV);

  /* GObject properties for D-Bus properties: */
  /**
   * EDBusCalendar:online:
   *
   * Represents the D-Bus property <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.Online">"Online"</link>.
   *
   * Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
   *
   * Since: 3.8
   */
  g_object_interface_install_property (iface,
    g_param_spec_boolean ("online", "Online", "Online", FALSE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
  /**
   * EDBusCalendar:revision:
   *
   * Represents the D-Bus property <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.Revision">"Revision"</link>.
   *
   * Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
   *
   * Since: 3.8
   */
  g_object_interface_install_property (iface,
    g_param_spec_string ("revision", "Revision", "Revision", NULL, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
  /**
   * EDBusCalendar:writable:
   *
   * Represents the D-Bus property <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.Writable">"Writable"</link>.
   *
   * Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
   *
   * Since: 3.8
   */
  g_object_interface_install_property (iface,
    g_param_spec_boolean ("writable", "Writable", "Writable", FALSE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
  /**
   * EDBusCalendar:cache-dir:
   *
   * Represents the D-Bus property <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.CacheDir">"CacheDir"</link>.
   *
   * Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
   *
   * Since: 3.8
   */
  g_object_interface_install_property (iface,
    g_param_spec_string ("cache-dir", "CacheDir", "CacheDir", NULL, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
  /**
   * EDBusCalendar:capabilities:
   *
   * Represents the D-Bus property <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.Capabilities">"Capabilities"</link>.
   *
   * Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
   *
   * Since: 3.8
   */
  g_object_interface_install_property (iface,
    g_param_spec_boxed ("capabilities", "Capabilities", "Capabilities", G_TYPE_STRV, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
  /**
   * EDBusCalendar:default-object:
   *
   * Represents the D-Bus property <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.DefaultObject">"DefaultObject"</link>.
   *
   * Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
   *
   * Since: 3.8
   */
  g_object_interface_install_property (iface,
    g_param_spec_string ("default-object", "DefaultObject", "DefaultObject", NULL, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
  /**
   * EDBusCalendar:cal-email-address:
   *
   * Represents the D-Bus property <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.CalEmailAddress">"CalEmailAddress"</link>.
   *
   * Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
   *
   * Since: 3.8
   */
  g_object_interface_install_property (iface,
    g_param_spec_string ("cal-email-address", "CalEmailAddress", "CalEmailAddress", NULL, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
  /**
   * EDBusCalendar:alarm-email-address:
   *
   * Represents the D-Bus property <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.AlarmEmailAddress">"AlarmEmailAddress"</link>.
   *
   * Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
   *
   * Since: 3.8
   */
  g_object_interface_install_property (iface,
    g_param_spec_string ("alarm-email-address", "AlarmEmailAddress", "AlarmEmailAddress", NULL, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
}

/**
 * e_dbus_calendar_get_online: (skip)
 * @object: A #EDBusCalendar.
 *
 * Gets the value of the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.Online">"Online"</link> D-Bus property.
 *
 * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
 *
 * Returns: The property value.
 *
 * Since: 3.8
 */
gboolean 
e_dbus_calendar_get_online (EDBusCalendar *object)
{
  return E_DBUS_CALENDAR_GET_IFACE (object)->get_online (object);
}

/**
 * e_dbus_calendar_set_online: (skip)
 * @object: A #EDBusCalendar.
 * @value: The value to set.
 *
 * Sets the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.Online">"Online"</link> D-Bus property to @value.
 *
 * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_set_online (EDBusCalendar *object, gboolean value)
{
  g_object_set (G_OBJECT (object), "online", value, NULL);
}

/**
 * e_dbus_calendar_get_revision: (skip)
 * @object: A #EDBusCalendar.
 *
 * Gets the value of the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.Revision">"Revision"</link> D-Bus property.
 *
 * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
 *
 * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use e_dbus_calendar_dup_revision() if on another thread.</warning>
 *
 * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
 *
 * Since: 3.8
 */
const gchar *
e_dbus_calendar_get_revision (EDBusCalendar *object)
{
  return E_DBUS_CALENDAR_GET_IFACE (object)->get_revision (object);
}

/**
 * e_dbus_calendar_dup_revision: (skip)
 * @object: A #EDBusCalendar.
 *
 * Gets a copy of the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.Revision">"Revision"</link> D-Bus property.
 *
 * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
 *
 * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
 *
 * Since: 3.8
 */
gchar *
e_dbus_calendar_dup_revision (EDBusCalendar *object)
{
  gchar *value;
  g_object_get (G_OBJECT (object), "revision", &value, NULL);
  return value;
}

/**
 * e_dbus_calendar_set_revision: (skip)
 * @object: A #EDBusCalendar.
 * @value: The value to set.
 *
 * Sets the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.Revision">"Revision"</link> D-Bus property to @value.
 *
 * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_set_revision (EDBusCalendar *object, const gchar *value)
{
  g_object_set (G_OBJECT (object), "revision", value, NULL);
}

/**
 * e_dbus_calendar_get_writable: (skip)
 * @object: A #EDBusCalendar.
 *
 * Gets the value of the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.Writable">"Writable"</link> D-Bus property.
 *
 * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
 *
 * Returns: The property value.
 *
 * Since: 3.8
 */
gboolean 
e_dbus_calendar_get_writable (EDBusCalendar *object)
{
  return E_DBUS_CALENDAR_GET_IFACE (object)->get_writable (object);
}

/**
 * e_dbus_calendar_set_writable: (skip)
 * @object: A #EDBusCalendar.
 * @value: The value to set.
 *
 * Sets the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.Writable">"Writable"</link> D-Bus property to @value.
 *
 * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_set_writable (EDBusCalendar *object, gboolean value)
{
  g_object_set (G_OBJECT (object), "writable", value, NULL);
}

/**
 * e_dbus_calendar_get_cache_dir: (skip)
 * @object: A #EDBusCalendar.
 *
 * Gets the value of the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.CacheDir">"CacheDir"</link> D-Bus property.
 *
 * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
 *
 * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use e_dbus_calendar_dup_cache_dir() if on another thread.</warning>
 *
 * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
 *
 * Since: 3.8
 */
const gchar *
e_dbus_calendar_get_cache_dir (EDBusCalendar *object)
{
  return E_DBUS_CALENDAR_GET_IFACE (object)->get_cache_dir (object);
}

/**
 * e_dbus_calendar_dup_cache_dir: (skip)
 * @object: A #EDBusCalendar.
 *
 * Gets a copy of the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.CacheDir">"CacheDir"</link> D-Bus property.
 *
 * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
 *
 * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
 *
 * Since: 3.8
 */
gchar *
e_dbus_calendar_dup_cache_dir (EDBusCalendar *object)
{
  gchar *value;
  g_object_get (G_OBJECT (object), "cache-dir", &value, NULL);
  return value;
}

/**
 * e_dbus_calendar_set_cache_dir: (skip)
 * @object: A #EDBusCalendar.
 * @value: The value to set.
 *
 * Sets the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.CacheDir">"CacheDir"</link> D-Bus property to @value.
 *
 * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_set_cache_dir (EDBusCalendar *object, const gchar *value)
{
  g_object_set (G_OBJECT (object), "cache-dir", value, NULL);
}

/**
 * e_dbus_calendar_get_capabilities: (skip)
 * @object: A #EDBusCalendar.
 *
 * Gets the value of the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.Capabilities">"Capabilities"</link> D-Bus property.
 *
 * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
 *
 * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use e_dbus_calendar_dup_capabilities() if on another thread.</warning>
 *
 * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
 *
 * Since: 3.8
 */
const gchar *const *
e_dbus_calendar_get_capabilities (EDBusCalendar *object)
{
  return E_DBUS_CALENDAR_GET_IFACE (object)->get_capabilities (object);
}

/**
 * e_dbus_calendar_dup_capabilities: (skip)
 * @object: A #EDBusCalendar.
 *
 * Gets a copy of the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.Capabilities">"Capabilities"</link> D-Bus property.
 *
 * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
 *
 * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().
 *
 * Since: 3.8
 */
gchar **
e_dbus_calendar_dup_capabilities (EDBusCalendar *object)
{
  gchar **value;
  g_object_get (G_OBJECT (object), "capabilities", &value, NULL);
  return value;
}

/**
 * e_dbus_calendar_set_capabilities: (skip)
 * @object: A #EDBusCalendar.
 * @value: The value to set.
 *
 * Sets the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.Capabilities">"Capabilities"</link> D-Bus property to @value.
 *
 * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_set_capabilities (EDBusCalendar *object, const gchar *const *value)
{
  g_object_set (G_OBJECT (object), "capabilities", value, NULL);
}

/**
 * e_dbus_calendar_get_default_object: (skip)
 * @object: A #EDBusCalendar.
 *
 * Gets the value of the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.DefaultObject">"DefaultObject"</link> D-Bus property.
 *
 * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
 *
 * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use e_dbus_calendar_dup_default_object() if on another thread.</warning>
 *
 * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
 *
 * Since: 3.8
 */
const gchar *
e_dbus_calendar_get_default_object (EDBusCalendar *object)
{
  return E_DBUS_CALENDAR_GET_IFACE (object)->get_default_object (object);
}

/**
 * e_dbus_calendar_dup_default_object: (skip)
 * @object: A #EDBusCalendar.
 *
 * Gets a copy of the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.DefaultObject">"DefaultObject"</link> D-Bus property.
 *
 * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
 *
 * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
 *
 * Since: 3.8
 */
gchar *
e_dbus_calendar_dup_default_object (EDBusCalendar *object)
{
  gchar *value;
  g_object_get (G_OBJECT (object), "default-object", &value, NULL);
  return value;
}

/**
 * e_dbus_calendar_set_default_object: (skip)
 * @object: A #EDBusCalendar.
 * @value: The value to set.
 *
 * Sets the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.DefaultObject">"DefaultObject"</link> D-Bus property to @value.
 *
 * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_set_default_object (EDBusCalendar *object, const gchar *value)
{
  g_object_set (G_OBJECT (object), "default-object", value, NULL);
}

/**
 * e_dbus_calendar_get_cal_email_address: (skip)
 * @object: A #EDBusCalendar.
 *
 * Gets the value of the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.CalEmailAddress">"CalEmailAddress"</link> D-Bus property.
 *
 * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
 *
 * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use e_dbus_calendar_dup_cal_email_address() if on another thread.</warning>
 *
 * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
 *
 * Since: 3.8
 */
const gchar *
e_dbus_calendar_get_cal_email_address (EDBusCalendar *object)
{
  return E_DBUS_CALENDAR_GET_IFACE (object)->get_cal_email_address (object);
}

/**
 * e_dbus_calendar_dup_cal_email_address: (skip)
 * @object: A #EDBusCalendar.
 *
 * Gets a copy of the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.CalEmailAddress">"CalEmailAddress"</link> D-Bus property.
 *
 * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
 *
 * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
 *
 * Since: 3.8
 */
gchar *
e_dbus_calendar_dup_cal_email_address (EDBusCalendar *object)
{
  gchar *value;
  g_object_get (G_OBJECT (object), "cal-email-address", &value, NULL);
  return value;
}

/**
 * e_dbus_calendar_set_cal_email_address: (skip)
 * @object: A #EDBusCalendar.
 * @value: The value to set.
 *
 * Sets the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.CalEmailAddress">"CalEmailAddress"</link> D-Bus property to @value.
 *
 * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_set_cal_email_address (EDBusCalendar *object, const gchar *value)
{
  g_object_set (G_OBJECT (object), "cal-email-address", value, NULL);
}

/**
 * e_dbus_calendar_get_alarm_email_address: (skip)
 * @object: A #EDBusCalendar.
 *
 * Gets the value of the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.AlarmEmailAddress">"AlarmEmailAddress"</link> D-Bus property.
 *
 * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
 *
 * <warning>The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use e_dbus_calendar_dup_alarm_email_address() if on another thread.</warning>
 *
 * Returns: (transfer none): The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.
 *
 * Since: 3.8
 */
const gchar *
e_dbus_calendar_get_alarm_email_address (EDBusCalendar *object)
{
  return E_DBUS_CALENDAR_GET_IFACE (object)->get_alarm_email_address (object);
}

/**
 * e_dbus_calendar_dup_alarm_email_address: (skip)
 * @object: A #EDBusCalendar.
 *
 * Gets a copy of the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.AlarmEmailAddress">"AlarmEmailAddress"</link> D-Bus property.
 *
 * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
 *
 * Returns: (transfer full): The property value or %NULL if the property is not set. The returned value should be freed with g_free().
 *
 * Since: 3.8
 */
gchar *
e_dbus_calendar_dup_alarm_email_address (EDBusCalendar *object)
{
  gchar *value;
  g_object_get (G_OBJECT (object), "alarm-email-address", &value, NULL);
  return value;
}

/**
 * e_dbus_calendar_set_alarm_email_address: (skip)
 * @object: A #EDBusCalendar.
 * @value: The value to set.
 *
 * Sets the <link linkend="gdbus-property-org-gnome-evolution-dataserver-Calendar.AlarmEmailAddress">"AlarmEmailAddress"</link> D-Bus property to @value.
 *
 * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_set_alarm_email_address (EDBusCalendar *object, const gchar *value)
{
  g_object_set (G_OBJECT (object), "alarm-email-address", value, NULL);
}

/**
 * e_dbus_calendar_emit_error:
 * @object: A #EDBusCalendar.
 * @arg_error_message: Argument to pass with the signal.
 *
 * Emits the <link linkend="gdbus-signal-org-gnome-evolution-dataserver-Calendar.Error">"Error"</link> D-Bus signal.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_emit_error (
    EDBusCalendar *object,
    const gchar *arg_error_message)
{
  g_signal_emit_by_name (object, "error", arg_error_message);
}

/**
 * e_dbus_calendar_emit_free_busy_data:
 * @object: A #EDBusCalendar.
 * @arg_ics_objects: Argument to pass with the signal.
 *
 * Emits the <link linkend="gdbus-signal-org-gnome-evolution-dataserver-Calendar.FreeBusyData">"FreeBusyData"</link> D-Bus signal.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_emit_free_busy_data (
    EDBusCalendar *object,
    const gchar *const *arg_ics_objects)
{
  g_signal_emit_by_name (object, "free-busy-data", arg_ics_objects);
}

/**
 * e_dbus_calendar_call_retrieve_properties:
 * @proxy: A #EDBusCalendarProxy.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.RetrieveProperties">RetrieveProperties()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_retrieve_properties_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_retrieve_properties_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_retrieve_properties (
    EDBusCalendar *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "RetrieveProperties",
    g_variant_new ("()"),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_retrieve_properties_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @out_properties: (out) (array zero-terminated=1): Return location for return parameter or %NULL to ignore.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_retrieve_properties().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_retrieve_properties().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_retrieve_properties_finish (
    EDBusCalendar *proxy,
    gchar ***out_properties,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(^as)",
                 out_properties);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_retrieve_properties_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @out_properties: (out) (array zero-terminated=1): Return location for return parameter or %NULL to ignore.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.RetrieveProperties">RetrieveProperties()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_retrieve_properties() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_retrieve_properties_sync (
    EDBusCalendar *proxy,
    gchar ***out_properties,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "RetrieveProperties",
    g_variant_new ("()"),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(^as)",
                 out_properties);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_open:
 * @proxy: A #EDBusCalendarProxy.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.Open">Open()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_open_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_open_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_open (
    EDBusCalendar *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "Open",
    g_variant_new ("()"),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_open_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @out_properties: (out) (array zero-terminated=1): Return location for return parameter or %NULL to ignore.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_open().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_open().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_open_finish (
    EDBusCalendar *proxy,
    gchar ***out_properties,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(^as)",
                 out_properties);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_open_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @out_properties: (out) (array zero-terminated=1): Return location for return parameter or %NULL to ignore.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.Open">Open()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_open() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_open_sync (
    EDBusCalendar *proxy,
    gchar ***out_properties,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "Open",
    g_variant_new ("()"),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(^as)",
                 out_properties);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_close:
 * @proxy: A #EDBusCalendarProxy.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.Close">Close()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_close_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_close_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_close (
    EDBusCalendar *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "Close",
    g_variant_new ("()"),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_close_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_close().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_close().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_close_finish (
    EDBusCalendar *proxy,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_close_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.Close">Close()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_close() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_close_sync (
    EDBusCalendar *proxy,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "Close",
    g_variant_new ("()"),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_refresh:
 * @proxy: A #EDBusCalendarProxy.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.Refresh">Refresh()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_refresh_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_refresh_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_refresh (
    EDBusCalendar *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "Refresh",
    g_variant_new ("()"),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_refresh_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_refresh().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_refresh().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_refresh_finish (
    EDBusCalendar *proxy,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_refresh_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.Refresh">Refresh()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_refresh() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_refresh_sync (
    EDBusCalendar *proxy,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "Refresh",
    g_variant_new ("()"),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_create_objects:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_ics_objects: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.CreateObjects">CreateObjects()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_create_objects_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_create_objects_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_create_objects (
    EDBusCalendar *proxy,
    const gchar *const *arg_ics_objects,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "CreateObjects",
    g_variant_new ("(^as)",
                   arg_ics_objects),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_create_objects_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @out_uids: (out) (array zero-terminated=1): Return location for return parameter or %NULL to ignore.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_create_objects().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_create_objects().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_create_objects_finish (
    EDBusCalendar *proxy,
    gchar ***out_uids,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(^as)",
                 out_uids);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_create_objects_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_ics_objects: Argument to pass with the method invocation.
 * @out_uids: (out) (array zero-terminated=1): Return location for return parameter or %NULL to ignore.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.CreateObjects">CreateObjects()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_create_objects() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_create_objects_sync (
    EDBusCalendar *proxy,
    const gchar *const *arg_ics_objects,
    gchar ***out_uids,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "CreateObjects",
    g_variant_new ("(^as)",
                   arg_ics_objects),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(^as)",
                 out_uids);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_modify_objects:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_ics_objects: Argument to pass with the method invocation.
 * @arg_mod_type: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.ModifyObjects">ModifyObjects()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_modify_objects_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_modify_objects_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_modify_objects (
    EDBusCalendar *proxy,
    const gchar *const *arg_ics_objects,
    const gchar *arg_mod_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "ModifyObjects",
    g_variant_new ("(^ass)",
                   arg_ics_objects,
                   arg_mod_type),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_modify_objects_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_modify_objects().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_modify_objects().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_modify_objects_finish (
    EDBusCalendar *proxy,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_modify_objects_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_ics_objects: Argument to pass with the method invocation.
 * @arg_mod_type: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.ModifyObjects">ModifyObjects()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_modify_objects() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_modify_objects_sync (
    EDBusCalendar *proxy,
    const gchar *const *arg_ics_objects,
    const gchar *arg_mod_type,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "ModifyObjects",
    g_variant_new ("(^ass)",
                   arg_ics_objects,
                   arg_mod_type),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_remove_objects:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_uid_rid_array: Argument to pass with the method invocation.
 * @arg_mod_type: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.RemoveObjects">RemoveObjects()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_remove_objects_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_remove_objects_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_remove_objects (
    EDBusCalendar *proxy,
    GVariant *arg_uid_rid_array,
    const gchar *arg_mod_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "RemoveObjects",
    g_variant_new ("(@a(ss)s)",
                   arg_uid_rid_array,
                   arg_mod_type),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_remove_objects_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_remove_objects().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_remove_objects().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_remove_objects_finish (
    EDBusCalendar *proxy,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_remove_objects_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_uid_rid_array: Argument to pass with the method invocation.
 * @arg_mod_type: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.RemoveObjects">RemoveObjects()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_remove_objects() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_remove_objects_sync (
    EDBusCalendar *proxy,
    GVariant *arg_uid_rid_array,
    const gchar *arg_mod_type,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "RemoveObjects",
    g_variant_new ("(@a(ss)s)",
                   arg_uid_rid_array,
                   arg_mod_type),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_receive_objects:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_ics_object: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.ReceiveObjects">ReceiveObjects()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_receive_objects_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_receive_objects_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_receive_objects (
    EDBusCalendar *proxy,
    const gchar *arg_ics_object,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "ReceiveObjects",
    g_variant_new ("(s)",
                   arg_ics_object),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_receive_objects_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_receive_objects().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_receive_objects().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_receive_objects_finish (
    EDBusCalendar *proxy,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_receive_objects_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_ics_object: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.ReceiveObjects">ReceiveObjects()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_receive_objects() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_receive_objects_sync (
    EDBusCalendar *proxy,
    const gchar *arg_ics_object,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "ReceiveObjects",
    g_variant_new ("(s)",
                   arg_ics_object),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_send_objects:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_ics_object: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.SendObjects">SendObjects()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_send_objects_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_send_objects_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_send_objects (
    EDBusCalendar *proxy,
    const gchar *arg_ics_object,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "SendObjects",
    g_variant_new ("(s)",
                   arg_ics_object),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_send_objects_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @out_users: (out) (array zero-terminated=1): Return location for return parameter or %NULL to ignore.
 * @out_out_ics_object: (out): Return location for return parameter or %NULL to ignore.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_send_objects().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_send_objects().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_send_objects_finish (
    EDBusCalendar *proxy,
    gchar ***out_users,
    gchar **out_out_ics_object,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(^ass)",
                 out_users,
                 out_out_ics_object);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_send_objects_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_ics_object: Argument to pass with the method invocation.
 * @out_users: (out) (array zero-terminated=1): Return location for return parameter or %NULL to ignore.
 * @out_out_ics_object: (out): Return location for return parameter or %NULL to ignore.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.SendObjects">SendObjects()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_send_objects() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_send_objects_sync (
    EDBusCalendar *proxy,
    const gchar *arg_ics_object,
    gchar ***out_users,
    gchar **out_out_ics_object,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "SendObjects",
    g_variant_new ("(s)",
                   arg_ics_object),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(^ass)",
                 out_users,
                 out_out_ics_object);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_get_object:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_uid: Argument to pass with the method invocation.
 * @arg_rid: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetObject">GetObject()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_get_object_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_get_object_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_get_object (
    EDBusCalendar *proxy,
    const gchar *arg_uid,
    const gchar *arg_rid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "GetObject",
    g_variant_new ("(ss)",
                   arg_uid,
                   arg_rid),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_get_object_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @out_ics_object: (out): Return location for return parameter or %NULL to ignore.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_get_object().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_get_object().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_get_object_finish (
    EDBusCalendar *proxy,
    gchar **out_ics_object,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(s)",
                 out_ics_object);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_get_object_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_uid: Argument to pass with the method invocation.
 * @arg_rid: Argument to pass with the method invocation.
 * @out_ics_object: (out): Return location for return parameter or %NULL to ignore.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetObject">GetObject()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_get_object() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_get_object_sync (
    EDBusCalendar *proxy,
    const gchar *arg_uid,
    const gchar *arg_rid,
    gchar **out_ics_object,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "GetObject",
    g_variant_new ("(ss)",
                   arg_uid,
                   arg_rid),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(s)",
                 out_ics_object);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_get_object_list:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_query: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetObjectList">GetObjectList()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_get_object_list_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_get_object_list_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_get_object_list (
    EDBusCalendar *proxy,
    const gchar *arg_query,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "GetObjectList",
    g_variant_new ("(s)",
                   arg_query),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_get_object_list_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @out_ics_objects: (out) (array zero-terminated=1): Return location for return parameter or %NULL to ignore.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_get_object_list().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_get_object_list().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_get_object_list_finish (
    EDBusCalendar *proxy,
    gchar ***out_ics_objects,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(^as)",
                 out_ics_objects);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_get_object_list_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_query: Argument to pass with the method invocation.
 * @out_ics_objects: (out) (array zero-terminated=1): Return location for return parameter or %NULL to ignore.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetObjectList">GetObjectList()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_get_object_list() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_get_object_list_sync (
    EDBusCalendar *proxy,
    const gchar *arg_query,
    gchar ***out_ics_objects,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "GetObjectList",
    g_variant_new ("(s)",
                   arg_query),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(^as)",
                 out_ics_objects);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_get_free_busy:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_start: Argument to pass with the method invocation.
 * @arg_end: Argument to pass with the method invocation.
 * @arg_users: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetFreeBusy">GetFreeBusy()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_get_free_busy_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_get_free_busy_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_get_free_busy (
    EDBusCalendar *proxy,
    gint64 arg_start,
    gint64 arg_end,
    const gchar *const *arg_users,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "GetFreeBusy",
    g_variant_new ("(xx^as)",
                   arg_start,
                   arg_end,
                   arg_users),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_get_free_busy_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @out_freebusy: (out) (array zero-terminated=1): Return location for return parameter or %NULL to ignore.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_get_free_busy().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_get_free_busy().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_get_free_busy_finish (
    EDBusCalendar *proxy,
    gchar ***out_freebusy,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(^as)",
                 out_freebusy);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_get_free_busy_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_start: Argument to pass with the method invocation.
 * @arg_end: Argument to pass with the method invocation.
 * @arg_users: Argument to pass with the method invocation.
 * @out_freebusy: (out) (array zero-terminated=1): Return location for return parameter or %NULL to ignore.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetFreeBusy">GetFreeBusy()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_get_free_busy() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_get_free_busy_sync (
    EDBusCalendar *proxy,
    gint64 arg_start,
    gint64 arg_end,
    const gchar *const *arg_users,
    gchar ***out_freebusy,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "GetFreeBusy",
    g_variant_new ("(xx^as)",
                   arg_start,
                   arg_end,
                   arg_users),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(^as)",
                 out_freebusy);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_get_attachment_uris:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_uid: Argument to pass with the method invocation.
 * @arg_rid: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetAttachmentUris">GetAttachmentUris()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_get_attachment_uris_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_get_attachment_uris_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_get_attachment_uris (
    EDBusCalendar *proxy,
    const gchar *arg_uid,
    const gchar *arg_rid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "GetAttachmentUris",
    g_variant_new ("(ss)",
                   arg_uid,
                   arg_rid),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_get_attachment_uris_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @out_uris: (out) (array zero-terminated=1): Return location for return parameter or %NULL to ignore.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_get_attachment_uris().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_get_attachment_uris().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_get_attachment_uris_finish (
    EDBusCalendar *proxy,
    gchar ***out_uris,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(^as)",
                 out_uris);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_get_attachment_uris_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_uid: Argument to pass with the method invocation.
 * @arg_rid: Argument to pass with the method invocation.
 * @out_uris: (out) (array zero-terminated=1): Return location for return parameter or %NULL to ignore.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetAttachmentUris">GetAttachmentUris()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_get_attachment_uris() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_get_attachment_uris_sync (
    EDBusCalendar *proxy,
    const gchar *arg_uid,
    const gchar *arg_rid,
    gchar ***out_uris,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "GetAttachmentUris",
    g_variant_new ("(ss)",
                   arg_uid,
                   arg_rid),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(^as)",
                 out_uris);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_discard_alarm:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_uid: Argument to pass with the method invocation.
 * @arg_rid: Argument to pass with the method invocation.
 * @arg_alarm_uid: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.DiscardAlarm">DiscardAlarm()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_discard_alarm_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_discard_alarm_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_discard_alarm (
    EDBusCalendar *proxy,
    const gchar *arg_uid,
    const gchar *arg_rid,
    const gchar *arg_alarm_uid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "DiscardAlarm",
    g_variant_new ("(sss)",
                   arg_uid,
                   arg_rid,
                   arg_alarm_uid),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_discard_alarm_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_discard_alarm().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_discard_alarm().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_discard_alarm_finish (
    EDBusCalendar *proxy,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_discard_alarm_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_uid: Argument to pass with the method invocation.
 * @arg_rid: Argument to pass with the method invocation.
 * @arg_alarm_uid: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.DiscardAlarm">DiscardAlarm()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_discard_alarm() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_discard_alarm_sync (
    EDBusCalendar *proxy,
    const gchar *arg_uid,
    const gchar *arg_rid,
    const gchar *arg_alarm_uid,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "DiscardAlarm",
    g_variant_new ("(sss)",
                   arg_uid,
                   arg_rid,
                   arg_alarm_uid),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_get_timezone:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_tz_id: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetTimezone">GetTimezone()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_get_timezone_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_get_timezone_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_get_timezone (
    EDBusCalendar *proxy,
    const gchar *arg_tz_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "GetTimezone",
    g_variant_new ("(s)",
                   arg_tz_id),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_get_timezone_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @out_tz_object: (out): Return location for return parameter or %NULL to ignore.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_get_timezone().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_get_timezone().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_get_timezone_finish (
    EDBusCalendar *proxy,
    gchar **out_tz_object,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(s)",
                 out_tz_object);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_get_timezone_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_tz_id: Argument to pass with the method invocation.
 * @out_tz_object: (out): Return location for return parameter or %NULL to ignore.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetTimezone">GetTimezone()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_get_timezone() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_get_timezone_sync (
    EDBusCalendar *proxy,
    const gchar *arg_tz_id,
    gchar **out_tz_object,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "GetTimezone",
    g_variant_new ("(s)",
                   arg_tz_id),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(s)",
                 out_tz_object);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_add_timezone:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_tz_object: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.AddTimezone">AddTimezone()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_add_timezone_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_add_timezone_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_add_timezone (
    EDBusCalendar *proxy,
    const gchar *arg_tz_object,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "AddTimezone",
    g_variant_new ("(s)",
                   arg_tz_object),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_add_timezone_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_add_timezone().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_add_timezone().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_add_timezone_finish (
    EDBusCalendar *proxy,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_add_timezone_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_tz_object: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.AddTimezone">AddTimezone()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_add_timezone() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_add_timezone_sync (
    EDBusCalendar *proxy,
    const gchar *arg_tz_object,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "AddTimezone",
    g_variant_new ("(s)",
                   arg_tz_object),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "()");
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_get_view:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_query: Argument to pass with the method invocation.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied or %NULL.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetView">GetView()</link> D-Bus method on @proxy.
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_call_get_view_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_call_get_view_sync() for the synchronous, blocking version of this method.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_call_get_view (
    EDBusCalendar *proxy,
    const gchar *arg_query,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data)
{
  g_dbus_proxy_call (G_DBUS_PROXY (proxy),
    "GetView",
    g_variant_new ("(s)",
                   arg_query),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    callback,
    user_data);
}

/**
 * e_dbus_calendar_call_get_view_finish:
 * @proxy: A #EDBusCalendarProxy.
 * @out_object_path: (out): Return location for return parameter or %NULL to ignore.
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_call_get_view().
 * @error: Return location for error or %NULL.
 *
 * Finishes an operation started with e_dbus_calendar_call_get_view().
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_get_view_finish (
    EDBusCalendar *proxy,
    gchar **out_object_path,
    GAsyncResult *res,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_finish (G_DBUS_PROXY (proxy), res, error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(o)",
                 out_object_path);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_call_get_view_sync:
 * @proxy: A #EDBusCalendarProxy.
 * @arg_query: Argument to pass with the method invocation.
 * @out_object_path: (out): Return location for return parameter or %NULL to ignore.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL.
 *
 * Synchronously invokes the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetView">GetView()</link> D-Bus method on @proxy. The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_call_get_view() for the asynchronous version of this method.
 *
 * Returns: (skip): %TRUE if the call succeded, %FALSE if @error is set.
 *
 * Since: 3.8
 */
gboolean
e_dbus_calendar_call_get_view_sync (
    EDBusCalendar *proxy,
    const gchar *arg_query,
    gchar **out_object_path,
    GCancellable *cancellable,
    GError **error)
{
  GVariant *_ret;
  _ret = g_dbus_proxy_call_sync (G_DBUS_PROXY (proxy),
    "GetView",
    g_variant_new ("(s)",
                   arg_query),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    cancellable,
    error);
  if (_ret == NULL)
    goto _out;
  g_variant_get (_ret,
                 "(o)",
                 out_object_path);
  g_variant_unref (_ret);
_out:
  return _ret != NULL;
}

/**
 * e_dbus_calendar_complete_retrieve_properties:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 * @properties: Parameter to return.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.RetrieveProperties">RetrieveProperties()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_retrieve_properties (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *properties)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("(^as)",
                   properties));
}

/**
 * e_dbus_calendar_complete_open:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 * @properties: Parameter to return.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.Open">Open()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_open (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *properties)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("(^as)",
                   properties));
}

/**
 * e_dbus_calendar_complete_close:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.Close">Close()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_close (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("()"));
}

/**
 * e_dbus_calendar_complete_refresh:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.Refresh">Refresh()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_refresh (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("()"));
}

/**
 * e_dbus_calendar_complete_create_objects:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 * @uids: Parameter to return.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.CreateObjects">CreateObjects()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_create_objects (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *uids)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("(^as)",
                   uids));
}

/**
 * e_dbus_calendar_complete_modify_objects:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.ModifyObjects">ModifyObjects()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_modify_objects (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("()"));
}

/**
 * e_dbus_calendar_complete_remove_objects:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.RemoveObjects">RemoveObjects()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_remove_objects (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("()"));
}

/**
 * e_dbus_calendar_complete_receive_objects:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.ReceiveObjects">ReceiveObjects()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_receive_objects (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("()"));
}

/**
 * e_dbus_calendar_complete_send_objects:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 * @users: Parameter to return.
 * @out_ics_object: Parameter to return.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.SendObjects">SendObjects()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_send_objects (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *users,
    const gchar *out_ics_object)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("(^ass)",
                   users,
                   out_ics_object));
}

/**
 * e_dbus_calendar_complete_get_object:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 * @ics_object: Parameter to return.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetObject">GetObject()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_get_object (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation,
    const gchar *ics_object)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("(s)",
                   ics_object));
}

/**
 * e_dbus_calendar_complete_get_object_list:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 * @ics_objects: Parameter to return.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetObjectList">GetObjectList()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_get_object_list (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *ics_objects)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("(^as)",
                   ics_objects));
}

/**
 * e_dbus_calendar_complete_get_free_busy:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 * @freebusy: Parameter to return.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetFreeBusy">GetFreeBusy()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_get_free_busy (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *freebusy)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("(^as)",
                   freebusy));
}

/**
 * e_dbus_calendar_complete_get_attachment_uris:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 * @uris: Parameter to return.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetAttachmentUris">GetAttachmentUris()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_get_attachment_uris (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *uris)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("(^as)",
                   uris));
}

/**
 * e_dbus_calendar_complete_discard_alarm:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.DiscardAlarm">DiscardAlarm()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_discard_alarm (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("()"));
}

/**
 * e_dbus_calendar_complete_get_timezone:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 * @tz_object: Parameter to return.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetTimezone">GetTimezone()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_get_timezone (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation,
    const gchar *tz_object)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("(s)",
                   tz_object));
}

/**
 * e_dbus_calendar_complete_add_timezone:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.AddTimezone">AddTimezone()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_add_timezone (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("()"));
}

/**
 * e_dbus_calendar_complete_get_view:
 * @object: A #EDBusCalendar.
 * @invocation: (transfer full): A #GDBusMethodInvocation.
 * @object_path: Parameter to return.
 *
 * Helper function used in service implementations to finish handling invocations of the <link linkend="gdbus-method-org-gnome-evolution-dataserver-Calendar.GetView">GetView()</link> D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
 *
 * This method will free @invocation, you cannot use it afterwards.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_complete_get_view (
    EDBusCalendar *object,
    GDBusMethodInvocation *invocation,
    const gchar *object_path)
{
  g_dbus_method_invocation_return_value (invocation,
    g_variant_new ("(o)",
                   object_path));
}

/* ------------------------------------------------------------------------ */

/**
 * EDBusCalendarProxy:
 *
 * The #EDBusCalendarProxy structure contains only private data and should only be accessed using the provided API.
 *
 * Since: 3.8
 */

/**
 * EDBusCalendarProxyClass:
 * @parent_class: The parent class.
 *
 * Class structure for #EDBusCalendarProxy.
 *
 * Since: 3.8
 */

struct _EDBusCalendarProxyPrivate
{
  GData *qdata;
};

static void e_dbus_calendar_proxy_iface_init (EDBusCalendarIface *iface);

#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
G_DEFINE_TYPE_WITH_CODE (EDBusCalendarProxy, e_dbus_calendar_proxy, G_TYPE_DBUS_PROXY,
                         G_ADD_PRIVATE (EDBusCalendarProxy)
                         G_IMPLEMENT_INTERFACE (E_DBUS_TYPE_CALENDAR, e_dbus_calendar_proxy_iface_init))

#else
G_DEFINE_TYPE_WITH_CODE (EDBusCalendarProxy, e_dbus_calendar_proxy, G_TYPE_DBUS_PROXY,
                         G_IMPLEMENT_INTERFACE (E_DBUS_TYPE_CALENDAR, e_dbus_calendar_proxy_iface_init))

#endif
static void
e_dbus_calendar_proxy_finalize (GObject *object)
{
  EDBusCalendarProxy *proxy = E_DBUS_CALENDAR_PROXY (object);
  g_datalist_clear (&proxy->priv->qdata);
  G_OBJECT_CLASS (e_dbus_calendar_proxy_parent_class)->finalize (object);
}

static void
e_dbus_calendar_proxy_get_property (GObject      *object,
  guint         prop_id,
  GValue       *value,
  GParamSpec   *pspec G_GNUC_UNUSED)
{
  const _ExtendedGDBusPropertyInfo *info;
  GVariant *variant;
  g_assert (prop_id != 0 && prop_id - 1 < 8);
  info = (const _ExtendedGDBusPropertyInfo *) _e_dbus_calendar_property_info_pointers[prop_id - 1];
  variant = g_dbus_proxy_get_cached_property (G_DBUS_PROXY (object), info->parent_struct.name);
  if (info->use_gvariant)
    {
      g_value_set_variant (value, variant);
    }
  else
    {
      if (variant != NULL)
        g_dbus_gvariant_to_gvalue (variant, value);
    }
  if (variant != NULL)
    g_variant_unref (variant);
}

static void
e_dbus_calendar_proxy_set_property_cb (GDBusProxy *proxy,
  GAsyncResult *res,
  gpointer      user_data)
{
  const _ExtendedGDBusPropertyInfo *info = user_data;
  GError *error;
  GVariant *_ret;
  error = NULL;
  _ret = g_dbus_proxy_call_finish (proxy, res, &error);
  if (!_ret)
    {
      g_warning ("Error setting property '%s' on interface org.gnome.evolution.dataserver.Calendar: %s (%s, %d)",
                 info->parent_struct.name, 
                 error->message, g_quark_to_string (error->domain), error->code);
      g_error_free (error);
    }
  else
    {
      g_variant_unref (_ret);
    }
}

static void
e_dbus_calendar_proxy_set_property (GObject      *object,
  guint         prop_id,
  const GValue *value,
  GParamSpec   *pspec G_GNUC_UNUSED)
{
  const _ExtendedGDBusPropertyInfo *info;
  GVariant *variant;
  g_assert (prop_id != 0 && prop_id - 1 < 8);
  info = (const _ExtendedGDBusPropertyInfo *) _e_dbus_calendar_property_info_pointers[prop_id - 1];
  variant = g_dbus_gvalue_to_gvariant (value, G_VARIANT_TYPE (info->parent_struct.signature));
  g_dbus_proxy_call (G_DBUS_PROXY (object),
    "org.freedesktop.DBus.Properties.Set",
    g_variant_new ("(ssv)", "org.gnome.evolution.dataserver.Calendar", info->parent_struct.name, variant),
    G_DBUS_CALL_FLAGS_NONE,
    -1,
    NULL, (GAsyncReadyCallback) e_dbus_calendar_proxy_set_property_cb, (GDBusPropertyInfo *) &info->parent_struct);
  g_variant_unref (variant);
}

static void
e_dbus_calendar_proxy_g_signal (GDBusProxy *proxy,
  const gchar *sender_name G_GNUC_UNUSED,
  const gchar *signal_name,
  GVariant *parameters)
{
  _ExtendedGDBusSignalInfo *info;
  GVariantIter iter;
  GVariant *child;
  GValue *paramv;
  gsize num_params;
  gsize n;
  guint signal_id;
  info = (_ExtendedGDBusSignalInfo *) g_dbus_interface_info_lookup_signal ((GDBusInterfaceInfo *) &_e_dbus_calendar_interface_info.parent_struct, signal_name);
  if (info == NULL)
    return;
  num_params = g_variant_n_children (parameters);
  paramv = g_new0 (GValue, num_params + 1);
  g_value_init (&paramv[0], E_DBUS_TYPE_CALENDAR);
  g_value_set_object (&paramv[0], proxy);
  g_variant_iter_init (&iter, parameters);
  n = 1;
  while ((child = g_variant_iter_next_value (&iter)) != NULL)
    {
      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.args[n - 1];
      if (arg_info->use_gvariant)
        {
          g_value_init (&paramv[n], G_TYPE_VARIANT);
          g_value_set_variant (&paramv[n], child);
          n++;
        }
      else
        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
      g_variant_unref (child);
    }
  signal_id = g_signal_lookup (info->signal_name, E_DBUS_TYPE_CALENDAR);
  g_signal_emitv (paramv, signal_id, 0, NULL);
  for (n = 0; n < num_params + 1; n++)
    g_value_unset (&paramv[n]);
  g_free (paramv);
}

static void
e_dbus_calendar_proxy_g_properties_changed (GDBusProxy *_proxy,
  GVariant *changed_properties,
  const gchar *const *invalidated_properties)
{
  EDBusCalendarProxy *proxy = E_DBUS_CALENDAR_PROXY (_proxy);
  guint n;
  const gchar *key;
  GVariantIter *iter;
  _ExtendedGDBusPropertyInfo *info;
  g_variant_get (changed_properties, "a{sv}", &iter);
  while (g_variant_iter_next (iter, "{&sv}", &key, NULL))
    {
      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_e_dbus_calendar_interface_info.parent_struct, key);
      g_datalist_remove_data (&proxy->priv->qdata, key);
      if (info != NULL)
        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
    }
  g_variant_iter_free (iter);
  for (n = 0; invalidated_properties[n] != NULL; n++)
    {
      info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_e_dbus_calendar_interface_info.parent_struct, invalidated_properties[n]);
      g_datalist_remove_data (&proxy->priv->qdata, invalidated_properties[n]);
      if (info != NULL)
        g_object_notify (G_OBJECT (proxy), info->hyphen_name);
    }
}

static gboolean 
e_dbus_calendar_proxy_get_online (EDBusCalendar *object)
{
  EDBusCalendarProxy *proxy = E_DBUS_CALENDAR_PROXY (object);
  GVariant *variant;
  gboolean value = 0;
  variant = g_dbus_proxy_get_cached_property (G_DBUS_PROXY (proxy), "Online");
  if (variant != NULL)
    {
      value = g_variant_get_boolean (variant);
      g_variant_unref (variant);
    }
  return value;
}

static const gchar *
e_dbus_calendar_proxy_get_revision (EDBusCalendar *object)
{
  EDBusCalendarProxy *proxy = E_DBUS_CALENDAR_PROXY (object);
  GVariant *variant;
  const gchar *value = NULL;
  variant = g_dbus_proxy_get_cached_property (G_DBUS_PROXY (proxy), "Revision");
  if (variant != NULL)
    {
      value = g_variant_get_string (variant, NULL);
      g_variant_unref (variant);
    }
  return value;
}

static gboolean 
e_dbus_calendar_proxy_get_writable (EDBusCalendar *object)
{
  EDBusCalendarProxy *proxy = E_DBUS_CALENDAR_PROXY (object);
  GVariant *variant;
  gboolean value = 0;
  variant = g_dbus_proxy_get_cached_property (G_DBUS_PROXY (proxy), "Writable");
  if (variant != NULL)
    {
      value = g_variant_get_boolean (variant);
      g_variant_unref (variant);
    }
  return value;
}

static const gchar *
e_dbus_calendar_proxy_get_cache_dir (EDBusCalendar *object)
{
  EDBusCalendarProxy *proxy = E_DBUS_CALENDAR_PROXY (object);
  GVariant *variant;
  const gchar *value = NULL;
  variant = g_dbus_proxy_get_cached_property (G_DBUS_PROXY (proxy), "CacheDir");
  if (variant != NULL)
    {
      value = g_variant_get_string (variant, NULL);
      g_variant_unref (variant);
    }
  return value;
}

static const gchar *const *
e_dbus_calendar_proxy_get_capabilities (EDBusCalendar *object)
{
  EDBusCalendarProxy *proxy = E_DBUS_CALENDAR_PROXY (object);
  GVariant *variant;
  const gchar *const *value = NULL;
  value = g_datalist_get_data (&proxy->priv->qdata, "Capabilities");
  if (value != NULL)
    return value;
  variant = g_dbus_proxy_get_cached_property (G_DBUS_PROXY (proxy), "Capabilities");
  if (variant != NULL)
    {
      value = g_variant_get_strv (variant, NULL);
      g_datalist_set_data_full (&proxy->priv->qdata, "Capabilities", (gpointer) value, g_free);
      g_variant_unref (variant);
    }
  return value;
}

static const gchar *
e_dbus_calendar_proxy_get_default_object (EDBusCalendar *object)
{
  EDBusCalendarProxy *proxy = E_DBUS_CALENDAR_PROXY (object);
  GVariant *variant;
  const gchar *value = NULL;
  variant = g_dbus_proxy_get_cached_property (G_DBUS_PROXY (proxy), "DefaultObject");
  if (variant != NULL)
    {
      value = g_variant_get_string (variant, NULL);
      g_variant_unref (variant);
    }
  return value;
}

static const gchar *
e_dbus_calendar_proxy_get_cal_email_address (EDBusCalendar *object)
{
  EDBusCalendarProxy *proxy = E_DBUS_CALENDAR_PROXY (object);
  GVariant *variant;
  const gchar *value = NULL;
  variant = g_dbus_proxy_get_cached_property (G_DBUS_PROXY (proxy), "CalEmailAddress");
  if (variant != NULL)
    {
      value = g_variant_get_string (variant, NULL);
      g_variant_unref (variant);
    }
  return value;
}

static const gchar *
e_dbus_calendar_proxy_get_alarm_email_address (EDBusCalendar *object)
{
  EDBusCalendarProxy *proxy = E_DBUS_CALENDAR_PROXY (object);
  GVariant *variant;
  const gchar *value = NULL;
  variant = g_dbus_proxy_get_cached_property (G_DBUS_PROXY (proxy), "AlarmEmailAddress");
  if (variant != NULL)
    {
      value = g_variant_get_string (variant, NULL);
      g_variant_unref (variant);
    }
  return value;
}

static void
e_dbus_calendar_proxy_init (EDBusCalendarProxy *proxy)
{
#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
  proxy->priv = e_dbus_calendar_proxy_get_instance_private (proxy);
#else
  proxy->priv = G_TYPE_INSTANCE_GET_PRIVATE (proxy, E_DBUS_TYPE_CALENDAR_PROXY, EDBusCalendarProxyPrivate);
#endif

  g_dbus_proxy_set_interface_info (G_DBUS_PROXY (proxy), e_dbus_calendar_interface_info ());
}

static void
e_dbus_calendar_proxy_class_init (EDBusCalendarProxyClass *klass)
{
  GObjectClass *gobject_class;
  GDBusProxyClass *proxy_class;

  gobject_class = G_OBJECT_CLASS (klass);
  gobject_class->finalize     = e_dbus_calendar_proxy_finalize;
  gobject_class->get_property = e_dbus_calendar_proxy_get_property;
  gobject_class->set_property = e_dbus_calendar_proxy_set_property;

  proxy_class = G_DBUS_PROXY_CLASS (klass);
  proxy_class->g_signal = e_dbus_calendar_proxy_g_signal;
  proxy_class->g_properties_changed = e_dbus_calendar_proxy_g_properties_changed;

  e_dbus_calendar_override_properties (gobject_class, 1);

#if GLIB_VERSION_MAX_ALLOWED < GLIB_VERSION_2_38
  g_type_class_add_private (klass, sizeof (EDBusCalendarProxyPrivate));
#endif
}

static void
e_dbus_calendar_proxy_iface_init (EDBusCalendarIface *iface)
{
  iface->get_online = e_dbus_calendar_proxy_get_online;
  iface->get_revision = e_dbus_calendar_proxy_get_revision;
  iface->get_writable = e_dbus_calendar_proxy_get_writable;
  iface->get_cache_dir = e_dbus_calendar_proxy_get_cache_dir;
  iface->get_capabilities = e_dbus_calendar_proxy_get_capabilities;
  iface->get_default_object = e_dbus_calendar_proxy_get_default_object;
  iface->get_cal_email_address = e_dbus_calendar_proxy_get_cal_email_address;
  iface->get_alarm_email_address = e_dbus_calendar_proxy_get_alarm_email_address;
}

/**
 * e_dbus_calendar_proxy_new:
 * @connection: A #GDBusConnection.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: (nullable): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
 * @object_path: An object path.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
 * @user_data: User data to pass to @callback.
 *
 * Asynchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-gnome-evolution-dataserver-Calendar.top_of_page">org.gnome.evolution.dataserver.Calendar</link>. See g_dbus_proxy_new() for more details.
 *
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_proxy_new_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_proxy_new_sync() for the synchronous, blocking version of this constructor.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data)
{
  g_async_initable_new_async (E_DBUS_TYPE_CALENDAR_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.gnome.evolution.dataserver.Calendar", NULL);
}

/**
 * e_dbus_calendar_proxy_new_finish:
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_proxy_new().
 * @error: Return location for error or %NULL
 *
 * Finishes an operation started with e_dbus_calendar_proxy_new().
 *
 * Returns: (transfer full) (type EDBusCalendarProxy): The constructed proxy object or %NULL if @error is set.
 *
 * Since: 3.8
 */
EDBusCalendar *
e_dbus_calendar_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error)
{
  GObject *ret;
  GObject *source_object;
  source_object = g_async_result_get_source_object (res);
  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
  g_object_unref (source_object);
  if (ret != NULL)
    return E_DBUS_CALENDAR (ret);
  else
    return NULL;
}

/**
 * e_dbus_calendar_proxy_new_sync:
 * @connection: A #GDBusConnection.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: (nullable): A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.
 * @object_path: An object path.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL
 *
 * Synchronously creates a proxy for the D-Bus interface <link linkend="gdbus-interface-org-gnome-evolution-dataserver-Calendar.top_of_page">org.gnome.evolution.dataserver.Calendar</link>. See g_dbus_proxy_new_sync() for more details.
 *
 * The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_proxy_new() for the asynchronous version of this constructor.
 *
 * Returns: (transfer full) (type EDBusCalendarProxy): The constructed proxy object or %NULL if @error is set.
 *
 * Since: 3.8
 */
EDBusCalendar *
e_dbus_calendar_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error)
{
  GInitable *ret;
  ret = g_initable_new (E_DBUS_TYPE_CALENDAR_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-connection", connection, "g-object-path", object_path, "g-interface-name", "org.gnome.evolution.dataserver.Calendar", NULL);
  if (ret != NULL)
    return E_DBUS_CALENDAR (ret);
  else
    return NULL;
}


/**
 * e_dbus_calendar_proxy_new_for_bus:
 * @bus_type: A #GBusType.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: A bus name (well-known or unique).
 * @object_path: An object path.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @callback: A #GAsyncReadyCallback to call when the request is satisfied.
 * @user_data: User data to pass to @callback.
 *
 * Like e_dbus_calendar_proxy_new() but takes a #GBusType instead of a #GDBusConnection.
 *
 * When the operation is finished, @callback will be invoked in the <link linkend="g-main-context-push-thread-default">thread-default main loop</link> of the thread you are calling this method from.
 * You can then call e_dbus_calendar_proxy_new_for_bus_finish() to get the result of the operation.
 *
 * See e_dbus_calendar_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.
 *
 * Since: 3.8
 */
void
e_dbus_calendar_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data)
{
  g_async_initable_new_async (E_DBUS_TYPE_CALENDAR_PROXY, G_PRIORITY_DEFAULT, cancellable, callback, user_data, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.gnome.evolution.dataserver.Calendar", NULL);
}

/**
 * e_dbus_calendar_proxy_new_for_bus_finish:
 * @res: The #GAsyncResult obtained from the #GAsyncReadyCallback passed to e_dbus_calendar_proxy_new_for_bus().
 * @error: Return location for error or %NULL
 *
 * Finishes an operation started with e_dbus_calendar_proxy_new_for_bus().
 *
 * Returns: (transfer full) (type EDBusCalendarProxy): The constructed proxy object or %NULL if @error is set.
 *
 * Since: 3.8
 */
EDBusCalendar *
e_dbus_calendar_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error)
{
  GObject *ret;
  GObject *source_object;
  source_object = g_async_result_get_source_object (res);
  ret = g_async_initable_new_finish (G_ASYNC_INITABLE (source_object), res, error);
  g_object_unref (source_object);
  if (ret != NULL)
    return E_DBUS_CALENDAR (ret);
  else
    return NULL;
}

/**
 * e_dbus_calendar_proxy_new_for_bus_sync:
 * @bus_type: A #GBusType.
 * @flags: Flags from the #GDBusProxyFlags enumeration.
 * @name: A bus name (well-known or unique).
 * @object_path: An object path.
 * @cancellable: (nullable): A #GCancellable or %NULL.
 * @error: Return location for error or %NULL
 *
 * Like e_dbus_calendar_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.
 *
 * The calling thread is blocked until a reply is received.
 *
 * See e_dbus_calendar_proxy_new_for_bus() for the asynchronous version of this constructor.
 *
 * Returns: (transfer full) (type EDBusCalendarProxy): The constructed proxy object or %NULL if @error is set.
 *
 * Since: 3.8
 */
EDBusCalendar *
e_dbus_calendar_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error)
{
  GInitable *ret;
  ret = g_initable_new (E_DBUS_TYPE_CALENDAR_PROXY, cancellable, error, "g-flags", flags, "g-name", name, "g-bus-type", bus_type, "g-object-path", object_path, "g-interface-name", "org.gnome.evolution.dataserver.Calendar", NULL);
  if (ret != NULL)
    return E_DBUS_CALENDAR (ret);
  else
    return NULL;
}


/* ------------------------------------------------------------------------ */

/**
 * EDBusCalendarSkeleton:
 *
 * The #EDBusCalendarSkeleton structure contains only private data and should only be accessed using the provided API.
 *
 * Since: 3.8
 */

/**
 * EDBusCalendarSkeletonClass:
 * @parent_class: The parent class.
 *
 * Class structure for #EDBusCalendarSkeleton.
 *
 * Since: 3.8
 */

struct _EDBusCalendarSkeletonPrivate
{
  GValue *properties;
  GList *changed_properties;
  GSource *changed_properties_idle_source;
  GMainContext *context;
  GMutex lock;
};

static void
_e_dbus_calendar_skeleton_handle_method_call (
  GDBusConnection *connection G_GNUC_UNUSED,
  const gchar *sender G_GNUC_UNUSED,
  const gchar *object_path G_GNUC_UNUSED,
  const gchar *interface_name,
  const gchar *method_name,
  GVariant *parameters,
  GDBusMethodInvocation *invocation,
  gpointer user_data)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (user_data);
  _ExtendedGDBusMethodInfo *info;
  GVariantIter iter;
  GVariant *child;
  GValue *paramv;
  gsize num_params;
  guint num_extra;
  gsize n;
  guint signal_id;
  GValue return_value = G_VALUE_INIT;
  info = (_ExtendedGDBusMethodInfo *) g_dbus_method_invocation_get_method_info (invocation);
  g_assert (info != NULL);
  num_params = g_variant_n_children (parameters);
  num_extra = info->pass_fdlist ? 3 : 2;  paramv = g_new0 (GValue, num_params + num_extra);
  n = 0;
  g_value_init (&paramv[n], E_DBUS_TYPE_CALENDAR);
  g_value_set_object (&paramv[n++], skeleton);
  g_value_init (&paramv[n], G_TYPE_DBUS_METHOD_INVOCATION);
  g_value_set_object (&paramv[n++], invocation);
  if (info->pass_fdlist)
    {
#ifdef G_OS_UNIX
      g_value_init (&paramv[n], G_TYPE_UNIX_FD_LIST);
      g_value_set_object (&paramv[n++], g_dbus_message_get_unix_fd_list (g_dbus_method_invocation_get_message (invocation)));
#else
      g_assert_not_reached ();
#endif
    }
  g_variant_iter_init (&iter, parameters);
  while ((child = g_variant_iter_next_value (&iter)) != NULL)
    {
      _ExtendedGDBusArgInfo *arg_info = (_ExtendedGDBusArgInfo *) info->parent_struct.in_args[n - num_extra];
      if (arg_info->use_gvariant)
        {
          g_value_init (&paramv[n], G_TYPE_VARIANT);
          g_value_set_variant (&paramv[n], child);
          n++;
        }
      else
        g_dbus_gvariant_to_gvalue (child, &paramv[n++]);
      g_variant_unref (child);
    }
  signal_id = g_signal_lookup (info->signal_name, E_DBUS_TYPE_CALENDAR);
  g_value_init (&return_value, G_TYPE_BOOLEAN);
  g_signal_emitv (paramv, signal_id, 0, &return_value);
  if (!g_value_get_boolean (&return_value))
    g_dbus_method_invocation_return_error (invocation, G_DBUS_ERROR, G_DBUS_ERROR_UNKNOWN_METHOD, "Method %s is not implemented on interface %s", method_name, interface_name);
  g_value_unset (&return_value);
  for (n = 0; n < num_params + num_extra; n++)
    g_value_unset (&paramv[n]);
  g_free (paramv);
}

static GVariant *
_e_dbus_calendar_skeleton_handle_get_property (
  GDBusConnection *connection G_GNUC_UNUSED,
  const gchar *sender G_GNUC_UNUSED,
  const gchar *object_path G_GNUC_UNUSED,
  const gchar *interface_name G_GNUC_UNUSED,
  const gchar *property_name,
  GError **error,
  gpointer user_data)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (user_data);
  GValue value = G_VALUE_INIT;
  GParamSpec *pspec;
  _ExtendedGDBusPropertyInfo *info;
  GVariant *ret;
  ret = NULL;
  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_e_dbus_calendar_interface_info.parent_struct, property_name);
  g_assert (info != NULL);
  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
  if (pspec == NULL)
    {
      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
    }
  else
    {
      g_value_init (&value, pspec->value_type);
      g_object_get_property (G_OBJECT (skeleton), info->hyphen_name, &value);
      ret = g_dbus_gvalue_to_gvariant (&value, G_VARIANT_TYPE (info->parent_struct.signature));
      g_value_unset (&value);
    }
  return ret;
}

static gboolean
_e_dbus_calendar_skeleton_handle_set_property (
  GDBusConnection *connection G_GNUC_UNUSED,
  const gchar *sender G_GNUC_UNUSED,
  const gchar *object_path G_GNUC_UNUSED,
  const gchar *interface_name G_GNUC_UNUSED,
  const gchar *property_name,
  GVariant *variant,
  GError **error,
  gpointer user_data)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (user_data);
  GValue value = G_VALUE_INIT;
  GParamSpec *pspec;
  _ExtendedGDBusPropertyInfo *info;
  gboolean ret;
  ret = FALSE;
  info = (_ExtendedGDBusPropertyInfo *) g_dbus_interface_info_lookup_property ((GDBusInterfaceInfo *) &_e_dbus_calendar_interface_info.parent_struct, property_name);
  g_assert (info != NULL);
  pspec = g_object_class_find_property (G_OBJECT_GET_CLASS (skeleton), info->hyphen_name);
  if (pspec == NULL)
    {
      g_set_error (error, G_DBUS_ERROR, G_DBUS_ERROR_INVALID_ARGS, "No property with name %s", property_name);
    }
  else
    {
      if (info->use_gvariant)
        g_value_set_variant (&value, variant);
      else
        g_dbus_gvariant_to_gvalue (variant, &value);
      g_object_set_property (G_OBJECT (skeleton), info->hyphen_name, &value);
      g_value_unset (&value);
      ret = TRUE;
    }
  return ret;
}

static const GDBusInterfaceVTable _e_dbus_calendar_skeleton_vtable =
{
  _e_dbus_calendar_skeleton_handle_method_call,
  _e_dbus_calendar_skeleton_handle_get_property,
  _e_dbus_calendar_skeleton_handle_set_property,
  {NULL}
};

static GDBusInterfaceInfo *
e_dbus_calendar_skeleton_dbus_interface_get_info (GDBusInterfaceSkeleton *skeleton G_GNUC_UNUSED)
{
  return e_dbus_calendar_interface_info ();
}

static GDBusInterfaceVTable *
e_dbus_calendar_skeleton_dbus_interface_get_vtable (GDBusInterfaceSkeleton *skeleton G_GNUC_UNUSED)
{
  return (GDBusInterfaceVTable *) &_e_dbus_calendar_skeleton_vtable;
}

static GVariant *
e_dbus_calendar_skeleton_dbus_interface_get_properties (GDBusInterfaceSkeleton *_skeleton)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (_skeleton);

  GVariantBuilder builder;
  guint n;
  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
  if (_e_dbus_calendar_interface_info.parent_struct.properties == NULL)
    goto out;
  for (n = 0; _e_dbus_calendar_interface_info.parent_struct.properties[n] != NULL; n++)
    {
      GDBusPropertyInfo *info = _e_dbus_calendar_interface_info.parent_struct.properties[n];
      if (info->flags & G_DBUS_PROPERTY_INFO_FLAGS_READABLE)
        {
          GVariant *value;
          value = _e_dbus_calendar_skeleton_handle_get_property (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)), NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "org.gnome.evolution.dataserver.Calendar", info->name, NULL, skeleton);
          if (value != NULL)
            {
              g_variant_take_ref (value);
              g_variant_builder_add (&builder, "{sv}", info->name, value);
              g_variant_unref (value);
            }
        }
    }
out:
  return g_variant_builder_end (&builder);
}

static gboolean _e_dbus_calendar_emit_changed (gpointer user_data);

static void
e_dbus_calendar_skeleton_dbus_interface_flush (GDBusInterfaceSkeleton *_skeleton)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (_skeleton);
  gboolean emit_changed = FALSE;

  g_mutex_lock (&skeleton->priv->lock);
  if (skeleton->priv->changed_properties_idle_source != NULL)
    {
      g_source_destroy (skeleton->priv->changed_properties_idle_source);
      skeleton->priv->changed_properties_idle_source = NULL;
      emit_changed = TRUE;
    }
  g_mutex_unlock (&skeleton->priv->lock);

  if (emit_changed)
    _e_dbus_calendar_emit_changed (skeleton);
}

static void
_e_dbus_calendar_on_signal_error (
    EDBusCalendar *object,
    const gchar *arg_error_message)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (object);

  GList      *connections, *l;
  GVariant   *signal_variant;
  connections = g_dbus_interface_skeleton_get_connections (G_DBUS_INTERFACE_SKELETON (skeleton));

  signal_variant = g_variant_ref_sink (g_variant_new ("(s)",
                   arg_error_message));
  for (l = connections; l != NULL; l = l->next)
    {
      GDBusConnection *connection = l->data;
      g_dbus_connection_emit_signal (connection,
        NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "org.gnome.evolution.dataserver.Calendar", "Error",
        signal_variant, NULL);
    }
  g_variant_unref (signal_variant);
  g_list_free_full (connections, g_object_unref);
}

static void
_e_dbus_calendar_on_signal_free_busy_data (
    EDBusCalendar *object,
    const gchar *const *arg_ics_objects)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (object);

  GList      *connections, *l;
  GVariant   *signal_variant;
  connections = g_dbus_interface_skeleton_get_connections (G_DBUS_INTERFACE_SKELETON (skeleton));

  signal_variant = g_variant_ref_sink (g_variant_new ("(^as)",
                   arg_ics_objects));
  for (l = connections; l != NULL; l = l->next)
    {
      GDBusConnection *connection = l->data;
      g_dbus_connection_emit_signal (connection,
        NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)), "org.gnome.evolution.dataserver.Calendar", "FreeBusyData",
        signal_variant, NULL);
    }
  g_variant_unref (signal_variant);
  g_list_free_full (connections, g_object_unref);
}

static void e_dbus_calendar_skeleton_iface_init (EDBusCalendarIface *iface);
#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
G_DEFINE_TYPE_WITH_CODE (EDBusCalendarSkeleton, e_dbus_calendar_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
                         G_ADD_PRIVATE (EDBusCalendarSkeleton)
                         G_IMPLEMENT_INTERFACE (E_DBUS_TYPE_CALENDAR, e_dbus_calendar_skeleton_iface_init))

#else
G_DEFINE_TYPE_WITH_CODE (EDBusCalendarSkeleton, e_dbus_calendar_skeleton, G_TYPE_DBUS_INTERFACE_SKELETON,
                         G_IMPLEMENT_INTERFACE (E_DBUS_TYPE_CALENDAR, e_dbus_calendar_skeleton_iface_init))

#endif
static void
e_dbus_calendar_skeleton_finalize (GObject *object)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (object);
  guint n;
  for (n = 0; n < 8; n++)
    g_value_unset (&skeleton->priv->properties[n]);
  g_free (skeleton->priv->properties);
  g_list_free_full (skeleton->priv->changed_properties, (GDestroyNotify) _changed_property_free);
  if (skeleton->priv->changed_properties_idle_source != NULL)
    g_source_destroy (skeleton->priv->changed_properties_idle_source);
  g_main_context_unref (skeleton->priv->context);
  g_mutex_clear (&skeleton->priv->lock);
  G_OBJECT_CLASS (e_dbus_calendar_skeleton_parent_class)->finalize (object);
}

static void
e_dbus_calendar_skeleton_get_property (GObject      *object,
  guint         prop_id,
  GValue       *value,
  GParamSpec   *pspec G_GNUC_UNUSED)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (object);
  g_assert (prop_id != 0 && prop_id - 1 < 8);
  g_mutex_lock (&skeleton->priv->lock);
  g_value_copy (&skeleton->priv->properties[prop_id - 1], value);
  g_mutex_unlock (&skeleton->priv->lock);
}

static gboolean
_e_dbus_calendar_emit_changed (gpointer user_data)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (user_data);
  GList *l;
  GVariantBuilder builder;
  GVariantBuilder invalidated_builder;
  guint num_changes;

  g_mutex_lock (&skeleton->priv->lock);
  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a{sv}"));
  g_variant_builder_init (&invalidated_builder, G_VARIANT_TYPE ("as"));
  for (l = skeleton->priv->changed_properties, num_changes = 0; l != NULL; l = l->next)
    {
      ChangedProperty *cp = l->data;
      GVariant *variant;
      const GValue *cur_value;

      cur_value = &skeleton->priv->properties[cp->prop_id - 1];
      if (!_g_value_equal (cur_value, &cp->orig_value))
        {
          variant = g_dbus_gvalue_to_gvariant (cur_value, G_VARIANT_TYPE (cp->info->parent_struct.signature));
          g_variant_builder_add (&builder, "{sv}", cp->info->parent_struct.name, variant);
          g_variant_unref (variant);
          num_changes++;
        }
    }
  if (num_changes > 0)
    {
      GList *connections, *ll;
      GVariant *signal_variant;
      signal_variant = g_variant_ref_sink (g_variant_new ("(sa{sv}as)", "org.gnome.evolution.dataserver.Calendar",
                                           &builder, &invalidated_builder));
      connections = g_dbus_interface_skeleton_get_connections (G_DBUS_INTERFACE_SKELETON (skeleton));
      for (ll = connections; ll != NULL; ll = ll->next)
        {
          GDBusConnection *connection = ll->data;

          g_dbus_connection_emit_signal (connection,
                                         NULL, g_dbus_interface_skeleton_get_object_path (G_DBUS_INTERFACE_SKELETON (skeleton)),
                                         "org.freedesktop.DBus.Properties",
                                         "PropertiesChanged",
                                         signal_variant,
                                         NULL);
        }
      g_variant_unref (signal_variant);
      g_list_free_full (connections, g_object_unref);
    }
  else
    {
      g_variant_builder_clear (&builder);
      g_variant_builder_clear (&invalidated_builder);
    }
  g_list_free_full (skeleton->priv->changed_properties, (GDestroyNotify) _changed_property_free);
  skeleton->priv->changed_properties = NULL;
  skeleton->priv->changed_properties_idle_source = NULL;
  g_mutex_unlock (&skeleton->priv->lock);
  return FALSE;
}

static void
_e_dbus_calendar_schedule_emit_changed (EDBusCalendarSkeleton *skeleton, const _ExtendedGDBusPropertyInfo *info, guint prop_id, const GValue *orig_value)
{
  ChangedProperty *cp;
  GList *l;
  cp = NULL;
  for (l = skeleton->priv->changed_properties; l != NULL; l = l->next)
    {
      ChangedProperty *i_cp = l->data;
      if (i_cp->info == info)
        {
          cp = i_cp;
          break;
        }
    }
  if (cp == NULL)
    {
      cp = g_new0 (ChangedProperty, 1);
      cp->prop_id = prop_id;
      cp->info = info;
      skeleton->priv->changed_properties = g_list_prepend (skeleton->priv->changed_properties, cp);
      g_value_init (&cp->orig_value, G_VALUE_TYPE (orig_value));
      g_value_copy (orig_value, &cp->orig_value);
    }
}

static void
e_dbus_calendar_skeleton_notify (GObject      *object,
  GParamSpec *pspec G_GNUC_UNUSED)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (object);
  g_mutex_lock (&skeleton->priv->lock);
  if (skeleton->priv->changed_properties != NULL &&
      skeleton->priv->changed_properties_idle_source == NULL)
    {
      skeleton->priv->changed_properties_idle_source = g_idle_source_new ();
      g_source_set_priority (skeleton->priv->changed_properties_idle_source, G_PRIORITY_DEFAULT);
      g_source_set_callback (skeleton->priv->changed_properties_idle_source, _e_dbus_calendar_emit_changed, g_object_ref (skeleton), (GDestroyNotify) g_object_unref);
      g_source_set_name (skeleton->priv->changed_properties_idle_source, "[generated] _e_dbus_calendar_emit_changed");
      g_source_attach (skeleton->priv->changed_properties_idle_source, skeleton->priv->context);
      g_source_unref (skeleton->priv->changed_properties_idle_source);
    }
  g_mutex_unlock (&skeleton->priv->lock);
}

static void
e_dbus_calendar_skeleton_set_property (GObject      *object,
  guint         prop_id,
  const GValue *value,
  GParamSpec   *pspec)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (object);
  g_assert (prop_id != 0 && prop_id - 1 < 8);
  g_mutex_lock (&skeleton->priv->lock);
  g_object_freeze_notify (object);
  if (!_g_value_equal (value, &skeleton->priv->properties[prop_id - 1]))
    {
      if (g_dbus_interface_skeleton_get_connection (G_DBUS_INTERFACE_SKELETON (skeleton)) != NULL)
        _e_dbus_calendar_schedule_emit_changed (skeleton, (const _ExtendedGDBusPropertyInfo *) _e_dbus_calendar_property_info_pointers[prop_id - 1], prop_id, &skeleton->priv->properties[prop_id - 1]);
      g_value_copy (value, &skeleton->priv->properties[prop_id - 1]);
      g_object_notify_by_pspec (object, pspec);
    }
  g_mutex_unlock (&skeleton->priv->lock);
  g_object_thaw_notify (object);
}

static void
e_dbus_calendar_skeleton_init (EDBusCalendarSkeleton *skeleton)
{
#if GLIB_VERSION_MAX_ALLOWED >= GLIB_VERSION_2_38
  skeleton->priv = e_dbus_calendar_skeleton_get_instance_private (skeleton);
#else
  skeleton->priv = G_TYPE_INSTANCE_GET_PRIVATE (skeleton, E_DBUS_TYPE_CALENDAR_SKELETON, EDBusCalendarSkeletonPrivate);
#endif

  g_mutex_init (&skeleton->priv->lock);
  skeleton->priv->context = g_main_context_ref_thread_default ();
  skeleton->priv->properties = g_new0 (GValue, 8);
  g_value_init (&skeleton->priv->properties[0], G_TYPE_BOOLEAN);
  g_value_init (&skeleton->priv->properties[1], G_TYPE_STRING);
  g_value_init (&skeleton->priv->properties[2], G_TYPE_BOOLEAN);
  g_value_init (&skeleton->priv->properties[3], G_TYPE_STRING);
  g_value_init (&skeleton->priv->properties[4], G_TYPE_STRV);
  g_value_init (&skeleton->priv->properties[5], G_TYPE_STRING);
  g_value_init (&skeleton->priv->properties[6], G_TYPE_STRING);
  g_value_init (&skeleton->priv->properties[7], G_TYPE_STRING);
}

static gboolean 
e_dbus_calendar_skeleton_get_online (EDBusCalendar *object)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (object);
  gboolean value;
  g_mutex_lock (&skeleton->priv->lock);
  value = g_value_get_boolean (&(skeleton->priv->properties[0]));
  g_mutex_unlock (&skeleton->priv->lock);
  return value;
}

static const gchar *
e_dbus_calendar_skeleton_get_revision (EDBusCalendar *object)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (object);
  const gchar *value;
  g_mutex_lock (&skeleton->priv->lock);
  value = g_value_get_string (&(skeleton->priv->properties[1]));
  g_mutex_unlock (&skeleton->priv->lock);
  return value;
}

static gboolean 
e_dbus_calendar_skeleton_get_writable (EDBusCalendar *object)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (object);
  gboolean value;
  g_mutex_lock (&skeleton->priv->lock);
  value = g_value_get_boolean (&(skeleton->priv->properties[2]));
  g_mutex_unlock (&skeleton->priv->lock);
  return value;
}

static const gchar *
e_dbus_calendar_skeleton_get_cache_dir (EDBusCalendar *object)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (object);
  const gchar *value;
  g_mutex_lock (&skeleton->priv->lock);
  value = g_value_get_string (&(skeleton->priv->properties[3]));
  g_mutex_unlock (&skeleton->priv->lock);
  return value;
}

static const gchar *const *
e_dbus_calendar_skeleton_get_capabilities (EDBusCalendar *object)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (object);
  const gchar *const *value;
  g_mutex_lock (&skeleton->priv->lock);
  value = g_value_get_boxed (&(skeleton->priv->properties[4]));
  g_mutex_unlock (&skeleton->priv->lock);
  return value;
}

static const gchar *
e_dbus_calendar_skeleton_get_default_object (EDBusCalendar *object)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (object);
  const gchar *value;
  g_mutex_lock (&skeleton->priv->lock);
  value = g_value_get_string (&(skeleton->priv->properties[5]));
  g_mutex_unlock (&skeleton->priv->lock);
  return value;
}

static const gchar *
e_dbus_calendar_skeleton_get_cal_email_address (EDBusCalendar *object)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (object);
  const gchar *value;
  g_mutex_lock (&skeleton->priv->lock);
  value = g_value_get_string (&(skeleton->priv->properties[6]));
  g_mutex_unlock (&skeleton->priv->lock);
  return value;
}

static const gchar *
e_dbus_calendar_skeleton_get_alarm_email_address (EDBusCalendar *object)
{
  EDBusCalendarSkeleton *skeleton = E_DBUS_CALENDAR_SKELETON (object);
  const gchar *value;
  g_mutex_lock (&skeleton->priv->lock);
  value = g_value_get_string (&(skeleton->priv->properties[7]));
  g_mutex_unlock (&skeleton->priv->lock);
  return value;
}

static void
e_dbus_calendar_skeleton_class_init (EDBusCalendarSkeletonClass *klass)
{
  GObjectClass *gobject_class;
  GDBusInterfaceSkeletonClass *skeleton_class;

  gobject_class = G_OBJECT_CLASS (klass);
  gobject_class->finalize = e_dbus_calendar_skeleton_finalize;
  gobject_class->get_property = e_dbus_calendar_skeleton_get_property;
  gobject_class->set_property = e_dbus_calendar_skeleton_set_property;
  gobject_class->notify       = e_dbus_calendar_skeleton_notify;


  e_dbus_calendar_override_properties (gobject_class, 1);

  skeleton_class = G_DBUS_INTERFACE_SKELETON_CLASS (klass);
  skeleton_class->get_info = e_dbus_calendar_skeleton_dbus_interface_get_info;
  skeleton_class->get_properties = e_dbus_calendar_skeleton_dbus_interface_get_properties;
  skeleton_class->flush = e_dbus_calendar_skeleton_dbus_interface_flush;
  skeleton_class->get_vtable = e_dbus_calendar_skeleton_dbus_interface_get_vtable;

#if GLIB_VERSION_MAX_ALLOWED < GLIB_VERSION_2_38
  g_type_class_add_private (klass, sizeof (EDBusCalendarSkeletonPrivate));
#endif
}

static void
e_dbus_calendar_skeleton_iface_init (EDBusCalendarIface *iface)
{
  iface->error = _e_dbus_calendar_on_signal_error;
  iface->free_busy_data = _e_dbus_calendar_on_signal_free_busy_data;
  iface->get_online = e_dbus_calendar_skeleton_get_online;
  iface->get_revision = e_dbus_calendar_skeleton_get_revision;
  iface->get_writable = e_dbus_calendar_skeleton_get_writable;
  iface->get_cache_dir = e_dbus_calendar_skeleton_get_cache_dir;
  iface->get_capabilities = e_dbus_calendar_skeleton_get_capabilities;
  iface->get_default_object = e_dbus_calendar_skeleton_get_default_object;
  iface->get_cal_email_address = e_dbus_calendar_skeleton_get_cal_email_address;
  iface->get_alarm_email_address = e_dbus_calendar_skeleton_get_alarm_email_address;
}

/**
 * e_dbus_calendar_skeleton_new:
 *
 * Creates a skeleton object for the D-Bus interface <link linkend="gdbus-interface-org-gnome-evolution-dataserver-Calendar.top_of_page">org.gnome.evolution.dataserver.Calendar</link>.
 *
 * Returns: (transfer full) (type EDBusCalendarSkeleton): The skeleton object.
 *
 * Since: 3.8
 */
EDBusCalendar *
e_dbus_calendar_skeleton_new (void)
{
  return E_DBUS_CALENDAR (g_object_new (E_DBUS_TYPE_CALENDAR_SKELETON, NULL));
}

