/* LabelRow.c generated by valac 0.40.11, the Vala compiler
 * generated from LabelRow.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <pango/pango.h>
#include <glib/gi18n-lib.h>
#include <gdk/gdk.h>
#include <granite.h>
#include <sqlite3.h>


#define WIDGETS_TYPE_LABEL_ROW (widgets_label_row_get_type ())
#define WIDGETS_LABEL_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_LABEL_ROW, WidgetsLabelRow))
#define WIDGETS_LABEL_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_LABEL_ROW, WidgetsLabelRowClass))
#define WIDGETS_IS_LABEL_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_LABEL_ROW))
#define WIDGETS_IS_LABEL_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_LABEL_ROW))
#define WIDGETS_LABEL_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_LABEL_ROW, WidgetsLabelRowClass))

typedef struct _WidgetsLabelRow WidgetsLabelRow;
typedef struct _WidgetsLabelRowClass WidgetsLabelRowClass;
typedef struct _WidgetsLabelRowPrivate WidgetsLabelRowPrivate;

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
enum  {
	WIDGETS_LABEL_ROW_0_PROPERTY,
	WIDGETS_LABEL_ROW_WINDOW_PROPERTY,
	WIDGETS_LABEL_ROW_LABEL_PROPERTY,
	WIDGETS_LABEL_ROW_NUM_PROPERTIES
};
static GParamSpec* widgets_label_row_properties[WIDGETS_LABEL_ROW_NUM_PROPERTIES];
#define _objects_label_unref0(var) ((var == NULL) ? NULL : (var = (objects_label_unref (var), NULL)))
typedef struct _Block59Data Block59Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _ObjectsLabelPrivate ObjectsLabelPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
enum  {
	WIDGETS_LABEL_ROW_ON_SIGNAL_EDIT_SIGNAL,
	WIDGETS_LABEL_ROW_NUM_SIGNALS
};
static guint widgets_label_row_signals[WIDGETS_LABEL_ROW_NUM_SIGNALS] = {0};

struct _WidgetsLabelRow {
	GtkListBoxRow parent_instance;
	WidgetsLabelRowPrivate * priv;
};

struct _WidgetsLabelRowClass {
	GtkListBoxRowClass parent_class;
};

struct _WidgetsLabelRowPrivate {
	MainWindow* _window;
	ObjectsLabel* _label;
};

struct _Block59Data {
	int _ref_count_;
	WidgetsLabelRow* self;
	GtkRevealer* action_revealer;
};

struct _ObjectsLabel {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsLabelPrivate * priv;
	gint id;
	gchar* name;
	gchar* color;
};

struct _ObjectsLabelClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsLabel *self);
};


static gpointer widgets_label_row_parent_class = NULL;
extern ServicesDatabase* application_database;

GType widgets_label_row_get_type (void) G_GNUC_CONST;
GType main_window_get_type (void) G_GNUC_CONST;
gpointer objects_label_ref (gpointer instance);
void objects_label_unref (gpointer instance);
GParamSpec* objects_param_spec_label (const gchar* name,
                                      const gchar* nick,
                                      const gchar* blurb,
                                      GType object_type,
                                      GParamFlags flags);
void objects_value_set_label (GValue* value,
                              gpointer v_object);
void objects_value_take_label (GValue* value,
                               gpointer v_object);
gpointer objects_value_get_label (const GValue* value);
GType objects_label_get_type (void) G_GNUC_CONST;
#define WIDGETS_LABEL_ROW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_LABEL_ROW, WidgetsLabelRowPrivate))
#define WIDGETS_LABEL_ROW_COLOR_CSS "\n        .label-list-%i {\n            color: %s;\n        }\n    "
WidgetsLabelRow* widgets_label_row_new (ObjectsLabel* _label);
WidgetsLabelRow* widgets_label_row_construct (GType object_type,
                                              ObjectsLabel* _label);
MainWindow* widgets_label_row_get_window (WidgetsLabelRow* self);
static void widgets_label_row_set_window (WidgetsLabelRow* self,
                                   MainWindow* value);
ObjectsLabel* widgets_label_row_get_label (WidgetsLabelRow* self);
static void widgets_label_row_set_label (WidgetsLabelRow* self,
                                  ObjectsLabel* value);
static void g_cclosure_user_marshal_VOID__OBJECTS_LABEL (GClosure * closure,
                                                  GValue * return_value,
                                                  guint n_param_values,
                                                  const GValue * param_values,
                                                  gpointer invocation_hint,
                                                  gpointer marshal_data);
static GObject * widgets_label_row_constructor (GType type,
                                         guint n_construct_properties,
                                         GObjectConstructParam * construct_properties);
static Block59Data* block59_data_ref (Block59Data* _data59_);
static void block59_data_unref (void * _userdata_);
static gboolean _widgets_label_row___lambda46_ (Block59Data* _data59_,
                                         GdkEventCrossing* event);
static gboolean __widgets_label_row___lambda46__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                                        GdkEventCrossing* event,
                                                                        gpointer self);
static gboolean _widgets_label_row___lambda47_ (Block59Data* _data59_,
                                         GdkEventCrossing* event);
static gboolean __widgets_label_row___lambda47__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                                        GdkEventCrossing* event,
                                                                        gpointer self);
static void _widgets_label_row___lambda48_ (WidgetsLabelRow* self);
GType services_database_get_type (void) G_GNUC_CONST;
gint services_database_remove_label (ServicesDatabase* self,
                                     ObjectsLabel* label);
static void __widgets_label_row___lambda48__gtk_button_clicked (GtkButton* _sender,
                                                         gpointer self);
static void _widgets_label_row___lambda49_ (WidgetsLabelRow* self);
static void __widgets_label_row___lambda49__gtk_button_clicked (GtkButton* _sender,
                                                         gpointer self);
static void widgets_label_row_finalize (GObject * obj);
static void _vala_widgets_label_row_get_property (GObject * object,
                                           guint property_id,
                                           GValue * value,
                                           GParamSpec * pspec);
static void _vala_widgets_label_row_set_property (GObject * object,
                                           guint property_id,
                                           const GValue * value,
                                           GParamSpec * pspec);


WidgetsLabelRow*
widgets_label_row_construct (GType object_type,
                             ObjectsLabel* _label)
{
	WidgetsLabelRow * self = NULL;
#line 32 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_return_val_if_fail (_label != NULL, NULL);
#line 33 "/run/build/planner/src/Widgets/LabelRow.vala"
	self = (WidgetsLabelRow*) g_object_new (object_type, "label", _label, NULL);
#line 32 "/run/build/planner/src/Widgets/LabelRow.vala"
	return self;
#line 214 "LabelRow.c"
}


WidgetsLabelRow*
widgets_label_row_new (ObjectsLabel* _label)
{
#line 32 "/run/build/planner/src/Widgets/LabelRow.vala"
	return widgets_label_row_construct (WIDGETS_TYPE_LABEL_ROW, _label);
#line 223 "LabelRow.c"
}


MainWindow*
widgets_label_row_get_window (WidgetsLabelRow* self)
{
	MainWindow* result;
	MainWindow* _tmp0_;
#line 23 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp0_ = self->priv->_window;
#line 23 "/run/build/planner/src/Widgets/LabelRow.vala"
	result = _tmp0_;
#line 23 "/run/build/planner/src/Widgets/LabelRow.vala"
	return result;
#line 240 "LabelRow.c"
}


static void
widgets_label_row_set_window (WidgetsLabelRow* self,
                              MainWindow* value)
{
#line 23 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_return_if_fail (self != NULL);
#line 23 "/run/build/planner/src/Widgets/LabelRow.vala"
	if (widgets_label_row_get_window (self) != value) {
#line 23 "/run/build/planner/src/Widgets/LabelRow.vala"
		self->priv->_window = value;
#line 23 "/run/build/planner/src/Widgets/LabelRow.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_label_row_properties[WIDGETS_LABEL_ROW_WINDOW_PROPERTY]);
#line 256 "LabelRow.c"
	}
}


ObjectsLabel*
widgets_label_row_get_label (WidgetsLabelRow* self)
{
	ObjectsLabel* result;
	ObjectsLabel* _tmp0_;
#line 24 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 24 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp0_ = self->priv->_label;
#line 24 "/run/build/planner/src/Widgets/LabelRow.vala"
	result = _tmp0_;
#line 24 "/run/build/planner/src/Widgets/LabelRow.vala"
	return result;
#line 274 "LabelRow.c"
}


static gpointer
_objects_label_ref0 (gpointer self)
{
#line 24 "/run/build/planner/src/Widgets/LabelRow.vala"
	return self ? objects_label_ref (self) : NULL;
#line 283 "LabelRow.c"
}


static void
widgets_label_row_set_label (WidgetsLabelRow* self,
                             ObjectsLabel* value)
{
#line 24 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_return_if_fail (self != NULL);
#line 24 "/run/build/planner/src/Widgets/LabelRow.vala"
	if (widgets_label_row_get_label (self) != value) {
#line 295 "LabelRow.c"
		ObjectsLabel* _tmp0_;
#line 24 "/run/build/planner/src/Widgets/LabelRow.vala"
		_tmp0_ = _objects_label_ref0 (value);
#line 24 "/run/build/planner/src/Widgets/LabelRow.vala"
		_objects_label_unref0 (self->priv->_label);
#line 24 "/run/build/planner/src/Widgets/LabelRow.vala"
		self->priv->_label = _tmp0_;
#line 24 "/run/build/planner/src/Widgets/LabelRow.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_label_row_properties[WIDGETS_LABEL_ROW_LABEL_PROPERTY]);
#line 305 "LabelRow.c"
	}
}


static void
g_cclosure_user_marshal_VOID__OBJECTS_LABEL (GClosure * closure,
                                             GValue * return_value,
                                             guint n_param_values,
                                             const GValue * param_values,
                                             gpointer invocation_hint,
                                             gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECTS_LABEL) (gpointer data1, gpointer arg_1, gpointer data2);
	register GMarshalFunc_VOID__OBJECTS_LABEL callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_return_if_fail (n_param_values == 2);
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		data1 = closure->data;
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		data2 = param_values->data[0].v_pointer;
#line 332 "LabelRow.c"
	} else {
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		data1 = param_values->data[0].v_pointer;
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		data2 = closure->data;
#line 338 "LabelRow.c"
	}
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	callback = (GMarshalFunc_VOID__OBJECTS_LABEL) (marshal_data ? marshal_data : cc->callback);
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	callback (data1, objects_value_get_label (param_values + 1), data2);
#line 344 "LabelRow.c"
}


static Block59Data*
block59_data_ref (Block59Data* _data59_)
{
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_atomic_int_inc (&_data59_->_ref_count_);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	return _data59_;
#line 355 "LabelRow.c"
}


static void
block59_data_unref (void * _userdata_)
{
	Block59Data* _data59_;
	_data59_ = (Block59Data*) _userdata_;
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	if (g_atomic_int_dec_and_test (&_data59_->_ref_count_)) {
#line 366 "LabelRow.c"
		WidgetsLabelRow* self;
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
		self = _data59_->self;
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (_data59_->action_revealer);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (self);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
		g_slice_free (Block59Data, _data59_);
#line 376 "LabelRow.c"
	}
}


static gboolean
_widgets_label_row___lambda46_ (Block59Data* _data59_,
                                GdkEventCrossing* event)
{
	WidgetsLabelRow* self;
	gboolean result = FALSE;
	GtkRevealer* _tmp0_;
#line 99 "/run/build/planner/src/Widgets/LabelRow.vala"
	self = _data59_->self;
#line 99 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 100 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp0_ = _data59_->action_revealer;
#line 100 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_revealer_set_reveal_child (_tmp0_, TRUE);
#line 101 "/run/build/planner/src/Widgets/LabelRow.vala"
	result = FALSE;
#line 101 "/run/build/planner/src/Widgets/LabelRow.vala"
	return result;
#line 400 "LabelRow.c"
}


static gboolean
__widgets_label_row___lambda46__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                               GdkEventCrossing* event,
                                                               gpointer self)
{
	gboolean result;
	result = _widgets_label_row___lambda46_ (self, event);
#line 99 "/run/build/planner/src/Widgets/LabelRow.vala"
	return result;
#line 413 "LabelRow.c"
}


static gboolean
_widgets_label_row___lambda47_ (Block59Data* _data59_,
                                GdkEventCrossing* event)
{
	WidgetsLabelRow* self;
	gboolean result = FALSE;
	GdkNotifyType _tmp0_;
	GtkRevealer* _tmp1_;
#line 104 "/run/build/planner/src/Widgets/LabelRow.vala"
	self = _data59_->self;
#line 104 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 105 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp0_ = event->detail;
#line 105 "/run/build/planner/src/Widgets/LabelRow.vala"
	if (_tmp0_ == GDK_NOTIFY_INFERIOR) {
#line 106 "/run/build/planner/src/Widgets/LabelRow.vala"
		result = FALSE;
#line 106 "/run/build/planner/src/Widgets/LabelRow.vala"
		return result;
#line 437 "LabelRow.c"
	}
#line 109 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp1_ = _data59_->action_revealer;
#line 109 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_revealer_set_reveal_child (_tmp1_, FALSE);
#line 110 "/run/build/planner/src/Widgets/LabelRow.vala"
	result = FALSE;
#line 110 "/run/build/planner/src/Widgets/LabelRow.vala"
	return result;
#line 447 "LabelRow.c"
}


static gboolean
__widgets_label_row___lambda47__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                               GdkEventCrossing* event,
                                                               gpointer self)
{
	gboolean result;
	result = _widgets_label_row___lambda47_ (self, event);
#line 104 "/run/build/planner/src/Widgets/LabelRow.vala"
	return result;
#line 460 "LabelRow.c"
}


static void
_widgets_label_row___lambda48_ (WidgetsLabelRow* self)
{
	GraniteMessageDialog* message_dialog = NULL;
	GraniteMessageDialog* _tmp0_;
	GtkButton* remove = NULL;
	GtkButton* _tmp1_;
	GtkButton* _tmp2_;
	GtkStyleContext* _tmp3_;
	GraniteMessageDialog* _tmp4_;
	GtkButton* _tmp5_;
	GraniteMessageDialog* _tmp6_;
	GraniteMessageDialog* _tmp7_;
	GraniteMessageDialog* _tmp10_;
#line 114 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp0_ = granite_message_dialog_new_with_image_from_icon_name (_ ("Are you sure you want to delete this Label?"), "", "dialog-warning", GTK_BUTTONS_CANCEL);
#line 114 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_object_ref_sink (_tmp0_);
#line 114 "/run/build/planner/src/Widgets/LabelRow.vala"
	message_dialog = _tmp0_;
#line 120 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp1_ = (GtkButton*) gtk_button_new_with_label (_ ("Delete Label"));
#line 120 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_object_ref_sink (_tmp1_);
#line 120 "/run/build/planner/src/Widgets/LabelRow.vala"
	remove = _tmp1_;
#line 121 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp2_ = remove;
#line 121 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) _tmp2_);
#line 121 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_style_context_add_class (_tmp3_, GTK_STYLE_CLASS_DESTRUCTIVE_ACTION);
#line 122 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp4_ = message_dialog;
#line 122 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp5_ = remove;
#line 122 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_dialog_add_action_widget ((GtkDialog*) _tmp4_, (GtkWidget*) _tmp5_, (gint) GTK_RESPONSE_ACCEPT);
#line 124 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp6_ = message_dialog;
#line 124 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp6_);
#line 125 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp7_ = message_dialog;
#line 125 "/run/build/planner/src/Widgets/LabelRow.vala"
	if (gtk_dialog_run ((GtkDialog*) _tmp7_) == ((gint) GTK_RESPONSE_ACCEPT)) {
#line 510 "LabelRow.c"
		ServicesDatabase* _tmp8_;
		ObjectsLabel* _tmp9_;
#line 126 "/run/build/planner/src/Widgets/LabelRow.vala"
		_tmp8_ = application_database;
#line 126 "/run/build/planner/src/Widgets/LabelRow.vala"
		_tmp9_ = self->priv->_label;
#line 126 "/run/build/planner/src/Widgets/LabelRow.vala"
		if (services_database_remove_label (_tmp8_, _tmp9_) == SQLITE_DONE) {
#line 127 "/run/build/planner/src/Widgets/LabelRow.vala"
			gtk_widget_destroy ((GtkWidget*) self);
#line 521 "LabelRow.c"
		}
	}
#line 131 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp10_ = message_dialog;
#line 131 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_widget_destroy ((GtkWidget*) _tmp10_);
#line 113 "/run/build/planner/src/Widgets/LabelRow.vala"
	_g_object_unref0 (remove);
#line 113 "/run/build/planner/src/Widgets/LabelRow.vala"
	_g_object_unref0 (message_dialog);
#line 532 "LabelRow.c"
}


static void
__widgets_label_row___lambda48__gtk_button_clicked (GtkButton* _sender,
                                                    gpointer self)
{
#line 113 "/run/build/planner/src/Widgets/LabelRow.vala"
	_widgets_label_row___lambda48_ ((WidgetsLabelRow*) self);
#line 542 "LabelRow.c"
}


static void
_widgets_label_row___lambda49_ (WidgetsLabelRow* self)
{
	ObjectsLabel* _tmp0_;
#line 135 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp0_ = self->priv->_label;
#line 135 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_signal_emit (self, widgets_label_row_signals[WIDGETS_LABEL_ROW_ON_SIGNAL_EDIT_SIGNAL], 0, _tmp0_);
#line 554 "LabelRow.c"
}


static void
__widgets_label_row___lambda49__gtk_button_clicked (GtkButton* _sender,
                                                    gpointer self)
{
#line 134 "/run/build/planner/src/Widgets/LabelRow.vala"
	_widgets_label_row___lambda49_ ((WidgetsLabelRow*) self);
#line 564 "LabelRow.c"
}


static GObject *
widgets_label_row_constructor (GType type,
                               guint n_construct_properties,
                               GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsLabelRow * self;
	Block59Data* _data59_;
	GtkStyleContext* _tmp0_;
	GtkImage* icon_label = NULL;
	GtkImage* _tmp1_;
	GtkImage* _tmp2_;
	GtkImage* _tmp3_;
	GtkStyleContext* _tmp4_;
	ObjectsLabel* _tmp5_;
	gint _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	GtkLabel* name_label = NULL;
	ObjectsLabel* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
	gchar* _tmp12_;
	GtkLabel* _tmp13_;
	GtkLabel* _tmp14_;
	GtkLabel* _tmp15_;
	GtkLabel* _tmp16_;
	GtkLabel* _tmp17_;
	GtkLabel* _tmp18_;
	GtkButton* edit_button = NULL;
	GtkButton* _tmp19_;
	GtkButton* _tmp20_;
	GtkButton* _tmp21_;
	GtkStyleContext* _tmp22_;
	GtkButton* _tmp23_;
	GtkStyleContext* _tmp24_;
	GtkButton* remove_button = NULL;
	GtkButton* _tmp25_;
	GtkButton* _tmp26_;
	GtkStyleContext* _tmp27_;
	GtkButton* _tmp28_;
	GtkButton* _tmp29_;
	GtkStyleContext* _tmp30_;
	GtkBox* action_box = NULL;
	GtkBox* _tmp31_;
	GtkBox* _tmp32_;
	GtkButton* _tmp33_;
	GtkBox* _tmp34_;
	GtkButton* _tmp35_;
	GtkRevealer* _tmp36_;
	GtkRevealer* _tmp37_;
	GtkRevealer* _tmp38_;
	GtkBox* _tmp39_;
	GtkRevealer* _tmp40_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp41_;
	GtkBox* _tmp42_;
	GtkBox* _tmp43_;
	GtkBox* _tmp44_;
	GtkImage* _tmp45_;
	GtkBox* _tmp46_;
	GtkLabel* _tmp47_;
	GtkBox* _tmp48_;
	GtkRevealer* _tmp49_;
	GtkEventBox* eventbox = NULL;
	GtkEventBox* _tmp50_;
	GtkEventBox* _tmp51_;
	GtkEventBox* _tmp52_;
	GtkBox* _tmp53_;
	GtkEventBox* _tmp54_;
	GtkCssProvider* provider = NULL;
	GtkCssProvider* _tmp55_;
	GtkEventBox* _tmp68_;
	GtkEventBox* _tmp69_;
	GtkButton* _tmp70_;
	GtkButton* _tmp71_;
	GError * _inner_error_ = NULL;
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	parent_class = G_OBJECT_CLASS (widgets_label_row_parent_class);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_LABEL_ROW, WidgetsLabelRow);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	_data59_ = g_slice_new0 (Block59Data);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	_data59_->_ref_count_ = 1;
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	_data59_->self = g_object_ref (self);
#line 39 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_widget_set_can_focus ((GtkWidget*) self, TRUE);
#line 40 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 40 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_style_context_add_class (_tmp0_, "layout-row");
#line 42 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp1_ = (GtkImage*) gtk_image_new_from_icon_name ("mail-unread-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 42 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_object_ref_sink (_tmp1_);
#line 42 "/run/build/planner/src/Widgets/LabelRow.vala"
	icon_label = _tmp1_;
#line 43 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp2_ = icon_label;
#line 43 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp2_, GTK_ALIGN_CENTER);
#line 44 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp3_ = icon_label;
#line 44 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) _tmp3_);
#line 44 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp5_ = self->priv->_label;
#line 44 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp6_ = _tmp5_->id;
#line 44 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp7_ = g_strdup_printf ("label-list-%i", _tmp6_);
#line 44 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp8_ = _tmp7_;
#line 44 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_style_context_add_class (_tmp4_, _tmp8_);
#line 44 "/run/build/planner/src/Widgets/LabelRow.vala"
	_g_free0 (_tmp8_);
#line 46 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp9_ = self->priv->_label;
#line 46 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp10_ = _tmp9_->name;
#line 46 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp11_ = g_strdup_printf ("<b>%s</b>", _tmp10_);
#line 46 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp12_ = _tmp11_;
#line 46 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp13_ = (GtkLabel*) gtk_label_new (_tmp12_);
#line 46 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_object_ref_sink (_tmp13_);
#line 46 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp14_ = _tmp13_;
#line 46 "/run/build/planner/src/Widgets/LabelRow.vala"
	_g_free0 (_tmp12_);
#line 46 "/run/build/planner/src/Widgets/LabelRow.vala"
	name_label = _tmp14_;
#line 47 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp15_ = name_label;
#line 47 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_label_set_ellipsize (_tmp15_, PANGO_ELLIPSIZE_END);
#line 48 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp16_ = name_label;
#line 48 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp16_, GTK_ALIGN_CENTER);
#line 49 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp17_ = name_label;
#line 49 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp17_, GTK_ALIGN_START);
#line 50 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp18_ = name_label;
#line 50 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_label_set_use_markup (_tmp18_, TRUE);
#line 52 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp19_ = (GtkButton*) gtk_button_new_from_icon_name ("edit-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 52 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_object_ref_sink (_tmp19_);
#line 52 "/run/build/planner/src/Widgets/LabelRow.vala"
	edit_button = _tmp19_;
#line 53 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp20_ = edit_button;
#line 53 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp20_, _ ("Edit Label"));
#line 54 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp21_ = edit_button;
#line 54 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp22_ = gtk_widget_get_style_context ((GtkWidget*) _tmp21_);
#line 54 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_style_context_add_class (_tmp22_, "menu-button");
#line 55 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp23_ = edit_button;
#line 55 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp24_ = gtk_widget_get_style_context ((GtkWidget*) _tmp23_);
#line 55 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_style_context_add_class (_tmp24_, GTK_STYLE_CLASS_FLAT);
#line 57 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp25_ = (GtkButton*) gtk_button_new_from_icon_name ("user-trash-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 57 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_object_ref_sink (_tmp25_);
#line 57 "/run/build/planner/src/Widgets/LabelRow.vala"
	remove_button = _tmp25_;
#line 58 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp26_ = remove_button;
#line 58 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp27_ = gtk_widget_get_style_context ((GtkWidget*) _tmp26_);
#line 58 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_style_context_add_class (_tmp27_, "menu-button");
#line 59 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp28_ = remove_button;
#line 59 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp28_, _ ("Delete Label"));
#line 60 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp29_ = remove_button;
#line 60 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp30_ = gtk_widget_get_style_context ((GtkWidget*) _tmp29_);
#line 60 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_style_context_add_class (_tmp30_, GTK_STYLE_CLASS_FLAT);
#line 62 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp31_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 62 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_object_ref_sink (_tmp31_);
#line 62 "/run/build/planner/src/Widgets/LabelRow.vala"
	action_box = _tmp31_;
#line 63 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp32_ = action_box;
#line 63 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp33_ = edit_button;
#line 63 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_box_pack_start (_tmp32_, (GtkWidget*) _tmp33_, FALSE, FALSE, (guint) 0);
#line 64 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp34_ = action_box;
#line 64 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp35_ = remove_button;
#line 64 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_box_pack_start (_tmp34_, (GtkWidget*) _tmp35_, FALSE, FALSE, (guint) 0);
#line 66 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp36_ = (GtkRevealer*) gtk_revealer_new ();
#line 66 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_object_ref_sink (_tmp36_);
#line 66 "/run/build/planner/src/Widgets/LabelRow.vala"
	_data59_->action_revealer = _tmp36_;
#line 67 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp37_ = _data59_->action_revealer;
#line 67 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_revealer_set_transition_type (_tmp37_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT);
#line 68 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp38_ = _data59_->action_revealer;
#line 68 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp39_ = action_box;
#line 68 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_container_add ((GtkContainer*) _tmp38_, (GtkWidget*) _tmp39_);
#line 69 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp40_ = _data59_->action_revealer;
#line 69 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_revealer_set_reveal_child (_tmp40_, FALSE);
#line 71 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp41_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 71 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_object_ref_sink (_tmp41_);
#line 71 "/run/build/planner/src/Widgets/LabelRow.vala"
	main_box = _tmp41_;
#line 72 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp42_ = main_box;
#line 72 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp42_, TRUE);
#line 73 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp43_ = main_box;
#line 73 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_object_set ((GtkWidget*) _tmp43_, "margin", 3, NULL);
#line 74 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp44_ = main_box;
#line 74 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp45_ = icon_label;
#line 74 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_box_pack_start (_tmp44_, (GtkWidget*) _tmp45_, FALSE, FALSE, (guint) 3);
#line 75 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp46_ = main_box;
#line 75 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp47_ = name_label;
#line 75 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_box_pack_start (_tmp46_, (GtkWidget*) _tmp47_, TRUE, TRUE, (guint) 6);
#line 76 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp48_ = main_box;
#line 76 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp49_ = _data59_->action_revealer;
#line 76 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_box_pack_end (_tmp48_, (GtkWidget*) _tmp49_, FALSE, FALSE, (guint) 0);
#line 78 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp50_ = (GtkEventBox*) gtk_event_box_new ();
#line 78 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_object_ref_sink (_tmp50_);
#line 78 "/run/build/planner/src/Widgets/LabelRow.vala"
	eventbox = _tmp50_;
#line 79 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp51_ = eventbox;
#line 79 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_widget_add_events ((GtkWidget*) _tmp51_, (gint) (GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK));
#line 80 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp52_ = eventbox;
#line 80 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp53_ = main_box;
#line 80 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_container_add ((GtkContainer*) _tmp52_, (GtkWidget*) _tmp53_);
#line 82 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp54_ = eventbox;
#line 82 "/run/build/planner/src/Widgets/LabelRow.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp54_);
#line 84 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp55_ = gtk_css_provider_new ();
#line 84 "/run/build/planner/src/Widgets/LabelRow.vala"
	provider = _tmp55_;
#line 862 "LabelRow.c"
	{
		gchar* colored_css = NULL;
		ObjectsLabel* _tmp56_;
		gint _tmp57_;
		ObjectsLabel* _tmp58_;
		const gchar* _tmp59_;
		gchar* _tmp60_;
		GtkCssProvider* _tmp61_;
		const gchar* _tmp62_;
		const gchar* _tmp63_;
		gint _tmp64_;
		gint _tmp65_;
		GdkScreen* _tmp66_;
		GtkCssProvider* _tmp67_;
#line 87 "/run/build/planner/src/Widgets/LabelRow.vala"
		_tmp56_ = self->priv->_label;
#line 87 "/run/build/planner/src/Widgets/LabelRow.vala"
		_tmp57_ = _tmp56_->id;
#line 87 "/run/build/planner/src/Widgets/LabelRow.vala"
		_tmp58_ = self->priv->_label;
#line 87 "/run/build/planner/src/Widgets/LabelRow.vala"
		_tmp59_ = _tmp58_->color;
#line 87 "/run/build/planner/src/Widgets/LabelRow.vala"
		_tmp60_ = g_strdup_printf (WIDGETS_LABEL_ROW_COLOR_CSS, _tmp57_, _tmp59_);
#line 87 "/run/build/planner/src/Widgets/LabelRow.vala"
		colored_css = _tmp60_;
#line 92 "/run/build/planner/src/Widgets/LabelRow.vala"
		_tmp61_ = provider;
#line 92 "/run/build/planner/src/Widgets/LabelRow.vala"
		_tmp62_ = colored_css;
#line 92 "/run/build/planner/src/Widgets/LabelRow.vala"
		_tmp63_ = colored_css;
#line 92 "/run/build/planner/src/Widgets/LabelRow.vala"
		_tmp64_ = strlen (_tmp63_);
#line 92 "/run/build/planner/src/Widgets/LabelRow.vala"
		_tmp65_ = _tmp64_;
#line 92 "/run/build/planner/src/Widgets/LabelRow.vala"
		gtk_css_provider_load_from_data (_tmp61_, _tmp62_, (gssize) _tmp65_, &_inner_error_);
#line 92 "/run/build/planner/src/Widgets/LabelRow.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 92 "/run/build/planner/src/Widgets/LabelRow.vala"
			_g_free0 (colored_css);
#line 905 "LabelRow.c"
			goto __catch41_g_error;
		}
#line 94 "/run/build/planner/src/Widgets/LabelRow.vala"
		_tmp66_ = gdk_screen_get_default ();
#line 94 "/run/build/planner/src/Widgets/LabelRow.vala"
		_tmp67_ = provider;
#line 94 "/run/build/planner/src/Widgets/LabelRow.vala"
		gtk_style_context_add_provider_for_screen (_tmp66_, (GtkStyleProvider*) _tmp67_, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_free0 (colored_css);
#line 916 "LabelRow.c"
	}
	goto __finally41;
	__catch41_g_error:
	{
		GError* e = NULL;
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
		e = _inner_error_;
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
		_inner_error_ = NULL;
#line 96 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_error_free0 (e);
#line 96 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (provider);
#line 96 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (eventbox);
#line 96 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (main_box);
#line 96 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (action_box);
#line 96 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (remove_button);
#line 96 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (edit_button);
#line 96 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (name_label);
#line 96 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (icon_label);
#line 96 "/run/build/planner/src/Widgets/LabelRow.vala"
		block59_data_unref (_data59_);
#line 96 "/run/build/planner/src/Widgets/LabelRow.vala"
		_data59_ = NULL;
#line 96 "/run/build/planner/src/Widgets/LabelRow.vala"
		return obj;
#line 950 "LabelRow.c"
	}
	__finally41:
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (provider);
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (eventbox);
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (main_box);
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (action_box);
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (remove_button);
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (edit_button);
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (name_label);
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
		_g_object_unref0 (icon_label);
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
		block59_data_unref (_data59_);
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
		_data59_ = NULL;
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 86 "/run/build/planner/src/Widgets/LabelRow.vala"
		g_clear_error (&_inner_error_);
#line 979 "LabelRow.c"
	}
#line 99 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp68_ = eventbox;
#line 99 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_signal_connect_data ((GtkWidget*) _tmp68_, "enter-notify-event", (GCallback) __widgets_label_row___lambda46__gtk_widget_enter_notify_event, block59_data_ref (_data59_), (GClosureNotify) block59_data_unref, 0);
#line 104 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp69_ = eventbox;
#line 104 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_signal_connect_data ((GtkWidget*) _tmp69_, "leave-notify-event", (GCallback) __widgets_label_row___lambda47__gtk_widget_leave_notify_event, block59_data_ref (_data59_), (GClosureNotify) block59_data_unref, 0);
#line 113 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp70_ = remove_button;
#line 113 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_signal_connect_object (_tmp70_, "clicked", (GCallback) __widgets_label_row___lambda48__gtk_button_clicked, self, 0);
#line 134 "/run/build/planner/src/Widgets/LabelRow.vala"
	_tmp71_ = edit_button;
#line 134 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_signal_connect_object (_tmp71_, "clicked", (GCallback) __widgets_label_row___lambda49__gtk_button_clicked, self, 0);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	_g_object_unref0 (provider);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	_g_object_unref0 (eventbox);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	_g_object_unref0 (main_box);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	_g_object_unref0 (action_box);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	_g_object_unref0 (remove_button);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	_g_object_unref0 (edit_button);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	_g_object_unref0 (name_label);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	_g_object_unref0 (icon_label);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	block59_data_unref (_data59_);
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	_data59_ = NULL;
#line 38 "/run/build/planner/src/Widgets/LabelRow.vala"
	return obj;
#line 1019 "LabelRow.c"
}


static void
widgets_label_row_class_init (WidgetsLabelRowClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	widgets_label_row_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_type_class_add_private (klass, sizeof (WidgetsLabelRowPrivate));
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_label_row_get_property;
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_label_row_set_property;
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_label_row_constructor;
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_label_row_finalize;
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_LABEL_ROW_WINDOW_PROPERTY, widgets_label_row_properties[WIDGETS_LABEL_ROW_WINDOW_PROPERTY] = g_param_spec_object ("window", "window", "window", TYPE_MAIN_WINDOW, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_LABEL_ROW_LABEL_PROPERTY, widgets_label_row_properties[WIDGETS_LABEL_ROW_LABEL_PROPERTY] = objects_param_spec_label ("label", "label", "label", OBJECTS_TYPE_LABEL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	widgets_label_row_signals[WIDGETS_LABEL_ROW_ON_SIGNAL_EDIT_SIGNAL] = g_signal_new ("on-signal-edit", WIDGETS_TYPE_LABEL_ROW, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECTS_LABEL, G_TYPE_NONE, 1, OBJECTS_TYPE_LABEL);
#line 1044 "LabelRow.c"
}


static void
widgets_label_row_instance_init (WidgetsLabelRow * self)
{
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	self->priv = WIDGETS_LABEL_ROW_GET_PRIVATE (self);
#line 1053 "LabelRow.c"
}


static void
widgets_label_row_finalize (GObject * obj)
{
	WidgetsLabelRow * self;
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_LABEL_ROW, WidgetsLabelRow);
#line 24 "/run/build/planner/src/Widgets/LabelRow.vala"
	_objects_label_unref0 (self->priv->_label);
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	G_OBJECT_CLASS (widgets_label_row_parent_class)->finalize (obj);
#line 1067 "LabelRow.c"
}


GType
widgets_label_row_get_type (void)
{
	static volatile gsize widgets_label_row_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_label_row_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsLabelRowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_label_row_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsLabelRow), 0, (GInstanceInitFunc) widgets_label_row_instance_init, NULL };
		GType widgets_label_row_type_id;
		widgets_label_row_type_id = g_type_register_static (gtk_list_box_row_get_type (), "WidgetsLabelRow", &g_define_type_info, 0);
		g_once_init_leave (&widgets_label_row_type_id__volatile, widgets_label_row_type_id);
	}
	return widgets_label_row_type_id__volatile;
}


static void
_vala_widgets_label_row_get_property (GObject * object,
                                      guint property_id,
                                      GValue * value,
                                      GParamSpec * pspec)
{
	WidgetsLabelRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_LABEL_ROW, WidgetsLabelRow);
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		case WIDGETS_LABEL_ROW_WINDOW_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		g_value_set_object (value, widgets_label_row_get_window (self));
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		case WIDGETS_LABEL_ROW_LABEL_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		objects_value_set_label (value, widgets_label_row_get_label (self));
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		break;
#line 1107 "LabelRow.c"
		default:
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		break;
#line 1113 "LabelRow.c"
	}
}


static void
_vala_widgets_label_row_set_property (GObject * object,
                                      guint property_id,
                                      const GValue * value,
                                      GParamSpec * pspec)
{
	WidgetsLabelRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_LABEL_ROW, WidgetsLabelRow);
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		case WIDGETS_LABEL_ROW_WINDOW_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		widgets_label_row_set_window (self, g_value_get_object (value));
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		case WIDGETS_LABEL_ROW_LABEL_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		widgets_label_row_set_label (self, objects_value_get_label (value));
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		break;
#line 1140 "LabelRow.c"
		default:
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/LabelRow.vala"
		break;
#line 1146 "LabelRow.c"
	}
}



