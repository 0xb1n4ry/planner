/* Project.c generated by valac 0.40.11, the Vala compiler
 * generated from Project.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gobject/gvaluecollector.h>


#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;
typedef struct _ObjectsProjectPrivate ObjectsProjectPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _ObjectsParamSpecProject ObjectsParamSpecProject;

struct _ObjectsProject {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsProjectPrivate * priv;
	gint id;
	gchar* name;
	gchar* note;
	gchar* deadline;
	gint item_order;
	gint is_deleted;
	gchar* color;
};

struct _ObjectsProjectClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsProject *self);
};

struct _ObjectsParamSpecProject {
	GParamSpec parent_instance;
};


static gpointer objects_project_parent_class = NULL;

gpointer objects_project_ref (gpointer instance);
void objects_project_unref (gpointer instance);
GParamSpec* objects_param_spec_project (const gchar* name,
                                        const gchar* nick,
                                        const gchar* blurb,
                                        GType object_type,
                                        GParamFlags flags);
void objects_value_set_project (GValue* value,
                                gpointer v_object);
void objects_value_take_project (GValue* value,
                                 gpointer v_object);
gpointer objects_value_get_project (const GValue* value);
GType objects_project_get_type (void) G_GNUC_CONST;
ObjectsProject* objects_project_new (gint id,
                                     gint item_order,
                                     gint is_deleted,
                                     const gchar* name,
                                     const gchar* note,
                                     const gchar* deadline,
                                     const gchar* color);
ObjectsProject* objects_project_construct (GType object_type,
                                           gint id,
                                           gint item_order,
                                           gint is_deleted,
                                           const gchar* name,
                                           const gchar* note,
                                           const gchar* deadline,
                                           const gchar* color);
static void objects_project_finalize (ObjectsProject * obj);


ObjectsProject*
objects_project_construct (GType object_type,
                           gint id,
                           gint item_order,
                           gint is_deleted,
                           const gchar* name,
                           const gchar* note,
                           const gchar* deadline,
                           const gchar* color)
{
	ObjectsProject* self = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
#line 31 "/run/build/planner/src/Objects/Project.vala"
	g_return_val_if_fail (name != NULL, NULL);
#line 31 "/run/build/planner/src/Objects/Project.vala"
	g_return_val_if_fail (note != NULL, NULL);
#line 31 "/run/build/planner/src/Objects/Project.vala"
	g_return_val_if_fail (deadline != NULL, NULL);
#line 31 "/run/build/planner/src/Objects/Project.vala"
	g_return_val_if_fail (color != NULL, NULL);
#line 31 "/run/build/planner/src/Objects/Project.vala"
	self = (ObjectsProject*) g_type_create_instance (object_type);
#line 39 "/run/build/planner/src/Objects/Project.vala"
	self->id = id;
#line 40 "/run/build/planner/src/Objects/Project.vala"
	_tmp0_ = g_strdup (name);
#line 40 "/run/build/planner/src/Objects/Project.vala"
	_g_free0 (self->name);
#line 40 "/run/build/planner/src/Objects/Project.vala"
	self->name = _tmp0_;
#line 41 "/run/build/planner/src/Objects/Project.vala"
	_tmp1_ = g_strdup (note);
#line 41 "/run/build/planner/src/Objects/Project.vala"
	_g_free0 (self->note);
#line 41 "/run/build/planner/src/Objects/Project.vala"
	self->note = _tmp1_;
#line 42 "/run/build/planner/src/Objects/Project.vala"
	_tmp2_ = g_strdup (deadline);
#line 42 "/run/build/planner/src/Objects/Project.vala"
	_g_free0 (self->deadline);
#line 42 "/run/build/planner/src/Objects/Project.vala"
	self->deadline = _tmp2_;
#line 43 "/run/build/planner/src/Objects/Project.vala"
	self->item_order = item_order;
#line 44 "/run/build/planner/src/Objects/Project.vala"
	self->is_deleted = is_deleted;
#line 45 "/run/build/planner/src/Objects/Project.vala"
	_tmp3_ = g_strdup (color);
#line 45 "/run/build/planner/src/Objects/Project.vala"
	_g_free0 (self->color);
#line 45 "/run/build/planner/src/Objects/Project.vala"
	self->color = _tmp3_;
#line 31 "/run/build/planner/src/Objects/Project.vala"
	return self;
#line 160 "Project.c"
}


ObjectsProject*
objects_project_new (gint id,
                     gint item_order,
                     gint is_deleted,
                     const gchar* name,
                     const gchar* note,
                     const gchar* deadline,
                     const gchar* color)
{
#line 31 "/run/build/planner/src/Objects/Project.vala"
	return objects_project_construct (OBJECTS_TYPE_PROJECT, id, item_order, is_deleted, name, note, deadline, color);
#line 175 "Project.c"
}


static void
objects_value_project_init (GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Project.vala"
	value->data[0].v_pointer = NULL;
#line 184 "Project.c"
}


static void
objects_value_project_free_value (GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Project.vala"
	if (value->data[0].v_pointer) {
#line 22 "/run/build/planner/src/Objects/Project.vala"
		objects_project_unref (value->data[0].v_pointer);
#line 195 "Project.c"
	}
}


static void
objects_value_project_copy_value (const GValue* src_value,
                                  GValue* dest_value)
{
#line 22 "/run/build/planner/src/Objects/Project.vala"
	if (src_value->data[0].v_pointer) {
#line 22 "/run/build/planner/src/Objects/Project.vala"
		dest_value->data[0].v_pointer = objects_project_ref (src_value->data[0].v_pointer);
#line 208 "Project.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Project.vala"
		dest_value->data[0].v_pointer = NULL;
#line 212 "Project.c"
	}
}


static gpointer
objects_value_project_peek_pointer (const GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Project.vala"
	return value->data[0].v_pointer;
#line 222 "Project.c"
}


static gchar*
objects_value_project_collect_value (GValue* value,
                                     guint n_collect_values,
                                     GTypeCValue* collect_values,
                                     guint collect_flags)
{
#line 22 "/run/build/planner/src/Objects/Project.vala"
	if (collect_values[0].v_pointer) {
#line 234 "Project.c"
		ObjectsProject * object;
		object = collect_values[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Project.vala"
		if (object->parent_instance.g_class == NULL) {
#line 22 "/run/build/planner/src/Objects/Project.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 241 "Project.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 22 "/run/build/planner/src/Objects/Project.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 245 "Project.c"
		}
#line 22 "/run/build/planner/src/Objects/Project.vala"
		value->data[0].v_pointer = objects_project_ref (object);
#line 249 "Project.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Project.vala"
		value->data[0].v_pointer = NULL;
#line 253 "Project.c"
	}
#line 22 "/run/build/planner/src/Objects/Project.vala"
	return NULL;
#line 257 "Project.c"
}


static gchar*
objects_value_project_lcopy_value (const GValue* value,
                                   guint n_collect_values,
                                   GTypeCValue* collect_values,
                                   guint collect_flags)
{
	ObjectsProject ** object_p;
	object_p = collect_values[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Project.vala"
	if (!object_p) {
#line 22 "/run/build/planner/src/Objects/Project.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 273 "Project.c"
	}
#line 22 "/run/build/planner/src/Objects/Project.vala"
	if (!value->data[0].v_pointer) {
#line 22 "/run/build/planner/src/Objects/Project.vala"
		*object_p = NULL;
#line 279 "Project.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 22 "/run/build/planner/src/Objects/Project.vala"
		*object_p = value->data[0].v_pointer;
#line 283 "Project.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Project.vala"
		*object_p = objects_project_ref (value->data[0].v_pointer);
#line 287 "Project.c"
	}
#line 22 "/run/build/planner/src/Objects/Project.vala"
	return NULL;
#line 291 "Project.c"
}


GParamSpec*
objects_param_spec_project (const gchar* name,
                            const gchar* nick,
                            const gchar* blurb,
                            GType object_type,
                            GParamFlags flags)
{
	ObjectsParamSpecProject* spec;
#line 22 "/run/build/planner/src/Objects/Project.vala"
	g_return_val_if_fail (g_type_is_a (object_type, OBJECTS_TYPE_PROJECT), NULL);
#line 22 "/run/build/planner/src/Objects/Project.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 22 "/run/build/planner/src/Objects/Project.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 22 "/run/build/planner/src/Objects/Project.vala"
	return G_PARAM_SPEC (spec);
#line 311 "Project.c"
}


gpointer
objects_value_get_project (const GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Project.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, OBJECTS_TYPE_PROJECT), NULL);
#line 22 "/run/build/planner/src/Objects/Project.vala"
	return value->data[0].v_pointer;
#line 322 "Project.c"
}


void
objects_value_set_project (GValue* value,
                           gpointer v_object)
{
	ObjectsProject * old;
#line 22 "/run/build/planner/src/Objects/Project.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, OBJECTS_TYPE_PROJECT));
#line 22 "/run/build/planner/src/Objects/Project.vala"
	old = value->data[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Project.vala"
	if (v_object) {
#line 22 "/run/build/planner/src/Objects/Project.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, OBJECTS_TYPE_PROJECT));
#line 22 "/run/build/planner/src/Objects/Project.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "/run/build/planner/src/Objects/Project.vala"
		value->data[0].v_pointer = v_object;
#line 22 "/run/build/planner/src/Objects/Project.vala"
		objects_project_ref (value->data[0].v_pointer);
#line 345 "Project.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Project.vala"
		value->data[0].v_pointer = NULL;
#line 349 "Project.c"
	}
#line 22 "/run/build/planner/src/Objects/Project.vala"
	if (old) {
#line 22 "/run/build/planner/src/Objects/Project.vala"
		objects_project_unref (old);
#line 355 "Project.c"
	}
}


void
objects_value_take_project (GValue* value,
                            gpointer v_object)
{
	ObjectsProject * old;
#line 22 "/run/build/planner/src/Objects/Project.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, OBJECTS_TYPE_PROJECT));
#line 22 "/run/build/planner/src/Objects/Project.vala"
	old = value->data[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Project.vala"
	if (v_object) {
#line 22 "/run/build/planner/src/Objects/Project.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, OBJECTS_TYPE_PROJECT));
#line 22 "/run/build/planner/src/Objects/Project.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "/run/build/planner/src/Objects/Project.vala"
		value->data[0].v_pointer = v_object;
#line 377 "Project.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Project.vala"
		value->data[0].v_pointer = NULL;
#line 381 "Project.c"
	}
#line 22 "/run/build/planner/src/Objects/Project.vala"
	if (old) {
#line 22 "/run/build/planner/src/Objects/Project.vala"
		objects_project_unref (old);
#line 387 "Project.c"
	}
}


static void
objects_project_class_init (ObjectsProjectClass * klass)
{
#line 22 "/run/build/planner/src/Objects/Project.vala"
	objects_project_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Objects/Project.vala"
	((ObjectsProjectClass *) klass)->finalize = objects_project_finalize;
#line 399 "Project.c"
}


static void
objects_project_instance_init (ObjectsProject * self)
{
#line 22 "/run/build/planner/src/Objects/Project.vala"
	self->ref_count = 1;
#line 408 "Project.c"
}


static void
objects_project_finalize (ObjectsProject * obj)
{
	ObjectsProject * self;
#line 22 "/run/build/planner/src/Objects/Project.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, OBJECTS_TYPE_PROJECT, ObjectsProject);
#line 22 "/run/build/planner/src/Objects/Project.vala"
	g_signal_handlers_destroy (self);
#line 24 "/run/build/planner/src/Objects/Project.vala"
	_g_free0 (self->name);
#line 25 "/run/build/planner/src/Objects/Project.vala"
	_g_free0 (self->note);
#line 26 "/run/build/planner/src/Objects/Project.vala"
	_g_free0 (self->deadline);
#line 29 "/run/build/planner/src/Objects/Project.vala"
	_g_free0 (self->color);
#line 428 "Project.c"
}


GType
objects_project_get_type (void)
{
	static volatile gsize objects_project_type_id__volatile = 0;
	if (g_once_init_enter (&objects_project_type_id__volatile)) {
		static const GTypeValueTable g_define_type_value_table = { objects_value_project_init, objects_value_project_free_value, objects_value_project_copy_value, objects_value_project_peek_pointer, "p", objects_value_project_collect_value, "p", objects_value_project_lcopy_value };
		static const GTypeInfo g_define_type_info = { sizeof (ObjectsProjectClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) objects_project_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ObjectsProject), 0, (GInstanceInitFunc) objects_project_instance_init, &g_define_type_value_table };
		static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
		GType objects_project_type_id;
		objects_project_type_id = g_type_register_fundamental (g_type_fundamental_next (), "ObjectsProject", &g_define_type_info, &g_define_type_fundamental_info, 0);
		g_once_init_leave (&objects_project_type_id__volatile, objects_project_type_id);
	}
	return objects_project_type_id__volatile;
}


gpointer
objects_project_ref (gpointer instance)
{
	ObjectsProject * self;
	self = instance;
#line 22 "/run/build/planner/src/Objects/Project.vala"
	g_atomic_int_inc (&self->ref_count);
#line 22 "/run/build/planner/src/Objects/Project.vala"
	return instance;
#line 457 "Project.c"
}


void
objects_project_unref (gpointer instance)
{
	ObjectsProject * self;
	self = instance;
#line 22 "/run/build/planner/src/Objects/Project.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 22 "/run/build/planner/src/Objects/Project.vala"
		OBJECTS_PROJECT_GET_CLASS (self)->finalize (self);
#line 22 "/run/build/planner/src/Objects/Project.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 472 "Project.c"
	}
}



