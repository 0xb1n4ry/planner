/* internal.c generated by valac 0.40.11, the Vala compiler
 * generated from internal.vala, do not modify */

/*
 * Copyright (C) 2011 Collabora Ltd.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Raul Gutierrez Segales <raul.gutierrez.segales@collabora.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>

#define _g_destroy_func0(var) (((var == NULL) || (g_destroy_func == NULL)) ? NULL : (var = (g_destroy_func (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))



gboolean folks_internal_equal_sets (GType g_type,
                                    GBoxedCopyFunc g_dup_func,
                                    GDestroyNotify g_destroy_func,
                                    GeeSet* a,
                                    GeeSet* b);
void folks_internal_profiling_point (const gchar* format,
                                     ...) G_GNUC_PRINTF(1,2);
void folks_internal_profiling_start (const gchar* format,
                                     ...);
void folks_internal_profiling_end (const gchar* format,
                                   ...);


gboolean
folks_internal_equal_sets (GType g_type,
                           GBoxedCopyFunc g_dup_func,
                           GDestroyNotify g_destroy_func,
                           GeeSet* a,
                           GeeSet* b)
{
	gboolean result = FALSE;
	gint _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	gint _tmp3_;
#line 27 "/run/build/folks/folks/internal.vala"
	g_return_val_if_fail (a != NULL, FALSE);
#line 27 "/run/build/folks/folks/internal.vala"
	g_return_val_if_fail (b != NULL, FALSE);
#line 29 "/run/build/folks/folks/internal.vala"
	_tmp0_ = gee_collection_get_size ((GeeCollection*) a);
#line 29 "/run/build/folks/folks/internal.vala"
	_tmp1_ = _tmp0_;
#line 29 "/run/build/folks/folks/internal.vala"
	_tmp2_ = gee_collection_get_size ((GeeCollection*) b);
#line 29 "/run/build/folks/folks/internal.vala"
	_tmp3_ = _tmp2_;
#line 29 "/run/build/folks/folks/internal.vala"
	if (_tmp1_ != _tmp3_) {
#line 30 "/run/build/folks/folks/internal.vala"
		result = FALSE;
#line 30 "/run/build/folks/folks/internal.vala"
		return result;
#line 80 "internal.c"
	}
	{
		GeeIterator* _a_elem_it = NULL;
		GeeIterator* _tmp4_;
#line 32 "/run/build/folks/folks/internal.vala"
		_tmp4_ = gee_iterable_iterator ((GeeIterable*) a);
#line 32 "/run/build/folks/folks/internal.vala"
		_a_elem_it = _tmp4_;
#line 32 "/run/build/folks/folks/internal.vala"
		while (TRUE) {
#line 91 "internal.c"
			GeeIterator* _tmp5_;
			gpointer a_elem = NULL;
			GeeIterator* _tmp6_;
			gpointer _tmp7_;
			gconstpointer _tmp8_;
#line 32 "/run/build/folks/folks/internal.vala"
			_tmp5_ = _a_elem_it;
#line 32 "/run/build/folks/folks/internal.vala"
			if (!gee_iterator_next (_tmp5_)) {
#line 32 "/run/build/folks/folks/internal.vala"
				break;
#line 103 "internal.c"
			}
#line 32 "/run/build/folks/folks/internal.vala"
			_tmp6_ = _a_elem_it;
#line 32 "/run/build/folks/folks/internal.vala"
			_tmp7_ = gee_iterator_get (_tmp6_);
#line 32 "/run/build/folks/folks/internal.vala"
			a_elem = _tmp7_;
#line 34 "/run/build/folks/folks/internal.vala"
			_tmp8_ = a_elem;
#line 34 "/run/build/folks/folks/internal.vala"
			if (!gee_collection_contains ((GeeCollection*) b, _tmp8_)) {
#line 35 "/run/build/folks/folks/internal.vala"
				result = FALSE;
#line 35 "/run/build/folks/folks/internal.vala"
				_g_destroy_func0 (a_elem);
#line 35 "/run/build/folks/folks/internal.vala"
				_g_object_unref0 (_a_elem_it);
#line 35 "/run/build/folks/folks/internal.vala"
				return result;
#line 123 "internal.c"
			}
#line 32 "/run/build/folks/folks/internal.vala"
			_g_destroy_func0 (a_elem);
#line 127 "internal.c"
		}
#line 32 "/run/build/folks/folks/internal.vala"
		_g_object_unref0 (_a_elem_it);
#line 131 "internal.c"
	}
#line 38 "/run/build/folks/folks/internal.vala"
	result = TRUE;
#line 38 "/run/build/folks/folks/internal.vala"
	return result;
#line 137 "internal.c"
}


/**
   * Emit a profiling point.
   *
   * This emits a profiling point with the given message (printf-style), which
   * can be picked up by profiling tools and timing information extracted.
   *
   * @param format printf-style message format
   * @param ... message arguments
   * @since 0.7.2
   */
void
folks_internal_profiling_point (const gchar* format,
                                ...)
{
#line 63 "/run/build/folks/folks/internal.vala"
	g_return_if_fail (format != NULL);
#line 157 "internal.c"
}


/**
   * Start a profiling block.
   *
   * This emits a profiling start point with the given message (printf-style),
   * which can be picked up by profiling tools and timing information extracted.
   *
   * This is typically used in a pair with {@link Internal.profiling_end} to
   * delimit blocks of processing which need timing.
   *
   * @param format printf-style message format
   * @param ... message arguments
   * @since 0.7.2
   */
void
folks_internal_profiling_start (const gchar* format,
                                ...)
{
#line 84 "/run/build/folks/folks/internal.vala"
	g_return_if_fail (format != NULL);
#line 180 "internal.c"
}


/**
   * End a profiling block.
   *
   * This emits a profiling end point with the given message (printf-style),
   * which can be picked up by profiling tools and timing information extracted.
   *
   * This is typically used in a pair with {@link Internal.profiling_start} to
   * delimit blocks of processing which need timing.
   *
   * @param format printf-style message format
   * @param ... message arguments
   * @since 0.7.2
   */
void
folks_internal_profiling_end (const gchar* format,
                              ...)
{
#line 105 "/run/build/folks/folks/internal.vala"
	g_return_if_fail (format != NULL);
#line 203 "internal.c"
}



