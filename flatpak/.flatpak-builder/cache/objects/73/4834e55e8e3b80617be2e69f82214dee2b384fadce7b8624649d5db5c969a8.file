/* CheckRow.c generated by valac 0.40.11, the Vala compiler
 * generated from CheckRow.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <float.h>
#include <math.h>
#include <granite.h>
#include <glib/gi18n-lib.h>
#include <gdk/gdk.h>


#define WIDGETS_TYPE_CHECK_ROW (widgets_check_row_get_type ())
#define WIDGETS_CHECK_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_CHECK_ROW, WidgetsCheckRow))
#define WIDGETS_CHECK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_CHECK_ROW, WidgetsCheckRowClass))
#define WIDGETS_IS_CHECK_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_CHECK_ROW))
#define WIDGETS_IS_CHECK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_CHECK_ROW))
#define WIDGETS_CHECK_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_CHECK_ROW, WidgetsCheckRowClass))

typedef struct _WidgetsCheckRow WidgetsCheckRow;
typedef struct _WidgetsCheckRowClass WidgetsCheckRowClass;
typedef struct _WidgetsCheckRowPrivate WidgetsCheckRowPrivate;
enum  {
	WIDGETS_CHECK_ROW_0_PROPERTY,
	WIDGETS_CHECK_ROW_CHECKLIST_NAME_PROPERTY,
	WIDGETS_CHECK_ROW_CHECKED_PROPERTY,
	WIDGETS_CHECK_ROW_NUM_PROPERTIES
};
static GParamSpec* widgets_check_row_properties[WIDGETS_CHECK_ROW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _Block56Data Block56Data;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;

struct _WidgetsCheckRow {
	GtkListBoxRow parent_instance;
	WidgetsCheckRowPrivate * priv;
	GtkCheckButton* checked_button;
	GtkEntry* name_entry;
};

struct _WidgetsCheckRowClass {
	GtkListBoxRowClass parent_class;
};

struct _WidgetsCheckRowPrivate {
	gchar* _checklist_name;
	gboolean _checked;
};

struct _Block56Data {
	int _ref_count_;
	WidgetsCheckRow* self;
	GtkButton* remove_button;
	GtkRevealer* remove_revealer;
};


static gpointer widgets_check_row_parent_class = NULL;
extern Utils* application_utils;

GType widgets_check_row_get_type (void) G_GNUC_CONST;
#define WIDGETS_CHECK_ROW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_CHECK_ROW, WidgetsCheckRowPrivate))
WidgetsCheckRow* widgets_check_row_new (const gchar* _name,
                                        gboolean _checked);
WidgetsCheckRow* widgets_check_row_construct (GType object_type,
                                              const gchar* _name,
                                              gboolean _checked);
gchar* widgets_check_row_get_check (WidgetsCheckRow* self);
static void widgets_check_row_check_task_completed (WidgetsCheckRow* self);
const gchar* widgets_check_row_get_checklist_name (WidgetsCheckRow* self);
static void widgets_check_row_set_checklist_name (WidgetsCheckRow* self,
                                           const gchar* value);
gboolean widgets_check_row_get_checked (WidgetsCheckRow* self);
static void widgets_check_row_set_checked (WidgetsCheckRow* self,
                                    gboolean value);
static GObject * widgets_check_row_constructor (GType type,
                                         guint n_construct_properties,
                                         GObjectConstructParam * construct_properties);
static Block56Data* block56_data_ref (Block56Data* _data56_);
static void block56_data_unref (void * _userdata_);
GType utils_get_type (void) G_GNUC_CONST;
gchar* utils_first_letter_to_up (Utils* self,
                                 const gchar* text);
static gboolean _widgets_check_row___lambda40_ (Block56Data* _data56_,
                                         GdkEventCrossing* event);
static gboolean __widgets_check_row___lambda40__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                                        GdkEventCrossing* event,
                                                                        gpointer self);
static void _widgets_check_row___lambda41_ (WidgetsCheckRow* self);
static void __widgets_check_row___lambda41__gtk_editable_changed (GtkEditable* _sender,
                                                           gpointer self);
static gboolean _widgets_check_row___lambda42_ (Block56Data* _data56_,
                                         GdkEventCrossing* event);
static gboolean __widgets_check_row___lambda42__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                                        GdkEventCrossing* event,
                                                                        gpointer self);
static void _widgets_check_row___lambda43_ (WidgetsCheckRow* self);
static void __widgets_check_row___lambda43__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                                gpointer self);
static void _widgets_check_row___lambda44_ (WidgetsCheckRow* self);
static void __widgets_check_row___lambda44__gtk_button_clicked (GtkButton* _sender,
                                                         gpointer self);
static void widgets_check_row_finalize (GObject * obj);
static void _vala_widgets_check_row_get_property (GObject * object,
                                           guint property_id,
                                           GValue * value,
                                           GParamSpec * pspec);
static void _vala_widgets_check_row_set_property (GObject * object,
                                           guint property_id,
                                           const GValue * value,
                                           GParamSpec * pspec);


WidgetsCheckRow*
widgets_check_row_construct (GType object_type,
                             const gchar* _name,
                             gboolean _checked)
{
	WidgetsCheckRow * self = NULL;
#line 29 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_return_val_if_fail (_name != NULL, NULL);
#line 30 "/run/build/planner/src/Widgets/CheckRow.vala"
	self = (WidgetsCheckRow*) g_object_new (object_type, "checklist-name", _name, "checked", _checked, NULL);
#line 29 "/run/build/planner/src/Widgets/CheckRow.vala"
	return self;
#line 162 "CheckRow.c"
}


WidgetsCheckRow*
widgets_check_row_new (const gchar* _name,
                       gboolean _checked)
{
#line 29 "/run/build/planner/src/Widgets/CheckRow.vala"
	return widgets_check_row_construct (WIDGETS_TYPE_CHECK_ROW, _name, _checked);
#line 172 "CheckRow.c"
}


gchar*
widgets_check_row_get_check (WidgetsCheckRow* self)
{
	gchar* result = NULL;
	gchar* val = NULL;
	GtkCheckButton* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	const gchar* _tmp5_;
	GtkEntry* _tmp6_;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	gchar* _tmp10_;
	gchar* _tmp11_;
	gchar* _tmp12_;
#line 36 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 39 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp0_ = self->checked_button;
#line 39 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp1_ = gtk_toggle_button_get_active ((GtkToggleButton*) _tmp0_);
#line 39 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp2_ = _tmp1_;
#line 39 "/run/build/planner/src/Widgets/CheckRow.vala"
	if (_tmp2_) {
#line 202 "CheckRow.c"
		gchar* _tmp3_;
#line 40 "/run/build/planner/src/Widgets/CheckRow.vala"
		_tmp3_ = g_strdup ("1");
#line 40 "/run/build/planner/src/Widgets/CheckRow.vala"
		_g_free0 (val);
#line 40 "/run/build/planner/src/Widgets/CheckRow.vala"
		val = _tmp3_;
#line 210 "CheckRow.c"
	} else {
		gchar* _tmp4_;
#line 42 "/run/build/planner/src/Widgets/CheckRow.vala"
		_tmp4_ = g_strdup ("0");
#line 42 "/run/build/planner/src/Widgets/CheckRow.vala"
		_g_free0 (val);
#line 42 "/run/build/planner/src/Widgets/CheckRow.vala"
		val = _tmp4_;
#line 219 "CheckRow.c"
	}
#line 45 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp5_ = val;
#line 45 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp6_ = self->name_entry;
#line 45 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp7_ = gtk_entry_get_text (_tmp6_);
#line 45 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp8_ = _tmp7_;
#line 45 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp9_ = g_strconcat (_tmp5_, _tmp8_, NULL);
#line 45 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp10_ = _tmp9_;
#line 45 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp11_ = g_strconcat (_tmp10_, ";", NULL);
#line 45 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp12_ = _tmp11_;
#line 45 "/run/build/planner/src/Widgets/CheckRow.vala"
	_g_free0 (_tmp10_);
#line 45 "/run/build/planner/src/Widgets/CheckRow.vala"
	result = _tmp12_;
#line 45 "/run/build/planner/src/Widgets/CheckRow.vala"
	_g_free0 (val);
#line 45 "/run/build/planner/src/Widgets/CheckRow.vala"
	return result;
#line 245 "CheckRow.c"
}


static void
widgets_check_row_check_task_completed (WidgetsCheckRow* self)
{
	GtkCheckButton* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 127 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_return_if_fail (self != NULL);
#line 128 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp0_ = self->checked_button;
#line 128 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp1_ = gtk_toggle_button_get_active ((GtkToggleButton*) _tmp0_);
#line 128 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp2_ = _tmp1_;
#line 128 "/run/build/planner/src/Widgets/CheckRow.vala"
	if (_tmp2_) {
#line 265 "CheckRow.c"
		GtkEntry* _tmp3_;
#line 129 "/run/build/planner/src/Widgets/CheckRow.vala"
		_tmp3_ = self->name_entry;
#line 129 "/run/build/planner/src/Widgets/CheckRow.vala"
		gtk_widget_set_opacity ((GtkWidget*) _tmp3_, 0.7);
#line 271 "CheckRow.c"
	} else {
		GtkEntry* _tmp4_;
#line 131 "/run/build/planner/src/Widgets/CheckRow.vala"
		_tmp4_ = self->name_entry;
#line 131 "/run/build/planner/src/Widgets/CheckRow.vala"
		gtk_widget_set_opacity ((GtkWidget*) _tmp4_, (gdouble) 1);
#line 278 "CheckRow.c"
	}
}


const gchar*
widgets_check_row_get_checklist_name (WidgetsCheckRow* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 26 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 26 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp0_ = self->priv->_checklist_name;
#line 26 "/run/build/planner/src/Widgets/CheckRow.vala"
	result = _tmp0_;
#line 26 "/run/build/planner/src/Widgets/CheckRow.vala"
	return result;
#line 296 "CheckRow.c"
}


static void
widgets_check_row_set_checklist_name (WidgetsCheckRow* self,
                                      const gchar* value)
{
#line 26 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_return_if_fail (self != NULL);
#line 26 "/run/build/planner/src/Widgets/CheckRow.vala"
	if (g_strcmp0 (value, widgets_check_row_get_checklist_name (self)) != 0) {
#line 308 "CheckRow.c"
		gchar* _tmp0_;
#line 26 "/run/build/planner/src/Widgets/CheckRow.vala"
		_tmp0_ = g_strdup (value);
#line 26 "/run/build/planner/src/Widgets/CheckRow.vala"
		_g_free0 (self->priv->_checklist_name);
#line 26 "/run/build/planner/src/Widgets/CheckRow.vala"
		self->priv->_checklist_name = _tmp0_;
#line 26 "/run/build/planner/src/Widgets/CheckRow.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_check_row_properties[WIDGETS_CHECK_ROW_CHECKLIST_NAME_PROPERTY]);
#line 318 "CheckRow.c"
	}
}


gboolean
widgets_check_row_get_checked (WidgetsCheckRow* self)
{
	gboolean result;
	gboolean _tmp0_;
#line 27 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 27 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp0_ = self->priv->_checked;
#line 27 "/run/build/planner/src/Widgets/CheckRow.vala"
	result = _tmp0_;
#line 27 "/run/build/planner/src/Widgets/CheckRow.vala"
	return result;
#line 336 "CheckRow.c"
}


static void
widgets_check_row_set_checked (WidgetsCheckRow* self,
                               gboolean value)
{
#line 27 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_return_if_fail (self != NULL);
#line 27 "/run/build/planner/src/Widgets/CheckRow.vala"
	if (widgets_check_row_get_checked (self) != value) {
#line 27 "/run/build/planner/src/Widgets/CheckRow.vala"
		self->priv->_checked = value;
#line 27 "/run/build/planner/src/Widgets/CheckRow.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_check_row_properties[WIDGETS_CHECK_ROW_CHECKED_PROPERTY]);
#line 352 "CheckRow.c"
	}
}


static Block56Data*
block56_data_ref (Block56Data* _data56_)
{
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_atomic_int_inc (&_data56_->_ref_count_);
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
	return _data56_;
#line 364 "CheckRow.c"
}


static void
block56_data_unref (void * _userdata_)
{
	Block56Data* _data56_;
	_data56_ = (Block56Data*) _userdata_;
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
	if (g_atomic_int_dec_and_test (&_data56_->_ref_count_)) {
#line 375 "CheckRow.c"
		WidgetsCheckRow* self;
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
		self = _data56_->self;
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
		_g_object_unref0 (_data56_->remove_revealer);
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
		_g_object_unref0 (_data56_->remove_button);
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
		_g_object_unref0 (self);
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
		g_slice_free (Block56Data, _data56_);
#line 387 "CheckRow.c"
	}
}


static gboolean
_widgets_check_row___lambda40_ (Block56Data* _data56_,
                                GdkEventCrossing* event)
{
	WidgetsCheckRow* self;
	gboolean result = FALSE;
	GtkRevealer* _tmp0_;
	GtkButton* _tmp1_;
	GtkStyleContext* _tmp2_;
#line 98 "/run/build/planner/src/Widgets/CheckRow.vala"
	self = _data56_->self;
#line 98 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 99 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp0_ = _data56_->remove_revealer;
#line 99 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_revealer_set_reveal_child (_tmp0_, TRUE);
#line 100 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp1_ = _data56_->remove_button;
#line 100 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp2_ = gtk_widget_get_style_context ((GtkWidget*) _tmp1_);
#line 100 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_style_context_add_class (_tmp2_, "closed");
#line 101 "/run/build/planner/src/Widgets/CheckRow.vala"
	result = FALSE;
#line 101 "/run/build/planner/src/Widgets/CheckRow.vala"
	return result;
#line 419 "CheckRow.c"
}


static gboolean
__widgets_check_row___lambda40__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                               GdkEventCrossing* event,
                                                               gpointer self)
{
	gboolean result;
	result = _widgets_check_row___lambda40_ (self, event);
#line 98 "/run/build/planner/src/Widgets/CheckRow.vala"
	return result;
#line 432 "CheckRow.c"
}


static void
_widgets_check_row___lambda41_ (WidgetsCheckRow* self)
{
	GtkEntry* _tmp0_;
	Utils* _tmp1_;
	GtkEntry* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
#line 105 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp0_ = self->name_entry;
#line 105 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp1_ = application_utils;
#line 105 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp2_ = self->name_entry;
#line 105 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp3_ = gtk_entry_get_text (_tmp2_);
#line 105 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp4_ = _tmp3_;
#line 105 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp5_ = utils_first_letter_to_up (_tmp1_, _tmp4_);
#line 105 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp6_ = _tmp5_;
#line 105 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_entry_set_text (_tmp0_, _tmp6_);
#line 105 "/run/build/planner/src/Widgets/CheckRow.vala"
	_g_free0 (_tmp6_);
#line 464 "CheckRow.c"
}


static void
__widgets_check_row___lambda41__gtk_editable_changed (GtkEditable* _sender,
                                                      gpointer self)
{
#line 104 "/run/build/planner/src/Widgets/CheckRow.vala"
	_widgets_check_row___lambda41_ ((WidgetsCheckRow*) self);
#line 474 "CheckRow.c"
}


static gboolean
_widgets_check_row___lambda42_ (Block56Data* _data56_,
                                GdkEventCrossing* event)
{
	WidgetsCheckRow* self;
	gboolean result = FALSE;
	GdkNotifyType _tmp0_;
	GtkButton* _tmp1_;
	GtkStyleContext* _tmp2_;
	GtkRevealer* _tmp3_;
#line 108 "/run/build/planner/src/Widgets/CheckRow.vala"
	self = _data56_->self;
#line 108 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 109 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp0_ = event->detail;
#line 109 "/run/build/planner/src/Widgets/CheckRow.vala"
	if (_tmp0_ == GDK_NOTIFY_INFERIOR) {
#line 110 "/run/build/planner/src/Widgets/CheckRow.vala"
		result = FALSE;
#line 110 "/run/build/planner/src/Widgets/CheckRow.vala"
		return result;
#line 500 "CheckRow.c"
	}
#line 113 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp1_ = _data56_->remove_button;
#line 113 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp2_ = gtk_widget_get_style_context ((GtkWidget*) _tmp1_);
#line 113 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_style_context_remove_class (_tmp2_, "closed");
#line 114 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp3_ = _data56_->remove_revealer;
#line 114 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_revealer_set_reveal_child (_tmp3_, FALSE);
#line 115 "/run/build/planner/src/Widgets/CheckRow.vala"
	result = FALSE;
#line 115 "/run/build/planner/src/Widgets/CheckRow.vala"
	return result;
#line 516 "CheckRow.c"
}


static gboolean
__widgets_check_row___lambda42__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                               GdkEventCrossing* event,
                                                               gpointer self)
{
	gboolean result;
	result = _widgets_check_row___lambda42_ (self, event);
#line 108 "/run/build/planner/src/Widgets/CheckRow.vala"
	return result;
#line 529 "CheckRow.c"
}


static void
_widgets_check_row___lambda43_ (WidgetsCheckRow* self)
{
#line 119 "/run/build/planner/src/Widgets/CheckRow.vala"
	widgets_check_row_check_task_completed (self);
#line 538 "CheckRow.c"
}


static void
__widgets_check_row___lambda43__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                           gpointer self)
{
#line 118 "/run/build/planner/src/Widgets/CheckRow.vala"
	_widgets_check_row___lambda43_ ((WidgetsCheckRow*) self);
#line 548 "CheckRow.c"
}


static void
_widgets_check_row___lambda44_ (WidgetsCheckRow* self)
{
#line 123 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_widget_destroy ((GtkWidget*) self);
#line 557 "CheckRow.c"
}


static void
__widgets_check_row___lambda44__gtk_button_clicked (GtkButton* _sender,
                                                    gpointer self)
{
#line 122 "/run/build/planner/src/Widgets/CheckRow.vala"
	_widgets_check_row___lambda44_ ((WidgetsCheckRow*) self);
#line 567 "CheckRow.c"
}


static GObject *
widgets_check_row_constructor (GType type,
                               guint n_construct_properties,
                               GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsCheckRow * self;
	Block56Data* _data56_;
	GtkStyleContext* _tmp0_;
	const gchar* _tmp1_;
	GtkCheckButton* _tmp2_;
	GtkCheckButton* _tmp3_;
	GtkCheckButton* _tmp4_;
	GtkCheckButton* _tmp5_;
	GtkCheckButton* _tmp6_;
	gboolean _tmp7_;
	GtkCheckButton* _tmp8_;
	GtkStyleContext* _tmp9_;
	GtkEntry* _tmp10_;
	GtkEntry* _tmp11_;
	GtkStyleContext* _tmp12_;
	GtkEntry* _tmp13_;
	GtkStyleContext* _tmp14_;
	GtkEntry* _tmp15_;
	GtkStyleContext* _tmp16_;
	GtkEntry* _tmp17_;
	GtkStyleContext* _tmp18_;
	GtkEntry* _tmp19_;
	GtkStyleContext* _tmp20_;
	GtkEntry* _tmp21_;
	GtkEntry* _tmp22_;
	GtkEntry* _tmp23_;
	GtkEntry* _tmp24_;
	Utils* _tmp25_;
	const gchar* _tmp26_;
	gchar* _tmp27_;
	gchar* _tmp28_;
	GtkEntry* _tmp29_;
	GtkButton* _tmp30_;
	GtkButton* _tmp31_;
	GtkButton* _tmp32_;
	GtkButton* _tmp33_;
	GtkButton* _tmp34_;
	GtkButton* _tmp35_;
	GtkStyleContext* _tmp36_;
	GtkButton* _tmp37_;
	GtkStyleContext* _tmp38_;
	GtkRevealer* _tmp39_;
	GtkRevealer* _tmp40_;
	GtkRevealer* _tmp41_;
	GtkButton* _tmp42_;
	GtkRevealer* _tmp43_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp44_;
	GtkBox* _tmp45_;
	GtkBox* _tmp46_;
	GtkCheckButton* _tmp47_;
	GtkBox* _tmp48_;
	GtkEntry* _tmp49_;
	GtkBox* _tmp50_;
	GtkRevealer* _tmp51_;
	GtkEventBox* eventbox = NULL;
	GtkEventBox* _tmp52_;
	GtkEventBox* _tmp53_;
	GtkEventBox* _tmp54_;
	GtkBox* _tmp55_;
	GtkEventBox* _tmp56_;
	GtkEventBox* _tmp57_;
	GtkEntry* _tmp58_;
	GtkEventBox* _tmp59_;
	GtkCheckButton* _tmp60_;
	GtkButton* _tmp61_;
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
	parent_class = G_OBJECT_CLASS (widgets_check_row_parent_class);
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_CHECK_ROW, WidgetsCheckRow);
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
	_data56_ = g_slice_new0 (Block56Data);
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
	_data56_->_ref_count_ = 1;
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
	_data56_->self = g_object_ref (self);
#line 49 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 49 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_style_context_add_class (_tmp0_, "task");
#line 50 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp1_ = self->priv->_checklist_name;
#line 50 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) self, _tmp1_);
#line 52 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp2_ = (GtkCheckButton*) gtk_check_button_new ();
#line 52 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_object_ref_sink (_tmp2_);
#line 52 "/run/build/planner/src/Widgets/CheckRow.vala"
	_g_object_unref0 (self->checked_button);
#line 52 "/run/build/planner/src/Widgets/CheckRow.vala"
	self->checked_button = _tmp2_;
#line 53 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp3_ = self->checked_button;
#line 53 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp3_, FALSE);
#line 54 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp4_ = self->checked_button;
#line 54 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp4_, GTK_ALIGN_CENTER);
#line 55 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp5_ = self->checked_button;
#line 55 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp5_, GTK_ALIGN_CENTER);
#line 56 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp6_ = self->checked_button;
#line 56 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp7_ = self->priv->_checked;
#line 56 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_toggle_button_set_active ((GtkToggleButton*) _tmp6_, _tmp7_);
#line 57 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp8_ = self->checked_button;
#line 57 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp9_ = gtk_widget_get_style_context ((GtkWidget*) _tmp8_);
#line 57 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_style_context_add_class (_tmp9_, "planner-radio");
#line 59 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp10_ = (GtkEntry*) gtk_entry_new ();
#line 59 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_object_ref_sink (_tmp10_);
#line 59 "/run/build/planner/src/Widgets/CheckRow.vala"
	_g_object_unref0 (self->name_entry);
#line 59 "/run/build/planner/src/Widgets/CheckRow.vala"
	self->name_entry = _tmp10_;
#line 60 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp11_ = self->name_entry;
#line 60 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp12_ = gtk_widget_get_style_context ((GtkWidget*) _tmp11_);
#line 60 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_style_context_add_class (_tmp12_, GTK_STYLE_CLASS_FLAT);
#line 61 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp13_ = self->name_entry;
#line 61 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp14_ = gtk_widget_get_style_context ((GtkWidget*) _tmp13_);
#line 61 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_style_context_add_class (_tmp14_, GTK_STYLE_CLASS_VIEW);
#line 62 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp15_ = self->name_entry;
#line 62 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp16_ = gtk_widget_get_style_context ((GtkWidget*) _tmp15_);
#line 62 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_style_context_add_class (_tmp16_, GRANITE_STYLE_CLASS_H3_LABEL);
#line 63 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp17_ = self->name_entry;
#line 63 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp18_ = gtk_widget_get_style_context ((GtkWidget*) _tmp17_);
#line 63 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_style_context_add_class (_tmp18_, "planner-entry");
#line 64 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp19_ = self->name_entry;
#line 64 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp20_ = gtk_widget_get_style_context ((GtkWidget*) _tmp19_);
#line 64 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_style_context_add_class (_tmp20_, "no-padding");
#line 65 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp21_ = self->name_entry;
#line 65 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp21_, TRUE);
#line 66 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp22_ = self->name_entry;
#line 66 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp22_, 1);
#line 67 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp23_ = self->name_entry;
#line 67 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp23_, 3);
#line 68 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp24_ = self->name_entry;
#line 68 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp25_ = application_utils;
#line 68 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp26_ = self->priv->_checklist_name;
#line 68 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp27_ = utils_first_letter_to_up (_tmp25_, _tmp26_);
#line 68 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp28_ = _tmp27_;
#line 68 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_entry_set_text (_tmp24_, _tmp28_);
#line 68 "/run/build/planner/src/Widgets/CheckRow.vala"
	_g_free0 (_tmp28_);
#line 69 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp29_ = self->name_entry;
#line 69 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_entry_set_placeholder_text (_tmp29_, _ ("Checklist"));
#line 71 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp30_ = (GtkButton*) gtk_button_new_from_icon_name ("window-close-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 71 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_object_ref_sink (_tmp30_);
#line 71 "/run/build/planner/src/Widgets/CheckRow.vala"
	_data56_->remove_button = _tmp30_;
#line 72 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp31_ = _data56_->remove_button;
#line 72 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp31_, FALSE);
#line 73 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp32_ = _data56_->remove_button;
#line 73 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_widget_set_focus_on_click ((GtkWidget*) _tmp32_, FALSE);
#line 74 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp33_ = _data56_->remove_button;
#line 74 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp33_, GTK_ALIGN_CENTER);
#line 75 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp34_ = _data56_->remove_button;
#line 75 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp34_, GTK_ALIGN_CENTER);
#line 76 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp35_ = _data56_->remove_button;
#line 76 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp36_ = gtk_widget_get_style_context ((GtkWidget*) _tmp35_);
#line 76 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_style_context_add_class (_tmp36_, "button-overlay-circular");
#line 77 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp37_ = _data56_->remove_button;
#line 77 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp38_ = gtk_widget_get_style_context ((GtkWidget*) _tmp37_);
#line 77 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_style_context_add_class (_tmp38_, "planner-button-no-focus");
#line 79 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp39_ = (GtkRevealer*) gtk_revealer_new ();
#line 79 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_object_ref_sink (_tmp39_);
#line 79 "/run/build/planner/src/Widgets/CheckRow.vala"
	_data56_->remove_revealer = _tmp39_;
#line 80 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp40_ = _data56_->remove_revealer;
#line 80 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_revealer_set_transition_type (_tmp40_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT);
#line 81 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp41_ = _data56_->remove_revealer;
#line 81 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp42_ = _data56_->remove_button;
#line 81 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_container_add ((GtkContainer*) _tmp41_, (GtkWidget*) _tmp42_);
#line 82 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp43_ = _data56_->remove_revealer;
#line 82 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_revealer_set_reveal_child (_tmp43_, FALSE);
#line 84 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp44_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 84 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_object_ref_sink (_tmp44_);
#line 84 "/run/build/planner/src/Widgets/CheckRow.vala"
	main_box = _tmp44_;
#line 85 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp45_ = main_box;
#line 85 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_object_set ((GtkWidget*) _tmp45_, "expand", TRUE, NULL);
#line 87 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp46_ = main_box;
#line 87 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp47_ = self->checked_button;
#line 87 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_box_pack_start (_tmp46_, (GtkWidget*) _tmp47_, FALSE, FALSE, (guint) 0);
#line 88 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp48_ = main_box;
#line 88 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp49_ = self->name_entry;
#line 88 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_box_pack_start (_tmp48_, (GtkWidget*) _tmp49_, TRUE, TRUE, (guint) 6);
#line 89 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp50_ = main_box;
#line 89 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp51_ = _data56_->remove_revealer;
#line 89 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_box_pack_end (_tmp50_, (GtkWidget*) _tmp51_, FALSE, FALSE, (guint) 0);
#line 91 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp52_ = (GtkEventBox*) gtk_event_box_new ();
#line 91 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_object_ref_sink (_tmp52_);
#line 91 "/run/build/planner/src/Widgets/CheckRow.vala"
	eventbox = _tmp52_;
#line 92 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp53_ = eventbox;
#line 92 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_widget_add_events ((GtkWidget*) _tmp53_, (gint) (GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK));
#line 93 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp54_ = eventbox;
#line 93 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp55_ = main_box;
#line 93 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_container_add ((GtkContainer*) _tmp54_, (GtkWidget*) _tmp55_);
#line 95 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp56_ = eventbox;
#line 95 "/run/build/planner/src/Widgets/CheckRow.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp56_);
#line 96 "/run/build/planner/src/Widgets/CheckRow.vala"
	widgets_check_row_check_task_completed (self);
#line 98 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp57_ = eventbox;
#line 98 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_signal_connect_data ((GtkWidget*) _tmp57_, "enter-notify-event", (GCallback) __widgets_check_row___lambda40__gtk_widget_enter_notify_event, block56_data_ref (_data56_), (GClosureNotify) block56_data_unref, 0);
#line 104 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp58_ = self->name_entry;
#line 104 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_signal_connect_object ((GtkEditable*) _tmp58_, "changed", (GCallback) __widgets_check_row___lambda41__gtk_editable_changed, self, 0);
#line 108 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp59_ = eventbox;
#line 108 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_signal_connect_data ((GtkWidget*) _tmp59_, "leave-notify-event", (GCallback) __widgets_check_row___lambda42__gtk_widget_leave_notify_event, block56_data_ref (_data56_), (GClosureNotify) block56_data_unref, 0);
#line 118 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp60_ = self->checked_button;
#line 118 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_signal_connect_object ((GtkToggleButton*) _tmp60_, "toggled", (GCallback) __widgets_check_row___lambda43__gtk_toggle_button_toggled, self, 0);
#line 122 "/run/build/planner/src/Widgets/CheckRow.vala"
	_tmp61_ = _data56_->remove_button;
#line 122 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_signal_connect_object (_tmp61_, "clicked", (GCallback) __widgets_check_row___lambda44__gtk_button_clicked, self, 0);
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
	_g_object_unref0 (eventbox);
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
	_g_object_unref0 (main_box);
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
	block56_data_unref (_data56_);
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
	_data56_ = NULL;
#line 48 "/run/build/planner/src/Widgets/CheckRow.vala"
	return obj;
#line 898 "CheckRow.c"
}


static void
widgets_check_row_class_init (WidgetsCheckRowClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
	widgets_check_row_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_type_class_add_private (klass, sizeof (WidgetsCheckRowPrivate));
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_check_row_get_property;
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_check_row_set_property;
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_check_row_constructor;
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_check_row_finalize;
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_CHECK_ROW_CHECKLIST_NAME_PROPERTY, widgets_check_row_properties[WIDGETS_CHECK_ROW_CHECKLIST_NAME_PROPERTY] = g_param_spec_string ("checklist-name", "checklist-name", "checklist-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_CHECK_ROW_CHECKED_PROPERTY, widgets_check_row_properties[WIDGETS_CHECK_ROW_CHECKED_PROPERTY] = g_param_spec_boolean ("checked", "checked", "checked", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 921 "CheckRow.c"
}


static void
widgets_check_row_instance_init (WidgetsCheckRow * self)
{
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
	self->priv = WIDGETS_CHECK_ROW_GET_PRIVATE (self);
#line 930 "CheckRow.c"
}


static void
widgets_check_row_finalize (GObject * obj)
{
	WidgetsCheckRow * self;
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_CHECK_ROW, WidgetsCheckRow);
#line 23 "/run/build/planner/src/Widgets/CheckRow.vala"
	_g_object_unref0 (self->checked_button);
#line 24 "/run/build/planner/src/Widgets/CheckRow.vala"
	_g_object_unref0 (self->name_entry);
#line 26 "/run/build/planner/src/Widgets/CheckRow.vala"
	_g_free0 (self->priv->_checklist_name);
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
	G_OBJECT_CLASS (widgets_check_row_parent_class)->finalize (obj);
#line 948 "CheckRow.c"
}


GType
widgets_check_row_get_type (void)
{
	static volatile gsize widgets_check_row_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_check_row_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsCheckRowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_check_row_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsCheckRow), 0, (GInstanceInitFunc) widgets_check_row_instance_init, NULL };
		GType widgets_check_row_type_id;
		widgets_check_row_type_id = g_type_register_static (gtk_list_box_row_get_type (), "WidgetsCheckRow", &g_define_type_info, 0);
		g_once_init_leave (&widgets_check_row_type_id__volatile, widgets_check_row_type_id);
	}
	return widgets_check_row_type_id__volatile;
}


static void
_vala_widgets_check_row_get_property (GObject * object,
                                      guint property_id,
                                      GValue * value,
                                      GParamSpec * pspec)
{
	WidgetsCheckRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_CHECK_ROW, WidgetsCheckRow);
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		case WIDGETS_CHECK_ROW_CHECKLIST_NAME_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		g_value_set_string (value, widgets_check_row_get_checklist_name (self));
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		case WIDGETS_CHECK_ROW_CHECKED_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		g_value_set_boolean (value, widgets_check_row_get_checked (self));
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		break;
#line 988 "CheckRow.c"
		default:
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		break;
#line 994 "CheckRow.c"
	}
}


static void
_vala_widgets_check_row_set_property (GObject * object,
                                      guint property_id,
                                      const GValue * value,
                                      GParamSpec * pspec)
{
	WidgetsCheckRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_CHECK_ROW, WidgetsCheckRow);
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		case WIDGETS_CHECK_ROW_CHECKLIST_NAME_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		widgets_check_row_set_checklist_name (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		case WIDGETS_CHECK_ROW_CHECKED_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		widgets_check_row_set_checked (self, g_value_get_boolean (value));
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		break;
#line 1021 "CheckRow.c"
		default:
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/CheckRow.vala"
		break;
#line 1027 "CheckRow.c"
	}
}



