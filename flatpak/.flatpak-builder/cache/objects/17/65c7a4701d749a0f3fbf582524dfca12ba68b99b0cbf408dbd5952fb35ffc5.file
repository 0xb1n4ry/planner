/* unity-sound-menu.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-sound-menu.vala, do not modify */

/* -*- Mode: vala; indent-tabs-mode: nil; c-basic-offset: 2; tab-width: 2 -*- */
/*
 * Copyright (C) 2011 Canonical Ltd
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authored by Conor Curran <conor.curran@canonical.com>
 *
 * Note: We aim to not wrap a typical MPRIS server but just expose to the consumer
 * the elements we need for it to populate. So that means things like Supported
 * Mime Types which are part of MPRIS but are not relevant to the consumer should 
 * remain hidden and as a result not used.
 *
 * Reasons why a client may not be able to 'embed' itself.
 *   1. Cannot find the desktop file from the name provided
 *   2. Name already taken on the bus, in the current implementation does it hang
 *      around waiting for the name to come available
 */


#include <glib.h>
#include <glib-object.h>
#include "unity.h"
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <libdbusmenu-glib/client.h>
#include <libdbusmenu-glib/dbusmenu-glib.h>
#include <libdbusmenu-glib/enum-types.h>
#include <libdbusmenu-glib/menuitem-proxy.h>
#include <libdbusmenu-glib/menuitem.h>
#include <libdbusmenu-glib/server.h>
#include <libdbusmenu-glib/types.h>
#include <gio/gdesktopappinfo.h>

enum  {
	UNITY_TRACK_METADATA_0_PROPERTY,
	UNITY_TRACK_METADATA_URI_PROPERTY,
	UNITY_TRACK_METADATA_TRACK_NO_PROPERTY,
	UNITY_TRACK_METADATA_ARTIST_PROPERTY,
	UNITY_TRACK_METADATA_TITLE_PROPERTY,
	UNITY_TRACK_METADATA_ALBUM_PROPERTY,
	UNITY_TRACK_METADATA_LENGTH_PROPERTY,
	UNITY_TRACK_METADATA_ART_LOCATION_PROPERTY,
	UNITY_TRACK_METADATA_ART_ICON_PROPERTY,
	UNITY_TRACK_METADATA_NUM_PROPERTIES
};
static GParamSpec* unity_track_metadata_properties[UNITY_TRACK_METADATA_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
enum  {
	UNITY_PLAYLIST_0_PROPERTY,
	UNITY_PLAYLIST_ID_PROPERTY,
	UNITY_PLAYLIST_NAME_PROPERTY,
	UNITY_PLAYLIST_ICON_PROPERTY,
	UNITY_PLAYLIST_CREATION_DATE_PROPERTY,
	UNITY_PLAYLIST_MODIFICATION_DATE_PROPERTY,
	UNITY_PLAYLIST_LAST_PLAY_DATE_PROPERTY,
	UNITY_PLAYLIST_NUM_PROPERTIES
};
static GParamSpec* unity_playlist_properties[UNITY_PLAYLIST_NUM_PROPERTIES];
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))

#define UNITY_TYPE_MPRIS_GATEWAY (unity_mpris_gateway_get_type ())
#define UNITY_MPRIS_GATEWAY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TYPE_MPRIS_GATEWAY, UnityMPRISGateway))
#define UNITY_MPRIS_GATEWAY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TYPE_MPRIS_GATEWAY, UnityMPRISGatewayClass))
#define UNITY_IS_MPRIS_GATEWAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TYPE_MPRIS_GATEWAY))
#define UNITY_IS_MPRIS_GATEWAY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TYPE_MPRIS_GATEWAY))
#define UNITY_MPRIS_GATEWAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TYPE_MPRIS_GATEWAY, UnityMPRISGatewayClass))

typedef struct _UnityMPRISGateway UnityMPRISGateway;
typedef struct _UnityMPRISGatewayClass UnityMPRISGatewayClass;
enum  {
	UNITY_MUSIC_PLAYER_0_PROPERTY,
	UNITY_MUSIC_PLAYER_APP_INFO_PROPERTY,
	UNITY_MUSIC_PLAYER_DESKTOP_FILE_NAME_PROPERTY,
	UNITY_MUSIC_PLAYER_IS_BLACKLISTED_PROPERTY,
	UNITY_MUSIC_PLAYER_TITLE_PROPERTY,
	UNITY_MUSIC_PLAYER_CAN_GO_NEXT_PROPERTY,
	UNITY_MUSIC_PLAYER_CAN_GO_PREVIOUS_PROPERTY,
	UNITY_MUSIC_PLAYER_CAN_PLAY_PROPERTY,
	UNITY_MUSIC_PLAYER_CAN_PAUSE_PROPERTY,
	UNITY_MUSIC_PLAYER_CURRENT_TRACK_PROPERTY,
	UNITY_MUSIC_PLAYER_PLAYBACK_STATE_PROPERTY,
	UNITY_MUSIC_PLAYER_CURRENT_PLAYLIST_PROPERTY,
	UNITY_MUSIC_PLAYER_TRACK_MENU_PROPERTY,
	UNITY_MUSIC_PLAYER_PLAYER_MENU_PROPERTY,
	UNITY_MUSIC_PLAYER_NUM_PROPERTIES
};
static GParamSpec* unity_music_player_properties[UNITY_MUSIC_PLAYER_NUM_PROPERTIES];
#define _g_ptr_array_unref0(var) ((var == NULL) ? NULL : (var = (g_ptr_array_unref (var), NULL)))
typedef struct _Block26Data Block26Data;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
enum  {
	UNITY_MUSIC_PLAYER_RAISE_SIGNAL,
	UNITY_MUSIC_PLAYER_PLAY_PAUSE_SIGNAL,
	UNITY_MUSIC_PLAYER_PREVIOUS_SIGNAL,
	UNITY_MUSIC_PLAYER_NEXT_SIGNAL,
	UNITY_MUSIC_PLAYER_ACTIVATE_PLAYLIST_SIGNAL,
	UNITY_MUSIC_PLAYER_NUM_SIGNALS
};
static guint unity_music_player_signals[UNITY_MUSIC_PLAYER_NUM_SIGNALS] = {0};

struct _UnityTrackMetadataPrivate {
	gchar* _uri;
	gint _track_no;
	gchar* _artist;
	gchar* _title;
	gchar* _album;
	guint _length;
	GIcon* _art_icon;
	GFile* _art_file;
};

struct _UnityPlaylistPrivate {
	gchar* _id;
	gchar* _name;
	GIcon* _icon;
	GDateTime* _creation_date;
	GDateTime* _modification_date;
	GDateTime* _last_play_date;
};

struct _UnityMusicPlayerPrivate {
	UnityMPRISGateway* mpris_gateway;
	GPtrArray* internal_playlists;
	GAppInfo* _app_info;
	gchar* _desktop_file_name;
	gboolean _is_blacklisted;
	gchar* _title;
	gboolean _can_go_next;
	gboolean _can_go_previous;
	gboolean _can_play;
	gboolean _can_pause;
	UnityTrackMetadata* _current_track;
	UnityPlaybackState _playback_state;
	UnityPlaylist* _current_playlist;
	DbusmenuMenuitem* _track_menu;
	DbusmenuMenuitem* _player_menu;
};

struct _Block26Data {
	int _ref_count_;
	UnityMusicPlayer* self;
	gchar* id;
	gchar* name;
};


static gpointer unity_track_metadata_parent_class = NULL;
static gpointer unity_playlist_parent_class = NULL;
static gpointer unity_music_player_parent_class = NULL;

#define UNITY_TRACK_METADATA_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_TRACK_METADATA, UnityTrackMetadataPrivate))
static void unity_track_metadata_finalize (GObject * obj);
static void _vala_unity_track_metadata_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec);
static void _vala_unity_track_metadata_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec);
#define UNITY_PLAYLIST_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_PLAYLIST, UnityPlaylistPrivate))
static void unity_playlist_finalize (GObject * obj);
static void _vala_unity_playlist_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec);
static void _vala_unity_playlist_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec);
GType unity_mpris_gateway_get_type (void) G_GNUC_CONST;
#define UNITY_MUSIC_PLAYER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_MUSIC_PLAYER, UnityMusicPlayerPrivate))
static void _g_object_unref0_ (gpointer var);
void unity_mpris_gateway_export (UnityMPRISGateway* self);
void unity_mpris_gateway_unexport (UnityMPRISGateway* self);
static GAppInfo* unity_music_player_create_app_info (const gchar* desktop);
void unity_mpris_gateway_ensure_playlist_interface_is_raised (UnityMPRISGateway* self);
void unity_mpris_gateway_set_playlist_count (UnityMPRISGateway* self,
                                             gint value);
static UnityPlaylist** _vala_array_dup10 (UnityPlaylist** self,
                                   int length);
static Block26Data* block26_data_ref (Block26Data* _data26_);
static void block26_data_unref (void * _userdata_);
static void __lambda60_ (Block26Data* _data26_,
                  UnityPlaylist* pl);
void unity_mpris_gateway_set_edited_playlist (UnityMPRISGateway* self,
                                              UnityPlaylist* value);
static void ___lambda60__gfunc (gconstpointer data,
                         gpointer self);
static GObject * unity_music_player_constructor (GType type,
                                          guint n_construct_properties,
                                          GObjectConstructParam * construct_properties);
UnityMPRISGateway* unity_mpris_gateway_new (UnityMusicPlayer* client);
UnityMPRISGateway* unity_mpris_gateway_construct (GType object_type,
                                                  UnityMusicPlayer* client);
static void unity_music_player_finalize (GObject * obj);
static void _vala_unity_music_player_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec);
static void _vala_unity_music_player_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec);


UnityTrackMetadata*
unity_track_metadata_construct (GType object_type)
{
	UnityTrackMetadata * self = NULL;
	self = (UnityTrackMetadata*) g_object_new (object_type, NULL);
	return self;
}


UnityTrackMetadata*
unity_track_metadata_new (void)
{
	return unity_track_metadata_construct (UNITY_TYPE_TRACK_METADATA);
}


UnityTrackMetadata*
unity_track_metadata_construct_full (GType object_type,
                                     const gchar* uri,
                                     gint track_no,
                                     const gchar* title,
                                     const gchar* artist,
                                     const gchar* album,
                                     guint length)
{
	UnityTrackMetadata * self = NULL;
	g_return_val_if_fail (uri != NULL, NULL);
	g_return_val_if_fail (title != NULL, NULL);
	g_return_val_if_fail (artist != NULL, NULL);
	g_return_val_if_fail (album != NULL, NULL);
	self = (UnityTrackMetadata*) g_object_new (object_type, "uri", uri, "track-no", track_no, "title", title, "artist", artist, "album", album, "length", length, NULL);
	return self;
}


UnityTrackMetadata*
unity_track_metadata_new_full (const gchar* uri,
                               gint track_no,
                               const gchar* title,
                               const gchar* artist,
                               const gchar* album,
                               guint length)
{
	return unity_track_metadata_construct_full (UNITY_TYPE_TRACK_METADATA, uri, track_no, title, artist, album, length);
}


const gchar*
unity_track_metadata_get_uri (UnityTrackMetadata* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_uri;
	result = _tmp0_;
	return result;
}


void
unity_track_metadata_set_uri (UnityTrackMetadata* self,
                              const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_track_metadata_get_uri (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_uri);
		self->priv->_uri = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_track_metadata_properties[UNITY_TRACK_METADATA_URI_PROPERTY]);
	}
}


gint
unity_track_metadata_get_track_no (UnityTrackMetadata* self)
{
	gint result;
	gint _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->priv->_track_no;
	result = _tmp0_;
	return result;
}


void
unity_track_metadata_set_track_no (UnityTrackMetadata* self,
                                   gint value)
{
	g_return_if_fail (self != NULL);
	if (unity_track_metadata_get_track_no (self) != value) {
		self->priv->_track_no = value;
		g_object_notify_by_pspec ((GObject *) self, unity_track_metadata_properties[UNITY_TRACK_METADATA_TRACK_NO_PROPERTY]);
	}
}


const gchar*
unity_track_metadata_get_artist (UnityTrackMetadata* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_artist;
	result = _tmp0_;
	return result;
}


void
unity_track_metadata_set_artist (UnityTrackMetadata* self,
                                 const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_track_metadata_get_artist (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_artist);
		self->priv->_artist = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_track_metadata_properties[UNITY_TRACK_METADATA_ARTIST_PROPERTY]);
	}
}


const gchar*
unity_track_metadata_get_title (UnityTrackMetadata* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_title;
	result = _tmp0_;
	return result;
}


void
unity_track_metadata_set_title (UnityTrackMetadata* self,
                                const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_track_metadata_get_title (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_title);
		self->priv->_title = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_track_metadata_properties[UNITY_TRACK_METADATA_TITLE_PROPERTY]);
	}
}


const gchar*
unity_track_metadata_get_album (UnityTrackMetadata* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_album;
	result = _tmp0_;
	return result;
}


void
unity_track_metadata_set_album (UnityTrackMetadata* self,
                                const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_track_metadata_get_album (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_album);
		self->priv->_album = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_track_metadata_properties[UNITY_TRACK_METADATA_ALBUM_PROPERTY]);
	}
}


guint
unity_track_metadata_get_length (UnityTrackMetadata* self)
{
	guint result;
	guint _tmp0_;
	g_return_val_if_fail (self != NULL, 0U);
	_tmp0_ = self->priv->_length;
	result = _tmp0_;
	return result;
}


void
unity_track_metadata_set_length (UnityTrackMetadata* self,
                                 guint value)
{
	g_return_if_fail (self != NULL);
	if (unity_track_metadata_get_length (self) != value) {
		self->priv->_length = value;
		g_object_notify_by_pspec ((GObject *) self, unity_track_metadata_properties[UNITY_TRACK_METADATA_LENGTH_PROPERTY]);
	}
}


GFile*
unity_track_metadata_get_art_location (UnityTrackMetadata* self)
{
	GFile* result;
	GFile* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_art_file;
	result = _tmp0_;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


void
unity_track_metadata_set_art_location (UnityTrackMetadata* self,
                                       GFile* value)
{
	GFile* _tmp0_;
	GFile* _tmp1_;
	GFileIcon* _tmp2_;
	g_return_if_fail (self != NULL);
	_tmp0_ = _g_object_ref0 (value);
	_g_object_unref0 (self->priv->_art_file);
	self->priv->_art_file = _tmp0_;
	_tmp1_ = self->priv->_art_file;
	_tmp2_ = (GFileIcon*) g_file_icon_new (_tmp1_);
	_g_object_unref0 (self->priv->_art_icon);
	self->priv->_art_icon = (GIcon*) _tmp2_;
	g_object_notify ((GObject*) self, "art-icon");
	g_object_notify_by_pspec ((GObject *) self, unity_track_metadata_properties[UNITY_TRACK_METADATA_ART_LOCATION_PROPERTY]);
}


GIcon*
unity_track_metadata_get_art_icon (UnityTrackMetadata* self)
{
	GIcon* result;
	GIcon* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_art_icon;
	result = _tmp0_;
	return result;
}


void
unity_track_metadata_set_art_icon (UnityTrackMetadata* self,
                                   GIcon* value)
{
	GIcon* _tmp0_;
	GIcon* _tmp1_;
	g_return_if_fail (self != NULL);
	_tmp0_ = _g_object_ref0 (value);
	_g_object_unref0 (self->priv->_art_icon);
	self->priv->_art_icon = _tmp0_;
	_tmp1_ = self->priv->_art_icon;
	if (G_TYPE_CHECK_INSTANCE_TYPE (_tmp1_, g_file_icon_get_type ())) {
		GFileIcon* file_icon = NULL;
		GIcon* _tmp2_;
		GFileIcon* _tmp3_;
		GFileIcon* _tmp4_;
		GFile* _tmp5_;
		GFile* _tmp6_;
		_tmp2_ = self->priv->_art_icon;
		_tmp3_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp2_, g_file_icon_get_type ()) ? ((GFileIcon*) _tmp2_) : NULL);
		file_icon = _tmp3_;
		_tmp4_ = file_icon;
		_tmp5_ = g_file_icon_get_file (_tmp4_);
		_tmp6_ = _g_object_ref0 (_tmp5_);
		_g_object_unref0 (self->priv->_art_file);
		self->priv->_art_file = _tmp6_;
		_g_object_unref0 (file_icon);
	} else {
		_g_object_unref0 (self->priv->_art_file);
		self->priv->_art_file = NULL;
	}
	g_object_notify ((GObject*) self, "art-location");
	g_object_notify_by_pspec ((GObject *) self, unity_track_metadata_properties[UNITY_TRACK_METADATA_ART_ICON_PROPERTY]);
}


static void
unity_track_metadata_class_init (UnityTrackMetadataClass * klass)
{
	unity_track_metadata_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityTrackMetadataPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_track_metadata_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_track_metadata_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_track_metadata_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_TRACK_METADATA_URI_PROPERTY, unity_track_metadata_properties[UNITY_TRACK_METADATA_URI_PROPERTY] = g_param_spec_string ("uri", "uri", "uri", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_TRACK_METADATA_TRACK_NO_PROPERTY, unity_track_metadata_properties[UNITY_TRACK_METADATA_TRACK_NO_PROPERTY] = g_param_spec_int ("track-no", "track-no", "track-no", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_TRACK_METADATA_ARTIST_PROPERTY, unity_track_metadata_properties[UNITY_TRACK_METADATA_ARTIST_PROPERTY] = g_param_spec_string ("artist", "artist", "artist", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_TRACK_METADATA_TITLE_PROPERTY, unity_track_metadata_properties[UNITY_TRACK_METADATA_TITLE_PROPERTY] = g_param_spec_string ("title", "title", "title", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_TRACK_METADATA_ALBUM_PROPERTY, unity_track_metadata_properties[UNITY_TRACK_METADATA_ALBUM_PROPERTY] = g_param_spec_string ("album", "album", "album", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_TRACK_METADATA_LENGTH_PROPERTY, unity_track_metadata_properties[UNITY_TRACK_METADATA_LENGTH_PROPERTY] = g_param_spec_uint ("length", "length", "length", 0, G_MAXUINT, 0U, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_TRACK_METADATA_ART_LOCATION_PROPERTY, unity_track_metadata_properties[UNITY_TRACK_METADATA_ART_LOCATION_PROPERTY] = g_param_spec_object ("art-location", "art-location", "art-location", g_file_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_TRACK_METADATA_ART_ICON_PROPERTY, unity_track_metadata_properties[UNITY_TRACK_METADATA_ART_ICON_PROPERTY] = g_param_spec_object ("art-icon", "art-icon", "art-icon", g_icon_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


static void
unity_track_metadata_instance_init (UnityTrackMetadata * self)
{
	self->priv = UNITY_TRACK_METADATA_GET_PRIVATE (self);
}


static void
unity_track_metadata_finalize (GObject * obj)
{
	UnityTrackMetadata * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_TRACK_METADATA, UnityTrackMetadata);
	_g_free0 (self->priv->_uri);
	_g_free0 (self->priv->_artist);
	_g_free0 (self->priv->_title);
	_g_free0 (self->priv->_album);
	_g_object_unref0 (self->priv->_art_icon);
	_g_object_unref0 (self->priv->_art_file);
	G_OBJECT_CLASS (unity_track_metadata_parent_class)->finalize (obj);
}


GType
unity_track_metadata_get_type (void)
{
	static volatile gsize unity_track_metadata_type_id__volatile = 0;
	if (g_once_init_enter (&unity_track_metadata_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityTrackMetadataClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_track_metadata_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityTrackMetadata), 0, (GInstanceInitFunc) unity_track_metadata_instance_init, NULL };
		GType unity_track_metadata_type_id;
		unity_track_metadata_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityTrackMetadata", &g_define_type_info, 0);
		g_once_init_leave (&unity_track_metadata_type_id__volatile, unity_track_metadata_type_id);
	}
	return unity_track_metadata_type_id__volatile;
}


static void
_vala_unity_track_metadata_get_property (GObject * object,
                                         guint property_id,
                                         GValue * value,
                                         GParamSpec * pspec)
{
	UnityTrackMetadata * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_TRACK_METADATA, UnityTrackMetadata);
	switch (property_id) {
		case UNITY_TRACK_METADATA_URI_PROPERTY:
		g_value_set_string (value, unity_track_metadata_get_uri (self));
		break;
		case UNITY_TRACK_METADATA_TRACK_NO_PROPERTY:
		g_value_set_int (value, unity_track_metadata_get_track_no (self));
		break;
		case UNITY_TRACK_METADATA_ARTIST_PROPERTY:
		g_value_set_string (value, unity_track_metadata_get_artist (self));
		break;
		case UNITY_TRACK_METADATA_TITLE_PROPERTY:
		g_value_set_string (value, unity_track_metadata_get_title (self));
		break;
		case UNITY_TRACK_METADATA_ALBUM_PROPERTY:
		g_value_set_string (value, unity_track_metadata_get_album (self));
		break;
		case UNITY_TRACK_METADATA_LENGTH_PROPERTY:
		g_value_set_uint (value, unity_track_metadata_get_length (self));
		break;
		case UNITY_TRACK_METADATA_ART_LOCATION_PROPERTY:
		g_value_set_object (value, unity_track_metadata_get_art_location (self));
		break;
		case UNITY_TRACK_METADATA_ART_ICON_PROPERTY:
		g_value_set_object (value, unity_track_metadata_get_art_icon (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_track_metadata_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec)
{
	UnityTrackMetadata * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_TRACK_METADATA, UnityTrackMetadata);
	switch (property_id) {
		case UNITY_TRACK_METADATA_URI_PROPERTY:
		unity_track_metadata_set_uri (self, g_value_get_string (value));
		break;
		case UNITY_TRACK_METADATA_TRACK_NO_PROPERTY:
		unity_track_metadata_set_track_no (self, g_value_get_int (value));
		break;
		case UNITY_TRACK_METADATA_ARTIST_PROPERTY:
		unity_track_metadata_set_artist (self, g_value_get_string (value));
		break;
		case UNITY_TRACK_METADATA_TITLE_PROPERTY:
		unity_track_metadata_set_title (self, g_value_get_string (value));
		break;
		case UNITY_TRACK_METADATA_ALBUM_PROPERTY:
		unity_track_metadata_set_album (self, g_value_get_string (value));
		break;
		case UNITY_TRACK_METADATA_LENGTH_PROPERTY:
		unity_track_metadata_set_length (self, g_value_get_uint (value));
		break;
		case UNITY_TRACK_METADATA_ART_LOCATION_PROPERTY:
		unity_track_metadata_set_art_location (self, g_value_get_object (value));
		break;
		case UNITY_TRACK_METADATA_ART_ICON_PROPERTY:
		unity_track_metadata_set_art_icon (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


UnityPlaylist*
unity_playlist_construct (GType object_type,
                          const gchar* id)
{
	UnityPlaylist * self = NULL;
	g_return_val_if_fail (id != NULL, NULL);
	self = (UnityPlaylist*) g_object_new (object_type, "id", id, NULL);
	return self;
}


UnityPlaylist*
unity_playlist_new (const gchar* id)
{
	return unity_playlist_construct (UNITY_TYPE_PLAYLIST, id);
}


const gchar*
unity_playlist_get_id (UnityPlaylist* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_id;
	result = _tmp0_;
	return result;
}


static void
unity_playlist_set_id (UnityPlaylist* self,
                       const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_playlist_get_id (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_id);
		self->priv->_id = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_playlist_properties[UNITY_PLAYLIST_ID_PROPERTY]);
	}
}


const gchar*
unity_playlist_get_name (UnityPlaylist* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_name;
	result = _tmp0_;
	return result;
}


void
unity_playlist_set_name (UnityPlaylist* self,
                         const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_playlist_get_name (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_name);
		self->priv->_name = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_playlist_properties[UNITY_PLAYLIST_NAME_PROPERTY]);
	}
}


GIcon*
unity_playlist_get_icon (UnityPlaylist* self)
{
	GIcon* result;
	GIcon* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_icon;
	result = _tmp0_;
	return result;
}


void
unity_playlist_set_icon (UnityPlaylist* self,
                         GIcon* value)
{
	g_return_if_fail (self != NULL);
	if (unity_playlist_get_icon (self) != value) {
		GIcon* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_icon);
		self->priv->_icon = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_playlist_properties[UNITY_PLAYLIST_ICON_PROPERTY]);
	}
}


GDateTime*
unity_playlist_get_creation_date (UnityPlaylist* self)
{
	GDateTime* result;
	GDateTime* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_creation_date;
	result = _tmp0_;
	return result;
}


static gpointer
_g_date_time_ref0 (gpointer self)
{
	return self ? g_date_time_ref (self) : NULL;
}


void
unity_playlist_set_creation_date (UnityPlaylist* self,
                                  GDateTime* value)
{
	g_return_if_fail (self != NULL);
	if (unity_playlist_get_creation_date (self) != value) {
		GDateTime* _tmp0_;
		_tmp0_ = _g_date_time_ref0 (value);
		_g_date_time_unref0 (self->priv->_creation_date);
		self->priv->_creation_date = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_playlist_properties[UNITY_PLAYLIST_CREATION_DATE_PROPERTY]);
	}
}


GDateTime*
unity_playlist_get_modification_date (UnityPlaylist* self)
{
	GDateTime* result;
	GDateTime* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_modification_date;
	result = _tmp0_;
	return result;
}


void
unity_playlist_set_modification_date (UnityPlaylist* self,
                                      GDateTime* value)
{
	g_return_if_fail (self != NULL);
	if (unity_playlist_get_modification_date (self) != value) {
		GDateTime* _tmp0_;
		_tmp0_ = _g_date_time_ref0 (value);
		_g_date_time_unref0 (self->priv->_modification_date);
		self->priv->_modification_date = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_playlist_properties[UNITY_PLAYLIST_MODIFICATION_DATE_PROPERTY]);
	}
}


GDateTime*
unity_playlist_get_last_play_date (UnityPlaylist* self)
{
	GDateTime* result;
	GDateTime* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_last_play_date;
	result = _tmp0_;
	return result;
}


void
unity_playlist_set_last_play_date (UnityPlaylist* self,
                                   GDateTime* value)
{
	g_return_if_fail (self != NULL);
	if (unity_playlist_get_last_play_date (self) != value) {
		GDateTime* _tmp0_;
		_tmp0_ = _g_date_time_ref0 (value);
		_g_date_time_unref0 (self->priv->_last_play_date);
		self->priv->_last_play_date = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_playlist_properties[UNITY_PLAYLIST_LAST_PLAY_DATE_PROPERTY]);
	}
}


static void
unity_playlist_class_init (UnityPlaylistClass * klass)
{
	unity_playlist_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityPlaylistPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_playlist_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_playlist_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_playlist_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PLAYLIST_ID_PROPERTY, unity_playlist_properties[UNITY_PLAYLIST_ID_PROPERTY] = g_param_spec_string ("id", "id", "id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PLAYLIST_NAME_PROPERTY, unity_playlist_properties[UNITY_PLAYLIST_NAME_PROPERTY] = g_param_spec_string ("name", "name", "name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PLAYLIST_ICON_PROPERTY, unity_playlist_properties[UNITY_PLAYLIST_ICON_PROPERTY] = g_param_spec_object ("icon", "icon", "icon", g_icon_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PLAYLIST_CREATION_DATE_PROPERTY, unity_playlist_properties[UNITY_PLAYLIST_CREATION_DATE_PROPERTY] = g_param_spec_boxed ("creation-date", "creation-date", "creation-date", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PLAYLIST_MODIFICATION_DATE_PROPERTY, unity_playlist_properties[UNITY_PLAYLIST_MODIFICATION_DATE_PROPERTY] = g_param_spec_boxed ("modification-date", "modification-date", "modification-date", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PLAYLIST_LAST_PLAY_DATE_PROPERTY, unity_playlist_properties[UNITY_PLAYLIST_LAST_PLAY_DATE_PROPERTY] = g_param_spec_boxed ("last-play-date", "last-play-date", "last-play-date", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


static void
unity_playlist_instance_init (UnityPlaylist * self)
{
	self->priv = UNITY_PLAYLIST_GET_PRIVATE (self);
}


static void
unity_playlist_finalize (GObject * obj)
{
	UnityPlaylist * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_PLAYLIST, UnityPlaylist);
	_g_free0 (self->priv->_id);
	_g_free0 (self->priv->_name);
	_g_object_unref0 (self->priv->_icon);
	_g_date_time_unref0 (self->priv->_creation_date);
	_g_date_time_unref0 (self->priv->_modification_date);
	_g_date_time_unref0 (self->priv->_last_play_date);
	G_OBJECT_CLASS (unity_playlist_parent_class)->finalize (obj);
}


GType
unity_playlist_get_type (void)
{
	static volatile gsize unity_playlist_type_id__volatile = 0;
	if (g_once_init_enter (&unity_playlist_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityPlaylistClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_playlist_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityPlaylist), 0, (GInstanceInitFunc) unity_playlist_instance_init, NULL };
		GType unity_playlist_type_id;
		unity_playlist_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityPlaylist", &g_define_type_info, 0);
		g_once_init_leave (&unity_playlist_type_id__volatile, unity_playlist_type_id);
	}
	return unity_playlist_type_id__volatile;
}


static void
_vala_unity_playlist_get_property (GObject * object,
                                   guint property_id,
                                   GValue * value,
                                   GParamSpec * pspec)
{
	UnityPlaylist * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_PLAYLIST, UnityPlaylist);
	switch (property_id) {
		case UNITY_PLAYLIST_ID_PROPERTY:
		g_value_set_string (value, unity_playlist_get_id (self));
		break;
		case UNITY_PLAYLIST_NAME_PROPERTY:
		g_value_set_string (value, unity_playlist_get_name (self));
		break;
		case UNITY_PLAYLIST_ICON_PROPERTY:
		g_value_set_object (value, unity_playlist_get_icon (self));
		break;
		case UNITY_PLAYLIST_CREATION_DATE_PROPERTY:
		g_value_set_boxed (value, unity_playlist_get_creation_date (self));
		break;
		case UNITY_PLAYLIST_MODIFICATION_DATE_PROPERTY:
		g_value_set_boxed (value, unity_playlist_get_modification_date (self));
		break;
		case UNITY_PLAYLIST_LAST_PLAY_DATE_PROPERTY:
		g_value_set_boxed (value, unity_playlist_get_last_play_date (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_playlist_set_property (GObject * object,
                                   guint property_id,
                                   const GValue * value,
                                   GParamSpec * pspec)
{
	UnityPlaylist * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_PLAYLIST, UnityPlaylist);
	switch (property_id) {
		case UNITY_PLAYLIST_ID_PROPERTY:
		unity_playlist_set_id (self, g_value_get_string (value));
		break;
		case UNITY_PLAYLIST_NAME_PROPERTY:
		unity_playlist_set_name (self, g_value_get_string (value));
		break;
		case UNITY_PLAYLIST_ICON_PROPERTY:
		unity_playlist_set_icon (self, g_value_get_object (value));
		break;
		case UNITY_PLAYLIST_CREATION_DATE_PROPERTY:
		unity_playlist_set_creation_date (self, g_value_get_boxed (value));
		break;
		case UNITY_PLAYLIST_MODIFICATION_DATE_PROPERTY:
		unity_playlist_set_modification_date (self, g_value_get_boxed (value));
		break;
		case UNITY_PLAYLIST_LAST_PLAY_DATE_PROPERTY:
		unity_playlist_set_last_play_date (self, g_value_get_boxed (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


GType
unity_playback_state_get_type (void)
{
	static volatile gsize unity_playback_state_type_id__volatile = 0;
	if (g_once_init_enter (&unity_playback_state_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_PLAYBACK_STATE_PLAYING, "UNITY_PLAYBACK_STATE_PLAYING", "playing"}, {UNITY_PLAYBACK_STATE_PAUSED, "UNITY_PLAYBACK_STATE_PAUSED", "paused"}, {0, NULL, NULL}};
		GType unity_playback_state_type_id;
		unity_playback_state_type_id = g_enum_register_static ("UnityPlaybackState", values);
		g_once_init_leave (&unity_playback_state_type_id__volatile, unity_playback_state_type_id);
	}
	return unity_playback_state_type_id__volatile;
}


static void
_g_object_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_object_unref (var), NULL));
}


UnityMusicPlayer*
unity_music_player_construct (GType object_type,
                              const gchar* desktop)
{
	UnityMusicPlayer * self = NULL;
	GPtrArray* _tmp0_;
	g_return_val_if_fail (desktop != NULL, NULL);
	self = (UnityMusicPlayer*) g_object_new (object_type, "desktop-file-name", desktop, NULL);
	_tmp0_ = g_ptr_array_new_full ((guint) 0, _g_object_unref0_);
	_g_ptr_array_unref0 (self->priv->internal_playlists);
	self->priv->internal_playlists = _tmp0_;
	return self;
}


UnityMusicPlayer*
unity_music_player_new (const gchar* desktop)
{
	return unity_music_player_construct (UNITY_TYPE_MUSIC_PLAYER, desktop);
}


void
unity_music_player_export (UnityMusicPlayer* self)
{
	UnityMPRISGateway* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->mpris_gateway;
	unity_mpris_gateway_export (_tmp0_);
}


void
unity_music_player_unexport (UnityMusicPlayer* self)
{
	UnityMPRISGateway* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->mpris_gateway;
	unity_mpris_gateway_unexport (_tmp0_);
}


static GAppInfo*
unity_music_player_create_app_info (const gchar* desktop)
{
	GAppInfo* result = NULL;
	GDesktopAppInfo* info = NULL;
	GDesktopAppInfo* _tmp0_;
	gboolean _tmp1_ = FALSE;
	GAppInfo* app_info = NULL;
	GDesktopAppInfo* _tmp3_;
	GAppInfo* _tmp4_;
	g_return_val_if_fail (desktop != NULL, NULL);
	_tmp0_ = g_desktop_app_info_new (desktop);
	info = _tmp0_;
	if (desktop == NULL) {
		_tmp1_ = TRUE;
	} else {
		GDesktopAppInfo* _tmp2_;
		_tmp2_ = info;
		_tmp1_ = _tmp2_ == NULL;
	}
	if (_tmp1_) {
		g_warning ("unity-sound-menu.vala:147: Could not create a desktopappinfo instance " \
"from app: %s", desktop);
		result = NULL;
		_g_object_unref0 (info);
		return result;
	}
	_tmp3_ = info;
	_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, g_app_info_get_type ()) ? ((GAppInfo*) _tmp3_) : NULL);
	app_info = _tmp4_;
	result = app_info;
	_g_object_unref0 (info);
	return result;
}


static gint
g_ptr_array_get_length (GPtrArray* self)
{
	gint result;
	guint _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->len;
	result = (gint) _tmp0_;
	return result;
}


static void
g_ptr_array_set_length (GPtrArray* self,
                        gint value)
{
	g_return_if_fail (self != NULL);
	g_ptr_array_set_size (self, value);
}


gboolean
unity_music_player_add_playlist (UnityMusicPlayer* self,
                                 UnityPlaylist* p)
{
	gboolean result = FALSE;
	UnityMPRISGateway* _tmp0_;
	GPtrArray* _tmp1_;
	UnityPlaylist* _tmp2_;
	UnityMPRISGateway* _tmp3_;
	GPtrArray* _tmp4_;
	gint _tmp5_;
	gint _tmp6_;
	g_return_val_if_fail (self != NULL, FALSE);
	g_return_val_if_fail (p != NULL, FALSE);
	_tmp0_ = self->priv->mpris_gateway;
	unity_mpris_gateway_ensure_playlist_interface_is_raised (_tmp0_);
	_tmp1_ = self->priv->internal_playlists;
	_tmp2_ = _g_object_ref0 (p);
	g_ptr_array_add (_tmp1_, _tmp2_);
	_tmp3_ = self->priv->mpris_gateway;
	_tmp4_ = self->priv->internal_playlists;
	_tmp5_ = g_ptr_array_get_length (_tmp4_);
	_tmp6_ = _tmp5_;
	unity_mpris_gateway_set_playlist_count (_tmp3_, _tmp6_);
	result = TRUE;
	return result;
}


gboolean
unity_music_player_remove_playlist (UnityMusicPlayer* self,
                                    UnityPlaylist* p)
{
	gboolean result = FALSE;
	gboolean _result_ = FALSE;
	GPtrArray* _tmp0_;
	UnityMPRISGateway* _tmp1_;
	GPtrArray* _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
	g_return_val_if_fail (self != NULL, FALSE);
	g_return_val_if_fail (p != NULL, FALSE);
	_tmp0_ = self->priv->internal_playlists;
	_result_ = g_ptr_array_remove (_tmp0_, p);
	_tmp1_ = self->priv->mpris_gateway;
	_tmp2_ = self->priv->internal_playlists;
	_tmp3_ = g_ptr_array_get_length (_tmp2_);
	_tmp4_ = _tmp3_;
	unity_mpris_gateway_set_playlist_count (_tmp1_, _tmp4_);
	result = _result_;
	return result;
}


static UnityPlaylist**
_vala_array_dup10 (UnityPlaylist** self,
                   int length)
{
	UnityPlaylist** result;
	int i;
	result = g_new0 (UnityPlaylist*, length + 1);
	for (i = 0; i < length; i++) {
		UnityPlaylist* _tmp0_;
		_tmp0_ = _g_object_ref0 (self[i]);
		result[i] = _tmp0_;
	}
	return result;
}


UnityPlaylist**
unity_music_player_get_playlists (UnityMusicPlayer* self,
                                  int* result_length1)
{
	UnityPlaylist** result = NULL;
	GPtrArray* _tmp0_;
	gpointer* _tmp1_;
	gint _tmp1__length1;
	UnityPlaylist** _tmp2_;
	gint _tmp2__length1;
	UnityPlaylist** _tmp3_;
	gint _tmp3__length1;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->internal_playlists;
	_tmp1_ = _tmp0_->pdata;
	_tmp1__length1 = (gint) _tmp0_->len;
	_tmp2_ = (_tmp1_ != NULL) ? _vala_array_dup10 (_tmp1_, _tmp1__length1) : ((gpointer) _tmp1_);
	_tmp2__length1 = _tmp1__length1;
	_tmp3_ = _tmp2_;
	_tmp3__length1 = _tmp2__length1;
	if (result_length1) {
		*result_length1 = _tmp3__length1;
	}
	result = _tmp3_;
	return result;
}


static Block26Data*
block26_data_ref (Block26Data* _data26_)
{
	g_atomic_int_inc (&_data26_->_ref_count_);
	return _data26_;
}


static void
block26_data_unref (void * _userdata_)
{
	Block26Data* _data26_;
	_data26_ = (Block26Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data26_->_ref_count_)) {
		UnityMusicPlayer* self;
		self = _data26_->self;
		_g_free0 (_data26_->id);
		_g_free0 (_data26_->name);
		_g_object_unref0 (self);
		g_slice_free (Block26Data, _data26_);
	}
}


static void
__lambda60_ (Block26Data* _data26_,
             UnityPlaylist* pl)
{
	UnityMusicPlayer* self;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	self = _data26_->self;
	g_return_if_fail (pl != NULL);
	_tmp0_ = unity_playlist_get_id (pl);
	_tmp1_ = _tmp0_;
	if (g_strcmp0 (_tmp1_, _data26_->id) == 0) {
		UnityMPRISGateway* _tmp2_;
		unity_playlist_set_name (pl, _data26_->name);
		_tmp2_ = self->priv->mpris_gateway;
		unity_mpris_gateway_set_edited_playlist (_tmp2_, pl);
		return;
	}
}


static void
___lambda60__gfunc (gconstpointer data,
                    gpointer self)
{
	__lambda60_ (self, (UnityPlaylist*) data);
}


void
unity_music_player_edit_playlist_name (UnityMusicPlayer* self,
                                       const gchar* id,
                                       const gchar* name)
{
	Block26Data* _data26_;
	gchar* _tmp0_;
	gchar* _tmp1_;
	GPtrArray* _tmp2_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (id != NULL);
	g_return_if_fail (name != NULL);
	_data26_ = g_slice_new0 (Block26Data);
	_data26_->_ref_count_ = 1;
	_data26_->self = g_object_ref (self);
	_tmp0_ = g_strdup (id);
	_g_free0 (_data26_->id);
	_data26_->id = _tmp0_;
	_tmp1_ = g_strdup (name);
	_g_free0 (_data26_->name);
	_data26_->name = _tmp1_;
	_tmp2_ = self->priv->internal_playlists;
	g_ptr_array_foreach (_tmp2_, ___lambda60__gfunc, _data26_);
	block26_data_unref (_data26_);
	_data26_ = NULL;
}


GAppInfo*
unity_music_player_get_app_info (UnityMusicPlayer* self)
{
	GAppInfo* result;
	GAppInfo* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_app_info;
	result = _tmp0_;
	return result;
}


static void
unity_music_player_set_app_info (UnityMusicPlayer* self,
                                 GAppInfo* value)
{
	g_return_if_fail (self != NULL);
	if (unity_music_player_get_app_info (self) != value) {
		GAppInfo* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_app_info);
		self->priv->_app_info = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_music_player_properties[UNITY_MUSIC_PLAYER_APP_INFO_PROPERTY]);
	}
}


const gchar*
unity_music_player_get_desktop_file_name (UnityMusicPlayer* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_desktop_file_name;
	result = _tmp0_;
	return result;
}


static void
unity_music_player_set_desktop_file_name (UnityMusicPlayer* self,
                                          const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_music_player_get_desktop_file_name (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_desktop_file_name);
		self->priv->_desktop_file_name = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_music_player_properties[UNITY_MUSIC_PLAYER_DESKTOP_FILE_NAME_PROPERTY]);
	}
}


gboolean
unity_music_player_get_is_blacklisted (UnityMusicPlayer* self)
{
	gboolean result;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_is_blacklisted;
	result = _tmp0_;
	return result;
}


void
unity_music_player_set_is_blacklisted (UnityMusicPlayer* self,
                                       gboolean value)
{
	g_return_if_fail (self != NULL);
	if (unity_music_player_get_is_blacklisted (self) != value) {
		self->priv->_is_blacklisted = value;
		g_object_notify_by_pspec ((GObject *) self, unity_music_player_properties[UNITY_MUSIC_PLAYER_IS_BLACKLISTED_PROPERTY]);
	}
}


const gchar*
unity_music_player_get_title (UnityMusicPlayer* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_title;
	result = _tmp0_;
	return result;
}


void
unity_music_player_set_title (UnityMusicPlayer* self,
                              const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_music_player_get_title (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_title);
		self->priv->_title = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_music_player_properties[UNITY_MUSIC_PLAYER_TITLE_PROPERTY]);
	}
}


gboolean
unity_music_player_get_can_go_next (UnityMusicPlayer* self)
{
	gboolean result;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_can_go_next;
	result = _tmp0_;
	return result;
}


void
unity_music_player_set_can_go_next (UnityMusicPlayer* self,
                                    gboolean value)
{
	g_return_if_fail (self != NULL);
	if (unity_music_player_get_can_go_next (self) != value) {
		self->priv->_can_go_next = value;
		g_object_notify_by_pspec ((GObject *) self, unity_music_player_properties[UNITY_MUSIC_PLAYER_CAN_GO_NEXT_PROPERTY]);
	}
}


gboolean
unity_music_player_get_can_go_previous (UnityMusicPlayer* self)
{
	gboolean result;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_can_go_previous;
	result = _tmp0_;
	return result;
}


void
unity_music_player_set_can_go_previous (UnityMusicPlayer* self,
                                        gboolean value)
{
	g_return_if_fail (self != NULL);
	if (unity_music_player_get_can_go_previous (self) != value) {
		self->priv->_can_go_previous = value;
		g_object_notify_by_pspec ((GObject *) self, unity_music_player_properties[UNITY_MUSIC_PLAYER_CAN_GO_PREVIOUS_PROPERTY]);
	}
}


gboolean
unity_music_player_get_can_play (UnityMusicPlayer* self)
{
	gboolean result;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_can_play;
	result = _tmp0_;
	return result;
}


void
unity_music_player_set_can_play (UnityMusicPlayer* self,
                                 gboolean value)
{
	g_return_if_fail (self != NULL);
	if (unity_music_player_get_can_play (self) != value) {
		self->priv->_can_play = value;
		g_object_notify_by_pspec ((GObject *) self, unity_music_player_properties[UNITY_MUSIC_PLAYER_CAN_PLAY_PROPERTY]);
	}
}


gboolean
unity_music_player_get_can_pause (UnityMusicPlayer* self)
{
	gboolean result;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_can_pause;
	result = _tmp0_;
	return result;
}


void
unity_music_player_set_can_pause (UnityMusicPlayer* self,
                                  gboolean value)
{
	g_return_if_fail (self != NULL);
	if (unity_music_player_get_can_pause (self) != value) {
		self->priv->_can_pause = value;
		g_object_notify_by_pspec ((GObject *) self, unity_music_player_properties[UNITY_MUSIC_PLAYER_CAN_PAUSE_PROPERTY]);
	}
}


UnityTrackMetadata*
unity_music_player_get_current_track (UnityMusicPlayer* self)
{
	UnityTrackMetadata* result;
	UnityTrackMetadata* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_current_track;
	result = _tmp0_;
	return result;
}


void
unity_music_player_set_current_track (UnityMusicPlayer* self,
                                      UnityTrackMetadata* value)
{
	g_return_if_fail (self != NULL);
	if (unity_music_player_get_current_track (self) != value) {
		UnityTrackMetadata* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_current_track);
		self->priv->_current_track = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_music_player_properties[UNITY_MUSIC_PLAYER_CURRENT_TRACK_PROPERTY]);
	}
}


UnityPlaybackState
unity_music_player_get_playback_state (UnityMusicPlayer* self)
{
	UnityPlaybackState result;
	UnityPlaybackState _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->priv->_playback_state;
	result = _tmp0_;
	return result;
}


void
unity_music_player_set_playback_state (UnityMusicPlayer* self,
                                       UnityPlaybackState value)
{
	g_return_if_fail (self != NULL);
	if (unity_music_player_get_playback_state (self) != value) {
		self->priv->_playback_state = value;
		g_object_notify_by_pspec ((GObject *) self, unity_music_player_properties[UNITY_MUSIC_PLAYER_PLAYBACK_STATE_PROPERTY]);
	}
}


UnityPlaylist*
unity_music_player_get_current_playlist (UnityMusicPlayer* self)
{
	UnityPlaylist* result;
	UnityPlaylist* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_current_playlist;
	result = _tmp0_;
	return result;
}


void
unity_music_player_set_current_playlist (UnityMusicPlayer* self,
                                         UnityPlaylist* value)
{
	g_return_if_fail (self != NULL);
	if (unity_music_player_get_current_playlist (self) != value) {
		UnityPlaylist* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_current_playlist);
		self->priv->_current_playlist = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_music_player_properties[UNITY_MUSIC_PLAYER_CURRENT_PLAYLIST_PROPERTY]);
	}
}


DbusmenuMenuitem*
unity_music_player_get_track_menu (UnityMusicPlayer* self)
{
	DbusmenuMenuitem* result;
	DbusmenuMenuitem* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_track_menu;
	result = _tmp0_;
	return result;
}


void
unity_music_player_set_track_menu (UnityMusicPlayer* self,
                                   DbusmenuMenuitem* value)
{
	g_return_if_fail (self != NULL);
	if (unity_music_player_get_track_menu (self) != value) {
		DbusmenuMenuitem* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_track_menu);
		self->priv->_track_menu = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_music_player_properties[UNITY_MUSIC_PLAYER_TRACK_MENU_PROPERTY]);
	}
}


DbusmenuMenuitem*
unity_music_player_get_player_menu (UnityMusicPlayer* self)
{
	DbusmenuMenuitem* result;
	DbusmenuMenuitem* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_player_menu;
	result = _tmp0_;
	return result;
}


void
unity_music_player_set_player_menu (UnityMusicPlayer* self,
                                    DbusmenuMenuitem* value)
{
	g_return_if_fail (self != NULL);
	if (unity_music_player_get_player_menu (self) != value) {
		DbusmenuMenuitem* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_player_menu);
		self->priv->_player_menu = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_music_player_properties[UNITY_MUSIC_PLAYER_PLAYER_MENU_PROPERTY]);
	}
}


static GObject *
unity_music_player_constructor (GType type,
                                guint n_construct_properties,
                                GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	UnityMusicPlayer * self;
	GAppInfo* a_info = NULL;
	const gchar* _tmp0_;
	GAppInfo* _tmp1_;
	GAppInfo* _tmp2_;
	GAppInfo* _tmp3_;
	GAppInfo* _tmp4_;
	const gchar* _tmp5_;
	GAppInfo* _tmp11_;
	const gchar* _tmp12_;
	GError * _inner_error_ = NULL;
	parent_class = G_OBJECT_CLASS (unity_music_player_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_MUSIC_PLAYER, UnityMusicPlayer);
	_tmp0_ = self->priv->_desktop_file_name;
	_tmp1_ = unity_music_player_create_app_info (_tmp0_);
	a_info = _tmp1_;
	_tmp2_ = a_info;
	if (_tmp2_ == NULL) {
		g_critical ("unity-sound-menu.vala:118: Cannot locate the Desktop file ");
		_g_object_unref0 (a_info);
		return obj;
	}
	_tmp3_ = a_info;
	unity_music_player_set_app_info (self, _tmp3_);
	_tmp4_ = self->priv->_app_info;
	_tmp5_ = g_app_info_get_name (_tmp4_);
	unity_music_player_set_title (self, _tmp5_);
	{
		UnityMPRISGateway* _tmp6_;
		_tmp6_ = unity_mpris_gateway_new (self);
		_g_object_unref0 (self->priv->mpris_gateway);
		self->priv->mpris_gateway = _tmp6_;
	}
	goto __finally34;
	__catch34_g_io_error:
	{
		GError* e = NULL;
		GAppInfo* _tmp7_;
		const gchar* _tmp8_;
		GError* _tmp9_;
		const gchar* _tmp10_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp7_ = self->priv->_app_info;
		_tmp8_ = g_app_info_get_name (_tmp7_);
		_tmp9_ = e;
		_tmp10_ = _tmp9_->message;
		g_critical ("unity-sound-menu.vala:127: Could not create the MPRISGateway for '%s':" \
" %s", _tmp8_, _tmp10_);
		_g_error_free0 (e);
		_g_object_unref0 (a_info);
		return obj;
	}
	__finally34:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		_g_object_unref0 (a_info);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
	}
	_tmp11_ = self->priv->_app_info;
	_tmp12_ = g_app_info_get_name (_tmp11_);
	unity_music_player_set_title (self, _tmp12_);
	unity_music_player_set_playback_state (self, UNITY_PLAYBACK_STATE_PAUSED);
	_g_object_unref0 (a_info);
	return obj;
}


static void
unity_music_player_class_init (UnityMusicPlayerClass * klass)
{
	unity_music_player_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityMusicPlayerPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_music_player_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_music_player_set_property;
	G_OBJECT_CLASS (klass)->constructor = unity_music_player_constructor;
	G_OBJECT_CLASS (klass)->finalize = unity_music_player_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_MUSIC_PLAYER_APP_INFO_PROPERTY, unity_music_player_properties[UNITY_MUSIC_PLAYER_APP_INFO_PROPERTY] = g_param_spec_object ("app-info", "app-info", "app-info", g_app_info_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_MUSIC_PLAYER_DESKTOP_FILE_NAME_PROPERTY, unity_music_player_properties[UNITY_MUSIC_PLAYER_DESKTOP_FILE_NAME_PROPERTY] = g_param_spec_string ("desktop-file-name", "desktop-file-name", "desktop-file-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_MUSIC_PLAYER_IS_BLACKLISTED_PROPERTY, unity_music_player_properties[UNITY_MUSIC_PLAYER_IS_BLACKLISTED_PROPERTY] = g_param_spec_boolean ("is-blacklisted", "is-blacklisted", "is-blacklisted", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_MUSIC_PLAYER_TITLE_PROPERTY, unity_music_player_properties[UNITY_MUSIC_PLAYER_TITLE_PROPERTY] = g_param_spec_string ("title", "title", "title", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_MUSIC_PLAYER_CAN_GO_NEXT_PROPERTY, unity_music_player_properties[UNITY_MUSIC_PLAYER_CAN_GO_NEXT_PROPERTY] = g_param_spec_boolean ("can-go-next", "can-go-next", "can-go-next", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_MUSIC_PLAYER_CAN_GO_PREVIOUS_PROPERTY, unity_music_player_properties[UNITY_MUSIC_PLAYER_CAN_GO_PREVIOUS_PROPERTY] = g_param_spec_boolean ("can-go-previous", "can-go-previous", "can-go-previous", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_MUSIC_PLAYER_CAN_PLAY_PROPERTY, unity_music_player_properties[UNITY_MUSIC_PLAYER_CAN_PLAY_PROPERTY] = g_param_spec_boolean ("can-play", "can-play", "can-play", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_MUSIC_PLAYER_CAN_PAUSE_PROPERTY, unity_music_player_properties[UNITY_MUSIC_PLAYER_CAN_PAUSE_PROPERTY] = g_param_spec_boolean ("can-pause", "can-pause", "can-pause", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_MUSIC_PLAYER_CURRENT_TRACK_PROPERTY, unity_music_player_properties[UNITY_MUSIC_PLAYER_CURRENT_TRACK_PROPERTY] = g_param_spec_object ("current-track", "current-track", "current-track", UNITY_TYPE_TRACK_METADATA, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_MUSIC_PLAYER_PLAYBACK_STATE_PROPERTY, unity_music_player_properties[UNITY_MUSIC_PLAYER_PLAYBACK_STATE_PROPERTY] = g_param_spec_enum ("playback-state", "playback-state", "playback-state", UNITY_TYPE_PLAYBACK_STATE, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_MUSIC_PLAYER_CURRENT_PLAYLIST_PROPERTY, unity_music_player_properties[UNITY_MUSIC_PLAYER_CURRENT_PLAYLIST_PROPERTY] = g_param_spec_object ("current-playlist", "current-playlist", "current-playlist", UNITY_TYPE_PLAYLIST, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_MUSIC_PLAYER_TRACK_MENU_PROPERTY, unity_music_player_properties[UNITY_MUSIC_PLAYER_TRACK_MENU_PROPERTY] = g_param_spec_object ("track-menu", "track-menu", "track-menu", dbusmenu_menuitem_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_MUSIC_PLAYER_PLAYER_MENU_PROPERTY, unity_music_player_properties[UNITY_MUSIC_PLAYER_PLAYER_MENU_PROPERTY] = g_param_spec_object ("player-menu", "player-menu", "player-menu", dbusmenu_menuitem_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	unity_music_player_signals[UNITY_MUSIC_PLAYER_RAISE_SIGNAL] = g_signal_new ("raise", UNITY_TYPE_MUSIC_PLAYER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
	unity_music_player_signals[UNITY_MUSIC_PLAYER_PLAY_PAUSE_SIGNAL] = g_signal_new ("play-pause", UNITY_TYPE_MUSIC_PLAYER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
	unity_music_player_signals[UNITY_MUSIC_PLAYER_PREVIOUS_SIGNAL] = g_signal_new ("previous", UNITY_TYPE_MUSIC_PLAYER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
	unity_music_player_signals[UNITY_MUSIC_PLAYER_NEXT_SIGNAL] = g_signal_new ("next", UNITY_TYPE_MUSIC_PLAYER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
	unity_music_player_signals[UNITY_MUSIC_PLAYER_ACTIVATE_PLAYLIST_SIGNAL] = g_signal_new ("activate-playlist", UNITY_TYPE_MUSIC_PLAYER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__STRING, G_TYPE_NONE, 1, G_TYPE_STRING);
}


static void
unity_music_player_instance_init (UnityMusicPlayer * self)
{
	self->priv = UNITY_MUSIC_PLAYER_GET_PRIVATE (self);
}


static void
unity_music_player_finalize (GObject * obj)
{
	UnityMusicPlayer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_MUSIC_PLAYER, UnityMusicPlayer);
	_g_object_unref0 (self->priv->mpris_gateway);
	_g_ptr_array_unref0 (self->priv->internal_playlists);
	_g_object_unref0 (self->priv->_app_info);
	_g_free0 (self->priv->_desktop_file_name);
	_g_free0 (self->priv->_title);
	_g_object_unref0 (self->priv->_current_track);
	_g_object_unref0 (self->priv->_current_playlist);
	_g_object_unref0 (self->priv->_track_menu);
	_g_object_unref0 (self->priv->_player_menu);
	G_OBJECT_CLASS (unity_music_player_parent_class)->finalize (obj);
}


GType
unity_music_player_get_type (void)
{
	static volatile gsize unity_music_player_type_id__volatile = 0;
	if (g_once_init_enter (&unity_music_player_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityMusicPlayerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_music_player_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityMusicPlayer), 0, (GInstanceInitFunc) unity_music_player_instance_init, NULL };
		GType unity_music_player_type_id;
		unity_music_player_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityMusicPlayer", &g_define_type_info, 0);
		g_once_init_leave (&unity_music_player_type_id__volatile, unity_music_player_type_id);
	}
	return unity_music_player_type_id__volatile;
}


static void
_vala_unity_music_player_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec)
{
	UnityMusicPlayer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_MUSIC_PLAYER, UnityMusicPlayer);
	switch (property_id) {
		case UNITY_MUSIC_PLAYER_APP_INFO_PROPERTY:
		g_value_set_object (value, unity_music_player_get_app_info (self));
		break;
		case UNITY_MUSIC_PLAYER_DESKTOP_FILE_NAME_PROPERTY:
		g_value_set_string (value, unity_music_player_get_desktop_file_name (self));
		break;
		case UNITY_MUSIC_PLAYER_IS_BLACKLISTED_PROPERTY:
		g_value_set_boolean (value, unity_music_player_get_is_blacklisted (self));
		break;
		case UNITY_MUSIC_PLAYER_TITLE_PROPERTY:
		g_value_set_string (value, unity_music_player_get_title (self));
		break;
		case UNITY_MUSIC_PLAYER_CAN_GO_NEXT_PROPERTY:
		g_value_set_boolean (value, unity_music_player_get_can_go_next (self));
		break;
		case UNITY_MUSIC_PLAYER_CAN_GO_PREVIOUS_PROPERTY:
		g_value_set_boolean (value, unity_music_player_get_can_go_previous (self));
		break;
		case UNITY_MUSIC_PLAYER_CAN_PLAY_PROPERTY:
		g_value_set_boolean (value, unity_music_player_get_can_play (self));
		break;
		case UNITY_MUSIC_PLAYER_CAN_PAUSE_PROPERTY:
		g_value_set_boolean (value, unity_music_player_get_can_pause (self));
		break;
		case UNITY_MUSIC_PLAYER_CURRENT_TRACK_PROPERTY:
		g_value_set_object (value, unity_music_player_get_current_track (self));
		break;
		case UNITY_MUSIC_PLAYER_PLAYBACK_STATE_PROPERTY:
		g_value_set_enum (value, unity_music_player_get_playback_state (self));
		break;
		case UNITY_MUSIC_PLAYER_CURRENT_PLAYLIST_PROPERTY:
		g_value_set_object (value, unity_music_player_get_current_playlist (self));
		break;
		case UNITY_MUSIC_PLAYER_TRACK_MENU_PROPERTY:
		g_value_set_object (value, unity_music_player_get_track_menu (self));
		break;
		case UNITY_MUSIC_PLAYER_PLAYER_MENU_PROPERTY:
		g_value_set_object (value, unity_music_player_get_player_menu (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_music_player_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec)
{
	UnityMusicPlayer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_MUSIC_PLAYER, UnityMusicPlayer);
	switch (property_id) {
		case UNITY_MUSIC_PLAYER_APP_INFO_PROPERTY:
		unity_music_player_set_app_info (self, g_value_get_object (value));
		break;
		case UNITY_MUSIC_PLAYER_DESKTOP_FILE_NAME_PROPERTY:
		unity_music_player_set_desktop_file_name (self, g_value_get_string (value));
		break;
		case UNITY_MUSIC_PLAYER_IS_BLACKLISTED_PROPERTY:
		unity_music_player_set_is_blacklisted (self, g_value_get_boolean (value));
		break;
		case UNITY_MUSIC_PLAYER_TITLE_PROPERTY:
		unity_music_player_set_title (self, g_value_get_string (value));
		break;
		case UNITY_MUSIC_PLAYER_CAN_GO_NEXT_PROPERTY:
		unity_music_player_set_can_go_next (self, g_value_get_boolean (value));
		break;
		case UNITY_MUSIC_PLAYER_CAN_GO_PREVIOUS_PROPERTY:
		unity_music_player_set_can_go_previous (self, g_value_get_boolean (value));
		break;
		case UNITY_MUSIC_PLAYER_CAN_PLAY_PROPERTY:
		unity_music_player_set_can_play (self, g_value_get_boolean (value));
		break;
		case UNITY_MUSIC_PLAYER_CAN_PAUSE_PROPERTY:
		unity_music_player_set_can_pause (self, g_value_get_boolean (value));
		break;
		case UNITY_MUSIC_PLAYER_CURRENT_TRACK_PROPERTY:
		unity_music_player_set_current_track (self, g_value_get_object (value));
		break;
		case UNITY_MUSIC_PLAYER_PLAYBACK_STATE_PROPERTY:
		unity_music_player_set_playback_state (self, g_value_get_enum (value));
		break;
		case UNITY_MUSIC_PLAYER_CURRENT_PLAYLIST_PROPERTY:
		unity_music_player_set_current_playlist (self, g_value_get_object (value));
		break;
		case UNITY_MUSIC_PLAYER_TRACK_MENU_PROPERTY:
		unity_music_player_set_track_menu (self, g_value_get_object (value));
		break;
		case UNITY_MUSIC_PLAYER_PLAYER_MENU_PROPERTY:
		unity_music_player_set_player_menu (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



