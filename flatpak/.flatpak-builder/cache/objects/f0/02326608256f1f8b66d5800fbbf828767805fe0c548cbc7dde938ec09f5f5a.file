/* Main.c generated by valac 0.40.11, the Vala compiler
 * generated from Main.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <gio/gio.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>


#define VIEWS_TYPE_MAIN (views_main_get_type ())
#define VIEWS_MAIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_MAIN, ViewsMain))
#define VIEWS_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_MAIN, ViewsMainClass))
#define VIEWS_IS_MAIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_MAIN))
#define VIEWS_IS_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_MAIN))
#define VIEWS_MAIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_MAIN, ViewsMainClass))

typedef struct _ViewsMain ViewsMain;
typedef struct _ViewsMainClass ViewsMainClass;
typedef struct _ViewsMainPrivate ViewsMainPrivate;

#define WIDGETS_TYPE_PROJECTS_LIST (widgets_projects_list_get_type ())
#define WIDGETS_PROJECTS_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_PROJECTS_LIST, WidgetsProjectsList))
#define WIDGETS_PROJECTS_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_PROJECTS_LIST, WidgetsProjectsListClass))
#define WIDGETS_IS_PROJECTS_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_PROJECTS_LIST))
#define WIDGETS_IS_PROJECTS_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_PROJECTS_LIST))
#define WIDGETS_PROJECTS_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_PROJECTS_LIST, WidgetsProjectsListClass))

typedef struct _WidgetsProjectsList WidgetsProjectsList;
typedef struct _WidgetsProjectsListClass WidgetsProjectsListClass;

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;

#define VIEWS_TYPE_INBOX (views_inbox_get_type ())
#define VIEWS_INBOX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_INBOX, ViewsInbox))
#define VIEWS_INBOX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_INBOX, ViewsInboxClass))
#define VIEWS_IS_INBOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_INBOX))
#define VIEWS_IS_INBOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_INBOX))
#define VIEWS_INBOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_INBOX, ViewsInboxClass))

typedef struct _ViewsInbox ViewsInbox;
typedef struct _ViewsInboxClass ViewsInboxClass;

#define VIEWS_TYPE_TODAY (views_today_get_type ())
#define VIEWS_TODAY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_TODAY, ViewsToday))
#define VIEWS_TODAY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_TODAY, ViewsTodayClass))
#define VIEWS_IS_TODAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_TODAY))
#define VIEWS_IS_TODAY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_TODAY))
#define VIEWS_TODAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_TODAY, ViewsTodayClass))

typedef struct _ViewsToday ViewsToday;
typedef struct _ViewsTodayClass ViewsTodayClass;

#define VIEWS_TYPE_UPCOMING (views_upcoming_get_type ())
#define VIEWS_UPCOMING(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_UPCOMING, ViewsUpcoming))
#define VIEWS_UPCOMING_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_UPCOMING, ViewsUpcomingClass))
#define VIEWS_IS_UPCOMING(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_UPCOMING))
#define VIEWS_IS_UPCOMING_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_UPCOMING))
#define VIEWS_UPCOMING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_UPCOMING, ViewsUpcomingClass))

typedef struct _ViewsUpcoming ViewsUpcoming;
typedef struct _ViewsUpcomingClass ViewsUpcomingClass;

#define VIEWS_TYPE_ALL_TASKS (views_all_tasks_get_type ())
#define VIEWS_ALL_TASKS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_ALL_TASKS, ViewsAllTasks))
#define VIEWS_ALL_TASKS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_ALL_TASKS, ViewsAllTasksClass))
#define VIEWS_IS_ALL_TASKS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_ALL_TASKS))
#define VIEWS_IS_ALL_TASKS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_ALL_TASKS))
#define VIEWS_ALL_TASKS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_ALL_TASKS, ViewsAllTasksClass))

typedef struct _ViewsAllTasks ViewsAllTasks;
typedef struct _ViewsAllTasksClass ViewsAllTasksClass;

#define VIEWS_TYPE_COMPLETED_TASKS (views_completed_tasks_get_type ())
#define VIEWS_COMPLETED_TASKS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_COMPLETED_TASKS, ViewsCompletedTasks))
#define VIEWS_COMPLETED_TASKS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_COMPLETED_TASKS, ViewsCompletedTasksClass))
#define VIEWS_IS_COMPLETED_TASKS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_COMPLETED_TASKS))
#define VIEWS_IS_COMPLETED_TASKS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_COMPLETED_TASKS))
#define VIEWS_COMPLETED_TASKS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_COMPLETED_TASKS, ViewsCompletedTasksClass))

typedef struct _ViewsCompletedTasks ViewsCompletedTasks;
typedef struct _ViewsCompletedTasksClass ViewsCompletedTasksClass;
enum  {
	VIEWS_MAIN_0_PROPERTY,
	VIEWS_MAIN_PARENT_WINDOW_PROPERTY,
	VIEWS_MAIN_NUM_PROPERTIES
};
static GParamSpec* views_main_properties[VIEWS_MAIN_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define VIEWS_TYPE_PROJECT (views_project_get_type ())
#define VIEWS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_PROJECT, ViewsProject))
#define VIEWS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_PROJECT, ViewsProjectClass))
#define VIEWS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_PROJECT))
#define VIEWS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_PROJECT))
#define VIEWS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_PROJECT, ViewsProjectClass))

typedef struct _ViewsProject ViewsProject;
typedef struct _ViewsProjectClass ViewsProjectClass;
typedef struct _ObjectsProjectPrivate ObjectsProjectPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _objects_project_unref0(var) ((var == NULL) ? NULL : (var = (objects_project_unref (var), NULL)))
typedef struct _Block14Data Block14Data;

#define SERVICES_TYPE_NOTIFICATIONS (services_notifications_get_type ())
#define SERVICES_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotifications))
#define SERVICES_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))
#define SERVICES_IS_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_IS_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_NOTIFICATIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))

typedef struct _ServicesNotifications ServicesNotifications;
typedef struct _ServicesNotificationsClass ServicesNotificationsClass;

#define OBJECTS_TYPE_TASK (objects_task_get_type ())
#define OBJECTS_TASK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TASK, ObjectsTask))
#define OBJECTS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TASK, ObjectsTaskClass))
#define OBJECTS_IS_TASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TASK))
#define OBJECTS_IS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TASK))
#define OBJECTS_TASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TASK, ObjectsTaskClass))

typedef struct _ObjectsTask ObjectsTask;
typedef struct _ObjectsTaskClass ObjectsTaskClass;

#define SERVICES_TYPE_SIGNALS (services_signals_get_type ())
#define SERVICES_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_SIGNALS, ServicesSignals))
#define SERVICES_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_SIGNALS, ServicesSignalsClass))
#define SERVICES_IS_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_SIGNALS))
#define SERVICES_IS_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_SIGNALS))
#define SERVICES_SIGNALS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_SIGNALS, ServicesSignalsClass))

typedef struct _ServicesSignals ServicesSignals;
typedef struct _ServicesSignalsClass ServicesSignalsClass;

struct _ViewsMain {
	GtkPaned parent_instance;
	ViewsMainPrivate * priv;
	WidgetsProjectsList* projects_list;
	GtkStack* stack;
};

struct _ViewsMainClass {
	GtkPanedClass parent_class;
};

struct _ViewsMainPrivate {
	MainWindow* _parent_window;
	ViewsInbox* inbox_view;
	ViewsToday* today_view;
	ViewsUpcoming* upcoming_view;
	ViewsAllTasks* all_tasks_view;
	ViewsCompletedTasks* completed_tasks_view;
};

struct _ObjectsProject {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsProjectPrivate * priv;
	gint id;
	gchar* name;
	gchar* note;
	gchar* deadline;
	gint item_order;
	gint is_deleted;
	gchar* color;
};

struct _ObjectsProjectClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsProject *self);
};

struct _Block14Data {
	int _ref_count_;
	ViewsMain* self;
	gchar* start_page_name;
};


static gpointer views_main_parent_class = NULL;
extern GSettings* application_settings;
extern ServicesDatabase* application_database;
extern ServicesNotifications* application_notification;
extern ServicesSignals* application_signals;

GType views_main_get_type (void) G_GNUC_CONST;
GType widgets_projects_list_get_type (void) G_GNUC_CONST;
GType main_window_get_type (void) G_GNUC_CONST;
GType views_inbox_get_type (void) G_GNUC_CONST;
GType views_today_get_type (void) G_GNUC_CONST;
GType views_upcoming_get_type (void) G_GNUC_CONST;
GType views_all_tasks_get_type (void) G_GNUC_CONST;
GType views_completed_tasks_get_type (void) G_GNUC_CONST;
#define VIEWS_MAIN_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), VIEWS_TYPE_MAIN, ViewsMainPrivate))
ViewsMain* views_main_new (MainWindow* parent);
ViewsMain* views_main_construct (GType object_type,
                                 MainWindow* parent);
void views_main_update_views (ViewsMain* self);
gpointer objects_project_ref (gpointer instance);
void objects_project_unref (gpointer instance);
GParamSpec* objects_param_spec_project (const gchar* name,
                                        const gchar* nick,
                                        const gchar* blurb,
                                        GType object_type,
                                        GParamFlags flags);
void objects_value_set_project (GValue* value,
                                gpointer v_object);
void objects_value_take_project (GValue* value,
                                 gpointer v_object);
gpointer objects_value_get_project (const GValue* value);
GType objects_project_get_type (void) G_GNUC_CONST;
GType services_database_get_type (void) G_GNUC_CONST;
GeeArrayList* services_database_get_all_projects (ServicesDatabase* self);
GType views_project_get_type (void) G_GNUC_CONST;
MainWindow* views_main_get_parent_window (ViewsMain* self);
ViewsProject* views_project_new (ObjectsProject* _project,
                                 MainWindow* parent);
ViewsProject* views_project_construct (GType object_type,
                                       ObjectsProject* _project,
                                       MainWindow* parent);
static void views_main_set_parent_window (ViewsMain* self,
                                   MainWindow* value);
static GObject * views_main_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties);
static Block14Data* block14_data_ref (Block14Data* _data14_);
static void block14_data_unref (void * _userdata_);
WidgetsProjectsList* widgets_projects_list_new (void);
WidgetsProjectsList* widgets_projects_list_construct (GType object_type);
ViewsInbox* views_inbox_new (void);
ViewsInbox* views_inbox_construct (GType object_type);
ViewsToday* views_today_new (void);
ViewsToday* views_today_construct (GType object_type);
ViewsUpcoming* views_upcoming_new (void);
ViewsUpcoming* views_upcoming_construct (GType object_type);
ViewsAllTasks* views_all_tasks_new (void);
ViewsAllTasks* views_all_tasks_construct (GType object_type);
ViewsCompletedTasks* views_completed_tasks_new (void);
ViewsCompletedTasks* views_completed_tasks_construct (GType object_type);
static gboolean _views_main___lambda439_ (Block14Data* _data14_);
static gboolean __views_main___lambda439__gsource_func (gpointer self);
static void _views_main___lambda440_ (ViewsMain* self,
                               const gchar* type,
                               gint index);
static void __views_main___lambda440__widgets_projects_list_on_selected_item (WidgetsProjectsList* _sender,
                                                                       const gchar* type,
                                                                       gint index,
                                                                       gpointer self);
static void _views_main___lambda441_ (ViewsMain* self);
ObjectsProject* services_database_get_last_project (ServicesDatabase* self);
static void __views_main___lambda441__services_database_on_add_project_signal (ServicesDatabase* _sender,
                                                                        gpointer self);
GType services_notifications_get_type (void) G_GNUC_CONST;
gpointer objects_task_ref (gpointer instance);
void objects_task_unref (gpointer instance);
GParamSpec* objects_param_spec_task (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void objects_value_set_task (GValue* value,
                             gpointer v_object);
void objects_value_take_task (GValue* value,
                              gpointer v_object);
gpointer objects_value_get_task (const GValue* value);
GType objects_task_get_type (void) G_GNUC_CONST;
static void _views_main___lambda442_ (ViewsMain* self,
                               ObjectsTask* task);
static void __views_main___lambda442__services_notifications_on_signal_highlight_task (ServicesNotifications* _sender,
                                                                                ObjectsTask* task,
                                                                                gpointer self);
GType services_signals_get_type (void) G_GNUC_CONST;
static void _views_main___lambda443_ (ViewsMain* self,
                               gint index);
static void __views_main___lambda443__services_signals_go_action_page (ServicesSignals* _sender,
                                                                gint index,
                                                                gpointer self);
static void _views_main___lambda444_ (ViewsMain* self,
                               gint project_id);
static void __views_main___lambda444__services_signals_go_project_page (ServicesSignals* _sender,
                                                                 gint project_id,
                                                                 gpointer self);
static void _views_main___lambda445_ (ViewsMain* self,
                               gint task_id,
                               gint project_id);
static void __views_main___lambda445__services_signals_go_task_page (ServicesSignals* _sender,
                                                              gint task_id,
                                                              gint project_id,
                                                              gpointer self);
static void _views_main___lambda446_ (ViewsMain* self,
                               ObjectsProject* project);
static void __views_main___lambda446__services_database_on_signal_remove_project (ServicesDatabase* _sender,
                                                                           ObjectsProject* project,
                                                                           gpointer self);
static void views_main_finalize (GObject * obj);
static void _vala_views_main_get_property (GObject * object,
                                    guint property_id,
                                    GValue * value,
                                    GParamSpec * pspec);
static void _vala_views_main_set_property (GObject * object,
                                    guint property_id,
                                    const GValue * value,
                                    GParamSpec * pspec);


ViewsMain*
views_main_construct (GType object_type,
                      MainWindow* parent)
{
	ViewsMain * self = NULL;
	GSettings* _tmp0_;
#line 33 "/run/build/planner/src/Views/Main.vala"
	g_return_val_if_fail (parent != NULL, NULL);
#line 34 "/run/build/planner/src/Views/Main.vala"
	_tmp0_ = application_settings;
#line 34 "/run/build/planner/src/Views/Main.vala"
	self = (ViewsMain*) g_object_new (object_type, "parent-window", parent, "orientation", GTK_ORIENTATION_HORIZONTAL, "position", g_settings_get_int (_tmp0_, "project-sidebar-width"), NULL);
#line 33 "/run/build/planner/src/Views/Main.vala"
	return self;
#line 373 "Main.c"
}


ViewsMain*
views_main_new (MainWindow* parent)
{
#line 33 "/run/build/planner/src/Views/Main.vala"
	return views_main_construct (VIEWS_TYPE_MAIN, parent);
#line 382 "Main.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 155 "/run/build/planner/src/Views/Main.vala"
	return self ? g_object_ref (self) : NULL;
#line 391 "Main.c"
}


void
views_main_update_views (ViewsMain* self)
{
	GeeArrayList* all_projects = NULL;
	GeeArrayList* _tmp0_;
	ServicesDatabase* _tmp1_;
	GeeArrayList* _tmp2_;
#line 151 "/run/build/planner/src/Views/Main.vala"
	g_return_if_fail (self != NULL);
#line 152 "/run/build/planner/src/Views/Main.vala"
	_tmp0_ = gee_array_list_new (OBJECTS_TYPE_PROJECT, (GBoxedCopyFunc) objects_project_ref, (GDestroyNotify) objects_project_unref, NULL, NULL, NULL);
#line 152 "/run/build/planner/src/Views/Main.vala"
	all_projects = _tmp0_;
#line 153 "/run/build/planner/src/Views/Main.vala"
	_tmp1_ = application_database;
#line 153 "/run/build/planner/src/Views/Main.vala"
	_tmp2_ = services_database_get_all_projects (_tmp1_);
#line 153 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (all_projects);
#line 153 "/run/build/planner/src/Views/Main.vala"
	all_projects = _tmp2_;
#line 416 "Main.c"
	{
		GeeArrayList* _project_list = NULL;
		GeeArrayList* _tmp3_;
		GeeArrayList* _tmp4_;
		gint _project_size = 0;
		GeeArrayList* _tmp5_;
		gint _tmp6_;
		gint _tmp7_;
		gint _project_index = 0;
#line 155 "/run/build/planner/src/Views/Main.vala"
		_tmp3_ = all_projects;
#line 155 "/run/build/planner/src/Views/Main.vala"
		_tmp4_ = _g_object_ref0 (_tmp3_);
#line 155 "/run/build/planner/src/Views/Main.vala"
		_project_list = _tmp4_;
#line 155 "/run/build/planner/src/Views/Main.vala"
		_tmp5_ = _project_list;
#line 155 "/run/build/planner/src/Views/Main.vala"
		_tmp6_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp5_);
#line 155 "/run/build/planner/src/Views/Main.vala"
		_tmp7_ = _tmp6_;
#line 155 "/run/build/planner/src/Views/Main.vala"
		_project_size = _tmp7_;
#line 155 "/run/build/planner/src/Views/Main.vala"
		_project_index = -1;
#line 155 "/run/build/planner/src/Views/Main.vala"
		while (TRUE) {
#line 444 "Main.c"
			gint _tmp8_;
			gint _tmp9_;
			gint _tmp10_;
			ObjectsProject* project = NULL;
			GeeArrayList* _tmp11_;
			gint _tmp12_;
			gpointer _tmp13_;
			ViewsProject* project_view = NULL;
			ObjectsProject* _tmp14_;
			MainWindow* _tmp15_;
			ViewsProject* _tmp16_;
			GtkStack* _tmp17_;
			ViewsProject* _tmp18_;
			ObjectsProject* _tmp19_;
			gint _tmp20_;
			gchar* _tmp21_;
			gchar* _tmp22_;
#line 155 "/run/build/planner/src/Views/Main.vala"
			_tmp8_ = _project_index;
#line 155 "/run/build/planner/src/Views/Main.vala"
			_project_index = _tmp8_ + 1;
#line 155 "/run/build/planner/src/Views/Main.vala"
			_tmp9_ = _project_index;
#line 155 "/run/build/planner/src/Views/Main.vala"
			_tmp10_ = _project_size;
#line 155 "/run/build/planner/src/Views/Main.vala"
			if (!(_tmp9_ < _tmp10_)) {
#line 155 "/run/build/planner/src/Views/Main.vala"
				break;
#line 474 "Main.c"
			}
#line 155 "/run/build/planner/src/Views/Main.vala"
			_tmp11_ = _project_list;
#line 155 "/run/build/planner/src/Views/Main.vala"
			_tmp12_ = _project_index;
#line 155 "/run/build/planner/src/Views/Main.vala"
			_tmp13_ = gee_abstract_list_get ((GeeAbstractList*) _tmp11_, _tmp12_);
#line 155 "/run/build/planner/src/Views/Main.vala"
			project = (ObjectsProject*) _tmp13_;
#line 156 "/run/build/planner/src/Views/Main.vala"
			_tmp14_ = project;
#line 156 "/run/build/planner/src/Views/Main.vala"
			_tmp15_ = self->priv->_parent_window;
#line 156 "/run/build/planner/src/Views/Main.vala"
			_tmp16_ = views_project_new (_tmp14_, _tmp15_);
#line 156 "/run/build/planner/src/Views/Main.vala"
			g_object_ref_sink (_tmp16_);
#line 156 "/run/build/planner/src/Views/Main.vala"
			project_view = _tmp16_;
#line 157 "/run/build/planner/src/Views/Main.vala"
			_tmp17_ = self->stack;
#line 157 "/run/build/planner/src/Views/Main.vala"
			_tmp18_ = project_view;
#line 157 "/run/build/planner/src/Views/Main.vala"
			_tmp19_ = project;
#line 157 "/run/build/planner/src/Views/Main.vala"
			_tmp20_ = _tmp19_->id;
#line 157 "/run/build/planner/src/Views/Main.vala"
			_tmp21_ = g_strdup_printf ("project_view-%i", _tmp20_);
#line 157 "/run/build/planner/src/Views/Main.vala"
			_tmp22_ = _tmp21_;
#line 157 "/run/build/planner/src/Views/Main.vala"
			gtk_stack_add_named (_tmp17_, (GtkWidget*) _tmp18_, _tmp22_);
#line 157 "/run/build/planner/src/Views/Main.vala"
			_g_free0 (_tmp22_);
#line 155 "/run/build/planner/src/Views/Main.vala"
			_g_object_unref0 (project_view);
#line 155 "/run/build/planner/src/Views/Main.vala"
			_objects_project_unref0 (project);
#line 514 "Main.c"
		}
#line 155 "/run/build/planner/src/Views/Main.vala"
		_g_object_unref0 (_project_list);
#line 518 "Main.c"
	}
#line 151 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (all_projects);
#line 522 "Main.c"
}


MainWindow*
views_main_get_parent_window (ViewsMain* self)
{
	MainWindow* result;
	MainWindow* _tmp0_;
#line 23 "/run/build/planner/src/Views/Main.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "/run/build/planner/src/Views/Main.vala"
	_tmp0_ = self->priv->_parent_window;
#line 23 "/run/build/planner/src/Views/Main.vala"
	result = _tmp0_;
#line 23 "/run/build/planner/src/Views/Main.vala"
	return result;
#line 539 "Main.c"
}


static void
views_main_set_parent_window (ViewsMain* self,
                              MainWindow* value)
{
#line 23 "/run/build/planner/src/Views/Main.vala"
	g_return_if_fail (self != NULL);
#line 23 "/run/build/planner/src/Views/Main.vala"
	if (views_main_get_parent_window (self) != value) {
#line 23 "/run/build/planner/src/Views/Main.vala"
		self->priv->_parent_window = value;
#line 23 "/run/build/planner/src/Views/Main.vala"
		g_object_notify_by_pspec ((GObject *) self, views_main_properties[VIEWS_MAIN_PARENT_WINDOW_PROPERTY]);
#line 555 "Main.c"
	}
}


static Block14Data*
block14_data_ref (Block14Data* _data14_)
{
#line 41 "/run/build/planner/src/Views/Main.vala"
	g_atomic_int_inc (&_data14_->_ref_count_);
#line 41 "/run/build/planner/src/Views/Main.vala"
	return _data14_;
#line 567 "Main.c"
}


static void
block14_data_unref (void * _userdata_)
{
	Block14Data* _data14_;
	_data14_ = (Block14Data*) _userdata_;
#line 41 "/run/build/planner/src/Views/Main.vala"
	if (g_atomic_int_dec_and_test (&_data14_->_ref_count_)) {
#line 578 "Main.c"
		ViewsMain* self;
#line 41 "/run/build/planner/src/Views/Main.vala"
		self = _data14_->self;
#line 41 "/run/build/planner/src/Views/Main.vala"
		_g_free0 (_data14_->start_page_name);
#line 41 "/run/build/planner/src/Views/Main.vala"
		_g_object_unref0 (self);
#line 41 "/run/build/planner/src/Views/Main.vala"
		g_slice_free (Block14Data, _data14_);
#line 588 "Main.c"
	}
}


static gboolean
_views_main___lambda439_ (Block14Data* _data14_)
{
	ViewsMain* self;
	gboolean result = FALSE;
	GtkStack* _tmp0_;
	const gchar* _tmp1_;
#line 75 "/run/build/planner/src/Views/Main.vala"
	self = _data14_->self;
#line 76 "/run/build/planner/src/Views/Main.vala"
	_tmp0_ = self->stack;
#line 76 "/run/build/planner/src/Views/Main.vala"
	_tmp1_ = _data14_->start_page_name;
#line 76 "/run/build/planner/src/Views/Main.vala"
	gtk_stack_set_visible_child_name (_tmp0_, _tmp1_);
#line 77 "/run/build/planner/src/Views/Main.vala"
	result = FALSE;
#line 77 "/run/build/planner/src/Views/Main.vala"
	return result;
#line 612 "Main.c"
}


static gboolean
__views_main___lambda439__gsource_func (gpointer self)
{
	gboolean result;
	result = _views_main___lambda439_ (self);
#line 75 "/run/build/planner/src/Views/Main.vala"
	return result;
#line 623 "Main.c"
}


static void
_views_main___lambda440_ (ViewsMain* self,
                          const gchar* type,
                          gint index)
{
#line 83 "/run/build/planner/src/Views/Main.vala"
	g_return_if_fail (type != NULL);
#line 84 "/run/build/planner/src/Views/Main.vala"
	if (g_strcmp0 (type, "item") == 0) {
#line 85 "/run/build/planner/src/Views/Main.vala"
		if (index == 0) {
#line 638 "Main.c"
			GtkStack* _tmp0_;
#line 86 "/run/build/planner/src/Views/Main.vala"
			_tmp0_ = self->stack;
#line 86 "/run/build/planner/src/Views/Main.vala"
			gtk_stack_set_visible_child_name (_tmp0_, "inbox_view");
#line 644 "Main.c"
		} else {
#line 87 "/run/build/planner/src/Views/Main.vala"
			if (index == 1) {
#line 648 "Main.c"
				GtkStack* _tmp1_;
#line 88 "/run/build/planner/src/Views/Main.vala"
				_tmp1_ = self->stack;
#line 88 "/run/build/planner/src/Views/Main.vala"
				gtk_stack_set_visible_child_name (_tmp1_, "today_view");
#line 654 "Main.c"
			} else {
#line 89 "/run/build/planner/src/Views/Main.vala"
				if (index == 2) {
#line 658 "Main.c"
					GtkStack* _tmp2_;
#line 90 "/run/build/planner/src/Views/Main.vala"
					_tmp2_ = self->stack;
#line 90 "/run/build/planner/src/Views/Main.vala"
					gtk_stack_set_visible_child_name (_tmp2_, "upcoming_view");
#line 664 "Main.c"
				} else {
#line 91 "/run/build/planner/src/Views/Main.vala"
					if (index == 3) {
#line 668 "Main.c"
						GtkStack* _tmp3_;
#line 92 "/run/build/planner/src/Views/Main.vala"
						_tmp3_ = self->stack;
#line 92 "/run/build/planner/src/Views/Main.vala"
						gtk_stack_set_visible_child_name (_tmp3_, "all_tasks_view");
#line 674 "Main.c"
					} else {
						GtkStack* _tmp4_;
#line 94 "/run/build/planner/src/Views/Main.vala"
						_tmp4_ = self->stack;
#line 94 "/run/build/planner/src/Views/Main.vala"
						gtk_stack_set_visible_child_name (_tmp4_, "completed_tasks_view");
#line 681 "Main.c"
					}
				}
			}
		}
	} else {
		GtkStack* _tmp5_;
		gchar* _tmp6_;
		gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
		ViewsProject* project_view = NULL;
		GtkStack* _tmp10_;
		gchar* _tmp11_;
		gchar* _tmp12_;
		gchar* _tmp13_;
		gchar* _tmp14_;
		GtkWidget* _tmp15_;
		ViewsProject* _tmp16_;
		ViewsProject* _tmp17_;
#line 97 "/run/build/planner/src/Views/Main.vala"
		_tmp5_ = self->stack;
#line 97 "/run/build/planner/src/Views/Main.vala"
		_tmp6_ = g_strdup_printf ("%i", index);
#line 97 "/run/build/planner/src/Views/Main.vala"
		_tmp7_ = _tmp6_;
#line 97 "/run/build/planner/src/Views/Main.vala"
		_tmp8_ = g_strconcat ("project_view-", _tmp7_, NULL);
#line 97 "/run/build/planner/src/Views/Main.vala"
		_tmp9_ = _tmp8_;
#line 97 "/run/build/planner/src/Views/Main.vala"
		gtk_stack_set_visible_child_name (_tmp5_, _tmp9_);
#line 97 "/run/build/planner/src/Views/Main.vala"
		_g_free0 (_tmp9_);
#line 97 "/run/build/planner/src/Views/Main.vala"
		_g_free0 (_tmp7_);
#line 98 "/run/build/planner/src/Views/Main.vala"
		_tmp10_ = self->stack;
#line 98 "/run/build/planner/src/Views/Main.vala"
		_tmp11_ = g_strdup_printf ("%i", index);
#line 98 "/run/build/planner/src/Views/Main.vala"
		_tmp12_ = _tmp11_;
#line 98 "/run/build/planner/src/Views/Main.vala"
		_tmp13_ = g_strconcat ("project_view-", _tmp12_, NULL);
#line 98 "/run/build/planner/src/Views/Main.vala"
		_tmp14_ = _tmp13_;
#line 98 "/run/build/planner/src/Views/Main.vala"
		_tmp15_ = gtk_stack_get_child_by_name (_tmp10_, _tmp14_);
#line 98 "/run/build/planner/src/Views/Main.vala"
		_tmp16_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp15_, VIEWS_TYPE_PROJECT) ? ((ViewsProject*) _tmp15_) : NULL);
#line 98 "/run/build/planner/src/Views/Main.vala"
		_tmp17_ = _tmp16_;
#line 98 "/run/build/planner/src/Views/Main.vala"
		_g_free0 (_tmp14_);
#line 98 "/run/build/planner/src/Views/Main.vala"
		_g_free0 (_tmp12_);
#line 98 "/run/build/planner/src/Views/Main.vala"
		project_view = _tmp17_;
#line 84 "/run/build/planner/src/Views/Main.vala"
		_g_object_unref0 (project_view);
#line 741 "Main.c"
	}
}


static void
__views_main___lambda440__widgets_projects_list_on_selected_item (WidgetsProjectsList* _sender,
                                                                  const gchar* type,
                                                                  gint index,
                                                                  gpointer self)
{
#line 83 "/run/build/planner/src/Views/Main.vala"
	_views_main___lambda440_ ((ViewsMain*) self, type, index);
#line 754 "Main.c"
}


static void
_views_main___lambda441_ (ViewsMain* self)
{
	ObjectsProject* project = NULL;
	ServicesDatabase* _tmp0_;
	ObjectsProject* _tmp1_;
	ViewsProject* project_view = NULL;
	ObjectsProject* _tmp2_;
	MainWindow* _tmp3_;
	ViewsProject* _tmp4_;
	GtkStack* _tmp5_;
	ViewsProject* _tmp6_;
	ObjectsProject* _tmp7_;
	gint _tmp8_;
	gchar* _tmp9_;
	gchar* _tmp10_;
	GtkStack* _tmp11_;
#line 104 "/run/build/planner/src/Views/Main.vala"
	_tmp0_ = application_database;
#line 104 "/run/build/planner/src/Views/Main.vala"
	_tmp1_ = services_database_get_last_project (_tmp0_);
#line 104 "/run/build/planner/src/Views/Main.vala"
	project = _tmp1_;
#line 106 "/run/build/planner/src/Views/Main.vala"
	_tmp2_ = project;
#line 106 "/run/build/planner/src/Views/Main.vala"
	_tmp3_ = self->priv->_parent_window;
#line 106 "/run/build/planner/src/Views/Main.vala"
	_tmp4_ = views_project_new (_tmp2_, _tmp3_);
#line 106 "/run/build/planner/src/Views/Main.vala"
	g_object_ref_sink (_tmp4_);
#line 106 "/run/build/planner/src/Views/Main.vala"
	project_view = _tmp4_;
#line 107 "/run/build/planner/src/Views/Main.vala"
	_tmp5_ = self->stack;
#line 107 "/run/build/planner/src/Views/Main.vala"
	_tmp6_ = project_view;
#line 107 "/run/build/planner/src/Views/Main.vala"
	_tmp7_ = project;
#line 107 "/run/build/planner/src/Views/Main.vala"
	_tmp8_ = _tmp7_->id;
#line 107 "/run/build/planner/src/Views/Main.vala"
	_tmp9_ = g_strdup_printf ("project_view-%i", _tmp8_);
#line 107 "/run/build/planner/src/Views/Main.vala"
	_tmp10_ = _tmp9_;
#line 107 "/run/build/planner/src/Views/Main.vala"
	gtk_stack_add_named (_tmp5_, (GtkWidget*) _tmp6_, _tmp10_);
#line 107 "/run/build/planner/src/Views/Main.vala"
	_g_free0 (_tmp10_);
#line 109 "/run/build/planner/src/Views/Main.vala"
	_tmp11_ = self->stack;
#line 109 "/run/build/planner/src/Views/Main.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp11_);
#line 103 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (project_view);
#line 103 "/run/build/planner/src/Views/Main.vala"
	_objects_project_unref0 (project);
#line 815 "Main.c"
}


static void
__views_main___lambda441__services_database_on_add_project_signal (ServicesDatabase* _sender,
                                                                   gpointer self)
{
#line 103 "/run/build/planner/src/Views/Main.vala"
	_views_main___lambda441_ ((ViewsMain*) self);
#line 825 "Main.c"
}


static void
_views_main___lambda442_ (ViewsMain* self,
                          ObjectsTask* task)
{
	GtkStack* _tmp0_;
#line 112 "/run/build/planner/src/Views/Main.vala"
	g_return_if_fail (task != NULL);
#line 113 "/run/build/planner/src/Views/Main.vala"
	_tmp0_ = self->stack;
#line 113 "/run/build/planner/src/Views/Main.vala"
	gtk_stack_set_visible_child_name (_tmp0_, "inbox_view");
#line 114 "/run/build/planner/src/Views/Main.vala"
	gtk_widget_destroy ((GtkWidget*) self);
#line 842 "Main.c"
}


static void
__views_main___lambda442__services_notifications_on_signal_highlight_task (ServicesNotifications* _sender,
                                                                           ObjectsTask* task,
                                                                           gpointer self)
{
#line 112 "/run/build/planner/src/Views/Main.vala"
	_views_main___lambda442_ ((ViewsMain*) self, task);
#line 853 "Main.c"
}


static void
_views_main___lambda443_ (ViewsMain* self,
                          gint index)
{
#line 118 "/run/build/planner/src/Views/Main.vala"
	if (index == 0) {
#line 863 "Main.c"
		GtkStack* _tmp0_;
#line 119 "/run/build/planner/src/Views/Main.vala"
		_tmp0_ = self->stack;
#line 119 "/run/build/planner/src/Views/Main.vala"
		gtk_stack_set_visible_child_name (_tmp0_, "inbox_view");
#line 869 "Main.c"
	} else {
#line 120 "/run/build/planner/src/Views/Main.vala"
		if (index == 1) {
#line 873 "Main.c"
			GtkStack* _tmp1_;
#line 121 "/run/build/planner/src/Views/Main.vala"
			_tmp1_ = self->stack;
#line 121 "/run/build/planner/src/Views/Main.vala"
			gtk_stack_set_visible_child_name (_tmp1_, "today_view");
#line 879 "Main.c"
		} else {
#line 122 "/run/build/planner/src/Views/Main.vala"
			if (index == 2) {
#line 883 "Main.c"
				GtkStack* _tmp2_;
#line 123 "/run/build/planner/src/Views/Main.vala"
				_tmp2_ = self->stack;
#line 123 "/run/build/planner/src/Views/Main.vala"
				gtk_stack_set_visible_child_name (_tmp2_, "upcoming_view");
#line 889 "Main.c"
			} else {
#line 124 "/run/build/planner/src/Views/Main.vala"
				if (index == 3) {
#line 893 "Main.c"
					GtkStack* _tmp3_;
#line 125 "/run/build/planner/src/Views/Main.vala"
					_tmp3_ = self->stack;
#line 125 "/run/build/planner/src/Views/Main.vala"
					gtk_stack_set_visible_child_name (_tmp3_, "all_tasks_view");
#line 899 "Main.c"
				} else {
#line 126 "/run/build/planner/src/Views/Main.vala"
					if (index == 4) {
#line 903 "Main.c"
						GtkStack* _tmp4_;
#line 127 "/run/build/planner/src/Views/Main.vala"
						_tmp4_ = self->stack;
#line 127 "/run/build/planner/src/Views/Main.vala"
						gtk_stack_set_visible_child_name (_tmp4_, "completed_tasks_view");
#line 909 "Main.c"
					}
				}
			}
		}
	}
}


static void
__views_main___lambda443__services_signals_go_action_page (ServicesSignals* _sender,
                                                           gint index,
                                                           gpointer self)
{
#line 117 "/run/build/planner/src/Views/Main.vala"
	_views_main___lambda443_ ((ViewsMain*) self, index);
#line 925 "Main.c"
}


static void
_views_main___lambda444_ (ViewsMain* self,
                          gint project_id)
{
	GtkStack* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
#line 132 "/run/build/planner/src/Views/Main.vala"
	_tmp0_ = self->stack;
#line 132 "/run/build/planner/src/Views/Main.vala"
	_tmp1_ = g_strdup_printf ("project_view-%i", project_id);
#line 132 "/run/build/planner/src/Views/Main.vala"
	_tmp2_ = _tmp1_;
#line 132 "/run/build/planner/src/Views/Main.vala"
	gtk_stack_set_visible_child_name (_tmp0_, _tmp2_);
#line 132 "/run/build/planner/src/Views/Main.vala"
	_g_free0 (_tmp2_);
#line 946 "Main.c"
}


static void
__views_main___lambda444__services_signals_go_project_page (ServicesSignals* _sender,
                                                            gint project_id,
                                                            gpointer self)
{
#line 131 "/run/build/planner/src/Views/Main.vala"
	_views_main___lambda444_ ((ViewsMain*) self, project_id);
#line 957 "Main.c"
}


static void
_views_main___lambda445_ (ViewsMain* self,
                          gint task_id,
                          gint project_id)
{
	GtkStack* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
#line 136 "/run/build/planner/src/Views/Main.vala"
	_tmp0_ = self->stack;
#line 136 "/run/build/planner/src/Views/Main.vala"
	_tmp1_ = g_strdup_printf ("project_view-%i", project_id);
#line 136 "/run/build/planner/src/Views/Main.vala"
	_tmp2_ = _tmp1_;
#line 136 "/run/build/planner/src/Views/Main.vala"
	gtk_stack_set_visible_child_name (_tmp0_, _tmp2_);
#line 136 "/run/build/planner/src/Views/Main.vala"
	_g_free0 (_tmp2_);
#line 979 "Main.c"
}


static void
__views_main___lambda445__services_signals_go_task_page (ServicesSignals* _sender,
                                                         gint task_id,
                                                         gint project_id,
                                                         gpointer self)
{
#line 135 "/run/build/planner/src/Views/Main.vala"
	_views_main___lambda445_ ((ViewsMain*) self, task_id, project_id);
#line 991 "Main.c"
}


static void
_views_main___lambda446_ (ViewsMain* self,
                          ObjectsProject* project)
{
	gchar* project_name = NULL;
	gint _tmp0_;
	gchar* _tmp1_;
	GtkWidget* project_view = NULL;
	GtkStack* _tmp2_;
	const gchar* _tmp3_;
	GtkWidget* _tmp4_;
	GtkWidget* _tmp5_;
	GtkStack* _tmp6_;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	const gchar* _tmp9_;
	GtkWidget* _tmp11_;
#line 139 "/run/build/planner/src/Views/Main.vala"
	g_return_if_fail (project != NULL);
#line 140 "/run/build/planner/src/Views/Main.vala"
	_tmp0_ = project->id;
#line 140 "/run/build/planner/src/Views/Main.vala"
	_tmp1_ = g_strdup_printf ("project_view-%i", _tmp0_);
#line 140 "/run/build/planner/src/Views/Main.vala"
	project_name = _tmp1_;
#line 141 "/run/build/planner/src/Views/Main.vala"
	_tmp2_ = self->stack;
#line 141 "/run/build/planner/src/Views/Main.vala"
	_tmp3_ = project_name;
#line 141 "/run/build/planner/src/Views/Main.vala"
	_tmp4_ = gtk_stack_get_child_by_name (_tmp2_, _tmp3_);
#line 141 "/run/build/planner/src/Views/Main.vala"
	_tmp5_ = _g_object_ref0 (_tmp4_);
#line 141 "/run/build/planner/src/Views/Main.vala"
	project_view = _tmp5_;
#line 143 "/run/build/planner/src/Views/Main.vala"
	_tmp6_ = self->stack;
#line 143 "/run/build/planner/src/Views/Main.vala"
	_tmp7_ = gtk_stack_get_visible_child_name (_tmp6_);
#line 143 "/run/build/planner/src/Views/Main.vala"
	_tmp8_ = _tmp7_;
#line 143 "/run/build/planner/src/Views/Main.vala"
	_tmp9_ = project_name;
#line 143 "/run/build/planner/src/Views/Main.vala"
	if (g_strcmp0 (_tmp8_, _tmp9_) == 0) {
#line 1040 "Main.c"
		GtkStack* _tmp10_;
#line 144 "/run/build/planner/src/Views/Main.vala"
		_tmp10_ = self->stack;
#line 144 "/run/build/planner/src/Views/Main.vala"
		gtk_stack_set_visible_child_name (_tmp10_, "today_view");
#line 1046 "Main.c"
	}
#line 147 "/run/build/planner/src/Views/Main.vala"
	_tmp11_ = project_view;
#line 147 "/run/build/planner/src/Views/Main.vala"
	gtk_widget_destroy (_tmp11_);
#line 139 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (project_view);
#line 139 "/run/build/planner/src/Views/Main.vala"
	_g_free0 (project_name);
#line 1056 "Main.c"
}


static void
__views_main___lambda446__services_database_on_signal_remove_project (ServicesDatabase* _sender,
                                                                      ObjectsProject* project,
                                                                      gpointer self)
{
#line 139 "/run/build/planner/src/Views/Main.vala"
	_views_main___lambda446_ ((ViewsMain*) self, project);
#line 1067 "Main.c"
}


static GObject *
views_main_constructor (GType type,
                        guint n_construct_properties,
                        GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsMain * self;
	Block14Data* _data14_;
	GtkStyleContext* _tmp0_;
	WidgetsProjectsList* _tmp1_;
	ViewsInbox* _tmp2_;
	ViewsToday* _tmp3_;
	ViewsUpcoming* _tmp4_;
	ViewsAllTasks* _tmp5_;
	ViewsCompletedTasks* _tmp6_;
	GtkStack* _tmp7_;
	GtkStack* _tmp8_;
	GtkStack* _tmp9_;
	GtkStack* _tmp10_;
	ViewsInbox* _tmp11_;
	GtkStack* _tmp12_;
	ViewsToday* _tmp13_;
	GtkStack* _tmp14_;
	ViewsUpcoming* _tmp15_;
	GtkStack* _tmp16_;
	ViewsAllTasks* _tmp17_;
	GtkStack* _tmp18_;
	ViewsCompletedTasks* _tmp19_;
	gint start_page = 0;
	GSettings* _tmp20_;
	gchar* _tmp21_;
	gint _tmp22_;
	WidgetsProjectsList* _tmp27_;
	GtkStack* _tmp28_;
	WidgetsProjectsList* _tmp29_;
	ServicesDatabase* _tmp30_;
	ServicesNotifications* _tmp31_;
	ServicesSignals* _tmp32_;
	ServicesSignals* _tmp33_;
	ServicesSignals* _tmp34_;
	ServicesDatabase* _tmp35_;
#line 41 "/run/build/planner/src/Views/Main.vala"
	parent_class = G_OBJECT_CLASS (views_main_parent_class);
#line 41 "/run/build/planner/src/Views/Main.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 41 "/run/build/planner/src/Views/Main.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_MAIN, ViewsMain);
#line 41 "/run/build/planner/src/Views/Main.vala"
	_data14_ = g_slice_new0 (Block14Data);
#line 41 "/run/build/planner/src/Views/Main.vala"
	_data14_->_ref_count_ = 1;
#line 41 "/run/build/planner/src/Views/Main.vala"
	_data14_->self = g_object_ref (self);
#line 42 "/run/build/planner/src/Views/Main.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 42 "/run/build/planner/src/Views/Main.vala"
	gtk_style_context_add_class (_tmp0_, "view");
#line 44 "/run/build/planner/src/Views/Main.vala"
	_tmp1_ = widgets_projects_list_new ();
#line 44 "/run/build/planner/src/Views/Main.vala"
	g_object_ref_sink (_tmp1_);
#line 44 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (self->projects_list);
#line 44 "/run/build/planner/src/Views/Main.vala"
	self->projects_list = _tmp1_;
#line 46 "/run/build/planner/src/Views/Main.vala"
	_tmp2_ = views_inbox_new ();
#line 46 "/run/build/planner/src/Views/Main.vala"
	g_object_ref_sink (_tmp2_);
#line 46 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (self->priv->inbox_view);
#line 46 "/run/build/planner/src/Views/Main.vala"
	self->priv->inbox_view = _tmp2_;
#line 47 "/run/build/planner/src/Views/Main.vala"
	_tmp3_ = views_today_new ();
#line 47 "/run/build/planner/src/Views/Main.vala"
	g_object_ref_sink (_tmp3_);
#line 47 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (self->priv->today_view);
#line 47 "/run/build/planner/src/Views/Main.vala"
	self->priv->today_view = _tmp3_;
#line 48 "/run/build/planner/src/Views/Main.vala"
	_tmp4_ = views_upcoming_new ();
#line 48 "/run/build/planner/src/Views/Main.vala"
	g_object_ref_sink (_tmp4_);
#line 48 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (self->priv->upcoming_view);
#line 48 "/run/build/planner/src/Views/Main.vala"
	self->priv->upcoming_view = _tmp4_;
#line 49 "/run/build/planner/src/Views/Main.vala"
	_tmp5_ = views_all_tasks_new ();
#line 49 "/run/build/planner/src/Views/Main.vala"
	g_object_ref_sink (_tmp5_);
#line 49 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (self->priv->all_tasks_view);
#line 49 "/run/build/planner/src/Views/Main.vala"
	self->priv->all_tasks_view = _tmp5_;
#line 50 "/run/build/planner/src/Views/Main.vala"
	_tmp6_ = views_completed_tasks_new ();
#line 50 "/run/build/planner/src/Views/Main.vala"
	g_object_ref_sink (_tmp6_);
#line 50 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (self->priv->completed_tasks_view);
#line 50 "/run/build/planner/src/Views/Main.vala"
	self->priv->completed_tasks_view = _tmp6_;
#line 52 "/run/build/planner/src/Views/Main.vala"
	_tmp7_ = (GtkStack*) gtk_stack_new ();
#line 52 "/run/build/planner/src/Views/Main.vala"
	g_object_ref_sink (_tmp7_);
#line 52 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (self->stack);
#line 52 "/run/build/planner/src/Views/Main.vala"
	self->stack = _tmp7_;
#line 53 "/run/build/planner/src/Views/Main.vala"
	_tmp8_ = self->stack;
#line 53 "/run/build/planner/src/Views/Main.vala"
	g_object_set ((GtkWidget*) _tmp8_, "expand", TRUE, NULL);
#line 54 "/run/build/planner/src/Views/Main.vala"
	_tmp9_ = self->stack;
#line 54 "/run/build/planner/src/Views/Main.vala"
	gtk_stack_set_transition_type (_tmp9_, GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN);
#line 56 "/run/build/planner/src/Views/Main.vala"
	_tmp10_ = self->stack;
#line 56 "/run/build/planner/src/Views/Main.vala"
	_tmp11_ = self->priv->inbox_view;
#line 56 "/run/build/planner/src/Views/Main.vala"
	gtk_stack_add_named (_tmp10_, (GtkWidget*) _tmp11_, "inbox_view");
#line 57 "/run/build/planner/src/Views/Main.vala"
	_tmp12_ = self->stack;
#line 57 "/run/build/planner/src/Views/Main.vala"
	_tmp13_ = self->priv->today_view;
#line 57 "/run/build/planner/src/Views/Main.vala"
	gtk_stack_add_named (_tmp12_, (GtkWidget*) _tmp13_, "today_view");
#line 58 "/run/build/planner/src/Views/Main.vala"
	_tmp14_ = self->stack;
#line 58 "/run/build/planner/src/Views/Main.vala"
	_tmp15_ = self->priv->upcoming_view;
#line 58 "/run/build/planner/src/Views/Main.vala"
	gtk_stack_add_named (_tmp14_, (GtkWidget*) _tmp15_, "upcoming_view");
#line 59 "/run/build/planner/src/Views/Main.vala"
	_tmp16_ = self->stack;
#line 59 "/run/build/planner/src/Views/Main.vala"
	_tmp17_ = self->priv->all_tasks_view;
#line 59 "/run/build/planner/src/Views/Main.vala"
	gtk_stack_add_named (_tmp16_, (GtkWidget*) _tmp17_, "all_tasks_view");
#line 60 "/run/build/planner/src/Views/Main.vala"
	_tmp18_ = self->stack;
#line 60 "/run/build/planner/src/Views/Main.vala"
	_tmp19_ = self->priv->completed_tasks_view;
#line 60 "/run/build/planner/src/Views/Main.vala"
	gtk_stack_add_named (_tmp18_, (GtkWidget*) _tmp19_, "completed_tasks_view");
#line 62 "/run/build/planner/src/Views/Main.vala"
	views_main_update_views (self);
#line 64 "/run/build/planner/src/Views/Main.vala"
	_tmp20_ = application_settings;
#line 64 "/run/build/planner/src/Views/Main.vala"
	start_page = g_settings_get_enum (_tmp20_, "start-page");
#line 65 "/run/build/planner/src/Views/Main.vala"
	_tmp21_ = g_strdup ("");
#line 65 "/run/build/planner/src/Views/Main.vala"
	_data14_->start_page_name = _tmp21_;
#line 67 "/run/build/planner/src/Views/Main.vala"
	_tmp22_ = start_page;
#line 67 "/run/build/planner/src/Views/Main.vala"
	if (_tmp22_ == 0) {
#line 1237 "Main.c"
		gchar* _tmp23_;
#line 68 "/run/build/planner/src/Views/Main.vala"
		_tmp23_ = g_strdup ("inbox_view");
#line 68 "/run/build/planner/src/Views/Main.vala"
		_g_free0 (_data14_->start_page_name);
#line 68 "/run/build/planner/src/Views/Main.vala"
		_data14_->start_page_name = _tmp23_;
#line 1245 "Main.c"
	} else {
		gint _tmp24_;
#line 69 "/run/build/planner/src/Views/Main.vala"
		_tmp24_ = start_page;
#line 69 "/run/build/planner/src/Views/Main.vala"
		if (_tmp24_ == 1) {
#line 1252 "Main.c"
			gchar* _tmp25_;
#line 70 "/run/build/planner/src/Views/Main.vala"
			_tmp25_ = g_strdup ("today_view");
#line 70 "/run/build/planner/src/Views/Main.vala"
			_g_free0 (_data14_->start_page_name);
#line 70 "/run/build/planner/src/Views/Main.vala"
			_data14_->start_page_name = _tmp25_;
#line 1260 "Main.c"
		} else {
			gchar* _tmp26_;
#line 72 "/run/build/planner/src/Views/Main.vala"
			_tmp26_ = g_strdup ("upcoming_view");
#line 72 "/run/build/planner/src/Views/Main.vala"
			_g_free0 (_data14_->start_page_name);
#line 72 "/run/build/planner/src/Views/Main.vala"
			_data14_->start_page_name = _tmp26_;
#line 1269 "Main.c"
		}
	}
#line 75 "/run/build/planner/src/Views/Main.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 200, __views_main___lambda439__gsource_func, block14_data_ref (_data14_), block14_data_unref);
#line 80 "/run/build/planner/src/Views/Main.vala"
	_tmp27_ = self->projects_list;
#line 80 "/run/build/planner/src/Views/Main.vala"
	gtk_paned_pack1 ((GtkPaned*) self, (GtkWidget*) _tmp27_, FALSE, FALSE);
#line 81 "/run/build/planner/src/Views/Main.vala"
	_tmp28_ = self->stack;
#line 81 "/run/build/planner/src/Views/Main.vala"
	gtk_paned_pack2 ((GtkPaned*) self, (GtkWidget*) _tmp28_, TRUE, TRUE);
#line 83 "/run/build/planner/src/Views/Main.vala"
	_tmp29_ = self->projects_list;
#line 83 "/run/build/planner/src/Views/Main.vala"
	g_signal_connect_object (_tmp29_, "on-selected-item", (GCallback) __views_main___lambda440__widgets_projects_list_on_selected_item, self, 0);
#line 103 "/run/build/planner/src/Views/Main.vala"
	_tmp30_ = application_database;
#line 103 "/run/build/planner/src/Views/Main.vala"
	g_signal_connect_object (_tmp30_, "on-add-project-signal", (GCallback) __views_main___lambda441__services_database_on_add_project_signal, self, 0);
#line 112 "/run/build/planner/src/Views/Main.vala"
	_tmp31_ = application_notification;
#line 112 "/run/build/planner/src/Views/Main.vala"
	g_signal_connect_object (_tmp31_, "on-signal-highlight-task", (GCallback) __views_main___lambda442__services_notifications_on_signal_highlight_task, self, 0);
#line 117 "/run/build/planner/src/Views/Main.vala"
	_tmp32_ = application_signals;
#line 117 "/run/build/planner/src/Views/Main.vala"
	g_signal_connect_object (_tmp32_, "go-action-page", (GCallback) __views_main___lambda443__services_signals_go_action_page, self, 0);
#line 131 "/run/build/planner/src/Views/Main.vala"
	_tmp33_ = application_signals;
#line 131 "/run/build/planner/src/Views/Main.vala"
	g_signal_connect_object (_tmp33_, "go-project-page", (GCallback) __views_main___lambda444__services_signals_go_project_page, self, 0);
#line 135 "/run/build/planner/src/Views/Main.vala"
	_tmp34_ = application_signals;
#line 135 "/run/build/planner/src/Views/Main.vala"
	g_signal_connect_object (_tmp34_, "go-task-page", (GCallback) __views_main___lambda445__services_signals_go_task_page, self, 0);
#line 139 "/run/build/planner/src/Views/Main.vala"
	_tmp35_ = application_database;
#line 139 "/run/build/planner/src/Views/Main.vala"
	g_signal_connect_object (_tmp35_, "on-signal-remove-project", (GCallback) __views_main___lambda446__services_database_on_signal_remove_project, self, 0);
#line 41 "/run/build/planner/src/Views/Main.vala"
	block14_data_unref (_data14_);
#line 41 "/run/build/planner/src/Views/Main.vala"
	_data14_ = NULL;
#line 41 "/run/build/planner/src/Views/Main.vala"
	return obj;
#line 1316 "Main.c"
}


static void
views_main_class_init (ViewsMainClass * klass)
{
#line 22 "/run/build/planner/src/Views/Main.vala"
	views_main_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Views/Main.vala"
	g_type_class_add_private (klass, sizeof (ViewsMainPrivate));
#line 22 "/run/build/planner/src/Views/Main.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_views_main_get_property;
#line 22 "/run/build/planner/src/Views/Main.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_views_main_set_property;
#line 22 "/run/build/planner/src/Views/Main.vala"
	G_OBJECT_CLASS (klass)->constructor = views_main_constructor;
#line 22 "/run/build/planner/src/Views/Main.vala"
	G_OBJECT_CLASS (klass)->finalize = views_main_finalize;
#line 22 "/run/build/planner/src/Views/Main.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_MAIN_PARENT_WINDOW_PROPERTY, views_main_properties[VIEWS_MAIN_PARENT_WINDOW_PROPERTY] = g_param_spec_object ("parent-window", "parent-window", "parent-window", TYPE_MAIN_WINDOW, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1337 "Main.c"
}


static void
views_main_instance_init (ViewsMain * self)
{
#line 22 "/run/build/planner/src/Views/Main.vala"
	self->priv = VIEWS_MAIN_GET_PRIVATE (self);
#line 1346 "Main.c"
}


static void
views_main_finalize (GObject * obj)
{
	ViewsMain * self;
#line 22 "/run/build/planner/src/Views/Main.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_MAIN, ViewsMain);
#line 25 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (self->projects_list);
#line 26 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (self->stack);
#line 28 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (self->priv->inbox_view);
#line 29 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (self->priv->today_view);
#line 30 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (self->priv->upcoming_view);
#line 31 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (self->priv->all_tasks_view);
#line 32 "/run/build/planner/src/Views/Main.vala"
	_g_object_unref0 (self->priv->completed_tasks_view);
#line 22 "/run/build/planner/src/Views/Main.vala"
	G_OBJECT_CLASS (views_main_parent_class)->finalize (obj);
#line 1372 "Main.c"
}


GType
views_main_get_type (void)
{
	static volatile gsize views_main_type_id__volatile = 0;
	if (g_once_init_enter (&views_main_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ViewsMainClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_main_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsMain), 0, (GInstanceInitFunc) views_main_instance_init, NULL };
		GType views_main_type_id;
		views_main_type_id = g_type_register_static (gtk_paned_get_type (), "ViewsMain", &g_define_type_info, 0);
		g_once_init_leave (&views_main_type_id__volatile, views_main_type_id);
	}
	return views_main_type_id__volatile;
}


static void
_vala_views_main_get_property (GObject * object,
                               guint property_id,
                               GValue * value,
                               GParamSpec * pspec)
{
	ViewsMain * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_MAIN, ViewsMain);
#line 22 "/run/build/planner/src/Views/Main.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Views/Main.vala"
		case VIEWS_MAIN_PARENT_WINDOW_PROPERTY:
#line 22 "/run/build/planner/src/Views/Main.vala"
		g_value_set_object (value, views_main_get_parent_window (self));
#line 22 "/run/build/planner/src/Views/Main.vala"
		break;
#line 1406 "Main.c"
		default:
#line 22 "/run/build/planner/src/Views/Main.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Views/Main.vala"
		break;
#line 1412 "Main.c"
	}
}


static void
_vala_views_main_set_property (GObject * object,
                               guint property_id,
                               const GValue * value,
                               GParamSpec * pspec)
{
	ViewsMain * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_MAIN, ViewsMain);
#line 22 "/run/build/planner/src/Views/Main.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Views/Main.vala"
		case VIEWS_MAIN_PARENT_WINDOW_PROPERTY:
#line 22 "/run/build/planner/src/Views/Main.vala"
		views_main_set_parent_window (self, g_value_get_object (value));
#line 22 "/run/build/planner/src/Views/Main.vala"
		break;
#line 1433 "Main.c"
		default:
#line 22 "/run/build/planner/src/Views/Main.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Views/Main.vala"
		break;
#line 1439 "Main.c"
	}
}



