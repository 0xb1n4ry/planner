/* Utils.c generated by valac 0.40.11, the Vala compiler
 * generated from Utils.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <glib/gstdio.h>
#include <gdk/gdk.h>
#include <float.h>
#include <math.h>
#include <gtk/gtk.h>
#include <gee.h>
#include <granite.h>
#include <glib/gi18n-lib.h>


#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
typedef struct _UtilsPrivate UtilsPrivate;
enum  {
	UTILS_0_PROPERTY,
	UTILS_NUM_PROPERTIES
};
static GParamSpec* utils_properties[UTILS_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define WIDGETS_TYPE_LABEL_CHILD (widgets_label_child_get_type ())
#define WIDGETS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChild))
#define WIDGETS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChildClass))
#define WIDGETS_IS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_LABEL_CHILD))
#define WIDGETS_IS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_LABEL_CHILD))
#define WIDGETS_LABEL_CHILD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChildClass))

typedef struct _WidgetsLabelChild WidgetsLabelChild;
typedef struct _WidgetsLabelChildClass WidgetsLabelChildClass;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
typedef struct _ObjectsLabelPrivate ObjectsLabelPrivate;

#define WIDGETS_TYPE_TASK_ROW (widgets_task_row_get_type ())
#define WIDGETS_TASK_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRow))
#define WIDGETS_TASK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRowClass))
#define WIDGETS_IS_TASK_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TASK_ROW))
#define WIDGETS_IS_TASK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TASK_ROW))
#define WIDGETS_TASK_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRowClass))

typedef struct _WidgetsTaskRow WidgetsTaskRow;
typedef struct _WidgetsTaskRowClass WidgetsTaskRowClass;

#define OBJECTS_TYPE_TASK (objects_task_get_type ())
#define OBJECTS_TASK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TASK, ObjectsTask))
#define OBJECTS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TASK, ObjectsTaskClass))
#define OBJECTS_IS_TASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TASK))
#define OBJECTS_IS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TASK))
#define OBJECTS_TASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TASK, ObjectsTaskClass))

typedef struct _ObjectsTask ObjectsTask;
typedef struct _ObjectsTaskClass ObjectsTaskClass;
typedef struct _ObjectsTaskPrivate ObjectsTaskPrivate;
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
#define _g_time_zone_unref0(var) ((var == NULL) ? NULL : (var = (g_time_zone_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

struct _Utils {
	GObject parent_instance;
	UtilsPrivate * priv;
	gchar* CACHE_FOLDER;
	gchar* PROFILE_FOLDER;
};

struct _UtilsClass {
	GObjectClass parent_class;
};

struct _ObjectsLabel {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsLabelPrivate * priv;
	gint id;
	gchar* name;
	gchar* color;
};

struct _ObjectsLabelClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsLabel *self);
};

struct _ObjectsTask {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsTaskPrivate * priv;
	gint id;
	gint checked;
	gint project_id;
	gint list_id;
	gint task_order;
	gint is_inbox;
	gint has_reminder;
	gint sidebar_width;
	gint was_notified;
	gchar* content;
	gchar* note;
	gchar* when_date_utc;
	gchar* reminder_time;
	gchar* labels;
	gchar* checklist;
};

struct _ObjectsTaskClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsTask *self);
};


static gpointer utils_parent_class = NULL;
extern Utils* application_utils;

GType utils_get_type (void) G_GNUC_CONST;
Utils* utils_new (void);
Utils* utils_construct (GType object_type);
void utils_create_dir_with_parents (Utils* self,
                                    const gchar* dir);
gchar* utils_convert_invert (Utils* self,
                             const gchar* hex);
static gdouble utils_contrast_ratio (Utils* self,
                              GdkRGBA* bg_color,
                              GdkRGBA* fg_color);
static gdouble utils_get_luminance (Utils* self,
                             GdkRGBA* color);
static gdouble utils_sanitize_color (Utils* self,
                              gdouble color);
gchar* utils_rgb_to_hex_string (Utils* self,
                                GdkRGBA* rgba);
gboolean utils_is_label_repeted (Utils* self,
                                 GtkFlowBox* flowbox,
                                 gint id);
GType widgets_label_child_get_type (void) G_GNUC_CONST;
gpointer objects_label_ref (gpointer instance);
void objects_label_unref (gpointer instance);
GParamSpec* objects_param_spec_label (const gchar* name,
                                      const gchar* nick,
                                      const gchar* blurb,
                                      GType object_type,
                                      GParamFlags flags);
void objects_value_set_label (GValue* value,
                              gpointer v_object);
void objects_value_take_label (GValue* value,
                               gpointer v_object);
gpointer objects_value_get_label (const GValue* value);
GType objects_label_get_type (void) G_GNUC_CONST;
ObjectsLabel* widgets_label_child_get_label (WidgetsLabelChild* self);
gboolean utils_is_empty (Utils* self,
                         GtkFlowBox* flowbox);
gboolean utils_is_listbox_empty (Utils* self,
                                 GtkListBox* listbox);
GType widgets_task_row_get_type (void) G_GNUC_CONST;
gpointer objects_task_ref (gpointer instance);
void objects_task_unref (gpointer instance);
GParamSpec* objects_param_spec_task (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void objects_value_set_task (GValue* value,
                             gpointer v_object);
void objects_value_take_task (GValue* value,
                              gpointer v_object);
gpointer objects_value_get_task (const GValue* value);
GType objects_task_get_type (void) G_GNUC_CONST;
ObjectsTask* widgets_task_row_get_task (WidgetsTaskRow* self);
gboolean utils_is_listbox_all_empty (Utils* self,
                                     GtkListBox* listbox);
gboolean utils_is_task_repeted (Utils* self,
                                GtkListBox* listbox,
                                gint id);
gboolean utils_is_tomorrow (Utils* self,
                            GDateTime* date_1);
gboolean utils_is_today (Utils* self,
                         GDateTime* date_1);
gboolean utils_is_before_today (Utils* self,
                                GDateTime* date_1);
gboolean utils_is_current_month (Utils* self,
                                 GDateTime* date);
gboolean utils_is_upcoming (Utils* self,
                            GDateTime* date);
gchar* utils_first_letter_to_up (Utils* self,
                                 const gchar* text);
gint utils_get_days_of_month (Utils* self,
                              gint index);
gchar* utils_get_weather_icon_name (Utils* self,
                                    const gchar* key);
gchar* utils_get_default_date_format (Utils* self,
                                      const gchar* date_string);
gchar* utils_get_default_date_format_from_date (Utils* self,
                                                GDateTime* date);
gchar* utils_get_relative_default_date_format_from_date (Utils* self,
                                                         GDateTime* date);
gchar* utils_get_theme (Utils* self,
                        gint key);
void utils_apply_theme (Utils* self,
                        const gchar* hex);
GDateTime* utils_strip_time (Utils* self,
                             GDateTime* datetime);
static void utils_finalize (GObject * obj);


Utils*
utils_construct (GType object_type)
{
	Utils * self = NULL;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
#line 25 "/run/build/planner/src/Utils.vala"
	self = (Utils*) g_object_new (object_type, NULL);
#line 26 "/run/build/planner/src/Utils.vala"
	_tmp0_ = g_get_user_cache_dir ();
#line 26 "/run/build/planner/src/Utils.vala"
	_tmp1_ = g_build_filename (_tmp0_, "com.github.alainm23.planner", NULL);
#line 26 "/run/build/planner/src/Utils.vala"
	_g_free0 (self->CACHE_FOLDER);
#line 26 "/run/build/planner/src/Utils.vala"
	self->CACHE_FOLDER = _tmp1_;
#line 27 "/run/build/planner/src/Utils.vala"
	_tmp2_ = self->CACHE_FOLDER;
#line 27 "/run/build/planner/src/Utils.vala"
	_tmp3_ = g_build_filename (_tmp2_, "profile", NULL);
#line 27 "/run/build/planner/src/Utils.vala"
	_g_free0 (self->PROFILE_FOLDER);
#line 27 "/run/build/planner/src/Utils.vala"
	self->PROFILE_FOLDER = _tmp3_;
#line 25 "/run/build/planner/src/Utils.vala"
	return self;
#line 277 "Utils.c"
}


Utils*
utils_new (void)
{
#line 25 "/run/build/planner/src/Utils.vala"
	return utils_construct (TYPE_UTILS);
#line 286 "Utils.c"
}


void
utils_create_dir_with_parents (Utils* self,
                               const gchar* dir)
{
	gchar* path = NULL;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	GFile* tmp = NULL;
	const gchar* _tmp2_;
	GFile* _tmp3_;
	GFile* _tmp4_;
#line 30 "/run/build/planner/src/Utils.vala"
	g_return_if_fail (self != NULL);
#line 30 "/run/build/planner/src/Utils.vala"
	g_return_if_fail (dir != NULL);
#line 31 "/run/build/planner/src/Utils.vala"
	_tmp0_ = g_get_home_dir ();
#line 31 "/run/build/planner/src/Utils.vala"
	_tmp1_ = g_strconcat (_tmp0_, dir, NULL);
#line 31 "/run/build/planner/src/Utils.vala"
	path = _tmp1_;
#line 32 "/run/build/planner/src/Utils.vala"
	_tmp2_ = path;
#line 32 "/run/build/planner/src/Utils.vala"
	_tmp3_ = g_file_new_for_path (_tmp2_);
#line 32 "/run/build/planner/src/Utils.vala"
	tmp = _tmp3_;
#line 33 "/run/build/planner/src/Utils.vala"
	_tmp4_ = tmp;
#line 33 "/run/build/planner/src/Utils.vala"
	if (g_file_query_file_type (_tmp4_, 0, NULL) != G_FILE_TYPE_DIRECTORY) {
#line 321 "Utils.c"
		const gchar* _tmp5_;
#line 34 "/run/build/planner/src/Utils.vala"
		_tmp5_ = path;
#line 34 "/run/build/planner/src/Utils.vala"
		g_mkdir_with_parents (_tmp5_, 0775);
#line 327 "Utils.c"
	}
#line 30 "/run/build/planner/src/Utils.vala"
	_g_object_unref0 (tmp);
#line 30 "/run/build/planner/src/Utils.vala"
	_g_free0 (path);
#line 333 "Utils.c"
}


gchar*
utils_convert_invert (Utils* self,
                      const gchar* hex)
{
	gchar* result = NULL;
	GdkRGBA gdk_white = {0};
	GdkRGBA gdk_black = {0};
	GdkRGBA gdk_bg = {0};
	gdouble contrast_white = 0.0;
	GdkRGBA _tmp0_;
	GdkRGBA _tmp1_;
	gdouble contrast_black = 0.0;
	GdkRGBA _tmp2_;
	GdkRGBA _tmp3_;
	gchar* fg_color = NULL;
	gchar* _tmp4_;
	gdouble _tmp5_;
	gdouble _tmp6_;
#line 38 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 38 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (hex != NULL, NULL);
#line 39 "/run/build/planner/src/Utils.vala"
	memset (&gdk_white, 0, sizeof (GdkRGBA));
#line 40 "/run/build/planner/src/Utils.vala"
	gdk_rgba_parse (&gdk_white, "#fff");
#line 42 "/run/build/planner/src/Utils.vala"
	memset (&gdk_black, 0, sizeof (GdkRGBA));
#line 43 "/run/build/planner/src/Utils.vala"
	gdk_rgba_parse (&gdk_black, "#000");
#line 45 "/run/build/planner/src/Utils.vala"
	memset (&gdk_bg, 0, sizeof (GdkRGBA));
#line 46 "/run/build/planner/src/Utils.vala"
	gdk_rgba_parse (&gdk_bg, hex);
#line 48 "/run/build/planner/src/Utils.vala"
	_tmp0_ = gdk_bg;
#line 48 "/run/build/planner/src/Utils.vala"
	_tmp1_ = gdk_white;
#line 48 "/run/build/planner/src/Utils.vala"
	contrast_white = utils_contrast_ratio (self, &_tmp0_, &_tmp1_);
#line 53 "/run/build/planner/src/Utils.vala"
	_tmp2_ = gdk_bg;
#line 53 "/run/build/planner/src/Utils.vala"
	_tmp3_ = gdk_black;
#line 53 "/run/build/planner/src/Utils.vala"
	contrast_black = utils_contrast_ratio (self, &_tmp2_, &_tmp3_);
#line 58 "/run/build/planner/src/Utils.vala"
	_tmp4_ = g_strdup ("#fff");
#line 58 "/run/build/planner/src/Utils.vala"
	fg_color = _tmp4_;
#line 62 "/run/build/planner/src/Utils.vala"
	_tmp5_ = contrast_black;
#line 62 "/run/build/planner/src/Utils.vala"
	_tmp6_ = contrast_white;
#line 62 "/run/build/planner/src/Utils.vala"
	if (_tmp5_ > (_tmp6_ + 3)) {
#line 393 "Utils.c"
		gchar* _tmp7_;
#line 63 "/run/build/planner/src/Utils.vala"
		_tmp7_ = g_strdup ("#000");
#line 63 "/run/build/planner/src/Utils.vala"
		_g_free0 (fg_color);
#line 63 "/run/build/planner/src/Utils.vala"
		fg_color = _tmp7_;
#line 401 "Utils.c"
	}
#line 66 "/run/build/planner/src/Utils.vala"
	result = fg_color;
#line 66 "/run/build/planner/src/Utils.vala"
	return result;
#line 407 "Utils.c"
}


static gdouble
utils_contrast_ratio (Utils* self,
                      GdkRGBA* bg_color,
                      GdkRGBA* fg_color)
{
	gdouble result = 0.0;
	gdouble bg_luminance = 0.0;
	GdkRGBA _tmp0_;
	gdouble fg_luminance = 0.0;
	GdkRGBA _tmp1_;
	gdouble _tmp2_;
	gdouble _tmp3_;
	gdouble _tmp6_;
	gdouble _tmp7_;
#line 69 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, 0.0);
#line 69 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (bg_color != NULL, 0.0);
#line 69 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (fg_color != NULL, 0.0);
#line 70 "/run/build/planner/src/Utils.vala"
	_tmp0_ = *bg_color;
#line 70 "/run/build/planner/src/Utils.vala"
	bg_luminance = utils_get_luminance (self, &_tmp0_);
#line 71 "/run/build/planner/src/Utils.vala"
	_tmp1_ = *fg_color;
#line 71 "/run/build/planner/src/Utils.vala"
	fg_luminance = utils_get_luminance (self, &_tmp1_);
#line 73 "/run/build/planner/src/Utils.vala"
	_tmp2_ = bg_luminance;
#line 73 "/run/build/planner/src/Utils.vala"
	_tmp3_ = fg_luminance;
#line 73 "/run/build/planner/src/Utils.vala"
	if (_tmp2_ > _tmp3_) {
#line 445 "Utils.c"
		gdouble _tmp4_;
		gdouble _tmp5_;
#line 74 "/run/build/planner/src/Utils.vala"
		_tmp4_ = bg_luminance;
#line 74 "/run/build/planner/src/Utils.vala"
		_tmp5_ = fg_luminance;
#line 74 "/run/build/planner/src/Utils.vala"
		result = (_tmp4_ + 0.05) / (_tmp5_ + 0.05);
#line 74 "/run/build/planner/src/Utils.vala"
		return result;
#line 456 "Utils.c"
	}
#line 77 "/run/build/planner/src/Utils.vala"
	_tmp6_ = fg_luminance;
#line 77 "/run/build/planner/src/Utils.vala"
	_tmp7_ = bg_luminance;
#line 77 "/run/build/planner/src/Utils.vala"
	result = (_tmp6_ + 0.05) / (_tmp7_ + 0.05);
#line 77 "/run/build/planner/src/Utils.vala"
	return result;
#line 466 "Utils.c"
}


static gdouble
utils_get_luminance (Utils* self,
                     GdkRGBA* color)
{
	gdouble result = 0.0;
	gdouble red = 0.0;
	GdkRGBA _tmp0_;
	gdouble _tmp1_;
	gdouble green = 0.0;
	GdkRGBA _tmp2_;
	gdouble _tmp3_;
	gdouble blue = 0.0;
	GdkRGBA _tmp4_;
	gdouble _tmp5_;
#line 80 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, 0.0);
#line 80 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (color != NULL, 0.0);
#line 81 "/run/build/planner/src/Utils.vala"
	_tmp0_ = *color;
#line 81 "/run/build/planner/src/Utils.vala"
	_tmp1_ = _tmp0_.red;
#line 81 "/run/build/planner/src/Utils.vala"
	red = utils_sanitize_color (self, _tmp1_) * 0.2126;
#line 82 "/run/build/planner/src/Utils.vala"
	_tmp2_ = *color;
#line 82 "/run/build/planner/src/Utils.vala"
	_tmp3_ = _tmp2_.green;
#line 82 "/run/build/planner/src/Utils.vala"
	green = utils_sanitize_color (self, _tmp3_) * 0.7152;
#line 83 "/run/build/planner/src/Utils.vala"
	_tmp4_ = *color;
#line 83 "/run/build/planner/src/Utils.vala"
	_tmp5_ = _tmp4_.blue;
#line 83 "/run/build/planner/src/Utils.vala"
	blue = utils_sanitize_color (self, _tmp5_) * 0.0722;
#line 85 "/run/build/planner/src/Utils.vala"
	result = (red + green) + blue;
#line 85 "/run/build/planner/src/Utils.vala"
	return result;
#line 510 "Utils.c"
}


static gdouble
utils_sanitize_color (Utils* self,
                      gdouble color)
{
	gdouble result = 0.0;
#line 88 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, 0.0);
#line 89 "/run/build/planner/src/Utils.vala"
	if (color <= 0.03928) {
#line 90 "/run/build/planner/src/Utils.vala"
		result = color / 12.92;
#line 90 "/run/build/planner/src/Utils.vala"
		return result;
#line 527 "Utils.c"
	}
#line 93 "/run/build/planner/src/Utils.vala"
	result = pow ((color + 0.055) / 1.055, 2.4);
#line 93 "/run/build/planner/src/Utils.vala"
	return result;
#line 533 "Utils.c"
}


gchar*
utils_rgb_to_hex_string (Utils* self,
                         GdkRGBA* rgba)
{
	gchar* result = NULL;
	gchar* s = NULL;
	GdkRGBA _tmp0_;
	gdouble _tmp1_;
	GdkRGBA _tmp2_;
	gdouble _tmp3_;
	GdkRGBA _tmp4_;
	gdouble _tmp5_;
	gchar* _tmp6_;
#line 96 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 96 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (rgba != NULL, NULL);
#line 97 "/run/build/planner/src/Utils.vala"
	_tmp0_ = *rgba;
#line 97 "/run/build/planner/src/Utils.vala"
	_tmp1_ = _tmp0_.red;
#line 97 "/run/build/planner/src/Utils.vala"
	_tmp2_ = *rgba;
#line 97 "/run/build/planner/src/Utils.vala"
	_tmp3_ = _tmp2_.green;
#line 97 "/run/build/planner/src/Utils.vala"
	_tmp4_ = *rgba;
#line 97 "/run/build/planner/src/Utils.vala"
	_tmp5_ = _tmp4_.blue;
#line 97 "/run/build/planner/src/Utils.vala"
	_tmp6_ = g_strdup_printf ("#%02x%02x%02x", (guint) (_tmp1_ * 255), (guint) (_tmp3_ * 255), (guint) (_tmp5_ * 255));
#line 97 "/run/build/planner/src/Utils.vala"
	s = _tmp6_;
#line 101 "/run/build/planner/src/Utils.vala"
	result = s;
#line 101 "/run/build/planner/src/Utils.vala"
	return result;
#line 574 "Utils.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 105 "/run/build/planner/src/Utils.vala"
	return self ? g_object_ref (self) : NULL;
#line 583 "Utils.c"
}


gboolean
utils_is_label_repeted (Utils* self,
                        GtkFlowBox* flowbox,
                        gint id)
{
	gboolean result = FALSE;
	GList* _tmp0_;
#line 104 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 104 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (flowbox != NULL, FALSE);
#line 105 "/run/build/planner/src/Utils.vala"
	_tmp0_ = gtk_container_get_children ((GtkContainer*) flowbox);
#line 600 "Utils.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 105 "/run/build/planner/src/Utils.vala"
		element_collection = _tmp0_;
#line 105 "/run/build/planner/src/Utils.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 608 "Utils.c"
			GtkWidget* _tmp1_;
			GtkWidget* element = NULL;
#line 105 "/run/build/planner/src/Utils.vala"
			_tmp1_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 105 "/run/build/planner/src/Utils.vala"
			element = _tmp1_;
#line 615 "Utils.c"
			{
				WidgetsLabelChild* child = NULL;
				GtkWidget* _tmp2_;
				WidgetsLabelChild* _tmp3_;
				WidgetsLabelChild* _tmp4_;
				ObjectsLabel* _tmp5_;
				ObjectsLabel* _tmp6_;
				gint _tmp7_;
#line 106 "/run/build/planner/src/Utils.vala"
				_tmp2_ = element;
#line 106 "/run/build/planner/src/Utils.vala"
				_tmp3_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp2_, WIDGETS_TYPE_LABEL_CHILD) ? ((WidgetsLabelChild*) _tmp2_) : NULL);
#line 106 "/run/build/planner/src/Utils.vala"
				child = _tmp3_;
#line 107 "/run/build/planner/src/Utils.vala"
				_tmp4_ = child;
#line 107 "/run/build/planner/src/Utils.vala"
				_tmp5_ = widgets_label_child_get_label (_tmp4_);
#line 107 "/run/build/planner/src/Utils.vala"
				_tmp6_ = _tmp5_;
#line 107 "/run/build/planner/src/Utils.vala"
				_tmp7_ = _tmp6_->id;
#line 107 "/run/build/planner/src/Utils.vala"
				if (_tmp7_ == id) {
#line 108 "/run/build/planner/src/Utils.vala"
					result = TRUE;
#line 108 "/run/build/planner/src/Utils.vala"
					_g_object_unref0 (child);
#line 108 "/run/build/planner/src/Utils.vala"
					_g_object_unref0 (element);
#line 108 "/run/build/planner/src/Utils.vala"
					(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 108 "/run/build/planner/src/Utils.vala"
					return result;
#line 650 "Utils.c"
				}
#line 105 "/run/build/planner/src/Utils.vala"
				_g_object_unref0 (child);
#line 105 "/run/build/planner/src/Utils.vala"
				_g_object_unref0 (element);
#line 656 "Utils.c"
			}
		}
#line 105 "/run/build/planner/src/Utils.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 661 "Utils.c"
	}
#line 112 "/run/build/planner/src/Utils.vala"
	result = FALSE;
#line 112 "/run/build/planner/src/Utils.vala"
	return result;
#line 667 "Utils.c"
}


gboolean
utils_is_empty (Utils* self,
                GtkFlowBox* flowbox)
{
	gboolean result = FALSE;
	gint l = 0;
	GList* _tmp0_;
	gint _tmp3_;
#line 115 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 115 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (flowbox != NULL, FALSE);
#line 116 "/run/build/planner/src/Utils.vala"
	l = 0;
#line 117 "/run/build/planner/src/Utils.vala"
	_tmp0_ = gtk_container_get_children ((GtkContainer*) flowbox);
#line 687 "Utils.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 117 "/run/build/planner/src/Utils.vala"
		element_collection = _tmp0_;
#line 117 "/run/build/planner/src/Utils.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 695 "Utils.c"
			GtkWidget* _tmp1_;
			GtkWidget* element = NULL;
#line 117 "/run/build/planner/src/Utils.vala"
			_tmp1_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 117 "/run/build/planner/src/Utils.vala"
			element = _tmp1_;
#line 702 "Utils.c"
			{
				gint _tmp2_;
#line 118 "/run/build/planner/src/Utils.vala"
				_tmp2_ = l;
#line 118 "/run/build/planner/src/Utils.vala"
				l = _tmp2_ + 1;
#line 117 "/run/build/planner/src/Utils.vala"
				_g_object_unref0 (element);
#line 711 "Utils.c"
			}
		}
#line 117 "/run/build/planner/src/Utils.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 716 "Utils.c"
	}
#line 121 "/run/build/planner/src/Utils.vala"
	_tmp3_ = l;
#line 121 "/run/build/planner/src/Utils.vala"
	if (_tmp3_ <= 0) {
#line 122 "/run/build/planner/src/Utils.vala"
		result = TRUE;
#line 122 "/run/build/planner/src/Utils.vala"
		return result;
#line 726 "Utils.c"
	} else {
#line 124 "/run/build/planner/src/Utils.vala"
		result = FALSE;
#line 124 "/run/build/planner/src/Utils.vala"
		return result;
#line 732 "Utils.c"
	}
}


gboolean
utils_is_listbox_empty (Utils* self,
                        GtkListBox* listbox)
{
	gboolean result = FALSE;
	gint l = 0;
	GList* _tmp0_;
	gint _tmp9_;
#line 128 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 128 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (listbox != NULL, FALSE);
#line 129 "/run/build/planner/src/Utils.vala"
	l = 0;
#line 130 "/run/build/planner/src/Utils.vala"
	_tmp0_ = gtk_container_get_children ((GtkContainer*) listbox);
#line 753 "Utils.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 130 "/run/build/planner/src/Utils.vala"
		element_collection = _tmp0_;
#line 130 "/run/build/planner/src/Utils.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 761 "Utils.c"
			GtkWidget* _tmp1_;
			GtkWidget* element = NULL;
#line 130 "/run/build/planner/src/Utils.vala"
			_tmp1_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 130 "/run/build/planner/src/Utils.vala"
			element = _tmp1_;
#line 768 "Utils.c"
			{
				WidgetsTaskRow* item = NULL;
				GtkWidget* _tmp2_;
				WidgetsTaskRow* _tmp3_;
				WidgetsTaskRow* _tmp4_;
				ObjectsTask* _tmp5_;
				ObjectsTask* _tmp6_;
				gint _tmp7_;
#line 131 "/run/build/planner/src/Utils.vala"
				_tmp2_ = element;
#line 131 "/run/build/planner/src/Utils.vala"
				_tmp3_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp2_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp2_) : NULL);
#line 131 "/run/build/planner/src/Utils.vala"
				item = _tmp3_;
#line 133 "/run/build/planner/src/Utils.vala"
				_tmp4_ = item;
#line 133 "/run/build/planner/src/Utils.vala"
				_tmp5_ = widgets_task_row_get_task (_tmp4_);
#line 133 "/run/build/planner/src/Utils.vala"
				_tmp6_ = _tmp5_;
#line 133 "/run/build/planner/src/Utils.vala"
				_tmp7_ = _tmp6_->checked;
#line 133 "/run/build/planner/src/Utils.vala"
				if (_tmp7_ == 0) {
#line 793 "Utils.c"
					gint _tmp8_;
#line 134 "/run/build/planner/src/Utils.vala"
					_tmp8_ = l;
#line 134 "/run/build/planner/src/Utils.vala"
					l = _tmp8_ + 1;
#line 799 "Utils.c"
				}
#line 130 "/run/build/planner/src/Utils.vala"
				_g_object_unref0 (item);
#line 130 "/run/build/planner/src/Utils.vala"
				_g_object_unref0 (element);
#line 805 "Utils.c"
			}
		}
#line 130 "/run/build/planner/src/Utils.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 810 "Utils.c"
	}
#line 138 "/run/build/planner/src/Utils.vala"
	_tmp9_ = l;
#line 138 "/run/build/planner/src/Utils.vala"
	if (_tmp9_ <= 0) {
#line 139 "/run/build/planner/src/Utils.vala"
		result = TRUE;
#line 139 "/run/build/planner/src/Utils.vala"
		return result;
#line 820 "Utils.c"
	} else {
#line 141 "/run/build/planner/src/Utils.vala"
		result = FALSE;
#line 141 "/run/build/planner/src/Utils.vala"
		return result;
#line 826 "Utils.c"
	}
}


gboolean
utils_is_listbox_all_empty (Utils* self,
                            GtkListBox* listbox)
{
	gboolean result = FALSE;
	gint l = 0;
	GList* _tmp0_;
	gint _tmp3_;
#line 145 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 145 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (listbox != NULL, FALSE);
#line 146 "/run/build/planner/src/Utils.vala"
	l = 0;
#line 147 "/run/build/planner/src/Utils.vala"
	_tmp0_ = gtk_container_get_children ((GtkContainer*) listbox);
#line 847 "Utils.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 147 "/run/build/planner/src/Utils.vala"
		element_collection = _tmp0_;
#line 147 "/run/build/planner/src/Utils.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 855 "Utils.c"
			GtkWidget* _tmp1_;
			GtkWidget* element = NULL;
#line 147 "/run/build/planner/src/Utils.vala"
			_tmp1_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 147 "/run/build/planner/src/Utils.vala"
			element = _tmp1_;
#line 862 "Utils.c"
			{
				gint _tmp2_;
#line 148 "/run/build/planner/src/Utils.vala"
				_tmp2_ = l;
#line 148 "/run/build/planner/src/Utils.vala"
				l = _tmp2_ + 1;
#line 147 "/run/build/planner/src/Utils.vala"
				_g_object_unref0 (element);
#line 871 "Utils.c"
			}
		}
#line 147 "/run/build/planner/src/Utils.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 876 "Utils.c"
	}
#line 151 "/run/build/planner/src/Utils.vala"
	_tmp3_ = l;
#line 151 "/run/build/planner/src/Utils.vala"
	result = _tmp3_ <= 0;
#line 151 "/run/build/planner/src/Utils.vala"
	return result;
#line 884 "Utils.c"
}


gboolean
utils_is_task_repeted (Utils* self,
                       GtkListBox* listbox,
                       gint id)
{
	gboolean result = FALSE;
	GList* _tmp0_;
#line 154 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 154 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (listbox != NULL, FALSE);
#line 155 "/run/build/planner/src/Utils.vala"
	_tmp0_ = gtk_container_get_children ((GtkContainer*) listbox);
#line 901 "Utils.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 155 "/run/build/planner/src/Utils.vala"
		element_collection = _tmp0_;
#line 155 "/run/build/planner/src/Utils.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 909 "Utils.c"
			GtkWidget* _tmp1_;
			GtkWidget* element = NULL;
#line 155 "/run/build/planner/src/Utils.vala"
			_tmp1_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 155 "/run/build/planner/src/Utils.vala"
			element = _tmp1_;
#line 916 "Utils.c"
			{
				WidgetsTaskRow* item = NULL;
				GtkWidget* _tmp2_;
				WidgetsTaskRow* _tmp3_;
				WidgetsTaskRow* _tmp4_;
				ObjectsTask* _tmp5_;
				ObjectsTask* _tmp6_;
				gint _tmp7_;
#line 156 "/run/build/planner/src/Utils.vala"
				_tmp2_ = element;
#line 156 "/run/build/planner/src/Utils.vala"
				_tmp3_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp2_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp2_) : NULL);
#line 156 "/run/build/planner/src/Utils.vala"
				item = _tmp3_;
#line 158 "/run/build/planner/src/Utils.vala"
				_tmp4_ = item;
#line 158 "/run/build/planner/src/Utils.vala"
				_tmp5_ = widgets_task_row_get_task (_tmp4_);
#line 158 "/run/build/planner/src/Utils.vala"
				_tmp6_ = _tmp5_;
#line 158 "/run/build/planner/src/Utils.vala"
				_tmp7_ = _tmp6_->id;
#line 158 "/run/build/planner/src/Utils.vala"
				if (id == _tmp7_) {
#line 159 "/run/build/planner/src/Utils.vala"
					result = TRUE;
#line 159 "/run/build/planner/src/Utils.vala"
					_g_object_unref0 (item);
#line 159 "/run/build/planner/src/Utils.vala"
					_g_object_unref0 (element);
#line 159 "/run/build/planner/src/Utils.vala"
					(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 159 "/run/build/planner/src/Utils.vala"
					return result;
#line 951 "Utils.c"
				}
#line 155 "/run/build/planner/src/Utils.vala"
				_g_object_unref0 (item);
#line 155 "/run/build/planner/src/Utils.vala"
				_g_object_unref0 (element);
#line 957 "Utils.c"
			}
		}
#line 155 "/run/build/planner/src/Utils.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 962 "Utils.c"
	}
#line 163 "/run/build/planner/src/Utils.vala"
	result = FALSE;
#line 163 "/run/build/planner/src/Utils.vala"
	return result;
#line 968 "Utils.c"
}


gboolean
utils_is_tomorrow (Utils* self,
                   GDateTime* date_1)
{
	gboolean result = FALSE;
	GDateTime* date_2 = NULL;
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
	GDateTime* _tmp2_;
	GDateTime* _tmp3_;
	gboolean _tmp4_ = FALSE;
	GDateTime* _tmp5_;
#line 166 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 166 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (date_1 != NULL, FALSE);
#line 167 "/run/build/planner/src/Utils.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 167 "/run/build/planner/src/Utils.vala"
	_tmp1_ = _tmp0_;
#line 167 "/run/build/planner/src/Utils.vala"
	_tmp2_ = g_date_time_add_days (_tmp1_, 1);
#line 167 "/run/build/planner/src/Utils.vala"
	_tmp3_ = _tmp2_;
#line 167 "/run/build/planner/src/Utils.vala"
	_g_date_time_unref0 (_tmp1_);
#line 167 "/run/build/planner/src/Utils.vala"
	date_2 = _tmp3_;
#line 168 "/run/build/planner/src/Utils.vala"
	_tmp5_ = date_2;
#line 168 "/run/build/planner/src/Utils.vala"
	if (g_date_time_get_day_of_year (date_1) == g_date_time_get_day_of_year (_tmp5_)) {
#line 1004 "Utils.c"
		GDateTime* _tmp6_;
#line 168 "/run/build/planner/src/Utils.vala"
		_tmp6_ = date_2;
#line 168 "/run/build/planner/src/Utils.vala"
		_tmp4_ = g_date_time_get_year (date_1) == g_date_time_get_year (_tmp6_);
#line 1010 "Utils.c"
	} else {
#line 168 "/run/build/planner/src/Utils.vala"
		_tmp4_ = FALSE;
#line 1014 "Utils.c"
	}
#line 168 "/run/build/planner/src/Utils.vala"
	result = _tmp4_;
#line 168 "/run/build/planner/src/Utils.vala"
	_g_date_time_unref0 (date_2);
#line 168 "/run/build/planner/src/Utils.vala"
	return result;
#line 1022 "Utils.c"
}


gboolean
utils_is_today (Utils* self,
                GDateTime* date_1)
{
	gboolean result = FALSE;
	GDateTime* date_2 = NULL;
	GDateTime* _tmp0_;
	gboolean _tmp1_ = FALSE;
	GDateTime* _tmp2_;
#line 171 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 171 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (date_1 != NULL, FALSE);
#line 172 "/run/build/planner/src/Utils.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 172 "/run/build/planner/src/Utils.vala"
	date_2 = _tmp0_;
#line 173 "/run/build/planner/src/Utils.vala"
	_tmp2_ = date_2;
#line 173 "/run/build/planner/src/Utils.vala"
	if (g_date_time_get_day_of_year (date_1) == g_date_time_get_day_of_year (_tmp2_)) {
#line 1047 "Utils.c"
		GDateTime* _tmp3_;
#line 173 "/run/build/planner/src/Utils.vala"
		_tmp3_ = date_2;
#line 173 "/run/build/planner/src/Utils.vala"
		_tmp1_ = g_date_time_get_year (date_1) == g_date_time_get_year (_tmp3_);
#line 1053 "Utils.c"
	} else {
#line 173 "/run/build/planner/src/Utils.vala"
		_tmp1_ = FALSE;
#line 1057 "Utils.c"
	}
#line 173 "/run/build/planner/src/Utils.vala"
	result = _tmp1_;
#line 173 "/run/build/planner/src/Utils.vala"
	_g_date_time_unref0 (date_2);
#line 173 "/run/build/planner/src/Utils.vala"
	return result;
#line 1065 "Utils.c"
}


gboolean
utils_is_before_today (Utils* self,
                       GDateTime* date_1)
{
	gboolean result = FALSE;
	GDateTime* date_2 = NULL;
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
#line 176 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 176 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (date_1 != NULL, FALSE);
#line 177 "/run/build/planner/src/Utils.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 177 "/run/build/planner/src/Utils.vala"
	date_2 = _tmp0_;
#line 179 "/run/build/planner/src/Utils.vala"
	_tmp1_ = date_2;
#line 179 "/run/build/planner/src/Utils.vala"
	if (g_date_time_compare (date_1, _tmp1_) == -1) {
#line 180 "/run/build/planner/src/Utils.vala"
		result = TRUE;
#line 180 "/run/build/planner/src/Utils.vala"
		_g_date_time_unref0 (date_2);
#line 180 "/run/build/planner/src/Utils.vala"
		return result;
#line 1095 "Utils.c"
	}
#line 183 "/run/build/planner/src/Utils.vala"
	result = FALSE;
#line 183 "/run/build/planner/src/Utils.vala"
	_g_date_time_unref0 (date_2);
#line 183 "/run/build/planner/src/Utils.vala"
	return result;
#line 1103 "Utils.c"
}


gboolean
utils_is_current_month (Utils* self,
                        GDateTime* date)
{
	gboolean result = FALSE;
	GDateTime* now = NULL;
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
#line 186 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 186 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (date != NULL, FALSE);
#line 187 "/run/build/planner/src/Utils.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 187 "/run/build/planner/src/Utils.vala"
	now = _tmp0_;
#line 189 "/run/build/planner/src/Utils.vala"
	_tmp1_ = now;
#line 189 "/run/build/planner/src/Utils.vala"
	if (g_date_time_get_year (date) == g_date_time_get_year (_tmp1_)) {
#line 1127 "Utils.c"
		GDateTime* _tmp2_;
#line 190 "/run/build/planner/src/Utils.vala"
		_tmp2_ = now;
#line 190 "/run/build/planner/src/Utils.vala"
		if (g_date_time_get_month (date) == g_date_time_get_month (_tmp2_)) {
#line 191 "/run/build/planner/src/Utils.vala"
			result = TRUE;
#line 191 "/run/build/planner/src/Utils.vala"
			_g_date_time_unref0 (now);
#line 191 "/run/build/planner/src/Utils.vala"
			return result;
#line 1139 "Utils.c"
		} else {
#line 193 "/run/build/planner/src/Utils.vala"
			result = FALSE;
#line 193 "/run/build/planner/src/Utils.vala"
			_g_date_time_unref0 (now);
#line 193 "/run/build/planner/src/Utils.vala"
			return result;
#line 1147 "Utils.c"
		}
	} else {
#line 196 "/run/build/planner/src/Utils.vala"
		result = FALSE;
#line 196 "/run/build/planner/src/Utils.vala"
		_g_date_time_unref0 (now);
#line 196 "/run/build/planner/src/Utils.vala"
		return result;
#line 1156 "Utils.c"
	}
#line 186 "/run/build/planner/src/Utils.vala"
	_g_date_time_unref0 (now);
#line 1160 "Utils.c"
}


gboolean
utils_is_upcoming (Utils* self,
                   GDateTime* date)
{
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
#line 200 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 200 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (date != NULL, FALSE);
#line 201 "/run/build/planner/src/Utils.vala"
	if (utils_is_today (self, date) == FALSE) {
#line 201 "/run/build/planner/src/Utils.vala"
		_tmp0_ = utils_is_before_today (self, date) == FALSE;
#line 1178 "Utils.c"
	} else {
#line 201 "/run/build/planner/src/Utils.vala"
		_tmp0_ = FALSE;
#line 1182 "Utils.c"
	}
#line 201 "/run/build/planner/src/Utils.vala"
	if (_tmp0_) {
#line 202 "/run/build/planner/src/Utils.vala"
		result = TRUE;
#line 202 "/run/build/planner/src/Utils.vala"
		return result;
#line 1190 "Utils.c"
	} else {
#line 204 "/run/build/planner/src/Utils.vala"
		result = FALSE;
#line 204 "/run/build/planner/src/Utils.vala"
		return result;
#line 1196 "Utils.c"
	}
}


static glong
string_strnlen (gchar* str,
                glong maxlen)
{
	glong result = 0L;
	gchar* end = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
#line 1392 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = memchr (str, 0, (gsize) maxlen);
#line 1392 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	end = _tmp0_;
#line 1393 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp1_ = end;
#line 1393 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (_tmp1_ == NULL) {
#line 1394 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = maxlen;
#line 1394 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 1221 "Utils.c"
	} else {
		gchar* _tmp2_;
#line 1396 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp2_ = end;
#line 1396 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = (glong) (_tmp2_ - str);
#line 1396 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 1230 "Utils.c"
	}
}


static gchar*
string_substring (const gchar* self,
                  glong offset,
                  glong len)
{
	gchar* result = NULL;
	glong string_length = 0L;
	gboolean _tmp0_ = FALSE;
	glong _tmp6_;
	gchar* _tmp7_;
#line 1403 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1405 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (offset >= ((glong) 0)) {
#line 1405 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp0_ = len >= ((glong) 0);
#line 1251 "Utils.c"
	} else {
#line 1405 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp0_ = FALSE;
#line 1255 "Utils.c"
	}
#line 1405 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (_tmp0_) {
#line 1407 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		string_length = string_strnlen ((gchar*) self, offset + len);
#line 1261 "Utils.c"
	} else {
		gint _tmp1_;
		gint _tmp2_;
#line 1409 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp1_ = strlen (self);
#line 1409 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp2_ = _tmp1_;
#line 1409 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		string_length = (glong) _tmp2_;
#line 1271 "Utils.c"
	}
#line 1412 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (offset < ((glong) 0)) {
#line 1275 "Utils.c"
		glong _tmp3_;
#line 1413 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp3_ = string_length;
#line 1413 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		offset = _tmp3_ + offset;
#line 1414 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		g_return_val_if_fail (offset >= ((glong) 0), NULL);
#line 1283 "Utils.c"
	} else {
		glong _tmp4_;
#line 1416 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp4_ = string_length;
#line 1416 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		g_return_val_if_fail (offset <= _tmp4_, NULL);
#line 1290 "Utils.c"
	}
#line 1418 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (len < ((glong) 0)) {
#line 1294 "Utils.c"
		glong _tmp5_;
#line 1419 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp5_ = string_length;
#line 1419 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		len = _tmp5_ - offset;
#line 1300 "Utils.c"
	}
#line 1421 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp6_ = string_length;
#line 1421 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail ((offset + len) <= _tmp6_, NULL);
#line 1422 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp7_ = g_strndup (((gchar*) self) + offset, (gsize) len);
#line 1422 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _tmp7_;
#line 1422 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 1312 "Utils.c"
}


gchar*
utils_first_letter_to_up (Utils* self,
                          const gchar* text)
{
	gchar* result = NULL;
	gchar* l = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
#line 208 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 208 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (text != NULL, NULL);
#line 209 "/run/build/planner/src/Utils.vala"
	_tmp0_ = string_substring (text, (glong) 0, (glong) 1);
#line 209 "/run/build/planner/src/Utils.vala"
	l = _tmp0_;
#line 210 "/run/build/planner/src/Utils.vala"
	_tmp1_ = g_utf8_strup (l, (gssize) -1);
#line 210 "/run/build/planner/src/Utils.vala"
	_tmp2_ = _tmp1_;
#line 210 "/run/build/planner/src/Utils.vala"
	_tmp3_ = string_substring (text, (glong) 1, (glong) -1);
#line 210 "/run/build/planner/src/Utils.vala"
	_tmp4_ = _tmp3_;
#line 210 "/run/build/planner/src/Utils.vala"
	_tmp5_ = g_strconcat (_tmp2_, _tmp4_, NULL);
#line 210 "/run/build/planner/src/Utils.vala"
	_tmp6_ = _tmp5_;
#line 210 "/run/build/planner/src/Utils.vala"
	_g_free0 (_tmp4_);
#line 210 "/run/build/planner/src/Utils.vala"
	_g_free0 (_tmp2_);
#line 210 "/run/build/planner/src/Utils.vala"
	result = _tmp6_;
#line 210 "/run/build/planner/src/Utils.vala"
	_g_free0 (l);
#line 210 "/run/build/planner/src/Utils.vala"
	return result;
#line 1359 "Utils.c"
}


gint
utils_get_days_of_month (Utils* self,
                         gint index)
{
	gint result = 0;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp2_ = FALSE;
	gboolean _tmp3_ = FALSE;
	gboolean _tmp4_ = FALSE;
	gboolean _tmp5_ = FALSE;
#line 213 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 214 "/run/build/planner/src/Utils.vala"
	if (index == 1) {
#line 214 "/run/build/planner/src/Utils.vala"
		_tmp5_ = TRUE;
#line 1380 "Utils.c"
	} else {
#line 214 "/run/build/planner/src/Utils.vala"
		_tmp5_ = index == 3;
#line 1384 "Utils.c"
	}
#line 214 "/run/build/planner/src/Utils.vala"
	if (_tmp5_) {
#line 214 "/run/build/planner/src/Utils.vala"
		_tmp4_ = TRUE;
#line 1390 "Utils.c"
	} else {
#line 214 "/run/build/planner/src/Utils.vala"
		_tmp4_ = index == 5;
#line 1394 "Utils.c"
	}
#line 214 "/run/build/planner/src/Utils.vala"
	if (_tmp4_) {
#line 214 "/run/build/planner/src/Utils.vala"
		_tmp3_ = TRUE;
#line 1400 "Utils.c"
	} else {
#line 214 "/run/build/planner/src/Utils.vala"
		_tmp3_ = index == 7;
#line 1404 "Utils.c"
	}
#line 214 "/run/build/planner/src/Utils.vala"
	if (_tmp3_) {
#line 214 "/run/build/planner/src/Utils.vala"
		_tmp2_ = TRUE;
#line 1410 "Utils.c"
	} else {
#line 214 "/run/build/planner/src/Utils.vala"
		_tmp2_ = index == 8;
#line 1414 "Utils.c"
	}
#line 214 "/run/build/planner/src/Utils.vala"
	if (_tmp2_) {
#line 214 "/run/build/planner/src/Utils.vala"
		_tmp1_ = TRUE;
#line 1420 "Utils.c"
	} else {
#line 214 "/run/build/planner/src/Utils.vala"
		_tmp1_ = index == 10;
#line 1424 "Utils.c"
	}
#line 214 "/run/build/planner/src/Utils.vala"
	if (_tmp1_) {
#line 214 "/run/build/planner/src/Utils.vala"
		_tmp0_ = TRUE;
#line 1430 "Utils.c"
	} else {
#line 214 "/run/build/planner/src/Utils.vala"
		_tmp0_ = index == 12;
#line 1434 "Utils.c"
	}
#line 214 "/run/build/planner/src/Utils.vala"
	if (_tmp0_) {
#line 215 "/run/build/planner/src/Utils.vala"
		result = 31;
#line 215 "/run/build/planner/src/Utils.vala"
		return result;
#line 1442 "Utils.c"
	} else {
		gboolean _tmp6_ = FALSE;
		gboolean _tmp7_ = FALSE;
		gboolean _tmp8_ = FALSE;
		gboolean _tmp9_ = FALSE;
#line 216 "/run/build/planner/src/Utils.vala"
		if (index == 2) {
#line 216 "/run/build/planner/src/Utils.vala"
			_tmp9_ = TRUE;
#line 1452 "Utils.c"
		} else {
#line 216 "/run/build/planner/src/Utils.vala"
			_tmp9_ = index == 4;
#line 1456 "Utils.c"
		}
#line 216 "/run/build/planner/src/Utils.vala"
		if (_tmp9_) {
#line 216 "/run/build/planner/src/Utils.vala"
			_tmp8_ = TRUE;
#line 1462 "Utils.c"
		} else {
#line 216 "/run/build/planner/src/Utils.vala"
			_tmp8_ = index == 6;
#line 1466 "Utils.c"
		}
#line 216 "/run/build/planner/src/Utils.vala"
		if (_tmp8_) {
#line 216 "/run/build/planner/src/Utils.vala"
			_tmp7_ = TRUE;
#line 1472 "Utils.c"
		} else {
#line 216 "/run/build/planner/src/Utils.vala"
			_tmp7_ = index == 9;
#line 1476 "Utils.c"
		}
#line 216 "/run/build/planner/src/Utils.vala"
		if (_tmp7_) {
#line 216 "/run/build/planner/src/Utils.vala"
			_tmp6_ = TRUE;
#line 1482 "Utils.c"
		} else {
#line 216 "/run/build/planner/src/Utils.vala"
			_tmp6_ = index == 11;
#line 1486 "Utils.c"
		}
#line 216 "/run/build/planner/src/Utils.vala"
		if (_tmp6_) {
#line 217 "/run/build/planner/src/Utils.vala"
			result = 30;
#line 217 "/run/build/planner/src/Utils.vala"
			return result;
#line 1494 "Utils.c"
		} else {
			GDateTime* date = NULL;
			GDateTime* _tmp10_;
			gint year = 0;
			GDateTime* _tmp11_;
			gint _tmp12_;
#line 219 "/run/build/planner/src/Utils.vala"
			_tmp10_ = g_date_time_new_now_local ();
#line 219 "/run/build/planner/src/Utils.vala"
			date = _tmp10_;
#line 220 "/run/build/planner/src/Utils.vala"
			_tmp11_ = date;
#line 220 "/run/build/planner/src/Utils.vala"
			year = g_date_time_get_year (_tmp11_);
#line 222 "/run/build/planner/src/Utils.vala"
			_tmp12_ = year;
#line 222 "/run/build/planner/src/Utils.vala"
			if ((_tmp12_ % 4) == 0) {
#line 1513 "Utils.c"
				gint _tmp13_;
#line 223 "/run/build/planner/src/Utils.vala"
				_tmp13_ = year;
#line 223 "/run/build/planner/src/Utils.vala"
				if ((_tmp13_ % 100) == 0) {
#line 1519 "Utils.c"
					gint _tmp14_;
#line 224 "/run/build/planner/src/Utils.vala"
					_tmp14_ = year;
#line 224 "/run/build/planner/src/Utils.vala"
					if ((_tmp14_ % 400) == 0) {
#line 225 "/run/build/planner/src/Utils.vala"
						result = 29;
#line 225 "/run/build/planner/src/Utils.vala"
						_g_date_time_unref0 (date);
#line 225 "/run/build/planner/src/Utils.vala"
						return result;
#line 1531 "Utils.c"
					} else {
#line 227 "/run/build/planner/src/Utils.vala"
						result = 28;
#line 227 "/run/build/planner/src/Utils.vala"
						_g_date_time_unref0 (date);
#line 227 "/run/build/planner/src/Utils.vala"
						return result;
#line 1539 "Utils.c"
					}
				} else {
#line 230 "/run/build/planner/src/Utils.vala"
					result = 28;
#line 230 "/run/build/planner/src/Utils.vala"
					_g_date_time_unref0 (date);
#line 230 "/run/build/planner/src/Utils.vala"
					return result;
#line 1548 "Utils.c"
				}
			} else {
#line 233 "/run/build/planner/src/Utils.vala"
				result = 28;
#line 233 "/run/build/planner/src/Utils.vala"
				_g_date_time_unref0 (date);
#line 233 "/run/build/planner/src/Utils.vala"
				return result;
#line 1557 "Utils.c"
			}
#line 216 "/run/build/planner/src/Utils.vala"
			_g_date_time_unref0 (date);
#line 1561 "Utils.c"
		}
	}
}


gchar*
utils_get_weather_icon_name (Utils* self,
                             const gchar* key)
{
	gchar* result = NULL;
	GeeHashMap* weather_icon_name = NULL;
	GeeHashMap* _tmp0_;
	gpointer _tmp1_;
#line 238 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 238 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (key != NULL, NULL);
#line 239 "/run/build/planner/src/Utils.vala"
	_tmp0_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 239 "/run/build/planner/src/Utils.vala"
	weather_icon_name = _tmp0_;
#line 241 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "01d", "weather-clear-symbolic");
#line 242 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "01n", "weather-clear-night-symbolic");
#line 243 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "02d", "weather-few-clouds-symbolic");
#line 244 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "02n", "weather-few-clouds-night-symbolic");
#line 245 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "03d", "weather-overcast-symbolic");
#line 246 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "03n", "weather-overcast-symbolic");
#line 247 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "04d", "weather-overcast-symbolic");
#line 248 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "04n", "weather-overcast-symbolic");
#line 249 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "09d", "weather-showers-symbolic");
#line 250 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "09n", "weather-showers-symbolic");
#line 251 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "10d", "weather-showers-scattered-symbolic");
#line 252 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "10n", "weather-showers-scattered-symbolic");
#line 253 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "11d", "weather-storm-symbolic");
#line 254 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "11n", "weather-storm-symbolic");
#line 255 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "13d", "weather-snow-symbolic");
#line 256 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "13n", "weather-snow-symbolic");
#line 257 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "50d", "weather-fog-symbolic");
#line 258 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) weather_icon_name, "50n", "weather-fog-symbolic");
#line 260 "/run/build/planner/src/Utils.vala"
	_tmp1_ = gee_abstract_map_get ((GeeAbstractMap*) weather_icon_name, key);
#line 260 "/run/build/planner/src/Utils.vala"
	result = (gchar*) _tmp1_;
#line 260 "/run/build/planner/src/Utils.vala"
	_g_object_unref0 (weather_icon_name);
#line 260 "/run/build/planner/src/Utils.vala"
	return result;
#line 1627 "Utils.c"
}


gchar*
utils_get_default_date_format (Utils* self,
                               const gchar* date_string)
{
	gchar* result = NULL;
	GDateTime* now = NULL;
	GDateTime* _tmp0_;
	GDateTime* date = NULL;
	GTimeZone* _tmp1_;
	GTimeZone* _tmp2_;
	GDateTime* _tmp3_;
	GDateTime* _tmp4_;
	GDateTime* _tmp5_;
	GDateTime* _tmp6_;
#line 263 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 263 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (date_string != NULL, NULL);
#line 264 "/run/build/planner/src/Utils.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 264 "/run/build/planner/src/Utils.vala"
	now = _tmp0_;
#line 265 "/run/build/planner/src/Utils.vala"
	_tmp1_ = g_time_zone_new_local ();
#line 265 "/run/build/planner/src/Utils.vala"
	_tmp2_ = _tmp1_;
#line 265 "/run/build/planner/src/Utils.vala"
	_tmp3_ = g_date_time_new_from_iso8601 (date_string, _tmp2_);
#line 265 "/run/build/planner/src/Utils.vala"
	_tmp4_ = _tmp3_;
#line 265 "/run/build/planner/src/Utils.vala"
	_g_time_zone_unref0 (_tmp2_);
#line 265 "/run/build/planner/src/Utils.vala"
	date = _tmp4_;
#line 267 "/run/build/planner/src/Utils.vala"
	_tmp5_ = date;
#line 267 "/run/build/planner/src/Utils.vala"
	_tmp6_ = now;
#line 267 "/run/build/planner/src/Utils.vala"
	if (g_date_time_get_year (_tmp5_) == g_date_time_get_year (_tmp6_)) {
#line 1671 "Utils.c"
		GDateTime* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
		gchar* _tmp11_;
#line 268 "/run/build/planner/src/Utils.vala"
		_tmp7_ = date;
#line 268 "/run/build/planner/src/Utils.vala"
		_tmp8_ = granite_date_time_get_default_date_format (FALSE, TRUE, FALSE);
#line 268 "/run/build/planner/src/Utils.vala"
		_tmp9_ = _tmp8_;
#line 268 "/run/build/planner/src/Utils.vala"
		_tmp10_ = g_date_time_format (_tmp7_, _tmp9_);
#line 268 "/run/build/planner/src/Utils.vala"
		_tmp11_ = _tmp10_;
#line 268 "/run/build/planner/src/Utils.vala"
		_g_free0 (_tmp9_);
#line 268 "/run/build/planner/src/Utils.vala"
		result = _tmp11_;
#line 268 "/run/build/planner/src/Utils.vala"
		_g_date_time_unref0 (date);
#line 268 "/run/build/planner/src/Utils.vala"
		_g_date_time_unref0 (now);
#line 268 "/run/build/planner/src/Utils.vala"
		return result;
#line 1697 "Utils.c"
	} else {
		GDateTime* _tmp12_;
		gchar* _tmp13_;
		gchar* _tmp14_;
		gchar* _tmp15_;
		gchar* _tmp16_;
#line 270 "/run/build/planner/src/Utils.vala"
		_tmp12_ = date;
#line 270 "/run/build/planner/src/Utils.vala"
		_tmp13_ = granite_date_time_get_default_date_format (FALSE, TRUE, TRUE);
#line 270 "/run/build/planner/src/Utils.vala"
		_tmp14_ = _tmp13_;
#line 270 "/run/build/planner/src/Utils.vala"
		_tmp15_ = g_date_time_format (_tmp12_, _tmp14_);
#line 270 "/run/build/planner/src/Utils.vala"
		_tmp16_ = _tmp15_;
#line 270 "/run/build/planner/src/Utils.vala"
		_g_free0 (_tmp14_);
#line 270 "/run/build/planner/src/Utils.vala"
		result = _tmp16_;
#line 270 "/run/build/planner/src/Utils.vala"
		_g_date_time_unref0 (date);
#line 270 "/run/build/planner/src/Utils.vala"
		_g_date_time_unref0 (now);
#line 270 "/run/build/planner/src/Utils.vala"
		return result;
#line 1724 "Utils.c"
	}
#line 263 "/run/build/planner/src/Utils.vala"
	_g_date_time_unref0 (date);
#line 263 "/run/build/planner/src/Utils.vala"
	_g_date_time_unref0 (now);
#line 1730 "Utils.c"
}


gchar*
utils_get_default_date_format_from_date (Utils* self,
                                         GDateTime* date)
{
	gchar* result = NULL;
	GDateTime* now = NULL;
	GDateTime* _tmp0_;
	GDateTime* _tmp1_;
#line 274 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 274 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (date != NULL, NULL);
#line 275 "/run/build/planner/src/Utils.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 275 "/run/build/planner/src/Utils.vala"
	now = _tmp0_;
#line 277 "/run/build/planner/src/Utils.vala"
	_tmp1_ = now;
#line 277 "/run/build/planner/src/Utils.vala"
	if (g_date_time_get_year (date) == g_date_time_get_year (_tmp1_)) {
#line 1754 "Utils.c"
		gchar* _tmp2_;
		gchar* _tmp3_;
		gchar* _tmp4_;
		gchar* _tmp5_;
#line 278 "/run/build/planner/src/Utils.vala"
		_tmp2_ = granite_date_time_get_default_date_format (FALSE, TRUE, FALSE);
#line 278 "/run/build/planner/src/Utils.vala"
		_tmp3_ = _tmp2_;
#line 278 "/run/build/planner/src/Utils.vala"
		_tmp4_ = g_date_time_format (date, _tmp3_);
#line 278 "/run/build/planner/src/Utils.vala"
		_tmp5_ = _tmp4_;
#line 278 "/run/build/planner/src/Utils.vala"
		_g_free0 (_tmp3_);
#line 278 "/run/build/planner/src/Utils.vala"
		result = _tmp5_;
#line 278 "/run/build/planner/src/Utils.vala"
		_g_date_time_unref0 (now);
#line 278 "/run/build/planner/src/Utils.vala"
		return result;
#line 1775 "Utils.c"
	} else {
		gchar* _tmp6_;
		gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
#line 280 "/run/build/planner/src/Utils.vala"
		_tmp6_ = granite_date_time_get_default_date_format (FALSE, TRUE, TRUE);
#line 280 "/run/build/planner/src/Utils.vala"
		_tmp7_ = _tmp6_;
#line 280 "/run/build/planner/src/Utils.vala"
		_tmp8_ = g_date_time_format (date, _tmp7_);
#line 280 "/run/build/planner/src/Utils.vala"
		_tmp9_ = _tmp8_;
#line 280 "/run/build/planner/src/Utils.vala"
		_g_free0 (_tmp7_);
#line 280 "/run/build/planner/src/Utils.vala"
		result = _tmp9_;
#line 280 "/run/build/planner/src/Utils.vala"
		_g_date_time_unref0 (now);
#line 280 "/run/build/planner/src/Utils.vala"
		return result;
#line 1797 "Utils.c"
	}
#line 274 "/run/build/planner/src/Utils.vala"
	_g_date_time_unref0 (now);
#line 1801 "Utils.c"
}


gchar*
utils_get_relative_default_date_format_from_date (Utils* self,
                                                  GDateTime* date)
{
	gchar* result = NULL;
	Utils* _tmp0_;
#line 284 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 284 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (date != NULL, NULL);
#line 285 "/run/build/planner/src/Utils.vala"
	_tmp0_ = application_utils;
#line 285 "/run/build/planner/src/Utils.vala"
	if (utils_is_today (_tmp0_, date)) {
#line 1819 "Utils.c"
		gchar* _tmp1_;
#line 286 "/run/build/planner/src/Utils.vala"
		_tmp1_ = g_strdup (_ ("Today"));
#line 286 "/run/build/planner/src/Utils.vala"
		result = _tmp1_;
#line 286 "/run/build/planner/src/Utils.vala"
		return result;
#line 1827 "Utils.c"
	} else {
		Utils* _tmp2_;
#line 287 "/run/build/planner/src/Utils.vala"
		_tmp2_ = application_utils;
#line 287 "/run/build/planner/src/Utils.vala"
		if (utils_is_tomorrow (_tmp2_, date)) {
#line 1834 "Utils.c"
			gchar* _tmp3_;
#line 288 "/run/build/planner/src/Utils.vala"
			_tmp3_ = g_strdup (_ ("Tomorrow"));
#line 288 "/run/build/planner/src/Utils.vala"
			result = _tmp3_;
#line 288 "/run/build/planner/src/Utils.vala"
			return result;
#line 1842 "Utils.c"
		} else {
			Utils* _tmp4_;
			gchar* _tmp5_;
#line 290 "/run/build/planner/src/Utils.vala"
			_tmp4_ = application_utils;
#line 290 "/run/build/planner/src/Utils.vala"
			_tmp5_ = utils_get_default_date_format_from_date (_tmp4_, date);
#line 290 "/run/build/planner/src/Utils.vala"
			result = _tmp5_;
#line 290 "/run/build/planner/src/Utils.vala"
			return result;
#line 1854 "Utils.c"
		}
	}
}


gchar*
utils_get_theme (Utils* self,
                 gint key)
{
	gchar* result = NULL;
	GeeHashMap* themes = NULL;
	GeeHashMap* _tmp0_;
	gpointer _tmp1_;
#line 295 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 296 "/run/build/planner/src/Utils.vala"
	_tmp0_ = gee_hash_map_new (G_TYPE_INT, NULL, NULL, G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 296 "/run/build/planner/src/Utils.vala"
	themes = _tmp0_;
#line 298 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) themes, (gpointer) ((gintptr) 1), "#ffe16b");
#line 299 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) themes, (gpointer) ((gintptr) 2), "#3d4248");
#line 300 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) themes, (gpointer) ((gintptr) 3), "#64baff");
#line 301 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) themes, (gpointer) ((gintptr) 4), "#ed5353");
#line 302 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) themes, (gpointer) ((gintptr) 5), "#9bdb4d");
#line 303 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) themes, (gpointer) ((gintptr) 6), "#667885");
#line 304 "/run/build/planner/src/Utils.vala"
	gee_abstract_map_set ((GeeAbstractMap*) themes, (gpointer) ((gintptr) 7), "#FA0080");
#line 306 "/run/build/planner/src/Utils.vala"
	_tmp1_ = gee_abstract_map_get ((GeeAbstractMap*) themes, (gpointer) ((gintptr) key));
#line 306 "/run/build/planner/src/Utils.vala"
	result = (gchar*) _tmp1_;
#line 306 "/run/build/planner/src/Utils.vala"
	_g_object_unref0 (themes);
#line 306 "/run/build/planner/src/Utils.vala"
	return result;
#line 1896 "Utils.c"
}


void
utils_apply_theme (Utils* self,
                   const gchar* hex)
{
	gchar* THEME_CLASS = NULL;
	gchar* _tmp0_;
	GtkCssProvider* provider = NULL;
	GtkCssProvider* _tmp1_;
	GError * _inner_error_ = NULL;
#line 309 "/run/build/planner/src/Utils.vala"
	g_return_if_fail (self != NULL);
#line 309 "/run/build/planner/src/Utils.vala"
	g_return_if_fail (hex != NULL);
#line 310 "/run/build/planner/src/Utils.vala"
	_tmp0_ = g_strdup ("\n" \
"            @define-color color_header %s;\n" \
"            @define-color color_selected %s;\n" \
"            @define-color color_text %s;\n" \
"        ");
#line 310 "/run/build/planner/src/Utils.vala"
	THEME_CLASS = _tmp0_;
#line 316 "/run/build/planner/src/Utils.vala"
	_tmp1_ = gtk_css_provider_new ();
#line 316 "/run/build/planner/src/Utils.vala"
	provider = _tmp1_;
#line 1921 "Utils.c"
	{
		gchar* colored_css = NULL;
		const gchar* _tmp2_;
		gchar* _tmp3_;
		gchar* _tmp4_;
		gchar* _tmp5_;
		gchar* _tmp6_;
		GtkCssProvider* _tmp7_;
		const gchar* _tmp8_;
		const gchar* _tmp9_;
		gint _tmp10_;
		gint _tmp11_;
		GdkScreen* _tmp12_;
		GtkCssProvider* _tmp13_;
#line 319 "/run/build/planner/src/Utils.vala"
		_tmp2_ = THEME_CLASS;
#line 319 "/run/build/planner/src/Utils.vala"
		_tmp3_ = utils_convert_invert (self, hex);
#line 319 "/run/build/planner/src/Utils.vala"
		_tmp4_ = _tmp3_;
#line 319 "/run/build/planner/src/Utils.vala"
		_tmp5_ = g_strdup_printf (_tmp2_, hex, hex, _tmp4_);
#line 319 "/run/build/planner/src/Utils.vala"
		_tmp6_ = _tmp5_;
#line 319 "/run/build/planner/src/Utils.vala"
		_g_free0 (_tmp4_);
#line 319 "/run/build/planner/src/Utils.vala"
		colored_css = _tmp6_;
#line 325 "/run/build/planner/src/Utils.vala"
		_tmp7_ = provider;
#line 325 "/run/build/planner/src/Utils.vala"
		_tmp8_ = colored_css;
#line 325 "/run/build/planner/src/Utils.vala"
		_tmp9_ = colored_css;
#line 325 "/run/build/planner/src/Utils.vala"
		_tmp10_ = strlen (_tmp9_);
#line 325 "/run/build/planner/src/Utils.vala"
		_tmp11_ = _tmp10_;
#line 325 "/run/build/planner/src/Utils.vala"
		gtk_css_provider_load_from_data (_tmp7_, _tmp8_, (gssize) _tmp11_, &_inner_error_);
#line 325 "/run/build/planner/src/Utils.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 325 "/run/build/planner/src/Utils.vala"
			_g_free0 (colored_css);
#line 1966 "Utils.c"
			goto __catch1_g_error;
		}
#line 327 "/run/build/planner/src/Utils.vala"
		_tmp12_ = gdk_screen_get_default ();
#line 327 "/run/build/planner/src/Utils.vala"
		_tmp13_ = provider;
#line 327 "/run/build/planner/src/Utils.vala"
		gtk_style_context_add_provider_for_screen (_tmp12_, (GtkStyleProvider*) _tmp13_, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 318 "/run/build/planner/src/Utils.vala"
		_g_free0 (colored_css);
#line 1977 "Utils.c"
	}
	goto __finally1;
	__catch1_g_error:
	{
		GError* e = NULL;
#line 318 "/run/build/planner/src/Utils.vala"
		e = _inner_error_;
#line 318 "/run/build/planner/src/Utils.vala"
		_inner_error_ = NULL;
#line 329 "/run/build/planner/src/Utils.vala"
		_g_error_free0 (e);
#line 329 "/run/build/planner/src/Utils.vala"
		_g_object_unref0 (provider);
#line 329 "/run/build/planner/src/Utils.vala"
		_g_free0 (THEME_CLASS);
#line 329 "/run/build/planner/src/Utils.vala"
		return;
#line 1995 "Utils.c"
	}
	__finally1:
#line 318 "/run/build/planner/src/Utils.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 318 "/run/build/planner/src/Utils.vala"
		_g_object_unref0 (provider);
#line 318 "/run/build/planner/src/Utils.vala"
		_g_free0 (THEME_CLASS);
#line 318 "/run/build/planner/src/Utils.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 318 "/run/build/planner/src/Utils.vala"
		g_clear_error (&_inner_error_);
#line 318 "/run/build/planner/src/Utils.vala"
		return;
#line 2010 "Utils.c"
	}
#line 309 "/run/build/planner/src/Utils.vala"
	_g_object_unref0 (provider);
#line 309 "/run/build/planner/src/Utils.vala"
	_g_free0 (THEME_CLASS);
#line 2016 "Utils.c"
}


GDateTime*
utils_strip_time (Utils* self,
                  GDateTime* datetime)
{
	GDateTime* result = NULL;
	GDateTime* _tmp0_;
#line 333 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 333 "/run/build/planner/src/Utils.vala"
	g_return_val_if_fail (datetime != NULL, NULL);
#line 334 "/run/build/planner/src/Utils.vala"
	_tmp0_ = g_date_time_add_full (datetime, 0, 0, 0, -g_date_time_get_hour (datetime), -g_date_time_get_minute (datetime), (gdouble) (-g_date_time_get_second (datetime)));
#line 334 "/run/build/planner/src/Utils.vala"
	result = _tmp0_;
#line 334 "/run/build/planner/src/Utils.vala"
	return result;
#line 2036 "Utils.c"
}


static void
utils_class_init (UtilsClass * klass)
{
#line 22 "/run/build/planner/src/Utils.vala"
	utils_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Utils.vala"
	G_OBJECT_CLASS (klass)->finalize = utils_finalize;
#line 2047 "Utils.c"
}


static void
utils_instance_init (Utils * self)
{
}


static void
utils_finalize (GObject * obj)
{
	Utils * self;
#line 22 "/run/build/planner/src/Utils.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_UTILS, Utils);
#line 23 "/run/build/planner/src/Utils.vala"
	_g_free0 (self->CACHE_FOLDER);
#line 24 "/run/build/planner/src/Utils.vala"
	_g_free0 (self->PROFILE_FOLDER);
#line 22 "/run/build/planner/src/Utils.vala"
	G_OBJECT_CLASS (utils_parent_class)->finalize (obj);
#line 2069 "Utils.c"
}


GType
utils_get_type (void)
{
	static volatile gsize utils_type_id__volatile = 0;
	if (g_once_init_enter (&utils_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UtilsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) utils_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Utils), 0, (GInstanceInitFunc) utils_instance_init, NULL };
		GType utils_type_id;
		utils_type_id = g_type_register_static (G_TYPE_OBJECT, "Utils", &g_define_type_info, 0);
		g_once_init_leave (&utils_type_id__volatile, utils_type_id);
	}
	return utils_type_id__volatile;
}



