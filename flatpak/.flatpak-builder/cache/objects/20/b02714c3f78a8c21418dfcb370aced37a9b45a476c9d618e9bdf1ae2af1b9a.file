/* GesturesUtils.c generated by valac 0.40.11, the Vala compiler
 * generated from GesturesUtils.vala, do not modify */

/* -*- Mode: vala; indent-tabs-mode: nil; tab-width: 4 -*-*/
/*-
 * Copyright (c) 2014-2015 Maya Developers (http://launchpad.net/maya)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authored by: Corentin NoÃ«l <corentin@elementaryos.org>
 */
/* TODO: deprecate this in favor of the build-in Gtk 3.14 functions.*/


#include <glib.h>
#include <glib-object.h>
#include <gdk/gdk.h>
#include <float.h>
#include <math.h>
#include <stdlib.h>
#include <gio/gio.h>


#define MAYA_MODEL_TYPE_CALENDAR_MODEL (maya_model_calendar_model_get_type ())
#define MAYA_MODEL_CALENDAR_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MAYA_MODEL_TYPE_CALENDAR_MODEL, MayaModelCalendarModel))
#define MAYA_MODEL_CALENDAR_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MAYA_MODEL_TYPE_CALENDAR_MODEL, MayaModelCalendarModelClass))
#define MAYA_MODEL_IS_CALENDAR_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MAYA_MODEL_TYPE_CALENDAR_MODEL))
#define MAYA_MODEL_IS_CALENDAR_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MAYA_MODEL_TYPE_CALENDAR_MODEL))
#define MAYA_MODEL_CALENDAR_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MAYA_MODEL_TYPE_CALENDAR_MODEL, MayaModelCalendarModelClass))

typedef struct _MayaModelCalendarModel MayaModelCalendarModel;
typedef struct _MayaModelCalendarModelClass MayaModelCalendarModelClass;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _MayaGesturesUtilsResetTimerData MayaGesturesUtilsResetTimerData;

struct _MayaGesturesUtilsResetTimerData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
};


extern gboolean maya_gestures_utils_has_scrolled;
gboolean maya_gestures_utils_has_scrolled = FALSE;

#define MAYA_GESTURES_UTILS_interval ((guint) 500)
gboolean maya_gestures_utils_on_scroll_event (GdkEventScroll* event);
GType maya_model_calendar_model_get_type (void) G_GNUC_CONST;
MayaModelCalendarModel* maya_model_calendar_model_get_default (void);
void maya_model_calendar_model_change_month (MayaModelCalendarModel* self,
                                             gint relative);
void maya_gestures_utils_reset_timer (GAsyncReadyCallback _callback_,
                                      gpointer _user_data_);
void maya_gestures_utils_reset_timer_finish (GAsyncResult* _res_);
static void maya_gestures_utils_reset_timer_data_free (gpointer _data);
static void maya_gestures_utils_reset_timer_async_ready_wrapper (GObject *source_object,
                                                          GAsyncResult *res,
                                                          void *user_data);
static gboolean maya_gestures_utils_reset_timer_co (MayaGesturesUtilsResetTimerData* _data_);
static gboolean __lambda18_ (void);
static gboolean ___lambda18__gsource_func (gpointer self);


gboolean
maya_gestures_utils_on_scroll_event (GdkEventScroll* event)
{
	gboolean result = FALSE;
	gdouble delta_x = 0.0;
	gdouble delta_y = 0.0;
	gdouble _tmp0_ = 0.0;
	gdouble _tmp1_ = 0.0;
	gdouble choice = 0.0;
	gdouble _tmp2_;
	gdouble _tmp3_;
	gdouble _tmp4_;
	gboolean _tmp6_ = FALSE;
	gdouble _tmp7_;
	gboolean _tmp12_;
	gdouble _tmp13_;
	gdouble _tmp16_;
#line 27 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 30 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	gdk_event_get_scroll_deltas ((GdkEvent*) event, &_tmp0_, &_tmp1_);
#line 30 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	delta_x = _tmp0_;
#line 30 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	delta_y = _tmp1_;
#line 32 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	_tmp2_ = delta_x;
#line 32 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	choice = _tmp2_;
#line 33 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	_tmp3_ = delta_x;
#line 33 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	_tmp4_ = delta_y;
#line 33 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	if (abs ((gint) _tmp3_) < abs ((gint) _tmp4_)) {
#line 114 "GesturesUtils.c"
		gdouble _tmp5_;
#line 34 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		_tmp5_ = delta_y;
#line 34 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		choice = _tmp5_;
#line 120 "GesturesUtils.c"
	}
#line 38 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	_tmp7_ = choice;
#line 38 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	if (_tmp7_ == ((gdouble) 1)) {
#line 38 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		_tmp6_ = TRUE;
#line 128 "GesturesUtils.c"
	} else {
		gdouble _tmp8_;
#line 38 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		_tmp8_ = choice;
#line 38 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		_tmp6_ = _tmp8_ == ((gdouble) -1);
#line 135 "GesturesUtils.c"
	}
#line 38 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	if (_tmp6_) {
#line 139 "GesturesUtils.c"
		MayaModelCalendarModel* _tmp9_;
		MayaModelCalendarModel* _tmp10_;
		gdouble _tmp11_;
#line 39 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		_tmp9_ = maya_model_calendar_model_get_default ();
#line 39 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		_tmp10_ = _tmp9_;
#line 39 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		_tmp11_ = choice;
#line 39 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		maya_model_calendar_model_change_month (_tmp10_, (gint) _tmp11_);
#line 39 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		_g_object_unref0 (_tmp10_);
#line 40 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		result = TRUE;
#line 40 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		return result;
#line 157 "GesturesUtils.c"
	}
#line 43 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	_tmp12_ = maya_gestures_utils_has_scrolled;
#line 43 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	if (_tmp12_ == TRUE) {
#line 44 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		result = TRUE;
#line 44 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		return result;
#line 167 "GesturesUtils.c"
	}
#line 47 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	_tmp13_ = choice;
#line 47 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	if (_tmp13_ > 0.3) {
#line 173 "GesturesUtils.c"
		MayaModelCalendarModel* _tmp14_;
		MayaModelCalendarModel* _tmp15_;
#line 48 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		maya_gestures_utils_reset_timer (NULL, NULL);
#line 49 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		_tmp14_ = maya_model_calendar_model_get_default ();
#line 49 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		_tmp15_ = _tmp14_;
#line 49 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		maya_model_calendar_model_change_month (_tmp15_, 1);
#line 49 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		_g_object_unref0 (_tmp15_);
#line 50 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		result = TRUE;
#line 50 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		return result;
#line 190 "GesturesUtils.c"
	}
#line 53 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	_tmp16_ = choice;
#line 53 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	if (_tmp16_ < (-0.3)) {
#line 196 "GesturesUtils.c"
		MayaModelCalendarModel* _tmp17_;
		MayaModelCalendarModel* _tmp18_;
#line 54 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		maya_gestures_utils_reset_timer (NULL, NULL);
#line 55 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		_tmp17_ = maya_model_calendar_model_get_default ();
#line 55 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		_tmp18_ = _tmp17_;
#line 55 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		maya_model_calendar_model_change_month (_tmp18_, -1);
#line 55 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		_g_object_unref0 (_tmp18_);
#line 56 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		result = TRUE;
#line 56 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		return result;
#line 213 "GesturesUtils.c"
	}
#line 59 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	result = FALSE;
#line 59 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	return result;
#line 219 "GesturesUtils.c"
}


static void
maya_gestures_utils_reset_timer_data_free (gpointer _data)
{
	MayaGesturesUtilsResetTimerData* _data_;
	_data_ = _data;
	g_slice_free (MayaGesturesUtilsResetTimerData, _data_);
}


static void
maya_gestures_utils_reset_timer_async_ready_wrapper (GObject *source_object,
                                                     GAsyncResult *res,
                                                     void *user_data)
{
	MayaGesturesUtilsResetTimerData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


void
maya_gestures_utils_reset_timer (GAsyncReadyCallback _callback_,
                                 gpointer _user_data_)
{
	MayaGesturesUtilsResetTimerData* _data_;
	_data_ = g_slice_new0 (MayaGesturesUtilsResetTimerData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (NULL, NULL, maya_gestures_utils_reset_timer_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, maya_gestures_utils_reset_timer_data_free);
	maya_gestures_utils_reset_timer_co (_data_);
}


void
maya_gestures_utils_reset_timer_finish (GAsyncResult* _res_)
{
	MayaGesturesUtilsResetTimerData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}


static gboolean
__lambda18_ (void)
{
	gboolean result = FALSE;
#line 65 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	maya_gestures_utils_has_scrolled = FALSE;
#line 66 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	result = FALSE;
#line 66 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	return result;
#line 280 "GesturesUtils.c"
}


static gboolean
___lambda18__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda18_ ();
#line 64 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	return result;
#line 291 "GesturesUtils.c"
}


static gboolean
maya_gestures_utils_reset_timer_co (MayaGesturesUtilsResetTimerData* _data_)
{
#line 62 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	switch (_data_->_state_) {
#line 62 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		case 0:
#line 302 "GesturesUtils.c"
		goto _state_0;
		default:
#line 62 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		g_assert_not_reached ();
#line 307 "GesturesUtils.c"
	}
	_state_0:
#line 63 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	maya_gestures_utils_has_scrolled = TRUE;
#line 64 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, MAYA_GESTURES_UTILS_interval, ___lambda18__gsource_func, NULL, NULL);
#line 62 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 62 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	if (_data_->_state_ != 0) {
#line 62 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 62 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 322 "GesturesUtils.c"
		}
	}
#line 62 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	g_object_unref (_data_->_async_result);
#line 62 "/run/build/io.elementary.calendar/core/GesturesUtils.vala"
	return FALSE;
#line 329 "GesturesUtils.c"
}



