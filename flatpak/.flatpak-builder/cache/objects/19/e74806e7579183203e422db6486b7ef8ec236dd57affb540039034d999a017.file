/* unity-filters.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-filters.vala, do not modify */

/*
 * Copyright (C) 2011 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Neil Jagdish Patel <neil.patel@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include "unity.h"
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <dee.h>
#include <float.h>
#include <math.h>

enum  {
	UNITY_FILTER_0_PROPERTY,
	UNITY_FILTER_ID_PROPERTY,
	UNITY_FILTER_DISPLAY_NAME_PROPERTY,
	UNITY_FILTER_ICON_HINT_PROPERTY,
	UNITY_FILTER_RENDERER_PROPERTY,
	UNITY_FILTER_VISIBLE_PROPERTY,
	UNITY_FILTER_COLLAPSED_PROPERTY,
	UNITY_FILTER_FILTERING_PROPERTY,
	UNITY_FILTER_NUM_PROPERTIES
};
static GParamSpec* unity_filter_properties[UNITY_FILTER_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define UNITY_INTERNAL_TYPE_FILTER_COLUMN (unity_internal_filter_column_get_type ())
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
#define _g_variant_type_free0(var) ((var == NULL) ? NULL : (var = (g_variant_type_free (var), NULL)))
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
#define _g_variant_builder_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_builder_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
enum  {
	UNITY_FILTER_CHANGED_SIGNAL,
	UNITY_FILTER_NUM_SIGNALS
};
static guint unity_filter_signals[UNITY_FILTER_NUM_SIGNALS] = {0};
enum  {
	UNITY_FILTER_OPTION_0_PROPERTY,
	UNITY_FILTER_OPTION_ID_PROPERTY,
	UNITY_FILTER_OPTION_DISPLAY_NAME_PROPERTY,
	UNITY_FILTER_OPTION_ICON_HINT_PROPERTY,
	UNITY_FILTER_OPTION_ACTIVE_PROPERTY,
	UNITY_FILTER_OPTION_NUM_PROPERTIES
};
static GParamSpec* unity_filter_option_properties[UNITY_FILTER_OPTION_NUM_PROPERTIES];
enum  {
	UNITY_OPTIONS_FILTER_0_PROPERTY,
	UNITY_OPTIONS_FILTER_SORT_TYPE_PROPERTY,
	UNITY_OPTIONS_FILTER_SHOW_ALL_BUTTON_PROPERTY,
	UNITY_OPTIONS_FILTER_NUM_PROPERTIES
};
static GParamSpec* unity_options_filter_properties[UNITY_OPTIONS_FILTER_NUM_PROPERTIES];
#define _g_variant_iter_free0(var) ((var == NULL) ? NULL : (var = (g_variant_iter_free (var), NULL)))
enum  {
	UNITY_RADIO_OPTION_FILTER_0_PROPERTY,
	UNITY_RADIO_OPTION_FILTER_NUM_PROPERTIES
};
static GParamSpec* unity_radio_option_filter_properties[UNITY_RADIO_OPTION_FILTER_NUM_PROPERTIES];
enum  {
	UNITY_CHECK_OPTION_FILTER_0_PROPERTY,
	UNITY_CHECK_OPTION_FILTER_NUM_PROPERTIES
};
static GParamSpec* unity_check_option_filter_properties[UNITY_CHECK_OPTION_FILTER_NUM_PROPERTIES];
enum  {
	UNITY_CHECK_OPTION_FILTER_COMPACT_0_PROPERTY,
	UNITY_CHECK_OPTION_FILTER_COMPACT_NUM_PROPERTIES
};
static GParamSpec* unity_check_option_filter_compact_properties[UNITY_CHECK_OPTION_FILTER_COMPACT_NUM_PROPERTIES];
enum  {
	UNITY_RATINGS_FILTER_0_PROPERTY,
	UNITY_RATINGS_FILTER_RATING_PROPERTY,
	UNITY_RATINGS_FILTER_NUM_PROPERTIES
};
static GParamSpec* unity_ratings_filter_properties[UNITY_RATINGS_FILTER_NUM_PROPERTIES];
enum  {
	UNITY_MULTI_RANGE_FILTER_0_PROPERTY,
	UNITY_MULTI_RANGE_FILTER_NUM_PROPERTIES
};
static GParamSpec* unity_multi_range_filter_properties[UNITY_MULTI_RANGE_FILTER_NUM_PROPERTIES];

struct _UnityFilterPrivate {
	gchar* _id;
	gchar* _display_name;
	GIcon* _icon_hint;
	UnityFilterRenderer _renderer;
	gboolean _visible;
	gboolean _collapsed;
	gboolean _filtering;
	DeeModel* _model;
	DeeModelIter* _iter;
};

typedef enum  {
	UNITY_INTERNAL_FILTER_COLUMN_ID,
	UNITY_INTERNAL_FILTER_COLUMN_DISPLAY_NAME,
	UNITY_INTERNAL_FILTER_COLUMN_ICON_HINT,
	UNITY_INTERNAL_FILTER_COLUMN_RENDERER_NAME,
	UNITY_INTERNAL_FILTER_COLUMN_RENDERER_STATE,
	UNITY_INTERNAL_FILTER_COLUMN_VISIBLE,
	UNITY_INTERNAL_FILTER_COLUMN_COLLAPSED,
	UNITY_INTERNAL_FILTER_COLUMN_FILTERING,
	UNITY_INTERNAL_FILTER_COLUMN_N_COLUMNS
} UnityInternalFilterColumn;

struct _UnityFilterOptionPrivate {
	gchar* _id;
	gchar* _display_name;
	GIcon* _icon_hint;
	gboolean _active;
};

struct _UnityOptionsFilterPrivate {
	UnityOptionsFilterSortType _sort_type;
	gboolean _show_all_button;
};

struct _UnityRatingsFilterPrivate {
	gfloat _rating;
};


static gpointer unity_filter_parent_class = NULL;
static DeeSerializableIface * unity_filter_dee_serializable_parent_iface = NULL;
static gpointer unity_filter_option_parent_class = NULL;
static gpointer unity_options_filter_parent_class = NULL;
static gpointer unity_radio_option_filter_parent_class = NULL;
static gpointer unity_check_option_filter_parent_class = NULL;
static gpointer unity_check_option_filter_compact_parent_class = NULL;
static gpointer unity_ratings_filter_parent_class = NULL;
static gpointer unity_multi_range_filter_parent_class = NULL;

#define UNITY_FILTER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_FILTER, UnityFilterPrivate))
void unity_filter_set_model_and_iter (UnityFilter* self,
                                      DeeModel* model,
                                      DeeModelIter* iter);
static void unity_filter_on_row_changed (UnityFilter* self,
                                  DeeModel* model,
                                  DeeModelIter* iter);
static void _unity_filter_on_row_changed_dee_model_row_changed (DeeModel* _sender,
                                                         DeeModelIter* iter,
                                                         gpointer self);
GType unity_internal_filter_column_get_type (void) G_GNUC_CONST;
void unity_filter_set_filtering (UnityFilter* self,
                                 gboolean value);
void unity_filter_update (UnityFilter* self,
                          GVariant* properties);
static GVariant* unity_filter_real_serialize (DeeSerializable* base);
gchar* unity_internal_utils_icon_to_string (GIcon* icon);
GVariant* unity_internal_utils_hash_table_to_asv (GHashTable* hash);
GHashTable* unity_filter_get_hints (UnityFilter* self);
static GHashTable* unity_filter_real_get_hints (UnityFilter* self);
static void unity_filter_real_update (UnityFilter* self,
                               GVariant* properties);
UnityFilter* unity_filter_for_filter_model_row (DeeModel* model,
                                                DeeModelIter* iter);
void unity_filter_set_display_name (UnityFilter* self,
                                    const gchar* value);
void unity_filter_set_collapsed (UnityFilter* self,
                                 gboolean value);
static void unity_filter_finalize (GObject * obj);
static void _vala_unity_filter_get_property (GObject * object,
                                      guint property_id,
                                      GValue * value,
                                      GParamSpec * pspec);
static void _vala_unity_filter_set_property (GObject * object,
                                      guint property_id,
                                      const GValue * value,
                                      GParamSpec * pspec);
#define UNITY_FILTER_OPTION_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_FILTER_OPTION, UnityFilterOptionPrivate))
static void unity_filter_option_finalize (GObject * obj);
static void _vala_unity_filter_option_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec);
static void _vala_unity_filter_option_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec);
#define UNITY_OPTIONS_FILTER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_OPTIONS_FILTER, UnityOptionsFilterPrivate))
static void _g_object_unref0_ (gpointer var);
static inline void _g_list_free__g_object_unref0_ (GList* self);
static gint unity_options_filter_sort_by_display_name (UnityFilterOption* f1,
                                                UnityFilterOption* f2);
static gint _unity_options_filter_sort_by_display_name_gcompare_func (gconstpointer a,
                                                               gconstpointer b);
static gint unity_options_filter_sort_by_id (UnityFilterOption* f1,
                                      UnityFilterOption* f2);
static gint _unity_options_filter_sort_by_id_gcompare_func (gconstpointer a,
                                                     gconstpointer b);
static void unity_options_filter_real_update (UnityFilter* base,
                                       GVariant* properties);
void unity_options_filter_load_or_update_options (UnityOptionsFilter* self,
                                                  GVariant* array);
void unity_options_filter_find_and_update_option (UnityOptionsFilter* self,
                                                  const gchar* id,
                                                  const gchar* name,
                                                  const gchar* icon_hint_s,
                                                  gboolean active);
static void _vala_array_add2 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static gboolean _vala_string_array_contains (gchar* * stack,
                                      int stack_length,
                                      gchar* needle);
static GHashTable* unity_options_filter_real_get_hints (UnityFilter* base);
static void _g_free0_ (gpointer var);
static void _g_variant_unref0_ (gpointer var);
static void unity_options_filter_finalize (GObject * obj);
static void _vala_unity_options_filter_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec);
static void _vala_unity_options_filter_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec);
#define UNITY_RATINGS_FILTER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_RATINGS_FILTER, UnityRatingsFilterPrivate))
static void unity_ratings_filter_real_update (UnityFilter* base,
                                       GVariant* properties);
void unity_ratings_filter_set_rating (UnityRatingsFilter* self,
                                      gfloat value);
static GHashTable* unity_ratings_filter_real_get_hints (UnityFilter* base);
static GVariant* _variant_new15 (gdouble value);
static void unity_ratings_filter_finalize (GObject * obj);
static void _vala_unity_ratings_filter_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec);
static void _vala_unity_ratings_filter_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);


const gchar*
unity_filter_renderer_to_string (UnityFilterRenderer renderer)
{
	const gchar* result = NULL;
	switch (renderer) {
		case UNITY_FILTER_RENDERER_CHECK_OPTIONS:
		{
			result = "filter-checkoption";
			return result;
		}
		case UNITY_FILTER_RENDERER_CHECK_OPTIONS_COMPACT:
		{
			result = "filter-checkoption-compact";
			return result;
		}
		case UNITY_FILTER_RENDERER_RADIO_OPTIONS:
		{
			result = "filter-radiooption";
			return result;
		}
		case UNITY_FILTER_RENDERER_RATINGS:
		{
			result = "filter-ratings";
			return result;
		}
		case UNITY_FILTER_RENDERER_MULTIRANGE:
		{
			result = "filter-multirange";
			return result;
		}
		default:
		{
			result = "invalid-renderer";
			return result;
		}
	}
}


UnityFilterRenderer
unity_filter_renderer_from_string (const gchar* renderer_name)
{
	UnityFilterRenderer result = 0;
	const gchar* _tmp0_;
	GQuark _tmp2_ = 0U;
	static GQuark _tmp1_label0 = 0;
	static GQuark _tmp1_label1 = 0;
	static GQuark _tmp1_label2 = 0;
	static GQuark _tmp1_label3 = 0;
	static GQuark _tmp1_label4 = 0;
	g_return_val_if_fail (renderer_name != NULL, 0);
	_tmp0_ = renderer_name;
	_tmp2_ = (NULL == _tmp0_) ? 0 : g_quark_from_string (_tmp0_);
	if (_tmp2_ == ((0 != _tmp1_label0) ? _tmp1_label0 : (_tmp1_label0 = g_quark_from_static_string ("filter-checkoption")))) {
		switch (0) {
			default:
			{
				result = UNITY_FILTER_RENDERER_CHECK_OPTIONS;
				return result;
			}
		}
	} else if (_tmp2_ == ((0 != _tmp1_label1) ? _tmp1_label1 : (_tmp1_label1 = g_quark_from_static_string ("filter-checkoption-compact")))) {
		switch (0) {
			default:
			{
				result = UNITY_FILTER_RENDERER_CHECK_OPTIONS_COMPACT;
				return result;
			}
		}
	} else if (_tmp2_ == ((0 != _tmp1_label2) ? _tmp1_label2 : (_tmp1_label2 = g_quark_from_static_string ("filter-radiooption")))) {
		switch (0) {
			default:
			{
				result = UNITY_FILTER_RENDERER_RADIO_OPTIONS;
				return result;
			}
		}
	} else if (_tmp2_ == ((0 != _tmp1_label3) ? _tmp1_label3 : (_tmp1_label3 = g_quark_from_static_string ("filter-ratings")))) {
		switch (0) {
			default:
			{
				result = UNITY_FILTER_RENDERER_RATINGS;
				return result;
			}
		}
	} else if (_tmp2_ == ((0 != _tmp1_label4) ? _tmp1_label4 : (_tmp1_label4 = g_quark_from_static_string ("filter-multirange")))) {
		switch (0) {
			default:
			{
				result = UNITY_FILTER_RENDERER_MULTIRANGE;
				return result;
			}
		}
	} else {
		switch (0) {
			default:
			{
				g_warning ("unity-filters.vala:57: Unknown filter renderer: %s", renderer_name);
				result = UNITY_FILTER_RENDERER_RADIO_OPTIONS;
				return result;
			}
		}
	}
}


GType
unity_filter_renderer_get_type (void)
{
	static volatile gsize unity_filter_renderer_type_id__volatile = 0;
	if (g_once_init_enter (&unity_filter_renderer_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_FILTER_RENDERER_CHECK_OPTIONS, "UNITY_FILTER_RENDERER_CHECK_OPTIONS", "check-options"}, {UNITY_FILTER_RENDERER_RADIO_OPTIONS, "UNITY_FILTER_RENDERER_RADIO_OPTIONS", "radio-options"}, {UNITY_FILTER_RENDERER_MULTIRANGE, "UNITY_FILTER_RENDERER_MULTIRANGE", "multirange"}, {UNITY_FILTER_RENDERER_RATINGS, "UNITY_FILTER_RENDERER_RATINGS", "ratings"}, {UNITY_FILTER_RENDERER_CHECK_OPTIONS_COMPACT, "UNITY_FILTER_RENDERER_CHECK_OPTIONS_COMPACT", "check-options-compact"}, {0, NULL, NULL}};
		GType unity_filter_renderer_type_id;
		unity_filter_renderer_type_id = g_enum_register_static ("UnityFilterRenderer", values);
		g_once_init_leave (&unity_filter_renderer_type_id__volatile, unity_filter_renderer_type_id);
	}
	return unity_filter_renderer_type_id__volatile;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
_unity_filter_on_row_changed_dee_model_row_changed (DeeModel* _sender,
                                                    DeeModelIter* iter,
                                                    gpointer self)
{
	unity_filter_on_row_changed ((UnityFilter*) self, _sender, iter);
}


void
unity_filter_set_model_and_iter (UnityFilter* self,
                                 DeeModel* model,
                                 DeeModelIter* iter)
{
	DeeModel* _tmp0_;
	DeeModel* _tmp1_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (model != NULL);
	g_return_if_fail (iter != NULL);
	_tmp0_ = _g_object_ref0 (model);
	_g_object_unref0 (self->priv->_model);
	self->priv->_model = _tmp0_;
	self->priv->_iter = iter;
	_tmp1_ = self->priv->_model;
	g_signal_connect_object (_tmp1_, "row-changed", (GCallback) _unity_filter_on_row_changed_dee_model_row_changed, self, 0);
	unity_filter_on_row_changed (self, model, iter);
}


static void
unity_filter_on_row_changed (UnityFilter* self,
                             DeeModel* model,
                             DeeModelIter* iter)
{
	DeeModelIter* _tmp0_;
	GVariant* properties = NULL;
	GVariant* _tmp1_;
	GVariant* _tmp2_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (model != NULL);
	g_return_if_fail (iter != NULL);
	_tmp0_ = self->priv->_iter;
	if (iter != _tmp0_) {
		return;
	}
	unity_filter_set_filtering (self, dee_model_get_bool (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_FILTERING));
	_tmp1_ = dee_model_get_value (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_RENDERER_STATE);
	properties = _tmp1_;
	_tmp2_ = properties;
	unity_filter_update (self, _tmp2_);
	_g_variant_unref0 (properties);
}


static GVariant*
unity_filter_real_serialize (DeeSerializable* base)
{
	UnityFilter * self;
	GVariant* result = NULL;
	GVariantBuilder* vb = NULL;
	GVariantType* _tmp0_;
	GVariantType* _tmp1_;
	GVariantBuilder* _tmp2_;
	GVariantBuilder* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	GIcon* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	UnityFilterRenderer _tmp9_;
	const gchar* _tmp10_;
	GHashTable* _tmp11_;
	GHashTable* _tmp12_;
	GVariant* _tmp13_;
	GVariant* _tmp14_;
	gboolean _tmp15_;
	gboolean _tmp16_;
	gboolean _tmp17_;
	GVariant* _tmp18_;
	self = (UnityFilter*) base;
	_tmp0_ = g_variant_type_new ("(ssssa{sv}bbb)");
	_tmp1_ = _tmp0_;
	_tmp2_ = g_variant_builder_new (_tmp1_);
	_tmp3_ = _tmp2_;
	_g_variant_type_free0 (_tmp1_);
	vb = _tmp3_;
	_tmp4_ = self->priv->_id;
	g_variant_builder_add (vb, "s", _tmp4_, NULL);
	_tmp5_ = self->priv->_display_name;
	g_variant_builder_add (vb, "s", _tmp5_, NULL);
	_tmp6_ = self->priv->_icon_hint;
	_tmp7_ = unity_internal_utils_icon_to_string (_tmp6_);
	_tmp8_ = _tmp7_;
	g_variant_builder_add (vb, "s", _tmp8_, NULL);
	_g_free0 (_tmp8_);
	_tmp9_ = self->priv->_renderer;
	_tmp10_ = unity_filter_renderer_to_string (_tmp9_);
	g_variant_builder_add (vb, "s", _tmp10_, NULL);
	_tmp11_ = unity_filter_get_hints (self);
	_tmp12_ = _tmp11_;
	_tmp13_ = unity_internal_utils_hash_table_to_asv (_tmp12_);
	_tmp14_ = _tmp13_;
	g_variant_builder_add (vb, "@a{sv}", _tmp14_, NULL);
	_g_variant_unref0 (_tmp14_);
	_g_hash_table_unref0 (_tmp12_);
	_tmp15_ = self->priv->_visible;
	g_variant_builder_add (vb, "b", _tmp15_, NULL);
	_tmp16_ = self->priv->_collapsed;
	g_variant_builder_add (vb, "b", _tmp16_, NULL);
	_tmp17_ = self->priv->_filtering;
	g_variant_builder_add (vb, "b", _tmp17_, NULL);
	_tmp18_ = g_variant_builder_end (vb);
	g_variant_ref_sink (_tmp18_);
	result = _tmp18_;
	_g_variant_builder_unref0 (vb);
	return result;
}


static GHashTable*
unity_filter_real_get_hints (UnityFilter* self)
{
	g_critical ("Type `%s' does not implement abstract method `unity_filter_get_hints'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
	return NULL;
}


GHashTable*
unity_filter_get_hints (UnityFilter* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_FILTER_GET_CLASS (self)->get_hints (self);
}


static void
unity_filter_real_update (UnityFilter* self,
                          GVariant* properties)
{
	g_critical ("Type `%s' does not implement abstract method `unity_filter_update'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
	return;
}


void
unity_filter_update (UnityFilter* self,
                     GVariant* properties)
{
	g_return_if_fail (self != NULL);
	UNITY_FILTER_GET_CLASS (self)->update (self, properties);
}


UnityFilter*
unity_filter_for_filter_model_row (DeeModel* model,
                                   DeeModelIter* iter)
{
	UnityFilter* result = NULL;
	gchar* icon_hint = NULL;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	GIcon* icon = NULL;
	UnityFilter* filter = NULL;
	UnityFilterRenderer renderer = 0;
	const gchar* _tmp10_;
	UnityFilterRenderer _tmp11_;
	UnityFilter* _tmp32_;
	GVariant* properties = NULL;
	GVariant* _tmp33_;
	UnityFilter* _tmp34_;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (model != NULL, NULL);
	g_return_val_if_fail (iter != NULL, NULL);
	_tmp0_ = dee_model_get_string (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_ICON_HINT);
	_tmp1_ = g_strdup (_tmp0_);
	icon_hint = _tmp1_;
	icon = NULL;
	{
		const gchar* _tmp2_;
		_tmp2_ = icon_hint;
		if (g_strcmp0 (_tmp2_, "") != 0) {
			GIcon* _tmp3_ = NULL;
			const gchar* _tmp4_;
			GIcon* _tmp5_;
			GIcon* _tmp6_;
			_tmp4_ = icon_hint;
			_tmp5_ = g_icon_new_for_string (_tmp4_, &_inner_error_);
			_tmp3_ = _tmp5_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				goto __catch17_g_error;
			}
			_tmp6_ = _tmp3_;
			_tmp3_ = NULL;
			_g_object_unref0 (icon);
			icon = _tmp6_;
			_g_object_unref0 (_tmp3_);
		}
	}
	goto __finally17;
	__catch17_g_error:
	{
		GError* e = NULL;
		const gchar* _tmp7_;
		GError* _tmp8_;
		const gchar* _tmp9_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp7_ = icon_hint;
		_tmp8_ = e;
		_tmp9_ = _tmp8_->message;
		g_warning ("unity-filters.vala:137: Error parsing GIcon data '%s': %s", _tmp7_, _tmp9_);
		_g_error_free0 (e);
	}
	__finally17:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		_g_object_unref0 (icon);
		_g_free0 (icon_hint);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return NULL;
	}
	filter = NULL;
	_tmp10_ = dee_model_get_string (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_RENDERER_NAME);
	renderer = unity_filter_renderer_from_string (_tmp10_);
	_tmp11_ = renderer;
	switch (_tmp11_) {
		case UNITY_FILTER_RENDERER_RATINGS:
		{
			const gchar* _tmp12_;
			const gchar* _tmp13_;
			GIcon* _tmp14_;
			UnityRatingsFilter* _tmp15_;
			_tmp12_ = dee_model_get_string (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_ID);
			_tmp13_ = dee_model_get_string (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_DISPLAY_NAME);
			_tmp14_ = icon;
			_tmp15_ = unity_ratings_filter_new (_tmp12_, _tmp13_, _tmp14_, FALSE);
			_g_object_unref0 (filter);
			filter = (UnityFilter*) _tmp15_;
			break;
		}
		case UNITY_FILTER_RENDERER_RADIO_OPTIONS:
		{
			const gchar* _tmp16_;
			const gchar* _tmp17_;
			GIcon* _tmp18_;
			UnityRadioOptionFilter* _tmp19_;
			_tmp16_ = dee_model_get_string (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_ID);
			_tmp17_ = dee_model_get_string (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_DISPLAY_NAME);
			_tmp18_ = icon;
			_tmp19_ = unity_radio_option_filter_new (_tmp16_, _tmp17_, _tmp18_, FALSE);
			_g_object_unref0 (filter);
			filter = (UnityFilter*) _tmp19_;
			break;
		}
		case UNITY_FILTER_RENDERER_CHECK_OPTIONS:
		{
			const gchar* _tmp20_;
			const gchar* _tmp21_;
			GIcon* _tmp22_;
			UnityCheckOptionFilter* _tmp23_;
			_tmp20_ = dee_model_get_string (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_ID);
			_tmp21_ = dee_model_get_string (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_DISPLAY_NAME);
			_tmp22_ = icon;
			_tmp23_ = unity_check_option_filter_new (_tmp20_, _tmp21_, _tmp22_, FALSE);
			_g_object_unref0 (filter);
			filter = (UnityFilter*) _tmp23_;
			break;
		}
		case UNITY_FILTER_RENDERER_CHECK_OPTIONS_COMPACT:
		{
			const gchar* _tmp24_;
			const gchar* _tmp25_;
			GIcon* _tmp26_;
			UnityCheckOptionFilterCompact* _tmp27_;
			_tmp24_ = dee_model_get_string (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_ID);
			_tmp25_ = dee_model_get_string (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_DISPLAY_NAME);
			_tmp26_ = icon;
			_tmp27_ = unity_check_option_filter_compact_new (_tmp24_, _tmp25_, _tmp26_, FALSE);
			_g_object_unref0 (filter);
			filter = (UnityFilter*) _tmp27_;
			break;
		}
		case UNITY_FILTER_RENDERER_MULTIRANGE:
		{
			const gchar* _tmp28_;
			const gchar* _tmp29_;
			GIcon* _tmp30_;
			UnityMultiRangeFilter* _tmp31_;
			_tmp28_ = dee_model_get_string (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_ID);
			_tmp29_ = dee_model_get_string (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_DISPLAY_NAME);
			_tmp30_ = icon;
			_tmp31_ = unity_multi_range_filter_new (_tmp28_, _tmp29_, _tmp30_, FALSE);
			_g_object_unref0 (filter);
			filter = (UnityFilter*) _tmp31_;
			break;
		}
		default:
		break;
	}
	_tmp32_ = filter;
	unity_filter_set_filtering (_tmp32_, dee_model_get_bool (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_FILTERING));
	_tmp33_ = dee_model_get_value (model, iter, (guint) UNITY_INTERNAL_FILTER_COLUMN_RENDERER_STATE);
	properties = _tmp33_;
	_tmp34_ = filter;
	unity_filter_update (_tmp34_, properties);
	result = filter;
	_g_variant_unref0 (properties);
	_g_object_unref0 (icon);
	_g_free0 (icon_hint);
	return result;
}


UnityFilter*
unity_filter_construct (GType object_type)
{
	UnityFilter * self = NULL;
	self = (UnityFilter*) g_object_new (object_type, NULL);
	return self;
}


const gchar*
unity_filter_get_id (UnityFilter* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_id;
	result = _tmp0_;
	return result;
}


static void
unity_filter_set_id (UnityFilter* self,
                     const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_filter_get_id (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_id);
		self->priv->_id = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_filter_properties[UNITY_FILTER_ID_PROPERTY]);
	}
}


const gchar*
unity_filter_get_display_name (UnityFilter* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_display_name;
	result = _tmp0_;
	return result;
}


void
unity_filter_set_display_name (UnityFilter* self,
                               const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_filter_get_display_name (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_display_name);
		self->priv->_display_name = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_filter_properties[UNITY_FILTER_DISPLAY_NAME_PROPERTY]);
	}
}


GIcon*
unity_filter_get_icon_hint (UnityFilter* self)
{
	GIcon* result;
	GIcon* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_icon_hint;
	result = _tmp0_;
	return result;
}


static void
unity_filter_set_icon_hint (UnityFilter* self,
                            GIcon* value)
{
	g_return_if_fail (self != NULL);
	if (unity_filter_get_icon_hint (self) != value) {
		GIcon* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_icon_hint);
		self->priv->_icon_hint = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_filter_properties[UNITY_FILTER_ICON_HINT_PROPERTY]);
	}
}


UnityFilterRenderer
unity_filter_get_renderer (UnityFilter* self)
{
	UnityFilterRenderer result;
	UnityFilterRenderer _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->priv->_renderer;
	result = _tmp0_;
	return result;
}


static void
unity_filter_set_renderer (UnityFilter* self,
                           UnityFilterRenderer value)
{
	g_return_if_fail (self != NULL);
	if (unity_filter_get_renderer (self) != value) {
		self->priv->_renderer = value;
		g_object_notify_by_pspec ((GObject *) self, unity_filter_properties[UNITY_FILTER_RENDERER_PROPERTY]);
	}
}


gboolean
unity_filter_get_visible (UnityFilter* self)
{
	gboolean result;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_visible;
	result = _tmp0_;
	return result;
}


void
unity_filter_set_visible (UnityFilter* self,
                          gboolean value)
{
	g_return_if_fail (self != NULL);
	if (unity_filter_get_visible (self) != value) {
		self->priv->_visible = value;
		g_object_notify_by_pspec ((GObject *) self, unity_filter_properties[UNITY_FILTER_VISIBLE_PROPERTY]);
	}
}


gboolean
unity_filter_get_collapsed (UnityFilter* self)
{
	gboolean result;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_collapsed;
	result = _tmp0_;
	return result;
}


void
unity_filter_set_collapsed (UnityFilter* self,
                            gboolean value)
{
	g_return_if_fail (self != NULL);
	if (unity_filter_get_collapsed (self) != value) {
		self->priv->_collapsed = value;
		g_object_notify_by_pspec ((GObject *) self, unity_filter_properties[UNITY_FILTER_COLLAPSED_PROPERTY]);
	}
}


gboolean
unity_filter_get_filtering (UnityFilter* self)
{
	gboolean result;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_filtering;
	result = _tmp0_;
	return result;
}


void
unity_filter_set_filtering (UnityFilter* self,
                            gboolean value)
{
	g_return_if_fail (self != NULL);
	if (unity_filter_get_filtering (self) != value) {
		self->priv->_filtering = value;
		g_object_notify_by_pspec ((GObject *) self, unity_filter_properties[UNITY_FILTER_FILTERING_PROPERTY]);
	}
}


static void
unity_filter_class_init (UnityFilterClass * klass)
{
	unity_filter_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityFilterPrivate));
	((UnityFilterClass *) klass)->get_hints = (GHashTable* (*) (UnityFilter *)) unity_filter_real_get_hints;
	((UnityFilterClass *) klass)->update = (void (*) (UnityFilter *, GVariant*)) unity_filter_real_update;
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_filter_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_filter_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_filter_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_FILTER_ID_PROPERTY, unity_filter_properties[UNITY_FILTER_ID_PROPERTY] = g_param_spec_string ("id", "id", "id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_FILTER_DISPLAY_NAME_PROPERTY, unity_filter_properties[UNITY_FILTER_DISPLAY_NAME_PROPERTY] = g_param_spec_string ("display-name", "display-name", "display-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_FILTER_ICON_HINT_PROPERTY, unity_filter_properties[UNITY_FILTER_ICON_HINT_PROPERTY] = g_param_spec_object ("icon-hint", "icon-hint", "icon-hint", g_icon_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_FILTER_RENDERER_PROPERTY, unity_filter_properties[UNITY_FILTER_RENDERER_PROPERTY] = g_param_spec_enum ("renderer", "renderer", "renderer", UNITY_TYPE_FILTER_RENDERER, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_FILTER_VISIBLE_PROPERTY, unity_filter_properties[UNITY_FILTER_VISIBLE_PROPERTY] = g_param_spec_boolean ("visible", "visible", "visible", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_FILTER_COLLAPSED_PROPERTY, unity_filter_properties[UNITY_FILTER_COLLAPSED_PROPERTY] = g_param_spec_boolean ("collapsed", "collapsed", "collapsed", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_FILTER_FILTERING_PROPERTY, unity_filter_properties[UNITY_FILTER_FILTERING_PROPERTY] = g_param_spec_boolean ("filtering", "filtering", "filtering", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
	unity_filter_signals[UNITY_FILTER_CHANGED_SIGNAL] = g_signal_new ("changed", UNITY_TYPE_FILTER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
}


static void
unity_filter_dee_serializable_interface_init (DeeSerializableIface * iface)
{
	unity_filter_dee_serializable_parent_iface = g_type_interface_peek_parent (iface);
	iface->serialize = (GVariant* (*) (DeeSerializable *)) unity_filter_real_serialize;
}


static void
unity_filter_instance_init (UnityFilter * self)
{
	self->priv = UNITY_FILTER_GET_PRIVATE (self);
}


static void
unity_filter_finalize (GObject * obj)
{
	UnityFilter * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_FILTER, UnityFilter);
	_g_free0 (self->priv->_id);
	_g_free0 (self->priv->_display_name);
	_g_object_unref0 (self->priv->_icon_hint);
	_g_object_unref0 (self->priv->_model);
	G_OBJECT_CLASS (unity_filter_parent_class)->finalize (obj);
}


GType
unity_filter_get_type (void)
{
	static volatile gsize unity_filter_type_id__volatile = 0;
	if (g_once_init_enter (&unity_filter_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityFilterClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_filter_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityFilter), 0, (GInstanceInitFunc) unity_filter_instance_init, NULL };
		static const GInterfaceInfo dee_serializable_info = { (GInterfaceInitFunc) unity_filter_dee_serializable_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		GType unity_filter_type_id;
		unity_filter_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityFilter", &g_define_type_info, G_TYPE_FLAG_ABSTRACT);
		g_type_add_interface_static (unity_filter_type_id, dee_serializable_get_type (), &dee_serializable_info);
		g_once_init_leave (&unity_filter_type_id__volatile, unity_filter_type_id);
	}
	return unity_filter_type_id__volatile;
}


static void
_vala_unity_filter_get_property (GObject * object,
                                 guint property_id,
                                 GValue * value,
                                 GParamSpec * pspec)
{
	UnityFilter * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_FILTER, UnityFilter);
	switch (property_id) {
		case UNITY_FILTER_ID_PROPERTY:
		g_value_set_string (value, unity_filter_get_id (self));
		break;
		case UNITY_FILTER_DISPLAY_NAME_PROPERTY:
		g_value_set_string (value, unity_filter_get_display_name (self));
		break;
		case UNITY_FILTER_ICON_HINT_PROPERTY:
		g_value_set_object (value, unity_filter_get_icon_hint (self));
		break;
		case UNITY_FILTER_RENDERER_PROPERTY:
		g_value_set_enum (value, unity_filter_get_renderer (self));
		break;
		case UNITY_FILTER_VISIBLE_PROPERTY:
		g_value_set_boolean (value, unity_filter_get_visible (self));
		break;
		case UNITY_FILTER_COLLAPSED_PROPERTY:
		g_value_set_boolean (value, unity_filter_get_collapsed (self));
		break;
		case UNITY_FILTER_FILTERING_PROPERTY:
		g_value_set_boolean (value, unity_filter_get_filtering (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_filter_set_property (GObject * object,
                                 guint property_id,
                                 const GValue * value,
                                 GParamSpec * pspec)
{
	UnityFilter * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_FILTER, UnityFilter);
	switch (property_id) {
		case UNITY_FILTER_ID_PROPERTY:
		unity_filter_set_id (self, g_value_get_string (value));
		break;
		case UNITY_FILTER_DISPLAY_NAME_PROPERTY:
		unity_filter_set_display_name (self, g_value_get_string (value));
		break;
		case UNITY_FILTER_ICON_HINT_PROPERTY:
		unity_filter_set_icon_hint (self, g_value_get_object (value));
		break;
		case UNITY_FILTER_RENDERER_PROPERTY:
		unity_filter_set_renderer (self, g_value_get_enum (value));
		break;
		case UNITY_FILTER_VISIBLE_PROPERTY:
		unity_filter_set_visible (self, g_value_get_boolean (value));
		break;
		case UNITY_FILTER_COLLAPSED_PROPERTY:
		unity_filter_set_collapsed (self, g_value_get_boolean (value));
		break;
		case UNITY_FILTER_FILTERING_PROPERTY:
		unity_filter_set_filtering (self, g_value_get_boolean (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


UnityFilterOption*
unity_filter_option_construct (GType object_type,
                               const gchar* id,
                               const gchar* display_name,
                               GIcon* icon_hint,
                               gboolean active)
{
	UnityFilterOption * self = NULL;
	g_return_val_if_fail (id != NULL, NULL);
	g_return_val_if_fail (display_name != NULL, NULL);
	self = (UnityFilterOption*) g_object_new (object_type, "id", id, "display-name", display_name, "icon-hint", icon_hint, "active", active, NULL);
	return self;
}


UnityFilterOption*
unity_filter_option_new (const gchar* id,
                         const gchar* display_name,
                         GIcon* icon_hint,
                         gboolean active)
{
	return unity_filter_option_construct (UNITY_TYPE_FILTER_OPTION, id, display_name, icon_hint, active);
}


const gchar*
unity_filter_option_get_id (UnityFilterOption* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_id;
	result = _tmp0_;
	return result;
}


static void
unity_filter_option_set_id (UnityFilterOption* self,
                            const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_filter_option_get_id (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_id);
		self->priv->_id = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_filter_option_properties[UNITY_FILTER_OPTION_ID_PROPERTY]);
	}
}


const gchar*
unity_filter_option_get_display_name (UnityFilterOption* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_display_name;
	result = _tmp0_;
	return result;
}


static void
unity_filter_option_set_display_name (UnityFilterOption* self,
                                      const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_filter_option_get_display_name (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_display_name);
		self->priv->_display_name = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_filter_option_properties[UNITY_FILTER_OPTION_DISPLAY_NAME_PROPERTY]);
	}
}


GIcon*
unity_filter_option_get_icon_hint (UnityFilterOption* self)
{
	GIcon* result;
	GIcon* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_icon_hint;
	result = _tmp0_;
	return result;
}


static void
unity_filter_option_set_icon_hint (UnityFilterOption* self,
                                   GIcon* value)
{
	g_return_if_fail (self != NULL);
	if (unity_filter_option_get_icon_hint (self) != value) {
		GIcon* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_icon_hint);
		self->priv->_icon_hint = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_filter_option_properties[UNITY_FILTER_OPTION_ICON_HINT_PROPERTY]);
	}
}


gboolean
unity_filter_option_get_active (UnityFilterOption* self)
{
	gboolean result;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_active;
	result = _tmp0_;
	return result;
}


void
unity_filter_option_set_active (UnityFilterOption* self,
                                gboolean value)
{
	g_return_if_fail (self != NULL);
	if (unity_filter_option_get_active (self) != value) {
		self->priv->_active = value;
		g_object_notify_by_pspec ((GObject *) self, unity_filter_option_properties[UNITY_FILTER_OPTION_ACTIVE_PROPERTY]);
	}
}


static void
unity_filter_option_class_init (UnityFilterOptionClass * klass)
{
	unity_filter_option_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityFilterOptionPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_filter_option_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_filter_option_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_filter_option_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_FILTER_OPTION_ID_PROPERTY, unity_filter_option_properties[UNITY_FILTER_OPTION_ID_PROPERTY] = g_param_spec_string ("id", "id", "id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_FILTER_OPTION_DISPLAY_NAME_PROPERTY, unity_filter_option_properties[UNITY_FILTER_OPTION_DISPLAY_NAME_PROPERTY] = g_param_spec_string ("display-name", "display-name", "display-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_FILTER_OPTION_ICON_HINT_PROPERTY, unity_filter_option_properties[UNITY_FILTER_OPTION_ICON_HINT_PROPERTY] = g_param_spec_object ("icon-hint", "icon-hint", "icon-hint", g_icon_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_FILTER_OPTION_ACTIVE_PROPERTY, unity_filter_option_properties[UNITY_FILTER_OPTION_ACTIVE_PROPERTY] = g_param_spec_boolean ("active", "active", "active", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
}


static void
unity_filter_option_instance_init (UnityFilterOption * self)
{
	self->priv = UNITY_FILTER_OPTION_GET_PRIVATE (self);
}


static void
unity_filter_option_finalize (GObject * obj)
{
	UnityFilterOption * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_FILTER_OPTION, UnityFilterOption);
	_g_free0 (self->priv->_id);
	_g_free0 (self->priv->_display_name);
	_g_object_unref0 (self->priv->_icon_hint);
	G_OBJECT_CLASS (unity_filter_option_parent_class)->finalize (obj);
}


GType
unity_filter_option_get_type (void)
{
	static volatile gsize unity_filter_option_type_id__volatile = 0;
	if (g_once_init_enter (&unity_filter_option_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityFilterOptionClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_filter_option_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityFilterOption), 0, (GInstanceInitFunc) unity_filter_option_instance_init, NULL };
		GType unity_filter_option_type_id;
		unity_filter_option_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityFilterOption", &g_define_type_info, 0);
		g_once_init_leave (&unity_filter_option_type_id__volatile, unity_filter_option_type_id);
	}
	return unity_filter_option_type_id__volatile;
}


static void
_vala_unity_filter_option_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec)
{
	UnityFilterOption * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_FILTER_OPTION, UnityFilterOption);
	switch (property_id) {
		case UNITY_FILTER_OPTION_ID_PROPERTY:
		g_value_set_string (value, unity_filter_option_get_id (self));
		break;
		case UNITY_FILTER_OPTION_DISPLAY_NAME_PROPERTY:
		g_value_set_string (value, unity_filter_option_get_display_name (self));
		break;
		case UNITY_FILTER_OPTION_ICON_HINT_PROPERTY:
		g_value_set_object (value, unity_filter_option_get_icon_hint (self));
		break;
		case UNITY_FILTER_OPTION_ACTIVE_PROPERTY:
		g_value_set_boolean (value, unity_filter_option_get_active (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_filter_option_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec)
{
	UnityFilterOption * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_FILTER_OPTION, UnityFilterOption);
	switch (property_id) {
		case UNITY_FILTER_OPTION_ID_PROPERTY:
		unity_filter_option_set_id (self, g_value_get_string (value));
		break;
		case UNITY_FILTER_OPTION_DISPLAY_NAME_PROPERTY:
		unity_filter_option_set_display_name (self, g_value_get_string (value));
		break;
		case UNITY_FILTER_OPTION_ICON_HINT_PROPERTY:
		unity_filter_option_set_icon_hint (self, g_value_get_object (value));
		break;
		case UNITY_FILTER_OPTION_ACTIVE_PROPERTY:
		unity_filter_option_set_active (self, g_value_get_boolean (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


GType
unity_options_filter_sort_type_get_type (void)
{
	static volatile gsize unity_options_filter_sort_type_type_id__volatile = 0;
	if (g_once_init_enter (&unity_options_filter_sort_type_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_OPTIONS_FILTER_SORT_TYPE_MANUAL, "UNITY_OPTIONS_FILTER_SORT_TYPE_MANUAL", "manual"}, {UNITY_OPTIONS_FILTER_SORT_TYPE_DISPLAY_NAME, "UNITY_OPTIONS_FILTER_SORT_TYPE_DISPLAY_NAME", "display-name"}, {UNITY_OPTIONS_FILTER_SORT_TYPE_ID, "UNITY_OPTIONS_FILTER_SORT_TYPE_ID", "id"}, {0, NULL, NULL}};
		GType unity_options_filter_sort_type_type_id;
		unity_options_filter_sort_type_type_id = g_enum_register_static ("UnityOptionsFilterSortType", values);
		g_once_init_leave (&unity_options_filter_sort_type_type_id__volatile, unity_options_filter_sort_type_type_id);
	}
	return unity_options_filter_sort_type_type_id__volatile;
}


static void
_g_object_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_object_unref (var), NULL));
}


static inline void
_g_list_free__g_object_unref0_ (GList* self)
{
	g_list_free_full (self, (GDestroyNotify) _g_object_unref0_);
}


static gint
_unity_options_filter_sort_by_display_name_gcompare_func (gconstpointer a,
                                                          gconstpointer b)
{
	gint result;
	result = unity_options_filter_sort_by_display_name ((UnityFilterOption*) a, (UnityFilterOption*) b);
	return result;
}


static gint
_unity_options_filter_sort_by_id_gcompare_func (gconstpointer a,
                                                gconstpointer b)
{
	gint result;
	result = unity_options_filter_sort_by_id ((UnityFilterOption*) a, (UnityFilterOption*) b);
	return result;
}


UnityFilterOption*
unity_options_filter_add_option (UnityOptionsFilter* self,
                                 const gchar* id,
                                 const gchar* display_name,
                                 GIcon* icon_hint)
{
	UnityFilterOption* result = NULL;
	UnityFilterOption* option = NULL;
	UnityFilterOption* _tmp0_;
	UnityOptionsFilterSortType _tmp1_;
	g_return_val_if_fail (self != NULL, NULL);
	g_return_val_if_fail (id != NULL, NULL);
	g_return_val_if_fail (display_name != NULL, NULL);
	_tmp0_ = unity_filter_option_new (id, display_name, icon_hint, FALSE);
	option = _tmp0_;
	_tmp1_ = self->priv->_sort_type;
	switch (_tmp1_) {
		case UNITY_OPTIONS_FILTER_SORT_TYPE_DISPLAY_NAME:
		{
			UnityFilterOption* _tmp2_;
			UnityFilterOption* _tmp3_;
			_tmp2_ = option;
			_tmp3_ = _g_object_ref0 (_tmp2_);
			self->options = g_list_insert_sorted (self->options, _tmp3_, _unity_options_filter_sort_by_display_name_gcompare_func);
			break;
		}
		case UNITY_OPTIONS_FILTER_SORT_TYPE_ID:
		{
			UnityFilterOption* _tmp4_;
			UnityFilterOption* _tmp5_;
			_tmp4_ = option;
			_tmp5_ = _g_object_ref0 (_tmp4_);
			self->options = g_list_insert_sorted (self->options, _tmp5_, _unity_options_filter_sort_by_id_gcompare_func);
			break;
		}
		default:
		case UNITY_OPTIONS_FILTER_SORT_TYPE_MANUAL:
		{
			UnityFilterOption* _tmp6_;
			UnityFilterOption* _tmp7_;
			_tmp6_ = option;
			_tmp7_ = _g_object_ref0 (_tmp6_);
			self->options = g_list_append (self->options, _tmp7_);
			break;
		}
	}
	g_signal_emit ((UnityFilter*) self, unity_filter_signals[UNITY_FILTER_CHANGED_SIGNAL], 0);
	result = option;
	return result;
}


static gint
unity_options_filter_sort_by_display_name (UnityFilterOption* f1,
                                           UnityFilterOption* f2)
{
	gint result = 0;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	g_return_val_if_fail (f1 != NULL, 0);
	g_return_val_if_fail (f2 != NULL, 0);
	_tmp0_ = unity_filter_option_get_display_name (f1);
	_tmp1_ = _tmp0_;
	_tmp2_ = unity_filter_option_get_display_name (f2);
	_tmp3_ = _tmp2_;
	result = g_utf8_collate (_tmp1_, _tmp3_);
	return result;
}


static gint
unity_options_filter_sort_by_id (UnityFilterOption* f1,
                                 UnityFilterOption* f2)
{
	gint result = 0;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	g_return_val_if_fail (f1 != NULL, 0);
	g_return_val_if_fail (f2 != NULL, 0);
	_tmp0_ = unity_filter_option_get_id (f1);
	_tmp1_ = _tmp0_;
	_tmp2_ = unity_filter_option_get_id (f2);
	_tmp3_ = _tmp2_;
	result = g_utf8_collate (_tmp1_, _tmp3_);
	return result;
}


UnityFilterOption*
unity_options_filter_get_option (UnityOptionsFilter* self,
                                 const gchar* id)
{
	UnityFilterOption* result = NULL;
	GList* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	g_return_val_if_fail (id != NULL, NULL);
	_tmp0_ = self->options;
	{
		GList* option_collection = NULL;
		GList* option_it = NULL;
		option_collection = _tmp0_;
		for (option_it = option_collection; option_it != NULL; option_it = option_it->next) {
			UnityFilterOption* _tmp1_;
			UnityFilterOption* option = NULL;
			_tmp1_ = _g_object_ref0 ((UnityFilterOption*) option_it->data);
			option = _tmp1_;
			{
				UnityFilterOption* _tmp2_;
				const gchar* _tmp3_;
				const gchar* _tmp4_;
				_tmp2_ = option;
				_tmp3_ = unity_filter_option_get_id (_tmp2_);
				_tmp4_ = _tmp3_;
				if (g_strcmp0 (_tmp4_, id) == 0) {
					result = option;
					return result;
				}
				_g_object_unref0 (option);
			}
		}
	}
	result = NULL;
	return result;
}


/**
   * Removes a FilterOption from the OptionsFilter.
   *
   * @return true if a FilterOption was removed, false if FilterOption with
   * given id couldn't be found.
   */
gboolean
unity_options_filter_remove_option (UnityOptionsFilter* self,
                                    const gchar* id)
{
	gboolean result = FALSE;
	GList* element = NULL;
	GList* _tmp11_;
	GList* _tmp14_;
	g_return_val_if_fail (self != NULL, FALSE);
	g_return_val_if_fail (id != NULL, FALSE);
	element = NULL;
	{
		GList* it = NULL;
		GList* _tmp0_;
		GList* _tmp1_;
		_tmp0_ = self->options;
		_tmp1_ = g_list_first (_tmp0_);
		it = _tmp1_;
		{
			gboolean _tmp2_ = FALSE;
			_tmp2_ = TRUE;
			while (TRUE) {
				GList* _tmp5_;
				GList* _tmp6_;
				gconstpointer _tmp7_;
				const gchar* _tmp8_;
				const gchar* _tmp9_;
				if (!_tmp2_) {
					GList* _tmp3_;
					GList* _tmp4_;
					_tmp3_ = it;
					_tmp4_ = _tmp3_->next;
					it = _tmp4_;
				}
				_tmp2_ = FALSE;
				_tmp5_ = it;
				if (!(_tmp5_ != NULL)) {
					break;
				}
				_tmp6_ = it;
				_tmp7_ = _tmp6_->data;
				_tmp8_ = unity_filter_option_get_id ((UnityFilterOption*) _tmp7_);
				_tmp9_ = _tmp8_;
				if (g_strcmp0 (_tmp9_, id) == 0) {
					GList* _tmp10_;
					_tmp10_ = it;
					element = _tmp10_;
					break;
				}
			}
		}
	}
	_tmp11_ = element;
	if (_tmp11_ != NULL) {
		GList* _tmp12_;
		GList* _tmp13_;
		_tmp12_ = element;
		_g_object_unref0 (_tmp12_->data);
		_tmp12_->data = NULL;
		_tmp13_ = element;
		self->options = g_list_delete_link (self->options, _tmp13_);
		g_signal_emit ((UnityFilter*) self, unity_filter_signals[UNITY_FILTER_CHANGED_SIGNAL], 0);
	}
	_tmp14_ = element;
	result = _tmp14_ != NULL;
	return result;
}


static void
unity_options_filter_real_update (UnityFilter* base,
                                  GVariant* properties)
{
	UnityOptionsFilter * self;
	GVariantIter* iter = NULL;
	self = (UnityOptionsFilter*) base;
	g_return_if_fail (properties != NULL);
	g_variant_get (properties, "a{sv}", &iter, NULL);
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp0_ = FALSE;
			_tmp0_ = TRUE;
			while (TRUE) {
				gint _tmp2_;
				GVariantIter* _tmp3_;
				gchar* key = NULL;
				GVariant* val = NULL;
				GVariantIter* _tmp4_;
				const gchar* _tmp5_;
				if (!_tmp0_) {
					gint _tmp1_;
					_tmp1_ = i;
					i = _tmp1_ + 1;
				}
				_tmp0_ = FALSE;
				_tmp2_ = i;
				_tmp3_ = iter;
				if (!(((gsize) _tmp2_) < g_variant_iter_n_children (_tmp3_))) {
					break;
				}
				_tmp4_ = iter;
				g_variant_iter_next (_tmp4_, "{sv}", &key, &val, NULL);
				_tmp5_ = key;
				if (g_strcmp0 (_tmp5_, "options") == 0) {
					GVariant* _tmp6_;
					_tmp6_ = val;
					unity_options_filter_load_or_update_options (self, _tmp6_);
				} else {
					const gchar* _tmp7_;
					_tmp7_ = key;
					if (g_strcmp0 (_tmp7_, "show-all-button") == 0) {
						GVariant* _tmp8_;
						_tmp8_ = val;
						unity_options_filter_set_show_all_button (self, g_variant_get_boolean (_tmp8_));
					}
				}
				_g_variant_unref0 (val);
				_g_free0 (key);
			}
		}
	}
	g_signal_emit ((UnityFilter*) self, unity_filter_signals[UNITY_FILTER_CHANGED_SIGNAL], 0);
	_g_variant_iter_free0 (iter);
}


static void
_vala_array_add2 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (gchar*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


static gboolean
_vala_string_array_contains (gchar* * stack,
                             int stack_length,
                             gchar* needle)
{
	int i;
	for (i = 0; i < stack_length; i++) {
		if (g_strcmp0 (stack[i], needle) == 0) {
			return TRUE;
		}
	}
	return FALSE;
}


void
unity_options_filter_load_or_update_options (UnityOptionsFilter* self,
                                             GVariant* array)
{
	GVariantIter* iter = NULL;
	gchar** option_ids = NULL;
	gchar** _tmp0_;
	gint option_ids_length1;
	gint _option_ids_size_;
	GList* _tmp13_;
	gchar** _tmp14_;
	gint _tmp14__length1;
	g_return_if_fail (self != NULL);
	g_return_if_fail (array != NULL);
	g_variant_get (array, "a(sssb)", &iter, NULL);
	_tmp0_ = g_new0 (gchar*, 0 + 1);
	option_ids = _tmp0_;
	option_ids_length1 = 0;
	_option_ids_size_ = option_ids_length1;
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp1_ = FALSE;
			_tmp1_ = TRUE;
			while (TRUE) {
				gint _tmp3_;
				GVariantIter* _tmp4_;
				gchar* b_id = NULL;
				gchar* b_name = NULL;
				gchar* b_icon_hint = NULL;
				gboolean b_active = FALSE;
				GVariantIter* _tmp5_;
				const gchar* _tmp6_;
				const gchar* _tmp7_;
				const gchar* _tmp8_;
				gboolean _tmp9_;
				gchar** _tmp10_;
				gint _tmp10__length1;
				const gchar* _tmp11_;
				gchar* _tmp12_;
				if (!_tmp1_) {
					gint _tmp2_;
					_tmp2_ = i;
					i = _tmp2_ + 1;
				}
				_tmp1_ = FALSE;
				_tmp3_ = i;
				_tmp4_ = iter;
				if (!(((gsize) _tmp3_) < g_variant_iter_n_children (_tmp4_))) {
					break;
				}
				_tmp5_ = iter;
				g_variant_iter_next (_tmp5_, "(sssb)", &b_id, &b_name, &b_icon_hint, &b_active, NULL);
				_tmp6_ = b_id;
				_tmp7_ = b_name;
				_tmp8_ = b_icon_hint;
				_tmp9_ = b_active;
				unity_options_filter_find_and_update_option (self, _tmp6_, _tmp7_, _tmp8_, _tmp9_);
				_tmp10_ = option_ids;
				_tmp10__length1 = option_ids_length1;
				_tmp11_ = b_id;
				_tmp12_ = g_strdup (_tmp11_);
				_vala_array_add2 (&option_ids, &option_ids_length1, &_option_ids_size_, _tmp12_);
				_g_free0 (b_icon_hint);
				_g_free0 (b_name);
				_g_free0 (b_id);
			}
		}
	}
	_tmp13_ = self->options;
	_tmp14_ = option_ids;
	_tmp14__length1 = option_ids_length1;
	if (g_list_length (_tmp13_) != ((guint) _tmp14__length1)) {
		GList* l = NULL;
		GList* _tmp15_;
		_tmp15_ = self->options;
		l = _tmp15_;
		while (TRUE) {
			GList* _tmp16_;
			const gchar* id = NULL;
			GList* _tmp17_;
			gconstpointer _tmp18_;
			const gchar* _tmp19_;
			const gchar* _tmp20_;
			GList* to_remove = NULL;
			GList* _tmp21_;
			GList* _tmp22_;
			GList* _tmp23_;
			const gchar* _tmp24_;
			gchar** _tmp25_;
			gint _tmp25__length1;
			_tmp16_ = l;
			if (!(_tmp16_ != NULL)) {
				break;
			}
			_tmp17_ = l;
			_tmp18_ = _tmp17_->data;
			_tmp19_ = unity_filter_option_get_id ((UnityFilterOption*) _tmp18_);
			_tmp20_ = _tmp19_;
			id = _tmp20_;
			_tmp21_ = l;
			to_remove = _tmp21_;
			_tmp22_ = l;
			_tmp23_ = _tmp22_->next;
			l = _tmp23_;
			_tmp24_ = id;
			_tmp25_ = option_ids;
			_tmp25__length1 = option_ids_length1;
			if (!_vala_string_array_contains (_tmp25_, _tmp25__length1, _tmp24_)) {
				GList* _tmp26_;
				GList* _tmp27_;
				_tmp26_ = to_remove;
				_g_object_unref0 (_tmp26_->data);
				_tmp26_->data = NULL;
				_tmp27_ = to_remove;
				self->options = g_list_delete_link (self->options, _tmp27_);
			}
		}
	}
	option_ids = (_vala_array_free (option_ids, option_ids_length1, (GDestroyNotify) g_free), NULL);
	_g_variant_iter_free0 (iter);
}


void
unity_options_filter_find_and_update_option (UnityOptionsFilter* self,
                                             const gchar* id,
                                             const gchar* name,
                                             const gchar* icon_hint_s,
                                             gboolean active)
{
	GList* _tmp0_;
	GIcon* icon_hint = NULL;
	UnityFilterOption* option = NULL;
	GIcon* _tmp11_;
	UnityFilterOption* _tmp12_;
	UnityFilterOption* _tmp13_;
	UnityFilterOption* _tmp14_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	g_return_if_fail (id != NULL);
	g_return_if_fail (name != NULL);
	g_return_if_fail (icon_hint_s != NULL);
	_tmp0_ = self->options;
	{
		GList* option_collection = NULL;
		GList* option_it = NULL;
		option_collection = _tmp0_;
		for (option_it = option_collection; option_it != NULL; option_it = option_it->next) {
			UnityFilterOption* _tmp1_;
			UnityFilterOption* option = NULL;
			_tmp1_ = _g_object_ref0 ((UnityFilterOption*) option_it->data);
			option = _tmp1_;
			{
				UnityFilterOption* _tmp2_;
				const gchar* _tmp3_;
				const gchar* _tmp4_;
				_tmp2_ = option;
				_tmp3_ = unity_filter_option_get_id (_tmp2_);
				_tmp4_ = _tmp3_;
				if (g_strcmp0 (_tmp4_, id) == 0) {
					UnityFilterOption* _tmp5_;
					_tmp5_ = option;
					unity_filter_option_set_active (_tmp5_, active);
					_g_object_unref0 (option);
					return;
				}
				_g_object_unref0 (option);
			}
		}
	}
	icon_hint = NULL;
	{
		if (g_strcmp0 (icon_hint_s, "") != 0) {
			GIcon* _tmp6_ = NULL;
			GIcon* _tmp7_;
			GIcon* _tmp8_;
			_tmp7_ = g_icon_new_for_string (icon_hint_s, &_inner_error_);
			_tmp6_ = _tmp7_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				goto __catch18_g_error;
			}
			_tmp8_ = _tmp6_;
			_tmp6_ = NULL;
			_g_object_unref0 (icon_hint);
			icon_hint = _tmp8_;
			_g_object_unref0 (_tmp6_);
		}
	}
	goto __finally18;
	__catch18_g_error:
	{
		GError* e = NULL;
		GError* _tmp9_;
		const gchar* _tmp10_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp9_ = e;
		_tmp10_ = _tmp9_->message;
		g_warning ("unity-filters.vala:368: Unable to parse GIcon data '%s': %s", icon_hint_s, _tmp10_);
		_g_error_free0 (e);
	}
	__finally18:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		_g_object_unref0 (icon_hint);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	_tmp11_ = icon_hint;
	_tmp12_ = unity_filter_option_new (id, name, _tmp11_, active);
	option = _tmp12_;
	_tmp13_ = option;
	_tmp14_ = _g_object_ref0 (_tmp13_);
	self->options = g_list_append (self->options, _tmp14_);
	_g_object_unref0 (option);
	_g_object_unref0 (icon_hint);
}


static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static void
_g_variant_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_variant_unref (var), NULL));
}


static GHashTable*
unity_options_filter_real_get_hints (UnityFilter* base)
{
	UnityOptionsFilter * self;
	GHashTable* result = NULL;
	GVariantBuilder* b = NULL;
	GVariantType* _tmp0_;
	GVariantType* _tmp1_;
	GVariantBuilder* _tmp2_;
	GVariantBuilder* _tmp3_;
	GList* _tmp4_;
	GHashTable* hash = NULL;
	GHashFunc _tmp27_;
	GEqualFunc _tmp28_;
	GHashTable* _tmp29_;
	gchar* _tmp30_;
	GVariantBuilder* _tmp31_;
	GVariant* _tmp32_;
	gchar* _tmp33_;
	gboolean _tmp34_;
	GVariant* _tmp35_;
	self = (UnityOptionsFilter*) base;
	_tmp0_ = g_variant_type_new ("a(sssb)");
	_tmp1_ = _tmp0_;
	_tmp2_ = g_variant_builder_new (_tmp1_);
	_tmp3_ = _tmp2_;
	_g_variant_type_free0 (_tmp1_);
	b = _tmp3_;
	_tmp4_ = self->options;
	{
		GList* option_collection = NULL;
		GList* option_it = NULL;
		option_collection = _tmp4_;
		for (option_it = option_collection; option_it != NULL; option_it = option_it->next) {
			UnityFilterOption* _tmp5_;
			UnityFilterOption* option = NULL;
			_tmp5_ = _g_object_ref0 ((UnityFilterOption*) option_it->data);
			option = _tmp5_;
			{
				gchar* _tmp6_ = NULL;
				UnityFilterOption* _tmp7_;
				GIcon* _tmp8_;
				GIcon* _tmp9_;
				gchar* icon_string = NULL;
				gchar* _tmp15_;
				GVariantBuilder* _tmp16_;
				UnityFilterOption* _tmp17_;
				const gchar* _tmp18_;
				const gchar* _tmp19_;
				UnityFilterOption* _tmp20_;
				const gchar* _tmp21_;
				const gchar* _tmp22_;
				const gchar* _tmp23_;
				UnityFilterOption* _tmp24_;
				gboolean _tmp25_;
				gboolean _tmp26_;
				_tmp7_ = option;
				_tmp8_ = unity_filter_option_get_icon_hint (_tmp7_);
				_tmp9_ = _tmp8_;
				if (_tmp9_ != NULL) {
					UnityFilterOption* _tmp10_;
					GIcon* _tmp11_;
					GIcon* _tmp12_;
					gchar* _tmp13_;
					_tmp10_ = option;
					_tmp11_ = unity_filter_option_get_icon_hint (_tmp10_);
					_tmp12_ = _tmp11_;
					_tmp13_ = g_icon_to_string (_tmp12_);
					_g_free0 (_tmp6_);
					_tmp6_ = _tmp13_;
				} else {
					gchar* _tmp14_;
					_tmp14_ = g_strdup ("");
					_g_free0 (_tmp6_);
					_tmp6_ = _tmp14_;
				}
				_tmp15_ = g_strdup (_tmp6_);
				icon_string = _tmp15_;
				_tmp16_ = b;
				_tmp17_ = option;
				_tmp18_ = unity_filter_option_get_id (_tmp17_);
				_tmp19_ = _tmp18_;
				_tmp20_ = option;
				_tmp21_ = unity_filter_option_get_display_name (_tmp20_);
				_tmp22_ = _tmp21_;
				_tmp23_ = icon_string;
				_tmp24_ = option;
				_tmp25_ = unity_filter_option_get_active (_tmp24_);
				_tmp26_ = _tmp25_;
				g_variant_builder_add (_tmp16_, "(sssb)", _tmp19_, _tmp22_, _tmp23_, _tmp26_, NULL);
				_g_free0 (icon_string);
				_g_free0 (_tmp6_);
				_g_object_unref0 (option);
			}
		}
	}
	_tmp27_ = g_str_hash;
	_tmp28_ = g_str_equal;
	_tmp29_ = g_hash_table_new_full (_tmp27_, _tmp28_, _g_free0_, _g_variant_unref0_);
	hash = _tmp29_;
	_tmp30_ = g_strdup ("options");
	_tmp31_ = b;
	_tmp32_ = g_variant_builder_end (_tmp31_);
	g_variant_ref_sink (_tmp32_);
	g_hash_table_insert (hash, _tmp30_, _tmp32_);
	_tmp33_ = g_strdup ("show-all-button");
	_tmp34_ = self->priv->_show_all_button;
	_tmp35_ = g_variant_new_boolean (_tmp34_);
	g_variant_ref_sink (_tmp35_);
	g_hash_table_insert (hash, _tmp33_, _tmp35_);
	result = hash;
	_g_variant_builder_unref0 (b);
	return result;
}


UnityOptionsFilter*
unity_options_filter_construct (GType object_type)
{
	UnityOptionsFilter * self = NULL;
	self = (UnityOptionsFilter*) unity_filter_construct (object_type);
	return self;
}


UnityOptionsFilter*
unity_options_filter_new (void)
{
	return unity_options_filter_construct (UNITY_TYPE_OPTIONS_FILTER);
}


UnityOptionsFilterSortType
unity_options_filter_get_sort_type (UnityOptionsFilter* self)
{
	UnityOptionsFilterSortType result;
	UnityOptionsFilterSortType _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->priv->_sort_type;
	result = _tmp0_;
	return result;
}


void
unity_options_filter_set_sort_type (UnityOptionsFilter* self,
                                    UnityOptionsFilterSortType value)
{
	g_return_if_fail (self != NULL);
	if (unity_options_filter_get_sort_type (self) != value) {
		self->priv->_sort_type = value;
		g_object_notify_by_pspec ((GObject *) self, unity_options_filter_properties[UNITY_OPTIONS_FILTER_SORT_TYPE_PROPERTY]);
	}
}


gboolean
unity_options_filter_get_show_all_button (UnityOptionsFilter* self)
{
	gboolean result;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_show_all_button;
	result = _tmp0_;
	return result;
}


void
unity_options_filter_set_show_all_button (UnityOptionsFilter* self,
                                          gboolean value)
{
	g_return_if_fail (self != NULL);
	if (unity_options_filter_get_show_all_button (self) != value) {
		self->priv->_show_all_button = value;
		g_object_notify_by_pspec ((GObject *) self, unity_options_filter_properties[UNITY_OPTIONS_FILTER_SHOW_ALL_BUTTON_PROPERTY]);
	}
}


static void
unity_options_filter_class_init (UnityOptionsFilterClass * klass)
{
	unity_options_filter_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityOptionsFilterPrivate));
	((UnityFilterClass *) klass)->update = (void (*) (UnityFilter *, GVariant*)) unity_options_filter_real_update;
	((UnityFilterClass *) klass)->get_hints = (GHashTable* (*) (UnityFilter *)) unity_options_filter_real_get_hints;
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_options_filter_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_options_filter_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_options_filter_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_OPTIONS_FILTER_SORT_TYPE_PROPERTY, unity_options_filter_properties[UNITY_OPTIONS_FILTER_SORT_TYPE_PROPERTY] = g_param_spec_enum ("sort-type", "sort-type", "sort-type", UNITY_OPTIONS_FILTER_TYPE_SORT_TYPE, UNITY_OPTIONS_FILTER_SORT_TYPE_MANUAL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_OPTIONS_FILTER_SHOW_ALL_BUTTON_PROPERTY, unity_options_filter_properties[UNITY_OPTIONS_FILTER_SHOW_ALL_BUTTON_PROPERTY] = g_param_spec_boolean ("show-all-button", "show-all-button", "show-all-button", TRUE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


static void
unity_options_filter_instance_init (UnityOptionsFilter * self)
{
	self->priv = UNITY_OPTIONS_FILTER_GET_PRIVATE (self);
	self->priv->_sort_type = UNITY_OPTIONS_FILTER_SORT_TYPE_MANUAL;
	self->priv->_show_all_button = TRUE;
}


static void
unity_options_filter_finalize (GObject * obj)
{
	UnityOptionsFilter * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_OPTIONS_FILTER, UnityOptionsFilter);
	(self->options == NULL) ? NULL : (self->options = (_g_list_free__g_object_unref0_ (self->options), NULL));
	G_OBJECT_CLASS (unity_options_filter_parent_class)->finalize (obj);
}


GType
unity_options_filter_get_type (void)
{
	static volatile gsize unity_options_filter_type_id__volatile = 0;
	if (g_once_init_enter (&unity_options_filter_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityOptionsFilterClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_options_filter_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityOptionsFilter), 0, (GInstanceInitFunc) unity_options_filter_instance_init, NULL };
		GType unity_options_filter_type_id;
		unity_options_filter_type_id = g_type_register_static (UNITY_TYPE_FILTER, "UnityOptionsFilter", &g_define_type_info, 0);
		g_once_init_leave (&unity_options_filter_type_id__volatile, unity_options_filter_type_id);
	}
	return unity_options_filter_type_id__volatile;
}


static void
_vala_unity_options_filter_get_property (GObject * object,
                                         guint property_id,
                                         GValue * value,
                                         GParamSpec * pspec)
{
	UnityOptionsFilter * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_OPTIONS_FILTER, UnityOptionsFilter);
	switch (property_id) {
		case UNITY_OPTIONS_FILTER_SORT_TYPE_PROPERTY:
		g_value_set_enum (value, unity_options_filter_get_sort_type (self));
		break;
		case UNITY_OPTIONS_FILTER_SHOW_ALL_BUTTON_PROPERTY:
		g_value_set_boolean (value, unity_options_filter_get_show_all_button (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_options_filter_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec)
{
	UnityOptionsFilter * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_OPTIONS_FILTER, UnityOptionsFilter);
	switch (property_id) {
		case UNITY_OPTIONS_FILTER_SORT_TYPE_PROPERTY:
		unity_options_filter_set_sort_type (self, g_value_get_enum (value));
		break;
		case UNITY_OPTIONS_FILTER_SHOW_ALL_BUTTON_PROPERTY:
		unity_options_filter_set_show_all_button (self, g_value_get_boolean (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


UnityRadioOptionFilter*
unity_radio_option_filter_construct (GType object_type,
                                     const gchar* id,
                                     const gchar* display_name,
                                     GIcon* icon_hint,
                                     gboolean collapsed)
{
	UnityRadioOptionFilter * self = NULL;
	g_return_val_if_fail (id != NULL, NULL);
	g_return_val_if_fail (display_name != NULL, NULL);
	self = (UnityRadioOptionFilter*) g_object_new (object_type, "id", id, "display-name", display_name, "icon-hint", icon_hint, "collapsed", collapsed, "renderer", UNITY_FILTER_RENDERER_RADIO_OPTIONS, "visible", TRUE, "filtering", FALSE, NULL);
	return self;
}


UnityRadioOptionFilter*
unity_radio_option_filter_new (const gchar* id,
                               const gchar* display_name,
                               GIcon* icon_hint,
                               gboolean collapsed)
{
	return unity_radio_option_filter_construct (UNITY_TYPE_RADIO_OPTION_FILTER, id, display_name, icon_hint, collapsed);
}


UnityFilterOption*
unity_radio_option_filter_get_active_option (UnityRadioOptionFilter* self)
{
	UnityFilterOption* result = NULL;
	GList* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = ((UnityOptionsFilter*) self)->options;
	{
		GList* option_collection = NULL;
		GList* option_it = NULL;
		option_collection = _tmp0_;
		for (option_it = option_collection; option_it != NULL; option_it = option_it->next) {
			UnityFilterOption* _tmp1_;
			UnityFilterOption* option = NULL;
			_tmp1_ = _g_object_ref0 ((UnityFilterOption*) option_it->data);
			option = _tmp1_;
			{
				UnityFilterOption* _tmp2_;
				gboolean _tmp3_;
				gboolean _tmp4_;
				_tmp2_ = option;
				_tmp3_ = unity_filter_option_get_active (_tmp2_);
				_tmp4_ = _tmp3_;
				if (_tmp4_) {
					result = option;
					return result;
				}
				_g_object_unref0 (option);
			}
		}
	}
	result = NULL;
	return result;
}


static void
unity_radio_option_filter_class_init (UnityRadioOptionFilterClass * klass)
{
	unity_radio_option_filter_parent_class = g_type_class_peek_parent (klass);
}


static void
unity_radio_option_filter_instance_init (UnityRadioOptionFilter * self)
{
}


GType
unity_radio_option_filter_get_type (void)
{
	static volatile gsize unity_radio_option_filter_type_id__volatile = 0;
	if (g_once_init_enter (&unity_radio_option_filter_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityRadioOptionFilterClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_radio_option_filter_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityRadioOptionFilter), 0, (GInstanceInitFunc) unity_radio_option_filter_instance_init, NULL };
		GType unity_radio_option_filter_type_id;
		unity_radio_option_filter_type_id = g_type_register_static (UNITY_TYPE_OPTIONS_FILTER, "UnityRadioOptionFilter", &g_define_type_info, 0);
		g_once_init_leave (&unity_radio_option_filter_type_id__volatile, unity_radio_option_filter_type_id);
	}
	return unity_radio_option_filter_type_id__volatile;
}


UnityCheckOptionFilter*
unity_check_option_filter_construct (GType object_type,
                                     const gchar* id,
                                     const gchar* display_name,
                                     GIcon* icon_hint,
                                     gboolean collapsed)
{
	UnityCheckOptionFilter * self = NULL;
	g_return_val_if_fail (id != NULL, NULL);
	g_return_val_if_fail (display_name != NULL, NULL);
	self = (UnityCheckOptionFilter*) g_object_new (object_type, "id", id, "display-name", display_name, "icon-hint", icon_hint, "collapsed", collapsed, "renderer", UNITY_FILTER_RENDERER_CHECK_OPTIONS, "visible", TRUE, "filtering", FALSE, NULL);
	return self;
}


UnityCheckOptionFilter*
unity_check_option_filter_new (const gchar* id,
                               const gchar* display_name,
                               GIcon* icon_hint,
                               gboolean collapsed)
{
	return unity_check_option_filter_construct (UNITY_TYPE_CHECK_OPTION_FILTER, id, display_name, icon_hint, collapsed);
}


static void
unity_check_option_filter_class_init (UnityCheckOptionFilterClass * klass)
{
	unity_check_option_filter_parent_class = g_type_class_peek_parent (klass);
}


static void
unity_check_option_filter_instance_init (UnityCheckOptionFilter * self)
{
}


GType
unity_check_option_filter_get_type (void)
{
	static volatile gsize unity_check_option_filter_type_id__volatile = 0;
	if (g_once_init_enter (&unity_check_option_filter_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityCheckOptionFilterClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_check_option_filter_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityCheckOptionFilter), 0, (GInstanceInitFunc) unity_check_option_filter_instance_init, NULL };
		GType unity_check_option_filter_type_id;
		unity_check_option_filter_type_id = g_type_register_static (UNITY_TYPE_OPTIONS_FILTER, "UnityCheckOptionFilter", &g_define_type_info, 0);
		g_once_init_leave (&unity_check_option_filter_type_id__volatile, unity_check_option_filter_type_id);
	}
	return unity_check_option_filter_type_id__volatile;
}


UnityCheckOptionFilterCompact*
unity_check_option_filter_compact_construct (GType object_type,
                                             const gchar* id,
                                             const gchar* display_name,
                                             GIcon* icon_hint,
                                             gboolean collapsed)
{
	UnityCheckOptionFilterCompact * self = NULL;
	g_return_val_if_fail (id != NULL, NULL);
	g_return_val_if_fail (display_name != NULL, NULL);
	self = (UnityCheckOptionFilterCompact*) g_object_new (object_type, "id", id, "display-name", display_name, "icon-hint", icon_hint, "collapsed", collapsed, "renderer", UNITY_FILTER_RENDERER_CHECK_OPTIONS_COMPACT, "visible", TRUE, "filtering", FALSE, NULL);
	return self;
}


UnityCheckOptionFilterCompact*
unity_check_option_filter_compact_new (const gchar* id,
                                       const gchar* display_name,
                                       GIcon* icon_hint,
                                       gboolean collapsed)
{
	return unity_check_option_filter_compact_construct (UNITY_TYPE_CHECK_OPTION_FILTER_COMPACT, id, display_name, icon_hint, collapsed);
}


static void
unity_check_option_filter_compact_class_init (UnityCheckOptionFilterCompactClass * klass)
{
	unity_check_option_filter_compact_parent_class = g_type_class_peek_parent (klass);
}


static void
unity_check_option_filter_compact_instance_init (UnityCheckOptionFilterCompact * self)
{
}


GType
unity_check_option_filter_compact_get_type (void)
{
	static volatile gsize unity_check_option_filter_compact_type_id__volatile = 0;
	if (g_once_init_enter (&unity_check_option_filter_compact_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityCheckOptionFilterCompactClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_check_option_filter_compact_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityCheckOptionFilterCompact), 0, (GInstanceInitFunc) unity_check_option_filter_compact_instance_init, NULL };
		GType unity_check_option_filter_compact_type_id;
		unity_check_option_filter_compact_type_id = g_type_register_static (UNITY_TYPE_OPTIONS_FILTER, "UnityCheckOptionFilterCompact", &g_define_type_info, 0);
		g_once_init_leave (&unity_check_option_filter_compact_type_id__volatile, unity_check_option_filter_compact_type_id);
	}
	return unity_check_option_filter_compact_type_id__volatile;
}


UnityRatingsFilter*
unity_ratings_filter_construct (GType object_type,
                                const gchar* id,
                                const gchar* display_name,
                                GIcon* icon_hint,
                                gboolean collapsed)
{
	UnityRatingsFilter * self = NULL;
	g_return_val_if_fail (id != NULL, NULL);
	g_return_val_if_fail (display_name != NULL, NULL);
	self = (UnityRatingsFilter*) g_object_new (object_type, "id", id, "display-name", display_name, "icon-hint", icon_hint, "collapsed", collapsed, "renderer", UNITY_FILTER_RENDERER_RATINGS, "rating", 0.0f, "visible", TRUE, "filtering", FALSE, NULL);
	return self;
}


UnityRatingsFilter*
unity_ratings_filter_new (const gchar* id,
                          const gchar* display_name,
                          GIcon* icon_hint,
                          gboolean collapsed)
{
	return unity_ratings_filter_construct (UNITY_TYPE_RATINGS_FILTER, id, display_name, icon_hint, collapsed);
}


static void
unity_ratings_filter_real_update (UnityFilter* base,
                                  GVariant* properties)
{
	UnityRatingsFilter * self;
	GVariantIter* iter = NULL;
	self = (UnityRatingsFilter*) base;
	g_return_if_fail (properties != NULL);
	g_variant_get (properties, "a{sv}", &iter, NULL);
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp0_ = FALSE;
			_tmp0_ = TRUE;
			while (TRUE) {
				gint _tmp2_;
				GVariantIter* _tmp3_;
				gchar* key = NULL;
				GVariant* val = NULL;
				GVariantIter* _tmp4_;
				const gchar* _tmp5_;
				if (!_tmp0_) {
					gint _tmp1_;
					_tmp1_ = i;
					i = _tmp1_ + 1;
				}
				_tmp0_ = FALSE;
				_tmp2_ = i;
				_tmp3_ = iter;
				if (!(((gsize) _tmp2_) < g_variant_iter_n_children (_tmp3_))) {
					break;
				}
				_tmp4_ = iter;
				g_variant_iter_next (_tmp4_, "{sv}", &key, &val, NULL);
				_tmp5_ = key;
				if (g_strcmp0 (_tmp5_, "rating") == 0) {
					GVariant* _tmp6_;
					_tmp6_ = val;
					unity_ratings_filter_set_rating (self, (gfloat) g_variant_get_double (_tmp6_));
				}
				_g_variant_unref0 (val);
				_g_free0 (key);
			}
		}
	}
	g_signal_emit ((UnityFilter*) self, unity_filter_signals[UNITY_FILTER_CHANGED_SIGNAL], 0);
	_g_variant_iter_free0 (iter);
}


static GVariant*
_variant_new15 (gdouble value)
{
	return g_variant_ref_sink (g_variant_new_double (value));
}


static GHashTable*
unity_ratings_filter_real_get_hints (UnityFilter* base)
{
	UnityRatingsFilter * self;
	GHashTable* result = NULL;
	GHashTable* hash = NULL;
	GHashTable* _tmp0_;
	gchar* _tmp1_;
	GVariant* _tmp2_;
	self = (UnityRatingsFilter*) base;
	_tmp0_ = g_hash_table_new_full (NULL, NULL, _g_free0_, _g_variant_unref0_);
	hash = _tmp0_;
	_tmp1_ = g_strdup ("rating");
	_tmp2_ = _variant_new15 (0.0);
	g_hash_table_insert (hash, _tmp1_, _tmp2_);
	result = hash;
	return result;
}


gfloat
unity_ratings_filter_get_rating (UnityRatingsFilter* self)
{
	gfloat result;
	gfloat _tmp0_;
	g_return_val_if_fail (self != NULL, 0.0F);
	_tmp0_ = self->priv->_rating;
	result = _tmp0_;
	return result;
}


void
unity_ratings_filter_set_rating (UnityRatingsFilter* self,
                                 gfloat value)
{
	g_return_if_fail (self != NULL);
	if (unity_ratings_filter_get_rating (self) != value) {
		self->priv->_rating = value;
		g_object_notify_by_pspec ((GObject *) self, unity_ratings_filter_properties[UNITY_RATINGS_FILTER_RATING_PROPERTY]);
	}
}


static void
unity_ratings_filter_class_init (UnityRatingsFilterClass * klass)
{
	unity_ratings_filter_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityRatingsFilterPrivate));
	((UnityFilterClass *) klass)->update = (void (*) (UnityFilter *, GVariant*)) unity_ratings_filter_real_update;
	((UnityFilterClass *) klass)->get_hints = (GHashTable* (*) (UnityFilter *)) unity_ratings_filter_real_get_hints;
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_ratings_filter_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_ratings_filter_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_ratings_filter_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_RATINGS_FILTER_RATING_PROPERTY, unity_ratings_filter_properties[UNITY_RATINGS_FILTER_RATING_PROPERTY] = g_param_spec_float ("rating", "rating", "rating", -G_MAXFLOAT, G_MAXFLOAT, 0.0F, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
}


static void
unity_ratings_filter_instance_init (UnityRatingsFilter * self)
{
	self->priv = UNITY_RATINGS_FILTER_GET_PRIVATE (self);
}


static void
unity_ratings_filter_finalize (GObject * obj)
{
	UnityRatingsFilter * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_RATINGS_FILTER, UnityRatingsFilter);
	G_OBJECT_CLASS (unity_ratings_filter_parent_class)->finalize (obj);
}


GType
unity_ratings_filter_get_type (void)
{
	static volatile gsize unity_ratings_filter_type_id__volatile = 0;
	if (g_once_init_enter (&unity_ratings_filter_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityRatingsFilterClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_ratings_filter_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityRatingsFilter), 0, (GInstanceInitFunc) unity_ratings_filter_instance_init, NULL };
		GType unity_ratings_filter_type_id;
		unity_ratings_filter_type_id = g_type_register_static (UNITY_TYPE_FILTER, "UnityRatingsFilter", &g_define_type_info, 0);
		g_once_init_leave (&unity_ratings_filter_type_id__volatile, unity_ratings_filter_type_id);
	}
	return unity_ratings_filter_type_id__volatile;
}


static void
_vala_unity_ratings_filter_get_property (GObject * object,
                                         guint property_id,
                                         GValue * value,
                                         GParamSpec * pspec)
{
	UnityRatingsFilter * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_RATINGS_FILTER, UnityRatingsFilter);
	switch (property_id) {
		case UNITY_RATINGS_FILTER_RATING_PROPERTY:
		g_value_set_float (value, unity_ratings_filter_get_rating (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_ratings_filter_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec)
{
	UnityRatingsFilter * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_RATINGS_FILTER, UnityRatingsFilter);
	switch (property_id) {
		case UNITY_RATINGS_FILTER_RATING_PROPERTY:
		unity_ratings_filter_set_rating (self, g_value_get_float (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


UnityMultiRangeFilter*
unity_multi_range_filter_construct (GType object_type,
                                    const gchar* id,
                                    const gchar* display_name,
                                    GIcon* icon_hint,
                                    gboolean collapsed)
{
	UnityMultiRangeFilter * self = NULL;
	g_return_val_if_fail (id != NULL, NULL);
	g_return_val_if_fail (display_name != NULL, NULL);
	self = (UnityMultiRangeFilter*) g_object_new (object_type, "id", id, "display-name", display_name, "icon-hint", icon_hint, "collapsed", collapsed, "renderer", UNITY_FILTER_RENDERER_MULTIRANGE, "visible", TRUE, "filtering", FALSE, NULL);
	return self;
}


UnityMultiRangeFilter*
unity_multi_range_filter_new (const gchar* id,
                              const gchar* display_name,
                              GIcon* icon_hint,
                              gboolean collapsed)
{
	return unity_multi_range_filter_construct (UNITY_TYPE_MULTI_RANGE_FILTER, id, display_name, icon_hint, collapsed);
}


UnityFilterOption*
unity_multi_range_filter_get_first_active (UnityMultiRangeFilter* self)
{
	UnityFilterOption* result = NULL;
	GList* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = ((UnityOptionsFilter*) self)->options;
	{
		GList* option_collection = NULL;
		GList* option_it = NULL;
		option_collection = _tmp0_;
		for (option_it = option_collection; option_it != NULL; option_it = option_it->next) {
			UnityFilterOption* _tmp1_;
			UnityFilterOption* option = NULL;
			_tmp1_ = _g_object_ref0 ((UnityFilterOption*) option_it->data);
			option = _tmp1_;
			{
				UnityFilterOption* _tmp2_;
				gboolean _tmp3_;
				gboolean _tmp4_;
				_tmp2_ = option;
				_tmp3_ = unity_filter_option_get_active (_tmp2_);
				_tmp4_ = _tmp3_;
				if (_tmp4_) {
					result = option;
					return result;
				}
				_g_object_unref0 (option);
			}
		}
	}
	result = NULL;
	return result;
}


UnityFilterOption*
unity_multi_range_filter_get_last_active (UnityMultiRangeFilter* self)
{
	UnityFilterOption* result = NULL;
	UnityFilterOption* ret = NULL;
	GList* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	ret = NULL;
	_tmp0_ = ((UnityOptionsFilter*) self)->options;
	{
		GList* option_collection = NULL;
		GList* option_it = NULL;
		option_collection = _tmp0_;
		for (option_it = option_collection; option_it != NULL; option_it = option_it->next) {
			UnityFilterOption* _tmp1_;
			UnityFilterOption* option = NULL;
			_tmp1_ = _g_object_ref0 ((UnityFilterOption*) option_it->data);
			option = _tmp1_;
			{
				UnityFilterOption* _tmp2_;
				gboolean _tmp3_;
				gboolean _tmp4_;
				_tmp2_ = option;
				_tmp3_ = unity_filter_option_get_active (_tmp2_);
				_tmp4_ = _tmp3_;
				if (_tmp4_) {
					UnityFilterOption* _tmp5_;
					UnityFilterOption* _tmp6_;
					_tmp5_ = option;
					_tmp6_ = _g_object_ref0 (_tmp5_);
					_g_object_unref0 (ret);
					ret = _tmp6_;
				}
				_g_object_unref0 (option);
			}
		}
	}
	result = ret;
	return result;
}


static void
unity_multi_range_filter_class_init (UnityMultiRangeFilterClass * klass)
{
	unity_multi_range_filter_parent_class = g_type_class_peek_parent (klass);
}


static void
unity_multi_range_filter_instance_init (UnityMultiRangeFilter * self)
{
}


GType
unity_multi_range_filter_get_type (void)
{
	static volatile gsize unity_multi_range_filter_type_id__volatile = 0;
	if (g_once_init_enter (&unity_multi_range_filter_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityMultiRangeFilterClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_multi_range_filter_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityMultiRangeFilter), 0, (GInstanceInitFunc) unity_multi_range_filter_instance_init, NULL };
		GType unity_multi_range_filter_type_id;
		unity_multi_range_filter_type_id = g_type_register_static (UNITY_TYPE_OPTIONS_FILTER, "UnityMultiRangeFilter", &g_define_type_info, 0);
		g_once_init_leave (&unity_multi_range_filter_type_id__volatile, unity_multi_range_filter_type_id);
	}
	return unity_multi_range_filter_type_id__volatile;
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}



