
/* This file is generated by glib-mkenums, do not modify it. This code is licensed under the same license as the containing project. Note that it links to GLib, so must comply with the LGPL linking clauses. */

#include "e-source-enumtypes.h"
/* enumerations from "/run/build/evolution-data-server/src/libedataserver/e-source-enums.h" */
#include "/run/build/evolution-data-server/src/libedataserver/e-source-enums.h"
GType
e_mdn_response_policy_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_MDN_RESPONSE_POLICY_NEVER,
			  "E_MDN_RESPONSE_POLICY_NEVER",
			  "never" },
			{ E_MDN_RESPONSE_POLICY_ALWAYS,
			  "E_MDN_RESPONSE_POLICY_ALWAYS",
			  "always" },
			{ E_MDN_RESPONSE_POLICY_ASK,
			  "E_MDN_RESPONSE_POLICY_ASK",
			  "ask" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("EMdnResponsePolicy"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_proxy_method_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_PROXY_METHOD_DEFAULT,
			  "E_PROXY_METHOD_DEFAULT",
			  "default" },
			{ E_PROXY_METHOD_MANUAL,
			  "E_PROXY_METHOD_MANUAL",
			  "manual" },
			{ E_PROXY_METHOD_AUTO,
			  "E_PROXY_METHOD_AUTO",
			  "auto" },
			{ E_PROXY_METHOD_NONE,
			  "E_PROXY_METHOD_NONE",
			  "none" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("EProxyMethod"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_source_authentication_result_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_SOURCE_AUTHENTICATION_UNKNOWN,
			  "E_SOURCE_AUTHENTICATION_UNKNOWN",
			  "unknown" },
			{ E_SOURCE_AUTHENTICATION_ERROR,
			  "E_SOURCE_AUTHENTICATION_ERROR",
			  "error" },
			{ E_SOURCE_AUTHENTICATION_ERROR_SSL_FAILED,
			  "E_SOURCE_AUTHENTICATION_ERROR_SSL_FAILED",
			  "error-ssl-failed" },
			{ E_SOURCE_AUTHENTICATION_ACCEPTED,
			  "E_SOURCE_AUTHENTICATION_ACCEPTED",
			  "accepted" },
			{ E_SOURCE_AUTHENTICATION_REJECTED,
			  "E_SOURCE_AUTHENTICATION_REJECTED",
			  "rejected" },
			{ E_SOURCE_AUTHENTICATION_REQUIRED,
			  "E_SOURCE_AUTHENTICATION_REQUIRED",
			  "required" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("ESourceAuthenticationResult"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_trust_prompt_response_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_TRUST_PROMPT_RESPONSE_UNKNOWN,
			  "E_TRUST_PROMPT_RESPONSE_UNKNOWN",
			  "unknown" },
			{ E_TRUST_PROMPT_RESPONSE_REJECT,
			  "E_TRUST_PROMPT_RESPONSE_REJECT",
			  "reject" },
			{ E_TRUST_PROMPT_RESPONSE_ACCEPT,
			  "E_TRUST_PROMPT_RESPONSE_ACCEPT",
			  "accept" },
			{ E_TRUST_PROMPT_RESPONSE_ACCEPT_TEMPORARILY,
			  "E_TRUST_PROMPT_RESPONSE_ACCEPT_TEMPORARILY",
			  "accept-temporarily" },
			{ E_TRUST_PROMPT_RESPONSE_REJECT_TEMPORARILY,
			  "E_TRUST_PROMPT_RESPONSE_REJECT_TEMPORARILY",
			  "reject-temporarily" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("ETrustPromptResponse"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_source_connection_status_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_SOURCE_CONNECTION_STATUS_DISCONNECTED,
			  "E_SOURCE_CONNECTION_STATUS_DISCONNECTED",
			  "disconnected" },
			{ E_SOURCE_CONNECTION_STATUS_AWAITING_CREDENTIALS,
			  "E_SOURCE_CONNECTION_STATUS_AWAITING_CREDENTIALS",
			  "awaiting-credentials" },
			{ E_SOURCE_CONNECTION_STATUS_SSL_FAILED,
			  "E_SOURCE_CONNECTION_STATUS_SSL_FAILED",
			  "ssl-failed" },
			{ E_SOURCE_CONNECTION_STATUS_CONNECTING,
			  "E_SOURCE_CONNECTION_STATUS_CONNECTING",
			  "connecting" },
			{ E_SOURCE_CONNECTION_STATUS_CONNECTED,
			  "E_SOURCE_CONNECTION_STATUS_CONNECTED",
			  "connected" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("ESourceConnectionStatus"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_source_credentials_reason_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_SOURCE_CREDENTIALS_REASON_UNKNOWN,
			  "E_SOURCE_CREDENTIALS_REASON_UNKNOWN",
			  "unknown" },
			{ E_SOURCE_CREDENTIALS_REASON_REQUIRED,
			  "E_SOURCE_CREDENTIALS_REASON_REQUIRED",
			  "required" },
			{ E_SOURCE_CREDENTIALS_REASON_REJECTED,
			  "E_SOURCE_CREDENTIALS_REASON_REJECTED",
			  "rejected" },
			{ E_SOURCE_CREDENTIALS_REASON_SSL_FAILED,
			  "E_SOURCE_CREDENTIALS_REASON_SSL_FAILED",
			  "ssl-failed" },
			{ E_SOURCE_CREDENTIALS_REASON_ERROR,
			  "E_SOURCE_CREDENTIALS_REASON_ERROR",
			  "error" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("ESourceCredentialsReason"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_source_ldap_authentication_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_SOURCE_LDAP_AUTHENTICATION_NONE,
			  "E_SOURCE_LDAP_AUTHENTICATION_NONE",
			  "none" },
			{ E_SOURCE_LDAP_AUTHENTICATION_EMAIL,
			  "E_SOURCE_LDAP_AUTHENTICATION_EMAIL",
			  "email" },
			{ E_SOURCE_LDAP_AUTHENTICATION_BINDDN,
			  "E_SOURCE_LDAP_AUTHENTICATION_BINDDN",
			  "binddn" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("ESourceLDAPAuthentication"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_source_ldap_scope_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_SOURCE_LDAP_SCOPE_ONELEVEL,
			  "E_SOURCE_LDAP_SCOPE_ONELEVEL",
			  "onelevel" },
			{ E_SOURCE_LDAP_SCOPE_SUBTREE,
			  "E_SOURCE_LDAP_SCOPE_SUBTREE",
			  "subtree" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("ESourceLDAPScope"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_source_ldap_security_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_SOURCE_LDAP_SECURITY_NONE,
			  "E_SOURCE_LDAP_SECURITY_NONE",
			  "none" },
			{ E_SOURCE_LDAP_SECURITY_LDAPS,
			  "E_SOURCE_LDAP_SECURITY_LDAPS",
			  "ldaps" },
			{ E_SOURCE_LDAP_SECURITY_STARTTLS,
			  "E_SOURCE_LDAP_SECURITY_STARTTLS",
			  "starttls" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("ESourceLDAPSecurity"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_source_weather_units_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_SOURCE_WEATHER_UNITS_FAHRENHEIT,
			  "E_SOURCE_WEATHER_UNITS_FAHRENHEIT",
			  "fahrenheit" },
			{ E_SOURCE_WEATHER_UNITS_CENTIGRADE,
			  "E_SOURCE_WEATHER_UNITS_CENTIGRADE",
			  "centigrade" },
			{ E_SOURCE_WEATHER_UNITS_KELVIN,
			  "E_SOURCE_WEATHER_UNITS_KELVIN",
			  "kelvin" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("ESourceWeatherUnits"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_source_mail_composition_reply_style_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_DEFAULT,
			  "E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_DEFAULT",
			  "default" },
			{ E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_QUOTED,
			  "E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_QUOTED",
			  "quoted" },
			{ E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_DO_NOT_QUOTE,
			  "E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_DO_NOT_QUOTE",
			  "do-not-quote" },
			{ E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_ATTACH,
			  "E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_ATTACH",
			  "attach" },
			{ E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_OUTLOOK,
			  "E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_OUTLOOK",
			  "outlook" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("ESourceMailCompositionReplyStyle"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_three_state_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_THREE_STATE_OFF,
			  "E_THREE_STATE_OFF",
			  "off" },
			{ E_THREE_STATE_ON,
			  "E_THREE_STATE_ON",
			  "on" },
			{ E_THREE_STATE_INCONSISTENT,
			  "E_THREE_STATE_INCONSISTENT",
			  "inconsistent" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("EThreeState"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}

/* Generated data ends here */

