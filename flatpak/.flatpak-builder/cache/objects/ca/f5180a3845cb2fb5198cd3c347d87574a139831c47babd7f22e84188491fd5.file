/* persona.c generated by valac 0.40.11, the Vala compiler
 * generated from persona.vala, do not modify */

/*
 * Copyright (C) 2010 Collabora Ltd.
 * Copyright (C) 2013 Philip Withnall
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Travis Reitter <travis.reitter@collabora.co.uk>
 *       Philip Withnall <philip@tecnocode.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>


#define FOLKS_TYPE_PERSONA (folks_persona_get_type ())
#define FOLKS_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_PERSONA, FolksPersona))
#define FOLKS_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_PERSONA, FolksPersonaClass))
#define FOLKS_IS_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_PERSONA))
#define FOLKS_IS_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_PERSONA))
#define FOLKS_PERSONA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_PERSONA, FolksPersonaClass))

typedef struct _FolksPersona FolksPersona;
typedef struct _FolksPersonaClass FolksPersonaClass;
typedef struct _FolksPersonaPrivate FolksPersonaPrivate;

#define FOLKS_TYPE_PERSONA_STORE (folks_persona_store_get_type ())
#define FOLKS_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_PERSONA_STORE, FolksPersonaStore))
#define FOLKS_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_PERSONA_STORE, FolksPersonaStoreClass))
#define FOLKS_IS_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_PERSONA_STORE))
#define FOLKS_IS_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_PERSONA_STORE))
#define FOLKS_PERSONA_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_PERSONA_STORE, FolksPersonaStoreClass))

typedef struct _FolksPersonaStore FolksPersonaStore;
typedef struct _FolksPersonaStoreClass FolksPersonaStoreClass;

#define FOLKS_TYPE_INDIVIDUAL (folks_individual_get_type ())
#define FOLKS_INDIVIDUAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_INDIVIDUAL, FolksIndividual))
#define FOLKS_INDIVIDUAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_INDIVIDUAL, FolksIndividualClass))
#define FOLKS_IS_INDIVIDUAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_INDIVIDUAL))
#define FOLKS_IS_INDIVIDUAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_INDIVIDUAL))
#define FOLKS_INDIVIDUAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_INDIVIDUAL, FolksIndividualClass))

typedef struct _FolksIndividual FolksIndividual;
typedef struct _FolksIndividualClass FolksIndividualClass;
enum  {
	FOLKS_PERSONA_0_PROPERTY,
	FOLKS_PERSONA_IID_PROPERTY,
	FOLKS_PERSONA_UID_PROPERTY,
	FOLKS_PERSONA_DISPLAY_ID_PROPERTY,
	FOLKS_PERSONA_IS_USER_PROPERTY,
	FOLKS_PERSONA_STORE_PROPERTY,
	FOLKS_PERSONA_INDIVIDUAL_PROPERTY,
	FOLKS_PERSONA_LINKABLE_PROPERTIES_PROPERTY,
	FOLKS_PERSONA_WRITEABLE_PROPERTIES_PROPERTY,
	FOLKS_PERSONA_NUM_PROPERTIES
};
static GParamSpec* folks_persona_properties[FOLKS_PERSONA_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

/**
 * Errors which can be thrown when asynchronously setting a property of a
 * {@link Persona} using a setter method defined on an interface such as
 * {@link AliasDetails}.
 *
 * @since 0.6.2
 */
typedef enum  {
	FOLKS_PROPERTY_ERROR_NOT_WRITEABLE,
	FOLKS_PROPERTY_ERROR_INVALID_VALUE,
	FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR,
	FOLKS_PROPERTY_ERROR_UNAVAILABLE
} FolksPropertyError;
#define FOLKS_PROPERTY_ERROR folks_property_error_quark ()
typedef void (*FolksPersonaLinkablePropertyCallback) (const gchar* link, gpointer user_data);
struct _FolksPersona {
	GObject parent_instance;
	FolksPersonaPrivate * priv;
};

struct _FolksPersonaClass {
	GObjectClass parent_class;
	void (*linkable_property_to_links) (FolksPersona* self, const gchar* prop_name, FolksPersonaLinkablePropertyCallback callback, gpointer callback_target);
	gchar** (*get_linkable_properties) (FolksPersona* self, int* result_length1);
	gchar** (*get_writeable_properties) (FolksPersona* self, int* result_length1);
};

struct _FolksPersonaPrivate {
	gchar* _iid;
	gchar* _uid;
	gchar* _display_id;
	gboolean _is_user;
	FolksPersonaStore* _store;
	FolksIndividual* _individual;
};


static gpointer folks_persona_parent_class = NULL;

GQuark folks_property_error_quark (void);
GType folks_persona_get_type (void) G_GNUC_CONST;
GType folks_persona_store_get_type (void) G_GNUC_CONST;
GType folks_individual_get_type (void) G_GNUC_CONST;
#define FOLKS_PERSONA_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_TYPE_PERSONA, FolksPersonaPrivate))
void folks_persona_set_individual (FolksPersona* self,
                                   FolksIndividual* value);
static void _folks_persona_individual_weak_notify_cb (FolksPersona* self,
                                               GObject* obj);
const gchar* folks_persona_get_iid (FolksPersona* self);
void folks_persona_linkable_property_to_links (FolksPersona* self,
                                               const gchar* prop_name,
                                               FolksPersonaLinkablePropertyCallback callback,
                                               gpointer callback_target);
static void folks_persona_real_linkable_property_to_links (FolksPersona* self,
                                                    const gchar* prop_name,
                                                    FolksPersonaLinkablePropertyCallback callback,
                                                    gpointer callback_target);
static gchar* _folks_persona_escape_uid_component (const gchar* component);
static gchar* _folks_persona_unescape_uid_component (const gchar* component);
gchar* folks_persona_build_uid (const gchar* backend_name,
                                const gchar* persona_store_id,
                                const gchar* persona_id);
void folks_persona_split_uid (const gchar* uid,
                              gchar* * backend_name,
                              gchar* * persona_store_id,
                              gchar* * persona_id);
FolksPersona* folks_persona_construct (GType object_type);
static void folks_persona_set_iid (FolksPersona* self,
                            const gchar* value);
const gchar* folks_persona_get_uid (FolksPersona* self);
static void folks_persona_set_uid (FolksPersona* self,
                            const gchar* value);
const gchar* folks_persona_get_display_id (FolksPersona* self);
static void folks_persona_set_display_id (FolksPersona* self,
                                   const gchar* value);
gboolean folks_persona_get_is_user (FolksPersona* self);
static void folks_persona_set_is_user (FolksPersona* self,
                                gboolean value);
FolksPersonaStore* folks_persona_get_store (FolksPersona* self);
static void folks_persona_set_store (FolksPersona* self,
                              FolksPersonaStore* value);
FolksIndividual* folks_persona_get_individual (FolksPersona* self);
GeeSet* folks_individual_get_personas (FolksIndividual* self);
static void __folks_persona_individual_weak_notify_cb_gweak_notify (gpointer self,
                                                             GObject* object);
gchar** folks_persona_get_linkable_properties (FolksPersona* self,
                                               int* result_length1);
gchar** folks_persona_get_writeable_properties (FolksPersona* self,
                                                int* result_length1);
static void folks_persona_finalize (GObject * obj);
static void _vala_folks_persona_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec);
static void _vala_folks_persona_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec);


GQuark
folks_property_error_quark (void)
{
	return g_quark_from_static_string ("folks_property_error-quark");
}


static void
_folks_persona_individual_weak_notify_cb (FolksPersona* self,
                                          GObject* obj)
{
	const gchar* _tmp0_;
#line 161 "/run/build/folks/folks/persona.vala"
	g_return_if_fail (self != NULL);
#line 161 "/run/build/folks/folks/persona.vala"
	g_return_if_fail (obj != NULL);
#line 163 "/run/build/folks/folks/persona.vala"
	_tmp0_ = self->priv->_iid;
#line 163 "/run/build/folks/folks/persona.vala"
	g_debug ("persona.vala:163: Individual %p has been destroyed; resetting the Indi" \
"vidual of %s", obj, _tmp0_);
#line 165 "/run/build/folks/folks/persona.vala"
	self->priv->_individual = NULL;
#line 166 "/run/build/folks/folks/persona.vala"
	g_object_notify ((GObject*) self, "individual");
#line 210 "persona.c"
}


/**
   * Produce one or more mapping strings for the given property's value.
   *
   * This is a virtual method, to be overridden by subclasses of {@link Persona}
   * who have linkable properties. Each of their linkable properties should be
   * handled by their implementation of this function, examining the current
   * value of the property and calling ``callback`` with one or more mapping
   * strings for the property's value. Each of these mapping strings will be
   * added to the {@link IndividualAggregator}'s link map, related to the
   * {@link Individual} instance which contains this {@link Persona}.
   *
   * @param prop_name the name of the linkable property to use, which must be
   * listed in {@link Persona.linkable_properties}
   * @param callback a callback to execute for each of the mapping strings
   * generated by this property
   * @see Persona.linkable_properties
   * @since 0.1.13
   */
static void
folks_persona_real_linkable_property_to_links (FolksPersona* self,
                                               const gchar* prop_name,
                                               FolksPersonaLinkablePropertyCallback callback,
                                               gpointer callback_target)
{
#line 278 "/run/build/folks/folks/persona.vala"
	g_return_if_fail (prop_name != NULL);
#line 283 "/run/build/folks/folks/persona.vala"
	g_assert_not_reached ();
#line 242 "persona.c"
}


void
folks_persona_linkable_property_to_links (FolksPersona* self,
                                          const gchar* prop_name,
                                          FolksPersonaLinkablePropertyCallback callback,
                                          gpointer callback_target)
{
#line 278 "/run/build/folks/folks/persona.vala"
	g_return_if_fail (self != NULL);
#line 278 "/run/build/folks/folks/persona.vala"
	FOLKS_PERSONA_GET_CLASS (self)->linkable_property_to_links (self, prop_name, callback, callback_target);
#line 256 "persona.c"
}


static gchar*
string_replace (const gchar* self,
                const gchar* old,
                const gchar* replacement)
{
	gchar* result = NULL;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	GError * _inner_error_ = NULL;
#line 1477 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1477 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (old != NULL, NULL);
#line 1477 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (replacement != NULL, NULL);
#line 1478 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if ((*((gchar*) self)) == '\0') {
#line 1478 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp1_ = TRUE;
#line 279 "persona.c"
	} else {
#line 1478 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp1_ = (*((gchar*) old)) == '\0';
#line 283 "persona.c"
	}
#line 1478 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (_tmp1_) {
#line 1478 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp0_ = TRUE;
#line 289 "persona.c"
	} else {
#line 1478 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp0_ = g_strcmp0 (old, replacement) == 0;
#line 293 "persona.c"
	}
#line 1478 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (_tmp0_) {
#line 297 "persona.c"
		gchar* _tmp2_;
#line 1479 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp2_ = g_strdup (self);
#line 1479 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = _tmp2_;
#line 1479 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 305 "persona.c"
	}
	{
		GRegex* regex = NULL;
		gchar* _tmp3_;
		gchar* _tmp4_;
		GRegex* _tmp5_;
		GRegex* _tmp6_;
		gchar* _tmp7_ = NULL;
		GRegex* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp3_ = g_regex_escape_string (old, -1);
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp4_ = _tmp3_;
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp5_ = g_regex_new (_tmp4_, 0, 0, &_inner_error_);
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp6_ = _tmp5_;
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_g_free0 (_tmp4_);
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		regex = _tmp6_;
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			if (_inner_error_->domain == G_REGEX_ERROR) {
#line 333 "persona.c"
				goto __catch25_g_regex_error;
			}
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			g_clear_error (&_inner_error_);
#line 1482 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			return NULL;
#line 342 "persona.c"
		}
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp8_ = regex;
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp9_ = g_regex_replace_literal (_tmp8_, self, (gssize) -1, 0, replacement, 0, &_inner_error_);
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp7_ = _tmp9_;
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			_g_regex_unref0 (regex);
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			if (_inner_error_->domain == G_REGEX_ERROR) {
#line 356 "persona.c"
				goto __catch25_g_regex_error;
			}
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			_g_regex_unref0 (regex);
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			g_clear_error (&_inner_error_);
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			return NULL;
#line 367 "persona.c"
		}
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp10_ = _tmp7_;
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp7_ = NULL;
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = _tmp10_;
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_g_free0 (_tmp7_);
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_g_regex_unref0 (regex);
#line 1483 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 381 "persona.c"
	}
	goto __finally25;
	__catch25_g_regex_error:
	{
		GError* e = NULL;
#line 1481 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		e = _inner_error_;
#line 1481 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_inner_error_ = NULL;
#line 1485 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		g_assert_not_reached ();
#line 1481 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_g_error_free0 (e);
#line 395 "persona.c"
	}
	__finally25:
#line 1481 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 1481 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 1481 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		g_clear_error (&_inner_error_);
#line 1481 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return NULL;
#line 406 "persona.c"
	}
}


static gchar*
_folks_persona_escape_uid_component (const gchar* component)
{
	gchar* result = NULL;
	gchar* escaped = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
#line 286 "/run/build/folks/folks/persona.vala"
	g_return_val_if_fail (component != NULL, NULL);
#line 289 "/run/build/folks/folks/persona.vala"
	_tmp0_ = string_replace (component, "\\", "\\\\");
#line 289 "/run/build/folks/folks/persona.vala"
	escaped = _tmp0_;
#line 290 "/run/build/folks/folks/persona.vala"
	_tmp1_ = string_replace (escaped, ":", "\\:");
#line 290 "/run/build/folks/folks/persona.vala"
	result = _tmp1_;
#line 290 "/run/build/folks/folks/persona.vala"
	_g_free0 (escaped);
#line 290 "/run/build/folks/folks/persona.vala"
	return result;
#line 432 "persona.c"
}


static gchar*
_folks_persona_unescape_uid_component (const gchar* component)
{
	gchar* result = NULL;
	gchar* unescaped = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
#line 293 "/run/build/folks/folks/persona.vala"
	g_return_val_if_fail (component != NULL, NULL);
#line 296 "/run/build/folks/folks/persona.vala"
	_tmp0_ = string_replace (component, "\\:", ":");
#line 296 "/run/build/folks/folks/persona.vala"
	unescaped = _tmp0_;
#line 297 "/run/build/folks/folks/persona.vala"
	_tmp1_ = string_replace (unescaped, "\\", "\\\\");
#line 297 "/run/build/folks/folks/persona.vala"
	result = _tmp1_;
#line 297 "/run/build/folks/folks/persona.vala"
	_g_free0 (unescaped);
#line 297 "/run/build/folks/folks/persona.vala"
	return result;
#line 457 "persona.c"
}


/**
   * Build a UID from the given components.
   *
   * Each component is escaped before the UID is built. All components must be
   * non-empty strings.
   *
   * @param backend_name the {@link Backend.name}
   * @param persona_store_id the {@link PersonaStore.id}
   * @param persona_id the Persona identifier (backend-specific)
   * @return a valid UID
   * @see Persona.split_uid
   * @since 0.1.13
   */
gchar*
folks_persona_build_uid (const gchar* backend_name,
                         const gchar* persona_store_id,
                         const gchar* persona_id)
{
	gchar* result = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
#line 313 "/run/build/folks/folks/persona.vala"
	g_return_val_if_fail (backend_name != NULL, NULL);
#line 313 "/run/build/folks/folks/persona.vala"
	g_return_val_if_fail (persona_store_id != NULL, NULL);
#line 313 "/run/build/folks/folks/persona.vala"
	g_return_val_if_fail (persona_id != NULL, NULL);
#line 313 "/run/build/folks/folks/persona.vala"
	_vala_return_val_if_fail (g_strcmp0 (backend_name, "") != 0, "backend_name != \"\"", NULL);
#line 313 "/run/build/folks/folks/persona.vala"
	_vala_return_val_if_fail (g_strcmp0 (persona_store_id, "") != 0, "persona_store_id != \"\"", NULL);
#line 313 "/run/build/folks/folks/persona.vala"
	_vala_return_val_if_fail (g_strcmp0 (persona_id, "") != 0, "persona_id != \"\"", NULL);
#line 319 "/run/build/folks/folks/persona.vala"
	_tmp0_ = _folks_persona_escape_uid_component (backend_name);
#line 319 "/run/build/folks/folks/persona.vala"
	_tmp1_ = _tmp0_;
#line 319 "/run/build/folks/folks/persona.vala"
	_tmp2_ = _folks_persona_escape_uid_component (persona_store_id);
#line 319 "/run/build/folks/folks/persona.vala"
	_tmp3_ = _tmp2_;
#line 319 "/run/build/folks/folks/persona.vala"
	_tmp4_ = _folks_persona_escape_uid_component (persona_id);
#line 319 "/run/build/folks/folks/persona.vala"
	_tmp5_ = _tmp4_;
#line 319 "/run/build/folks/folks/persona.vala"
	_tmp6_ = g_strdup_printf ("%s:%s:%s", _tmp1_, _tmp3_, _tmp5_);
#line 319 "/run/build/folks/folks/persona.vala"
	_tmp7_ = _tmp6_;
#line 319 "/run/build/folks/folks/persona.vala"
	_g_free0 (_tmp5_);
#line 319 "/run/build/folks/folks/persona.vala"
	_g_free0 (_tmp3_);
#line 319 "/run/build/folks/folks/persona.vala"
	_g_free0 (_tmp1_);
#line 319 "/run/build/folks/folks/persona.vala"
	result = _tmp7_;
#line 319 "/run/build/folks/folks/persona.vala"
	return result;
#line 526 "persona.c"
}


/**
   * Split a UID into its component parts.
   *
   * Each component is unescaped before being returned. The UID //must// be
   * correctly formed.
   *
   * @param uid a valid UID
   * @param backend_name the {@link Backend.name}
   * @param persona_store_id the {@link PersonaStore.id}
   * @param persona_id the Persona identifier (backend-specific)
   * @see Persona.build_uid
   * @since 0.1.13
   */
static gunichar
string_get_char (const gchar* self,
                 glong index)
{
	gunichar result = 0U;
#line 1210 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, 0U);
#line 1211 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = g_utf8_get_char (((gchar*) self) + index);
#line 1211 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 554 "persona.c"
}


static glong
string_strnlen (gchar* str,
                glong maxlen)
{
	glong result = 0L;
	gchar* end = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
#line 1392 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = memchr (str, 0, (gsize) maxlen);
#line 1392 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	end = _tmp0_;
#line 1393 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp1_ = end;
#line 1393 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (_tmp1_ == NULL) {
#line 1394 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = maxlen;
#line 1394 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 578 "persona.c"
	} else {
		gchar* _tmp2_;
#line 1396 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp2_ = end;
#line 1396 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = (glong) (_tmp2_ - str);
#line 1396 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 587 "persona.c"
	}
}


static gchar*
string_substring (const gchar* self,
                  glong offset,
                  glong len)
{
	gchar* result = NULL;
	glong string_length = 0L;
	gboolean _tmp0_ = FALSE;
	glong _tmp6_;
	gchar* _tmp7_;
#line 1403 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1405 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (offset >= ((glong) 0)) {
#line 1405 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp0_ = len >= ((glong) 0);
#line 608 "persona.c"
	} else {
#line 1405 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp0_ = FALSE;
#line 612 "persona.c"
	}
#line 1405 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (_tmp0_) {
#line 1407 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		string_length = string_strnlen ((gchar*) self, offset + len);
#line 618 "persona.c"
	} else {
		gint _tmp1_;
		gint _tmp2_;
#line 1409 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp1_ = strlen (self);
#line 1409 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp2_ = _tmp1_;
#line 1409 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		string_length = (glong) _tmp2_;
#line 628 "persona.c"
	}
#line 1412 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (offset < ((glong) 0)) {
#line 632 "persona.c"
		glong _tmp3_;
#line 1413 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp3_ = string_length;
#line 1413 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		offset = _tmp3_ + offset;
#line 1414 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		g_return_val_if_fail (offset >= ((glong) 0), NULL);
#line 640 "persona.c"
	} else {
		glong _tmp4_;
#line 1416 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp4_ = string_length;
#line 1416 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		g_return_val_if_fail (offset <= _tmp4_, NULL);
#line 647 "persona.c"
	}
#line 1418 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (len < ((glong) 0)) {
#line 651 "persona.c"
		glong _tmp5_;
#line 1419 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp5_ = string_length;
#line 1419 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		len = _tmp5_ - offset;
#line 657 "persona.c"
	}
#line 1421 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp6_ = string_length;
#line 1421 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail ((offset + len) <= _tmp6_, NULL);
#line 1422 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp7_ = g_strndup (((gchar*) self) + offset, (gsize) len);
#line 1422 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _tmp7_;
#line 1422 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 669 "persona.c"
}


void
folks_persona_split_uid (const gchar* uid,
                         gchar* * backend_name,
                         gchar* * persona_store_id,
                         gchar* * persona_id)
{
	gchar* _vala_backend_name = NULL;
	gchar* _vala_persona_store_id = NULL;
	gchar* _vala_persona_id = NULL;
	gboolean _tmp0_;
	gsize backend_name_length = 0UL;
	gsize persona_store_id_length = 0UL;
	gboolean escaped = FALSE;
	gboolean _tmp14_ = FALSE;
	gsize _tmp15_;
	gsize _tmp17_;
	gchar* _tmp18_;
	gchar* _tmp19_;
	gchar* _tmp20_;
	gsize _tmp21_;
	gsize _tmp22_;
	gchar* _tmp23_;
	gchar* _tmp24_;
	gchar* _tmp25_;
	gsize _tmp26_;
	gsize _tmp27_;
	gchar* _tmp28_;
#line 337 "/run/build/folks/folks/persona.vala"
	g_return_if_fail (uid != NULL);
#line 340 "/run/build/folks/folks/persona.vala"
	_tmp0_ = g_utf8_validate (uid, (gssize) -1, NULL);
#line 340 "/run/build/folks/folks/persona.vala"
	_vala_assert (_tmp0_, "uid.validate ()");
#line 342 "/run/build/folks/folks/persona.vala"
	backend_name_length = (gsize) 0;
#line 342 "/run/build/folks/folks/persona.vala"
	persona_store_id_length = (gsize) 0;
#line 343 "/run/build/folks/folks/persona.vala"
	escaped = FALSE;
#line 712 "persona.c"
	{
		const gchar* i = NULL;
#line 344 "/run/build/folks/folks/persona.vala"
		i = uid;
#line 717 "persona.c"
		{
			gboolean _tmp1_ = FALSE;
#line 344 "/run/build/folks/folks/persona.vala"
			_tmp1_ = TRUE;
#line 344 "/run/build/folks/folks/persona.vala"
			while (TRUE) {
#line 724 "persona.c"
				const gchar* _tmp4_;
				const gchar* _tmp5_;
#line 344 "/run/build/folks/folks/persona.vala"
				if (!_tmp1_) {
#line 729 "persona.c"
					const gchar* _tmp2_;
					const gchar* _tmp3_;
#line 344 "/run/build/folks/folks/persona.vala"
					_tmp2_ = i;
#line 344 "/run/build/folks/folks/persona.vala"
					_tmp3_ = g_utf8_next_char (_tmp2_);
#line 344 "/run/build/folks/folks/persona.vala"
					i = _tmp3_;
#line 738 "persona.c"
				}
#line 344 "/run/build/folks/folks/persona.vala"
				_tmp1_ = FALSE;
#line 344 "/run/build/folks/folks/persona.vala"
				_tmp4_ = i;
#line 344 "/run/build/folks/folks/persona.vala"
				if (!(string_get_char (_tmp4_, (glong) 0) != ((gunichar) '\0'))) {
#line 344 "/run/build/folks/folks/persona.vala"
					break;
#line 748 "persona.c"
				}
#line 346 "/run/build/folks/folks/persona.vala"
				_tmp5_ = i;
#line 346 "/run/build/folks/folks/persona.vala"
				if (string_get_char (_tmp5_, (glong) 0) == ((gunichar) '\\')) {
#line 754 "persona.c"
					gboolean _tmp6_;
#line 347 "/run/build/folks/folks/persona.vala"
					_tmp6_ = escaped;
#line 347 "/run/build/folks/folks/persona.vala"
					escaped = !_tmp6_;
#line 760 "persona.c"
				} else {
					gboolean _tmp7_ = FALSE;
					gboolean _tmp8_;
#line 348 "/run/build/folks/folks/persona.vala"
					_tmp8_ = escaped;
#line 348 "/run/build/folks/folks/persona.vala"
					if (_tmp8_ == FALSE) {
#line 768 "persona.c"
						const gchar* _tmp9_;
#line 348 "/run/build/folks/folks/persona.vala"
						_tmp9_ = i;
#line 348 "/run/build/folks/folks/persona.vala"
						_tmp7_ = string_get_char (_tmp9_, (glong) 0) == ((gunichar) ':');
#line 774 "persona.c"
					} else {
#line 348 "/run/build/folks/folks/persona.vala"
						_tmp7_ = FALSE;
#line 778 "persona.c"
					}
#line 348 "/run/build/folks/folks/persona.vala"
					if (_tmp7_) {
#line 782 "persona.c"
						gsize _tmp10_;
#line 350 "/run/build/folks/folks/persona.vala"
						_tmp10_ = backend_name_length;
#line 350 "/run/build/folks/folks/persona.vala"
						if (_tmp10_ == ((gsize) 0)) {
#line 788 "persona.c"
							const gchar* _tmp11_;
#line 351 "/run/build/folks/folks/persona.vala"
							_tmp11_ = i;
#line 351 "/run/build/folks/folks/persona.vala"
							backend_name_length = ((gchar*) _tmp11_) - ((gchar*) uid);
#line 794 "persona.c"
						} else {
							const gchar* _tmp12_;
							gsize _tmp13_;
#line 353 "/run/build/folks/folks/persona.vala"
							_tmp12_ = i;
#line 353 "/run/build/folks/folks/persona.vala"
							_tmp13_ = backend_name_length;
#line 353 "/run/build/folks/folks/persona.vala"
							persona_store_id_length = ((((gchar*) _tmp12_) - ((gchar*) uid)) - _tmp13_) - 1;
#line 804 "persona.c"
						}
					}
				}
			}
		}
	}
#line 358 "/run/build/folks/folks/persona.vala"
	_tmp15_ = backend_name_length;
#line 358 "/run/build/folks/folks/persona.vala"
	if (_tmp15_ != ((gsize) 0)) {
#line 815 "persona.c"
		gsize _tmp16_;
#line 358 "/run/build/folks/folks/persona.vala"
		_tmp16_ = persona_store_id_length;
#line 358 "/run/build/folks/folks/persona.vala"
		_tmp14_ = _tmp16_ != ((gsize) 0);
#line 821 "persona.c"
	} else {
#line 358 "/run/build/folks/folks/persona.vala"
		_tmp14_ = FALSE;
#line 825 "persona.c"
	}
#line 358 "/run/build/folks/folks/persona.vala"
	_vala_assert (_tmp14_, "backend_name_length != 0 && persona_store_id_length != 0");
#line 360 "/run/build/folks/folks/persona.vala"
	_tmp17_ = backend_name_length;
#line 360 "/run/build/folks/folks/persona.vala"
	_tmp18_ = string_substring (uid, (glong) 0, (glong) _tmp17_);
#line 360 "/run/build/folks/folks/persona.vala"
	_tmp19_ = _tmp18_;
#line 360 "/run/build/folks/folks/persona.vala"
	_tmp20_ = _folks_persona_unescape_uid_component (_tmp19_);
#line 360 "/run/build/folks/folks/persona.vala"
	_g_free0 (_vala_backend_name);
#line 360 "/run/build/folks/folks/persona.vala"
	_vala_backend_name = _tmp20_;
#line 360 "/run/build/folks/folks/persona.vala"
	_g_free0 (_tmp19_);
#line 362 "/run/build/folks/folks/persona.vala"
	_tmp21_ = backend_name_length;
#line 362 "/run/build/folks/folks/persona.vala"
	_tmp22_ = persona_store_id_length;
#line 362 "/run/build/folks/folks/persona.vala"
	_tmp23_ = string_substring ((const gchar*) ((((gchar*) uid) + _tmp21_) + 1), (glong) 0, (glong) _tmp22_);
#line 362 "/run/build/folks/folks/persona.vala"
	_tmp24_ = _tmp23_;
#line 362 "/run/build/folks/folks/persona.vala"
	_tmp25_ = _folks_persona_unescape_uid_component (_tmp24_);
#line 362 "/run/build/folks/folks/persona.vala"
	_g_free0 (_vala_persona_store_id);
#line 362 "/run/build/folks/folks/persona.vala"
	_vala_persona_store_id = _tmp25_;
#line 362 "/run/build/folks/folks/persona.vala"
	_g_free0 (_tmp24_);
#line 365 "/run/build/folks/folks/persona.vala"
	_tmp26_ = backend_name_length;
#line 365 "/run/build/folks/folks/persona.vala"
	_tmp27_ = persona_store_id_length;
#line 365 "/run/build/folks/folks/persona.vala"
	_tmp28_ = _folks_persona_unescape_uid_component ((const gchar*) (((((gchar*) uid) + _tmp26_) + _tmp27_) + 2));
#line 365 "/run/build/folks/folks/persona.vala"
	_g_free0 (_vala_persona_id);
#line 365 "/run/build/folks/folks/persona.vala"
	_vala_persona_id = _tmp28_;
#line 337 "/run/build/folks/folks/persona.vala"
	if (backend_name) {
#line 337 "/run/build/folks/folks/persona.vala"
		*backend_name = _vala_backend_name;
#line 873 "persona.c"
	} else {
#line 337 "/run/build/folks/folks/persona.vala"
		_g_free0 (_vala_backend_name);
#line 877 "persona.c"
	}
#line 337 "/run/build/folks/folks/persona.vala"
	if (persona_store_id) {
#line 337 "/run/build/folks/folks/persona.vala"
		*persona_store_id = _vala_persona_store_id;
#line 883 "persona.c"
	} else {
#line 337 "/run/build/folks/folks/persona.vala"
		_g_free0 (_vala_persona_store_id);
#line 887 "persona.c"
	}
#line 337 "/run/build/folks/folks/persona.vala"
	if (persona_id) {
#line 337 "/run/build/folks/folks/persona.vala"
		*persona_id = _vala_persona_id;
#line 893 "persona.c"
	} else {
#line 337 "/run/build/folks/folks/persona.vala"
		_g_free0 (_vala_persona_id);
#line 897 "persona.c"
	}
}


FolksPersona*
folks_persona_construct (GType object_type)
{
	FolksPersona * self = NULL;
#line 81 "/run/build/folks/folks/persona.vala"
	self = (FolksPersona*) g_object_new (object_type, NULL);
#line 81 "/run/build/folks/folks/persona.vala"
	return self;
#line 910 "persona.c"
}


const gchar*
folks_persona_get_iid (FolksPersona* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 94 "/run/build/folks/folks/persona.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 94 "/run/build/folks/folks/persona.vala"
	_tmp0_ = self->priv->_iid;
#line 94 "/run/build/folks/folks/persona.vala"
	result = _tmp0_;
#line 94 "/run/build/folks/folks/persona.vala"
	return result;
#line 927 "persona.c"
}


static void
folks_persona_set_iid (FolksPersona* self,
                       const gchar* value)
{
#line 94 "/run/build/folks/folks/persona.vala"
	g_return_if_fail (self != NULL);
#line 94 "/run/build/folks/folks/persona.vala"
	if (g_strcmp0 (value, folks_persona_get_iid (self)) != 0) {
#line 939 "persona.c"
		gchar* _tmp0_;
#line 94 "/run/build/folks/folks/persona.vala"
		_tmp0_ = g_strdup (value);
#line 94 "/run/build/folks/folks/persona.vala"
		_g_free0 (self->priv->_iid);
#line 94 "/run/build/folks/folks/persona.vala"
		self->priv->_iid = _tmp0_;
#line 94 "/run/build/folks/folks/persona.vala"
		g_object_notify_by_pspec ((GObject *) self, folks_persona_properties[FOLKS_PERSONA_IID_PROPERTY]);
#line 949 "persona.c"
	}
}


const gchar*
folks_persona_get_uid (FolksPersona* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 122 "/run/build/folks/folks/persona.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 122 "/run/build/folks/folks/persona.vala"
	_tmp0_ = self->priv->_uid;
#line 122 "/run/build/folks/folks/persona.vala"
	result = _tmp0_;
#line 122 "/run/build/folks/folks/persona.vala"
	return result;
#line 967 "persona.c"
}


static void
folks_persona_set_uid (FolksPersona* self,
                       const gchar* value)
{
#line 122 "/run/build/folks/folks/persona.vala"
	g_return_if_fail (self != NULL);
#line 122 "/run/build/folks/folks/persona.vala"
	if (g_strcmp0 (value, folks_persona_get_uid (self)) != 0) {
#line 979 "persona.c"
		gchar* _tmp0_;
#line 122 "/run/build/folks/folks/persona.vala"
		_tmp0_ = g_strdup (value);
#line 122 "/run/build/folks/folks/persona.vala"
		_g_free0 (self->priv->_uid);
#line 122 "/run/build/folks/folks/persona.vala"
		self->priv->_uid = _tmp0_;
#line 122 "/run/build/folks/folks/persona.vala"
		g_object_notify_by_pspec ((GObject *) self, folks_persona_properties[FOLKS_PERSONA_UID_PROPERTY]);
#line 989 "persona.c"
	}
}


const gchar*
folks_persona_get_display_id (FolksPersona* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 142 "/run/build/folks/folks/persona.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 142 "/run/build/folks/folks/persona.vala"
	_tmp0_ = self->priv->_display_id;
#line 142 "/run/build/folks/folks/persona.vala"
	result = _tmp0_;
#line 142 "/run/build/folks/folks/persona.vala"
	return result;
#line 1007 "persona.c"
}


static void
folks_persona_set_display_id (FolksPersona* self,
                              const gchar* value)
{
#line 142 "/run/build/folks/folks/persona.vala"
	g_return_if_fail (self != NULL);
#line 142 "/run/build/folks/folks/persona.vala"
	if (g_strcmp0 (value, folks_persona_get_display_id (self)) != 0) {
#line 1019 "persona.c"
		gchar* _tmp0_;
#line 142 "/run/build/folks/folks/persona.vala"
		_tmp0_ = g_strdup (value);
#line 142 "/run/build/folks/folks/persona.vala"
		_g_free0 (self->priv->_display_id);
#line 142 "/run/build/folks/folks/persona.vala"
		self->priv->_display_id = _tmp0_;
#line 142 "/run/build/folks/folks/persona.vala"
		g_object_notify_by_pspec ((GObject *) self, folks_persona_properties[FOLKS_PERSONA_DISPLAY_ID_PROPERTY]);
#line 1029 "persona.c"
	}
}


gboolean
folks_persona_get_is_user (FolksPersona* self)
{
	gboolean result;
	gboolean _tmp0_;
#line 152 "/run/build/folks/folks/persona.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 152 "/run/build/folks/folks/persona.vala"
	_tmp0_ = self->priv->_is_user;
#line 152 "/run/build/folks/folks/persona.vala"
	result = _tmp0_;
#line 152 "/run/build/folks/folks/persona.vala"
	return result;
#line 1047 "persona.c"
}


static void
folks_persona_set_is_user (FolksPersona* self,
                           gboolean value)
{
#line 152 "/run/build/folks/folks/persona.vala"
	g_return_if_fail (self != NULL);
#line 152 "/run/build/folks/folks/persona.vala"
	if (folks_persona_get_is_user (self) != value) {
#line 152 "/run/build/folks/folks/persona.vala"
		self->priv->_is_user = value;
#line 152 "/run/build/folks/folks/persona.vala"
		g_object_notify_by_pspec ((GObject *) self, folks_persona_properties[FOLKS_PERSONA_IS_USER_PROPERTY]);
#line 1063 "persona.c"
	}
}


FolksPersonaStore*
folks_persona_get_store (FolksPersona* self)
{
	FolksPersonaStore* result;
	FolksPersonaStore* _tmp0_;
#line 157 "/run/build/folks/folks/persona.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 157 "/run/build/folks/folks/persona.vala"
	_tmp0_ = self->priv->_store;
#line 157 "/run/build/folks/folks/persona.vala"
	result = _tmp0_;
#line 157 "/run/build/folks/folks/persona.vala"
	return result;
#line 1081 "persona.c"
}


static void
folks_persona_set_store (FolksPersona* self,
                         FolksPersonaStore* value)
{
#line 157 "/run/build/folks/folks/persona.vala"
	g_return_if_fail (self != NULL);
#line 157 "/run/build/folks/folks/persona.vala"
	if (folks_persona_get_store (self) != value) {
#line 157 "/run/build/folks/folks/persona.vala"
		self->priv->_store = value;
#line 157 "/run/build/folks/folks/persona.vala"
		g_object_notify_by_pspec ((GObject *) self, folks_persona_properties[FOLKS_PERSONA_STORE_PROPERTY]);
#line 1097 "persona.c"
	}
}


FolksIndividual*
folks_persona_get_individual (FolksPersona* self)
{
	FolksIndividual* result;
	gboolean _tmp0_ = FALSE;
	FolksIndividual* _tmp1_;
	FolksIndividual* _tmp5_;
#line 180 "/run/build/folks/folks/persona.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 182 "/run/build/folks/folks/persona.vala"
	_tmp1_ = self->priv->_individual;
#line 182 "/run/build/folks/folks/persona.vala"
	if (_tmp1_ == NULL) {
#line 182 "/run/build/folks/folks/persona.vala"
		_tmp0_ = TRUE;
#line 1117 "persona.c"
	} else {
		FolksIndividual* _tmp2_;
		GeeSet* _tmp3_;
		GeeSet* _tmp4_;
#line 183 "/run/build/folks/folks/persona.vala"
		_tmp2_ = self->priv->_individual;
#line 183 "/run/build/folks/folks/persona.vala"
		_tmp3_ = folks_individual_get_personas (G_TYPE_CHECK_INSTANCE_CAST (_tmp2_, FOLKS_TYPE_INDIVIDUAL, FolksIndividual));
#line 183 "/run/build/folks/folks/persona.vala"
		_tmp4_ = _tmp3_;
#line 183 "/run/build/folks/folks/persona.vala"
		_tmp0_ = gee_collection_contains ((GeeCollection*) _tmp4_, self);
#line 1130 "persona.c"
	}
#line 182 "/run/build/folks/folks/persona.vala"
	_vala_assert (_tmp0_, "this._individual == null ||               ((!) this._individual).personas.contains (this)");
#line 185 "/run/build/folks/folks/persona.vala"
	_tmp5_ = self->priv->_individual;
#line 185 "/run/build/folks/folks/persona.vala"
	result = _tmp5_;
#line 185 "/run/build/folks/folks/persona.vala"
	return result;
#line 1140 "persona.c"
}


static void
__folks_persona_individual_weak_notify_cb_gweak_notify (gpointer self,
                                                        GObject* object)
{
#line 194 "/run/build/folks/folks/persona.vala"
	_folks_persona_individual_weak_notify_cb ((FolksPersona*) self, object);
#line 1150 "persona.c"
}


void
folks_persona_set_individual (FolksPersona* self,
                              FolksIndividual* value)
{
	gboolean _tmp0_ = FALSE;
	FolksIndividual* _tmp3_;
#line 188 "/run/build/folks/folks/persona.vala"
	g_return_if_fail (self != NULL);
#line 190 "/run/build/folks/folks/persona.vala"
	if (value == NULL) {
#line 190 "/run/build/folks/folks/persona.vala"
		_tmp0_ = TRUE;
#line 1166 "persona.c"
	} else {
		GeeSet* _tmp1_;
		GeeSet* _tmp2_;
#line 190 "/run/build/folks/folks/persona.vala"
		_tmp1_ = folks_individual_get_personas (G_TYPE_CHECK_INSTANCE_CAST (value, FOLKS_TYPE_INDIVIDUAL, FolksIndividual));
#line 190 "/run/build/folks/folks/persona.vala"
		_tmp2_ = _tmp1_;
#line 190 "/run/build/folks/folks/persona.vala"
		_tmp0_ = gee_collection_contains ((GeeCollection*) _tmp2_, self);
#line 1176 "persona.c"
	}
#line 190 "/run/build/folks/folks/persona.vala"
	_vala_assert (_tmp0_, "value == null || ((!) value).personas.contains (this)");
#line 192 "/run/build/folks/folks/persona.vala"
	_tmp3_ = self->priv->_individual;
#line 192 "/run/build/folks/folks/persona.vala"
	if (_tmp3_ != NULL) {
#line 1184 "persona.c"
		FolksIndividual* _tmp4_;
#line 194 "/run/build/folks/folks/persona.vala"
		_tmp4_ = self->priv->_individual;
#line 194 "/run/build/folks/folks/persona.vala"
		g_object_weak_unref ((GObject*) _tmp4_, __folks_persona_individual_weak_notify_cb_gweak_notify, self);
#line 1190 "persona.c"
	}
#line 197 "/run/build/folks/folks/persona.vala"
	if (value != NULL) {
#line 199 "/run/build/folks/folks/persona.vala"
		g_object_weak_ref ((GObject*) value, __folks_persona_individual_weak_notify_cb_gweak_notify, self);
#line 1196 "persona.c"
	}
#line 202 "/run/build/folks/folks/persona.vala"
	self->priv->_individual = value;
#line 188 "/run/build/folks/folks/persona.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_persona_properties[FOLKS_PERSONA_INDIVIDUAL_PROPERTY]);
#line 1202 "persona.c"
}


gchar**
folks_persona_get_linkable_properties (FolksPersona* self,
                                       int* result_length1)
{
#line 226 "/run/build/folks/folks/persona.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 226 "/run/build/folks/folks/persona.vala"
	return FOLKS_PERSONA_GET_CLASS (self)->get_linkable_properties (self, result_length1);
#line 1214 "persona.c"
}


gchar**
folks_persona_get_writeable_properties (FolksPersona* self,
                                        int* result_length1)
{
#line 241 "/run/build/folks/folks/persona.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 241 "/run/build/folks/folks/persona.vala"
	return FOLKS_PERSONA_GET_CLASS (self)->get_writeable_properties (self, result_length1);
#line 1226 "persona.c"
}


static void
folks_persona_class_init (FolksPersonaClass * klass)
{
#line 81 "/run/build/folks/folks/persona.vala"
	folks_persona_parent_class = g_type_class_peek_parent (klass);
#line 81 "/run/build/folks/folks/persona.vala"
	g_type_class_add_private (klass, sizeof (FolksPersonaPrivate));
#line 81 "/run/build/folks/folks/persona.vala"
	((FolksPersonaClass *) klass)->linkable_property_to_links = (void (*) (FolksPersona *, const gchar*, FolksPersonaLinkablePropertyCallback, gpointer)) folks_persona_real_linkable_property_to_links;
#line 81 "/run/build/folks/folks/persona.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_folks_persona_get_property;
#line 81 "/run/build/folks/folks/persona.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_folks_persona_set_property;
#line 81 "/run/build/folks/folks/persona.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_persona_finalize;
#line 1245 "persona.c"
	/**
	   * The internal ID used to represent the Persona for linking.
	   *
	   * This is opaque, and shouldn't be parsed or considered meaningful by
	   * clients.
	   *
	   * The internal ID should be unique within a backend, but may not be unique
	   * across backends, so that links can be made between Personas with similar
	   * internal IDs.
	   */
#line 81 "/run/build/folks/folks/persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_PERSONA_IID_PROPERTY, folks_persona_properties[FOLKS_PERSONA_IID_PROPERTY] = g_param_spec_string ("iid", "iid", "iid", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1258 "persona.c"
	/**
	   * The universal ID used to represent the Persona outside its {@link Backend}.
	   *
	   * This is opaque, and should only be parsed by clients using
	   * {@link Persona.split_uid}.
	   *
	   * This is the canonical way to refer to any Persona. It is guaranteed to be
	   * unique within the Persona's {@link PersonaStore}.
	   *
	   * A Persona's UID is immutable over the life of the Persona in the backing
	   * store, so a given UID is guaranteed to refer to the same Persona each time
	   * libfolks is used, until the Persona is permanently removed from its backing
	   * store.
	   *
	   * @see Persona.build_uid
	   * @see Persona.split_uid
	   */
#line 81 "/run/build/folks/folks/persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_PERSONA_UID_PROPERTY, folks_persona_properties[FOLKS_PERSONA_UID_PROPERTY] = g_param_spec_string ("uid", "uid", "uid", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1278 "persona.c"
	/**
	   * The human-readable, service-specific universal ID used to represent the
	   * Persona.
	   *
	   * For example: ``foo@@xmpp.example.org``.
	   *
	   * This should be used whenever the user needs to be presented with a
	   * familiar, service-specific ID. For instance, in a prompt for the user to
	   * select a specific IM contact within an {@link Individual} to begin a chat
	   * with.
	   *
	   * This is not guaranteed to be unique outside of the Persona's
	   * {@link PersonaStore}, but is guaranteed to be unique within it. If a
	   * suitable human-readable ID isn’t available from the backend, the display ID
	   * will be equal to the {@link Persona.iid}.
	   *
	   * @since 0.1.13
	   */
#line 81 "/run/build/folks/folks/persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_PERSONA_DISPLAY_ID_PROPERTY, folks_persona_properties[FOLKS_PERSONA_DISPLAY_ID_PROPERTY] = g_param_spec_string ("display-id", "display-id", "display-id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1299 "persona.c"
	/**
	   * Whether the Persona is the user.
	   *
	   * Iff the Persona represents the user (the person who owns the account in
	   * the respective backend) this is ``true``.
	   *
	   * @since 0.3.0
	   */
#line 81 "/run/build/folks/folks/persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_PERSONA_IS_USER_PROPERTY, folks_persona_properties[FOLKS_PERSONA_IS_USER_PROPERTY] = g_param_spec_boolean ("is-user", "is-user", "is-user", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1310 "persona.c"
	/**
	   * The {@link PersonaStore} which contains this Persona.
	   */
#line 81 "/run/build/folks/folks/persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_PERSONA_STORE_PROPERTY, folks_persona_properties[FOLKS_PERSONA_STORE_PROPERTY] = g_param_spec_object ("store", "store", "store", FOLKS_TYPE_PERSONA_STORE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1316 "persona.c"
	/**
	   * The {@link Individual} which contains this Persona.
	   *
	   * This may be ``null``, but should only ever be so when the Persona has just
	   * been created, when its {@link PersonaStore} is being destroyed, or when
	   * it's moving between {@link Individual}s.
	   *
	   * @since 0.6.0
	   */
#line 81 "/run/build/folks/folks/persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_PERSONA_INDIVIDUAL_PROPERTY, folks_persona_properties[FOLKS_PERSONA_INDIVIDUAL_PROPERTY] = g_param_spec_object ("individual", "individual", "individual", FOLKS_TYPE_INDIVIDUAL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 1328 "persona.c"
	/**
	   * The names of the properties of this Persona which are linkable.
	   *
	   * If a property name is in this list, and the Persona is from a
	   * {@link PersonaStore} whose trust level is {@link PersonaStoreTrust.FULL},
	   * the {@link IndividualAggregator} should be able to reliably use the value
	   * of the property from a given Persona instance to link the Persona with
	   * other Personas and form {@link Individual}s.
	   *
	   * Note that {@link Persona.uid} is always implicitly a member of this list,
	   * and doesn't need to be added explicitly.
	   *
	   * This list will have no effect if the Persona's {@link PersonaStore} trust
	   * level is not {@link PersonaStoreTrust.FULL}.
	   *
	   * This property value is guaranteed to be constant for a given persona,
	   * but may vary between personas in the same store.
	   *
	   * @since 0.1.13
	   */
#line 81 "/run/build/folks/folks/persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_PERSONA_LINKABLE_PROPERTIES_PROPERTY, folks_persona_properties[FOLKS_PERSONA_LINKABLE_PROPERTIES_PROPERTY] = g_param_spec_boxed ("linkable-properties", "linkable-properties", "linkable-properties", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1351 "persona.c"
	/**
	   * The names of the properties of this Persona which are writeable.
	   *
	   * If a property name is in this list, setting the property should result in
	   * the updated value being stored in the backend's permanent storage (unless
	   * it gets rejected due to being invalid, or a different error occurs).
	   *
	   * It's intended that this property value will be constant for a given Persona
	   * subclass, but this isn't guaranteed; it's possible that Persona subclasses
	   * may vary the value of this property at run time.
	   *
	   * @since 0.6.0
	   */
#line 81 "/run/build/folks/folks/persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_PERSONA_WRITEABLE_PROPERTIES_PROPERTY, folks_persona_properties[FOLKS_PERSONA_WRITEABLE_PROPERTIES_PROPERTY] = g_param_spec_boxed ("writeable-properties", "writeable-properties", "writeable-properties", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1367 "persona.c"
}


static void
folks_persona_instance_init (FolksPersona * self)
{
#line 81 "/run/build/folks/folks/persona.vala"
	self->priv = FOLKS_PERSONA_GET_PRIVATE (self);
#line 159 "/run/build/folks/folks/persona.vala"
	self->priv->_individual = NULL;
#line 1378 "persona.c"
}


static void
folks_persona_finalize (GObject * obj)
{
	FolksPersona * self;
#line 81 "/run/build/folks/folks/persona.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_PERSONA, FolksPersona);
#line 372 "/run/build/folks/folks/persona.vala"
	folks_persona_set_individual (self, NULL);
#line 94 "/run/build/folks/folks/persona.vala"
	_g_free0 (self->priv->_iid);
#line 122 "/run/build/folks/folks/persona.vala"
	_g_free0 (self->priv->_uid);
#line 142 "/run/build/folks/folks/persona.vala"
	_g_free0 (self->priv->_display_id);
#line 81 "/run/build/folks/folks/persona.vala"
	G_OBJECT_CLASS (folks_persona_parent_class)->finalize (obj);
#line 1398 "persona.c"
}


/**
 * Represents a "shard" of a person from a single source (a single
 * {@link Backend}), such as an XMPP contact from Telepathy or a vCard contact
 * from evolution-data-server.
 *
 * All the personas belonging to one physical person are aggregated to form a
 * single {@link Individual} representing that person.
 *
 * Properties of a persona are provided by implementing "details" interfaces,
 * such as {@link NameDetails} or {@link EmailDetails}. They must be accessed
 * through these interfaces. Different backends' subclasses of {@link Persona}
 * may implement different sets of interfaces. The set of interfaces implemented
 * by a given persona is guaranteed not to change over the lifetime of that
 * persona.
 */
GType
folks_persona_get_type (void)
{
	static volatile gsize folks_persona_type_id__volatile = 0;
	if (g_once_init_enter (&folks_persona_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksPersonaClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_persona_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksPersona), 0, (GInstanceInitFunc) folks_persona_instance_init, NULL };
		GType folks_persona_type_id;
		folks_persona_type_id = g_type_register_static (G_TYPE_OBJECT, "FolksPersona", &g_define_type_info, G_TYPE_FLAG_ABSTRACT);
		g_once_init_leave (&folks_persona_type_id__volatile, folks_persona_type_id);
	}
	return folks_persona_type_id__volatile;
}


static void
_vala_folks_persona_get_property (GObject * object,
                                  guint property_id,
                                  GValue * value,
                                  GParamSpec * pspec)
{
	FolksPersona * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_PERSONA, FolksPersona);
#line 81 "/run/build/folks/folks/persona.vala"
	switch (property_id) {
#line 81 "/run/build/folks/folks/persona.vala"
		case FOLKS_PERSONA_IID_PROPERTY:
#line 81 "/run/build/folks/folks/persona.vala"
		g_value_set_string (value, folks_persona_get_iid (self));
#line 81 "/run/build/folks/folks/persona.vala"
		break;
#line 81 "/run/build/folks/folks/persona.vala"
		case FOLKS_PERSONA_UID_PROPERTY:
#line 81 "/run/build/folks/folks/persona.vala"
		g_value_set_string (value, folks_persona_get_uid (self));
#line 81 "/run/build/folks/folks/persona.vala"
		break;
#line 81 "/run/build/folks/folks/persona.vala"
		case FOLKS_PERSONA_DISPLAY_ID_PROPERTY:
#line 81 "/run/build/folks/folks/persona.vala"
		g_value_set_string (value, folks_persona_get_display_id (self));
#line 81 "/run/build/folks/folks/persona.vala"
		break;
#line 81 "/run/build/folks/folks/persona.vala"
		case FOLKS_PERSONA_IS_USER_PROPERTY:
#line 81 "/run/build/folks/folks/persona.vala"
		g_value_set_boolean (value, folks_persona_get_is_user (self));
#line 81 "/run/build/folks/folks/persona.vala"
		break;
#line 81 "/run/build/folks/folks/persona.vala"
		case FOLKS_PERSONA_STORE_PROPERTY:
#line 81 "/run/build/folks/folks/persona.vala"
		g_value_set_object (value, folks_persona_get_store (self));
#line 81 "/run/build/folks/folks/persona.vala"
		break;
#line 81 "/run/build/folks/folks/persona.vala"
		case FOLKS_PERSONA_INDIVIDUAL_PROPERTY:
#line 81 "/run/build/folks/folks/persona.vala"
		g_value_set_object (value, folks_persona_get_individual (self));
#line 81 "/run/build/folks/folks/persona.vala"
		break;
#line 1477 "persona.c"
		default:
#line 81 "/run/build/folks/folks/persona.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 81 "/run/build/folks/folks/persona.vala"
		break;
#line 1483 "persona.c"
	}
}


static void
_vala_folks_persona_set_property (GObject * object,
                                  guint property_id,
                                  const GValue * value,
                                  GParamSpec * pspec)
{
	FolksPersona * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_PERSONA, FolksPersona);
#line 81 "/run/build/folks/folks/persona.vala"
	switch (property_id) {
#line 81 "/run/build/folks/folks/persona.vala"
		case FOLKS_PERSONA_IID_PROPERTY:
#line 81 "/run/build/folks/folks/persona.vala"
		folks_persona_set_iid (self, g_value_get_string (value));
#line 81 "/run/build/folks/folks/persona.vala"
		break;
#line 81 "/run/build/folks/folks/persona.vala"
		case FOLKS_PERSONA_UID_PROPERTY:
#line 81 "/run/build/folks/folks/persona.vala"
		folks_persona_set_uid (self, g_value_get_string (value));
#line 81 "/run/build/folks/folks/persona.vala"
		break;
#line 81 "/run/build/folks/folks/persona.vala"
		case FOLKS_PERSONA_DISPLAY_ID_PROPERTY:
#line 81 "/run/build/folks/folks/persona.vala"
		folks_persona_set_display_id (self, g_value_get_string (value));
#line 81 "/run/build/folks/folks/persona.vala"
		break;
#line 81 "/run/build/folks/folks/persona.vala"
		case FOLKS_PERSONA_IS_USER_PROPERTY:
#line 81 "/run/build/folks/folks/persona.vala"
		folks_persona_set_is_user (self, g_value_get_boolean (value));
#line 81 "/run/build/folks/folks/persona.vala"
		break;
#line 81 "/run/build/folks/folks/persona.vala"
		case FOLKS_PERSONA_STORE_PROPERTY:
#line 81 "/run/build/folks/folks/persona.vala"
		folks_persona_set_store (self, g_value_get_object (value));
#line 81 "/run/build/folks/folks/persona.vala"
		break;
#line 81 "/run/build/folks/folks/persona.vala"
		case FOLKS_PERSONA_INDIVIDUAL_PROPERTY:
#line 81 "/run/build/folks/folks/persona.vala"
		folks_persona_set_individual (self, g_value_get_object (value));
#line 81 "/run/build/folks/folks/persona.vala"
		break;
#line 1534 "persona.c"
		default:
#line 81 "/run/build/folks/folks/persona.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 81 "/run/build/folks/folks/persona.vala"
		break;
#line 1540 "persona.c"
	}
}



