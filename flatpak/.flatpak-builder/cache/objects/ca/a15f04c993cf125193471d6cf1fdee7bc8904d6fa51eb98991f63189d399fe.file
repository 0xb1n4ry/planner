/* unity-scope-dbus-impl.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-scope-dbus-impl.vala, do not modify */

/*
 * Copyright (C) 2011-2012 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Neil Jagdish Patel <neil.patel@canonical.com>
 *             Michal Hruby <michal.hruby@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include <unity-protocol.h>
#include <stdlib.h>
#include <string.h>
#include <dee.h>
#include "unity.h"
#include <gio/gio.h>
#include <unity-trace.h>
#include <float.h>
#include <math.h>


#define UNITY_INTERNAL_TYPE_SCOPE_DBUS_IMPL (unity_internal_scope_dbus_impl_get_type ())
#define UNITY_INTERNAL_SCOPE_DBUS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_SCOPE_DBUS_IMPL, UnityInternalScopeDBusImpl))
#define UNITY_INTERNAL_IS_SCOPE_DBUS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_SCOPE_DBUS_IMPL))
#define UNITY_INTERNAL_SCOPE_DBUS_IMPL_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), UNITY_INTERNAL_TYPE_SCOPE_DBUS_IMPL, UnityInternalScopeDBusImplIface))

typedef struct _UnityInternalScopeDBusImpl UnityInternalScopeDBusImpl;
typedef struct _UnityInternalScopeDBusImplIface UnityInternalScopeDBusImplIface;

#define UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL (unity_internal_default_scope_dbus_impl_get_type ())
#define UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL, UnityInternalDefaultScopeDBusImpl))
#define UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL, UnityInternalDefaultScopeDBusImplClass))
#define UNITY_INTERNAL_IS_DEFAULT_SCOPE_DBUS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL))
#define UNITY_INTERNAL_IS_DEFAULT_SCOPE_DBUS_IMPL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL))
#define UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL, UnityInternalDefaultScopeDBusImplClass))

typedef struct _UnityInternalDefaultScopeDBusImpl UnityInternalDefaultScopeDBusImpl;
typedef struct _UnityInternalDefaultScopeDBusImplClass UnityInternalDefaultScopeDBusImplClass;
typedef struct _UnityInternalDefaultScopeDBusImplPrivate UnityInternalDefaultScopeDBusImplPrivate;

#define UNITY_INTERNAL_TYPE_SCOPE_CHANNEL (unity_internal_scope_channel_get_type ())
#define UNITY_INTERNAL_SCOPE_CHANNEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_SCOPE_CHANNEL, UnityInternalScopeChannel))
#define UNITY_INTERNAL_SCOPE_CHANNEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_TYPE_SCOPE_CHANNEL, UnityInternalScopeChannelClass))
#define UNITY_INTERNAL_IS_SCOPE_CHANNEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_SCOPE_CHANNEL))
#define UNITY_INTERNAL_IS_SCOPE_CHANNEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_TYPE_SCOPE_CHANNEL))
#define UNITY_INTERNAL_SCOPE_CHANNEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_TYPE_SCOPE_CHANNEL, UnityInternalScopeChannelClass))

typedef struct _UnityInternalScopeChannel UnityInternalScopeChannel;
typedef struct _UnityInternalScopeChannelClass UnityInternalScopeChannelClass;
enum  {
	UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_0_PROPERTY,
	UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_OWNER_PROPERTY,
	UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_CATEGORIES_MODEL_PROPERTY,
	UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_FILTERS_MODEL_PROPERTY,
	UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_VIEW_TYPE_PROPERTY,
	UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_NUM_PROPERTIES
};
static GParamSpec* unity_internal_default_scope_dbus_impl_properties[UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_NUM_PROPERTIES];
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_rand_free0(var) ((var == NULL) ? NULL : (var = (g_rand_free (var), NULL)))
#define _g_variant_builder_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_builder_unref (var), NULL)))
#define _g_variant_type_free0(var) ((var == NULL) ? NULL : (var = (g_variant_type_free (var), NULL)))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

#define UNITY_INTERNAL_TYPE_FILTER_COLUMN (unity_internal_filter_column_get_type ())
typedef struct _UnityInternalScopeChannelPrivate UnityInternalScopeChannelPrivate;

#define UNITY_INTERNAL_UTILS_TYPE_ASYNC_MUTEX (unity_internal_utils_async_mutex_get_type ())
#define UNITY_INTERNAL_UTILS_ASYNC_MUTEX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_UTILS_TYPE_ASYNC_MUTEX, UnityInternalUtilsAsyncMutex))
#define UNITY_INTERNAL_UTILS_ASYNC_MUTEX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_UTILS_TYPE_ASYNC_MUTEX, UnityInternalUtilsAsyncMutexClass))
#define UNITY_INTERNAL_UTILS_IS_ASYNC_MUTEX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_UTILS_TYPE_ASYNC_MUTEX))
#define UNITY_INTERNAL_UTILS_IS_ASYNC_MUTEX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_UTILS_TYPE_ASYNC_MUTEX))
#define UNITY_INTERNAL_UTILS_ASYNC_MUTEX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_UTILS_TYPE_ASYNC_MUTEX, UnityInternalUtilsAsyncMutexClass))

typedef struct _UnityInternalUtilsAsyncMutex UnityInternalUtilsAsyncMutex;
typedef struct _UnityInternalUtilsAsyncMutexClass UnityInternalUtilsAsyncMutexClass;
typedef struct _Block11Data Block11Data;

#define UNITY_INTERNAL_TYPE_RESULT_COLUMN (unity_internal_result_column_get_type ())
typedef struct _UnityInternalDefaultScopeDbusImplActivateData UnityInternalDefaultScopeDbusImplActivateData;
typedef struct _Block12Data Block12Data;

#define UNITY_INTERNAL_TYPE_GLIB_CANCELLABLE (unity_internal_glib_cancellable_get_type ())
#define UNITY_INTERNAL_GLIB_CANCELLABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_GLIB_CANCELLABLE, UnityInternalGLibCancellable))
#define UNITY_INTERNAL_GLIB_CANCELLABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_TYPE_GLIB_CANCELLABLE, UnityInternalGLibCancellableClass))
#define UNITY_INTERNAL_IS_GLIB_CANCELLABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_GLIB_CANCELLABLE))
#define UNITY_INTERNAL_IS_GLIB_CANCELLABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_TYPE_GLIB_CANCELLABLE))
#define UNITY_INTERNAL_GLIB_CANCELLABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_TYPE_GLIB_CANCELLABLE, UnityInternalGLibCancellableClass))

typedef struct _UnityInternalGLibCancellable UnityInternalGLibCancellable;
typedef struct _UnityInternalGLibCancellableClass UnityInternalGLibCancellableClass;

#define UNITY_INTERNAL_TYPE_DEE_RESULT_SET (unity_internal_dee_result_set_get_type ())
#define UNITY_INTERNAL_DEE_RESULT_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_DEE_RESULT_SET, UnityInternalDeeResultSet))
#define UNITY_INTERNAL_DEE_RESULT_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_TYPE_DEE_RESULT_SET, UnityInternalDeeResultSetClass))
#define UNITY_INTERNAL_IS_DEE_RESULT_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_DEE_RESULT_SET))
#define UNITY_INTERNAL_IS_DEE_RESULT_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_TYPE_DEE_RESULT_SET))
#define UNITY_INTERNAL_DEE_RESULT_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_TYPE_DEE_RESULT_SET, UnityInternalDeeResultSetClass))

typedef struct _UnityInternalDeeResultSet UnityInternalDeeResultSet;
typedef struct _UnityInternalDeeResultSetClass UnityInternalDeeResultSetClass;
typedef struct _Block13Data Block13Data;

#define UNITY_INTERNAL_TYPE_CHANNEL_STATE (unity_internal_channel_state_get_type ())
typedef struct _UnityInternalDefaultScopeDbusImplSearchInternalData UnityInternalDefaultScopeDbusImplSearchInternalData;
typedef struct _UnityInternalDefaultScopeDbusImplSearchData UnityInternalDefaultScopeDbusImplSearchData;
typedef struct _Block14Data Block14Data;
typedef struct _UnityInternalDefaultScopeDbusImplPreviewInternalData UnityInternalDefaultScopeDbusImplPreviewInternalData;
typedef struct _UnityInternalDefaultScopeDbusImplOpenChannelData UnityInternalDefaultScopeDbusImplOpenChannelData;
typedef struct _UnityInternalDefaultScopeDbusImplCloseChannelData UnityInternalDefaultScopeDbusImplCloseChannelData;
typedef struct _UnityInternalDefaultScopeDbusImplSetViewTypeData UnityInternalDefaultScopeDbusImplSetViewTypeData;
typedef struct _UnityInternalDefaultScopeDbusImplSetActiveSourcesData UnityInternalDefaultScopeDbusImplSetActiveSourcesData;
typedef struct _UnityInternalDefaultScopeDbusImplPushResultsData UnityInternalDefaultScopeDbusImplPushResultsData;
enum  {
	UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_ON_TIMEOUT_REACHED_SIGNAL,
	UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_ON_UNEXPORT_TIMEOUT_REACHED_SIGNAL,
	UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_NUM_SIGNALS
};
static guint unity_internal_default_scope_dbus_impl_signals[UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_NUM_SIGNALS] = {0};

#define UNITY_INTERNAL_TYPE_OWNED_NAME (unity_internal_owned_name_get_type ())
typedef struct _UnityInternalOwnedName UnityInternalOwnedName;

#define UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER (unity_internal_scope_dbus_name_manager_get_type ())
#define UNITY_INTERNAL_SCOPE_DBUS_NAME_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER, UnityInternalScopeDBusNameManager))
#define UNITY_INTERNAL_SCOPE_DBUS_NAME_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER, UnityInternalScopeDBusNameManagerClass))
#define UNITY_INTERNAL_IS_SCOPE_DBUS_NAME_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER))
#define UNITY_INTERNAL_IS_SCOPE_DBUS_NAME_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER))
#define UNITY_INTERNAL_SCOPE_DBUS_NAME_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER, UnityInternalScopeDBusNameManagerClass))

typedef struct _UnityInternalScopeDBusNameManager UnityInternalScopeDBusNameManager;
typedef struct _UnityInternalScopeDBusNameManagerClass UnityInternalScopeDBusNameManagerClass;
typedef struct _UnityInternalScopeDBusNameManagerPrivate UnityInternalScopeDBusNameManagerPrivate;
enum  {
	UNITY_INTERNAL_SCOPE_DBUS_NAME_MANAGER_0_PROPERTY,
	UNITY_INTERNAL_SCOPE_DBUS_NAME_MANAGER_NUM_PROPERTIES
};
static GParamSpec* unity_internal_scope_dbus_name_manager_properties[UNITY_INTERNAL_SCOPE_DBUS_NAME_MANAGER_NUM_PROPERTIES];
typedef struct _Block15Data Block15Data;
typedef struct _Block16Data Block16Data;
typedef struct _UnityInternalScopeDbusNameManagerAcquireNamesData UnityInternalScopeDbusNameManagerAcquireNamesData;
enum  {
	UNITY_INTERNAL_SCOPE_DBUS_NAME_MANAGER_NAME_UNOWNED_SIGNAL,
	UNITY_INTERNAL_SCOPE_DBUS_NAME_MANAGER_NUM_SIGNALS
};
static guint unity_internal_scope_dbus_name_manager_signals[UNITY_INTERNAL_SCOPE_DBUS_NAME_MANAGER_NUM_SIGNALS] = {0};

struct _UnityInternalScopeDBusImplIface {
	GTypeInterface parent_iface;
	void (*export) (UnityInternalScopeDBusImpl* self, GError** error);
	void (*unexport) (UnityInternalScopeDBusImpl* self);
	void (*queue_property_notification) (UnityInternalScopeDBusImpl* self, const gchar* prop_name, GVariant* prop_value);
	DeeSerializableModel* (*get_categories_model) (UnityInternalScopeDBusImpl* self);
	void (*set_categories_model) (UnityInternalScopeDBusImpl* self, DeeSerializableModel* value);
	DeeSerializableModel* (*get_filters_model) (UnityInternalScopeDBusImpl* self);
	void (*set_filters_model) (UnityInternalScopeDBusImpl* self, DeeSerializableModel* value);
};

struct _UnityInternalDefaultScopeDBusImpl {
	GObject parent_instance;
	UnityInternalDefaultScopeDBusImplPrivate * priv;
};

struct _UnityInternalDefaultScopeDBusImplClass {
	GObjectClass parent_class;
};

struct _UnityInternalDefaultScopeDBusImplPrivate {
	UnityAbstractScope* _owner;
	GHashTable* _channels;
	guint _dbus_id;
	gchar* _dbus_name;
	GDBusConnection* _dbus_connection;
	GRand* _rand;
	guint _inactivity_timeout_source_id;
	guint _unexport_timeout_source_id;
	gulong _scope_results_invalidated_id;
	gboolean _query_happened;
	DeeSerializableModel* _categories_model;
	DeeSerializableModel* _filters_model;
	UnityProtocolViewType _view_type;
	GVariantBuilder* changed_props;
};

typedef enum  {
	UNITY_INTERNAL_FILTER_COLUMN_ID,
	UNITY_INTERNAL_FILTER_COLUMN_DISPLAY_NAME,
	UNITY_INTERNAL_FILTER_COLUMN_ICON_HINT,
	UNITY_INTERNAL_FILTER_COLUMN_RENDERER_NAME,
	UNITY_INTERNAL_FILTER_COLUMN_RENDERER_STATE,
	UNITY_INTERNAL_FILTER_COLUMN_VISIBLE,
	UNITY_INTERNAL_FILTER_COLUMN_COLLAPSED,
	UNITY_INTERNAL_FILTER_COLUMN_FILTERING,
	UNITY_INTERNAL_FILTER_COLUMN_N_COLUMNS
} UnityInternalFilterColumn;

struct _UnityInternalScopeChannel {
	GObject parent_instance;
	UnityInternalScopeChannelPrivate * priv;
	UnityInternalUtilsAsyncMutex* model_lock;
	DeeSharedModel* transfer_model;
	DeeSerializableModel* backend_model;
	UnityFilterSet* filters;
	UnityProtocolChannelType channel_type;
	gchar* id;
	UnityScopeSearchBase* last_search;
	guint last_search_tag;
};

struct _UnityInternalScopeChannelClass {
	GObjectClass parent_class;
};

struct _Block11Data {
	int _ref_count_;
	UnityInternalDefaultScopeDBusImpl* self;
	GHashTable* metadata_hints;
};

typedef enum  {
	UNITY_INTERNAL_RESULT_COLUMN_URI,
	UNITY_INTERNAL_RESULT_COLUMN_ICON_HINT,
	UNITY_INTERNAL_RESULT_COLUMN_CATEGORY,
	UNITY_INTERNAL_RESULT_COLUMN_RESULT_TYPE,
	UNITY_INTERNAL_RESULT_COLUMN_MIMETYPE,
	UNITY_INTERNAL_RESULT_COLUMN_TITLE,
	UNITY_INTERNAL_RESULT_COLUMN_COMMENT,
	UNITY_INTERNAL_RESULT_COLUMN_DND_URI,
	UNITY_INTERNAL_RESULT_COLUMN_METADATA,
	UNITY_INTERNAL_RESULT_COLUMN_N_COLUMNS
} UnityInternalResultColumn;

struct _UnityInternalDefaultScopeDbusImplActivateData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalDefaultScopeDBusImpl* self;
	gchar* channel_id;
	GVariant** result_arr;
	gint result_arr_length1;
	guint action_type;
	GHashTable* hints;
	GCancellable* cancellable;
	UnityProtocolActivationReplyRaw result;
	UnityProtocolActivationReplyRaw reply;
	UnityActivationResponse* response;
	UnityPreview* preview;
	GError* _tmp0_;
	UnityScopeResult scope_result;
	GVariant* _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	GVariant* _tmp4_;
	const gchar* _tmp5_;
	gchar* _tmp6_;
	GVariant* _tmp7_;
	GVariant* _tmp8_;
	GVariant* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
	GVariant* _tmp12_;
	const gchar* _tmp13_;
	gchar* _tmp14_;
	GVariant* _tmp15_;
	const gchar* _tmp16_;
	gchar* _tmp17_;
	GVariant* _tmp18_;
	const gchar* _tmp19_;
	gchar* _tmp20_;
	GVariant* _tmp21_;
	const GVariantType* _tmp22_;
	const GVariantType* _tmp23_;
	GVariant* _tmp24_;
	GHashTable* _tmp25_;
	UnityProtocolActionType action;
	UnitySearchMetadata* metadata;
	UnitySearchMetadata* _tmp30_;
	UnityProtocolActionType _tmp31_;
	UnityAbstractScope* _tmp32_;
	UnityScopeResult _tmp33_;
	UnitySearchMetadata* _tmp34_;
	UnityActivationResponse* _tmp35_;
	UnityScopeResult _tmp36_;
	UnitySearchMetadata* _tmp37_;
	UnityPreview* _tmp38_;
	GVariant* act_id_v;
	gconstpointer _tmp39_;
	GVariant* _tmp40_;
	gboolean _tmp41_;
	GVariant* _tmp42_;
	GVariant* _tmp43_;
	const GVariantType* _tmp44_;
	const GVariantType* _tmp45_;
	gchar* _tmp46_;
	gchar* _tmp47_;
	GError* _tmp48_;
	GError* _tmp49_;
	UnityAbstractScope* _tmp50_;
	UnityScopeResult _tmp51_;
	UnitySearchMetadata* _tmp52_;
	GVariant* _tmp53_;
	const gchar* _tmp54_;
	UnityActivationResponse* _tmp55_;
	gboolean _tmp56_;
	UnityActivationResponse* _tmp57_;
	UnityActivationResponse* _tmp58_;
	UnityHandledType _tmp59_;
	UnityHandledType _tmp60_;
	UnityActivationResponse* _tmp61_;
	UnityPreview* _tmp62_;
	gchar* new_uri;
	UnityActivationResponse* _tmp63_;
	const gchar* _tmp64_;
	const gchar* _tmp65_;
	gchar* _tmp66_;
	const gchar* _tmp67_;
	const gchar* _tmp68_;
	GVariant* _tmp69_;
	GVariant* _tmp70_;
	UnityProtocolActivationReplyRaw _tmp71_;
	UnityProtocolActivationReplyRaw _tmp72_;
	UnityProtocolActivationReplyRaw _tmp73_;
	UnityPreview* _tmp74_;
	UnityActivationResponse* _tmp75_;
	UnityPreview* _tmp76_;
	UnityPreview* _tmp77_;
	UnityPreview* _tmp78_;
	UnityPreview* _tmp79_;
	UnityActivationResponse* _tmp80_;
	UnityActivationResponse* _tmp81_;
	UnityActivationResponse* _tmp82_;
	UnityScopeResult _tmp83_;
	const gchar* _tmp84_;
	gchar* _tmp85_;
	UnityActivationResponse* _tmp86_;
	const gchar* _tmp87_;
	const gchar* _tmp88_;
	gchar* stripped;
	UnityActivationResponse* _tmp89_;
	const gchar* _tmp90_;
	const gchar* _tmp91_;
	gchar* _tmp92_;
	const gchar* _tmp93_;
	const gchar* _tmp94_;
	gchar* _tmp95_;
	UnityActivationResponse* _tmp96_;
	UnityHandledType _tmp97_;
	UnityHandledType _tmp98_;
	UnityActivationResponse* _tmp99_;
	GHashTable* _tmp100_;
	GError * _inner_error_;
};

struct _Block12Data {
	int _ref_count_;
	UnityInternalDefaultScopeDBusImpl* self;
	gpointer _async_data_;
};

struct _Block13Data {
	int _ref_count_;
	Block12Data * _data12_;
	gint64 search_end_time;
};

typedef enum  {
	UNITY_INTERNAL_CHANNEL_STATE_IDLE,
	UNITY_INTERNAL_CHANNEL_STATE_SEARCH_ACTIVE
} UnityInternalChannelState;

struct _UnityInternalDefaultScopeDbusImplSearchInternalData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalDefaultScopeDBusImpl* self;
	gchar* search_string;
	GHashTable* hints;
	UnityInternalScopeChannel* channel;
	GHashTable* result;
	Block12Data* _data12_;
	GHashTable* _result_;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	UnitySearchType search_type;
	GVariant* filter_row_variant;
	gconstpointer _tmp3_;
	GVariant* _tmp4_;
	GVariant* _tmp5_;
	UnityScopeSearchBase* _tmp6_;
	UnityScopeSearchBase* _tmp7_;
	UnitySearchContext* _tmp8_;
	UnityCancellable* _tmp9_;
	gchar* normalized_query;
	UnityAbstractScope* _tmp10_;
	gchar* _tmp11_;
	const gchar* _tmp12_;
	gchar* _tmp13_;
	UnityScopeSearchBase* last_search;
	UnityScopeSearchBase* _tmp14_;
	UnityScopeSearchBase* _tmp15_;
	UnityScopeSearchBase* _tmp16_;
	UnityScopeSearchBase* _tmp17_;
	UnitySearchContext* _tmp18_;
	const gchar* _tmp19_;
	const gchar* _tmp20_;
	GHashTable* _tmp21_;
	gchar* _tmp22_;
	GVariant* _tmp23_;
	UnityScopeSearchBase* _tmp24_;
	UnitySearchContext* _tmp25_;
	UnityCancellable* _tmp26_;
	UnityInternalGLibCancellable* cancellable;
	UnityInternalGLibCancellable* _tmp27_;
	UnitySearchContext search_context;
	const gchar* _tmp28_;
	gchar* _tmp29_;
	UnitySearchType _tmp30_;
	UnityFilterSet* _tmp31_;
	UnityFilterSet* _tmp32_;
	UnitySearchMetadata* _tmp33_;
	UnityInternalDeeResultSet* result_set;
	DeeSerializableModel* _tmp34_;
	UnityInternalDeeResultSet* _tmp35_;
	UnityInternalDeeResultSet* _tmp36_;
	UnityInternalDeeResultSet* _tmp37_;
	UnityResultSet* _tmp38_;
	UnityInternalGLibCancellable* _tmp39_;
	UnityCancellable* _tmp40_;
	UnityScopeSearchBase* search;
	UnityAbstractScope* _tmp41_;
	UnitySearchContext _tmp42_;
	UnityScopeSearchBase* _tmp43_;
	UnityScopeSearchBase* _tmp44_;
	gchar* msg;
	gchar* _tmp45_;
	const gchar* _tmp46_;
	const gchar* _tmp47_;
	GError* _tmp48_;
	UnityScopeSearchBase* _tmp49_;
	UnityScopeSearchBase* _tmp50_;
	Block13Data* _data13_;
	UnityInternalUtilsAsyncMutex* _tmp51_;
	UnityInternalUtilsAsyncMutex* _tmp52_;
	DeeSerializableModel* _tmp53_;
	UnityInternalGLibCancellable* _tmp54_;
	const gchar* _tmp55_;
	GError* _tmp56_;
	UnityInternalDeeResultSet* _tmp57_;
	DeeSharedModel* _tmp58_;
	gint64 search_start_time;
	gboolean _tmp59_;
	gint64 _tmp60_;
	const gchar* _tmp61_;
	const gchar* _tmp62_;
	gboolean _tmp63_;
	UnityScopeSearchBase* _tmp64_;
	gboolean _tmp65_;
	UnityScopeSearchBase* _tmp66_;
	const gchar* _tmp67_;
	const gchar* _tmp68_;
	UnityInternalGLibCancellable* _tmp69_;
	UnityInternalDeeResultSet* _tmp70_;
	GHashTable* _tmp71_;
	gchar* _tmp72_;
	GVariant* _tmp73_;
	gboolean _tmp74_;
	gint64 delta_us;
	gint64 _tmp75_;
	gint64 _tmp76_;
	gdouble delta;
	gint64 _tmp77_;
	GHashTable* _tmp78_;
	gchar* _tmp79_;
	gdouble _tmp80_;
	GVariant* _tmp81_;
	UnityInternalUtilsAsyncMutex* _tmp82_;
	UnityInternalGLibCancellable* _tmp83_;
	const gchar* _tmp84_;
	GError* _tmp85_;
	GError * _inner_error_;
};

struct _UnityInternalDefaultScopeDbusImplSearchData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalDefaultScopeDBusImpl* self;
	gchar* channel_id;
	gchar* search_string;
	GHashTable* hints;
	GCancellable* cancellable;
	GHashTable* result;
	GHashTable* _result_;
	UnityInternalScopeChannel* channel;
	UnityInternalScopeChannel* _tmp0_;
	GHashTable* _tmp1_;
	UnityInternalScopeChannel* _tmp2_;
	GHashTable* _tmp3_;
	GHashTable* _tmp4_;
	gint _tmp5_;
	guint _tmp6_;
	gint _tmp7_;
	GError * _inner_error_;
};

struct _Block14Data {
	int _ref_count_;
	UnityInternalDefaultScopeDBusImpl* self;
	UnityPreview* response;
	gpointer _async_data_;
};

struct _UnityInternalDefaultScopeDbusImplPreviewInternalData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalDefaultScopeDBusImpl* self;
	UnityScopeResult scope_result;
	UnitySearchMetadata* metadata;
	UnityPreview* result;
	Block14Data* _data14_;
	UnityResultPreviewer* previewer;
	UnityAbstractScope* _tmp0_;
	UnityScopeResult _tmp1_;
	UnityResultPreviewer* _tmp2_;
	UnityResultPreviewer* _tmp3_;
	UnityResultPreviewer* _tmp4_;
	UnityPreview* _tmp5_;
	UnityGenericPreview* _tmp6_;
	UnityPreview* _tmp7_;
	UnityScopeResult _tmp8_;
	const gchar* _tmp9_;
	UnityPreview* _tmp10_;
	UnityScopeResult _tmp11_;
	const gchar* _tmp12_;
	gchar* _tmp13_;
	gchar* _tmp14_;
	GIcon* icon;
	UnityScopeResult _tmp15_;
	const gchar* _tmp16_;
	GIcon* _tmp17_;
	UnityPreview* _tmp18_;
	GIcon* _tmp19_;
	UnityPreview* _tmp20_;
	UnityPreview* _tmp21_;
};

struct _UnityInternalDefaultScopeDbusImplOpenChannelData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalDefaultScopeDBusImpl* self;
	guint channel_type;
	GHashTable* hints;
	GCancellable* cancellable;
	GHashTable* out_hints;
	char* sender;
	gchar* result;
	UnityProtocolChannelFlags flags;
	UnityInternalScopeChannel* channel;
	UnityInternalScopeChannel* _tmp0_;
	UnitySchema* schema;
	UnityAbstractScope* _tmp1_;
	UnitySchema* _tmp2_;
	GHashTable* required_schema;
	GHashFunc _tmp3_;
	GEqualFunc _tmp4_;
	GHashTable* _tmp5_;
	GHashTable* optional_schema;
	GHashFunc _tmp6_;
	GEqualFunc _tmp7_;
	GHashTable* _tmp8_;
	UnitySchema* _tmp9_;
	GList* _tmp10_;
	GList* field_collection;
	GList* field_it;
	UnitySchemaFieldInfo* field;
	UnitySchemaFieldInfo* _tmp11_;
	UnitySchemaFieldType _tmp12_;
	GHashTable* _tmp13_;
	UnitySchemaFieldInfo* _tmp14_;
	const gchar* _tmp15_;
	gchar* _tmp16_;
	UnitySchemaFieldInfo* _tmp17_;
	const gchar* _tmp18_;
	gchar* _tmp19_;
	GHashTable* _tmp20_;
	UnitySchemaFieldInfo* _tmp21_;
	const gchar* _tmp22_;
	gchar* _tmp23_;
	UnitySchemaFieldInfo* _tmp24_;
	const gchar* _tmp25_;
	gchar* _tmp26_;
	gchar* model_name;
	UnityInternalScopeChannel* _tmp27_;
	gchar* _tmp28_;
	gchar* _tmp29_;
	GHashTable* _tmp30_;
	GHashTable* _tmp31_;
	DeeSerializableModel* _tmp32_;
	DeeSerializableModel* _tmp33_;
	UnityProtocolChannelFlags _tmp34_;
	gchar* _tmp35_;
	gchar* _tmp36_;
	UnityInternalScopeChannel* _tmp37_;
	DeeSharedModel* _tmp38_;
	UnityInternalScopeChannel* _tmp39_;
	DeeSharedModel* _tmp40_;
	UnityInternalScopeChannel* _tmp41_;
	GDBusConnection* _tmp42_;
	UnityInternalScopeChannel* _tmp43_;
	GHashTable* _tmp44_;
	UnityInternalScopeChannel* _tmp45_;
	const gchar* _tmp46_;
	gchar* _tmp47_;
	UnityInternalScopeChannel* _tmp48_;
	UnityInternalScopeChannel* _tmp49_;
	GHashFunc _tmp50_;
	GEqualFunc _tmp51_;
	GHashTable* _tmp52_;
	gchar* _tmp53_;
	const gchar* _tmp54_;
	GVariant* _tmp55_;
	UnityInternalScopeChannel* _tmp56_;
	const gchar* _tmp57_;
	gchar* _tmp58_;
};

struct _UnityInternalDefaultScopeDbusImplCloseChannelData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalDefaultScopeDBusImpl* self;
	gchar* channel_id;
	GHashTable* hints;
	GCancellable* cancellable;
	GHashTable* _tmp0_;
	GError* _tmp1_;
	GError * _inner_error_;
};

struct _UnityInternalDefaultScopeDbusImplSetViewTypeData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalDefaultScopeDBusImpl* self;
	guint view_type_id;
	UnityProtocolViewType view_type;
};

struct _UnityInternalDefaultScopeDbusImplSetActiveSourcesData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalDefaultScopeDBusImpl* self;
	gchar* channel_id;
	gchar** sources;
	gint sources_length1;
	GCancellable* cancellable;
};

struct _UnityInternalDefaultScopeDbusImplPushResultsData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalDefaultScopeDBusImpl* self;
	gchar* channel_id;
	gchar* search_string;
	gchar* source_scope_id;
	GVariant* _result_;
	gchar** categories;
	gint categories_length1;
	GCancellable* cancellable;
	GHashTable* result;
	GError* _tmp0_;
	GError * _inner_error_;
};

struct _UnityInternalOwnedName {
	gint ref_count;
	guint bus_name_own_handle;
};

struct _UnityInternalScopeDBusNameManager {
	GObject parent_instance;
	UnityInternalScopeDBusNameManagerPrivate * priv;
};

struct _UnityInternalScopeDBusNameManagerClass {
	GObjectClass parent_class;
};

struct _UnityInternalScopeDBusNameManagerPrivate {
	GHashTable* owned_names;
};

struct _Block15Data {
	int _ref_count_;
	UnityInternalScopeDBusNameManager* self;
	gint count;
	gint failures;
	gpointer _async_data_;
};

struct _Block16Data {
	int _ref_count_;
	Block15Data * _data15_;
	gchar* dbus_name;
};

struct _UnityInternalScopeDbusNameManagerAcquireNamesData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalScopeDBusNameManager* self;
	gboolean result;
	Block15Data* _data15_;
	GHashTable* _tmp0_;
};


extern gint unity_internal_PROCESS_TIMEOUT_SEC;
gint unity_internal_PROCESS_TIMEOUT_SEC = 45;
static gpointer unity_internal_default_scope_dbus_impl_parent_class = NULL;
static gboolean unity_internal_default_scope_dbus_impl_force_sync_requests;
static gboolean unity_internal_default_scope_dbus_impl_force_sync_requests = FALSE;
static gboolean unity_internal_default_scope_dbus_impl_measure_requests;
static gboolean unity_internal_default_scope_dbus_impl_measure_requests = FALSE;
static gchar* unity_internal_default_scope_dbus_impl_default_locale;
static gchar* unity_internal_default_scope_dbus_impl_default_locale = NULL;
static UnityProtocolScopeServiceIface * unity_internal_default_scope_dbus_impl_unity_protocol_scope_service_parent_iface = NULL;
static UnityInternalScopeDBusImplIface * unity_internal_default_scope_dbus_impl_unity_internal_scope_dbus_impl_parent_iface = NULL;
static gpointer unity_internal_scope_dbus_name_manager_parent_class = NULL;
static UnityInternalScopeDBusNameManager* unity_internal_scope_dbus_name_manager_name_manager;
static UnityInternalScopeDBusNameManager* unity_internal_scope_dbus_name_manager_name_manager = NULL;

void unity_internal_update_process_timeout (gint new_timeout);
GType unity_internal_scope_dbus_impl_get_type (void) G_GNUC_CONST;
void unity_internal_scope_dbus_impl_export (UnityInternalScopeDBusImpl* self,
                                            GError** error);
void unity_internal_scope_dbus_impl_unexport (UnityInternalScopeDBusImpl* self);
void unity_internal_scope_dbus_impl_queue_property_notification (UnityInternalScopeDBusImpl* self,
                                                                 const gchar* prop_name,
                                                                 GVariant* prop_value);
DeeSerializableModel* unity_internal_scope_dbus_impl_get_categories_model (UnityInternalScopeDBusImpl* self);
void unity_internal_scope_dbus_impl_set_categories_model (UnityInternalScopeDBusImpl* self,
                                                          DeeSerializableModel* value);
DeeSerializableModel* unity_internal_scope_dbus_impl_get_filters_model (UnityInternalScopeDBusImpl* self);
void unity_internal_scope_dbus_impl_set_filters_model (UnityInternalScopeDBusImpl* self,
                                                       DeeSerializableModel* value);
GType unity_internal_default_scope_dbus_impl_get_type (void) G_GNUC_CONST;
GType unity_internal_scope_channel_get_type (void) G_GNUC_CONST;
#define UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL, UnityInternalDefaultScopeDBusImplPrivate))
#define UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_SOURCES_FILTER_ID "unity-sources"
UnityInternalDefaultScopeDBusImpl* unity_internal_default_scope_dbus_impl_new (UnityAbstractScope* owner);
UnityInternalDefaultScopeDBusImpl* unity_internal_default_scope_dbus_impl_construct (GType object_type,
                                                                                     UnityAbstractScope* owner);
static void unity_internal_default_scope_dbus_impl_real_dispose (GObject* base);
static gchar* unity_internal_default_scope_dbus_impl_create_dbus_name (UnityInternalDefaultScopeDBusImpl* self);
static void unity_internal_default_scope_dbus_impl_create_models (UnityInternalDefaultScopeDBusImpl* self);
static void unity_internal_default_scope_dbus_impl_real_export (UnityInternalScopeDBusImpl* base,
                                                         GError** error);
static UnityAbstractScope* unity_internal_default_scope_dbus_impl_get_owner (UnityInternalDefaultScopeDBusImpl* self);
void unity_internal_default_scope_dbus_impl_set_filters (UnityInternalDefaultScopeDBusImpl* self,
                                                         GList* filters);
void unity_internal_default_scope_dbus_impl_set_categories (UnityInternalDefaultScopeDBusImpl* self,
                                                            GList* categories);
static void unity_internal_default_scope_dbus_impl_on_scope_results_invalidated (UnityInternalDefaultScopeDBusImpl* self,
                                                                          UnitySearchType search_type);
static void _unity_internal_default_scope_dbus_impl_on_scope_results_invalidated_unity_abstract_scope_results_invalidated_internal (UnityAbstractScope* _sender,
                                                                                                                             UnitySearchType search_type,
                                                                                                                             gpointer self);
static void unity_internal_default_scope_dbus_impl_real_unexport (UnityInternalScopeDBusImpl* base);
void unity_internal_default_scope_dbus_impl_start_unexport_timer (UnityInternalDefaultScopeDBusImpl* self);
static gboolean __lambda41_ (UnityInternalDefaultScopeDBusImpl* self);
static gboolean ___lambda41__gsource_func (gpointer self);
static void unity_internal_default_scope_dbus_impl_real_queue_property_notification (UnityInternalScopeDBusImpl* base,
                                                                              const gchar* prop_name,
                                                                              GVariant* prop_value);
static gboolean ___lambda40_ (UnityInternalDefaultScopeDBusImpl* self);
static gboolean ____lambda40__gsource_func (gpointer self);
gchar* unity_internal_utils_icon_to_string (GIcon* icon);
GVariant* unity_internal_utils_hash_table_to_asv (GHashTable* hash);
GHashTable* unity_category_get_hints (UnityCategory* self);
static void unity_internal_default_scope_dbus_impl_on_filter_option_changed (UnityInternalDefaultScopeDBusImpl* self,
                                                                      UnityFilter* filter);
static void _unity_internal_default_scope_dbus_impl_on_filter_option_changed_unity_filter_changed (UnityFilter* _sender,
                                                                                            gpointer self);
GType unity_internal_filter_column_get_type (void) G_GNUC_CONST;
GHashTable* unity_filter_get_hints (UnityFilter* self);
gpointer unity_internal_utils_async_mutex_ref (gpointer instance);
void unity_internal_utils_async_mutex_unref (gpointer instance);
GParamSpec* unity_internal_utils_param_spec_async_mutex (const gchar* name,
                                                         const gchar* nick,
                                                         const gchar* blurb,
                                                         GType object_type,
                                                         GParamFlags flags);
void unity_internal_utils_value_set_async_mutex (GValue* value,
                                                 gpointer v_object);
void unity_internal_utils_value_take_async_mutex (GValue* value,
                                                  gpointer v_object);
gpointer unity_internal_utils_value_get_async_mutex (const GValue* value);
GType unity_internal_utils_async_mutex_get_type (void) G_GNUC_CONST;
static UnitySearchMetadata* unity_internal_default_scope_dbus_impl_create_search_metadata (UnityInternalDefaultScopeDBusImpl* self,
                                                                                    GHashTable* hints);
static Block11Data* block11_data_ref (Block11Data* _data11_);
static void block11_data_unref (void * _userdata_);
static void _g_free0_ (gpointer var);
static void _g_variant_unref0_ (gpointer var);
static void __lambda42_ (Block11Data* _data11_,
                  const gchar* k,
                  GVariant* v);
static void ___lambda42__gh_func (gconstpointer key,
                           gconstpointer value,
                           gpointer self);
static gboolean unity_internal_default_scope_dbus_impl_timeout_reached (UnityInternalDefaultScopeDBusImpl* self);
static void unity_internal_default_scope_dbus_impl_real_activate_data_free (gpointer _data);
static void unity_internal_default_scope_dbus_impl_real_activate_async_ready_wrapper (GObject *source_object,
                                                                               GAsyncResult *res,
                                                                               void *user_data);
static void unity_internal_default_scope_dbus_impl_real_activate (UnityProtocolScopeService* base,
                                                           const gchar* channel_id,
                                                           GVariant** result_arr,
                                                           int result_arr_length1,
                                                           guint action_type,
                                                           GHashTable* hints,
                                                           GCancellable* cancellable,
                                                           GAsyncReadyCallback _callback_,
                                                           gpointer _user_data_);
static gboolean unity_internal_default_scope_dbus_impl_real_activate_co (UnityInternalDefaultScopeDbusImplActivateData* _data_);
GType unity_internal_result_column_get_type (void) G_GNUC_CONST;
static GHashTable* _variant_get32 (GVariant* value);
void unity_internal_default_scope_dbus_impl_preview_internal (UnityInternalDefaultScopeDBusImpl* self,
                                                              UnityScopeResult* scope_result,
                                                              UnitySearchMetadata* metadata,
                                                              GAsyncReadyCallback _callback_,
                                                              gpointer _user_data_);
UnityPreview* unity_internal_default_scope_dbus_impl_preview_internal_finish (UnityInternalDefaultScopeDBusImpl* self,
                                                                              GAsyncResult* _res_);
static void unity_internal_default_scope_dbus_impl_activate_ready (GObject* source_object,
                                                            GAsyncResult* _res_,
                                                            gpointer _user_data_);
#define UNITY_INTERNAL_ACTIVATE_PREVIEW_ACTION_HINT "preview-action-id"
UnityPreview* unity_activation_response_get_preview (UnityActivationResponse* self);
static GVariant* _variant_new33 (const gchar* value);
GHashTable* unity_activation_response_get_hints (UnityActivationResponse* self);
static void unity_internal_default_scope_dbus_impl_search_internal_data_free (gpointer _data);
static void unity_internal_default_scope_dbus_impl_search_internal_async_ready_wrapper (GObject *source_object,
                                                                                 GAsyncResult *res,
                                                                                 void *user_data);
static void unity_internal_default_scope_dbus_impl_search_internal (UnityInternalDefaultScopeDBusImpl* self,
                                                             const gchar* search_string,
                                                             GHashTable* hints,
                                                             UnityInternalScopeChannel* channel,
                                                             GAsyncReadyCallback _callback_,
                                                             gpointer _user_data_);
static GHashTable* unity_internal_default_scope_dbus_impl_search_internal_finish (UnityInternalDefaultScopeDBusImpl* self,
                                                                           GAsyncResult* _res_,
                                                                           GError** error);
static gboolean unity_internal_default_scope_dbus_impl_search_internal_co (UnityInternalDefaultScopeDbusImplSearchInternalData* _data_);
static Block12Data* block12_data_ref (Block12Data* _data12_);
static void block12_data_unref (void * _userdata_);
UnitySearchType unity_internal_scope_channel_get_search_type (UnityInternalScopeChannel* self);
#define UNITY_INTERNAL_SEARCH_FILTER_ROW_HINT "changed-filter-row"
static void unity_internal_default_scope_dbus_impl_update_filter_state (UnityInternalDefaultScopeDBusImpl* self,
                                                                 UnityInternalScopeChannel* channel,
                                                                 GVariant* changed_row,
                                                                 GError** error);
gboolean unity_internal_scope_channel_is_search_running (UnityInternalScopeChannel* self);
void unity_internal_scope_channel_wait_for_search (UnityInternalScopeChannel* self,
                                                   GAsyncReadyCallback _callback_,
                                                   gpointer _user_data_);
void unity_internal_scope_channel_wait_for_search_finish (UnityInternalScopeChannel* self,
                                                          GAsyncResult* _res_);
static void unity_internal_default_scope_dbus_impl_search_internal_ready (GObject* source_object,
                                                                   GAsyncResult* _res_,
                                                                   gpointer _user_data_);
#define UNITY_INTERNAL_SEARCH_SEQNUM_HINT "model-seqnum"
guint64 unity_internal_scope_channel_get_last_seqnum (UnityInternalScopeChannel* self);
GType unity_internal_glib_cancellable_get_type (void) G_GNUC_CONST;
UnityInternalGLibCancellable* unity_internal_glib_cancellable_new (void);
UnityInternalGLibCancellable* unity_internal_glib_cancellable_construct (GType object_type);
GType unity_internal_dee_result_set_get_type (void) G_GNUC_CONST;
UnityInternalDeeResultSet* unity_internal_dee_result_set_new_with_model (DeeSerializableModel* model);
UnityInternalDeeResultSet* unity_internal_dee_result_set_construct_with_model (GType object_type,
                                                                               DeeSerializableModel* model);
static Block13Data* block13_data_ref (Block13Data* _data13_);
static void block13_data_unref (void * _userdata_);
gboolean unity_internal_utils_async_mutex_try_lock (UnityInternalUtilsAsyncMutex* self);
void unity_internal_utils_async_mutex_lock (UnityInternalUtilsAsyncMutex* self,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
void unity_internal_utils_async_mutex_lock_finish (UnityInternalUtilsAsyncMutex* self,
                                                   GAsyncResult* _res_);
GType unity_internal_channel_state_get_type (void) G_GNUC_CONST;
void unity_internal_scope_channel_set_state (UnityInternalScopeChannel* self,
                                             UnityInternalChannelState new_state);
static gboolean _unity_internal_default_scope_dbus_impl_search_internal_co_gsource_func (gpointer self);
void unity_internal_dee_result_set_set_flush_model (UnityInternalDeeResultSet* self,
                                                    DeeSerializableModel* value);
static void ____lambda44_ (Block13Data* _data13_);
static void _____lambda44__unity_scope_search_base_callback (UnityScopeSearchBase* instance,
                                                      gpointer self);
#define UNITY_INTERNAL_SEARCH_TIME_HINT "search-time"
void unity_internal_utils_async_mutex_unlock (UnityInternalUtilsAsyncMutex* self);
static void unity_internal_default_scope_dbus_impl_real_search_data_free (gpointer _data);
static void unity_internal_default_scope_dbus_impl_real_search_async_ready_wrapper (GObject *source_object,
                                                                             GAsyncResult *res,
                                                                             void *user_data);
static void unity_internal_default_scope_dbus_impl_real_search (UnityProtocolScopeService* base,
                                                         const gchar* channel_id,
                                                         const gchar* search_string,
                                                         GHashTable* hints,
                                                         GCancellable* cancellable,
                                                         GAsyncReadyCallback _callback_,
                                                         gpointer _user_data_);
static gboolean unity_internal_default_scope_dbus_impl_real_search_co (UnityInternalDefaultScopeDbusImplSearchData* _data_);
static UnityInternalScopeChannel* unity_internal_default_scope_dbus_impl_get_channel_by_id (UnityInternalDefaultScopeDBusImpl* self,
                                                                                     const gchar* channel_id,
                                                                                     GError** error);
static void unity_internal_default_scope_dbus_impl_search_ready (GObject* source_object,
                                                          GAsyncResult* _res_,
                                                          gpointer _user_data_);
static gboolean _unity_internal_default_scope_dbus_impl_timeout_reached_gsource_func (gpointer self);
static void unity_internal_default_scope_dbus_impl_preview_internal_data_free (gpointer _data);
static void unity_internal_default_scope_dbus_impl_preview_internal_async_ready_wrapper (GObject *source_object,
                                                                                  GAsyncResult *res,
                                                                                  void *user_data);
static gboolean unity_internal_default_scope_dbus_impl_preview_internal_co (UnityInternalDefaultScopeDbusImplPreviewInternalData* _data_);
static Block14Data* block14_data_ref (Block14Data* _data14_);
static void block14_data_unref (void * _userdata_);
static void ___lambda43_ (Block14Data* _data14_,
                   UnityResultPreviewer* obj,
                   UnityAbstractPreview* preview);
static gboolean _unity_internal_default_scope_dbus_impl_preview_internal_co_gsource_func (gpointer self);
static void ____lambda43__unity_abstract_preview_callback (UnityResultPreviewer* previewer,
                                                    UnityAbstractPreview* preview,
                                                    gpointer self);
UnityGenericPreview* unity_generic_preview_empty (void);
UnityFilter* unity_internal_scope_channel_get_filter_by_id (UnityInternalScopeChannel* self,
                                                            const gchar* filter_id);
void unity_filter_set_filtering (UnityFilter* self,
                                 gboolean value);
void unity_filter_set_collapsed (UnityFilter* self,
                                 gboolean value);
void unity_filter_update (UnityFilter* self,
                          GVariant* properties);
static void unity_internal_default_scope_dbus_impl_real_open_channel_data_free (gpointer _data);
static void unity_internal_default_scope_dbus_impl_real_open_channel_async_ready_wrapper (GObject *source_object,
                                                                                   GAsyncResult *res,
                                                                                   void *user_data);
static void unity_internal_default_scope_dbus_impl_real_open_channel (UnityProtocolScopeService* base,
                                                               guint channel_type,
                                                               GHashTable* hints,
                                                               GCancellable* cancellable,
                                                               const char* sender,
                                                               GAsyncReadyCallback _callback_,
                                                               gpointer _user_data_);
static gboolean unity_internal_default_scope_dbus_impl_real_open_channel_co (UnityInternalDefaultScopeDbusImplOpenChannelData* _data_);
UnityInternalScopeChannel* unity_internal_scope_channel_new (UnityProtocolChannelType channel_type_);
UnityInternalScopeChannel* unity_internal_scope_channel_construct (GType object_type,
                                                                   UnityProtocolChannelType channel_type_);
gchar* unity_internal_scope_channel_create_channel (UnityInternalScopeChannel* self,
                                                    const gchar* swarm_name,
                                                    GHashTable* metadata_schema,
                                                    GHashTable* optional_metadata,
                                                    DeeSerializableModel* filter_model,
                                                    UnityProtocolChannelFlags flags);
void unity_internal_utils_wait_for_model_synchronization (DeeSharedModel* model,
                                                          GAsyncReadyCallback _callback_,
                                                          gpointer _user_data_);
void unity_internal_utils_wait_for_model_synchronization_finish (GAsyncResult* _res_);
static void unity_internal_default_scope_dbus_impl_open_channel_ready (GObject* source_object,
                                                                GAsyncResult* _res_,
                                                                gpointer _user_data_);
void unity_internal_scope_channel_watch_owner (UnityInternalScopeChannel* self,
                                               GDBusConnection* connection,
                                               const char* owner);
static void unity_internal_default_scope_dbus_impl_channel_owner_lost (UnityInternalDefaultScopeDBusImpl* self,
                                                                UnityInternalScopeChannel* channel);
static void _unity_internal_default_scope_dbus_impl_channel_owner_lost_unity_internal_scope_channel_owner_lost (UnityInternalScopeChannel* _sender,
                                                                                                         gpointer self);
static void unity_internal_default_scope_dbus_impl_real_close_channel_data_free (gpointer _data);
static void unity_internal_default_scope_dbus_impl_real_close_channel_async_ready_wrapper (GObject *source_object,
                                                                                    GAsyncResult *res,
                                                                                    void *user_data);
static void unity_internal_default_scope_dbus_impl_real_close_channel (UnityProtocolScopeService* base,
                                                                const gchar* channel_id,
                                                                GHashTable* hints,
                                                                GCancellable* cancellable,
                                                                GAsyncReadyCallback _callback_,
                                                                gpointer _user_data_);
static gboolean unity_internal_default_scope_dbus_impl_real_close_channel_co (UnityInternalDefaultScopeDbusImplCloseChannelData* _data_);
static void unity_internal_default_scope_dbus_impl_real_set_view_type_data_free (gpointer _data);
static void unity_internal_default_scope_dbus_impl_real_set_view_type_async_ready_wrapper (GObject *source_object,
                                                                                    GAsyncResult *res,
                                                                                    void *user_data);
static void unity_internal_default_scope_dbus_impl_real_set_view_type (UnityProtocolScopeService* base,
                                                                guint view_type_id,
                                                                GAsyncReadyCallback _callback_,
                                                                gpointer _user_data_);
static gboolean unity_internal_default_scope_dbus_impl_real_set_view_type_co (UnityInternalDefaultScopeDbusImplSetViewTypeData* _data_);
void unity_internal_default_scope_dbus_impl_set_view_type (UnityInternalDefaultScopeDBusImpl* self,
                                                           UnityProtocolViewType value);
static void unity_internal_default_scope_dbus_impl_set_active_sources_data_free (gpointer _data);
static void unity_internal_default_scope_dbus_impl_set_active_sources_async_ready_wrapper (GObject *source_object,
                                                                                    GAsyncResult *res,
                                                                                    void *user_data);
void unity_internal_default_scope_dbus_impl_set_active_sources (UnityInternalDefaultScopeDBusImpl* self,
                                                                const gchar* channel_id,
                                                                gchar** sources,
                                                                int sources_length1,
                                                                GCancellable* cancellable,
                                                                GAsyncReadyCallback _callback_,
                                                                gpointer _user_data_);
void unity_internal_default_scope_dbus_impl_set_active_sources_finish (UnityInternalDefaultScopeDBusImpl* self,
                                                                       GAsyncResult* _res_,
                                                                       GError** error);
static gboolean unity_internal_default_scope_dbus_impl_set_active_sources_co (UnityInternalDefaultScopeDbusImplSetActiveSourcesData* _data_);
static void unity_internal_default_scope_dbus_impl_real_push_results_data_free (gpointer _data);
static void unity_internal_default_scope_dbus_impl_real_push_results_async_ready_wrapper (GObject *source_object,
                                                                                   GAsyncResult *res,
                                                                                   void *user_data);
static void unity_internal_default_scope_dbus_impl_real_push_results (UnityProtocolScopeService* base,
                                                               const gchar* channel_id,
                                                               const gchar* search_string,
                                                               const gchar* source_scope_id,
                                                               GVariant* _result_,
                                                               gchar** categories,
                                                               int categories_length1,
                                                               GCancellable* cancellable,
                                                               GAsyncReadyCallback _callback_,
                                                               gpointer _user_data_);
static gboolean unity_internal_default_scope_dbus_impl_real_push_results_co (UnityInternalDefaultScopeDbusImplPushResultsData* _data_);
static void unity_internal_default_scope_dbus_impl_set_owner (UnityInternalDefaultScopeDBusImpl* self,
                                                       UnityAbstractScope* value);
UnityProtocolViewType unity_internal_default_scope_dbus_impl_get_view_type (UnityInternalDefaultScopeDBusImpl* self);
static GObject * unity_internal_default_scope_dbus_impl_constructor (GType type,
                                                              guint n_construct_properties,
                                                              GObjectConstructParam * construct_properties);
static void _g_object_unref0_ (gpointer var);
#define UNITY_INTERNAL_VAR_SYNC_DBUS_SEARCHES "LIBUNITY_SYNC_DBUS"
#define UNITY_INTERNAL_VAR_MEASURED_SEARCHES "LIBUNITY_TIME_SEARCHES"
static void unity_internal_default_scope_dbus_impl_finalize (GObject * obj);
static void _vala_unity_internal_default_scope_dbus_impl_get_property (GObject * object,
                                                                guint property_id,
                                                                GValue * value,
                                                                GParamSpec * pspec);
static void _vala_unity_internal_default_scope_dbus_impl_set_property (GObject * object,
                                                                guint property_id,
                                                                const GValue * value,
                                                                GParamSpec * pspec);
GType unity_internal_owned_name_get_type (void) G_GNUC_CONST;
UnityInternalOwnedName* unity_internal_owned_name_dup (const UnityInternalOwnedName* self);
void unity_internal_owned_name_free (UnityInternalOwnedName* self);
GType unity_internal_scope_dbus_name_manager_get_type (void) G_GNUC_CONST;
#define UNITY_INTERNAL_SCOPE_DBUS_NAME_MANAGER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER, UnityInternalScopeDBusNameManagerPrivate))
static UnityInternalScopeDBusNameManager* unity_internal_scope_dbus_name_manager_new (void);
static UnityInternalScopeDBusNameManager* unity_internal_scope_dbus_name_manager_construct (GType object_type);
static void _unity_internal_owned_name_free0_ (gpointer var);
UnityInternalScopeDBusNameManager* unity_internal_scope_dbus_name_manager_get_default (void);
void unity_internal_scope_dbus_name_manager_own_name (UnityInternalScopeDBusNameManager* self,
                                                      const gchar* dbus_name);
void unity_internal_scope_dbus_name_manager_unown_name (UnityInternalScopeDBusNameManager* self,
                                                        const gchar* dbus_name);
static void unity_internal_scope_dbus_name_manager_acquire_names_data_free (gpointer _data);
static void unity_internal_scope_dbus_name_manager_acquire_names_async_ready_wrapper (GObject *source_object,
                                                                               GAsyncResult *res,
                                                                               void *user_data);
void unity_internal_scope_dbus_name_manager_acquire_names (UnityInternalScopeDBusNameManager* self,
                                                           GAsyncReadyCallback _callback_,
                                                           gpointer _user_data_);
gboolean unity_internal_scope_dbus_name_manager_acquire_names_finish (UnityInternalScopeDBusNameManager* self,
                                                                      GAsyncResult* _res_);
static gboolean unity_internal_scope_dbus_name_manager_acquire_names_co (UnityInternalScopeDbusNameManagerAcquireNamesData* _data_);
static Block15Data* block15_data_ref (Block15Data* _data15_);
static void block15_data_unref (void * _userdata_);
static void __lambda45_ (Block15Data* _data15_,
                  const gchar* dbus_name,
                  UnityInternalOwnedName* info);
static Block16Data* block16_data_ref (Block16Data* _data16_);
static void block16_data_unref (void * _userdata_);
static void __lambda46_ (Block16Data* _data16_);
static gboolean _unity_internal_scope_dbus_name_manager_acquire_names_co_gsource_func (gpointer self);
static void ___lambda46__gbus_name_acquired_callback (GDBusConnection* connection,
                                               const gchar* name,
                                               gpointer self);
static void __lambda47_ (Block16Data* _data16_);
static void ___lambda47__gbus_name_lost_callback (GDBusConnection* connection,
                                           const gchar* name,
                                           gpointer self);
static void ___lambda45__gh_func (gconstpointer key,
                           gconstpointer value,
                           gpointer self);
static void unity_internal_scope_dbus_name_manager_finalize (GObject * obj);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

extern const gchar* UNITY_INTERNAL_CATEGORIES_SCHEMA[5];
extern const gchar* UNITY_INTERNAL_FILTERS_SCHEMA[8];
extern const gchar* UNITY_INTERNAL_RESULTS_SCHEMA[9];

void
unity_internal_update_process_timeout (gint new_timeout)
{
	gint _tmp0_;
	gint _tmp1_;
	_tmp0_ = unity_internal_PROCESS_TIMEOUT_SEC;
	if (_tmp0_ < 0) {
		return;
	}
	if (new_timeout < 0) {
		unity_internal_PROCESS_TIMEOUT_SEC = -1;
		return;
	}
	_tmp1_ = unity_internal_PROCESS_TIMEOUT_SEC;
	unity_internal_PROCESS_TIMEOUT_SEC = MAX (_tmp1_, new_timeout);
}


void
unity_internal_scope_dbus_impl_export (UnityInternalScopeDBusImpl* self,
                                       GError** error)
{
	g_return_if_fail (self != NULL);
	UNITY_INTERNAL_SCOPE_DBUS_IMPL_GET_INTERFACE (self)->export (self, error);
}


void
unity_internal_scope_dbus_impl_unexport (UnityInternalScopeDBusImpl* self)
{
	g_return_if_fail (self != NULL);
	UNITY_INTERNAL_SCOPE_DBUS_IMPL_GET_INTERFACE (self)->unexport (self);
}


void
unity_internal_scope_dbus_impl_queue_property_notification (UnityInternalScopeDBusImpl* self,
                                                            const gchar* prop_name,
                                                            GVariant* prop_value)
{
	g_return_if_fail (self != NULL);
	UNITY_INTERNAL_SCOPE_DBUS_IMPL_GET_INTERFACE (self)->queue_property_notification (self, prop_name, prop_value);
}


DeeSerializableModel*
unity_internal_scope_dbus_impl_get_categories_model (UnityInternalScopeDBusImpl* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_INTERNAL_SCOPE_DBUS_IMPL_GET_INTERFACE (self)->get_categories_model (self);
}


void
unity_internal_scope_dbus_impl_set_categories_model (UnityInternalScopeDBusImpl* self,
                                                     DeeSerializableModel* value)
{
	g_return_if_fail (self != NULL);
	UNITY_INTERNAL_SCOPE_DBUS_IMPL_GET_INTERFACE (self)->set_categories_model (self, value);
}


DeeSerializableModel*
unity_internal_scope_dbus_impl_get_filters_model (UnityInternalScopeDBusImpl* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_INTERNAL_SCOPE_DBUS_IMPL_GET_INTERFACE (self)->get_filters_model (self);
}


void
unity_internal_scope_dbus_impl_set_filters_model (UnityInternalScopeDBusImpl* self,
                                                  DeeSerializableModel* value)
{
	g_return_if_fail (self != NULL);
	UNITY_INTERNAL_SCOPE_DBUS_IMPL_GET_INTERFACE (self)->set_filters_model (self, value);
}


static void
unity_internal_scope_dbus_impl_default_init (UnityInternalScopeDBusImplIface * iface)
{
	g_object_interface_install_property (iface, g_param_spec_object ("categories-model", "categories-model", "categories-model", dee_serializable_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_interface_install_property (iface, g_param_spec_object ("filters-model", "filters-model", "filters-model", dee_serializable_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


GType
unity_internal_scope_dbus_impl_get_type (void)
{
	static volatile gsize unity_internal_scope_dbus_impl_type_id__volatile = 0;
	if (g_once_init_enter (&unity_internal_scope_dbus_impl_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityInternalScopeDBusImplIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_internal_scope_dbus_impl_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
		GType unity_internal_scope_dbus_impl_type_id;
		unity_internal_scope_dbus_impl_type_id = g_type_register_static (G_TYPE_INTERFACE, "UnityInternalScopeDBusImpl", &g_define_type_info, 0);
		g_type_interface_add_prerequisite (unity_internal_scope_dbus_impl_type_id, UNITY_PROTOCOL_TYPE_SCOPE_SERVICE);
		g_once_init_leave (&unity_internal_scope_dbus_impl_type_id__volatile, unity_internal_scope_dbus_impl_type_id);
	}
	return unity_internal_scope_dbus_impl_type_id__volatile;
}


UnityInternalDefaultScopeDBusImpl*
unity_internal_default_scope_dbus_impl_construct (GType object_type,
                                                  UnityAbstractScope* owner)
{
	UnityInternalDefaultScopeDBusImpl * self = NULL;
	g_return_val_if_fail (owner != NULL, NULL);
	self = (UnityInternalDefaultScopeDBusImpl*) g_object_new (object_type, "owner", owner, NULL);
	return self;
}


UnityInternalDefaultScopeDBusImpl*
unity_internal_default_scope_dbus_impl_new (UnityAbstractScope* owner)
{
	return unity_internal_default_scope_dbus_impl_construct (UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL, owner);
}


static void
unity_internal_default_scope_dbus_impl_real_dispose (GObject* base)
{
	UnityInternalDefaultScopeDBusImpl * self;
	guint _tmp0_;
	guint _tmp2_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_tmp0_ = self->priv->_inactivity_timeout_source_id;
	if (_tmp0_ != ((guint) 0)) {
		guint _tmp1_;
		_tmp1_ = self->priv->_inactivity_timeout_source_id;
		g_source_remove (_tmp1_);
		self->priv->_inactivity_timeout_source_id = (guint) 0;
	}
	_tmp2_ = self->priv->_unexport_timeout_source_id;
	if (_tmp2_ != ((guint) 0)) {
		guint _tmp3_;
		_tmp3_ = self->priv->_unexport_timeout_source_id;
		g_source_remove (_tmp3_);
		self->priv->_unexport_timeout_source_id = (guint) 0;
	}
}


static gchar*
unity_internal_default_scope_dbus_impl_create_dbus_name (UnityInternalDefaultScopeDBusImpl* self)
{
	gchar* result = NULL;
	gint64 t = 0LL;
	static const char format_string[] = "com.canonical.Unity.Scope.%s.T%" G_GINT64_FORMAT "%d";
	gchar* dbus_name = NULL;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	GRand* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	g_return_val_if_fail (self != NULL, NULL);
	t = g_get_monotonic_time ();
	_tmp0_ = self->priv->_dbus_name;
	_tmp1_ = g_path_get_basename (_tmp0_);
	_tmp2_ = _tmp1_;
	_tmp3_ = self->priv->_rand;
	_tmp4_ = g_strdup_printf (format_string, _tmp2_, t, g_rand_int_range (_tmp3_, (gint32) 0, (gint32) 10000));
	_tmp5_ = _tmp4_;
	_g_free0 (_tmp2_);
	dbus_name = _tmp5_;
	result = dbus_name;
	return result;
}


static void
unity_internal_default_scope_dbus_impl_create_models (UnityInternalDefaultScopeDBusImpl* self)
{
	DeeSequenceModel* _tmp0_;
	DeeSequenceModel* _tmp1_;
	DeeSerializableModel* _tmp2_;
	DeeSerializableModel* _tmp3_;
	DeeSequenceModel* _tmp4_;
	DeeSequenceModel* _tmp5_;
	DeeSerializableModel* _tmp6_;
	DeeSerializableModel* _tmp7_;
	g_return_if_fail (self != NULL);
	_tmp0_ = (DeeSequenceModel*) dee_sequence_model_new ();
	_tmp1_ = _tmp0_;
	unity_internal_scope_dbus_impl_set_categories_model ((UnityInternalScopeDBusImpl*) self, (DeeSerializableModel*) _tmp1_);
	_g_object_unref0 (_tmp1_);
	_tmp2_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
	_tmp3_ = _tmp2_;
	dee_model_set_schema_full ((DeeModel*) _tmp3_, UNITY_INTERNAL_CATEGORIES_SCHEMA, (guint) G_N_ELEMENTS (UNITY_INTERNAL_CATEGORIES_SCHEMA));
	_tmp4_ = (DeeSequenceModel*) dee_sequence_model_new ();
	_tmp5_ = _tmp4_;
	unity_internal_scope_dbus_impl_set_filters_model ((UnityInternalScopeDBusImpl*) self, (DeeSerializableModel*) _tmp5_);
	_g_object_unref0 (_tmp5_);
	_tmp6_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self);
	_tmp7_ = _tmp6_;
	dee_model_set_schema_full ((DeeModel*) _tmp7_, UNITY_INTERNAL_FILTERS_SCHEMA, (guint) G_N_ELEMENTS (UNITY_INTERNAL_FILTERS_SCHEMA));
}


static void
_unity_internal_default_scope_dbus_impl_on_scope_results_invalidated_unity_abstract_scope_results_invalidated_internal (UnityAbstractScope* _sender,
                                                                                                                        UnitySearchType search_type,
                                                                                                                        gpointer self)
{
	unity_internal_default_scope_dbus_impl_on_scope_results_invalidated ((UnityInternalDefaultScopeDBusImpl*) self, search_type);
}


static void
unity_internal_default_scope_dbus_impl_real_export (UnityInternalScopeDBusImpl* base,
                                                    GError** error)
{
	UnityInternalDefaultScopeDBusImpl * self;
	UnityFilterSet* filters = NULL;
	UnityAbstractScope* _tmp0_;
	UnityFilterSet* _tmp1_;
	UnityCategorySet* categories = NULL;
	UnityAbstractScope* _tmp2_;
	UnityCategorySet* _tmp3_;
	UnityFilterSet* _tmp4_;
	GList* _tmp5_;
	GList* _tmp6_;
	UnityCategorySet* _tmp7_;
	GList* _tmp8_;
	GList* _tmp9_;
	UnityAbstractScope* _tmp10_;
	gchar* _tmp11_;
	gboolean _tmp12_ = FALSE;
	const gchar* _tmp13_;
	GDBusConnection* _tmp16_ = NULL;
	GDBusConnection* _tmp17_;
	GDBusConnection* _tmp18_;
	guint _tmp19_ = 0U;
	GDBusConnection* _tmp20_;
	const gchar* _tmp21_;
	guint _tmp22_;
	UnityAbstractScope* _tmp23_;
	gulong _tmp24_;
	GError * _inner_error_ = NULL;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_tmp0_ = self->priv->_owner;
	_tmp1_ = unity_abstract_scope_get_filters (_tmp0_);
	filters = _tmp1_;
	_tmp2_ = self->priv->_owner;
	_tmp3_ = unity_abstract_scope_get_categories (_tmp2_);
	categories = _tmp3_;
	_tmp4_ = filters;
	_tmp5_ = unity_filter_set_get_filters (_tmp4_);
	_tmp6_ = _tmp5_;
	unity_internal_default_scope_dbus_impl_set_filters (self, _tmp6_);
	(_tmp6_ == NULL) ? NULL : (_tmp6_ = (g_list_free (_tmp6_), NULL));
	_tmp7_ = categories;
	_tmp8_ = unity_category_set_get_categories (_tmp7_);
	_tmp9_ = _tmp8_;
	unity_internal_default_scope_dbus_impl_set_categories (self, _tmp9_);
	(_tmp9_ == NULL) ? NULL : (_tmp9_ = (g_list_free (_tmp9_), NULL));
	_tmp10_ = self->priv->_owner;
	_tmp11_ = unity_abstract_scope_get_unique_name (_tmp10_);
	_g_free0 (self->priv->_dbus_name);
	self->priv->_dbus_name = _tmp11_;
	_tmp13_ = self->priv->_dbus_name;
	if (_tmp13_ == NULL) {
		_tmp12_ = TRUE;
	} else {
		const gchar* _tmp14_;
		_tmp14_ = self->priv->_dbus_name;
		_tmp12_ = g_strcmp0 (_tmp14_, "") == 0;
	}
	if (_tmp12_) {
		GError* _tmp15_;
		g_critical ("unity-scope-dbus-impl.vala:158: Scope cannot be exported, unique name " \
"was not set");
		_tmp15_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_UNKNOWN, "Unable to export scope, unique name not set");
		_inner_error_ = _tmp15_;
		g_propagate_error (error, _inner_error_);
		_g_object_unref0 (categories);
		_g_object_unref0 (filters);
		return;
	}
	_tmp17_ = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &_inner_error_);
	_tmp16_ = _tmp17_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_object_unref0 (categories);
		_g_object_unref0 (filters);
		return;
	}
	_tmp18_ = _tmp16_;
	_tmp16_ = NULL;
	_g_object_unref0 (self->priv->_dbus_connection);
	self->priv->_dbus_connection = _tmp18_;
	_tmp20_ = self->priv->_dbus_connection;
	_tmp21_ = self->priv->_dbus_name;
	_tmp22_ = unity_protocol_scope_service_register_object (G_TYPE_CHECK_INSTANCE_TYPE (self, UNITY_PROTOCOL_TYPE_SCOPE_SERVICE) ? ((UnityProtocolScopeService*) self) : NULL, _tmp20_, _tmp21_, &_inner_error_);
	_tmp19_ = _tmp22_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_object_unref0 (_tmp16_);
		_g_object_unref0 (categories);
		_g_object_unref0 (filters);
		return;
	}
	self->priv->_dbus_id = _tmp19_;
	_tmp23_ = self->priv->_owner;
	_tmp24_ = g_signal_connect_object (_tmp23_, "results-invalidated-internal", (GCallback) _unity_internal_default_scope_dbus_impl_on_scope_results_invalidated_unity_abstract_scope_results_invalidated_internal, self, 0);
	self->priv->_scope_results_invalidated_id = _tmp24_;
	_g_object_unref0 (_tmp16_);
	_g_object_unref0 (categories);
	_g_object_unref0 (filters);
}


static void
unity_internal_default_scope_dbus_impl_real_unexport (UnityInternalScopeDBusImpl* base)
{
	UnityInternalDefaultScopeDBusImpl * self;
	gulong _tmp0_;
	guint _tmp3_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_tmp0_ = self->priv->_scope_results_invalidated_id;
	if (_tmp0_ != ((gulong) 0)) {
		UnityAbstractScope* _tmp1_;
		gulong _tmp2_;
		_tmp1_ = self->priv->_owner;
		_tmp2_ = self->priv->_scope_results_invalidated_id;
		g_signal_handler_disconnect ((GObject*) _tmp1_, _tmp2_);
	}
	_tmp3_ = self->priv->_dbus_id;
	if (_tmp3_ != ((guint) 0)) {
		GDBusConnection* _tmp4_;
		guint _tmp5_;
		_tmp4_ = self->priv->_dbus_connection;
		_tmp5_ = self->priv->_dbus_id;
		g_dbus_connection_unregister_object (_tmp4_, _tmp5_);
		self->priv->_dbus_id = (guint) 0;
		_g_object_unref0 (self->priv->_dbus_connection);
		self->priv->_dbus_connection = NULL;
	}
}


static gboolean
__lambda41_ (UnityInternalDefaultScopeDBusImpl* self)
{
	gboolean result = FALSE;
	g_signal_emit (self, unity_internal_default_scope_dbus_impl_signals[UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_ON_UNEXPORT_TIMEOUT_REACHED_SIGNAL], 0);
	self->priv->_unexport_timeout_source_id = (guint) 0;
	result = FALSE;
	return result;
}


static gboolean
___lambda41__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda41_ ((UnityInternalDefaultScopeDBusImpl*) self);
	return result;
}


void
unity_internal_default_scope_dbus_impl_start_unexport_timer (UnityInternalDefaultScopeDBusImpl* self)
{
	guint _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->_unexport_timeout_source_id;
	if (_tmp0_ != ((guint) 0)) {
		guint _tmp1_;
		_tmp1_ = self->priv->_unexport_timeout_source_id;
		g_source_remove (_tmp1_);
	}
	self->priv->_unexport_timeout_source_id = g_timeout_add_seconds_full (G_PRIORITY_DEFAULT_IDLE, (guint) 30, ___lambda41__gsource_func, g_object_ref (self), g_object_unref);
}


static gboolean
___lambda40_ (UnityInternalDefaultScopeDBusImpl* self)
{
	gboolean result = FALSE;
	GVariant* invalidated = NULL;
	GVariantType* _tmp0_;
	GVariantType* _tmp1_;
	GVariant** _tmp2_;
	GVariant** _tmp3_;
	gint _tmp3__length1;
	GVariant* _tmp4_;
	GVariant* _tmp5_;
	GError * _inner_error_ = NULL;
	_tmp0_ = g_variant_type_new ("s");
	_tmp1_ = _tmp0_;
	_tmp2_ = g_new0 (GVariant*, 0 + 1);
	_tmp3_ = _tmp2_;
	_tmp3__length1 = 0;
	_tmp4_ = g_variant_new_array (_tmp1_, _tmp3_, 0);
	g_variant_ref_sink (_tmp4_);
	_tmp5_ = _tmp4_;
	_tmp3_ = (_vala_array_free (_tmp3_, _tmp3__length1, (GDestroyNotify) g_variant_unref), NULL);
	_g_variant_type_free0 (_tmp1_);
	invalidated = _tmp5_;
	{
		GDBusConnection* _tmp6_;
		const gchar* _tmp7_;
		GVariantBuilder* _tmp8_;
		GVariant* _tmp9_;
		GVariant* _tmp10_;
		_tmp6_ = self->priv->_dbus_connection;
		_tmp7_ = self->priv->_dbus_name;
		_tmp8_ = self->priv->changed_props;
		_tmp9_ = g_variant_new ("(sa{sv}@as)", UNITY_PROTOCOL_SCOPE_SERVICE_INTERFACE_NAME, _tmp8_, invalidated, NULL);
		g_variant_ref_sink (_tmp9_);
		_tmp10_ = _tmp9_;
		g_dbus_connection_emit_signal (_tmp6_, NULL, _tmp7_, "org.freedesktop.DBus.Properties", "PropertiesChanged", _tmp10_, &_inner_error_);
		_g_variant_unref0 (_tmp10_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch20_g_error;
		}
	}
	goto __finally20;
	__catch20_g_error:
	{
		GError* err = NULL;
		GError* _tmp11_;
		const gchar* _tmp12_;
		err = _inner_error_;
		_inner_error_ = NULL;
		_tmp11_ = err;
		_tmp12_ = _tmp11_->message;
		g_warning ("unity-scope-dbus-impl.vala:227: %s", _tmp12_);
		_g_error_free0 (err);
	}
	__finally20:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		gboolean _tmp13_ = FALSE;
		_g_variant_unref0 (invalidated);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return _tmp13_;
	}
	_g_variant_builder_unref0 (self->priv->changed_props);
	self->priv->changed_props = NULL;
	result = FALSE;
	_g_variant_unref0 (invalidated);
	return result;
}


static gboolean
____lambda40__gsource_func (gpointer self)
{
	gboolean result;
	result = ___lambda40_ ((UnityInternalDefaultScopeDBusImpl*) self);
	return result;
}


static void
unity_internal_default_scope_dbus_impl_real_queue_property_notification (UnityInternalScopeDBusImpl* base,
                                                                         const gchar* prop_name,
                                                                         GVariant* prop_value)
{
	UnityInternalDefaultScopeDBusImpl * self;
	guint _tmp0_;
	gboolean schedule_emit = FALSE;
	GVariantBuilder* _tmp1_;
	GVariantBuilder* _tmp2_;
	GVariantBuilder* _tmp6_;
	gboolean _tmp7_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	g_return_if_fail (prop_name != NULL);
	g_return_if_fail (prop_value != NULL);
	_tmp0_ = self->priv->_dbus_id;
	if (_tmp0_ == ((guint) 0)) {
		return;
	}
	_tmp1_ = self->priv->changed_props;
	schedule_emit = _tmp1_ == NULL;
	_tmp2_ = self->priv->changed_props;
	if (_tmp2_ == NULL) {
		GVariantType* _tmp3_;
		GVariantType* _tmp4_;
		GVariantBuilder* _tmp5_;
		_tmp3_ = g_variant_type_new ("a{sv}");
		_tmp4_ = _tmp3_;
		_tmp5_ = g_variant_builder_new (_tmp4_);
		_g_variant_builder_unref0 (self->priv->changed_props);
		self->priv->changed_props = _tmp5_;
		_g_variant_type_free0 (_tmp4_);
	}
	_tmp6_ = self->priv->changed_props;
	g_variant_builder_add (_tmp6_, "{sv}", prop_name, prop_value, NULL);
	_tmp7_ = schedule_emit;
	if (_tmp7_) {
		g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ____lambda40__gsource_func, g_object_ref (self), g_object_unref);
	}
}


void
unity_internal_default_scope_dbus_impl_set_categories (UnityInternalDefaultScopeDBusImpl* self,
                                                       GList* categories)
{
	gboolean categories_model_empty = FALSE;
	DeeSerializableModel* _tmp0_;
	DeeSerializableModel* _tmp1_;
	gboolean _tmp2_;
	GVariant* _tmp53_;
	GVariant* _tmp54_;
	GVariant* _tmp55_;
	GVariant* _tmp56_;
	GVariant* _tmp57_;
	g_return_if_fail (self != NULL);
	_tmp0_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
	_tmp1_ = _tmp0_;
	categories_model_empty = dee_model_get_n_rows ((DeeModel*) _tmp1_) == ((guint) 0);
	_tmp2_ = categories_model_empty;
	if (!_tmp2_) {
		GList* cats = NULL;
		guint cats_length = 0U;
		gboolean data_matches = FALSE;
		guint _tmp3_;
		DeeSerializableModel* _tmp4_;
		DeeSerializableModel* _tmp5_;
		DeeModelIter* iter = NULL;
		DeeSerializableModel* _tmp6_;
		DeeSerializableModel* _tmp7_;
		DeeModelIter* _tmp8_;
		DeeModelIter* end_iter = NULL;
		DeeSerializableModel* _tmp9_;
		DeeSerializableModel* _tmp10_;
		DeeModelIter* _tmp11_;
		gboolean _tmp31_;
		cats = categories;
		cats_length = g_list_length (categories);
		_tmp3_ = cats_length;
		_tmp4_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
		_tmp5_ = _tmp4_;
		data_matches = _tmp3_ >= dee_model_get_n_rows ((DeeModel*) _tmp5_);
		_tmp6_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
		_tmp7_ = _tmp6_;
		_tmp8_ = dee_model_get_first_iter ((DeeModel*) _tmp7_);
		iter = _tmp8_;
		_tmp9_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
		_tmp10_ = _tmp9_;
		_tmp11_ = dee_model_get_last_iter ((DeeModel*) _tmp10_);
		end_iter = _tmp11_;
		while (TRUE) {
			gboolean _tmp12_ = FALSE;
			gboolean _tmp13_;
			gboolean _tmp16_;
			GList* _tmp17_;
			gconstpointer _tmp18_;
			const gchar* _tmp19_;
			const gchar* _tmp20_;
			DeeSerializableModel* _tmp21_;
			DeeSerializableModel* _tmp22_;
			DeeModelIter* _tmp23_;
			const gchar* _tmp24_;
			DeeSerializableModel* _tmp25_;
			DeeSerializableModel* _tmp26_;
			DeeModelIter* _tmp27_;
			DeeModelIter* _tmp28_;
			GList* _tmp29_;
			GList* _tmp30_;
			_tmp13_ = data_matches;
			if (_tmp13_) {
				DeeModelIter* _tmp14_;
				DeeModelIter* _tmp15_;
				_tmp14_ = iter;
				_tmp15_ = end_iter;
				_tmp12_ = _tmp14_ != _tmp15_;
			} else {
				_tmp12_ = FALSE;
			}
			if (!_tmp12_) {
				break;
			}
			_tmp16_ = data_matches;
			_tmp17_ = cats;
			_tmp18_ = _tmp17_->data;
			_tmp19_ = unity_category_get_id ((UnityCategory*) _tmp18_);
			_tmp20_ = _tmp19_;
			_tmp21_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
			_tmp22_ = _tmp21_;
			_tmp23_ = iter;
			_tmp24_ = dee_model_get_string ((DeeModel*) _tmp22_, _tmp23_, (guint) 0);
			data_matches = _tmp16_ & (g_strcmp0 (_tmp20_, _tmp24_) == 0);
			_tmp25_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
			_tmp26_ = _tmp25_;
			_tmp27_ = iter;
			_tmp28_ = dee_model_next ((DeeModel*) _tmp26_, _tmp27_);
			iter = _tmp28_;
			_tmp29_ = cats;
			_tmp30_ = _tmp29_->next;
			cats = _tmp30_;
		}
		_tmp31_ = data_matches;
		if (!_tmp31_) {
			g_warning ("unity-scope-dbus-impl.vala:257: Categories can only be added, ignoring" \
" request");
			return;
		} else {
			GList* _tmp32_;
			_tmp32_ = cats;
			categories = _tmp32_;
		}
	}
	{
		GList* category_collection = NULL;
		GList* category_it = NULL;
		category_collection = categories;
		for (category_it = category_collection; category_it != NULL; category_it = category_it->next) {
			UnityCategory* category = NULL;
			category = (UnityCategory*) category_it->data;
			{
				gchar* icon_hint = NULL;
				UnityCategory* _tmp33_;
				GIcon* _tmp34_;
				GIcon* _tmp35_;
				gchar* _tmp36_;
				DeeSerializableModel* _tmp37_;
				DeeSerializableModel* _tmp38_;
				UnityCategory* _tmp39_;
				const gchar* _tmp40_;
				const gchar* _tmp41_;
				UnityCategory* _tmp42_;
				const gchar* _tmp43_;
				const gchar* _tmp44_;
				const gchar* _tmp45_;
				UnityCategory* _tmp46_;
				const gchar* _tmp47_;
				const gchar* _tmp48_;
				UnityCategory* _tmp49_;
				GHashTable* _tmp50_;
				GVariant* _tmp51_;
				GVariant* _tmp52_;
				_tmp33_ = category;
				_tmp34_ = unity_category_get_icon_hint (_tmp33_);
				_tmp35_ = _tmp34_;
				_tmp36_ = unity_internal_utils_icon_to_string (_tmp35_);
				icon_hint = _tmp36_;
				_tmp37_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
				_tmp38_ = _tmp37_;
				_tmp39_ = category;
				_tmp40_ = unity_category_get_id (_tmp39_);
				_tmp41_ = _tmp40_;
				_tmp42_ = category;
				_tmp43_ = unity_category_get_name (_tmp42_);
				_tmp44_ = _tmp43_;
				_tmp45_ = icon_hint;
				_tmp46_ = category;
				_tmp47_ = unity_category_get_renderer (_tmp46_);
				_tmp48_ = _tmp47_;
				_tmp49_ = category;
				_tmp50_ = unity_category_get_hints (_tmp49_);
				_tmp51_ = unity_internal_utils_hash_table_to_asv (_tmp50_);
				_tmp52_ = _tmp51_;
				dee_model_append ((DeeModel*) _tmp38_, _tmp41_, _tmp44_, _tmp45_, _tmp48_, _tmp52_, NULL);
				_g_variant_unref0 (_tmp52_);
				_g_free0 (icon_hint);
			}
		}
	}
	_tmp53_ = unity_protocol_scope_service_get_categories ((UnityProtocolScopeService*) self);
	_tmp54_ = _tmp53_;
	_tmp55_ = _tmp54_;
	_tmp56_ = g_variant_new_variant (_tmp55_);
	g_variant_ref_sink (_tmp56_);
	_tmp57_ = _tmp56_;
	unity_internal_scope_dbus_impl_queue_property_notification ((UnityInternalScopeDBusImpl*) self, "Categories", _tmp57_);
	_g_variant_unref0 (_tmp57_);
	_g_variant_unref0 (_tmp55_);
}


static void
_unity_internal_default_scope_dbus_impl_on_filter_option_changed_unity_filter_changed (UnityFilter* _sender,
                                                                                       gpointer self)
{
	unity_internal_default_scope_dbus_impl_on_filter_option_changed ((UnityInternalDefaultScopeDBusImpl*) self, _sender);
}


void
unity_internal_default_scope_dbus_impl_set_filters (UnityInternalDefaultScopeDBusImpl* self,
                                                    GList* filters)
{
	DeeSerializableModel* _tmp0_;
	DeeSerializableModel* _tmp1_;
	GVariant* data[8] = {0};
	g_return_if_fail (self != NULL);
	_tmp0_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self);
	_tmp1_ = _tmp0_;
	dee_model_clear ((DeeModel*) _tmp1_);
	{
		GList* filter_collection = NULL;
		GList* filter_it = NULL;
		filter_collection = filters;
		for (filter_it = filter_collection; filter_it != NULL; filter_it = filter_it->next) {
			UnityFilter* filter = NULL;
			filter = (UnityFilter*) filter_it->data;
			{
				UnityFilter* _tmp2_;
				_tmp2_ = filter;
				g_signal_connect_object (_tmp2_, "changed", (GCallback) _unity_internal_default_scope_dbus_impl_on_filter_option_changed_unity_filter_changed, self, 0);
			}
		}
	}
	{
		GList* filter_collection = NULL;
		GList* filter_it = NULL;
		filter_collection = filters;
		for (filter_it = filter_collection; filter_it != NULL; filter_it = filter_it->next) {
			UnityFilter* filter = NULL;
			filter = (UnityFilter*) filter_it->data;
			{
				GVariant* serialized_filter = NULL;
				UnityFilter* _tmp3_;
				GVariant* _tmp4_;
				DeeSerializableModel* _tmp14_;
				DeeSerializableModel* _tmp15_;
				_tmp3_ = filter;
				_tmp4_ = dee_serializable_serialize ((DeeSerializable*) _tmp3_);
				serialized_filter = _tmp4_;
				{
					gsize i = 0UL;
					i = (gsize) 0;
					{
						gboolean _tmp5_ = FALSE;
						_tmp5_ = TRUE;
						while (TRUE) {
							gsize _tmp7_;
							GVariant* _tmp8_;
							gsize _tmp9_;
							GVariant* _tmp10_;
							gsize _tmp11_;
							GVariant* _tmp12_;
							GVariant* _tmp13_;
							if (!_tmp5_) {
								gsize _tmp6_;
								_tmp6_ = i;
								i = _tmp6_ + 1;
							}
							_tmp5_ = FALSE;
							_tmp7_ = i;
							_tmp8_ = serialized_filter;
							if (!(_tmp7_ < g_variant_n_children (_tmp8_))) {
								break;
							}
							_tmp9_ = i;
							_tmp10_ = serialized_filter;
							_tmp11_ = i;
							_tmp12_ = g_variant_get_child_value (_tmp10_, _tmp11_);
							_g_variant_unref0 (data[_tmp9_]);
							data[_tmp9_] = _tmp12_;
							_tmp13_ = data[_tmp9_];
						}
					}
				}
				_tmp14_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self);
				_tmp15_ = _tmp14_;
				dee_model_append_row ((DeeModel*) _tmp15_, data);
				_g_variant_unref0 (serialized_filter);
			}
		}
	}
	_vala_array_destroy (data, 8, (GDestroyNotify) g_variant_unref);
}


static void
unity_internal_default_scope_dbus_impl_on_filter_option_changed (UnityInternalDefaultScopeDBusImpl* self,
                                                                 UnityFilter* filter)
{
	gboolean found_iter = FALSE;
	DeeModelIter* iter = NULL;
	DeeSerializableModel* _tmp0_;
	DeeSerializableModel* _tmp1_;
	DeeModelIter* _tmp2_;
	gboolean _tmp41_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (filter != NULL);
	found_iter = FALSE;
	_tmp0_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self);
	_tmp1_ = _tmp0_;
	_tmp2_ = dee_model_get_first_iter ((DeeModel*) _tmp1_);
	iter = _tmp2_;
	while (TRUE) {
		DeeModelIter* _tmp3_;
		DeeSerializableModel* _tmp4_;
		DeeSerializableModel* _tmp5_;
		DeeModelIter* _tmp6_;
		DeeSerializableModel* _tmp7_;
		DeeSerializableModel* _tmp8_;
		DeeModelIter* _tmp9_;
		const gchar* _tmp10_;
		const gchar* _tmp11_;
		const gchar* _tmp12_;
		DeeSerializableModel* _tmp37_;
		DeeSerializableModel* _tmp38_;
		DeeModelIter* _tmp39_;
		DeeModelIter* _tmp40_;
		_tmp3_ = iter;
		_tmp4_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self);
		_tmp5_ = _tmp4_;
		_tmp6_ = dee_model_get_last_iter ((DeeModel*) _tmp5_);
		if (!(_tmp3_ != _tmp6_)) {
			break;
		}
		_tmp7_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self);
		_tmp8_ = _tmp7_;
		_tmp9_ = iter;
		_tmp10_ = dee_model_get_string ((DeeModel*) _tmp8_, _tmp9_, (guint) UNITY_INTERNAL_FILTER_COLUMN_ID);
		_tmp11_ = unity_filter_get_id (filter);
		_tmp12_ = _tmp11_;
		if (g_strcmp0 (_tmp10_, _tmp12_) == 0) {
			gchar* icon_hint = NULL;
			GIcon* _tmp13_;
			GIcon* _tmp14_;
			gchar* _tmp15_;
			DeeSerializableModel* _tmp16_;
			DeeSerializableModel* _tmp17_;
			DeeModelIter* _tmp18_;
			const gchar* _tmp19_;
			const gchar* _tmp20_;
			const gchar* _tmp21_;
			const gchar* _tmp22_;
			const gchar* _tmp23_;
			UnityFilterRenderer _tmp24_;
			UnityFilterRenderer _tmp25_;
			const gchar* _tmp26_;
			GHashTable* _tmp27_;
			GHashTable* _tmp28_;
			GVariant* _tmp29_;
			GVariant* _tmp30_;
			gboolean _tmp31_;
			gboolean _tmp32_;
			gboolean _tmp33_;
			gboolean _tmp34_;
			gboolean _tmp35_;
			gboolean _tmp36_;
			_tmp13_ = unity_filter_get_icon_hint (filter);
			_tmp14_ = _tmp13_;
			_tmp15_ = unity_internal_utils_icon_to_string (_tmp14_);
			icon_hint = _tmp15_;
			_tmp16_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self);
			_tmp17_ = _tmp16_;
			_tmp18_ = iter;
			_tmp19_ = unity_filter_get_id (filter);
			_tmp20_ = _tmp19_;
			_tmp21_ = unity_filter_get_display_name (filter);
			_tmp22_ = _tmp21_;
			_tmp23_ = icon_hint;
			_tmp24_ = unity_filter_get_renderer (filter);
			_tmp25_ = _tmp24_;
			_tmp26_ = unity_filter_renderer_to_string (_tmp25_);
			_tmp27_ = unity_filter_get_hints (filter);
			_tmp28_ = _tmp27_;
			_tmp29_ = unity_internal_utils_hash_table_to_asv (_tmp28_);
			_tmp30_ = _tmp29_;
			_tmp31_ = unity_filter_get_visible (filter);
			_tmp32_ = _tmp31_;
			_tmp33_ = unity_filter_get_collapsed (filter);
			_tmp34_ = _tmp33_;
			_tmp35_ = unity_filter_get_filtering (filter);
			_tmp36_ = _tmp35_;
			dee_model_set ((DeeModel*) _tmp17_, _tmp18_, _tmp20_, _tmp22_, _tmp23_, _tmp26_, _tmp30_, _tmp32_, _tmp34_, _tmp36_, NULL);
			_g_variant_unref0 (_tmp30_);
			_g_hash_table_unref0 (_tmp28_);
			found_iter = TRUE;
			_g_free0 (icon_hint);
		}
		_tmp37_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self);
		_tmp38_ = _tmp37_;
		_tmp39_ = iter;
		_tmp40_ = dee_model_next ((DeeModel*) _tmp38_, _tmp39_);
		iter = _tmp40_;
	}
	_tmp41_ = found_iter;
	if (_tmp41_) {
		g_object_notify ((GObject*) self, "filters");
	}
}


static void
unity_internal_default_scope_dbus_impl_on_scope_results_invalidated (UnityInternalDefaultScopeDBusImpl* self,
                                                                     UnitySearchType search_type)
{
	UnityProtocolChannelType _tmp0_ = 0;
	UnityProtocolChannelType channel_type = 0;
	GHashTable* _tmp1_;
	GList* _tmp2_;
	UnityProtocolChannelType _tmp7_;
	g_return_if_fail (self != NULL);
	if (search_type == UNITY_SEARCH_TYPE_DEFAULT) {
		_tmp0_ = UNITY_PROTOCOL_CHANNEL_TYPE_DEFAULT;
	} else {
		_tmp0_ = UNITY_PROTOCOL_CHANNEL_TYPE_GLOBAL;
	}
	channel_type = _tmp0_;
	_tmp1_ = self->priv->_channels;
	_tmp2_ = g_hash_table_get_values (_tmp1_);
	{
		GList* channel_collection = NULL;
		GList* channel_it = NULL;
		channel_collection = _tmp2_;
		for (channel_it = channel_collection; channel_it != NULL; channel_it = channel_it->next) {
			UnityInternalScopeChannel* channel = NULL;
			channel = (UnityInternalScopeChannel*) channel_it->data;
			{
				UnityInternalScopeChannel* _tmp3_;
				UnityProtocolChannelType _tmp4_;
				UnityProtocolChannelType _tmp5_;
				_tmp3_ = channel;
				_tmp4_ = _tmp3_->channel_type;
				_tmp5_ = channel_type;
				if (_tmp4_ == _tmp5_) {
					UnityInternalScopeChannel* _tmp6_;
					_tmp6_ = channel;
					_g_object_unref0 (_tmp6_->last_search);
					_tmp6_->last_search = NULL;
				}
			}
		}
		(channel_collection == NULL) ? NULL : (channel_collection = (g_list_free (channel_collection), NULL));
	}
	_tmp7_ = channel_type;
	g_signal_emit_by_name ((UnityProtocolScopeService*) self, "results-invalidated", (guint) _tmp7_);
}


static Block11Data*
block11_data_ref (Block11Data* _data11_)
{
	g_atomic_int_inc (&_data11_->_ref_count_);
	return _data11_;
}


static void
block11_data_unref (void * _userdata_)
{
	Block11Data* _data11_;
	_data11_ = (Block11Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data11_->_ref_count_)) {
		UnityInternalDefaultScopeDBusImpl* self;
		self = _data11_->self;
		_g_hash_table_unref0 (_data11_->metadata_hints);
		_g_object_unref0 (self);
		g_slice_free (Block11Data, _data11_);
	}
}


static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static void
_g_variant_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_variant_unref (var), NULL));
}


static gpointer
_g_variant_ref0 (gpointer self)
{
	return self ? g_variant_ref (self) : NULL;
}


static void
__lambda42_ (Block11Data* _data11_,
             const gchar* k,
             GVariant* v)
{
	UnityInternalDefaultScopeDBusImpl* self;
	GHashTable* _tmp0_;
	gchar* _tmp1_;
	GVariant* _tmp2_;
	self = _data11_->self;
	g_return_if_fail (k != NULL);
	g_return_if_fail (v != NULL);
	_tmp0_ = _data11_->metadata_hints;
	_tmp1_ = g_strdup (k);
	_tmp2_ = _g_variant_ref0 (v);
	g_hash_table_insert (_tmp0_, _tmp1_, _tmp2_);
}


static void
___lambda42__gh_func (gconstpointer key,
                      gconstpointer value,
                      gpointer self)
{
	__lambda42_ (self, (const gchar*) key, (GVariant*) value);
}


static UnitySearchMetadata*
unity_internal_default_scope_dbus_impl_create_search_metadata (UnityInternalDefaultScopeDBusImpl* self,
                                                               GHashTable* hints)
{
	UnitySearchMetadata* result = NULL;
	Block11Data* _data11_;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	GHashTable* _tmp7_;
	UnitySearchMetadata* _tmp8_;
	g_return_val_if_fail (self != NULL, NULL);
	g_return_val_if_fail (hints != NULL, NULL);
	_data11_ = g_slice_new0 (Block11Data);
	_data11_->_ref_count_ = 1;
	_data11_->self = g_object_ref (self);
	_tmp0_ = g_str_hash;
	_tmp1_ = g_str_equal;
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, _g_variant_unref0_);
	_data11_->metadata_hints = _tmp2_;
	g_hash_table_foreach (hints, ___lambda42__gh_func, _data11_);
	if (!g_hash_table_contains (hints, "locale")) {
		GHashTable* _tmp3_;
		gchar* _tmp4_;
		const gchar* _tmp5_;
		GVariant* _tmp6_;
		_tmp3_ = _data11_->metadata_hints;
		_tmp4_ = g_strdup ("locale");
		_tmp5_ = unity_internal_default_scope_dbus_impl_default_locale;
		_tmp6_ = g_variant_new_string (_tmp5_);
		g_variant_ref_sink (_tmp6_);
		g_hash_table_insert (_tmp3_, _tmp4_, _tmp6_);
	}
	_tmp7_ = _data11_->metadata_hints;
	_tmp8_ = unity_search_metadata_create (_tmp7_);
	result = _tmp8_;
	block11_data_unref (_data11_);
	_data11_ = NULL;
	return result;
}


static gboolean
unity_internal_default_scope_dbus_impl_timeout_reached (UnityInternalDefaultScopeDBusImpl* self)
{
	gboolean result = FALSE;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_query_happened;
	if (_tmp0_) {
		self->priv->_query_happened = FALSE;
		result = TRUE;
		return result;
	} else {
		gint _tmp1_;
		_tmp1_ = unity_internal_PROCESS_TIMEOUT_SEC;
		if (_tmp1_ > 0) {
			self->priv->_inactivity_timeout_source_id = (guint) 0;
			g_signal_emit (self, unity_internal_default_scope_dbus_impl_signals[UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_ON_TIMEOUT_REACHED_SIGNAL], 0);
			result = FALSE;
			return result;
		}
	}
	self->priv->_inactivity_timeout_source_id = (guint) 0;
	result = FALSE;
	return result;
}


static void
unity_internal_default_scope_dbus_impl_real_activate_data_free (gpointer _data)
{
	UnityInternalDefaultScopeDbusImplActivateData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_hash_table_unref0 (_data_->hints);
	_g_object_unref0 (_data_->cancellable);
	unity_protocol_activation_reply_raw_destroy (&_data_->result);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalDefaultScopeDbusImplActivateData, _data_);
}


static void
unity_internal_default_scope_dbus_impl_real_activate_async_ready_wrapper (GObject *source_object,
                                                                          GAsyncResult *res,
                                                                          void *user_data)
{
	UnityInternalDefaultScopeDbusImplActivateData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static gpointer
_g_hash_table_ref0 (gpointer self)
{
	return self ? g_hash_table_ref (self) : NULL;
}


static void
unity_internal_default_scope_dbus_impl_real_activate (UnityProtocolScopeService* base,
                                                      const gchar* channel_id,
                                                      GVariant** result_arr,
                                                      int result_arr_length1,
                                                      guint action_type,
                                                      GHashTable* hints,
                                                      GCancellable* cancellable,
                                                      GAsyncReadyCallback _callback_,
                                                      gpointer _user_data_)
{
	UnityInternalDefaultScopeDBusImpl * self;
	UnityInternalDefaultScopeDbusImplActivateData* _data_;
	UnityInternalDefaultScopeDBusImpl* _tmp0_;
	gchar* _tmp1_;
	GHashTable* _tmp2_;
	GCancellable* _tmp3_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_data_ = g_slice_new0 (UnityInternalDefaultScopeDbusImplActivateData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_internal_default_scope_dbus_impl_real_activate_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_default_scope_dbus_impl_real_activate_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_data_->result_arr = result_arr;
	_data_->result_arr_length1 = result_arr_length1;
	_data_->action_type = action_type;
	_tmp2_ = _g_hash_table_ref0 (hints);
	_g_hash_table_unref0 (_data_->hints);
	_data_->hints = _tmp2_;
	_tmp3_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp3_;
	unity_internal_default_scope_dbus_impl_real_activate_co (_data_);
}


static void
unity_internal_default_scope_dbus_impl_real_activate_finish (UnityProtocolScopeService* base,
                                                             GAsyncResult* _res_,
                                                             UnityProtocolActivationReplyRaw* result,
                                                             GError** error)
{
	UnityInternalDefaultScopeDbusImplActivateData* _data_;
	UnityProtocolActivationReplyRaw _tmp0_ = {0};
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
	unity_protocol_activation_reply_raw_copy (&_data_->result, &_tmp0_);
	*result = _tmp0_;
}


static GHashTable*
_variant_get32 (GVariant* value)
{
	GHashTable* _tmp26_;
	GVariantIter _tmp27_;
	GVariant* _tmp28_;
	GVariant* _tmp29_;
	_tmp26_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
	g_variant_iter_init (&_tmp27_, value);
	while (g_variant_iter_loop (&_tmp27_, "{?*}", &_tmp28_, &_tmp29_)) {
		g_hash_table_insert (_tmp26_, g_variant_dup_string (_tmp28_, NULL), g_variant_get_variant (_tmp29_));
	}
	return _tmp26_;
}


static void
unity_internal_default_scope_dbus_impl_activate_ready (GObject* source_object,
                                                       GAsyncResult* _res_,
                                                       gpointer _user_data_)
{
	UnityInternalDefaultScopeDbusImplActivateData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_internal_default_scope_dbus_impl_real_activate_co (_data_);
}


static GVariant*
_variant_new33 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static gchar*
string_strip (const gchar* self)
{
	gchar* result = NULL;
	gchar* _result_ = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = g_strdup (self);
	_result_ = _tmp0_;
	_tmp1_ = _result_;
	g_strstrip (_tmp1_);
	result = _result_;
	return result;
}


static gboolean
unity_internal_default_scope_dbus_impl_real_activate_co (UnityInternalDefaultScopeDbusImplActivateData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		case 2:
		goto _state_2;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	memset (&_data_->reply, 0, sizeof (UnityProtocolActivationReplyRaw));
	_data_->response = NULL;
	_data_->preview = NULL;
	if (_data_->result_arr_length1 != G_N_ELEMENTS (UNITY_INTERNAL_RESULTS_SCHEMA)) {
		_data_->_tmp0_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, "Invalid result array");
		_data_->_inner_error_ = _data_->_tmp0_;
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			_g_object_unref0 (_data_->preview);
			_g_object_unref0 (_data_->response);
			unity_protocol_activation_reply_raw_destroy (&_data_->reply);
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_g_object_unref0 (_data_->preview);
			_g_object_unref0 (_data_->response);
			unity_protocol_activation_reply_raw_destroy (&_data_->reply);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->self->priv->_query_happened = TRUE;
	memset (&_data_->scope_result, 0, sizeof (UnityScopeResult));
	_data_->_tmp1_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_URI];
	_data_->_tmp2_ = g_variant_get_string (_data_->_tmp1_, NULL);
	_data_->_tmp3_ = g_strdup (_data_->_tmp2_);
	_g_free0 (_data_->scope_result.uri);
	_data_->scope_result.uri = _data_->_tmp3_;
	_data_->_tmp4_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_ICON_HINT];
	_data_->_tmp5_ = g_variant_get_string (_data_->_tmp4_, NULL);
	_data_->_tmp6_ = g_strdup (_data_->_tmp5_);
	_g_free0 (_data_->scope_result.icon_hint);
	_data_->scope_result.icon_hint = _data_->_tmp6_;
	_data_->_tmp7_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_CATEGORY];
	_data_->scope_result.category = (guint) g_variant_get_uint32 (_data_->_tmp7_);
	_data_->_tmp8_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_RESULT_TYPE];
	_data_->scope_result.result_type = (UnityResultType) g_variant_get_uint32 (_data_->_tmp8_);
	_data_->_tmp9_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_MIMETYPE];
	_data_->_tmp10_ = g_variant_get_string (_data_->_tmp9_, NULL);
	_data_->_tmp11_ = g_strdup (_data_->_tmp10_);
	_g_free0 (_data_->scope_result.mimetype);
	_data_->scope_result.mimetype = _data_->_tmp11_;
	_data_->_tmp12_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_TITLE];
	_data_->_tmp13_ = g_variant_get_string (_data_->_tmp12_, NULL);
	_data_->_tmp14_ = g_strdup (_data_->_tmp13_);
	_g_free0 (_data_->scope_result.title);
	_data_->scope_result.title = _data_->_tmp14_;
	_data_->_tmp15_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_COMMENT];
	_data_->_tmp16_ = g_variant_get_string (_data_->_tmp15_, NULL);
	_data_->_tmp17_ = g_strdup (_data_->_tmp16_);
	_g_free0 (_data_->scope_result.comment);
	_data_->scope_result.comment = _data_->_tmp17_;
	_data_->_tmp18_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_DND_URI];
	_data_->_tmp19_ = g_variant_get_string (_data_->_tmp18_, NULL);
	_data_->_tmp20_ = g_strdup (_data_->_tmp19_);
	_g_free0 (_data_->scope_result.dnd_uri);
	_data_->scope_result.dnd_uri = _data_->_tmp20_;
	_data_->_tmp21_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_METADATA];
	_data_->_tmp22_ = g_variant_get_type (_data_->_tmp21_);
	_data_->_tmp23_ = G_VARIANT_TYPE_VARDICT;
	if (g_variant_type_equal (_data_->_tmp22_, _data_->_tmp23_)) {
		_data_->_tmp24_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_METADATA];
		_data_->_tmp25_ = _variant_get32 (_data_->_tmp24_);
		_g_hash_table_unref0 (_data_->scope_result.metadata);
		_data_->scope_result.metadata = _data_->_tmp25_;
	}
	_data_->action = (UnityProtocolActionType) _data_->action_type;
	_data_->_tmp30_ = unity_internal_default_scope_dbus_impl_create_search_metadata (_data_->self, _data_->hints);
	_data_->metadata = _data_->_tmp30_;
	_data_->_tmp31_ = _data_->action;
	switch (_data_->_tmp31_) {
		case UNITY_PROTOCOL_ACTION_TYPE_ACTIVATE_RESULT:
		{
			_data_->_tmp32_ = _data_->self->priv->_owner;
			_data_->_tmp33_ = _data_->scope_result;
			_data_->_tmp34_ = _data_->metadata;
			_data_->_tmp35_ = unity_abstract_scope_activate (_data_->_tmp32_, &_data_->_tmp33_, _data_->_tmp34_, NULL);
			_g_object_unref0 (_data_->response);
			_data_->response = _data_->_tmp35_;
			break;
		}
		case UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_RESULT:
		{
			_data_->_tmp36_ = _data_->scope_result;
			_data_->_tmp37_ = _data_->metadata;
			_data_->_state_ = 1;
			unity_internal_default_scope_dbus_impl_preview_internal (_data_->self, &_data_->_tmp36_, _data_->_tmp37_, unity_internal_default_scope_dbus_impl_activate_ready, _data_);
			return FALSE;
			_state_1:
			_data_->_tmp38_ = unity_internal_default_scope_dbus_impl_preview_internal_finish (_data_->self, _data_->_res_);
			_g_object_unref0 (_data_->preview);
			_data_->preview = _data_->_tmp38_;
			break;
		}
		case UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_ACTION:
		{
			_data_->_tmp39_ = g_hash_table_lookup (_data_->hints, UNITY_INTERNAL_ACTIVATE_PREVIEW_ACTION_HINT);
			_data_->_tmp40_ = _g_variant_ref0 ((GVariant*) _data_->_tmp39_);
			_data_->act_id_v = _data_->_tmp40_;
			_data_->_tmp42_ = _data_->act_id_v;
			if (_data_->_tmp42_ == NULL) {
				_data_->_tmp41_ = TRUE;
			} else {
				_data_->_tmp43_ = _data_->act_id_v;
				_data_->_tmp44_ = g_variant_get_type (_data_->_tmp43_);
				_data_->_tmp45_ = G_VARIANT_TYPE_STRING;
				_data_->_tmp41_ = !g_variant_type_equal (_data_->_tmp44_, _data_->_tmp45_);
			}
			if (_data_->_tmp41_) {
				_data_->_tmp46_ = g_strdup_printf ("Invoking preview action requires '%s' hint", UNITY_INTERNAL_ACTIVATE_PREVIEW_ACTION_HINT);
				_data_->_tmp47_ = _data_->_tmp46_;
				_data_->_tmp48_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, _data_->_tmp47_);
				_data_->_tmp49_ = _data_->_tmp48_;
				_g_free0 (_data_->_tmp47_);
				_data_->_inner_error_ = _data_->_tmp49_;
				if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
					g_task_return_error (_data_->_async_result, _data_->_inner_error_);
					_g_variant_unref0 (_data_->act_id_v);
					_g_object_unref0 (_data_->metadata);
					unity_scope_result_destroy (&_data_->scope_result);
					_g_object_unref0 (_data_->preview);
					_g_object_unref0 (_data_->response);
					unity_protocol_activation_reply_raw_destroy (&_data_->reply);
					g_object_unref (_data_->_async_result);
					return FALSE;
				} else {
					_g_variant_unref0 (_data_->act_id_v);
					_g_object_unref0 (_data_->metadata);
					unity_scope_result_destroy (&_data_->scope_result);
					_g_object_unref0 (_data_->preview);
					_g_object_unref0 (_data_->response);
					unity_protocol_activation_reply_raw_destroy (&_data_->reply);
					g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
					g_clear_error (&_data_->_inner_error_);
					g_object_unref (_data_->_async_result);
					return FALSE;
				}
			}
			_data_->_tmp50_ = _data_->self->priv->_owner;
			_data_->_tmp51_ = _data_->scope_result;
			_data_->_tmp52_ = _data_->metadata;
			_data_->_tmp53_ = _data_->act_id_v;
			_data_->_tmp54_ = g_variant_get_string (_data_->_tmp53_, NULL);
			_data_->_tmp55_ = unity_abstract_scope_activate (_data_->_tmp50_, &_data_->_tmp51_, _data_->_tmp52_, _data_->_tmp54_);
			_g_object_unref0 (_data_->response);
			_data_->response = _data_->_tmp55_;
			_g_variant_unref0 (_data_->act_id_v);
			break;
		}
		default:
		{
			g_warning ("unity-scope-dbus-impl.vala:424: Unknown activation ActionType: %u", _data_->action_type);
			break;
		}
	}
	_data_->self->priv->_query_happened = TRUE;
	_data_->_tmp57_ = _data_->response;
	if (_data_->_tmp57_ != NULL) {
		_data_->_tmp58_ = _data_->response;
		_data_->_tmp59_ = unity_activation_response_get_handled (_data_->_tmp58_);
		_data_->_tmp60_ = _data_->_tmp59_;
		_data_->_tmp56_ = _data_->_tmp60_ == UNITY_HANDLED_TYPE_SHOW_PREVIEW;
	} else {
		_data_->_tmp56_ = FALSE;
	}
	if (_data_->_tmp56_) {
		_data_->_tmp61_ = _data_->response;
		_data_->_tmp62_ = unity_activation_response_get_preview (_data_->_tmp61_);
		if (_data_->_tmp62_ == NULL) {
			_data_->_tmp63_ = _data_->response;
			_data_->_tmp64_ = unity_activation_response_get_goto_uri (_data_->_tmp63_);
			_data_->_tmp65_ = _data_->_tmp64_;
			_data_->_tmp66_ = g_strdup (_data_->_tmp65_);
			_data_->new_uri = _data_->_tmp66_;
			_data_->_tmp67_ = _data_->new_uri;
			if (_data_->_tmp67_ != NULL) {
				_data_->_tmp68_ = _data_->new_uri;
				_data_->_tmp69_ = _variant_new33 (_data_->_tmp68_);
				_g_variant_unref0 (_data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_URI]);
				_data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_URI] = _data_->_tmp69_;
				_data_->_tmp70_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_URI];
			}
			memset (&_data_->_tmp72_, 0, sizeof (UnityProtocolActivationReplyRaw));
			_data_->_state_ = 2;
			unity_protocol_scope_service_activate ((UnityProtocolScopeService*) _data_->self, _data_->channel_id, _data_->result_arr, _data_->result_arr_length1, (guint) UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_RESULT, _data_->hints, _data_->cancellable, unity_internal_default_scope_dbus_impl_activate_ready, _data_);
			return FALSE;
			_state_2:
			unity_protocol_scope_service_activate_finish ((UnityProtocolScopeService*) _data_->self, _data_->_res_, &_data_->_tmp72_, &_data_->_inner_error_);
			_data_->_tmp71_ = _data_->_tmp72_;
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
				if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
					g_task_return_error (_data_->_async_result, _data_->_inner_error_);
					_g_free0 (_data_->new_uri);
					_g_object_unref0 (_data_->metadata);
					unity_scope_result_destroy (&_data_->scope_result);
					_g_object_unref0 (_data_->preview);
					_g_object_unref0 (_data_->response);
					unity_protocol_activation_reply_raw_destroy (&_data_->reply);
					g_object_unref (_data_->_async_result);
					return FALSE;
				} else {
					_g_free0 (_data_->new_uri);
					_g_object_unref0 (_data_->metadata);
					unity_scope_result_destroy (&_data_->scope_result);
					_g_object_unref0 (_data_->preview);
					_g_object_unref0 (_data_->response);
					unity_protocol_activation_reply_raw_destroy (&_data_->reply);
					g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
					g_clear_error (&_data_->_inner_error_);
					g_object_unref (_data_->_async_result);
					return FALSE;
				}
			}
			_data_->_tmp73_ = _data_->_tmp71_;
			memset (&_data_->_tmp71_, 0, sizeof (UnityProtocolActivationReplyRaw));
			unity_protocol_activation_reply_raw_destroy (&_data_->reply);
			_data_->reply = _data_->_tmp73_;
			_data_->result = _data_->reply;
			unity_protocol_activation_reply_raw_destroy (&_data_->_tmp71_);
			_g_free0 (_data_->new_uri);
			_g_object_unref0 (_data_->metadata);
			unity_scope_result_destroy (&_data_->scope_result);
			_g_object_unref0 (_data_->preview);
			_g_object_unref0 (_data_->response);
			g_task_return_pointer (_data_->_async_result, _data_, NULL);
			if (_data_->_state_ != 0) {
				while (_data_->_task_complete_ != TRUE) {
					g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
				}
			}
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_data_->_tmp74_ = _data_->preview;
			if (_data_->_tmp74_ == NULL) {
				_data_->_tmp75_ = _data_->response;
				_data_->_tmp76_ = unity_activation_response_get_preview (_data_->_tmp75_);
				_data_->_tmp77_ = _g_object_ref0 (_data_->_tmp76_);
				_g_object_unref0 (_data_->preview);
				_data_->preview = _data_->_tmp77_;
			}
		}
	}
	_data_->_tmp78_ = _data_->preview;
	if (_data_->_tmp78_ != NULL) {
		_data_->_tmp79_ = _data_->preview;
		_data_->_tmp80_ = unity_activation_response_new_with_preview (_data_->_tmp79_);
		_g_object_unref0 (_data_->response);
		_data_->response = _data_->_tmp80_;
	}
	_data_->_tmp81_ = _data_->response;
	if (_data_->_tmp81_ == NULL) {
		_data_->_tmp82_ = unity_activation_response_new (UNITY_HANDLED_TYPE_NOT_HANDLED, "");
		_g_object_unref0 (_data_->response);
		_data_->response = _data_->_tmp82_;
	}
	_data_->_tmp83_ = _data_->scope_result;
	_data_->_tmp84_ = _data_->_tmp83_.uri;
	_data_->_tmp85_ = g_strdup (_data_->_tmp84_);
	_g_free0 (_data_->reply.uri);
	_data_->reply.uri = _data_->_tmp85_;
	_data_->_tmp86_ = _data_->response;
	_data_->_tmp87_ = unity_activation_response_get_goto_uri (_data_->_tmp86_);
	_data_->_tmp88_ = _data_->_tmp87_;
	if (_data_->_tmp88_ != NULL) {
		_data_->_tmp89_ = _data_->response;
		_data_->_tmp90_ = unity_activation_response_get_goto_uri (_data_->_tmp89_);
		_data_->_tmp91_ = _data_->_tmp90_;
		_data_->_tmp92_ = string_strip (_data_->_tmp91_);
		_data_->stripped = _data_->_tmp92_;
		_data_->_tmp93_ = _data_->stripped;
		if (g_strcmp0 (_data_->_tmp93_, "") != 0) {
			_data_->_tmp94_ = _data_->stripped;
			_data_->_tmp95_ = g_strdup (_data_->_tmp94_);
			_g_free0 (_data_->reply.uri);
			_data_->reply.uri = _data_->_tmp95_;
		}
		_g_free0 (_data_->stripped);
	}
	_data_->_tmp96_ = _data_->response;
	_data_->_tmp97_ = unity_activation_response_get_handled (_data_->_tmp96_);
	_data_->_tmp98_ = _data_->_tmp97_;
	_data_->reply.handled = (guint) _data_->_tmp98_;
	_data_->_tmp99_ = _data_->response;
	_data_->_tmp100_ = unity_activation_response_get_hints (_data_->_tmp99_);
	_g_hash_table_unref0 (_data_->reply.hints);
	_data_->reply.hints = _data_->_tmp100_;
	if (_data_->cancellable != NULL) {
		g_cancellable_set_error_if_cancelled (_data_->cancellable, &_data_->_inner_error_);
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
				_g_object_unref0 (_data_->metadata);
				unity_scope_result_destroy (&_data_->scope_result);
				_g_object_unref0 (_data_->preview);
				_g_object_unref0 (_data_->response);
				unity_protocol_activation_reply_raw_destroy (&_data_->reply);
				g_object_unref (_data_->_async_result);
				return FALSE;
			} else {
				_g_object_unref0 (_data_->metadata);
				unity_scope_result_destroy (&_data_->scope_result);
				_g_object_unref0 (_data_->preview);
				_g_object_unref0 (_data_->response);
				unity_protocol_activation_reply_raw_destroy (&_data_->reply);
				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
				g_clear_error (&_data_->_inner_error_);
				g_object_unref (_data_->_async_result);
				return FALSE;
			}
		}
	}
	_data_->result = _data_->reply;
	_g_object_unref0 (_data_->metadata);
	unity_scope_result_destroy (&_data_->scope_result);
	_g_object_unref0 (_data_->preview);
	_g_object_unref0 (_data_->response);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_internal_default_scope_dbus_impl_search_internal_data_free (gpointer _data)
{
	UnityInternalDefaultScopeDbusImplSearchInternalData* _data_;
	_data_ = _data;
	_g_free0 (_data_->search_string);
	_g_hash_table_unref0 (_data_->hints);
	_g_object_unref0 (_data_->channel);
	_g_hash_table_unref0 (_data_->result);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalDefaultScopeDbusImplSearchInternalData, _data_);
}


static void
unity_internal_default_scope_dbus_impl_search_internal_async_ready_wrapper (GObject *source_object,
                                                                            GAsyncResult *res,
                                                                            void *user_data)
{
	UnityInternalDefaultScopeDbusImplSearchInternalData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_internal_default_scope_dbus_impl_search_internal (UnityInternalDefaultScopeDBusImpl* self,
                                                        const gchar* search_string,
                                                        GHashTable* hints,
                                                        UnityInternalScopeChannel* channel,
                                                        GAsyncReadyCallback _callback_,
                                                        gpointer _user_data_)
{
	UnityInternalDefaultScopeDbusImplSearchInternalData* _data_;
	UnityInternalDefaultScopeDBusImpl* _tmp0_;
	gchar* _tmp1_;
	GHashTable* _tmp2_;
	UnityInternalScopeChannel* _tmp3_;
	_data_ = g_slice_new0 (UnityInternalDefaultScopeDbusImplSearchInternalData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, unity_internal_default_scope_dbus_impl_search_internal_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_default_scope_dbus_impl_search_internal_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (search_string);
	_g_free0 (_data_->search_string);
	_data_->search_string = _tmp1_;
	_tmp2_ = _g_hash_table_ref0 (hints);
	_g_hash_table_unref0 (_data_->hints);
	_data_->hints = _tmp2_;
	_tmp3_ = _g_object_ref0 (channel);
	_g_object_unref0 (_data_->channel);
	_data_->channel = _tmp3_;
	unity_internal_default_scope_dbus_impl_search_internal_co (_data_);
}


static GHashTable*
unity_internal_default_scope_dbus_impl_search_internal_finish (UnityInternalDefaultScopeDBusImpl* self,
                                                               GAsyncResult* _res_,
                                                               GError** error)
{
	GHashTable* result;
	UnityInternalDefaultScopeDbusImplSearchInternalData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static Block12Data*
block12_data_ref (Block12Data* _data12_)
{
	g_atomic_int_inc (&_data12_->_ref_count_);
	return _data12_;
}


static void
block12_data_unref (void * _userdata_)
{
	Block12Data* _data12_;
	_data12_ = (Block12Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data12_->_ref_count_)) {
		UnityInternalDefaultScopeDBusImpl* self;
		self = _data12_->self;
		_g_object_unref0 (self);
		g_slice_free (Block12Data, _data12_);
	}
}


static void
unity_internal_default_scope_dbus_impl_search_internal_ready (GObject* source_object,
                                                              GAsyncResult* _res_,
                                                              gpointer _user_data_)
{
	UnityInternalDefaultScopeDbusImplSearchInternalData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_internal_default_scope_dbus_impl_search_internal_co (_data_);
}


static Block13Data*
block13_data_ref (Block13Data* _data13_)
{
	g_atomic_int_inc (&_data13_->_ref_count_);
	return _data13_;
}


static void
block13_data_unref (void * _userdata_)
{
	Block13Data* _data13_;
	_data13_ = (Block13Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data13_->_ref_count_)) {
		UnityInternalDefaultScopeDBusImpl* self;
		self = _data13_->_data12_->self;
		block12_data_unref (_data13_->_data12_);
		_data13_->_data12_ = NULL;
		g_slice_free (Block13Data, _data13_);
	}
}


static gboolean
_unity_internal_default_scope_dbus_impl_search_internal_co_gsource_func (gpointer self)
{
	gboolean result;
	result = unity_internal_default_scope_dbus_impl_search_internal_co (self);
	return result;
}


static void
____lambda44_ (Block13Data* _data13_)
{
	Block12Data* _data12_;
	UnityInternalDefaultScopeDBusImpl* self;
	gboolean _tmp0_;
	_data12_ = _data13_->_data12_;
	self = _data12_->self;
	_tmp0_ = unity_internal_default_scope_dbus_impl_measure_requests;
	if (_tmp0_) {
		_data13_->search_end_time = g_get_monotonic_time ();
	}
	g_idle_add_full (G_PRIORITY_DEFAULT, _unity_internal_default_scope_dbus_impl_search_internal_co_gsource_func, _data12_->_async_data_, NULL);
}


static void
_____lambda44__unity_scope_search_base_callback (UnityScopeSearchBase* instance,
                                                 gpointer self)
{
	____lambda44_ (self);
}


static gboolean
unity_internal_default_scope_dbus_impl_search_internal_co (UnityInternalDefaultScopeDbusImplSearchInternalData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		case 2:
		goto _state_2;
		case 3:
		goto _state_3;
		case 4:
		goto _state_4;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_data12_ = g_slice_new0 (Block12Data);
	_data_->_data12_->_ref_count_ = 1;
	_data_->_data12_->self = g_object_ref (_data_->self);
	_data_->_data12_->_async_data_ = _data_;
	_data_->_tmp0_ = g_str_hash;
	_data_->_tmp1_ = g_str_equal;
	_data_->_tmp2_ = g_hash_table_new_full (_data_->_tmp0_, _data_->_tmp1_, _g_free0_, _g_variant_unref0_);
	_data_->_result_ = _data_->_tmp2_;
	_data_->search_type = unity_internal_scope_channel_get_search_type (_data_->channel);
	_data_->_tmp3_ = g_hash_table_lookup (_data_->hints, UNITY_INTERNAL_SEARCH_FILTER_ROW_HINT);
	_data_->filter_row_variant = (GVariant*) _data_->_tmp3_;
	_data_->_tmp4_ = _data_->filter_row_variant;
	if (_data_->_tmp4_ != NULL) {
		_data_->_tmp5_ = _data_->filter_row_variant;
		unity_internal_default_scope_dbus_impl_update_filter_state (_data_->self, _data_->channel, _data_->_tmp5_, &_data_->_inner_error_);
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			if (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR) {
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
				_g_hash_table_unref0 (_data_->_result_);
				block12_data_unref (_data_->_data12_);
				_data_->_data12_ = NULL;
				g_object_unref (_data_->_async_result);
				return FALSE;
			} else {
				_g_hash_table_unref0 (_data_->_result_);
				block12_data_unref (_data_->_data12_);
				_data_->_data12_ = NULL;
				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
				g_clear_error (&_data_->_inner_error_);
				g_object_unref (_data_->_async_result);
				return FALSE;
			}
		}
		_data_->_tmp6_ = _data_->channel->last_search;
		if (_data_->_tmp6_ != NULL) {
			_data_->_tmp7_ = _data_->channel->last_search;
			_data_->_tmp8_ = _data_->_tmp7_->search_context;
			_data_->_tmp9_ = (*_data_->_tmp8_).cancellable;
			unity_cancellable_cancel (_data_->_tmp9_);
		}
		_g_object_unref0 (_data_->channel->last_search);
		_data_->channel->last_search = NULL;
	}
	_data_->_tmp10_ = _data_->self->priv->_owner;
	_data_->_tmp11_ = unity_abstract_scope_normalize_search_query (_data_->_tmp10_, _data_->search_string);
	_data_->normalized_query = _data_->_tmp11_;
	_data_->_tmp12_ = _data_->normalized_query;
	if (_data_->_tmp12_ == NULL) {
		_data_->_tmp13_ = g_strdup (_data_->search_string);
		_g_free0 (_data_->normalized_query);
		_data_->normalized_query = _data_->_tmp13_;
	}
	_data_->_tmp14_ = _data_->channel->last_search;
	_data_->_tmp15_ = _g_object_ref0 (_data_->_tmp14_);
	_data_->last_search = _data_->_tmp15_;
	_data_->_tmp16_ = _data_->last_search;
	if (_data_->_tmp16_ != NULL) {
		_data_->_tmp17_ = _data_->last_search;
		_data_->_tmp18_ = _data_->_tmp17_->search_context;
		_data_->_tmp19_ = (*_data_->_tmp18_).search_query;
		_data_->_tmp20_ = _data_->normalized_query;
		if (g_strcmp0 (_data_->_tmp19_, _data_->_tmp20_) == 0) {
			if (unity_internal_scope_channel_is_search_running (_data_->channel)) {
				_data_->_state_ = 1;
				unity_internal_scope_channel_wait_for_search (_data_->channel, unity_internal_default_scope_dbus_impl_search_internal_ready, _data_);
				return FALSE;
				_state_1:
				unity_internal_scope_channel_wait_for_search_finish (_data_->channel, _data_->_res_);
			}
			_data_->_tmp21_ = _data_->_result_;
			_data_->_tmp22_ = g_strdup (UNITY_INTERNAL_SEARCH_SEQNUM_HINT);
			_data_->_tmp23_ = g_variant_new_uint64 (unity_internal_scope_channel_get_last_seqnum (_data_->channel));
			g_variant_ref_sink (_data_->_tmp23_);
			g_hash_table_insert (_data_->_tmp21_, _data_->_tmp22_, _data_->_tmp23_);
			_data_->result = _data_->_result_;
			_g_object_unref0 (_data_->last_search);
			_g_free0 (_data_->normalized_query);
			block12_data_unref (_data_->_data12_);
			_data_->_data12_ = NULL;
			g_task_return_pointer (_data_->_async_result, _data_, NULL);
			if (_data_->_state_ != 0) {
				while (_data_->_task_complete_ != TRUE) {
					g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
				}
			}
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_data_->_tmp24_ = _data_->last_search;
			_data_->_tmp25_ = _data_->_tmp24_->search_context;
			_data_->_tmp26_ = (*_data_->_tmp25_).cancellable;
			unity_cancellable_cancel (_data_->_tmp26_);
		}
	}
	_data_->_tmp27_ = unity_internal_glib_cancellable_new ();
	_data_->cancellable = _data_->_tmp27_;
	memset (&_data_->search_context, 0, sizeof (UnitySearchContext));
	_data_->_tmp28_ = _data_->normalized_query;
	_data_->_tmp29_ = g_strdup (_data_->_tmp28_);
	_g_free0 (_data_->search_context.search_query);
	_data_->search_context.search_query = _data_->_tmp29_;
	_data_->_tmp30_ = _data_->search_type;
	_data_->search_context.search_type = _data_->_tmp30_;
	_data_->_tmp31_ = _data_->channel->filters;
	_data_->_tmp32_ = _g_object_ref0 (_data_->_tmp31_);
	_g_object_unref0 (_data_->search_context.filter_state);
	_data_->search_context.filter_state = _data_->_tmp32_;
	_data_->_tmp33_ = unity_internal_default_scope_dbus_impl_create_search_metadata (_data_->self, _data_->hints);
	_g_object_unref0 (_data_->search_context.search_metadata);
	_data_->search_context.search_metadata = _data_->_tmp33_;
	_data_->_tmp34_ = _data_->channel->backend_model;
	_data_->_tmp35_ = unity_internal_dee_result_set_new_with_model (_data_->_tmp34_);
	_data_->result_set = _data_->_tmp35_;
	_data_->_tmp36_ = _data_->result_set;
	((UnityResultSet*) _data_->_tmp36_)->ttl = -1;
	_data_->_tmp37_ = _data_->result_set;
	_data_->_tmp38_ = _g_object_ref0 ((UnityResultSet*) _data_->_tmp37_);
	_g_object_unref0 (_data_->search_context.result_set);
	_data_->search_context.result_set = _data_->_tmp38_;
	_data_->_tmp39_ = _data_->cancellable;
	_data_->_tmp40_ = _g_object_ref0 ((UnityCancellable*) _data_->_tmp39_);
	_g_object_unref0 (_data_->search_context.cancellable);
	_data_->search_context.cancellable = _data_->_tmp40_;
	_data_->_tmp41_ = _data_->self->priv->_owner;
	_data_->_tmp42_ = _data_->search_context;
	_data_->_tmp43_ = unity_abstract_scope_create_search_for_query (_data_->_tmp41_, &_data_->_tmp42_);
	_data_->search = _data_->_tmp43_;
	_data_->_tmp44_ = _data_->search;
	if (_data_->_tmp44_ == NULL) {
		_data_->_tmp45_ = g_strdup ("DBus connector requires instance of ScopeSearchBase!");
		_data_->msg = _data_->_tmp45_;
		_data_->_tmp46_ = _data_->msg;
		g_warning ("unity-scope-dbus-impl.vala:538: %s", _data_->_tmp46_);
		_data_->_tmp47_ = _data_->msg;
		_data_->_tmp48_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, _data_->_tmp47_);
		_data_->_inner_error_ = _data_->_tmp48_;
		if (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			_g_free0 (_data_->msg);
			_g_object_unref0 (_data_->search);
			_g_object_unref0 (_data_->result_set);
			unity_search_context_destroy (&_data_->search_context);
			_g_object_unref0 (_data_->cancellable);
			_g_object_unref0 (_data_->last_search);
			_g_free0 (_data_->normalized_query);
			_g_hash_table_unref0 (_data_->_result_);
			block12_data_unref (_data_->_data12_);
			_data_->_data12_ = NULL;
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_g_free0 (_data_->msg);
			_g_object_unref0 (_data_->search);
			_g_object_unref0 (_data_->result_set);
			unity_search_context_destroy (&_data_->search_context);
			_g_object_unref0 (_data_->cancellable);
			_g_object_unref0 (_data_->last_search);
			_g_free0 (_data_->normalized_query);
			_g_hash_table_unref0 (_data_->_result_);
			block12_data_unref (_data_->_data12_);
			_data_->_data12_ = NULL;
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
		_g_free0 (_data_->msg);
	}
	_data_->_tmp49_ = _data_->search;
	_data_->_tmp50_ = _g_object_ref0 (_data_->_tmp49_);
	_g_object_unref0 (_data_->channel->last_search);
	_data_->channel->last_search = _data_->_tmp50_;
	{
		_data_->_data13_ = g_slice_new0 (Block13Data);
		_data_->_data13_->_ref_count_ = 1;
		_data_->_data13_->_data12_ = block12_data_ref (_data_->_data12_);
		_data_->_tmp51_ = _data_->channel->model_lock;
		if (!unity_internal_utils_async_mutex_try_lock (_data_->_tmp51_)) {
			_data_->_tmp52_ = _data_->channel->model_lock;
			_data_->_state_ = 2;
			unity_internal_utils_async_mutex_lock (_data_->_tmp52_, unity_internal_default_scope_dbus_impl_search_internal_ready, _data_);
			return FALSE;
			_state_2:
			unity_internal_utils_async_mutex_lock_finish (_data_->_tmp52_, _data_->_res_);
		}
		unity_internal_scope_channel_set_state (_data_->channel, UNITY_INTERNAL_CHANNEL_STATE_SEARCH_ACTIVE);
		_data_->_tmp53_ = _data_->channel->backend_model;
		dee_model_clear ((DeeModel*) _data_->_tmp53_);
		g_idle_add_full (G_PRIORITY_LOW, _unity_internal_default_scope_dbus_impl_search_internal_co_gsource_func, _data_, NULL);
		_data_->_state_ = 3;
		return FALSE;
		_state_3:
		;
		_data_->_tmp54_ = _data_->cancellable;
		if (unity_cancellable_is_cancelled ((UnityCancellable*) _data_->_tmp54_)) {
			_data_->_tmp55_ = _data_->normalized_query;
			_data_->_tmp56_ = g_error_new (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_SEARCH_CANCELLED, "Search '%s' was cancelled", _data_->_tmp55_);
			_data_->_inner_error_ = _data_->_tmp56_;
			block13_data_unref (_data_->_data13_);
			_data_->_data13_ = NULL;
			goto __finally21;
		}
		_data_->_tmp57_ = _data_->result_set;
		_data_->_tmp58_ = _data_->channel->transfer_model;
		unity_internal_dee_result_set_set_flush_model (_data_->_tmp57_, (DeeSerializableModel*) _data_->_tmp58_);
		_data_->search_start_time = (gint64) 0;
		_data_->_tmp59_ = unity_internal_default_scope_dbus_impl_measure_requests;
		if (_data_->_tmp59_) {
			_data_->search_start_time = g_get_monotonic_time ();
		}
		_data_->_tmp60_ = _data_->search_start_time;
		_data_->_data13_->search_end_time = _data_->_tmp60_;
		_data_->_tmp61_ = _data_->self->priv->_dbus_name;
		_data_->_tmp62_ = _data_->normalized_query;
		unity_trace_tracepoint ("search:start::scope=%s;query=%s", _data_->_tmp61_, _data_->_tmp62_);
		_data_->_tmp63_ = unity_internal_default_scope_dbus_impl_force_sync_requests;
		if (_data_->_tmp63_) {
			_data_->_tmp64_ = _data_->search;
			unity_scope_search_base_run (_data_->_tmp64_);
			_data_->_tmp65_ = unity_internal_default_scope_dbus_impl_measure_requests;
			if (_data_->_tmp65_) {
				_data_->_data13_->search_end_time = g_get_monotonic_time ();
			}
		} else {
			_data_->_tmp66_ = _data_->search;
			unity_scope_search_base_run_async (_data_->_tmp66_, _____lambda44__unity_scope_search_base_callback, _data_->_data13_);
			_data_->_state_ = 4;
			return FALSE;
			_state_4:
			;
		}
		_data_->_tmp67_ = _data_->self->priv->_dbus_name;
		_data_->_tmp68_ = _data_->normalized_query;
		unity_trace_tracepoint ("search:end::scope=%s;query=%s", _data_->_tmp67_, _data_->_tmp68_);
		_data_->_tmp69_ = _data_->cancellable;
		if (!unity_cancellable_is_cancelled ((UnityCancellable*) _data_->_tmp69_)) {
			_data_->_tmp70_ = _data_->result_set;
			unity_result_set_flush ((UnityResultSet*) _data_->_tmp70_);
			_data_->_tmp71_ = _data_->_result_;
			_data_->_tmp72_ = g_strdup (UNITY_INTERNAL_SEARCH_SEQNUM_HINT);
			_data_->_tmp73_ = g_variant_new_uint64 (unity_internal_scope_channel_get_last_seqnum (_data_->channel));
			g_variant_ref_sink (_data_->_tmp73_);
			g_hash_table_insert (_data_->_tmp71_, _data_->_tmp72_, _data_->_tmp73_);
		}
		_data_->_tmp74_ = unity_internal_default_scope_dbus_impl_measure_requests;
		if (_data_->_tmp74_) {
			_data_->_tmp75_ = _data_->_data13_->search_end_time;
			_data_->_tmp76_ = _data_->search_start_time;
			_data_->delta_us = _data_->_tmp75_ - _data_->_tmp76_;
			_data_->_tmp77_ = _data_->delta_us;
			_data_->delta = _data_->_tmp77_ / 1000000.0;
			_data_->_tmp78_ = _data_->_result_;
			_data_->_tmp79_ = g_strdup (UNITY_INTERNAL_SEARCH_TIME_HINT);
			_data_->_tmp80_ = _data_->delta;
			_data_->_tmp81_ = g_variant_new_double (_data_->_tmp80_);
			g_variant_ref_sink (_data_->_tmp81_);
			g_hash_table_insert (_data_->_tmp78_, _data_->_tmp79_, _data_->_tmp81_);
		}
		block13_data_unref (_data_->_data13_);
		_data_->_data13_ = NULL;
	}
	__finally21:
	{
		unity_internal_scope_channel_set_state (_data_->channel, UNITY_INTERNAL_CHANNEL_STATE_IDLE);
		_data_->_tmp82_ = _data_->channel->model_lock;
		unity_internal_utils_async_mutex_unlock (_data_->_tmp82_);
	}
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		if (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			_g_object_unref0 (_data_->search);
			_g_object_unref0 (_data_->result_set);
			unity_search_context_destroy (&_data_->search_context);
			_g_object_unref0 (_data_->cancellable);
			_g_object_unref0 (_data_->last_search);
			_g_free0 (_data_->normalized_query);
			_g_hash_table_unref0 (_data_->_result_);
			block12_data_unref (_data_->_data12_);
			_data_->_data12_ = NULL;
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_g_object_unref0 (_data_->search);
			_g_object_unref0 (_data_->result_set);
			unity_search_context_destroy (&_data_->search_context);
			_g_object_unref0 (_data_->cancellable);
			_g_object_unref0 (_data_->last_search);
			_g_free0 (_data_->normalized_query);
			_g_hash_table_unref0 (_data_->_result_);
			block12_data_unref (_data_->_data12_);
			_data_->_data12_ = NULL;
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->_tmp83_ = _data_->cancellable;
	if (unity_cancellable_is_cancelled ((UnityCancellable*) _data_->_tmp83_)) {
		_data_->_tmp84_ = _data_->normalized_query;
		_data_->_tmp85_ = g_error_new (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_SEARCH_CANCELLED, "Search '%s' was cancelled", _data_->_tmp84_);
		_data_->_inner_error_ = _data_->_tmp85_;
		if (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			_g_object_unref0 (_data_->search);
			_g_object_unref0 (_data_->result_set);
			unity_search_context_destroy (&_data_->search_context);
			_g_object_unref0 (_data_->cancellable);
			_g_object_unref0 (_data_->last_search);
			_g_free0 (_data_->normalized_query);
			_g_hash_table_unref0 (_data_->_result_);
			block12_data_unref (_data_->_data12_);
			_data_->_data12_ = NULL;
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_g_object_unref0 (_data_->search);
			_g_object_unref0 (_data_->result_set);
			unity_search_context_destroy (&_data_->search_context);
			_g_object_unref0 (_data_->cancellable);
			_g_object_unref0 (_data_->last_search);
			_g_free0 (_data_->normalized_query);
			_g_hash_table_unref0 (_data_->_result_);
			block12_data_unref (_data_->_data12_);
			_data_->_data12_ = NULL;
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->result = _data_->_result_;
	_g_object_unref0 (_data_->search);
	_g_object_unref0 (_data_->result_set);
	unity_search_context_destroy (&_data_->search_context);
	_g_object_unref0 (_data_->cancellable);
	_g_object_unref0 (_data_->last_search);
	_g_free0 (_data_->normalized_query);
	block12_data_unref (_data_->_data12_);
	_data_->_data12_ = NULL;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_internal_default_scope_dbus_impl_real_search_data_free (gpointer _data)
{
	UnityInternalDefaultScopeDbusImplSearchData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_free0 (_data_->search_string);
	_g_hash_table_unref0 (_data_->hints);
	_g_object_unref0 (_data_->cancellable);
	_g_hash_table_unref0 (_data_->result);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalDefaultScopeDbusImplSearchData, _data_);
}


static void
unity_internal_default_scope_dbus_impl_real_search_async_ready_wrapper (GObject *source_object,
                                                                        GAsyncResult *res,
                                                                        void *user_data)
{
	UnityInternalDefaultScopeDbusImplSearchData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_internal_default_scope_dbus_impl_real_search (UnityProtocolScopeService* base,
                                                    const gchar* channel_id,
                                                    const gchar* search_string,
                                                    GHashTable* hints,
                                                    GCancellable* cancellable,
                                                    GAsyncReadyCallback _callback_,
                                                    gpointer _user_data_)
{
	UnityInternalDefaultScopeDBusImpl * self;
	UnityInternalDefaultScopeDbusImplSearchData* _data_;
	UnityInternalDefaultScopeDBusImpl* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	GHashTable* _tmp3_;
	GCancellable* _tmp4_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_data_ = g_slice_new0 (UnityInternalDefaultScopeDbusImplSearchData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_internal_default_scope_dbus_impl_real_search_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_default_scope_dbus_impl_real_search_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_tmp2_ = g_strdup (search_string);
	_g_free0 (_data_->search_string);
	_data_->search_string = _tmp2_;
	_tmp3_ = _g_hash_table_ref0 (hints);
	_g_hash_table_unref0 (_data_->hints);
	_data_->hints = _tmp3_;
	_tmp4_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp4_;
	unity_internal_default_scope_dbus_impl_real_search_co (_data_);
}


static GHashTable*
unity_internal_default_scope_dbus_impl_real_search_finish (UnityProtocolScopeService* base,
                                                           GAsyncResult* _res_,
                                                           GError** error)
{
	GHashTable* result;
	UnityInternalDefaultScopeDbusImplSearchData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static void
unity_internal_default_scope_dbus_impl_search_ready (GObject* source_object,
                                                     GAsyncResult* _res_,
                                                     gpointer _user_data_)
{
	UnityInternalDefaultScopeDbusImplSearchData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_internal_default_scope_dbus_impl_real_search_co (_data_);
}


static gboolean
_unity_internal_default_scope_dbus_impl_timeout_reached_gsource_func (gpointer self)
{
	gboolean result;
	result = unity_internal_default_scope_dbus_impl_timeout_reached ((UnityInternalDefaultScopeDBusImpl*) self);
	return result;
}


static gboolean
unity_internal_default_scope_dbus_impl_real_search_co (UnityInternalDefaultScopeDbusImplSearchData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->self->priv->_query_happened = TRUE;
	_data_->_tmp0_ = unity_internal_default_scope_dbus_impl_get_channel_by_id (_data_->self, _data_->channel_id, &_data_->_inner_error_);
	_data_->channel = _data_->_tmp0_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			_g_hash_table_unref0 (_data_->_result_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_g_hash_table_unref0 (_data_->_result_);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->_tmp2_ = _data_->channel;
	_data_->_state_ = 1;
	unity_internal_default_scope_dbus_impl_search_internal (_data_->self, _data_->search_string, _data_->hints, _data_->_tmp2_, unity_internal_default_scope_dbus_impl_search_ready, _data_);
	return FALSE;
	_state_1:
	_data_->_tmp3_ = unity_internal_default_scope_dbus_impl_search_internal_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
	_data_->_tmp1_ = _data_->_tmp3_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			_g_object_unref0 (_data_->channel);
			_g_hash_table_unref0 (_data_->_result_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_g_object_unref0 (_data_->channel);
			_g_hash_table_unref0 (_data_->_result_);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->_tmp4_ = _data_->_tmp1_;
	_data_->_tmp1_ = NULL;
	_g_hash_table_unref0 (_data_->_result_);
	_data_->_result_ = _data_->_tmp4_;
	_data_->_tmp5_ = unity_internal_PROCESS_TIMEOUT_SEC;
	if (_data_->_tmp5_ > 0) {
		_data_->_tmp6_ = _data_->self->priv->_inactivity_timeout_source_id;
		if (_data_->_tmp6_ == ((guint) 0)) {
			_data_->_tmp7_ = unity_internal_PROCESS_TIMEOUT_SEC;
			_data_->self->priv->_inactivity_timeout_source_id = g_timeout_add_seconds_full (G_PRIORITY_DEFAULT_IDLE, (guint) _data_->_tmp7_, _unity_internal_default_scope_dbus_impl_timeout_reached_gsource_func, g_object_ref (_data_->self), g_object_unref);
		}
		_data_->self->priv->_query_happened = TRUE;
	}
	_data_->result = _data_->_result_;
	_g_hash_table_unref0 (_data_->_tmp1_);
	_g_object_unref0 (_data_->channel);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_internal_default_scope_dbus_impl_preview_internal_data_free (gpointer _data)
{
	UnityInternalDefaultScopeDbusImplPreviewInternalData* _data_;
	_data_ = _data;
	unity_scope_result_destroy (&_data_->scope_result);
	_g_object_unref0 (_data_->metadata);
	_g_object_unref0 (_data_->result);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalDefaultScopeDbusImplPreviewInternalData, _data_);
}


static void
unity_internal_default_scope_dbus_impl_preview_internal_async_ready_wrapper (GObject *source_object,
                                                                             GAsyncResult *res,
                                                                             void *user_data)
{
	UnityInternalDefaultScopeDbusImplPreviewInternalData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


void
unity_internal_default_scope_dbus_impl_preview_internal (UnityInternalDefaultScopeDBusImpl* self,
                                                         UnityScopeResult* scope_result,
                                                         UnitySearchMetadata* metadata,
                                                         GAsyncReadyCallback _callback_,
                                                         gpointer _user_data_)
{
	UnityInternalDefaultScopeDbusImplPreviewInternalData* _data_;
	UnityInternalDefaultScopeDBusImpl* _tmp0_;
	UnityScopeResult _tmp1_;
	UnityScopeResult _tmp2_ = {0};
	UnitySearchMetadata* _tmp3_;
	_data_ = g_slice_new0 (UnityInternalDefaultScopeDbusImplPreviewInternalData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, unity_internal_default_scope_dbus_impl_preview_internal_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_default_scope_dbus_impl_preview_internal_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = *scope_result;
	unity_scope_result_copy (&_tmp1_, &_tmp2_);
	unity_scope_result_destroy (&_data_->scope_result);
	_data_->scope_result = _tmp2_;
	_tmp3_ = _g_object_ref0 (metadata);
	_g_object_unref0 (_data_->metadata);
	_data_->metadata = _tmp3_;
	unity_internal_default_scope_dbus_impl_preview_internal_co (_data_);
}


UnityPreview*
unity_internal_default_scope_dbus_impl_preview_internal_finish (UnityInternalDefaultScopeDBusImpl* self,
                                                                GAsyncResult* _res_)
{
	UnityPreview* result;
	UnityInternalDefaultScopeDbusImplPreviewInternalData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static Block14Data*
block14_data_ref (Block14Data* _data14_)
{
	g_atomic_int_inc (&_data14_->_ref_count_);
	return _data14_;
}


static void
block14_data_unref (void * _userdata_)
{
	Block14Data* _data14_;
	_data14_ = (Block14Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data14_->_ref_count_)) {
		UnityInternalDefaultScopeDBusImpl* self;
		self = _data14_->self;
		_g_object_unref0 (_data14_->response);
		_g_object_unref0 (self);
		g_slice_free (Block14Data, _data14_);
	}
}


static gboolean
_unity_internal_default_scope_dbus_impl_preview_internal_co_gsource_func (gpointer self)
{
	gboolean result;
	result = unity_internal_default_scope_dbus_impl_preview_internal_co (self);
	return result;
}


static void
___lambda43_ (Block14Data* _data14_,
              UnityResultPreviewer* obj,
              UnityAbstractPreview* preview)
{
	UnityInternalDefaultScopeDBusImpl* self;
	UnityPreview* _tmp0_;
	self = _data14_->self;
	g_return_if_fail (obj != NULL);
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (preview, UNITY_TYPE_PREVIEW) ? ((UnityPreview*) preview) : NULL);
	_g_object_unref0 (_data14_->response);
	_data14_->response = _tmp0_;
	g_idle_add_full (G_PRIORITY_DEFAULT, _unity_internal_default_scope_dbus_impl_preview_internal_co_gsource_func, _data14_->_async_data_, NULL);
}


static void
____lambda43__unity_abstract_preview_callback (UnityResultPreviewer* previewer,
                                               UnityAbstractPreview* preview,
                                               gpointer self)
{
	___lambda43_ (self, previewer, preview);
}


static gboolean
unity_internal_default_scope_dbus_impl_preview_internal_co (UnityInternalDefaultScopeDbusImplPreviewInternalData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_data14_ = g_slice_new0 (Block14Data);
	_data_->_data14_->_ref_count_ = 1;
	_data_->_data14_->self = g_object_ref (_data_->self);
	_data_->_data14_->_async_data_ = _data_;
	_data_->_tmp0_ = _data_->self->priv->_owner;
	_data_->_tmp1_ = _data_->scope_result;
	_data_->_tmp2_ = unity_abstract_scope_create_previewer (_data_->_tmp0_, &_data_->_tmp1_, _data_->metadata);
	_data_->previewer = _data_->_tmp2_;
	_data_->_data14_->response = NULL;
	_data_->_tmp3_ = _data_->previewer;
	if (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp3_, UNITY_TYPE_RESULT_PREVIEWER)) {
		_data_->_tmp4_ = _data_->previewer;
		unity_result_previewer_run_async (_data_->_tmp4_, ____lambda43__unity_abstract_preview_callback, _data_->_data14_);
		_data_->_state_ = 1;
		return FALSE;
		_state_1:
		;
	}
	_data_->_tmp5_ = _data_->_data14_->response;
	if (_data_->_tmp5_ == NULL) {
		_data_->_tmp6_ = unity_generic_preview_empty ();
		_g_object_unref0 (_data_->_data14_->response);
		_data_->_data14_->response = (UnityPreview*) _data_->_tmp6_;
		_data_->_tmp7_ = _data_->_data14_->response;
		_data_->_tmp8_ = _data_->scope_result;
		_data_->_tmp9_ = _data_->_tmp8_.title;
		unity_preview_set_title (_data_->_tmp7_, _data_->_tmp9_);
		_data_->_tmp10_ = _data_->_data14_->response;
		_data_->_tmp11_ = _data_->scope_result;
		_data_->_tmp12_ = _data_->_tmp11_.comment;
		_data_->_tmp13_ = g_markup_escape_text (_data_->_tmp12_, (gssize) -1);
		_data_->_tmp14_ = _data_->_tmp13_;
		unity_preview_set_description_markup (_data_->_tmp10_, _data_->_tmp14_);
		_g_free0 (_data_->_tmp14_);
		_data_->_tmp15_ = _data_->scope_result;
		_data_->_tmp16_ = _data_->_tmp15_.mimetype;
		_data_->_tmp17_ = g_content_type_get_icon (_data_->_tmp16_);
		_data_->icon = _data_->_tmp17_;
		_data_->_tmp18_ = _data_->_data14_->response;
		_data_->_tmp19_ = _data_->icon;
		unity_preview_set_image (_data_->_tmp18_, _data_->_tmp19_);
		_g_object_unref0 (_data_->icon);
	}
	_data_->_tmp20_ = _data_->_data14_->response;
	_data_->_tmp21_ = _g_object_ref0 (_data_->_tmp20_);
	_data_->result = _data_->_tmp21_;
	_g_object_unref0 (_data_->previewer);
	block14_data_unref (_data_->_data14_);
	_data_->_data14_ = NULL;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_internal_default_scope_dbus_impl_update_filter_state (UnityInternalDefaultScopeDBusImpl* self,
                                                            UnityInternalScopeChannel* channel,
                                                            GVariant* changed_row,
                                                            GError** error)
{
	const gchar* _tmp0_;
	gchar* filter_id = NULL;
	UnityFilter* filter = NULL;
	const gchar* _tmp6_;
	UnityFilter* _tmp7_;
	UnityFilter* _tmp8_;
	UnityFilter* _tmp9_;
	gboolean state = FALSE;
	UnityFilter* _tmp15_;
	gboolean _tmp16_;
	UnityFilter* _tmp17_;
	gboolean _tmp18_;
	UnityFilter* _tmp19_;
	GVariant* _tmp20_;
	GVariant* _tmp21_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	g_return_if_fail (channel != NULL);
	g_return_if_fail (changed_row != NULL);
	_tmp0_ = g_variant_get_type_string (changed_row);
	if (g_strcmp0 (_tmp0_, "(ssssa{sv}bbb)") != 0) {
		const gchar* _tmp1_;
		gchar* _tmp2_;
		gchar* _tmp3_;
		GError* _tmp4_;
		GError* _tmp5_;
		_tmp1_ = g_variant_get_type_string (changed_row);
		_tmp2_ = g_strdup_printf ("Incorrect signature of filter-state (got '%s')", _tmp1_);
		_tmp3_ = _tmp2_;
		_tmp4_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, _tmp3_);
		_tmp5_ = _tmp4_;
		_g_free0 (_tmp3_);
		_inner_error_ = _tmp5_;
		if (_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR) {
			g_propagate_error (error, _inner_error_);
			return;
		} else {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
	}
	g_variant_get_child (changed_row, (gsize) UNITY_INTERNAL_FILTER_COLUMN_ID, "s", &filter_id, NULL);
	_tmp6_ = filter_id;
	_tmp7_ = unity_internal_scope_channel_get_filter_by_id (channel, _tmp6_);
	_tmp8_ = _g_object_ref0 (_tmp7_);
	filter = _tmp8_;
	_tmp9_ = filter;
	if (_tmp9_ == NULL) {
		const gchar* _tmp10_;
		gchar* _tmp11_;
		gchar* _tmp12_;
		GError* _tmp13_;
		GError* _tmp14_;
		_tmp10_ = filter_id;
		_tmp11_ = g_strdup_printf ("Unable to find filter with id '%s'", _tmp10_);
		_tmp12_ = _tmp11_;
		_tmp13_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, _tmp12_);
		_tmp14_ = _tmp13_;
		_g_free0 (_tmp12_);
		_inner_error_ = _tmp14_;
		if (_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR) {
			g_propagate_error (error, _inner_error_);
			_g_object_unref0 (filter);
			_g_free0 (filter_id);
			return;
		} else {
			_g_object_unref0 (filter);
			_g_free0 (filter_id);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
	}
	g_variant_get_child (changed_row, (gsize) UNITY_INTERNAL_FILTER_COLUMN_FILTERING, "b", &state, NULL);
	_tmp15_ = filter;
	_tmp16_ = state;
	unity_filter_set_filtering (_tmp15_, _tmp16_);
	g_variant_get_child (changed_row, (gsize) UNITY_INTERNAL_FILTER_COLUMN_COLLAPSED, "b", &state, NULL);
	_tmp17_ = filter;
	_tmp18_ = state;
	unity_filter_set_collapsed (_tmp17_, _tmp18_);
	_tmp19_ = filter;
	_tmp20_ = g_variant_get_child_value (changed_row, (gsize) UNITY_INTERNAL_FILTER_COLUMN_RENDERER_STATE);
	_tmp21_ = _tmp20_;
	unity_filter_update (_tmp19_, _tmp21_);
	_g_variant_unref0 (_tmp21_);
	_g_object_unref0 (filter);
	_g_free0 (filter_id);
}


static void
unity_internal_default_scope_dbus_impl_real_open_channel_data_free (gpointer _data)
{
	UnityInternalDefaultScopeDbusImplOpenChannelData* _data_;
	_data_ = _data;
	_g_hash_table_unref0 (_data_->hints);
	_g_object_unref0 (_data_->cancellable);
	_g_free0 (_data_->sender);
	_g_free0 (_data_->result);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalDefaultScopeDbusImplOpenChannelData, _data_);
}


static void
unity_internal_default_scope_dbus_impl_real_open_channel_async_ready_wrapper (GObject *source_object,
                                                                              GAsyncResult *res,
                                                                              void *user_data)
{
	UnityInternalDefaultScopeDbusImplOpenChannelData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_internal_default_scope_dbus_impl_real_open_channel (UnityProtocolScopeService* base,
                                                          guint channel_type,
                                                          GHashTable* hints,
                                                          GCancellable* cancellable,
                                                          const char* sender,
                                                          GAsyncReadyCallback _callback_,
                                                          gpointer _user_data_)
{
	UnityInternalDefaultScopeDBusImpl * self;
	UnityInternalDefaultScopeDbusImplOpenChannelData* _data_;
	UnityInternalDefaultScopeDBusImpl* _tmp0_;
	GHashTable* _tmp1_;
	GCancellable* _tmp2_;
	char* _tmp3_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_data_ = g_slice_new0 (UnityInternalDefaultScopeDbusImplOpenChannelData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_internal_default_scope_dbus_impl_real_open_channel_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_default_scope_dbus_impl_real_open_channel_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_data_->channel_type = channel_type;
	_tmp1_ = _g_hash_table_ref0 (hints);
	_g_hash_table_unref0 (_data_->hints);
	_data_->hints = _tmp1_;
	_tmp2_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp2_;
	_tmp3_ = g_strdup (sender);
	_g_free0 (_data_->sender);
	_data_->sender = _tmp3_;
	unity_internal_default_scope_dbus_impl_real_open_channel_co (_data_);
}


static gchar*
unity_internal_default_scope_dbus_impl_real_open_channel_finish (UnityProtocolScopeService* base,
                                                                 GAsyncResult* _res_,
                                                                 GHashTable* * out_hints,
                                                                 GError** error)
{
	gchar* result;
	UnityInternalDefaultScopeDbusImplOpenChannelData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	if (out_hints) {
		*out_hints = _data_->out_hints;
	} else {
		_g_hash_table_unref0 (_data_->out_hints);
	}
	_data_->out_hints = NULL;
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static void
unity_internal_default_scope_dbus_impl_open_channel_ready (GObject* source_object,
                                                           GAsyncResult* _res_,
                                                           gpointer _user_data_)
{
	UnityInternalDefaultScopeDbusImplOpenChannelData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_internal_default_scope_dbus_impl_real_open_channel_co (_data_);
}


static void
_unity_internal_default_scope_dbus_impl_channel_owner_lost_unity_internal_scope_channel_owner_lost (UnityInternalScopeChannel* _sender,
                                                                                                    gpointer self)
{
	unity_internal_default_scope_dbus_impl_channel_owner_lost ((UnityInternalDefaultScopeDBusImpl*) self, _sender);
}


static gboolean
unity_internal_default_scope_dbus_impl_real_open_channel_co (UnityInternalDefaultScopeDbusImplOpenChannelData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->flags = unity_protocol_channel_flags_from_hints (_data_->hints);
	_data_->_tmp0_ = unity_internal_scope_channel_new ((UnityProtocolChannelType) _data_->channel_type);
	_data_->channel = _data_->_tmp0_;
	_data_->_tmp1_ = _data_->self->priv->_owner;
	_data_->_tmp2_ = unity_abstract_scope_get_schema (_data_->_tmp1_);
	_data_->schema = _data_->_tmp2_;
	_data_->_tmp3_ = g_str_hash;
	_data_->_tmp4_ = g_str_equal;
	_data_->_tmp5_ = g_hash_table_new_full (_data_->_tmp3_, _data_->_tmp4_, _g_free0_, _g_free0_);
	_data_->required_schema = _data_->_tmp5_;
	_data_->_tmp6_ = g_str_hash;
	_data_->_tmp7_ = g_str_equal;
	_data_->_tmp8_ = g_hash_table_new_full (_data_->_tmp6_, _data_->_tmp7_, _g_free0_, _g_free0_);
	_data_->optional_schema = _data_->_tmp8_;
	_data_->_tmp9_ = _data_->schema;
	_data_->_tmp10_ = unity_schema_get_fields (_data_->_tmp9_);
	{
		_data_->field_collection = _data_->_tmp10_;
		for (_data_->field_it = _data_->field_collection; _data_->field_it != NULL; _data_->field_it = _data_->field_it->next) {
			_data_->field = (UnitySchemaFieldInfo*) _data_->field_it->data;
			{
				_data_->_tmp11_ = _data_->field;
				_data_->_tmp12_ = (*_data_->_tmp11_).type;
				if (_data_->_tmp12_ == UNITY_SCHEMA_FIELD_TYPE_REQUIRED) {
					_data_->_tmp13_ = _data_->required_schema;
					_data_->_tmp14_ = _data_->field;
					_data_->_tmp15_ = (*_data_->_tmp14_).name;
					_data_->_tmp16_ = g_strdup (_data_->_tmp15_);
					_data_->_tmp17_ = _data_->field;
					_data_->_tmp18_ = (*_data_->_tmp17_).schema;
					_data_->_tmp19_ = g_strdup (_data_->_tmp18_);
					g_hash_table_insert (_data_->_tmp13_, _data_->_tmp16_, _data_->_tmp19_);
				} else {
					_data_->_tmp20_ = _data_->optional_schema;
					_data_->_tmp21_ = _data_->field;
					_data_->_tmp22_ = (*_data_->_tmp21_).name;
					_data_->_tmp23_ = g_strdup (_data_->_tmp22_);
					_data_->_tmp24_ = _data_->field;
					_data_->_tmp25_ = (*_data_->_tmp24_).schema;
					_data_->_tmp26_ = g_strdup (_data_->_tmp25_);
					g_hash_table_insert (_data_->_tmp20_, _data_->_tmp23_, _data_->_tmp26_);
				}
			}
		}
		(_data_->field_collection == NULL) ? NULL : (_data_->field_collection = (g_list_free (_data_->field_collection), NULL));
	}
	_data_->_tmp27_ = _data_->channel;
	_data_->_tmp28_ = unity_internal_default_scope_dbus_impl_create_dbus_name (_data_->self);
	_data_->_tmp29_ = _data_->_tmp28_;
	_data_->_tmp30_ = _data_->required_schema;
	_data_->_tmp31_ = _data_->optional_schema;
	_data_->_tmp32_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) _data_->self);
	_data_->_tmp33_ = _data_->_tmp32_;
	_data_->_tmp34_ = _data_->flags;
	_data_->_tmp35_ = unity_internal_scope_channel_create_channel (_data_->_tmp27_, _data_->_tmp29_, _data_->_tmp30_, _data_->_tmp31_, _data_->_tmp33_, _data_->_tmp34_);
	_data_->_tmp36_ = _data_->_tmp35_;
	_g_free0 (_data_->_tmp29_);
	_data_->model_name = _data_->_tmp36_;
	_data_->_tmp37_ = _data_->channel;
	_data_->_tmp38_ = _data_->_tmp37_->transfer_model;
	if (_data_->_tmp38_ != NULL) {
		_data_->_tmp39_ = _data_->channel;
		_data_->_tmp40_ = _data_->_tmp39_->transfer_model;
		_data_->_state_ = 1;
		unity_internal_utils_wait_for_model_synchronization (_data_->_tmp40_, unity_internal_default_scope_dbus_impl_open_channel_ready, _data_);
		return FALSE;
		_state_1:
		unity_internal_utils_wait_for_model_synchronization_finish (_data_->_res_);
		if (_data_->sender != NULL) {
			_data_->_tmp41_ = _data_->channel;
			_data_->_tmp42_ = _data_->self->priv->_dbus_connection;
			unity_internal_scope_channel_watch_owner (_data_->_tmp41_, _data_->_tmp42_, _data_->sender);
			_data_->_tmp43_ = _data_->channel;
			g_signal_connect_object (_data_->_tmp43_, "owner-lost", (GCallback) _unity_internal_default_scope_dbus_impl_channel_owner_lost_unity_internal_scope_channel_owner_lost, _data_->self, 0);
		}
	}
	_data_->_tmp44_ = _data_->self->priv->_channels;
	_data_->_tmp45_ = _data_->channel;
	_data_->_tmp46_ = _data_->_tmp45_->id;
	_data_->_tmp47_ = g_strdup (_data_->_tmp46_);
	_data_->_tmp48_ = _data_->channel;
	_data_->_tmp49_ = _g_object_ref0 (_data_->_tmp48_);
	g_hash_table_insert (_data_->_tmp44_, _data_->_tmp47_, _data_->_tmp49_);
	_data_->_tmp50_ = g_str_hash;
	_data_->_tmp51_ = g_str_equal;
	_data_->_tmp52_ = g_hash_table_new_full (_data_->_tmp50_, _data_->_tmp51_, _g_free0_, _g_variant_unref0_);
	_g_hash_table_unref0 (_data_->out_hints);
	_data_->out_hints = _data_->_tmp52_;
	_data_->_tmp53_ = g_strdup (UNITY_PROTOCOL_CHANNEL_SWARM_NAME_HINT);
	_data_->_tmp54_ = _data_->model_name;
	_data_->_tmp55_ = g_variant_new_string (_data_->_tmp54_);
	g_variant_ref_sink (_data_->_tmp55_);
	g_hash_table_insert (_data_->out_hints, _data_->_tmp53_, _data_->_tmp55_);
	_data_->_tmp56_ = _data_->channel;
	_data_->_tmp57_ = _data_->_tmp56_->id;
	_data_->_tmp58_ = g_strdup (_data_->_tmp57_);
	_data_->result = _data_->_tmp58_;
	_g_free0 (_data_->model_name);
	_g_hash_table_unref0 (_data_->optional_schema);
	_g_hash_table_unref0 (_data_->required_schema);
	_g_object_unref0 (_data_->schema);
	_g_object_unref0 (_data_->channel);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static UnityInternalScopeChannel*
unity_internal_default_scope_dbus_impl_get_channel_by_id (UnityInternalDefaultScopeDBusImpl* self,
                                                          const gchar* channel_id,
                                                          GError** error)
{
	UnityInternalScopeChannel* result = NULL;
	UnityInternalScopeChannel* channel = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	UnityInternalScopeChannel* _tmp2_;
	UnityInternalScopeChannel* _tmp4_;
	UnityInternalScopeChannel* _tmp5_;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (self != NULL, NULL);
	g_return_val_if_fail (channel_id != NULL, NULL);
	_tmp0_ = self->priv->_channels;
	_tmp1_ = g_hash_table_lookup (_tmp0_, channel_id);
	channel = (UnityInternalScopeChannel*) _tmp1_;
	_tmp2_ = channel;
	if (_tmp2_ == NULL) {
		GError* _tmp3_;
		_tmp3_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_INVALID_CHANNEL, "Invalid channel ID!");
		_inner_error_ = _tmp3_;
		if (_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR) {
			g_propagate_error (error, _inner_error_);
			return NULL;
		} else {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return NULL;
		}
	}
	_tmp4_ = channel;
	_tmp5_ = _g_object_ref0 (_tmp4_);
	result = _tmp5_;
	return result;
}


static void
unity_internal_default_scope_dbus_impl_channel_owner_lost (UnityInternalDefaultScopeDBusImpl* self,
                                                           UnityInternalScopeChannel* channel)
{
	GHashTable* empty = NULL;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	const gchar* _tmp3_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (channel != NULL);
	_tmp0_ = g_str_hash;
	_tmp1_ = g_str_equal;
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, _g_variant_unref0_);
	empty = _tmp2_;
	_tmp3_ = channel->id;
	unity_protocol_scope_service_close_channel ((UnityProtocolScopeService*) self, _tmp3_, empty, NULL, NULL, NULL);
	_g_hash_table_unref0 (empty);
}


static void
unity_internal_default_scope_dbus_impl_real_close_channel_data_free (gpointer _data)
{
	UnityInternalDefaultScopeDbusImplCloseChannelData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_hash_table_unref0 (_data_->hints);
	_g_object_unref0 (_data_->cancellable);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalDefaultScopeDbusImplCloseChannelData, _data_);
}


static void
unity_internal_default_scope_dbus_impl_real_close_channel_async_ready_wrapper (GObject *source_object,
                                                                               GAsyncResult *res,
                                                                               void *user_data)
{
	UnityInternalDefaultScopeDbusImplCloseChannelData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_internal_default_scope_dbus_impl_real_close_channel (UnityProtocolScopeService* base,
                                                           const gchar* channel_id,
                                                           GHashTable* hints,
                                                           GCancellable* cancellable,
                                                           GAsyncReadyCallback _callback_,
                                                           gpointer _user_data_)
{
	UnityInternalDefaultScopeDBusImpl * self;
	UnityInternalDefaultScopeDbusImplCloseChannelData* _data_;
	UnityInternalDefaultScopeDBusImpl* _tmp0_;
	gchar* _tmp1_;
	GHashTable* _tmp2_;
	GCancellable* _tmp3_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_data_ = g_slice_new0 (UnityInternalDefaultScopeDbusImplCloseChannelData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_internal_default_scope_dbus_impl_real_close_channel_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_default_scope_dbus_impl_real_close_channel_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_tmp2_ = _g_hash_table_ref0 (hints);
	_g_hash_table_unref0 (_data_->hints);
	_data_->hints = _tmp2_;
	_tmp3_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp3_;
	unity_internal_default_scope_dbus_impl_real_close_channel_co (_data_);
}


static void
unity_internal_default_scope_dbus_impl_real_close_channel_finish (UnityProtocolScopeService* base,
                                                                  GAsyncResult* _res_,
                                                                  GError** error)
{
	UnityInternalDefaultScopeDbusImplCloseChannelData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
}


static gboolean
unity_internal_default_scope_dbus_impl_real_close_channel_co (UnityInternalDefaultScopeDbusImplCloseChannelData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = _data_->self->priv->_channels;
	if (g_hash_table_remove (_data_->_tmp0_, _data_->channel_id) == FALSE) {
		_data_->_tmp1_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_INVALID_CHANNEL, "Invalid channel ID!");
		_data_->_inner_error_ = _data_->_tmp1_;
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_internal_default_scope_dbus_impl_real_set_view_type_data_free (gpointer _data)
{
	UnityInternalDefaultScopeDbusImplSetViewTypeData* _data_;
	_data_ = _data;
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalDefaultScopeDbusImplSetViewTypeData, _data_);
}


static void
unity_internal_default_scope_dbus_impl_real_set_view_type_async_ready_wrapper (GObject *source_object,
                                                                               GAsyncResult *res,
                                                                               void *user_data)
{
	UnityInternalDefaultScopeDbusImplSetViewTypeData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_internal_default_scope_dbus_impl_real_set_view_type (UnityProtocolScopeService* base,
                                                           guint view_type_id,
                                                           GAsyncReadyCallback _callback_,
                                                           gpointer _user_data_)
{
	UnityInternalDefaultScopeDBusImpl * self;
	UnityInternalDefaultScopeDbusImplSetViewTypeData* _data_;
	UnityInternalDefaultScopeDBusImpl* _tmp0_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_data_ = g_slice_new0 (UnityInternalDefaultScopeDbusImplSetViewTypeData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, unity_internal_default_scope_dbus_impl_real_set_view_type_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_default_scope_dbus_impl_real_set_view_type_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_data_->view_type_id = view_type_id;
	unity_internal_default_scope_dbus_impl_real_set_view_type_co (_data_);
}


static void
unity_internal_default_scope_dbus_impl_real_set_view_type_finish (UnityProtocolScopeService* base,
                                                                  GAsyncResult* _res_,
                                                                  GError** error)
{
	UnityInternalDefaultScopeDbusImplSetViewTypeData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
}


static gboolean
unity_internal_default_scope_dbus_impl_real_set_view_type_co (UnityInternalDefaultScopeDbusImplSetViewTypeData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->view_type = (UnityProtocolViewType) _data_->view_type_id;
	unity_internal_default_scope_dbus_impl_set_view_type (_data_->self, _data_->view_type);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_internal_default_scope_dbus_impl_set_active_sources_data_free (gpointer _data)
{
	UnityInternalDefaultScopeDbusImplSetActiveSourcesData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_object_unref0 (_data_->cancellable);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalDefaultScopeDbusImplSetActiveSourcesData, _data_);
}


static void
unity_internal_default_scope_dbus_impl_set_active_sources_async_ready_wrapper (GObject *source_object,
                                                                               GAsyncResult *res,
                                                                               void *user_data)
{
	UnityInternalDefaultScopeDbusImplSetActiveSourcesData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


void
unity_internal_default_scope_dbus_impl_set_active_sources (UnityInternalDefaultScopeDBusImpl* self,
                                                           const gchar* channel_id,
                                                           gchar** sources,
                                                           int sources_length1,
                                                           GCancellable* cancellable,
                                                           GAsyncReadyCallback _callback_,
                                                           gpointer _user_data_)
{
	UnityInternalDefaultScopeDbusImplSetActiveSourcesData* _data_;
	UnityInternalDefaultScopeDBusImpl* _tmp0_;
	gchar* _tmp1_;
	GCancellable* _tmp2_;
	_data_ = g_slice_new0 (UnityInternalDefaultScopeDbusImplSetActiveSourcesData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_internal_default_scope_dbus_impl_set_active_sources_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_default_scope_dbus_impl_set_active_sources_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_data_->sources = sources;
	_data_->sources_length1 = sources_length1;
	_tmp2_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp2_;
	unity_internal_default_scope_dbus_impl_set_active_sources_co (_data_);
}


void
unity_internal_default_scope_dbus_impl_set_active_sources_finish (UnityInternalDefaultScopeDBusImpl* self,
                                                                  GAsyncResult* _res_,
                                                                  GError** error)
{
	UnityInternalDefaultScopeDbusImplSetActiveSourcesData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
}


static gboolean
unity_internal_default_scope_dbus_impl_set_active_sources_co (UnityInternalDefaultScopeDbusImplSetActiveSourcesData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_internal_default_scope_dbus_impl_real_push_results_data_free (gpointer _data)
{
	UnityInternalDefaultScopeDbusImplPushResultsData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_free0 (_data_->search_string);
	_g_free0 (_data_->source_scope_id);
	_g_variant_unref0 (_data_->_result_);
	_g_object_unref0 (_data_->cancellable);
	_g_hash_table_unref0 (_data_->result);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalDefaultScopeDbusImplPushResultsData, _data_);
}


static void
unity_internal_default_scope_dbus_impl_real_push_results_async_ready_wrapper (GObject *source_object,
                                                                              GAsyncResult *res,
                                                                              void *user_data)
{
	UnityInternalDefaultScopeDbusImplPushResultsData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_internal_default_scope_dbus_impl_real_push_results (UnityProtocolScopeService* base,
                                                          const gchar* channel_id,
                                                          const gchar* search_string,
                                                          const gchar* source_scope_id,
                                                          GVariant* _result_,
                                                          gchar** categories,
                                                          int categories_length1,
                                                          GCancellable* cancellable,
                                                          GAsyncReadyCallback _callback_,
                                                          gpointer _user_data_)
{
	UnityInternalDefaultScopeDBusImpl * self;
	UnityInternalDefaultScopeDbusImplPushResultsData* _data_;
	UnityInternalDefaultScopeDBusImpl* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	GVariant* _tmp4_;
	GCancellable* _tmp5_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_data_ = g_slice_new0 (UnityInternalDefaultScopeDbusImplPushResultsData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_internal_default_scope_dbus_impl_real_push_results_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_default_scope_dbus_impl_real_push_results_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_tmp2_ = g_strdup (search_string);
	_g_free0 (_data_->search_string);
	_data_->search_string = _tmp2_;
	_tmp3_ = g_strdup (source_scope_id);
	_g_free0 (_data_->source_scope_id);
	_data_->source_scope_id = _tmp3_;
	_tmp4_ = _g_variant_ref0 (_result_);
	_g_variant_unref0 (_data_->_result_);
	_data_->_result_ = _tmp4_;
	_data_->categories = categories;
	_data_->categories_length1 = categories_length1;
	_tmp5_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp5_;
	unity_internal_default_scope_dbus_impl_real_push_results_co (_data_);
}


static GHashTable*
unity_internal_default_scope_dbus_impl_real_push_results_finish (UnityProtocolScopeService* base,
                                                                 GAsyncResult* _res_,
                                                                 GError** error)
{
	GHashTable* result;
	UnityInternalDefaultScopeDbusImplPushResultsData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static gboolean
unity_internal_default_scope_dbus_impl_real_push_results_co (UnityInternalDefaultScopeDbusImplPushResultsData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, "Regular scopes don't support results pushing");
	_data_->_inner_error_ = _data_->_tmp0_;
	if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	} else {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
		g_clear_error (&_data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
}


static UnityAbstractScope*
unity_internal_default_scope_dbus_impl_get_owner (UnityInternalDefaultScopeDBusImpl* self)
{
	UnityAbstractScope* result;
	UnityAbstractScope* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_owner;
	result = _tmp0_;
	return result;
}


static void
unity_internal_default_scope_dbus_impl_set_owner (UnityInternalDefaultScopeDBusImpl* self,
                                                  UnityAbstractScope* value)
{
	g_return_if_fail (self != NULL);
	if (unity_internal_default_scope_dbus_impl_get_owner (self) != value) {
		self->priv->_owner = value;
		g_object_notify_by_pspec ((GObject *) self, unity_internal_default_scope_dbus_impl_properties[UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_OWNER_PROPERTY]);
	}
}


static DeeSerializableModel*
unity_internal_default_scope_dbus_impl_real_get_categories_model (UnityInternalScopeDBusImpl* base)
{
	DeeSerializableModel* result;
	UnityInternalDefaultScopeDBusImpl* self;
	DeeSerializableModel* _tmp0_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_tmp0_ = self->priv->_categories_model;
	result = _tmp0_;
	return result;
}


static void
unity_internal_default_scope_dbus_impl_real_set_categories_model (UnityInternalScopeDBusImpl* base,
                                                                  DeeSerializableModel* value)
{
	UnityInternalDefaultScopeDBusImpl* self;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	if (unity_internal_default_scope_dbus_impl_real_get_categories_model (base) != value) {
		DeeSerializableModel* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_categories_model);
		self->priv->_categories_model = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_internal_default_scope_dbus_impl_properties[UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_CATEGORIES_MODEL_PROPERTY]);
	}
}


static DeeSerializableModel*
unity_internal_default_scope_dbus_impl_real_get_filters_model (UnityInternalScopeDBusImpl* base)
{
	DeeSerializableModel* result;
	UnityInternalDefaultScopeDBusImpl* self;
	DeeSerializableModel* _tmp0_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_tmp0_ = self->priv->_filters_model;
	result = _tmp0_;
	return result;
}


static void
unity_internal_default_scope_dbus_impl_real_set_filters_model (UnityInternalScopeDBusImpl* base,
                                                               DeeSerializableModel* value)
{
	UnityInternalDefaultScopeDBusImpl* self;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	if (unity_internal_default_scope_dbus_impl_real_get_filters_model (base) != value) {
		DeeSerializableModel* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_filters_model);
		self->priv->_filters_model = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_internal_default_scope_dbus_impl_properties[UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_FILTERS_MODEL_PROPERTY]);
	}
}


UnityProtocolViewType
unity_internal_default_scope_dbus_impl_get_view_type (UnityInternalDefaultScopeDBusImpl* self)
{
	UnityProtocolViewType result;
	UnityProtocolViewType _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->priv->_view_type;
	result = _tmp0_;
	return result;
}


void
unity_internal_default_scope_dbus_impl_set_view_type (UnityInternalDefaultScopeDBusImpl* self,
                                                      UnityProtocolViewType value)
{
	g_return_if_fail (self != NULL);
	if (unity_internal_default_scope_dbus_impl_get_view_type (self) != value) {
		self->priv->_view_type = value;
		g_object_notify_by_pspec ((GObject *) self, unity_internal_default_scope_dbus_impl_properties[UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_VIEW_TYPE_PROPERTY]);
	}
}


static gint
unity_internal_default_scope_dbus_impl_real_get_protocol_version (UnityProtocolScopeService* base)
{
	gint result;
	UnityInternalDefaultScopeDBusImpl* self;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	result = 1;
	return result;
}


static gboolean
unity_internal_default_scope_dbus_impl_real_get_visible (UnityProtocolScopeService* base)
{
	gboolean result;
	UnityInternalDefaultScopeDBusImpl* self;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	result = TRUE;
	return result;
}


static gboolean
unity_internal_default_scope_dbus_impl_real_get_is_master (UnityProtocolScopeService* base)
{
	gboolean result;
	UnityInternalDefaultScopeDBusImpl* self;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	result = FALSE;
	return result;
}


static gchar*
unity_internal_default_scope_dbus_impl_real_get_search_hint (UnityProtocolScopeService* base)
{
	gchar* result;
	UnityInternalDefaultScopeDBusImpl* self;
	gchar* _tmp0_ = NULL;
	UnityAbstractScope* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp4_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_tmp1_ = self->priv->_owner;
	_tmp2_ = unity_abstract_scope_get_search_hint (_tmp1_);
	_tmp0_ = _tmp2_;
	if (_tmp0_ == NULL) {
		gchar* _tmp3_;
		_tmp3_ = g_strdup ("");
		_g_free0 (_tmp0_);
		_tmp0_ = _tmp3_;
	}
	_tmp4_ = _tmp0_;
	_tmp0_ = NULL;
	result = _tmp4_;
	_g_free0 (_tmp0_);
	return result;
}


static GHashTable*
unity_internal_default_scope_dbus_impl_real_get_metadata (UnityProtocolScopeService* base)
{
	GHashTable* result;
	UnityInternalDefaultScopeDBusImpl* self;
	UnitySchema* schema = NULL;
	UnityAbstractScope* _tmp0_;
	UnitySchema* _tmp1_;
	GHashTable* required_schema = NULL;
	GHashFunc _tmp2_;
	GEqualFunc _tmp3_;
	GHashTable* _tmp4_;
	UnitySchema* _tmp5_;
	GList* _tmp6_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_tmp0_ = self->priv->_owner;
	_tmp1_ = unity_abstract_scope_get_schema (_tmp0_);
	schema = _tmp1_;
	_tmp2_ = g_str_hash;
	_tmp3_ = g_str_equal;
	_tmp4_ = g_hash_table_new_full (_tmp2_, _tmp3_, _g_free0_, _g_free0_);
	required_schema = _tmp4_;
	_tmp5_ = schema;
	_tmp6_ = unity_schema_get_fields (_tmp5_);
	{
		GList* field_collection = NULL;
		GList* field_it = NULL;
		field_collection = _tmp6_;
		for (field_it = field_collection; field_it != NULL; field_it = field_it->next) {
			UnitySchemaFieldInfo* field = NULL;
			field = (UnitySchemaFieldInfo*) field_it->data;
			{
				UnitySchemaFieldInfo* _tmp7_;
				UnitySchemaFieldType _tmp8_;
				_tmp7_ = field;
				_tmp8_ = (*_tmp7_).type;
				if (_tmp8_ == UNITY_SCHEMA_FIELD_TYPE_REQUIRED) {
					GHashTable* _tmp9_;
					UnitySchemaFieldInfo* _tmp10_;
					const gchar* _tmp11_;
					gchar* _tmp12_;
					UnitySchemaFieldInfo* _tmp13_;
					const gchar* _tmp14_;
					gchar* _tmp15_;
					_tmp9_ = required_schema;
					_tmp10_ = field;
					_tmp11_ = (*_tmp10_).name;
					_tmp12_ = g_strdup (_tmp11_);
					_tmp13_ = field;
					_tmp14_ = (*_tmp13_).schema;
					_tmp15_ = g_strdup (_tmp14_);
					g_hash_table_insert (_tmp9_, _tmp12_, _tmp15_);
				}
			}
		}
		(field_collection == NULL) ? NULL : (field_collection = (g_list_free (field_collection), NULL));
	}
	result = required_schema;
	_g_object_unref0 (schema);
	return result;
}


static GHashTable*
unity_internal_default_scope_dbus_impl_real_get_optional_metadata (UnityProtocolScopeService* base)
{
	GHashTable* result;
	UnityInternalDefaultScopeDBusImpl* self;
	UnitySchema* schema = NULL;
	UnityAbstractScope* _tmp0_;
	UnitySchema* _tmp1_;
	GHashTable* optional_schema = NULL;
	GHashFunc _tmp2_;
	GEqualFunc _tmp3_;
	GHashTable* _tmp4_;
	UnitySchema* _tmp5_;
	GList* _tmp6_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_tmp0_ = self->priv->_owner;
	_tmp1_ = unity_abstract_scope_get_schema (_tmp0_);
	schema = _tmp1_;
	_tmp2_ = g_str_hash;
	_tmp3_ = g_str_equal;
	_tmp4_ = g_hash_table_new_full (_tmp2_, _tmp3_, _g_free0_, _g_free0_);
	optional_schema = _tmp4_;
	_tmp5_ = schema;
	_tmp6_ = unity_schema_get_fields (_tmp5_);
	{
		GList* field_collection = NULL;
		GList* field_it = NULL;
		field_collection = _tmp6_;
		for (field_it = field_collection; field_it != NULL; field_it = field_it->next) {
			UnitySchemaFieldInfo* field = NULL;
			field = (UnitySchemaFieldInfo*) field_it->data;
			{
				UnitySchemaFieldInfo* _tmp7_;
				UnitySchemaFieldType _tmp8_;
				_tmp7_ = field;
				_tmp8_ = (*_tmp7_).type;
				if (_tmp8_ == UNITY_SCHEMA_FIELD_TYPE_OPTIONAL) {
					GHashTable* _tmp9_;
					UnitySchemaFieldInfo* _tmp10_;
					const gchar* _tmp11_;
					gchar* _tmp12_;
					UnitySchemaFieldInfo* _tmp13_;
					const gchar* _tmp14_;
					gchar* _tmp15_;
					_tmp9_ = optional_schema;
					_tmp10_ = field;
					_tmp11_ = (*_tmp10_).name;
					_tmp12_ = g_strdup (_tmp11_);
					_tmp13_ = field;
					_tmp14_ = (*_tmp13_).schema;
					_tmp15_ = g_strdup (_tmp14_);
					g_hash_table_insert (_tmp9_, _tmp12_, _tmp15_);
				}
			}
		}
		(field_collection == NULL) ? NULL : (field_collection = (g_list_free (field_collection), NULL));
	}
	result = optional_schema;
	_g_object_unref0 (schema);
	return result;
}


static GVariant*
unity_internal_default_scope_dbus_impl_real_get_categories (UnityProtocolScopeService* base)
{
	GVariant* result;
	UnityInternalDefaultScopeDBusImpl* self;
	DeeSerializableModel* _tmp0_;
	DeeSerializableModel* _tmp1_;
	GVariant* _tmp2_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_tmp0_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
	_tmp1_ = _tmp0_;
	_tmp2_ = dee_serializable_serialize ((DeeSerializable*) _tmp1_);
	result = _tmp2_;
	return result;
}


static GVariant*
unity_internal_default_scope_dbus_impl_real_get_filters (UnityProtocolScopeService* base)
{
	GVariant* result;
	UnityInternalDefaultScopeDBusImpl* self;
	DeeSerializableModel* _tmp0_;
	DeeSerializableModel* _tmp1_;
	GVariant* _tmp2_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_tmp0_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self);
	_tmp1_ = _tmp0_;
	_tmp2_ = dee_serializable_serialize ((DeeSerializable*) _tmp1_);
	result = _tmp2_;
	return result;
}


static GHashTable*
unity_internal_default_scope_dbus_impl_real_get_hints (UnityProtocolScopeService* base)
{
	GHashTable* result;
	UnityInternalDefaultScopeDBusImpl* self;
	GHashTable* _tmp0_;
	self = (UnityInternalDefaultScopeDBusImpl*) base;
	_tmp0_ = g_hash_table_new_full (NULL, NULL, _g_free0_, _g_variant_unref0_);
	result = _tmp0_;
	return result;
}


static void
_g_object_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_object_unref (var), NULL));
}


static GObject *
unity_internal_default_scope_dbus_impl_constructor (GType type,
                                                    guint n_construct_properties,
                                                    GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	UnityInternalDefaultScopeDBusImpl * self;
	GRand* _tmp0_;
	GHashFunc _tmp1_;
	GEqualFunc _tmp2_;
	GHashTable* _tmp3_;
	parent_class = G_OBJECT_CLASS (unity_internal_default_scope_dbus_impl_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL, UnityInternalDefaultScopeDBusImpl);
	_tmp0_ = g_rand_new ();
	_g_rand_free0 (self->priv->_rand);
	self->priv->_rand = _tmp0_;
	_tmp1_ = g_str_hash;
	_tmp2_ = g_str_equal;
	_tmp3_ = g_hash_table_new_full (_tmp1_, _tmp2_, _g_free0_, _g_object_unref0_);
	_g_hash_table_unref0 (self->priv->_channels);
	self->priv->_channels = _tmp3_;
	unity_internal_default_scope_dbus_impl_create_models (self);
	return obj;
}


static void
unity_internal_default_scope_dbus_impl_class_init (UnityInternalDefaultScopeDBusImplClass * klass)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	gchar** langs = NULL;
	gchar** _tmp2_;
	gchar** _tmp3_;
	gint langs_length1;
	gint _langs_size_;
	gchar** _tmp4_;
	gint _tmp4__length1;
	const gchar* _tmp5_;
	gchar* _tmp6_;
	unity_internal_default_scope_dbus_impl_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityInternalDefaultScopeDBusImplPrivate));
	((GObjectClass *) klass)->dispose = (void (*) (GObject *)) unity_internal_default_scope_dbus_impl_real_dispose;
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_internal_default_scope_dbus_impl_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_internal_default_scope_dbus_impl_set_property;
	G_OBJECT_CLASS (klass)->constructor = unity_internal_default_scope_dbus_impl_constructor;
	G_OBJECT_CLASS (klass)->finalize = unity_internal_default_scope_dbus_impl_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_OWNER_PROPERTY, unity_internal_default_scope_dbus_impl_properties[UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_OWNER_PROPERTY] = g_param_spec_object ("owner", "owner", "owner", UNITY_TYPE_ABSTRACT_SCOPE, G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_CATEGORIES_MODEL_PROPERTY, unity_internal_default_scope_dbus_impl_properties[UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_CATEGORIES_MODEL_PROPERTY] = g_param_spec_object ("categories-model", "categories-model", "categories-model", dee_serializable_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_FILTERS_MODEL_PROPERTY, unity_internal_default_scope_dbus_impl_properties[UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_FILTERS_MODEL_PROPERTY] = g_param_spec_object ("filters-model", "filters-model", "filters-model", dee_serializable_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_VIEW_TYPE_PROPERTY, unity_internal_default_scope_dbus_impl_properties[UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_VIEW_TYPE_PROPERTY] = g_param_spec_enum ("view-type", "view-type", "view-type", UNITY_PROTOCOL_TYPE_VIEW_TYPE, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	unity_internal_default_scope_dbus_impl_signals[UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_ON_TIMEOUT_REACHED_SIGNAL] = g_signal_new ("on-timeout-reached", UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
	unity_internal_default_scope_dbus_impl_signals[UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_ON_UNEXPORT_TIMEOUT_REACHED_SIGNAL] = g_signal_new ("on-unexport-timeout-reached", UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
	_tmp0_ = g_getenv (UNITY_INTERNAL_VAR_SYNC_DBUS_SEARCHES);
	unity_internal_default_scope_dbus_impl_force_sync_requests = _tmp0_ != NULL;
	_tmp1_ = g_getenv (UNITY_INTERNAL_VAR_MEASURED_SEARCHES);
	unity_internal_default_scope_dbus_impl_measure_requests = _tmp1_ != NULL;
	_tmp3_ = _tmp2_ = g_get_language_names ();
	langs = _tmp3_;
	langs_length1 = _vala_array_length (_tmp2_);
	_langs_size_ = langs_length1;
	_tmp4_ = langs;
	_tmp4__length1 = langs_length1;
	_tmp5_ = _tmp4_[0];
	_tmp6_ = g_strdup (_tmp5_);
	_g_free0 (unity_internal_default_scope_dbus_impl_default_locale);
	unity_internal_default_scope_dbus_impl_default_locale = _tmp6_;
}


static void
unity_internal_default_scope_dbus_impl_unity_protocol_scope_service_interface_init (UnityProtocolScopeServiceIface * iface)
{
	unity_internal_default_scope_dbus_impl_unity_protocol_scope_service_parent_iface = g_type_interface_peek_parent (iface);
	iface->activate = (void (*) (UnityProtocolScopeService *, const gchar*, GVariant**, int, guint, GHashTable*, GCancellable*, GAsyncReadyCallback, gpointer)) unity_internal_default_scope_dbus_impl_real_activate;
	iface->activate_finish = (void (*) (UnityProtocolScopeService *, GAsyncResult*, UnityProtocolActivationReplyRaw*, GError**)) unity_internal_default_scope_dbus_impl_real_activate_finish;
	iface->search = (void (*) (UnityProtocolScopeService *, const gchar*, const gchar*, GHashTable*, GCancellable*, GAsyncReadyCallback, gpointer)) unity_internal_default_scope_dbus_impl_real_search;
	iface->search_finish = (GHashTable* (*) (UnityProtocolScopeService *, GAsyncResult*, GError**)) unity_internal_default_scope_dbus_impl_real_search_finish;
	iface->open_channel = (void (*) (UnityProtocolScopeService *, guint, GHashTable*, GCancellable*, const char*, GAsyncReadyCallback, gpointer)) unity_internal_default_scope_dbus_impl_real_open_channel;
	iface->open_channel_finish = (gchar* (*) (UnityProtocolScopeService *, GAsyncResult*, GHashTable* *, GError**)) unity_internal_default_scope_dbus_impl_real_open_channel_finish;
	iface->close_channel = (void (*) (UnityProtocolScopeService *, const gchar*, GHashTable*, GCancellable*, GAsyncReadyCallback, gpointer)) unity_internal_default_scope_dbus_impl_real_close_channel;
	iface->close_channel_finish = (void (*) (UnityProtocolScopeService *, GAsyncResult*, GError**)) unity_internal_default_scope_dbus_impl_real_close_channel_finish;
	iface->set_view_type = (void (*) (UnityProtocolScopeService *, guint, GAsyncReadyCallback, gpointer)) unity_internal_default_scope_dbus_impl_real_set_view_type;
	iface->set_view_type_finish = (void (*) (UnityProtocolScopeService *, GAsyncResult*, GError**)) unity_internal_default_scope_dbus_impl_real_set_view_type_finish;
	iface->push_results = (void (*) (UnityProtocolScopeService *, const gchar*, const gchar*, const gchar*, GVariant*, gchar**, int, GCancellable*, GAsyncReadyCallback, gpointer)) unity_internal_default_scope_dbus_impl_real_push_results;
	iface->push_results_finish = (GHashTable* (*) (UnityProtocolScopeService *, GAsyncResult*, GError**)) unity_internal_default_scope_dbus_impl_real_push_results_finish;
	iface->get_protocol_version = unity_internal_default_scope_dbus_impl_real_get_protocol_version;
	iface->get_visible = unity_internal_default_scope_dbus_impl_real_get_visible;
	iface->get_is_master = unity_internal_default_scope_dbus_impl_real_get_is_master;
	iface->get_search_hint = unity_internal_default_scope_dbus_impl_real_get_search_hint;
	iface->get_metadata = unity_internal_default_scope_dbus_impl_real_get_metadata;
	iface->get_optional_metadata = unity_internal_default_scope_dbus_impl_real_get_optional_metadata;
	iface->get_categories = unity_internal_default_scope_dbus_impl_real_get_categories;
	iface->get_filters = unity_internal_default_scope_dbus_impl_real_get_filters;
	iface->get_hints = unity_internal_default_scope_dbus_impl_real_get_hints;
}


static void
unity_internal_default_scope_dbus_impl_unity_internal_scope_dbus_impl_interface_init (UnityInternalScopeDBusImplIface * iface)
{
	unity_internal_default_scope_dbus_impl_unity_internal_scope_dbus_impl_parent_iface = g_type_interface_peek_parent (iface);
	iface->export = (void (*) (UnityInternalScopeDBusImpl *, GError**)) unity_internal_default_scope_dbus_impl_real_export;
	iface->unexport = (void (*) (UnityInternalScopeDBusImpl *)) unity_internal_default_scope_dbus_impl_real_unexport;
	iface->queue_property_notification = (void (*) (UnityInternalScopeDBusImpl *, const gchar*, GVariant*)) unity_internal_default_scope_dbus_impl_real_queue_property_notification;
	iface->get_categories_model = unity_internal_default_scope_dbus_impl_real_get_categories_model;
	iface->set_categories_model = unity_internal_default_scope_dbus_impl_real_set_categories_model;
	iface->get_filters_model = unity_internal_default_scope_dbus_impl_real_get_filters_model;
	iface->set_filters_model = unity_internal_default_scope_dbus_impl_real_set_filters_model;
}


static void
unity_internal_default_scope_dbus_impl_instance_init (UnityInternalDefaultScopeDBusImpl * self)
{
	self->priv = UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_GET_PRIVATE (self);
}


static void
unity_internal_default_scope_dbus_impl_finalize (GObject * obj)
{
	UnityInternalDefaultScopeDBusImpl * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL, UnityInternalDefaultScopeDBusImpl);
	_g_hash_table_unref0 (self->priv->_channels);
	_g_free0 (self->priv->_dbus_name);
	_g_object_unref0 (self->priv->_dbus_connection);
	_g_rand_free0 (self->priv->_rand);
	_g_object_unref0 (self->priv->_categories_model);
	_g_object_unref0 (self->priv->_filters_model);
	_g_variant_builder_unref0 (self->priv->changed_props);
	G_OBJECT_CLASS (unity_internal_default_scope_dbus_impl_parent_class)->finalize (obj);
}


GType
unity_internal_default_scope_dbus_impl_get_type (void)
{
	static volatile gsize unity_internal_default_scope_dbus_impl_type_id__volatile = 0;
	if (g_once_init_enter (&unity_internal_default_scope_dbus_impl_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityInternalDefaultScopeDBusImplClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_internal_default_scope_dbus_impl_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityInternalDefaultScopeDBusImpl), 0, (GInstanceInitFunc) unity_internal_default_scope_dbus_impl_instance_init, NULL };
		static const GInterfaceInfo unity_protocol_scope_service_info = { (GInterfaceInitFunc) unity_internal_default_scope_dbus_impl_unity_protocol_scope_service_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo unity_internal_scope_dbus_impl_info = { (GInterfaceInitFunc) unity_internal_default_scope_dbus_impl_unity_internal_scope_dbus_impl_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		GType unity_internal_default_scope_dbus_impl_type_id;
		unity_internal_default_scope_dbus_impl_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityInternalDefaultScopeDBusImpl", &g_define_type_info, 0);
		g_type_add_interface_static (unity_internal_default_scope_dbus_impl_type_id, UNITY_PROTOCOL_TYPE_SCOPE_SERVICE, &unity_protocol_scope_service_info);
		g_type_add_interface_static (unity_internal_default_scope_dbus_impl_type_id, UNITY_INTERNAL_TYPE_SCOPE_DBUS_IMPL, &unity_internal_scope_dbus_impl_info);
		g_once_init_leave (&unity_internal_default_scope_dbus_impl_type_id__volatile, unity_internal_default_scope_dbus_impl_type_id);
	}
	return unity_internal_default_scope_dbus_impl_type_id__volatile;
}


static void
_vala_unity_internal_default_scope_dbus_impl_get_property (GObject * object,
                                                           guint property_id,
                                                           GValue * value,
                                                           GParamSpec * pspec)
{
	UnityInternalDefaultScopeDBusImpl * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL, UnityInternalDefaultScopeDBusImpl);
	switch (property_id) {
		case UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_OWNER_PROPERTY:
		g_value_set_object (value, unity_internal_default_scope_dbus_impl_get_owner (self));
		break;
		case UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_CATEGORIES_MODEL_PROPERTY:
		g_value_set_object (value, unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self));
		break;
		case UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_FILTERS_MODEL_PROPERTY:
		g_value_set_object (value, unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self));
		break;
		case UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_VIEW_TYPE_PROPERTY:
		g_value_set_enum (value, unity_internal_default_scope_dbus_impl_get_view_type (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_internal_default_scope_dbus_impl_set_property (GObject * object,
                                                           guint property_id,
                                                           const GValue * value,
                                                           GParamSpec * pspec)
{
	UnityInternalDefaultScopeDBusImpl * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL, UnityInternalDefaultScopeDBusImpl);
	switch (property_id) {
		case UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_OWNER_PROPERTY:
		unity_internal_default_scope_dbus_impl_set_owner (self, g_value_get_object (value));
		break;
		case UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_CATEGORIES_MODEL_PROPERTY:
		unity_internal_scope_dbus_impl_set_categories_model ((UnityInternalScopeDBusImpl*) self, g_value_get_object (value));
		break;
		case UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_FILTERS_MODEL_PROPERTY:
		unity_internal_scope_dbus_impl_set_filters_model ((UnityInternalScopeDBusImpl*) self, g_value_get_object (value));
		break;
		case UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_VIEW_TYPE_PROPERTY:
		unity_internal_default_scope_dbus_impl_set_view_type (self, g_value_get_enum (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


UnityInternalOwnedName*
unity_internal_owned_name_dup (const UnityInternalOwnedName* self)
{
	UnityInternalOwnedName* dup;
	dup = g_new0 (UnityInternalOwnedName, 1);
	memcpy (dup, self, sizeof (UnityInternalOwnedName));
	return dup;
}


void
unity_internal_owned_name_free (UnityInternalOwnedName* self)
{
	g_free (self);
}


GType
unity_internal_owned_name_get_type (void)
{
	static volatile gsize unity_internal_owned_name_type_id__volatile = 0;
	if (g_once_init_enter (&unity_internal_owned_name_type_id__volatile)) {
		GType unity_internal_owned_name_type_id;
		unity_internal_owned_name_type_id = g_boxed_type_register_static ("UnityInternalOwnedName", (GBoxedCopyFunc) unity_internal_owned_name_dup, (GBoxedFreeFunc) unity_internal_owned_name_free);
		g_once_init_leave (&unity_internal_owned_name_type_id__volatile, unity_internal_owned_name_type_id);
	}
	return unity_internal_owned_name_type_id__volatile;
}


static void
_unity_internal_owned_name_free0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (unity_internal_owned_name_free (var), NULL));
}


static UnityInternalScopeDBusNameManager*
unity_internal_scope_dbus_name_manager_construct (GType object_type)
{
	UnityInternalScopeDBusNameManager * self = NULL;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	self = (UnityInternalScopeDBusNameManager*) g_object_new (object_type, NULL);
	_tmp0_ = g_str_hash;
	_tmp1_ = g_str_equal;
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, _unity_internal_owned_name_free0_);
	_g_hash_table_unref0 (self->priv->owned_names);
	self->priv->owned_names = _tmp2_;
	return self;
}


static UnityInternalScopeDBusNameManager*
unity_internal_scope_dbus_name_manager_new (void)
{
	return unity_internal_scope_dbus_name_manager_construct (UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER);
}


UnityInternalScopeDBusNameManager*
unity_internal_scope_dbus_name_manager_get_default (void)
{
	UnityInternalScopeDBusNameManager* result = NULL;
	UnityInternalScopeDBusNameManager* _tmp0_;
	UnityInternalScopeDBusNameManager* _tmp2_;
	UnityInternalScopeDBusNameManager* _tmp3_;
	_tmp0_ = unity_internal_scope_dbus_name_manager_name_manager;
	if (_tmp0_ == NULL) {
		UnityInternalScopeDBusNameManager* _tmp1_;
		_tmp1_ = unity_internal_scope_dbus_name_manager_new ();
		_g_object_unref0 (unity_internal_scope_dbus_name_manager_name_manager);
		unity_internal_scope_dbus_name_manager_name_manager = _tmp1_;
	}
	_tmp2_ = unity_internal_scope_dbus_name_manager_name_manager;
	_tmp3_ = _g_object_ref0 (_tmp2_);
	result = _tmp3_;
	return result;
}


static gpointer
_unity_internal_owned_name_dup0 (gpointer self)
{
	return self ? unity_internal_owned_name_dup (self) : NULL;
}


void
unity_internal_scope_dbus_name_manager_own_name (UnityInternalScopeDBusNameManager* self,
                                                 const gchar* dbus_name)
{
	UnityInternalOwnedName* info = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	UnityInternalOwnedName* _tmp2_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (dbus_name != NULL);
	_tmp0_ = self->priv->owned_names;
	_tmp1_ = g_hash_table_lookup (_tmp0_, dbus_name);
	info = (UnityInternalOwnedName*) _tmp1_;
	_tmp2_ = info;
	if (_tmp2_ != NULL) {
		UnityInternalOwnedName* _tmp3_;
		UnityInternalOwnedName* _tmp4_;
		gint _tmp5_;
		_tmp3_ = info;
		_tmp4_ = info;
		_tmp5_ = (*_tmp4_).ref_count;
		(*_tmp4_).ref_count = _tmp5_ + 1;
	} else {
		GHashTable* _tmp6_;
		gchar* _tmp7_;
		UnityInternalOwnedName _tmp8_ = {0};
		UnityInternalOwnedName* _tmp9_;
		_tmp6_ = self->priv->owned_names;
		_tmp7_ = g_strdup (dbus_name);
		_tmp8_.ref_count = 1;
		_tmp8_.bus_name_own_handle = (guint) 0;
		_tmp9_ = _unity_internal_owned_name_dup0 (&_tmp8_);
		g_hash_table_insert (_tmp6_, _tmp7_, _tmp9_);
	}
}


void
unity_internal_scope_dbus_name_manager_unown_name (UnityInternalScopeDBusNameManager* self,
                                                   const gchar* dbus_name)
{
	UnityInternalOwnedName* info = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	UnityInternalOwnedName* _tmp2_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (dbus_name != NULL);
	_tmp0_ = self->priv->owned_names;
	_tmp1_ = g_hash_table_lookup (_tmp0_, dbus_name);
	info = (UnityInternalOwnedName*) _tmp1_;
	_tmp2_ = info;
	if (_tmp2_ != NULL) {
		UnityInternalOwnedName* _tmp3_;
		UnityInternalOwnedName* _tmp4_;
		gint _tmp5_;
		UnityInternalOwnedName* _tmp6_;
		gint _tmp7_;
		_tmp3_ = info;
		_tmp4_ = info;
		_tmp5_ = (*_tmp4_).ref_count;
		(*_tmp4_).ref_count = _tmp5_ - 1;
		_tmp6_ = info;
		_tmp7_ = (*_tmp6_).ref_count;
		if (_tmp7_ <= 0) {
			UnityInternalOwnedName* _tmp8_;
			guint _tmp9_;
			GHashTable* _tmp14_;
			_tmp8_ = info;
			_tmp9_ = (*_tmp8_).bus_name_own_handle;
			if (_tmp9_ != ((guint) 0)) {
				UnityInternalOwnedName* _tmp10_;
				guint _tmp11_;
				gchar* _tmp12_;
				gchar* _tmp13_;
				_tmp10_ = info;
				_tmp11_ = (*_tmp10_).bus_name_own_handle;
				g_bus_unown_name (_tmp11_);
				_tmp12_ = g_strconcat ("name_unowned::", dbus_name, NULL);
				_tmp13_ = _tmp12_;
				g_signal_emit_by_name (self, _tmp13_, G_TYPE_NONE, NULL);
				_g_free0 (_tmp13_);
			}
			_tmp14_ = self->priv->owned_names;
			g_hash_table_remove (_tmp14_, dbus_name);
		}
	}
}


static void
unity_internal_scope_dbus_name_manager_acquire_names_data_free (gpointer _data)
{
	UnityInternalScopeDbusNameManagerAcquireNamesData* _data_;
	_data_ = _data;
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalScopeDbusNameManagerAcquireNamesData, _data_);
}


static void
unity_internal_scope_dbus_name_manager_acquire_names_async_ready_wrapper (GObject *source_object,
                                                                          GAsyncResult *res,
                                                                          void *user_data)
{
	UnityInternalScopeDbusNameManagerAcquireNamesData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


void
unity_internal_scope_dbus_name_manager_acquire_names (UnityInternalScopeDBusNameManager* self,
                                                      GAsyncReadyCallback _callback_,
                                                      gpointer _user_data_)
{
	UnityInternalScopeDbusNameManagerAcquireNamesData* _data_;
	UnityInternalScopeDBusNameManager* _tmp0_;
	_data_ = g_slice_new0 (UnityInternalScopeDbusNameManagerAcquireNamesData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, unity_internal_scope_dbus_name_manager_acquire_names_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_scope_dbus_name_manager_acquire_names_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	unity_internal_scope_dbus_name_manager_acquire_names_co (_data_);
}


gboolean
unity_internal_scope_dbus_name_manager_acquire_names_finish (UnityInternalScopeDBusNameManager* self,
                                                             GAsyncResult* _res_)
{
	gboolean result;
	UnityInternalScopeDbusNameManagerAcquireNamesData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
	result = _data_->result;
	return result;
}


static Block15Data*
block15_data_ref (Block15Data* _data15_)
{
	g_atomic_int_inc (&_data15_->_ref_count_);
	return _data15_;
}


static void
block15_data_unref (void * _userdata_)
{
	Block15Data* _data15_;
	_data15_ = (Block15Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data15_->_ref_count_)) {
		UnityInternalScopeDBusNameManager* self;
		self = _data15_->self;
		_g_object_unref0 (self);
		g_slice_free (Block15Data, _data15_);
	}
}


static Block16Data*
block16_data_ref (Block16Data* _data16_)
{
	g_atomic_int_inc (&_data16_->_ref_count_);
	return _data16_;
}


static void
block16_data_unref (void * _userdata_)
{
	Block16Data* _data16_;
	_data16_ = (Block16Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data16_->_ref_count_)) {
		UnityInternalScopeDBusNameManager* self;
		self = _data16_->_data15_->self;
		_g_free0 (_data16_->dbus_name);
		block15_data_unref (_data16_->_data15_);
		_data16_->_data15_ = NULL;
		g_slice_free (Block16Data, _data16_);
	}
}


static gboolean
_unity_internal_scope_dbus_name_manager_acquire_names_co_gsource_func (gpointer self)
{
	gboolean result;
	result = unity_internal_scope_dbus_name_manager_acquire_names_co (self);
	return result;
}


static void
__lambda46_ (Block16Data* _data16_)
{
	Block15Data* _data15_;
	UnityInternalScopeDBusNameManager* self;
	_data15_ = _data16_->_data15_;
	self = _data15_->self;
	_data15_->count = _data15_->count - 1;
	if (_data15_->count <= 0) {
		g_idle_add_full (G_PRIORITY_DEFAULT, _unity_internal_scope_dbus_name_manager_acquire_names_co_gsource_func, _data15_->_async_data_, NULL);
	}
}


static void
___lambda46__gbus_name_acquired_callback (GDBusConnection* connection,
                                          const gchar* name,
                                          gpointer self)
{
	__lambda46_ (self);
}


static const gchar*
string_to_string (const gchar* self)
{
	const gchar* result = NULL;
	g_return_val_if_fail (self != NULL, NULL);
	result = self;
	return result;
}


static void
__lambda47_ (Block16Data* _data16_)
{
	Block15Data* _data15_;
	UnityInternalScopeDBusNameManager* self;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	_data15_ = _data16_->_data15_;
	self = _data15_->self;
	_data15_->failures = _data15_->failures + 1;
	_tmp0_ = string_to_string (_data16_->dbus_name);
	_tmp1_ = g_strconcat ("Unable to own DBus name '", _tmp0_, "'", NULL);
	_tmp2_ = _tmp1_;
	g_warning ("unity-scope-dbus-impl.vala:940: %s", _tmp2_);
	_g_free0 (_tmp2_);
	_data15_->count = _data15_->count - 1;
	if (_data15_->count <= 0) {
		g_idle_add_full (G_PRIORITY_DEFAULT, _unity_internal_scope_dbus_name_manager_acquire_names_co_gsource_func, _data15_->_async_data_, NULL);
	}
}


static void
___lambda47__gbus_name_lost_callback (GDBusConnection* connection,
                                      const gchar* name,
                                      gpointer self)
{
	__lambda47_ (self);
}


static void
__lambda45_ (Block15Data* _data15_,
             const gchar* dbus_name,
             UnityInternalOwnedName* info)
{
	UnityInternalScopeDBusNameManager* self;
	Block16Data* _data16_;
	gchar* _tmp0_;
	guint _tmp1_;
	self = _data15_->self;
	g_return_if_fail (dbus_name != NULL);
	_data16_ = g_slice_new0 (Block16Data);
	_data16_->_ref_count_ = 1;
	_data16_->_data15_ = block15_data_ref (_data15_);
	_tmp0_ = g_strdup (dbus_name);
	_g_free0 (_data16_->dbus_name);
	_data16_->dbus_name = _tmp0_;
	_tmp1_ = (*info).bus_name_own_handle;
	if (_tmp1_ != ((guint) 0)) {
		block16_data_unref (_data16_);
		_data16_ = NULL;
		return;
	}
	_data15_->count = _data15_->count + 1;
	(*info).bus_name_own_handle = g_bus_own_name_with_closures (G_BUS_TYPE_SESSION, _data16_->dbus_name, G_BUS_NAME_OWNER_FLAGS_NONE, (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)), (GClosure*) ((___lambda46__gbus_name_acquired_callback == NULL) ? NULL : g_cclosure_new ((GCallback) ___lambda46__gbus_name_acquired_callback, block16_data_ref (_data16_), (GClosureNotify) block16_data_unref)), (GClosure*) ((___lambda47__gbus_name_lost_callback == NULL) ? NULL : g_cclosure_new ((GCallback) ___lambda47__gbus_name_lost_callback, block16_data_ref (_data16_), (GClosureNotify) block16_data_unref)));
	block16_data_unref (_data16_);
	_data16_ = NULL;
}


static void
___lambda45__gh_func (gconstpointer key,
                      gconstpointer value,
                      gpointer self)
{
	__lambda45_ (self, (const gchar*) key, (UnityInternalOwnedName*) value);
}


static gboolean
unity_internal_scope_dbus_name_manager_acquire_names_co (UnityInternalScopeDbusNameManagerAcquireNamesData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_data15_ = g_slice_new0 (Block15Data);
	_data_->_data15_->_ref_count_ = 1;
	_data_->_data15_->self = g_object_ref (_data_->self);
	_data_->_data15_->_async_data_ = _data_;
	_data_->_data15_->count = 0;
	_data_->_data15_->failures = 0;
	_data_->_tmp0_ = _data_->self->priv->owned_names;
	g_hash_table_foreach (_data_->_tmp0_, ___lambda45__gh_func, _data_->_data15_);
	_data_->_state_ = 1;
	return FALSE;
	_state_1:
	;
	_data_->result = _data_->_data15_->failures == 0;
	block15_data_unref (_data_->_data15_);
	_data_->_data15_ = NULL;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_internal_scope_dbus_name_manager_class_init (UnityInternalScopeDBusNameManagerClass * klass)
{
	unity_internal_scope_dbus_name_manager_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityInternalScopeDBusNameManagerPrivate));
	G_OBJECT_CLASS (klass)->finalize = unity_internal_scope_dbus_name_manager_finalize;
	unity_internal_scope_dbus_name_manager_signals[UNITY_INTERNAL_SCOPE_DBUS_NAME_MANAGER_NAME_UNOWNED_SIGNAL] = g_signal_new ("name-unowned", UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER, G_SIGNAL_RUN_LAST | G_SIGNAL_DETAILED, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
}


static void
unity_internal_scope_dbus_name_manager_instance_init (UnityInternalScopeDBusNameManager * self)
{
	self->priv = UNITY_INTERNAL_SCOPE_DBUS_NAME_MANAGER_GET_PRIVATE (self);
}


static void
unity_internal_scope_dbus_name_manager_finalize (GObject * obj)
{
	UnityInternalScopeDBusNameManager * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER, UnityInternalScopeDBusNameManager);
	_g_hash_table_unref0 (self->priv->owned_names);
	G_OBJECT_CLASS (unity_internal_scope_dbus_name_manager_parent_class)->finalize (obj);
}


GType
unity_internal_scope_dbus_name_manager_get_type (void)
{
	static volatile gsize unity_internal_scope_dbus_name_manager_type_id__volatile = 0;
	if (g_once_init_enter (&unity_internal_scope_dbus_name_manager_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityInternalScopeDBusNameManagerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_internal_scope_dbus_name_manager_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityInternalScopeDBusNameManager), 0, (GInstanceInitFunc) unity_internal_scope_dbus_name_manager_instance_init, NULL };
		GType unity_internal_scope_dbus_name_manager_type_id;
		unity_internal_scope_dbus_name_manager_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityInternalScopeDBusNameManager", &g_define_type_info, 0);
		g_once_init_leave (&unity_internal_scope_dbus_name_manager_type_id__volatile, unity_internal_scope_dbus_name_manager_type_id);
	}
	return unity_internal_scope_dbus_name_manager_type_id__volatile;
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



