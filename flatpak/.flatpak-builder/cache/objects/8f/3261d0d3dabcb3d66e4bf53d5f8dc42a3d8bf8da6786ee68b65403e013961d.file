/* scope-loader.c generated by valac 0.40.11, the Vala compiler
 * generated from scope-loader.vala, do not modify */

/* -*- mode: vala; c-basic-offset: 2; indent-tabs-mode: nil -*- */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <unity.h>

#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_option_context_free0(var) ((var == NULL) ? NULL : (var = (g_option_context_free (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))


extern gchar* options_group;
gchar* options_group = NULL;
extern gchar* options_module;
gchar* options_module = NULL;

gint _vala_main (gchar** args,
                 int args_length1);

const GOptionEntry options[3] = {{"group", 'g', 0, G_OPTION_ARG_STRING, &options_group, "Scope group configuration", NULL}, {"module", 'm', 0, G_OPTION_ARG_STRING, &options_module, "Scope shared library (for testing)", NULL}, {NULL}};

gint
_vala_main (gchar** args,
            int args_length1)
{
	gint result = 0;
	GOptionContext* opt_context = NULL;
	GOptionContext* _tmp0_;
	GOptionContext* _tmp1_;
	UnityScopeLoader* loader = NULL;
	UnityScopeLoader* _tmp5_;
	GError * _inner_error_ = NULL;
	g_set_prgname ("unity-scope-loader");
	_tmp0_ = g_option_context_new ("[scope-ids]");
	opt_context = _tmp0_;
	_tmp1_ = opt_context;
	g_option_context_add_main_entries (_tmp1_, options, NULL);
	if (args_length1 <= 1) {
		GOptionContext* _tmp2_;
		gchar* _tmp3_;
		gchar* _tmp4_;
		_tmp2_ = opt_context;
		_tmp3_ = g_option_context_get_help (_tmp2_, TRUE, NULL);
		_tmp4_ = _tmp3_;
		g_print ("%s\n", _tmp4_);
		_g_free0 (_tmp4_);
		result = 0;
		_g_option_context_free0 (opt_context);
		return result;
	}
	_tmp5_ = unity_scope_loader_new ();
	loader = _tmp5_;
	{
		GOptionContext* _tmp6_;
		const gchar* _tmp7_;
		_tmp6_ = opt_context;
		g_option_context_parse (_tmp6_, &args_length1, &args, &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch0_g_error;
		}
		_tmp7_ = options_group;
		if (_tmp7_ != NULL) {
			UnityScopeLoader* _tmp8_;
			const gchar* _tmp9_;
			_tmp8_ = loader;
			_tmp9_ = options_group;
			unity_scope_loader_load_group (_tmp8_, _tmp9_, &_inner_error_);
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				goto __catch0_g_error;
			}
		} else {
			const gchar* _tmp10_;
			_tmp10_ = options_module;
			if (_tmp10_ != NULL) {
				UnityScopeLoader* _tmp11_;
				const gchar* _tmp12_;
				_tmp11_ = loader;
				_tmp12_ = options_module;
				unity_scope_loader_load_module (_tmp11_, _tmp12_, "C", &_inner_error_);
				if (G_UNLIKELY (_inner_error_ != NULL)) {
					goto __catch0_g_error;
				}
			} else {
				{
					gint i = 0;
					i = 1;
					{
						gboolean _tmp13_ = FALSE;
						_tmp13_ = TRUE;
						while (TRUE) {
							gint _tmp15_;
							gchar* scope_id = NULL;
							gint _tmp16_;
							const gchar* _tmp17_;
							gchar* _tmp18_;
							UnityScopeLoader* _tmp19_;
							const gchar* _tmp20_;
							if (!_tmp13_) {
								gint _tmp14_;
								_tmp14_ = i;
								i = _tmp14_ + 1;
							}
							_tmp13_ = FALSE;
							_tmp15_ = i;
							if (!(_tmp15_ < args_length1)) {
								break;
							}
							_tmp16_ = i;
							_tmp17_ = args[_tmp16_];
							_tmp18_ = g_strdup (_tmp17_);
							scope_id = _tmp18_;
							_tmp19_ = loader;
							_tmp20_ = scope_id;
							unity_scope_loader_load_scope (_tmp19_, _tmp20_, &_inner_error_);
							if (G_UNLIKELY (_inner_error_ != NULL)) {
								_g_free0 (scope_id);
								goto __catch0_g_error;
							}
							_g_free0 (scope_id);
						}
					}
				}
			}
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* err = NULL;
		const gchar* _tmp21_;
		err = _inner_error_;
		_inner_error_ = NULL;
		_tmp21_ = err->message;
		g_error ("scope-loader.vala:59: %s", _tmp21_);
		_g_error_free0 (err);
	}
	__finally0:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		gint _tmp22_ = -1;
		_g_object_unref0 (loader);
		_g_option_context_free0 (opt_context);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return _tmp22_;
	}
	unity_scope_dbus_connector_run ();
	result = 0;
	_g_object_unref0 (loader);
	_g_option_context_free0 (opt_context);
	return result;
}


int
main (int argc,
      char ** argv)
{
	return _vala_main (argv, argc);
}



