/* Label.c generated by valac 0.40.11, the Vala compiler
 * generated from Label.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gobject/gvaluecollector.h>


#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
typedef struct _ObjectsLabelPrivate ObjectsLabelPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _ObjectsParamSpecLabel ObjectsParamSpecLabel;

struct _ObjectsLabel {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsLabelPrivate * priv;
	gint id;
	gchar* name;
	gchar* color;
};

struct _ObjectsLabelClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsLabel *self);
};

struct _ObjectsParamSpecLabel {
	GParamSpec parent_instance;
};


static gpointer objects_label_parent_class = NULL;

gpointer objects_label_ref (gpointer instance);
void objects_label_unref (gpointer instance);
GParamSpec* objects_param_spec_label (const gchar* name,
                                      const gchar* nick,
                                      const gchar* blurb,
                                      GType object_type,
                                      GParamFlags flags);
void objects_value_set_label (GValue* value,
                              gpointer v_object);
void objects_value_take_label (GValue* value,
                               gpointer v_object);
gpointer objects_value_get_label (const GValue* value);
GType objects_label_get_type (void) G_GNUC_CONST;
ObjectsLabel* objects_label_new (gint id,
                                 const gchar* name,
                                 const gchar* color);
ObjectsLabel* objects_label_construct (GType object_type,
                                       gint id,
                                       const gchar* name,
                                       const gchar* color);
static void objects_label_finalize (ObjectsLabel * obj);


ObjectsLabel*
objects_label_construct (GType object_type,
                         gint id,
                         const gchar* name,
                         const gchar* color)
{
	ObjectsLabel* self = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
#line 27 "/run/build/planner/src/Objects/Label.vala"
	g_return_val_if_fail (name != NULL, NULL);
#line 27 "/run/build/planner/src/Objects/Label.vala"
	g_return_val_if_fail (color != NULL, NULL);
#line 27 "/run/build/planner/src/Objects/Label.vala"
	self = (ObjectsLabel*) g_type_create_instance (object_type);
#line 30 "/run/build/planner/src/Objects/Label.vala"
	self->id = id;
#line 31 "/run/build/planner/src/Objects/Label.vala"
	_tmp0_ = g_strdup (name);
#line 31 "/run/build/planner/src/Objects/Label.vala"
	_g_free0 (self->name);
#line 31 "/run/build/planner/src/Objects/Label.vala"
	self->name = _tmp0_;
#line 32 "/run/build/planner/src/Objects/Label.vala"
	_tmp1_ = g_strdup (color);
#line 32 "/run/build/planner/src/Objects/Label.vala"
	_g_free0 (self->color);
#line 32 "/run/build/planner/src/Objects/Label.vala"
	self->color = _tmp1_;
#line 27 "/run/build/planner/src/Objects/Label.vala"
	return self;
#line 122 "Label.c"
}


ObjectsLabel*
objects_label_new (gint id,
                   const gchar* name,
                   const gchar* color)
{
#line 27 "/run/build/planner/src/Objects/Label.vala"
	return objects_label_construct (OBJECTS_TYPE_LABEL, id, name, color);
#line 133 "Label.c"
}


static void
objects_value_label_init (GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Label.vala"
	value->data[0].v_pointer = NULL;
#line 142 "Label.c"
}


static void
objects_value_label_free_value (GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Label.vala"
	if (value->data[0].v_pointer) {
#line 22 "/run/build/planner/src/Objects/Label.vala"
		objects_label_unref (value->data[0].v_pointer);
#line 153 "Label.c"
	}
}


static void
objects_value_label_copy_value (const GValue* src_value,
                                GValue* dest_value)
{
#line 22 "/run/build/planner/src/Objects/Label.vala"
	if (src_value->data[0].v_pointer) {
#line 22 "/run/build/planner/src/Objects/Label.vala"
		dest_value->data[0].v_pointer = objects_label_ref (src_value->data[0].v_pointer);
#line 166 "Label.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Label.vala"
		dest_value->data[0].v_pointer = NULL;
#line 170 "Label.c"
	}
}


static gpointer
objects_value_label_peek_pointer (const GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Label.vala"
	return value->data[0].v_pointer;
#line 180 "Label.c"
}


static gchar*
objects_value_label_collect_value (GValue* value,
                                   guint n_collect_values,
                                   GTypeCValue* collect_values,
                                   guint collect_flags)
{
#line 22 "/run/build/planner/src/Objects/Label.vala"
	if (collect_values[0].v_pointer) {
#line 192 "Label.c"
		ObjectsLabel * object;
		object = collect_values[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Label.vala"
		if (object->parent_instance.g_class == NULL) {
#line 22 "/run/build/planner/src/Objects/Label.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 199 "Label.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 22 "/run/build/planner/src/Objects/Label.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 203 "Label.c"
		}
#line 22 "/run/build/planner/src/Objects/Label.vala"
		value->data[0].v_pointer = objects_label_ref (object);
#line 207 "Label.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Label.vala"
		value->data[0].v_pointer = NULL;
#line 211 "Label.c"
	}
#line 22 "/run/build/planner/src/Objects/Label.vala"
	return NULL;
#line 215 "Label.c"
}


static gchar*
objects_value_label_lcopy_value (const GValue* value,
                                 guint n_collect_values,
                                 GTypeCValue* collect_values,
                                 guint collect_flags)
{
	ObjectsLabel ** object_p;
	object_p = collect_values[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Label.vala"
	if (!object_p) {
#line 22 "/run/build/planner/src/Objects/Label.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 231 "Label.c"
	}
#line 22 "/run/build/planner/src/Objects/Label.vala"
	if (!value->data[0].v_pointer) {
#line 22 "/run/build/planner/src/Objects/Label.vala"
		*object_p = NULL;
#line 237 "Label.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 22 "/run/build/planner/src/Objects/Label.vala"
		*object_p = value->data[0].v_pointer;
#line 241 "Label.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Label.vala"
		*object_p = objects_label_ref (value->data[0].v_pointer);
#line 245 "Label.c"
	}
#line 22 "/run/build/planner/src/Objects/Label.vala"
	return NULL;
#line 249 "Label.c"
}


GParamSpec*
objects_param_spec_label (const gchar* name,
                          const gchar* nick,
                          const gchar* blurb,
                          GType object_type,
                          GParamFlags flags)
{
	ObjectsParamSpecLabel* spec;
#line 22 "/run/build/planner/src/Objects/Label.vala"
	g_return_val_if_fail (g_type_is_a (object_type, OBJECTS_TYPE_LABEL), NULL);
#line 22 "/run/build/planner/src/Objects/Label.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 22 "/run/build/planner/src/Objects/Label.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 22 "/run/build/planner/src/Objects/Label.vala"
	return G_PARAM_SPEC (spec);
#line 269 "Label.c"
}


gpointer
objects_value_get_label (const GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Label.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, OBJECTS_TYPE_LABEL), NULL);
#line 22 "/run/build/planner/src/Objects/Label.vala"
	return value->data[0].v_pointer;
#line 280 "Label.c"
}


void
objects_value_set_label (GValue* value,
                         gpointer v_object)
{
	ObjectsLabel * old;
#line 22 "/run/build/planner/src/Objects/Label.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, OBJECTS_TYPE_LABEL));
#line 22 "/run/build/planner/src/Objects/Label.vala"
	old = value->data[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Label.vala"
	if (v_object) {
#line 22 "/run/build/planner/src/Objects/Label.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, OBJECTS_TYPE_LABEL));
#line 22 "/run/build/planner/src/Objects/Label.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "/run/build/planner/src/Objects/Label.vala"
		value->data[0].v_pointer = v_object;
#line 22 "/run/build/planner/src/Objects/Label.vala"
		objects_label_ref (value->data[0].v_pointer);
#line 303 "Label.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Label.vala"
		value->data[0].v_pointer = NULL;
#line 307 "Label.c"
	}
#line 22 "/run/build/planner/src/Objects/Label.vala"
	if (old) {
#line 22 "/run/build/planner/src/Objects/Label.vala"
		objects_label_unref (old);
#line 313 "Label.c"
	}
}


void
objects_value_take_label (GValue* value,
                          gpointer v_object)
{
	ObjectsLabel * old;
#line 22 "/run/build/planner/src/Objects/Label.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, OBJECTS_TYPE_LABEL));
#line 22 "/run/build/planner/src/Objects/Label.vala"
	old = value->data[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Label.vala"
	if (v_object) {
#line 22 "/run/build/planner/src/Objects/Label.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, OBJECTS_TYPE_LABEL));
#line 22 "/run/build/planner/src/Objects/Label.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "/run/build/planner/src/Objects/Label.vala"
		value->data[0].v_pointer = v_object;
#line 335 "Label.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Label.vala"
		value->data[0].v_pointer = NULL;
#line 339 "Label.c"
	}
#line 22 "/run/build/planner/src/Objects/Label.vala"
	if (old) {
#line 22 "/run/build/planner/src/Objects/Label.vala"
		objects_label_unref (old);
#line 345 "Label.c"
	}
}


static void
objects_label_class_init (ObjectsLabelClass * klass)
{
#line 22 "/run/build/planner/src/Objects/Label.vala"
	objects_label_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Objects/Label.vala"
	((ObjectsLabelClass *) klass)->finalize = objects_label_finalize;
#line 357 "Label.c"
}


static void
objects_label_instance_init (ObjectsLabel * self)
{
#line 22 "/run/build/planner/src/Objects/Label.vala"
	self->ref_count = 1;
#line 366 "Label.c"
}


static void
objects_label_finalize (ObjectsLabel * obj)
{
	ObjectsLabel * self;
#line 22 "/run/build/planner/src/Objects/Label.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, OBJECTS_TYPE_LABEL, ObjectsLabel);
#line 22 "/run/build/planner/src/Objects/Label.vala"
	g_signal_handlers_destroy (self);
#line 24 "/run/build/planner/src/Objects/Label.vala"
	_g_free0 (self->name);
#line 25 "/run/build/planner/src/Objects/Label.vala"
	_g_free0 (self->color);
#line 382 "Label.c"
}


GType
objects_label_get_type (void)
{
	static volatile gsize objects_label_type_id__volatile = 0;
	if (g_once_init_enter (&objects_label_type_id__volatile)) {
		static const GTypeValueTable g_define_type_value_table = { objects_value_label_init, objects_value_label_free_value, objects_value_label_copy_value, objects_value_label_peek_pointer, "p", objects_value_label_collect_value, "p", objects_value_label_lcopy_value };
		static const GTypeInfo g_define_type_info = { sizeof (ObjectsLabelClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) objects_label_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ObjectsLabel), 0, (GInstanceInitFunc) objects_label_instance_init, &g_define_type_value_table };
		static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
		GType objects_label_type_id;
		objects_label_type_id = g_type_register_fundamental (g_type_fundamental_next (), "ObjectsLabel", &g_define_type_info, &g_define_type_fundamental_info, 0);
		g_once_init_leave (&objects_label_type_id__volatile, objects_label_type_id);
	}
	return objects_label_type_id__volatile;
}


gpointer
objects_label_ref (gpointer instance)
{
	ObjectsLabel * self;
	self = instance;
#line 22 "/run/build/planner/src/Objects/Label.vala"
	g_atomic_int_inc (&self->ref_count);
#line 22 "/run/build/planner/src/Objects/Label.vala"
	return instance;
#line 411 "Label.c"
}


void
objects_label_unref (gpointer instance)
{
	ObjectsLabel * self;
	self = instance;
#line 22 "/run/build/planner/src/Objects/Label.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 22 "/run/build/planner/src/Objects/Label.vala"
		OBJECTS_LABEL_GET_CLASS (self)->finalize (self);
#line 22 "/run/build/planner/src/Objects/Label.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 426 "Label.c"
	}
}



