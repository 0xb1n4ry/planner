/* unity-tool.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-tool.vala, do not modify */

/*
 * Copyright (C) 2012 Canonical Ltd
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authored by Michal Hruby <michal.hruby@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <unity-protocol.h>
#include <stdarg.h>
#include <gtk/gtk.h>
#include <gio/gio.h>
#include <dee.h>
#include <float.h>
#include <math.h>
#include <glib/gstdio.h>


#define UNITY_TESTER_TYPE_UNITY_TOOL_UI (unity_tester_unity_tool_ui_get_type ())
#define UNITY_TESTER_UNITY_TOOL_UI(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_UNITY_TOOL_UI, UnityTesterUnityToolUi))
#define UNITY_TESTER_UNITY_TOOL_UI_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_UNITY_TOOL_UI, UnityTesterUnityToolUiClass))
#define UNITY_TESTER_IS_UNITY_TOOL_UI(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_UNITY_TOOL_UI))
#define UNITY_TESTER_IS_UNITY_TOOL_UI_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_UNITY_TOOL_UI))
#define UNITY_TESTER_UNITY_TOOL_UI_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_UNITY_TOOL_UI, UnityTesterUnityToolUiClass))

typedef struct _UnityTesterUnityToolUi UnityTesterUnityToolUi;
typedef struct _UnityTesterUnityToolUiClass UnityTesterUnityToolUiClass;
#define _unity_protocol_scope_registry_scope_metadata_unref0(var) ((var == NULL) ? NULL : (var = (unity_protocol_scope_registry_scope_metadata_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_option_context_free0(var) ((var == NULL) ? NULL : (var = (g_option_context_free (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _Block1Data Block1Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
typedef struct _Block2Data Block2Data;
#define _g_main_loop_unref0(var) ((var == NULL) ? NULL : (var = (g_main_loop_unref (var), NULL)))
typedef struct _Block3Data Block3Data;
typedef struct _Block4Data Block4Data;
typedef struct _Block5Data Block5Data;
#define _g_dir_close0(var) ((var == NULL) ? NULL : (var = (g_dir_close (var), NULL)))
typedef struct _Block6Data Block6Data;
typedef struct _Block7Data Block7Data;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

typedef enum  {
	UNITY_TESTER_TESTER_ERROR_INVALID_ARGS
} UnityTesterTesterError;
#define UNITY_TESTER_TESTER_ERROR unity_tester_tester_error_quark ()
struct _Block1Data {
	int _ref_count_;
	UnityProtocolScopeProxy* proxy;
};

struct _Block2Data {
	int _ref_count_;
	Block1Data * _data1_;
	GMainLoop* ml;
	gint64 first_result;
	guint64 model_seqnum;
};

struct _Block3Data {
	int _ref_count_;
	UnityProtocolScopeProxy* proxy;
	GMainLoop* ml;
	gchar* chan_id;
	GError* outer_error;
	DeeSerializableModel* results_model;
};

struct _Block4Data {
	int _ref_count_;
	GMainLoop* ml;
	UnityProtocolScopeProxy* proxy;
};

struct _Block5Data {
	int _ref_count_;
	GMainLoop* ml;
	guint64 seqnum;
};

struct _Block6Data {
	int _ref_count_;
	gboolean timeout_reached;
	GMainLoop* ml;
};

struct _Block7Data {
	int _ref_count_;
	UnityProtocolScopeProxy* proxy;
	GMainLoop* ml;
	guint64 model_seqnum;
	GHashTable* reply_dict;
};


extern gboolean unity_tester_options_gui;
gboolean unity_tester_options_gui = FALSE;
extern gboolean unity_tester_options_benchmark;
gboolean unity_tester_options_benchmark = FALSE;
extern gchar* unity_tester_options_scope_dbus_name;
gchar* unity_tester_options_scope_dbus_name = NULL;
extern gchar* unity_tester_options_scope_dbus_path;
gchar* unity_tester_options_scope_dbus_path = NULL;
extern gchar* unity_tester_options_scope_file;
gchar* unity_tester_options_scope_file = NULL;
extern gchar* unity_tester_options_search_string;
gchar* unity_tester_options_search_string = NULL;
extern gint unity_tester_options_search_type;
gint unity_tester_options_search_type = 0;
extern gboolean unity_tester_options_private_channel;
gboolean unity_tester_options_private_channel = FALSE;
extern gboolean unity_tester_options_common_tests;
gboolean unity_tester_options_common_tests = FALSE;
extern gboolean unity_tester_options_print_search_reply;
gboolean unity_tester_options_print_search_reply = FALSE;
extern gboolean unity_tester_options_dump_results;
gboolean unity_tester_options_dump_results = FALSE;
extern gboolean unity_tester_options_dump_filters;
gboolean unity_tester_options_dump_filters = FALSE;
extern gboolean unity_tester_options_diff_changes;
gboolean unity_tester_options_diff_changes = FALSE;
extern gboolean unity_tester_options_test_server_mode;
gboolean unity_tester_options_test_server_mode = FALSE;
extern gchar** unity_tester_options_test_cases;
extern gint unity_tester_options_test_cases_length1;
gchar** unity_tester_options_test_cases = NULL;
gint unity_tester_options_test_cases_length1 = 0;
extern gchar** unity_tester_test_runner_test_cases;
extern gint unity_tester_test_runner_test_cases_length1;
gchar** unity_tester_test_runner_test_cases = NULL;
gint unity_tester_test_runner_test_cases_length1 = 0;
extern gint unity_tester_test_runner_test_index;
gint unity_tester_test_runner_test_index = 0;
extern UnityTesterUnityToolUi* unity_tester_ui;
UnityTesterUnityToolUi* unity_tester_ui = NULL;

GQuark unity_tester_tester_error_quark (void);
GType unity_tester_unity_tool_ui_get_type (void) G_GNUC_CONST;
void unity_tester_get_scope_params_from_file (const gchar* filename,
                                              GError** error);
void unity_tester_warn (const gchar* format,
                        ...);
gint unity_tester_main (gchar** args,
                        int args_length1);
gchar** unity_tester_get_test_cases (int* result_length1);
static gchar** _vala_array_dup1 (gchar** self,
                          int length);
static void ______lambda19_ (void);
static void _______lambda19__gtest_data_func (gpointer self);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
UnityTesterUnityToolUi* unity_tester_unity_tool_ui_new (void);
UnityTesterUnityToolUi* unity_tester_unity_tool_ui_construct (GType object_type);
gboolean unity_tester_unity_tool_ui_init_gui (UnityTesterUnityToolUi* self);
gint unity_tester_run_common_tests (void);
static void _g_free0_ (gpointer var);
static GVariant* _variant_new1 (GHashTable* value);
UnityProtocolScopeProxy* unity_tester_get_scope_proxy (const gchar* dbus_name,
                                                       const gchar* dbus_path,
                                                       UnityProtocolChannelType channel_type,
                                                       UnityProtocolChannelFlags channel_flags,
                                                       gchar* * channel_id,
                                                       DeeSerializableModel* * model,
                                                       GError** error);
UnityProtocolChannelFlags unity_tester_get_global_channel_flags (void);
static Block2Data* block2_data_ref (Block2Data* _data2_);
static void block2_data_unref (void * _userdata_);
static void _____lambda32_ (Block2Data* _data2_);
static void ______lambda32__dee_model_row_added (DeeModel* _sender,
                                          DeeModelIter* iter,
                                          gpointer self);
static void _g_variant_unref0_ (gpointer var);
static void _____lambda33_ (Block2Data* _data2_,
                     GObject* obj,
                     GAsyncResult* res);
static GVariant* _variant_new2 (GHashTable* value);
static void ______lambda33__gasync_ready_callback (GObject* source_object,
                                            GAsyncResult* res,
                                            gpointer self);
gboolean unity_tester_run_with_timeout (GMainLoop* ml,
                                        guint timeout_ms);
void unity_tester_wait_for_seqnum (DeeSharedModel* model,
                                   guint64 seqnum);
void unity_tester_dump_results_model (DeeModel* model);
void unity_tester_dump_filters_model (DeeModel* model);
void unity_tester_close_channel (UnityProtocolScopeProxy* proxy,
                                 const gchar* channel_id);
static Block3Data* block3_data_ref (Block3Data* _data3_);
static void block3_data_unref (void * _userdata_);
static void __lambda21_ (Block3Data* _data3_,
                  GObject* obj,
                  GAsyncResult* res);
static void ___lambda21__gasync_ready_callback (GObject* source_object,
                                         GAsyncResult* res,
                                         gpointer self);
static void __lambda23_ (Block3Data* _data3_,
                  GObject* obj,
                  GAsyncResult* res);
static void ___lambda23__gasync_ready_callback (GObject* source_object,
                                         GAsyncResult* res,
                                         gpointer self);
static Block4Data* block4_data_ref (Block4Data* _data4_);
static void block4_data_unref (void * _userdata_);
static void __lambda26_ (Block4Data* _data4_,
                  GObject* obj,
                  GAsyncResult* res);
static void ___lambda26__gasync_ready_callback (GObject* source_object,
                                         GAsyncResult* res,
                                         gpointer self);
static Block5Data* block5_data_ref (Block5Data* _data5_);
static void block5_data_unref (void * _userdata_);
static void __lambda25_ (Block5Data* _data5_,
                  DeeSharedModel* m,
                  guint64 begin_seqnum,
                  guint64 end_seqnum);
static void ___lambda25__dee_shared_model_end_transaction (DeeSharedModel* _sender,
                                                    guint64 begin_seqnum,
                                                    guint64 end_seqnum,
                                                    gpointer self);
static void _vala_array_add1 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static void _vala_array_add2 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static Block6Data* block6_data_ref (Block6Data* _data6_);
static void block6_data_unref (void * _userdata_);
static gboolean __lambda22_ (Block6Data* _data6_);
static gboolean ___lambda22__gsource_func (gpointer self);
static void __lambda20_ (void);
void unity_tester_call_scope_search (const gchar* search_string,
                                     gint search_type);
static void ___lambda20__gtest_data_func (gpointer self);
static void __lambda27_ (void);
static void ___lambda27__gtest_data_func (gpointer self);
static void __lambda28_ (void);
static void ___lambda28__gtest_data_func (gpointer self);
static void __lambda29_ (void);
static void ___lambda29__gtest_data_func (gpointer self);
static void __lambda30_ (void);
static void ___lambda30__gtest_data_func (gpointer self);
static void __lambda31_ (void);
static void ___lambda31__gtest_data_func (gpointer self);
static Block7Data* block7_data_ref (Block7Data* _data7_);
static void block7_data_unref (void * _userdata_);
static void __lambda24_ (Block7Data* _data7_,
                  GObject* obj,
                  GAsyncResult* res);
static void ___lambda24__gasync_ready_callback (GObject* source_object,
                                         GAsyncResult* res,
                                         gpointer self);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

const GOptionEntry UNITY_TESTER_options[16] = {{"gui", 'g', 0, G_OPTION_ARG_NONE, &unity_tester_options_gui, "Run GUI", NULL}, {"benchmark", 'b', 0, G_OPTION_ARG_NONE, &unity_tester_options_benchmark, "Benchmark searches", NULL}, {"dbus-name", 'n', 0, G_OPTION_ARG_STRING, &unity_tester_options_scope_dbus_name, "Unique dbus name of the tested scope", NULL}, {"dbus-path", 'p', 0, G_OPTION_ARG_STRING, &unity_tester_options_scope_dbus_path, "Object path of the scope", NULL}, {"scope-file", 's', 0, G_OPTION_ARG_STRING, &unity_tester_options_scope_file, "Path to the scope file (to read out dbus name and path)", NULL}, {"common-tests", 'c', 0, G_OPTION_ARG_NONE, &unity_tester_options_common_tests, "Perform common tests each scope should conform to", NULL}, {"search", 'q', 0, G_OPTION_ARG_STRING, &unity_tester_options_search_string, "Search string to send to the scope", NULL}, {"search-type", 't', 0, G_OPTION_ARG_INT, &unity_tester_options_search_type, "Type of the search (value from Unity.SearchType enum)", NULL}, {"dump-results", 'r', 0, G_OPTION_ARG_NONE, &unity_tester_options_dump_results, "Output the results model on stdout", NULL}, {"dump-filters", 'f', 0, G_OPTION_ARG_NONE, &unity_tester_options_dump_filters, "Output the filter model on stdout", NULL}, {"print-search-reply", (gchar) 0, 0, G_OPTION_ARG_NONE, &unity_tester_options_print_search_reply, "Output reply of the search call in its raw form", NULL}, {"private-channel", (gchar) 0, 0, G_OPTION_ARG_NONE, &unity_tester_options_private_channel, "Use private channel for results transfer", NULL}, {"diff-changes", 'd', 0, G_OPTION_ARG_NONE, &unity_tester_options_diff_changes, "Use diff channel", NULL}, {"test-server-mode", (gchar) 0, 0, G_OPTION_ARG_NONE, &unity_tester_options_test_server_mode, "Run a collection of test scripts", NULL}, {"", (gchar) 0, 0, G_OPTION_ARG_FILENAME_ARRAY, &unity_tester_options_test_cases, "Invididual test cases", "<test-scripts>"}, {NULL}};

GQuark
unity_tester_tester_error_quark (void)
{
	return g_quark_from_static_string ("unity_tester_tester_error-quark");
}


void
unity_tester_get_scope_params_from_file (const gchar* filename,
                                         GError** error)
{
	UnityProtocolScopeRegistryScopeMetadata* metadata = NULL;
	UnityProtocolScopeRegistryScopeMetadata* _tmp6_;
	const gchar* _tmp7_;
	gchar* _tmp8_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (filename != NULL);
	if (g_path_is_absolute (filename)) {
		UnityProtocolScopeRegistryScopeMetadata* _tmp0_ = NULL;
		UnityProtocolScopeRegistryScopeMetadata* _tmp1_;
		UnityProtocolScopeRegistryScopeMetadata* _tmp2_;
		_tmp1_ = unity_protocol_scope_registry_scope_metadata_for_path (filename, &_inner_error_);
		_tmp0_ = _tmp1_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_unity_protocol_scope_registry_scope_metadata_unref0 (metadata);
			return;
		}
		_tmp2_ = _tmp0_;
		_tmp0_ = NULL;
		_unity_protocol_scope_registry_scope_metadata_unref0 (metadata);
		metadata = _tmp2_;
		_unity_protocol_scope_registry_scope_metadata_unref0 (_tmp0_);
	} else {
		UnityProtocolScopeRegistryScopeMetadata* _tmp3_ = NULL;
		UnityProtocolScopeRegistryScopeMetadata* _tmp4_;
		UnityProtocolScopeRegistryScopeMetadata* _tmp5_;
		_tmp4_ = unity_protocol_scope_registry_scope_metadata_for_id (filename, &_inner_error_);
		_tmp3_ = _tmp4_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_unity_protocol_scope_registry_scope_metadata_unref0 (metadata);
			return;
		}
		_tmp5_ = _tmp3_;
		_tmp3_ = NULL;
		_unity_protocol_scope_registry_scope_metadata_unref0 (metadata);
		metadata = _tmp5_;
		_unity_protocol_scope_registry_scope_metadata_unref0 (_tmp3_);
	}
	_tmp6_ = metadata;
	_tmp7_ = _tmp6_->dbus_name;
	_tmp8_ = g_strdup (_tmp7_);
	_g_free0 (unity_tester_options_scope_dbus_name);
	unity_tester_options_scope_dbus_name = _tmp8_;
	_tmp9_ = metadata;
	_tmp10_ = _tmp9_->dbus_path;
	_tmp11_ = g_strdup (_tmp10_);
	_g_free0 (unity_tester_options_scope_dbus_path);
	unity_tester_options_scope_dbus_path = _tmp11_;
	_unity_protocol_scope_registry_scope_metadata_unref0 (metadata);
}


void
unity_tester_warn (const gchar* format,
                   ...)
{
	va_list args = {0};
	g_return_if_fail (format != NULL);
	va_start (args, format);
	g_logv ("libunity-tool", G_LOG_LEVEL_WARNING, format, args);
	va_end (args);
}


static gchar**
_vala_array_dup1 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
	result = g_new0 (gchar*, length + 1);
	for (i = 0; i < length; i++) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (self[i]);
		result[i] = _tmp0_;
	}
	return result;
}


static void
______lambda19_ (void)
{
	gchar* test = NULL;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gint _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	gint status = 0;
	gint _tmp7_;
	GError * _inner_error_ = NULL;
	_tmp0_ = unity_tester_test_runner_test_cases;
	_tmp0__length1 = unity_tester_test_runner_test_cases_length1;
	_tmp1_ = unity_tester_test_runner_test_index;
	unity_tester_test_runner_test_index = _tmp1_ + 1;
	_tmp2_ = _tmp0_[_tmp1_];
	_tmp3_ = g_strdup (_tmp2_);
	test = _tmp3_;
	{
		gint _tmp4_ = 0;
		g_spawn_command_line_sync (test, NULL, NULL, &_tmp4_, &_inner_error_);
		status = _tmp4_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch1_g_error;
		}
	}
	goto __finally1;
	__catch1_g_error:
	{
		GError* e = NULL;
		GError* _tmp5_;
		const gchar* _tmp6_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp5_ = e;
		_tmp6_ = _tmp5_->message;
		unity_tester_warn ("%s", _tmp6_, NULL);
		status = -1;
		_g_error_free0 (e);
	}
	__finally1:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		_g_free0 (test);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	_tmp7_ = status;
	_vala_assert (_tmp7_ == 0, "status == 0");
	_g_free0 (test);
}


static void
_______lambda19__gtest_data_func (gpointer self)
{
	______lambda19_ ();
}


static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}


static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		_g_object_unref0 (_data1_->proxy);
		g_slice_free (Block1Data, _data1_);
	}
}


static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static GVariant*
_variant_new1 (GHashTable* value)
{
	GVariantBuilder _tmp43_;
	GHashTableIter _tmp44_;
	gpointer _tmp45_;
	gpointer _tmp46_;
	g_hash_table_iter_init (&_tmp44_, value);
	g_variant_builder_init (&_tmp43_, G_VARIANT_TYPE ("a{ss}"));
	while (g_hash_table_iter_next (&_tmp44_, &_tmp45_, &_tmp46_)) {
		gchar* _key;
		gchar* _value;
		_key = (gchar*) _tmp45_;
		_value = (gchar*) _tmp46_;
		g_variant_builder_add (&_tmp43_, "{?*}", g_variant_new_string (_key), g_variant_new_string (_value));
	}
	return g_variant_ref_sink (g_variant_builder_end (&_tmp43_));
}


static Block2Data*
block2_data_ref (Block2Data* _data2_)
{
	g_atomic_int_inc (&_data2_->_ref_count_);
	return _data2_;
}


static void
block2_data_unref (void * _userdata_)
{
	Block2Data* _data2_;
	_data2_ = (Block2Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data2_->_ref_count_)) {
		_g_main_loop_unref0 (_data2_->ml);
		block1_data_unref (_data2_->_data1_);
		_data2_->_data1_ = NULL;
		g_slice_free (Block2Data, _data2_);
	}
}


static void
_____lambda32_ (Block2Data* _data2_)
{
	Block1Data* _data1_;
	gint64 _tmp0_;
	_data1_ = _data2_->_data1_;
	_tmp0_ = _data2_->first_result;
	if (_tmp0_ == ((gint64) 0)) {
		_data2_->first_result = g_get_monotonic_time ();
	}
}


static void
______lambda32__dee_model_row_added (DeeModel* _sender,
                                     DeeModelIter* iter,
                                     gpointer self)
{
	_____lambda32_ (self);
}


static void
_g_variant_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_variant_unref (var), NULL));
}


static GVariant*
_variant_new2 (GHashTable* value)
{
	GVariantBuilder _tmp4_;
	GHashTableIter _tmp5_;
	gpointer _tmp6_;
	gpointer _tmp7_;
	g_hash_table_iter_init (&_tmp5_, value);
	g_variant_builder_init (&_tmp4_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp5_, &_tmp6_, &_tmp7_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp6_;
		_value = (GVariant*) _tmp7_;
		g_variant_builder_add (&_tmp4_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	return g_variant_ref_sink (g_variant_builder_end (&_tmp4_));
}


static void
_____lambda33_ (Block2Data* _data2_,
                GObject* obj,
                GAsyncResult* res)
{
	Block1Data* _data1_;
	GMainLoop* _tmp14_;
	GError * _inner_error_ = NULL;
	_data1_ = _data2_->_data1_;
	g_return_if_fail (res != NULL);
	{
		GHashTable* reply_dict = NULL;
		UnityProtocolScopeProxy* _tmp0_;
		GHashTable* _tmp1_;
		gboolean _tmp3_;
		_tmp0_ = _data1_->proxy;
		_tmp1_ = unity_protocol_scope_proxy_search_finish (_tmp0_, res, &_inner_error_);
		reply_dict = _tmp1_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch2_g_error;
		}
		if (g_hash_table_contains (reply_dict, "model-seqnum")) {
			gconstpointer _tmp2_;
			_tmp2_ = g_hash_table_lookup (reply_dict, "model-seqnum");
			_data2_->model_seqnum = g_variant_get_uint64 ((GVariant*) _tmp2_);
		}
		_tmp3_ = unity_tester_options_print_search_reply;
		if (_tmp3_) {
			GVariant* v = NULL;
			GVariant* _tmp8_;
			GVariant* _tmp9_;
			gchar* _tmp10_;
			gchar* _tmp11_;
			_tmp8_ = _variant_new2 (reply_dict);
			v = _tmp8_;
			_tmp9_ = v;
			_tmp10_ = g_variant_print (_tmp9_, TRUE);
			_tmp11_ = _tmp10_;
			g_print ("%s\n", _tmp11_);
			_g_free0 (_tmp11_);
			_g_variant_unref0 (v);
		}
		_g_hash_table_unref0 (reply_dict);
	}
	goto __finally2;
	__catch2_g_error:
	{
		GError* err = NULL;
		GError* _tmp12_;
		const gchar* _tmp13_;
		err = _inner_error_;
		_inner_error_ = NULL;
		_tmp12_ = err;
		_tmp13_ = _tmp12_->message;
		g_warning ("unity-tool.vala:281: %s", _tmp13_);
		_g_error_free0 (err);
	}
	__finally2:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	_tmp14_ = _data2_->ml;
	g_main_loop_quit (_tmp14_);
}


static void
______lambda33__gasync_ready_callback (GObject* source_object,
                                       GAsyncResult* res,
                                       gpointer self)
{
	_____lambda33_ (self, source_object, res);
	block2_data_unref (self);
}


gint
unity_tester_main (gchar** args,
                   int args_length1)
{
	gint result = 0;
	GOptionContext* opt_context = NULL;
	GOptionContext* _tmp0_;
	GOptionContext* _tmp1_;
	GError * _inner_error_ = NULL;
	g_set_prgname ("libunity-tool");
	_tmp0_ = g_option_context_new (" - libunity tool");
	opt_context = _tmp0_;
	_tmp1_ = opt_context;
	g_option_context_add_main_entries (_tmp1_, UNITY_TESTER_options, NULL);
	{
		GOptionContext* _tmp5_;
		gboolean _tmp6_;
		if (args_length1 <= 1) {
			GOptionContext* _tmp2_;
			gchar* _tmp3_;
			gchar* _tmp4_;
			_tmp2_ = opt_context;
			_tmp3_ = g_option_context_get_help (_tmp2_, TRUE, NULL);
			_tmp4_ = _tmp3_;
			g_print ("%s\n", _tmp4_);
			_g_free0 (_tmp4_);
			result = 0;
			_g_option_context_free0 (opt_context);
			return result;
		}
		_tmp5_ = opt_context;
		g_option_context_parse (_tmp5_, &args_length1, &args, &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch0_g_error;
		}
		_tmp6_ = unity_tester_options_test_server_mode;
		if (_tmp6_) {
			gboolean _tmp7_ = FALSE;
			gchar** _tmp8_;
			gint _tmp8__length1;
			gchar** test_scripts = NULL;
			gint _tmp12_ = 0;
			gchar** _tmp13_;
			gint test_scripts_length1;
			gint _test_scripts_size_;
			gchar** _tmp14_;
			gint _tmp14__length1;
			gchar** _tmp15_;
			gint _tmp15__length1;
			gchar** _tmp16_;
			gint _tmp16__length1;
			_tmp8_ = unity_tester_options_test_cases;
			_tmp8__length1 = unity_tester_options_test_cases_length1;
			if (_tmp8_ == NULL) {
				_tmp7_ = TRUE;
			} else {
				gchar** _tmp9_;
				gint _tmp9__length1;
				gint _tmp10_;
				_tmp9_ = unity_tester_options_test_cases;
				_tmp9__length1 = unity_tester_options_test_cases_length1;
				unity_tester_options_test_cases_length1 = (gint) g_strv_length (_tmp9_);
				_tmp10_ = unity_tester_options_test_cases_length1;
				_tmp7_ = _tmp10_ == 0;
			}
			if (_tmp7_) {
				GError* _tmp11_;
				_tmp11_ = g_error_new_literal (UNITY_TESTER_TESTER_ERROR, UNITY_TESTER_TESTER_ERROR_INVALID_ARGS, "No test cases specified");
				_inner_error_ = _tmp11_;
				goto __catch0_g_error;
			}
			_tmp13_ = unity_tester_get_test_cases (&_tmp12_);
			test_scripts = _tmp13_;
			test_scripts_length1 = _tmp12_;
			_test_scripts_size_ = test_scripts_length1;
			_tmp14_ = test_scripts;
			_tmp14__length1 = test_scripts_length1;
			_tmp15_ = (_tmp14_ != NULL) ? _vala_array_dup1 (_tmp14_, _tmp14__length1) : ((gpointer) _tmp14_);
			_tmp15__length1 = _tmp14__length1;
			unity_tester_test_runner_test_cases = (_vala_array_free (unity_tester_test_runner_test_cases, unity_tester_test_runner_test_cases_length1, (GDestroyNotify) g_free), NULL);
			unity_tester_test_runner_test_cases = _tmp15_;
			unity_tester_test_runner_test_cases_length1 = _tmp15__length1;
			g_test_init (&args_length1, &args, NULL);
			_tmp16_ = test_scripts;
			_tmp16__length1 = test_scripts_length1;
			{
				gchar** test_case_collection = NULL;
				gint test_case_collection_length1 = 0;
				gint _test_case_collection_size_ = 0;
				gint test_case_it = 0;
				test_case_collection = _tmp16_;
				test_case_collection_length1 = _tmp16__length1;
				for (test_case_it = 0; test_case_it < _tmp16__length1; test_case_it = test_case_it + 1) {
					const gchar* test_case = NULL;
					test_case = test_case_collection[test_case_it];
					{
						const gchar* _tmp17_;
						gchar* _tmp18_;
						gchar* _tmp19_;
						gchar* _tmp20_;
						gchar* _tmp21_;
						_tmp17_ = test_case;
						_tmp18_ = g_path_get_basename (_tmp17_);
						_tmp19_ = _tmp18_;
						_tmp20_ = g_strconcat ("/Integration/ScopeTest/", _tmp19_, NULL);
						_tmp21_ = _tmp20_;
						g_test_add_data_func (_tmp21_, NULL, _______lambda19__gtest_data_func);
						_g_free0 (_tmp21_);
						_g_free0 (_tmp19_);
					}
				}
			}
			result = g_test_run ();
			test_scripts = (_vala_array_free (test_scripts, test_scripts_length1, (GDestroyNotify) g_free), NULL);
			_g_option_context_free0 (opt_context);
			return result;
		} else {
			Block1Data* _data1_;
			const gchar* _tmp22_;
			gboolean _tmp24_;
			gboolean _tmp27_ = FALSE;
			const gchar* _tmp28_;
			gboolean _tmp31_;
			gboolean _tmp33_;
			gchar* channel_id = NULL;
			DeeSerializableModel* results_model = NULL;
			const gchar* _tmp54_;
			const gchar* _tmp55_;
			gint _tmp56_;
			gchar* _tmp57_ = NULL;
			DeeSerializableModel* _tmp58_ = NULL;
			UnityProtocolScopeProxy* _tmp59_;
			const gchar* _tmp60_;
			gboolean _tmp81_ = FALSE;
			gboolean _tmp82_;
			UnityProtocolScopeProxy* _tmp90_;
			const gchar* _tmp91_;
			_data1_ = g_slice_new0 (Block1Data);
			_data1_->_ref_count_ = 1;
			_tmp22_ = unity_tester_options_scope_file;
			if (_tmp22_ != NULL) {
				const gchar* _tmp23_;
				_tmp23_ = unity_tester_options_scope_file;
				unity_tester_get_scope_params_from_file (_tmp23_, &_inner_error_);
				if (G_UNLIKELY (_inner_error_ != NULL)) {
					block1_data_unref (_data1_);
					_data1_ = NULL;
					goto __catch0_g_error;
				}
			}
			_tmp24_ = unity_tester_options_gui;
			if (_tmp24_) {
				UnityTesterUnityToolUi* _tmp25_;
				UnityTesterUnityToolUi* _tmp26_;
				gtk_init (&args_length1, &args);
				_tmp25_ = unity_tester_unity_tool_ui_new ();
				_g_object_unref0 (unity_tester_ui);
				unity_tester_ui = _tmp25_;
				_tmp26_ = unity_tester_ui;
				if (unity_tester_unity_tool_ui_init_gui (_tmp26_)) {
					gtk_main ();
				}
				result = 0;
				block1_data_unref (_data1_);
				_data1_ = NULL;
				_g_option_context_free0 (opt_context);
				return result;
			}
			_tmp28_ = unity_tester_options_scope_dbus_name;
			if (_tmp28_ == NULL) {
				_tmp27_ = TRUE;
			} else {
				const gchar* _tmp29_;
				_tmp29_ = unity_tester_options_scope_dbus_path;
				_tmp27_ = _tmp29_ == NULL;
			}
			if (_tmp27_) {
				GError* _tmp30_;
				_tmp30_ = g_error_new_literal (UNITY_TESTER_TESTER_ERROR, UNITY_TESTER_TESTER_ERROR_INVALID_ARGS, "Scope DBus name and path not specified!");
				_inner_error_ = _tmp30_;
				block1_data_unref (_data1_);
				_data1_ = NULL;
				goto __catch0_g_error;
			}
			_tmp31_ = unity_tester_options_common_tests;
			if (_tmp31_) {
				gint status = 0;
				gint _tmp32_;
				status = unity_tester_run_common_tests ();
				_tmp32_ = status;
				_vala_assert (_tmp32_ == 0, "status == 0");
			}
			_tmp33_ = unity_tester_options_benchmark;
			if (_tmp33_) {
				GDBusConnection* conn = NULL;
				GDBusConnection* _tmp34_;
				GHashTable* env = NULL;
				GHashFunc _tmp35_;
				GEqualFunc _tmp36_;
				GHashTable* _tmp37_;
				GHashTable* _tmp38_;
				gchar* _tmp39_;
				gchar* _tmp40_;
				GDBusConnection* _tmp41_;
				GHashTable* _tmp42_;
				GVariant* _tmp47_;
				GVariant** _tmp48_;
				GVariant** _tmp49_;
				gint _tmp49__length1;
				GVariant* _tmp50_;
				GVariant* _tmp51_;
				GVariant* _tmp52_;
				GVariant* _tmp53_;
				_tmp34_ = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &_inner_error_);
				conn = _tmp34_;
				if (G_UNLIKELY (_inner_error_ != NULL)) {
					block1_data_unref (_data1_);
					_data1_ = NULL;
					goto __catch0_g_error;
				}
				_tmp35_ = g_str_hash;
				_tmp36_ = g_str_equal;
				_tmp37_ = g_hash_table_new_full (_tmp35_, _tmp36_, _g_free0_, _g_free0_);
				env = _tmp37_;
				_tmp38_ = env;
				_tmp39_ = g_strdup ("LIBUNITY_TIME_SEARCHES");
				_tmp40_ = g_strdup ("1");
				g_hash_table_insert (_tmp38_, _tmp39_, _tmp40_);
				_tmp41_ = conn;
				_tmp42_ = env;
				_tmp47_ = _variant_new1 (_tmp42_);
				_tmp48_ = g_new0 (GVariant*, 1 + 1);
				_tmp48_[0] = _tmp47_;
				_tmp49_ = _tmp48_;
				_tmp49__length1 = 1;
				_tmp50_ = g_variant_new_tuple (_tmp49_, 1);
				g_variant_ref_sink (_tmp50_);
				_tmp51_ = _tmp50_;
				_tmp52_ = g_dbus_connection_call_sync (_tmp41_, "org.freedesktop.DBus", "/org/freedesktop/DBus", "org.freedesktop.DBus", "UpdateActivationEnvironment", _tmp51_, NULL, 0, -1, NULL, &_inner_error_);
				_tmp53_ = _tmp52_;
				_g_variant_unref0 (_tmp53_);
				_g_variant_unref0 (_tmp51_);
				_tmp49_ = (_vala_array_free (_tmp49_, _tmp49__length1, (GDestroyNotify) g_variant_unref), NULL);
				if (G_UNLIKELY (_inner_error_ != NULL)) {
					_g_hash_table_unref0 (env);
					_g_object_unref0 (conn);
					block1_data_unref (_data1_);
					_data1_ = NULL;
					goto __catch0_g_error;
				}
				_g_hash_table_unref0 (env);
				_g_object_unref0 (conn);
			}
			_tmp54_ = unity_tester_options_scope_dbus_name;
			_tmp55_ = unity_tester_options_scope_dbus_path;
			_tmp56_ = unity_tester_options_search_type;
			_tmp59_ = unity_tester_get_scope_proxy (_tmp54_, _tmp55_, (UnityProtocolChannelType) _tmp56_, unity_tester_get_global_channel_flags (), &_tmp57_, &_tmp58_, &_inner_error_);
			_g_free0 (channel_id);
			channel_id = _tmp57_;
			_g_object_unref0 (results_model);
			results_model = _tmp58_;
			_data1_->proxy = _tmp59_;
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				_g_object_unref0 (results_model);
				_g_free0 (channel_id);
				block1_data_unref (_data1_);
				_data1_ = NULL;
				goto __catch0_g_error;
			}
			_tmp60_ = unity_tester_options_search_string;
			if (_tmp60_ != NULL) {
				Block2Data* _data2_;
				GMainLoop* _tmp61_;
				gint64 start_time = 0LL;
				DeeSerializableModel* _tmp62_;
				UnityProtocolScopeProxy* _tmp63_;
				const gchar* _tmp64_;
				const gchar* _tmp65_;
				GHashTable* _tmp66_;
				GHashTable* _tmp67_;
				GMainLoop* _tmp68_;
				DeeSerializableModel* _tmp69_;
				guint64 _tmp70_;
				gboolean _tmp71_;
				_data2_ = g_slice_new0 (Block2Data);
				_data2_->_ref_count_ = 1;
				_data2_->_data1_ = block1_data_ref (_data1_);
				_tmp61_ = g_main_loop_new (NULL, FALSE);
				_data2_->ml = _tmp61_;
				start_time = g_get_monotonic_time ();
				_data2_->first_result = (gint64) 0;
				_data2_->model_seqnum = (guint64) 0;
				_tmp62_ = results_model;
				g_signal_connect_data ((DeeModel*) _tmp62_, "row-added", (GCallback) ______lambda32__dee_model_row_added, block2_data_ref (_data2_), (GClosureNotify) block2_data_unref, 0);
				_tmp63_ = _data1_->proxy;
				_tmp64_ = channel_id;
				_tmp65_ = unity_tester_options_search_string;
				_tmp66_ = g_hash_table_new_full (NULL, NULL, _g_free0_, _g_variant_unref0_);
				_tmp67_ = _tmp66_;
				unity_protocol_scope_proxy_search (_tmp63_, _tmp64_, _tmp65_, _tmp67_, NULL, ______lambda33__gasync_ready_callback, block2_data_ref (_data2_));
				_g_hash_table_unref0 (_tmp67_);
				_tmp68_ = _data2_->ml;
				_vala_assert (unity_tester_run_with_timeout (_tmp68_, (guint) 15000), "run_with_timeout (ml, 15000)");
				_tmp69_ = results_model;
				_tmp70_ = _data2_->model_seqnum;
				unity_tester_wait_for_seqnum (G_TYPE_CHECK_INSTANCE_TYPE (_tmp69_, dee_shared_model_get_type ()) ? ((DeeSharedModel*) _tmp69_) : NULL, _tmp70_);
				_tmp71_ = unity_tester_options_benchmark;
				if (_tmp71_) {
					gint64 end_time = 0LL;
					gint64 delta = 0LL;
					gint64 _tmp72_;
					gint64 _tmp73_;
					gdouble elapsed = 0.0;
					gint64 _tmp74_;
					gdouble _tmp75_;
					gint64 _tmp76_;
					end_time = g_get_monotonic_time ();
					_tmp72_ = end_time;
					_tmp73_ = start_time;
					delta = _tmp72_ - _tmp73_;
					_tmp74_ = delta;
					elapsed = (gdouble) _tmp74_;
					_tmp75_ = elapsed;
					g_print ("Search took: %g seconds\n", _tmp75_ / 1000000.0);
					_tmp76_ = _data2_->first_result;
					if (_tmp76_ > ((gint64) 0)) {
						gint64 _tmp77_;
						gint64 _tmp78_;
						gint64 _tmp79_;
						gdouble _tmp80_;
						_tmp77_ = _data2_->first_result;
						_tmp78_ = start_time;
						delta = _tmp77_ - _tmp78_;
						_tmp79_ = delta;
						elapsed = (gdouble) _tmp79_;
						_tmp80_ = elapsed;
						g_print ("First result after: %g seconds\n", _tmp80_ / 1000000.0);
					}
				}
				block2_data_unref (_data2_);
				_data2_ = NULL;
			}
			_tmp82_ = unity_tester_options_dump_results;
			if (_tmp82_) {
				_tmp81_ = TRUE;
			} else {
				gboolean _tmp83_;
				_tmp83_ = unity_tester_options_dump_filters;
				_tmp81_ = _tmp83_;
			}
			if (_tmp81_) {
				gboolean _tmp84_;
				gboolean _tmp86_;
				_tmp84_ = unity_tester_options_dump_results;
				if (_tmp84_) {
					DeeSerializableModel* _tmp85_;
					_tmp85_ = results_model;
					unity_tester_dump_results_model ((DeeModel*) _tmp85_);
				}
				_tmp86_ = unity_tester_options_dump_filters;
				if (_tmp86_) {
					UnityProtocolScopeProxy* _tmp87_;
					DeeSerializableModel* _tmp88_;
					DeeSerializableModel* _tmp89_;
					_tmp87_ = _data1_->proxy;
					_tmp88_ = unity_protocol_scope_proxy_get_filters_model (_tmp87_);
					_tmp89_ = _tmp88_;
					unity_tester_dump_filters_model ((DeeModel*) _tmp89_);
				}
			}
			_tmp90_ = _data1_->proxy;
			_tmp91_ = channel_id;
			unity_tester_close_channel (_tmp90_, _tmp91_);
			_g_object_unref0 (results_model);
			_g_free0 (channel_id);
			block1_data_unref (_data1_);
			_data1_ = NULL;
		}
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* err = NULL;
		GError* _tmp92_;
		const gchar* _tmp93_;
		err = _inner_error_;
		_inner_error_ = NULL;
		_tmp92_ = err;
		_tmp93_ = _tmp92_->message;
		unity_tester_warn ("%s", _tmp93_, NULL);
		result = 1;
		_g_error_free0 (err);
		_g_option_context_free0 (opt_context);
		return result;
	}
	__finally0:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		gint _tmp94_ = -1;
		_g_option_context_free0 (opt_context);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return _tmp94_;
	}
	result = 0;
	_g_option_context_free0 (opt_context);
	return result;
}


int
main (int argc,
      char ** argv)
{
	return unity_tester_main (argv, argc);
}


static Block3Data*
block3_data_ref (Block3Data* _data3_)
{
	g_atomic_int_inc (&_data3_->_ref_count_);
	return _data3_;
}


static void
block3_data_unref (void * _userdata_)
{
	Block3Data* _data3_;
	_data3_ = (Block3Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data3_->_ref_count_)) {
		_g_object_unref0 (_data3_->results_model);
		_g_error_free0 (_data3_->outer_error);
		_g_free0 (_data3_->chan_id);
		_g_main_loop_unref0 (_data3_->ml);
		_g_object_unref0 (_data3_->proxy);
		g_slice_free (Block3Data, _data3_);
	}
}


static void
__lambda21_ (Block3Data* _data3_,
             GObject* obj,
             GAsyncResult* res)
{
	GMainLoop* _tmp5_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (res != NULL);
	{
		UnityProtocolScopeProxy* _tmp0_ = NULL;
		UnityProtocolScopeProxy* _tmp1_;
		UnityProtocolScopeProxy* _tmp2_;
		_tmp1_ = unity_protocol_scope_proxy_new_from_dbus_finish (res, &_inner_error_);
		_tmp0_ = _tmp1_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch3_g_error;
		}
		_tmp2_ = _tmp0_;
		_tmp0_ = NULL;
		_g_object_unref0 (_data3_->proxy);
		_data3_->proxy = _tmp2_;
		_g_object_unref0 (_tmp0_);
	}
	goto __finally3;
	__catch3_g_error:
	{
		GError* err = NULL;
		GError* _tmp3_;
		const gchar* _tmp4_;
		err = _inner_error_;
		_inner_error_ = NULL;
		_tmp3_ = err;
		_tmp4_ = _tmp3_->message;
		g_warning ("unity-tool.vala:348: %s", _tmp4_);
		_g_error_free0 (err);
	}
	__finally3:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	_tmp5_ = _data3_->ml;
	g_main_loop_quit (_tmp5_);
}


static void
___lambda21__gasync_ready_callback (GObject* source_object,
                                    GAsyncResult* res,
                                    gpointer self)
{
	__lambda21_ (self, source_object, res);
	block3_data_unref (self);
}


static gpointer
_g_error_copy0 (gpointer self)
{
	return self ? g_error_copy (self) : NULL;
}


static void
__lambda23_ (Block3Data* _data3_,
             GObject* obj,
             GAsyncResult* res)
{
	GMainLoop* _tmp9_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (res != NULL);
	{
		gchar* _tmp0_ = NULL;
		UnityProtocolScopeProxy* _tmp1_;
		DeeSerializableModel* _tmp2_ = NULL;
		gchar* _tmp3_;
		gchar* _tmp4_;
		_tmp1_ = _data3_->proxy;
		_tmp3_ = unity_protocol_scope_proxy_open_channel_finish (_tmp1_, res, &_tmp2_, &_inner_error_);
		_g_object_unref0 (_data3_->results_model);
		_data3_->results_model = _tmp2_;
		_tmp0_ = _tmp3_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch4_g_error;
		}
		_tmp4_ = _tmp0_;
		_tmp0_ = NULL;
		_g_free0 (_data3_->chan_id);
		_data3_->chan_id = _tmp4_;
		_g_free0 (_tmp0_);
	}
	goto __finally4;
	__catch4_g_error:
	{
		GError* err = NULL;
		GError* _tmp5_;
		const gchar* _tmp6_;
		GError* _tmp7_;
		GError* _tmp8_;
		err = _inner_error_;
		_inner_error_ = NULL;
		_tmp5_ = err;
		_tmp6_ = _tmp5_->message;
		g_warning ("unity-tool.vala:370: %s", _tmp6_);
		_tmp7_ = err;
		_tmp8_ = _g_error_copy0 (_tmp7_);
		_g_error_free0 (_data3_->outer_error);
		_data3_->outer_error = _tmp8_;
		_g_error_free0 (err);
	}
	__finally4:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	_tmp9_ = _data3_->ml;
	g_main_loop_quit (_tmp9_);
}


static void
___lambda23__gasync_ready_callback (GObject* source_object,
                                    GAsyncResult* res,
                                    gpointer self)
{
	__lambda23_ (self, source_object, res);
	block3_data_unref (self);
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


UnityProtocolScopeProxy*
unity_tester_get_scope_proxy (const gchar* dbus_name,
                              const gchar* dbus_path,
                              UnityProtocolChannelType channel_type,
                              UnityProtocolChannelFlags channel_flags,
                              gchar* * channel_id,
                              DeeSerializableModel* * model,
                              GError** error)
{
	gchar* _vala_channel_id = NULL;
	DeeSerializableModel* _vala_model = NULL;
	UnityProtocolScopeProxy* result = NULL;
	Block3Data* _data3_;
	GMainLoop* _tmp0_;
	GMainLoop* _tmp1_;
	UnityProtocolScopeProxy* _tmp2_;
	GMainLoop* _tmp4_;
	UnityProtocolScopeProxy* _tmp5_;
	GMainLoop* _tmp6_;
	GError* _tmp7_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
	DeeSerializableModel* _tmp12_;
	DeeSerializableModel* _tmp13_;
	UnityProtocolScopeProxy* _tmp14_;
	UnityProtocolScopeProxy* _tmp15_;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (dbus_name != NULL, NULL);
	g_return_val_if_fail (dbus_path != NULL, NULL);
	_data3_ = g_slice_new0 (Block3Data);
	_data3_->_ref_count_ = 1;
	_data3_->proxy = NULL;
	_tmp0_ = g_main_loop_new (NULL, FALSE);
	_data3_->ml = _tmp0_;
	unity_protocol_scope_proxy_new_from_dbus (dbus_name, dbus_path, NULL, ___lambda21__gasync_ready_callback, block3_data_ref (_data3_));
	_tmp1_ = _data3_->ml;
	unity_tester_run_with_timeout (_tmp1_, (guint) 15000);
	_tmp2_ = _data3_->proxy;
	if (_tmp2_ == NULL) {
		GError* _tmp3_;
		_tmp3_ = g_error_new_literal (G_IO_ERROR, G_IO_ERROR_TIMED_OUT, "Timed out waiting for proxy");
		_inner_error_ = _tmp3_;
		g_propagate_error (error, _inner_error_);
		block3_data_unref (_data3_);
		_data3_ = NULL;
		return NULL;
	}
	_tmp4_ = g_main_loop_new (NULL, FALSE);
	_g_main_loop_unref0 (_data3_->ml);
	_data3_->ml = _tmp4_;
	_data3_->chan_id = NULL;
	_data3_->outer_error = NULL;
	_data3_->results_model = NULL;
	_tmp5_ = _data3_->proxy;
	unity_protocol_scope_proxy_open_channel (_tmp5_, channel_type, channel_flags, NULL, ___lambda23__gasync_ready_callback, block3_data_ref (_data3_));
	_tmp6_ = _data3_->ml;
	unity_tester_run_with_timeout (_tmp6_, (guint) 15000);
	_tmp7_ = _data3_->outer_error;
	if (_tmp7_ != NULL) {
		GError* _tmp8_;
		GError* _tmp9_;
		_tmp8_ = _data3_->outer_error;
		_tmp9_ = _g_error_copy0 (_tmp8_);
		_inner_error_ = _tmp9_;
		g_propagate_error (error, _inner_error_);
		block3_data_unref (_data3_);
		_data3_ = NULL;
		return NULL;
	}
	_tmp10_ = _data3_->chan_id;
	_tmp11_ = g_strdup (_tmp10_);
	_g_free0 (_vala_channel_id);
	_vala_channel_id = _tmp11_;
	_tmp12_ = _data3_->results_model;
	_tmp13_ = _g_object_ref0 (_tmp12_);
	_g_object_unref0 (_vala_model);
	_vala_model = _tmp13_;
	_tmp14_ = _data3_->proxy;
	_tmp15_ = _g_object_ref0 (_tmp14_);
	result = _tmp15_;
	block3_data_unref (_data3_);
	_data3_ = NULL;
	if (channel_id) {
		*channel_id = _vala_channel_id;
	} else {
		_g_free0 (_vala_channel_id);
	}
	if (model) {
		*model = _vala_model;
	} else {
		_g_object_unref0 (_vala_model);
	}
	return result;
}


static Block4Data*
block4_data_ref (Block4Data* _data4_)
{
	g_atomic_int_inc (&_data4_->_ref_count_);
	return _data4_;
}


static void
block4_data_unref (void * _userdata_)
{
	Block4Data* _data4_;
	_data4_ = (Block4Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data4_->_ref_count_)) {
		_g_main_loop_unref0 (_data4_->ml);
		_g_object_unref0 (_data4_->proxy);
		g_slice_free (Block4Data, _data4_);
	}
}


static void
__lambda26_ (Block4Data* _data4_,
             GObject* obj,
             GAsyncResult* res)
{
	GError * _inner_error_ = NULL;
	g_return_if_fail (res != NULL);
	{
		unity_protocol_scope_proxy_close_channel_finish (_data4_->proxy, res, &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch5_g_error;
		}
	}
	goto __finally5;
	__catch5_g_error:
	{
		GError* err = NULL;
		GError* _tmp0_;
		const gchar* _tmp1_;
		err = _inner_error_;
		_inner_error_ = NULL;
		_tmp0_ = err;
		_tmp1_ = _tmp0_->message;
		g_warning ("unity-tool.vala:395: %s", _tmp1_);
		_g_error_free0 (err);
	}
	__finally5:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	g_main_loop_quit (_data4_->ml);
}


static void
___lambda26__gasync_ready_callback (GObject* source_object,
                                    GAsyncResult* res,
                                    gpointer self)
{
	__lambda26_ (self, source_object, res);
	block4_data_unref (self);
}


void
unity_tester_close_channel (UnityProtocolScopeProxy* proxy,
                            const gchar* channel_id)
{
	Block4Data* _data4_;
	UnityProtocolScopeProxy* _tmp0_;
	GMainLoop* _tmp1_;
	g_return_if_fail (proxy != NULL);
	g_return_if_fail (channel_id != NULL);
	_data4_ = g_slice_new0 (Block4Data);
	_data4_->_ref_count_ = 1;
	_tmp0_ = _g_object_ref0 (proxy);
	_g_object_unref0 (_data4_->proxy);
	_data4_->proxy = _tmp0_;
	_tmp1_ = g_main_loop_new (NULL, FALSE);
	_data4_->ml = _tmp1_;
	unity_protocol_scope_proxy_close_channel (_data4_->proxy, channel_id, NULL, ___lambda26__gasync_ready_callback, block4_data_ref (_data4_));
	unity_tester_run_with_timeout (_data4_->ml, (guint) 15000);
	block4_data_unref (_data4_);
	_data4_ = NULL;
}


static Block5Data*
block5_data_ref (Block5Data* _data5_)
{
	g_atomic_int_inc (&_data5_->_ref_count_);
	return _data5_;
}


static void
block5_data_unref (void * _userdata_)
{
	Block5Data* _data5_;
	_data5_ = (Block5Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data5_->_ref_count_)) {
		_g_main_loop_unref0 (_data5_->ml);
		g_slice_free (Block5Data, _data5_);
	}
}


static void
__lambda25_ (Block5Data* _data5_,
             DeeSharedModel* m,
             guint64 begin_seqnum,
             guint64 end_seqnum)
{
	GMainLoop* _tmp0_;
	g_return_if_fail (m != NULL);
	if (end_seqnum < _data5_->seqnum) {
		return;
	}
	_tmp0_ = _data5_->ml;
	g_main_loop_quit (_tmp0_);
}


static void
___lambda25__dee_shared_model_end_transaction (DeeSharedModel* _sender,
                                               guint64 begin_seqnum,
                                               guint64 end_seqnum,
                                               gpointer self)
{
	__lambda25_ (self, _sender, begin_seqnum, end_seqnum);
}


void
unity_tester_wait_for_seqnum (DeeSharedModel* model,
                              guint64 seqnum)
{
	Block5Data* _data5_;
	GMainLoop* _tmp0_;
	gulong update_sig_id = 0UL;
	gulong _tmp1_;
	GMainLoop* _tmp2_;
	gulong _tmp3_;
	g_return_if_fail (model != NULL);
	_data5_ = g_slice_new0 (Block5Data);
	_data5_->_ref_count_ = 1;
	_data5_->seqnum = seqnum;
	if (dee_serializable_model_get_seqnum ((DeeSerializableModel*) model) >= _data5_->seqnum) {
		block5_data_unref (_data5_);
		_data5_ = NULL;
		return;
	}
	_tmp0_ = g_main_loop_new (NULL, FALSE);
	_data5_->ml = _tmp0_;
	_tmp1_ = g_signal_connect_data (model, "end-transaction", (GCallback) ___lambda25__dee_shared_model_end_transaction, block5_data_ref (_data5_), (GClosureNotify) block5_data_unref, 0);
	update_sig_id = _tmp1_;
	_tmp2_ = _data5_->ml;
	unity_tester_run_with_timeout (_tmp2_, (guint) 15000);
	_tmp3_ = update_sig_id;
	g_signal_handler_disconnect (model, _tmp3_);
	block5_data_unref (_data5_);
	_data5_ = NULL;
}


static void
_vala_array_add1 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (gchar*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


static void
_vala_array_add2 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (gchar*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


gchar**
unity_tester_get_test_cases (int* result_length1)
{
	gchar** result = NULL;
	gchar** results = NULL;
	gchar** _tmp0_;
	gint results_length1;
	gint _results_size_;
	gchar** _tmp1_;
	gint _tmp1__length1;
	gchar** _tmp28_;
	gint _tmp28__length1;
	GError * _inner_error_ = NULL;
	_tmp0_ = g_new0 (gchar*, 0 + 1);
	results = _tmp0_;
	results_length1 = 0;
	_results_size_ = results_length1;
	_tmp1_ = unity_tester_options_test_cases;
	_tmp1__length1 = unity_tester_options_test_cases_length1;
	{
		gchar** path_collection = NULL;
		gint path_collection_length1 = 0;
		gint _path_collection_size_ = 0;
		gint path_it = 0;
		path_collection = _tmp1_;
		path_collection_length1 = _tmp1__length1;
		for (path_it = 0; path_it < _tmp1__length1; path_it = path_it + 1) {
			gchar* _tmp2_;
			gchar* path = NULL;
			_tmp2_ = g_strdup (path_collection[path_it]);
			path = _tmp2_;
			{
				gboolean _tmp3_ = FALSE;
				const gchar* _tmp4_;
				_tmp4_ = path;
				if (g_file_test (_tmp4_, G_FILE_TEST_IS_REGULAR)) {
					const gchar* _tmp5_;
					_tmp5_ = path;
					_tmp3_ = g_file_test (_tmp5_, G_FILE_TEST_IS_EXECUTABLE);
				} else {
					_tmp3_ = FALSE;
				}
				if (_tmp3_) {
					gchar** _tmp6_;
					gint _tmp6__length1;
					const gchar* _tmp7_;
					gchar* _tmp8_;
					_tmp6_ = results;
					_tmp6__length1 = results_length1;
					_tmp7_ = path;
					_tmp8_ = g_strdup (_tmp7_);
					_vala_array_add1 (&results, &results_length1, &_results_size_, _tmp8_);
				} else {
					const gchar* _tmp9_;
					_tmp9_ = path;
					if (g_file_test (_tmp9_, G_FILE_TEST_IS_DIR)) {
						{
							GDir* dir = NULL;
							const gchar* _tmp10_;
							GDir* _tmp11_;
							const gchar* name = NULL;
							GDir* _tmp12_;
							const gchar* _tmp13_;
							_tmp10_ = path;
							_tmp11_ = g_dir_open (_tmp10_, (guint) 0, &_inner_error_);
							dir = _tmp11_;
							if (G_UNLIKELY (_inner_error_ != NULL)) {
								goto __catch6_g_error;
							}
							_tmp12_ = dir;
							_tmp13_ = g_dir_read_name (_tmp12_);
							name = _tmp13_;
							while (TRUE) {
								const gchar* _tmp14_;
								gchar* child_path = NULL;
								const gchar* _tmp15_;
								const gchar* _tmp16_;
								gchar* _tmp17_;
								gboolean _tmp18_ = FALSE;
								const gchar* _tmp19_;
								GDir* _tmp24_;
								const gchar* _tmp25_;
								_tmp14_ = name;
								if (!(_tmp14_ != NULL)) {
									break;
								}
								_tmp15_ = path;
								_tmp16_ = name;
								_tmp17_ = g_build_filename (_tmp15_, _tmp16_, NULL, NULL);
								child_path = _tmp17_;
								_tmp19_ = child_path;
								if (g_file_test (_tmp19_, G_FILE_TEST_IS_REGULAR)) {
									const gchar* _tmp20_;
									_tmp20_ = child_path;
									_tmp18_ = g_file_test (_tmp20_, G_FILE_TEST_IS_EXECUTABLE);
								} else {
									_tmp18_ = FALSE;
								}
								if (_tmp18_) {
									gchar** _tmp21_;
									gint _tmp21__length1;
									const gchar* _tmp22_;
									gchar* _tmp23_;
									_tmp21_ = results;
									_tmp21__length1 = results_length1;
									_tmp22_ = child_path;
									_tmp23_ = g_strdup (_tmp22_);
									_vala_array_add2 (&results, &results_length1, &_results_size_, _tmp23_);
								}
								_tmp24_ = dir;
								_tmp25_ = g_dir_read_name (_tmp24_);
								name = _tmp25_;
								_g_free0 (child_path);
							}
							_g_dir_close0 (dir);
						}
						goto __finally6;
						__catch6_g_error:
						{
							GError* e = NULL;
							GError* _tmp26_;
							const gchar* _tmp27_;
							e = _inner_error_;
							_inner_error_ = NULL;
							_tmp26_ = e;
							_tmp27_ = _tmp26_->message;
							unity_tester_warn ("%s", _tmp27_, NULL);
							_g_error_free0 (e);
						}
						__finally6:
						if (G_UNLIKELY (_inner_error_ != NULL)) {
							_g_free0 (path);
							results = (_vala_array_free (results, results_length1, (GDestroyNotify) g_free), NULL);
							g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
							g_clear_error (&_inner_error_);
							return NULL;
						}
					}
				}
				_g_free0 (path);
			}
		}
	}
	_tmp28_ = results;
	_tmp28__length1 = results_length1;
	if (result_length1) {
		*result_length1 = _tmp28__length1;
	}
	result = _tmp28_;
	return result;
}


static gpointer
_g_main_loop_ref0 (gpointer self)
{
	return self ? g_main_loop_ref (self) : NULL;
}


static Block6Data*
block6_data_ref (Block6Data* _data6_)
{
	g_atomic_int_inc (&_data6_->_ref_count_);
	return _data6_;
}


static void
block6_data_unref (void * _userdata_)
{
	Block6Data* _data6_;
	_data6_ = (Block6Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data6_->_ref_count_)) {
		_g_main_loop_unref0 (_data6_->ml);
		g_slice_free (Block6Data, _data6_);
	}
}


static gboolean
__lambda22_ (Block6Data* _data6_)
{
	gboolean result = FALSE;
	_data6_->timeout_reached = TRUE;
	g_debug ("unity-tool.vala:458: Timeout reached");
	g_main_loop_quit (_data6_->ml);
	result = FALSE;
	return result;
}


static gboolean
___lambda22__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda22_ (self);
	return result;
}


gboolean
unity_tester_run_with_timeout (GMainLoop* ml,
                               guint timeout_ms)
{
	gboolean result = FALSE;
	Block6Data* _data6_;
	GMainLoop* _tmp0_;
	guint t_id = 0U;
	gboolean _tmp1_;
	gboolean _tmp3_;
	g_return_val_if_fail (ml != NULL, FALSE);
	_data6_ = g_slice_new0 (Block6Data);
	_data6_->_ref_count_ = 1;
	_tmp0_ = _g_main_loop_ref0 (ml);
	_g_main_loop_unref0 (_data6_->ml);
	_data6_->ml = _tmp0_;
	_data6_->timeout_reached = FALSE;
	t_id = g_timeout_add_full (G_PRIORITY_DEFAULT, timeout_ms, ___lambda22__gsource_func, block6_data_ref (_data6_), block6_data_unref);
	g_main_loop_run (_data6_->ml);
	_tmp1_ = _data6_->timeout_reached;
	if (!_tmp1_) {
		guint _tmp2_;
		_tmp2_ = t_id;
		g_source_remove (_tmp2_);
	}
	_tmp3_ = _data6_->timeout_reached;
	result = !_tmp3_;
	block6_data_unref (_data6_);
	_data6_ = NULL;
	return result;
}


static void
__lambda20_ (void)
{
	unity_tester_call_scope_search ("", (gint) UNITY_PROTOCOL_CHANNEL_TYPE_DEFAULT);
}


static void
___lambda20__gtest_data_func (gpointer self)
{
	__lambda20_ ();
}


static void
__lambda27_ (void)
{
	unity_tester_call_scope_search ("a", (gint) UNITY_PROTOCOL_CHANNEL_TYPE_DEFAULT);
}


static void
___lambda27__gtest_data_func (gpointer self)
{
	__lambda27_ ();
}


static void
__lambda28_ (void)
{
	unity_tester_call_scope_search ("", (gint) UNITY_PROTOCOL_CHANNEL_TYPE_DEFAULT);
}


static void
___lambda28__gtest_data_func (gpointer self)
{
	__lambda28_ ();
}


static void
__lambda29_ (void)
{
	unity_tester_call_scope_search ("", (gint) UNITY_PROTOCOL_CHANNEL_TYPE_GLOBAL);
}


static void
___lambda29__gtest_data_func (gpointer self)
{
	__lambda29_ ();
}


static void
__lambda30_ (void)
{
	unity_tester_call_scope_search ("a", (gint) UNITY_PROTOCOL_CHANNEL_TYPE_GLOBAL);
}


static void
___lambda30__gtest_data_func (gpointer self)
{
	__lambda30_ ();
}


static void
__lambda31_ (void)
{
	unity_tester_call_scope_search ("", (gint) UNITY_PROTOCOL_CHANNEL_TYPE_GLOBAL);
}


static void
___lambda31__gtest_data_func (gpointer self)
{
	__lambda31_ ();
}


gint
unity_tester_run_common_tests (void)
{
	gint result = 0;
	gchar** args = NULL;
	gchar* _tmp0_;
	gchar** _tmp1_;
	gint args_length1;
	gint _args_size_;
	gchar** dummy = NULL;
	gint dummy_length1;
	gint _dummy_size_;
	_tmp0_ = g_strdup ("./libunity-tool");
	_tmp1_ = g_new0 (gchar*, 1 + 1);
	_tmp1_[0] = _tmp0_;
	args = _tmp1_;
	args_length1 = 1;
	_args_size_ = args_length1;
	dummy = args;
	dummy_length1 = args_length1;
	_dummy_size_ = dummy_length1;
	g_test_init (&dummy_length1, &dummy, NULL);
	g_test_add_data_func ("/Integration/ScopeTest/DefaultSearch/Empty", NULL, ___lambda20__gtest_data_func);
	g_test_add_data_func ("/Integration/ScopeTest/DefaultSearch/NonEmpty", NULL, ___lambda27__gtest_data_func);
	g_test_add_data_func ("/Integration/ScopeTest/DefaultSearch/Empty2", NULL, ___lambda28__gtest_data_func);
	g_test_add_data_func ("/Integration/ScopeTest/GlobalSearch/Empty", NULL, ___lambda29__gtest_data_func);
	g_test_add_data_func ("/Integration/ScopeTest/GlobalSearch/NonEmpty", NULL, ___lambda30__gtest_data_func);
	g_test_add_data_func ("/Integration/ScopeTest/GlobalSearch/Empty2", NULL, ___lambda31__gtest_data_func);
	result = g_test_run ();
	args = (_vala_array_free (args, args_length1, (GDestroyNotify) g_free), NULL);
	return result;
}


UnityProtocolChannelFlags
unity_tester_get_global_channel_flags (void)
{
	UnityProtocolChannelFlags result = 0;
	UnityProtocolChannelFlags flags = 0;
	gboolean _tmp0_;
	gboolean _tmp2_;
	flags = UNITY_PROTOCOL_CHANNEL_FLAGS_NONE;
	_tmp0_ = unity_tester_options_private_channel;
	if (_tmp0_) {
		UnityProtocolChannelFlags _tmp1_;
		_tmp1_ = flags;
		flags = _tmp1_ | UNITY_PROTOCOL_CHANNEL_FLAGS_PRIVATE;
	}
	_tmp2_ = unity_tester_options_diff_changes;
	if (_tmp2_) {
		UnityProtocolChannelFlags _tmp3_;
		_tmp3_ = flags;
		flags = _tmp3_ | UNITY_PROTOCOL_CHANNEL_FLAGS_DIFF_CHANGES;
	}
	result = flags;
	return result;
}


static Block7Data*
block7_data_ref (Block7Data* _data7_)
{
	g_atomic_int_inc (&_data7_->_ref_count_);
	return _data7_;
}


static void
block7_data_unref (void * _userdata_)
{
	Block7Data* _data7_;
	_data7_ = (Block7Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data7_->_ref_count_)) {
		_g_hash_table_unref0 (_data7_->reply_dict);
		_g_main_loop_unref0 (_data7_->ml);
		_g_object_unref0 (_data7_->proxy);
		g_slice_free (Block7Data, _data7_);
	}
}


static void
__lambda24_ (Block7Data* _data7_,
             GObject* obj,
             GAsyncResult* res)
{
	GMainLoop* _tmp8_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (res != NULL);
	{
		GHashTable* _tmp0_ = NULL;
		GHashTable* _tmp1_;
		GHashTable* _tmp2_;
		GHashTable* _tmp3_;
		_tmp1_ = unity_protocol_scope_proxy_search_finish (_data7_->proxy, res, &_inner_error_);
		_tmp0_ = _tmp1_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch7_g_error;
		}
		_tmp2_ = _tmp0_;
		_tmp0_ = NULL;
		_g_hash_table_unref0 (_data7_->reply_dict);
		_data7_->reply_dict = _tmp2_;
		_tmp3_ = _data7_->reply_dict;
		if (g_hash_table_contains (_tmp3_, "model-seqnum")) {
			GHashTable* _tmp4_;
			gconstpointer _tmp5_;
			_tmp4_ = _data7_->reply_dict;
			_tmp5_ = g_hash_table_lookup (_tmp4_, "model-seqnum");
			_data7_->model_seqnum = g_variant_get_uint64 ((GVariant*) _tmp5_);
		}
		_g_hash_table_unref0 (_tmp0_);
	}
	goto __finally7;
	__catch7_g_error:
	{
		GError* err = NULL;
		GError* _tmp6_;
		const gchar* _tmp7_;
		err = _inner_error_;
		_inner_error_ = NULL;
		_tmp6_ = err;
		_tmp7_ = _tmp6_->message;
		g_warning ("unity-tool.vala:550: %s", _tmp7_);
		_g_error_free0 (err);
	}
	__finally7:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	_tmp8_ = _data7_->ml;
	g_main_loop_quit (_tmp8_);
}


static void
___lambda24__gasync_ready_callback (GObject* source_object,
                                    GAsyncResult* res,
                                    gpointer self)
{
	__lambda24_ (self, source_object, res);
	block7_data_unref (self);
}


void
unity_tester_call_scope_search (const gchar* search_string,
                                gint search_type)
{
	Block7Data* _data7_;
	gchar* channel_id = NULL;
	DeeSerializableModel* results_model = NULL;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	gchar* _tmp2_ = NULL;
	DeeSerializableModel* _tmp3_ = NULL;
	UnityProtocolScopeProxy* _tmp4_;
	GMainLoop* _tmp5_;
	GHashTable* _tmp6_;
	GHashTable* _tmp7_;
	GMainLoop* _tmp8_;
	guint64 _tmp9_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (search_string != NULL);
	_data7_ = g_slice_new0 (Block7Data);
	_data7_->_ref_count_ = 1;
	_tmp0_ = unity_tester_options_scope_dbus_name;
	_tmp1_ = unity_tester_options_scope_dbus_path;
	_tmp4_ = unity_tester_get_scope_proxy (_tmp0_, _tmp1_, (UnityProtocolChannelType) search_type, unity_tester_get_global_channel_flags (), &_tmp2_, &_tmp3_, &_inner_error_);
	_g_free0 (channel_id);
	channel_id = _tmp2_;
	_g_object_unref0 (results_model);
	results_model = _tmp3_;
	_data7_->proxy = _tmp4_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		_g_object_unref0 (results_model);
		_g_free0 (channel_id);
		block7_data_unref (_data7_);
		_data7_ = NULL;
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	_tmp5_ = g_main_loop_new (NULL, FALSE);
	_data7_->ml = _tmp5_;
	_data7_->model_seqnum = (guint64) 0;
	_data7_->reply_dict = NULL;
	_tmp6_ = g_hash_table_new_full (NULL, NULL, _g_free0_, _g_variant_unref0_);
	_tmp7_ = _tmp6_;
	unity_protocol_scope_proxy_search (_data7_->proxy, channel_id, search_string, _tmp7_, NULL, ___lambda24__gasync_ready_callback, block7_data_ref (_data7_));
	_g_hash_table_unref0 (_tmp7_);
	_tmp8_ = _data7_->ml;
	_vala_assert (unity_tester_run_with_timeout (_tmp8_, (guint) 15000), "run_with_timeout (ml, 15000)");
	_tmp9_ = _data7_->model_seqnum;
	unity_tester_wait_for_seqnum (G_TYPE_CHECK_INSTANCE_TYPE (results_model, dee_shared_model_get_type ()) ? ((DeeSharedModel*) results_model) : NULL, _tmp9_);
	unity_tester_close_channel (_data7_->proxy, channel_id);
	_g_object_unref0 (results_model);
	_g_free0 (channel_id);
	block7_data_unref (_data7_);
	_data7_ = NULL;
}


void
unity_tester_dump_results_model (DeeModel* model)
{
	DeeModelIter* iter = NULL;
	DeeModelIter* _tmp0_;
	DeeModelIter* last_iter = NULL;
	DeeModelIter* _tmp1_;
	g_return_if_fail (model != NULL);
	_tmp0_ = dee_model_get_first_iter (model);
	iter = _tmp0_;
	_tmp1_ = dee_model_get_last_iter (model);
	last_iter = _tmp1_;
	while (TRUE) {
		DeeModelIter* _tmp2_;
		DeeModelIter* _tmp3_;
		GVariant** row = NULL;
		DeeModelIter* _tmp4_;
		GVariant** _tmp5_;
		GVariant** _tmp6_;
		gint row_length1;
		gint _row_size_;
		GVariant** _tmp7_;
		gint _tmp7__length1;
		GVariant* _tmp8_;
		const gchar* _tmp9_;
		GVariant** _tmp10_;
		gint _tmp10__length1;
		GVariant* _tmp11_;
		const gchar* _tmp12_;
		GVariant** _tmp13_;
		gint _tmp13__length1;
		GVariant* _tmp14_;
		GVariant** _tmp15_;
		gint _tmp15__length1;
		GVariant* _tmp16_;
		GVariant** _tmp17_;
		gint _tmp17__length1;
		GVariant* _tmp18_;
		const gchar* _tmp19_;
		GVariant** _tmp20_;
		gint _tmp20__length1;
		GVariant* _tmp21_;
		const gchar* _tmp22_;
		GVariant** _tmp23_;
		gint _tmp23__length1;
		GVariant* _tmp24_;
		const gchar* _tmp25_;
		GVariant** _tmp26_;
		gint _tmp26__length1;
		GVariant* _tmp27_;
		const gchar* _tmp28_;
		GVariant** _tmp29_;
		gint _tmp29__length1;
		GVariant* _tmp30_;
		gchar* _tmp31_;
		gchar* _tmp32_;
		DeeModelIter* _tmp33_;
		DeeModelIter* _tmp34_;
		_tmp2_ = iter;
		_tmp3_ = last_iter;
		if (!(_tmp2_ != _tmp3_)) {
			break;
		}
		_tmp4_ = iter;
		_tmp6_ = _tmp5_ = dee_model_get_row (model, _tmp4_, NULL);
		row = _tmp6_;
		row_length1 = _vala_array_length (_tmp5_);
		_row_size_ = row_length1;
		_tmp7_ = row;
		_tmp7__length1 = row_length1;
		_tmp8_ = _tmp7_[0];
		_tmp9_ = g_variant_get_string (_tmp8_, NULL);
		_tmp10_ = row;
		_tmp10__length1 = row_length1;
		_tmp11_ = _tmp10_[1];
		_tmp12_ = g_variant_get_string (_tmp11_, NULL);
		_tmp13_ = row;
		_tmp13__length1 = row_length1;
		_tmp14_ = _tmp13_[2];
		_tmp15_ = row;
		_tmp15__length1 = row_length1;
		_tmp16_ = _tmp15_[3];
		_tmp17_ = row;
		_tmp17__length1 = row_length1;
		_tmp18_ = _tmp17_[4];
		_tmp19_ = g_variant_get_string (_tmp18_, NULL);
		_tmp20_ = row;
		_tmp20__length1 = row_length1;
		_tmp21_ = _tmp20_[5];
		_tmp22_ = g_variant_get_string (_tmp21_, NULL);
		_tmp23_ = row;
		_tmp23__length1 = row_length1;
		_tmp24_ = _tmp23_[6];
		_tmp25_ = g_variant_get_string (_tmp24_, NULL);
		_tmp26_ = row;
		_tmp26__length1 = row_length1;
		_tmp27_ = _tmp26_[7];
		_tmp28_ = g_variant_get_string (_tmp27_, NULL);
		_tmp29_ = row;
		_tmp29__length1 = row_length1;
		_tmp30_ = _tmp29_[8];
		_tmp31_ = g_variant_print (_tmp30_, TRUE);
		_tmp32_ = _tmp31_;
		g_print ("%s\t%s\t%u\t%u\t%s\t%s\t%s\t%s\t%s\n", _tmp9_, _tmp12_, (guint) g_variant_get_uint32 (_tmp14_), (guint) g_variant_get_uint32 (_tmp16_), _tmp19_, _tmp22_, _tmp25_, _tmp28_, _tmp32_);
		_g_free0 (_tmp32_);
		_tmp33_ = iter;
		_tmp34_ = dee_model_next (model, _tmp33_);
		iter = _tmp34_;
		row = (_vala_array_free (row, row_length1, (GDestroyNotify) g_variant_unref), NULL);
	}
}


static gchar*
bool_to_string (gboolean self)
{
	gchar* result = NULL;
	if (self) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup ("true");
		result = _tmp0_;
		return result;
	} else {
		gchar* _tmp1_;
		_tmp1_ = g_strdup ("false");
		result = _tmp1_;
		return result;
	}
}


void
unity_tester_dump_filters_model (DeeModel* model)
{
	DeeModelIter* iter = NULL;
	DeeModelIter* _tmp0_;
	DeeModelIter* last_iter = NULL;
	DeeModelIter* _tmp1_;
	g_return_if_fail (model != NULL);
	_tmp0_ = dee_model_get_first_iter (model);
	iter = _tmp0_;
	_tmp1_ = dee_model_get_last_iter (model);
	last_iter = _tmp1_;
	while (TRUE) {
		DeeModelIter* _tmp2_;
		DeeModelIter* _tmp3_;
		GVariant** row = NULL;
		DeeModelIter* _tmp4_;
		GVariant** _tmp5_;
		GVariant** _tmp6_;
		gint row_length1;
		gint _row_size_;
		GVariant** _tmp7_;
		gint _tmp7__length1;
		GVariant* _tmp8_;
		const gchar* _tmp9_;
		GVariant** _tmp10_;
		gint _tmp10__length1;
		GVariant* _tmp11_;
		const gchar* _tmp12_;
		GVariant** _tmp13_;
		gint _tmp13__length1;
		GVariant* _tmp14_;
		const gchar* _tmp15_;
		GVariant** _tmp16_;
		gint _tmp16__length1;
		GVariant* _tmp17_;
		const gchar* _tmp18_;
		GVariant** _tmp19_;
		gint _tmp19__length1;
		GVariant* _tmp20_;
		gchar* _tmp21_;
		gchar* _tmp22_;
		GVariant** _tmp23_;
		gint _tmp23__length1;
		GVariant* _tmp24_;
		gchar* _tmp25_;
		gchar* _tmp26_;
		GVariant** _tmp27_;
		gint _tmp27__length1;
		GVariant* _tmp28_;
		gchar* _tmp29_;
		gchar* _tmp30_;
		GVariant** _tmp31_;
		gint _tmp31__length1;
		GVariant* _tmp32_;
		gchar* _tmp33_;
		gchar* _tmp34_;
		DeeModelIter* _tmp35_;
		DeeModelIter* _tmp36_;
		_tmp2_ = iter;
		_tmp3_ = last_iter;
		if (!(_tmp2_ != _tmp3_)) {
			break;
		}
		_tmp4_ = iter;
		_tmp6_ = _tmp5_ = dee_model_get_row (model, _tmp4_, NULL);
		row = _tmp6_;
		row_length1 = _vala_array_length (_tmp5_);
		_row_size_ = row_length1;
		_tmp7_ = row;
		_tmp7__length1 = row_length1;
		_tmp8_ = _tmp7_[0];
		_tmp9_ = g_variant_get_string (_tmp8_, NULL);
		_tmp10_ = row;
		_tmp10__length1 = row_length1;
		_tmp11_ = _tmp10_[1];
		_tmp12_ = g_variant_get_string (_tmp11_, NULL);
		_tmp13_ = row;
		_tmp13__length1 = row_length1;
		_tmp14_ = _tmp13_[2];
		_tmp15_ = g_variant_get_string (_tmp14_, NULL);
		_tmp16_ = row;
		_tmp16__length1 = row_length1;
		_tmp17_ = _tmp16_[3];
		_tmp18_ = g_variant_get_string (_tmp17_, NULL);
		_tmp19_ = row;
		_tmp19__length1 = row_length1;
		_tmp20_ = _tmp19_[4];
		_tmp21_ = g_variant_print (_tmp20_, TRUE);
		_tmp22_ = _tmp21_;
		_tmp23_ = row;
		_tmp23__length1 = row_length1;
		_tmp24_ = _tmp23_[5];
		_tmp25_ = bool_to_string (g_variant_get_boolean (_tmp24_));
		_tmp26_ = _tmp25_;
		_tmp27_ = row;
		_tmp27__length1 = row_length1;
		_tmp28_ = _tmp27_[6];
		_tmp29_ = bool_to_string (g_variant_get_boolean (_tmp28_));
		_tmp30_ = _tmp29_;
		_tmp31_ = row;
		_tmp31__length1 = row_length1;
		_tmp32_ = _tmp31_[7];
		_tmp33_ = bool_to_string (g_variant_get_boolean (_tmp32_));
		_tmp34_ = _tmp33_;
		g_print ("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n", _tmp9_, _tmp12_, _tmp15_, _tmp18_, _tmp22_, _tmp26_, _tmp30_, _tmp34_);
		_g_free0 (_tmp34_);
		_g_free0 (_tmp30_);
		_g_free0 (_tmp26_);
		_g_free0 (_tmp22_);
		_tmp35_ = iter;
		_tmp36_ = dee_model_next (model, _tmp35_);
		iter = _tmp36_;
		row = (_vala_array_free (row, row_length1, (GDestroyNotify) g_variant_unref), NULL);
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



