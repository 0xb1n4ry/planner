/*
 * Generated by gdbus-codegen 2.58.1 from org.gnome.evolution.dataserver.AddressBookCursor.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __E_DBUS_ADDRESS_BOOK_CURSOR_H__
#define __E_DBUS_ADDRESS_BOOK_CURSOR_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.evolution.dataserver.AddressBookCursor */

#define E_DBUS_TYPE_ADDRESS_BOOK_CURSOR (e_dbus_address_book_cursor_get_type ())
#define E_DBUS_ADDRESS_BOOK_CURSOR(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_TYPE_ADDRESS_BOOK_CURSOR, EDBusAddressBookCursor))
#define E_DBUS_IS_ADDRESS_BOOK_CURSOR(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_TYPE_ADDRESS_BOOK_CURSOR))
#define E_DBUS_ADDRESS_BOOK_CURSOR_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), E_DBUS_TYPE_ADDRESS_BOOK_CURSOR, EDBusAddressBookCursorIface))

struct _EDBusAddressBookCursor;
typedef struct _EDBusAddressBookCursor EDBusAddressBookCursor;
typedef struct _EDBusAddressBookCursorIface EDBusAddressBookCursorIface;

struct _EDBusAddressBookCursorIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_dispose) (
    EDBusAddressBookCursor *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_alphabetic_index) (
    EDBusAddressBookCursor *object,
    GDBusMethodInvocation *invocation,
    guint arg_index,
    const gchar *arg_locale);

  gboolean (*handle_set_query) (
    EDBusAddressBookCursor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_query);

  gboolean (*handle_step) (
    EDBusAddressBookCursor *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_revision_guard,
    gint arg_flags,
    gint arg_origin,
    gint arg_count);

  guint  (*get_position) (EDBusAddressBookCursor *object);

  guint  (*get_total) (EDBusAddressBookCursor *object);

};

GType e_dbus_address_book_cursor_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *e_dbus_address_book_cursor_interface_info (void);
guint e_dbus_address_book_cursor_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void e_dbus_address_book_cursor_complete_step (
    EDBusAddressBookCursor *object,
    GDBusMethodInvocation *invocation,
    gint n_results,
    const gchar *const *vcards,
    guint new_total,
    guint new_position);

void e_dbus_address_book_cursor_complete_set_alphabetic_index (
    EDBusAddressBookCursor *object,
    GDBusMethodInvocation *invocation,
    guint new_total,
    guint new_position);

void e_dbus_address_book_cursor_complete_set_query (
    EDBusAddressBookCursor *object,
    GDBusMethodInvocation *invocation,
    guint new_total,
    guint new_position);

void e_dbus_address_book_cursor_complete_dispose (
    EDBusAddressBookCursor *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void e_dbus_address_book_cursor_call_step (
    EDBusAddressBookCursor *proxy,
    const gchar *arg_revision_guard,
    gint arg_flags,
    gint arg_origin,
    gint arg_count,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_cursor_call_step_finish (
    EDBusAddressBookCursor *proxy,
    gint *out_n_results,
    gchar ***out_vcards,
    guint *out_new_total,
    guint *out_new_position,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_cursor_call_step_sync (
    EDBusAddressBookCursor *proxy,
    const gchar *arg_revision_guard,
    gint arg_flags,
    gint arg_origin,
    gint arg_count,
    gint *out_n_results,
    gchar ***out_vcards,
    guint *out_new_total,
    guint *out_new_position,
    GCancellable *cancellable,
    GError **error);

void e_dbus_address_book_cursor_call_set_alphabetic_index (
    EDBusAddressBookCursor *proxy,
    guint arg_index,
    const gchar *arg_locale,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_cursor_call_set_alphabetic_index_finish (
    EDBusAddressBookCursor *proxy,
    guint *out_new_total,
    guint *out_new_position,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_cursor_call_set_alphabetic_index_sync (
    EDBusAddressBookCursor *proxy,
    guint arg_index,
    const gchar *arg_locale,
    guint *out_new_total,
    guint *out_new_position,
    GCancellable *cancellable,
    GError **error);

void e_dbus_address_book_cursor_call_set_query (
    EDBusAddressBookCursor *proxy,
    const gchar *arg_query,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_cursor_call_set_query_finish (
    EDBusAddressBookCursor *proxy,
    guint *out_new_total,
    guint *out_new_position,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_cursor_call_set_query_sync (
    EDBusAddressBookCursor *proxy,
    const gchar *arg_query,
    guint *out_new_total,
    guint *out_new_position,
    GCancellable *cancellable,
    GError **error);

void e_dbus_address_book_cursor_call_dispose (
    EDBusAddressBookCursor *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_cursor_call_dispose_finish (
    EDBusAddressBookCursor *proxy,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_cursor_call_dispose_sync (
    EDBusAddressBookCursor *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
guint e_dbus_address_book_cursor_get_total (EDBusAddressBookCursor *object);
void e_dbus_address_book_cursor_set_total (EDBusAddressBookCursor *object, guint value);

guint e_dbus_address_book_cursor_get_position (EDBusAddressBookCursor *object);
void e_dbus_address_book_cursor_set_position (EDBusAddressBookCursor *object, guint value);


/* ---- */

#define E_DBUS_TYPE_ADDRESS_BOOK_CURSOR_PROXY (e_dbus_address_book_cursor_proxy_get_type ())
#define E_DBUS_ADDRESS_BOOK_CURSOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_TYPE_ADDRESS_BOOK_CURSOR_PROXY, EDBusAddressBookCursorProxy))
#define E_DBUS_ADDRESS_BOOK_CURSOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), E_DBUS_TYPE_ADDRESS_BOOK_CURSOR_PROXY, EDBusAddressBookCursorProxyClass))
#define E_DBUS_ADDRESS_BOOK_CURSOR_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), E_DBUS_TYPE_ADDRESS_BOOK_CURSOR_PROXY, EDBusAddressBookCursorProxyClass))
#define E_DBUS_IS_ADDRESS_BOOK_CURSOR_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_TYPE_ADDRESS_BOOK_CURSOR_PROXY))
#define E_DBUS_IS_ADDRESS_BOOK_CURSOR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), E_DBUS_TYPE_ADDRESS_BOOK_CURSOR_PROXY))

typedef struct _EDBusAddressBookCursorProxy EDBusAddressBookCursorProxy;
typedef struct _EDBusAddressBookCursorProxyClass EDBusAddressBookCursorProxyClass;
typedef struct _EDBusAddressBookCursorProxyPrivate EDBusAddressBookCursorProxyPrivate;

struct _EDBusAddressBookCursorProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  EDBusAddressBookCursorProxyPrivate *priv;
};

struct _EDBusAddressBookCursorProxyClass
{
  GDBusProxyClass parent_class;
};

GType e_dbus_address_book_cursor_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (EDBusAddressBookCursorProxy, g_object_unref)
#endif

void e_dbus_address_book_cursor_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EDBusAddressBookCursor *e_dbus_address_book_cursor_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
EDBusAddressBookCursor *e_dbus_address_book_cursor_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void e_dbus_address_book_cursor_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EDBusAddressBookCursor *e_dbus_address_book_cursor_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
EDBusAddressBookCursor *e_dbus_address_book_cursor_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define E_DBUS_TYPE_ADDRESS_BOOK_CURSOR_SKELETON (e_dbus_address_book_cursor_skeleton_get_type ())
#define E_DBUS_ADDRESS_BOOK_CURSOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_TYPE_ADDRESS_BOOK_CURSOR_SKELETON, EDBusAddressBookCursorSkeleton))
#define E_DBUS_ADDRESS_BOOK_CURSOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), E_DBUS_TYPE_ADDRESS_BOOK_CURSOR_SKELETON, EDBusAddressBookCursorSkeletonClass))
#define E_DBUS_ADDRESS_BOOK_CURSOR_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), E_DBUS_TYPE_ADDRESS_BOOK_CURSOR_SKELETON, EDBusAddressBookCursorSkeletonClass))
#define E_DBUS_IS_ADDRESS_BOOK_CURSOR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_TYPE_ADDRESS_BOOK_CURSOR_SKELETON))
#define E_DBUS_IS_ADDRESS_BOOK_CURSOR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), E_DBUS_TYPE_ADDRESS_BOOK_CURSOR_SKELETON))

typedef struct _EDBusAddressBookCursorSkeleton EDBusAddressBookCursorSkeleton;
typedef struct _EDBusAddressBookCursorSkeletonClass EDBusAddressBookCursorSkeletonClass;
typedef struct _EDBusAddressBookCursorSkeletonPrivate EDBusAddressBookCursorSkeletonPrivate;

struct _EDBusAddressBookCursorSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  EDBusAddressBookCursorSkeletonPrivate *priv;
};

struct _EDBusAddressBookCursorSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType e_dbus_address_book_cursor_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (EDBusAddressBookCursorSkeleton, g_object_unref)
#endif

EDBusAddressBookCursor *e_dbus_address_book_cursor_skeleton_new (void);


G_END_DECLS

#endif /* __E_DBUS_ADDRESS_BOOK_CURSOR_H__ */
