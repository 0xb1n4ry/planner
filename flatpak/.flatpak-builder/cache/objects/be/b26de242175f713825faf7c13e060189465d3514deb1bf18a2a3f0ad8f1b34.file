/* unity-aggregator-scope-private.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-aggregator-scope-private.vala, do not modify */

/*
 * Copyright (C) 2011-2012 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Neil Jagdish Patel <neil.patel@canonical.com>
 *             Michal Hruby <michal.hruby@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include <unity-protocol.h>
#include <stdlib.h>
#include <string.h>
#include <dee.h>
#include "unity.h"
#include <gio/gio.h>
#include <unity-trace.h>
#include <float.h>
#include <math.h>


#define UNITY_INTERNAL_TYPE_SCOPE_DBUS_IMPL (unity_internal_scope_dbus_impl_get_type ())
#define UNITY_INTERNAL_SCOPE_DBUS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_SCOPE_DBUS_IMPL, UnityInternalScopeDBusImpl))
#define UNITY_INTERNAL_IS_SCOPE_DBUS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_SCOPE_DBUS_IMPL))
#define UNITY_INTERNAL_SCOPE_DBUS_IMPL_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), UNITY_INTERNAL_TYPE_SCOPE_DBUS_IMPL, UnityInternalScopeDBusImplIface))

typedef struct _UnityInternalScopeDBusImpl UnityInternalScopeDBusImpl;
typedef struct _UnityInternalScopeDBusImplIface UnityInternalScopeDBusImplIface;

#define UNITY_INTERNAL_TYPE_DEPRECATED_SCOPE_DBUS_IMPL (unity_internal_deprecated_scope_dbus_impl_get_type ())
#define UNITY_INTERNAL_DEPRECATED_SCOPE_DBUS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_DEPRECATED_SCOPE_DBUS_IMPL, UnityInternalDeprecatedScopeDBusImpl))
#define UNITY_INTERNAL_IS_DEPRECATED_SCOPE_DBUS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_DEPRECATED_SCOPE_DBUS_IMPL))
#define UNITY_INTERNAL_DEPRECATED_SCOPE_DBUS_IMPL_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), UNITY_INTERNAL_TYPE_DEPRECATED_SCOPE_DBUS_IMPL, UnityInternalDeprecatedScopeDBusImplIface))

typedef struct _UnityInternalDeprecatedScopeDBusImpl UnityInternalDeprecatedScopeDBusImpl;
typedef struct _UnityInternalDeprecatedScopeDBusImplIface UnityInternalDeprecatedScopeDBusImplIface;

#define UNITY_INTERNAL_TYPE_MERGE_STRATEGY (unity_internal_merge_strategy_get_type ())
#define UNITY_INTERNAL_MERGE_STRATEGY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_MERGE_STRATEGY, UnityInternalMergeStrategy))
#define UNITY_INTERNAL_IS_MERGE_STRATEGY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_MERGE_STRATEGY))
#define UNITY_INTERNAL_MERGE_STRATEGY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), UNITY_INTERNAL_TYPE_MERGE_STRATEGY, UnityInternalMergeStrategyIface))

typedef struct _UnityInternalMergeStrategy UnityInternalMergeStrategy;
typedef struct _UnityInternalMergeStrategyIface UnityInternalMergeStrategyIface;

#define UNITY_INTERNAL_TYPE_AGGREGATOR_SCOPE_IMPL (unity_internal_aggregator_scope_impl_get_type ())
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_AGGREGATOR_SCOPE_IMPL, UnityInternalAggregatorScopeImpl))
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_TYPE_AGGREGATOR_SCOPE_IMPL, UnityInternalAggregatorScopeImplClass))
#define UNITY_INTERNAL_IS_AGGREGATOR_SCOPE_IMPL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_AGGREGATOR_SCOPE_IMPL))
#define UNITY_INTERNAL_IS_AGGREGATOR_SCOPE_IMPL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_TYPE_AGGREGATOR_SCOPE_IMPL))
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_TYPE_AGGREGATOR_SCOPE_IMPL, UnityInternalAggregatorScopeImplClass))

typedef struct _UnityInternalAggregatorScopeImpl UnityInternalAggregatorScopeImpl;
typedef struct _UnityInternalAggregatorScopeImplClass UnityInternalAggregatorScopeImplClass;
typedef struct _UnityInternalAggregatorScopeImplPrivate UnityInternalAggregatorScopeImplPrivate;

#define UNITY_INTERNAL_TYPE_SCOPE_CHANNEL (unity_internal_scope_channel_get_type ())
#define UNITY_INTERNAL_SCOPE_CHANNEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_SCOPE_CHANNEL, UnityInternalScopeChannel))
#define UNITY_INTERNAL_SCOPE_CHANNEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_TYPE_SCOPE_CHANNEL, UnityInternalScopeChannelClass))
#define UNITY_INTERNAL_IS_SCOPE_CHANNEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_SCOPE_CHANNEL))
#define UNITY_INTERNAL_IS_SCOPE_CHANNEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_TYPE_SCOPE_CHANNEL))
#define UNITY_INTERNAL_SCOPE_CHANNEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_TYPE_SCOPE_CHANNEL, UnityInternalScopeChannelClass))

typedef struct _UnityInternalScopeChannel UnityInternalScopeChannel;
typedef struct _UnityInternalScopeChannelClass UnityInternalScopeChannelClass;

#define UNITY_INTERNAL_TYPE_SCOPE_TRACKER (unity_internal_scope_tracker_get_type ())
#define UNITY_INTERNAL_SCOPE_TRACKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_SCOPE_TRACKER, UnityInternalScopeTracker))
#define UNITY_INTERNAL_SCOPE_TRACKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_TYPE_SCOPE_TRACKER, UnityInternalScopeTrackerClass))
#define UNITY_INTERNAL_IS_SCOPE_TRACKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_SCOPE_TRACKER))
#define UNITY_INTERNAL_IS_SCOPE_TRACKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_TYPE_SCOPE_TRACKER))
#define UNITY_INTERNAL_SCOPE_TRACKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_TYPE_SCOPE_TRACKER, UnityInternalScopeTrackerClass))

typedef struct _UnityInternalScopeTracker UnityInternalScopeTracker;
typedef struct _UnityInternalScopeTrackerClass UnityInternalScopeTrackerClass;

#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_SORTER (unity_internal_aggregator_scope_impl_sorter_get_type ())
typedef struct _UnityInternalAggregatorScopeImplSorter UnityInternalAggregatorScopeImplSorter;

#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER (unity_internal_aggregator_scope_impl_category_merger_get_type ())
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER, UnityInternalAggregatorScopeImplCategoryMerger))
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER, UnityInternalAggregatorScopeImplCategoryMergerClass))
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_IS_CATEGORY_MERGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER))
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_IS_CATEGORY_MERGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER))
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER, UnityInternalAggregatorScopeImplCategoryMergerClass))

typedef struct _UnityInternalAggregatorScopeImplCategoryMerger UnityInternalAggregatorScopeImplCategoryMerger;
typedef struct _UnityInternalAggregatorScopeImplCategoryMergerClass UnityInternalAggregatorScopeImplCategoryMergerClass;
enum  {
	UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_0_PROPERTY,
	UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_OWNER_PROPERTY,
	UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORIES_MODEL_PROPERTY,
	UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_FILTERS_MODEL_PROPERTY,
	UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_MERGE_STRATEGY_PROPERTY,
	UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_VIEW_TYPE_PROPERTY,
	UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_NUM_PROPERTIES
};
static GParamSpec* unity_internal_aggregator_scope_impl_properties[UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_NUM_PROPERTIES];
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_rand_free0(var) ((var == NULL) ? NULL : (var = (g_rand_free (var), NULL)))
#define _g_variant_builder_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_builder_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))

#define UNITY_INTERNAL_TYPE_CHANNEL_UPDATE_FLAGS (unity_internal_channel_update_flags_get_type ())
typedef struct _UnityInternalScopeChannelPrivate UnityInternalScopeChannelPrivate;

#define UNITY_INTERNAL_UTILS_TYPE_ASYNC_MUTEX (unity_internal_utils_async_mutex_get_type ())
#define UNITY_INTERNAL_UTILS_ASYNC_MUTEX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_UTILS_TYPE_ASYNC_MUTEX, UnityInternalUtilsAsyncMutex))
#define UNITY_INTERNAL_UTILS_ASYNC_MUTEX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_UTILS_TYPE_ASYNC_MUTEX, UnityInternalUtilsAsyncMutexClass))
#define UNITY_INTERNAL_UTILS_IS_ASYNC_MUTEX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_UTILS_TYPE_ASYNC_MUTEX))
#define UNITY_INTERNAL_UTILS_IS_ASYNC_MUTEX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_UTILS_TYPE_ASYNC_MUTEX))
#define UNITY_INTERNAL_UTILS_ASYNC_MUTEX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_UTILS_TYPE_ASYNC_MUTEX, UnityInternalUtilsAsyncMutexClass))

typedef struct _UnityInternalUtilsAsyncMutex UnityInternalUtilsAsyncMutex;
typedef struct _UnityInternalUtilsAsyncMutexClass UnityInternalUtilsAsyncMutexClass;

#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_FIELD (unity_internal_aggregator_scope_impl_category_merger_by_field_get_type ())
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_BY_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_FIELD, UnityInternalAggregatorScopeImplCategoryMergerByField))
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_BY_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_FIELD, UnityInternalAggregatorScopeImplCategoryMergerByFieldClass))
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_IS_CATEGORY_MERGER_BY_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_FIELD))
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_IS_CATEGORY_MERGER_BY_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_FIELD))
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_BY_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_FIELD, UnityInternalAggregatorScopeImplCategoryMergerByFieldClass))

typedef struct _UnityInternalAggregatorScopeImplCategoryMergerByField UnityInternalAggregatorScopeImplCategoryMergerByField;
typedef struct _UnityInternalAggregatorScopeImplCategoryMergerByFieldClass UnityInternalAggregatorScopeImplCategoryMergerByFieldClass;
#define _g_variant_type_free0(var) ((var == NULL) ? NULL : (var = (g_variant_type_free (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

#define UNITY_INTERNAL_TYPE_RESULT_COLUMN (unity_internal_result_column_get_type ())
typedef struct _Block20Data Block20Data;
typedef struct _UnityInternalAggregatorScopeImplActivateData UnityInternalAggregatorScopeImplActivateData;

#define UNITY_INTERNAL_TYPE_DEE_RESULT_SET (unity_internal_dee_result_set_get_type ())
#define UNITY_INTERNAL_DEE_RESULT_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_DEE_RESULT_SET, UnityInternalDeeResultSet))
#define UNITY_INTERNAL_DEE_RESULT_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_TYPE_DEE_RESULT_SET, UnityInternalDeeResultSetClass))
#define UNITY_INTERNAL_IS_DEE_RESULT_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_DEE_RESULT_SET))
#define UNITY_INTERNAL_IS_DEE_RESULT_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_TYPE_DEE_RESULT_SET))
#define UNITY_INTERNAL_DEE_RESULT_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_TYPE_DEE_RESULT_SET, UnityInternalDeeResultSetClass))

typedef struct _UnityInternalDeeResultSet UnityInternalDeeResultSet;
typedef struct _UnityInternalDeeResultSetClass UnityInternalDeeResultSetClass;
typedef struct _Block21Data Block21Data;

#define UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER (unity_internal_results_synchronizer_get_type ())
#define UNITY_INTERNAL_RESULTS_SYNCHRONIZER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER, UnityInternalResultsSynchronizer))
#define UNITY_INTERNAL_RESULTS_SYNCHRONIZER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER, UnityInternalResultsSynchronizerClass))
#define UNITY_INTERNAL_IS_RESULTS_SYNCHRONIZER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER))
#define UNITY_INTERNAL_IS_RESULTS_SYNCHRONIZER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER))
#define UNITY_INTERNAL_RESULTS_SYNCHRONIZER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_TYPE_RESULTS_SYNCHRONIZER, UnityInternalResultsSynchronizerClass))

typedef struct _UnityInternalResultsSynchronizer UnityInternalResultsSynchronizer;
typedef struct _UnityInternalResultsSynchronizerClass UnityInternalResultsSynchronizerClass;

#define UNITY_INTERNAL_TYPE_CHANNEL_STATE (unity_internal_channel_state_get_type ())
typedef struct _UnityInternalAggregatorScopeImplSearchData UnityInternalAggregatorScopeImplSearchData;
typedef struct _Block22Data Block22Data;

#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_SCOPE (unity_internal_aggregator_scope_impl_category_merger_by_scope_get_type ())
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_BY_SCOPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_SCOPE, UnityInternalAggregatorScopeImplCategoryMergerByScope))
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_BY_SCOPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_SCOPE, UnityInternalAggregatorScopeImplCategoryMergerByScopeClass))
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_IS_CATEGORY_MERGER_BY_SCOPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_SCOPE))
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_IS_CATEGORY_MERGER_BY_SCOPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_SCOPE))
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_BY_SCOPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_SCOPE, UnityInternalAggregatorScopeImplCategoryMergerByScopeClass))

typedef struct _UnityInternalAggregatorScopeImplCategoryMergerByScope UnityInternalAggregatorScopeImplCategoryMergerByScope;
typedef struct _UnityInternalAggregatorScopeImplCategoryMergerByScopeClass UnityInternalAggregatorScopeImplCategoryMergerByScopeClass;
typedef struct _UnityInternalAggregatorScopeImplSearchScopeData UnityInternalAggregatorScopeImplSearchScopeData;
typedef struct _UnityInternalAggregatorScopeImplPushResultsToScopeData UnityInternalAggregatorScopeImplPushResultsToScopeData;

#define UNITY_INTERNAL_TYPE_FILTER_COLUMN (unity_internal_filter_column_get_type ())

#define UNITY_INTERNAL_TYPE_CATEGORY_COLUMN (unity_internal_category_column_get_type ())
typedef struct _UnityInternalAggregatorScopeImplOpenChannelData UnityInternalAggregatorScopeImplOpenChannelData;
typedef struct _UnityInternalAggregatorScopeImplCloseChannelData UnityInternalAggregatorScopeImplCloseChannelData;
typedef struct _UnityInternalAggregatorScopeImplSetViewTypeData UnityInternalAggregatorScopeImplSetViewTypeData;
typedef struct _UnityInternalAggregatorScopeImplSetActiveSourcesData UnityInternalAggregatorScopeImplSetActiveSourcesData;
typedef struct _UnityInternalAggregatorScopeImplPushResultsData UnityInternalAggregatorScopeImplPushResultsData;
typedef struct _UnityInternalAggregatorScopeImplCategoryMergerPrivate UnityInternalAggregatorScopeImplCategoryMergerPrivate;
enum  {
	UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_0_PROPERTY,
	UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_NUM_PROPERTIES
};
static GParamSpec* unity_internal_aggregator_scope_impl_category_merger_properties[UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_NUM_PROPERTIES];
typedef struct _UnityInternalAggregatorScopeImplCategoryMergerByScopePrivate UnityInternalAggregatorScopeImplCategoryMergerByScopePrivate;
enum  {
	UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_BY_SCOPE_0_PROPERTY,
	UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_BY_SCOPE_NUM_PROPERTIES
};
static GParamSpec* unity_internal_aggregator_scope_impl_category_merger_by_scope_properties[UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_BY_SCOPE_NUM_PROPERTIES];
typedef struct _UnityInternalAggregatorScopeImplCategoryMergerByFieldPrivate UnityInternalAggregatorScopeImplCategoryMergerByFieldPrivate;
enum  {
	UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_BY_FIELD_0_PROPERTY,
	UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_BY_FIELD_NUM_PROPERTIES
};
static GParamSpec* unity_internal_aggregator_scope_impl_category_merger_by_field_properties[UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_BY_FIELD_NUM_PROPERTIES];

struct _UnityInternalScopeDBusImplIface {
	GTypeInterface parent_iface;
	void (*export) (UnityInternalScopeDBusImpl* self, GError** error);
	void (*unexport) (UnityInternalScopeDBusImpl* self);
	void (*queue_property_notification) (UnityInternalScopeDBusImpl* self, const gchar* prop_name, GVariant* prop_value);
	DeeSerializableModel* (*get_categories_model) (UnityInternalScopeDBusImpl* self);
	void (*set_categories_model) (UnityInternalScopeDBusImpl* self, DeeSerializableModel* value);
	DeeSerializableModel* (*get_filters_model) (UnityInternalScopeDBusImpl* self);
	void (*set_filters_model) (UnityInternalScopeDBusImpl* self, DeeSerializableModel* value);
};

struct _UnityInternalDeprecatedScopeDBusImplIface {
	GTypeInterface parent_iface;
	void (*set_categories) (UnityInternalDeprecatedScopeDBusImpl* self, GList* categories);
	void (*set_filters) (UnityInternalDeprecatedScopeDBusImpl* self, GList* filters);
};

struct _UnityInternalMergeStrategyIface {
	GTypeInterface parent_iface;
	DeeModelIter* (*merge_result) (UnityInternalMergeStrategy* self, const gchar* source_scope_id, DeeModel* target, GVariant** row, int row_length1);
};

struct _UnityInternalAggregatorScopeImpl {
	GObject parent_instance;
	UnityInternalAggregatorScopeImplPrivate * priv;
};

struct _UnityInternalAggregatorScopeImplClass {
	GObjectClass parent_class;
};

struct _UnityInternalAggregatorScopeImplSorter {
	gint category;
	gint column_index;
	gchar* field_name;
	gchar schema;
	gint multiplier;
};

struct _UnityInternalAggregatorScopeImplPrivate {
	UnityAggregatorScope* _owner;
	GHashTable* _channels;
	guint _dbus_id;
	GDBusConnection* _dbus_connection;
	UnityInternalScopeTracker* _scopes;
	UnityInternalAggregatorScopeImplSorter* _sorters;
	gint _sorters_length1;
	gint __sorters_size_;
	UnityInternalAggregatorScopeImplSorter* _constraints;
	gint _constraints_length1;
	gint __constraints_size_;
	UnityInternalAggregatorScopeImplCategoryMerger* category_merger;
	GRand* _rand;
	DeeSerializableModel* _categories_model;
	DeeSerializableModel* _filters_model;
	UnityInternalMergeStrategy* _merge_strategy;
	UnityProtocolViewType _view_type;
	GVariantBuilder* changed_props;
};

typedef enum  {
	UNITY_INTERNAL_CHANNEL_UPDATE_FLAGS_NONE = 0,
	UNITY_INTERNAL_CHANNEL_UPDATE_FLAGS_DEFAULT = 1 << 0,
	UNITY_INTERNAL_CHANNEL_UPDATE_FLAGS_GLOBAL = 1 << 1
} UnityInternalChannelUpdateFlags;

struct _UnityInternalScopeChannel {
	GObject parent_instance;
	UnityInternalScopeChannelPrivate * priv;
	UnityInternalUtilsAsyncMutex* model_lock;
	DeeSharedModel* transfer_model;
	DeeSerializableModel* backend_model;
	UnityFilterSet* filters;
	UnityProtocolChannelType channel_type;
	gchar* id;
	UnityScopeSearchBase* last_search;
	guint last_search_tag;
};

struct _UnityInternalScopeChannelClass {
	GObjectClass parent_class;
};

typedef enum  {
	UNITY_INTERNAL_RESULT_COLUMN_URI,
	UNITY_INTERNAL_RESULT_COLUMN_ICON_HINT,
	UNITY_INTERNAL_RESULT_COLUMN_CATEGORY,
	UNITY_INTERNAL_RESULT_COLUMN_RESULT_TYPE,
	UNITY_INTERNAL_RESULT_COLUMN_MIMETYPE,
	UNITY_INTERNAL_RESULT_COLUMN_TITLE,
	UNITY_INTERNAL_RESULT_COLUMN_COMMENT,
	UNITY_INTERNAL_RESULT_COLUMN_DND_URI,
	UNITY_INTERNAL_RESULT_COLUMN_METADATA,
	UNITY_INTERNAL_RESULT_COLUMN_N_COLUMNS
} UnityInternalResultColumn;

struct _Block20Data {
	int _ref_count_;
	UnityInternalAggregatorScopeImpl* self;
	gboolean fell_through;
};

struct _UnityInternalAggregatorScopeImplActivateData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalAggregatorScopeImpl* self;
	gchar* channel_id;
	GVariant** result_arr;
	gint result_arr_length1;
	guint action_type;
	GHashTable* hints;
	GCancellable* cancellable;
	UnityProtocolActivationReplyRaw result;
	UnityInternalScopeChannel* channel;
	UnityInternalScopeChannel* _tmp0_;
	gchar* scope_id;
	UnityProtocolScopeProxy* proxy;
	GVariant* metadata;
	GVariant* _tmp1_;
	GVariant* _tmp2_;
	UnityProtocolScopeProxy* _tmp3_;
	GVariant* _tmp4_;
	gchar* _tmp5_;
	UnityProtocolScopeProxy* _tmp6_;
	GVariant* _tmp7_;
	GVariant* _tmp8_;
	GVariant* _tmp9_;
	UnityScopeResult scope_result;
	GVariant* _tmp10_;
	const gchar* _tmp11_;
	gchar* _tmp12_;
	GVariant* _tmp13_;
	const gchar* _tmp14_;
	gchar* _tmp15_;
	GVariant* _tmp16_;
	GVariant* _tmp17_;
	GVariant* _tmp18_;
	const gchar* _tmp19_;
	gchar* _tmp20_;
	GVariant* _tmp21_;
	const gchar* _tmp22_;
	gchar* _tmp23_;
	GVariant* _tmp24_;
	const gchar* _tmp25_;
	gchar* _tmp26_;
	GVariant* _tmp27_;
	const gchar* _tmp28_;
	gchar* _tmp29_;
	GVariant* _tmp30_;
	const GVariantType* _tmp31_;
	const GVariantType* _tmp32_;
	GVariant* _tmp33_;
	GHashTable* _tmp34_;
	const gchar* _tmp39_;
	GError* _tmp40_;
	GVariant** result_arr_cpy;
	GVariant** _tmp41_;
	gint _tmp41__length1;
	gint result_arr_cpy_length1;
	gint _result_arr_cpy_size_;
	UnityAggregatorActivation* activation_obj;
	const gchar* _tmp42_;
	UnityScopeResult _tmp43_;
	UnityAggregatorActivation* _tmp44_;
	UnityAggregatorActivation* _tmp45_;
	UnityActivationResponse* response;
	UnityAggregatorScope* _tmp46_;
	UnityAggregatorActivation* _tmp47_;
	UnityActivationResponse* _tmp48_;
	UnityActivationResponse* _tmp49_;
	UnityProtocolActivationReplyRaw raw;
	UnityScopeResult _tmp50_;
	const gchar* _tmp51_;
	gchar* _tmp52_;
	UnityActivationResponse* _tmp53_;
	const gchar* _tmp54_;
	const gchar* _tmp55_;
	gchar* stripped;
	UnityActivationResponse* _tmp56_;
	const gchar* _tmp57_;
	const gchar* _tmp58_;
	gchar* _tmp59_;
	const gchar* _tmp60_;
	const gchar* _tmp61_;
	gchar* _tmp62_;
	UnityActivationResponse* _tmp63_;
	UnityHandledType _tmp64_;
	UnityHandledType _tmp65_;
	UnityActivationResponse* _tmp66_;
	GHashTable* _tmp67_;
	UnityProtocolScopeProxy* _tmp68_;
	UnityActivationResponse* _tmp69_;
	UnityGenericPreview* _tmp70_;
	UnityGenericPreview* _tmp71_;
	UnityActivationResponse* _tmp72_;
	UnityProtocolActivationReplyRaw _vala1_raw;
	UnityScopeResult _tmp73_;
	const gchar* _tmp74_;
	gchar* _tmp75_;
	UnityActivationResponse* _tmp76_;
	UnityHandledType _tmp77_;
	UnityHandledType _tmp78_;
	UnityActivationResponse* _tmp79_;
	GHashTable* _tmp80_;
	UnityProtocolActivationReplyRaw _tmp81_;
	UnityInternalScopeTracker* _tmp82_;
	UnityInternalScopeChannel* _tmp83_;
	const gchar* _tmp84_;
	GVariant** _tmp85_;
	gint _tmp85__length1;
	UnityProtocolActivationReplyRaw _tmp86_;
	UnityProtocolActivationReplyRaw _tmp87_;
	GError* scope_error;
	GError* _tmp88_;
	GError* _tmp89_;
	GError* err;
	GError* _tmp90_;
	const gchar* _tmp91_;
	gchar* _tmp92_;
	gchar* _tmp93_;
	GError* _tmp94_;
	GError* _tmp95_;
	GError * _inner_error_;
};

struct _Block21Data {
	int _ref_count_;
	UnityInternalAggregatorScopeImpl* self;
	UnityCancellable* search_cancellable;
	UnityInternalDeeResultSet* result_set;
	UnityAggregatedScopeSearch* aggsearch;
	guint timer_src_id;
	gint64 search_end_time;
	guint canc_src_id;
	gboolean was_cancelled;
	gchar* channel_id;
	gpointer _async_data_;
};

typedef enum  {
	UNITY_INTERNAL_CHANNEL_STATE_IDLE,
	UNITY_INTERNAL_CHANNEL_STATE_SEARCH_ACTIVE
} UnityInternalChannelState;

struct _UnityInternalAggregatorScopeImplSearchData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalAggregatorScopeImpl* self;
	gchar* channel_id;
	gchar* search_string;
	GHashTable* hints;
	GCancellable* cancellable;
	GHashTable* result;
	Block21Data* _data21_;
	UnityInternalScopeChannel* channel;
	UnityInternalScopeChannel* _tmp0_;
	GHashTable* response;
	GHashFunc _tmp1_;
	GEqualFunc _tmp2_;
	GHashTable* _tmp3_;
	UnityInternalResultsSynchronizer* synchronizer;
	UnityInternalScopeTracker* _tmp4_;
	UnityInternalResultsSynchronizer* _tmp5_;
	UnityInternalResultsSynchronizer* _tmp6_;
	UnityInternalResultsSynchronizer* _tmp7_;
	gchar* msg;
	gchar* _tmp8_;
	const gchar* _tmp9_;
	const gchar* _tmp10_;
	GError* _tmp11_;
	GVariant* filter_row_variant;
	gconstpointer _tmp12_;
	GVariant* _tmp13_;
	UnityInternalScopeChannel* _tmp14_;
	GVariant* _tmp15_;
	GVariant* subscopes_filter_variant;
	gconstpointer _tmp16_;
	guint subscope_filter_tag;
	gchar** enabled_subscopes;
	gchar** _tmp17_;
	gint enabled_subscopes_length1;
	gint _enabled_subscopes_size_;
	gboolean _tmp18_;
	GVariant* _tmp19_;
	GVariant* _tmp20_;
	const gchar* _tmp21_;
	GVariant* _tmp22_;
	gchar** _tmp23_;
	gint _tmp23__length1;
	gchar** _tmp27_;
	gint _tmp27__length1;
	gchar* _tmp28_;
	gchar* _tmp29_;
	gboolean invalidate_last_search;
	GVariant* _tmp30_;
	gboolean _tmp31_;
	gboolean _tmp32_;
	UnityInternalScopeChannel* _tmp33_;
	UnityScopeSearchBase* _tmp34_;
	UnityInternalScopeChannel* _tmp35_;
	UnityScopeSearchBase* _tmp36_;
	UnitySearchContext* _tmp37_;
	UnityCancellable* _tmp38_;
	UnityInternalScopeChannel* _tmp39_;
	UnityScopeSearchBase* last_search;
	UnityInternalScopeChannel* _tmp40_;
	UnityScopeSearchBase* _tmp41_;
	UnityScopeSearchBase* _tmp42_;
	UnityScopeSearchBase* _tmp43_;
	gboolean _tmp44_;
	UnityScopeSearchBase* _tmp45_;
	UnitySearchContext* _tmp46_;
	const gchar* _tmp47_;
	UnityInternalScopeChannel* _tmp48_;
	guint _tmp49_;
	guint _tmp50_;
	UnityInternalScopeChannel* _tmp51_;
	UnityInternalScopeChannel* _tmp52_;
	UnityScopeSearchBase* _tmp53_;
	UnitySearchContext* _tmp54_;
	UnityCancellable* _tmp55_;
	GError* _tmp56_;
	UnityAggregatedScopeSearch* last_agg_search;
	UnityScopeSearchBase* _tmp57_;
	UnityAggregatedScopeSearch* _tmp58_;
	GHashTable* last_hints;
	UnityAggregatedScopeSearch* _tmp59_;
	GHashTable* _tmp60_;
	GHashTable* _tmp61_;
	GHashTableIter hints_iter;
	GHashTable* _tmp62_;
	const gchar* key;
	GVariant* variant;
	gconstpointer _tmp63_;
	gconstpointer _tmp64_;
	gboolean _tmp65_;
	GHashTable* _tmp66_;
	const gchar* _tmp67_;
	gchar* _tmp68_;
	GVariant* _tmp69_;
	GVariant* _tmp70_;
	GHashTable* _tmp71_;
	gchar* _tmp72_;
	UnityInternalScopeChannel* _tmp73_;
	GVariant* _tmp74_;
	UnityScopeSearchBase* _tmp75_;
	UnitySearchContext* _tmp76_;
	UnityCancellable* _tmp77_;
	UnityInternalResultsSynchronizer* _tmp78_;
	UnityInternalResultsSynchronizer* _tmp79_;
	UnityCancellable* _tmp80_;
	UnityInternalScopeChannel* _tmp81_;
	DeeSerializableModel* _tmp82_;
	UnityInternalDeeResultSet* _tmp83_;
	UnityInternalDeeResultSet* _tmp84_;
	UnityInternalDeeResultSet* _tmp85_;
	UnityInternalScopeChannel* _tmp86_;
	DeeSharedModel* _tmp87_;
	gulong txn_sig_id;
	UnityInternalResultsSynchronizer* _tmp88_;
	gulong _tmp89_;
	UnitySearchContext search_context;
	gchar* _tmp90_;
	UnityInternalScopeChannel* _tmp91_;
	UnityInternalScopeChannel* _tmp92_;
	UnityFilterSet* _tmp93_;
	UnityFilterSet* _tmp94_;
	UnitySearchMetadata* _tmp95_;
	UnityInternalDeeResultSet* _tmp96_;
	UnityResultSet* _tmp97_;
	UnityCancellable* _tmp98_;
	UnityCancellable* _tmp99_;
	UnityAggregatorScope* _tmp100_;
	UnityInternalScopeChannel* _tmp101_;
	const gchar* _tmp102_;
	UnityInternalScopeChannel* _tmp103_;
	DeeSerializableModel* _tmp104_;
	UnityAggregatedScopeSearch* _tmp105_;
	UnityAggregatedScopeSearch* _tmp106_;
	UnitySearchContext _tmp107_;
	gulong sig_id;
	UnityAggregatedScopeSearch* _tmp108_;
	gulong _tmp109_;
	UnityInternalScopeChannel* _tmp110_;
	UnityAggregatedScopeSearch* _tmp111_;
	UnityScopeSearchBase* _tmp112_;
	UnityInternalScopeChannel* _tmp113_;
	guint _tmp114_;
	UnityInternalScopeChannel* _tmp115_;
	UnityInternalScopeChannel* _tmp116_;
	UnityCancellable* _tmp117_;
	UnityAggregatedScopeSearch* _tmp118_;
	gulong _tmp119_;
	UnityInternalResultsSynchronizer* _tmp120_;
	gulong _tmp121_;
	guint _tmp122_;
	guint _tmp123_;
	GError* _tmp124_;
	UnityInternalScopeChannel* _tmp125_;
	UnityInternalScopeChannel* _tmp126_;
	GList* _tmp127_;
	GList* provider_collection;
	GList* provider_it;
	DeeSerializableModel* provider;
	const gchar* provider_scope_id;
	DeeSerializableModel* _tmp128_;
	gconstpointer _tmp129_;
	gboolean _tmp130_;
	guint _tmp131_;
	gboolean _tmp132_;
	guint _tmp133_;
	const gchar* _tmp134_;
	gchar** _tmp135_;
	gint _tmp135__length1;
	UnityInternalResultsSynchronizer* _tmp136_;
	DeeSerializableModel* _tmp137_;
	gint64 search_start_time;
	gboolean _tmp138_;
	gint64 _tmp139_;
	GCancellable* glib_cancellable;
	UnityCancellable* _tmp140_;
	GCancellable* _tmp141_;
	gulong canc_sig_id;
	UnityAggregatorScope* _tmp142_;
	const gchar* _tmp143_;
	const gchar* _tmp144_;
	UnityAggregatedScopeSearch* _tmp145_;
	GCancellable* _tmp146_;
	GCancellable* _tmp147_;
	gulong _tmp148_;
	GCancellable* _tmp149_;
	gulong _tmp150_;
	UnityAggregatedScopeSearch* _tmp151_;
	gulong _tmp152_;
	UnityInternalResultsSynchronizer* _tmp153_;
	gulong _tmp154_;
	guint _tmp155_;
	guint _tmp156_;
	guint _tmp157_;
	guint _tmp158_;
	UnityInternalScopeChannel* _tmp159_;
	gboolean _tmp160_;
	UnityAggregatorScope* _tmp161_;
	const gchar* _tmp162_;
	const gchar* _tmp163_;
	UnityCancellable* _tmp164_;
	GError* _tmp165_;
	GHashTable* reply_hints;
	UnityAggregatedScopeSearch* _tmp166_;
	GHashTable* _tmp167_;
	GHashTable* _tmp168_;
	GHashTableIter iter;
	GHashTable* _tmp169_;
	const gchar* _vala1_key;
	GVariant* _vala1_variant;
	gconstpointer _tmp170_;
	gconstpointer _tmp171_;
	gboolean _tmp172_;
	GHashTable* _tmp173_;
	const gchar* _tmp174_;
	gchar* _tmp175_;
	GVariant* _tmp176_;
	GVariant* _tmp177_;
	UnityInternalDeeResultSet* _tmp178_;
	GHashTable* _tmp179_;
	gchar* _tmp180_;
	UnityInternalScopeChannel* _tmp181_;
	GVariant* _tmp182_;
	gboolean _tmp183_;
	gint64 delta_us;
	gint64 _tmp184_;
	gint64 _tmp185_;
	gdouble delta;
	gint64 _tmp186_;
	GHashTable* _tmp187_;
	gchar* _tmp188_;
	gdouble _tmp189_;
	GVariant* _tmp190_;
	GError * _inner_error_;
};

struct _Block22Data {
	int _ref_count_;
	UnityInternalAggregatorScopeImpl* self;
	GHashTable* combined_hints;
	UnityAggregatedScopeSearch* search;
	gpointer _async_data_;
};

struct _UnityInternalAggregatorScopeImplSearchScopeData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalAggregatorScopeImpl* self;
	UnityAggregatedScopeSearch* search;
	gchar* scope_id;
	gchar* search_string;
	UnitySearchType search_type;
	GHashTable* hints;
	GCancellable* cancellable;
	GHashTable* result;
	Block22Data* _data22_;
	GHashTable* _tmp0_;
	UnityAggregatorScope* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	GHashTable* _tmp4_;
	GHashTable* _tmp5_;
	GHashFunc _tmp6_;
	GEqualFunc _tmp7_;
	GHashTable* _tmp8_;
	GHFunc combiner;
	void* combiner_target;
	GDestroyNotify combiner_target_destroy_notify;
	GHFunc _tmp9_;
	void* _tmp9__target;
	GHashTable* _tmp10_;
	GHashTable* _tmp11_;
	GHFunc _tmp12_;
	void* _tmp12__target;
	UnityInternalAggregatorScopeImplCategoryMerger* _tmp13_;
	UnityInternalAggregatorScopeImplCategoryMerger* _tmp14_;
	UnityAggregatorScope* _tmp15_;
	UnityProtocolChannelType _tmp16_;
	UnityProtocolChannelType channel_type;
	UnityInternalScopeChannel* channel;
	const gchar* _tmp17_;
	const gchar* _tmp18_;
	UnityInternalScopeChannel* _tmp19_;
	GHashTable* _tmp20_;
	GHashTable* _tmp21_;
	GHashTable* _tmp22_;
	GHashTable* _tmp23_;
	GHashTable* _tmp24_;
	GHashTable* res;
	UnityInternalScopeTracker* _tmp25_;
	UnityInternalScopeChannel* _tmp26_;
	UnityProtocolChannelType _tmp27_;
	GHashTable* _tmp28_;
	GHashTable* _tmp29_;
	GError * _inner_error_;
};

struct _UnityInternalAggregatorScopeImplPushResultsToScopeData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalAggregatorScopeImpl* self;
	gchar* channel_id;
	gchar* search_string;
	gchar* scope_id;
	DeeSerializableModel* results_model;
	gchar** category_ids;
	gint category_ids_length1;
	GCancellable* cancellable;
	gchar* _tmp0_;
	gchar* _tmp1_;
	GError* _tmp2_;
	GError* _tmp3_;
	GError* _tmp4_;
	gchar** parts;
	gchar** _tmp5_;
	gchar** _tmp6_;
	gint parts_length1;
	gint _parts_size_;
	gchar* master_scope_id;
	gchar** _tmp7_;
	gint _tmp7__length1;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	UnityInternalAggregatorScopeImplCategoryMerger* _tmp10_;
	UnityInternalAggregatorScopeImplCategoryMerger* _tmp11_;
	UnityAggregatorScope* _tmp12_;
	const gchar* _tmp13_;
	const gchar* _tmp14_;
	UnityInternalScopeChannel* channel;
	UnityInternalScopeChannel* _tmp15_;
	UnityInternalScopeTracker* _tmp16_;
	UnityInternalScopeChannel* _tmp17_;
	const gchar* _tmp18_;
	gchar** _tmp19_;
	gint _tmp19__length1;
	const gchar* _tmp20_;
	GError * _inner_error_;
};

typedef enum  {
	UNITY_INTERNAL_FILTER_COLUMN_ID,
	UNITY_INTERNAL_FILTER_COLUMN_DISPLAY_NAME,
	UNITY_INTERNAL_FILTER_COLUMN_ICON_HINT,
	UNITY_INTERNAL_FILTER_COLUMN_RENDERER_NAME,
	UNITY_INTERNAL_FILTER_COLUMN_RENDERER_STATE,
	UNITY_INTERNAL_FILTER_COLUMN_VISIBLE,
	UNITY_INTERNAL_FILTER_COLUMN_COLLAPSED,
	UNITY_INTERNAL_FILTER_COLUMN_FILTERING,
	UNITY_INTERNAL_FILTER_COLUMN_N_COLUMNS
} UnityInternalFilterColumn;

typedef enum  {
	UNITY_INTERNAL_CATEGORY_COLUMN_ID,
	UNITY_INTERNAL_CATEGORY_COLUMN_DISPLAY_NAME,
	UNITY_INTERNAL_CATEGORY_COLUMN_ICON_HINT,
	UNITY_INTERNAL_CATEGORY_COLUMN_RENDERER_NAME,
	UNITY_INTERNAL_CATEGORY_COLUMN_HINTS,
	UNITY_INTERNAL_CATEGORY_COLUMN_N_COLUMNS
} UnityInternalCategoryColumn;

struct _UnityInternalAggregatorScopeImplOpenChannelData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalAggregatorScopeImpl* self;
	guint channel_type;
	GHashTable* hints;
	GCancellable* cancellable;
	GHashTable* out_hints;
	char* sender;
	gchar* result;
	UnityAggregatorScope* aggscope;
	UnityAggregatorScope* _tmp0_;
	UnityAggregatorScope* _tmp1_;
	UnityInternalAggregatorScopeImplCategoryMerger* _tmp2_;
	UnityAggregatorScope* _tmp3_;
	UnityAggregatorScopeMergeMode _tmp4_;
	UnityAggregatorScopeMergeMode _tmp5_;
	UnityInternalAggregatorScopeImplCategoryMergerByScope* _tmp6_;
	DeeSerializableModel* _tmp7_;
	DeeSerializableModel* _tmp8_;
	UnityInternalAggregatorScopeImplCategoryMergerByField* _tmp9_;
	UnityProtocolChannelFlags flags;
	UnityInternalScopeChannel* channel;
	UnityInternalScopeChannel* _tmp10_;
	UnitySchema* schema;
	UnityAggregatorScope* _tmp11_;
	UnitySchema* _tmp12_;
	UnitySchema* _tmp13_;
	UnitySchema* _tmp14_;
	GHashTable* required_schema;
	GHashFunc _tmp15_;
	GEqualFunc _tmp16_;
	GHashTable* _tmp17_;
	GHashTable* optional_schema;
	GHashFunc _tmp18_;
	GEqualFunc _tmp19_;
	GHashTable* _tmp20_;
	UnitySchema* _tmp21_;
	GList* _tmp22_;
	GList* field_collection;
	GList* field_it;
	UnitySchemaFieldInfo* field;
	UnitySchemaFieldInfo* _tmp23_;
	UnitySchemaFieldType _tmp24_;
	GHashTable* _tmp25_;
	UnitySchemaFieldInfo* _tmp26_;
	const gchar* _tmp27_;
	gchar* _tmp28_;
	UnitySchemaFieldInfo* _tmp29_;
	const gchar* _tmp30_;
	gchar* _tmp31_;
	GHashTable* _tmp32_;
	UnitySchemaFieldInfo* _tmp33_;
	const gchar* _tmp34_;
	gchar* _tmp35_;
	UnitySchemaFieldInfo* _tmp36_;
	const gchar* _tmp37_;
	gchar* _tmp38_;
	gchar* model_name;
	UnityInternalScopeChannel* _tmp39_;
	gchar* _tmp40_;
	gchar* _tmp41_;
	GHashTable* _tmp42_;
	GHashTable* _tmp43_;
	DeeSerializableModel* _tmp44_;
	DeeSerializableModel* _tmp45_;
	UnityProtocolChannelFlags _tmp46_;
	gchar* _tmp47_;
	gchar* _tmp48_;
	UnityInternalScopeChannel* _tmp49_;
	DeeSharedModel* _tmp50_;
	UnityInternalScopeChannel* _tmp51_;
	DeeSharedModel* _tmp52_;
	UnityInternalScopeChannel* _tmp53_;
	GDBusConnection* _tmp54_;
	UnityInternalScopeChannel* _tmp55_;
	GHashTable* _tmp56_;
	UnityInternalScopeChannel* _tmp57_;
	const gchar* _tmp58_;
	gchar* _tmp59_;
	UnityInternalScopeChannel* _tmp60_;
	UnityInternalScopeChannel* _tmp61_;
	UnityInternalScopeTracker* _tmp62_;
	UnityAggregatorScope* _tmp63_;
	const gchar* _tmp64_;
	const gchar* _tmp65_;
	UnityInternalScopeChannel* _tmp66_;
	const gchar* _tmp67_;
	UnityInternalScopeChannel* _tmp68_;
	DeeSerializableModel* _tmp69_;
	UnityInternalMergeStrategy* _tmp70_;
	UnityInternalMergeStrategy* _tmp71_;
	GHashFunc _tmp72_;
	GEqualFunc _tmp73_;
	GHashTable* _tmp74_;
	gchar* _tmp75_;
	const gchar* _tmp76_;
	GVariant* _tmp77_;
	UnityInternalScopeChannel* _tmp78_;
	const gchar* _tmp79_;
	gchar* _tmp80_;
};

struct _UnityInternalAggregatorScopeImplCloseChannelData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalAggregatorScopeImpl* self;
	gchar* channel_id;
	GHashTable* hints;
	GCancellable* cancellable;
	UnityInternalScopeChannel* channel;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	UnityInternalScopeChannel* _tmp2_;
	GError* _tmp3_;
	UnityInternalScopeTracker* _tmp4_;
	GHashTable* _tmp5_;
	GError * _inner_error_;
};

struct _UnityInternalAggregatorScopeImplSetViewTypeData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalAggregatorScopeImpl* self;
	guint view_type_id;
	UnityProtocolViewType view_type;
};

struct _UnityInternalAggregatorScopeImplSetActiveSourcesData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalAggregatorScopeImpl* self;
	gchar* channel_id;
	gchar** sources;
	gint sources_length1;
	GCancellable* cancellable;
	UnityAggregatorScope* _tmp0_;
};

struct _UnityInternalAggregatorScopeImplPushResultsData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityInternalAggregatorScopeImpl* self;
	gchar* channel_id;
	gchar* search_string;
	gchar* source_scope_id;
	GVariant* model_v;
	gchar** categories;
	gint categories_length1;
	GCancellable* cancellable;
	GHashTable* result;
	UnityInternalScopeChannel* channel;
	UnityInternalScopeChannel* _tmp0_;
	GObject* model_obj;
	GObject* _tmp1_;
	GObject* _tmp2_;
	GError* _tmp3_;
	UnityInternalResultsSynchronizer* sync;
	UnityInternalScopeTracker* _tmp4_;
	UnityInternalResultsSynchronizer* _tmp5_;
	UnityInternalResultsSynchronizer* _tmp6_;
	UnityInternalResultsSynchronizer* _tmp7_;
	GError* _tmp8_;
	UnityInternalAggregatorScopeImplCategoryMergerByField* merger;
	UnityInternalAggregatorScopeImplCategoryMerger* _tmp9_;
	UnityInternalAggregatorScopeImplCategoryMergerByField* _tmp10_;
	UnityInternalAggregatorScopeImplCategoryMergerByField* _tmp11_;
	UnityInternalAggregatorScopeImplCategoryMergerByField* _tmp12_;
	GError* _tmp13_;
	DeeSerializableModel* provider;
	GObject* _tmp14_;
	DeeSerializableModel* _tmp15_;
	UnityInternalScopeChannel* _tmp16_;
	DeeSerializableModel* _tmp17_;
	UnityInternalResultsSynchronizer* _tmp18_;
	DeeSerializableModel* _tmp19_;
	UnityInternalResultsSynchronizer* _tmp20_;
	DeeSerializableModel* _tmp21_;
	GHashTable* _result_;
	GHashFunc _tmp22_;
	GEqualFunc _tmp23_;
	GHashTable* _tmp24_;
	GHashTable* _tmp25_;
	gchar* _tmp26_;
	UnityInternalScopeChannel* _tmp27_;
	GVariant* _tmp28_;
	UnityInternalScopeChannel* _tmp29_;
	DeeSharedModel* _tmp30_;
	UnityInternalScopeChannel* _tmp31_;
	DeeSharedModel* _tmp32_;
	GError * _inner_error_;
};

struct _UnityInternalAggregatorScopeImplCategoryMerger {
	GObject parent_instance;
	UnityInternalAggregatorScopeImplCategoryMergerPrivate * priv;
	GHashTable* category_map;
};

struct _UnityInternalAggregatorScopeImplCategoryMergerClass {
	GObjectClass parent_class;
	gint (*remap) (UnityInternalAggregatorScopeImplCategoryMerger* self, const gchar* scope_id, guint32 category_index);
	gboolean (*merge_metadata) (UnityInternalAggregatorScopeImplCategoryMerger* self, const gchar* scope_id, DeeModel* categories, DeeModel* master_categories);
};

struct _UnityInternalAggregatorScopeImplCategoryMergerByScope {
	UnityInternalAggregatorScopeImplCategoryMerger parent_instance;
	UnityInternalAggregatorScopeImplCategoryMergerByScopePrivate * priv;
};

struct _UnityInternalAggregatorScopeImplCategoryMergerByScopeClass {
	UnityInternalAggregatorScopeImplCategoryMergerClass parent_class;
};

struct _UnityInternalAggregatorScopeImplCategoryMergerByField {
	UnityInternalAggregatorScopeImplCategoryMerger parent_instance;
	UnityInternalAggregatorScopeImplCategoryMergerByFieldPrivate * priv;
};

struct _UnityInternalAggregatorScopeImplCategoryMergerByFieldClass {
	UnityInternalAggregatorScopeImplCategoryMergerClass parent_class;
};

struct _UnityInternalAggregatorScopeImplCategoryMergerByFieldPrivate {
	GHashTable* subscopes;
	guint column_index;
};


static gpointer unity_internal_aggregator_scope_impl_parent_class = NULL;
static gboolean unity_internal_aggregator_scope_impl_measure_requests;
static gboolean unity_internal_aggregator_scope_impl_measure_requests = FALSE;
static GHashTable* unity_internal_aggregator_scope_impl_disabled_scope_ids;
static GHashTable* unity_internal_aggregator_scope_impl_disabled_scope_ids = NULL;
extern GQuark unity_internal_scope_tracker_DEDUP_MODEL_QUARK;
static gpointer unity_internal_aggregator_scope_impl_category_merger_parent_class = NULL;
static gpointer unity_internal_aggregator_scope_impl_category_merger_by_scope_parent_class = NULL;
static gpointer unity_internal_aggregator_scope_impl_category_merger_by_field_parent_class = NULL;
static UnityProtocolScopeServiceIface * unity_internal_aggregator_scope_impl_unity_protocol_scope_service_parent_iface = NULL;
static UnityInternalScopeDBusImplIface * unity_internal_aggregator_scope_impl_unity_internal_scope_dbus_impl_parent_iface = NULL;
static UnityInternalDeprecatedScopeDBusImplIface * unity_internal_aggregator_scope_impl_unity_internal_deprecated_scope_dbus_impl_parent_iface = NULL;
static UnityInternalMergeStrategyIface * unity_internal_aggregator_scope_impl_unity_internal_merge_strategy_parent_iface = NULL;

GType unity_internal_scope_dbus_impl_get_type (void) G_GNUC_CONST;
GType unity_internal_deprecated_scope_dbus_impl_get_type (void) G_GNUC_CONST;
GType unity_internal_merge_strategy_get_type (void) G_GNUC_CONST;
GType unity_internal_aggregator_scope_impl_get_type (void) G_GNUC_CONST;
GType unity_internal_scope_channel_get_type (void) G_GNUC_CONST;
GType unity_internal_scope_tracker_get_type (void) G_GNUC_CONST;
static GType unity_internal_aggregator_scope_impl_sorter_get_type (void) G_GNUC_CONST G_GNUC_UNUSED;
static UnityInternalAggregatorScopeImplSorter* unity_internal_aggregator_scope_impl_sorter_dup (const UnityInternalAggregatorScopeImplSorter* self);
static void unity_internal_aggregator_scope_impl_sorter_free (UnityInternalAggregatorScopeImplSorter* self);
static void unity_internal_aggregator_scope_impl_sorter_copy (const UnityInternalAggregatorScopeImplSorter* self,
                                                       UnityInternalAggregatorScopeImplSorter* dest);
static void unity_internal_aggregator_scope_impl_sorter_destroy (UnityInternalAggregatorScopeImplSorter* self);
static GType unity_internal_aggregator_scope_impl_category_merger_get_type (void) G_GNUC_CONST G_GNUC_UNUSED;
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_INTERNAL_TYPE_AGGREGATOR_SCOPE_IMPL, UnityInternalAggregatorScopeImplPrivate))
static void _vala_UnityInternalAggregatorScopeImplSorter_array_free (UnityInternalAggregatorScopeImplSorter * array,
                                                              gint array_length);
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_DEFAULT_TIMEOUT_INTERVAL_MS 16
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_SOURCES_FILTER_ID "unity-sources"
UnityInternalAggregatorScopeImpl* unity_internal_aggregator_scope_impl_new (UnityAggregatorScope* owner);
UnityInternalAggregatorScopeImpl* unity_internal_aggregator_scope_impl_construct (GType object_type,
                                                                                  UnityAggregatorScope* owner);
static gboolean unity_internal_aggregator_scope_impl_is_scope_disabled (const gchar* scope_id);
static void _g_free0_ (gpointer var);
static void unity_internal_aggregator_scope_impl_update_disabled_scopes (void);
static void _unity_internal_aggregator_scope_impl_update_disabled_scopes_g_object_notify (GObject* _sender,
                                                                                   GParamSpec* pspec,
                                                                                   gpointer self);
GList* unity_internal_aggregator_scope_impl_subscope_ids (UnityInternalAggregatorScopeImpl* self);
GList* unity_internal_scope_tracker_scope_ids_for_proxies (UnityInternalScopeTracker* self);
static gchar* unity_internal_aggregator_scope_impl_create_dbus_name (UnityInternalAggregatorScopeImpl* self);
static UnityAggregatorScope* unity_internal_aggregator_scope_impl_get_owner (UnityInternalAggregatorScopeImpl* self);
static void unity_internal_aggregator_scope_impl_create_models (UnityInternalAggregatorScopeImpl* self);
void unity_internal_scope_dbus_impl_set_categories_model (UnityInternalScopeDBusImpl* self,
                                                          DeeSerializableModel* value);
DeeSerializableModel* unity_internal_scope_dbus_impl_get_categories_model (UnityInternalScopeDBusImpl* self);
void unity_internal_scope_dbus_impl_set_filters_model (UnityInternalScopeDBusImpl* self,
                                                       DeeSerializableModel* value);
DeeSerializableModel* unity_internal_scope_dbus_impl_get_filters_model (UnityInternalScopeDBusImpl* self);
static void unity_internal_aggregator_scope_impl_real_export (UnityInternalScopeDBusImpl* base,
                                                       GError** error);
static void unity_internal_aggregator_scope_impl_real_unexport (UnityInternalScopeDBusImpl* base);
static void _vala_array_add4 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
void unity_internal_scope_tracker_unregister_channel (UnityInternalScopeTracker* self,
                                                      const gchar* master_channel_id);
static void unity_internal_aggregator_scope_impl_real_set_categories (UnityInternalDeprecatedScopeDBusImpl* base,
                                                               GList* categories);
gchar* unity_internal_utils_icon_to_string (GIcon* icon);
GVariant* unity_internal_utils_hash_table_to_asv (GHashTable* hash);
GHashTable* unity_category_get_hints (UnityCategory* self);
void unity_internal_scope_dbus_impl_queue_property_notification (UnityInternalScopeDBusImpl* self,
                                                                 const gchar* prop_name,
                                                                 GVariant* prop_value);
static void unity_internal_aggregator_scope_impl_real_set_filters (UnityInternalDeprecatedScopeDBusImpl* base,
                                                            GList* filters);
void unity_internal_scope_channel_set_filter_base (UnityInternalScopeChannel* self,
                                                   DeeSerializableModel* filter_model);
GType unity_internal_channel_update_flags_get_type (void) G_GNUC_CONST;
static void unity_internal_aggregator_scope_impl_on_results_invalidated (UnityInternalAggregatorScopeImpl* self,
                                                                  UnityInternalChannelUpdateFlags flags);
static gboolean unity_internal_aggregator_scope_impl_invalidate_last_search_for_channel (UnityInternalAggregatorScopeImpl* self,
                                                                                  UnityProtocolChannelType channel_type);
static void unity_internal_aggregator_scope_impl_channel_owner_lost (UnityInternalAggregatorScopeImpl* self,
                                                              UnityInternalScopeChannel* channel);
static void _g_variant_unref0_ (gpointer var);
gpointer unity_internal_utils_async_mutex_ref (gpointer instance);
void unity_internal_utils_async_mutex_unref (gpointer instance);
GParamSpec* unity_internal_utils_param_spec_async_mutex (const gchar* name,
                                                         const gchar* nick,
                                                         const gchar* blurb,
                                                         GType object_type,
                                                         GParamFlags flags);
void unity_internal_utils_value_set_async_mutex (GValue* value,
                                                 gpointer v_object);
void unity_internal_utils_value_take_async_mutex (GValue* value,
                                                  gpointer v_object);
gpointer unity_internal_utils_value_get_async_mutex (const GValue* value);
GType unity_internal_utils_async_mutex_get_type (void) G_GNUC_CONST;
static void unity_internal_aggregator_scope_impl_on_proxy_categories_changed (UnityInternalAggregatorScopeImpl* self,
                                                                       const gchar* scope_id,
                                                                       UnityProtocolScopeProxy* proxy);
static GType unity_internal_aggregator_scope_impl_category_merger_by_field_get_type (void) G_GNUC_CONST G_GNUC_UNUSED;
static void unity_internal_aggregator_scope_impl_category_merger_by_field_map_subscope_categories (UnityInternalAggregatorScopeImplCategoryMergerByField* self,
                                                                                            const gchar* scope_id,
                                                                                            DeeSerializableModel* categories_model);
static gboolean unity_internal_aggregator_scope_impl_category_merger_merge_metadata (UnityInternalAggregatorScopeImplCategoryMerger* self,
                                                                              const gchar* scope_id,
                                                                              DeeModel* categories,
                                                                              DeeModel* master_categories);
void unity_internal_aggregator_scope_impl_queue_search_for_type (UnityInternalAggregatorScopeImpl* self,
                                                                 UnitySearchType search_type);
void unity_internal_aggregator_scope_impl_invalidate_search (UnityInternalAggregatorScopeImpl* self,
                                                             UnitySearchType search_type);
static void unity_internal_aggregator_scope_impl_real_queue_property_notification (UnityInternalScopeDBusImpl* base,
                                                                            const gchar* prop_name,
                                                                            GVariant* prop_value);
static gboolean ___lambda23_ (UnityInternalAggregatorScopeImpl* self);
static gboolean ____lambda23__gsource_func (gpointer self);
void unity_internal_aggregator_scope_impl_add_sorter (UnityInternalAggregatorScopeImpl* self,
                                                      guint category_index,
                                                      const gchar* field,
                                                      UnityAggregatorScopeSortFlags flags);
static gboolean _vala_string_array_contains (const gchar* * stack,
                                      int stack_length,
                                      const gchar* needle);
static void _vala_array_add5 (UnityInternalAggregatorScopeImplSorter* * array,
                       int* length,
                       int* size,
                       const UnityInternalAggregatorScopeImplSorter* value);
void unity_internal_aggregator_scope_impl_add_constraint (UnityInternalAggregatorScopeImpl* self,
                                                          gint category_index,
                                                          const gchar* field);
static void _vala_array_add6 (UnityInternalAggregatorScopeImplSorter* * array,
                       int* length,
                       int* size,
                       const UnityInternalAggregatorScopeImplSorter* value);
static gint unity_internal_aggregator_scope_impl_apply_sorters (GVariant** row1,
                                                         int row1_length1,
                                                         GVariant** row2,
                                                         int row2_length1,
                                                         guint category,
                                                         UnityInternalAggregatorScopeImplSorter* sorters,
                                                         int sorters_length1);
static gint unity_internal_aggregator_scope_impl_sorter_apply (UnityInternalAggregatorScopeImplSorter *self,
                                                        GVariant** row1,
                                                        int row1_length1,
                                                        GVariant** row2,
                                                        int row2_length1);
static DeeModelIter* unity_internal_aggregator_scope_impl_real_merge_result (UnityInternalMergeStrategy* base,
                                                                      const gchar* scope_id,
                                                                      DeeModel* target,
                                                                      GVariant** row,
                                                                      int row_length1);
GType unity_internal_result_column_get_type (void) G_GNUC_CONST;
static gint unity_internal_aggregator_scope_impl_category_merger_remap (UnityInternalAggregatorScopeImplCategoryMerger* self,
                                                                 const gchar* scope_id,
                                                                 guint32 category_index);
static Block20Data* block20_data_ref (Block20Data* _data20_);
static void block20_data_unref (void * _userdata_);
static void ____lambda24_ (void);
static void _____lambda24__dee_filter_map_func (DeeModel* orig_model,
                                         DeeFilterModel* filter_model,
                                         void* data);
static gboolean ____lambda25_ (UnityInternalAggregatorScopeImpl* self,
                        DeeModel* orig_model,
                        DeeModelIter* orig_iter,
                        DeeFilterModel* m);
static gint __lambda26_ (UnityInternalAggregatorScopeImpl* self,
                  GVariant** row1,
                  int row1_length1,
                  GVariant** row2,
                  int row2_length1);
static gint ___lambda26__dee_compare_row_func (GVariant** row1,
                                        GVariant** row2,
                                        gpointer self);
static gboolean _____lambda25__dee_filter_map_notify (DeeModel* orig_model,
                                               DeeModelIter* orig_iter,
                                               DeeFilterModel* filter_model,
                                               gpointer self);
static gint ___lambda27_ (Block20Data* _data20_,
                   GVariant** row1,
                   int row1_length1,
                   GVariant** row2,
                   int row2_length1);
static gint ____lambda27__dee_compare_row_func (GVariant** row1,
                                         GVariant** row2,
                                         gpointer self);
static gint __lambda28_ (UnityInternalAggregatorScopeImpl* self,
                  GVariant** row1,
                  int row1_length1,
                  GVariant** row2,
                  int row2_length1);
static gint ___lambda28__dee_compare_row_func (GVariant** row1,
                                        GVariant** row2,
                                        gpointer self);
static UnityProtocolScopeProxy* unity_internal_aggregator_scope_impl_get_proxy_for_result (UnityInternalAggregatorScopeImpl* self,
                                                                                    GVariant* result_metadata,
                                                                                    gchar* * scope_id,
                                                                                    GError** error);
UnityProtocolScopeProxy* unity_internal_scope_tracker_get_proxy_for_scope_id (UnityInternalScopeTracker* self,
                                                                              const gchar* scope_id);
static void unity_internal_aggregator_scope_impl_real_activate_data_free (gpointer _data);
static void unity_internal_aggregator_scope_impl_real_activate_async_ready_wrapper (GObject *source_object,
                                                                             GAsyncResult *res,
                                                                             void *user_data);
static void unity_internal_aggregator_scope_impl_real_activate (UnityProtocolScopeService* base,
                                                         const gchar* channel_id,
                                                         GVariant** result_arr,
                                                         int result_arr_length1,
                                                         guint action_type,
                                                         GHashTable* hints,
                                                         GCancellable* cancellable,
                                                         GAsyncReadyCallback _callback_,
                                                         gpointer _user_data_);
static gboolean unity_internal_aggregator_scope_impl_real_activate_co (UnityInternalAggregatorScopeImplActivateData* _data_);
static UnityInternalScopeChannel* unity_internal_aggregator_scope_impl_get_channel_by_id (UnityInternalAggregatorScopeImpl* self,
                                                                                   const gchar* channel_id,
                                                                                   GError** error);
static GHashTable* _variant_get36 (GVariant* value);
static GVariant** _vala_array_dup8 (GVariant** self,
                             int length);
void unity_aggregator_activation_set_hints (UnityAggregatorActivation* self,
                                            GHashTable* value);
static void unity_internal_aggregator_scope_impl_activate_ready (GObject* source_object,
                                                          GAsyncResult* _res_,
                                                          gpointer _user_data_);
GHashTable* unity_activation_response_get_hints (UnityActivationResponse* self);
UnityGenericPreview* unity_generic_preview_empty (void);
void unity_internal_scope_tracker_activate_wrapper (UnityInternalScopeTracker* self,
                                                    UnityInternalScopeChannel* master_channel,
                                                    const gchar* scope_id,
                                                    GVariant** result_arr,
                                                    int result_arr_length1,
                                                    guint action_type,
                                                    GHashTable* hints,
                                                    GCancellable* cancellable,
                                                    GAsyncReadyCallback _callback_,
                                                    gpointer _user_data_);
void unity_internal_scope_tracker_activate_wrapper_finish (UnityInternalScopeTracker* self,
                                                           GAsyncResult* _res_,
                                                           UnityProtocolActivationReplyRaw* result,
                                                           GError** error);
static void unity_internal_aggregator_scope_impl_real_search_data_free (gpointer _data);
static void unity_internal_aggregator_scope_impl_real_search_async_ready_wrapper (GObject *source_object,
                                                                           GAsyncResult *res,
                                                                           void *user_data);
static void unity_internal_aggregator_scope_impl_real_search (UnityProtocolScopeService* base,
                                                       const gchar* channel_id,
                                                       const gchar* search_string,
                                                       GHashTable* hints,
                                                       GCancellable* cancellable,
                                                       GAsyncReadyCallback _callback_,
                                                       gpointer _user_data_);
static gboolean unity_internal_aggregator_scope_impl_real_search_co (UnityInternalAggregatorScopeImplSearchData* _data_);
GType unity_internal_dee_result_set_get_type (void) G_GNUC_CONST;
static Block21Data* block21_data_ref (Block21Data* _data21_);
static void block21_data_unref (void * _userdata_);
GType unity_internal_results_synchronizer_get_type (void) G_GNUC_CONST;
UnityInternalResultsSynchronizer* unity_internal_scope_tracker_get_synchronizer (UnityInternalScopeTracker* self,
                                                                                 const gchar* channel_id);
#define UNITY_INTERNAL_SEARCH_FILTER_ROW_HINT "changed-filter-row"
static void unity_internal_aggregator_scope_impl_update_filter_state (UnityInternalAggregatorScopeImpl* self,
                                                               UnityInternalScopeChannel* channel,
                                                               GVariant* changed_row,
                                                               GError** error);
#define UNITY_INTERNAL_SEARCH_SUBSCOPES_HINT "subscopes-filter"
static gchar** _variant_get37 (GVariant* value,
                        int* result_length1);
gboolean unity_internal_scope_channel_is_search_running (UnityInternalScopeChannel* self);
void unity_internal_scope_channel_wait_for_search (UnityInternalScopeChannel* self,
                                                   GAsyncReadyCallback _callback_,
                                                   gpointer _user_data_);
void unity_internal_scope_channel_wait_for_search_finish (UnityInternalScopeChannel* self,
                                                          GAsyncResult* _res_);
static void unity_internal_aggregator_scope_impl_search_ready (GObject* source_object,
                                                        GAsyncResult* _res_,
                                                        gpointer _user_data_);
GHashTable* unity_deprecated_scope_search_get_reply_hints (UnityDeprecatedScopeSearch* self);
#define UNITY_INTERNAL_SEARCH_SEQNUM_HINT "model-seqnum"
guint64 unity_internal_scope_channel_get_last_seqnum (UnityInternalScopeChannel* self);
void unity_internal_results_synchronizer_clear (UnityInternalResultsSynchronizer* self);
void unity_internal_results_synchronizer_disable_all_providers (UnityInternalResultsSynchronizer* self);
UnityInternalDeeResultSet* unity_internal_dee_result_set_new_with_model (DeeSerializableModel* model);
UnityInternalDeeResultSet* unity_internal_dee_result_set_construct_with_model (GType object_type,
                                                                               DeeSerializableModel* model);
void unity_internal_dee_result_set_set_flush_model (UnityInternalDeeResultSet* self,
                                                    DeeSerializableModel* value);
static void __lambda29_ (Block21Data* _data21_,
                  DeeModel* src_model,
                  const gchar* scope_id);
static gboolean ___lambda30_ (Block21Data* _data21_);
static gboolean ____lambda30__gsource_func (gpointer self);
static void ___lambda29__unity_internal_results_synchronizer_transaction_complete (UnityInternalResultsSynchronizer* _sender,
                                                                            DeeModel* model,
                                                                            const gchar* scope_id,
                                                                            gpointer self);
UnitySearchType unity_internal_scope_channel_get_search_type (UnityInternalScopeChannel* self);
static void __lambda31_ (Block21Data* _data21_,
                  guint32* indices,
                  int indices_length1);
static void ___lambda31__unity_aggregated_scope_search_category_order_changed (UnityAggregatedScopeSearch* _sender,
                                                                        guint32* category_indices,
                                                                        int category_indices_length1,
                                                                        gpointer self);
GType unity_internal_channel_state_get_type (void) G_GNUC_CONST;
void unity_internal_scope_channel_set_state (UnityInternalScopeChannel* self,
                                             UnityInternalChannelState new_state);
GList* unity_internal_scope_channel_get_pushed_models (UnityInternalScopeChannel* self,
                                                       const gchar* search_string);
void unity_internal_results_synchronizer_copy_model (UnityInternalResultsSynchronizer* self,
                                                     DeeModel* provider);
static void __lambda33_ (Block21Data* _data21_);
static gboolean _unity_internal_aggregator_scope_impl_real_search_co_gsource_func (gpointer self);
static void ___lambda33__unity_scope_search_base_callback (UnityScopeSearchBase* instance,
                                                    gpointer self);
static void ___lambda34_ (Block21Data* _data21_);
static gboolean __lambda35_ (Block21Data* _data21_);
static gboolean ___lambda35__gsource_func (gpointer self);
static void ____lambda34__gfunc (gconstpointer data,
                          gpointer self);
#define UNITY_INTERNAL_SEARCH_TIME_HINT "search-time"
static void unity_internal_aggregator_scope_impl_search_scope_data_free (gpointer _data);
static void unity_internal_aggregator_scope_impl_search_scope_async_ready_wrapper (GObject *source_object,
                                                                            GAsyncResult *res,
                                                                            void *user_data);
void unity_internal_aggregator_scope_impl_search_scope (UnityInternalAggregatorScopeImpl* self,
                                                        UnityAggregatedScopeSearch* search,
                                                        const gchar* scope_id,
                                                        const gchar* search_string,
                                                        UnitySearchType search_type,
                                                        GHashTable* hints,
                                                        GCancellable* cancellable,
                                                        GAsyncReadyCallback _callback_,
                                                        gpointer _user_data_);
GHashTable* unity_internal_aggregator_scope_impl_search_scope_finish (UnityInternalAggregatorScopeImpl* self,
                                                                      GAsyncResult* _res_,
                                                                      GError** error);
static gboolean unity_internal_aggregator_scope_impl_search_scope_co (UnityInternalAggregatorScopeImplSearchScopeData* _data_);
static Block22Data* block22_data_ref (Block22Data* _data22_);
static void block22_data_unref (void * _userdata_);
static void ___lambda36_ (Block22Data* _data22_,
                   const gchar* k,
                   GVariant* v);
static void ____lambda36__gh_func (gconstpointer key,
                            gconstpointer value,
                            gpointer self);
static GType unity_internal_aggregator_scope_impl_category_merger_by_scope_get_type (void) G_GNUC_CONST G_GNUC_UNUSED;
static void unity_internal_aggregator_scope_impl_category_merger_by_scope_add_scope_mapping (UnityInternalAggregatorScopeImplCategoryMergerByScope* self,
                                                                                      UnityAggregatorScope* scope,
                                                                                      const gchar* scope_id);
void unity_internal_scope_tracker_search_wrapper (UnityInternalScopeTracker* self,
                                                  UnityInternalScopeChannel* master_channel,
                                                  UnityProtocolChannelType channel_type,
                                                  const gchar* search_string,
                                                  GHashTable* hints,
                                                  const gchar* scope_id,
                                                  GCancellable* cancellable,
                                                  GAsyncReadyCallback _callback_,
                                                  gpointer _user_data_);
GHashTable* unity_internal_scope_tracker_search_wrapper_finish (UnityInternalScopeTracker* self,
                                                                GAsyncResult* _res_,
                                                                GError** error);
static void unity_internal_aggregator_scope_impl_search_scope_ready (GObject* source_object,
                                                              GAsyncResult* _res_,
                                                              gpointer _user_data_);
static void __lambda37_ (Block22Data* _data22_,
                  const gchar* key,
                  GVariant* variant);
static void ___lambda37__gh_func (gconstpointer key,
                           gconstpointer value,
                           gpointer self);
static void unity_internal_aggregator_scope_impl_push_results_to_scope_data_free (gpointer _data);
static void unity_internal_aggregator_scope_impl_push_results_to_scope_async_ready_wrapper (GObject *source_object,
                                                                                     GAsyncResult *res,
                                                                                     void *user_data);
void unity_internal_aggregator_scope_impl_push_results_to_scope (UnityInternalAggregatorScopeImpl* self,
                                                                 const gchar* channel_id,
                                                                 const gchar* search_string,
                                                                 const gchar* scope_id,
                                                                 DeeSerializableModel* results_model,
                                                                 gchar** category_ids,
                                                                 int category_ids_length1,
                                                                 GCancellable* cancellable,
                                                                 GAsyncReadyCallback _callback_,
                                                                 gpointer _user_data_);
void unity_internal_aggregator_scope_impl_push_results_to_scope_finish (UnityInternalAggregatorScopeImpl* self,
                                                                        GAsyncResult* _res_,
                                                                        GError** error);
static gboolean unity_internal_aggregator_scope_impl_push_results_to_scope_co (UnityInternalAggregatorScopeImplPushResultsToScopeData* _data_);
void unity_internal_scope_tracker_push_wrapper (UnityInternalScopeTracker* self,
                                                UnityInternalScopeChannel* parent_channel,
                                                const gchar* search_string,
                                                UnityProtocolChannelType channel_type,
                                                const gchar* master_scope_id,
                                                const gchar* scope_id,
                                                DeeSerializableModel* results_model,
                                                gchar** categories,
                                                int categories_length1,
                                                GCancellable* cancellable,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_);
void unity_internal_scope_tracker_push_wrapper_finish (UnityInternalScopeTracker* self,
                                                       GAsyncResult* _res_,
                                                       GError** error);
static gchar** _vala_array_dup9 (gchar** self,
                          int length);
static void unity_internal_aggregator_scope_impl_push_results_to_scope_ready (GObject* source_object,
                                                                       GAsyncResult* _res_,
                                                                       gpointer _user_data_);
void unity_internal_aggregator_scope_impl_push_filter_settings (UnityInternalAggregatorScopeImpl* self,
                                                                const gchar* channel_id,
                                                                UnityFilterSet* filters);
GType unity_internal_filter_column_get_type (void) G_GNUC_CONST;
UnityFilter* unity_internal_scope_channel_get_filter_by_id (UnityInternalScopeChannel* self,
                                                            const gchar* filter_id);
void unity_filter_set_filtering (UnityFilter* self,
                                 gboolean value);
void unity_filter_set_collapsed (UnityFilter* self,
                                 gboolean value);
void unity_filter_update (UnityFilter* self,
                          GVariant* properties);
static void unity_internal_aggregator_scope_impl_real_open_channel_data_free (gpointer _data);
static void unity_internal_aggregator_scope_impl_real_open_channel_async_ready_wrapper (GObject *source_object,
                                                                                 GAsyncResult *res,
                                                                                 void *user_data);
static void unity_internal_aggregator_scope_impl_real_open_channel (UnityProtocolScopeService* base,
                                                             guint channel_type,
                                                             GHashTable* hints,
                                                             GCancellable* cancellable,
                                                             const char* sender,
                                                             GAsyncReadyCallback _callback_,
                                                             gpointer _user_data_);
static gboolean unity_internal_aggregator_scope_impl_real_open_channel_co (UnityInternalAggregatorScopeImplOpenChannelData* _data_);
static UnityInternalAggregatorScopeImplCategoryMergerByScope* unity_internal_aggregator_scope_impl_category_merger_by_scope_new (void);
static UnityInternalAggregatorScopeImplCategoryMergerByScope* unity_internal_aggregator_scope_impl_category_merger_by_scope_construct (GType object_type);
GType unity_internal_category_column_get_type (void) G_GNUC_CONST;
static UnityInternalAggregatorScopeImplCategoryMergerByField* unity_internal_aggregator_scope_impl_category_merger_by_field_new (DeeSerializableModel* master_categories_model,
                                                                                                                          guint column_index);
static UnityInternalAggregatorScopeImplCategoryMergerByField* unity_internal_aggregator_scope_impl_category_merger_by_field_construct (GType object_type,
                                                                                                                                DeeSerializableModel* master_categories_model,
                                                                                                                                guint column_index);
UnityInternalScopeChannel* unity_internal_scope_channel_new (UnityProtocolChannelType channel_type_);
UnityInternalScopeChannel* unity_internal_scope_channel_construct (GType object_type,
                                                                   UnityProtocolChannelType channel_type_);
gchar* unity_internal_scope_channel_create_channel (UnityInternalScopeChannel* self,
                                                    const gchar* swarm_name,
                                                    GHashTable* metadata_schema,
                                                    GHashTable* optional_metadata,
                                                    DeeSerializableModel* filter_model,
                                                    UnityProtocolChannelFlags flags);
void unity_internal_utils_wait_for_model_synchronization (DeeSharedModel* model,
                                                          GAsyncReadyCallback _callback_,
                                                          gpointer _user_data_);
void unity_internal_utils_wait_for_model_synchronization_finish (GAsyncResult* _res_);
static void unity_internal_aggregator_scope_impl_open_channel_ready (GObject* source_object,
                                                              GAsyncResult* _res_,
                                                              gpointer _user_data_);
void unity_internal_scope_channel_watch_owner (UnityInternalScopeChannel* self,
                                               GDBusConnection* connection,
                                               const char* owner);
static void _unity_internal_aggregator_scope_impl_channel_owner_lost_unity_internal_scope_channel_owner_lost (UnityInternalScopeChannel* _sender,
                                                                                                       gpointer self);
void unity_internal_scope_tracker_register_channel (UnityInternalScopeTracker* self,
                                                    const gchar* owner_scope_id,
                                                    const gchar* master_channel_id,
                                                    DeeSerializableModel* model,
                                                    UnityInternalMergeStrategy* merge_strategy);
UnityInternalMergeStrategy* unity_internal_aggregator_scope_impl_get_merge_strategy (UnityInternalAggregatorScopeImpl* self);
static void unity_internal_aggregator_scope_impl_real_close_channel_data_free (gpointer _data);
static void unity_internal_aggregator_scope_impl_real_close_channel_async_ready_wrapper (GObject *source_object,
                                                                                  GAsyncResult *res,
                                                                                  void *user_data);
static void unity_internal_aggregator_scope_impl_real_close_channel (UnityProtocolScopeService* base,
                                                              const gchar* channel_id,
                                                              GHashTable* hints,
                                                              GCancellable* cancellable,
                                                              GAsyncReadyCallback _callback_,
                                                              gpointer _user_data_);
static gboolean unity_internal_aggregator_scope_impl_real_close_channel_co (UnityInternalAggregatorScopeImplCloseChannelData* _data_);
static void unity_internal_aggregator_scope_impl_real_set_view_type_data_free (gpointer _data);
static void unity_internal_aggregator_scope_impl_real_set_view_type_async_ready_wrapper (GObject *source_object,
                                                                                  GAsyncResult *res,
                                                                                  void *user_data);
static void unity_internal_aggregator_scope_impl_real_set_view_type (UnityProtocolScopeService* base,
                                                              guint view_type_id,
                                                              GAsyncReadyCallback _callback_,
                                                              gpointer _user_data_);
static gboolean unity_internal_aggregator_scope_impl_real_set_view_type_co (UnityInternalAggregatorScopeImplSetViewTypeData* _data_);
void unity_internal_aggregator_scope_impl_set_view_type (UnityInternalAggregatorScopeImpl* self,
                                                         UnityProtocolViewType value);
static void unity_internal_aggregator_scope_impl_set_active_sources_data_free (gpointer _data);
static void unity_internal_aggregator_scope_impl_set_active_sources_async_ready_wrapper (GObject *source_object,
                                                                                  GAsyncResult *res,
                                                                                  void *user_data);
void unity_internal_aggregator_scope_impl_set_active_sources (UnityInternalAggregatorScopeImpl* self,
                                                              const gchar* channel_id,
                                                              gchar** sources,
                                                              int sources_length1,
                                                              GCancellable* cancellable,
                                                              GAsyncReadyCallback _callback_,
                                                              gpointer _user_data_);
void unity_internal_aggregator_scope_impl_set_active_sources_finish (UnityInternalAggregatorScopeImpl* self,
                                                                     GAsyncResult* _res_,
                                                                     GError** error);
static gboolean unity_internal_aggregator_scope_impl_set_active_sources_co (UnityInternalAggregatorScopeImplSetActiveSourcesData* _data_);
void unity_deprecated_scope_base_set_active_sources_internal (UnityDeprecatedScopeBase* self,
                                                              gchar** active_sources_,
                                                              int active_sources__length1);
static void unity_internal_aggregator_scope_impl_real_push_results_data_free (gpointer _data);
static void unity_internal_aggregator_scope_impl_real_push_results_async_ready_wrapper (GObject *source_object,
                                                                                 GAsyncResult *res,
                                                                                 void *user_data);
static void unity_internal_aggregator_scope_impl_real_push_results (UnityProtocolScopeService* base,
                                                             const gchar* channel_id,
                                                             const gchar* search_string,
                                                             const gchar* source_scope_id,
                                                             GVariant* model_v,
                                                             gchar** categories,
                                                             int categories_length1,
                                                             GCancellable* cancellable,
                                                             GAsyncReadyCallback _callback_,
                                                             gpointer _user_data_);
static gboolean unity_internal_aggregator_scope_impl_real_push_results_co (UnityInternalAggregatorScopeImplPushResultsData* _data_);
static void unity_internal_aggregator_scope_impl_category_merger_by_field_map_subscope_categories_from_list (UnityInternalAggregatorScopeImplCategoryMergerByField* self,
                                                                                                      const gchar* scope_id,
                                                                                                      gchar** categories,
                                                                                                      int categories_length1);
void unity_internal_scope_channel_register_pushed_model (UnityInternalScopeChannel* self,
                                                         const gchar* search_string,
                                                         DeeSerializableModel* model);
void unity_internal_results_synchronizer_add_provider (UnityInternalResultsSynchronizer* self,
                                                       DeeModel* provider,
                                                       const gchar* scope_id);
static void unity_internal_aggregator_scope_impl_set_owner (UnityInternalAggregatorScopeImpl* self,
                                                     UnityAggregatorScope* value);
void unity_internal_aggregator_scope_impl_set_merge_strategy (UnityInternalAggregatorScopeImpl* self,
                                                              UnityInternalMergeStrategy* value);
UnityProtocolViewType unity_internal_aggregator_scope_impl_get_view_type (UnityInternalAggregatorScopeImpl* self);
static GObject * unity_internal_aggregator_scope_impl_constructor (GType type,
                                                            guint n_construct_properties,
                                                            GObjectConstructParam * construct_properties);
static void _g_object_unref0_ (gpointer var);
UnityInternalScopeTracker* unity_internal_scope_tracker_new (void);
UnityInternalScopeTracker* unity_internal_scope_tracker_construct (GType object_type);
static void _unity_internal_aggregator_scope_impl_on_results_invalidated_unity_internal_scope_tracker_results_invalidated (UnityInternalScopeTracker* _sender,
                                                                                                                    UnityInternalChannelUpdateFlags update_flags,
                                                                                                                    gpointer self);
static void _unity_internal_aggregator_scope_impl_on_proxy_categories_changed_unity_internal_scope_tracker_proxy_category_model_changed (UnityInternalScopeTracker* _sender,
                                                                                                                                  const gchar* scope_id,
                                                                                                                                  UnityProtocolScopeProxy* scope_proxy,
                                                                                                                                  gpointer self);
#define UNITY_INTERNAL_VAR_MEASURED_SEARCHES "LIBUNITY_TIME_SEARCHES"
static gint unity_internal_aggregator_scope_impl_category_merger_real_remap (UnityInternalAggregatorScopeImplCategoryMerger* self,
                                                                      const gchar* scope_id,
                                                                      guint32 category_index);
static gboolean unity_internal_aggregator_scope_impl_category_merger_real_merge_metadata (UnityInternalAggregatorScopeImplCategoryMerger* self,
                                                                                   const gchar* scope_id,
                                                                                   DeeModel* categories,
                                                                                   DeeModel* master_categories);
static gboolean unity_internal_aggregator_scope_impl_category_merger_contains_progress_source (GVariant** values,
                                                                                        int values_length1,
                                                                                        GVariant* psvar);
static gboolean unity_internal_aggregator_scope_impl_category_merger_merge_progress_source (GVariant** values,
                                                                                     int values_length1,
                                                                                     GHashTable* hints);
static void _vala_array_add7 (GVariant** * array,
                       int* length,
                       int* size,
                       GVariant* value);
static void _vala_array_add8 (GVariant** * array,
                       int* length,
                       int* size,
                       GVariant* value);
static UnityInternalAggregatorScopeImplCategoryMerger* unity_internal_aggregator_scope_impl_category_merger_construct (GType object_type);
static void unity_internal_aggregator_scope_impl_category_merger_finalize (GObject * obj);
static gint unity_internal_aggregator_scope_impl_category_merger_by_scope_real_remap (UnityInternalAggregatorScopeImplCategoryMerger* base,
                                                                               const gchar* scope_id,
                                                                               guint32 category_index);
static gboolean unity_internal_aggregator_scope_impl_category_merger_by_scope_real_merge_metadata (UnityInternalAggregatorScopeImplCategoryMerger* base,
                                                                                            const gchar* scope_id,
                                                                                            DeeModel* categories_model,
                                                                                            DeeModel* master_categories);
static void _vala_array_add9 (GVariant** * array,
                       int* length,
                       int* size,
                       GVariant* value);
static GHashTable* _variant_get38 (GVariant* value);
#define UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_BY_FIELD_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_FIELD, UnityInternalAggregatorScopeImplCategoryMergerByFieldPrivate))
static void _g_hash_table_unref0_ (gpointer var);
static void _vala_array_add10 (gchar** * array,
                        int* length,
                        int* size,
                        gchar* value);
static gint unity_internal_aggregator_scope_impl_category_merger_by_field_real_remap (UnityInternalAggregatorScopeImplCategoryMerger* base,
                                                                               const gchar* scope_id,
                                                                               guint32 category_index);
static gboolean unity_internal_aggregator_scope_impl_category_merger_by_field_real_merge_metadata (UnityInternalAggregatorScopeImplCategoryMerger* base,
                                                                                            const gchar* scope_id,
                                                                                            DeeModel* categories_model,
                                                                                            DeeModel* master_categories);
static void _vala_array_add11 (GVariant** * array,
                        int* length,
                        int* size,
                        GVariant* value);
static GHashTable* _variant_get39 (GVariant* value);
static void unity_internal_aggregator_scope_impl_category_merger_by_field_finalize (GObject * obj);
static gint unity_internal_aggregator_scope_impl_sorter_compare_int (gint a,
                                                              gint b);
static gint unity_internal_aggregator_scope_impl_sorter_compare_uint (guint a,
                                                               guint b);
static gint unity_internal_aggregator_scope_impl_sorter_compare_int64 (gint64 a,
                                                                gint64 b);
static gint unity_internal_aggregator_scope_impl_sorter_compare_uint64 (guint64 a,
                                                                 guint64 b);
static gint unity_internal_aggregator_scope_impl_sorter_compare_double (gdouble a,
                                                                 gdouble b);
static void unity_internal_aggregator_scope_impl_finalize (GObject * obj);
static void _vala_unity_internal_aggregator_scope_impl_get_property (GObject * object,
                                                              guint property_id,
                                                              GValue * value,
                                                              GParamSpec * pspec);
static void _vala_unity_internal_aggregator_scope_impl_set_property (GObject * object,
                                                              guint property_id,
                                                              const GValue * value,
                                                              GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

extern const gchar* UNITY_INTERNAL_CATEGORIES_SCHEMA[5];
extern const gchar* UNITY_INTERNAL_FILTERS_SCHEMA[8];
extern const gchar* UNITY_INTERNAL_RESULTS_COLUMN_NAMES[9];
extern const gchar* UNITY_INTERNAL_RESULTS_SCHEMA[9];

static void
_vala_UnityInternalAggregatorScopeImplSorter_array_free (UnityInternalAggregatorScopeImplSorter * array,
                                                         gint array_length)
{
	if (array != NULL) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			unity_internal_aggregator_scope_impl_sorter_destroy (&array[i]);
		}
	}
	g_free (array);
}


UnityInternalAggregatorScopeImpl*
unity_internal_aggregator_scope_impl_construct (GType object_type,
                                                UnityAggregatorScope* owner)
{
	UnityInternalAggregatorScopeImpl * self = NULL;
	g_return_val_if_fail (owner != NULL, NULL);
	self = (UnityInternalAggregatorScopeImpl*) g_object_new (object_type, "owner", owner, NULL);
	return self;
}


UnityInternalAggregatorScopeImpl*
unity_internal_aggregator_scope_impl_new (UnityAggregatorScope* owner)
{
	return unity_internal_aggregator_scope_impl_construct (UNITY_INTERNAL_TYPE_AGGREGATOR_SCOPE_IMPL, owner);
}


static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static void
_unity_internal_aggregator_scope_impl_update_disabled_scopes_g_object_notify (GObject* _sender,
                                                                              GParamSpec* pspec,
                                                                              gpointer self)
{
	unity_internal_aggregator_scope_impl_update_disabled_scopes ();
}


static gboolean
unity_internal_aggregator_scope_impl_is_scope_disabled (const gchar* scope_id)
{
	gboolean result = FALSE;
	GHashTable* _tmp0_;
	GHashTable* _tmp6_;
	g_return_val_if_fail (scope_id != NULL, FALSE);
	_tmp0_ = unity_internal_aggregator_scope_impl_disabled_scope_ids;
	if (_tmp0_ == NULL) {
		GHashFunc _tmp1_;
		GEqualFunc _tmp2_;
		GHashTable* _tmp3_;
		UnityPreferencesManager* pref_man = NULL;
		UnityPreferencesManager* _tmp4_;
		UnityPreferencesManager* _tmp5_;
		_tmp1_ = g_str_hash;
		_tmp2_ = g_str_equal;
		_tmp3_ = g_hash_table_new_full (_tmp1_, _tmp2_, _g_free0_, NULL);
		_g_hash_table_unref0 (unity_internal_aggregator_scope_impl_disabled_scope_ids);
		unity_internal_aggregator_scope_impl_disabled_scope_ids = _tmp3_;
		_tmp4_ = unity_preferences_manager_get_default ();
		pref_man = _tmp4_;
		_tmp5_ = pref_man;
		g_signal_connect ((GObject*) _tmp5_, "notify::disabled-scopes", (GCallback) _unity_internal_aggregator_scope_impl_update_disabled_scopes_g_object_notify, NULL);
		unity_internal_aggregator_scope_impl_update_disabled_scopes ();
		_g_object_unref0 (pref_man);
	}
	_tmp6_ = unity_internal_aggregator_scope_impl_disabled_scope_ids;
	result = g_hash_table_contains (_tmp6_, scope_id);
	return result;
}


static void
unity_internal_aggregator_scope_impl_update_disabled_scopes (void)
{
	UnityPreferencesManager* pref_man = NULL;
	UnityPreferencesManager* _tmp0_;
	GHashTable* _tmp1_;
	UnityPreferencesManager* _tmp2_;
	gchar** _tmp3_;
	gint _tmp3__length1;
	gchar** _tmp4_;
	gint _tmp4__length1;
	_tmp0_ = unity_preferences_manager_get_default ();
	pref_man = _tmp0_;
	_tmp1_ = unity_internal_aggregator_scope_impl_disabled_scope_ids;
	g_hash_table_remove_all (_tmp1_);
	_tmp2_ = pref_man;
	_tmp3_ = unity_preferences_manager_get_disabled_scopes (_tmp2_, &_tmp3__length1);
	_tmp4_ = _tmp3_;
	_tmp4__length1 = _tmp3__length1;
	{
		gchar** scope_id_collection = NULL;
		gint scope_id_collection_length1 = 0;
		gint _scope_id_collection_size_ = 0;
		gint scope_id_it = 0;
		scope_id_collection = _tmp4_;
		scope_id_collection_length1 = _tmp4__length1;
		for (scope_id_it = 0; scope_id_it < _tmp4__length1; scope_id_it = scope_id_it + 1) {
			const gchar* scope_id = NULL;
			scope_id = scope_id_collection[scope_id_it];
			{
				GHashTable* _tmp5_;
				const gchar* _tmp6_;
				gchar* _tmp7_;
				_tmp5_ = unity_internal_aggregator_scope_impl_disabled_scope_ids;
				_tmp6_ = scope_id;
				_tmp7_ = g_strdup (_tmp6_);
				g_hash_table_add (_tmp5_, _tmp7_);
			}
		}
	}
	_g_object_unref0 (pref_man);
}


GList*
unity_internal_aggregator_scope_impl_subscope_ids (UnityInternalAggregatorScopeImpl* self)
{
	GList* result = NULL;
	UnityInternalScopeTracker* _tmp0_;
	GList* _tmp1_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_scopes;
	_tmp1_ = unity_internal_scope_tracker_scope_ids_for_proxies (_tmp0_);
	result = _tmp1_;
	return result;
}


static gchar*
unity_internal_aggregator_scope_impl_create_dbus_name (UnityInternalAggregatorScopeImpl* self)
{
	gchar* result = NULL;
	gint64 t = 0LL;
	static const char format_string[] = "com.canonical.Unity.Master.Scope.%s.T%" G_GINT64_FORMAT "%d";
	gchar* dbus_name = NULL;
	UnityAggregatorScope* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	GRand* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	g_return_val_if_fail (self != NULL, NULL);
	t = g_get_monotonic_time ();
	_tmp0_ = self->priv->_owner;
	_tmp1_ = unity_deprecated_scope_base_get_dbus_path ((UnityDeprecatedScopeBase*) _tmp0_);
	_tmp2_ = _tmp1_;
	_tmp3_ = g_path_get_basename (_tmp2_);
	_tmp4_ = _tmp3_;
	_tmp5_ = self->priv->_rand;
	_tmp6_ = g_strdup_printf (format_string, _tmp4_, t, g_rand_int_range (_tmp5_, (gint32) 0, (gint32) 10000));
	_tmp7_ = _tmp6_;
	_g_free0 (_tmp4_);
	dbus_name = _tmp7_;
	result = dbus_name;
	return result;
}


static void
unity_internal_aggregator_scope_impl_create_models (UnityInternalAggregatorScopeImpl* self)
{
	DeeSequenceModel* _tmp0_;
	DeeSequenceModel* _tmp1_;
	DeeSerializableModel* _tmp2_;
	DeeSerializableModel* _tmp3_;
	DeeSequenceModel* _tmp4_;
	DeeSequenceModel* _tmp5_;
	DeeSerializableModel* _tmp6_;
	DeeSerializableModel* _tmp7_;
	g_return_if_fail (self != NULL);
	_tmp0_ = (DeeSequenceModel*) dee_sequence_model_new ();
	_tmp1_ = _tmp0_;
	unity_internal_scope_dbus_impl_set_categories_model ((UnityInternalScopeDBusImpl*) self, (DeeSerializableModel*) _tmp1_);
	_g_object_unref0 (_tmp1_);
	_tmp2_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
	_tmp3_ = _tmp2_;
	dee_model_set_schema_full ((DeeModel*) _tmp3_, UNITY_INTERNAL_CATEGORIES_SCHEMA, (guint) G_N_ELEMENTS (UNITY_INTERNAL_CATEGORIES_SCHEMA));
	_tmp4_ = (DeeSequenceModel*) dee_sequence_model_new ();
	_tmp5_ = _tmp4_;
	unity_internal_scope_dbus_impl_set_filters_model ((UnityInternalScopeDBusImpl*) self, (DeeSerializableModel*) _tmp5_);
	_g_object_unref0 (_tmp5_);
	_tmp6_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self);
	_tmp7_ = _tmp6_;
	dee_model_set_schema_full ((DeeModel*) _tmp7_, UNITY_INTERNAL_FILTERS_SCHEMA, (guint) G_N_ELEMENTS (UNITY_INTERNAL_FILTERS_SCHEMA));
}


static void
unity_internal_aggregator_scope_impl_real_export (UnityInternalScopeDBusImpl* base,
                                                  GError** error)
{
	UnityInternalAggregatorScopeImpl * self;
	GDBusConnection* _tmp0_ = NULL;
	GDBusConnection* _tmp1_;
	GDBusConnection* _tmp2_;
	guint _tmp3_ = 0U;
	GDBusConnection* _tmp4_;
	UnityAggregatorScope* _tmp5_;
	const gchar* _tmp6_;
	const gchar* _tmp7_;
	guint _tmp8_;
	GError * _inner_error_ = NULL;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_tmp1_ = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &_inner_error_);
	_tmp0_ = _tmp1_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		if (_inner_error_->domain == G_IO_ERROR) {
			g_propagate_error (error, _inner_error_);
			return;
		} else {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
	}
	_tmp2_ = _tmp0_;
	_tmp0_ = NULL;
	_g_object_unref0 (self->priv->_dbus_connection);
	self->priv->_dbus_connection = _tmp2_;
	_tmp4_ = self->priv->_dbus_connection;
	_tmp5_ = self->priv->_owner;
	_tmp6_ = unity_deprecated_scope_base_get_dbus_path ((UnityDeprecatedScopeBase*) _tmp5_);
	_tmp7_ = _tmp6_;
	_tmp8_ = unity_protocol_scope_service_register_object (G_TYPE_CHECK_INSTANCE_TYPE (self, UNITY_PROTOCOL_TYPE_SCOPE_SERVICE) ? ((UnityProtocolScopeService*) self) : NULL, _tmp4_, _tmp7_, &_inner_error_);
	_tmp3_ = _tmp8_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		if (_inner_error_->domain == G_IO_ERROR) {
			g_propagate_error (error, _inner_error_);
			_g_object_unref0 (_tmp0_);
			return;
		} else {
			_g_object_unref0 (_tmp0_);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
	}
	self->priv->_dbus_id = _tmp3_;
	_g_object_unref0 (_tmp0_);
}


static void
_vala_array_add4 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (gchar*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


static void
unity_internal_aggregator_scope_impl_real_unexport (UnityInternalScopeDBusImpl* base)
{
	UnityInternalAggregatorScopeImpl * self;
	guint _tmp0_;
	gchar** channel_ids = NULL;
	gchar** _tmp3_;
	gint channel_ids_length1;
	gint _channel_ids_size_;
	GHashTable* _tmp4_;
	GList* _tmp5_;
	gchar** _tmp9_;
	gint _tmp9__length1;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_tmp0_ = self->priv->_dbus_id;
	if (_tmp0_ != ((guint) 0)) {
		GDBusConnection* _tmp1_;
		guint _tmp2_;
		_tmp1_ = self->priv->_dbus_connection;
		_tmp2_ = self->priv->_dbus_id;
		g_dbus_connection_unregister_object (_tmp1_, _tmp2_);
		self->priv->_dbus_id = (guint) 0;
		_g_object_unref0 (self->priv->_dbus_connection);
		self->priv->_dbus_connection = NULL;
	}
	_tmp3_ = g_new0 (gchar*, 0 + 1);
	channel_ids = _tmp3_;
	channel_ids_length1 = 0;
	_channel_ids_size_ = channel_ids_length1;
	_tmp4_ = self->priv->_channels;
	_tmp5_ = g_hash_table_get_keys (_tmp4_);
	{
		GList* channel_id_collection = NULL;
		GList* channel_id_it = NULL;
		channel_id_collection = _tmp5_;
		for (channel_id_it = channel_id_collection; channel_id_it != NULL; channel_id_it = channel_id_it->next) {
			const gchar* channel_id = NULL;
			channel_id = (const gchar*) channel_id_it->data;
			{
				gchar** _tmp6_;
				gint _tmp6__length1;
				const gchar* _tmp7_;
				gchar* _tmp8_;
				_tmp6_ = channel_ids;
				_tmp6__length1 = channel_ids_length1;
				_tmp7_ = channel_id;
				_tmp8_ = g_strdup (_tmp7_);
				_vala_array_add4 (&channel_ids, &channel_ids_length1, &_channel_ids_size_, _tmp8_);
			}
		}
		(channel_id_collection == NULL) ? NULL : (channel_id_collection = (g_list_free (channel_id_collection), NULL));
	}
	_tmp9_ = channel_ids;
	_tmp9__length1 = channel_ids_length1;
	{
		gchar** channel_id_collection = NULL;
		gint channel_id_collection_length1 = 0;
		gint _channel_id_collection_size_ = 0;
		gint channel_id_it = 0;
		channel_id_collection = _tmp9_;
		channel_id_collection_length1 = _tmp9__length1;
		for (channel_id_it = 0; channel_id_it < _tmp9__length1; channel_id_it = channel_id_it + 1) {
			const gchar* channel_id = NULL;
			channel_id = channel_id_collection[channel_id_it];
			{
				UnityInternalScopeTracker* _tmp10_;
				const gchar* _tmp11_;
				GHashTable* _tmp12_;
				const gchar* _tmp13_;
				_tmp10_ = self->priv->_scopes;
				_tmp11_ = channel_id;
				unity_internal_scope_tracker_unregister_channel (_tmp10_, _tmp11_);
				_tmp12_ = self->priv->_channels;
				_tmp13_ = channel_id;
				g_hash_table_remove (_tmp12_, _tmp13_);
			}
		}
	}
	channel_ids = (_vala_array_free (channel_ids, channel_ids_length1, (GDestroyNotify) g_free), NULL);
}


static void
unity_internal_aggregator_scope_impl_real_set_categories (UnityInternalDeprecatedScopeDBusImpl* base,
                                                          GList* categories)
{
	UnityInternalAggregatorScopeImpl * self;
	gboolean categories_model_empty = FALSE;
	DeeSerializableModel* _tmp0_;
	DeeSerializableModel* _tmp1_;
	gboolean _tmp2_;
	guint _tmp53_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_tmp0_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
	_tmp1_ = _tmp0_;
	categories_model_empty = dee_model_get_n_rows ((DeeModel*) _tmp1_) == ((guint) 0);
	_tmp2_ = categories_model_empty;
	if (!_tmp2_) {
		GList* cats = NULL;
		guint cats_length = 0U;
		gboolean data_matches = FALSE;
		guint _tmp3_;
		DeeSerializableModel* _tmp4_;
		DeeSerializableModel* _tmp5_;
		DeeModelIter* iter = NULL;
		DeeSerializableModel* _tmp6_;
		DeeSerializableModel* _tmp7_;
		DeeModelIter* _tmp8_;
		DeeModelIter* end_iter = NULL;
		DeeSerializableModel* _tmp9_;
		DeeSerializableModel* _tmp10_;
		DeeModelIter* _tmp11_;
		gboolean _tmp31_;
		cats = categories;
		cats_length = g_list_length (categories);
		_tmp3_ = cats_length;
		_tmp4_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
		_tmp5_ = _tmp4_;
		data_matches = _tmp3_ >= dee_model_get_n_rows ((DeeModel*) _tmp5_);
		_tmp6_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
		_tmp7_ = _tmp6_;
		_tmp8_ = dee_model_get_first_iter ((DeeModel*) _tmp7_);
		iter = _tmp8_;
		_tmp9_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
		_tmp10_ = _tmp9_;
		_tmp11_ = dee_model_get_last_iter ((DeeModel*) _tmp10_);
		end_iter = _tmp11_;
		while (TRUE) {
			gboolean _tmp12_ = FALSE;
			gboolean _tmp13_;
			gboolean _tmp16_;
			GList* _tmp17_;
			gconstpointer _tmp18_;
			const gchar* _tmp19_;
			const gchar* _tmp20_;
			DeeSerializableModel* _tmp21_;
			DeeSerializableModel* _tmp22_;
			DeeModelIter* _tmp23_;
			const gchar* _tmp24_;
			DeeSerializableModel* _tmp25_;
			DeeSerializableModel* _tmp26_;
			DeeModelIter* _tmp27_;
			DeeModelIter* _tmp28_;
			GList* _tmp29_;
			GList* _tmp30_;
			_tmp13_ = data_matches;
			if (_tmp13_) {
				DeeModelIter* _tmp14_;
				DeeModelIter* _tmp15_;
				_tmp14_ = iter;
				_tmp15_ = end_iter;
				_tmp12_ = _tmp14_ != _tmp15_;
			} else {
				_tmp12_ = FALSE;
			}
			if (!_tmp12_) {
				break;
			}
			_tmp16_ = data_matches;
			_tmp17_ = cats;
			_tmp18_ = _tmp17_->data;
			_tmp19_ = unity_category_get_id ((UnityCategory*) _tmp18_);
			_tmp20_ = _tmp19_;
			_tmp21_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
			_tmp22_ = _tmp21_;
			_tmp23_ = iter;
			_tmp24_ = dee_model_get_string ((DeeModel*) _tmp22_, _tmp23_, (guint) 0);
			data_matches = _tmp16_ & (g_strcmp0 (_tmp20_, _tmp24_) == 0);
			_tmp25_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
			_tmp26_ = _tmp25_;
			_tmp27_ = iter;
			_tmp28_ = dee_model_next ((DeeModel*) _tmp26_, _tmp27_);
			iter = _tmp28_;
			_tmp29_ = cats;
			_tmp30_ = _tmp29_->next;
			cats = _tmp30_;
		}
		_tmp31_ = data_matches;
		if (!_tmp31_) {
			g_warning ("unity-aggregator-scope-private.vala:518: Categories can only be added," \
" ignoring request");
			return;
		} else {
			GList* _tmp32_;
			_tmp32_ = cats;
			categories = _tmp32_;
		}
	}
	{
		GList* category_collection = NULL;
		GList* category_it = NULL;
		category_collection = categories;
		for (category_it = category_collection; category_it != NULL; category_it = category_it->next) {
			UnityCategory* category = NULL;
			category = (UnityCategory*) category_it->data;
			{
				gchar* icon_hint = NULL;
				UnityCategory* _tmp33_;
				GIcon* _tmp34_;
				GIcon* _tmp35_;
				gchar* _tmp36_;
				DeeSerializableModel* _tmp37_;
				DeeSerializableModel* _tmp38_;
				UnityCategory* _tmp39_;
				const gchar* _tmp40_;
				const gchar* _tmp41_;
				UnityCategory* _tmp42_;
				const gchar* _tmp43_;
				const gchar* _tmp44_;
				const gchar* _tmp45_;
				UnityCategory* _tmp46_;
				const gchar* _tmp47_;
				const gchar* _tmp48_;
				UnityCategory* _tmp49_;
				GHashTable* _tmp50_;
				GVariant* _tmp51_;
				GVariant* _tmp52_;
				_tmp33_ = category;
				_tmp34_ = unity_category_get_icon_hint (_tmp33_);
				_tmp35_ = _tmp34_;
				_tmp36_ = unity_internal_utils_icon_to_string (_tmp35_);
				icon_hint = _tmp36_;
				_tmp37_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
				_tmp38_ = _tmp37_;
				_tmp39_ = category;
				_tmp40_ = unity_category_get_id (_tmp39_);
				_tmp41_ = _tmp40_;
				_tmp42_ = category;
				_tmp43_ = unity_category_get_name (_tmp42_);
				_tmp44_ = _tmp43_;
				_tmp45_ = icon_hint;
				_tmp46_ = category;
				_tmp47_ = unity_category_get_renderer (_tmp46_);
				_tmp48_ = _tmp47_;
				_tmp49_ = category;
				_tmp50_ = unity_category_get_hints (_tmp49_);
				_tmp51_ = unity_internal_utils_hash_table_to_asv (_tmp50_);
				_tmp52_ = _tmp51_;
				dee_model_append ((DeeModel*) _tmp38_, _tmp41_, _tmp44_, _tmp45_, _tmp48_, _tmp52_, NULL);
				_g_variant_unref0 (_tmp52_);
				_g_free0 (icon_hint);
			}
		}
	}
	_tmp53_ = self->priv->_dbus_id;
	if (_tmp53_ != ((guint) 0)) {
		GVariant* _tmp54_;
		GVariant* _tmp55_;
		GVariant* _tmp56_;
		GVariant* _tmp57_;
		GVariant* _tmp58_;
		_tmp54_ = unity_protocol_scope_service_get_categories ((UnityProtocolScopeService*) self);
		_tmp55_ = _tmp54_;
		_tmp56_ = _tmp55_;
		_tmp57_ = g_variant_new_variant (_tmp56_);
		g_variant_ref_sink (_tmp57_);
		_tmp58_ = _tmp57_;
		unity_internal_scope_dbus_impl_queue_property_notification ((UnityInternalScopeDBusImpl*) self, "Categories", _tmp58_);
		_g_variant_unref0 (_tmp58_);
		_g_variant_unref0 (_tmp56_);
	}
}


static void
unity_internal_aggregator_scope_impl_real_set_filters (UnityInternalDeprecatedScopeDBusImpl* base,
                                                       GList* filters)
{
	UnityInternalAggregatorScopeImpl * self;
	DeeSerializableModel* _tmp0_;
	DeeSerializableModel* _tmp1_;
	GList* filters_and_sources = NULL;
	GList* _tmp2_;
	UnityAggregatorScope* _tmp3_;
	UnityOptionsFilter* _tmp4_;
	UnityOptionsFilter* _tmp5_;
	GList* _tmp6_;
	GVariant* data[8] = {0};
	GList* _tmp10_;
	guint _tmp24_;
	GHashTable* _tmp30_;
	GList* _tmp31_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_tmp0_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self);
	_tmp1_ = _tmp0_;
	dee_model_clear ((DeeModel*) _tmp1_);
	{
		GList* filter_collection = NULL;
		GList* filter_it = NULL;
		filter_collection = filters;
		for (filter_it = filter_collection; filter_it != NULL; filter_it = filter_it->next) {
			UnityFilter* filter = NULL;
			filter = (UnityFilter*) filter_it->data;
			{
			}
		}
	}
	_tmp2_ = g_list_copy (filters);
	filters_and_sources = _tmp2_;
	_tmp3_ = self->priv->_owner;
	_tmp4_ = unity_deprecated_scope_base_get_sources ((UnityDeprecatedScopeBase*) _tmp3_);
	_tmp5_ = _tmp4_;
	_tmp6_ = _tmp5_->options;
	if (g_list_length (_tmp6_) > ((guint) 0)) {
		UnityAggregatorScope* _tmp7_;
		UnityOptionsFilter* _tmp8_;
		UnityOptionsFilter* _tmp9_;
		_tmp7_ = self->priv->_owner;
		_tmp8_ = unity_deprecated_scope_base_get_sources ((UnityDeprecatedScopeBase*) _tmp7_);
		_tmp9_ = _tmp8_;
		filters_and_sources = g_list_append (filters_and_sources, (UnityFilter*) _tmp9_);
	}
	_tmp10_ = filters_and_sources;
	{
		GList* filter_collection = NULL;
		GList* filter_it = NULL;
		filter_collection = _tmp10_;
		for (filter_it = filter_collection; filter_it != NULL; filter_it = filter_it->next) {
			UnityFilter* filter = NULL;
			filter = (UnityFilter*) filter_it->data;
			{
				GVariant* serialized_filter = NULL;
				UnityFilter* _tmp11_;
				GVariant* _tmp12_;
				DeeSerializableModel* _tmp22_;
				DeeSerializableModel* _tmp23_;
				_tmp11_ = filter;
				_tmp12_ = dee_serializable_serialize ((DeeSerializable*) _tmp11_);
				serialized_filter = _tmp12_;
				{
					gsize i = 0UL;
					i = (gsize) 0;
					{
						gboolean _tmp13_ = FALSE;
						_tmp13_ = TRUE;
						while (TRUE) {
							gsize _tmp15_;
							GVariant* _tmp16_;
							gsize _tmp17_;
							GVariant* _tmp18_;
							gsize _tmp19_;
							GVariant* _tmp20_;
							GVariant* _tmp21_;
							if (!_tmp13_) {
								gsize _tmp14_;
								_tmp14_ = i;
								i = _tmp14_ + 1;
							}
							_tmp13_ = FALSE;
							_tmp15_ = i;
							_tmp16_ = serialized_filter;
							if (!(_tmp15_ < g_variant_n_children (_tmp16_))) {
								break;
							}
							_tmp17_ = i;
							_tmp18_ = serialized_filter;
							_tmp19_ = i;
							_tmp20_ = g_variant_get_child_value (_tmp18_, _tmp19_);
							_g_variant_unref0 (data[_tmp17_]);
							data[_tmp17_] = _tmp20_;
							_tmp21_ = data[_tmp17_];
						}
					}
				}
				_tmp22_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self);
				_tmp23_ = _tmp22_;
				dee_model_append_row ((DeeModel*) _tmp23_, data);
				_g_variant_unref0 (serialized_filter);
			}
		}
	}
	_tmp24_ = self->priv->_dbus_id;
	if (_tmp24_ != ((guint) 0)) {
		GVariant* _tmp25_;
		GVariant* _tmp26_;
		GVariant* _tmp27_;
		GVariant* _tmp28_;
		GVariant* _tmp29_;
		_tmp25_ = unity_protocol_scope_service_get_filters ((UnityProtocolScopeService*) self);
		_tmp26_ = _tmp25_;
		_tmp27_ = _tmp26_;
		_tmp28_ = g_variant_new_variant (_tmp27_);
		g_variant_ref_sink (_tmp28_);
		_tmp29_ = _tmp28_;
		unity_internal_scope_dbus_impl_queue_property_notification ((UnityInternalScopeDBusImpl*) self, "Filters", _tmp29_);
		_g_variant_unref0 (_tmp29_);
		_g_variant_unref0 (_tmp27_);
	}
	_tmp30_ = self->priv->_channels;
	_tmp31_ = g_hash_table_get_values (_tmp30_);
	{
		GList* channel_collection = NULL;
		GList* channel_it = NULL;
		channel_collection = _tmp31_;
		for (channel_it = channel_collection; channel_it != NULL; channel_it = channel_it->next) {
			UnityInternalScopeChannel* channel = NULL;
			channel = (UnityInternalScopeChannel*) channel_it->data;
			{
				UnityInternalScopeChannel* _tmp32_;
				DeeSerializableModel* _tmp33_;
				DeeSerializableModel* _tmp34_;
				_tmp32_ = channel;
				_tmp33_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self);
				_tmp34_ = _tmp33_;
				unity_internal_scope_channel_set_filter_base (_tmp32_, _tmp34_);
			}
		}
		(channel_collection == NULL) ? NULL : (channel_collection = (g_list_free (channel_collection), NULL));
	}
	_vala_array_destroy (data, 8, (GDestroyNotify) g_variant_unref);
	(filters_and_sources == NULL) ? NULL : (filters_and_sources = (g_list_free (filters_and_sources), NULL));
}


static void
unity_internal_aggregator_scope_impl_on_results_invalidated (UnityInternalAggregatorScopeImpl* self,
                                                             UnityInternalChannelUpdateFlags flags)
{
	g_return_if_fail (self != NULL);
	if ((flags & UNITY_INTERNAL_CHANNEL_UPDATE_FLAGS_DEFAULT) == UNITY_INTERNAL_CHANNEL_UPDATE_FLAGS_DEFAULT) {
		UnityProtocolChannelType channel_type = 0;
		UnityProtocolChannelType _tmp0_;
		channel_type = UNITY_PROTOCOL_CHANNEL_TYPE_DEFAULT;
		_tmp0_ = channel_type;
		if (unity_internal_aggregator_scope_impl_invalidate_last_search_for_channel (self, _tmp0_)) {
			UnityProtocolChannelType _tmp1_;
			_tmp1_ = channel_type;
			g_signal_emit_by_name ((UnityProtocolScopeService*) self, "results-invalidated", (guint) _tmp1_);
		}
	}
	if ((flags & UNITY_INTERNAL_CHANNEL_UPDATE_FLAGS_GLOBAL) == UNITY_INTERNAL_CHANNEL_UPDATE_FLAGS_GLOBAL) {
		UnityProtocolChannelType channel_type = 0;
		UnityProtocolChannelType _tmp2_;
		channel_type = UNITY_PROTOCOL_CHANNEL_TYPE_GLOBAL;
		_tmp2_ = channel_type;
		if (unity_internal_aggregator_scope_impl_invalidate_last_search_for_channel (self, _tmp2_)) {
			UnityProtocolChannelType _tmp3_;
			_tmp3_ = channel_type;
			g_signal_emit_by_name ((UnityProtocolScopeService*) self, "results-invalidated", (guint) _tmp3_);
		}
	}
}


static void
_g_variant_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_variant_unref (var), NULL));
}


static void
unity_internal_aggregator_scope_impl_channel_owner_lost (UnityInternalAggregatorScopeImpl* self,
                                                         UnityInternalScopeChannel* channel)
{
	GHashTable* empty = NULL;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	const gchar* _tmp3_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (channel != NULL);
	_tmp0_ = g_str_hash;
	_tmp1_ = g_str_equal;
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, _g_variant_unref0_);
	empty = _tmp2_;
	_tmp3_ = channel->id;
	unity_protocol_scope_service_close_channel ((UnityProtocolScopeService*) self, _tmp3_, empty, NULL, NULL, NULL);
	_g_hash_table_unref0 (empty);
}


static void
unity_internal_aggregator_scope_impl_on_proxy_categories_changed (UnityInternalAggregatorScopeImpl* self,
                                                                  const gchar* scope_id,
                                                                  UnityProtocolScopeProxy* proxy)
{
	UnityInternalAggregatorScopeImplCategoryMerger* _tmp0_;
	gboolean categories_updated = FALSE;
	UnityInternalAggregatorScopeImplCategoryMerger* _tmp4_;
	DeeSerializableModel* _tmp5_;
	DeeSerializableModel* _tmp6_;
	DeeSerializableModel* _tmp7_;
	DeeSerializableModel* _tmp8_;
	gboolean _tmp9_ = FALSE;
	gboolean _tmp10_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (scope_id != NULL);
	g_return_if_fail (proxy != NULL);
	_tmp0_ = self->priv->category_merger;
	if (G_TYPE_CHECK_INSTANCE_TYPE (_tmp0_, UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_FIELD)) {
		UnityInternalAggregatorScopeImplCategoryMerger* _tmp1_;
		DeeSerializableModel* _tmp2_;
		DeeSerializableModel* _tmp3_;
		_tmp1_ = self->priv->category_merger;
		_tmp2_ = unity_protocol_scope_proxy_get_categories_model (proxy);
		_tmp3_ = _tmp2_;
		unity_internal_aggregator_scope_impl_category_merger_by_field_map_subscope_categories (G_TYPE_CHECK_INSTANCE_TYPE (_tmp1_, UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_FIELD) ? ((UnityInternalAggregatorScopeImplCategoryMergerByField*) _tmp1_) : NULL, scope_id, _tmp3_);
	}
	_tmp4_ = self->priv->category_merger;
	_tmp5_ = unity_protocol_scope_proxy_get_categories_model (proxy);
	_tmp6_ = _tmp5_;
	_tmp7_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
	_tmp8_ = _tmp7_;
	categories_updated = unity_internal_aggregator_scope_impl_category_merger_merge_metadata (_tmp4_, scope_id, (DeeModel*) _tmp6_, (DeeModel*) _tmp8_);
	_tmp10_ = categories_updated;
	if (_tmp10_) {
		guint _tmp11_;
		_tmp11_ = self->priv->_dbus_id;
		_tmp9_ = _tmp11_ != ((guint) 0);
	} else {
		_tmp9_ = FALSE;
	}
	if (_tmp9_) {
		GVariant* _tmp12_;
		GVariant* _tmp13_;
		GVariant* _tmp14_;
		GVariant* _tmp15_;
		GVariant* _tmp16_;
		_tmp12_ = unity_protocol_scope_service_get_categories ((UnityProtocolScopeService*) self);
		_tmp13_ = _tmp12_;
		_tmp14_ = _tmp13_;
		_tmp15_ = g_variant_new_variant (_tmp14_);
		g_variant_ref_sink (_tmp15_);
		_tmp16_ = _tmp15_;
		unity_internal_scope_dbus_impl_queue_property_notification ((UnityInternalScopeDBusImpl*) self, "Categories", _tmp16_);
		_g_variant_unref0 (_tmp16_);
		_g_variant_unref0 (_tmp14_);
	}
}


static gboolean
unity_internal_aggregator_scope_impl_invalidate_last_search_for_channel (UnityInternalAggregatorScopeImpl* self,
                                                                         UnityProtocolChannelType channel_type)
{
	gboolean result = FALSE;
	gboolean any_invalidated = FALSE;
	GHashTable* _tmp0_;
	GList* _tmp1_;
	g_return_val_if_fail (self != NULL, FALSE);
	any_invalidated = FALSE;
	_tmp0_ = self->priv->_channels;
	_tmp1_ = g_hash_table_get_values (_tmp0_);
	{
		GList* channel_collection = NULL;
		GList* channel_it = NULL;
		channel_collection = _tmp1_;
		for (channel_it = channel_collection; channel_it != NULL; channel_it = channel_it->next) {
			UnityInternalScopeChannel* channel = NULL;
			channel = (UnityInternalScopeChannel*) channel_it->data;
			{
				UnityInternalScopeChannel* _tmp2_;
				UnityProtocolChannelType _tmp3_;
				_tmp2_ = channel;
				_tmp3_ = _tmp2_->channel_type;
				if (_tmp3_ == channel_type) {
					UnityInternalScopeChannel* _tmp4_;
					_tmp4_ = channel;
					_g_object_unref0 (_tmp4_->last_search);
					_tmp4_->last_search = NULL;
					any_invalidated = TRUE;
				}
			}
		}
		(channel_collection == NULL) ? NULL : (channel_collection = (g_list_free (channel_collection), NULL));
	}
	result = any_invalidated;
	return result;
}


void
unity_internal_aggregator_scope_impl_queue_search_for_type (UnityInternalAggregatorScopeImpl* self,
                                                            UnitySearchType search_type)
{
	UnityInternalChannelUpdateFlags _tmp0_ = 0;
	UnityInternalChannelUpdateFlags flags = 0;
	g_return_if_fail (self != NULL);
	if (search_type == UNITY_SEARCH_TYPE_GLOBAL) {
		_tmp0_ = UNITY_INTERNAL_CHANNEL_UPDATE_FLAGS_GLOBAL;
	} else {
		_tmp0_ = UNITY_INTERNAL_CHANNEL_UPDATE_FLAGS_DEFAULT;
	}
	flags = _tmp0_;
	unity_internal_aggregator_scope_impl_on_results_invalidated (self, flags);
}


void
unity_internal_aggregator_scope_impl_invalidate_search (UnityInternalAggregatorScopeImpl* self,
                                                        UnitySearchType search_type)
{
	g_return_if_fail (self != NULL);
}


static gboolean
___lambda23_ (UnityInternalAggregatorScopeImpl* self)
{
	gboolean result = FALSE;
	GVariant* invalidated = NULL;
	GVariantType* _tmp0_;
	GVariantType* _tmp1_;
	GVariant** _tmp2_;
	GVariant** _tmp3_;
	gint _tmp3__length1;
	GVariant* _tmp4_;
	GVariant* _tmp5_;
	GError * _inner_error_ = NULL;
	_tmp0_ = g_variant_type_new ("s");
	_tmp1_ = _tmp0_;
	_tmp2_ = g_new0 (GVariant*, 0 + 1);
	_tmp3_ = _tmp2_;
	_tmp3__length1 = 0;
	_tmp4_ = g_variant_new_array (_tmp1_, _tmp3_, 0);
	g_variant_ref_sink (_tmp4_);
	_tmp5_ = _tmp4_;
	_tmp3_ = (_vala_array_free (_tmp3_, _tmp3__length1, (GDestroyNotify) g_variant_unref), NULL);
	_g_variant_type_free0 (_tmp1_);
	invalidated = _tmp5_;
	{
		GDBusConnection* _tmp6_;
		UnityAggregatorScope* _tmp7_;
		const gchar* _tmp8_;
		const gchar* _tmp9_;
		GVariantBuilder* _tmp10_;
		GVariant* _tmp11_;
		GVariant* _tmp12_;
		_tmp6_ = self->priv->_dbus_connection;
		_tmp7_ = self->priv->_owner;
		_tmp8_ = unity_deprecated_scope_base_get_dbus_path ((UnityDeprecatedScopeBase*) _tmp7_);
		_tmp9_ = _tmp8_;
		_tmp10_ = self->priv->changed_props;
		_tmp11_ = g_variant_new ("(sa{sv}@as)", UNITY_PROTOCOL_SCOPE_SERVICE_INTERFACE_NAME, _tmp10_, invalidated, NULL);
		g_variant_ref_sink (_tmp11_);
		_tmp12_ = _tmp11_;
		g_dbus_connection_emit_signal (_tmp6_, NULL, _tmp9_, "org.freedesktop.DBus.Properties", "PropertiesChanged", _tmp12_, &_inner_error_);
		_g_variant_unref0 (_tmp12_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch26_g_error;
		}
	}
	goto __finally26;
	__catch26_g_error:
	{
		GError* err = NULL;
		GError* _tmp13_;
		const gchar* _tmp14_;
		err = _inner_error_;
		_inner_error_ = NULL;
		_tmp13_ = err;
		_tmp14_ = _tmp13_->message;
		g_warning ("unity-aggregator-scope-private.vala:671: %s", _tmp14_);
		_g_error_free0 (err);
	}
	__finally26:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		gboolean _tmp15_ = FALSE;
		_g_variant_unref0 (invalidated);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return _tmp15_;
	}
	_g_variant_builder_unref0 (self->priv->changed_props);
	self->priv->changed_props = NULL;
	result = FALSE;
	_g_variant_unref0 (invalidated);
	return result;
}


static gboolean
____lambda23__gsource_func (gpointer self)
{
	gboolean result;
	result = ___lambda23_ ((UnityInternalAggregatorScopeImpl*) self);
	return result;
}


static void
unity_internal_aggregator_scope_impl_real_queue_property_notification (UnityInternalScopeDBusImpl* base,
                                                                       const gchar* prop_name,
                                                                       GVariant* prop_value)
{
	UnityInternalAggregatorScopeImpl * self;
	guint _tmp0_;
	gboolean schedule_emit = FALSE;
	GVariantBuilder* _tmp1_;
	GVariantBuilder* _tmp2_;
	GVariantBuilder* _tmp6_;
	gboolean _tmp7_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	g_return_if_fail (prop_name != NULL);
	g_return_if_fail (prop_value != NULL);
	_tmp0_ = self->priv->_dbus_id;
	if (_tmp0_ == ((guint) 0)) {
		return;
	}
	_tmp1_ = self->priv->changed_props;
	schedule_emit = _tmp1_ == NULL;
	_tmp2_ = self->priv->changed_props;
	if (_tmp2_ == NULL) {
		GVariantType* _tmp3_;
		GVariantType* _tmp4_;
		GVariantBuilder* _tmp5_;
		_tmp3_ = g_variant_type_new ("a{sv}");
		_tmp4_ = _tmp3_;
		_tmp5_ = g_variant_builder_new (_tmp4_);
		_g_variant_builder_unref0 (self->priv->changed_props);
		self->priv->changed_props = _tmp5_;
		_g_variant_type_free0 (_tmp4_);
	}
	_tmp6_ = self->priv->changed_props;
	g_variant_builder_add (_tmp6_, "{sv}", prop_name, prop_value, NULL);
	_tmp7_ = schedule_emit;
	if (_tmp7_) {
		g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, ____lambda23__gsource_func, g_object_ref (self), g_object_unref);
	}
}


static gboolean
_vala_string_array_contains (const gchar* * stack,
                             int stack_length,
                             const gchar* needle)
{
	int i;
	for (i = 0; i < stack_length; i++) {
		if (g_strcmp0 (stack[i], needle) == 0) {
			return TRUE;
		}
	}
	return FALSE;
}


static gchar
string_get (const gchar* self,
            glong index)
{
	gchar result = '\0';
	gchar _tmp0_;
	g_return_val_if_fail (self != NULL, '\0');
	_tmp0_ = ((gchar*) self)[index];
	result = _tmp0_;
	return result;
}


static void
_vala_array_add5 (UnityInternalAggregatorScopeImplSorter* * array,
                  int* length,
                  int* size,
                  const UnityInternalAggregatorScopeImplSorter* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (UnityInternalAggregatorScopeImplSorter, *array, *size);
	}
	(*array)[(*length)++] = *value;
}


void
unity_internal_aggregator_scope_impl_add_sorter (UnityInternalAggregatorScopeImpl* self,
                                                 guint category_index,
                                                 const gchar* field,
                                                 UnityAggregatorScopeSortFlags flags)
{
	gchar* schema = NULL;
	gboolean is_base_column = FALSE;
	gboolean field_found = FALSE;
	UnityAggregatorScope* _tmp0_;
	UnitySchema* _tmp1_;
	UnitySchema* _tmp2_;
	GList* _tmp3_;
	gboolean _tmp9_ = FALSE;
	gboolean _tmp10_;
	gint col_index = 0;
	gint _tmp18_;
	const gchar* _tmp22_;
	GVariantType* _tmp23_;
	GVariantType* _tmp24_;
	gboolean _tmp25_;
	UnityInternalAggregatorScopeImplSorter sorter = {0};
	gint _tmp27_ = 0;
	gint _tmp28_;
	const gchar* _tmp30_ = NULL;
	gint _tmp31_;
	gchar* _tmp32_;
	const gchar* _tmp33_;
	gint _tmp34_ = 0;
	UnityInternalAggregatorScopeImplSorter* _tmp35_;
	gint _tmp35__length1;
	UnityInternalAggregatorScopeImplSorter _tmp36_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (field != NULL);
	schema = NULL;
	is_base_column = _vala_string_array_contains (UNITY_INTERNAL_RESULTS_COLUMN_NAMES, G_N_ELEMENTS (UNITY_INTERNAL_RESULTS_COLUMN_NAMES), field);
	field_found = FALSE;
	_tmp0_ = self->priv->_owner;
	_tmp1_ = unity_deprecated_scope_base_get_schema ((UnityDeprecatedScopeBase*) _tmp0_);
	_tmp2_ = _tmp1_;
	_tmp3_ = unity_schema_get_fields (_tmp2_);
	{
		GList* info_collection = NULL;
		GList* info_it = NULL;
		info_collection = _tmp3_;
		for (info_it = info_collection; info_it != NULL; info_it = info_it->next) {
			UnitySchemaFieldInfo* info = NULL;
			info = (UnitySchemaFieldInfo*) info_it->data;
			{
				UnitySchemaFieldInfo* _tmp4_;
				const gchar* _tmp5_;
				_tmp4_ = info;
				_tmp5_ = (*_tmp4_).name;
				if (g_strcmp0 (_tmp5_, field) == 0) {
					UnitySchemaFieldInfo* _tmp6_;
					const gchar* _tmp7_;
					gchar* _tmp8_;
					_tmp6_ = info;
					_tmp7_ = (*_tmp6_).schema;
					_tmp8_ = g_strdup (_tmp7_);
					_g_free0 (schema);
					schema = _tmp8_;
					field_found = TRUE;
					break;
				}
			}
		}
		(info_collection == NULL) ? NULL : (info_collection = (g_list_free (info_collection), NULL));
	}
	_tmp10_ = is_base_column;
	if (!_tmp10_) {
		gboolean _tmp11_;
		_tmp11_ = field_found;
		_tmp9_ = !_tmp11_;
	} else {
		_tmp9_ = FALSE;
	}
	if (_tmp9_) {
		g_critical ("unity-aggregator-scope-private.vala:700: Field name '%s' is not valid " \
"for this scope", field);
		_g_free0 (schema);
		return;
	}
	col_index = -1;
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp12_ = FALSE;
			_tmp12_ = TRUE;
			while (TRUE) {
				gint _tmp14_;
				gint _tmp15_;
				const gchar* _tmp16_;
				if (!_tmp12_) {
					gint _tmp13_;
					_tmp13_ = i;
					i = _tmp13_ + 1;
				}
				_tmp12_ = FALSE;
				_tmp14_ = i;
				if (!(_tmp14_ < G_N_ELEMENTS (UNITY_INTERNAL_RESULTS_COLUMN_NAMES))) {
					break;
				}
				_tmp15_ = i;
				_tmp16_ = UNITY_INTERNAL_RESULTS_COLUMN_NAMES[_tmp15_];
				if (g_strcmp0 (field, _tmp16_) == 0) {
					gint _tmp17_;
					_tmp17_ = i;
					col_index = _tmp17_;
					break;
				}
			}
		}
	}
	_tmp18_ = col_index;
	if (_tmp18_ >= 0) {
		gint _tmp19_;
		const gchar* _tmp20_;
		gchar* _tmp21_;
		_tmp19_ = col_index;
		_tmp20_ = UNITY_INTERNAL_RESULTS_SCHEMA[_tmp19_];
		_tmp21_ = g_strdup (_tmp20_);
		_g_free0 (schema);
		schema = _tmp21_;
	}
	_tmp22_ = schema;
	_tmp23_ = g_variant_type_new (_tmp22_);
	_tmp24_ = _tmp23_;
	_tmp25_ = g_variant_type_is_basic (_tmp24_) == FALSE;
	_g_variant_type_free0 (_tmp24_);
	if (_tmp25_) {
		const gchar* _tmp26_;
		_tmp26_ = schema;
		g_critical ("unity-aggregator-scope-private.vala:720: Only basic types can be sorte" \
"d, '%s' is not supported", _tmp26_);
		_g_free0 (schema);
		return;
	}
	memset (&sorter, 0, sizeof (UnityInternalAggregatorScopeImplSorter));
	sorter.category = (gint) category_index;
	_tmp28_ = col_index;
	if (_tmp28_ < 0) {
		_tmp27_ = G_N_ELEMENTS (UNITY_INTERNAL_RESULTS_COLUMN_NAMES) - 1;
	} else {
		gint _tmp29_;
		_tmp29_ = col_index;
		_tmp27_ = _tmp29_;
	}
	sorter.column_index = _tmp27_;
	_tmp31_ = col_index;
	if (_tmp31_ < 0) {
		_tmp30_ = field;
	} else {
		_tmp30_ = NULL;
	}
	_tmp32_ = g_strdup (_tmp30_);
	_g_free0 (sorter.field_name);
	sorter.field_name = _tmp32_;
	_tmp33_ = schema;
	sorter.schema = string_get (_tmp33_, (glong) 0);
	if ((flags & UNITY_AGGREGATOR_SCOPE_SORT_FLAGS_DESCENDING) == UNITY_AGGREGATOR_SCOPE_SORT_FLAGS_DESCENDING) {
		_tmp34_ = -1;
	} else {
		_tmp34_ = 1;
	}
	sorter.multiplier = _tmp34_;
	_tmp35_ = self->priv->_sorters;
	_tmp35__length1 = self->priv->_sorters_length1;
	_tmp36_ = sorter;
	memset (&sorter, 0, sizeof (UnityInternalAggregatorScopeImplSorter));
	_vala_array_add5 (&self->priv->_sorters, &self->priv->_sorters_length1, &self->priv->__sorters_size_, &_tmp36_);
	unity_internal_aggregator_scope_impl_sorter_destroy (&sorter);
	_g_free0 (schema);
}


static void
_vala_array_add6 (UnityInternalAggregatorScopeImplSorter* * array,
                  int* length,
                  int* size,
                  const UnityInternalAggregatorScopeImplSorter* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (UnityInternalAggregatorScopeImplSorter, *array, *size);
	}
	(*array)[(*length)++] = *value;
}


void
unity_internal_aggregator_scope_impl_add_constraint (UnityInternalAggregatorScopeImpl* self,
                                                     gint category_index,
                                                     const gchar* field)
{
	gchar* schema = NULL;
	gboolean is_base_column = FALSE;
	gboolean field_found = FALSE;
	UnityAggregatorScope* _tmp0_;
	UnitySchema* _tmp1_;
	UnitySchema* _tmp2_;
	GList* _tmp3_;
	gboolean _tmp9_ = FALSE;
	gboolean _tmp10_;
	gint col_index = 0;
	gint _tmp18_;
	const gchar* _tmp22_;
	GVariantType* _tmp23_;
	GVariantType* _tmp24_;
	gboolean _tmp25_;
	UnityInternalAggregatorScopeImplSorter sorter = {0};
	gint _tmp39_ = 0;
	gint _tmp40_;
	const gchar* _tmp42_ = NULL;
	gint _tmp43_;
	gchar* _tmp44_;
	const gchar* _tmp45_;
	UnityInternalAggregatorScopeImplSorter* _tmp46_;
	gint _tmp46__length1;
	UnityInternalAggregatorScopeImplSorter* _tmp66_;
	gint _tmp66__length1;
	UnityInternalAggregatorScopeImplSorter _tmp67_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (field != NULL);
	schema = NULL;
	is_base_column = _vala_string_array_contains (UNITY_INTERNAL_RESULTS_COLUMN_NAMES, G_N_ELEMENTS (UNITY_INTERNAL_RESULTS_COLUMN_NAMES), field);
	field_found = FALSE;
	_tmp0_ = self->priv->_owner;
	_tmp1_ = unity_deprecated_scope_base_get_schema ((UnityDeprecatedScopeBase*) _tmp0_);
	_tmp2_ = _tmp1_;
	_tmp3_ = unity_schema_get_fields (_tmp2_);
	{
		GList* info_collection = NULL;
		GList* info_it = NULL;
		info_collection = _tmp3_;
		for (info_it = info_collection; info_it != NULL; info_it = info_it->next) {
			UnitySchemaFieldInfo* info = NULL;
			info = (UnitySchemaFieldInfo*) info_it->data;
			{
				UnitySchemaFieldInfo* _tmp4_;
				const gchar* _tmp5_;
				_tmp4_ = info;
				_tmp5_ = (*_tmp4_).name;
				if (g_strcmp0 (_tmp5_, field) == 0) {
					UnitySchemaFieldInfo* _tmp6_;
					const gchar* _tmp7_;
					gchar* _tmp8_;
					_tmp6_ = info;
					_tmp7_ = (*_tmp6_).schema;
					_tmp8_ = g_strdup (_tmp7_);
					_g_free0 (schema);
					schema = _tmp8_;
					field_found = TRUE;
					break;
				}
			}
		}
		(info_collection == NULL) ? NULL : (info_collection = (g_list_free (info_collection), NULL));
	}
	_tmp10_ = is_base_column;
	if (!_tmp10_) {
		gboolean _tmp11_;
		_tmp11_ = field_found;
		_tmp9_ = !_tmp11_;
	} else {
		_tmp9_ = FALSE;
	}
	if (_tmp9_) {
		g_critical ("unity-aggregator-scope-private.vala:753: Field name '%s' is not valid " \
"for this scope", field);
		_g_free0 (schema);
		return;
	}
	col_index = -1;
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp12_ = FALSE;
			_tmp12_ = TRUE;
			while (TRUE) {
				gint _tmp14_;
				gint _tmp15_;
				const gchar* _tmp16_;
				if (!_tmp12_) {
					gint _tmp13_;
					_tmp13_ = i;
					i = _tmp13_ + 1;
				}
				_tmp12_ = FALSE;
				_tmp14_ = i;
				if (!(_tmp14_ < G_N_ELEMENTS (UNITY_INTERNAL_RESULTS_COLUMN_NAMES))) {
					break;
				}
				_tmp15_ = i;
				_tmp16_ = UNITY_INTERNAL_RESULTS_COLUMN_NAMES[_tmp15_];
				if (g_strcmp0 (field, _tmp16_) == 0) {
					gint _tmp17_;
					_tmp17_ = i;
					col_index = _tmp17_;
					break;
				}
			}
		}
	}
	_tmp18_ = col_index;
	if (_tmp18_ >= 0) {
		gint _tmp19_;
		const gchar* _tmp20_;
		gchar* _tmp21_;
		_tmp19_ = col_index;
		_tmp20_ = UNITY_INTERNAL_RESULTS_SCHEMA[_tmp19_];
		_tmp21_ = g_strdup (_tmp20_);
		_g_free0 (schema);
		schema = _tmp21_;
	}
	_tmp22_ = schema;
	_tmp23_ = g_variant_type_new (_tmp22_);
	_tmp24_ = _tmp23_;
	_tmp25_ = g_variant_type_is_basic (_tmp24_) == FALSE;
	_g_variant_type_free0 (_tmp24_);
	if (_tmp25_) {
		const gchar* _tmp26_;
		_tmp26_ = schema;
		g_critical ("unity-aggregator-scope-private.vala:773: Only basic types can be sorte" \
"d, '%s' is not supported", _tmp26_);
		_g_free0 (schema);
		return;
	}
	if (category_index >= 0) {
		gboolean category_sorter_present = FALSE;
		gint category_col_index = 0;
		gint _tmp33_;
		UnityInternalAggregatorScopeImplSorter* _tmp34_;
		gint _tmp34__length1;
		gboolean _tmp38_;
		category_sorter_present = FALSE;
		category_col_index = -1;
		{
			gint i = 0;
			i = 0;
			{
				gboolean _tmp27_ = FALSE;
				_tmp27_ = TRUE;
				while (TRUE) {
					gint _tmp29_;
					gint _tmp30_;
					const gchar* _tmp31_;
					if (!_tmp27_) {
						gint _tmp28_;
						_tmp28_ = i;
						i = _tmp28_ + 1;
					}
					_tmp27_ = FALSE;
					_tmp29_ = i;
					if (!(_tmp29_ < G_N_ELEMENTS (UNITY_INTERNAL_RESULTS_COLUMN_NAMES))) {
						break;
					}
					_tmp30_ = i;
					_tmp31_ = UNITY_INTERNAL_RESULTS_COLUMN_NAMES[_tmp30_];
					if (g_strcmp0 (_tmp31_, "category") == 0) {
						gint _tmp32_;
						_tmp32_ = i;
						category_col_index = _tmp32_;
						break;
					}
				}
			}
		}
		_tmp33_ = category_col_index;
		g_warn_if_fail (_tmp33_ >= 0);
		_tmp34_ = self->priv->_constraints;
		_tmp34__length1 = self->priv->_constraints_length1;
		{
			UnityInternalAggregatorScopeImplSorter* it_sorter_collection = NULL;
			gint it_sorter_collection_length1 = 0;
			gint _it_sorter_collection_size_ = 0;
			gint it_sorter_it = 0;
			it_sorter_collection = _tmp34_;
			it_sorter_collection_length1 = _tmp34__length1;
			for (it_sorter_it = 0; it_sorter_it < _tmp34__length1; it_sorter_it = it_sorter_it + 1) {
				UnityInternalAggregatorScopeImplSorter it_sorter = {0};
				it_sorter = it_sorter_collection[it_sorter_it];
				{
					UnityInternalAggregatorScopeImplSorter _tmp35_;
					gint _tmp36_;
					gint _tmp37_;
					_tmp35_ = it_sorter;
					_tmp36_ = _tmp35_.column_index;
					_tmp37_ = category_col_index;
					if (_tmp36_ == _tmp37_) {
						category_sorter_present = TRUE;
						break;
					}
				}
			}
		}
		_tmp38_ = category_sorter_present;
		if (!_tmp38_) {
			unity_internal_aggregator_scope_impl_add_constraint (self, -1, "category");
		}
	}
	memset (&sorter, 0, sizeof (UnityInternalAggregatorScopeImplSorter));
	sorter.category = category_index;
	_tmp40_ = col_index;
	if (_tmp40_ < 0) {
		_tmp39_ = G_N_ELEMENTS (UNITY_INTERNAL_RESULTS_COLUMN_NAMES) - 1;
	} else {
		gint _tmp41_;
		_tmp41_ = col_index;
		_tmp39_ = _tmp41_;
	}
	sorter.column_index = _tmp39_;
	_tmp43_ = col_index;
	if (_tmp43_ < 0) {
		_tmp42_ = field;
	} else {
		_tmp42_ = NULL;
	}
	_tmp44_ = g_strdup (_tmp42_);
	_g_free0 (sorter.field_name);
	sorter.field_name = _tmp44_;
	_tmp45_ = schema;
	sorter.schema = string_get (_tmp45_, (glong) 0);
	sorter.multiplier = 1;
	_tmp46_ = self->priv->_constraints;
	_tmp46__length1 = self->priv->_constraints_length1;
	{
		UnityInternalAggregatorScopeImplSorter* it_sorter_collection = NULL;
		gint it_sorter_collection_length1 = 0;
		gint _it_sorter_collection_size_ = 0;
		gint it_sorter_it = 0;
		it_sorter_collection = _tmp46_;
		it_sorter_collection_length1 = _tmp46__length1;
		for (it_sorter_it = 0; it_sorter_it < _tmp46__length1; it_sorter_it = it_sorter_it + 1) {
			UnityInternalAggregatorScopeImplSorter it_sorter = {0};
			it_sorter = it_sorter_collection[it_sorter_it];
			{
				gboolean _tmp47_ = FALSE;
				gboolean _tmp48_ = FALSE;
				gboolean _tmp49_ = FALSE;
				UnityInternalAggregatorScopeImplSorter _tmp50_;
				gint _tmp51_;
				UnityInternalAggregatorScopeImplSorter _tmp52_;
				gint _tmp53_;
				_tmp50_ = it_sorter;
				_tmp51_ = _tmp50_.category;
				_tmp52_ = sorter;
				_tmp53_ = _tmp52_.category;
				if (_tmp51_ == _tmp53_) {
					UnityInternalAggregatorScopeImplSorter _tmp54_;
					gint _tmp55_;
					UnityInternalAggregatorScopeImplSorter _tmp56_;
					gint _tmp57_;
					_tmp54_ = it_sorter;
					_tmp55_ = _tmp54_.column_index;
					_tmp56_ = sorter;
					_tmp57_ = _tmp56_.column_index;
					_tmp49_ = _tmp55_ == _tmp57_;
				} else {
					_tmp49_ = FALSE;
				}
				if (_tmp49_) {
					UnityInternalAggregatorScopeImplSorter _tmp58_;
					const gchar* _tmp59_;
					UnityInternalAggregatorScopeImplSorter _tmp60_;
					const gchar* _tmp61_;
					_tmp58_ = it_sorter;
					_tmp59_ = _tmp58_.field_name;
					_tmp60_ = sorter;
					_tmp61_ = _tmp60_.field_name;
					_tmp48_ = g_strcmp0 (_tmp59_, _tmp61_) == 0;
				} else {
					_tmp48_ = FALSE;
				}
				if (_tmp48_) {
					UnityInternalAggregatorScopeImplSorter _tmp62_;
					gchar _tmp63_;
					UnityInternalAggregatorScopeImplSorter _tmp64_;
					gchar _tmp65_;
					_tmp62_ = it_sorter;
					_tmp63_ = _tmp62_.schema;
					_tmp64_ = sorter;
					_tmp65_ = _tmp64_.schema;
					_tmp47_ = _tmp63_ == _tmp65_;
				} else {
					_tmp47_ = FALSE;
				}
				if (_tmp47_) {
					g_warning ("unity-aggregator-scope-private.vala:818: Trying to add duplicate const" \
"raint, ignoring");
					unity_internal_aggregator_scope_impl_sorter_destroy (&sorter);
					_g_free0 (schema);
					return;
				}
			}
		}
	}
	_tmp66_ = self->priv->_constraints;
	_tmp66__length1 = self->priv->_constraints_length1;
	_tmp67_ = sorter;
	memset (&sorter, 0, sizeof (UnityInternalAggregatorScopeImplSorter));
	_vala_array_add6 (&self->priv->_constraints, &self->priv->_constraints_length1, &self->priv->__constraints_size_, &_tmp67_);
	unity_internal_aggregator_scope_impl_sorter_destroy (&sorter);
	_g_free0 (schema);
}


static gint
unity_internal_aggregator_scope_impl_apply_sorters (GVariant** row1,
                                                    int row1_length1,
                                                    GVariant** row2,
                                                    int row2_length1,
                                                    guint category,
                                                    UnityInternalAggregatorScopeImplSorter* sorters,
                                                    int sorters_length1)
{
	gint result = 0;
	{
		UnityInternalAggregatorScopeImplSorter* sorter_collection = NULL;
		gint sorter_collection_length1 = 0;
		gint _sorter_collection_size_ = 0;
		gint sorter_it = 0;
		sorter_collection = sorters;
		sorter_collection_length1 = sorters_length1;
		for (sorter_it = 0; sorter_it < sorters_length1; sorter_it = sorter_it + 1) {
			UnityInternalAggregatorScopeImplSorter sorter = {0};
			sorter = sorter_collection[sorter_it];
			{
				gboolean _tmp0_ = FALSE;
				UnityInternalAggregatorScopeImplSorter _tmp1_;
				gint _tmp2_;
				gint sorter_result = 0;
				gint _tmp5_;
				_tmp1_ = sorter;
				_tmp2_ = _tmp1_.category;
				if (_tmp2_ >= 0) {
					UnityInternalAggregatorScopeImplSorter _tmp3_;
					gint _tmp4_;
					_tmp3_ = sorter;
					_tmp4_ = _tmp3_.category;
					_tmp0_ = ((guint) _tmp4_) != category;
				} else {
					_tmp0_ = FALSE;
				}
				if (_tmp0_) {
					continue;
				}
				sorter_result = unity_internal_aggregator_scope_impl_sorter_apply (&sorter, row1, row1_length1, row2, row2_length1);
				_tmp5_ = sorter_result;
				if (_tmp5_ != 0) {
					result = sorter_result;
					return result;
				}
			}
		}
	}
	result = 0;
	return result;
}


static Block20Data*
block20_data_ref (Block20Data* _data20_)
{
	g_atomic_int_inc (&_data20_->_ref_count_);
	return _data20_;
}


static void
block20_data_unref (void * _userdata_)
{
	Block20Data* _data20_;
	_data20_ = (Block20Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data20_->_ref_count_)) {
		UnityInternalAggregatorScopeImpl* self;
		self = _data20_->self;
		_g_object_unref0 (self);
		g_slice_free (Block20Data, _data20_);
	}
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
____lambda24_ (void)
{
}


static void
_____lambda24__dee_filter_map_func (DeeModel* orig_model,
                                    DeeFilterModel* filter_model,
                                    void* data)
{
	____lambda24_ ();
}


static gint
__lambda26_ (UnityInternalAggregatorScopeImpl* self,
             GVariant** row1,
             int row1_length1,
             GVariant** row2,
             int row2_length1)
{
	gint result = 0;
	guint category = 0U;
	GVariant* _tmp0_;
	UnityInternalAggregatorScopeImplSorter* _tmp1_;
	gint _tmp1__length1;
	_tmp0_ = row1[UNITY_INTERNAL_RESULT_COLUMN_CATEGORY];
	category = (guint) g_variant_get_uint32 (_tmp0_);
	_tmp1_ = self->priv->_constraints;
	_tmp1__length1 = self->priv->_constraints_length1;
	result = unity_internal_aggregator_scope_impl_apply_sorters (row1, row1_length1, row2, row2_length1, category, _tmp1_, _tmp1__length1);
	return result;
}


static gint
___lambda26__dee_compare_row_func (GVariant** row1,
                                   GVariant** row2,
                                   gpointer self)
{
	gint result;
	result = __lambda26_ ((UnityInternalAggregatorScopeImpl*) self, row1, -1, row2, -1);
	return result;
}


static gboolean
____lambda25_ (UnityInternalAggregatorScopeImpl* self,
               DeeModel* orig_model,
               DeeModelIter* orig_iter,
               DeeFilterModel* m)
{
	gboolean result = FALSE;
	GVariant* row_data[9] = {0};
	GVariant** _tmp0_;
	DeeModelIter* iter = NULL;
	DeeModelIter* _tmp1_;
	g_return_val_if_fail (orig_model != NULL, FALSE);
	g_return_val_if_fail (orig_iter != NULL, FALSE);
	g_return_val_if_fail (m != NULL, FALSE);
	_tmp0_ = dee_model_get_row (orig_model, orig_iter, row_data);
	_tmp1_ = dee_model_find_row_sorted ((DeeModel*) m, row_data, ___lambda26__dee_compare_row_func, self, NULL);
	iter = _tmp1_;
	dee_filter_model_insert_iter_before (m, orig_iter, iter);
	result = TRUE;
	_vala_array_destroy (row_data, 9, (GDestroyNotify) g_variant_unref);
	return result;
}


static gboolean
_____lambda25__dee_filter_map_notify (DeeModel* orig_model,
                                      DeeModelIter* orig_iter,
                                      DeeFilterModel* filter_model,
                                      gpointer self)
{
	gboolean result;
	result = ____lambda25_ ((UnityInternalAggregatorScopeImpl*) self, orig_model, orig_iter, filter_model);
	return result;
}


static gint
___lambda27_ (Block20Data* _data20_,
              GVariant** row1,
              int row1_length1,
              GVariant** row2,
              int row2_length1)
{
	UnityInternalAggregatorScopeImpl* self;
	gint result = 0;
	guint category = 0U;
	GVariant* _tmp0_;
	self = _data20_->self;
	_tmp0_ = row1[UNITY_INTERNAL_RESULT_COLUMN_CATEGORY];
	category = (guint) g_variant_get_uint32 (_tmp0_);
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp1_ = FALSE;
			_tmp1_ = TRUE;
			while (TRUE) {
				gint _tmp3_;
				UnityInternalAggregatorScopeImplSorter* _tmp4_;
				gint _tmp4__length1;
				UnityInternalAggregatorScopeImplSorter sorter = {0};
				UnityInternalAggregatorScopeImplSorter* _tmp5_;
				gint _tmp5__length1;
				gint _tmp6_;
				UnityInternalAggregatorScopeImplSorter _tmp7_;
				gboolean _tmp8_ = FALSE;
				UnityInternalAggregatorScopeImplSorter _tmp9_;
				gint _tmp10_;
				gint sorter_result = 0;
				gboolean _tmp14_ = FALSE;
				gint _tmp15_;
				if (!_tmp1_) {
					gint _tmp2_;
					_tmp2_ = i;
					i = _tmp2_ + 1;
				}
				_tmp1_ = FALSE;
				_tmp3_ = i;
				_tmp4_ = self->priv->_constraints;
				_tmp4__length1 = self->priv->_constraints_length1;
				if (!(_tmp3_ < _tmp4__length1)) {
					break;
				}
				_tmp5_ = self->priv->_constraints;
				_tmp5__length1 = self->priv->_constraints_length1;
				_tmp6_ = i;
				_tmp7_ = _tmp5_[_tmp6_];
				sorter = _tmp7_;
				_tmp9_ = sorter;
				_tmp10_ = _tmp9_.category;
				if (_tmp10_ >= 0) {
					UnityInternalAggregatorScopeImplSorter _tmp11_;
					gint _tmp12_;
					guint _tmp13_;
					_tmp11_ = sorter;
					_tmp12_ = _tmp11_.category;
					_tmp13_ = category;
					_tmp8_ = ((guint) _tmp12_) != _tmp13_;
				} else {
					_tmp8_ = FALSE;
				}
				if (_tmp8_) {
					continue;
				}
				sorter_result = unity_internal_aggregator_scope_impl_sorter_apply (&sorter, row1, row1_length1, row2, row2_length1);
				_tmp15_ = sorter_result;
				if (_tmp15_ != 0) {
					_tmp14_ = TRUE;
				} else {
					gint _tmp16_;
					UnityInternalAggregatorScopeImplSorter* _tmp17_;
					gint _tmp17__length1;
					_tmp16_ = i;
					_tmp17_ = self->priv->_constraints;
					_tmp17__length1 = self->priv->_constraints_length1;
					_tmp14_ = _tmp16_ == (_tmp17__length1 - 1);
				}
				if (_tmp14_) {
					result = sorter_result;
					return result;
				}
			}
		}
	}
	_data20_->fell_through = TRUE;
	result = 0;
	return result;
}


static gint
____lambda27__dee_compare_row_func (GVariant** row1,
                                    GVariant** row2,
                                    gpointer self)
{
	gint result;
	result = ___lambda27_ (self, row1, -1, row2, -1);
	return result;
}


static gint
__lambda28_ (UnityInternalAggregatorScopeImpl* self,
             GVariant** row1,
             int row1_length1,
             GVariant** row2,
             int row2_length1)
{
	gint result = 0;
	guint category = 0U;
	GVariant* _tmp0_;
	gint cat_delta = 0;
	guint _tmp1_;
	GVariant* _tmp2_;
	gint _tmp3_;
	guint _tmp6_;
	UnityInternalAggregatorScopeImplSorter* _tmp7_;
	gint _tmp7__length1;
	_tmp0_ = row1[UNITY_INTERNAL_RESULT_COLUMN_CATEGORY];
	category = (guint) g_variant_get_uint32 (_tmp0_);
	_tmp1_ = category;
	_tmp2_ = row2[UNITY_INTERNAL_RESULT_COLUMN_CATEGORY];
	cat_delta = ((gint) _tmp1_) - ((gint) g_variant_get_uint32 (_tmp2_));
	_tmp3_ = cat_delta;
	if (_tmp3_ != 0) {
		gint _tmp4_ = 0;
		gint _tmp5_;
		_tmp5_ = cat_delta;
		if (_tmp5_ > 0) {
			_tmp4_ = 1;
		} else {
			_tmp4_ = -1;
		}
		result = _tmp4_;
		return result;
	}
	_tmp6_ = category;
	_tmp7_ = self->priv->_sorters;
	_tmp7__length1 = self->priv->_sorters_length1;
	result = unity_internal_aggregator_scope_impl_apply_sorters (row1, row1_length1, row2, row2_length1, _tmp6_, _tmp7_, _tmp7__length1);
	return result;
}


static gint
___lambda28__dee_compare_row_func (GVariant** row1,
                                   GVariant** row2,
                                   gpointer self)
{
	gint result;
	result = __lambda28_ ((UnityInternalAggregatorScopeImpl*) self, row1, -1, row2, -1);
	return result;
}


static DeeModelIter*
unity_internal_aggregator_scope_impl_real_merge_result (UnityInternalMergeStrategy* base,
                                                        const gchar* scope_id,
                                                        DeeModel* target,
                                                        GVariant** row,
                                                        int row_length1)
{
	UnityInternalAggregatorScopeImpl * self;
	DeeModelIter* result = NULL;
	guint row_category = 0U;
	GVariant* _tmp0_;
	gint cat_idx = 0;
	UnityInternalAggregatorScopeImplCategoryMerger* _tmp1_;
	guint _tmp2_;
	gint _tmp3_;
	UnityInternalAggregatorScopeImplSorter* _tmp8_;
	gint _tmp8__length1;
	DeeModelIter* _tmp24_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	g_return_val_if_fail (scope_id != NULL, NULL);
	g_return_val_if_fail (target != NULL, NULL);
	_tmp0_ = row[UNITY_INTERNAL_RESULT_COLUMN_CATEGORY];
	row_category = (guint) g_variant_get_uint32 (_tmp0_);
	_tmp1_ = self->priv->category_merger;
	_tmp2_ = row_category;
	cat_idx = unity_internal_aggregator_scope_impl_category_merger_remap (_tmp1_, scope_id, (guint32) _tmp2_);
	_tmp3_ = cat_idx;
	if (_tmp3_ >= 0) {
		gint _tmp4_;
		GVariant* _tmp5_;
		GVariant* _tmp6_;
		_tmp4_ = cat_idx;
		_tmp5_ = g_variant_new_uint32 ((guint32) _tmp4_);
		g_variant_ref_sink (_tmp5_);
		_g_variant_unref0 (row[UNITY_INTERNAL_RESULT_COLUMN_CATEGORY]);
		row[UNITY_INTERNAL_RESULT_COLUMN_CATEGORY] = _tmp5_;
		_tmp6_ = row[UNITY_INTERNAL_RESULT_COLUMN_CATEGORY];
	} else {
		guint _tmp7_;
		_tmp7_ = row_category;
		g_warning ("unity-aggregator-scope-private.vala:851: Unable to remap category %u f" \
"or %s", _tmp7_, scope_id);
		result = NULL;
		return result;
	}
	_tmp8_ = self->priv->_constraints;
	_tmp8__length1 = self->priv->_constraints_length1;
	if (_tmp8__length1 > 0) {
		Block20Data* _data20_;
		DeeModel* dedup_model = NULL;
		GQuark _tmp9_;
		gconstpointer _tmp10_;
		DeeModel* _tmp11_;
		DeeModel* _tmp12_;
		gboolean found = FALSE;
		DeeModel* _tmp19_;
		gboolean _tmp20_ = FALSE;
		gboolean _tmp21_ = FALSE;
		gboolean _tmp22_;
		_data20_ = g_slice_new0 (Block20Data);
		_data20_->_ref_count_ = 1;
		_data20_->self = g_object_ref (self);
		_tmp9_ = unity_internal_scope_tracker_DEDUP_MODEL_QUARK;
		_tmp10_ = g_object_get_qdata ((GObject*) target, _tmp9_);
		_tmp11_ = _g_object_ref0 ((DeeModel*) _tmp10_);
		dedup_model = _tmp11_;
		_tmp12_ = dedup_model;
		if (_tmp12_ == NULL) {
			DeeFilter filter = {0};
			DeeFilter _tmp13_ = {0};
			DeeFilter _tmp14_;
			DeeFilterModel* _tmp15_;
			GQuark _tmp16_;
			DeeModel* _tmp17_;
			DeeModel* _tmp18_;
			g_warn_if_fail (dee_model_get_n_rows (target) == ((guint) 0));
			dee_filter_new (_____lambda24__dee_filter_map_func, _____lambda25__dee_filter_map_notify, g_object_ref (self), g_object_unref, &_tmp13_);
			filter = _tmp13_;
			_tmp14_ = filter;
			_tmp15_ = (DeeFilterModel*) dee_filter_model_new (target, &_tmp14_);
			_g_object_unref0 (dedup_model);
			dedup_model = (DeeModel*) _tmp15_;
			_tmp16_ = unity_internal_scope_tracker_DEDUP_MODEL_QUARK;
			_tmp17_ = dedup_model;
			_tmp18_ = _g_object_ref0 (_tmp17_);
			g_object_set_qdata_full ((GObject*) target, _tmp16_, _tmp18_, g_object_unref);
		}
		_data20_->fell_through = FALSE;
		_tmp19_ = dedup_model;
		dee_model_find_row_sorted (_tmp19_, row, ____lambda27__dee_compare_row_func, _data20_, &_tmp20_);
		found = _tmp20_;
		_tmp22_ = found;
		if (_tmp22_) {
			gboolean _tmp23_;
			_tmp23_ = _data20_->fell_through;
			_tmp21_ = !_tmp23_;
		} else {
			_tmp21_ = FALSE;
		}
		if (_tmp21_) {
			result = NULL;
			_g_object_unref0 (dedup_model);
			block20_data_unref (_data20_);
			_data20_ = NULL;
			return result;
		}
		_g_object_unref0 (dedup_model);
		block20_data_unref (_data20_);
		_data20_ = NULL;
	}
	_tmp24_ = dee_model_insert_row_sorted (target, row, ___lambda28__dee_compare_row_func, self);
	result = _tmp24_;
	return result;
}


static UnityProtocolScopeProxy*
unity_internal_aggregator_scope_impl_get_proxy_for_result (UnityInternalAggregatorScopeImpl* self,
                                                           GVariant* result_metadata,
                                                           gchar* * scope_id,
                                                           GError** error)
{
	gchar* _vala_scope_id = NULL;
	UnityProtocolScopeProxy* result = NULL;
	UnityInternalScopeTracker* _tmp2_;
	const gchar* _tmp3_;
	UnityProtocolScopeProxy* _tmp4_;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (self != NULL, NULL);
	if (result_metadata == NULL) {
		GError* _tmp0_;
		_tmp0_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, "Unable to find scope proxy");
		_inner_error_ = _tmp0_;
		if (_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR) {
			g_propagate_error (error, _inner_error_);
			return NULL;
		} else {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return NULL;
		}
	}
	if (!g_variant_lookup (result_metadata, "scope-id", "s", &_vala_scope_id, NULL)) {
		GError* _tmp1_;
		_tmp1_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, "Unable to find scope proxy");
		_inner_error_ = _tmp1_;
		if (_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR) {
			g_propagate_error (error, _inner_error_);
			return NULL;
		} else {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return NULL;
		}
	}
	_tmp2_ = self->priv->_scopes;
	_tmp3_ = _vala_scope_id;
	_tmp4_ = unity_internal_scope_tracker_get_proxy_for_scope_id (_tmp2_, _tmp3_);
	result = _tmp4_;
	if (scope_id) {
		*scope_id = _vala_scope_id;
	} else {
		_g_free0 (_vala_scope_id);
	}
	return result;
}


static void
unity_internal_aggregator_scope_impl_real_activate_data_free (gpointer _data)
{
	UnityInternalAggregatorScopeImplActivateData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_hash_table_unref0 (_data_->hints);
	_g_object_unref0 (_data_->cancellable);
	unity_protocol_activation_reply_raw_destroy (&_data_->result);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalAggregatorScopeImplActivateData, _data_);
}


static void
unity_internal_aggregator_scope_impl_real_activate_async_ready_wrapper (GObject *source_object,
                                                                        GAsyncResult *res,
                                                                        void *user_data)
{
	UnityInternalAggregatorScopeImplActivateData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static gpointer
_g_hash_table_ref0 (gpointer self)
{
	return self ? g_hash_table_ref (self) : NULL;
}


static void
unity_internal_aggregator_scope_impl_real_activate (UnityProtocolScopeService* base,
                                                    const gchar* channel_id,
                                                    GVariant** result_arr,
                                                    int result_arr_length1,
                                                    guint action_type,
                                                    GHashTable* hints,
                                                    GCancellable* cancellable,
                                                    GAsyncReadyCallback _callback_,
                                                    gpointer _user_data_)
{
	UnityInternalAggregatorScopeImpl * self;
	UnityInternalAggregatorScopeImplActivateData* _data_;
	UnityInternalAggregatorScopeImpl* _tmp0_;
	gchar* _tmp1_;
	GHashTable* _tmp2_;
	GCancellable* _tmp3_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_data_ = g_slice_new0 (UnityInternalAggregatorScopeImplActivateData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_internal_aggregator_scope_impl_real_activate_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_aggregator_scope_impl_real_activate_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_data_->result_arr = result_arr;
	_data_->result_arr_length1 = result_arr_length1;
	_data_->action_type = action_type;
	_tmp2_ = _g_hash_table_ref0 (hints);
	_g_hash_table_unref0 (_data_->hints);
	_data_->hints = _tmp2_;
	_tmp3_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp3_;
	unity_internal_aggregator_scope_impl_real_activate_co (_data_);
}


static void
unity_internal_aggregator_scope_impl_real_activate_finish (UnityProtocolScopeService* base,
                                                           GAsyncResult* _res_,
                                                           UnityProtocolActivationReplyRaw* result,
                                                           GError** error)
{
	UnityInternalAggregatorScopeImplActivateData* _data_;
	UnityProtocolActivationReplyRaw _tmp0_ = {0};
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
	unity_protocol_activation_reply_raw_copy (&_data_->result, &_tmp0_);
	*result = _tmp0_;
}


static gpointer
_g_variant_ref0 (gpointer self)
{
	return self ? g_variant_ref (self) : NULL;
}


static GHashTable*
_variant_get36 (GVariant* value)
{
	GHashTable* _tmp35_;
	GVariantIter _tmp36_;
	GVariant* _tmp37_;
	GVariant* _tmp38_;
	_tmp35_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
	g_variant_iter_init (&_tmp36_, value);
	while (g_variant_iter_loop (&_tmp36_, "{?*}", &_tmp37_, &_tmp38_)) {
		g_hash_table_insert (_tmp35_, g_variant_dup_string (_tmp37_, NULL), g_variant_get_variant (_tmp38_));
	}
	return _tmp35_;
}


static GVariant**
_vala_array_dup8 (GVariant** self,
                  int length)
{
	GVariant** result;
	int i;
	result = g_new0 (GVariant*, length + 1);
	for (i = 0; i < length; i++) {
		GVariant* _tmp0_;
		_tmp0_ = _g_variant_ref0 (self[i]);
		result[i] = _tmp0_;
	}
	return result;
}


static void
unity_internal_aggregator_scope_impl_activate_ready (GObject* source_object,
                                                     GAsyncResult* _res_,
                                                     gpointer _user_data_)
{
	UnityInternalAggregatorScopeImplActivateData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_internal_aggregator_scope_impl_real_activate_co (_data_);
}


static gchar*
string_strip (const gchar* self)
{
	gchar* result = NULL;
	gchar* _result_ = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = g_strdup (self);
	_result_ = _tmp0_;
	_tmp1_ = _result_;
	g_strstrip (_tmp1_);
	result = _result_;
	return result;
}


static gpointer
_g_error_copy0 (gpointer self)
{
	return self ? g_error_copy (self) : NULL;
}


static gboolean
unity_internal_aggregator_scope_impl_real_activate_co (UnityInternalAggregatorScopeImplActivateData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		case 2:
		goto _state_2;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = unity_internal_aggregator_scope_impl_get_channel_by_id (_data_->self, _data_->channel_id, &_data_->_inner_error_);
	_data_->channel = _data_->_tmp0_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->_tmp1_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_METADATA];
	_data_->_tmp2_ = _g_variant_ref0 (_data_->_tmp1_);
	_data_->metadata = _data_->_tmp2_;
	_data_->_tmp4_ = _data_->metadata;
	_data_->_tmp5_ = NULL;
	_data_->_tmp6_ = unity_internal_aggregator_scope_impl_get_proxy_for_result (_data_->self, _data_->_tmp4_, &_data_->_tmp5_, &_data_->_inner_error_);
	_g_free0 (_data_->scope_id);
	_data_->scope_id = _data_->_tmp5_;
	_data_->_tmp3_ = _data_->_tmp6_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			_g_variant_unref0 (_data_->metadata);
			_g_free0 (_data_->scope_id);
			_g_object_unref0 (_data_->channel);
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_g_variant_unref0 (_data_->metadata);
			_g_free0 (_data_->scope_id);
			_g_object_unref0 (_data_->channel);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->proxy = _data_->_tmp3_;
	_data_->_tmp7_ = _data_->metadata;
	_data_->_tmp8_ = g_variant_lookup_value (_data_->_tmp7_, "content", NULL);
	_g_variant_unref0 (_data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_METADATA]);
	_data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_METADATA] = _data_->_tmp8_;
	_data_->_tmp9_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_METADATA];
	memset (&_data_->scope_result, 0, sizeof (UnityScopeResult));
	_data_->_tmp10_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_URI];
	_data_->_tmp11_ = g_variant_get_string (_data_->_tmp10_, NULL);
	_data_->_tmp12_ = g_strdup (_data_->_tmp11_);
	_g_free0 (_data_->scope_result.uri);
	_data_->scope_result.uri = _data_->_tmp12_;
	_data_->_tmp13_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_ICON_HINT];
	_data_->_tmp14_ = g_variant_get_string (_data_->_tmp13_, NULL);
	_data_->_tmp15_ = g_strdup (_data_->_tmp14_);
	_g_free0 (_data_->scope_result.icon_hint);
	_data_->scope_result.icon_hint = _data_->_tmp15_;
	_data_->_tmp16_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_CATEGORY];
	_data_->scope_result.category = (guint) g_variant_get_uint32 (_data_->_tmp16_);
	_data_->_tmp17_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_RESULT_TYPE];
	_data_->scope_result.result_type = (UnityResultType) g_variant_get_uint32 (_data_->_tmp17_);
	_data_->_tmp18_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_MIMETYPE];
	_data_->_tmp19_ = g_variant_get_string (_data_->_tmp18_, NULL);
	_data_->_tmp20_ = g_strdup (_data_->_tmp19_);
	_g_free0 (_data_->scope_result.mimetype);
	_data_->scope_result.mimetype = _data_->_tmp20_;
	_data_->_tmp21_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_TITLE];
	_data_->_tmp22_ = g_variant_get_string (_data_->_tmp21_, NULL);
	_data_->_tmp23_ = g_strdup (_data_->_tmp22_);
	_g_free0 (_data_->scope_result.title);
	_data_->scope_result.title = _data_->_tmp23_;
	_data_->_tmp24_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_COMMENT];
	_data_->_tmp25_ = g_variant_get_string (_data_->_tmp24_, NULL);
	_data_->_tmp26_ = g_strdup (_data_->_tmp25_);
	_g_free0 (_data_->scope_result.comment);
	_data_->scope_result.comment = _data_->_tmp26_;
	_data_->_tmp27_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_DND_URI];
	_data_->_tmp28_ = g_variant_get_string (_data_->_tmp27_, NULL);
	_data_->_tmp29_ = g_strdup (_data_->_tmp28_);
	_g_free0 (_data_->scope_result.dnd_uri);
	_data_->scope_result.dnd_uri = _data_->_tmp29_;
	_data_->_tmp30_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_METADATA];
	_data_->_tmp31_ = g_variant_get_type (_data_->_tmp30_);
	_data_->_tmp32_ = G_VARIANT_TYPE_VARDICT;
	if (g_variant_type_equal (_data_->_tmp31_, _data_->_tmp32_)) {
		_data_->_tmp33_ = _data_->result_arr[UNITY_INTERNAL_RESULT_COLUMN_METADATA];
		_data_->_tmp34_ = _variant_get36 (_data_->_tmp33_);
		_g_hash_table_unref0 (_data_->scope_result.metadata);
		_data_->scope_result.metadata = _data_->_tmp34_;
	}
	_data_->_tmp39_ = _data_->scope_id;
	if (_data_->_tmp39_ == NULL) {
		_data_->_tmp40_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, "Unable to determine scope id!");
		_data_->_inner_error_ = _data_->_tmp40_;
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			unity_scope_result_destroy (&_data_->scope_result);
			_g_variant_unref0 (_data_->metadata);
			_g_free0 (_data_->scope_id);
			_g_object_unref0 (_data_->channel);
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			unity_scope_result_destroy (&_data_->scope_result);
			_g_variant_unref0 (_data_->metadata);
			_g_free0 (_data_->scope_id);
			_g_object_unref0 (_data_->channel);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->_tmp41_ = (_data_->result_arr != NULL) ? _vala_array_dup8 (_data_->result_arr, _data_->result_arr_length1) : ((gpointer) _data_->result_arr);
	_data_->_tmp41__length1 = _data_->result_arr_length1;
	_data_->result_arr_cpy = _data_->_tmp41_;
	_data_->result_arr_cpy_length1 = _data_->_tmp41__length1;
	_data_->_result_arr_cpy_size_ = _data_->result_arr_cpy_length1;
	_data_->_tmp42_ = _data_->scope_id;
	_data_->_tmp43_ = _data_->scope_result;
	_data_->_tmp44_ = unity_aggregator_activation_new (_data_->channel_id, _data_->_tmp42_, _data_->action_type, &_data_->_tmp43_);
	_data_->activation_obj = _data_->_tmp44_;
	_data_->_tmp45_ = _data_->activation_obj;
	unity_aggregator_activation_set_hints (_data_->_tmp45_, _data_->hints);
	_data_->_tmp46_ = _data_->self->priv->_owner;
	_data_->_tmp47_ = _data_->activation_obj;
	_data_->_state_ = 1;
	unity_aggregator_scope_activate (_data_->_tmp46_, _data_->_tmp47_, unity_internal_aggregator_scope_impl_activate_ready, _data_);
	return FALSE;
	_state_1:
	_data_->_tmp48_ = unity_aggregator_scope_activate_finish (_data_->_tmp46_, _data_->_res_);
	_data_->response = _data_->_tmp48_;
	_data_->_tmp49_ = _data_->response;
	if (_data_->_tmp49_ != NULL) {
		memset (&_data_->raw, 0, sizeof (UnityProtocolActivationReplyRaw));
		_data_->_tmp50_ = _data_->scope_result;
		_data_->_tmp51_ = _data_->_tmp50_.uri;
		_data_->_tmp52_ = g_strdup (_data_->_tmp51_);
		_g_free0 (_data_->raw.uri);
		_data_->raw.uri = _data_->_tmp52_;
		_data_->_tmp53_ = _data_->response;
		_data_->_tmp54_ = unity_activation_response_get_goto_uri (_data_->_tmp53_);
		_data_->_tmp55_ = _data_->_tmp54_;
		if (_data_->_tmp55_ != NULL) {
			_data_->_tmp56_ = _data_->response;
			_data_->_tmp57_ = unity_activation_response_get_goto_uri (_data_->_tmp56_);
			_data_->_tmp58_ = _data_->_tmp57_;
			_data_->_tmp59_ = string_strip (_data_->_tmp58_);
			_data_->stripped = _data_->_tmp59_;
			_data_->_tmp60_ = _data_->stripped;
			if (g_strcmp0 (_data_->_tmp60_, "") != 0) {
				_data_->_tmp61_ = _data_->stripped;
				_data_->_tmp62_ = g_strdup (_data_->_tmp61_);
				_g_free0 (_data_->raw.uri);
				_data_->raw.uri = _data_->_tmp62_;
			}
			_g_free0 (_data_->stripped);
		}
		_data_->_tmp63_ = _data_->response;
		_data_->_tmp64_ = unity_activation_response_get_handled (_data_->_tmp63_);
		_data_->_tmp65_ = _data_->_tmp64_;
		_data_->raw.handled = (guint) _data_->_tmp65_;
		_data_->_tmp66_ = _data_->response;
		_data_->_tmp67_ = unity_activation_response_get_hints (_data_->_tmp66_);
		_g_hash_table_unref0 (_data_->raw.hints);
		_data_->raw.hints = _data_->_tmp67_;
		_data_->result = _data_->raw;
		_g_object_unref0 (_data_->response);
		_g_object_unref0 (_data_->activation_obj);
		_data_->result_arr_cpy = (_vala_array_free (_data_->result_arr_cpy, _data_->result_arr_cpy_length1, (GDestroyNotify) g_variant_unref), NULL);
		unity_scope_result_destroy (&_data_->scope_result);
		_g_variant_unref0 (_data_->metadata);
		_g_free0 (_data_->scope_id);
		_g_object_unref0 (_data_->channel);
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
		if (_data_->_state_ != 0) {
			while (_data_->_task_complete_ != TRUE) {
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
			}
		}
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp68_ = _data_->proxy;
	if (_data_->_tmp68_ == NULL) {
		if (_data_->action_type != ((guint) UNITY_PROTOCOL_ACTION_TYPE_PREVIEW_RESULT)) {
			_data_->_tmp69_ = unity_activation_response_new (UNITY_HANDLED_TYPE_NOT_HANDLED, "");
			_g_object_unref0 (_data_->response);
			_data_->response = _data_->_tmp69_;
		} else {
			_data_->_tmp70_ = unity_generic_preview_empty ();
			_data_->_tmp71_ = _data_->_tmp70_;
			_data_->_tmp72_ = unity_activation_response_new_with_preview ((UnityPreview*) _data_->_tmp71_);
			_g_object_unref0 (_data_->response);
			_data_->response = _data_->_tmp72_;
			_g_object_unref0 (_data_->_tmp71_);
		}
		memset (&_data_->_vala1_raw, 0, sizeof (UnityProtocolActivationReplyRaw));
		_data_->_tmp73_ = _data_->scope_result;
		_data_->_tmp74_ = _data_->_tmp73_.uri;
		_data_->_tmp75_ = g_strdup (_data_->_tmp74_);
		_g_free0 (_data_->_vala1_raw.uri);
		_data_->_vala1_raw.uri = _data_->_tmp75_;
		_data_->_tmp76_ = _data_->response;
		_data_->_tmp77_ = unity_activation_response_get_handled (_data_->_tmp76_);
		_data_->_tmp78_ = _data_->_tmp77_;
		_data_->_vala1_raw.handled = (guint) _data_->_tmp78_;
		_data_->_tmp79_ = _data_->response;
		_data_->_tmp80_ = unity_activation_response_get_hints (_data_->_tmp79_);
		_g_hash_table_unref0 (_data_->_vala1_raw.hints);
		_data_->_vala1_raw.hints = _data_->_tmp80_;
		_data_->result = _data_->_vala1_raw;
		_g_object_unref0 (_data_->response);
		_g_object_unref0 (_data_->activation_obj);
		_data_->result_arr_cpy = (_vala_array_free (_data_->result_arr_cpy, _data_->result_arr_cpy_length1, (GDestroyNotify) g_variant_unref), NULL);
		unity_scope_result_destroy (&_data_->scope_result);
		_g_variant_unref0 (_data_->metadata);
		_g_free0 (_data_->scope_id);
		_g_object_unref0 (_data_->channel);
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
		if (_data_->_state_ != 0) {
			while (_data_->_task_complete_ != TRUE) {
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
			}
		}
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	{
		_data_->_tmp82_ = _data_->self->priv->_scopes;
		_data_->_tmp83_ = _data_->channel;
		_data_->_tmp84_ = _data_->scope_id;
		_data_->_tmp85_ = _data_->result_arr_cpy;
		_data_->_tmp85__length1 = _data_->result_arr_cpy_length1;
		_data_->result_arr_cpy = NULL;
		_data_->result_arr_cpy_length1 = 0;
		memset (&_data_->_tmp86_, 0, sizeof (UnityProtocolActivationReplyRaw));
		_data_->_state_ = 2;
		unity_internal_scope_tracker_activate_wrapper (_data_->_tmp82_, _data_->_tmp83_, _data_->_tmp84_, _data_->_tmp85_, _data_->_tmp85__length1, _data_->action_type, _data_->hints, _data_->cancellable, unity_internal_aggregator_scope_impl_activate_ready, _data_);
		return FALSE;
		_state_2:
		unity_internal_scope_tracker_activate_wrapper_finish (_data_->_tmp82_, _data_->_res_, &_data_->_tmp86_, &_data_->_inner_error_);
		_data_->_tmp81_ = _data_->_tmp86_;
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			if (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR) {
				goto __catch27_unity_protocol_scope_error;
			}
			goto __catch27_g_error;
		}
		_data_->_tmp87_ = _data_->_tmp81_;
		memset (&_data_->_tmp81_, 0, sizeof (UnityProtocolActivationReplyRaw));
		_data_->result = _data_->_tmp87_;
		unity_protocol_activation_reply_raw_destroy (&_data_->_tmp81_);
		_g_object_unref0 (_data_->response);
		_g_object_unref0 (_data_->activation_obj);
		_data_->result_arr_cpy = (_vala_array_free (_data_->result_arr_cpy, _data_->result_arr_cpy_length1, (GDestroyNotify) g_variant_unref), NULL);
		unity_scope_result_destroy (&_data_->scope_result);
		_g_variant_unref0 (_data_->metadata);
		_g_free0 (_data_->scope_id);
		_g_object_unref0 (_data_->channel);
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
		if (_data_->_state_ != 0) {
			while (_data_->_task_complete_ != TRUE) {
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
			}
		}
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	goto __finally27;
	__catch27_unity_protocol_scope_error:
	{
		_data_->scope_error = _data_->_inner_error_;
		_data_->_inner_error_ = NULL;
		_data_->_tmp88_ = _data_->scope_error;
		_data_->_tmp89_ = _g_error_copy0 (_data_->_tmp88_);
		_data_->_inner_error_ = _data_->_tmp89_;
		_g_error_free0 (_data_->scope_error);
		goto __finally27;
	}
	goto __finally27;
	__catch27_g_error:
	{
		_data_->err = _data_->_inner_error_;
		_data_->_inner_error_ = NULL;
		_data_->_tmp90_ = _data_->err;
		_data_->_tmp91_ = _data_->_tmp90_->message;
		_data_->_tmp92_ = g_strdup_printf ("Unhandled error: %s", _data_->_tmp91_);
		_data_->_tmp93_ = _data_->_tmp92_;
		_data_->_tmp94_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, _data_->_tmp93_);
		_data_->_tmp95_ = _data_->_tmp94_;
		_g_free0 (_data_->_tmp93_);
		_data_->_inner_error_ = _data_->_tmp95_;
		_g_error_free0 (_data_->err);
		goto __finally27;
	}
	__finally27:
	if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		_g_object_unref0 (_data_->response);
		_g_object_unref0 (_data_->activation_obj);
		_data_->result_arr_cpy = (_vala_array_free (_data_->result_arr_cpy, _data_->result_arr_cpy_length1, (GDestroyNotify) g_variant_unref), NULL);
		unity_scope_result_destroy (&_data_->scope_result);
		_g_variant_unref0 (_data_->metadata);
		_g_free0 (_data_->scope_id);
		_g_object_unref0 (_data_->channel);
		g_object_unref (_data_->_async_result);
		return FALSE;
	} else {
		_g_object_unref0 (_data_->response);
		_g_object_unref0 (_data_->activation_obj);
		_data_->result_arr_cpy = (_vala_array_free (_data_->result_arr_cpy, _data_->result_arr_cpy_length1, (GDestroyNotify) g_variant_unref), NULL);
		unity_scope_result_destroy (&_data_->scope_result);
		_g_variant_unref0 (_data_->metadata);
		_g_free0 (_data_->scope_id);
		_g_object_unref0 (_data_->channel);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
		g_clear_error (&_data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_g_object_unref0 (_data_->response);
	_g_object_unref0 (_data_->activation_obj);
	_data_->result_arr_cpy = (_vala_array_free (_data_->result_arr_cpy, _data_->result_arr_cpy_length1, (GDestroyNotify) g_variant_unref), NULL);
	unity_scope_result_destroy (&_data_->scope_result);
	_g_variant_unref0 (_data_->metadata);
	_g_free0 (_data_->scope_id);
	_g_object_unref0 (_data_->channel);
}


static void
unity_internal_aggregator_scope_impl_real_search_data_free (gpointer _data)
{
	UnityInternalAggregatorScopeImplSearchData* _data_;
	_data_ = _data;
	_g_free0 (_data_->search_string);
	_g_hash_table_unref0 (_data_->hints);
	_g_object_unref0 (_data_->cancellable);
	_g_hash_table_unref0 (_data_->result);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalAggregatorScopeImplSearchData, _data_);
}


static void
unity_internal_aggregator_scope_impl_real_search_async_ready_wrapper (GObject *source_object,
                                                                      GAsyncResult *res,
                                                                      void *user_data)
{
	UnityInternalAggregatorScopeImplSearchData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_internal_aggregator_scope_impl_real_search (UnityProtocolScopeService* base,
                                                  const gchar* channel_id,
                                                  const gchar* search_string,
                                                  GHashTable* hints,
                                                  GCancellable* cancellable,
                                                  GAsyncReadyCallback _callback_,
                                                  gpointer _user_data_)
{
	UnityInternalAggregatorScopeImpl * self;
	UnityInternalAggregatorScopeImplSearchData* _data_;
	UnityInternalAggregatorScopeImpl* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	GHashTable* _tmp3_;
	GCancellable* _tmp4_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_data_ = g_slice_new0 (UnityInternalAggregatorScopeImplSearchData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_internal_aggregator_scope_impl_real_search_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_aggregator_scope_impl_real_search_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_tmp2_ = g_strdup (search_string);
	_g_free0 (_data_->search_string);
	_data_->search_string = _tmp2_;
	_tmp3_ = _g_hash_table_ref0 (hints);
	_g_hash_table_unref0 (_data_->hints);
	_data_->hints = _tmp3_;
	_tmp4_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp4_;
	unity_internal_aggregator_scope_impl_real_search_co (_data_);
}


static GHashTable*
unity_internal_aggregator_scope_impl_real_search_finish (UnityProtocolScopeService* base,
                                                         GAsyncResult* _res_,
                                                         GError** error)
{
	GHashTable* result;
	UnityInternalAggregatorScopeImplSearchData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static Block21Data*
block21_data_ref (Block21Data* _data21_)
{
	g_atomic_int_inc (&_data21_->_ref_count_);
	return _data21_;
}


static void
block21_data_unref (void * _userdata_)
{
	Block21Data* _data21_;
	_data21_ = (Block21Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data21_->_ref_count_)) {
		UnityInternalAggregatorScopeImpl* self;
		self = _data21_->self;
		_g_object_unref0 (_data21_->aggsearch);
		_g_object_unref0 (_data21_->result_set);
		_g_object_unref0 (_data21_->search_cancellable);
		_g_free0 (_data21_->channel_id);
		_g_object_unref0 (self);
		g_slice_free (Block21Data, _data21_);
	}
}


static gchar**
_variant_get37 (GVariant* value,
                int* result_length1)
{
	gchar** _tmp24_;
	int _tmp24__length;
	int _tmp24__size;
	int _tmp24__length1;
	GVariantIter _tmp25_;
	GVariant* _tmp26_;
	_tmp24_ = g_new (gchar*, 5);
	_tmp24__length = 0;
	_tmp24__size = 4;
	_tmp24__length1 = 0;
	g_variant_iter_init (&_tmp25_, value);
	for (; (_tmp26_ = g_variant_iter_next_value (&_tmp25_)) != NULL; _tmp24__length1++) {
		if (_tmp24__size == _tmp24__length) {
			_tmp24__size = 2 * _tmp24__size;
			_tmp24_ = g_renew (gchar*, _tmp24_, _tmp24__size + 1);
		}
		_tmp24_[_tmp24__length++] = g_variant_dup_string (_tmp26_, NULL);
		g_variant_unref (_tmp26_);
	}
	*result_length1 = _tmp24__length1;
	_tmp24_[_tmp24__length] = NULL;
	return _tmp24_;
}


static gchar*
_vala_g_strjoinv (const gchar* separator,
                  gchar** str_array,
                  int str_array_length1)
{
	gchar* result = NULL;
	gboolean _tmp0_ = FALSE;
	if (separator == NULL) {
		separator = "";
	}
	if (str_array != NULL) {
		gboolean _tmp1_ = FALSE;
		if (str_array_length1 > 0) {
			_tmp1_ = TRUE;
		} else {
			gboolean _tmp2_ = FALSE;
			if (str_array_length1 == -1) {
				const gchar* _tmp3_;
				_tmp3_ = str_array[0];
				_tmp2_ = _tmp3_ != NULL;
			} else {
				_tmp2_ = FALSE;
			}
			_tmp1_ = _tmp2_;
		}
		_tmp0_ = _tmp1_;
	} else {
		_tmp0_ = FALSE;
	}
	if (_tmp0_) {
		gint i = 0;
		gsize len = 0UL;
		gint _tmp20_;
		gint _tmp22_;
		gint _tmp23_;
		gsize _tmp24_;
		gint _tmp25_;
		gint _tmp26_;
		gint _tmp27_;
		const gchar* res = NULL;
		gsize _tmp28_;
		void* _tmp29_;
		void* ptr = NULL;
		const gchar* _tmp30_;
		const gchar* _tmp31_;
		void* _tmp32_;
		const gchar* _tmp45_;
		len = (gsize) 1;
		{
			gboolean _tmp4_ = FALSE;
			i = 0;
			_tmp4_ = TRUE;
			while (TRUE) {
				gboolean _tmp6_ = FALSE;
				gboolean _tmp7_ = FALSE;
				gint _tmp12_ = 0;
				gint _tmp13_;
				const gchar* _tmp14_;
				gsize _tmp19_;
				if (!_tmp4_) {
					gint _tmp5_;
					_tmp5_ = i;
					i = _tmp5_ + 1;
				}
				_tmp4_ = FALSE;
				if (str_array_length1 != -1) {
					gint _tmp8_;
					_tmp8_ = i;
					_tmp7_ = _tmp8_ < str_array_length1;
				} else {
					_tmp7_ = FALSE;
				}
				if (_tmp7_) {
					_tmp6_ = TRUE;
				} else {
					gboolean _tmp9_ = FALSE;
					if (str_array_length1 == -1) {
						gint _tmp10_;
						const gchar* _tmp11_;
						_tmp10_ = i;
						_tmp11_ = str_array[_tmp10_];
						_tmp9_ = _tmp11_ != NULL;
					} else {
						_tmp9_ = FALSE;
					}
					_tmp6_ = _tmp9_;
				}
				if (!_tmp6_) {
					break;
				}
				_tmp13_ = i;
				_tmp14_ = str_array[_tmp13_];
				if (_tmp14_ != NULL) {
					gint _tmp15_;
					const gchar* _tmp16_;
					gint _tmp17_;
					gint _tmp18_;
					_tmp15_ = i;
					_tmp16_ = str_array[_tmp15_];
					_tmp17_ = strlen ((const gchar*) _tmp16_);
					_tmp18_ = _tmp17_;
					_tmp12_ = _tmp18_;
				} else {
					_tmp12_ = 0;
				}
				_tmp19_ = len;
				len = _tmp19_ + _tmp12_;
			}
		}
		_tmp20_ = i;
		if (_tmp20_ == 0) {
			gchar* _tmp21_;
			_tmp21_ = g_strdup ("");
			result = _tmp21_;
			return result;
		}
		_tmp22_ = i;
		str_array_length1 = _tmp22_;
		_tmp23_ = str_array_length1;
		_tmp24_ = len;
		_tmp25_ = strlen ((const gchar*) separator);
		_tmp26_ = _tmp25_;
		_tmp27_ = i;
		len = _tmp24_ + (_tmp26_ * (_tmp27_ - 1));
		_tmp28_ = len;
		_tmp29_ = g_malloc (_tmp28_);
		res = _tmp29_;
		_tmp30_ = res;
		_tmp31_ = str_array[0];
		_tmp32_ = g_stpcpy ((void*) _tmp30_, (const gchar*) _tmp31_);
		ptr = _tmp32_;
		{
			gboolean _tmp33_ = FALSE;
			i = 1;
			_tmp33_ = TRUE;
			while (TRUE) {
				gint _tmp35_;
				void* _tmp36_;
				void* _tmp37_;
				const gchar* _tmp38_ = NULL;
				gint _tmp39_;
				const gchar* _tmp40_;
				void* _tmp43_;
				void* _tmp44_;
				if (!_tmp33_) {
					gint _tmp34_;
					_tmp34_ = i;
					i = _tmp34_ + 1;
				}
				_tmp33_ = FALSE;
				_tmp35_ = i;
				if (!(_tmp35_ < str_array_length1)) {
					break;
				}
				_tmp36_ = ptr;
				_tmp37_ = g_stpcpy (_tmp36_, (const gchar*) separator);
				ptr = _tmp37_;
				_tmp39_ = i;
				_tmp40_ = str_array[_tmp39_];
				if (_tmp40_ != NULL) {
					gint _tmp41_;
					const gchar* _tmp42_;
					_tmp41_ = i;
					_tmp42_ = str_array[_tmp41_];
					_tmp38_ = (const gchar*) _tmp42_;
				} else {
					_tmp38_ = "";
				}
				_tmp43_ = ptr;
				_tmp44_ = g_stpcpy (_tmp43_, _tmp38_);
				ptr = _tmp44_;
			}
		}
		_tmp45_ = res;
		res = NULL;
		result = (gchar*) _tmp45_;
		return result;
	} else {
		gchar* _tmp46_;
		_tmp46_ = g_strdup ("");
		result = _tmp46_;
		return result;
	}
}


static void
unity_internal_aggregator_scope_impl_search_ready (GObject* source_object,
                                                   GAsyncResult* _res_,
                                                   gpointer _user_data_)
{
	UnityInternalAggregatorScopeImplSearchData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_internal_aggregator_scope_impl_real_search_co (_data_);
}


static gboolean
___lambda30_ (Block21Data* _data21_)
{
	UnityInternalAggregatorScopeImpl* self;
	gboolean result = FALSE;
	UnityCancellable* _tmp0_;
	self = _data21_->self;
	_tmp0_ = _data21_->search_cancellable;
	if (!unity_cancellable_is_cancelled (_tmp0_)) {
		UnityInternalDeeResultSet* _tmp1_;
		_tmp1_ = _data21_->result_set;
		unity_result_set_flush ((UnityResultSet*) _tmp1_);
	}
	_data21_->timer_src_id = (guint) 0;
	result = FALSE;
	return result;
}


static gboolean
____lambda30__gsource_func (gpointer self)
{
	gboolean result;
	result = ___lambda30_ (self);
	return result;
}


static void
__lambda29_ (Block21Data* _data21_,
             DeeModel* src_model,
             const gchar* scope_id)
{
	UnityInternalAggregatorScopeImpl* self;
	UnityCancellable* _tmp0_;
	gboolean _tmp1_ = FALSE;
	UnityAggregatorScope* _tmp2_;
	gboolean _tmp3_;
	gboolean _tmp4_;
	self = _data21_->self;
	g_return_if_fail (src_model != NULL);
	_tmp0_ = _data21_->search_cancellable;
	if (unity_cancellable_is_cancelled (_tmp0_)) {
		return;
	}
	_tmp2_ = self->priv->_owner;
	_tmp3_ = unity_aggregator_scope_get_automatic_flushing (_tmp2_);
	_tmp4_ = _tmp3_;
	if (_tmp4_) {
		guint _tmp5_;
		_tmp5_ = _data21_->timer_src_id;
		_tmp1_ = _tmp5_ == ((guint) 0);
	} else {
		_tmp1_ = FALSE;
	}
	if (_tmp1_) {
		_data21_->timer_src_id = g_timeout_add_full (G_PRIORITY_DEFAULT_IDLE, (guint) UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_DEFAULT_TIMEOUT_INTERVAL_MS, ____lambda30__gsource_func, block21_data_ref (_data21_), block21_data_unref);
	}
	if (scope_id == NULL) {
		g_warning ("unity-aggregator-scope-private.vala:1135: Unknown origin scope id for " \
"model [%p]", src_model);
	} else {
		UnityAggregatedScopeSearch* _tmp6_;
		_tmp6_ = _data21_->aggsearch;
		g_signal_emit_by_name (_tmp6_, "transaction-complete", scope_id);
	}
}


static void
___lambda29__unity_internal_results_synchronizer_transaction_complete (UnityInternalResultsSynchronizer* _sender,
                                                                       DeeModel* model,
                                                                       const gchar* scope_id,
                                                                       gpointer self)
{
	__lambda29_ (self, model, scope_id);
}


static void
__lambda31_ (Block21Data* _data21_,
             guint32* indices,
             int indices_length1)
{
	UnityInternalAggregatorScopeImpl* self;
	DeeSerializableModel* _tmp0_;
	DeeSerializableModel* _tmp1_;
	self = _data21_->self;
	_tmp0_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
	_tmp1_ = _tmp0_;
	if (((guint) indices_length1) != dee_model_get_n_rows ((DeeModel*) _tmp1_)) {
		DeeSerializableModel* _tmp2_;
		DeeSerializableModel* _tmp3_;
		_tmp2_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
		_tmp3_ = _tmp2_;
		g_warning ("unity-aggregator-scope-private.vala:1158: Invalid number of category i" \
"ndices, expected %u, got %u", dee_model_get_n_rows ((DeeModel*) _tmp3_), (guint) indices_length1);
	} else {
		g_signal_emit_by_name ((UnityProtocolScopeService*) self, "category-order-changed", _data21_->channel_id, indices, indices_length1);
	}
}


static void
___lambda31__unity_aggregated_scope_search_category_order_changed (UnityAggregatedScopeSearch* _sender,
                                                                   guint32* category_indices,
                                                                   int category_indices_length1,
                                                                   gpointer self)
{
	__lambda31_ (self, category_indices, category_indices_length1);
}


static gboolean
_unity_internal_aggregator_scope_impl_real_search_co_gsource_func (gpointer self)
{
	gboolean result;
	result = unity_internal_aggregator_scope_impl_real_search_co (self);
	return result;
}


static void
__lambda33_ (Block21Data* _data21_)
{
	UnityInternalAggregatorScopeImpl* self;
	gboolean _tmp0_;
	self = _data21_->self;
	_tmp0_ = unity_internal_aggregator_scope_impl_measure_requests;
	if (_tmp0_) {
		_data21_->search_end_time = g_get_monotonic_time ();
	}
	g_idle_add_full (G_PRIORITY_DEFAULT, _unity_internal_aggregator_scope_impl_real_search_co_gsource_func, _data21_->_async_data_, NULL);
}


static void
___lambda33__unity_scope_search_base_callback (UnityScopeSearchBase* instance,
                                               gpointer self)
{
	__lambda33_ (self);
}


static gboolean
__lambda35_ (Block21Data* _data21_)
{
	UnityInternalAggregatorScopeImpl* self;
	gboolean result = FALSE;
	self = _data21_->self;
	_data21_->canc_src_id = (guint) 0;
	_data21_->was_cancelled = TRUE;
	unity_internal_aggregator_scope_impl_real_search_co (_data21_->_async_data_);
	result = FALSE;
	return result;
}


static gboolean
___lambda35__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda35_ (self);
	return result;
}


static void
___lambda34_ (Block21Data* _data21_)
{
	UnityInternalAggregatorScopeImpl* self;
	self = _data21_->self;
	_data21_->canc_src_id = g_idle_add_full (G_PRIORITY_DEFAULT, ___lambda35__gsource_func, block21_data_ref (_data21_), block21_data_unref);
}


static void
____lambda34__gfunc (gconstpointer data,
                     gpointer self)
{
	___lambda34_ (self);
}


static gboolean
unity_internal_aggregator_scope_impl_real_search_co (UnityInternalAggregatorScopeImplSearchData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		case 2:
		goto _state_2;
		case 3:
		goto _state_3;
		case 4:
		goto _state_4;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_data21_ = g_slice_new0 (Block21Data);
	_data_->_data21_->_ref_count_ = 1;
	_data_->_data21_->self = g_object_ref (_data_->self);
	_g_free0 (_data_->_data21_->channel_id);
	_data_->_data21_->channel_id = _data_->channel_id;
	_data_->_data21_->_async_data_ = _data_;
	_data_->_tmp0_ = unity_internal_aggregator_scope_impl_get_channel_by_id (_data_->self, _data_->_data21_->channel_id, &_data_->_inner_error_);
	_data_->channel = _data_->_tmp0_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			block21_data_unref (_data_->_data21_);
			_data_->_data21_ = NULL;
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			block21_data_unref (_data_->_data21_);
			_data_->_data21_ = NULL;
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->_tmp1_ = g_str_hash;
	_data_->_tmp2_ = g_str_equal;
	_data_->_tmp3_ = g_hash_table_new_full (_data_->_tmp1_, _data_->_tmp2_, _g_free0_, _g_variant_unref0_);
	_data_->response = _data_->_tmp3_;
	_data_->_tmp4_ = _data_->self->priv->_scopes;
	_data_->_tmp5_ = unity_internal_scope_tracker_get_synchronizer (_data_->_tmp4_, _data_->_data21_->channel_id);
	_data_->_tmp6_ = _g_object_ref0 (_data_->_tmp5_);
	_data_->synchronizer = _data_->_tmp6_;
	_data_->_tmp7_ = _data_->synchronizer;
	if (_data_->_tmp7_ == NULL) {
		_data_->_tmp8_ = g_strdup_printf ("No synchronizer registered for channel %s", _data_->_data21_->channel_id);
		_data_->msg = _data_->_tmp8_;
		_data_->_tmp9_ = _data_->msg;
		g_warning ("unity-aggregator-scope-private.vala:1033: %s", _data_->_tmp9_);
		_data_->_tmp10_ = _data_->msg;
		_data_->_tmp11_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, _data_->_tmp10_);
		_data_->_inner_error_ = _data_->_tmp11_;
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			_g_free0 (_data_->msg);
			_g_object_unref0 (_data_->synchronizer);
			_g_hash_table_unref0 (_data_->response);
			_g_object_unref0 (_data_->channel);
			block21_data_unref (_data_->_data21_);
			_data_->_data21_ = NULL;
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_g_free0 (_data_->msg);
			_g_object_unref0 (_data_->synchronizer);
			_g_hash_table_unref0 (_data_->response);
			_g_object_unref0 (_data_->channel);
			block21_data_unref (_data_->_data21_);
			_data_->_data21_ = NULL;
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
		_g_free0 (_data_->msg);
	}
	_data_->_tmp12_ = g_hash_table_lookup (_data_->hints, UNITY_INTERNAL_SEARCH_FILTER_ROW_HINT);
	_data_->filter_row_variant = (GVariant*) _data_->_tmp12_;
	_data_->_tmp13_ = _data_->filter_row_variant;
	if (_data_->_tmp13_ != NULL) {
		_data_->_tmp14_ = _data_->channel;
		_data_->_tmp15_ = _data_->filter_row_variant;
		unity_internal_aggregator_scope_impl_update_filter_state (_data_->self, _data_->_tmp14_, _data_->_tmp15_, &_data_->_inner_error_);
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
				_g_object_unref0 (_data_->synchronizer);
				_g_hash_table_unref0 (_data_->response);
				_g_object_unref0 (_data_->channel);
				block21_data_unref (_data_->_data21_);
				_data_->_data21_ = NULL;
				g_object_unref (_data_->_async_result);
				return FALSE;
			} else {
				_g_object_unref0 (_data_->synchronizer);
				_g_hash_table_unref0 (_data_->response);
				_g_object_unref0 (_data_->channel);
				block21_data_unref (_data_->_data21_);
				_data_->_data21_ = NULL;
				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
				g_clear_error (&_data_->_inner_error_);
				g_object_unref (_data_->_async_result);
				return FALSE;
			}
		}
	}
	_data_->_tmp16_ = g_hash_table_lookup (_data_->hints, UNITY_INTERNAL_SEARCH_SUBSCOPES_HINT);
	_data_->subscopes_filter_variant = (GVariant*) _data_->_tmp16_;
	_data_->subscope_filter_tag = (guint) 0;
	_data_->_tmp17_ = g_new0 (gchar*, 0 + 1);
	_data_->enabled_subscopes = _data_->_tmp17_;
	_data_->enabled_subscopes_length1 = 0;
	_data_->_enabled_subscopes_size_ = _data_->enabled_subscopes_length1;
	_data_->_tmp19_ = _data_->subscopes_filter_variant;
	if (_data_->_tmp19_ != NULL) {
		_data_->_tmp20_ = _data_->subscopes_filter_variant;
		_data_->_tmp21_ = g_variant_get_type_string (_data_->_tmp20_);
		_data_->_tmp18_ = g_strcmp0 (_data_->_tmp21_, "as") == 0;
	} else {
		_data_->_tmp18_ = FALSE;
	}
	if (_data_->_tmp18_) {
		_data_->_tmp22_ = _data_->subscopes_filter_variant;
		_data_->_tmp23_ = NULL;
		_data_->_tmp23__length1 = 0;
		_data_->_tmp23_ = _variant_get37 (_data_->_tmp22_, &_data_->_tmp23__length1);
		_data_->enabled_subscopes = (_vala_array_free (_data_->enabled_subscopes, _data_->enabled_subscopes_length1, (GDestroyNotify) g_free), NULL);
		_data_->enabled_subscopes = _data_->_tmp23_;
		_data_->enabled_subscopes_length1 = _data_->_tmp23__length1;
		_data_->_enabled_subscopes_size_ = _data_->enabled_subscopes_length1;
		_data_->_tmp27_ = _data_->enabled_subscopes;
		_data_->_tmp27__length1 = _data_->enabled_subscopes_length1;
		_data_->_tmp28_ = _vala_g_strjoinv (";", _data_->_tmp27_, _data_->_tmp27__length1);
		_data_->_tmp29_ = _data_->_tmp28_;
		_data_->subscope_filter_tag = g_str_hash (_data_->_tmp29_);
		_g_free0 (_data_->_tmp29_);
	}
	_data_->_tmp30_ = _data_->filter_row_variant;
	_data_->invalidate_last_search = _data_->_tmp30_ != NULL;
	_data_->_tmp32_ = _data_->invalidate_last_search;
	if (_data_->_tmp32_) {
		_data_->_tmp33_ = _data_->channel;
		_data_->_tmp34_ = _data_->_tmp33_->last_search;
		_data_->_tmp31_ = _data_->_tmp34_ != NULL;
	} else {
		_data_->_tmp31_ = FALSE;
	}
	if (_data_->_tmp31_) {
		_data_->_tmp35_ = _data_->channel;
		_data_->_tmp36_ = _data_->_tmp35_->last_search;
		_data_->_tmp37_ = _data_->_tmp36_->search_context;
		_data_->_tmp38_ = (*_data_->_tmp37_).cancellable;
		unity_cancellable_cancel (_data_->_tmp38_);
		_data_->_tmp39_ = _data_->channel;
		_g_object_unref0 (_data_->_tmp39_->last_search);
		_data_->_tmp39_->last_search = NULL;
	}
	_data_->_tmp40_ = _data_->channel;
	_data_->_tmp41_ = _data_->_tmp40_->last_search;
	_data_->_tmp42_ = _g_object_ref0 (_data_->_tmp41_);
	_data_->last_search = _data_->_tmp42_;
	_data_->_tmp43_ = _data_->last_search;
	if (_data_->_tmp43_ != NULL) {
		_data_->_tmp45_ = _data_->last_search;
		_data_->_tmp46_ = _data_->_tmp45_->search_context;
		_data_->_tmp47_ = (*_data_->_tmp46_).search_query;
		if (g_strcmp0 (_data_->_tmp47_, _data_->search_string) == 0) {
			_data_->_tmp48_ = _data_->channel;
			_data_->_tmp49_ = _data_->_tmp48_->last_search_tag;
			_data_->_tmp50_ = _data_->subscope_filter_tag;
			_data_->_tmp44_ = _data_->_tmp49_ == _data_->_tmp50_;
		} else {
			_data_->_tmp44_ = FALSE;
		}
		if (_data_->_tmp44_) {
			_data_->_tmp51_ = _data_->channel;
			if (unity_internal_scope_channel_is_search_running (_data_->_tmp51_)) {
				_data_->_tmp52_ = _data_->channel;
				_data_->_state_ = 1;
				unity_internal_scope_channel_wait_for_search (_data_->_tmp52_, unity_internal_aggregator_scope_impl_search_ready, _data_);
				return FALSE;
				_state_1:
				unity_internal_scope_channel_wait_for_search_finish (_data_->_tmp52_, _data_->_res_);
			}
			_data_->_tmp53_ = _data_->last_search;
			_data_->_tmp54_ = _data_->_tmp53_->search_context;
			_data_->_tmp55_ = (*_data_->_tmp54_).cancellable;
			if (unity_cancellable_is_cancelled (_data_->_tmp55_)) {
				_data_->_tmp56_ = g_error_new (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_SEARCH_CANCELLED, "Search '%s' was cancelled", _data_->search_string);
				_data_->_inner_error_ = _data_->_tmp56_;
				if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
					g_task_return_error (_data_->_async_result, _data_->_inner_error_);
					_g_object_unref0 (_data_->last_search);
					_data_->enabled_subscopes = (_vala_array_free (_data_->enabled_subscopes, _data_->enabled_subscopes_length1, (GDestroyNotify) g_free), NULL);
					_g_object_unref0 (_data_->synchronizer);
					_g_hash_table_unref0 (_data_->response);
					_g_object_unref0 (_data_->channel);
					block21_data_unref (_data_->_data21_);
					_data_->_data21_ = NULL;
					g_object_unref (_data_->_async_result);
					return FALSE;
				} else {
					_g_object_unref0 (_data_->last_search);
					_data_->enabled_subscopes = (_vala_array_free (_data_->enabled_subscopes, _data_->enabled_subscopes_length1, (GDestroyNotify) g_free), NULL);
					_g_object_unref0 (_data_->synchronizer);
					_g_hash_table_unref0 (_data_->response);
					_g_object_unref0 (_data_->channel);
					block21_data_unref (_data_->_data21_);
					_data_->_data21_ = NULL;
					g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
					g_clear_error (&_data_->_inner_error_);
					g_object_unref (_data_->_async_result);
					return FALSE;
				}
			}
			_data_->_tmp57_ = _data_->last_search;
			_data_->_tmp58_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp57_, UNITY_TYPE_AGGREGATED_SCOPE_SEARCH) ? ((UnityAggregatedScopeSearch*) _data_->_tmp57_) : NULL);
			_data_->last_agg_search = _data_->_tmp58_;
			_data_->_tmp59_ = _data_->last_agg_search;
			_data_->_tmp60_ = unity_deprecated_scope_search_get_reply_hints ((UnityDeprecatedScopeSearch*) _data_->_tmp59_);
			_data_->last_hints = _data_->_tmp60_;
			_data_->_tmp61_ = _data_->last_hints;
			if (_data_->_tmp61_ != NULL) {
				_data_->_tmp62_ = _data_->last_hints;
				g_hash_table_iter_init (&_data_->hints_iter, _data_->_tmp62_);
				while (TRUE) {
					_data_->_tmp63_ = NULL;
					_data_->_tmp64_ = NULL;
					_data_->_tmp65_ = g_hash_table_iter_next (&_data_->hints_iter, (gpointer*) (&_data_->_tmp63_), (gpointer*) (&_data_->_tmp64_));
					_data_->key = _data_->_tmp63_;
					_data_->variant = _data_->_tmp64_;
					if (!_data_->_tmp65_) {
						break;
					}
					_data_->_tmp66_ = _data_->response;
					_data_->_tmp67_ = _data_->key;
					_data_->_tmp68_ = g_strdup (_data_->_tmp67_);
					_data_->_tmp69_ = _data_->variant;
					_data_->_tmp70_ = _g_variant_ref0 (_data_->_tmp69_);
					g_hash_table_insert (_data_->_tmp66_, _data_->_tmp68_, _data_->_tmp70_);
				}
			}
			_data_->_tmp71_ = _data_->response;
			_data_->_tmp72_ = g_strdup (UNITY_INTERNAL_SEARCH_SEQNUM_HINT);
			_data_->_tmp73_ = _data_->channel;
			_data_->_tmp74_ = g_variant_new_uint64 (unity_internal_scope_channel_get_last_seqnum (_data_->_tmp73_));
			g_variant_ref_sink (_data_->_tmp74_);
			g_hash_table_insert (_data_->_tmp71_, _data_->_tmp72_, _data_->_tmp74_);
			_data_->result = _data_->response;
			_g_hash_table_unref0 (_data_->last_hints);
			_g_object_unref0 (_data_->last_agg_search);
			_g_object_unref0 (_data_->last_search);
			_data_->enabled_subscopes = (_vala_array_free (_data_->enabled_subscopes, _data_->enabled_subscopes_length1, (GDestroyNotify) g_free), NULL);
			_g_object_unref0 (_data_->synchronizer);
			_g_object_unref0 (_data_->channel);
			block21_data_unref (_data_->_data21_);
			_data_->_data21_ = NULL;
			g_task_return_pointer (_data_->_async_result, _data_, NULL);
			if (_data_->_state_ != 0) {
				while (_data_->_task_complete_ != TRUE) {
					g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
				}
			}
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_data_->_tmp75_ = _data_->last_search;
			_data_->_tmp76_ = _data_->_tmp75_->search_context;
			_data_->_tmp77_ = (*_data_->_tmp76_).cancellable;
			unity_cancellable_cancel (_data_->_tmp77_);
		}
	}
	_data_->_tmp78_ = _data_->synchronizer;
	unity_internal_results_synchronizer_clear (_data_->_tmp78_);
	_data_->_tmp79_ = _data_->synchronizer;
	unity_internal_results_synchronizer_disable_all_providers (_data_->_tmp79_);
	_data_->_tmp80_ = unity_cancellable_create ();
	_data_->_data21_->search_cancellable = _data_->_tmp80_;
	_data_->_tmp81_ = _data_->channel;
	_data_->_tmp82_ = _data_->_tmp81_->backend_model;
	_data_->_tmp83_ = unity_internal_dee_result_set_new_with_model (_data_->_tmp82_);
	_data_->_data21_->result_set = _data_->_tmp83_;
	_data_->_tmp84_ = _data_->_data21_->result_set;
	((UnityResultSet*) _data_->_tmp84_)->ttl = -1;
	_data_->_tmp85_ = _data_->_data21_->result_set;
	_data_->_tmp86_ = _data_->channel;
	_data_->_tmp87_ = _data_->_tmp86_->transfer_model;
	unity_internal_dee_result_set_set_flush_model (_data_->_tmp85_, (DeeSerializableModel*) _data_->_tmp87_);
	_data_->_data21_->aggsearch = NULL;
	_data_->_data21_->timer_src_id = (guint) 0;
	_data_->_tmp88_ = _data_->synchronizer;
	_data_->_tmp89_ = g_signal_connect_data (_data_->_tmp88_, "transaction-complete", (GCallback) ___lambda29__unity_internal_results_synchronizer_transaction_complete, block21_data_ref (_data_->_data21_), (GClosureNotify) block21_data_unref, 0);
	_data_->txn_sig_id = _data_->_tmp89_;
	memset (&_data_->search_context, 0, sizeof (UnitySearchContext));
	_data_->_tmp90_ = g_strdup (_data_->search_string);
	_g_free0 (_data_->search_context.search_query);
	_data_->search_context.search_query = _data_->_tmp90_;
	_data_->_tmp91_ = _data_->channel;
	_data_->search_context.search_type = unity_internal_scope_channel_get_search_type (_data_->_tmp91_);
	_data_->_tmp92_ = _data_->channel;
	_data_->_tmp93_ = _data_->_tmp92_->filters;
	_data_->_tmp94_ = _g_object_ref0 (_data_->_tmp93_);
	_g_object_unref0 (_data_->search_context.filter_state);
	_data_->search_context.filter_state = _data_->_tmp94_;
	_data_->_tmp95_ = unity_search_metadata_create (_data_->hints);
	_g_object_unref0 (_data_->search_context.search_metadata);
	_data_->search_context.search_metadata = _data_->_tmp95_;
	_data_->_tmp96_ = _data_->_data21_->result_set;
	_data_->_tmp97_ = _g_object_ref0 ((UnityResultSet*) _data_->_tmp96_);
	_g_object_unref0 (_data_->search_context.result_set);
	_data_->search_context.result_set = _data_->_tmp97_;
	_data_->_tmp98_ = _data_->_data21_->search_cancellable;
	_data_->_tmp99_ = _g_object_ref0 (_data_->_tmp98_);
	_g_object_unref0 (_data_->search_context.cancellable);
	_data_->search_context.cancellable = _data_->_tmp99_;
	_data_->_tmp100_ = _data_->self->priv->_owner;
	_data_->_tmp101_ = _data_->channel;
	_data_->_tmp102_ = _data_->_tmp101_->id;
	_data_->_tmp103_ = _data_->channel;
	_data_->_tmp104_ = _data_->_tmp103_->backend_model;
	_data_->_tmp105_ = unity_aggregated_scope_search_new (_data_->_tmp100_, _data_->_tmp102_, _data_->hints, _data_->_tmp104_);
	_g_object_unref0 (_data_->_data21_->aggsearch);
	_data_->_data21_->aggsearch = _data_->_tmp105_;
	_data_->_tmp106_ = _data_->_data21_->aggsearch;
	_data_->_tmp107_ = _data_->search_context;
	unity_scope_search_base_set_search_context ((UnityScopeSearchBase*) _data_->_tmp106_, &_data_->_tmp107_);
	_data_->_tmp108_ = _data_->_data21_->aggsearch;
	_data_->_tmp109_ = g_signal_connect_data (_data_->_tmp108_, "category-order-changed", (GCallback) ___lambda31__unity_aggregated_scope_search_category_order_changed, block21_data_ref (_data_->_data21_), (GClosureNotify) block21_data_unref, 0);
	_data_->sig_id = _data_->_tmp109_;
	_data_->_tmp110_ = _data_->channel;
	_data_->_tmp111_ = _data_->_data21_->aggsearch;
	_data_->_tmp112_ = _g_object_ref0 ((UnityScopeSearchBase*) _data_->_tmp111_);
	_g_object_unref0 (_data_->_tmp110_->last_search);
	_data_->_tmp110_->last_search = _data_->_tmp112_;
	_data_->_tmp113_ = _data_->channel;
	_data_->_tmp114_ = _data_->subscope_filter_tag;
	_data_->_tmp113_->last_search_tag = _data_->_tmp114_;
	_data_->_tmp115_ = _data_->channel;
	if (unity_internal_scope_channel_is_search_running (_data_->_tmp115_)) {
		_data_->_tmp116_ = _data_->channel;
		_data_->_state_ = 2;
		unity_internal_scope_channel_wait_for_search (_data_->_tmp116_, unity_internal_aggregator_scope_impl_search_ready, _data_);
		return FALSE;
		_state_2:
		unity_internal_scope_channel_wait_for_search_finish (_data_->_tmp116_, _data_->_res_);
	}
	_data_->_tmp117_ = _data_->_data21_->search_cancellable;
	if (unity_cancellable_is_cancelled (_data_->_tmp117_)) {
		_data_->_tmp118_ = _data_->_data21_->aggsearch;
		_data_->_tmp119_ = _data_->sig_id;
		g_signal_handler_disconnect (_data_->_tmp118_, _data_->_tmp119_);
		_data_->_tmp120_ = _data_->synchronizer;
		_data_->_tmp121_ = _data_->txn_sig_id;
		g_signal_handler_disconnect (_data_->_tmp120_, _data_->_tmp121_);
		_data_->_tmp122_ = _data_->_data21_->timer_src_id;
		if (_data_->_tmp122_ != ((guint) 0)) {
			_data_->_tmp123_ = _data_->_data21_->timer_src_id;
			g_source_remove (_data_->_tmp123_);
		}
		_data_->_tmp124_ = g_error_new (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_SEARCH_CANCELLED, "Search '%s' was cancelled", _data_->search_string);
		_data_->_inner_error_ = _data_->_tmp124_;
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			unity_search_context_destroy (&_data_->search_context);
			_g_object_unref0 (_data_->last_search);
			_data_->enabled_subscopes = (_vala_array_free (_data_->enabled_subscopes, _data_->enabled_subscopes_length1, (GDestroyNotify) g_free), NULL);
			_g_object_unref0 (_data_->synchronizer);
			_g_hash_table_unref0 (_data_->response);
			_g_object_unref0 (_data_->channel);
			block21_data_unref (_data_->_data21_);
			_data_->_data21_ = NULL;
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			unity_search_context_destroy (&_data_->search_context);
			_g_object_unref0 (_data_->last_search);
			_data_->enabled_subscopes = (_vala_array_free (_data_->enabled_subscopes, _data_->enabled_subscopes_length1, (GDestroyNotify) g_free), NULL);
			_g_object_unref0 (_data_->synchronizer);
			_g_hash_table_unref0 (_data_->response);
			_g_object_unref0 (_data_->channel);
			block21_data_unref (_data_->_data21_);
			_data_->_data21_ = NULL;
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->_tmp125_ = _data_->channel;
	unity_internal_scope_channel_set_state (_data_->_tmp125_, UNITY_INTERNAL_CHANNEL_STATE_SEARCH_ACTIVE);
	_data_->_tmp126_ = _data_->channel;
	_data_->_tmp127_ = unity_internal_scope_channel_get_pushed_models (_data_->_tmp126_, _data_->search_string);
	{
		_data_->provider_collection = _data_->_tmp127_;
		for (_data_->provider_it = _data_->provider_collection; _data_->provider_it != NULL; _data_->provider_it = _data_->provider_it->next) {
			_data_->provider = (DeeSerializableModel*) _data_->provider_it->data;
			{
				_data_->_tmp128_ = _data_->provider;
				_data_->_tmp129_ = g_object_get_data ((GObject*) _data_->_tmp128_, "scope-id");
				_data_->provider_scope_id = (const gchar*) _data_->_tmp129_;
				_data_->_tmp131_ = _data_->subscope_filter_tag;
				if (_data_->_tmp131_ == ((guint) 0)) {
					_data_->_tmp130_ = TRUE;
				} else {
					_data_->_tmp133_ = _data_->subscope_filter_tag;
					if (_data_->_tmp133_ != ((guint) 0)) {
						_data_->_tmp134_ = _data_->provider_scope_id;
						_data_->_tmp135_ = _data_->enabled_subscopes;
						_data_->_tmp135__length1 = _data_->enabled_subscopes_length1;
						_data_->_tmp132_ = _vala_string_array_contains (_data_->_tmp135_, _data_->_tmp135__length1, _data_->_tmp134_);
					} else {
						_data_->_tmp132_ = FALSE;
					}
					_data_->_tmp130_ = _data_->_tmp132_;
				}
				if (_data_->_tmp130_) {
					_data_->_tmp136_ = _data_->synchronizer;
					_data_->_tmp137_ = _data_->provider;
					unity_internal_results_synchronizer_copy_model (_data_->_tmp136_, (DeeModel*) _data_->_tmp137_);
				}
			}
		}
		(_data_->provider_collection == NULL) ? NULL : (_data_->provider_collection = (g_list_free (_data_->provider_collection), NULL));
	}
	_data_->search_start_time = (gint64) 0;
	_data_->_tmp138_ = unity_internal_aggregator_scope_impl_measure_requests;
	if (_data_->_tmp138_) {
		_data_->search_start_time = g_get_monotonic_time ();
	}
	_data_->_tmp139_ = _data_->search_start_time;
	_data_->_data21_->search_end_time = _data_->_tmp139_;
	_data_->_tmp140_ = _data_->_data21_->search_cancellable;
	_data_->_tmp141_ = unity_cancellable_get_gcancellable (_data_->_tmp140_);
	_data_->glib_cancellable = _data_->_tmp141_;
	_data_->canc_sig_id = (gulong) 0;
	_data_->_data21_->canc_src_id = (guint) 0;
	_data_->_data21_->was_cancelled = FALSE;
	_data_->_tmp142_ = _data_->self->priv->_owner;
	_data_->_tmp143_ = unity_deprecated_scope_base_get_id ((UnityDeprecatedScopeBase*) _data_->_tmp142_);
	_data_->_tmp144_ = _data_->_tmp143_;
	unity_trace_tracepoint ("search:start::scope=%s;query=%s", _data_->_tmp144_, _data_->search_string);
	_data_->_tmp145_ = _data_->_data21_->aggsearch;
	unity_scope_search_base_run_async ((UnityScopeSearchBase*) _data_->_tmp145_, ___lambda33__unity_scope_search_base_callback, _data_->_data21_);
	_data_->_tmp146_ = _data_->glib_cancellable;
	if (_data_->_tmp146_ != NULL) {
		_data_->_tmp147_ = _data_->glib_cancellable;
		_data_->canc_sig_id = g_cancellable_connect (_data_->_tmp147_, (GCallback) ____lambda34__gfunc, block21_data_ref (_data_->_data21_), block21_data_unref);
	}
	_data_->_state_ = 3;
	return FALSE;
	_state_3:
	;
	_data_->_tmp148_ = _data_->canc_sig_id;
	if (_data_->_tmp148_ != ((gulong) 0)) {
		_data_->_tmp149_ = _data_->glib_cancellable;
		_data_->_tmp150_ = _data_->canc_sig_id;
		g_cancellable_disconnect (_data_->_tmp149_, _data_->_tmp150_);
	}
	_data_->_tmp151_ = _data_->_data21_->aggsearch;
	_data_->_tmp152_ = _data_->sig_id;
	g_signal_handler_disconnect (_data_->_tmp151_, _data_->_tmp152_);
	_data_->_tmp153_ = _data_->synchronizer;
	_data_->_tmp154_ = _data_->txn_sig_id;
	g_signal_handler_disconnect (_data_->_tmp153_, _data_->_tmp154_);
	_data_->_tmp155_ = _data_->_data21_->timer_src_id;
	if (_data_->_tmp155_ != ((guint) 0)) {
		_data_->_tmp156_ = _data_->_data21_->timer_src_id;
		g_source_remove (_data_->_tmp156_);
	}
	_data_->_tmp157_ = _data_->_data21_->canc_src_id;
	if (_data_->_tmp157_ != ((guint) 0)) {
		_data_->_tmp158_ = _data_->_data21_->canc_src_id;
		g_source_remove (_data_->_tmp158_);
	}
	_data_->_tmp159_ = _data_->channel;
	unity_internal_scope_channel_set_state (_data_->_tmp159_, UNITY_INTERNAL_CHANNEL_STATE_IDLE);
	_data_->_tmp160_ = _data_->_data21_->was_cancelled;
	if (_data_->_tmp160_) {
		_data_->_state_ = 4;
		return FALSE;
		_state_4:
		;
	}
	_data_->_tmp161_ = _data_->self->priv->_owner;
	_data_->_tmp162_ = unity_deprecated_scope_base_get_id ((UnityDeprecatedScopeBase*) _data_->_tmp161_);
	_data_->_tmp163_ = _data_->_tmp162_;
	unity_trace_tracepoint ("search:end::scope=%s;query=%s", _data_->_tmp163_, _data_->search_string);
	_data_->_tmp164_ = _data_->_data21_->search_cancellable;
	if (unity_cancellable_is_cancelled (_data_->_tmp164_)) {
		_data_->_tmp165_ = g_error_new (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_SEARCH_CANCELLED, "Search '%s' was cancelled", _data_->search_string);
		_data_->_inner_error_ = _data_->_tmp165_;
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			_g_object_unref0 (_data_->glib_cancellable);
			unity_search_context_destroy (&_data_->search_context);
			_g_object_unref0 (_data_->last_search);
			_data_->enabled_subscopes = (_vala_array_free (_data_->enabled_subscopes, _data_->enabled_subscopes_length1, (GDestroyNotify) g_free), NULL);
			_g_object_unref0 (_data_->synchronizer);
			_g_hash_table_unref0 (_data_->response);
			_g_object_unref0 (_data_->channel);
			block21_data_unref (_data_->_data21_);
			_data_->_data21_ = NULL;
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_g_object_unref0 (_data_->glib_cancellable);
			unity_search_context_destroy (&_data_->search_context);
			_g_object_unref0 (_data_->last_search);
			_data_->enabled_subscopes = (_vala_array_free (_data_->enabled_subscopes, _data_->enabled_subscopes_length1, (GDestroyNotify) g_free), NULL);
			_g_object_unref0 (_data_->synchronizer);
			_g_hash_table_unref0 (_data_->response);
			_g_object_unref0 (_data_->channel);
			block21_data_unref (_data_->_data21_);
			_data_->_data21_ = NULL;
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->_tmp166_ = _data_->_data21_->aggsearch;
	_data_->_tmp167_ = unity_deprecated_scope_search_get_reply_hints ((UnityDeprecatedScopeSearch*) _data_->_tmp166_);
	_data_->reply_hints = _data_->_tmp167_;
	_data_->_tmp168_ = _data_->reply_hints;
	if (_data_->_tmp168_ != NULL) {
		_data_->_tmp169_ = _data_->reply_hints;
		g_hash_table_iter_init (&_data_->iter, _data_->_tmp169_);
		while (TRUE) {
			_data_->_tmp170_ = NULL;
			_data_->_tmp171_ = NULL;
			_data_->_tmp172_ = g_hash_table_iter_next (&_data_->iter, (gpointer*) (&_data_->_tmp170_), (gpointer*) (&_data_->_tmp171_));
			_data_->_vala1_key = _data_->_tmp170_;
			_data_->_vala1_variant = _data_->_tmp171_;
			if (!_data_->_tmp172_) {
				break;
			}
			_data_->_tmp173_ = _data_->response;
			_data_->_tmp174_ = _data_->_vala1_key;
			_data_->_tmp175_ = g_strdup (_data_->_tmp174_);
			_data_->_tmp176_ = _data_->_vala1_variant;
			_data_->_tmp177_ = _g_variant_ref0 (_data_->_tmp176_);
			g_hash_table_insert (_data_->_tmp173_, _data_->_tmp175_, _data_->_tmp177_);
		}
	}
	_data_->_tmp178_ = _data_->_data21_->result_set;
	unity_result_set_flush ((UnityResultSet*) _data_->_tmp178_);
	_data_->_tmp179_ = _data_->response;
	_data_->_tmp180_ = g_strdup (UNITY_INTERNAL_SEARCH_SEQNUM_HINT);
	_data_->_tmp181_ = _data_->channel;
	_data_->_tmp182_ = g_variant_new_uint64 (unity_internal_scope_channel_get_last_seqnum (_data_->_tmp181_));
	g_variant_ref_sink (_data_->_tmp182_);
	g_hash_table_insert (_data_->_tmp179_, _data_->_tmp180_, _data_->_tmp182_);
	_data_->_tmp183_ = unity_internal_aggregator_scope_impl_measure_requests;
	if (_data_->_tmp183_) {
		_data_->_tmp184_ = _data_->_data21_->search_end_time;
		_data_->_tmp185_ = _data_->search_start_time;
		_data_->delta_us = _data_->_tmp184_ - _data_->_tmp185_;
		_data_->_tmp186_ = _data_->delta_us;
		_data_->delta = _data_->_tmp186_ / 1000000.0;
		_data_->_tmp187_ = _data_->response;
		_data_->_tmp188_ = g_strdup (UNITY_INTERNAL_SEARCH_TIME_HINT);
		_data_->_tmp189_ = _data_->delta;
		_data_->_tmp190_ = g_variant_new_double (_data_->_tmp189_);
		g_variant_ref_sink (_data_->_tmp190_);
		g_hash_table_insert (_data_->_tmp187_, _data_->_tmp188_, _data_->_tmp190_);
	}
	if (_data_->cancellable != NULL) {
		g_cancellable_set_error_if_cancelled (_data_->cancellable, &_data_->_inner_error_);
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
				_g_hash_table_unref0 (_data_->reply_hints);
				_g_object_unref0 (_data_->glib_cancellable);
				unity_search_context_destroy (&_data_->search_context);
				_g_object_unref0 (_data_->last_search);
				_data_->enabled_subscopes = (_vala_array_free (_data_->enabled_subscopes, _data_->enabled_subscopes_length1, (GDestroyNotify) g_free), NULL);
				_g_object_unref0 (_data_->synchronizer);
				_g_hash_table_unref0 (_data_->response);
				_g_object_unref0 (_data_->channel);
				block21_data_unref (_data_->_data21_);
				_data_->_data21_ = NULL;
				g_object_unref (_data_->_async_result);
				return FALSE;
			} else {
				_g_hash_table_unref0 (_data_->reply_hints);
				_g_object_unref0 (_data_->glib_cancellable);
				unity_search_context_destroy (&_data_->search_context);
				_g_object_unref0 (_data_->last_search);
				_data_->enabled_subscopes = (_vala_array_free (_data_->enabled_subscopes, _data_->enabled_subscopes_length1, (GDestroyNotify) g_free), NULL);
				_g_object_unref0 (_data_->synchronizer);
				_g_hash_table_unref0 (_data_->response);
				_g_object_unref0 (_data_->channel);
				block21_data_unref (_data_->_data21_);
				_data_->_data21_ = NULL;
				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
				g_clear_error (&_data_->_inner_error_);
				g_object_unref (_data_->_async_result);
				return FALSE;
			}
		}
	}
	_data_->result = _data_->response;
	_g_hash_table_unref0 (_data_->reply_hints);
	_g_object_unref0 (_data_->glib_cancellable);
	unity_search_context_destroy (&_data_->search_context);
	_g_object_unref0 (_data_->last_search);
	_data_->enabled_subscopes = (_vala_array_free (_data_->enabled_subscopes, _data_->enabled_subscopes_length1, (GDestroyNotify) g_free), NULL);
	_g_object_unref0 (_data_->synchronizer);
	_g_object_unref0 (_data_->channel);
	block21_data_unref (_data_->_data21_);
	_data_->_data21_ = NULL;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_internal_aggregator_scope_impl_search_scope_data_free (gpointer _data)
{
	UnityInternalAggregatorScopeImplSearchScopeData* _data_;
	_data_ = _data;
	_g_free0 (_data_->scope_id);
	_g_free0 (_data_->search_string);
	_g_hash_table_unref0 (_data_->hints);
	_g_object_unref0 (_data_->cancellable);
	_g_hash_table_unref0 (_data_->result);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalAggregatorScopeImplSearchScopeData, _data_);
}


static void
unity_internal_aggregator_scope_impl_search_scope_async_ready_wrapper (GObject *source_object,
                                                                       GAsyncResult *res,
                                                                       void *user_data)
{
	UnityInternalAggregatorScopeImplSearchScopeData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


void
unity_internal_aggregator_scope_impl_search_scope (UnityInternalAggregatorScopeImpl* self,
                                                   UnityAggregatedScopeSearch* search,
                                                   const gchar* scope_id,
                                                   const gchar* search_string,
                                                   UnitySearchType search_type,
                                                   GHashTable* hints,
                                                   GCancellable* cancellable,
                                                   GAsyncReadyCallback _callback_,
                                                   gpointer _user_data_)
{
	UnityInternalAggregatorScopeImplSearchScopeData* _data_;
	UnityInternalAggregatorScopeImpl* _tmp0_;
	UnityAggregatedScopeSearch* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	GHashTable* _tmp4_;
	GCancellable* _tmp5_;
	_data_ = g_slice_new0 (UnityInternalAggregatorScopeImplSearchScopeData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_internal_aggregator_scope_impl_search_scope_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_aggregator_scope_impl_search_scope_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = _g_object_ref0 (search);
	_g_object_unref0 (_data_->search);
	_data_->search = _tmp1_;
	_tmp2_ = g_strdup (scope_id);
	_g_free0 (_data_->scope_id);
	_data_->scope_id = _tmp2_;
	_tmp3_ = g_strdup (search_string);
	_g_free0 (_data_->search_string);
	_data_->search_string = _tmp3_;
	_data_->search_type = search_type;
	_tmp4_ = _g_hash_table_ref0 (hints);
	_g_hash_table_unref0 (_data_->hints);
	_data_->hints = _tmp4_;
	_tmp5_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp5_;
	unity_internal_aggregator_scope_impl_search_scope_co (_data_);
}


GHashTable*
unity_internal_aggregator_scope_impl_search_scope_finish (UnityInternalAggregatorScopeImpl* self,
                                                          GAsyncResult* _res_,
                                                          GError** error)
{
	GHashTable* result;
	UnityInternalAggregatorScopeImplSearchScopeData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static Block22Data*
block22_data_ref (Block22Data* _data22_)
{
	g_atomic_int_inc (&_data22_->_ref_count_);
	return _data22_;
}


static void
block22_data_unref (void * _userdata_)
{
	Block22Data* _data22_;
	_data22_ = (Block22Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data22_->_ref_count_)) {
		UnityInternalAggregatorScopeImpl* self;
		self = _data22_->self;
		_g_hash_table_unref0 (_data22_->combined_hints);
		_g_object_unref0 (_data22_->search);
		_g_object_unref0 (self);
		g_slice_free (Block22Data, _data22_);
	}
}


static void
___lambda36_ (Block22Data* _data22_,
              const gchar* k,
              GVariant* v)
{
	UnityInternalAggregatorScopeImpl* self;
	GHashTable* _tmp0_;
	gchar* _tmp1_;
	GVariant* _tmp2_;
	self = _data22_->self;
	g_return_if_fail (k != NULL);
	g_return_if_fail (v != NULL);
	_tmp0_ = _data22_->combined_hints;
	_tmp1_ = g_strdup (k);
	_tmp2_ = _g_variant_ref0 (v);
	g_hash_table_insert (_tmp0_, _tmp1_, _tmp2_);
}


static void
____lambda36__gh_func (gconstpointer key,
                       gconstpointer value,
                       gpointer self)
{
	___lambda36_ (self, (const gchar*) key, (GVariant*) value);
}


static void
unity_internal_aggregator_scope_impl_search_scope_ready (GObject* source_object,
                                                         GAsyncResult* _res_,
                                                         gpointer _user_data_)
{
	UnityInternalAggregatorScopeImplSearchScopeData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_internal_aggregator_scope_impl_search_scope_co (_data_);
}


static void
__lambda37_ (Block22Data* _data22_,
             const gchar* key,
             GVariant* variant)
{
	UnityInternalAggregatorScopeImpl* self;
	self = _data22_->self;
	g_return_if_fail (key != NULL);
	g_return_if_fail (variant != NULL);
	if (g_strcmp0 (key, UNITY_INTERNAL_SEARCH_SEQNUM_HINT) != 0) {
		unity_deprecated_scope_search_set_reply_hint ((UnityDeprecatedScopeSearch*) _data22_->search, key, variant);
	}
}


static void
___lambda37__gh_func (gconstpointer key,
                      gconstpointer value,
                      gpointer self)
{
	__lambda37_ (self, (const gchar*) key, (GVariant*) value);
}


static gboolean
unity_internal_aggregator_scope_impl_search_scope_co (UnityInternalAggregatorScopeImplSearchScopeData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_data22_ = g_slice_new0 (Block22Data);
	_data_->_data22_->_ref_count_ = 1;
	_data_->_data22_->self = g_object_ref (_data_->self);
	_g_object_unref0 (_data_->_data22_->search);
	_data_->_data22_->search = _data_->search;
	_data_->_data22_->_async_data_ = _data_;
	if (unity_internal_aggregator_scope_impl_is_scope_disabled (_data_->scope_id)) {
		_data_->_tmp0_ = g_hash_table_new_full (NULL, NULL, _g_free0_, _g_variant_unref0_);
		_data_->result = _data_->_tmp0_;
		block22_data_unref (_data_->_data22_);
		_data_->_data22_ = NULL;
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
		if (_data_->_state_ != 0) {
			while (_data_->_task_complete_ != TRUE) {
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
			}
		}
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp1_ = _data_->self->priv->_owner;
	_data_->_tmp2_ = unity_aggregator_scope_get_proxy_filter_hints (_data_->_tmp1_);
	_data_->_tmp3_ = _data_->_tmp2_;
	if (!_data_->_tmp3_) {
		_data_->_tmp4_ = unity_deprecated_scope_search_get_hints ((UnityDeprecatedScopeSearch*) _data_->_data22_->search);
		_data_->_tmp5_ = _data_->_tmp4_;
		g_hash_table_remove (_data_->_tmp5_, UNITY_INTERNAL_SEARCH_FILTER_ROW_HINT);
	}
	_data_->_data22_->combined_hints = NULL;
	if (_data_->hints != NULL) {
		_data_->_tmp6_ = g_str_hash;
		_data_->_tmp7_ = g_str_equal;
		_data_->_tmp8_ = g_hash_table_new_full (_data_->_tmp6_, _data_->_tmp7_, _g_free0_, _g_variant_unref0_);
		_g_hash_table_unref0 (_data_->_data22_->combined_hints);
		_data_->_data22_->combined_hints = _data_->_tmp8_;
		_data_->combiner = ____lambda36__gh_func;
		_data_->combiner_target = block22_data_ref (_data_->_data22_);
		_data_->combiner_target_destroy_notify = block22_data_unref;
		_data_->_tmp9_ = _data_->combiner;
		_data_->_tmp9__target = _data_->combiner_target;
		g_hash_table_foreach (_data_->hints, _data_->_tmp9_, _data_->_tmp9__target);
		_data_->_tmp10_ = unity_deprecated_scope_search_get_hints ((UnityDeprecatedScopeSearch*) _data_->_data22_->search);
		_data_->_tmp11_ = _data_->_tmp10_;
		_data_->_tmp12_ = _data_->combiner;
		_data_->_tmp12__target = _data_->combiner_target;
		g_hash_table_foreach (_data_->_tmp11_, _data_->_tmp12_, _data_->_tmp12__target);
		(_data_->combiner_target_destroy_notify == NULL) ? NULL : (_data_->combiner_target_destroy_notify (_data_->combiner_target), NULL);
		_data_->combiner = NULL;
		_data_->combiner_target = NULL;
		_data_->combiner_target_destroy_notify = NULL;
	}
	_data_->_tmp13_ = _data_->self->priv->category_merger;
	if (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp13_, UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_SCOPE)) {
		_data_->_tmp14_ = _data_->self->priv->category_merger;
		_data_->_tmp15_ = _data_->self->priv->_owner;
		unity_internal_aggregator_scope_impl_category_merger_by_scope_add_scope_mapping (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp14_, UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_SCOPE) ? ((UnityInternalAggregatorScopeImplCategoryMergerByScope*) _data_->_tmp14_) : NULL, _data_->_tmp15_, _data_->scope_id);
	}
	if (_data_->search_type == UNITY_SEARCH_TYPE_DEFAULT) {
		_data_->_tmp16_ = UNITY_PROTOCOL_CHANNEL_TYPE_DEFAULT;
	} else {
		_data_->_tmp16_ = UNITY_PROTOCOL_CHANNEL_TYPE_GLOBAL;
	}
	_data_->channel_type = _data_->_tmp16_;
	_data_->_tmp17_ = unity_deprecated_scope_search_get_channel_id ((UnityDeprecatedScopeSearch*) _data_->_data22_->search);
	_data_->_tmp18_ = _data_->_tmp17_;
	_data_->_tmp19_ = unity_internal_aggregator_scope_impl_get_channel_by_id (_data_->self, _data_->_tmp18_, &_data_->_inner_error_);
	_data_->channel = _data_->_tmp19_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		block22_data_unref (_data_->_data22_);
		_data_->_data22_ = NULL;
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp21_ = _data_->_data22_->combined_hints;
	if (_data_->_tmp21_ != NULL) {
		_data_->_tmp22_ = _data_->_data22_->combined_hints;
		_data_->_tmp20_ = _data_->_tmp22_;
	} else {
		_data_->_tmp23_ = unity_deprecated_scope_search_get_hints ((UnityDeprecatedScopeSearch*) _data_->_data22_->search);
		_data_->_tmp24_ = _data_->_tmp23_;
		_data_->_tmp20_ = _data_->_tmp24_;
	}
	_data_->_tmp25_ = _data_->self->priv->_scopes;
	_data_->_tmp26_ = _data_->channel;
	_data_->_tmp27_ = _data_->channel_type;
	_data_->_state_ = 1;
	unity_internal_scope_tracker_search_wrapper (_data_->_tmp25_, _data_->_tmp26_, _data_->_tmp27_, _data_->search_string, _data_->_tmp20_, _data_->scope_id, _data_->cancellable, unity_internal_aggregator_scope_impl_search_scope_ready, _data_);
	return FALSE;
	_state_1:
	_data_->_tmp28_ = unity_internal_scope_tracker_search_wrapper_finish (_data_->_tmp25_, _data_->_res_, &_data_->_inner_error_);
	_data_->res = _data_->_tmp28_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		_g_object_unref0 (_data_->channel);
		block22_data_unref (_data_->_data22_);
		_data_->_data22_ = NULL;
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp29_ = _data_->res;
	g_hash_table_foreach (_data_->_tmp29_, ___lambda37__gh_func, _data_->_data22_);
	_data_->result = _data_->res;
	_g_object_unref0 (_data_->channel);
	block22_data_unref (_data_->_data22_);
	_data_->_data22_ = NULL;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_internal_aggregator_scope_impl_push_results_to_scope_data_free (gpointer _data)
{
	UnityInternalAggregatorScopeImplPushResultsToScopeData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_free0 (_data_->search_string);
	_g_free0 (_data_->scope_id);
	_g_object_unref0 (_data_->results_model);
	_g_object_unref0 (_data_->cancellable);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalAggregatorScopeImplPushResultsToScopeData, _data_);
}


static void
unity_internal_aggregator_scope_impl_push_results_to_scope_async_ready_wrapper (GObject *source_object,
                                                                                GAsyncResult *res,
                                                                                void *user_data)
{
	UnityInternalAggregatorScopeImplPushResultsToScopeData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


void
unity_internal_aggregator_scope_impl_push_results_to_scope (UnityInternalAggregatorScopeImpl* self,
                                                            const gchar* channel_id,
                                                            const gchar* search_string,
                                                            const gchar* scope_id,
                                                            DeeSerializableModel* results_model,
                                                            gchar** category_ids,
                                                            int category_ids_length1,
                                                            GCancellable* cancellable,
                                                            GAsyncReadyCallback _callback_,
                                                            gpointer _user_data_)
{
	UnityInternalAggregatorScopeImplPushResultsToScopeData* _data_;
	UnityInternalAggregatorScopeImpl* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	DeeSerializableModel* _tmp4_;
	GCancellable* _tmp5_;
	_data_ = g_slice_new0 (UnityInternalAggregatorScopeImplPushResultsToScopeData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_internal_aggregator_scope_impl_push_results_to_scope_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_aggregator_scope_impl_push_results_to_scope_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_tmp2_ = g_strdup (search_string);
	_g_free0 (_data_->search_string);
	_data_->search_string = _tmp2_;
	_tmp3_ = g_strdup (scope_id);
	_g_free0 (_data_->scope_id);
	_data_->scope_id = _tmp3_;
	_tmp4_ = _g_object_ref0 (results_model);
	_g_object_unref0 (_data_->results_model);
	_data_->results_model = _tmp4_;
	_data_->category_ids = category_ids;
	_data_->category_ids_length1 = category_ids_length1;
	_tmp5_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp5_;
	unity_internal_aggregator_scope_impl_push_results_to_scope_co (_data_);
}


void
unity_internal_aggregator_scope_impl_push_results_to_scope_finish (UnityInternalAggregatorScopeImpl* self,
                                                                   GAsyncResult* _res_,
                                                                   GError** error)
{
	UnityInternalAggregatorScopeImplPushResultsToScopeData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
}


static gboolean
string_contains (const gchar* self,
                 const gchar* needle)
{
	gboolean result = FALSE;
	gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	g_return_val_if_fail (needle != NULL, FALSE);
	_tmp0_ = strstr ((gchar*) self, (gchar*) needle);
	result = _tmp0_ != NULL;
	return result;
}


static gchar**
_vala_array_dup9 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
	result = g_new0 (gchar*, length + 1);
	for (i = 0; i < length; i++) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (self[i]);
		result[i] = _tmp0_;
	}
	return result;
}


static void
unity_internal_aggregator_scope_impl_push_results_to_scope_ready (GObject* source_object,
                                                                  GAsyncResult* _res_,
                                                                  gpointer _user_data_)
{
	UnityInternalAggregatorScopeImplPushResultsToScopeData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_internal_aggregator_scope_impl_push_results_to_scope_co (_data_);
}


static gboolean
unity_internal_aggregator_scope_impl_push_results_to_scope_co (UnityInternalAggregatorScopeImplPushResultsToScopeData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	if (!string_contains (_data_->scope_id, "-")) {
		_data_->_tmp0_ = g_strdup_printf ("Incorrect scope_id \"%s\"", _data_->scope_id);
		_data_->_tmp1_ = _data_->_tmp0_;
		_data_->_tmp2_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, _data_->_tmp1_);
		_data_->_tmp3_ = _data_->_tmp2_;
		_g_free0 (_data_->_tmp1_);
		_data_->_inner_error_ = _data_->_tmp3_;
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	if (unity_internal_aggregator_scope_impl_is_scope_disabled (_data_->scope_id)) {
		_data_->_tmp4_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, "Scope is disabled");
		_data_->_inner_error_ = _data_->_tmp4_;
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp6_ = _data_->_tmp5_ = g_strsplit (_data_->scope_id, "-", 2);
	_data_->parts = _data_->_tmp6_;
	_data_->parts_length1 = _vala_array_length (_data_->_tmp5_);
	_data_->_parts_size_ = _data_->parts_length1;
	_data_->_tmp7_ = _data_->parts;
	_data_->_tmp7__length1 = _data_->parts_length1;
	_data_->_tmp8_ = _data_->_tmp7_[0];
	_data_->_tmp9_ = g_strdup_printf ("%s.scope", _data_->_tmp8_);
	_data_->master_scope_id = _data_->_tmp9_;
	_data_->_tmp10_ = _data_->self->priv->category_merger;
	if (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp10_, UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_SCOPE)) {
		_data_->_tmp11_ = _data_->self->priv->category_merger;
		_data_->_tmp12_ = _data_->self->priv->_owner;
		_data_->_tmp13_ = _data_->master_scope_id;
		unity_internal_aggregator_scope_impl_category_merger_by_scope_add_scope_mapping (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp11_, UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_SCOPE) ? ((UnityInternalAggregatorScopeImplCategoryMergerByScope*) _data_->_tmp11_) : NULL, _data_->_tmp12_, _data_->_tmp13_);
	}
	_data_->_tmp14_ = _data_->master_scope_id;
	unity_trace_tracepoint ("push:start::scope=%s;target=%s;query=%s", _data_->_tmp14_, _data_->scope_id, _data_->search_string);
	{
		_data_->_tmp15_ = unity_internal_aggregator_scope_impl_get_channel_by_id (_data_->self, _data_->channel_id, &_data_->_inner_error_);
		_data_->channel = _data_->_tmp15_;
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			goto __finally28;
		}
		_data_->_tmp16_ = _data_->self->priv->_scopes;
		_data_->_tmp17_ = _data_->channel;
		_data_->_tmp18_ = _data_->master_scope_id;
		_data_->_tmp19_ = (_data_->category_ids != NULL) ? _vala_array_dup9 (_data_->category_ids, _data_->category_ids_length1) : ((gpointer) _data_->category_ids);
		_data_->_tmp19__length1 = _data_->category_ids_length1;
		_data_->_state_ = 1;
		unity_internal_scope_tracker_push_wrapper (_data_->_tmp16_, _data_->_tmp17_, _data_->search_string, UNITY_PROTOCOL_CHANNEL_TYPE_GLOBAL, _data_->_tmp18_, _data_->scope_id, _data_->results_model, _data_->_tmp19_, _data_->_tmp19__length1, _data_->cancellable, unity_internal_aggregator_scope_impl_push_results_to_scope_ready, _data_);
		return FALSE;
		_state_1:
		unity_internal_scope_tracker_push_wrapper_finish (_data_->_tmp16_, _data_->_res_, &_data_->_inner_error_);
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			_g_object_unref0 (_data_->channel);
			goto __finally28;
		}
		_g_object_unref0 (_data_->channel);
	}
	__finally28:
	{
		_data_->_tmp20_ = _data_->master_scope_id;
		unity_trace_tracepoint ("push:end::scope=%s;target=%s;query=%s", _data_->_tmp20_, _data_->scope_id, _data_->search_string);
	}
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		_g_free0 (_data_->master_scope_id);
		_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_g_free0 (_data_->master_scope_id);
	_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


void
unity_internal_aggregator_scope_impl_push_filter_settings (UnityInternalAggregatorScopeImpl* self,
                                                           const gchar* channel_id,
                                                           UnityFilterSet* filters)
{
	GVariantBuilder* filter_rows = NULL;
	GVariantType* _tmp4_;
	GVariantType* _tmp5_;
	GVariantBuilder* _tmp6_;
	GVariantBuilder* _tmp7_;
	GList* _tmp8_;
	GVariantBuilder* _tmp13_;
	GVariant* _tmp14_;
	GVariant* _tmp15_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	g_return_if_fail (channel_id != NULL);
	g_return_if_fail (filters != NULL);
	{
		UnityInternalScopeChannel* _tmp0_;
		UnityInternalScopeChannel* _tmp1_;
		_tmp0_ = unity_internal_aggregator_scope_impl_get_channel_by_id (self, channel_id, &_inner_error_);
		_tmp1_ = _tmp0_;
		_g_object_unref0 (_tmp1_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch29_g_error;
		}
	}
	goto __finally29;
	__catch29_g_error:
	{
		GError* err = NULL;
		GError* _tmp2_;
		const gchar* _tmp3_;
		err = _inner_error_;
		_inner_error_ = NULL;
		_tmp2_ = err;
		_tmp3_ = _tmp2_->message;
		g_warning ("unity-aggregator-scope-private.vala:1379: Unexpected error: %s", _tmp3_);
		_g_error_free0 (err);
	}
	__finally29:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	_tmp4_ = g_variant_type_new ("a(ssssa{sv}bbb)");
	_tmp5_ = _tmp4_;
	_tmp6_ = g_variant_builder_new (_tmp5_);
	_tmp7_ = _tmp6_;
	_g_variant_type_free0 (_tmp5_);
	filter_rows = _tmp7_;
	_tmp8_ = unity_filter_set_get_filters (filters);
	{
		GList* f_collection = NULL;
		GList* f_it = NULL;
		f_collection = _tmp8_;
		for (f_it = f_collection; f_it != NULL; f_it = f_it->next) {
			UnityFilter* f = NULL;
			f = (UnityFilter*) f_it->data;
			{
				GVariantBuilder* _tmp9_;
				UnityFilter* _tmp10_;
				GVariant* _tmp11_;
				GVariant* _tmp12_;
				_tmp9_ = filter_rows;
				_tmp10_ = f;
				_tmp11_ = dee_serializable_serialize ((DeeSerializable*) _tmp10_);
				_tmp12_ = _tmp11_;
				g_variant_builder_add_value (_tmp9_, _tmp12_);
				_g_variant_unref0 (_tmp12_);
			}
		}
		(f_collection == NULL) ? NULL : (f_collection = (g_list_free (f_collection), NULL));
	}
	_tmp13_ = filter_rows;
	_tmp14_ = g_variant_builder_end (_tmp13_);
	g_variant_ref_sink (_tmp14_);
	_tmp15_ = _tmp14_;
	g_signal_emit_by_name ((UnityProtocolScopeService*) self, "filter-settings-changed", channel_id, _tmp15_);
	_g_variant_unref0 (_tmp15_);
	_g_variant_builder_unref0 (filter_rows);
}


static void
unity_internal_aggregator_scope_impl_update_filter_state (UnityInternalAggregatorScopeImpl* self,
                                                          UnityInternalScopeChannel* channel,
                                                          GVariant* changed_row,
                                                          GError** error)
{
	const gchar* _tmp0_;
	gchar* filter_id = NULL;
	UnityFilter* filter = NULL;
	const gchar* _tmp6_;
	UnityFilter* _tmp7_;
	UnityFilter* _tmp8_;
	UnityFilter* _tmp9_;
	gboolean state = FALSE;
	UnityFilter* _tmp15_;
	gboolean _tmp16_;
	UnityFilter* _tmp17_;
	gboolean _tmp18_;
	UnityFilter* _tmp19_;
	GVariant* _tmp20_;
	GVariant* _tmp21_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	g_return_if_fail (channel != NULL);
	g_return_if_fail (changed_row != NULL);
	_tmp0_ = g_variant_get_type_string (changed_row);
	if (g_strcmp0 (_tmp0_, "(ssssa{sv}bbb)") != 0) {
		const gchar* _tmp1_;
		gchar* _tmp2_;
		gchar* _tmp3_;
		GError* _tmp4_;
		GError* _tmp5_;
		_tmp1_ = g_variant_get_type_string (changed_row);
		_tmp2_ = g_strdup_printf ("Incorrect signature of filter-state (got '%s')", _tmp1_);
		_tmp3_ = _tmp2_;
		_tmp4_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, _tmp3_);
		_tmp5_ = _tmp4_;
		_g_free0 (_tmp3_);
		_inner_error_ = _tmp5_;
		if (_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR) {
			g_propagate_error (error, _inner_error_);
			return;
		} else {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
	}
	g_variant_get_child (changed_row, (gsize) UNITY_INTERNAL_FILTER_COLUMN_ID, "s", &filter_id, NULL);
	_tmp6_ = filter_id;
	_tmp7_ = unity_internal_scope_channel_get_filter_by_id (channel, _tmp6_);
	_tmp8_ = _g_object_ref0 (_tmp7_);
	filter = _tmp8_;
	_tmp9_ = filter;
	if (_tmp9_ == NULL) {
		const gchar* _tmp10_;
		gchar* _tmp11_;
		gchar* _tmp12_;
		GError* _tmp13_;
		GError* _tmp14_;
		_tmp10_ = filter_id;
		_tmp11_ = g_strdup_printf ("Unable to find filter with id '%s'", _tmp10_);
		_tmp12_ = _tmp11_;
		_tmp13_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, _tmp12_);
		_tmp14_ = _tmp13_;
		_g_free0 (_tmp12_);
		_inner_error_ = _tmp14_;
		if (_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR) {
			g_propagate_error (error, _inner_error_);
			_g_object_unref0 (filter);
			_g_free0 (filter_id);
			return;
		} else {
			_g_object_unref0 (filter);
			_g_free0 (filter_id);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
	}
	g_variant_get_child (changed_row, (gsize) UNITY_INTERNAL_FILTER_COLUMN_FILTERING, "b", &state, NULL);
	_tmp15_ = filter;
	_tmp16_ = state;
	unity_filter_set_filtering (_tmp15_, _tmp16_);
	g_variant_get_child (changed_row, (gsize) UNITY_INTERNAL_FILTER_COLUMN_COLLAPSED, "b", &state, NULL);
	_tmp17_ = filter;
	_tmp18_ = state;
	unity_filter_set_collapsed (_tmp17_, _tmp18_);
	_tmp19_ = filter;
	_tmp20_ = g_variant_get_child_value (changed_row, (gsize) UNITY_INTERNAL_FILTER_COLUMN_RENDERER_STATE);
	_tmp21_ = _tmp20_;
	unity_filter_update (_tmp19_, _tmp21_);
	_g_variant_unref0 (_tmp21_);
	_g_object_unref0 (filter);
	_g_free0 (filter_id);
}


static void
unity_internal_aggregator_scope_impl_real_open_channel_data_free (gpointer _data)
{
	UnityInternalAggregatorScopeImplOpenChannelData* _data_;
	_data_ = _data;
	_g_hash_table_unref0 (_data_->hints);
	_g_object_unref0 (_data_->cancellable);
	_g_free0 (_data_->sender);
	_g_free0 (_data_->result);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalAggregatorScopeImplOpenChannelData, _data_);
}


static void
unity_internal_aggregator_scope_impl_real_open_channel_async_ready_wrapper (GObject *source_object,
                                                                            GAsyncResult *res,
                                                                            void *user_data)
{
	UnityInternalAggregatorScopeImplOpenChannelData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_internal_aggregator_scope_impl_real_open_channel (UnityProtocolScopeService* base,
                                                        guint channel_type,
                                                        GHashTable* hints,
                                                        GCancellable* cancellable,
                                                        const char* sender,
                                                        GAsyncReadyCallback _callback_,
                                                        gpointer _user_data_)
{
	UnityInternalAggregatorScopeImpl * self;
	UnityInternalAggregatorScopeImplOpenChannelData* _data_;
	UnityInternalAggregatorScopeImpl* _tmp0_;
	GHashTable* _tmp1_;
	GCancellable* _tmp2_;
	char* _tmp3_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_data_ = g_slice_new0 (UnityInternalAggregatorScopeImplOpenChannelData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_internal_aggregator_scope_impl_real_open_channel_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_aggregator_scope_impl_real_open_channel_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_data_->channel_type = channel_type;
	_tmp1_ = _g_hash_table_ref0 (hints);
	_g_hash_table_unref0 (_data_->hints);
	_data_->hints = _tmp1_;
	_tmp2_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp2_;
	_tmp3_ = g_strdup (sender);
	_g_free0 (_data_->sender);
	_data_->sender = _tmp3_;
	unity_internal_aggregator_scope_impl_real_open_channel_co (_data_);
}


static gchar*
unity_internal_aggregator_scope_impl_real_open_channel_finish (UnityProtocolScopeService* base,
                                                               GAsyncResult* _res_,
                                                               GHashTable* * out_hints,
                                                               GError** error)
{
	gchar* result;
	UnityInternalAggregatorScopeImplOpenChannelData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	if (out_hints) {
		*out_hints = _data_->out_hints;
	} else {
		_g_hash_table_unref0 (_data_->out_hints);
	}
	_data_->out_hints = NULL;
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static void
unity_internal_aggregator_scope_impl_open_channel_ready (GObject* source_object,
                                                         GAsyncResult* _res_,
                                                         gpointer _user_data_)
{
	UnityInternalAggregatorScopeImplOpenChannelData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_internal_aggregator_scope_impl_real_open_channel_co (_data_);
}


static void
_unity_internal_aggregator_scope_impl_channel_owner_lost_unity_internal_scope_channel_owner_lost (UnityInternalScopeChannel* _sender,
                                                                                                  gpointer self)
{
	unity_internal_aggregator_scope_impl_channel_owner_lost ((UnityInternalAggregatorScopeImpl*) self, _sender);
}


static gboolean
unity_internal_aggregator_scope_impl_real_open_channel_co (UnityInternalAggregatorScopeImplOpenChannelData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = _data_->self->priv->_owner;
	_data_->_tmp1_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp0_, UNITY_TYPE_AGGREGATOR_SCOPE) ? ((UnityAggregatorScope*) _data_->_tmp0_) : NULL);
	_data_->aggscope = _data_->_tmp1_;
	_data_->_tmp2_ = _data_->self->priv->category_merger;
	if (_data_->_tmp2_ == NULL) {
		_data_->_tmp3_ = _data_->aggscope;
		_data_->_tmp4_ = unity_aggregator_scope_get_merge_mode (_data_->_tmp3_);
		_data_->_tmp5_ = _data_->_tmp4_;
		if (_data_->_tmp5_ == UNITY_AGGREGATOR_SCOPE_MERGE_MODE_OWNER_SCOPE) {
			_data_->_tmp6_ = unity_internal_aggregator_scope_impl_category_merger_by_scope_new ();
			_g_object_unref0 (_data_->self->priv->category_merger);
			_data_->self->priv->category_merger = (UnityInternalAggregatorScopeImplCategoryMerger*) _data_->_tmp6_;
		} else {
			_data_->_tmp7_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) _data_->self);
			_data_->_tmp8_ = _data_->_tmp7_;
			_data_->_tmp9_ = unity_internal_aggregator_scope_impl_category_merger_by_field_new (_data_->_tmp8_, (guint) UNITY_INTERNAL_CATEGORY_COLUMN_ID);
			_g_object_unref0 (_data_->self->priv->category_merger);
			_data_->self->priv->category_merger = (UnityInternalAggregatorScopeImplCategoryMerger*) _data_->_tmp9_;
		}
	}
	_data_->flags = unity_protocol_channel_flags_from_hints (_data_->hints);
	_data_->_tmp10_ = unity_internal_scope_channel_new ((UnityProtocolChannelType) _data_->channel_type);
	_data_->channel = _data_->_tmp10_;
	_data_->_tmp11_ = _data_->self->priv->_owner;
	_data_->_tmp12_ = unity_deprecated_scope_base_get_schema ((UnityDeprecatedScopeBase*) _data_->_tmp11_);
	_data_->_tmp13_ = _data_->_tmp12_;
	_data_->_tmp14_ = _g_object_ref0 (_data_->_tmp13_);
	_data_->schema = _data_->_tmp14_;
	_data_->_tmp15_ = g_str_hash;
	_data_->_tmp16_ = g_str_equal;
	_data_->_tmp17_ = g_hash_table_new_full (_data_->_tmp15_, _data_->_tmp16_, _g_free0_, _g_free0_);
	_data_->required_schema = _data_->_tmp17_;
	_data_->_tmp18_ = g_str_hash;
	_data_->_tmp19_ = g_str_equal;
	_data_->_tmp20_ = g_hash_table_new_full (_data_->_tmp18_, _data_->_tmp19_, _g_free0_, _g_free0_);
	_data_->optional_schema = _data_->_tmp20_;
	_data_->_tmp21_ = _data_->schema;
	_data_->_tmp22_ = unity_schema_get_fields (_data_->_tmp21_);
	{
		_data_->field_collection = _data_->_tmp22_;
		for (_data_->field_it = _data_->field_collection; _data_->field_it != NULL; _data_->field_it = _data_->field_it->next) {
			_data_->field = (UnitySchemaFieldInfo*) _data_->field_it->data;
			{
				_data_->_tmp23_ = _data_->field;
				_data_->_tmp24_ = (*_data_->_tmp23_).type;
				if (_data_->_tmp24_ == UNITY_SCHEMA_FIELD_TYPE_REQUIRED) {
					_data_->_tmp25_ = _data_->required_schema;
					_data_->_tmp26_ = _data_->field;
					_data_->_tmp27_ = (*_data_->_tmp26_).name;
					_data_->_tmp28_ = g_strdup (_data_->_tmp27_);
					_data_->_tmp29_ = _data_->field;
					_data_->_tmp30_ = (*_data_->_tmp29_).schema;
					_data_->_tmp31_ = g_strdup (_data_->_tmp30_);
					g_hash_table_insert (_data_->_tmp25_, _data_->_tmp28_, _data_->_tmp31_);
				} else {
					_data_->_tmp32_ = _data_->optional_schema;
					_data_->_tmp33_ = _data_->field;
					_data_->_tmp34_ = (*_data_->_tmp33_).name;
					_data_->_tmp35_ = g_strdup (_data_->_tmp34_);
					_data_->_tmp36_ = _data_->field;
					_data_->_tmp37_ = (*_data_->_tmp36_).schema;
					_data_->_tmp38_ = g_strdup (_data_->_tmp37_);
					g_hash_table_insert (_data_->_tmp32_, _data_->_tmp35_, _data_->_tmp38_);
				}
			}
		}
		(_data_->field_collection == NULL) ? NULL : (_data_->field_collection = (g_list_free (_data_->field_collection), NULL));
	}
	_data_->_tmp39_ = _data_->channel;
	_data_->_tmp40_ = unity_internal_aggregator_scope_impl_create_dbus_name (_data_->self);
	_data_->_tmp41_ = _data_->_tmp40_;
	_data_->_tmp42_ = _data_->required_schema;
	_data_->_tmp43_ = _data_->optional_schema;
	_data_->_tmp44_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) _data_->self);
	_data_->_tmp45_ = _data_->_tmp44_;
	_data_->_tmp46_ = _data_->flags;
	_data_->_tmp47_ = unity_internal_scope_channel_create_channel (_data_->_tmp39_, _data_->_tmp41_, _data_->_tmp42_, _data_->_tmp43_, _data_->_tmp45_, _data_->_tmp46_ | UNITY_PROTOCOL_CHANNEL_FLAGS_NO_FILTERING);
	_data_->_tmp48_ = _data_->_tmp47_;
	_g_free0 (_data_->_tmp41_);
	_data_->model_name = _data_->_tmp48_;
	_data_->_tmp49_ = _data_->channel;
	_data_->_tmp50_ = _data_->_tmp49_->transfer_model;
	if (_data_->_tmp50_ != NULL) {
		_data_->_tmp51_ = _data_->channel;
		_data_->_tmp52_ = _data_->_tmp51_->transfer_model;
		_data_->_state_ = 1;
		unity_internal_utils_wait_for_model_synchronization (_data_->_tmp52_, unity_internal_aggregator_scope_impl_open_channel_ready, _data_);
		return FALSE;
		_state_1:
		unity_internal_utils_wait_for_model_synchronization_finish (_data_->_res_);
		if (_data_->sender != NULL) {
			_data_->_tmp53_ = _data_->channel;
			_data_->_tmp54_ = _data_->self->priv->_dbus_connection;
			unity_internal_scope_channel_watch_owner (_data_->_tmp53_, _data_->_tmp54_, _data_->sender);
			_data_->_tmp55_ = _data_->channel;
			g_signal_connect_object (_data_->_tmp55_, "owner-lost", (GCallback) _unity_internal_aggregator_scope_impl_channel_owner_lost_unity_internal_scope_channel_owner_lost, _data_->self, 0);
		}
	}
	_data_->_tmp56_ = _data_->self->priv->_channels;
	_data_->_tmp57_ = _data_->channel;
	_data_->_tmp58_ = _data_->_tmp57_->id;
	_data_->_tmp59_ = g_strdup (_data_->_tmp58_);
	_data_->_tmp60_ = _data_->channel;
	_data_->_tmp61_ = _g_object_ref0 (_data_->_tmp60_);
	g_hash_table_insert (_data_->_tmp56_, _data_->_tmp59_, _data_->_tmp61_);
	_data_->_tmp62_ = _data_->self->priv->_scopes;
	_data_->_tmp63_ = _data_->self->priv->_owner;
	_data_->_tmp64_ = unity_deprecated_scope_base_get_id ((UnityDeprecatedScopeBase*) _data_->_tmp63_);
	_data_->_tmp65_ = _data_->_tmp64_;
	_data_->_tmp66_ = _data_->channel;
	_data_->_tmp67_ = _data_->_tmp66_->id;
	_data_->_tmp68_ = _data_->channel;
	_data_->_tmp69_ = _data_->_tmp68_->backend_model;
	_data_->_tmp70_ = unity_internal_aggregator_scope_impl_get_merge_strategy (_data_->self);
	_data_->_tmp71_ = _data_->_tmp70_;
	unity_internal_scope_tracker_register_channel (_data_->_tmp62_, _data_->_tmp65_, _data_->_tmp67_, _data_->_tmp69_, _data_->_tmp71_);
	_data_->_tmp72_ = g_str_hash;
	_data_->_tmp73_ = g_str_equal;
	_data_->_tmp74_ = g_hash_table_new_full (_data_->_tmp72_, _data_->_tmp73_, _g_free0_, _g_variant_unref0_);
	_g_hash_table_unref0 (_data_->out_hints);
	_data_->out_hints = _data_->_tmp74_;
	_data_->_tmp75_ = g_strdup (UNITY_PROTOCOL_CHANNEL_SWARM_NAME_HINT);
	_data_->_tmp76_ = _data_->model_name;
	_data_->_tmp77_ = g_variant_new_string (_data_->_tmp76_);
	g_variant_ref_sink (_data_->_tmp77_);
	g_hash_table_insert (_data_->out_hints, _data_->_tmp75_, _data_->_tmp77_);
	_data_->_tmp78_ = _data_->channel;
	_data_->_tmp79_ = _data_->_tmp78_->id;
	_data_->_tmp80_ = g_strdup (_data_->_tmp79_);
	_data_->result = _data_->_tmp80_;
	_g_free0 (_data_->model_name);
	_g_hash_table_unref0 (_data_->optional_schema);
	_g_hash_table_unref0 (_data_->required_schema);
	_g_object_unref0 (_data_->schema);
	_g_object_unref0 (_data_->channel);
	_g_object_unref0 (_data_->aggscope);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static UnityInternalScopeChannel*
unity_internal_aggregator_scope_impl_get_channel_by_id (UnityInternalAggregatorScopeImpl* self,
                                                        const gchar* channel_id,
                                                        GError** error)
{
	UnityInternalScopeChannel* result = NULL;
	UnityInternalScopeChannel* channel = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	UnityInternalScopeChannel* _tmp2_;
	UnityInternalScopeChannel* _tmp4_;
	UnityInternalScopeChannel* _tmp5_;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (self != NULL, NULL);
	g_return_val_if_fail (channel_id != NULL, NULL);
	_tmp0_ = self->priv->_channels;
	_tmp1_ = g_hash_table_lookup (_tmp0_, channel_id);
	channel = (UnityInternalScopeChannel*) _tmp1_;
	_tmp2_ = channel;
	if (_tmp2_ == NULL) {
		GError* _tmp3_;
		_tmp3_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_INVALID_CHANNEL, "Invalid channel ID!");
		_inner_error_ = _tmp3_;
		if (_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR) {
			g_propagate_error (error, _inner_error_);
			return NULL;
		} else {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return NULL;
		}
	}
	_tmp4_ = channel;
	_tmp5_ = _g_object_ref0 (_tmp4_);
	result = _tmp5_;
	return result;
}


static void
unity_internal_aggregator_scope_impl_real_close_channel_data_free (gpointer _data)
{
	UnityInternalAggregatorScopeImplCloseChannelData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_hash_table_unref0 (_data_->hints);
	_g_object_unref0 (_data_->cancellable);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalAggregatorScopeImplCloseChannelData, _data_);
}


static void
unity_internal_aggregator_scope_impl_real_close_channel_async_ready_wrapper (GObject *source_object,
                                                                             GAsyncResult *res,
                                                                             void *user_data)
{
	UnityInternalAggregatorScopeImplCloseChannelData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_internal_aggregator_scope_impl_real_close_channel (UnityProtocolScopeService* base,
                                                         const gchar* channel_id,
                                                         GHashTable* hints,
                                                         GCancellable* cancellable,
                                                         GAsyncReadyCallback _callback_,
                                                         gpointer _user_data_)
{
	UnityInternalAggregatorScopeImpl * self;
	UnityInternalAggregatorScopeImplCloseChannelData* _data_;
	UnityInternalAggregatorScopeImpl* _tmp0_;
	gchar* _tmp1_;
	GHashTable* _tmp2_;
	GCancellable* _tmp3_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_data_ = g_slice_new0 (UnityInternalAggregatorScopeImplCloseChannelData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_internal_aggregator_scope_impl_real_close_channel_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_aggregator_scope_impl_real_close_channel_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_tmp2_ = _g_hash_table_ref0 (hints);
	_g_hash_table_unref0 (_data_->hints);
	_data_->hints = _tmp2_;
	_tmp3_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp3_;
	unity_internal_aggregator_scope_impl_real_close_channel_co (_data_);
}


static void
unity_internal_aggregator_scope_impl_real_close_channel_finish (UnityProtocolScopeService* base,
                                                                GAsyncResult* _res_,
                                                                GError** error)
{
	UnityInternalAggregatorScopeImplCloseChannelData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
}


static gboolean
unity_internal_aggregator_scope_impl_real_close_channel_co (UnityInternalAggregatorScopeImplCloseChannelData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = _data_->self->priv->_channels;
	_data_->_tmp1_ = g_hash_table_lookup (_data_->_tmp0_, _data_->channel_id);
	_data_->channel = (UnityInternalScopeChannel*) _data_->_tmp1_;
	_data_->_tmp2_ = _data_->channel;
	if (_data_->_tmp2_ == NULL) {
		_data_->_tmp3_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_INVALID_CHANNEL, "Invalid channel ID!");
		_data_->_inner_error_ = _data_->_tmp3_;
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->_tmp4_ = _data_->self->priv->_scopes;
	unity_internal_scope_tracker_unregister_channel (_data_->_tmp4_, _data_->channel_id);
	_data_->_tmp5_ = _data_->self->priv->_channels;
	g_hash_table_remove (_data_->_tmp5_, _data_->channel_id);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_internal_aggregator_scope_impl_real_set_view_type_data_free (gpointer _data)
{
	UnityInternalAggregatorScopeImplSetViewTypeData* _data_;
	_data_ = _data;
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalAggregatorScopeImplSetViewTypeData, _data_);
}


static void
unity_internal_aggregator_scope_impl_real_set_view_type_async_ready_wrapper (GObject *source_object,
                                                                             GAsyncResult *res,
                                                                             void *user_data)
{
	UnityInternalAggregatorScopeImplSetViewTypeData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_internal_aggregator_scope_impl_real_set_view_type (UnityProtocolScopeService* base,
                                                         guint view_type_id,
                                                         GAsyncReadyCallback _callback_,
                                                         gpointer _user_data_)
{
	UnityInternalAggregatorScopeImpl * self;
	UnityInternalAggregatorScopeImplSetViewTypeData* _data_;
	UnityInternalAggregatorScopeImpl* _tmp0_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_data_ = g_slice_new0 (UnityInternalAggregatorScopeImplSetViewTypeData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, unity_internal_aggregator_scope_impl_real_set_view_type_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_aggregator_scope_impl_real_set_view_type_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_data_->view_type_id = view_type_id;
	unity_internal_aggregator_scope_impl_real_set_view_type_co (_data_);
}


static void
unity_internal_aggregator_scope_impl_real_set_view_type_finish (UnityProtocolScopeService* base,
                                                                GAsyncResult* _res_,
                                                                GError** error)
{
	UnityInternalAggregatorScopeImplSetViewTypeData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
}


static gboolean
unity_internal_aggregator_scope_impl_real_set_view_type_co (UnityInternalAggregatorScopeImplSetViewTypeData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->view_type = (UnityProtocolViewType) _data_->view_type_id;
	unity_internal_aggregator_scope_impl_set_view_type (_data_->self, _data_->view_type);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_internal_aggregator_scope_impl_set_active_sources_data_free (gpointer _data)
{
	UnityInternalAggregatorScopeImplSetActiveSourcesData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_object_unref0 (_data_->cancellable);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalAggregatorScopeImplSetActiveSourcesData, _data_);
}


static void
unity_internal_aggregator_scope_impl_set_active_sources_async_ready_wrapper (GObject *source_object,
                                                                             GAsyncResult *res,
                                                                             void *user_data)
{
	UnityInternalAggregatorScopeImplSetActiveSourcesData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


void
unity_internal_aggregator_scope_impl_set_active_sources (UnityInternalAggregatorScopeImpl* self,
                                                         const gchar* channel_id,
                                                         gchar** sources,
                                                         int sources_length1,
                                                         GCancellable* cancellable,
                                                         GAsyncReadyCallback _callback_,
                                                         gpointer _user_data_)
{
	UnityInternalAggregatorScopeImplSetActiveSourcesData* _data_;
	UnityInternalAggregatorScopeImpl* _tmp0_;
	gchar* _tmp1_;
	GCancellable* _tmp2_;
	_data_ = g_slice_new0 (UnityInternalAggregatorScopeImplSetActiveSourcesData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_internal_aggregator_scope_impl_set_active_sources_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_aggregator_scope_impl_set_active_sources_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_data_->sources = sources;
	_data_->sources_length1 = sources_length1;
	_tmp2_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp2_;
	unity_internal_aggregator_scope_impl_set_active_sources_co (_data_);
}


void
unity_internal_aggregator_scope_impl_set_active_sources_finish (UnityInternalAggregatorScopeImpl* self,
                                                                GAsyncResult* _res_,
                                                                GError** error)
{
	UnityInternalAggregatorScopeImplSetActiveSourcesData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
}


static gboolean
unity_internal_aggregator_scope_impl_set_active_sources_co (UnityInternalAggregatorScopeImplSetActiveSourcesData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = _data_->self->priv->_owner;
	unity_deprecated_scope_base_set_active_sources_internal ((UnityDeprecatedScopeBase*) _data_->_tmp0_, _data_->sources, _data_->sources_length1);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static void
unity_internal_aggregator_scope_impl_real_push_results_data_free (gpointer _data)
{
	UnityInternalAggregatorScopeImplPushResultsData* _data_;
	_data_ = _data;
	_g_free0 (_data_->channel_id);
	_g_free0 (_data_->search_string);
	_g_free0 (_data_->source_scope_id);
	_g_variant_unref0 (_data_->model_v);
	_g_object_unref0 (_data_->cancellable);
	_g_hash_table_unref0 (_data_->result);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityInternalAggregatorScopeImplPushResultsData, _data_);
}


static void
unity_internal_aggregator_scope_impl_real_push_results_async_ready_wrapper (GObject *source_object,
                                                                            GAsyncResult *res,
                                                                            void *user_data)
{
	UnityInternalAggregatorScopeImplPushResultsData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_internal_aggregator_scope_impl_real_push_results (UnityProtocolScopeService* base,
                                                        const gchar* channel_id,
                                                        const gchar* search_string,
                                                        const gchar* source_scope_id,
                                                        GVariant* model_v,
                                                        gchar** categories,
                                                        int categories_length1,
                                                        GCancellable* cancellable,
                                                        GAsyncReadyCallback _callback_,
                                                        gpointer _user_data_)
{
	UnityInternalAggregatorScopeImpl * self;
	UnityInternalAggregatorScopeImplPushResultsData* _data_;
	UnityInternalAggregatorScopeImpl* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	GVariant* _tmp4_;
	GCancellable* _tmp5_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_data_ = g_slice_new0 (UnityInternalAggregatorScopeImplPushResultsData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), cancellable, unity_internal_aggregator_scope_impl_real_push_results_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_internal_aggregator_scope_impl_real_push_results_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = g_strdup (channel_id);
	_g_free0 (_data_->channel_id);
	_data_->channel_id = _tmp1_;
	_tmp2_ = g_strdup (search_string);
	_g_free0 (_data_->search_string);
	_data_->search_string = _tmp2_;
	_tmp3_ = g_strdup (source_scope_id);
	_g_free0 (_data_->source_scope_id);
	_data_->source_scope_id = _tmp3_;
	_tmp4_ = _g_variant_ref0 (model_v);
	_g_variant_unref0 (_data_->model_v);
	_data_->model_v = _tmp4_;
	_data_->categories = categories;
	_data_->categories_length1 = categories_length1;
	_tmp5_ = _g_object_ref0 (cancellable);
	_g_object_unref0 (_data_->cancellable);
	_data_->cancellable = _tmp5_;
	unity_internal_aggregator_scope_impl_real_push_results_co (_data_);
}


static GHashTable*
unity_internal_aggregator_scope_impl_real_push_results_finish (UnityProtocolScopeService* base,
                                                               GAsyncResult* _res_,
                                                               GError** error)
{
	GHashTable* result;
	UnityInternalAggregatorScopeImplPushResultsData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


static gboolean
unity_internal_aggregator_scope_impl_real_push_results_co (UnityInternalAggregatorScopeImplPushResultsData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = unity_internal_aggregator_scope_impl_get_channel_by_id (_data_->self, _data_->channel_id, &_data_->_inner_error_);
	_data_->channel = _data_->_tmp0_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->_tmp1_ = dee_serializable_parse (_data_->model_v, dee_sequence_model_get_type ());
	_data_->model_obj = _data_->_tmp1_;
	_data_->_tmp2_ = _data_->model_obj;
	if (_data_->_tmp2_ == NULL) {
		_data_->_tmp3_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, "Can't deserialize model");
		_data_->_inner_error_ = _data_->_tmp3_;
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			_g_object_unref0 (_data_->model_obj);
			_g_object_unref0 (_data_->channel);
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_g_object_unref0 (_data_->model_obj);
			_g_object_unref0 (_data_->channel);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->_tmp4_ = _data_->self->priv->_scopes;
	_data_->_tmp5_ = unity_internal_scope_tracker_get_synchronizer (_data_->_tmp4_, _data_->channel_id);
	_data_->_tmp6_ = _g_object_ref0 (_data_->_tmp5_);
	_data_->sync = _data_->_tmp6_;
	_data_->_tmp7_ = _data_->sync;
	if (_data_->_tmp7_ == NULL) {
		_data_->_tmp8_ = g_error_new (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, "No synchronizer for channel %s", _data_->channel_id);
		_data_->_inner_error_ = _data_->_tmp8_;
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			_g_object_unref0 (_data_->sync);
			_g_object_unref0 (_data_->model_obj);
			_g_object_unref0 (_data_->channel);
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_g_object_unref0 (_data_->sync);
			_g_object_unref0 (_data_->model_obj);
			_g_object_unref0 (_data_->channel);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->_tmp9_ = _data_->self->priv->category_merger;
	_data_->_tmp10_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp9_, UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_FIELD) ? ((UnityInternalAggregatorScopeImplCategoryMergerByField*) _data_->_tmp9_) : NULL);
	_data_->merger = _data_->_tmp10_;
	_data_->_tmp11_ = _data_->merger;
	if (_data_->_tmp11_ != NULL) {
		_data_->_tmp12_ = _data_->merger;
		unity_internal_aggregator_scope_impl_category_merger_by_field_map_subscope_categories_from_list (_data_->_tmp12_, _data_->source_scope_id, _data_->categories, _data_->categories_length1);
	} else {
		_data_->_tmp13_ = g_error_new_literal (UNITY_PROTOCOL_SCOPE_ERROR, UNITY_PROTOCOL_SCOPE_ERROR_REQUEST_FAILED, "Merging not implemented");
		_data_->_inner_error_ = _data_->_tmp13_;
		if ((_data_->_inner_error_->domain == G_IO_ERROR) || (_data_->_inner_error_->domain == UNITY_PROTOCOL_SCOPE_ERROR)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			_g_object_unref0 (_data_->merger);
			_g_object_unref0 (_data_->sync);
			_g_object_unref0 (_data_->model_obj);
			_g_object_unref0 (_data_->channel);
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_g_object_unref0 (_data_->merger);
			_g_object_unref0 (_data_->sync);
			_g_object_unref0 (_data_->model_obj);
			_g_object_unref0 (_data_->channel);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
	}
	_data_->_tmp14_ = _data_->model_obj;
	_data_->_tmp15_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp14_, dee_serializable_model_get_type ()) ? ((DeeSerializableModel*) _data_->_tmp14_) : NULL);
	_data_->provider = _data_->_tmp15_;
	_data_->_tmp16_ = _data_->channel;
	_data_->_tmp17_ = _data_->provider;
	unity_internal_scope_channel_register_pushed_model (_data_->_tmp16_, _data_->search_string, _data_->_tmp17_);
	_data_->_tmp18_ = _data_->sync;
	_data_->_tmp19_ = _data_->provider;
	unity_internal_results_synchronizer_add_provider (_data_->_tmp18_, (DeeModel*) _data_->_tmp19_, _data_->source_scope_id);
	_data_->_tmp20_ = _data_->sync;
	_data_->_tmp21_ = _data_->provider;
	unity_internal_results_synchronizer_copy_model (_data_->_tmp20_, (DeeModel*) _data_->_tmp21_);
	_data_->_tmp22_ = g_str_hash;
	_data_->_tmp23_ = g_str_equal;
	_data_->_tmp24_ = g_hash_table_new_full (_data_->_tmp22_, _data_->_tmp23_, _g_free0_, _g_variant_unref0_);
	_data_->_result_ = _data_->_tmp24_;
	_data_->_tmp25_ = _data_->_result_;
	_data_->_tmp26_ = g_strdup (UNITY_INTERNAL_SEARCH_SEQNUM_HINT);
	_data_->_tmp27_ = _data_->channel;
	_data_->_tmp28_ = g_variant_new_uint64 (unity_internal_scope_channel_get_last_seqnum (_data_->_tmp27_));
	g_variant_ref_sink (_data_->_tmp28_);
	g_hash_table_insert (_data_->_tmp25_, _data_->_tmp26_, _data_->_tmp28_);
	_data_->_tmp29_ = _data_->channel;
	_data_->_tmp30_ = _data_->_tmp29_->transfer_model;
	if (_data_->_tmp30_ != NULL) {
		_data_->_tmp31_ = _data_->channel;
		_data_->_tmp32_ = _data_->_tmp31_->transfer_model;
		dee_shared_model_flush_revision_queue (_data_->_tmp32_);
	}
	_data_->result = _data_->_result_;
	_g_object_unref0 (_data_->provider);
	_g_object_unref0 (_data_->merger);
	_g_object_unref0 (_data_->sync);
	_g_object_unref0 (_data_->model_obj);
	_g_object_unref0 (_data_->channel);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


static UnityAggregatorScope*
unity_internal_aggregator_scope_impl_get_owner (UnityInternalAggregatorScopeImpl* self)
{
	UnityAggregatorScope* result;
	UnityAggregatorScope* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_owner;
	result = _tmp0_;
	return result;
}


static void
unity_internal_aggregator_scope_impl_set_owner (UnityInternalAggregatorScopeImpl* self,
                                                UnityAggregatorScope* value)
{
	g_return_if_fail (self != NULL);
	if (unity_internal_aggregator_scope_impl_get_owner (self) != value) {
		self->priv->_owner = value;
		g_object_notify_by_pspec ((GObject *) self, unity_internal_aggregator_scope_impl_properties[UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_OWNER_PROPERTY]);
	}
}


static DeeSerializableModel*
unity_internal_aggregator_scope_impl_real_get_categories_model (UnityInternalScopeDBusImpl* base)
{
	DeeSerializableModel* result;
	UnityInternalAggregatorScopeImpl* self;
	DeeSerializableModel* _tmp0_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_tmp0_ = self->priv->_categories_model;
	result = _tmp0_;
	return result;
}


static void
unity_internal_aggregator_scope_impl_real_set_categories_model (UnityInternalScopeDBusImpl* base,
                                                                DeeSerializableModel* value)
{
	UnityInternalAggregatorScopeImpl* self;
	self = (UnityInternalAggregatorScopeImpl*) base;
	if (unity_internal_aggregator_scope_impl_real_get_categories_model (base) != value) {
		DeeSerializableModel* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_categories_model);
		self->priv->_categories_model = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_internal_aggregator_scope_impl_properties[UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORIES_MODEL_PROPERTY]);
	}
}


static DeeSerializableModel*
unity_internal_aggregator_scope_impl_real_get_filters_model (UnityInternalScopeDBusImpl* base)
{
	DeeSerializableModel* result;
	UnityInternalAggregatorScopeImpl* self;
	DeeSerializableModel* _tmp0_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_tmp0_ = self->priv->_filters_model;
	result = _tmp0_;
	return result;
}


static void
unity_internal_aggregator_scope_impl_real_set_filters_model (UnityInternalScopeDBusImpl* base,
                                                             DeeSerializableModel* value)
{
	UnityInternalAggregatorScopeImpl* self;
	self = (UnityInternalAggregatorScopeImpl*) base;
	if (unity_internal_aggregator_scope_impl_real_get_filters_model (base) != value) {
		DeeSerializableModel* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_filters_model);
		self->priv->_filters_model = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_internal_aggregator_scope_impl_properties[UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_FILTERS_MODEL_PROPERTY]);
	}
}


UnityInternalMergeStrategy*
unity_internal_aggregator_scope_impl_get_merge_strategy (UnityInternalAggregatorScopeImpl* self)
{
	UnityInternalMergeStrategy* result;
	UnityInternalMergeStrategy* _tmp0_ = NULL;
	UnityInternalMergeStrategy* _tmp1_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp1_ = self->priv->_merge_strategy;
	if (_tmp1_ != NULL) {
		UnityInternalMergeStrategy* _tmp2_;
		_tmp2_ = self->priv->_merge_strategy;
		_tmp0_ = _tmp2_;
	} else {
		_tmp0_ = (UnityInternalMergeStrategy*) self;
	}
	result = _tmp0_;
	return result;
}


void
unity_internal_aggregator_scope_impl_set_merge_strategy (UnityInternalAggregatorScopeImpl* self,
                                                         UnityInternalMergeStrategy* value)
{
	UnityInternalMergeStrategy* _tmp0_ = NULL;
	UnityInternalMergeStrategy* _tmp1_;
	g_return_if_fail (self != NULL);
	if (value != self) {
		_tmp0_ = value;
	} else {
		_tmp0_ = NULL;
	}
	_tmp1_ = _g_object_ref0 (_tmp0_);
	_g_object_unref0 (self->priv->_merge_strategy);
	self->priv->_merge_strategy = _tmp1_;
	g_object_notify_by_pspec ((GObject *) self, unity_internal_aggregator_scope_impl_properties[UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_MERGE_STRATEGY_PROPERTY]);
}


UnityProtocolViewType
unity_internal_aggregator_scope_impl_get_view_type (UnityInternalAggregatorScopeImpl* self)
{
	UnityProtocolViewType result;
	UnityProtocolViewType _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->priv->_view_type;
	result = _tmp0_;
	return result;
}


void
unity_internal_aggregator_scope_impl_set_view_type (UnityInternalAggregatorScopeImpl* self,
                                                    UnityProtocolViewType value)
{
	g_return_if_fail (self != NULL);
	if (unity_internal_aggregator_scope_impl_get_view_type (self) != value) {
		self->priv->_view_type = value;
		g_object_notify_by_pspec ((GObject *) self, unity_internal_aggregator_scope_impl_properties[UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_VIEW_TYPE_PROPERTY]);
	}
}


static gint
unity_internal_aggregator_scope_impl_real_get_protocol_version (UnityProtocolScopeService* base)
{
	gint result;
	UnityInternalAggregatorScopeImpl* self;
	self = (UnityInternalAggregatorScopeImpl*) base;
	result = 1;
	return result;
}


static gboolean
unity_internal_aggregator_scope_impl_real_get_visible (UnityProtocolScopeService* base)
{
	gboolean result;
	UnityInternalAggregatorScopeImpl* self;
	UnityAggregatorScope* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_tmp0_ = self->priv->_owner;
	_tmp1_ = unity_deprecated_scope_base_get_visible ((UnityDeprecatedScopeBase*) _tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


static gboolean
unity_internal_aggregator_scope_impl_real_get_is_master (UnityProtocolScopeService* base)
{
	gboolean result;
	UnityInternalAggregatorScopeImpl* self;
	UnityAggregatorScope* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_tmp0_ = self->priv->_owner;
	_tmp1_ = unity_deprecated_scope_base_get_is_master ((UnityDeprecatedScopeBase*) _tmp0_);
	_tmp2_ = _tmp1_;
	result = _tmp2_;
	return result;
}


static gchar*
unity_internal_aggregator_scope_impl_real_get_search_hint (UnityProtocolScopeService* base)
{
	gchar* result;
	UnityInternalAggregatorScopeImpl* self;
	const gchar* _tmp0_ = NULL;
	UnityAggregatorScope* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	gchar* _tmp4_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_tmp1_ = self->priv->_owner;
	_tmp2_ = unity_deprecated_scope_base_get_search_hint ((UnityDeprecatedScopeBase*) _tmp1_);
	_tmp3_ = _tmp2_;
	_tmp0_ = _tmp3_;
	if (_tmp0_ == NULL) {
		_tmp0_ = "";
	}
	_tmp4_ = g_strdup (_tmp0_);
	result = _tmp4_;
	return result;
}


static GHashTable*
unity_internal_aggregator_scope_impl_real_get_metadata (UnityProtocolScopeService* base)
{
	GHashTable* result;
	UnityInternalAggregatorScopeImpl* self;
	UnitySchema* schema = NULL;
	UnityAggregatorScope* _tmp0_;
	UnitySchema* _tmp1_;
	UnitySchema* _tmp2_;
	UnitySchema* _tmp3_;
	GHashTable* required_schema = NULL;
	GHashFunc _tmp4_;
	GEqualFunc _tmp5_;
	GHashTable* _tmp6_;
	UnitySchema* _tmp7_;
	GList* _tmp8_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_tmp0_ = self->priv->_owner;
	_tmp1_ = unity_deprecated_scope_base_get_schema ((UnityDeprecatedScopeBase*) _tmp0_);
	_tmp2_ = _tmp1_;
	_tmp3_ = _g_object_ref0 (_tmp2_);
	schema = _tmp3_;
	_tmp4_ = g_str_hash;
	_tmp5_ = g_str_equal;
	_tmp6_ = g_hash_table_new_full (_tmp4_, _tmp5_, _g_free0_, _g_free0_);
	required_schema = _tmp6_;
	_tmp7_ = schema;
	_tmp8_ = unity_schema_get_fields (_tmp7_);
	{
		GList* field_collection = NULL;
		GList* field_it = NULL;
		field_collection = _tmp8_;
		for (field_it = field_collection; field_it != NULL; field_it = field_it->next) {
			UnitySchemaFieldInfo* field = NULL;
			field = (UnitySchemaFieldInfo*) field_it->data;
			{
				UnitySchemaFieldInfo* _tmp9_;
				UnitySchemaFieldType _tmp10_;
				_tmp9_ = field;
				_tmp10_ = (*_tmp9_).type;
				if (_tmp10_ == UNITY_SCHEMA_FIELD_TYPE_REQUIRED) {
					GHashTable* _tmp11_;
					UnitySchemaFieldInfo* _tmp12_;
					const gchar* _tmp13_;
					gchar* _tmp14_;
					UnitySchemaFieldInfo* _tmp15_;
					const gchar* _tmp16_;
					gchar* _tmp17_;
					_tmp11_ = required_schema;
					_tmp12_ = field;
					_tmp13_ = (*_tmp12_).name;
					_tmp14_ = g_strdup (_tmp13_);
					_tmp15_ = field;
					_tmp16_ = (*_tmp15_).schema;
					_tmp17_ = g_strdup (_tmp16_);
					g_hash_table_insert (_tmp11_, _tmp14_, _tmp17_);
				}
			}
		}
		(field_collection == NULL) ? NULL : (field_collection = (g_list_free (field_collection), NULL));
	}
	result = required_schema;
	_g_object_unref0 (schema);
	return result;
}


static GHashTable*
unity_internal_aggregator_scope_impl_real_get_optional_metadata (UnityProtocolScopeService* base)
{
	GHashTable* result;
	UnityInternalAggregatorScopeImpl* self;
	UnitySchema* schema = NULL;
	UnityAggregatorScope* _tmp0_;
	UnitySchema* _tmp1_;
	UnitySchema* _tmp2_;
	UnitySchema* _tmp3_;
	GHashTable* optional_schema = NULL;
	GHashFunc _tmp4_;
	GEqualFunc _tmp5_;
	GHashTable* _tmp6_;
	UnitySchema* _tmp7_;
	GList* _tmp8_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_tmp0_ = self->priv->_owner;
	_tmp1_ = unity_deprecated_scope_base_get_schema ((UnityDeprecatedScopeBase*) _tmp0_);
	_tmp2_ = _tmp1_;
	_tmp3_ = _g_object_ref0 (_tmp2_);
	schema = _tmp3_;
	_tmp4_ = g_str_hash;
	_tmp5_ = g_str_equal;
	_tmp6_ = g_hash_table_new_full (_tmp4_, _tmp5_, _g_free0_, _g_free0_);
	optional_schema = _tmp6_;
	_tmp7_ = schema;
	_tmp8_ = unity_schema_get_fields (_tmp7_);
	{
		GList* field_collection = NULL;
		GList* field_it = NULL;
		field_collection = _tmp8_;
		for (field_it = field_collection; field_it != NULL; field_it = field_it->next) {
			UnitySchemaFieldInfo* field = NULL;
			field = (UnitySchemaFieldInfo*) field_it->data;
			{
				UnitySchemaFieldInfo* _tmp9_;
				UnitySchemaFieldType _tmp10_;
				_tmp9_ = field;
				_tmp10_ = (*_tmp9_).type;
				if (_tmp10_ == UNITY_SCHEMA_FIELD_TYPE_OPTIONAL) {
					GHashTable* _tmp11_;
					UnitySchemaFieldInfo* _tmp12_;
					const gchar* _tmp13_;
					gchar* _tmp14_;
					UnitySchemaFieldInfo* _tmp15_;
					const gchar* _tmp16_;
					gchar* _tmp17_;
					_tmp11_ = optional_schema;
					_tmp12_ = field;
					_tmp13_ = (*_tmp12_).name;
					_tmp14_ = g_strdup (_tmp13_);
					_tmp15_ = field;
					_tmp16_ = (*_tmp15_).schema;
					_tmp17_ = g_strdup (_tmp16_);
					g_hash_table_insert (_tmp11_, _tmp14_, _tmp17_);
				}
			}
		}
		(field_collection == NULL) ? NULL : (field_collection = (g_list_free (field_collection), NULL));
	}
	result = optional_schema;
	_g_object_unref0 (schema);
	return result;
}


static GVariant*
unity_internal_aggregator_scope_impl_real_get_categories (UnityProtocolScopeService* base)
{
	GVariant* result;
	UnityInternalAggregatorScopeImpl* self;
	DeeSerializableModel* _tmp0_;
	DeeSerializableModel* _tmp1_;
	GVariant* _tmp2_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_tmp0_ = unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self);
	_tmp1_ = _tmp0_;
	_tmp2_ = dee_serializable_serialize ((DeeSerializable*) _tmp1_);
	result = _tmp2_;
	return result;
}


static GVariant*
unity_internal_aggregator_scope_impl_real_get_filters (UnityProtocolScopeService* base)
{
	GVariant* result;
	UnityInternalAggregatorScopeImpl* self;
	DeeSerializableModel* _tmp0_;
	DeeSerializableModel* _tmp1_;
	GVariant* _tmp2_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_tmp0_ = unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self);
	_tmp1_ = _tmp0_;
	_tmp2_ = dee_serializable_serialize ((DeeSerializable*) _tmp1_);
	result = _tmp2_;
	return result;
}


static GHashTable*
unity_internal_aggregator_scope_impl_real_get_hints (UnityProtocolScopeService* base)
{
	GHashTable* result;
	UnityInternalAggregatorScopeImpl* self;
	GHashTable* _tmp0_;
	self = (UnityInternalAggregatorScopeImpl*) base;
	_tmp0_ = g_hash_table_new_full (NULL, NULL, _g_free0_, _g_variant_unref0_);
	result = _tmp0_;
	return result;
}


static void
_g_object_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_object_unref (var), NULL));
}


static void
_unity_internal_aggregator_scope_impl_on_results_invalidated_unity_internal_scope_tracker_results_invalidated (UnityInternalScopeTracker* _sender,
                                                                                                               UnityInternalChannelUpdateFlags update_flags,
                                                                                                               gpointer self)
{
	unity_internal_aggregator_scope_impl_on_results_invalidated ((UnityInternalAggregatorScopeImpl*) self, update_flags);
}


static void
_unity_internal_aggregator_scope_impl_on_proxy_categories_changed_unity_internal_scope_tracker_proxy_category_model_changed (UnityInternalScopeTracker* _sender,
                                                                                                                             const gchar* scope_id,
                                                                                                                             UnityProtocolScopeProxy* scope_proxy,
                                                                                                                             gpointer self)
{
	unity_internal_aggregator_scope_impl_on_proxy_categories_changed ((UnityInternalAggregatorScopeImpl*) self, scope_id, scope_proxy);
}


static GObject *
unity_internal_aggregator_scope_impl_constructor (GType type,
                                                  guint n_construct_properties,
                                                  GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	UnityInternalAggregatorScopeImpl * self;
	GRand* _tmp0_;
	GHashFunc _tmp1_;
	GEqualFunc _tmp2_;
	GHashTable* _tmp3_;
	UnityInternalScopeTracker* _tmp4_;
	UnityInternalScopeTracker* _tmp5_;
	UnityInternalScopeTracker* _tmp6_;
	parent_class = G_OBJECT_CLASS (unity_internal_aggregator_scope_impl_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_INTERNAL_TYPE_AGGREGATOR_SCOPE_IMPL, UnityInternalAggregatorScopeImpl);
	_tmp0_ = g_rand_new ();
	_g_rand_free0 (self->priv->_rand);
	self->priv->_rand = _tmp0_;
	_tmp1_ = g_str_hash;
	_tmp2_ = g_str_equal;
	_tmp3_ = g_hash_table_new_full (_tmp1_, _tmp2_, _g_free0_, _g_object_unref0_);
	_g_hash_table_unref0 (self->priv->_channels);
	self->priv->_channels = _tmp3_;
	_tmp4_ = unity_internal_scope_tracker_new ();
	_g_object_unref0 (self->priv->_scopes);
	self->priv->_scopes = _tmp4_;
	_tmp5_ = self->priv->_scopes;
	g_signal_connect_object (_tmp5_, "results-invalidated", (GCallback) _unity_internal_aggregator_scope_impl_on_results_invalidated_unity_internal_scope_tracker_results_invalidated, self, 0);
	_tmp6_ = self->priv->_scopes;
	g_signal_connect_object (_tmp6_, "proxy-category-model-changed", (GCallback) _unity_internal_aggregator_scope_impl_on_proxy_categories_changed_unity_internal_scope_tracker_proxy_category_model_changed, self, 0);
	unity_internal_aggregator_scope_impl_set_merge_strategy (self, (UnityInternalMergeStrategy*) self);
	unity_internal_aggregator_scope_impl_create_models (self);
	return obj;
}


static gint
unity_internal_aggregator_scope_impl_category_merger_real_remap (UnityInternalAggregatorScopeImplCategoryMerger* self,
                                                                 const gchar* scope_id,
                                                                 guint32 category_index)
{
	gint _tmp0_ = 0;
	g_critical ("Type `%s' does not implement abstract method `unity_internal_aggregator_scope_impl_category_merger_remap'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
	return _tmp0_;
}


gint
unity_internal_aggregator_scope_impl_category_merger_remap (UnityInternalAggregatorScopeImplCategoryMerger* self,
                                                            const gchar* scope_id,
                                                            guint32 category_index)
{
	g_return_val_if_fail (self != NULL, 0);
	return UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_GET_CLASS (self)->remap (self, scope_id, category_index);
}


static gboolean
unity_internal_aggregator_scope_impl_category_merger_real_merge_metadata (UnityInternalAggregatorScopeImplCategoryMerger* self,
                                                                          const gchar* scope_id,
                                                                          DeeModel* categories,
                                                                          DeeModel* master_categories)
{
	gboolean _tmp0_ = FALSE;
	g_critical ("Type `%s' does not implement abstract method `unity_internal_aggregator_scope_impl_category_merger_merge_metadata'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
	return _tmp0_;
}


gboolean
unity_internal_aggregator_scope_impl_category_merger_merge_metadata (UnityInternalAggregatorScopeImplCategoryMerger* self,
                                                                     const gchar* scope_id,
                                                                     DeeModel* categories,
                                                                     DeeModel* master_categories)
{
	g_return_val_if_fail (self != NULL, FALSE);
	return UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_GET_CLASS (self)->merge_metadata (self, scope_id, categories, master_categories);
}


static gboolean
unity_internal_aggregator_scope_impl_category_merger_contains_progress_source (GVariant** values,
                                                                               int values_length1,
                                                                               GVariant* psvar)
{
	gboolean result = FALSE;
	const gchar* ps = NULL;
	const gchar* _tmp0_;
	g_return_val_if_fail (psvar != NULL, FALSE);
	_tmp0_ = g_variant_get_string (psvar, NULL);
	ps = _tmp0_;
	{
		GVariant** v_collection = NULL;
		gint v_collection_length1 = 0;
		gint _v_collection_size_ = 0;
		gint v_it = 0;
		v_collection = values;
		v_collection_length1 = values_length1;
		for (v_it = 0; v_it < values_length1; v_it = v_it + 1) {
			GVariant* _tmp1_;
			GVariant* v = NULL;
			_tmp1_ = _g_variant_ref0 (v_collection[v_it]);
			v = _tmp1_;
			{
				GVariant* _tmp2_;
				const gchar* _tmp3_;
				const gchar* _tmp4_;
				_tmp2_ = v;
				_tmp3_ = g_variant_get_string (_tmp2_, NULL);
				_tmp4_ = ps;
				if (g_strcmp0 (_tmp3_, _tmp4_) == 0) {
					result = TRUE;
					_g_variant_unref0 (v);
					return result;
				}
				_g_variant_unref0 (v);
			}
		}
	}
	result = FALSE;
	return result;
}


static void
_vala_array_add7 (GVariant** * array,
                  int* length,
                  int* size,
                  GVariant* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (GVariant*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


static void
_vala_array_add8 (GVariant** * array,
                  int* length,
                  int* size,
                  GVariant* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (GVariant*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


static gboolean
unity_internal_aggregator_scope_impl_category_merger_merge_progress_source (GVariant** values,
                                                                            int values_length1,
                                                                            GHashTable* hints)
{
	gboolean result = FALSE;
	GVariant** master_ps = NULL;
	GVariant** _tmp0_;
	gint master_ps_length1;
	gint _master_ps_size_;
	GVariant* val = NULL;
	gconstpointer _tmp1_;
	GVariant* _tmp2_;
	GVariant* _tmp3_;
	gchar* _tmp22_;
	GVariant** _tmp23_;
	gint _tmp23__length1;
	GVariant* _tmp24_;
	g_return_val_if_fail (hints != NULL, FALSE);
	if (values_length1 == 0) {
		result = FALSE;
		return result;
	}
	_tmp0_ = g_new0 (GVariant*, 0 + 1);
	master_ps = _tmp0_;
	master_ps_length1 = 0;
	_master_ps_size_ = master_ps_length1;
	_tmp1_ = g_hash_table_lookup (hints, "progress-source");
	_tmp2_ = _g_variant_ref0 ((GVariant*) _tmp1_);
	val = _tmp2_;
	_tmp3_ = val;
	if (_tmp3_ != NULL) {
		{
			gint i = 0;
			i = 0;
			{
				gboolean _tmp4_ = FALSE;
				_tmp4_ = TRUE;
				while (TRUE) {
					gint _tmp6_;
					GVariant* _tmp7_;
					GVariant* ps = NULL;
					GVariant* _tmp8_;
					gint _tmp9_;
					GVariant* _tmp10_;
					GVariant** _tmp11_;
					gint _tmp11__length1;
					GVariant* _tmp12_;
					if (!_tmp4_) {
						gint _tmp5_;
						_tmp5_ = i;
						i = _tmp5_ + 1;
					}
					_tmp4_ = FALSE;
					_tmp6_ = i;
					_tmp7_ = val;
					if (!(((gsize) _tmp6_) < g_variant_n_children (_tmp7_))) {
						break;
					}
					_tmp8_ = val;
					_tmp9_ = i;
					_tmp10_ = g_variant_get_child_value (_tmp8_, (gsize) _tmp9_);
					ps = _tmp10_;
					_tmp11_ = master_ps;
					_tmp11__length1 = master_ps_length1;
					_tmp12_ = ps;
					if (!unity_internal_aggregator_scope_impl_category_merger_contains_progress_source (_tmp11_, _tmp11__length1, _tmp12_)) {
						GVariant** _tmp13_;
						gint _tmp13__length1;
						GVariant* _tmp14_;
						GVariant* _tmp15_;
						_tmp13_ = master_ps;
						_tmp13__length1 = master_ps_length1;
						_tmp14_ = ps;
						_tmp15_ = _g_variant_ref0 (_tmp14_);
						_vala_array_add7 (&master_ps, &master_ps_length1, &_master_ps_size_, _tmp15_);
					}
					_g_variant_unref0 (ps);
				}
			}
		}
	}
	{
		GVariant** ps_collection = NULL;
		gint ps_collection_length1 = 0;
		gint _ps_collection_size_ = 0;
		gint ps_it = 0;
		ps_collection = values;
		ps_collection_length1 = values_length1;
		for (ps_it = 0; ps_it < values_length1; ps_it = ps_it + 1) {
			GVariant* _tmp16_;
			GVariant* ps = NULL;
			_tmp16_ = _g_variant_ref0 (ps_collection[ps_it]);
			ps = _tmp16_;
			{
				GVariant** _tmp17_;
				gint _tmp17__length1;
				GVariant* _tmp18_;
				_tmp17_ = master_ps;
				_tmp17__length1 = master_ps_length1;
				_tmp18_ = ps;
				if (!unity_internal_aggregator_scope_impl_category_merger_contains_progress_source (_tmp17_, _tmp17__length1, _tmp18_)) {
					GVariant** _tmp19_;
					gint _tmp19__length1;
					GVariant* _tmp20_;
					GVariant* _tmp21_;
					_tmp19_ = master_ps;
					_tmp19__length1 = master_ps_length1;
					_tmp20_ = ps;
					_tmp21_ = _g_variant_ref0 (_tmp20_);
					_vala_array_add8 (&master_ps, &master_ps_length1, &_master_ps_size_, _tmp21_);
				}
				_g_variant_unref0 (ps);
			}
		}
	}
	_tmp22_ = g_strdup ("progress-source");
	_tmp23_ = master_ps;
	_tmp23__length1 = master_ps_length1;
	_tmp24_ = g_variant_new_array (NULL, _tmp23_, _tmp23__length1);
	g_variant_ref_sink (_tmp24_);
	g_hash_table_insert (hints, _tmp22_, _tmp24_);
	result = TRUE;
	_g_variant_unref0 (val);
	master_ps = (_vala_array_free (master_ps, master_ps_length1, (GDestroyNotify) g_variant_unref), NULL);
	return result;
}


static UnityInternalAggregatorScopeImplCategoryMerger*
unity_internal_aggregator_scope_impl_category_merger_construct (GType object_type)
{
	UnityInternalAggregatorScopeImplCategoryMerger * self = NULL;
	self = (UnityInternalAggregatorScopeImplCategoryMerger*) g_object_new (object_type, NULL);
	return self;
}


static void
unity_internal_aggregator_scope_impl_category_merger_class_init (UnityInternalAggregatorScopeImplCategoryMergerClass * klass)
{
	unity_internal_aggregator_scope_impl_category_merger_parent_class = g_type_class_peek_parent (klass);
	((UnityInternalAggregatorScopeImplCategoryMergerClass *) klass)->remap = (gint (*) (UnityInternalAggregatorScopeImplCategoryMerger *, const gchar*, guint32)) unity_internal_aggregator_scope_impl_category_merger_real_remap;
	((UnityInternalAggregatorScopeImplCategoryMergerClass *) klass)->merge_metadata = (gboolean (*) (UnityInternalAggregatorScopeImplCategoryMerger *, const gchar*, DeeModel*, DeeModel*)) unity_internal_aggregator_scope_impl_category_merger_real_merge_metadata;
	G_OBJECT_CLASS (klass)->finalize = unity_internal_aggregator_scope_impl_category_merger_finalize;
}


static void
unity_internal_aggregator_scope_impl_category_merger_instance_init (UnityInternalAggregatorScopeImplCategoryMerger * self)
{
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	_tmp0_ = g_str_hash;
	_tmp1_ = g_str_equal;
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, NULL);
	self->category_map = _tmp2_;
}


static void
unity_internal_aggregator_scope_impl_category_merger_finalize (GObject * obj)
{
	UnityInternalAggregatorScopeImplCategoryMerger * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER, UnityInternalAggregatorScopeImplCategoryMerger);
	_g_hash_table_unref0 (self->category_map);
	G_OBJECT_CLASS (unity_internal_aggregator_scope_impl_category_merger_parent_class)->finalize (obj);
}


static GType
unity_internal_aggregator_scope_impl_category_merger_get_type (void)
{
	static volatile gsize unity_internal_aggregator_scope_impl_category_merger_type_id__volatile = 0;
	if (g_once_init_enter (&unity_internal_aggregator_scope_impl_category_merger_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityInternalAggregatorScopeImplCategoryMergerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_internal_aggregator_scope_impl_category_merger_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityInternalAggregatorScopeImplCategoryMerger), 0, (GInstanceInitFunc) unity_internal_aggregator_scope_impl_category_merger_instance_init, NULL };
		GType unity_internal_aggregator_scope_impl_category_merger_type_id;
		unity_internal_aggregator_scope_impl_category_merger_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityInternalAggregatorScopeImplCategoryMerger", &g_define_type_info, G_TYPE_FLAG_ABSTRACT);
		g_once_init_leave (&unity_internal_aggregator_scope_impl_category_merger_type_id__volatile, unity_internal_aggregator_scope_impl_category_merger_type_id);
	}
	return unity_internal_aggregator_scope_impl_category_merger_type_id__volatile;
}


static void
unity_internal_aggregator_scope_impl_category_merger_by_scope_add_scope_mapping (UnityInternalAggregatorScopeImplCategoryMergerByScope* self,
                                                                                 UnityAggregatorScope* scope,
                                                                                 const gchar* scope_id)
{
	gint idx = 0;
	gint _tmp0_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (scope != NULL);
	g_return_if_fail (scope_id != NULL);
	idx = unity_aggregator_scope_category_index_for_scope_id (scope, scope_id);
	_tmp0_ = idx;
	if (_tmp0_ >= 0) {
		GHashTable* _tmp1_;
		gchar* _tmp2_;
		gint _tmp3_;
		_tmp1_ = ((UnityInternalAggregatorScopeImplCategoryMerger*) self)->category_map;
		_tmp2_ = g_strdup (scope_id);
		_tmp3_ = idx;
		g_hash_table_insert (_tmp1_, _tmp2_, (gpointer) ((gintptr) _tmp3_));
	}
}


static gint
unity_internal_aggregator_scope_impl_category_merger_by_scope_real_remap (UnityInternalAggregatorScopeImplCategoryMerger* base,
                                                                          const gchar* scope_id,
                                                                          guint32 category_index)
{
	UnityInternalAggregatorScopeImplCategoryMergerByScope * self;
	gint result = 0;
	GHashTable* _tmp0_;
	self = (UnityInternalAggregatorScopeImplCategoryMergerByScope*) base;
	g_return_val_if_fail (scope_id != NULL, 0);
	_tmp0_ = ((UnityInternalAggregatorScopeImplCategoryMerger*) self)->category_map;
	if (g_hash_table_contains (_tmp0_, scope_id)) {
		GHashTable* _tmp1_;
		gconstpointer _tmp2_;
		_tmp1_ = ((UnityInternalAggregatorScopeImplCategoryMerger*) self)->category_map;
		_tmp2_ = g_hash_table_lookup (_tmp1_, scope_id);
		result = (gint) ((gintptr) _tmp2_);
		return result;
	}
	g_warning ("unity-aggregator-scope-private.vala:97: No category mapping for %s", scope_id);
	result = -1;
	return result;
}


static void
_vala_array_add9 (GVariant** * array,
                  int* length,
                  int* size,
                  GVariant* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (GVariant*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


static GHashTable*
_variant_get38 (GVariant* value)
{
	GHashTable* _tmp29_;
	GVariantIter _tmp30_;
	GVariant* _tmp31_;
	GVariant* _tmp32_;
	_tmp29_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
	g_variant_iter_init (&_tmp30_, value);
	while (g_variant_iter_loop (&_tmp30_, "{?*}", &_tmp31_, &_tmp32_)) {
		g_hash_table_insert (_tmp29_, g_variant_dup_string (_tmp31_, NULL), g_variant_get_variant (_tmp32_));
	}
	return _tmp29_;
}


static gboolean
unity_internal_aggregator_scope_impl_category_merger_by_scope_real_merge_metadata (UnityInternalAggregatorScopeImplCategoryMerger* base,
                                                                                   const gchar* scope_id,
                                                                                   DeeModel* categories_model,
                                                                                   DeeModel* master_categories)
{
	UnityInternalAggregatorScopeImplCategoryMergerByScope * self;
	gboolean result = FALSE;
	gboolean changed = FALSE;
	gint cat_index = 0;
	gint _tmp0_;
	self = (UnityInternalAggregatorScopeImplCategoryMergerByScope*) base;
	g_return_val_if_fail (scope_id != NULL, FALSE);
	g_return_val_if_fail (categories_model != NULL, FALSE);
	g_return_val_if_fail (master_categories != NULL, FALSE);
	changed = FALSE;
	cat_index = unity_internal_aggregator_scope_impl_category_merger_remap ((UnityInternalAggregatorScopeImplCategoryMerger*) self, scope_id, (guint32) 0);
	_tmp0_ = cat_index;
	if (_tmp0_ >= 0) {
		DeeModelIter* miter = NULL;
		gint _tmp1_;
		DeeModelIter* _tmp2_;
		DeeModelIter* _tmp3_;
		DeeModelIter* _tmp4_;
		_tmp1_ = cat_index;
		_tmp2_ = dee_model_get_iter_at_row (master_categories, (guint) _tmp1_);
		miter = _tmp2_;
		_tmp3_ = miter;
		_tmp4_ = dee_model_get_last_iter (master_categories);
		if (_tmp3_ != _tmp4_) {
			GVariant** master_ps = NULL;
			GVariant** _tmp5_;
			gint master_ps_length1;
			gint _master_ps_size_;
			DeeModelIter* iter = NULL;
			DeeModelIter* _tmp6_;
			DeeModelIter* end_iter = NULL;
			DeeModelIter* _tmp7_;
			GHashTable* master_hints = NULL;
			DeeModelIter* _tmp25_;
			GVariant* _tmp26_;
			GVariant* _tmp27_;
			GHashTable* _tmp28_;
			GHashTable* _tmp33_;
			GVariant** _tmp34_;
			gint _tmp34__length1;
			GHashTable* _tmp35_;
			DeeModelIter* _tmp36_;
			GHashTable* _tmp37_;
			GVariant* _tmp38_;
			GVariant* _tmp39_;
			_tmp5_ = g_new0 (GVariant*, 0 + 1);
			master_ps = _tmp5_;
			master_ps_length1 = 0;
			_master_ps_size_ = master_ps_length1;
			_tmp6_ = dee_model_get_first_iter (categories_model);
			iter = _tmp6_;
			_tmp7_ = dee_model_get_last_iter (categories_model);
			end_iter = _tmp7_;
			while (TRUE) {
				DeeModelIter* _tmp8_;
				DeeModelIter* _tmp9_;
				GVariant* hints = NULL;
				DeeModelIter* _tmp10_;
				GVariant* _tmp11_;
				GVariant* val = NULL;
				GVariant* _tmp12_;
				GVariant* _tmp13_;
				GVariant* _tmp14_;
				DeeModelIter* _tmp23_;
				DeeModelIter* _tmp24_;
				_tmp8_ = iter;
				_tmp9_ = end_iter;
				if (!(_tmp8_ != _tmp9_)) {
					break;
				}
				_tmp10_ = iter;
				_tmp11_ = dee_model_get_value (categories_model, _tmp10_, (guint) UNITY_INTERNAL_CATEGORY_COLUMN_HINTS);
				hints = _tmp11_;
				_tmp12_ = hints;
				_tmp13_ = g_variant_lookup_value (_tmp12_, "progress-source", NULL);
				val = _tmp13_;
				_tmp14_ = val;
				if (_tmp14_ != NULL) {
					{
						gint i = 0;
						i = 0;
						{
							gboolean _tmp15_ = FALSE;
							_tmp15_ = TRUE;
							while (TRUE) {
								gint _tmp17_;
								GVariant* _tmp18_;
								GVariant** _tmp19_;
								gint _tmp19__length1;
								GVariant* _tmp20_;
								gint _tmp21_;
								GVariant* _tmp22_;
								if (!_tmp15_) {
									gint _tmp16_;
									_tmp16_ = i;
									i = _tmp16_ + 1;
								}
								_tmp15_ = FALSE;
								_tmp17_ = i;
								_tmp18_ = val;
								if (!(((gsize) _tmp17_) < g_variant_n_children (_tmp18_))) {
									break;
								}
								_tmp19_ = master_ps;
								_tmp19__length1 = master_ps_length1;
								_tmp20_ = val;
								_tmp21_ = i;
								_tmp22_ = g_variant_get_child_value (_tmp20_, (gsize) _tmp21_);
								_vala_array_add9 (&master_ps, &master_ps_length1, &_master_ps_size_, _tmp22_);
							}
						}
					}
				}
				_tmp23_ = iter;
				_tmp24_ = dee_model_next (categories_model, _tmp23_);
				iter = _tmp24_;
				_g_variant_unref0 (val);
				_g_variant_unref0 (hints);
			}
			_tmp25_ = miter;
			_tmp26_ = dee_model_get_value (master_categories, _tmp25_, (guint) UNITY_INTERNAL_CATEGORY_COLUMN_HINTS);
			_tmp27_ = _tmp26_;
			_tmp28_ = _variant_get38 (_tmp27_);
			_tmp33_ = _tmp28_;
			_g_variant_unref0 (_tmp27_);
			master_hints = _tmp33_;
			_tmp34_ = master_ps;
			_tmp34__length1 = master_ps_length1;
			_tmp35_ = master_hints;
			changed = unity_internal_aggregator_scope_impl_category_merger_merge_progress_source (_tmp34_, _tmp34__length1, _tmp35_);
			_tmp36_ = miter;
			_tmp37_ = master_hints;
			_tmp38_ = unity_internal_utils_hash_table_to_asv (_tmp37_);
			_tmp39_ = _tmp38_;
			dee_model_set_value (master_categories, _tmp36_, (guint) UNITY_INTERNAL_CATEGORY_COLUMN_HINTS, _tmp39_);
			_g_variant_unref0 (_tmp39_);
			_g_hash_table_unref0 (master_hints);
			master_ps = (_vala_array_free (master_ps, master_ps_length1, (GDestroyNotify) g_variant_unref), NULL);
		}
	}
	result = changed;
	return result;
}


static UnityInternalAggregatorScopeImplCategoryMergerByScope*
unity_internal_aggregator_scope_impl_category_merger_by_scope_construct (GType object_type)
{
	UnityInternalAggregatorScopeImplCategoryMergerByScope * self = NULL;
	self = (UnityInternalAggregatorScopeImplCategoryMergerByScope*) unity_internal_aggregator_scope_impl_category_merger_construct (object_type);
	return self;
}


static UnityInternalAggregatorScopeImplCategoryMergerByScope*
unity_internal_aggregator_scope_impl_category_merger_by_scope_new (void)
{
	return unity_internal_aggregator_scope_impl_category_merger_by_scope_construct (UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_SCOPE);
}


static void
unity_internal_aggregator_scope_impl_category_merger_by_scope_class_init (UnityInternalAggregatorScopeImplCategoryMergerByScopeClass * klass)
{
	unity_internal_aggregator_scope_impl_category_merger_by_scope_parent_class = g_type_class_peek_parent (klass);
	((UnityInternalAggregatorScopeImplCategoryMergerClass *) klass)->remap = (gint (*) (UnityInternalAggregatorScopeImplCategoryMerger *, const gchar*, guint32)) unity_internal_aggregator_scope_impl_category_merger_by_scope_real_remap;
	((UnityInternalAggregatorScopeImplCategoryMergerClass *) klass)->merge_metadata = (gboolean (*) (UnityInternalAggregatorScopeImplCategoryMerger *, const gchar*, DeeModel*, DeeModel*)) unity_internal_aggregator_scope_impl_category_merger_by_scope_real_merge_metadata;
}


static void
unity_internal_aggregator_scope_impl_category_merger_by_scope_instance_init (UnityInternalAggregatorScopeImplCategoryMergerByScope * self)
{
}


static GType
unity_internal_aggregator_scope_impl_category_merger_by_scope_get_type (void)
{
	static volatile gsize unity_internal_aggregator_scope_impl_category_merger_by_scope_type_id__volatile = 0;
	if (g_once_init_enter (&unity_internal_aggregator_scope_impl_category_merger_by_scope_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityInternalAggregatorScopeImplCategoryMergerByScopeClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_internal_aggregator_scope_impl_category_merger_by_scope_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityInternalAggregatorScopeImplCategoryMergerByScope), 0, (GInstanceInitFunc) unity_internal_aggregator_scope_impl_category_merger_by_scope_instance_init, NULL };
		GType unity_internal_aggregator_scope_impl_category_merger_by_scope_type_id;
		unity_internal_aggregator_scope_impl_category_merger_by_scope_type_id = g_type_register_static (UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER, "UnityInternalAggregatorScopeImplCategoryMergerByScope", &g_define_type_info, 0);
		g_once_init_leave (&unity_internal_aggregator_scope_impl_category_merger_by_scope_type_id__volatile, unity_internal_aggregator_scope_impl_category_merger_by_scope_type_id);
	}
	return unity_internal_aggregator_scope_impl_category_merger_by_scope_type_id__volatile;
}


static void
_g_hash_table_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL));
}


static UnityInternalAggregatorScopeImplCategoryMergerByField*
unity_internal_aggregator_scope_impl_category_merger_by_field_construct (GType object_type,
                                                                         DeeSerializableModel* master_categories_model,
                                                                         guint column_index)
{
	UnityInternalAggregatorScopeImplCategoryMergerByField * self = NULL;
	gint count = 0;
	DeeModelIter* iter = NULL;
	DeeModelIter* _tmp0_;
	DeeModelIter* end_iter = NULL;
	DeeModelIter* _tmp1_;
	g_return_val_if_fail (master_categories_model != NULL, NULL);
	self = (UnityInternalAggregatorScopeImplCategoryMergerByField*) unity_internal_aggregator_scope_impl_category_merger_construct (object_type);
	self->priv->column_index = column_index;
	count = 0;
	_tmp0_ = dee_model_get_first_iter ((DeeModel*) master_categories_model);
	iter = _tmp0_;
	_tmp1_ = dee_model_get_last_iter ((DeeModel*) master_categories_model);
	end_iter = _tmp1_;
	while (TRUE) {
		DeeModelIter* _tmp2_;
		DeeModelIter* _tmp3_;
		gchar* name = NULL;
		DeeModelIter* _tmp4_;
		const gchar* _tmp5_;
		gchar* _tmp6_;
		GHashTable* _tmp7_;
		const gchar* _tmp8_;
		DeeModelIter* _tmp14_;
		DeeModelIter* _tmp15_;
		_tmp2_ = iter;
		_tmp3_ = end_iter;
		if (!(_tmp2_ != _tmp3_)) {
			break;
		}
		_tmp4_ = iter;
		_tmp5_ = dee_model_get_string ((DeeModel*) master_categories_model, _tmp4_, column_index);
		_tmp6_ = g_strdup (_tmp5_);
		name = _tmp6_;
		_tmp7_ = ((UnityInternalAggregatorScopeImplCategoryMerger*) self)->category_map;
		_tmp8_ = name;
		if (g_hash_table_contains (_tmp7_, _tmp8_)) {
			const gchar* _tmp9_;
			_tmp9_ = name;
			g_warning ("unity-aggregator-scope-private.vala:153: Duplicated category name: %s", _tmp9_);
		} else {
			GHashTable* _tmp10_;
			const gchar* _tmp11_;
			gchar* _tmp12_;
			gint _tmp13_;
			_tmp10_ = ((UnityInternalAggregatorScopeImplCategoryMerger*) self)->category_map;
			_tmp11_ = name;
			_tmp12_ = g_strdup (_tmp11_);
			_tmp13_ = count;
			count = _tmp13_ + 1;
			g_hash_table_insert (_tmp10_, _tmp12_, (gpointer) ((gintptr) _tmp13_));
		}
		_tmp14_ = iter;
		_tmp15_ = dee_model_next ((DeeModel*) master_categories_model, _tmp14_);
		iter = _tmp15_;
		_g_free0 (name);
	}
	return self;
}


static UnityInternalAggregatorScopeImplCategoryMergerByField*
unity_internal_aggregator_scope_impl_category_merger_by_field_new (DeeSerializableModel* master_categories_model,
                                                                   guint column_index)
{
	return unity_internal_aggregator_scope_impl_category_merger_by_field_construct (UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_FIELD, master_categories_model, column_index);
}


/**
     * Creates mapping for given subscope and its categories to aggregator scope category indexes
     */
static void
_vala_array_add10 (gchar** * array,
                   int* length,
                   int* size,
                   gchar* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (gchar*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


static void
unity_internal_aggregator_scope_impl_category_merger_by_field_map_subscope_categories (UnityInternalAggregatorScopeImplCategoryMergerByField* self,
                                                                                       const gchar* scope_id,
                                                                                       DeeSerializableModel* categories_model)
{
	gchar** categories = NULL;
	gchar** _tmp0_;
	gint categories_length1;
	gint _categories_size_;
	DeeModelIter* iter = NULL;
	DeeModelIter* _tmp1_;
	DeeModelIter* end_iter = NULL;
	DeeModelIter* _tmp2_;
	gchar** _tmp14_;
	gint _tmp14__length1;
	g_return_if_fail (self != NULL);
	g_return_if_fail (scope_id != NULL);
	g_return_if_fail (categories_model != NULL);
	_tmp0_ = g_new0 (gchar*, 0 + 1);
	categories = _tmp0_;
	categories_length1 = 0;
	_categories_size_ = categories_length1;
	_tmp1_ = dee_model_get_first_iter ((DeeModel*) categories_model);
	iter = _tmp1_;
	_tmp2_ = dee_model_get_last_iter ((DeeModel*) categories_model);
	end_iter = _tmp2_;
	while (TRUE) {
		DeeModelIter* _tmp3_;
		DeeModelIter* _tmp4_;
		gchar* cat_id = NULL;
		DeeModelIter* _tmp5_;
		guint _tmp6_;
		const gchar* _tmp7_;
		gchar* _tmp8_;
		gchar** _tmp9_;
		gint _tmp9__length1;
		const gchar* _tmp10_;
		gchar* _tmp11_;
		DeeModelIter* _tmp12_;
		DeeModelIter* _tmp13_;
		_tmp3_ = iter;
		_tmp4_ = end_iter;
		if (!(_tmp3_ != _tmp4_)) {
			break;
		}
		_tmp5_ = iter;
		_tmp6_ = self->priv->column_index;
		_tmp7_ = dee_model_get_string ((DeeModel*) categories_model, _tmp5_, _tmp6_);
		_tmp8_ = g_strdup (_tmp7_);
		cat_id = _tmp8_;
		_tmp9_ = categories;
		_tmp9__length1 = categories_length1;
		_tmp10_ = cat_id;
		_tmp11_ = g_strdup (_tmp10_);
		_vala_array_add10 (&categories, &categories_length1, &_categories_size_, _tmp11_);
		_tmp12_ = iter;
		_tmp13_ = dee_model_next ((DeeModel*) categories_model, _tmp12_);
		iter = _tmp13_;
		_g_free0 (cat_id);
	}
	_tmp14_ = categories;
	_tmp14__length1 = categories_length1;
	unity_internal_aggregator_scope_impl_category_merger_by_field_map_subscope_categories_from_list (self, scope_id, _tmp14_, _tmp14__length1);
	categories = (_vala_array_free (categories, categories_length1, (GDestroyNotify) g_free), NULL);
}


static void
unity_internal_aggregator_scope_impl_category_merger_by_field_map_subscope_categories_from_list (UnityInternalAggregatorScopeImplCategoryMergerByField* self,
                                                                                                 const gchar* scope_id,
                                                                                                 gchar** categories,
                                                                                                 int categories_length1)
{
	gint count = 0;
	GHashTable* subscope_category_map = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	GHashTable* _tmp2_;
	GHashTable* _tmp3_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (scope_id != NULL);
	count = 0;
	_tmp0_ = self->priv->subscopes;
	_tmp1_ = g_hash_table_lookup (_tmp0_, scope_id);
	_tmp2_ = _g_hash_table_ref0 ((GHashTable*) _tmp1_);
	subscope_category_map = _tmp2_;
	_tmp3_ = subscope_category_map;
	if (_tmp3_ == NULL) {
		GHashFunc _tmp4_;
		GEqualFunc _tmp5_;
		GHashTable* _tmp6_;
		GHashTable* _tmp7_;
		gchar* _tmp8_;
		GHashTable* _tmp9_;
		GHashTable* _tmp10_;
		_tmp4_ = g_direct_hash;
		_tmp5_ = g_direct_equal;
		_tmp6_ = g_hash_table_new_full (_tmp4_, _tmp5_, NULL, NULL);
		_g_hash_table_unref0 (subscope_category_map);
		subscope_category_map = _tmp6_;
		_tmp7_ = self->priv->subscopes;
		_tmp8_ = g_strdup (scope_id);
		_tmp9_ = subscope_category_map;
		_tmp10_ = _g_hash_table_ref0 (_tmp9_);
		g_hash_table_insert (_tmp7_, _tmp8_, _tmp10_);
	}
	{
		gchar** cat_id_collection = NULL;
		gint cat_id_collection_length1 = 0;
		gint _cat_id_collection_size_ = 0;
		gint cat_id_it = 0;
		cat_id_collection = categories;
		cat_id_collection_length1 = categories_length1;
		for (cat_id_it = 0; cat_id_it < categories_length1; cat_id_it = cat_id_it + 1) {
			gchar* _tmp11_;
			gchar* cat_id = NULL;
			_tmp11_ = g_strdup (cat_id_collection[cat_id_it]);
			cat_id = _tmp11_;
			{
				GHashTable* _tmp12_;
				const gchar* _tmp13_;
				_tmp12_ = ((UnityInternalAggregatorScopeImplCategoryMerger*) self)->category_map;
				_tmp13_ = cat_id;
				if (g_hash_table_contains (_tmp12_, _tmp13_)) {
					gint cat_idx = 0;
					GHashTable* _tmp14_;
					const gchar* _tmp15_;
					gconstpointer _tmp16_;
					GHashTable* _tmp17_;
					gint _tmp18_;
					gint _tmp19_;
					_tmp14_ = ((UnityInternalAggregatorScopeImplCategoryMerger*) self)->category_map;
					_tmp15_ = cat_id;
					_tmp16_ = g_hash_table_lookup (_tmp14_, _tmp15_);
					cat_idx = (gint) ((gintptr) _tmp16_);
					_tmp17_ = subscope_category_map;
					_tmp18_ = count;
					count = _tmp18_ + 1;
					_tmp19_ = cat_idx;
					g_hash_table_insert (_tmp17_, (gpointer) ((gintptr) _tmp18_), (gpointer) ((gintptr) _tmp19_));
				} else {
					const gchar* _tmp20_;
					_tmp20_ = cat_id;
					g_warning ("unity-aggregator-scope-private.vala:198: Subscope '%s' category '%s' n" \
"ot present in aggregator scope model", scope_id, _tmp20_);
				}
				_g_free0 (cat_id);
			}
		}
	}
	_g_hash_table_unref0 (subscope_category_map);
}


static gint
unity_internal_aggregator_scope_impl_category_merger_by_field_real_remap (UnityInternalAggregatorScopeImplCategoryMerger* base,
                                                                          const gchar* scope_id,
                                                                          guint32 category_index)
{
	UnityInternalAggregatorScopeImplCategoryMergerByField * self;
	gint result = 0;
	GHashTable* subscope_category_map = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	GHashTable* _tmp2_;
	GHashTable* _tmp3_;
	self = (UnityInternalAggregatorScopeImplCategoryMergerByField*) base;
	g_return_val_if_fail (scope_id != NULL, 0);
	_tmp0_ = self->priv->subscopes;
	_tmp1_ = g_hash_table_lookup (_tmp0_, scope_id);
	_tmp2_ = _g_hash_table_ref0 ((GHashTable*) _tmp1_);
	subscope_category_map = _tmp2_;
	_tmp3_ = subscope_category_map;
	if (_tmp3_ != NULL) {
		GHashTable* _tmp4_;
		_tmp4_ = subscope_category_map;
		if (g_hash_table_contains (_tmp4_, (gpointer) ((gintptr) ((gint) category_index)))) {
			gint idx = 0;
			GHashTable* _tmp5_;
			gconstpointer _tmp6_;
			gint _tmp7_;
			_tmp5_ = subscope_category_map;
			_tmp6_ = g_hash_table_lookup (_tmp5_, (gpointer) ((gintptr) ((gint) category_index)));
			idx = (gint) ((gintptr) _tmp6_);
			_tmp7_ = idx;
			result = (gint) _tmp7_;
			_g_hash_table_unref0 (subscope_category_map);
			return result;
		}
		g_warning ("unity-aggregator-scope-private.vala:213: No category mapping for %s, c" \
"ategory %u", scope_id, (guint) category_index);
	}
	g_warning ("unity-aggregator-scope-private.vala:215: No category mapping for %s", scope_id);
	result = -1;
	_g_hash_table_unref0 (subscope_category_map);
	return result;
}


static void
_vala_array_add11 (GVariant** * array,
                   int* length,
                   int* size,
                   GVariant* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (GVariant*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


static GHashTable*
_variant_get39 (GVariant* value)
{
	GHashTable* _tmp49_;
	GVariantIter _tmp50_;
	GVariant* _tmp51_;
	GVariant* _tmp52_;
	_tmp49_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
	g_variant_iter_init (&_tmp50_, value);
	while (g_variant_iter_loop (&_tmp50_, "{?*}", &_tmp51_, &_tmp52_)) {
		g_hash_table_insert (_tmp49_, g_variant_dup_string (_tmp51_, NULL), g_variant_get_variant (_tmp52_));
	}
	return _tmp49_;
}


static gboolean
unity_internal_aggregator_scope_impl_category_merger_by_field_real_merge_metadata (UnityInternalAggregatorScopeImplCategoryMerger* base,
                                                                                   const gchar* scope_id,
                                                                                   DeeModel* categories_model,
                                                                                   DeeModel* master_categories)
{
	UnityInternalAggregatorScopeImplCategoryMergerByField * self;
	gboolean result = FALSE;
	gboolean changed = FALSE;
	GHashTable* meta = NULL;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	DeeModelIter* iter = NULL;
	DeeModelIter* _tmp3_;
	DeeModelIter* end_iter = NULL;
	DeeModelIter* _tmp4_;
	DeeModelIter* _tmp22_;
	DeeModelIter* _tmp23_;
	self = (UnityInternalAggregatorScopeImplCategoryMergerByField*) base;
	g_return_val_if_fail (scope_id != NULL, FALSE);
	g_return_val_if_fail (categories_model != NULL, FALSE);
	g_return_val_if_fail (master_categories != NULL, FALSE);
	changed = FALSE;
	_tmp0_ = g_str_hash;
	_tmp1_ = g_str_equal;
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, _g_variant_unref0_);
	meta = _tmp2_;
	_tmp3_ = dee_model_get_first_iter (categories_model);
	iter = _tmp3_;
	_tmp4_ = dee_model_get_last_iter (categories_model);
	end_iter = _tmp4_;
	while (TRUE) {
		DeeModelIter* _tmp5_;
		DeeModelIter* _tmp6_;
		const gchar* cat_id = NULL;
		DeeModelIter* _tmp7_;
		const gchar* _tmp8_;
		GVariant* hints = NULL;
		DeeModelIter* _tmp9_;
		GVariant* _tmp10_;
		GVariant* _tmp11_;
		GVariant* _tmp12_;
		GVariant* _tmp13_;
		gboolean _tmp14_;
		DeeModelIter* _tmp20_;
		DeeModelIter* _tmp21_;
		_tmp5_ = iter;
		_tmp6_ = end_iter;
		if (!(_tmp5_ != _tmp6_)) {
			break;
		}
		_tmp7_ = iter;
		_tmp8_ = dee_model_get_string (categories_model, _tmp7_, (guint) UNITY_INTERNAL_CATEGORY_COLUMN_ID);
		cat_id = _tmp8_;
		_tmp9_ = iter;
		_tmp10_ = dee_model_get_value (categories_model, _tmp9_, (guint) UNITY_INTERNAL_CATEGORY_COLUMN_HINTS);
		hints = _tmp10_;
		_tmp11_ = hints;
		_tmp12_ = g_variant_lookup_value (_tmp11_, "progress-source", NULL);
		_tmp13_ = _tmp12_;
		_tmp14_ = _tmp13_ != NULL;
		_g_variant_unref0 (_tmp13_);
		if (_tmp14_) {
			GHashTable* _tmp15_;
			const gchar* _tmp16_;
			gchar* _tmp17_;
			GVariant* _tmp18_;
			GVariant* _tmp19_;
			_tmp15_ = meta;
			_tmp16_ = cat_id;
			_tmp17_ = g_strdup (_tmp16_);
			_tmp18_ = hints;
			_tmp19_ = _g_variant_ref0 (_tmp18_);
			g_hash_table_insert (_tmp15_, _tmp17_, _tmp19_);
		}
		_tmp20_ = iter;
		_tmp21_ = dee_model_next (categories_model, _tmp20_);
		iter = _tmp21_;
		_g_variant_unref0 (hints);
	}
	_tmp22_ = dee_model_get_first_iter (master_categories);
	iter = _tmp22_;
	_tmp23_ = dee_model_get_last_iter (master_categories);
	end_iter = _tmp23_;
	while (TRUE) {
		DeeModelIter* _tmp24_;
		DeeModelIter* _tmp25_;
		const gchar* cat_id = NULL;
		DeeModelIter* _tmp26_;
		const gchar* _tmp27_;
		GVariant* hints = NULL;
		GHashTable* _tmp28_;
		const gchar* _tmp29_;
		gconstpointer _tmp30_;
		GVariant* _tmp31_;
		GVariant* _tmp32_;
		DeeModelIter* _tmp60_;
		DeeModelIter* _tmp61_;
		_tmp24_ = iter;
		_tmp25_ = end_iter;
		if (!(_tmp24_ != _tmp25_)) {
			break;
		}
		_tmp26_ = iter;
		_tmp27_ = dee_model_get_string (master_categories, _tmp26_, (guint) UNITY_INTERNAL_CATEGORY_COLUMN_ID);
		cat_id = _tmp27_;
		_tmp28_ = meta;
		_tmp29_ = cat_id;
		_tmp30_ = g_hash_table_lookup (_tmp28_, _tmp29_);
		_tmp31_ = _g_variant_ref0 ((GVariant*) _tmp30_);
		hints = _tmp31_;
		_tmp32_ = hints;
		if (_tmp32_ != NULL) {
			GVariant* val = NULL;
			GVariant* _tmp33_;
			GVariant* _tmp34_;
			GVariant* _tmp35_;
			_tmp33_ = hints;
			_tmp34_ = g_variant_lookup_value (_tmp33_, "progress-source", NULL);
			val = _tmp34_;
			_tmp35_ = val;
			if (_tmp35_ != NULL) {
				GVariant** master_ps = NULL;
				GVariant** _tmp36_;
				gint master_ps_length1;
				gint _master_ps_size_;
				GHashTable* master_hints = NULL;
				DeeModelIter* _tmp45_;
				GVariant* _tmp46_;
				GVariant* _tmp47_;
				GHashTable* _tmp48_;
				GHashTable* _tmp53_;
				GVariant** _tmp54_;
				gint _tmp54__length1;
				GHashTable* _tmp55_;
				DeeModelIter* _tmp56_;
				GHashTable* _tmp57_;
				GVariant* _tmp58_;
				GVariant* _tmp59_;
				_tmp36_ = g_new0 (GVariant*, 0 + 1);
				master_ps = _tmp36_;
				master_ps_length1 = 0;
				_master_ps_size_ = master_ps_length1;
				{
					gint i = 0;
					i = 0;
					{
						gboolean _tmp37_ = FALSE;
						_tmp37_ = TRUE;
						while (TRUE) {
							gint _tmp39_;
							GVariant* _tmp40_;
							GVariant** _tmp41_;
							gint _tmp41__length1;
							GVariant* _tmp42_;
							gint _tmp43_;
							GVariant* _tmp44_;
							if (!_tmp37_) {
								gint _tmp38_;
								_tmp38_ = i;
								i = _tmp38_ + 1;
							}
							_tmp37_ = FALSE;
							_tmp39_ = i;
							_tmp40_ = val;
							if (!(((gsize) _tmp39_) < g_variant_n_children (_tmp40_))) {
								break;
							}
							_tmp41_ = master_ps;
							_tmp41__length1 = master_ps_length1;
							_tmp42_ = val;
							_tmp43_ = i;
							_tmp44_ = g_variant_get_child_value (_tmp42_, (gsize) _tmp43_);
							_vala_array_add11 (&master_ps, &master_ps_length1, &_master_ps_size_, _tmp44_);
						}
					}
				}
				_tmp45_ = iter;
				_tmp46_ = dee_model_get_value (master_categories, _tmp45_, (guint) UNITY_INTERNAL_CATEGORY_COLUMN_HINTS);
				_tmp47_ = _tmp46_;
				_tmp48_ = _variant_get39 (_tmp47_);
				_tmp53_ = _tmp48_;
				_g_variant_unref0 (_tmp47_);
				master_hints = _tmp53_;
				_tmp54_ = master_ps;
				_tmp54__length1 = master_ps_length1;
				_tmp55_ = master_hints;
				changed = unity_internal_aggregator_scope_impl_category_merger_merge_progress_source (_tmp54_, _tmp54__length1, _tmp55_);
				_tmp56_ = iter;
				_tmp57_ = master_hints;
				_tmp58_ = unity_internal_utils_hash_table_to_asv (_tmp57_);
				_tmp59_ = _tmp58_;
				dee_model_set_value (master_categories, _tmp56_, (guint) UNITY_INTERNAL_CATEGORY_COLUMN_HINTS, _tmp59_);
				_g_variant_unref0 (_tmp59_);
				_g_hash_table_unref0 (master_hints);
				master_ps = (_vala_array_free (master_ps, master_ps_length1, (GDestroyNotify) g_variant_unref), NULL);
			}
			_g_variant_unref0 (val);
		}
		_tmp60_ = iter;
		_tmp61_ = dee_model_next (master_categories, _tmp60_);
		iter = _tmp61_;
		_g_variant_unref0 (hints);
	}
	result = changed;
	_g_hash_table_unref0 (meta);
	return result;
}


static void
unity_internal_aggregator_scope_impl_category_merger_by_field_class_init (UnityInternalAggregatorScopeImplCategoryMergerByFieldClass * klass)
{
	unity_internal_aggregator_scope_impl_category_merger_by_field_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityInternalAggregatorScopeImplCategoryMergerByFieldPrivate));
	((UnityInternalAggregatorScopeImplCategoryMergerClass *) klass)->remap = (gint (*) (UnityInternalAggregatorScopeImplCategoryMerger *, const gchar*, guint32)) unity_internal_aggregator_scope_impl_category_merger_by_field_real_remap;
	((UnityInternalAggregatorScopeImplCategoryMergerClass *) klass)->merge_metadata = (gboolean (*) (UnityInternalAggregatorScopeImplCategoryMerger *, const gchar*, DeeModel*, DeeModel*)) unity_internal_aggregator_scope_impl_category_merger_by_field_real_merge_metadata;
	G_OBJECT_CLASS (klass)->finalize = unity_internal_aggregator_scope_impl_category_merger_by_field_finalize;
}


static void
unity_internal_aggregator_scope_impl_category_merger_by_field_instance_init (UnityInternalAggregatorScopeImplCategoryMergerByField * self)
{
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	self->priv = UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORY_MERGER_BY_FIELD_GET_PRIVATE (self);
	_tmp0_ = g_str_hash;
	_tmp1_ = g_str_equal;
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, _g_hash_table_unref0_);
	self->priv->subscopes = _tmp2_;
}


static void
unity_internal_aggregator_scope_impl_category_merger_by_field_finalize (GObject * obj)
{
	UnityInternalAggregatorScopeImplCategoryMergerByField * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER_BY_FIELD, UnityInternalAggregatorScopeImplCategoryMergerByField);
	_g_hash_table_unref0 (self->priv->subscopes);
	G_OBJECT_CLASS (unity_internal_aggregator_scope_impl_category_merger_by_field_parent_class)->finalize (obj);
}


static GType
unity_internal_aggregator_scope_impl_category_merger_by_field_get_type (void)
{
	static volatile gsize unity_internal_aggregator_scope_impl_category_merger_by_field_type_id__volatile = 0;
	if (g_once_init_enter (&unity_internal_aggregator_scope_impl_category_merger_by_field_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityInternalAggregatorScopeImplCategoryMergerByFieldClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_internal_aggregator_scope_impl_category_merger_by_field_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityInternalAggregatorScopeImplCategoryMergerByField), 0, (GInstanceInitFunc) unity_internal_aggregator_scope_impl_category_merger_by_field_instance_init, NULL };
		GType unity_internal_aggregator_scope_impl_category_merger_by_field_type_id;
		unity_internal_aggregator_scope_impl_category_merger_by_field_type_id = g_type_register_static (UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_TYPE_CATEGORY_MERGER, "UnityInternalAggregatorScopeImplCategoryMergerByField", &g_define_type_info, 0);
		g_once_init_leave (&unity_internal_aggregator_scope_impl_category_merger_by_field_type_id__volatile, unity_internal_aggregator_scope_impl_category_merger_by_field_type_id);
	}
	return unity_internal_aggregator_scope_impl_category_merger_by_field_type_id__volatile;
}


static gint
unity_internal_aggregator_scope_impl_sorter_apply (UnityInternalAggregatorScopeImplSorter *self,
                                                   GVariant** row1,
                                                   int row1_length1,
                                                   GVariant** row2,
                                                   int row2_length1)
{
	gint result = 0;
	GVariant* dummy1 = NULL;
	GVariant* dummy2 = NULL;
	GVariant* var1 = NULL;
	gint _tmp0_;
	GVariant* _tmp1_;
	GVariant* var2 = NULL;
	gint _tmp2_;
	GVariant* _tmp3_;
	const gchar* _tmp4_;
	gint _result_ = 0;
	gchar _tmp22_;
	gint _tmp71_;
	gint _tmp72_;
	_tmp0_ = (*self).column_index;
	_tmp1_ = row1[_tmp0_];
	var1 = _tmp1_;
	_tmp2_ = (*self).column_index;
	_tmp3_ = row2[_tmp2_];
	var2 = _tmp3_;
	_tmp4_ = (*self).field_name;
	if (_tmp4_ != NULL) {
		GVariant* _tmp5_;
		const GVariantType* _tmp6_;
		GVariant* _tmp7_;
		GVariant* _tmp8_;
		const gchar* _tmp9_;
		GVariant* _tmp10_;
		GVariant* _tmp11_;
		const GVariantType* _tmp12_;
		GVariant* _tmp13_;
		GVariant* _tmp14_;
		const gchar* _tmp15_;
		GVariant* _tmp16_;
		gboolean _tmp17_ = FALSE;
		GVariant* _tmp18_;
		GVariant* _tmp20_;
		GVariant* _tmp21_;
		_tmp5_ = var1;
		_tmp6_ = G_VARIANT_TYPE_VARDICT;
		_tmp7_ = g_variant_lookup_value (_tmp5_, "content", _tmp6_);
		_tmp8_ = _tmp7_;
		_tmp9_ = (*self).field_name;
		_tmp10_ = g_variant_lookup_value (_tmp8_, _tmp9_, NULL);
		_g_variant_unref0 (dummy1);
		dummy1 = _tmp10_;
		_g_variant_unref0 (_tmp8_);
		_tmp11_ = var2;
		_tmp12_ = G_VARIANT_TYPE_VARDICT;
		_tmp13_ = g_variant_lookup_value (_tmp11_, "content", _tmp12_);
		_tmp14_ = _tmp13_;
		_tmp15_ = (*self).field_name;
		_tmp16_ = g_variant_lookup_value (_tmp14_, _tmp15_, NULL);
		_g_variant_unref0 (dummy2);
		dummy2 = _tmp16_;
		_g_variant_unref0 (_tmp14_);
		_tmp18_ = dummy1;
		if (_tmp18_ == NULL) {
			GVariant* _tmp19_;
			_tmp19_ = dummy2;
			_tmp17_ = _tmp19_ == NULL;
		} else {
			_tmp17_ = FALSE;
		}
		if (_tmp17_) {
			result = 0;
			_g_variant_unref0 (dummy2);
			_g_variant_unref0 (dummy1);
			return result;
		}
		_tmp20_ = dummy1;
		var1 = _tmp20_;
		_tmp21_ = dummy2;
		var2 = _tmp21_;
	}
	_tmp22_ = (*self).schema;
	switch (_tmp22_) {
		case 's':
		{
			GVariant* _tmp23_;
			_tmp23_ = var1;
			if (_tmp23_ == NULL) {
				gint _tmp24_;
				_tmp24_ = (*self).multiplier;
				_result_ = 1 * _tmp24_;
			} else {
				GVariant* _tmp25_;
				_tmp25_ = var2;
				if (_tmp25_ == NULL) {
					gint _tmp26_;
					_tmp26_ = (*self).multiplier;
					_result_ = -1 * _tmp26_;
				} else {
					GVariant* _tmp27_;
					const gchar* _tmp28_;
					GVariant* _tmp29_;
					const gchar* _tmp30_;
					_tmp27_ = var1;
					_tmp28_ = g_variant_get_string (_tmp27_, NULL);
					_tmp29_ = var2;
					_tmp30_ = g_variant_get_string (_tmp29_, NULL);
					_result_ = g_utf8_collate (_tmp28_, _tmp30_);
				}
			}
			break;
		}
		case 'i':
		{
			gint32 _tmp31_ = 0;
			GVariant* _tmp32_;
			gint i1 = 0;
			gint32 _tmp34_ = 0;
			GVariant* _tmp35_;
			gint i2 = 0;
			gint _tmp37_;
			gint _tmp38_;
			_tmp32_ = var1;
			if (_tmp32_ != NULL) {
				GVariant* _tmp33_;
				_tmp33_ = var1;
				_tmp31_ = g_variant_get_int32 (_tmp33_);
			} else {
				_tmp31_ = (gint32) 0;
			}
			i1 = (gint) _tmp31_;
			_tmp35_ = var2;
			if (_tmp35_ != NULL) {
				GVariant* _tmp36_;
				_tmp36_ = var2;
				_tmp34_ = g_variant_get_int32 (_tmp36_);
			} else {
				_tmp34_ = (gint32) 0;
			}
			i2 = (gint) _tmp34_;
			_tmp37_ = i1;
			_tmp38_ = i2;
			_result_ = unity_internal_aggregator_scope_impl_sorter_compare_int (_tmp37_, _tmp38_);
			break;
		}
		case 'u':
		{
			guint32 _tmp39_ = 0U;
			GVariant* _tmp40_;
			guint u1 = 0U;
			guint32 _tmp42_ = 0U;
			GVariant* _tmp43_;
			guint u2 = 0U;
			guint _tmp45_;
			guint _tmp46_;
			_tmp40_ = var1;
			if (_tmp40_ != NULL) {
				GVariant* _tmp41_;
				_tmp41_ = var1;
				_tmp39_ = g_variant_get_uint32 (_tmp41_);
			} else {
				_tmp39_ = (guint32) 0;
			}
			u1 = (guint) _tmp39_;
			_tmp43_ = var2;
			if (_tmp43_ != NULL) {
				GVariant* _tmp44_;
				_tmp44_ = var2;
				_tmp42_ = g_variant_get_uint32 (_tmp44_);
			} else {
				_tmp42_ = (guint32) 0;
			}
			u2 = (guint) _tmp42_;
			_tmp45_ = u1;
			_tmp46_ = u2;
			_result_ = unity_internal_aggregator_scope_impl_sorter_compare_uint (_tmp45_, _tmp46_);
			break;
		}
		case 'x':
		{
			gint64 _tmp47_ = 0LL;
			GVariant* _tmp48_;
			gint64 x1 = 0LL;
			gint64 _tmp50_ = 0LL;
			GVariant* _tmp51_;
			gint64 x2 = 0LL;
			gint64 _tmp53_;
			gint64 _tmp54_;
			_tmp48_ = var1;
			if (_tmp48_ != NULL) {
				GVariant* _tmp49_;
				_tmp49_ = var1;
				_tmp47_ = g_variant_get_int64 (_tmp49_);
			} else {
				_tmp47_ = (gint64) 0;
			}
			x1 = _tmp47_;
			_tmp51_ = var2;
			if (_tmp51_ != NULL) {
				GVariant* _tmp52_;
				_tmp52_ = var2;
				_tmp50_ = g_variant_get_int64 (_tmp52_);
			} else {
				_tmp50_ = (gint64) 0;
			}
			x2 = _tmp50_;
			_tmp53_ = x1;
			_tmp54_ = x2;
			_result_ = unity_internal_aggregator_scope_impl_sorter_compare_int64 (_tmp53_, _tmp54_);
			break;
		}
		case 't':
		{
			guint64 _tmp55_ = 0ULL;
			GVariant* _tmp56_;
			guint64 t1 = 0ULL;
			guint64 _tmp58_ = 0ULL;
			GVariant* _tmp59_;
			guint64 t2 = 0ULL;
			guint64 _tmp61_;
			guint64 _tmp62_;
			_tmp56_ = var1;
			if (_tmp56_ != NULL) {
				GVariant* _tmp57_;
				_tmp57_ = var1;
				_tmp55_ = g_variant_get_uint64 (_tmp57_);
			} else {
				_tmp55_ = (guint64) 0;
			}
			t1 = _tmp55_;
			_tmp59_ = var2;
			if (_tmp59_ != NULL) {
				GVariant* _tmp60_;
				_tmp60_ = var2;
				_tmp58_ = g_variant_get_uint64 (_tmp60_);
			} else {
				_tmp58_ = (guint64) 0;
			}
			t2 = _tmp58_;
			_tmp61_ = t1;
			_tmp62_ = t2;
			_result_ = unity_internal_aggregator_scope_impl_sorter_compare_uint64 (_tmp61_, _tmp62_);
			break;
		}
		case 'd':
		{
			gdouble _tmp63_ = 0.0;
			GVariant* _tmp64_;
			gdouble d1 = 0.0;
			gdouble _tmp66_ = 0.0;
			GVariant* _tmp67_;
			gdouble d2 = 0.0;
			gdouble _tmp69_;
			gdouble _tmp70_;
			_tmp64_ = var1;
			if (_tmp64_ != NULL) {
				GVariant* _tmp65_;
				_tmp65_ = var1;
				_tmp63_ = g_variant_get_double (_tmp65_);
			} else {
				_tmp63_ = 0.0;
			}
			d1 = _tmp63_;
			_tmp67_ = var2;
			if (_tmp67_ != NULL) {
				GVariant* _tmp68_;
				_tmp68_ = var2;
				_tmp66_ = g_variant_get_double (_tmp68_);
			} else {
				_tmp66_ = 0.0;
			}
			d2 = _tmp66_;
			_tmp69_ = d1;
			_tmp70_ = d2;
			_result_ = unity_internal_aggregator_scope_impl_sorter_compare_double (_tmp69_, _tmp70_);
			break;
		}
		default:
		{
			result = 0;
			_g_variant_unref0 (dummy2);
			_g_variant_unref0 (dummy1);
			return result;
		}
	}
	_tmp71_ = _result_;
	_tmp72_ = (*self).multiplier;
	result = _tmp71_ * _tmp72_;
	_g_variant_unref0 (dummy2);
	_g_variant_unref0 (dummy1);
	return result;
}


static gint
unity_internal_aggregator_scope_impl_sorter_compare_int (gint a,
                                                         gint b)
{
	gint result = 0;
	gint _tmp0_ = 0;
	if (a > b) {
		_tmp0_ = 1;
	} else {
		gint _tmp1_ = 0;
		if (a == b) {
			_tmp1_ = 0;
		} else {
			_tmp1_ = -1;
		}
		_tmp0_ = _tmp1_;
	}
	result = _tmp0_;
	return result;
}


static gint
unity_internal_aggregator_scope_impl_sorter_compare_uint (guint a,
                                                          guint b)
{
	gint result = 0;
	gint _tmp0_ = 0;
	if (a > b) {
		_tmp0_ = 1;
	} else {
		gint _tmp1_ = 0;
		if (a == b) {
			_tmp1_ = 0;
		} else {
			_tmp1_ = -1;
		}
		_tmp0_ = _tmp1_;
	}
	result = _tmp0_;
	return result;
}


static gint
unity_internal_aggregator_scope_impl_sorter_compare_int64 (gint64 a,
                                                           gint64 b)
{
	gint result = 0;
	gint _tmp0_ = 0;
	if (a > b) {
		_tmp0_ = 1;
	} else {
		gint _tmp1_ = 0;
		if (a == b) {
			_tmp1_ = 0;
		} else {
			_tmp1_ = -1;
		}
		_tmp0_ = _tmp1_;
	}
	result = _tmp0_;
	return result;
}


static gint
unity_internal_aggregator_scope_impl_sorter_compare_uint64 (guint64 a,
                                                            guint64 b)
{
	gint result = 0;
	gint _tmp0_ = 0;
	if (a > b) {
		_tmp0_ = 1;
	} else {
		gint _tmp1_ = 0;
		if (a == b) {
			_tmp1_ = 0;
		} else {
			_tmp1_ = -1;
		}
		_tmp0_ = _tmp1_;
	}
	result = _tmp0_;
	return result;
}


static gint
unity_internal_aggregator_scope_impl_sorter_compare_double (gdouble a,
                                                            gdouble b)
{
	gint result = 0;
	gint _tmp0_ = 0;
	if (a > b) {
		_tmp0_ = 1;
	} else {
		gint _tmp1_ = 0;
		if (a == b) {
			_tmp1_ = 0;
		} else {
			_tmp1_ = -1;
		}
		_tmp0_ = _tmp1_;
	}
	result = _tmp0_;
	return result;
}


static void
unity_internal_aggregator_scope_impl_sorter_copy (const UnityInternalAggregatorScopeImplSorter* self,
                                                  UnityInternalAggregatorScopeImplSorter* dest)
{
	gint _tmp0_;
	gint _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	gchar _tmp4_;
	gint _tmp5_;
	_tmp0_ = (*self).category;
	(*dest).category = _tmp0_;
	_tmp1_ = (*self).column_index;
	(*dest).column_index = _tmp1_;
	_tmp2_ = (*self).field_name;
	_tmp3_ = g_strdup (_tmp2_);
	_g_free0 ((*dest).field_name);
	(*dest).field_name = _tmp3_;
	_tmp4_ = (*self).schema;
	(*dest).schema = _tmp4_;
	_tmp5_ = (*self).multiplier;
	(*dest).multiplier = _tmp5_;
}


static void
unity_internal_aggregator_scope_impl_sorter_destroy (UnityInternalAggregatorScopeImplSorter* self)
{
	_g_free0 ((*self).field_name);
}


static UnityInternalAggregatorScopeImplSorter*
unity_internal_aggregator_scope_impl_sorter_dup (const UnityInternalAggregatorScopeImplSorter* self)
{
	UnityInternalAggregatorScopeImplSorter* dup;
	dup = g_new0 (UnityInternalAggregatorScopeImplSorter, 1);
	unity_internal_aggregator_scope_impl_sorter_copy (self, dup);
	return dup;
}


static void
unity_internal_aggregator_scope_impl_sorter_free (UnityInternalAggregatorScopeImplSorter* self)
{
	unity_internal_aggregator_scope_impl_sorter_destroy (self);
	g_free (self);
}


static GType
unity_internal_aggregator_scope_impl_sorter_get_type (void)
{
	static volatile gsize unity_internal_aggregator_scope_impl_sorter_type_id__volatile = 0;
	if (g_once_init_enter (&unity_internal_aggregator_scope_impl_sorter_type_id__volatile)) {
		GType unity_internal_aggregator_scope_impl_sorter_type_id;
		unity_internal_aggregator_scope_impl_sorter_type_id = g_boxed_type_register_static ("UnityInternalAggregatorScopeImplSorter", (GBoxedCopyFunc) unity_internal_aggregator_scope_impl_sorter_dup, (GBoxedFreeFunc) unity_internal_aggregator_scope_impl_sorter_free);
		g_once_init_leave (&unity_internal_aggregator_scope_impl_sorter_type_id__volatile, unity_internal_aggregator_scope_impl_sorter_type_id);
	}
	return unity_internal_aggregator_scope_impl_sorter_type_id__volatile;
}


static void
unity_internal_aggregator_scope_impl_class_init (UnityInternalAggregatorScopeImplClass * klass)
{
	const gchar* _tmp0_;
	unity_internal_aggregator_scope_impl_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityInternalAggregatorScopeImplPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_internal_aggregator_scope_impl_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_internal_aggregator_scope_impl_set_property;
	G_OBJECT_CLASS (klass)->constructor = unity_internal_aggregator_scope_impl_constructor;
	G_OBJECT_CLASS (klass)->finalize = unity_internal_aggregator_scope_impl_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_OWNER_PROPERTY, unity_internal_aggregator_scope_impl_properties[UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_OWNER_PROPERTY] = g_param_spec_object ("owner", "owner", "owner", UNITY_TYPE_AGGREGATOR_SCOPE, G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORIES_MODEL_PROPERTY, unity_internal_aggregator_scope_impl_properties[UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORIES_MODEL_PROPERTY] = g_param_spec_object ("categories-model", "categories-model", "categories-model", dee_serializable_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_FILTERS_MODEL_PROPERTY, unity_internal_aggregator_scope_impl_properties[UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_FILTERS_MODEL_PROPERTY] = g_param_spec_object ("filters-model", "filters-model", "filters-model", dee_serializable_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_MERGE_STRATEGY_PROPERTY, unity_internal_aggregator_scope_impl_properties[UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_MERGE_STRATEGY_PROPERTY] = g_param_spec_object ("merge-strategy", "merge-strategy", "merge-strategy", UNITY_INTERNAL_TYPE_MERGE_STRATEGY, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_VIEW_TYPE_PROPERTY, unity_internal_aggregator_scope_impl_properties[UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_VIEW_TYPE_PROPERTY] = g_param_spec_enum ("view-type", "view-type", "view-type", UNITY_PROTOCOL_TYPE_VIEW_TYPE, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	_tmp0_ = g_getenv (UNITY_INTERNAL_VAR_MEASURED_SEARCHES);
	unity_internal_aggregator_scope_impl_measure_requests = _tmp0_ != NULL;
}


static void
unity_internal_aggregator_scope_impl_unity_protocol_scope_service_interface_init (UnityProtocolScopeServiceIface * iface)
{
	unity_internal_aggregator_scope_impl_unity_protocol_scope_service_parent_iface = g_type_interface_peek_parent (iface);
	iface->activate = (void (*) (UnityProtocolScopeService *, const gchar*, GVariant**, int, guint, GHashTable*, GCancellable*, GAsyncReadyCallback, gpointer)) unity_internal_aggregator_scope_impl_real_activate;
	iface->activate_finish = (void (*) (UnityProtocolScopeService *, GAsyncResult*, UnityProtocolActivationReplyRaw*, GError**)) unity_internal_aggregator_scope_impl_real_activate_finish;
	iface->search = (void (*) (UnityProtocolScopeService *, const gchar*, const gchar*, GHashTable*, GCancellable*, GAsyncReadyCallback, gpointer)) unity_internal_aggregator_scope_impl_real_search;
	iface->search_finish = (GHashTable* (*) (UnityProtocolScopeService *, GAsyncResult*, GError**)) unity_internal_aggregator_scope_impl_real_search_finish;
	iface->open_channel = (void (*) (UnityProtocolScopeService *, guint, GHashTable*, GCancellable*, const char*, GAsyncReadyCallback, gpointer)) unity_internal_aggregator_scope_impl_real_open_channel;
	iface->open_channel_finish = (gchar* (*) (UnityProtocolScopeService *, GAsyncResult*, GHashTable* *, GError**)) unity_internal_aggregator_scope_impl_real_open_channel_finish;
	iface->close_channel = (void (*) (UnityProtocolScopeService *, const gchar*, GHashTable*, GCancellable*, GAsyncReadyCallback, gpointer)) unity_internal_aggregator_scope_impl_real_close_channel;
	iface->close_channel_finish = (void (*) (UnityProtocolScopeService *, GAsyncResult*, GError**)) unity_internal_aggregator_scope_impl_real_close_channel_finish;
	iface->set_view_type = (void (*) (UnityProtocolScopeService *, guint, GAsyncReadyCallback, gpointer)) unity_internal_aggregator_scope_impl_real_set_view_type;
	iface->set_view_type_finish = (void (*) (UnityProtocolScopeService *, GAsyncResult*, GError**)) unity_internal_aggregator_scope_impl_real_set_view_type_finish;
	iface->push_results = (void (*) (UnityProtocolScopeService *, const gchar*, const gchar*, const gchar*, GVariant*, gchar**, int, GCancellable*, GAsyncReadyCallback, gpointer)) unity_internal_aggregator_scope_impl_real_push_results;
	iface->push_results_finish = (GHashTable* (*) (UnityProtocolScopeService *, GAsyncResult*, GError**)) unity_internal_aggregator_scope_impl_real_push_results_finish;
	iface->get_protocol_version = unity_internal_aggregator_scope_impl_real_get_protocol_version;
	iface->get_visible = unity_internal_aggregator_scope_impl_real_get_visible;
	iface->get_is_master = unity_internal_aggregator_scope_impl_real_get_is_master;
	iface->get_search_hint = unity_internal_aggregator_scope_impl_real_get_search_hint;
	iface->get_metadata = unity_internal_aggregator_scope_impl_real_get_metadata;
	iface->get_optional_metadata = unity_internal_aggregator_scope_impl_real_get_optional_metadata;
	iface->get_categories = unity_internal_aggregator_scope_impl_real_get_categories;
	iface->get_filters = unity_internal_aggregator_scope_impl_real_get_filters;
	iface->get_hints = unity_internal_aggregator_scope_impl_real_get_hints;
}


static void
unity_internal_aggregator_scope_impl_unity_internal_scope_dbus_impl_interface_init (UnityInternalScopeDBusImplIface * iface)
{
	unity_internal_aggregator_scope_impl_unity_internal_scope_dbus_impl_parent_iface = g_type_interface_peek_parent (iface);
	iface->export = (void (*) (UnityInternalScopeDBusImpl *, GError**)) unity_internal_aggregator_scope_impl_real_export;
	iface->unexport = (void (*) (UnityInternalScopeDBusImpl *)) unity_internal_aggregator_scope_impl_real_unexport;
	iface->queue_property_notification = (void (*) (UnityInternalScopeDBusImpl *, const gchar*, GVariant*)) unity_internal_aggregator_scope_impl_real_queue_property_notification;
	iface->get_categories_model = unity_internal_aggregator_scope_impl_real_get_categories_model;
	iface->set_categories_model = unity_internal_aggregator_scope_impl_real_set_categories_model;
	iface->get_filters_model = unity_internal_aggregator_scope_impl_real_get_filters_model;
	iface->set_filters_model = unity_internal_aggregator_scope_impl_real_set_filters_model;
}


static void
unity_internal_aggregator_scope_impl_unity_internal_deprecated_scope_dbus_impl_interface_init (UnityInternalDeprecatedScopeDBusImplIface * iface)
{
	unity_internal_aggregator_scope_impl_unity_internal_deprecated_scope_dbus_impl_parent_iface = g_type_interface_peek_parent (iface);
	iface->set_categories = (void (*) (UnityInternalDeprecatedScopeDBusImpl *, GList*)) unity_internal_aggregator_scope_impl_real_set_categories;
	iface->set_filters = (void (*) (UnityInternalDeprecatedScopeDBusImpl *, GList*)) unity_internal_aggregator_scope_impl_real_set_filters;
}


static void
unity_internal_aggregator_scope_impl_unity_internal_merge_strategy_interface_init (UnityInternalMergeStrategyIface * iface)
{
	unity_internal_aggregator_scope_impl_unity_internal_merge_strategy_parent_iface = g_type_interface_peek_parent (iface);
	iface->merge_result = (DeeModelIter* (*) (UnityInternalMergeStrategy *, const gchar*, DeeModel*, GVariant**, int)) unity_internal_aggregator_scope_impl_real_merge_result;
}


static void
unity_internal_aggregator_scope_impl_instance_init (UnityInternalAggregatorScopeImpl * self)
{
	self->priv = UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_GET_PRIVATE (self);
	self->priv->_merge_strategy = NULL;
}


static void
unity_internal_aggregator_scope_impl_finalize (GObject * obj)
{
	UnityInternalAggregatorScopeImpl * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_INTERNAL_TYPE_AGGREGATOR_SCOPE_IMPL, UnityInternalAggregatorScopeImpl);
	_g_hash_table_unref0 (self->priv->_channels);
	_g_object_unref0 (self->priv->_dbus_connection);
	_g_object_unref0 (self->priv->_scopes);
	self->priv->_sorters = (_vala_UnityInternalAggregatorScopeImplSorter_array_free (self->priv->_sorters, self->priv->_sorters_length1), NULL);
	self->priv->_constraints = (_vala_UnityInternalAggregatorScopeImplSorter_array_free (self->priv->_constraints, self->priv->_constraints_length1), NULL);
	_g_object_unref0 (self->priv->category_merger);
	_g_rand_free0 (self->priv->_rand);
	_g_object_unref0 (self->priv->_categories_model);
	_g_object_unref0 (self->priv->_filters_model);
	_g_object_unref0 (self->priv->_merge_strategy);
	_g_variant_builder_unref0 (self->priv->changed_props);
	G_OBJECT_CLASS (unity_internal_aggregator_scope_impl_parent_class)->finalize (obj);
}


GType
unity_internal_aggregator_scope_impl_get_type (void)
{
	static volatile gsize unity_internal_aggregator_scope_impl_type_id__volatile = 0;
	if (g_once_init_enter (&unity_internal_aggregator_scope_impl_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityInternalAggregatorScopeImplClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_internal_aggregator_scope_impl_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityInternalAggregatorScopeImpl), 0, (GInstanceInitFunc) unity_internal_aggregator_scope_impl_instance_init, NULL };
		static const GInterfaceInfo unity_protocol_scope_service_info = { (GInterfaceInitFunc) unity_internal_aggregator_scope_impl_unity_protocol_scope_service_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo unity_internal_scope_dbus_impl_info = { (GInterfaceInitFunc) unity_internal_aggregator_scope_impl_unity_internal_scope_dbus_impl_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo unity_internal_deprecated_scope_dbus_impl_info = { (GInterfaceInitFunc) unity_internal_aggregator_scope_impl_unity_internal_deprecated_scope_dbus_impl_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo unity_internal_merge_strategy_info = { (GInterfaceInitFunc) unity_internal_aggregator_scope_impl_unity_internal_merge_strategy_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		GType unity_internal_aggregator_scope_impl_type_id;
		unity_internal_aggregator_scope_impl_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityInternalAggregatorScopeImpl", &g_define_type_info, 0);
		g_type_add_interface_static (unity_internal_aggregator_scope_impl_type_id, UNITY_PROTOCOL_TYPE_SCOPE_SERVICE, &unity_protocol_scope_service_info);
		g_type_add_interface_static (unity_internal_aggregator_scope_impl_type_id, UNITY_INTERNAL_TYPE_SCOPE_DBUS_IMPL, &unity_internal_scope_dbus_impl_info);
		g_type_add_interface_static (unity_internal_aggregator_scope_impl_type_id, UNITY_INTERNAL_TYPE_DEPRECATED_SCOPE_DBUS_IMPL, &unity_internal_deprecated_scope_dbus_impl_info);
		g_type_add_interface_static (unity_internal_aggregator_scope_impl_type_id, UNITY_INTERNAL_TYPE_MERGE_STRATEGY, &unity_internal_merge_strategy_info);
		g_once_init_leave (&unity_internal_aggregator_scope_impl_type_id__volatile, unity_internal_aggregator_scope_impl_type_id);
	}
	return unity_internal_aggregator_scope_impl_type_id__volatile;
}


static void
_vala_unity_internal_aggregator_scope_impl_get_property (GObject * object,
                                                         guint property_id,
                                                         GValue * value,
                                                         GParamSpec * pspec)
{
	UnityInternalAggregatorScopeImpl * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_INTERNAL_TYPE_AGGREGATOR_SCOPE_IMPL, UnityInternalAggregatorScopeImpl);
	switch (property_id) {
		case UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_OWNER_PROPERTY:
		g_value_set_object (value, unity_internal_aggregator_scope_impl_get_owner (self));
		break;
		case UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORIES_MODEL_PROPERTY:
		g_value_set_object (value, unity_internal_scope_dbus_impl_get_categories_model ((UnityInternalScopeDBusImpl*) self));
		break;
		case UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_FILTERS_MODEL_PROPERTY:
		g_value_set_object (value, unity_internal_scope_dbus_impl_get_filters_model ((UnityInternalScopeDBusImpl*) self));
		break;
		case UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_MERGE_STRATEGY_PROPERTY:
		g_value_set_object (value, unity_internal_aggregator_scope_impl_get_merge_strategy (self));
		break;
		case UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_VIEW_TYPE_PROPERTY:
		g_value_set_enum (value, unity_internal_aggregator_scope_impl_get_view_type (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_internal_aggregator_scope_impl_set_property (GObject * object,
                                                         guint property_id,
                                                         const GValue * value,
                                                         GParamSpec * pspec)
{
	UnityInternalAggregatorScopeImpl * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_INTERNAL_TYPE_AGGREGATOR_SCOPE_IMPL, UnityInternalAggregatorScopeImpl);
	switch (property_id) {
		case UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_OWNER_PROPERTY:
		unity_internal_aggregator_scope_impl_set_owner (self, g_value_get_object (value));
		break;
		case UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_CATEGORIES_MODEL_PROPERTY:
		unity_internal_scope_dbus_impl_set_categories_model ((UnityInternalScopeDBusImpl*) self, g_value_get_object (value));
		break;
		case UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_FILTERS_MODEL_PROPERTY:
		unity_internal_scope_dbus_impl_set_filters_model ((UnityInternalScopeDBusImpl*) self, g_value_get_object (value));
		break;
		case UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_MERGE_STRATEGY_PROPERTY:
		unity_internal_aggregator_scope_impl_set_merge_strategy (self, g_value_get_object (value));
		break;
		case UNITY_INTERNAL_AGGREGATOR_SCOPE_IMPL_VIEW_TYPE_PROPERTY:
		unity_internal_aggregator_scope_impl_set_view_type (self, g_value_get_enum (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



