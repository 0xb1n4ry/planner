/* LabelChild.c generated by valac 0.40.11, the Vala compiler
 * generated from LabelChild.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <gdk/gdk.h>
#include <float.h>
#include <math.h>


#define WIDGETS_TYPE_LABEL_CHILD (widgets_label_child_get_type ())
#define WIDGETS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChild))
#define WIDGETS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChildClass))
#define WIDGETS_IS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_LABEL_CHILD))
#define WIDGETS_IS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_LABEL_CHILD))
#define WIDGETS_LABEL_CHILD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChildClass))

typedef struct _WidgetsLabelChild WidgetsLabelChild;
typedef struct _WidgetsLabelChildClass WidgetsLabelChildClass;
typedef struct _WidgetsLabelChildPrivate WidgetsLabelChildPrivate;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
enum  {
	WIDGETS_LABEL_CHILD_0_PROPERTY,
	WIDGETS_LABEL_CHILD_LABEL_PROPERTY,
	WIDGETS_LABEL_CHILD_NUM_PROPERTIES
};
static GParamSpec* widgets_label_child_properties[WIDGETS_LABEL_CHILD_NUM_PROPERTIES];
#define _objects_label_unref0(var) ((var == NULL) ? NULL : (var = (objects_label_unref (var), NULL)))
typedef struct _Block60Data Block60Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _ObjectsLabelPrivate ObjectsLabelPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

struct _WidgetsLabelChild {
	GtkFlowBoxChild parent_instance;
	WidgetsLabelChildPrivate * priv;
	gboolean show_close;
};

struct _WidgetsLabelChildClass {
	GtkFlowBoxChildClass parent_class;
};

struct _WidgetsLabelChildPrivate {
	ObjectsLabel* _label;
};

struct _Block60Data {
	int _ref_count_;
	WidgetsLabelChild* self;
	GtkRevealer* remove_revealer;
};

struct _ObjectsLabel {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsLabelPrivate * priv;
	gint id;
	gchar* name;
	gchar* color;
};

struct _ObjectsLabelClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsLabel *self);
};


static gpointer widgets_label_child_parent_class = NULL;
extern Utils* application_utils;

GType widgets_label_child_get_type (void) G_GNUC_CONST;
gpointer objects_label_ref (gpointer instance);
void objects_label_unref (gpointer instance);
GParamSpec* objects_param_spec_label (const gchar* name,
                                      const gchar* nick,
                                      const gchar* blurb,
                                      GType object_type,
                                      GParamFlags flags);
void objects_value_set_label (GValue* value,
                              gpointer v_object);
void objects_value_take_label (GValue* value,
                               gpointer v_object);
gpointer objects_value_get_label (const GValue* value);
GType objects_label_get_type (void) G_GNUC_CONST;
#define WIDGETS_LABEL_CHILD_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChildPrivate))
#define WIDGETS_LABEL_CHILD_COLOR_CSS "\n" \
"        .label-%i {\n" \
"            background-image:\n" \
"                linear-gradient(\n" \
"                    to bottom,\n" \
"                    shade (\n" \
"                    %s,\n" \
"                        1.3\n" \
"                    ),\n" \
"                    %s\n" \
"            );\n" \
"            border: 1px solid shade (%s, 0.9);\n" \
"            color: %s;\n" \
"            border-radius: 3px;\n" \
"            font-size: 11px;\n" \
"            font-weight: 600;\n" \
"            margin: 2px;\n" \
"            padding: 2px 6px 2px 6px;\n" \
"        }\n" \
"    "
WidgetsLabelChild* widgets_label_child_new (ObjectsLabel* _label);
WidgetsLabelChild* widgets_label_child_construct (GType object_type,
                                                  ObjectsLabel* _label);
ObjectsLabel* widgets_label_child_get_label (WidgetsLabelChild* self);
static void widgets_label_child_set_label (WidgetsLabelChild* self,
                                    ObjectsLabel* value);
static GObject * widgets_label_child_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties);
static Block60Data* block60_data_ref (Block60Data* _data60_);
static void block60_data_unref (void * _userdata_);
GType utils_get_type (void) G_GNUC_CONST;
gchar* utils_convert_invert (Utils* self,
                             const gchar* hex);
static gboolean _widgets_label_child___lambda4_ (Block60Data* _data60_,
                                          GdkEventCrossing* event);
static gboolean __widgets_label_child___lambda4__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                                         GdkEventCrossing* event,
                                                                         gpointer self);
static gboolean _widgets_label_child___lambda5_ (Block60Data* _data60_,
                                          GdkEventCrossing* event);
static gboolean __widgets_label_child___lambda5__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                                         GdkEventCrossing* event,
                                                                         gpointer self);
static void _widgets_label_child___lambda6_ (WidgetsLabelChild* self);
static gboolean __lambda7_ (WidgetsLabelChild* self);
static gboolean ___lambda7__gsource_func (gpointer self);
static void __widgets_label_child___lambda6__gtk_button_clicked (GtkButton* _sender,
                                                          gpointer self);
static void widgets_label_child_finalize (GObject * obj);
static void _vala_widgets_label_child_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec);
static void _vala_widgets_label_child_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec);


WidgetsLabelChild*
widgets_label_child_construct (GType object_type,
                               ObjectsLabel* _label)
{
	WidgetsLabelChild * self = NULL;
#line 45 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_return_val_if_fail (_label != NULL, NULL);
#line 46 "/run/build/planner/src/Widgets/LabelChild.vala"
	self = (WidgetsLabelChild*) g_object_new (object_type, "label", _label, NULL);
#line 45 "/run/build/planner/src/Widgets/LabelChild.vala"
	return self;
#line 185 "LabelChild.c"
}


WidgetsLabelChild*
widgets_label_child_new (ObjectsLabel* _label)
{
#line 45 "/run/build/planner/src/Widgets/LabelChild.vala"
	return widgets_label_child_construct (WIDGETS_TYPE_LABEL_CHILD, _label);
#line 194 "LabelChild.c"
}


ObjectsLabel*
widgets_label_child_get_label (WidgetsLabelChild* self)
{
	ObjectsLabel* result;
	ObjectsLabel* _tmp0_;
#line 23 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp0_ = self->priv->_label;
#line 23 "/run/build/planner/src/Widgets/LabelChild.vala"
	result = _tmp0_;
#line 23 "/run/build/planner/src/Widgets/LabelChild.vala"
	return result;
#line 211 "LabelChild.c"
}


static gpointer
_objects_label_ref0 (gpointer self)
{
#line 23 "/run/build/planner/src/Widgets/LabelChild.vala"
	return self ? objects_label_ref (self) : NULL;
#line 220 "LabelChild.c"
}


static void
widgets_label_child_set_label (WidgetsLabelChild* self,
                               ObjectsLabel* value)
{
#line 23 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_return_if_fail (self != NULL);
#line 23 "/run/build/planner/src/Widgets/LabelChild.vala"
	if (widgets_label_child_get_label (self) != value) {
#line 232 "LabelChild.c"
		ObjectsLabel* _tmp0_;
#line 23 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp0_ = _objects_label_ref0 (value);
#line 23 "/run/build/planner/src/Widgets/LabelChild.vala"
		_objects_label_unref0 (self->priv->_label);
#line 23 "/run/build/planner/src/Widgets/LabelChild.vala"
		self->priv->_label = _tmp0_;
#line 23 "/run/build/planner/src/Widgets/LabelChild.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_label_child_properties[WIDGETS_LABEL_CHILD_LABEL_PROPERTY]);
#line 242 "LabelChild.c"
	}
}


static Block60Data*
block60_data_ref (Block60Data* _data60_)
{
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_atomic_int_inc (&_data60_->_ref_count_);
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	return _data60_;
#line 254 "LabelChild.c"
}


static void
block60_data_unref (void * _userdata_)
{
	Block60Data* _data60_;
	_data60_ = (Block60Data*) _userdata_;
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	if (g_atomic_int_dec_and_test (&_data60_->_ref_count_)) {
#line 265 "LabelChild.c"
		WidgetsLabelChild* self;
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
		self = _data60_->self;
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
		_g_object_unref0 (_data60_->remove_revealer);
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
		_g_object_unref0 (self);
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
		g_slice_free (Block60Data, _data60_);
#line 275 "LabelChild.c"
	}
}


static gboolean
_widgets_label_child___lambda4_ (Block60Data* _data60_,
                                 GdkEventCrossing* event)
{
	WidgetsLabelChild* self;
	gboolean result = FALSE;
	gboolean _tmp0_;
#line 98 "/run/build/planner/src/Widgets/LabelChild.vala"
	self = _data60_->self;
#line 98 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 99 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp0_ = self->show_close;
#line 99 "/run/build/planner/src/Widgets/LabelChild.vala"
	if (_tmp0_) {
#line 295 "LabelChild.c"
		GtkRevealer* _tmp1_;
#line 100 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp1_ = _data60_->remove_revealer;
#line 100 "/run/build/planner/src/Widgets/LabelChild.vala"
		gtk_revealer_set_reveal_child (_tmp1_, TRUE);
#line 301 "LabelChild.c"
	}
#line 103 "/run/build/planner/src/Widgets/LabelChild.vala"
	result = FALSE;
#line 103 "/run/build/planner/src/Widgets/LabelChild.vala"
	return result;
#line 307 "LabelChild.c"
}


static gboolean
__widgets_label_child___lambda4__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                                GdkEventCrossing* event,
                                                                gpointer self)
{
	gboolean result;
	result = _widgets_label_child___lambda4_ (self, event);
#line 98 "/run/build/planner/src/Widgets/LabelChild.vala"
	return result;
#line 320 "LabelChild.c"
}


static gboolean
_widgets_label_child___lambda5_ (Block60Data* _data60_,
                                 GdkEventCrossing* event)
{
	WidgetsLabelChild* self;
	gboolean result = FALSE;
	GdkNotifyType _tmp0_;
	gboolean _tmp1_;
#line 106 "/run/build/planner/src/Widgets/LabelChild.vala"
	self = _data60_->self;
#line 106 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 107 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp0_ = event->detail;
#line 107 "/run/build/planner/src/Widgets/LabelChild.vala"
	if (_tmp0_ == GDK_NOTIFY_INFERIOR) {
#line 108 "/run/build/planner/src/Widgets/LabelChild.vala"
		result = FALSE;
#line 108 "/run/build/planner/src/Widgets/LabelChild.vala"
		return result;
#line 344 "LabelChild.c"
	}
#line 111 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp1_ = self->show_close;
#line 111 "/run/build/planner/src/Widgets/LabelChild.vala"
	if (_tmp1_) {
#line 350 "LabelChild.c"
		GtkRevealer* _tmp2_;
#line 112 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp2_ = _data60_->remove_revealer;
#line 112 "/run/build/planner/src/Widgets/LabelChild.vala"
		gtk_revealer_set_reveal_child (_tmp2_, FALSE);
#line 356 "LabelChild.c"
	}
#line 115 "/run/build/planner/src/Widgets/LabelChild.vala"
	result = FALSE;
#line 115 "/run/build/planner/src/Widgets/LabelChild.vala"
	return result;
#line 362 "LabelChild.c"
}


static gboolean
__widgets_label_child___lambda5__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                                GdkEventCrossing* event,
                                                                gpointer self)
{
	gboolean result;
	result = _widgets_label_child___lambda5_ (self, event);
#line 106 "/run/build/planner/src/Widgets/LabelChild.vala"
	return result;
#line 375 "LabelChild.c"
}


static gboolean
__lambda7_ (WidgetsLabelChild* self)
{
	gboolean result = FALSE;
	gdouble _tmp0_;
	gdouble _tmp1_;
	gdouble _tmp2_;
	gdouble _tmp3_;
#line 120 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp0_ = gtk_widget_get_opacity ((GtkWidget*) self);
#line 120 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp1_ = _tmp0_;
#line 120 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_widget_set_opacity ((GtkWidget*) self, _tmp1_ - 0.1);
#line 122 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp2_ = gtk_widget_get_opacity ((GtkWidget*) self);
#line 122 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp3_ = _tmp2_;
#line 122 "/run/build/planner/src/Widgets/LabelChild.vala"
	if (_tmp3_ <= ((gdouble) 0)) {
#line 123 "/run/build/planner/src/Widgets/LabelChild.vala"
		gtk_widget_destroy ((GtkWidget*) self);
#line 124 "/run/build/planner/src/Widgets/LabelChild.vala"
		result = FALSE;
#line 124 "/run/build/planner/src/Widgets/LabelChild.vala"
		return result;
#line 405 "LabelChild.c"
	}
#line 127 "/run/build/planner/src/Widgets/LabelChild.vala"
	result = TRUE;
#line 127 "/run/build/planner/src/Widgets/LabelChild.vala"
	return result;
#line 411 "LabelChild.c"
}


static gboolean
___lambda7__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda7_ ((WidgetsLabelChild*) self);
#line 119 "/run/build/planner/src/Widgets/LabelChild.vala"
	return result;
#line 422 "LabelChild.c"
}


static void
_widgets_label_child___lambda6_ (WidgetsLabelChild* self)
{
#line 119 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 20, ___lambda7__gsource_func, g_object_ref (self), g_object_unref);
#line 431 "LabelChild.c"
}


static void
__widgets_label_child___lambda6__gtk_button_clicked (GtkButton* _sender,
                                                     gpointer self)
{
#line 118 "/run/build/planner/src/Widgets/LabelChild.vala"
	_widgets_label_child___lambda6_ ((WidgetsLabelChild*) self);
#line 441 "LabelChild.c"
}


static GObject *
widgets_label_child_constructor (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsLabelChild * self;
	Block60Data* _data60_;
	GtkStyleContext* _tmp0_;
	GtkButton* remove_button = NULL;
	GtkButton* _tmp1_;
	GtkButton* _tmp2_;
	GtkStyleContext* _tmp3_;
	GtkRevealer* _tmp4_;
	GtkRevealer* _tmp5_;
	GtkRevealer* _tmp6_;
	GtkRevealer* _tmp7_;
	GtkRevealer* _tmp8_;
	GtkButton* _tmp9_;
	GtkRevealer* _tmp10_;
	GtkLabel* name_label = NULL;
	ObjectsLabel* _tmp11_;
	const gchar* _tmp12_;
	GtkLabel* _tmp13_;
	GtkLabel* _tmp14_;
	GtkLabel* _tmp15_;
	GtkStyleContext* _tmp16_;
	ObjectsLabel* _tmp17_;
	gint _tmp18_;
	gchar* _tmp19_;
	gchar* _tmp20_;
	gchar* _tmp21_;
	gchar* _tmp22_;
	GtkOverlay* overlay = NULL;
	GtkOverlay* _tmp23_;
	GtkOverlay* _tmp24_;
	GtkOverlay* _tmp25_;
	GtkRevealer* _tmp26_;
	GtkOverlay* _tmp27_;
	GtkLabel* _tmp28_;
	GtkEventBox* eventbox = NULL;
	GtkEventBox* _tmp29_;
	GtkEventBox* _tmp30_;
	GtkEventBox* _tmp31_;
	GtkOverlay* _tmp32_;
	GtkEventBox* _tmp33_;
	GtkCssProvider* provider = NULL;
	GtkCssProvider* _tmp34_;
	GtkEventBox* _tmp57_;
	GtkEventBox* _tmp58_;
	GtkButton* _tmp59_;
	GError * _inner_error_ = NULL;
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	parent_class = G_OBJECT_CLASS (widgets_label_child_parent_class);
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChild);
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	_data60_ = g_slice_new0 (Block60Data);
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	_data60_->_ref_count_ = 1;
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	_data60_->self = g_object_ref (self);
#line 52 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 52 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_style_context_add_class (_tmp0_, "label-child");
#line 54 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp1_ = (GtkButton*) gtk_button_new_from_icon_name ("window-close-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 54 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_object_ref_sink (_tmp1_);
#line 54 "/run/build/planner/src/Widgets/LabelChild.vala"
	remove_button = _tmp1_;
#line 55 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp2_ = remove_button;
#line 55 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) _tmp2_);
#line 55 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_style_context_add_class (_tmp3_, "button-close");
#line 57 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp4_ = (GtkRevealer*) gtk_revealer_new ();
#line 57 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_object_ref_sink (_tmp4_);
#line 57 "/run/build/planner/src/Widgets/LabelChild.vala"
	_data60_->remove_revealer = _tmp4_;
#line 58 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp5_ = _data60_->remove_revealer;
#line 58 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_revealer_set_transition_type (_tmp5_, GTK_REVEALER_TRANSITION_TYPE_CROSSFADE);
#line 59 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp6_ = _data60_->remove_revealer;
#line 59 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp6_, GTK_ALIGN_START);
#line 60 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp7_ = _data60_->remove_revealer;
#line 60 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp7_, GTK_ALIGN_START);
#line 61 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp8_ = _data60_->remove_revealer;
#line 61 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp9_ = remove_button;
#line 61 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_container_add ((GtkContainer*) _tmp8_, (GtkWidget*) _tmp9_);
#line 62 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp10_ = _data60_->remove_revealer;
#line 62 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_revealer_set_reveal_child (_tmp10_, FALSE);
#line 64 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp11_ = self->priv->_label;
#line 64 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp12_ = _tmp11_->name;
#line 64 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp13_ = (GtkLabel*) gtk_label_new (_tmp12_);
#line 64 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_object_ref_sink (_tmp13_);
#line 64 "/run/build/planner/src/Widgets/LabelChild.vala"
	name_label = _tmp13_;
#line 65 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp14_ = name_label;
#line 65 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_object_set ((GtkWidget*) _tmp14_, "margin", 6, NULL);
#line 66 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp15_ = name_label;
#line 66 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp16_ = gtk_widget_get_style_context ((GtkWidget*) _tmp15_);
#line 66 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp17_ = self->priv->_label;
#line 66 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp18_ = _tmp17_->id;
#line 66 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp19_ = g_strdup_printf ("%i", _tmp18_);
#line 66 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp20_ = _tmp19_;
#line 66 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp21_ = g_strconcat ("label-", _tmp20_, NULL);
#line 66 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp22_ = _tmp21_;
#line 66 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_style_context_add_class (_tmp16_, _tmp22_);
#line 66 "/run/build/planner/src/Widgets/LabelChild.vala"
	_g_free0 (_tmp22_);
#line 66 "/run/build/planner/src/Widgets/LabelChild.vala"
	_g_free0 (_tmp20_);
#line 68 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp23_ = (GtkOverlay*) gtk_overlay_new ();
#line 68 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_object_ref_sink (_tmp23_);
#line 68 "/run/build/planner/src/Widgets/LabelChild.vala"
	overlay = _tmp23_;
#line 69 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp24_ = overlay;
#line 69 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp24_, GTK_ALIGN_START);
#line 71 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp25_ = overlay;
#line 71 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp26_ = _data60_->remove_revealer;
#line 71 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_overlay_add_overlay (_tmp25_, (GtkWidget*) _tmp26_);
#line 72 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp27_ = overlay;
#line 72 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp28_ = name_label;
#line 72 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_container_add ((GtkContainer*) _tmp27_, (GtkWidget*) _tmp28_);
#line 74 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp29_ = (GtkEventBox*) gtk_event_box_new ();
#line 74 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_object_ref_sink (_tmp29_);
#line 74 "/run/build/planner/src/Widgets/LabelChild.vala"
	eventbox = _tmp29_;
#line 75 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp30_ = eventbox;
#line 75 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_widget_add_events ((GtkWidget*) _tmp30_, (gint) (GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK));
#line 76 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp31_ = eventbox;
#line 76 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp32_ = overlay;
#line 76 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_container_add ((GtkContainer*) _tmp31_, (GtkWidget*) _tmp32_);
#line 78 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp33_ = eventbox;
#line 78 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp33_);
#line 79 "/run/build/planner/src/Widgets/LabelChild.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 81 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp34_ = gtk_css_provider_new ();
#line 81 "/run/build/planner/src/Widgets/LabelChild.vala"
	provider = _tmp34_;
#line 638 "LabelChild.c"
	{
		gchar* colored_css = NULL;
		ObjectsLabel* _tmp35_;
		gint _tmp36_;
		ObjectsLabel* _tmp37_;
		const gchar* _tmp38_;
		ObjectsLabel* _tmp39_;
		const gchar* _tmp40_;
		ObjectsLabel* _tmp41_;
		const gchar* _tmp42_;
		Utils* _tmp43_;
		ObjectsLabel* _tmp44_;
		const gchar* _tmp45_;
		gchar* _tmp46_;
		gchar* _tmp47_;
		gchar* _tmp48_;
		gchar* _tmp49_;
		GtkCssProvider* _tmp50_;
		const gchar* _tmp51_;
		const gchar* _tmp52_;
		gint _tmp53_;
		gint _tmp54_;
		GdkScreen* _tmp55_;
		GtkCssProvider* _tmp56_;
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp35_ = self->priv->_label;
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp36_ = _tmp35_->id;
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp37_ = self->priv->_label;
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp38_ = _tmp37_->color;
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp39_ = self->priv->_label;
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp40_ = _tmp39_->color;
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp41_ = self->priv->_label;
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp42_ = _tmp41_->color;
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp43_ = application_utils;
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp44_ = self->priv->_label;
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp45_ = _tmp44_->color;
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp46_ = utils_convert_invert (_tmp43_, _tmp45_);
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp47_ = _tmp46_;
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp48_ = g_strdup_printf (WIDGETS_LABEL_CHILD_COLOR_CSS, _tmp36_, _tmp38_, _tmp40_, _tmp42_, _tmp47_);
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp49_ = _tmp48_;
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		_g_free0 (_tmp47_);
#line 84 "/run/build/planner/src/Widgets/LabelChild.vala"
		colored_css = _tmp49_;
#line 91 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp50_ = provider;
#line 91 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp51_ = colored_css;
#line 91 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp52_ = colored_css;
#line 91 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp53_ = strlen (_tmp52_);
#line 91 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp54_ = _tmp53_;
#line 91 "/run/build/planner/src/Widgets/LabelChild.vala"
		gtk_css_provider_load_from_data (_tmp50_, _tmp51_, (gssize) _tmp54_, &_inner_error_);
#line 91 "/run/build/planner/src/Widgets/LabelChild.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 91 "/run/build/planner/src/Widgets/LabelChild.vala"
			_g_free0 (colored_css);
#line 713 "LabelChild.c"
			goto __catch42_g_error;
		}
#line 93 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp55_ = gdk_screen_get_default ();
#line 93 "/run/build/planner/src/Widgets/LabelChild.vala"
		_tmp56_ = provider;
#line 93 "/run/build/planner/src/Widgets/LabelChild.vala"
		gtk_style_context_add_provider_for_screen (_tmp55_, (GtkStyleProvider*) _tmp56_, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 83 "/run/build/planner/src/Widgets/LabelChild.vala"
		_g_free0 (colored_css);
#line 724 "LabelChild.c"
	}
	goto __finally42;
	__catch42_g_error:
	{
		GError* e = NULL;
#line 83 "/run/build/planner/src/Widgets/LabelChild.vala"
		e = _inner_error_;
#line 83 "/run/build/planner/src/Widgets/LabelChild.vala"
		_inner_error_ = NULL;
#line 95 "/run/build/planner/src/Widgets/LabelChild.vala"
		_g_error_free0 (e);
#line 95 "/run/build/planner/src/Widgets/LabelChild.vala"
		_g_object_unref0 (provider);
#line 95 "/run/build/planner/src/Widgets/LabelChild.vala"
		_g_object_unref0 (eventbox);
#line 95 "/run/build/planner/src/Widgets/LabelChild.vala"
		_g_object_unref0 (overlay);
#line 95 "/run/build/planner/src/Widgets/LabelChild.vala"
		_g_object_unref0 (name_label);
#line 95 "/run/build/planner/src/Widgets/LabelChild.vala"
		_g_object_unref0 (remove_button);
#line 95 "/run/build/planner/src/Widgets/LabelChild.vala"
		block60_data_unref (_data60_);
#line 95 "/run/build/planner/src/Widgets/LabelChild.vala"
		_data60_ = NULL;
#line 95 "/run/build/planner/src/Widgets/LabelChild.vala"
		return obj;
#line 752 "LabelChild.c"
	}
	__finally42:
#line 83 "/run/build/planner/src/Widgets/LabelChild.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 83 "/run/build/planner/src/Widgets/LabelChild.vala"
		_g_object_unref0 (provider);
#line 83 "/run/build/planner/src/Widgets/LabelChild.vala"
		_g_object_unref0 (eventbox);
#line 83 "/run/build/planner/src/Widgets/LabelChild.vala"
		_g_object_unref0 (overlay);
#line 83 "/run/build/planner/src/Widgets/LabelChild.vala"
		_g_object_unref0 (name_label);
#line 83 "/run/build/planner/src/Widgets/LabelChild.vala"
		_g_object_unref0 (remove_button);
#line 83 "/run/build/planner/src/Widgets/LabelChild.vala"
		block60_data_unref (_data60_);
#line 83 "/run/build/planner/src/Widgets/LabelChild.vala"
		_data60_ = NULL;
#line 83 "/run/build/planner/src/Widgets/LabelChild.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 83 "/run/build/planner/src/Widgets/LabelChild.vala"
		g_clear_error (&_inner_error_);
#line 775 "LabelChild.c"
	}
#line 98 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp57_ = eventbox;
#line 98 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_signal_connect_data ((GtkWidget*) _tmp57_, "enter-notify-event", (GCallback) __widgets_label_child___lambda4__gtk_widget_enter_notify_event, block60_data_ref (_data60_), (GClosureNotify) block60_data_unref, 0);
#line 106 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp58_ = eventbox;
#line 106 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_signal_connect_data ((GtkWidget*) _tmp58_, "leave-notify-event", (GCallback) __widgets_label_child___lambda5__gtk_widget_leave_notify_event, block60_data_ref (_data60_), (GClosureNotify) block60_data_unref, 0);
#line 118 "/run/build/planner/src/Widgets/LabelChild.vala"
	_tmp59_ = remove_button;
#line 118 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_signal_connect_object (_tmp59_, "clicked", (GCallback) __widgets_label_child___lambda6__gtk_button_clicked, self, 0);
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	_g_object_unref0 (provider);
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	_g_object_unref0 (eventbox);
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	_g_object_unref0 (overlay);
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	_g_object_unref0 (name_label);
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	_g_object_unref0 (remove_button);
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	block60_data_unref (_data60_);
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	_data60_ = NULL;
#line 51 "/run/build/planner/src/Widgets/LabelChild.vala"
	return obj;
#line 805 "LabelChild.c"
}


static void
widgets_label_child_class_init (WidgetsLabelChildClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
	widgets_label_child_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_type_class_add_private (klass, sizeof (WidgetsLabelChildPrivate));
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_label_child_get_property;
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_label_child_set_property;
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_label_child_constructor;
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_label_child_finalize;
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_LABEL_CHILD_LABEL_PROPERTY, widgets_label_child_properties[WIDGETS_LABEL_CHILD_LABEL_PROPERTY] = objects_param_spec_label ("label", "label", "label", OBJECTS_TYPE_LABEL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 826 "LabelChild.c"
}


static void
widgets_label_child_instance_init (WidgetsLabelChild * self)
{
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
	self->priv = WIDGETS_LABEL_CHILD_GET_PRIVATE (self);
#line 24 "/run/build/planner/src/Widgets/LabelChild.vala"
	self->show_close = TRUE;
#line 837 "LabelChild.c"
}


static void
widgets_label_child_finalize (GObject * obj)
{
	WidgetsLabelChild * self;
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChild);
#line 23 "/run/build/planner/src/Widgets/LabelChild.vala"
	_objects_label_unref0 (self->priv->_label);
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
	G_OBJECT_CLASS (widgets_label_child_parent_class)->finalize (obj);
#line 851 "LabelChild.c"
}


GType
widgets_label_child_get_type (void)
{
	static volatile gsize widgets_label_child_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_label_child_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsLabelChildClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_label_child_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsLabelChild), 0, (GInstanceInitFunc) widgets_label_child_instance_init, NULL };
		GType widgets_label_child_type_id;
		widgets_label_child_type_id = g_type_register_static (gtk_flow_box_child_get_type (), "WidgetsLabelChild", &g_define_type_info, 0);
		g_once_init_leave (&widgets_label_child_type_id__volatile, widgets_label_child_type_id);
	}
	return widgets_label_child_type_id__volatile;
}


static void
_vala_widgets_label_child_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec)
{
	WidgetsLabelChild * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChild);
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
		case WIDGETS_LABEL_CHILD_LABEL_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
		objects_value_set_label (value, widgets_label_child_get_label (self));
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
		break;
#line 885 "LabelChild.c"
		default:
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
		break;
#line 891 "LabelChild.c"
	}
}


static void
_vala_widgets_label_child_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec)
{
	WidgetsLabelChild * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChild);
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
		case WIDGETS_LABEL_CHILD_LABEL_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
		widgets_label_child_set_label (self, objects_value_get_label (value));
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
		break;
#line 912 "LabelChild.c"
		default:
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/LabelChild.vala"
		break;
#line 918 "LabelChild.c"
	}
}



