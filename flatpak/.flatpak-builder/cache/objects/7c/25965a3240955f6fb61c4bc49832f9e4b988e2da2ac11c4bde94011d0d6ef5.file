/* avatar-cache.c generated by valac 0.40.11, the Vala compiler
 * generated from avatar-cache.vala, do not modify */

/*
 * Copyright (C) 2011 Collabora Ltd.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Philip Withnall <philip.withnall@collabora.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>


#define FOLKS_TYPE_AVATAR_CACHE (folks_avatar_cache_get_type ())
#define FOLKS_AVATAR_CACHE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_AVATAR_CACHE, FolksAvatarCache))
#define FOLKS_AVATAR_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_AVATAR_CACHE, FolksAvatarCacheClass))
#define FOLKS_IS_AVATAR_CACHE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_AVATAR_CACHE))
#define FOLKS_IS_AVATAR_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_AVATAR_CACHE))
#define FOLKS_AVATAR_CACHE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_AVATAR_CACHE, FolksAvatarCacheClass))

typedef struct _FolksAvatarCache FolksAvatarCache;
typedef struct _FolksAvatarCacheClass FolksAvatarCacheClass;
typedef struct _FolksAvatarCachePrivate FolksAvatarCachePrivate;
typedef struct _DelegateWrapper DelegateWrapper;
enum  {
	FOLKS_AVATAR_CACHE_0_PROPERTY,
	FOLKS_AVATAR_CACHE_NUM_PROPERTIES
};
static GParamSpec* folks_avatar_cache_properties[FOLKS_AVATAR_CACHE_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _FolksAvatarCacheLoadAvatarData FolksAvatarCacheLoadAvatarData;
#define _delegate_wrapper_free0(var) ((var == NULL) ? NULL : (var = (delegate_wrapper_free (var), NULL)))
typedef struct _FolksAvatarCacheStoreAvatarData FolksAvatarCacheStoreAvatarData;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _FolksAvatarCacheStoreAvatarUnlimitedData FolksAvatarCacheStoreAvatarUnlimitedData;
typedef struct _FolksAvatarCacheRemoveAvatarData FolksAvatarCacheRemoveAvatarData;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _FolksAvatarCache {
	GObject parent_instance;
	FolksAvatarCachePrivate * priv;
};

struct _FolksAvatarCacheClass {
	GObjectClass parent_class;
};

struct _FolksAvatarCachePrivate {
	GFile* _cache_directory;
	guint _n_ongoing_stores;
	GQueue* _pending_stores;
};

struct _FolksAvatarCacheLoadAvatarData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksAvatarCache* self;
	gchar* id;
	GLoadableIcon* result;
	GFile* avatar_file;
	GFile* _tmp0_;
	GFile* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	GFile* _tmp4_;
	GFile* _tmp5_;
	GFileIcon* _tmp6_;
};

struct _DelegateWrapper {
	GSourceFunc cb;
	gpointer cb_target;
	GDestroyNotify cb_target_destroy_notify;
};

struct _FolksAvatarCacheStoreAvatarData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksAvatarCache* self;
	gchar* id;
	GLoadableIcon* avatar;
	gchar* result;
	gchar* avatar_uri;
	gchar* _tmp0_;
	guint _tmp1_;
	DelegateWrapper* wrapper;
	DelegateWrapper* _tmp2_;
	DelegateWrapper* _tmp3_;
	GQueue* _tmp4_;
	DelegateWrapper* _tmp5_;
	guint _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	gchar* _tmp9_;
	guint _tmp10_;
	DelegateWrapper* _vala1_wrapper;
	GQueue* _tmp11_;
	gpointer _tmp12_;
	DelegateWrapper* _tmp13_;
	DelegateWrapper* _tmp14_;
	GSourceFunc _tmp15_;
	void* _tmp15__target;
	GError * _inner_error_;
};

struct _FolksAvatarCacheStoreAvatarUnlimitedData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksAvatarCache* self;
	gchar* id;
	GLoadableIcon* avatar;
	gchar* result;
	GFile* dest_avatar_file;
	GFile* _tmp0_;
	GFile* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	GInputStream* src_avatar_stream;
	GInputStream* _tmp4_;
	GOutputStream* dest_avatar_stream;
	GFileOutputStream* _tmp5_;
	GFile* _tmp6_;
	GFileOutputStream* _tmp7_;
	GFileOutputStream* _tmp8_;
	GOutputStream* _tmp9_;
	GInputStream* _tmp10_;
	GOutputStream* _tmp11_;
	GError* e;
	GError* _tmp12_;
	GOutputStream* _tmp13_;
	GOutputStream* _tmp14_;
	GError* _tmp15_;
	GError* _tmp16_;
	GInputStream* _tmp17_;
	gchar* _tmp18_;
	GError * _inner_error_;
};

struct _FolksAvatarCacheRemoveAvatarData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksAvatarCache* self;
	gchar* id;
	GFile* avatar_file;
	GFile* _tmp0_;
	GFile* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	GFile* _tmp4_;
	GError* e;
	GError* _tmp5_;
	GError* _tmp6_;
	GError* _tmp7_;
	GError * _inner_error_;
};


static gpointer folks_avatar_cache_parent_class = NULL;
static FolksAvatarCache* folks_avatar_cache__instance;
static FolksAvatarCache* folks_avatar_cache__instance = NULL;

GType folks_avatar_cache_get_type (void) G_GNUC_CONST;
void delegate_wrapper_free (DelegateWrapper * self);
#define FOLKS_AVATAR_CACHE_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_TYPE_AVATAR_CACHE, FolksAvatarCachePrivate))
static void _delegate_wrapper_free0_ (gpointer var);
static inline void _g_queue_free__delegate_wrapper_free0_ (GQueue* self);
#define FOLKS_AVATAR_CACHE__max_n_ongoing_stores ((guint) 10)
static FolksAvatarCache* folks_avatar_cache_new (void);
static FolksAvatarCache* folks_avatar_cache_construct (GType object_type);
FolksAvatarCache* folks_avatar_cache_dup (void);
static void folks_avatar_cache_load_avatar_data_free (gpointer _data);
static void folks_avatar_cache_load_avatar_async_ready_wrapper (GObject *source_object,
                                                         GAsyncResult *res,
                                                         void *user_data);
void folks_avatar_cache_load_avatar (FolksAvatarCache* self,
                                     const gchar* id,
                                     GAsyncReadyCallback _callback_,
                                     gpointer _user_data_);
GLoadableIcon* folks_avatar_cache_load_avatar_finish (FolksAvatarCache* self,
                                                      GAsyncResult* _res_,
                                                      GError** error);
static gboolean folks_avatar_cache_load_avatar_co (FolksAvatarCacheLoadAvatarData* _data_);
static GFile* _folks_avatar_cache_get_avatar_file (FolksAvatarCache* self,
                                            const gchar* id);
static void folks_avatar_cache_store_avatar_data_free (gpointer _data);
static void folks_avatar_cache_store_avatar_async_ready_wrapper (GObject *source_object,
                                                          GAsyncResult *res,
                                                          void *user_data);
void folks_avatar_cache_store_avatar (FolksAvatarCache* self,
                                      const gchar* id,
                                      GLoadableIcon* avatar,
                                      GAsyncReadyCallback _callback_,
                                      gpointer _user_data_);
gchar* folks_avatar_cache_store_avatar_finish (FolksAvatarCache* self,
                                               GAsyncResult* _res_,
                                               GError** error);
static gboolean folks_avatar_cache_store_avatar_co (FolksAvatarCacheStoreAvatarData* _data_);
DelegateWrapper* delegate_wrapper_new (void);
static gboolean _folks_avatar_cache_store_avatar_co_gsource_func (gpointer self);
static void _folks_avatar_cache_store_avatar_unlimited (FolksAvatarCache* self,
                                                 const gchar* id,
                                                 GLoadableIcon* avatar,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_);
static gchar* _folks_avatar_cache_store_avatar_unlimited_finish (FolksAvatarCache* self,
                                                          GAsyncResult* _res_,
                                                          GError** error);
static void folks_avatar_cache_store_avatar_ready (GObject* source_object,
                                            GAsyncResult* _res_,
                                            gpointer _user_data_);
static void _folks_avatar_cache_store_avatar_unlimited_data_free (gpointer _data);
static void _folks_avatar_cache_store_avatar_unlimited_async_ready_wrapper (GObject *source_object,
                                                                     GAsyncResult *res,
                                                                     void *user_data);
static gboolean _folks_avatar_cache_store_avatar_unlimited_co (FolksAvatarCacheStoreAvatarUnlimitedData* _data_);
static void _folks_avatar_cache_store_avatar_unlimited_ready (GObject* source_object,
                                                       GAsyncResult* _res_,
                                                       gpointer _user_data_);
static void _folks_avatar_cache_create_cache_directory (FolksAvatarCache* self,
                                                 GError** error);
gchar* folks_avatar_cache_build_uri_for_avatar (FolksAvatarCache* self,
                                                const gchar* id);
static void folks_avatar_cache_remove_avatar_data_free (gpointer _data);
static void folks_avatar_cache_remove_avatar_async_ready_wrapper (GObject *source_object,
                                                           GAsyncResult *res,
                                                           void *user_data);
void folks_avatar_cache_remove_avatar (FolksAvatarCache* self,
                                       const gchar* id,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_);
void folks_avatar_cache_remove_avatar_finish (FolksAvatarCache* self,
                                              GAsyncResult* _res_,
                                              GError** error);
static gboolean folks_avatar_cache_remove_avatar_co (FolksAvatarCacheRemoveAvatarData* _data_);
static GObject * folks_avatar_cache_constructor (GType type,
                                          guint n_construct_properties,
                                          GObjectConstructParam * construct_properties);
static void folks_avatar_cache_finalize (GObject * obj);
static void delegate_wrapper_instance_init (DelegateWrapper * self);


static void
_delegate_wrapper_free0_ (gpointer var)
{
#line 51 "/run/build/folks/folks/avatar-cache.vala"
	(var == NULL) ? NULL : (var = (delegate_wrapper_free (var), NULL));
#line 286 "avatar-cache.c"
}


static inline void
_g_queue_free__delegate_wrapper_free0_ (GQueue* self)
{
#line 51 "/run/build/folks/folks/avatar-cache.vala"
	g_queue_free_full (self, (GDestroyNotify) _delegate_wrapper_free0_);
#line 295 "avatar-cache.c"
}


/**
   * Private constructor for an instance of the avatar cache. The singleton
   * instance should be retrieved by calling {@link AvatarCache.dup()} instead.
   *
   * @since 0.6.0
   */
static FolksAvatarCache*
folks_avatar_cache_construct (GType object_type)
{
	FolksAvatarCache * self = NULL;
#line 63 "/run/build/folks/folks/avatar-cache.vala"
	self = (FolksAvatarCache*) g_object_new (object_type, NULL);
#line 61 "/run/build/folks/folks/avatar-cache.vala"
	return self;
#line 313 "avatar-cache.c"
}


static FolksAvatarCache*
folks_avatar_cache_new (void)
{
#line 61 "/run/build/folks/folks/avatar-cache.vala"
	return folks_avatar_cache_construct (FOLKS_TYPE_AVATAR_CACHE);
#line 322 "avatar-cache.c"
}


/**
   * Create or return the singleton {@link Folks.AvatarCache} class instance.
   * If the instance doesn't exist already, it will be created.
   *
   * This function is thread-safe.
   *
   * @return Singleton {@link Folks.AvatarCache} instance
   * @since 0.6.0
   */
static gpointer
_g_object_ref0 (gpointer self)
{
#line 85 "/run/build/folks/folks/avatar-cache.vala"
	return self ? g_object_ref (self) : NULL;
#line 340 "avatar-cache.c"
}


FolksAvatarCache*
folks_avatar_cache_dup (void)
{
	FolksAvatarCache* result = NULL;
	FolksAvatarCache* _retval = NULL;
	FolksAvatarCache* _tmp0_;
	FolksAvatarCache* _tmp1_;
	FolksAvatarCache* retval = NULL;
	FolksAvatarCache* _tmp2_;
#line 85 "/run/build/folks/folks/avatar-cache.vala"
	_tmp0_ = folks_avatar_cache__instance;
#line 85 "/run/build/folks/folks/avatar-cache.vala"
	_tmp1_ = _g_object_ref0 (_tmp0_);
#line 85 "/run/build/folks/folks/avatar-cache.vala"
	_retval = _tmp1_;
#line 88 "/run/build/folks/folks/avatar-cache.vala"
	_tmp2_ = _retval;
#line 88 "/run/build/folks/folks/avatar-cache.vala"
	if (_tmp2_ == NULL) {
#line 363 "avatar-cache.c"
		FolksAvatarCache* _tmp3_;
		FolksAvatarCache* _tmp4_;
#line 91 "/run/build/folks/folks/avatar-cache.vala"
		_tmp3_ = folks_avatar_cache_new ();
#line 91 "/run/build/folks/folks/avatar-cache.vala"
		_g_object_unref0 (retval);
#line 91 "/run/build/folks/folks/avatar-cache.vala"
		retval = _tmp3_;
#line 92 "/run/build/folks/folks/avatar-cache.vala"
		_tmp4_ = retval;
#line 92 "/run/build/folks/folks/avatar-cache.vala"
		folks_avatar_cache__instance = _tmp4_;
#line 376 "avatar-cache.c"
	} else {
		FolksAvatarCache* _tmp5_;
		FolksAvatarCache* _tmp6_;
#line 96 "/run/build/folks/folks/avatar-cache.vala"
		_tmp5_ = _retval;
#line 96 "/run/build/folks/folks/avatar-cache.vala"
		_tmp6_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp5_, FOLKS_TYPE_AVATAR_CACHE, FolksAvatarCache));
#line 96 "/run/build/folks/folks/avatar-cache.vala"
		_g_object_unref0 (retval);
#line 96 "/run/build/folks/folks/avatar-cache.vala"
		retval = _tmp6_;
#line 388 "avatar-cache.c"
	}
#line 99 "/run/build/folks/folks/avatar-cache.vala"
	result = retval;
#line 99 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_retval);
#line 99 "/run/build/folks/folks/avatar-cache.vala"
	return result;
#line 396 "avatar-cache.c"
}


static void
folks_avatar_cache_load_avatar_data_free (gpointer _data)
{
	FolksAvatarCacheLoadAvatarData* _data_;
	_data_ = _data;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_free0 (_data_->id);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_data_->result);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_data_->self);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	g_slice_free (FolksAvatarCacheLoadAvatarData, _data_);
#line 413 "avatar-cache.c"
}


static void
folks_avatar_cache_load_avatar_async_ready_wrapper (GObject *source_object,
                                                    GAsyncResult *res,
                                                    void *user_data)
{
	FolksAvatarCacheLoadAvatarData* _task_data_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	if (_task_data_->_callback_ != NULL) {
#line 46 "/run/build/folks/folks/avatar-cache.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 429 "avatar-cache.c"
	}
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_task_data_->_task_complete_ = TRUE;
#line 433 "avatar-cache.c"
}


void
folks_avatar_cache_load_avatar (FolksAvatarCache* self,
                                const gchar* id,
                                GAsyncReadyCallback _callback_,
                                gpointer _user_data_)
{
	FolksAvatarCacheLoadAvatarData* _data_;
	FolksAvatarCache* _tmp0_;
	gchar* _tmp1_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_ = g_slice_new0 (FolksAvatarCacheLoadAvatarData);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_callback_ = _callback_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_avatar_cache_load_avatar_async_ready_wrapper, _user_data_);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	if (_callback_ == NULL) {
#line 46 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_task_complete_ = TRUE;
#line 456 "avatar-cache.c"
	}
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_avatar_cache_load_avatar_data_free);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->self = _tmp0_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_tmp1_ = g_strdup (id);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_free0 (_data_->id);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->id = _tmp1_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	folks_avatar_cache_load_avatar_co (_data_);
#line 472 "avatar-cache.c"
}


GLoadableIcon*
folks_avatar_cache_load_avatar_finish (FolksAvatarCache* self,
                                       GAsyncResult* _res_,
                                       GError** error)
{
	GLoadableIcon* result;
	FolksAvatarCacheLoadAvatarData* _data_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	if (NULL == _data_) {
#line 46 "/run/build/folks/folks/avatar-cache.vala"
		return NULL;
#line 489 "avatar-cache.c"
	}
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	result = _data_->result;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->result = NULL;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	return result;
#line 497 "avatar-cache.c"
}


/**
   * Fetch an avatar from the cache by its globally unique ID.
   *
   * It is up to the caller to ensure that file I/O is rate-limited when loading
   * many avatars in parallel, by limiting calls to
   * {@link GLib.LoadableIcon.load}.
   *
   * @param id the globally unique ID for the avatar
   * @return Avatar from the cache, or ``null`` if it doesn't exist in the cache
   * @throws GLib.Error if checking for existence of the cache file failed
   * @since 0.6.0
   */
static gboolean
folks_avatar_cache_load_avatar_co (FolksAvatarCacheLoadAvatarData* _data_)
{
#line 120 "/run/build/folks/folks/avatar-cache.vala"
	switch (_data_->_state_) {
#line 120 "/run/build/folks/folks/avatar-cache.vala"
		case 0:
#line 520 "avatar-cache.c"
		goto _state_0;
		default:
#line 120 "/run/build/folks/folks/avatar-cache.vala"
		g_assert_not_reached ();
#line 525 "avatar-cache.c"
	}
	_state_0:
#line 122 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp0_ = _folks_avatar_cache_get_avatar_file (_data_->self, _data_->id);
#line 122 "/run/build/folks/folks/avatar-cache.vala"
	_data_->avatar_file = _data_->_tmp0_;
#line 124 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp1_ = _data_->avatar_file;
#line 124 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp2_ = g_file_get_uri (_data_->_tmp1_);
#line 124 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp3_ = _data_->_tmp2_;
#line 124 "/run/build/folks/folks/avatar-cache.vala"
	g_debug ("avatar-cache.vala:124: Loading avatar '%s' from file '%s'.", _data_->id, _data_->_tmp3_);
#line 124 "/run/build/folks/folks/avatar-cache.vala"
	_g_free0 (_data_->_tmp3_);
#line 127 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp4_ = _data_->avatar_file;
#line 127 "/run/build/folks/folks/avatar-cache.vala"
	if (g_file_query_exists (_data_->_tmp4_, NULL) == FALSE) {
#line 129 "/run/build/folks/folks/avatar-cache.vala"
		_data_->result = NULL;
#line 129 "/run/build/folks/folks/avatar-cache.vala"
		_g_object_unref0 (_data_->avatar_file);
#line 129 "/run/build/folks/folks/avatar-cache.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 129 "/run/build/folks/folks/avatar-cache.vala"
		if (_data_->_state_ != 0) {
#line 129 "/run/build/folks/folks/avatar-cache.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 129 "/run/build/folks/folks/avatar-cache.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 558 "avatar-cache.c"
			}
		}
#line 129 "/run/build/folks/folks/avatar-cache.vala"
		g_object_unref (_data_->_async_result);
#line 129 "/run/build/folks/folks/avatar-cache.vala"
		return FALSE;
#line 565 "avatar-cache.c"
	}
#line 132 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp5_ = _data_->avatar_file;
#line 132 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp6_ = (GFileIcon*) g_file_icon_new (_data_->_tmp5_);
#line 132 "/run/build/folks/folks/avatar-cache.vala"
	_data_->result = (GLoadableIcon*) _data_->_tmp6_;
#line 132 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_data_->avatar_file);
#line 132 "/run/build/folks/folks/avatar-cache.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 132 "/run/build/folks/folks/avatar-cache.vala"
	if (_data_->_state_ != 0) {
#line 132 "/run/build/folks/folks/avatar-cache.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 132 "/run/build/folks/folks/avatar-cache.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 583 "avatar-cache.c"
		}
	}
#line 132 "/run/build/folks/folks/avatar-cache.vala"
	g_object_unref (_data_->_async_result);
#line 132 "/run/build/folks/folks/avatar-cache.vala"
	return FALSE;
#line 590 "avatar-cache.c"
}


static void
folks_avatar_cache_store_avatar_data_free (gpointer _data)
{
	FolksAvatarCacheStoreAvatarData* _data_;
	_data_ = _data;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_free0 (_data_->id);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_data_->avatar);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_free0 (_data_->result);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_data_->self);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	g_slice_free (FolksAvatarCacheStoreAvatarData, _data_);
#line 609 "avatar-cache.c"
}


static void
folks_avatar_cache_store_avatar_async_ready_wrapper (GObject *source_object,
                                                     GAsyncResult *res,
                                                     void *user_data)
{
	FolksAvatarCacheStoreAvatarData* _task_data_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	if (_task_data_->_callback_ != NULL) {
#line 46 "/run/build/folks/folks/avatar-cache.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 625 "avatar-cache.c"
	}
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_task_data_->_task_complete_ = TRUE;
#line 629 "avatar-cache.c"
}


void
folks_avatar_cache_store_avatar (FolksAvatarCache* self,
                                 const gchar* id,
                                 GLoadableIcon* avatar,
                                 GAsyncReadyCallback _callback_,
                                 gpointer _user_data_)
{
	FolksAvatarCacheStoreAvatarData* _data_;
	FolksAvatarCache* _tmp0_;
	gchar* _tmp1_;
	GLoadableIcon* _tmp2_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_ = g_slice_new0 (FolksAvatarCacheStoreAvatarData);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_callback_ = _callback_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_avatar_cache_store_avatar_async_ready_wrapper, _user_data_);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	if (_callback_ == NULL) {
#line 46 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_task_complete_ = TRUE;
#line 654 "avatar-cache.c"
	}
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_avatar_cache_store_avatar_data_free);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->self = _tmp0_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_tmp1_ = g_strdup (id);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_free0 (_data_->id);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->id = _tmp1_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_tmp2_ = _g_object_ref0 (avatar);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_data_->avatar);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->avatar = _tmp2_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	folks_avatar_cache_store_avatar_co (_data_);
#line 676 "avatar-cache.c"
}


gchar*
folks_avatar_cache_store_avatar_finish (FolksAvatarCache* self,
                                        GAsyncResult* _res_,
                                        GError** error)
{
	gchar* result;
	FolksAvatarCacheStoreAvatarData* _data_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	if (NULL == _data_) {
#line 46 "/run/build/folks/folks/avatar-cache.vala"
		return NULL;
#line 693 "avatar-cache.c"
	}
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	result = _data_->result;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->result = NULL;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	return result;
#line 701 "avatar-cache.c"
}


/**
   * Store an avatar in the cache, assigning the given globally unique ID to it,
   * which can later be used to load and remove the avatar from the cache. For
   * example, this ID could be the UID of a persona. The URI of the cached
   * avatar file will be returned.
   *
   * This method may be called multiple times concurrently for the same avatar
   * ID (e.g. an asynchronous call may be made, and a subsequent asynchronous
   * call may begin before the first has finished).
   *
   * Concurrent file I/O may be rate limited within each {@link AvatarCache}
   * instance to avoid file descriptor exhaustion.
   *
   * @param id the globally unique ID for the avatar
   * @param avatar the avatar data to cache
   * @return a URI for the file storing the cached avatar
   * @throws GLib.Error if the avatar data couldn't be loaded, or if creating
   * the avatar directory or cache file failed
   * @since 0.6.0
   */
static gboolean
_folks_avatar_cache_store_avatar_co_gsource_func (gpointer self)
{
	gboolean result;
	result = folks_avatar_cache_store_avatar_co (self);
#line 164 "/run/build/folks/folks/avatar-cache.vala"
	return result;
#line 732 "avatar-cache.c"
}


static void
folks_avatar_cache_store_avatar_ready (GObject* source_object,
                                       GAsyncResult* _res_,
                                       gpointer _user_data_)
{
	FolksAvatarCacheStoreAvatarData* _data_;
#line 173 "/run/build/folks/folks/avatar-cache.vala"
	_data_ = _user_data_;
#line 173 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_source_object_ = source_object;
#line 173 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_res_ = _res_;
#line 173 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_task_complete_ = TRUE;
#line 173 "/run/build/folks/folks/avatar-cache.vala"
	folks_avatar_cache_store_avatar_co (_data_);
#line 752 "avatar-cache.c"
}


static gboolean
folks_avatar_cache_store_avatar_co (FolksAvatarCacheStoreAvatarData* _data_)
{
#line 155 "/run/build/folks/folks/avatar-cache.vala"
	switch (_data_->_state_) {
#line 155 "/run/build/folks/folks/avatar-cache.vala"
		case 0:
#line 763 "avatar-cache.c"
		goto _state_0;
#line 155 "/run/build/folks/folks/avatar-cache.vala"
		case 1:
#line 767 "avatar-cache.c"
		goto _state_1;
#line 155 "/run/build/folks/folks/avatar-cache.vala"
		case 2:
#line 771 "avatar-cache.c"
		goto _state_2;
		default:
#line 155 "/run/build/folks/folks/avatar-cache.vala"
		g_assert_not_reached ();
#line 776 "avatar-cache.c"
	}
	_state_0:
#line 158 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp0_ = g_strdup ("");
#line 158 "/run/build/folks/folks/avatar-cache.vala"
	_data_->avatar_uri = _data_->_tmp0_;
#line 160 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp1_ = _data_->self->priv->_n_ongoing_stores;
#line 160 "/run/build/folks/folks/avatar-cache.vala"
	if (_data_->_tmp1_ > FOLKS_AVATAR_CACHE__max_n_ongoing_stores) {
#line 163 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp2_ = delegate_wrapper_new ();
#line 163 "/run/build/folks/folks/avatar-cache.vala"
		_data_->wrapper = _data_->_tmp2_;
#line 164 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp3_ = _data_->wrapper;
#line 164 "/run/build/folks/folks/avatar-cache.vala"
		(_data_->_tmp3_->cb_target_destroy_notify == NULL) ? NULL : (_data_->_tmp3_->cb_target_destroy_notify (_data_->_tmp3_->cb_target), NULL);
#line 164 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp3_->cb = NULL;
#line 164 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp3_->cb_target = NULL;
#line 164 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp3_->cb_target_destroy_notify = NULL;
#line 164 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp3_->cb = _folks_avatar_cache_store_avatar_co_gsource_func;
#line 164 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp3_->cb_target = _data_;
#line 164 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp3_->cb_target_destroy_notify = NULL;
#line 165 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp4_ = _data_->self->priv->_pending_stores;
#line 165 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp5_ = _data_->wrapper;
#line 165 "/run/build/folks/folks/avatar-cache.vala"
		_data_->wrapper = NULL;
#line 165 "/run/build/folks/folks/avatar-cache.vala"
		g_queue_push_tail (_data_->_tmp4_, _data_->_tmp5_);
#line 166 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_state_ = 1;
#line 166 "/run/build/folks/folks/avatar-cache.vala"
		return FALSE;
#line 819 "avatar-cache.c"
		_state_1:
		;
#line 160 "/run/build/folks/folks/avatar-cache.vala"
		_delegate_wrapper_free0 (_data_->wrapper);
#line 824 "avatar-cache.c"
	}
	{
#line 172 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp6_ = _data_->self->priv->_n_ongoing_stores;
#line 172 "/run/build/folks/folks/avatar-cache.vala"
		_data_->self->priv->_n_ongoing_stores = _data_->_tmp6_ + 1;
#line 173 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_state_ = 2;
#line 173 "/run/build/folks/folks/avatar-cache.vala"
		_folks_avatar_cache_store_avatar_unlimited (_data_->self, _data_->id, _data_->avatar, folks_avatar_cache_store_avatar_ready, _data_);
#line 173 "/run/build/folks/folks/avatar-cache.vala"
		return FALSE;
#line 837 "avatar-cache.c"
		_state_2:
#line 173 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp8_ = _folks_avatar_cache_store_avatar_unlimited_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 173 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp7_ = _data_->_tmp8_;
#line 173 "/run/build/folks/folks/avatar-cache.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 845 "avatar-cache.c"
			goto __finally26;
		}
#line 173 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp9_ = _data_->_tmp7_;
#line 173 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp7_ = NULL;
#line 173 "/run/build/folks/folks/avatar-cache.vala"
		_g_free0 (_data_->avatar_uri);
#line 173 "/run/build/folks/folks/avatar-cache.vala"
		_data_->avatar_uri = _data_->_tmp9_;
#line 170 "/run/build/folks/folks/avatar-cache.vala"
		_g_free0 (_data_->_tmp7_);
#line 858 "avatar-cache.c"
	}
	__finally26:
	{
#line 177 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp10_ = _data_->self->priv->_n_ongoing_stores;
#line 177 "/run/build/folks/folks/avatar-cache.vala"
		_data_->self->priv->_n_ongoing_stores = _data_->_tmp10_ - 1;
#line 180 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp11_ = _data_->self->priv->_pending_stores;
#line 180 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp12_ = g_queue_pop_head (_data_->_tmp11_);
#line 180 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_vala1_wrapper = (DelegateWrapper*) _data_->_tmp12_;
#line 181 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp13_ = _data_->_vala1_wrapper;
#line 181 "/run/build/folks/folks/avatar-cache.vala"
		if (_data_->_tmp13_ != NULL) {
#line 183 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp14_ = _data_->_vala1_wrapper;
#line 183 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp15_ = _data_->_tmp14_->cb;
#line 183 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp15__target = _data_->_tmp14_->cb_target;
#line 183 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp15_ (_data_->_tmp15__target);
#line 884 "avatar-cache.c"
		}
#line 170 "/run/build/folks/folks/avatar-cache.vala"
		_delegate_wrapper_free0 (_data_->_vala1_wrapper);
#line 888 "avatar-cache.c"
	}
#line 170 "/run/build/folks/folks/avatar-cache.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 170 "/run/build/folks/folks/avatar-cache.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 170 "/run/build/folks/folks/avatar-cache.vala"
		_g_free0 (_data_->avatar_uri);
#line 170 "/run/build/folks/folks/avatar-cache.vala"
		g_object_unref (_data_->_async_result);
#line 170 "/run/build/folks/folks/avatar-cache.vala"
		return FALSE;
#line 900 "avatar-cache.c"
	}
#line 187 "/run/build/folks/folks/avatar-cache.vala"
	_data_->result = _data_->avatar_uri;
#line 187 "/run/build/folks/folks/avatar-cache.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 187 "/run/build/folks/folks/avatar-cache.vala"
	if (_data_->_state_ != 0) {
#line 187 "/run/build/folks/folks/avatar-cache.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 187 "/run/build/folks/folks/avatar-cache.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 912 "avatar-cache.c"
		}
	}
#line 187 "/run/build/folks/folks/avatar-cache.vala"
	g_object_unref (_data_->_async_result);
#line 187 "/run/build/folks/folks/avatar-cache.vala"
	return FALSE;
#line 919 "avatar-cache.c"
}


static void
_folks_avatar_cache_store_avatar_unlimited_data_free (gpointer _data)
{
	FolksAvatarCacheStoreAvatarUnlimitedData* _data_;
	_data_ = _data;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_free0 (_data_->id);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_data_->avatar);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_free0 (_data_->result);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_data_->self);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	g_slice_free (FolksAvatarCacheStoreAvatarUnlimitedData, _data_);
#line 938 "avatar-cache.c"
}


static void
_folks_avatar_cache_store_avatar_unlimited_async_ready_wrapper (GObject *source_object,
                                                                GAsyncResult *res,
                                                                void *user_data)
{
	FolksAvatarCacheStoreAvatarUnlimitedData* _task_data_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	if (_task_data_->_callback_ != NULL) {
#line 46 "/run/build/folks/folks/avatar-cache.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 954 "avatar-cache.c"
	}
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_task_data_->_task_complete_ = TRUE;
#line 958 "avatar-cache.c"
}


static void
_folks_avatar_cache_store_avatar_unlimited (FolksAvatarCache* self,
                                            const gchar* id,
                                            GLoadableIcon* avatar,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_)
{
	FolksAvatarCacheStoreAvatarUnlimitedData* _data_;
	FolksAvatarCache* _tmp0_;
	gchar* _tmp1_;
	GLoadableIcon* _tmp2_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_ = g_slice_new0 (FolksAvatarCacheStoreAvatarUnlimitedData);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_callback_ = _callback_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _folks_avatar_cache_store_avatar_unlimited_async_ready_wrapper, _user_data_);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	if (_callback_ == NULL) {
#line 46 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_task_complete_ = TRUE;
#line 983 "avatar-cache.c"
	}
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	g_task_set_task_data (_data_->_async_result, _data_, _folks_avatar_cache_store_avatar_unlimited_data_free);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->self = _tmp0_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_tmp1_ = g_strdup (id);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_free0 (_data_->id);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->id = _tmp1_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_tmp2_ = _g_object_ref0 (avatar);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_data_->avatar);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->avatar = _tmp2_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_folks_avatar_cache_store_avatar_unlimited_co (_data_);
#line 1005 "avatar-cache.c"
}


static gchar*
_folks_avatar_cache_store_avatar_unlimited_finish (FolksAvatarCache* self,
                                                   GAsyncResult* _res_,
                                                   GError** error)
{
	gchar* result;
	FolksAvatarCacheStoreAvatarUnlimitedData* _data_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	if (NULL == _data_) {
#line 46 "/run/build/folks/folks/avatar-cache.vala"
		return NULL;
#line 1022 "avatar-cache.c"
	}
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	result = _data_->result;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->result = NULL;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	return result;
#line 1030 "avatar-cache.c"
}


static void
_folks_avatar_cache_store_avatar_unlimited_ready (GObject* source_object,
                                                  GAsyncResult* _res_,
                                                  gpointer _user_data_)
{
	FolksAvatarCacheStoreAvatarUnlimitedData* _data_;
#line 198 "/run/build/folks/folks/avatar-cache.vala"
	_data_ = _user_data_;
#line 198 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_source_object_ = source_object;
#line 198 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_res_ = _res_;
#line 198 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_task_complete_ = TRUE;
#line 198 "/run/build/folks/folks/avatar-cache.vala"
	_folks_avatar_cache_store_avatar_unlimited_co (_data_);
#line 1050 "avatar-cache.c"
}


static gpointer
_g_error_copy0 (gpointer self)
{
#line 236 "/run/build/folks/folks/avatar-cache.vala"
	return self ? g_error_copy (self) : NULL;
#line 1059 "avatar-cache.c"
}


static gboolean
_folks_avatar_cache_store_avatar_unlimited_co (FolksAvatarCacheStoreAvatarUnlimitedData* _data_)
{
#line 190 "/run/build/folks/folks/avatar-cache.vala"
	switch (_data_->_state_) {
#line 190 "/run/build/folks/folks/avatar-cache.vala"
		case 0:
#line 1070 "avatar-cache.c"
		goto _state_0;
#line 190 "/run/build/folks/folks/avatar-cache.vala"
		case 1:
#line 1074 "avatar-cache.c"
		goto _state_1;
#line 190 "/run/build/folks/folks/avatar-cache.vala"
		case 2:
#line 1078 "avatar-cache.c"
		goto _state_2;
#line 190 "/run/build/folks/folks/avatar-cache.vala"
		case 3:
#line 1082 "avatar-cache.c"
		goto _state_3;
#line 190 "/run/build/folks/folks/avatar-cache.vala"
		case 4:
#line 1086 "avatar-cache.c"
		goto _state_4;
#line 190 "/run/build/folks/folks/avatar-cache.vala"
		case 5:
#line 1090 "avatar-cache.c"
		goto _state_5;
#line 190 "/run/build/folks/folks/avatar-cache.vala"
		case 6:
#line 1094 "avatar-cache.c"
		goto _state_6;
		default:
#line 190 "/run/build/folks/folks/avatar-cache.vala"
		g_assert_not_reached ();
#line 1099 "avatar-cache.c"
	}
	_state_0:
#line 193 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp0_ = _folks_avatar_cache_get_avatar_file (_data_->self, _data_->id);
#line 193 "/run/build/folks/folks/avatar-cache.vala"
	_data_->dest_avatar_file = _data_->_tmp0_;
#line 195 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp1_ = _data_->dest_avatar_file;
#line 195 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp2_ = g_file_get_uri (_data_->_tmp1_);
#line 195 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp3_ = _data_->_tmp2_;
#line 195 "/run/build/folks/folks/avatar-cache.vala"
	g_debug ("avatar-cache.vala:195: Storing avatar '%s' in file '%s'.", _data_->id, _data_->_tmp3_);
#line 195 "/run/build/folks/folks/avatar-cache.vala"
	_g_free0 (_data_->_tmp3_);
#line 198 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_state_ = 1;
#line 198 "/run/build/folks/folks/avatar-cache.vala"
	g_loadable_icon_load_async (_data_->avatar, -1, NULL, _folks_avatar_cache_store_avatar_unlimited_ready, _data_);
#line 198 "/run/build/folks/folks/avatar-cache.vala"
	return FALSE;
#line 1122 "avatar-cache.c"
	_state_1:
#line 198 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp4_ = g_loadable_icon_load_finish (_data_->avatar, _data_->_res_, NULL, &_data_->_inner_error_);
#line 198 "/run/build/folks/folks/avatar-cache.vala"
	_data_->src_avatar_stream = _data_->_tmp4_;
#line 198 "/run/build/folks/folks/avatar-cache.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 198 "/run/build/folks/folks/avatar-cache.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 198 "/run/build/folks/folks/avatar-cache.vala"
		_g_object_unref0 (_data_->dest_avatar_file);
#line 198 "/run/build/folks/folks/avatar-cache.vala"
		g_object_unref (_data_->_async_result);
#line 198 "/run/build/folks/folks/avatar-cache.vala"
		return FALSE;
#line 1138 "avatar-cache.c"
	}
#line 202 "/run/build/folks/folks/avatar-cache.vala"
	while (TRUE) {
#line 204 "/run/build/folks/folks/avatar-cache.vala"
		_data_->dest_avatar_stream = NULL;
#line 1144 "avatar-cache.c"
		{
#line 213 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp6_ = _data_->dest_avatar_file;
#line 213 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_state_ = 2;
#line 213 "/run/build/folks/folks/avatar-cache.vala"
			g_file_replace_async (_data_->_tmp6_, NULL, FALSE, G_FILE_CREATE_PRIVATE, G_PRIORITY_DEFAULT, NULL, _folks_avatar_cache_store_avatar_unlimited_ready, _data_);
#line 213 "/run/build/folks/folks/avatar-cache.vala"
			return FALSE;
#line 1154 "avatar-cache.c"
			_state_2:
#line 213 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp7_ = g_file_replace_finish (_data_->_tmp6_, _data_->_res_, &_data_->_inner_error_);
#line 213 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp5_ = _data_->_tmp7_;
#line 213 "/run/build/folks/folks/avatar-cache.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 1162 "avatar-cache.c"
				goto __catch27_g_error;
			}
#line 212 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp8_ = _data_->_tmp5_;
#line 212 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp5_ = NULL;
#line 212 "/run/build/folks/folks/avatar-cache.vala"
			_g_object_unref0 (_data_->dest_avatar_stream);
#line 212 "/run/build/folks/folks/avatar-cache.vala"
			_data_->dest_avatar_stream = (GOutputStream*) _data_->_tmp8_;
#line 215 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp9_ = _data_->dest_avatar_stream;
#line 215 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp10_ = _data_->src_avatar_stream;
#line 215 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_state_ = 3;
#line 215 "/run/build/folks/folks/avatar-cache.vala"
			g_output_stream_splice_async (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp9_, g_output_stream_get_type (), GOutputStream), _data_->_tmp10_, G_OUTPUT_STREAM_SPLICE_NONE, G_PRIORITY_DEFAULT, NULL, _folks_avatar_cache_store_avatar_unlimited_ready, _data_);
#line 215 "/run/build/folks/folks/avatar-cache.vala"
			return FALSE;
#line 1183 "avatar-cache.c"
			_state_3:
#line 215 "/run/build/folks/folks/avatar-cache.vala"
			g_output_stream_splice_finish (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp9_, g_output_stream_get_type (), GOutputStream), _data_->_res_, &_data_->_inner_error_);
#line 215 "/run/build/folks/folks/avatar-cache.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 215 "/run/build/folks/folks/avatar-cache.vala"
				_g_object_unref0 (_data_->_tmp5_);
#line 1191 "avatar-cache.c"
				goto __catch27_g_error;
			}
#line 217 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp11_ = _data_->dest_avatar_stream;
#line 217 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_state_ = 4;
#line 217 "/run/build/folks/folks/avatar-cache.vala"
			g_output_stream_close_async (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp11_, g_output_stream_get_type (), GOutputStream), G_PRIORITY_DEFAULT, NULL, _folks_avatar_cache_store_avatar_unlimited_ready, _data_);
#line 217 "/run/build/folks/folks/avatar-cache.vala"
			return FALSE;
#line 1202 "avatar-cache.c"
			_state_4:
#line 217 "/run/build/folks/folks/avatar-cache.vala"
			g_output_stream_close_finish (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp11_, g_output_stream_get_type (), GOutputStream), _data_->_res_, &_data_->_inner_error_);
#line 217 "/run/build/folks/folks/avatar-cache.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 217 "/run/build/folks/folks/avatar-cache.vala"
				_g_object_unref0 (_data_->_tmp5_);
#line 1210 "avatar-cache.c"
				goto __catch27_g_error;
			}
#line 219 "/run/build/folks/folks/avatar-cache.vala"
			_g_object_unref0 (_data_->_tmp5_);
#line 219 "/run/build/folks/folks/avatar-cache.vala"
			_g_object_unref0 (_data_->dest_avatar_stream);
#line 219 "/run/build/folks/folks/avatar-cache.vala"
			break;
#line 1219 "avatar-cache.c"
		}
		goto __finally27;
		__catch27_g_error:
		{
#line 206 "/run/build/folks/folks/avatar-cache.vala"
			_data_->e = _data_->_inner_error_;
#line 206 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_inner_error_ = NULL;
#line 225 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp12_ = _data_->e;
#line 225 "/run/build/folks/folks/avatar-cache.vala"
			if (g_error_matches (_data_->_tmp12_, G_IO_ERROR, G_IO_ERROR_NOT_FOUND)) {
#line 227 "/run/build/folks/folks/avatar-cache.vala"
				_folks_avatar_cache_create_cache_directory (_data_->self, &_data_->_inner_error_);
#line 227 "/run/build/folks/folks/avatar-cache.vala"
				if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 227 "/run/build/folks/folks/avatar-cache.vala"
					_g_error_free0 (_data_->e);
#line 1238 "avatar-cache.c"
					goto __finally27;
				}
#line 228 "/run/build/folks/folks/avatar-cache.vala"
				_g_error_free0 (_data_->e);
#line 228 "/run/build/folks/folks/avatar-cache.vala"
				_g_object_unref0 (_data_->dest_avatar_stream);
#line 228 "/run/build/folks/folks/avatar-cache.vala"
				continue;
#line 1247 "avatar-cache.c"
			}
#line 231 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp13_ = _data_->dest_avatar_stream;
#line 231 "/run/build/folks/folks/avatar-cache.vala"
			if (_data_->_tmp13_ != NULL) {
#line 233 "/run/build/folks/folks/avatar-cache.vala"
				_data_->_tmp14_ = _data_->dest_avatar_stream;
#line 233 "/run/build/folks/folks/avatar-cache.vala"
				_data_->_state_ = 5;
#line 233 "/run/build/folks/folks/avatar-cache.vala"
				g_output_stream_close_async (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp14_, g_output_stream_get_type (), GOutputStream), G_PRIORITY_DEFAULT, NULL, _folks_avatar_cache_store_avatar_unlimited_ready, _data_);
#line 233 "/run/build/folks/folks/avatar-cache.vala"
				return FALSE;
#line 1261 "avatar-cache.c"
				_state_5:
#line 233 "/run/build/folks/folks/avatar-cache.vala"
				g_output_stream_close_finish (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp14_, g_output_stream_get_type (), GOutputStream), _data_->_res_, &_data_->_inner_error_);
#line 233 "/run/build/folks/folks/avatar-cache.vala"
				if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 233 "/run/build/folks/folks/avatar-cache.vala"
					_g_error_free0 (_data_->e);
#line 1269 "avatar-cache.c"
					goto __finally27;
				}
			}
#line 236 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp15_ = _data_->e;
#line 236 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp16_ = _g_error_copy0 (_data_->_tmp15_);
#line 236 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_inner_error_ = _data_->_tmp16_;
#line 236 "/run/build/folks/folks/avatar-cache.vala"
			_g_error_free0 (_data_->e);
#line 1281 "avatar-cache.c"
			goto __finally27;
		}
		__finally27:
#line 206 "/run/build/folks/folks/avatar-cache.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 206 "/run/build/folks/folks/avatar-cache.vala"
		_g_object_unref0 (_data_->dest_avatar_stream);
#line 206 "/run/build/folks/folks/avatar-cache.vala"
		_g_object_unref0 (_data_->src_avatar_stream);
#line 206 "/run/build/folks/folks/avatar-cache.vala"
		_g_object_unref0 (_data_->dest_avatar_file);
#line 206 "/run/build/folks/folks/avatar-cache.vala"
		g_object_unref (_data_->_async_result);
#line 206 "/run/build/folks/folks/avatar-cache.vala"
		return FALSE;
#line 1297 "avatar-cache.c"
	}
#line 240 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp17_ = _data_->src_avatar_stream;
#line 240 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_state_ = 6;
#line 240 "/run/build/folks/folks/avatar-cache.vala"
	g_input_stream_close_async (_data_->_tmp17_, G_PRIORITY_DEFAULT, NULL, _folks_avatar_cache_store_avatar_unlimited_ready, _data_);
#line 240 "/run/build/folks/folks/avatar-cache.vala"
	return FALSE;
#line 1307 "avatar-cache.c"
	_state_6:
#line 240 "/run/build/folks/folks/avatar-cache.vala"
	g_input_stream_close_finish (_data_->_tmp17_, _data_->_res_, &_data_->_inner_error_);
#line 240 "/run/build/folks/folks/avatar-cache.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 240 "/run/build/folks/folks/avatar-cache.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 240 "/run/build/folks/folks/avatar-cache.vala"
		_g_object_unref0 (_data_->src_avatar_stream);
#line 240 "/run/build/folks/folks/avatar-cache.vala"
		_g_object_unref0 (_data_->dest_avatar_file);
#line 240 "/run/build/folks/folks/avatar-cache.vala"
		g_object_unref (_data_->_async_result);
#line 240 "/run/build/folks/folks/avatar-cache.vala"
		return FALSE;
#line 1323 "avatar-cache.c"
	}
#line 242 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp18_ = folks_avatar_cache_build_uri_for_avatar (_data_->self, _data_->id);
#line 242 "/run/build/folks/folks/avatar-cache.vala"
	_data_->result = _data_->_tmp18_;
#line 242 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_data_->src_avatar_stream);
#line 242 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_data_->dest_avatar_file);
#line 242 "/run/build/folks/folks/avatar-cache.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 242 "/run/build/folks/folks/avatar-cache.vala"
	if (_data_->_state_ != 0) {
#line 242 "/run/build/folks/folks/avatar-cache.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 242 "/run/build/folks/folks/avatar-cache.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1341 "avatar-cache.c"
		}
	}
#line 242 "/run/build/folks/folks/avatar-cache.vala"
	g_object_unref (_data_->_async_result);
#line 242 "/run/build/folks/folks/avatar-cache.vala"
	return FALSE;
#line 1348 "avatar-cache.c"
}


static void
folks_avatar_cache_remove_avatar_data_free (gpointer _data)
{
	FolksAvatarCacheRemoveAvatarData* _data_;
	_data_ = _data;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_free0 (_data_->id);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_data_->self);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	g_slice_free (FolksAvatarCacheRemoveAvatarData, _data_);
#line 1363 "avatar-cache.c"
}


static void
folks_avatar_cache_remove_avatar_async_ready_wrapper (GObject *source_object,
                                                      GAsyncResult *res,
                                                      void *user_data)
{
	FolksAvatarCacheRemoveAvatarData* _task_data_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	if (_task_data_->_callback_ != NULL) {
#line 46 "/run/build/folks/folks/avatar-cache.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 1379 "avatar-cache.c"
	}
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_task_data_->_task_complete_ = TRUE;
#line 1383 "avatar-cache.c"
}


void
folks_avatar_cache_remove_avatar (FolksAvatarCache* self,
                                  const gchar* id,
                                  GAsyncReadyCallback _callback_,
                                  gpointer _user_data_)
{
	FolksAvatarCacheRemoveAvatarData* _data_;
	FolksAvatarCache* _tmp0_;
	gchar* _tmp1_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_ = g_slice_new0 (FolksAvatarCacheRemoveAvatarData);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_callback_ = _callback_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_avatar_cache_remove_avatar_async_ready_wrapper, _user_data_);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	if (_callback_ == NULL) {
#line 46 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_task_complete_ = TRUE;
#line 1406 "avatar-cache.c"
	}
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_avatar_cache_remove_avatar_data_free);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->self = _tmp0_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_tmp1_ = g_strdup (id);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_g_free0 (_data_->id);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_->id = _tmp1_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	folks_avatar_cache_remove_avatar_co (_data_);
#line 1422 "avatar-cache.c"
}


void
folks_avatar_cache_remove_avatar_finish (FolksAvatarCache* self,
                                         GAsyncResult* _res_,
                                         GError** error)
{
	FolksAvatarCacheRemoveAvatarData* _data_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	if (NULL == _data_) {
#line 46 "/run/build/folks/folks/avatar-cache.vala"
		return;
#line 1438 "avatar-cache.c"
	}
}


/**
   * Remove an avatar from the cache, if it exists in the cache. If the avatar
   * exists in the cache but there is a problem in removing it, a
   * {@link GLib.Error} will be thrown.
   *
   * @param id the globally unique ID for the avatar
   * @throws GLib.Error if deleting the cache file failed
   * @since 0.6.0
   */
static gboolean
folks_avatar_cache_remove_avatar_co (FolksAvatarCacheRemoveAvatarData* _data_)
{
#line 254 "/run/build/folks/folks/avatar-cache.vala"
	switch (_data_->_state_) {
#line 254 "/run/build/folks/folks/avatar-cache.vala"
		case 0:
#line 1459 "avatar-cache.c"
		goto _state_0;
		default:
#line 254 "/run/build/folks/folks/avatar-cache.vala"
		g_assert_not_reached ();
#line 1464 "avatar-cache.c"
	}
	_state_0:
#line 256 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp0_ = _folks_avatar_cache_get_avatar_file (_data_->self, _data_->id);
#line 256 "/run/build/folks/folks/avatar-cache.vala"
	_data_->avatar_file = _data_->_tmp0_;
#line 258 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp1_ = _data_->avatar_file;
#line 258 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp2_ = g_file_get_uri (_data_->_tmp1_);
#line 258 "/run/build/folks/folks/avatar-cache.vala"
	_data_->_tmp3_ = _data_->_tmp2_;
#line 258 "/run/build/folks/folks/avatar-cache.vala"
	g_debug ("avatar-cache.vala:258: Removing avatar '%s' in file '%s'.", _data_->id, _data_->_tmp3_);
#line 258 "/run/build/folks/folks/avatar-cache.vala"
	_g_free0 (_data_->_tmp3_);
#line 1481 "avatar-cache.c"
	{
#line 262 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp4_ = _data_->avatar_file;
#line 262 "/run/build/folks/folks/avatar-cache.vala"
		g_file_delete (_data_->_tmp4_, NULL, &_data_->_inner_error_);
#line 262 "/run/build/folks/folks/avatar-cache.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 1489 "avatar-cache.c"
			goto __catch28_g_error;
		}
	}
	goto __finally28;
	__catch28_g_error:
	{
#line 260 "/run/build/folks/folks/avatar-cache.vala"
		_data_->e = _data_->_inner_error_;
#line 260 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_inner_error_ = NULL;
#line 267 "/run/build/folks/folks/avatar-cache.vala"
		_data_->_tmp5_ = _data_->e;
#line 267 "/run/build/folks/folks/avatar-cache.vala"
		if (!g_error_matches (_data_->_tmp5_, G_IO_ERROR, G_IO_ERROR_NOT_FOUND)) {
#line 269 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp6_ = _data_->e;
#line 269 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_tmp7_ = _g_error_copy0 (_data_->_tmp6_);
#line 269 "/run/build/folks/folks/avatar-cache.vala"
			_data_->_inner_error_ = _data_->_tmp7_;
#line 269 "/run/build/folks/folks/avatar-cache.vala"
			_g_error_free0 (_data_->e);
#line 1512 "avatar-cache.c"
			goto __finally28;
		}
#line 260 "/run/build/folks/folks/avatar-cache.vala"
		_g_error_free0 (_data_->e);
#line 1517 "avatar-cache.c"
	}
	__finally28:
#line 260 "/run/build/folks/folks/avatar-cache.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 260 "/run/build/folks/folks/avatar-cache.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 260 "/run/build/folks/folks/avatar-cache.vala"
		_g_object_unref0 (_data_->avatar_file);
#line 260 "/run/build/folks/folks/avatar-cache.vala"
		g_object_unref (_data_->_async_result);
#line 260 "/run/build/folks/folks/avatar-cache.vala"
		return FALSE;
#line 1530 "avatar-cache.c"
	}
#line 254 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_data_->avatar_file);
#line 254 "/run/build/folks/folks/avatar-cache.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 254 "/run/build/folks/folks/avatar-cache.vala"
	if (_data_->_state_ != 0) {
#line 254 "/run/build/folks/folks/avatar-cache.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 254 "/run/build/folks/folks/avatar-cache.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1542 "avatar-cache.c"
		}
	}
#line 254 "/run/build/folks/folks/avatar-cache.vala"
	g_object_unref (_data_->_async_result);
#line 254 "/run/build/folks/folks/avatar-cache.vala"
	return FALSE;
#line 1549 "avatar-cache.c"
}


/**
   * Build the URI of an avatar file in the cache from a globally unique ID.
   * This will always succeed, even if the avatar doesn't exist in the cache.
   *
   * @param id the globally unique ID for the avatar
   * @return URI of the avatar file with the given globally unique ID
   * @since 0.6.0
   */
gchar*
folks_avatar_cache_build_uri_for_avatar (FolksAvatarCache* self,
                                         const gchar* id)
{
	gchar* result = NULL;
	GFile* _tmp0_;
	GFile* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
#line 282 "/run/build/folks/folks/avatar-cache.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 282 "/run/build/folks/folks/avatar-cache.vala"
	g_return_val_if_fail (id != NULL, NULL);
#line 284 "/run/build/folks/folks/avatar-cache.vala"
	_tmp0_ = _folks_avatar_cache_get_avatar_file (self, id);
#line 284 "/run/build/folks/folks/avatar-cache.vala"
	_tmp1_ = _tmp0_;
#line 284 "/run/build/folks/folks/avatar-cache.vala"
	_tmp2_ = g_file_get_uri (_tmp1_);
#line 284 "/run/build/folks/folks/avatar-cache.vala"
	_tmp3_ = _tmp2_;
#line 284 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_tmp1_);
#line 284 "/run/build/folks/folks/avatar-cache.vala"
	result = _tmp3_;
#line 284 "/run/build/folks/folks/avatar-cache.vala"
	return result;
#line 1588 "avatar-cache.c"
}


static GFile*
_folks_avatar_cache_get_avatar_file (FolksAvatarCache* self,
                                     const gchar* id)
{
	GFile* result = NULL;
	gchar* escaped_uri = NULL;
	gchar* _tmp0_;
	GFile* file = NULL;
	GFile* _tmp1_;
	GFile* _tmp2_;
	GFile* _tmp3_;
#line 287 "/run/build/folks/folks/avatar-cache.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 287 "/run/build/folks/folks/avatar-cache.vala"
	g_return_val_if_fail (id != NULL, NULL);
#line 289 "/run/build/folks/folks/avatar-cache.vala"
	_tmp0_ = g_uri_escape_string (id, "", FALSE);
#line 289 "/run/build/folks/folks/avatar-cache.vala"
	escaped_uri = _tmp0_;
#line 290 "/run/build/folks/folks/avatar-cache.vala"
	_tmp1_ = self->priv->_cache_directory;
#line 290 "/run/build/folks/folks/avatar-cache.vala"
	_tmp2_ = g_file_get_child (_tmp1_, escaped_uri);
#line 290 "/run/build/folks/folks/avatar-cache.vala"
	file = _tmp2_;
#line 292 "/run/build/folks/folks/avatar-cache.vala"
	_tmp3_ = self->priv->_cache_directory;
#line 292 "/run/build/folks/folks/avatar-cache.vala"
	_vala_assert (g_file_has_parent (file, _tmp3_) == TRUE, "file.has_parent (this._cache_directory) == true");
#line 294 "/run/build/folks/folks/avatar-cache.vala"
	result = file;
#line 294 "/run/build/folks/folks/avatar-cache.vala"
	_g_free0 (escaped_uri);
#line 294 "/run/build/folks/folks/avatar-cache.vala"
	return result;
#line 1627 "avatar-cache.c"
}


static void
_folks_avatar_cache_create_cache_directory (FolksAvatarCache* self,
                                            GError** error)
{
	GError * _inner_error_ = NULL;
#line 297 "/run/build/folks/folks/avatar-cache.vala"
	g_return_if_fail (self != NULL);
#line 1638 "avatar-cache.c"
	{
		GFile* _tmp0_;
#line 301 "/run/build/folks/folks/avatar-cache.vala"
		_tmp0_ = self->priv->_cache_directory;
#line 301 "/run/build/folks/folks/avatar-cache.vala"
		g_file_make_directory_with_parents (_tmp0_, NULL, &_inner_error_);
#line 301 "/run/build/folks/folks/avatar-cache.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 1647 "avatar-cache.c"
			goto __catch29_g_error;
		}
	}
	goto __finally29;
	__catch29_g_error:
	{
		GError* e = NULL;
		GError* _tmp1_;
#line 299 "/run/build/folks/folks/avatar-cache.vala"
		e = _inner_error_;
#line 299 "/run/build/folks/folks/avatar-cache.vala"
		_inner_error_ = NULL;
#line 306 "/run/build/folks/folks/avatar-cache.vala"
		_tmp1_ = e;
#line 306 "/run/build/folks/folks/avatar-cache.vala"
		if (!g_error_matches (_tmp1_, G_IO_ERROR, G_IO_ERROR_EXISTS)) {
#line 1664 "avatar-cache.c"
			GError* _tmp2_;
			GError* _tmp3_;
#line 308 "/run/build/folks/folks/avatar-cache.vala"
			_tmp2_ = e;
#line 308 "/run/build/folks/folks/avatar-cache.vala"
			_tmp3_ = _g_error_copy0 (_tmp2_);
#line 308 "/run/build/folks/folks/avatar-cache.vala"
			_inner_error_ = _tmp3_;
#line 308 "/run/build/folks/folks/avatar-cache.vala"
			_g_error_free0 (e);
#line 1675 "avatar-cache.c"
			goto __finally29;
		}
#line 299 "/run/build/folks/folks/avatar-cache.vala"
		_g_error_free0 (e);
#line 1680 "avatar-cache.c"
	}
	__finally29:
#line 299 "/run/build/folks/folks/avatar-cache.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 299 "/run/build/folks/folks/avatar-cache.vala"
		g_propagate_error (error, _inner_error_);
#line 299 "/run/build/folks/folks/avatar-cache.vala"
		return;
#line 1689 "avatar-cache.c"
	}
}


static GObject *
folks_avatar_cache_constructor (GType type,
                                guint n_construct_properties,
                                GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	FolksAvatarCache * self;
	const gchar* _tmp0_;
	GFile* _tmp1_;
	GFile* _tmp2_;
	GFile* _tmp3_;
	GFile* _tmp4_;
	GFile* _tmp5_;
#line 66 "/run/build/folks/folks/avatar-cache.vala"
	parent_class = G_OBJECT_CLASS (folks_avatar_cache_parent_class);
#line 66 "/run/build/folks/folks/avatar-cache.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 66 "/run/build/folks/folks/avatar-cache.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_AVATAR_CACHE, FolksAvatarCache);
#line 68 "/run/build/folks/folks/avatar-cache.vala"
	_tmp0_ = g_get_user_cache_dir ();
#line 68 "/run/build/folks/folks/avatar-cache.vala"
	_tmp1_ = g_file_new_for_path (_tmp0_);
#line 68 "/run/build/folks/folks/avatar-cache.vala"
	_tmp2_ = _tmp1_;
#line 68 "/run/build/folks/folks/avatar-cache.vala"
	_tmp3_ = g_file_get_child (_tmp2_, "folks");
#line 68 "/run/build/folks/folks/avatar-cache.vala"
	_tmp4_ = _tmp3_;
#line 68 "/run/build/folks/folks/avatar-cache.vala"
	_tmp5_ = g_file_get_child (_tmp4_, "avatars");
#line 68 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (self->priv->_cache_directory);
#line 68 "/run/build/folks/folks/avatar-cache.vala"
	self->priv->_cache_directory = _tmp5_;
#line 68 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_tmp4_);
#line 68 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (_tmp2_);
#line 66 "/run/build/folks/folks/avatar-cache.vala"
	return obj;
#line 1736 "avatar-cache.c"
}


static void
folks_avatar_cache_class_init (FolksAvatarCacheClass * klass)
{
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	folks_avatar_cache_parent_class = g_type_class_peek_parent (klass);
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	g_type_class_add_private (klass, sizeof (FolksAvatarCachePrivate));
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	G_OBJECT_CLASS (klass)->constructor = folks_avatar_cache_constructor;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_avatar_cache_finalize;
#line 1751 "avatar-cache.c"
}


static void
folks_avatar_cache_instance_init (FolksAvatarCache * self)
{
	GQueue* _tmp0_;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	self->priv = FOLKS_AVATAR_CACHE_GET_PRIVATE (self);
#line 50 "/run/build/folks/folks/avatar-cache.vala"
	self->priv->_n_ongoing_stores = (guint) 0;
#line 51 "/run/build/folks/folks/avatar-cache.vala"
	_tmp0_ = g_queue_new ();
#line 51 "/run/build/folks/folks/avatar-cache.vala"
	self->priv->_pending_stores = _tmp0_;
#line 1767 "avatar-cache.c"
}


static void
folks_avatar_cache_finalize (GObject * obj)
{
	FolksAvatarCache * self;
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_AVATAR_CACHE, FolksAvatarCache);
#line 105 "/run/build/folks/folks/avatar-cache.vala"
	folks_avatar_cache__instance = NULL;
#line 49 "/run/build/folks/folks/avatar-cache.vala"
	_g_object_unref0 (self->priv->_cache_directory);
#line 51 "/run/build/folks/folks/avatar-cache.vala"
	(self->priv->_pending_stores == NULL) ? NULL : (self->priv->_pending_stores = (_g_queue_free__delegate_wrapper_free0_ (self->priv->_pending_stores), NULL));
#line 46 "/run/build/folks/folks/avatar-cache.vala"
	G_OBJECT_CLASS (folks_avatar_cache_parent_class)->finalize (obj);
#line 1785 "avatar-cache.c"
}


/**
 * A singleton persistent cache for avatars in folks.
 *
 * Avatars may be added to the cache, and referred to by a persistent
 * URI from that point onwards. The avatars will be stored on disk in the user's
 * XDG cache directory.
 *
 * The avatar cache is typically used by backends where retrieving avatars is an
 * expensive operation (for example, they have to be downloaded from the network
 * every time they're used).
 *
 * All avatars from all users of the {@link Folks.AvatarCache} are stored in the
 * same namespace, so callers must ensure that the IDs they use for avatars are
 * globally unique (e.g. by using the corresponding {@link Folks.Persona.uid}).
 *
 * Ongoing store operations ({@link Folks.AvatarCache.store_avatar}) are rate
 * limited to try and prevent file descriptor exhaustion. Load operations
 * ({@link Folks.AvatarCache.load_avatar}) must be rate limited by the client,
 * as the file I/O occurs when calling {@link GLib.LoadableIcon.load} rather
 * than when retrieving the {@link GLib.LoadableIcon} from the cache.
 *
 * @since 0.6.0
 */
GType
folks_avatar_cache_get_type (void)
{
	static volatile gsize folks_avatar_cache_type_id__volatile = 0;
	if (g_once_init_enter (&folks_avatar_cache_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksAvatarCacheClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_avatar_cache_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksAvatarCache), 0, (GInstanceInitFunc) folks_avatar_cache_instance_init, NULL };
		GType folks_avatar_cache_type_id;
		folks_avatar_cache_type_id = g_type_register_static (G_TYPE_OBJECT, "FolksAvatarCache", &g_define_type_info, 0);
		g_once_init_leave (&folks_avatar_cache_type_id__volatile, folks_avatar_cache_type_id);
	}
	return folks_avatar_cache_type_id__volatile;
}


DelegateWrapper*
delegate_wrapper_new (void)
{
	DelegateWrapper* self;
#line 316 "/run/build/folks/folks/avatar-cache.vala"
	self = g_slice_new0 (DelegateWrapper);
#line 316 "/run/build/folks/folks/avatar-cache.vala"
	delegate_wrapper_instance_init (self);
#line 316 "/run/build/folks/folks/avatar-cache.vala"
	return self;
#line 1836 "avatar-cache.c"
}


static void
delegate_wrapper_instance_init (DelegateWrapper * self)
{
}


void
delegate_wrapper_free (DelegateWrapper * self)
{
#line 318 "/run/build/folks/folks/avatar-cache.vala"
	(self->cb_target_destroy_notify == NULL) ? NULL : (self->cb_target_destroy_notify (self->cb_target), NULL);
#line 318 "/run/build/folks/folks/avatar-cache.vala"
	self->cb = NULL;
#line 318 "/run/build/folks/folks/avatar-cache.vala"
	self->cb_target = NULL;
#line 318 "/run/build/folks/folks/avatar-cache.vala"
	self->cb_target_destroy_notify = NULL;
#line 316 "/run/build/folks/folks/avatar-cache.vala"
	g_slice_free (DelegateWrapper, self);
#line 1859 "avatar-cache.c"
}



