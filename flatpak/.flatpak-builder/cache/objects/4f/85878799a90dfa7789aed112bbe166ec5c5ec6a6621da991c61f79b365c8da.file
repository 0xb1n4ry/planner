/* presence-details.c generated by valac 0.40.11, the Vala compiler
 * generated from presence-details.vala, do not modify */

/*
 * Copyright (C) 2010-2011 Collabora Ltd.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Travis Reitter <travis.reitter@collabora.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>


#define FOLKS_TYPE_PRESENCE_TYPE (folks_presence_type_get_type ())

#define FOLKS_TYPE_PRESENCE_DETAILS (folks_presence_details_get_type ())
#define FOLKS_PRESENCE_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_PRESENCE_DETAILS, FolksPresenceDetails))
#define FOLKS_IS_PRESENCE_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_PRESENCE_DETAILS))
#define FOLKS_PRESENCE_DETAILS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_PRESENCE_DETAILS, FolksPresenceDetailsIface))

typedef struct _FolksPresenceDetails FolksPresenceDetails;
typedef struct _FolksPresenceDetailsIface FolksPresenceDetailsIface;

typedef enum  {
	FOLKS_PRESENCE_TYPE_UNSET,
	FOLKS_PRESENCE_TYPE_OFFLINE,
	FOLKS_PRESENCE_TYPE_AVAILABLE,
	FOLKS_PRESENCE_TYPE_AWAY,
	FOLKS_PRESENCE_TYPE_EXTENDED_AWAY,
	FOLKS_PRESENCE_TYPE_HIDDEN,
	FOLKS_PRESENCE_TYPE_BUSY,
	FOLKS_PRESENCE_TYPE_UNKNOWN,
	FOLKS_PRESENCE_TYPE_ERROR
} FolksPresenceType;

struct _FolksPresenceDetailsIface {
	GTypeInterface parent_iface;
	FolksPresenceType (*get_presence_type) (FolksPresenceDetails* self);
	void (*set_presence_type) (FolksPresenceDetails* self, FolksPresenceType value);
	const gchar* (*get_presence_message) (FolksPresenceDetails* self);
	void (*set_presence_message) (FolksPresenceDetails* self, const gchar* value);
	gchar** (*get_client_types) (FolksPresenceDetails* self, int* result_length1);
	void (*set_client_types) (FolksPresenceDetails* self, gchar** value, int value_length1);
	const gchar* (*get_presence_status) (FolksPresenceDetails* self);
	void (*set_presence_status) (FolksPresenceDetails* self, const gchar* value);
};



GType folks_presence_type_get_type (void) G_GNUC_CONST;
GType folks_presence_details_get_type (void) G_GNUC_CONST;
static gint _folks_presence_details_type_availability (FolksPresenceType type);
const gchar* folks_presence_details_get_default_message_from_type (FolksPresenceType type);
gint folks_presence_details_typecmp (FolksPresenceType type_a,
                                     FolksPresenceType type_b);
gboolean folks_presence_details_is_online (FolksPresenceDetails* self);
FolksPresenceType folks_presence_details_get_presence_type (FolksPresenceDetails* self);
void folks_presence_details_set_presence_type (FolksPresenceDetails* self,
                                               FolksPresenceType value);
const gchar* folks_presence_details_get_presence_message (FolksPresenceDetails* self);
void folks_presence_details_set_presence_message (FolksPresenceDetails* self,
                                                  const gchar* value);
gchar** folks_presence_details_get_client_types (FolksPresenceDetails* self,
                                                 int* result_length1);
void folks_presence_details_set_client_types (FolksPresenceDetails* self,
                                              gchar** value,
                                              int value_length1);
const gchar* folks_presence_details_get_presence_status (FolksPresenceDetails* self);
void folks_presence_details_set_presence_status (FolksPresenceDetails* self,
                                                 const gchar* value);


/**
 * The possible presence states an object implementing {@link PresenceDetails}
 * could be in.
 *
 * These closely follow the
 * [[http://telepathy.freedesktop.org/spec/Connection_Interface_Simple_Presence.html#Connection_Presence_Type|SimplePresence]]
 * interface in the Telepathy specification.
 */
GType
folks_presence_type_get_type (void)
{
	static volatile gsize folks_presence_type_type_id__volatile = 0;
	if (g_once_init_enter (&folks_presence_type_type_id__volatile)) {
		static const GEnumValue values[] = {{FOLKS_PRESENCE_TYPE_UNSET, "FOLKS_PRESENCE_TYPE_UNSET", "unset"}, {FOLKS_PRESENCE_TYPE_OFFLINE, "FOLKS_PRESENCE_TYPE_OFFLINE", "offline"}, {FOLKS_PRESENCE_TYPE_AVAILABLE, "FOLKS_PRESENCE_TYPE_AVAILABLE", "available"}, {FOLKS_PRESENCE_TYPE_AWAY, "FOLKS_PRESENCE_TYPE_AWAY", "away"}, {FOLKS_PRESENCE_TYPE_EXTENDED_AWAY, "FOLKS_PRESENCE_TYPE_EXTENDED_AWAY", "extended-away"}, {FOLKS_PRESENCE_TYPE_HIDDEN, "FOLKS_PRESENCE_TYPE_HIDDEN", "hidden"}, {FOLKS_PRESENCE_TYPE_BUSY, "FOLKS_PRESENCE_TYPE_BUSY", "busy"}, {FOLKS_PRESENCE_TYPE_UNKNOWN, "FOLKS_PRESENCE_TYPE_UNKNOWN", "unknown"}, {FOLKS_PRESENCE_TYPE_ERROR, "FOLKS_PRESENCE_TYPE_ERROR", "error"}, {0, NULL, NULL}};
		GType folks_presence_type_type_id;
		folks_presence_type_type_id = g_enum_register_static ("FolksPresenceType", values);
		g_once_init_leave (&folks_presence_type_type_id__volatile, folks_presence_type_type_id);
	}
	return folks_presence_type_type_id__volatile;
}


static gint
_folks_presence_details_type_availability (FolksPresenceType type)
{
	gint result = 0;
#line 131 "/run/build/folks/folks/presence-details.vala"
	switch (type) {
#line 131 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_UNSET:
#line 122 "presence-details.c"
		{
#line 134 "/run/build/folks/folks/presence-details.vala"
			result = 0;
#line 134 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 128 "presence-details.c"
		}
#line 131 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_UNKNOWN:
#line 132 "presence-details.c"
		{
#line 136 "/run/build/folks/folks/presence-details.vala"
			result = 1;
#line 136 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 138 "presence-details.c"
		}
#line 131 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_ERROR:
#line 142 "presence-details.c"
		{
#line 138 "/run/build/folks/folks/presence-details.vala"
			result = 2;
#line 138 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 148 "presence-details.c"
		}
#line 131 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_OFFLINE:
#line 152 "presence-details.c"
		{
#line 140 "/run/build/folks/folks/presence-details.vala"
			result = 3;
#line 140 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 158 "presence-details.c"
		}
#line 131 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_HIDDEN:
#line 162 "presence-details.c"
		{
#line 142 "/run/build/folks/folks/presence-details.vala"
			result = 4;
#line 142 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 168 "presence-details.c"
		}
#line 131 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_EXTENDED_AWAY:
#line 172 "presence-details.c"
		{
#line 144 "/run/build/folks/folks/presence-details.vala"
			result = 5;
#line 144 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 178 "presence-details.c"
		}
#line 131 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_AWAY:
#line 182 "presence-details.c"
		{
#line 146 "/run/build/folks/folks/presence-details.vala"
			result = 6;
#line 146 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 188 "presence-details.c"
		}
#line 131 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_BUSY:
#line 192 "presence-details.c"
		{
#line 148 "/run/build/folks/folks/presence-details.vala"
			result = 7;
#line 148 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 198 "presence-details.c"
		}
#line 131 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_AVAILABLE:
#line 202 "presence-details.c"
		{
#line 150 "/run/build/folks/folks/presence-details.vala"
			result = 8;
#line 150 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 208 "presence-details.c"
		}
		default:
		{
#line 152 "/run/build/folks/folks/presence-details.vala"
			result = 1;
#line 152 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 216 "presence-details.c"
		}
	}
}


/**
   * The default message for a presence type.
   *
   * @param type a {@link PresenceType} for which to retrieve a translated
   * display string
   * @return a default translated display string for the given
   * {@link PresenceType}
   * @since 0.7.1
   */
const gchar*
folks_presence_details_get_default_message_from_type (FolksPresenceType type)
{
	const gchar* result = NULL;
#line 167 "/run/build/folks/folks/presence-details.vala"
	switch (type) {
#line 237 "presence-details.c"
		default:
#line 167 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_UNKNOWN:
#line 241 "presence-details.c"
		{
#line 171 "/run/build/folks/folks/presence-details.vala"
			result = _ ("Unknown status");
#line 171 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 247 "presence-details.c"
		}
#line 167 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_OFFLINE:
#line 251 "presence-details.c"
		{
#line 173 "/run/build/folks/folks/presence-details.vala"
			result = _ ("Offline");
#line 173 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 257 "presence-details.c"
		}
#line 167 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_UNSET:
#line 261 "presence-details.c"
		{
#line 175 "/run/build/folks/folks/presence-details.vala"
			result = "";
#line 175 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 267 "presence-details.c"
		}
#line 167 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_ERROR:
#line 271 "presence-details.c"
		{
#line 177 "/run/build/folks/folks/presence-details.vala"
			result = _ ("Error");
#line 177 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 277 "presence-details.c"
		}
#line 167 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_AVAILABLE:
#line 281 "presence-details.c"
		{
#line 179 "/run/build/folks/folks/presence-details.vala"
			result = _ ("Available");
#line 179 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 287 "presence-details.c"
		}
#line 167 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_AWAY:
#line 291 "presence-details.c"
		{
#line 181 "/run/build/folks/folks/presence-details.vala"
			result = _ ("Away");
#line 181 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 297 "presence-details.c"
		}
#line 167 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_EXTENDED_AWAY:
#line 301 "presence-details.c"
		{
#line 183 "/run/build/folks/folks/presence-details.vala"
			result = _ ("Extended away");
#line 183 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 307 "presence-details.c"
		}
#line 167 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_BUSY:
#line 311 "presence-details.c"
		{
#line 185 "/run/build/folks/folks/presence-details.vala"
			result = _ ("Busy");
#line 185 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 317 "presence-details.c"
		}
#line 167 "/run/build/folks/folks/presence-details.vala"
		case FOLKS_PRESENCE_TYPE_HIDDEN:
#line 321 "presence-details.c"
		{
#line 187 "/run/build/folks/folks/presence-details.vala"
			result = _ ("Hidden");
#line 187 "/run/build/folks/folks/presence-details.vala"
			return result;
#line 327 "presence-details.c"
		}
	}
}


/**
   * Compare two {@link PresenceType}s.
   *
   * ``0`` will be returned if the types are equal, a positive number will be
   * returned if ``type_a`` is more available than ``type_b``, and a negative
   * number will be returned if the opposite is true.
   *
   * @param type_a the first {@link PresenceType} to compare
   * @param type_b the second {@link PresenceType} to compare
   * @return a number representing the similarity of the two types
   * @since 0.1.11
   */
gint
folks_presence_details_typecmp (FolksPresenceType type_a,
                                FolksPresenceType type_b)
{
	gint result = 0;
#line 205 "/run/build/folks/folks/presence-details.vala"
	result = _folks_presence_details_type_availability (type_a) - _folks_presence_details_type_availability (type_b);
#line 205 "/run/build/folks/folks/presence-details.vala"
	return result;
#line 354 "presence-details.c"
}


/**
   * Whether the contact is online.
   *
   * This will be ``true`` if the contact's presence type is higher than
   * {@link PresenceType.OFFLINE}, as determined by
   * {@link PresenceDetails.typecmp}.
   *
   * @return ``true`` if the contact is online, ``false`` otherwise
   */
gboolean
folks_presence_details_is_online (FolksPresenceDetails* self)
{
	gboolean result = FALSE;
	FolksPresenceType _tmp0_;
	FolksPresenceType _tmp1_;
#line 220 "/run/build/folks/folks/presence-details.vala"
	_tmp0_ = folks_presence_details_get_presence_type (self);
#line 220 "/run/build/folks/folks/presence-details.vala"
	_tmp1_ = _tmp0_;
#line 220 "/run/build/folks/folks/presence-details.vala"
	result = folks_presence_details_typecmp (_tmp1_, FOLKS_PRESENCE_TYPE_OFFLINE) > 0;
#line 220 "/run/build/folks/folks/presence-details.vala"
	return result;
#line 381 "presence-details.c"
}


FolksPresenceType
folks_presence_details_get_presence_type (FolksPresenceDetails* self)
{
#line 91 "/run/build/folks/folks/presence-details.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 91 "/run/build/folks/folks/presence-details.vala"
	return FOLKS_PRESENCE_DETAILS_GET_INTERFACE (self)->get_presence_type (self);
#line 392 "presence-details.c"
}


void
folks_presence_details_set_presence_type (FolksPresenceDetails* self,
                                          FolksPresenceType value)
{
#line 91 "/run/build/folks/folks/presence-details.vala"
	g_return_if_fail (self != NULL);
#line 91 "/run/build/folks/folks/presence-details.vala"
	FOLKS_PRESENCE_DETAILS_GET_INTERFACE (self)->set_presence_type (self, value);
#line 404 "presence-details.c"
}


const gchar*
folks_presence_details_get_presence_message (FolksPresenceDetails* self)
{
#line 101 "/run/build/folks/folks/presence-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 101 "/run/build/folks/folks/presence-details.vala"
	return FOLKS_PRESENCE_DETAILS_GET_INTERFACE (self)->get_presence_message (self);
#line 415 "presence-details.c"
}


void
folks_presence_details_set_presence_message (FolksPresenceDetails* self,
                                             const gchar* value)
{
#line 101 "/run/build/folks/folks/presence-details.vala"
	g_return_if_fail (self != NULL);
#line 101 "/run/build/folks/folks/presence-details.vala"
	FOLKS_PRESENCE_DETAILS_GET_INTERFACE (self)->set_presence_message (self, value);
#line 427 "presence-details.c"
}


gchar**
folks_presence_details_get_client_types (FolksPresenceDetails* self,
                                         int* result_length1)
{
#line 113 "/run/build/folks/folks/presence-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 113 "/run/build/folks/folks/presence-details.vala"
	return FOLKS_PRESENCE_DETAILS_GET_INTERFACE (self)->get_client_types (self, result_length1);
#line 439 "presence-details.c"
}


void
folks_presence_details_set_client_types (FolksPresenceDetails* self,
                                         gchar** value,
                                         int value_length1)
{
#line 113 "/run/build/folks/folks/presence-details.vala"
	g_return_if_fail (self != NULL);
#line 113 "/run/build/folks/folks/presence-details.vala"
	FOLKS_PRESENCE_DETAILS_GET_INTERFACE (self)->set_client_types (self, value, value_length1);
#line 452 "presence-details.c"
}


const gchar*
folks_presence_details_get_presence_status (FolksPresenceDetails* self)
{
#line 125 "/run/build/folks/folks/presence-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 125 "/run/build/folks/folks/presence-details.vala"
	return FOLKS_PRESENCE_DETAILS_GET_INTERFACE (self)->get_presence_status (self);
#line 463 "presence-details.c"
}


void
folks_presence_details_set_presence_status (FolksPresenceDetails* self,
                                            const gchar* value)
{
#line 125 "/run/build/folks/folks/presence-details.vala"
	g_return_if_fail (self != NULL);
#line 125 "/run/build/folks/folks/presence-details.vala"
	FOLKS_PRESENCE_DETAILS_GET_INTERFACE (self)->set_presence_status (self, value);
#line 475 "presence-details.c"
}


static void
folks_presence_details_default_init (FolksPresenceDetailsIface * iface)
{
	/**
	   * The contact's presence type.
	   *
	   * Each contact can have one and only one presence type at any one time,
	   * representing their availability for communication. The default presence
	   * type is {@link PresenceType.UNSET}.
	   */
#line 80 "/run/build/folks/folks/presence-details.vala"
	g_object_interface_install_property (iface, g_param_spec_enum ("presence-type", "presence-type", "presence-type", FOLKS_TYPE_PRESENCE_TYPE, FOLKS_PRESENCE_TYPE_UNSET, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 491 "presence-details.c"
	/**
	   * The contact's presence message.
	   *
	   * This is a short message written by the contact to add detail to their
	   * presence type ({@link Folks.PresenceDetails.presence_type}). If the contact
	   * hasn't set a message, it will be an empty string.
	   */
#line 80 "/run/build/folks/folks/presence-details.vala"
	g_object_interface_install_property (iface, g_param_spec_string ("presence-message", "presence-message", "presence-message", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 501 "presence-details.c"
	/**
	   * The contact's client types.
	   *
	   * One can connect to instant messaging networks on a huge variety of devices,
	   * from PCs, to phones to consoles.
	   * The client types are represented in strings, using the values
	   * [[http://xmpp.org/registrar/disco-categories.html#client|documented by the XMPP registrar]]
	   *
	   * @since 0.9.5
	   */
#line 80 "/run/build/folks/folks/presence-details.vala"
	g_object_interface_install_property (iface, g_param_spec_boxed ("client-types", "client-types", "client-types", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 514 "presence-details.c"
	/**
	   * The contact's detailed presence status.
	   *
	   * This is a more detailed representation of the contact's presence than
	   * {@link PresenceDetails.presence_type}. It may be empty, or one of a
	   * well-known set of strings, as defined in the Telepathy specification:
	   * [[http://telepathy.freedesktop.org/spec/Connection_Interface_Simple_Presence.html#description|Telepathy Specification]]
	   *
	   * @since 0.6.0
	   */
#line 80 "/run/build/folks/folks/presence-details.vala"
	g_object_interface_install_property (iface, g_param_spec_string ("presence-status", "presence-status", "presence-status", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 527 "presence-details.c"
}


/**
 * Interface exposing a {@link Persona}'s or {@link Individual}'s presence;
 * their current availability, such as for chatting.
 *
 * If the {@link Backend} providing the {@link Persona} doesn't support
 * presence, the {@link Persona}'s ``presence_type`` will be set to
 * {@link PresenceType.UNSET} and their ``presence_message`` will be an empty
 * string.
 */
GType
folks_presence_details_get_type (void)
{
	static volatile gsize folks_presence_details_type_id__volatile = 0;
	if (g_once_init_enter (&folks_presence_details_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksPresenceDetailsIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_presence_details_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
		GType folks_presence_details_type_id;
		folks_presence_details_type_id = g_type_register_static (G_TYPE_INTERFACE, "FolksPresenceDetails", &g_define_type_info, 0);
		g_type_interface_add_prerequisite (folks_presence_details_type_id, G_TYPE_OBJECT);
		g_once_init_leave (&folks_presence_details_type_id__volatile, folks_presence_details_type_id);
	}
	return folks_presence_details_type_id__volatile;
}



