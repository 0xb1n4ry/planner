/* unity-simple-scope.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-simple-scope.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include "unity.h"
#include <stdlib.h>
#include <string.h>

enum  {
	UNITY_SIMPLE_SCOPE_0_PROPERTY,
	UNITY_SIMPLE_SCOPE_FILTER_SET_PROPERTY,
	UNITY_SIMPLE_SCOPE_CATEGORY_SET_PROPERTY,
	UNITY_SIMPLE_SCOPE_SCHEMA_PROPERTY,
	UNITY_SIMPLE_SCOPE_SEARCH_HINT_PROPERTY,
	UNITY_SIMPLE_SCOPE_GROUP_NAME_PROPERTY,
	UNITY_SIMPLE_SCOPE_UNIQUE_NAME_PROPERTY,
	UNITY_SIMPLE_SCOPE_NUM_PROPERTIES
};
static GParamSpec* unity_simple_scope_properties[UNITY_SIMPLE_SCOPE_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

#define UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_SCOPE_SEARCH (unity_simple_scope_simple_scope_search_get_type ())
#define UNITY_SIMPLE_SCOPE_SIMPLE_SCOPE_SEARCH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_SCOPE_SEARCH, UnitySimpleScopeSimpleScopeSearch))
#define UNITY_SIMPLE_SCOPE_SIMPLE_SCOPE_SEARCH_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_SCOPE_SEARCH, UnitySimpleScopeSimpleScopeSearchClass))
#define UNITY_SIMPLE_SCOPE_IS_SIMPLE_SCOPE_SEARCH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_SCOPE_SEARCH))
#define UNITY_SIMPLE_SCOPE_IS_SIMPLE_SCOPE_SEARCH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_SCOPE_SEARCH))
#define UNITY_SIMPLE_SCOPE_SIMPLE_SCOPE_SEARCH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_SCOPE_SEARCH, UnitySimpleScopeSimpleScopeSearchClass))

typedef struct _UnitySimpleScopeSimpleScopeSearch UnitySimpleScopeSimpleScopeSearch;
typedef struct _UnitySimpleScopeSimpleScopeSearchClass UnitySimpleScopeSimpleScopeSearchClass;

#define UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_RESULT_PREVIEWER (unity_simple_scope_simple_result_previewer_get_type ())
#define UNITY_SIMPLE_SCOPE_SIMPLE_RESULT_PREVIEWER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_RESULT_PREVIEWER, UnitySimpleScopeSimpleResultPreviewer))
#define UNITY_SIMPLE_SCOPE_SIMPLE_RESULT_PREVIEWER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_RESULT_PREVIEWER, UnitySimpleScopeSimpleResultPreviewerClass))
#define UNITY_SIMPLE_SCOPE_IS_SIMPLE_RESULT_PREVIEWER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_RESULT_PREVIEWER))
#define UNITY_SIMPLE_SCOPE_IS_SIMPLE_RESULT_PREVIEWER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_RESULT_PREVIEWER))
#define UNITY_SIMPLE_SCOPE_SIMPLE_RESULT_PREVIEWER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_RESULT_PREVIEWER, UnitySimpleScopeSimpleResultPreviewerClass))

typedef struct _UnitySimpleScopeSimpleResultPreviewer UnitySimpleScopeSimpleResultPreviewer;
typedef struct _UnitySimpleScopeSimpleResultPreviewerClass UnitySimpleScopeSimpleResultPreviewerClass;
typedef struct _UnitySimpleScopeSimpleScopeSearchPrivate UnitySimpleScopeSimpleScopeSearchPrivate;
enum  {
	UNITY_SIMPLE_SCOPE_SIMPLE_SCOPE_SEARCH_0_PROPERTY,
	UNITY_SIMPLE_SCOPE_SIMPLE_SCOPE_SEARCH_NUM_PROPERTIES
};
static GParamSpec* unity_simple_scope_simple_scope_search_properties[UNITY_SIMPLE_SCOPE_SIMPLE_SCOPE_SEARCH_NUM_PROPERTIES];
typedef struct _UnitySimpleScopeSimpleResultPreviewerPrivate UnitySimpleScopeSimpleResultPreviewerPrivate;
enum  {
	UNITY_SIMPLE_SCOPE_SIMPLE_RESULT_PREVIEWER_0_PROPERTY,
	UNITY_SIMPLE_SCOPE_SIMPLE_RESULT_PREVIEWER_NUM_PROPERTIES
};
static GParamSpec* unity_simple_scope_simple_result_previewer_properties[UNITY_SIMPLE_SCOPE_SIMPLE_RESULT_PREVIEWER_NUM_PROPERTIES];

struct _UnitySimpleScopePrivate {
	UnityFilterSet* _filter_set;
	UnityCategorySet* _category_set;
	UnitySchema* _schema;
	gchar* _search_hint;
	gchar* _group_name;
	gchar* _unique_name;
	UnitySimpleScopeSearchRunFunc search_run_func;
	gpointer search_run_func_target;
	GDestroyNotify search_run_func_target_destroy_notify;
	UnitySimpleScopeSearchRunAsyncFunc search_run_async_func;
	gpointer search_run_async_func_target;
	GDestroyNotify search_run_async_func_target_destroy_notify;
	UnitySimpleScopePreviewRunFunc preview_run_func;
	gpointer preview_run_func_target;
	GDestroyNotify preview_run_func_target_destroy_notify;
	UnitySimpleScopePreviewRunAsyncFunc preview_run_async_func;
	gpointer preview_run_async_func_target;
	GDestroyNotify preview_run_async_func_target_destroy_notify;
	UnitySimpleScopeActivateFunc activate_func;
	gpointer activate_func_target;
	GDestroyNotify activate_func_target_destroy_notify;
};

struct _UnitySimpleScopeSimpleScopeSearch {
	UnityScopeSearchBase parent_instance;
	UnitySimpleScopeSimpleScopeSearchPrivate * priv;
};

struct _UnitySimpleScopeSimpleScopeSearchClass {
	UnityScopeSearchBaseClass parent_class;
};

struct _UnitySimpleScopeSimpleScopeSearchPrivate {
	UnitySimpleScopeSearchRunFunc run_func;
	gpointer run_func_target;
	UnitySimpleScopeSearchRunAsyncFunc run_async_func;
	gpointer run_async_func_target;
};

struct _UnitySimpleScopeSimpleResultPreviewer {
	UnityResultPreviewer parent_instance;
	UnitySimpleScopeSimpleResultPreviewerPrivate * priv;
};

struct _UnitySimpleScopeSimpleResultPreviewerClass {
	UnityResultPreviewerClass parent_class;
};

struct _UnitySimpleScopeSimpleResultPreviewerPrivate {
	UnitySimpleScopePreviewRunFunc run_func;
	gpointer run_func_target;
	UnitySimpleScopePreviewRunAsyncFunc run_async_func;
	gpointer run_async_func_target;
};


static gpointer unity_simple_scope_parent_class = NULL;
static gpointer unity_simple_scope_simple_scope_search_parent_class = NULL;
static gpointer unity_simple_scope_simple_result_previewer_parent_class = NULL;

#define UNITY_SIMPLE_SCOPE_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_SIMPLE_SCOPE, UnitySimpleScopePrivate))
static UnityScopeSearchBase* unity_simple_scope_real_create_search_for_query (UnityAbstractScope* base,
                                                                       UnitySearchContext* ctx);
static GType unity_simple_scope_simple_scope_search_get_type (void) G_GNUC_CONST G_GNUC_UNUSED;
static UnitySimpleScopeSimpleScopeSearch* unity_simple_scope_simple_scope_search_new (UnitySimpleScopeSearchRunFunc run_f,
                                                                               gpointer run_f_target,
                                                                               UnitySimpleScopeSearchRunAsyncFunc run_af,
                                                                               gpointer run_af_target);
static UnitySimpleScopeSimpleScopeSearch* unity_simple_scope_simple_scope_search_construct (GType object_type,
                                                                                     UnitySimpleScopeSearchRunFunc run_f,
                                                                                     gpointer run_f_target,
                                                                                     UnitySimpleScopeSearchRunAsyncFunc run_af,
                                                                                     gpointer run_af_target);
static UnityResultPreviewer* unity_simple_scope_real_create_previewer (UnityAbstractScope* base,
                                                                UnityScopeResult* _result_,
                                                                UnitySearchMetadata* metadata);
static GType unity_simple_scope_simple_result_previewer_get_type (void) G_GNUC_CONST G_GNUC_UNUSED;
static UnitySimpleScopeSimpleResultPreviewer* unity_simple_scope_simple_result_previewer_new (UnitySimpleScopePreviewRunFunc run_f,
                                                                                       gpointer run_f_target,
                                                                                       UnitySimpleScopePreviewRunAsyncFunc run_af,
                                                                                       gpointer run_af_target);
static UnitySimpleScopeSimpleResultPreviewer* unity_simple_scope_simple_result_previewer_construct (GType object_type,
                                                                                             UnitySimpleScopePreviewRunFunc run_f,
                                                                                             gpointer run_f_target,
                                                                                             UnitySimpleScopePreviewRunAsyncFunc run_af,
                                                                                             gpointer run_af_target);
static UnityActivationResponse* unity_simple_scope_real_activate (UnityAbstractScope* base,
                                                           UnityScopeResult* _result_,
                                                           UnitySearchMetadata* metadata,
                                                           const gchar* action_id);
static UnityCategorySet* unity_simple_scope_real_get_categories (UnityAbstractScope* base);
static UnityFilterSet* unity_simple_scope_real_get_filters (UnityAbstractScope* base);
static UnitySchema* unity_simple_scope_real_get_schema (UnityAbstractScope* base);
static gchar* unity_simple_scope_real_get_search_hint (UnityAbstractScope* base);
static gchar* unity_simple_scope_real_get_group_name (UnityAbstractScope* base);
static gchar* unity_simple_scope_real_get_unique_name (UnityAbstractScope* base);
#define UNITY_SIMPLE_SCOPE_SIMPLE_SCOPE_SEARCH_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_SCOPE_SEARCH, UnitySimpleScopeSimpleScopeSearchPrivate))
static void unity_simple_scope_simple_scope_search_real_run (UnityScopeSearchBase* base);
static void unity_simple_scope_simple_scope_search_real_run_async (UnityScopeSearchBase* base,
                                                            UnityScopeSearchBaseCallback cb,
                                                            gpointer cb_target);
static void unity_simple_scope_simple_scope_search_finalize (GObject * obj);
#define UNITY_SIMPLE_SCOPE_SIMPLE_RESULT_PREVIEWER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_RESULT_PREVIEWER, UnitySimpleScopeSimpleResultPreviewerPrivate))
static UnityAbstractPreview* unity_simple_scope_simple_result_previewer_real_run (UnityResultPreviewer* base);
static void unity_simple_scope_simple_result_previewer_real_run_async (UnityResultPreviewer* base,
                                                                UnityAbstractPreviewCallback cb,
                                                                gpointer cb_target);
static void unity_simple_scope_simple_result_previewer_finalize (GObject * obj);
static void unity_simple_scope_finalize (GObject * obj);
static void _vala_unity_simple_scope_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec);
static void _vala_unity_simple_scope_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec);


/**
   * Set search function.
   *
   * Use this call to set the search function. The search function should be 
   * set right after the call to unity_simple_scope_new().
   * Note that by default the search function will be invoked in a separate 
   * thread, if you want to change that behavior use the set_search_async_func()
   * method instead.
   * You must call either this method or the async variant
   * set_search_async_func() to make this instance fully usable.
   */
void
unity_simple_scope_set_search_func (UnitySimpleScope* self,
                                    UnitySimpleScopeSearchRunFunc func,
                                    gpointer func_target,
                                    GDestroyNotify func_target_destroy_notify)
{
	UnitySimpleScopeSearchRunFunc _tmp0_;
	void* _tmp0__target;
	GDestroyNotify _tmp0__target_destroy_notify;
	g_return_if_fail (self != NULL);
	_tmp0_ = func;
	_tmp0__target = func_target;
	_tmp0__target_destroy_notify = func_target_destroy_notify;
	func = NULL;
	func_target = NULL;
	func_target_destroy_notify = NULL;
	(self->priv->search_run_func_target_destroy_notify == NULL) ? NULL : (self->priv->search_run_func_target_destroy_notify (self->priv->search_run_func_target), NULL);
	self->priv->search_run_func = NULL;
	self->priv->search_run_func_target = NULL;
	self->priv->search_run_func_target_destroy_notify = NULL;
	self->priv->search_run_func = _tmp0_;
	self->priv->search_run_func_target = _tmp0__target;
	self->priv->search_run_func_target_destroy_notify = _tmp0__target_destroy_notify;
	(func_target_destroy_notify == NULL) ? NULL : (func_target_destroy_notify (func_target), NULL);
	func = NULL;
	func_target = NULL;
	func_target_destroy_notify = NULL;
}


/**
   * Set search function (async variant).
   *
   * Use this call to set the search function. By default a new thread will be
   * spawned and the search_func will be invoked there.
   * You must call either this method or the sync variant
   * set_search_func() to make this instance fully usable.
   * See set_search_func() for more details.
   */
void
unity_simple_scope_set_search_async_func (UnitySimpleScope* self,
                                          UnitySimpleScopeSearchRunAsyncFunc func,
                                          gpointer func_target,
                                          GDestroyNotify func_target_destroy_notify)
{
	UnitySimpleScopeSearchRunAsyncFunc _tmp0_;
	void* _tmp0__target;
	GDestroyNotify _tmp0__target_destroy_notify;
	g_return_if_fail (self != NULL);
	_tmp0_ = func;
	_tmp0__target = func_target;
	_tmp0__target_destroy_notify = func_target_destroy_notify;
	func = NULL;
	func_target = NULL;
	func_target_destroy_notify = NULL;
	(self->priv->search_run_async_func_target_destroy_notify == NULL) ? NULL : (self->priv->search_run_async_func_target_destroy_notify (self->priv->search_run_async_func_target), NULL);
	self->priv->search_run_async_func = NULL;
	self->priv->search_run_async_func_target = NULL;
	self->priv->search_run_async_func_target_destroy_notify = NULL;
	self->priv->search_run_async_func = _tmp0_;
	self->priv->search_run_async_func_target = _tmp0__target;
	self->priv->search_run_async_func_target_destroy_notify = _tmp0__target_destroy_notify;
	(func_target_destroy_notify == NULL) ? NULL : (func_target_destroy_notify (func_target), NULL);
	func = NULL;
	func_target = NULL;
	func_target_destroy_notify = NULL;
}


/**
   * Set activation function.
   *
   * Use this call to set the activation function. The activation function
   * is not required if the scope results are using standard URI schemas.
   */
void
unity_simple_scope_set_activate_func (UnitySimpleScope* self,
                                      UnitySimpleScopeActivateFunc func,
                                      gpointer func_target,
                                      GDestroyNotify func_target_destroy_notify)
{
	UnitySimpleScopeActivateFunc _tmp0_;
	void* _tmp0__target;
	GDestroyNotify _tmp0__target_destroy_notify;
	g_return_if_fail (self != NULL);
	_tmp0_ = func;
	_tmp0__target = func_target;
	_tmp0__target_destroy_notify = func_target_destroy_notify;
	func = NULL;
	func_target = NULL;
	func_target_destroy_notify = NULL;
	(self->priv->activate_func_target_destroy_notify == NULL) ? NULL : (self->priv->activate_func_target_destroy_notify (self->priv->activate_func_target), NULL);
	self->priv->activate_func = NULL;
	self->priv->activate_func_target = NULL;
	self->priv->activate_func_target_destroy_notify = NULL;
	self->priv->activate_func = _tmp0_;
	self->priv->activate_func_target = _tmp0__target;
	self->priv->activate_func_target_destroy_notify = _tmp0__target_destroy_notify;
	(func_target_destroy_notify == NULL) ? NULL : (func_target_destroy_notify (func_target), NULL);
	func = NULL;
	func_target = NULL;
	func_target_destroy_notify = NULL;
}


/**
   * Set preview function.
   *
   * Use this call to set the preview function. The preview function should be
   * set right after the call to unity_simple_scope_new().
   * Note that by default the preview function will be invoked in a separate
   * thread, if you want to change that behavior use the
   * set_preview_async_func() method instead.
   * You must call either this method or the async variant
   * set_preview_async_func() to make this instance fully usable.
   */
void
unity_simple_scope_set_preview_func (UnitySimpleScope* self,
                                     UnitySimpleScopePreviewRunFunc func,
                                     gpointer func_target,
                                     GDestroyNotify func_target_destroy_notify)
{
	UnitySimpleScopePreviewRunFunc _tmp0_;
	void* _tmp0__target;
	GDestroyNotify _tmp0__target_destroy_notify;
	g_return_if_fail (self != NULL);
	_tmp0_ = func;
	_tmp0__target = func_target;
	_tmp0__target_destroy_notify = func_target_destroy_notify;
	func = NULL;
	func_target = NULL;
	func_target_destroy_notify = NULL;
	(self->priv->preview_run_func_target_destroy_notify == NULL) ? NULL : (self->priv->preview_run_func_target_destroy_notify (self->priv->preview_run_func_target), NULL);
	self->priv->preview_run_func = NULL;
	self->priv->preview_run_func_target = NULL;
	self->priv->preview_run_func_target_destroy_notify = NULL;
	self->priv->preview_run_func = _tmp0_;
	self->priv->preview_run_func_target = _tmp0__target;
	self->priv->preview_run_func_target_destroy_notify = _tmp0__target_destroy_notify;
	(func_target_destroy_notify == NULL) ? NULL : (func_target_destroy_notify (func_target), NULL);
	func = NULL;
	func_target = NULL;
	func_target_destroy_notify = NULL;
}


/**
   * Set preview function (async variant).
   *
   * Use this call to set the preview function. By default a new thread will be
   * spawned and the preview_func will be invoked there.
   * You must call either this method or the sync variant
   * set_preview_func() to make this instance fully usable.
   * See set_preview_func() for more details.
   */
void
unity_simple_scope_set_preview_async_func (UnitySimpleScope* self,
                                           UnitySimpleScopePreviewRunAsyncFunc func,
                                           gpointer func_target,
                                           GDestroyNotify func_target_destroy_notify)
{
	UnitySimpleScopePreviewRunAsyncFunc _tmp0_;
	void* _tmp0__target;
	GDestroyNotify _tmp0__target_destroy_notify;
	g_return_if_fail (self != NULL);
	_tmp0_ = func;
	_tmp0__target = func_target;
	_tmp0__target_destroy_notify = func_target_destroy_notify;
	func = NULL;
	func_target = NULL;
	func_target_destroy_notify = NULL;
	(self->priv->preview_run_async_func_target_destroy_notify == NULL) ? NULL : (self->priv->preview_run_async_func_target_destroy_notify (self->priv->preview_run_async_func_target), NULL);
	self->priv->preview_run_async_func = NULL;
	self->priv->preview_run_async_func_target = NULL;
	self->priv->preview_run_async_func_target_destroy_notify = NULL;
	self->priv->preview_run_async_func = _tmp0_;
	self->priv->preview_run_async_func_target = _tmp0__target;
	self->priv->preview_run_async_func_target_destroy_notify = _tmp0__target_destroy_notify;
	(func_target_destroy_notify == NULL) ? NULL : (func_target_destroy_notify (func_target), NULL);
	func = NULL;
	func_target = NULL;
	func_target_destroy_notify = NULL;
}


UnitySimpleScope*
unity_simple_scope_construct (GType object_type)
{
	UnitySimpleScope * self = NULL;
	self = (UnitySimpleScope*) unity_abstract_scope_construct (object_type);
	return self;
}


UnitySimpleScope*
unity_simple_scope_new (void)
{
	return unity_simple_scope_construct (UNITY_TYPE_SIMPLE_SCOPE);
}


static UnityScopeSearchBase*
unity_simple_scope_real_create_search_for_query (UnityAbstractScope* base,
                                                 UnitySearchContext* ctx)
{
	UnitySimpleScope * self;
	UnityScopeSearchBase* result = NULL;
	UnitySimpleScopeSimpleScopeSearch* search = NULL;
	UnitySimpleScopeSearchRunFunc _tmp0_;
	void* _tmp0__target;
	UnitySimpleScopeSearchRunAsyncFunc _tmp1_;
	void* _tmp1__target;
	UnitySimpleScopeSimpleScopeSearch* _tmp2_;
	UnitySearchContext _tmp3_;
	self = (UnitySimpleScope*) base;
	g_return_val_if_fail (ctx != NULL, NULL);
	_tmp0_ = self->priv->search_run_func;
	_tmp0__target = self->priv->search_run_func_target;
	_tmp1_ = self->priv->search_run_async_func;
	_tmp1__target = self->priv->search_run_async_func_target;
	_tmp2_ = unity_simple_scope_simple_scope_search_new (_tmp0_, _tmp0__target, _tmp1_, _tmp1__target);
	search = _tmp2_;
	_tmp3_ = *ctx;
	unity_scope_search_base_set_search_context ((UnityScopeSearchBase*) search, &_tmp3_);
	result = (UnityScopeSearchBase*) search;
	return result;
}


static UnityResultPreviewer*
unity_simple_scope_real_create_previewer (UnityAbstractScope* base,
                                          UnityScopeResult* _result_,
                                          UnitySearchMetadata* metadata)
{
	UnitySimpleScope * self;
	UnityResultPreviewer* result = NULL;
	UnitySimpleScopeSimpleResultPreviewer* previewer = NULL;
	UnitySimpleScopePreviewRunFunc _tmp0_;
	void* _tmp0__target;
	UnitySimpleScopePreviewRunAsyncFunc _tmp1_;
	void* _tmp1__target;
	UnitySimpleScopeSimpleResultPreviewer* _tmp2_;
	UnityScopeResult _tmp3_;
	self = (UnitySimpleScope*) base;
	g_return_val_if_fail (_result_ != NULL, NULL);
	g_return_val_if_fail (metadata != NULL, NULL);
	_tmp0_ = self->priv->preview_run_func;
	_tmp0__target = self->priv->preview_run_func_target;
	_tmp1_ = self->priv->preview_run_async_func;
	_tmp1__target = self->priv->preview_run_async_func_target;
	_tmp2_ = unity_simple_scope_simple_result_previewer_new (_tmp0_, _tmp0__target, _tmp1_, _tmp1__target);
	previewer = _tmp2_;
	_tmp3_ = *_result_;
	unity_result_previewer_set_scope_result ((UnityResultPreviewer*) previewer, &_tmp3_);
	unity_result_previewer_set_search_metadata ((UnityResultPreviewer*) previewer, metadata);
	result = (UnityResultPreviewer*) previewer;
	return result;
}


static UnityActivationResponse*
unity_simple_scope_real_activate (UnityAbstractScope* base,
                                  UnityScopeResult* _result_,
                                  UnitySearchMetadata* metadata,
                                  const gchar* action_id)
{
	UnitySimpleScope * self;
	UnityActivationResponse* result = NULL;
	UnitySimpleScopeActivateFunc _tmp0_;
	void* _tmp0__target;
	self = (UnitySimpleScope*) base;
	g_return_val_if_fail (_result_ != NULL, NULL);
	g_return_val_if_fail (metadata != NULL, NULL);
	_tmp0_ = self->priv->activate_func;
	_tmp0__target = self->priv->activate_func_target;
	if (_tmp0_ != NULL) {
		UnitySimpleScopeActivateFunc _tmp1_;
		void* _tmp1__target;
		UnityScopeResult _tmp2_;
		UnityActivationResponse* _tmp3_;
		_tmp1_ = self->priv->activate_func;
		_tmp1__target = self->priv->activate_func_target;
		_tmp2_ = *_result_;
		_tmp3_ = _tmp1_ (&_tmp2_, metadata, action_id, _tmp1__target);
		result = _tmp3_;
		return result;
	}
	result = NULL;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static UnityCategorySet*
unity_simple_scope_real_get_categories (UnityAbstractScope* base)
{
	UnitySimpleScope * self;
	UnityCategorySet* result = NULL;
	UnityCategorySet* _tmp0_;
	UnityCategorySet* _tmp1_;
	self = (UnitySimpleScope*) base;
	_tmp0_ = self->priv->_category_set;
	_tmp1_ = _g_object_ref0 (_tmp0_);
	result = _tmp1_;
	return result;
}


static UnityFilterSet*
unity_simple_scope_real_get_filters (UnityAbstractScope* base)
{
	UnitySimpleScope * self;
	UnityFilterSet* result = NULL;
	UnityFilterSet* _tmp0_;
	UnityFilterSet* _tmp1_;
	self = (UnitySimpleScope*) base;
	_tmp0_ = self->priv->_filter_set;
	_tmp1_ = _g_object_ref0 (_tmp0_);
	result = _tmp1_;
	return result;
}


static UnitySchema*
unity_simple_scope_real_get_schema (UnityAbstractScope* base)
{
	UnitySimpleScope * self;
	UnitySchema* result = NULL;
	UnitySchema* _tmp0_;
	UnitySchema* _tmp1_;
	self = (UnitySimpleScope*) base;
	_tmp0_ = self->priv->_schema;
	_tmp1_ = _g_object_ref0 (_tmp0_);
	result = _tmp1_;
	return result;
}


static gchar*
unity_simple_scope_real_get_search_hint (UnityAbstractScope* base)
{
	UnitySimpleScope * self;
	gchar* result = NULL;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	self = (UnitySimpleScope*) base;
	_tmp0_ = self->priv->_search_hint;
	_tmp1_ = g_strdup (_tmp0_);
	result = _tmp1_;
	return result;
}


static gchar*
unity_simple_scope_real_get_group_name (UnityAbstractScope* base)
{
	UnitySimpleScope * self;
	gchar* result = NULL;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	self = (UnitySimpleScope*) base;
	_tmp0_ = self->priv->_group_name;
	_tmp1_ = g_strdup (_tmp0_);
	result = _tmp1_;
	return result;
}


static gchar*
unity_simple_scope_real_get_unique_name (UnityAbstractScope* base)
{
	UnitySimpleScope * self;
	gchar* result = NULL;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	self = (UnitySimpleScope*) base;
	_tmp0_ = self->priv->_unique_name;
	_tmp1_ = g_strdup (_tmp0_);
	result = _tmp1_;
	return result;
}


UnityFilterSet*
unity_simple_scope_get_filter_set (UnitySimpleScope* self)
{
	UnityFilterSet* result;
	UnityFilterSet* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_filter_set;
	result = _tmp0_;
	return result;
}


void
unity_simple_scope_set_filter_set (UnitySimpleScope* self,
                                   UnityFilterSet* value)
{
	g_return_if_fail (self != NULL);
	if (unity_simple_scope_get_filter_set (self) != value) {
		UnityFilterSet* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_filter_set);
		self->priv->_filter_set = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_simple_scope_properties[UNITY_SIMPLE_SCOPE_FILTER_SET_PROPERTY]);
	}
}


UnityCategorySet*
unity_simple_scope_get_category_set (UnitySimpleScope* self)
{
	UnityCategorySet* result;
	UnityCategorySet* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_category_set;
	result = _tmp0_;
	return result;
}


void
unity_simple_scope_set_category_set (UnitySimpleScope* self,
                                     UnityCategorySet* value)
{
	g_return_if_fail (self != NULL);
	if (unity_simple_scope_get_category_set (self) != value) {
		UnityCategorySet* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_category_set);
		self->priv->_category_set = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_simple_scope_properties[UNITY_SIMPLE_SCOPE_CATEGORY_SET_PROPERTY]);
	}
}


UnitySchema*
unity_simple_scope_get_schema (UnitySimpleScope* self)
{
	UnitySchema* result;
	UnitySchema* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_schema;
	result = _tmp0_;
	return result;
}


void
unity_simple_scope_set_schema (UnitySimpleScope* self,
                               UnitySchema* value)
{
	g_return_if_fail (self != NULL);
	if (unity_simple_scope_get_schema (self) != value) {
		UnitySchema* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_schema);
		self->priv->_schema = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_simple_scope_properties[UNITY_SIMPLE_SCOPE_SCHEMA_PROPERTY]);
	}
}


const gchar*
unity_simple_scope_get_search_hint (UnitySimpleScope* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_search_hint;
	result = _tmp0_;
	return result;
}


void
unity_simple_scope_set_search_hint (UnitySimpleScope* self,
                                    const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_simple_scope_get_search_hint (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_search_hint);
		self->priv->_search_hint = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_simple_scope_properties[UNITY_SIMPLE_SCOPE_SEARCH_HINT_PROPERTY]);
	}
}


const gchar*
unity_simple_scope_get_group_name (UnitySimpleScope* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_group_name;
	result = _tmp0_;
	return result;
}


void
unity_simple_scope_set_group_name (UnitySimpleScope* self,
                                   const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_simple_scope_get_group_name (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_group_name);
		self->priv->_group_name = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_simple_scope_properties[UNITY_SIMPLE_SCOPE_GROUP_NAME_PROPERTY]);
	}
}


const gchar*
unity_simple_scope_get_unique_name (UnitySimpleScope* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_unique_name;
	result = _tmp0_;
	return result;
}


void
unity_simple_scope_set_unique_name (UnitySimpleScope* self,
                                    const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_simple_scope_get_unique_name (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_unique_name);
		self->priv->_unique_name = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_simple_scope_properties[UNITY_SIMPLE_SCOPE_UNIQUE_NAME_PROPERTY]);
	}
}


static UnitySimpleScopeSimpleScopeSearch*
unity_simple_scope_simple_scope_search_construct (GType object_type,
                                                  UnitySimpleScopeSearchRunFunc run_f,
                                                  gpointer run_f_target,
                                                  UnitySimpleScopeSearchRunAsyncFunc run_af,
                                                  gpointer run_af_target)
{
	UnitySimpleScopeSimpleScopeSearch * self = NULL;
	self = (UnitySimpleScopeSimpleScopeSearch*) g_object_new (object_type, NULL);
	self->priv->run_func = run_f;
	self->priv->run_func_target = run_f_target;
	self->priv->run_async_func = run_af;
	self->priv->run_async_func_target = run_af_target;
	return self;
}


static UnitySimpleScopeSimpleScopeSearch*
unity_simple_scope_simple_scope_search_new (UnitySimpleScopeSearchRunFunc run_f,
                                            gpointer run_f_target,
                                            UnitySimpleScopeSearchRunAsyncFunc run_af,
                                            gpointer run_af_target)
{
	return unity_simple_scope_simple_scope_search_construct (UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_SCOPE_SEARCH, run_f, run_f_target, run_af, run_af_target);
}


static void
unity_simple_scope_simple_scope_search_real_run (UnityScopeSearchBase* base)
{
	UnitySimpleScopeSimpleScopeSearch * self;
	UnitySimpleScopeSearchRunFunc _tmp0_;
	void* _tmp0__target;
	UnitySimpleScopeSearchRunFunc _tmp1_;
	void* _tmp1__target;
	self = (UnitySimpleScopeSimpleScopeSearch*) base;
	_tmp0_ = self->priv->run_func;
	_tmp0__target = self->priv->run_func_target;
	if (_tmp0_ == NULL) {
		g_critical ("unity-simple-scope.vala:39: Unable to handle search request, search_fu" \
"nc was not set");
		return;
	}
	_tmp1_ = self->priv->run_func;
	_tmp1__target = self->priv->run_func_target;
	_tmp1_ ((UnityScopeSearchBase*) self, _tmp1__target);
}


static void
unity_simple_scope_simple_scope_search_real_run_async (UnityScopeSearchBase* base,
                                                       UnityScopeSearchBaseCallback cb,
                                                       gpointer cb_target)
{
	UnitySimpleScopeSimpleScopeSearch * self;
	UnitySimpleScopeSearchRunAsyncFunc _tmp0_;
	void* _tmp0__target;
	self = (UnitySimpleScopeSimpleScopeSearch*) base;
	_tmp0_ = self->priv->run_async_func;
	_tmp0__target = self->priv->run_async_func_target;
	if (_tmp0_ != NULL) {
		UnitySimpleScopeSearchRunAsyncFunc _tmp1_;
		void* _tmp1__target;
		_tmp1_ = self->priv->run_async_func;
		_tmp1__target = self->priv->run_async_func_target;
		_tmp1_ ((UnityScopeSearchBase*) self, cb, cb_target, _tmp1__target);
	} else {
		UNITY_SCOPE_SEARCH_BASE_CLASS (unity_simple_scope_simple_scope_search_parent_class)->run_async (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TYPE_SCOPE_SEARCH_BASE, UnityScopeSearchBase), cb, cb_target);
	}
}


static void
unity_simple_scope_simple_scope_search_class_init (UnitySimpleScopeSimpleScopeSearchClass * klass)
{
	unity_simple_scope_simple_scope_search_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnitySimpleScopeSimpleScopeSearchPrivate));
	((UnityScopeSearchBaseClass *) klass)->run = (void (*) (UnityScopeSearchBase *)) unity_simple_scope_simple_scope_search_real_run;
	((UnityScopeSearchBaseClass *) klass)->run_async = (void (*) (UnityScopeSearchBase *, UnityScopeSearchBaseCallback, gpointer)) unity_simple_scope_simple_scope_search_real_run_async;
	G_OBJECT_CLASS (klass)->finalize = unity_simple_scope_simple_scope_search_finalize;
}


static void
unity_simple_scope_simple_scope_search_instance_init (UnitySimpleScopeSimpleScopeSearch * self)
{
	self->priv = UNITY_SIMPLE_SCOPE_SIMPLE_SCOPE_SEARCH_GET_PRIVATE (self);
}


static void
unity_simple_scope_simple_scope_search_finalize (GObject * obj)
{
	UnitySimpleScopeSimpleScopeSearch * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_SCOPE_SEARCH, UnitySimpleScopeSimpleScopeSearch);
	G_OBJECT_CLASS (unity_simple_scope_simple_scope_search_parent_class)->finalize (obj);
}


static GType
unity_simple_scope_simple_scope_search_get_type (void)
{
	static volatile gsize unity_simple_scope_simple_scope_search_type_id__volatile = 0;
	if (g_once_init_enter (&unity_simple_scope_simple_scope_search_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnitySimpleScopeSimpleScopeSearchClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_simple_scope_simple_scope_search_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnitySimpleScopeSimpleScopeSearch), 0, (GInstanceInitFunc) unity_simple_scope_simple_scope_search_instance_init, NULL };
		GType unity_simple_scope_simple_scope_search_type_id;
		unity_simple_scope_simple_scope_search_type_id = g_type_register_static (UNITY_TYPE_SCOPE_SEARCH_BASE, "UnitySimpleScopeSimpleScopeSearch", &g_define_type_info, 0);
		g_once_init_leave (&unity_simple_scope_simple_scope_search_type_id__volatile, unity_simple_scope_simple_scope_search_type_id);
	}
	return unity_simple_scope_simple_scope_search_type_id__volatile;
}


static UnitySimpleScopeSimpleResultPreviewer*
unity_simple_scope_simple_result_previewer_construct (GType object_type,
                                                      UnitySimpleScopePreviewRunFunc run_f,
                                                      gpointer run_f_target,
                                                      UnitySimpleScopePreviewRunAsyncFunc run_af,
                                                      gpointer run_af_target)
{
	UnitySimpleScopeSimpleResultPreviewer * self = NULL;
	self = (UnitySimpleScopeSimpleResultPreviewer*) g_object_new (object_type, NULL);
	self->priv->run_func = run_f;
	self->priv->run_func_target = run_f_target;
	self->priv->run_async_func = run_af;
	self->priv->run_async_func_target = run_af_target;
	return self;
}


static UnitySimpleScopeSimpleResultPreviewer*
unity_simple_scope_simple_result_previewer_new (UnitySimpleScopePreviewRunFunc run_f,
                                                gpointer run_f_target,
                                                UnitySimpleScopePreviewRunAsyncFunc run_af,
                                                gpointer run_af_target)
{
	return unity_simple_scope_simple_result_previewer_construct (UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_RESULT_PREVIEWER, run_f, run_f_target, run_af, run_af_target);
}


static UnityAbstractPreview*
unity_simple_scope_simple_result_previewer_real_run (UnityResultPreviewer* base)
{
	UnitySimpleScopeSimpleResultPreviewer * self;
	UnityAbstractPreview* result = NULL;
	UnitySimpleScopePreviewRunFunc _tmp0_;
	void* _tmp0__target;
	UnitySimpleScopePreviewRunFunc _tmp1_;
	void* _tmp1__target;
	UnityAbstractPreview* _tmp2_;
	self = (UnitySimpleScopeSimpleResultPreviewer*) base;
	_tmp0_ = self->priv->run_func;
	_tmp0__target = self->priv->run_func_target;
	if (_tmp0_ == NULL) {
		g_critical ("unity-simple-scope.vala:76: Unable to handle preview request, preview_" \
"func was not set");
		result = NULL;
		return result;
	}
	_tmp1_ = self->priv->run_func;
	_tmp1__target = self->priv->run_func_target;
	_tmp2_ = _tmp1_ ((UnityResultPreviewer*) self, _tmp1__target);
	result = _tmp2_;
	return result;
}


static void
unity_simple_scope_simple_result_previewer_real_run_async (UnityResultPreviewer* base,
                                                           UnityAbstractPreviewCallback cb,
                                                           gpointer cb_target)
{
	UnitySimpleScopeSimpleResultPreviewer * self;
	UnitySimpleScopePreviewRunAsyncFunc _tmp0_;
	void* _tmp0__target;
	self = (UnitySimpleScopeSimpleResultPreviewer*) base;
	_tmp0_ = self->priv->run_async_func;
	_tmp0__target = self->priv->run_async_func_target;
	if (_tmp0_ != NULL) {
		UnitySimpleScopePreviewRunAsyncFunc _tmp1_;
		void* _tmp1__target;
		_tmp1_ = self->priv->run_async_func;
		_tmp1__target = self->priv->run_async_func_target;
		_tmp1_ ((UnityResultPreviewer*) self, cb, cb_target, _tmp1__target);
	} else {
		UNITY_RESULT_PREVIEWER_CLASS (unity_simple_scope_simple_result_previewer_parent_class)->run_async (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TYPE_RESULT_PREVIEWER, UnityResultPreviewer), cb, cb_target);
	}
}


static void
unity_simple_scope_simple_result_previewer_class_init (UnitySimpleScopeSimpleResultPreviewerClass * klass)
{
	unity_simple_scope_simple_result_previewer_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnitySimpleScopeSimpleResultPreviewerPrivate));
	((UnityResultPreviewerClass *) klass)->run = (UnityAbstractPreview* (*) (UnityResultPreviewer *)) unity_simple_scope_simple_result_previewer_real_run;
	((UnityResultPreviewerClass *) klass)->run_async = (void (*) (UnityResultPreviewer *, UnityAbstractPreviewCallback, gpointer)) unity_simple_scope_simple_result_previewer_real_run_async;
	G_OBJECT_CLASS (klass)->finalize = unity_simple_scope_simple_result_previewer_finalize;
}


static void
unity_simple_scope_simple_result_previewer_instance_init (UnitySimpleScopeSimpleResultPreviewer * self)
{
	self->priv = UNITY_SIMPLE_SCOPE_SIMPLE_RESULT_PREVIEWER_GET_PRIVATE (self);
}


static void
unity_simple_scope_simple_result_previewer_finalize (GObject * obj)
{
	UnitySimpleScopeSimpleResultPreviewer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_SIMPLE_SCOPE_TYPE_SIMPLE_RESULT_PREVIEWER, UnitySimpleScopeSimpleResultPreviewer);
	G_OBJECT_CLASS (unity_simple_scope_simple_result_previewer_parent_class)->finalize (obj);
}


static GType
unity_simple_scope_simple_result_previewer_get_type (void)
{
	static volatile gsize unity_simple_scope_simple_result_previewer_type_id__volatile = 0;
	if (g_once_init_enter (&unity_simple_scope_simple_result_previewer_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnitySimpleScopeSimpleResultPreviewerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_simple_scope_simple_result_previewer_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnitySimpleScopeSimpleResultPreviewer), 0, (GInstanceInitFunc) unity_simple_scope_simple_result_previewer_instance_init, NULL };
		GType unity_simple_scope_simple_result_previewer_type_id;
		unity_simple_scope_simple_result_previewer_type_id = g_type_register_static (UNITY_TYPE_RESULT_PREVIEWER, "UnitySimpleScopeSimpleResultPreviewer", &g_define_type_info, 0);
		g_once_init_leave (&unity_simple_scope_simple_result_previewer_type_id__volatile, unity_simple_scope_simple_result_previewer_type_id);
	}
	return unity_simple_scope_simple_result_previewer_type_id__volatile;
}


static void
unity_simple_scope_class_init (UnitySimpleScopeClass * klass)
{
	unity_simple_scope_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnitySimpleScopePrivate));
	((UnityAbstractScopeClass *) klass)->create_search_for_query = (UnityScopeSearchBase* (*) (UnityAbstractScope *, UnitySearchContext*)) unity_simple_scope_real_create_search_for_query;
	((UnityAbstractScopeClass *) klass)->create_previewer = (UnityResultPreviewer* (*) (UnityAbstractScope *, UnityScopeResult*, UnitySearchMetadata*)) unity_simple_scope_real_create_previewer;
	((UnityAbstractScopeClass *) klass)->activate = (UnityActivationResponse* (*) (UnityAbstractScope *, UnityScopeResult*, UnitySearchMetadata*, const gchar*)) unity_simple_scope_real_activate;
	((UnityAbstractScopeClass *) klass)->get_categories = (UnityCategorySet* (*) (UnityAbstractScope *)) unity_simple_scope_real_get_categories;
	((UnityAbstractScopeClass *) klass)->get_filters = (UnityFilterSet* (*) (UnityAbstractScope *)) unity_simple_scope_real_get_filters;
	((UnityAbstractScopeClass *) klass)->get_schema = (UnitySchema* (*) (UnityAbstractScope *)) unity_simple_scope_real_get_schema;
	((UnityAbstractScopeClass *) klass)->get_search_hint = (gchar* (*) (UnityAbstractScope *)) unity_simple_scope_real_get_search_hint;
	((UnityAbstractScopeClass *) klass)->get_group_name = (gchar* (*) (UnityAbstractScope *)) unity_simple_scope_real_get_group_name;
	((UnityAbstractScopeClass *) klass)->get_unique_name = (gchar* (*) (UnityAbstractScope *)) unity_simple_scope_real_get_unique_name;
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_simple_scope_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_simple_scope_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_simple_scope_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_SIMPLE_SCOPE_FILTER_SET_PROPERTY, unity_simple_scope_properties[UNITY_SIMPLE_SCOPE_FILTER_SET_PROPERTY] = g_param_spec_object ("filter-set", "filter-set", "filter-set", UNITY_TYPE_FILTER_SET, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_SIMPLE_SCOPE_CATEGORY_SET_PROPERTY, unity_simple_scope_properties[UNITY_SIMPLE_SCOPE_CATEGORY_SET_PROPERTY] = g_param_spec_object ("category-set", "category-set", "category-set", UNITY_TYPE_CATEGORY_SET, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_SIMPLE_SCOPE_SCHEMA_PROPERTY, unity_simple_scope_properties[UNITY_SIMPLE_SCOPE_SCHEMA_PROPERTY] = g_param_spec_object ("schema", "schema", "schema", UNITY_TYPE_SCHEMA, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_SIMPLE_SCOPE_SEARCH_HINT_PROPERTY, unity_simple_scope_properties[UNITY_SIMPLE_SCOPE_SEARCH_HINT_PROPERTY] = g_param_spec_string ("search-hint", "search-hint", "search-hint", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_SIMPLE_SCOPE_GROUP_NAME_PROPERTY, unity_simple_scope_properties[UNITY_SIMPLE_SCOPE_GROUP_NAME_PROPERTY] = g_param_spec_string ("group-name", "group-name", "group-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_SIMPLE_SCOPE_UNIQUE_NAME_PROPERTY, unity_simple_scope_properties[UNITY_SIMPLE_SCOPE_UNIQUE_NAME_PROPERTY] = g_param_spec_string ("unique-name", "unique-name", "unique-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


static void
unity_simple_scope_instance_init (UnitySimpleScope * self)
{
	UnityFilterSet* _tmp0_;
	UnityCategorySet* _tmp1_;
	UnitySchema* _tmp2_;
	gchar* _tmp3_;
	self->priv = UNITY_SIMPLE_SCOPE_GET_PRIVATE (self);
	_tmp0_ = unity_filter_set_new ();
	self->priv->_filter_set = _tmp0_;
	_tmp1_ = unity_category_set_new ();
	self->priv->_category_set = _tmp1_;
	_tmp2_ = unity_schema_new ();
	self->priv->_schema = _tmp2_;
	_tmp3_ = g_strdup ("");
	self->priv->_search_hint = _tmp3_;
}


static void
unity_simple_scope_finalize (GObject * obj)
{
	UnitySimpleScope * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_SIMPLE_SCOPE, UnitySimpleScope);
	_g_object_unref0 (self->priv->_filter_set);
	_g_object_unref0 (self->priv->_category_set);
	_g_object_unref0 (self->priv->_schema);
	_g_free0 (self->priv->_search_hint);
	_g_free0 (self->priv->_group_name);
	_g_free0 (self->priv->_unique_name);
	(self->priv->search_run_func_target_destroy_notify == NULL) ? NULL : (self->priv->search_run_func_target_destroy_notify (self->priv->search_run_func_target), NULL);
	self->priv->search_run_func = NULL;
	self->priv->search_run_func_target = NULL;
	self->priv->search_run_func_target_destroy_notify = NULL;
	(self->priv->search_run_async_func_target_destroy_notify == NULL) ? NULL : (self->priv->search_run_async_func_target_destroy_notify (self->priv->search_run_async_func_target), NULL);
	self->priv->search_run_async_func = NULL;
	self->priv->search_run_async_func_target = NULL;
	self->priv->search_run_async_func_target_destroy_notify = NULL;
	(self->priv->preview_run_func_target_destroy_notify == NULL) ? NULL : (self->priv->preview_run_func_target_destroy_notify (self->priv->preview_run_func_target), NULL);
	self->priv->preview_run_func = NULL;
	self->priv->preview_run_func_target = NULL;
	self->priv->preview_run_func_target_destroy_notify = NULL;
	(self->priv->preview_run_async_func_target_destroy_notify == NULL) ? NULL : (self->priv->preview_run_async_func_target_destroy_notify (self->priv->preview_run_async_func_target), NULL);
	self->priv->preview_run_async_func = NULL;
	self->priv->preview_run_async_func_target = NULL;
	self->priv->preview_run_async_func_target_destroy_notify = NULL;
	(self->priv->activate_func_target_destroy_notify == NULL) ? NULL : (self->priv->activate_func_target_destroy_notify (self->priv->activate_func_target), NULL);
	self->priv->activate_func = NULL;
	self->priv->activate_func_target = NULL;
	self->priv->activate_func_target_destroy_notify = NULL;
	G_OBJECT_CLASS (unity_simple_scope_parent_class)->finalize (obj);
}


/**
 * A small AbstractScope wrapper which is easy to use in C.
 *
 * All you need to do when using this class is instantiate it using
 * unity_simple_scope_new(), set a few properties (filters, categories,
 * group and unique name) and most importantly set the pointer to the search,
 * preview and (optionally) activation functions.
 */
GType
unity_simple_scope_get_type (void)
{
	static volatile gsize unity_simple_scope_type_id__volatile = 0;
	if (g_once_init_enter (&unity_simple_scope_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnitySimpleScopeClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_simple_scope_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnitySimpleScope), 0, (GInstanceInitFunc) unity_simple_scope_instance_init, NULL };
		GType unity_simple_scope_type_id;
		unity_simple_scope_type_id = g_type_register_static (UNITY_TYPE_ABSTRACT_SCOPE, "UnitySimpleScope", &g_define_type_info, 0);
		g_once_init_leave (&unity_simple_scope_type_id__volatile, unity_simple_scope_type_id);
	}
	return unity_simple_scope_type_id__volatile;
}


static void
_vala_unity_simple_scope_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec)
{
	UnitySimpleScope * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_SIMPLE_SCOPE, UnitySimpleScope);
	switch (property_id) {
		case UNITY_SIMPLE_SCOPE_FILTER_SET_PROPERTY:
		g_value_set_object (value, unity_simple_scope_get_filter_set (self));
		break;
		case UNITY_SIMPLE_SCOPE_CATEGORY_SET_PROPERTY:
		g_value_set_object (value, unity_simple_scope_get_category_set (self));
		break;
		case UNITY_SIMPLE_SCOPE_SCHEMA_PROPERTY:
		g_value_set_object (value, unity_simple_scope_get_schema (self));
		break;
		case UNITY_SIMPLE_SCOPE_SEARCH_HINT_PROPERTY:
		g_value_set_string (value, unity_simple_scope_get_search_hint (self));
		break;
		case UNITY_SIMPLE_SCOPE_GROUP_NAME_PROPERTY:
		g_value_set_string (value, unity_simple_scope_get_group_name (self));
		break;
		case UNITY_SIMPLE_SCOPE_UNIQUE_NAME_PROPERTY:
		g_value_set_string (value, unity_simple_scope_get_unique_name (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_simple_scope_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec)
{
	UnitySimpleScope * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_SIMPLE_SCOPE, UnitySimpleScope);
	switch (property_id) {
		case UNITY_SIMPLE_SCOPE_FILTER_SET_PROPERTY:
		unity_simple_scope_set_filter_set (self, g_value_get_object (value));
		break;
		case UNITY_SIMPLE_SCOPE_CATEGORY_SET_PROPERTY:
		unity_simple_scope_set_category_set (self, g_value_get_object (value));
		break;
		case UNITY_SIMPLE_SCOPE_SCHEMA_PROPERTY:
		unity_simple_scope_set_schema (self, g_value_get_object (value));
		break;
		case UNITY_SIMPLE_SCOPE_SEARCH_HINT_PROPERTY:
		unity_simple_scope_set_search_hint (self, g_value_get_string (value));
		break;
		case UNITY_SIMPLE_SCOPE_GROUP_NAME_PROPERTY:
		unity_simple_scope_set_group_name (self, g_value_get_string (value));
		break;
		case UNITY_SIMPLE_SCOPE_UNIQUE_NAME_PROPERTY:
		unity_simple_scope_set_unique_name (self, g_value_get_string (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



