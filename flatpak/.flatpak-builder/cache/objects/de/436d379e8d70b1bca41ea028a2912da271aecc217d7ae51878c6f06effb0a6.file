/* unity-scope-dbus-connector.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-scope-dbus-connector.vala, do not modify */

/*
 * Copyright (C) 2011 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Neil Jagdish Patel <neil.patel@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include "unity.h"
#include <unity-protocol.h>
#include <stdlib.h>
#include <string.h>
#include <dee.h>
#include <gio/gio.h>


#define UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL (unity_internal_default_scope_dbus_impl_get_type ())
#define UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL, UnityInternalDefaultScopeDBusImpl))
#define UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL, UnityInternalDefaultScopeDBusImplClass))
#define UNITY_INTERNAL_IS_DEFAULT_SCOPE_DBUS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL))
#define UNITY_INTERNAL_IS_DEFAULT_SCOPE_DBUS_IMPL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL))
#define UNITY_INTERNAL_DEFAULT_SCOPE_DBUS_IMPL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_TYPE_DEFAULT_SCOPE_DBUS_IMPL, UnityInternalDefaultScopeDBusImplClass))

typedef struct _UnityInternalDefaultScopeDBusImpl UnityInternalDefaultScopeDBusImpl;
typedef struct _UnityInternalDefaultScopeDBusImplClass UnityInternalDefaultScopeDBusImplClass;
enum  {
	UNITY_SCOPE_DBUS_CONNECTOR_0_PROPERTY,
	UNITY_SCOPE_DBUS_CONNECTOR_SCOPE_PROPERTY,
	UNITY_SCOPE_DBUS_CONNECTOR_NUM_PROPERTIES
};
static GParamSpec* unity_scope_dbus_connector_properties[UNITY_SCOPE_DBUS_CONNECTOR_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define UNITY_INTERNAL_TYPE_SCOPE_DBUS_IMPL (unity_internal_scope_dbus_impl_get_type ())
#define UNITY_INTERNAL_SCOPE_DBUS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_SCOPE_DBUS_IMPL, UnityInternalScopeDBusImpl))
#define UNITY_INTERNAL_IS_SCOPE_DBUS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_SCOPE_DBUS_IMPL))
#define UNITY_INTERNAL_SCOPE_DBUS_IMPL_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), UNITY_INTERNAL_TYPE_SCOPE_DBUS_IMPL, UnityInternalScopeDBusImplIface))

typedef struct _UnityInternalScopeDBusImpl UnityInternalScopeDBusImpl;
typedef struct _UnityInternalScopeDBusImplIface UnityInternalScopeDBusImplIface;

#define UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER (unity_internal_scope_dbus_name_manager_get_type ())
#define UNITY_INTERNAL_SCOPE_DBUS_NAME_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER, UnityInternalScopeDBusNameManager))
#define UNITY_INTERNAL_SCOPE_DBUS_NAME_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER, UnityInternalScopeDBusNameManagerClass))
#define UNITY_INTERNAL_IS_SCOPE_DBUS_NAME_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER))
#define UNITY_INTERNAL_IS_SCOPE_DBUS_NAME_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER))
#define UNITY_INTERNAL_SCOPE_DBUS_NAME_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_TYPE_SCOPE_DBUS_NAME_MANAGER, UnityInternalScopeDBusNameManagerClass))

typedef struct _UnityInternalScopeDBusNameManager UnityInternalScopeDBusNameManager;
typedef struct _UnityInternalScopeDBusNameManagerClass UnityInternalScopeDBusNameManagerClass;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _Block10Data Block10Data;
#define _g_main_loop_unref0(var) ((var == NULL) ? NULL : (var = (g_main_loop_unref (var), NULL)))

struct _UnityScopeDBusConnectorPrivate {
	UnityAbstractScope* _scope;
	UnityInternalDefaultScopeDBusImpl* pimpl;
	gboolean exported;
	gboolean name_owned;
	gulong name_unowned_id;
};

struct _UnityInternalScopeDBusImplIface {
	GTypeInterface parent_iface;
	void (*export) (UnityInternalScopeDBusImpl* self, GError** error);
	void (*unexport) (UnityInternalScopeDBusImpl* self);
	void (*queue_property_notification) (UnityInternalScopeDBusImpl* self, const gchar* prop_name, GVariant* prop_value);
	DeeSerializableModel* (*get_categories_model) (UnityInternalScopeDBusImpl* self);
	void (*set_categories_model) (UnityInternalScopeDBusImpl* self, DeeSerializableModel* value);
	DeeSerializableModel* (*get_filters_model) (UnityInternalScopeDBusImpl* self);
	void (*set_filters_model) (UnityInternalScopeDBusImpl* self, DeeSerializableModel* value);
};

struct _Block10Data {
	int _ref_count_;
	UnityInternalScopeDBusNameManager* manager;
};


static gpointer unity_scope_dbus_connector_parent_class = NULL;
static gint unity_scope_dbus_connector_proxy_usage_count;
static gint unity_scope_dbus_connector_proxy_usage_count = 0;
static GMainLoop* unity_scope_dbus_connector_primary_loop;
static GMainLoop* unity_scope_dbus_connector_primary_loop = NULL;

GType unity_internal_default_scope_dbus_impl_get_type (void) G_GNUC_CONST;
#define UNITY_SCOPE_DBUS_CONNECTOR_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_SCOPE_DBUS_CONNECTOR, UnityScopeDBusConnectorPrivate))
UnityInternalDefaultScopeDBusImpl* unity_internal_default_scope_dbus_impl_new (UnityAbstractScope* owner);
UnityInternalDefaultScopeDBusImpl* unity_internal_default_scope_dbus_impl_construct (GType object_type,
                                                                                     UnityAbstractScope* owner);
static void unity_scope_dbus_connector_on_inactivity_timeout_reached (UnityScopeDBusConnector* self);
static void _unity_scope_dbus_connector_on_inactivity_timeout_reached_unity_internal_default_scope_dbus_impl_on_timeout_reached (UnityInternalDefaultScopeDBusImpl* _sender,
                                                                                                                          gpointer self);
static void unity_scope_dbus_connector_on_unexport_timeout_reached (UnityScopeDBusConnector* self);
static void _unity_scope_dbus_connector_on_unexport_timeout_reached_unity_internal_default_scope_dbus_impl_on_unexport_timeout_reached (UnityInternalDefaultScopeDBusImpl* _sender,
                                                                                                                                 gpointer self);
GType unity_internal_scope_dbus_impl_get_type (void) G_GNUC_CONST;
void unity_internal_scope_dbus_impl_export (UnityInternalScopeDBusImpl* self,
                                            GError** error);
static void unity_scope_dbus_connector_own_name (UnityScopeDBusConnector* self);
void unity_internal_scope_dbus_impl_unexport (UnityInternalScopeDBusImpl* self);
static void unity_scope_dbus_connector_unown_name (UnityScopeDBusConnector* self);
static void unity_scope_dbus_connector_on_name_unowned (UnityScopeDBusConnector* self);
void unity_internal_default_scope_dbus_impl_start_unexport_timer (UnityInternalDefaultScopeDBusImpl* self);
GType unity_internal_scope_dbus_name_manager_get_type (void) G_GNUC_CONST;
UnityInternalScopeDBusNameManager* unity_internal_scope_dbus_name_manager_get_default (void);
void unity_internal_scope_dbus_name_manager_own_name (UnityInternalScopeDBusNameManager* self,
                                                      const gchar* dbus_name);
static void _unity_scope_dbus_connector_on_name_unowned_unity_internal_scope_dbus_name_manager_name_unowned (UnityInternalScopeDBusNameManager* _sender,
                                                                                                      gpointer self);
void unity_internal_scope_dbus_name_manager_unown_name (UnityInternalScopeDBusNameManager* self,
                                                        const gchar* dbus_name);
static Block10Data* block10_data_ref (Block10Data* _data10_);
static void block10_data_unref (void * _userdata_);
void unity_internal_scope_dbus_name_manager_acquire_names (UnityInternalScopeDBusNameManager* self,
                                                           GAsyncReadyCallback _callback_,
                                                           gpointer _user_data_);
gboolean unity_internal_scope_dbus_name_manager_acquire_names_finish (UnityInternalScopeDBusNameManager* self,
                                                                      GAsyncResult* _res_);
static void __lambda48_ (Block10Data* _data10_,
                  GObject* obj,
                  GAsyncResult* _result_);
static void ___lambda48__gasync_ready_callback (GObject* source_object,
                                         GAsyncResult* res,
                                         gpointer self);
static void unity_scope_dbus_connector_finalize (GObject * obj);
static void _vala_unity_scope_dbus_connector_get_property (GObject * object,
                                                    guint property_id,
                                                    GValue * value,
                                                    GParamSpec * pspec);
static void _vala_unity_scope_dbus_connector_set_property (GObject * object,
                                                    guint property_id,
                                                    const GValue * value,
                                                    GParamSpec * pspec);


UnityScopeDBusConnector*
unity_scope_dbus_connector_construct (GType object_type,
                                      UnityAbstractScope* scope)
{
	UnityScopeDBusConnector * self = NULL;
	g_return_val_if_fail (scope != NULL, NULL);
	self = (UnityScopeDBusConnector*) g_object_new (object_type, "scope", scope, NULL);
	return self;
}


UnityScopeDBusConnector*
unity_scope_dbus_connector_new (UnityAbstractScope* scope)
{
	return unity_scope_dbus_connector_construct (UNITY_TYPE_SCOPE_DBUS_CONNECTOR, scope);
}


static void
_unity_scope_dbus_connector_on_inactivity_timeout_reached_unity_internal_default_scope_dbus_impl_on_timeout_reached (UnityInternalDefaultScopeDBusImpl* _sender,
                                                                                                                     gpointer self)
{
	unity_scope_dbus_connector_on_inactivity_timeout_reached ((UnityScopeDBusConnector*) self);
}


static void
_unity_scope_dbus_connector_on_unexport_timeout_reached_unity_internal_default_scope_dbus_impl_on_unexport_timeout_reached (UnityInternalDefaultScopeDBusImpl* _sender,
                                                                                                                            gpointer self)
{
	unity_scope_dbus_connector_on_unexport_timeout_reached ((UnityScopeDBusConnector*) self);
}


void
unity_scope_dbus_connector_export (UnityScopeDBusConnector* self,
                                   GError** error)
{
	gboolean _tmp0_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->exported;
	if (!_tmp0_) {
		UnityInternalDefaultScopeDBusImpl* _tmp1_;
		UnityInternalDefaultScopeDBusImpl* _tmp4_;
		UnityInternalDefaultScopeDBusImpl* _tmp5_;
		UnityInternalDefaultScopeDBusImpl* _tmp6_;
		gint _tmp7_;
		_tmp1_ = self->priv->pimpl;
		if (_tmp1_ == NULL) {
			UnityAbstractScope* _tmp2_;
			UnityInternalDefaultScopeDBusImpl* _tmp3_;
			_tmp2_ = self->priv->_scope;
			_tmp3_ = unity_internal_default_scope_dbus_impl_new (_tmp2_);
			_g_object_unref0 (self->priv->pimpl);
			self->priv->pimpl = _tmp3_;
		}
		_tmp4_ = self->priv->pimpl;
		g_signal_connect_object (_tmp4_, "on-timeout-reached", (GCallback) _unity_scope_dbus_connector_on_inactivity_timeout_reached_unity_internal_default_scope_dbus_impl_on_timeout_reached, self, 0);
		_tmp5_ = self->priv->pimpl;
		g_signal_connect_object (_tmp5_, "on-unexport-timeout-reached", (GCallback) _unity_scope_dbus_connector_on_unexport_timeout_reached_unity_internal_default_scope_dbus_impl_on_unexport_timeout_reached, self, 0);
		_tmp6_ = self->priv->pimpl;
		unity_internal_scope_dbus_impl_export ((UnityInternalScopeDBusImpl*) _tmp6_, &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			return;
		}
		self->priv->exported = TRUE;
		unity_scope_dbus_connector_own_name (self);
		_tmp7_ = unity_scope_dbus_connector_proxy_usage_count;
		unity_scope_dbus_connector_proxy_usage_count = _tmp7_ + 1;
	}
}


void
unity_scope_dbus_connector_unexport (UnityScopeDBusConnector* self)
{
	gboolean _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->exported;
	if (_tmp0_) {
		UnityInternalDefaultScopeDBusImpl* _tmp1_;
		gint _tmp2_;
		_tmp1_ = self->priv->pimpl;
		unity_internal_scope_dbus_impl_unexport ((UnityInternalScopeDBusImpl*) _tmp1_);
		self->priv->exported = FALSE;
		unity_scope_dbus_connector_unown_name (self);
		_tmp2_ = unity_scope_dbus_connector_proxy_usage_count;
		unity_scope_dbus_connector_proxy_usage_count = _tmp2_ - 1;
	}
}


static void
unity_scope_dbus_connector_on_inactivity_timeout_reached (UnityScopeDBusConnector* self)
{
	g_return_if_fail (self != NULL);
	unity_scope_dbus_connector_unown_name (self);
}


static void
unity_scope_dbus_connector_on_unexport_timeout_reached (UnityScopeDBusConnector* self)
{
	gint _tmp0_;
	g_return_if_fail (self != NULL);
	unity_scope_dbus_connector_unexport (self);
	_tmp0_ = unity_scope_dbus_connector_proxy_usage_count;
	if (_tmp0_ == 0) {
		unity_scope_dbus_connector_quit ();
	}
}


static void
unity_scope_dbus_connector_on_name_unowned (UnityScopeDBusConnector* self)
{
	UnityInternalDefaultScopeDBusImpl* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->pimpl;
	unity_internal_default_scope_dbus_impl_start_unexport_timer (_tmp0_);
}


static void
_unity_scope_dbus_connector_on_name_unowned_unity_internal_scope_dbus_name_manager_name_unowned (UnityInternalScopeDBusNameManager* _sender,
                                                                                                 gpointer self)
{
	unity_scope_dbus_connector_on_name_unowned ((UnityScopeDBusConnector*) self);
}


static void
unity_scope_dbus_connector_own_name (UnityScopeDBusConnector* self)
{
	UnityInternalScopeDBusNameManager* manager = NULL;
	UnityInternalScopeDBusNameManager* _tmp0_;
	gchar* dbus_name = NULL;
	UnityAbstractScope* _tmp1_;
	gchar* _tmp2_;
	UnityInternalScopeDBusNameManager* _tmp3_;
	const gchar* _tmp4_;
	gulong _tmp5_;
	g_return_if_fail (self != NULL);
	_tmp0_ = unity_internal_scope_dbus_name_manager_get_default ();
	manager = _tmp0_;
	_tmp1_ = self->priv->_scope;
	_tmp2_ = unity_abstract_scope_get_group_name (_tmp1_);
	dbus_name = _tmp2_;
	_tmp3_ = manager;
	_tmp4_ = dbus_name;
	unity_internal_scope_dbus_name_manager_own_name (_tmp3_, _tmp4_);
	self->priv->name_owned = TRUE;
	_tmp5_ = self->priv->name_unowned_id;
	if (_tmp5_ == ((gulong) 0)) {
		UnityInternalScopeDBusNameManager* _tmp6_;
		const gchar* _tmp7_;
		gchar* _tmp8_;
		gulong _tmp9_;
		_tmp6_ = manager;
		_tmp7_ = dbus_name;
		_tmp8_ = g_strconcat ("name-unowned::", _tmp7_, NULL);
		_tmp9_ = g_signal_connect_object (_tmp6_, _tmp8_, (GCallback) _unity_scope_dbus_connector_on_name_unowned_unity_internal_scope_dbus_name_manager_name_unowned, self, 0);
		self->priv->name_unowned_id = _tmp9_;
		_g_free0 (_tmp8_);
	}
	_g_free0 (dbus_name);
	_g_object_unref0 (manager);
}


static void
unity_scope_dbus_connector_unown_name (UnityScopeDBusConnector* self)
{
	gboolean _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->name_owned;
	if (_tmp0_) {
		UnityInternalScopeDBusNameManager* manager = NULL;
		UnityInternalScopeDBusNameManager* _tmp1_;
		gchar* dbus_name = NULL;
		UnityAbstractScope* _tmp2_;
		gchar* _tmp3_;
		UnityInternalScopeDBusNameManager* _tmp4_;
		const gchar* _tmp5_;
		_tmp1_ = unity_internal_scope_dbus_name_manager_get_default ();
		manager = _tmp1_;
		_tmp2_ = self->priv->_scope;
		_tmp3_ = unity_abstract_scope_get_group_name (_tmp2_);
		dbus_name = _tmp3_;
		_tmp4_ = manager;
		_tmp5_ = dbus_name;
		unity_internal_scope_dbus_name_manager_unown_name (_tmp4_, _tmp5_);
		self->priv->name_owned = FALSE;
		_g_free0 (dbus_name);
		_g_object_unref0 (manager);
	}
}


static Block10Data*
block10_data_ref (Block10Data* _data10_)
{
	g_atomic_int_inc (&_data10_->_ref_count_);
	return _data10_;
}


static void
block10_data_unref (void * _userdata_)
{
	Block10Data* _data10_;
	_data10_ = (Block10Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data10_->_ref_count_)) {
		_g_object_unref0 (_data10_->manager);
		g_slice_free (Block10Data, _data10_);
	}
}


static void
__lambda48_ (Block10Data* _data10_,
             GObject* obj,
             GAsyncResult* _result_)
{
	g_return_if_fail (_result_ != NULL);
	if (!unity_internal_scope_dbus_name_manager_acquire_names_finish (_data10_->manager, _result_)) {
		GMainLoop* _tmp0_;
		g_warning ("unity-scope-dbus-connector.vala:128: Failed to acquire all required D-" \
"Bus names");
		_tmp0_ = unity_scope_dbus_connector_primary_loop;
		g_main_loop_quit (_tmp0_);
	}
}


static void
___lambda48__gasync_ready_callback (GObject* source_object,
                                    GAsyncResult* res,
                                    gpointer self)
{
	__lambda48_ (self, source_object, res);
	block10_data_unref (self);
}


void
unity_scope_dbus_connector_run (void)
{
	Block10Data* _data10_;
	GMainLoop* _tmp0_;
	UnityInternalScopeDBusNameManager* _tmp2_;
	GMainLoop* _tmp3_;
	_data10_ = g_slice_new0 (Block10Data);
	_data10_->_ref_count_ = 1;
	_tmp0_ = unity_scope_dbus_connector_primary_loop;
	if (_tmp0_ == NULL) {
		GMainLoop* _tmp1_;
		_tmp1_ = g_main_loop_new (NULL, FALSE);
		_g_main_loop_unref0 (unity_scope_dbus_connector_primary_loop);
		unity_scope_dbus_connector_primary_loop = _tmp1_;
	}
	_tmp2_ = unity_internal_scope_dbus_name_manager_get_default ();
	_data10_->manager = _tmp2_;
	unity_internal_scope_dbus_name_manager_acquire_names (_data10_->manager, ___lambda48__gasync_ready_callback, block10_data_ref (_data10_));
	_tmp3_ = unity_scope_dbus_connector_primary_loop;
	g_main_loop_run (_tmp3_);
	block10_data_unref (_data10_);
	_data10_ = NULL;
}


void
unity_scope_dbus_connector_quit (void)
{
	GMainLoop* _tmp0_;
	_tmp0_ = unity_scope_dbus_connector_primary_loop;
	if (_tmp0_ != NULL) {
		GMainLoop* _tmp1_;
		_tmp1_ = unity_scope_dbus_connector_primary_loop;
		g_main_loop_quit (_tmp1_);
	}
}


UnityAbstractScope*
unity_scope_dbus_connector_get_scope (UnityScopeDBusConnector* self)
{
	UnityAbstractScope* result;
	UnityAbstractScope* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_scope;
	result = _tmp0_;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
unity_scope_dbus_connector_set_scope (UnityScopeDBusConnector* self,
                                      UnityAbstractScope* value)
{
	g_return_if_fail (self != NULL);
	if (unity_scope_dbus_connector_get_scope (self) != value) {
		UnityAbstractScope* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_scope);
		self->priv->_scope = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_scope_dbus_connector_properties[UNITY_SCOPE_DBUS_CONNECTOR_SCOPE_PROPERTY]);
	}
}


static void
unity_scope_dbus_connector_class_init (UnityScopeDBusConnectorClass * klass)
{
	unity_scope_dbus_connector_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityScopeDBusConnectorPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_scope_dbus_connector_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_scope_dbus_connector_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_scope_dbus_connector_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_SCOPE_DBUS_CONNECTOR_SCOPE_PROPERTY, unity_scope_dbus_connector_properties[UNITY_SCOPE_DBUS_CONNECTOR_SCOPE_PROPERTY] = g_param_spec_object ("scope", "scope", "scope", UNITY_TYPE_ABSTRACT_SCOPE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
}


static void
unity_scope_dbus_connector_instance_init (UnityScopeDBusConnector * self)
{
	self->priv = UNITY_SCOPE_DBUS_CONNECTOR_GET_PRIVATE (self);
}


static void
unity_scope_dbus_connector_finalize (GObject * obj)
{
	UnityScopeDBusConnector * self;
	UnityInternalDefaultScopeDBusImpl* _tmp0_;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_SCOPE_DBUS_CONNECTOR, UnityScopeDBusConnector);
	unity_scope_dbus_connector_unexport (self);
	_tmp0_ = self->priv->pimpl;
	if (_tmp0_ != NULL) {
		UnityInternalDefaultScopeDBusImpl* _tmp1_;
		_tmp1_ = self->priv->pimpl;
		g_object_run_dispose ((GObject*) _tmp1_);
	}
	_g_object_unref0 (self->priv->_scope);
	_g_object_unref0 (self->priv->pimpl);
	G_OBJECT_CLASS (unity_scope_dbus_connector_parent_class)->finalize (obj);
}


GType
unity_scope_dbus_connector_get_type (void)
{
	static volatile gsize unity_scope_dbus_connector_type_id__volatile = 0;
	if (g_once_init_enter (&unity_scope_dbus_connector_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityScopeDBusConnectorClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_scope_dbus_connector_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityScopeDBusConnector), 0, (GInstanceInitFunc) unity_scope_dbus_connector_instance_init, NULL };
		GType unity_scope_dbus_connector_type_id;
		unity_scope_dbus_connector_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityScopeDBusConnector", &g_define_type_info, 0);
		g_once_init_leave (&unity_scope_dbus_connector_type_id__volatile, unity_scope_dbus_connector_type_id);
	}
	return unity_scope_dbus_connector_type_id__volatile;
}


static void
_vala_unity_scope_dbus_connector_get_property (GObject * object,
                                               guint property_id,
                                               GValue * value,
                                               GParamSpec * pspec)
{
	UnityScopeDBusConnector * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_SCOPE_DBUS_CONNECTOR, UnityScopeDBusConnector);
	switch (property_id) {
		case UNITY_SCOPE_DBUS_CONNECTOR_SCOPE_PROPERTY:
		g_value_set_object (value, unity_scope_dbus_connector_get_scope (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_scope_dbus_connector_set_property (GObject * object,
                                               guint property_id,
                                               const GValue * value,
                                               GParamSpec * pspec)
{
	UnityScopeDBusConnector * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_SCOPE_DBUS_CONNECTOR, UnityScopeDBusConnector);
	switch (property_id) {
		case UNITY_SCOPE_DBUS_CONNECTOR_SCOPE_PROPERTY:
		unity_scope_dbus_connector_set_scope (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



