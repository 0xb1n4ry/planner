/* MainWindow.c generated by valac 0.40.11, the Vala compiler
 * generated from MainWindow.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <unity.h>
#include <gdk/gdk.h>
#include <glib/gi18n-lib.h>
#include <gio/gio.h>
#include <cairo.h>
#include <stdlib.h>
#include <string.h>


#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;
typedef struct _MainWindowPrivate MainWindowPrivate;

#define WIDGETS_TYPE_HEADER_BAR (widgets_header_bar_get_type ())
#define WIDGETS_HEADER_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_HEADER_BAR, WidgetsHeaderBar))
#define WIDGETS_HEADER_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_HEADER_BAR, WidgetsHeaderBarClass))
#define WIDGETS_IS_HEADER_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_HEADER_BAR))
#define WIDGETS_IS_HEADER_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_HEADER_BAR))
#define WIDGETS_HEADER_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_HEADER_BAR, WidgetsHeaderBarClass))

typedef struct _WidgetsHeaderBar WidgetsHeaderBar;
typedef struct _WidgetsHeaderBarClass WidgetsHeaderBarClass;

#define VIEWS_TYPE_MAIN (views_main_get_type ())
#define VIEWS_MAIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_MAIN, ViewsMain))
#define VIEWS_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_MAIN, ViewsMainClass))
#define VIEWS_IS_MAIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_MAIN))
#define VIEWS_IS_MAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_MAIN))
#define VIEWS_MAIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_MAIN, ViewsMainClass))

typedef struct _ViewsMain ViewsMain;
typedef struct _ViewsMainClass ViewsMainClass;

#define WIDGETS_TYPE_QUICK_FIND (widgets_quick_find_get_type ())
#define WIDGETS_QUICK_FIND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_QUICK_FIND, WidgetsQuickFind))
#define WIDGETS_QUICK_FIND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_QUICK_FIND, WidgetsQuickFindClass))
#define WIDGETS_IS_QUICK_FIND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_QUICK_FIND))
#define WIDGETS_IS_QUICK_FIND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_QUICK_FIND))
#define WIDGETS_QUICK_FIND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_QUICK_FIND, WidgetsQuickFindClass))

typedef struct _WidgetsQuickFind WidgetsQuickFind;
typedef struct _WidgetsQuickFindClass WidgetsQuickFindClass;

#define WIDGETS_TYPE_CALENDAR_EVENTS (widgets_calendar_events_get_type ())
#define WIDGETS_CALENDAR_EVENTS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_CALENDAR_EVENTS, WidgetsCalendarEvents))
#define WIDGETS_CALENDAR_EVENTS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_CALENDAR_EVENTS, WidgetsCalendarEventsClass))
#define WIDGETS_IS_CALENDAR_EVENTS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_CALENDAR_EVENTS))
#define WIDGETS_IS_CALENDAR_EVENTS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_CALENDAR_EVENTS))
#define WIDGETS_CALENDAR_EVENTS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_CALENDAR_EVENTS, WidgetsCalendarEventsClass))

typedef struct _WidgetsCalendarEvents WidgetsCalendarEvents;
typedef struct _WidgetsCalendarEventsClass WidgetsCalendarEventsClass;

#define TYPE_APPLICATION (application_get_type ())
#define APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_APPLICATION, Application))
#define APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_APPLICATION, ApplicationClass))
#define IS_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_APPLICATION))
#define IS_APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_APPLICATION))
#define APPLICATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_APPLICATION, ApplicationClass))

typedef struct _Application Application;
typedef struct _ApplicationClass ApplicationClass;
enum  {
	MAIN_WINDOW_0_PROPERTY,
	MAIN_WINDOW_APP_PROPERTY,
	MAIN_WINDOW_NUM_PROPERTIES
};
static GParamSpec* main_window_properties[MAIN_WINDOW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

#define SERVICES_TYPE_SIGNALS (services_signals_get_type ())
#define SERVICES_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_SIGNALS, ServicesSignals))
#define SERVICES_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_SIGNALS, ServicesSignalsClass))
#define SERVICES_IS_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_SIGNALS))
#define SERVICES_IS_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_SIGNALS))
#define SERVICES_SIGNALS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_SIGNALS, ServicesSignalsClass))

typedef struct _ServicesSignals ServicesSignals;
typedef struct _ServicesSignalsClass ServicesSignalsClass;

struct _MainWindow {
	GtkWindow parent_instance;
	MainWindowPrivate * priv;
	WidgetsHeaderBar* headerbar;
	ViewsMain* main_view;
	UnityLauncherEntry* launcher;
	WidgetsQuickFind* quick_find;
	WidgetsCalendarEvents* events_widget;
};

struct _MainWindowClass {
	GtkWindowClass parent_class;
};

struct _MainWindowPrivate {
	Application* _app;
};


static gpointer main_window_parent_class = NULL;
extern GSettings* application_settings;
extern ServicesDatabase* application_database;
extern ServicesSignals* application_signals;

GType main_window_get_type (void) G_GNUC_CONST;
GType widgets_header_bar_get_type (void) G_GNUC_CONST;
GType views_main_get_type (void) G_GNUC_CONST;
GType widgets_quick_find_get_type (void) G_GNUC_CONST;
GType widgets_calendar_events_get_type (void) G_GNUC_CONST;
GType application_get_type (void) G_GNUC_CONST;
#define MAIN_WINDOW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), TYPE_MAIN_WINDOW, MainWindowPrivate))
MainWindow* main_window_new (Application* application);
MainWindow* main_window_construct (GType object_type,
                                   Application* application);
static void main_window_check_badge_count (MainWindow* self);
GType services_database_get_type (void) G_GNUC_CONST;
gint services_database_get_inbox_number (ServicesDatabase* self);
gint services_database_get_today_number (ServicesDatabase* self);
static gboolean main_window_real_configure_event (GtkWidget* base,
                                           GdkEventConfigure* event);
static GVariant* _variant_new5 (gint* value,
                         gint value_length1);
static GVariant* _variant_new6 (gint* value,
                         gint value_length1);
Application* main_window_get_app (MainWindow* self);
static void main_window_set_app (MainWindow* self,
                          Application* value);
static GObject * main_window_constructor (GType type,
                                   guint n_construct_properties,
                                   GObjectConstructParam * construct_properties);
WidgetsHeaderBar* widgets_header_bar_new (GtkWindow* parent);
WidgetsHeaderBar* widgets_header_bar_construct (GType object_type,
                                                GtkWindow* parent);
ViewsMain* views_main_new (MainWindow* parent);
ViewsMain* views_main_construct (GType object_type,
                                 MainWindow* parent);
WidgetsQuickFind* widgets_quick_find_new (void);
WidgetsQuickFind* widgets_quick_find_construct (GType object_type);
WidgetsCalendarEvents* widgets_calendar_events_new (void);
WidgetsCalendarEvents* widgets_calendar_events_construct (GType object_type);
static gboolean _main_window___lambda461_ (MainWindow* self);
static gboolean __main_window___lambda461__gtk_widget_delete_event (GtkWidget* _sender,
                                                             GdkEventAny* event,
                                                             gpointer self);
static gboolean _main_window___lambda462_ (MainWindow* self,
                                    GdkEvent* event);
static gboolean __main_window___lambda462__gtk_widget_event (GtkWidget* _sender,
                                                      GdkEvent* event,
                                                      gpointer self);
static void _main_window___lambda463_ (MainWindow* self,
                                const gchar* key);
static void __main_window___lambda463__g_settings_changed (GSettings* _sender,
                                                    const gchar* key,
                                                    gpointer self);
static void _main_window___lambda464_ (MainWindow* self);
static void __main_window___lambda464__services_database_update_indicators (ServicesDatabase* _sender,
                                                                     gpointer self);
GType services_signals_get_type (void) G_GNUC_CONST;
static void _main_window___lambda465_ (MainWindow* self);
static void __main_window___lambda465__services_signals_on_signal_show_events (ServicesSignals* _sender,
                                                                        gpointer self);
static void main_window_finalize (GObject * obj);
static void _vala_main_window_get_property (GObject * object,
                                     guint property_id,
                                     GValue * value,
                                     GParamSpec * pspec);
static void _vala_main_window_set_property (GObject * object,
                                     guint property_id,
                                     const GValue * value,
                                     GParamSpec * pspec);


MainWindow*
main_window_construct (GType object_type,
                       Application* application)
{
	MainWindow * self = NULL;
#line 30 "/run/build/planner/src/MainWindow.vala"
	g_return_val_if_fail (application != NULL, NULL);
#line 31 "/run/build/planner/src/MainWindow.vala"
	self = (MainWindow*) g_object_new (object_type, "application", application, "app", application, "icon-name", "com.github.alainm23.planner", "title", _ ("Planner"), "height-request", 700, "width-request", 1024, NULL);
#line 30 "/run/build/planner/src/MainWindow.vala"
	return self;
#line 232 "MainWindow.c"
}


MainWindow*
main_window_new (Application* application)
{
#line 30 "/run/build/planner/src/MainWindow.vala"
	return main_window_construct (TYPE_MAIN_WINDOW, application);
#line 241 "MainWindow.c"
}


static void
main_window_check_badge_count (MainWindow* self)
{
	gint badge_count = 0;
	GSettings* _tmp0_;
	gint _tmp1_;
#line 106 "/run/build/planner/src/MainWindow.vala"
	g_return_if_fail (self != NULL);
#line 107 "/run/build/planner/src/MainWindow.vala"
	_tmp0_ = application_settings;
#line 107 "/run/build/planner/src/MainWindow.vala"
	badge_count = g_settings_get_enum (_tmp0_, "badge-count");
#line 109 "/run/build/planner/src/MainWindow.vala"
	_tmp1_ = badge_count;
#line 109 "/run/build/planner/src/MainWindow.vala"
	if (_tmp1_ == 0) {
#line 261 "MainWindow.c"
		UnityLauncherEntry* _tmp2_;
		UnityLauncherEntry* _tmp3_;
#line 110 "/run/build/planner/src/MainWindow.vala"
		_tmp2_ = self->launcher;
#line 110 "/run/build/planner/src/MainWindow.vala"
		unity_launcher_entry_set_count (_tmp2_, (gint64) 0);
#line 111 "/run/build/planner/src/MainWindow.vala"
		_tmp3_ = self->launcher;
#line 111 "/run/build/planner/src/MainWindow.vala"
		unity_launcher_entry_set_count_visible (_tmp3_, FALSE);
#line 272 "MainWindow.c"
	} else {
		gint _tmp4_;
#line 112 "/run/build/planner/src/MainWindow.vala"
		_tmp4_ = badge_count;
#line 112 "/run/build/planner/src/MainWindow.vala"
		if (_tmp4_ == 1) {
#line 279 "MainWindow.c"
			UnityLauncherEntry* _tmp5_;
			ServicesDatabase* _tmp6_;
			UnityLauncherEntry* _tmp7_;
			UnityLauncherEntry* _tmp8_;
			gint64 _tmp9_;
			gint64 _tmp10_;
#line 113 "/run/build/planner/src/MainWindow.vala"
			_tmp5_ = self->launcher;
#line 113 "/run/build/planner/src/MainWindow.vala"
			_tmp6_ = application_database;
#line 113 "/run/build/planner/src/MainWindow.vala"
			unity_launcher_entry_set_count (_tmp5_, (gint64) services_database_get_inbox_number (_tmp6_));
#line 114 "/run/build/planner/src/MainWindow.vala"
			_tmp7_ = self->launcher;
#line 114 "/run/build/planner/src/MainWindow.vala"
			_tmp8_ = self->launcher;
#line 114 "/run/build/planner/src/MainWindow.vala"
			_tmp9_ = unity_launcher_entry_get_count (_tmp8_);
#line 114 "/run/build/planner/src/MainWindow.vala"
			_tmp10_ = _tmp9_;
#line 114 "/run/build/planner/src/MainWindow.vala"
			unity_launcher_entry_set_count_visible (_tmp7_, _tmp10_ > ((gint64) 0));
#line 302 "MainWindow.c"
		} else {
			gint _tmp11_;
#line 115 "/run/build/planner/src/MainWindow.vala"
			_tmp11_ = badge_count;
#line 115 "/run/build/planner/src/MainWindow.vala"
			if (_tmp11_ == 2) {
#line 309 "MainWindow.c"
				UnityLauncherEntry* _tmp12_;
				ServicesDatabase* _tmp13_;
				UnityLauncherEntry* _tmp14_;
				UnityLauncherEntry* _tmp15_;
				gint64 _tmp16_;
				gint64 _tmp17_;
#line 116 "/run/build/planner/src/MainWindow.vala"
				_tmp12_ = self->launcher;
#line 116 "/run/build/planner/src/MainWindow.vala"
				_tmp13_ = application_database;
#line 116 "/run/build/planner/src/MainWindow.vala"
				unity_launcher_entry_set_count (_tmp12_, (gint64) services_database_get_today_number (_tmp13_));
#line 117 "/run/build/planner/src/MainWindow.vala"
				_tmp14_ = self->launcher;
#line 117 "/run/build/planner/src/MainWindow.vala"
				_tmp15_ = self->launcher;
#line 117 "/run/build/planner/src/MainWindow.vala"
				_tmp16_ = unity_launcher_entry_get_count (_tmp15_);
#line 117 "/run/build/planner/src/MainWindow.vala"
				_tmp17_ = _tmp16_;
#line 117 "/run/build/planner/src/MainWindow.vala"
				unity_launcher_entry_set_count_visible (_tmp14_, _tmp17_ > ((gint64) 0));
#line 332 "MainWindow.c"
			} else {
				gint _tmp18_;
#line 118 "/run/build/planner/src/MainWindow.vala"
				_tmp18_ = badge_count;
#line 118 "/run/build/planner/src/MainWindow.vala"
				if (_tmp18_ == 3) {
#line 339 "MainWindow.c"
					UnityLauncherEntry* _tmp19_;
					ServicesDatabase* _tmp20_;
					ServicesDatabase* _tmp21_;
					UnityLauncherEntry* _tmp22_;
					UnityLauncherEntry* _tmp23_;
					gint64 _tmp24_;
					gint64 _tmp25_;
#line 119 "/run/build/planner/src/MainWindow.vala"
					_tmp19_ = self->launcher;
#line 119 "/run/build/planner/src/MainWindow.vala"
					_tmp20_ = application_database;
#line 119 "/run/build/planner/src/MainWindow.vala"
					_tmp21_ = application_database;
#line 119 "/run/build/planner/src/MainWindow.vala"
					unity_launcher_entry_set_count (_tmp19_, (gint64) (services_database_get_inbox_number (_tmp20_) + services_database_get_today_number (_tmp21_)));
#line 120 "/run/build/planner/src/MainWindow.vala"
					_tmp22_ = self->launcher;
#line 120 "/run/build/planner/src/MainWindow.vala"
					_tmp23_ = self->launcher;
#line 120 "/run/build/planner/src/MainWindow.vala"
					_tmp24_ = unity_launcher_entry_get_count (_tmp23_);
#line 120 "/run/build/planner/src/MainWindow.vala"
					_tmp25_ = _tmp24_;
#line 120 "/run/build/planner/src/MainWindow.vala"
					unity_launcher_entry_set_count_visible (_tmp22_, _tmp25_ > ((gint64) 0));
#line 365 "MainWindow.c"
				} else {
				}
			}
		}
	}
}


static GVariant*
_variant_new5 (gint* value,
               gint value_length1)
{
	gint* _tmp8_;
	GVariantBuilder _tmp9_;
	int _tmp10_;
#line 129 "/run/build/planner/src/MainWindow.vala"
	_tmp8_ = value;
#line 129 "/run/build/planner/src/MainWindow.vala"
	g_variant_builder_init (&_tmp9_, G_VARIANT_TYPE ("ai"));
#line 129 "/run/build/planner/src/MainWindow.vala"
	for (_tmp10_ = 0; _tmp10_ < value_length1; _tmp10_++) {
#line 129 "/run/build/planner/src/MainWindow.vala"
		g_variant_builder_add_value (&_tmp9_, g_variant_new_int32 (*_tmp8_));
#line 129 "/run/build/planner/src/MainWindow.vala"
		_tmp8_++;
#line 391 "MainWindow.c"
	}
#line 129 "/run/build/planner/src/MainWindow.vala"
	return g_variant_ref_sink (g_variant_builder_end (&_tmp9_));
#line 395 "MainWindow.c"
}


static GVariant*
_variant_new6 (gint* value,
               gint value_length1)
{
	gint* _tmp17_;
	GVariantBuilder _tmp18_;
	int _tmp19_;
#line 133 "/run/build/planner/src/MainWindow.vala"
	_tmp17_ = value;
#line 133 "/run/build/planner/src/MainWindow.vala"
	g_variant_builder_init (&_tmp18_, G_VARIANT_TYPE ("ai"));
#line 133 "/run/build/planner/src/MainWindow.vala"
	for (_tmp19_ = 0; _tmp19_ < value_length1; _tmp19_++) {
#line 133 "/run/build/planner/src/MainWindow.vala"
		g_variant_builder_add_value (&_tmp18_, g_variant_new_int32 (*_tmp17_));
#line 133 "/run/build/planner/src/MainWindow.vala"
		_tmp17_++;
#line 416 "MainWindow.c"
	}
#line 133 "/run/build/planner/src/MainWindow.vala"
	return g_variant_ref_sink (g_variant_builder_end (&_tmp18_));
#line 420 "MainWindow.c"
}


static gboolean
main_window_real_configure_event (GtkWidget* base,
                                  GdkEventConfigure* event)
{
	MainWindow * self;
	gboolean result = FALSE;
	GtkAllocation rect = {0};
	GtkAllocation _tmp0_ = {0};
	GSettings* _tmp1_;
	GtkAllocation _tmp2_;
	gint _tmp3_;
	GtkAllocation _tmp4_;
	gint _tmp5_;
	gint* _tmp6_;
	gint* _tmp7_;
	gint _tmp7__length1;
	GVariant* _tmp11_;
	gint root_x = 0;
	gint root_y = 0;
	gint _tmp12_ = 0;
	gint _tmp13_ = 0;
	GSettings* _tmp14_;
	gint* _tmp15_;
	gint* _tmp16_;
	gint _tmp16__length1;
	GVariant* _tmp20_;
#line 126 "/run/build/planner/src/MainWindow.vala"
	self = (MainWindow*) base;
#line 126 "/run/build/planner/src/MainWindow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 128 "/run/build/planner/src/MainWindow.vala"
	gtk_widget_get_allocation ((GtkWidget*) self, &_tmp0_);
#line 128 "/run/build/planner/src/MainWindow.vala"
	rect = _tmp0_;
#line 129 "/run/build/planner/src/MainWindow.vala"
	_tmp1_ = application_settings;
#line 129 "/run/build/planner/src/MainWindow.vala"
	_tmp2_ = rect;
#line 129 "/run/build/planner/src/MainWindow.vala"
	_tmp3_ = _tmp2_.height;
#line 129 "/run/build/planner/src/MainWindow.vala"
	_tmp4_ = rect;
#line 129 "/run/build/planner/src/MainWindow.vala"
	_tmp5_ = _tmp4_.width;
#line 129 "/run/build/planner/src/MainWindow.vala"
	_tmp6_ = g_new0 (gint, 2);
#line 129 "/run/build/planner/src/MainWindow.vala"
	_tmp6_[0] = _tmp3_;
#line 129 "/run/build/planner/src/MainWindow.vala"
	_tmp6_[1] = _tmp5_;
#line 129 "/run/build/planner/src/MainWindow.vala"
	_tmp7_ = _tmp6_;
#line 129 "/run/build/planner/src/MainWindow.vala"
	_tmp7__length1 = 2;
#line 129 "/run/build/planner/src/MainWindow.vala"
	_tmp11_ = _variant_new5 (_tmp7_, 2);
#line 129 "/run/build/planner/src/MainWindow.vala"
	g_settings_set_value (_tmp1_, "window-size", _tmp11_);
#line 129 "/run/build/planner/src/MainWindow.vala"
	_g_variant_unref0 (_tmp11_);
#line 129 "/run/build/planner/src/MainWindow.vala"
	_tmp7_ = (g_free (_tmp7_), NULL);
#line 132 "/run/build/planner/src/MainWindow.vala"
	gtk_window_get_position ((GtkWindow*) self, &_tmp12_, &_tmp13_);
#line 132 "/run/build/planner/src/MainWindow.vala"
	root_x = _tmp12_;
#line 132 "/run/build/planner/src/MainWindow.vala"
	root_y = _tmp13_;
#line 133 "/run/build/planner/src/MainWindow.vala"
	_tmp14_ = application_settings;
#line 133 "/run/build/planner/src/MainWindow.vala"
	_tmp15_ = g_new0 (gint, 2);
#line 133 "/run/build/planner/src/MainWindow.vala"
	_tmp15_[0] = root_x;
#line 133 "/run/build/planner/src/MainWindow.vala"
	_tmp15_[1] = root_y;
#line 133 "/run/build/planner/src/MainWindow.vala"
	_tmp16_ = _tmp15_;
#line 133 "/run/build/planner/src/MainWindow.vala"
	_tmp16__length1 = 2;
#line 133 "/run/build/planner/src/MainWindow.vala"
	_tmp20_ = _variant_new6 (_tmp16_, 2);
#line 133 "/run/build/planner/src/MainWindow.vala"
	g_settings_set_value (_tmp14_, "window-position", _tmp20_);
#line 133 "/run/build/planner/src/MainWindow.vala"
	_g_variant_unref0 (_tmp20_);
#line 133 "/run/build/planner/src/MainWindow.vala"
	_tmp16_ = (g_free (_tmp16_), NULL);
#line 135 "/run/build/planner/src/MainWindow.vala"
	result = GTK_WIDGET_CLASS (main_window_parent_class)->configure_event ((GtkWidget*) G_TYPE_CHECK_INSTANCE_CAST (self, gtk_window_get_type (), GtkWindow), event);
#line 135 "/run/build/planner/src/MainWindow.vala"
	return result;
#line 516 "MainWindow.c"
}


Application*
main_window_get_app (MainWindow* self)
{
	Application* result;
	Application* _tmp0_;
#line 23 "/run/build/planner/src/MainWindow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "/run/build/planner/src/MainWindow.vala"
	_tmp0_ = self->priv->_app;
#line 23 "/run/build/planner/src/MainWindow.vala"
	result = _tmp0_;
#line 23 "/run/build/planner/src/MainWindow.vala"
	return result;
#line 533 "MainWindow.c"
}


static void
main_window_set_app (MainWindow* self,
                     Application* value)
{
#line 23 "/run/build/planner/src/MainWindow.vala"
	g_return_if_fail (self != NULL);
#line 23 "/run/build/planner/src/MainWindow.vala"
	if (main_window_get_app (self) != value) {
#line 23 "/run/build/planner/src/MainWindow.vala"
		self->priv->_app = value;
#line 23 "/run/build/planner/src/MainWindow.vala"
		g_object_notify_by_pspec ((GObject *) self, main_window_properties[MAIN_WINDOW_APP_PROPERTY]);
#line 549 "MainWindow.c"
	}
}


static gboolean
_main_window___lambda461_ (MainWindow* self)
{
	gboolean result = FALSE;
	GSettings* _tmp0_;
	ViewsMain* _tmp1_;
	gint _tmp2_;
	gint _tmp3_;
	GSettings* _tmp4_;
#line 67 "/run/build/planner/src/MainWindow.vala"
	_tmp0_ = application_settings;
#line 67 "/run/build/planner/src/MainWindow.vala"
	_tmp1_ = self->main_view;
#line 67 "/run/build/planner/src/MainWindow.vala"
	_tmp2_ = gtk_paned_get_position ((GtkPaned*) _tmp1_);
#line 67 "/run/build/planner/src/MainWindow.vala"
	_tmp3_ = _tmp2_;
#line 67 "/run/build/planner/src/MainWindow.vala"
	g_settings_set_int (_tmp0_, "project-sidebar-width", _tmp3_);
#line 69 "/run/build/planner/src/MainWindow.vala"
	_tmp4_ = application_settings;
#line 69 "/run/build/planner/src/MainWindow.vala"
	if (g_settings_get_boolean (_tmp4_, "run-background")) {
#line 70 "/run/build/planner/src/MainWindow.vala"
		result = gtk_widget_hide_on_delete ((GtkWidget*) self);
#line 70 "/run/build/planner/src/MainWindow.vala"
		return result;
#line 581 "MainWindow.c"
	} else {
#line 72 "/run/build/planner/src/MainWindow.vala"
		result = FALSE;
#line 72 "/run/build/planner/src/MainWindow.vala"
		return result;
#line 587 "MainWindow.c"
	}
}


static gboolean
__main_window___lambda461__gtk_widget_delete_event (GtkWidget* _sender,
                                                    GdkEventAny* event,
                                                    gpointer self)
{
	gboolean result;
	result = _main_window___lambda461_ ((MainWindow*) self);
#line 66 "/run/build/planner/src/MainWindow.vala"
	return result;
#line 601 "MainWindow.c"
}


static gboolean
_main_window___lambda462_ (MainWindow* self,
                           GdkEvent* event)
{
	gboolean result = FALSE;
	GdkEventType _tmp0_;
#line 76 "/run/build/planner/src/MainWindow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 77 "/run/build/planner/src/MainWindow.vala"
	_tmp0_ = event->type;
#line 77 "/run/build/planner/src/MainWindow.vala"
	if (_tmp0_ == GDK_DOUBLE_BUTTON_PRESS) {
#line 617 "MainWindow.c"
		WidgetsCalendarEvents* _tmp1_;
		WidgetsQuickFind* _tmp2_;
#line 78 "/run/build/planner/src/MainWindow.vala"
		_tmp1_ = self->events_widget;
#line 78 "/run/build/planner/src/MainWindow.vala"
		gtk_revealer_set_reveal_child ((GtkRevealer*) _tmp1_, FALSE);
#line 79 "/run/build/planner/src/MainWindow.vala"
		_tmp2_ = self->quick_find;
#line 79 "/run/build/planner/src/MainWindow.vala"
		gtk_revealer_set_reveal_child ((GtkRevealer*) _tmp2_, FALSE);
#line 628 "MainWindow.c"
	}
#line 82 "/run/build/planner/src/MainWindow.vala"
	result = FALSE;
#line 82 "/run/build/planner/src/MainWindow.vala"
	return result;
#line 634 "MainWindow.c"
}


static gboolean
__main_window___lambda462__gtk_widget_event (GtkWidget* _sender,
                                             GdkEvent* event,
                                             gpointer self)
{
	gboolean result;
	result = _main_window___lambda462_ ((MainWindow*) self, event);
#line 76 "/run/build/planner/src/MainWindow.vala"
	return result;
#line 647 "MainWindow.c"
}


static void
_main_window___lambda463_ (MainWindow* self,
                           const gchar* key)
{
#line 85 "/run/build/planner/src/MainWindow.vala"
	g_return_if_fail (key != NULL);
#line 86 "/run/build/planner/src/MainWindow.vala"
	if (g_strcmp0 (key, "badge-count") == 0) {
#line 87 "/run/build/planner/src/MainWindow.vala"
		main_window_check_badge_count (self);
#line 661 "MainWindow.c"
	}
}


static void
__main_window___lambda463__g_settings_changed (GSettings* _sender,
                                               const gchar* key,
                                               gpointer self)
{
#line 85 "/run/build/planner/src/MainWindow.vala"
	_main_window___lambda463_ ((MainWindow*) self, key);
#line 673 "MainWindow.c"
}


static void
_main_window___lambda464_ (MainWindow* self)
{
#line 92 "/run/build/planner/src/MainWindow.vala"
	main_window_check_badge_count (self);
#line 682 "MainWindow.c"
}


static void
__main_window___lambda464__services_database_update_indicators (ServicesDatabase* _sender,
                                                                gpointer self)
{
#line 91 "/run/build/planner/src/MainWindow.vala"
	_main_window___lambda464_ ((MainWindow*) self);
#line 692 "MainWindow.c"
}


static void
_main_window___lambda465_ (MainWindow* self)
{
	WidgetsCalendarEvents* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 96 "/run/build/planner/src/MainWindow.vala"
	_tmp0_ = self->events_widget;
#line 96 "/run/build/planner/src/MainWindow.vala"
	_tmp1_ = gtk_revealer_get_reveal_child ((GtkRevealer*) _tmp0_);
#line 96 "/run/build/planner/src/MainWindow.vala"
	_tmp2_ = _tmp1_;
#line 96 "/run/build/planner/src/MainWindow.vala"
	if (_tmp2_ == FALSE) {
#line 710 "MainWindow.c"
		WidgetsCalendarEvents* _tmp3_;
#line 97 "/run/build/planner/src/MainWindow.vala"
		_tmp3_ = self->events_widget;
#line 97 "/run/build/planner/src/MainWindow.vala"
		gtk_revealer_set_reveal_child ((GtkRevealer*) _tmp3_, TRUE);
#line 716 "MainWindow.c"
	} else {
		WidgetsCalendarEvents* _tmp4_;
#line 99 "/run/build/planner/src/MainWindow.vala"
		_tmp4_ = self->events_widget;
#line 99 "/run/build/planner/src/MainWindow.vala"
		gtk_revealer_set_reveal_child ((GtkRevealer*) _tmp4_, FALSE);
#line 723 "MainWindow.c"
	}
}


static void
__main_window___lambda465__services_signals_on_signal_show_events (ServicesSignals* _sender,
                                                                   gpointer self)
{
#line 95 "/run/build/planner/src/MainWindow.vala"
	_main_window___lambda465_ ((MainWindow*) self);
#line 734 "MainWindow.c"
}


static GObject *
main_window_constructor (GType type,
                         guint n_construct_properties,
                         GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	MainWindow * self;
	GtkStyleContext* _tmp0_;
	WidgetsHeaderBar* _tmp1_;
	WidgetsHeaderBar* _tmp2_;
	ViewsMain* _tmp3_;
	WidgetsQuickFind* _tmp4_;
	WidgetsCalendarEvents* _tmp5_;
	WidgetsCalendarEvents* _tmp6_;
	GtkOverlay* overlay = NULL;
	GtkOverlay* _tmp7_;
	GtkOverlay* _tmp8_;
	WidgetsQuickFind* _tmp9_;
	GtkOverlay* _tmp10_;
	WidgetsCalendarEvents* _tmp11_;
	GtkOverlay* _tmp12_;
	ViewsMain* _tmp13_;
	GtkEventBox* eventbox = NULL;
	GtkEventBox* _tmp14_;
	GtkEventBox* _tmp15_;
	GtkOverlay* _tmp16_;
	GtkEventBox* _tmp17_;
	GApplication* _tmp18_;
	const gchar* _tmp19_;
	const gchar* _tmp20_;
	gchar* _tmp21_;
	gchar* _tmp22_;
	UnityLauncherEntry* _tmp23_;
	GtkEventBox* _tmp24_;
	GSettings* _tmp25_;
	ServicesDatabase* _tmp26_;
	ServicesSignals* _tmp27_;
	ServicesDatabase* _tmp28_;
#line 41 "/run/build/planner/src/MainWindow.vala"
	parent_class = G_OBJECT_CLASS (main_window_parent_class);
#line 41 "/run/build/planner/src/MainWindow.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 41 "/run/build/planner/src/MainWindow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_MAIN_WINDOW, MainWindow);
#line 42 "/run/build/planner/src/MainWindow.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 42 "/run/build/planner/src/MainWindow.vala"
	gtk_style_context_add_class (_tmp0_, "rounded");
#line 44 "/run/build/planner/src/MainWindow.vala"
	_tmp1_ = widgets_header_bar_new ((GtkWindow*) self);
#line 44 "/run/build/planner/src/MainWindow.vala"
	g_object_ref_sink (_tmp1_);
#line 44 "/run/build/planner/src/MainWindow.vala"
	_g_object_unref0 (self->headerbar);
#line 44 "/run/build/planner/src/MainWindow.vala"
	self->headerbar = _tmp1_;
#line 45 "/run/build/planner/src/MainWindow.vala"
	_tmp2_ = self->headerbar;
#line 45 "/run/build/planner/src/MainWindow.vala"
	gtk_window_set_titlebar ((GtkWindow*) self, (GtkWidget*) _tmp2_);
#line 47 "/run/build/planner/src/MainWindow.vala"
	_tmp3_ = views_main_new (self);
#line 47 "/run/build/planner/src/MainWindow.vala"
	g_object_ref_sink (_tmp3_);
#line 47 "/run/build/planner/src/MainWindow.vala"
	_g_object_unref0 (self->main_view);
#line 47 "/run/build/planner/src/MainWindow.vala"
	self->main_view = _tmp3_;
#line 48 "/run/build/planner/src/MainWindow.vala"
	_tmp4_ = widgets_quick_find_new ();
#line 48 "/run/build/planner/src/MainWindow.vala"
	g_object_ref_sink (_tmp4_);
#line 48 "/run/build/planner/src/MainWindow.vala"
	_g_object_unref0 (self->quick_find);
#line 48 "/run/build/planner/src/MainWindow.vala"
	self->quick_find = _tmp4_;
#line 50 "/run/build/planner/src/MainWindow.vala"
	_tmp5_ = widgets_calendar_events_new ();
#line 50 "/run/build/planner/src/MainWindow.vala"
	g_object_ref_sink (_tmp5_);
#line 50 "/run/build/planner/src/MainWindow.vala"
	_g_object_unref0 (self->events_widget);
#line 50 "/run/build/planner/src/MainWindow.vala"
	self->events_widget = _tmp5_;
#line 51 "/run/build/planner/src/MainWindow.vala"
	_tmp6_ = self->events_widget;
#line 51 "/run/build/planner/src/MainWindow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp6_, GTK_ALIGN_END);
#line 53 "/run/build/planner/src/MainWindow.vala"
	_tmp7_ = (GtkOverlay*) gtk_overlay_new ();
#line 53 "/run/build/planner/src/MainWindow.vala"
	g_object_ref_sink (_tmp7_);
#line 53 "/run/build/planner/src/MainWindow.vala"
	overlay = _tmp7_;
#line 54 "/run/build/planner/src/MainWindow.vala"
	_tmp8_ = overlay;
#line 54 "/run/build/planner/src/MainWindow.vala"
	_tmp9_ = self->quick_find;
#line 54 "/run/build/planner/src/MainWindow.vala"
	gtk_overlay_add_overlay (_tmp8_, (GtkWidget*) _tmp9_);
#line 55 "/run/build/planner/src/MainWindow.vala"
	_tmp10_ = overlay;
#line 55 "/run/build/planner/src/MainWindow.vala"
	_tmp11_ = self->events_widget;
#line 55 "/run/build/planner/src/MainWindow.vala"
	gtk_overlay_add_overlay (_tmp10_, (GtkWidget*) _tmp11_);
#line 56 "/run/build/planner/src/MainWindow.vala"
	_tmp12_ = overlay;
#line 56 "/run/build/planner/src/MainWindow.vala"
	_tmp13_ = self->main_view;
#line 56 "/run/build/planner/src/MainWindow.vala"
	gtk_container_add ((GtkContainer*) _tmp12_, (GtkWidget*) _tmp13_);
#line 58 "/run/build/planner/src/MainWindow.vala"
	_tmp14_ = (GtkEventBox*) gtk_event_box_new ();
#line 58 "/run/build/planner/src/MainWindow.vala"
	g_object_ref_sink (_tmp14_);
#line 58 "/run/build/planner/src/MainWindow.vala"
	eventbox = _tmp14_;
#line 59 "/run/build/planner/src/MainWindow.vala"
	_tmp15_ = eventbox;
#line 59 "/run/build/planner/src/MainWindow.vala"
	_tmp16_ = overlay;
#line 59 "/run/build/planner/src/MainWindow.vala"
	gtk_container_add ((GtkContainer*) _tmp15_, (GtkWidget*) _tmp16_);
#line 61 "/run/build/planner/src/MainWindow.vala"
	_tmp17_ = eventbox;
#line 61 "/run/build/planner/src/MainWindow.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp17_);
#line 63 "/run/build/planner/src/MainWindow.vala"
	_tmp18_ = g_application_get_default ();
#line 63 "/run/build/planner/src/MainWindow.vala"
	_tmp19_ = g_application_get_application_id (_tmp18_);
#line 63 "/run/build/planner/src/MainWindow.vala"
	_tmp20_ = _tmp19_;
#line 63 "/run/build/planner/src/MainWindow.vala"
	_tmp21_ = g_strconcat (_tmp20_, ".desktop", NULL);
#line 63 "/run/build/planner/src/MainWindow.vala"
	_tmp22_ = _tmp21_;
#line 63 "/run/build/planner/src/MainWindow.vala"
	_tmp23_ = unity_launcher_entry_get_for_desktop_file (_tmp22_);
#line 63 "/run/build/planner/src/MainWindow.vala"
	_g_object_unref0 (self->launcher);
#line 63 "/run/build/planner/src/MainWindow.vala"
	self->launcher = _tmp23_;
#line 63 "/run/build/planner/src/MainWindow.vala"
	_g_free0 (_tmp22_);
#line 64 "/run/build/planner/src/MainWindow.vala"
	main_window_check_badge_count (self);
#line 66 "/run/build/planner/src/MainWindow.vala"
	g_signal_connect_object ((GtkWidget*) self, "delete-event", (GCallback) __main_window___lambda461__gtk_widget_delete_event, self, 0);
#line 76 "/run/build/planner/src/MainWindow.vala"
	_tmp24_ = eventbox;
#line 76 "/run/build/planner/src/MainWindow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp24_, "event", (GCallback) __main_window___lambda462__gtk_widget_event, self, 0);
#line 85 "/run/build/planner/src/MainWindow.vala"
	_tmp25_ = application_settings;
#line 85 "/run/build/planner/src/MainWindow.vala"
	g_signal_connect_object (_tmp25_, "changed", (GCallback) __main_window___lambda463__g_settings_changed, self, 0);
#line 91 "/run/build/planner/src/MainWindow.vala"
	_tmp26_ = application_database;
#line 91 "/run/build/planner/src/MainWindow.vala"
	g_signal_connect_object (_tmp26_, "update-indicators", (GCallback) __main_window___lambda464__services_database_update_indicators, self, 0);
#line 95 "/run/build/planner/src/MainWindow.vala"
	_tmp27_ = application_signals;
#line 95 "/run/build/planner/src/MainWindow.vala"
	g_signal_connect_object (_tmp27_, "on-signal-show-events", (GCallback) __main_window___lambda465__services_signals_on_signal_show_events, self, 0);
#line 103 "/run/build/planner/src/MainWindow.vala"
	_tmp28_ = application_database;
#line 103 "/run/build/planner/src/MainWindow.vala"
	g_signal_emit_by_name (_tmp28_, "update-indicators");
#line 41 "/run/build/planner/src/MainWindow.vala"
	_g_object_unref0 (eventbox);
#line 41 "/run/build/planner/src/MainWindow.vala"
	_g_object_unref0 (overlay);
#line 41 "/run/build/planner/src/MainWindow.vala"
	return obj;
#line 915 "MainWindow.c"
}


static void
main_window_class_init (MainWindowClass * klass)
{
#line 22 "/run/build/planner/src/MainWindow.vala"
	main_window_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/MainWindow.vala"
	g_type_class_add_private (klass, sizeof (MainWindowPrivate));
#line 22 "/run/build/planner/src/MainWindow.vala"
	((GtkWidgetClass *) klass)->configure_event = (gboolean (*) (GtkWidget *, GdkEventConfigure*)) main_window_real_configure_event;
#line 22 "/run/build/planner/src/MainWindow.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_main_window_get_property;
#line 22 "/run/build/planner/src/MainWindow.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_main_window_set_property;
#line 22 "/run/build/planner/src/MainWindow.vala"
	G_OBJECT_CLASS (klass)->constructor = main_window_constructor;
#line 22 "/run/build/planner/src/MainWindow.vala"
	G_OBJECT_CLASS (klass)->finalize = main_window_finalize;
#line 22 "/run/build/planner/src/MainWindow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), MAIN_WINDOW_APP_PROPERTY, main_window_properties[MAIN_WINDOW_APP_PROPERTY] = g_param_spec_object ("app", "app", "app", TYPE_APPLICATION, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 938 "MainWindow.c"
}


static void
main_window_instance_init (MainWindow * self)
{
#line 22 "/run/build/planner/src/MainWindow.vala"
	self->priv = MAIN_WINDOW_GET_PRIVATE (self);
#line 947 "MainWindow.c"
}


static void
main_window_finalize (GObject * obj)
{
	MainWindow * self;
#line 22 "/run/build/planner/src/MainWindow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_MAIN_WINDOW, MainWindow);
#line 24 "/run/build/planner/src/MainWindow.vala"
	_g_object_unref0 (self->headerbar);
#line 25 "/run/build/planner/src/MainWindow.vala"
	_g_object_unref0 (self->main_view);
#line 26 "/run/build/planner/src/MainWindow.vala"
	_g_object_unref0 (self->launcher);
#line 27 "/run/build/planner/src/MainWindow.vala"
	_g_object_unref0 (self->quick_find);
#line 28 "/run/build/planner/src/MainWindow.vala"
	_g_object_unref0 (self->events_widget);
#line 22 "/run/build/planner/src/MainWindow.vala"
	G_OBJECT_CLASS (main_window_parent_class)->finalize (obj);
#line 969 "MainWindow.c"
}


GType
main_window_get_type (void)
{
	static volatile gsize main_window_type_id__volatile = 0;
	if (g_once_init_enter (&main_window_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (MainWindowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) main_window_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (MainWindow), 0, (GInstanceInitFunc) main_window_instance_init, NULL };
		GType main_window_type_id;
		main_window_type_id = g_type_register_static (gtk_window_get_type (), "MainWindow", &g_define_type_info, 0);
		g_once_init_leave (&main_window_type_id__volatile, main_window_type_id);
	}
	return main_window_type_id__volatile;
}


static void
_vala_main_window_get_property (GObject * object,
                                guint property_id,
                                GValue * value,
                                GParamSpec * pspec)
{
	MainWindow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_MAIN_WINDOW, MainWindow);
#line 22 "/run/build/planner/src/MainWindow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/MainWindow.vala"
		case MAIN_WINDOW_APP_PROPERTY:
#line 22 "/run/build/planner/src/MainWindow.vala"
		g_value_set_object (value, main_window_get_app (self));
#line 22 "/run/build/planner/src/MainWindow.vala"
		break;
#line 1003 "MainWindow.c"
		default:
#line 22 "/run/build/planner/src/MainWindow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/MainWindow.vala"
		break;
#line 1009 "MainWindow.c"
	}
}


static void
_vala_main_window_set_property (GObject * object,
                                guint property_id,
                                const GValue * value,
                                GParamSpec * pspec)
{
	MainWindow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_MAIN_WINDOW, MainWindow);
#line 22 "/run/build/planner/src/MainWindow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/MainWindow.vala"
		case MAIN_WINDOW_APP_PROPERTY:
#line 22 "/run/build/planner/src/MainWindow.vala"
		main_window_set_app (self, g_value_get_object (value));
#line 22 "/run/build/planner/src/MainWindow.vala"
		break;
#line 1030 "MainWindow.c"
		default:
#line 22 "/run/build/planner/src/MainWindow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/MainWindow.vala"
		break;
#line 1036 "MainWindow.c"
	}
}



