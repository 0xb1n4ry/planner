/* unity-master-scope.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-master-scope.vala, do not modify */

/*
 * Copyright (C) 2013 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Michal Hruby <michal.hruby@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include "unity.h"
#include <stdlib.h>
#include <string.h>
#include <unity-protocol.h>
#include <gio/gio.h>
#include <dee.h>


#define UNITY_INTERNAL_UTILS_TYPE_ASYNC_ONCE (unity_internal_utils_async_once_get_type ())
#define UNITY_INTERNAL_UTILS_ASYNC_ONCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_UTILS_TYPE_ASYNC_ONCE, UnityInternalUtilsAsyncOnce))
#define UNITY_INTERNAL_UTILS_ASYNC_ONCE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_UTILS_TYPE_ASYNC_ONCE, UnityInternalUtilsAsyncOnceClass))
#define UNITY_INTERNAL_UTILS_IS_ASYNC_ONCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_UTILS_TYPE_ASYNC_ONCE))
#define UNITY_INTERNAL_UTILS_IS_ASYNC_ONCE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_UTILS_TYPE_ASYNC_ONCE))
#define UNITY_INTERNAL_UTILS_ASYNC_ONCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_UTILS_TYPE_ASYNC_ONCE, UnityInternalUtilsAsyncOnceClass))

typedef struct _UnityInternalUtilsAsyncOnce UnityInternalUtilsAsyncOnce;
typedef struct _UnityInternalUtilsAsyncOnceClass UnityInternalUtilsAsyncOnceClass;
enum  {
	UNITY_MASTER_SCOPE_0_PROPERTY,
	UNITY_MASTER_SCOPE_NO_CONTENT_HINT_PROPERTY,
	UNITY_MASTER_SCOPE_NUM_PROPERTIES
};
static GParamSpec* unity_master_scope_properties[UNITY_MASTER_SCOPE_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _unity_internal_utils_async_once_unref0(var) ((var == NULL) ? NULL : (var = (unity_internal_utils_async_once_unref (var), NULL)))
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _unity_protocol_scope_registry_unref0(var) ((var == NULL) ? NULL : (var = (unity_protocol_scope_registry_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _UnityMasterScopeWaitForRegistryData UnityMasterScopeWaitForRegistryData;
typedef struct _Block23Data Block23Data;
typedef struct _Block24Data Block24Data;
#define _unity_protocol_scope_registry_scope_registry_node_unref0(var) ((var == NULL) ? NULL : (var = (unity_protocol_scope_registry_scope_registry_node_unref (var), NULL)))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
typedef struct _UnityMasterScopeSearchData UnityMasterScopeSearchData;

struct _UnityMasterScopePrivate {
	gchar* _no_content_hint;
	UnityInternalUtilsAsyncOnce* registry_once;
};

struct _UnityMasterScopeWaitForRegistryData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityMasterScope* self;
	UnityInternalUtilsAsyncOnce* _tmp0_;
	UnityProtocolScopeRegistry* registry;
	UnityProtocolScopeRegistry* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	UnityProtocolScopeRegistry* _tmp4_;
	UnityProtocolScopeRegistry* _tmp5_;
	GError* err;
	GError* _tmp6_;
	const gchar* _tmp7_;
	UnityInternalUtilsAsyncOnce* _tmp8_;
	UnityProtocolScopeRegistry* _tmp9_;
	GError * _inner_error_;
};

struct _Block23Data {
	int _ref_count_;
	UnityMasterScope* self;
	guint total_searches;
	guint running_searches;
	guint timer_source_id;
	gpointer _async_data_;
};

struct _Block24Data {
	int _ref_count_;
	Block23Data * _data23_;
	UnityAggregatedScopeSearch* agg_scope_search;
};

struct _UnityMasterScopeSearchData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityMasterScope* self;
	UnityAggregatedScopeSearch* scope_search;
	Block23Data* _data23_;
	UnityInternalUtilsAsyncOnce* _tmp0_;
	UnityProtocolScopeRegistry* registry;
	UnityInternalUtilsAsyncOnce* _tmp1_;
	gconstpointer _tmp2_;
	UnityProtocolScopeRegistry* _tmp3_;
	UnityProtocolScopeRegistry* _tmp4_;
	GAsyncReadyCallback cb;
	void* cb_target;
	GDestroyNotify cb_target_destroy_notify;
	gchar** search_subscopes;
	gchar** _tmp5_;
	gint search_subscopes_length1;
	gint _search_subscopes_size_;
	GVariant* filter_variant;
	GHashTable* _tmp6_;
	GHashTable* _tmp7_;
	gconstpointer _tmp8_;
	GVariant* _tmp9_;
	gboolean _tmp10_;
	GVariant* _tmp11_;
	GVariant* _tmp12_;
	const gchar* _tmp13_;
	GVariant* _tmp14_;
	gchar** _tmp15_;
	gint _tmp15__length1;
	gulong sig_id;
	gulong _tmp19_;
	UnityProtocolScopeRegistry* _tmp20_;
	GSList* _tmp21_;
	GSList* _tmp22_;
	GSList* scope_node_collection;
	GSList* scope_node_it;
	UnityProtocolScopeRegistryScopeRegistryNode* _tmp23_;
	UnityProtocolScopeRegistryScopeRegistryNode* scope_node;
	gboolean _tmp24_;
	gchar** _tmp25_;
	gint _tmp25__length1;
	UnityProtocolScopeRegistryScopeRegistryNode* _tmp26_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp27_;
	const gchar* _tmp28_;
	gchar** _tmp29_;
	gint _tmp29__length1;
	UnityProtocolScopeRegistryScopeRegistryNode* _tmp30_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp31_;
	guint _tmp32_;
	guint _tmp33_;
	UnityProtocolScopeRegistryScopeRegistryNode* _tmp34_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp35_;
	const gchar* _tmp36_;
	const gchar* _tmp37_;
	const gchar* _tmp38_;
	UnitySearchType _tmp39_;
	UnitySearchType _tmp40_;
	GAsyncReadyCallback _tmp41_;
	void* _tmp41__target;
	UnityProtocolScopeRegistryScopeRegistryNode* _tmp42_;
	UnityProtocolScopeRegistryScopeMetadata* _tmp43_;
	const gchar* _tmp44_;
	guint _tmp45_;
	gulong _tmp46_;
	guint _tmp47_;
	guint _tmp48_;
	UnitySearchContext* _tmp49_;
	UnityResultSet* _tmp50_;
	gboolean _tmp51_;
	gboolean _tmp52_;
	DeeSerializableModel* _tmp53_;
	DeeSerializableModel* _tmp54_;
	UnitySearchContext* _tmp55_;
	const gchar* _tmp56_;
	gchar* _tmp57_;
	gchar* _tmp58_;
	const gchar* _tmp59_;
	const gchar* _tmp60_;
	GVariant* _tmp61_;
	GVariant* _tmp62_;
};


static gpointer unity_master_scope_parent_class = NULL;

gpointer unity_internal_utils_async_once_ref (gpointer instance);
void unity_internal_utils_async_once_unref (gpointer instance);
GParamSpec* unity_internal_utils_param_spec_async_once (const gchar* name,
                                                        const gchar* nick,
                                                        const gchar* blurb,
                                                        GType object_type,
                                                        GParamFlags flags);
void unity_internal_utils_value_set_async_once (GValue* value,
                                                gpointer v_object);
void unity_internal_utils_value_take_async_once (GValue* value,
                                                 gpointer v_object);
gpointer unity_internal_utils_value_get_async_once (const GValue* value);
GType unity_internal_utils_async_once_get_type (void) G_GNUC_CONST;
#define UNITY_MASTER_SCOPE_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_MASTER_SCOPE, UnityMasterScopePrivate))
#define UNITY_MASTER_SCOPE_COALESCE_TIME_MS 150
static gboolean unity_master_scope_metadata_matches (UnityMasterScope* self,
                                              UnityProtocolScopeRegistryScopeMetadata* metadata);
static void _g_free0_ (gpointer var);
static void unity_master_scope_wait_for_registry_data_free (gpointer _data);
static void unity_master_scope_wait_for_registry_async_ready_wrapper (GObject *source_object,
                                                               GAsyncResult *res,
                                                               void *user_data);
static void unity_master_scope_wait_for_registry (UnityMasterScope* self,
                                           GAsyncReadyCallback _callback_,
                                           gpointer _user_data_);
static void unity_master_scope_wait_for_registry_finish (UnityMasterScope* self,
                                                  GAsyncResult* _res_);
static gboolean unity_master_scope_wait_for_registry_co (UnityMasterScopeWaitForRegistryData* _data_);
void unity_internal_utils_async_once_enter (UnityInternalUtilsAsyncOnce* self,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
gboolean unity_internal_utils_async_once_enter_finish (UnityInternalUtilsAsyncOnce* self,
                                                       GAsyncResult* _res_);
static void unity_master_scope_wait_for_registry_ready (GObject* source_object,
                                                 GAsyncResult* _res_,
                                                 gpointer _user_data_);
void unity_internal_utils_async_once_leave (UnityInternalUtilsAsyncOnce* self,
                                            gconstpointer _result_);
static gint unity_master_scope_real_category_index_for_scope_id (UnityAggregatorScope* base,
                                                          const gchar* scope_id);
static void unity_master_scope_real_search_data_free (gpointer _data);
static void unity_master_scope_real_search_async_ready_wrapper (GObject *source_object,
                                                         GAsyncResult *res,
                                                         void *user_data);
static void unity_master_scope_real_search (UnityAggregatorScope* base,
                                     UnityAggregatedScopeSearch* scope_search,
                                     GAsyncReadyCallback _callback_,
                                     gpointer _user_data_);
static gboolean unity_master_scope_real_search_co (UnityMasterScopeSearchData* _data_);
static Block23Data* block23_data_ref (Block23Data* _data23_);
static void block23_data_unref (void * _userdata_);
gboolean unity_internal_utils_async_once_is_initialized (UnityInternalUtilsAsyncOnce* self);
static void unity_master_scope_search_ready (GObject* source_object,
                                      GAsyncResult* _res_,
                                      gpointer _user_data_);
gconstpointer unity_internal_utils_async_once_get_data (UnityInternalUtilsAsyncOnce* self);
static void __lambda49_ (Block23Data* _data23_,
                  GObject* obj,
                  GAsyncResult* res);
static void ___lambda49__gasync_ready_callback (GObject* source_object,
                                         GAsyncResult* res,
                                         gpointer self);
#define UNITY_INTERNAL_SEARCH_SUBSCOPES_HINT "subscopes-filter"
static gchar** _variant_get40 (GVariant* value,
                        int* result_length1);
static void __lambda50_ (Block23Data* _data23_,
                  UnityAggregatedScopeSearch* agg_scope_search,
                  const gchar* scope_id);
static Block24Data* block24_data_ref (Block24Data* _data24_);
static void block24_data_unref (void * _userdata_);
static gboolean ___lambda51_ (Block24Data* _data24_);
static gboolean ____lambda51__gsource_func (gpointer self);
static void ___lambda50__unity_aggregated_scope_search_transaction_complete (UnityAggregatedScopeSearch* _sender,
                                                                      const gchar* origin_scope_id,
                                                                      gpointer self);
static gboolean _vala_string_array_contains (gchar* * stack,
                                      int stack_length,
                                      gchar* needle);
#define UNITY_INTERNAL_SEARCH_NO_RESULTS_HINT "no-results-hint"
static GObject * unity_master_scope_constructor (GType type,
                                          guint n_construct_properties,
                                          GObjectConstructParam * construct_properties);
UnityInternalUtilsAsyncOnce* unity_internal_utils_async_once_new (GType g_type,
                                                                  GBoxedCopyFunc g_dup_func,
                                                                  GDestroyNotify g_destroy_func);
UnityInternalUtilsAsyncOnce* unity_internal_utils_async_once_construct (GType object_type,
                                                                        GType g_type,
                                                                        GBoxedCopyFunc g_dup_func,
                                                                        GDestroyNotify g_destroy_func);
static void unity_master_scope_finalize (GObject * obj);
static void _vala_unity_master_scope_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec);
static void _vala_unity_master_scope_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);


UnityMasterScope*
unity_master_scope_construct (GType object_type,
                              const gchar* dbus_path_,
                              const gchar* id_)
{
	UnityMasterScope * self = NULL;
	g_return_val_if_fail (dbus_path_ != NULL, NULL);
	g_return_val_if_fail (id_ != NULL, NULL);
	self = (UnityMasterScope*) g_object_new (object_type, "dbus-path", dbus_path_, "id", id_, "is-master", TRUE, "merge-mode", UNITY_AGGREGATOR_SCOPE_MERGE_MODE_CATEGORY_ID, "proxy-filter-hints", TRUE, "automatic-flushing", FALSE, NULL);
	return self;
}


UnityMasterScope*
unity_master_scope_new (const gchar* dbus_path_,
                        const gchar* id_)
{
	return unity_master_scope_construct (UNITY_TYPE_MASTER_SCOPE, dbus_path_, id_);
}


static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static gboolean
unity_master_scope_metadata_matches (UnityMasterScope* self,
                                     UnityProtocolScopeRegistryScopeMetadata* metadata)
{
	gboolean result = FALSE;
	GHashTable* dict = NULL;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	UnitySchema* _tmp3_;
	UnitySchema* _tmp4_;
	GList* _tmp5_;
	GHashTable* _tmp15_;
	UnityProtocolMetaDataSchemaInfo* _tmp16_;
	GHashTable* child_dict = NULL;
	UnityProtocolMetaDataSchemaInfo* _tmp17_;
	GHashTable* _tmp18_;
	const gchar* field_name = NULL;
	const gchar* schema = NULL;
	GHashTableIter iter = {0};
	GHashTable* _tmp19_;
	g_return_val_if_fail (self != NULL, FALSE);
	g_return_val_if_fail (metadata != NULL, FALSE);
	_tmp0_ = g_str_hash;
	_tmp1_ = g_str_equal;
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, _g_free0_);
	dict = _tmp2_;
	_tmp3_ = unity_deprecated_scope_base_get_schema ((UnityDeprecatedScopeBase*) self);
	_tmp4_ = _tmp3_;
	_tmp5_ = unity_schema_get_fields (_tmp4_);
	{
		GList* info_collection = NULL;
		GList* info_it = NULL;
		info_collection = _tmp5_;
		for (info_it = info_collection; info_it != NULL; info_it = info_it->next) {
			UnitySchemaFieldInfo* info = NULL;
			info = (UnitySchemaFieldInfo*) info_it->data;
			{
				UnitySchemaFieldInfo* _tmp6_;
				UnitySchemaFieldType _tmp7_;
				_tmp6_ = info;
				_tmp7_ = (*_tmp6_).type;
				if (_tmp7_ == UNITY_SCHEMA_FIELD_TYPE_REQUIRED) {
					GHashTable* _tmp8_;
					UnitySchemaFieldInfo* _tmp9_;
					const gchar* _tmp10_;
					gchar* _tmp11_;
					UnitySchemaFieldInfo* _tmp12_;
					const gchar* _tmp13_;
					gchar* _tmp14_;
					_tmp8_ = dict;
					_tmp9_ = info;
					_tmp10_ = (*_tmp9_).name;
					_tmp11_ = g_strdup (_tmp10_);
					_tmp12_ = info;
					_tmp13_ = (*_tmp12_).schema;
					_tmp14_ = g_strdup (_tmp13_);
					g_hash_table_insert (_tmp8_, _tmp11_, _tmp14_);
				}
			}
		}
		(info_collection == NULL) ? NULL : (info_collection = (g_list_free (info_collection), NULL));
	}
	_tmp15_ = dict;
	if (g_hash_table_size (_tmp15_) == ((guint) 0)) {
		result = TRUE;
		_g_hash_table_unref0 (dict);
		return result;
	}
	_tmp16_ = metadata->required_metadata;
	if (_tmp16_ == NULL) {
		result = FALSE;
		_g_hash_table_unref0 (dict);
		return result;
	}
	_tmp17_ = metadata->required_metadata;
	_tmp18_ = unity_protocol_meta_data_schema_info_as_hash_table (_tmp17_);
	child_dict = _tmp18_;
	_tmp19_ = dict;
	g_hash_table_iter_init (&iter, _tmp19_);
	while (TRUE) {
		gconstpointer _tmp20_ = NULL;
		gconstpointer _tmp21_ = NULL;
		gboolean _tmp22_;
		GHashTable* _tmp23_;
		const gchar* _tmp24_;
		gconstpointer _tmp25_;
		const gchar* _tmp26_;
		_tmp22_ = g_hash_table_iter_next (&iter, (gpointer*) (&_tmp20_), (gpointer*) (&_tmp21_));
		field_name = _tmp20_;
		schema = _tmp21_;
		if (!_tmp22_) {
			break;
		}
		_tmp23_ = child_dict;
		_tmp24_ = field_name;
		_tmp25_ = g_hash_table_lookup (_tmp23_, _tmp24_);
		_tmp26_ = schema;
		if (g_strcmp0 ((const gchar*) _tmp25_, _tmp26_) != 0) {
			result = FALSE;
			_g_hash_table_unref0 (child_dict);
			_g_hash_table_unref0 (dict);
			return result;
		}
	}
	result = TRUE;
	_g_hash_table_unref0 (child_dict);
	_g_hash_table_unref0 (dict);
	return result;
}


static void
unity_master_scope_wait_for_registry_data_free (gpointer _data)
{
	UnityMasterScopeWaitForRegistryData* _data_;
	_data_ = _data;
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityMasterScopeWaitForRegistryData, _data_);
}


static void
unity_master_scope_wait_for_registry_async_ready_wrapper (GObject *source_object,
                                                          GAsyncResult *res,
                                                          void *user_data)
{
	UnityMasterScopeWaitForRegistryData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
unity_master_scope_wait_for_registry (UnityMasterScope* self,
                                      GAsyncReadyCallback _callback_,
                                      gpointer _user_data_)
{
	UnityMasterScopeWaitForRegistryData* _data_;
	UnityMasterScope* _tmp0_;
	_data_ = g_slice_new0 (UnityMasterScopeWaitForRegistryData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, unity_master_scope_wait_for_registry_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_master_scope_wait_for_registry_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	unity_master_scope_wait_for_registry_co (_data_);
}


static void
unity_master_scope_wait_for_registry_finish (UnityMasterScope* self,
                                             GAsyncResult* _res_)
{
	UnityMasterScopeWaitForRegistryData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}


static void
unity_master_scope_wait_for_registry_ready (GObject* source_object,
                                            GAsyncResult* _res_,
                                            gpointer _user_data_)
{
	UnityMasterScopeWaitForRegistryData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_master_scope_wait_for_registry_co (_data_);
}


static gboolean
unity_master_scope_wait_for_registry_co (UnityMasterScopeWaitForRegistryData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		case 2:
		goto _state_2;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = _data_->self->priv->registry_once;
	_data_->_state_ = 1;
	unity_internal_utils_async_once_enter (_data_->_tmp0_, unity_master_scope_wait_for_registry_ready, _data_);
	return FALSE;
	_state_1:
	if (unity_internal_utils_async_once_enter_finish (_data_->_tmp0_, _data_->_res_)) {
		_data_->registry = NULL;
		{
			_data_->_tmp2_ = unity_deprecated_scope_base_get_id ((UnityDeprecatedScopeBase*) _data_->self);
			_data_->_tmp3_ = _data_->_tmp2_;
			_data_->_state_ = 2;
			unity_protocol_scope_registry_find_scopes_for_id (_data_->_tmp3_, NULL, unity_master_scope_wait_for_registry_ready, _data_);
			return FALSE;
			_state_2:
			_data_->_tmp4_ = unity_protocol_scope_registry_find_scopes_for_id_finish (_data_->_res_, &_data_->_inner_error_);
			_data_->_tmp1_ = _data_->_tmp4_;
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
				goto __catch30_g_error;
			}
			_data_->_tmp5_ = _data_->_tmp1_;
			_data_->_tmp1_ = NULL;
			_unity_protocol_scope_registry_unref0 (_data_->registry);
			_data_->registry = _data_->_tmp5_;
			_unity_protocol_scope_registry_unref0 (_data_->_tmp1_);
		}
		goto __finally30;
		__catch30_g_error:
		{
			_data_->err = _data_->_inner_error_;
			_data_->_inner_error_ = NULL;
			_data_->_tmp6_ = _data_->err;
			_data_->_tmp7_ = _data_->_tmp6_->message;
			g_warning ("unity-master-scope.vala:79: Unable to initialize ScopeRegistry: '%s'", _data_->_tmp7_);
			_g_error_free0 (_data_->err);
		}
		__finally30:
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			_unity_protocol_scope_registry_unref0 (_data_->registry);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
			g_clear_error (&_data_->_inner_error_);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
		_data_->_tmp8_ = _data_->self->priv->registry_once;
		_data_->_tmp9_ = _data_->registry;
		unity_internal_utils_async_once_leave (_data_->_tmp8_, _data_->_tmp9_);
		_unity_protocol_scope_registry_unref0 (_data_->registry);
	}
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


/**
   * Not really used for merge mode = DISPLAY_NAME
   */
static gint
unity_master_scope_real_category_index_for_scope_id (UnityAggregatorScope* base,
                                                     const gchar* scope_id)
{
	UnityMasterScope * self;
	gint result = 0;
	self = (UnityMasterScope*) base;
	g_return_val_if_fail (scope_id != NULL, 0);
	result = -1;
	return result;
}


static void
unity_master_scope_real_search_data_free (gpointer _data)
{
	UnityMasterScopeSearchData* _data_;
	_data_ = _data;
	_g_object_unref0 (_data_->scope_search);
	_g_object_unref0 (_data_->self);
	g_slice_free (UnityMasterScopeSearchData, _data_);
}


static void
unity_master_scope_real_search_async_ready_wrapper (GObject *source_object,
                                                    GAsyncResult *res,
                                                    void *user_data)
{
	UnityMasterScopeSearchData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static void
unity_master_scope_real_search (UnityAggregatorScope* base,
                                UnityAggregatedScopeSearch* scope_search,
                                GAsyncReadyCallback _callback_,
                                gpointer _user_data_)
{
	UnityMasterScope * self;
	UnityMasterScopeSearchData* _data_;
	UnityMasterScope* _tmp0_;
	UnityAggregatedScopeSearch* _tmp1_;
	self = (UnityMasterScope*) base;
	_data_ = g_slice_new0 (UnityMasterScopeSearchData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, unity_master_scope_real_search_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_master_scope_real_search_data_free);
	_tmp0_ = _g_object_ref0 (self);
	_data_->self = _tmp0_;
	_tmp1_ = _g_object_ref0 (scope_search);
	_g_object_unref0 (_data_->scope_search);
	_data_->scope_search = _tmp1_;
	unity_master_scope_real_search_co (_data_);
}


static void
unity_master_scope_real_search_finish (UnityAggregatorScope* base,
                                       GAsyncResult* _res_)
{
	UnityMasterScopeSearchData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}


static Block23Data*
block23_data_ref (Block23Data* _data23_)
{
	g_atomic_int_inc (&_data23_->_ref_count_);
	return _data23_;
}


static void
block23_data_unref (void * _userdata_)
{
	Block23Data* _data23_;
	_data23_ = (Block23Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data23_->_ref_count_)) {
		UnityMasterScope* self;
		self = _data23_->self;
		_g_object_unref0 (self);
		g_slice_free (Block23Data, _data23_);
	}
}


static void
unity_master_scope_search_ready (GObject* source_object,
                                 GAsyncResult* _res_,
                                 gpointer _user_data_)
{
	UnityMasterScopeSearchData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_master_scope_real_search_co (_data_);
}


static gpointer
_unity_protocol_scope_registry_ref0 (gpointer self)
{
	return self ? unity_protocol_scope_registry_ref (self) : NULL;
}


static void
__lambda49_ (Block23Data* _data23_,
             GObject* obj,
             GAsyncResult* res)
{
	UnityMasterScope* self;
	UnityAggregatedScopeSearch* agg_search = NULL;
	UnityAggregatedScopeSearch* _tmp0_;
	guint _tmp6_;
	guint _tmp7_;
	GError * _inner_error_ = NULL;
	self = _data23_->self;
	g_return_if_fail (res != NULL);
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (obj, UNITY_TYPE_AGGREGATED_SCOPE_SEARCH) ? ((UnityAggregatedScopeSearch*) obj) : NULL);
	agg_search = _tmp0_;
	{
		GHashTable* _tmp1_;
		GHashTable* _tmp2_;
		_tmp1_ = unity_aggregated_scope_search_search_scope_finish (agg_search, res, &_inner_error_);
		_tmp2_ = _tmp1_;
		_g_hash_table_unref0 (_tmp2_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch31_g_error;
		}
	}
	goto __finally31;
	__catch31_g_error:
	{
		GError* err = NULL;
		GError* _tmp3_;
		err = _inner_error_;
		_inner_error_ = NULL;
		_tmp3_ = err;
		if (!g_error_matches (_tmp3_, G_IO_ERROR, G_IO_ERROR_CANCELLED)) {
			GError* _tmp4_;
			const gchar* _tmp5_;
			_tmp4_ = err;
			_tmp5_ = _tmp4_->message;
			g_warning ("unity-master-scope.vala:114: Unable to search scope: '%s'", _tmp5_);
		}
		_g_error_free0 (err);
	}
	__finally31:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		_g_object_unref0 (agg_search);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	_tmp6_ = _data23_->running_searches;
	_data23_->running_searches = _tmp6_ - 1;
	_tmp7_ = _data23_->running_searches;
	if (_tmp7_ == ((guint) 0)) {
		unity_master_scope_real_search_co (_data23_->_async_data_);
	}
	_g_object_unref0 (agg_search);
}


static void
___lambda49__gasync_ready_callback (GObject* source_object,
                                    GAsyncResult* res,
                                    gpointer self)
{
	__lambda49_ (self, source_object, res);
}


static gpointer
_g_variant_ref0 (gpointer self)
{
	return self ? g_variant_ref (self) : NULL;
}


static gchar**
_variant_get40 (GVariant* value,
                int* result_length1)
{
	gchar** _tmp16_;
	int _tmp16__length;
	int _tmp16__size;
	int _tmp16__length1;
	GVariantIter _tmp17_;
	GVariant* _tmp18_;
	_tmp16_ = g_new (gchar*, 5);
	_tmp16__length = 0;
	_tmp16__size = 4;
	_tmp16__length1 = 0;
	g_variant_iter_init (&_tmp17_, value);
	for (; (_tmp18_ = g_variant_iter_next_value (&_tmp17_)) != NULL; _tmp16__length1++) {
		if (_tmp16__size == _tmp16__length) {
			_tmp16__size = 2 * _tmp16__size;
			_tmp16_ = g_renew (gchar*, _tmp16_, _tmp16__size + 1);
		}
		_tmp16_[_tmp16__length++] = g_variant_dup_string (_tmp18_, NULL);
		g_variant_unref (_tmp18_);
	}
	*result_length1 = _tmp16__length1;
	_tmp16_[_tmp16__length] = NULL;
	return _tmp16_;
}


static Block24Data*
block24_data_ref (Block24Data* _data24_)
{
	g_atomic_int_inc (&_data24_->_ref_count_);
	return _data24_;
}


static void
block24_data_unref (void * _userdata_)
{
	Block24Data* _data24_;
	_data24_ = (Block24Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data24_->_ref_count_)) {
		UnityMasterScope* self;
		self = _data24_->_data23_->self;
		_g_object_unref0 (_data24_->agg_scope_search);
		block23_data_unref (_data24_->_data23_);
		_data24_->_data23_ = NULL;
		g_slice_free (Block24Data, _data24_);
	}
}


static gboolean
___lambda51_ (Block24Data* _data24_)
{
	Block23Data* _data23_;
	UnityMasterScope* self;
	gboolean result = FALSE;
	UnitySearchContext* _tmp0_;
	UnityCancellable* _tmp1_;
	_data23_ = _data24_->_data23_;
	self = _data23_->self;
	_tmp0_ = ((UnityScopeSearchBase*) _data24_->agg_scope_search)->search_context;
	_tmp1_ = (*_tmp0_).cancellable;
	if (!unity_cancellable_is_cancelled (_tmp1_)) {
		UnitySearchContext* _tmp2_;
		UnityResultSet* _tmp3_;
		_tmp2_ = ((UnityScopeSearchBase*) _data24_->agg_scope_search)->search_context;
		_tmp3_ = (*_tmp2_).result_set;
		unity_result_set_flush (_tmp3_);
	}
	_data23_->timer_source_id = (guint) 0;
	result = FALSE;
	return result;
}


static gboolean
____lambda51__gsource_func (gpointer self)
{
	gboolean result;
	result = ___lambda51_ (self);
	return result;
}


static void
__lambda50_ (Block23Data* _data23_,
             UnityAggregatedScopeSearch* agg_scope_search,
             const gchar* scope_id)
{
	UnityMasterScope* self;
	Block24Data* _data24_;
	UnityAggregatedScopeSearch* _tmp0_;
	guint _tmp1_;
	self = _data23_->self;
	g_return_if_fail (agg_scope_search != NULL);
	g_return_if_fail (scope_id != NULL);
	_data24_ = g_slice_new0 (Block24Data);
	_data24_->_ref_count_ = 1;
	_data24_->_data23_ = block23_data_ref (_data23_);
	_tmp0_ = _g_object_ref0 (agg_scope_search);
	_g_object_unref0 (_data24_->agg_scope_search);
	_data24_->agg_scope_search = _tmp0_;
	_tmp1_ = _data23_->total_searches;
	if (_tmp1_ <= ((guint) 1)) {
		UnitySearchContext* _tmp2_;
		UnityResultSet* _tmp3_;
		_tmp2_ = ((UnityScopeSearchBase*) _data24_->agg_scope_search)->search_context;
		_tmp3_ = (*_tmp2_).result_set;
		unity_result_set_flush (_tmp3_);
	} else {
		guint _tmp4_;
		_tmp4_ = _data23_->timer_source_id;
		if (_tmp4_ != ((guint) 0)) {
			block24_data_unref (_data24_);
			_data24_ = NULL;
			return;
		}
		_data23_->timer_source_id = g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) UNITY_MASTER_SCOPE_COALESCE_TIME_MS, ____lambda51__gsource_func, block24_data_ref (_data24_), block24_data_unref);
	}
	block24_data_unref (_data24_);
	_data24_ = NULL;
}


static void
___lambda50__unity_aggregated_scope_search_transaction_complete (UnityAggregatedScopeSearch* _sender,
                                                                 const gchar* origin_scope_id,
                                                                 gpointer self)
{
	__lambda50_ (self, _sender, origin_scope_id);
}


static gpointer
_unity_protocol_scope_registry_scope_registry_node_ref0 (gpointer self)
{
	return self ? unity_protocol_scope_registry_scope_registry_node_ref (self) : NULL;
}


static gboolean
_vala_string_array_contains (gchar* * stack,
                             int stack_length,
                             gchar* needle)
{
	int i;
	for (i = 0; i < stack_length; i++) {
		if (g_strcmp0 (stack[i], needle) == 0) {
			return TRUE;
		}
	}
	return FALSE;
}


static gchar*
string_strip (const gchar* self)
{
	gchar* result = NULL;
	gchar* _result_ = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = g_strdup (self);
	_result_ = _tmp0_;
	_tmp1_ = _result_;
	g_strstrip (_tmp1_);
	result = _result_;
	return result;
}


static gboolean
unity_master_scope_real_search_co (UnityMasterScopeSearchData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		case 2:
		goto _state_2;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_data23_ = g_slice_new0 (Block23Data);
	_data_->_data23_->_ref_count_ = 1;
	_data_->_data23_->self = g_object_ref (_data_->self);
	_data_->_data23_->_async_data_ = _data_;
	_data_->_tmp0_ = _data_->self->priv->registry_once;
	if (!unity_internal_utils_async_once_is_initialized (_data_->_tmp0_)) {
		_data_->_state_ = 1;
		unity_master_scope_wait_for_registry (_data_->self, unity_master_scope_search_ready, _data_);
		return FALSE;
		_state_1:
		unity_master_scope_wait_for_registry_finish (_data_->self, _data_->_res_);
	}
	_data_->_tmp1_ = _data_->self->priv->registry_once;
	_data_->_tmp2_ = unity_internal_utils_async_once_get_data (_data_->_tmp1_);
	_data_->_tmp3_ = _unity_protocol_scope_registry_ref0 ((UnityProtocolScopeRegistry*) _data_->_tmp2_);
	_data_->registry = _data_->_tmp3_;
	_data_->_tmp4_ = _data_->registry;
	if (_data_->_tmp4_ == NULL) {
		_unity_protocol_scope_registry_unref0 (_data_->registry);
		block23_data_unref (_data_->_data23_);
		_data_->_data23_ = NULL;
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
		if (_data_->_state_ != 0) {
			while (_data_->_task_complete_ != TRUE) {
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
			}
		}
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_data23_->total_searches = (guint) 0;
	_data_->_data23_->running_searches = (guint) 0;
	_data_->_data23_->timer_source_id = (guint) 0;
	_data_->cb = ___lambda49__gasync_ready_callback;
	_data_->cb_target = block23_data_ref (_data_->_data23_);
	_data_->cb_target_destroy_notify = block23_data_unref;
	_data_->_tmp5_ = g_new0 (gchar*, 0 + 1);
	_data_->search_subscopes = _data_->_tmp5_;
	_data_->search_subscopes_length1 = 0;
	_data_->_search_subscopes_size_ = _data_->search_subscopes_length1;
	_data_->_tmp6_ = unity_deprecated_scope_search_get_hints ((UnityDeprecatedScopeSearch*) _data_->scope_search);
	_data_->_tmp7_ = _data_->_tmp6_;
	_data_->_tmp8_ = g_hash_table_lookup (_data_->_tmp7_, UNITY_INTERNAL_SEARCH_SUBSCOPES_HINT);
	_data_->_tmp9_ = _g_variant_ref0 ((GVariant*) _data_->_tmp8_);
	_data_->filter_variant = _data_->_tmp9_;
	_data_->_tmp11_ = _data_->filter_variant;
	if (_data_->_tmp11_ != NULL) {
		_data_->_tmp12_ = _data_->filter_variant;
		_data_->_tmp13_ = g_variant_get_type_string (_data_->_tmp12_);
		_data_->_tmp10_ = g_strcmp0 (_data_->_tmp13_, "as") == 0;
	} else {
		_data_->_tmp10_ = FALSE;
	}
	if (_data_->_tmp10_) {
		_data_->_tmp14_ = _data_->filter_variant;
		_data_->_tmp15_ = NULL;
		_data_->_tmp15__length1 = 0;
		_data_->_tmp15_ = _variant_get40 (_data_->_tmp14_, &_data_->_tmp15__length1);
		_data_->search_subscopes = (_vala_array_free (_data_->search_subscopes, _data_->search_subscopes_length1, (GDestroyNotify) g_free), NULL);
		_data_->search_subscopes = _data_->_tmp15_;
		_data_->search_subscopes_length1 = _data_->_tmp15__length1;
		_data_->_search_subscopes_size_ = _data_->search_subscopes_length1;
	}
	_data_->_tmp19_ = g_signal_connect_data (_data_->scope_search, "transaction-complete", (GCallback) ___lambda50__unity_aggregated_scope_search_transaction_complete, block23_data_ref (_data_->_data23_), (GClosureNotify) block23_data_unref, 0);
	_data_->sig_id = _data_->_tmp19_;
	_data_->_tmp20_ = _data_->registry;
	_data_->_tmp21_ = unity_protocol_scope_registry_get_scopes (_data_->_tmp20_);
	_data_->_tmp22_ = _data_->_tmp21_;
	{
		_data_->scope_node_collection = _data_->_tmp22_;
		for (_data_->scope_node_it = _data_->scope_node_collection; _data_->scope_node_it != NULL; _data_->scope_node_it = _data_->scope_node_it->next) {
			_data_->_tmp23_ = _unity_protocol_scope_registry_scope_registry_node_ref0 ((UnityProtocolScopeRegistryScopeRegistryNode*) _data_->scope_node_it->data);
			_data_->scope_node = _data_->_tmp23_;
			{
				_data_->_tmp25_ = _data_->search_subscopes;
				_data_->_tmp25__length1 = _data_->search_subscopes_length1;
				if (_data_->_tmp25__length1 > 0) {
					_data_->_tmp26_ = _data_->scope_node;
					_data_->_tmp27_ = _data_->_tmp26_->scope_info;
					_data_->_tmp28_ = _data_->_tmp27_->id;
					_data_->_tmp29_ = _data_->search_subscopes;
					_data_->_tmp29__length1 = _data_->search_subscopes_length1;
					_data_->_tmp24_ = !_vala_string_array_contains (_data_->_tmp29_, _data_->_tmp29__length1, _data_->_tmp28_);
				} else {
					_data_->_tmp24_ = FALSE;
				}
				if (_data_->_tmp24_) {
					_unity_protocol_scope_registry_scope_registry_node_unref0 (_data_->scope_node);
					continue;
				}
				_data_->_tmp30_ = _data_->scope_node;
				_data_->_tmp31_ = _data_->_tmp30_->scope_info;
				if (unity_master_scope_metadata_matches (_data_->self, _data_->_tmp31_)) {
					_data_->_tmp32_ = _data_->_data23_->total_searches;
					_data_->_data23_->total_searches = _data_->_tmp32_ + 1;
					_data_->_tmp33_ = _data_->_data23_->running_searches;
					_data_->_data23_->running_searches = _data_->_tmp33_ + 1;
					_data_->_tmp34_ = _data_->scope_node;
					_data_->_tmp35_ = _data_->_tmp34_->scope_info;
					_data_->_tmp36_ = _data_->_tmp35_->id;
					_data_->_tmp37_ = unity_deprecated_scope_search_get_search_string ((UnityDeprecatedScopeSearch*) _data_->scope_search);
					_data_->_tmp38_ = _data_->_tmp37_;
					_data_->_tmp39_ = unity_deprecated_scope_search_get_search_type ((UnityDeprecatedScopeSearch*) _data_->scope_search);
					_data_->_tmp40_ = _data_->_tmp39_;
					_data_->_tmp41_ = _data_->cb;
					_data_->_tmp41__target = _data_->cb_target;
					unity_aggregated_scope_search_search_scope (_data_->scope_search, _data_->_tmp36_, _data_->_tmp38_, _data_->_tmp40_, NULL, _data_->_tmp41_, _data_->_tmp41__target);
				} else {
					_data_->_tmp42_ = _data_->scope_node;
					_data_->_tmp43_ = _data_->_tmp42_->scope_info;
					_data_->_tmp44_ = _data_->_tmp43_->id;
					g_warning ("unity-master-scope.vala:168: Metadata for '%s' doesn't match the maste" \
"r scope", _data_->_tmp44_);
				}
				_unity_protocol_scope_registry_scope_registry_node_unref0 (_data_->scope_node);
			}
		}
	}
	_data_->_tmp45_ = _data_->_data23_->running_searches;
	if (_data_->_tmp45_ > ((guint) 0)) {
		_data_->_state_ = 2;
		return FALSE;
		_state_2:
		;
	}
	_data_->_tmp46_ = _data_->sig_id;
	g_signal_handler_disconnect (_data_->scope_search, _data_->_tmp46_);
	_data_->_tmp47_ = _data_->_data23_->timer_source_id;
	if (_data_->_tmp47_ != ((guint) 0)) {
		_data_->_tmp48_ = _data_->_data23_->timer_source_id;
		g_source_remove (_data_->_tmp48_);
		_data_->_tmp49_ = ((UnityScopeSearchBase*) _data_->scope_search)->search_context;
		_data_->_tmp50_ = (*_data_->_tmp49_).result_set;
		unity_result_set_flush (_data_->_tmp50_);
	}
	_data_->_tmp53_ = unity_deprecated_scope_search_get_results_model ((UnityDeprecatedScopeSearch*) _data_->scope_search);
	_data_->_tmp54_ = _data_->_tmp53_;
	if (dee_model_get_n_rows ((DeeModel*) _data_->_tmp54_) == ((guint) 0)) {
		_data_->_tmp55_ = ((UnityScopeSearchBase*) _data_->scope_search)->search_context;
		_data_->_tmp56_ = (*_data_->_tmp55_).search_query;
		_data_->_tmp57_ = string_strip (_data_->_tmp56_);
		_data_->_tmp58_ = _data_->_tmp57_;
		_data_->_tmp52_ = g_strcmp0 (_data_->_tmp58_, "") == 0;
		_g_free0 (_data_->_tmp58_);
	} else {
		_data_->_tmp52_ = FALSE;
	}
	if (_data_->_tmp52_) {
		_data_->_tmp59_ = _data_->self->priv->_no_content_hint;
		_data_->_tmp51_ = _data_->_tmp59_ != NULL;
	} else {
		_data_->_tmp51_ = FALSE;
	}
	if (_data_->_tmp51_) {
		_data_->_tmp60_ = _data_->self->priv->_no_content_hint;
		_data_->_tmp61_ = g_variant_new_string (_data_->_tmp60_);
		g_variant_ref_sink (_data_->_tmp61_);
		_data_->_tmp62_ = _data_->_tmp61_;
		unity_deprecated_scope_search_set_reply_hint ((UnityDeprecatedScopeSearch*) _data_->scope_search, UNITY_INTERNAL_SEARCH_NO_RESULTS_HINT, _data_->_tmp62_);
		_g_variant_unref0 (_data_->_tmp62_);
	}
	_g_variant_unref0 (_data_->filter_variant);
	_data_->search_subscopes = (_vala_array_free (_data_->search_subscopes, _data_->search_subscopes_length1, (GDestroyNotify) g_free), NULL);
	(_data_->cb_target_destroy_notify == NULL) ? NULL : (_data_->cb_target_destroy_notify (_data_->cb_target), NULL);
	_data_->cb = NULL;
	_data_->cb_target = NULL;
	_data_->cb_target_destroy_notify = NULL;
	_unity_protocol_scope_registry_unref0 (_data_->registry);
	block23_data_unref (_data_->_data23_);
	_data_->_data23_ = NULL;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


const gchar*
unity_master_scope_get_no_content_hint (UnityMasterScope* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_no_content_hint;
	result = _tmp0_;
	return result;
}


void
unity_master_scope_set_no_content_hint (UnityMasterScope* self,
                                        const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_master_scope_get_no_content_hint (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_no_content_hint);
		self->priv->_no_content_hint = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_master_scope_properties[UNITY_MASTER_SCOPE_NO_CONTENT_HINT_PROPERTY]);
	}
}


static GObject *
unity_master_scope_constructor (GType type,
                                guint n_construct_properties,
                                GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	UnityMasterScope * self;
	UnityInternalUtilsAsyncOnce* _tmp0_;
	parent_class = G_OBJECT_CLASS (unity_master_scope_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_MASTER_SCOPE, UnityMasterScope);
	_tmp0_ = unity_internal_utils_async_once_new (UNITY_PROTOCOL_TYPE_SCOPE_REGISTRY, (GBoxedCopyFunc) unity_protocol_scope_registry_ref, (GDestroyNotify) unity_protocol_scope_registry_unref);
	_unity_internal_utils_async_once_unref0 (self->priv->registry_once);
	self->priv->registry_once = _tmp0_;
	return obj;
}


static void
unity_master_scope_class_init (UnityMasterScopeClass * klass)
{
	unity_master_scope_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityMasterScopePrivate));
	((UnityAggregatorScopeClass *) klass)->category_index_for_scope_id = (gint (*) (UnityAggregatorScope *, const gchar*)) unity_master_scope_real_category_index_for_scope_id;
	((UnityAggregatorScopeClass *) klass)->search = (void (*) (UnityAggregatorScope *, UnityAggregatedScopeSearch*, GAsyncReadyCallback, gpointer)) unity_master_scope_real_search;
	((UnityAggregatorScopeClass *) klass)->search_finish = (void (*) (UnityAggregatorScope *, GAsyncResult*)) unity_master_scope_real_search_finish;
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_master_scope_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_master_scope_set_property;
	G_OBJECT_CLASS (klass)->constructor = unity_master_scope_constructor;
	G_OBJECT_CLASS (klass)->finalize = unity_master_scope_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_MASTER_SCOPE_NO_CONTENT_HINT_PROPERTY, unity_master_scope_properties[UNITY_MASTER_SCOPE_NO_CONTENT_HINT_PROPERTY] = g_param_spec_string ("no-content-hint", "no-content-hint", "no-content-hint", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


static void
unity_master_scope_instance_init (UnityMasterScope * self)
{
	self->priv = UNITY_MASTER_SCOPE_GET_PRIVATE (self);
}


static void
unity_master_scope_finalize (GObject * obj)
{
	UnityMasterScope * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_MASTER_SCOPE, UnityMasterScope);
	_g_free0 (self->priv->_no_content_hint);
	_unity_internal_utils_async_once_unref0 (self->priv->registry_once);
	G_OBJECT_CLASS (unity_master_scope_parent_class)->finalize (obj);
}


GType
unity_master_scope_get_type (void)
{
	static volatile gsize unity_master_scope_type_id__volatile = 0;
	if (g_once_init_enter (&unity_master_scope_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityMasterScopeClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_master_scope_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityMasterScope), 0, (GInstanceInitFunc) unity_master_scope_instance_init, NULL };
		GType unity_master_scope_type_id;
		unity_master_scope_type_id = g_type_register_static (UNITY_TYPE_AGGREGATOR_SCOPE, "UnityMasterScope", &g_define_type_info, 0);
		g_once_init_leave (&unity_master_scope_type_id__volatile, unity_master_scope_type_id);
	}
	return unity_master_scope_type_id__volatile;
}


static void
_vala_unity_master_scope_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec)
{
	UnityMasterScope * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_MASTER_SCOPE, UnityMasterScope);
	switch (property_id) {
		case UNITY_MASTER_SCOPE_NO_CONTENT_HINT_PROPERTY:
		g_value_set_string (value, unity_master_scope_get_no_content_hint (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_master_scope_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec)
{
	UnityMasterScope * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_MASTER_SCOPE, UnityMasterScope);
	switch (property_id) {
		case UNITY_MASTER_SCOPE_NO_CONTENT_HINT_PROPERTY:
		unity_master_scope_set_no_content_hint (self, g_value_get_string (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}



