/* search-view.c generated by valac 0.40.11, the Vala compiler
 * generated from search-view.vala, do not modify */

/*
 * Copyright (C) 2011, 2015 Collabora Ltd.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Travis Reitter <travis.reitter@collabora.co.uk>
 *       Philip Withnall <philip.withnall@collabora.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <gee.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>


#define FOLKS_TYPE_SEARCH_VIEW (folks_search_view_get_type ())
#define FOLKS_SEARCH_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_SEARCH_VIEW, FolksSearchView))
#define FOLKS_SEARCH_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_SEARCH_VIEW, FolksSearchViewClass))
#define FOLKS_IS_SEARCH_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_SEARCH_VIEW))
#define FOLKS_IS_SEARCH_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_SEARCH_VIEW))
#define FOLKS_SEARCH_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_SEARCH_VIEW, FolksSearchViewClass))

typedef struct _FolksSearchView FolksSearchView;
typedef struct _FolksSearchViewClass FolksSearchViewClass;
typedef struct _FolksSearchViewPrivate FolksSearchViewPrivate;

#define FOLKS_TYPE_INDIVIDUAL_AGGREGATOR (folks_individual_aggregator_get_type ())
#define FOLKS_INDIVIDUAL_AGGREGATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, FolksIndividualAggregator))
#define FOLKS_INDIVIDUAL_AGGREGATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, FolksIndividualAggregatorClass))
#define FOLKS_IS_INDIVIDUAL_AGGREGATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_INDIVIDUAL_AGGREGATOR))
#define FOLKS_IS_INDIVIDUAL_AGGREGATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_INDIVIDUAL_AGGREGATOR))
#define FOLKS_INDIVIDUAL_AGGREGATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, FolksIndividualAggregatorClass))

typedef struct _FolksIndividualAggregator FolksIndividualAggregator;
typedef struct _FolksIndividualAggregatorClass FolksIndividualAggregatorClass;

#define FOLKS_TYPE_QUERY (folks_query_get_type ())
#define FOLKS_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_QUERY, FolksQuery))
#define FOLKS_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_QUERY, FolksQueryClass))
#define FOLKS_IS_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_QUERY))
#define FOLKS_IS_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_QUERY))
#define FOLKS_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_QUERY, FolksQueryClass))

typedef struct _FolksQuery FolksQuery;
typedef struct _FolksQueryClass FolksQueryClass;

#define FOLKS_TYPE_INDIVIDUAL (folks_individual_get_type ())
#define FOLKS_INDIVIDUAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_INDIVIDUAL, FolksIndividual))
#define FOLKS_INDIVIDUAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_INDIVIDUAL, FolksIndividualClass))
#define FOLKS_IS_INDIVIDUAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_INDIVIDUAL))
#define FOLKS_IS_INDIVIDUAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_INDIVIDUAL))
#define FOLKS_INDIVIDUAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_INDIVIDUAL, FolksIndividualClass))

typedef struct _FolksIndividual FolksIndividual;
typedef struct _FolksIndividualClass FolksIndividualClass;
enum  {
	FOLKS_SEARCH_VIEW_0_PROPERTY,
	FOLKS_SEARCH_VIEW_AGGREGATOR_PROPERTY,
	FOLKS_SEARCH_VIEW_QUERY_PROPERTY,
	FOLKS_SEARCH_VIEW_INDIVIDUALS_PROPERTY,
	FOLKS_SEARCH_VIEW_IS_PREPARED_PROPERTY,
	FOLKS_SEARCH_VIEW_IS_QUIESCENT_PROPERTY,
	FOLKS_SEARCH_VIEW_NUM_PROPERTIES
};
static GParamSpec* folks_search_view_properties[FOLKS_SEARCH_VIEW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _FolksSearchViewPrepareData FolksSearchViewPrepareData;
typedef struct _FolksSearchViewUnprepareData FolksSearchViewUnprepareData;
typedef struct _FolksSearchViewRefreshData FolksSearchViewRefreshData;
#define _g_free0(var) (var = (g_free (var), NULL))
enum  {
	FOLKS_SEARCH_VIEW_INDIVIDUALS_CHANGED_DETAILED_SIGNAL,
	FOLKS_SEARCH_VIEW_NUM_SIGNALS
};
static guint folks_search_view_signals[FOLKS_SEARCH_VIEW_NUM_SIGNALS] = {0};

struct _FolksSearchView {
	GObject parent_instance;
	FolksSearchViewPrivate * priv;
};

struct _FolksSearchViewClass {
	GObjectClass parent_class;
};

struct _FolksSearchViewPrivate {
	gboolean _prepare_pending;
	FolksIndividualAggregator* _aggregator;
	FolksQuery* _query;
	GeeSortedSet* _individuals;
	GeeSortedSet* _individuals_ro;
	gboolean _is_prepared;
};

struct _FolksSearchViewPrepareData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksSearchView* self;
	gboolean _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	FolksIndividualAggregator* _tmp3_;
	FolksIndividualAggregator* _tmp4_;
	GError* e;
	FolksIndividualAggregator* _tmp5_;
	guint _tmp6_;
	GError* _tmp7_;
	GError* _tmp8_;
	GError * _inner_error_;
};

struct _FolksSearchViewUnprepareData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksSearchView* self;
	gboolean _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
};

struct _FolksSearchViewRefreshData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksSearchView* self;
	gboolean _tmp0_;
};


static gpointer folks_search_view_parent_class = NULL;

GType folks_search_view_get_type (void) G_GNUC_CONST;
GType folks_individual_aggregator_get_type (void) G_GNUC_CONST;
GType folks_query_get_type (void) G_GNUC_CONST;
GType folks_individual_get_type (void) G_GNUC_CONST;
#define FOLKS_SEARCH_VIEW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_TYPE_SEARCH_VIEW, FolksSearchViewPrivate))
static void _folks_search_view_aggregator_is_quiescent_cb (FolksSearchView* self);
static void __folks_search_view_aggregator_is_quiescent_cb_g_object_notify (GObject* _sender,
                                                                     GParamSpec* pspec,
                                                                     gpointer self);
FolksSearchView* folks_search_view_new (FolksIndividualAggregator* aggregator,
                                        FolksQuery* query);
FolksSearchView* folks_search_view_construct (GType object_type,
                                              FolksIndividualAggregator* aggregator,
                                              FolksQuery* query);
static GeeSortedSet* _folks_search_view_create_empty_sorted_set (FolksSearchView* self);
static void folks_search_view_prepare_data_free (gpointer _data);
static void folks_search_view_prepare_async_ready_wrapper (GObject *source_object,
                                                    GAsyncResult *res,
                                                    void *user_data);
void folks_search_view_prepare (FolksSearchView* self,
                                GAsyncReadyCallback _callback_,
                                gpointer _user_data_);
void folks_search_view_prepare_finish (FolksSearchView* self,
                                       GAsyncResult* _res_,
                                       GError** error);
static gboolean folks_search_view_prepare_co (FolksSearchViewPrepareData* _data_);
static void _folks_search_view_aggregator_individuals_changed_detailed_cb (FolksSearchView* self,
                                                                    GeeMultiMap* changes);
static void __folks_search_view_aggregator_individuals_changed_detailed_cb_folks_individual_aggregator_individuals_changed_detailed (FolksIndividualAggregator* _sender,
                                                                                                                              GeeMultiMap* changes,
                                                                                                                              gpointer self);
void folks_individual_aggregator_prepare (FolksIndividualAggregator* self,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_);
void folks_individual_aggregator_prepare_finish (FolksIndividualAggregator* self,
                                                 GAsyncResult* _res_,
                                                 GError** error);
static void folks_search_view_prepare_ready (GObject* source_object,
                                      GAsyncResult* _res_,
                                      gpointer _user_data_);
void folks_search_view_refresh (FolksSearchView* self,
                                GAsyncReadyCallback _callback_,
                                gpointer _user_data_);
void folks_search_view_refresh_finish (FolksSearchView* self,
                                       GAsyncResult* _res_,
                                       GError** error);
static void folks_search_view_unprepare_data_free (gpointer _data);
static void folks_search_view_unprepare_async_ready_wrapper (GObject *source_object,
                                                      GAsyncResult *res,
                                                      void *user_data);
void folks_search_view_unprepare (FolksSearchView* self,
                                  GAsyncReadyCallback _callback_,
                                  gpointer _user_data_);
void folks_search_view_unprepare_finish (FolksSearchView* self,
                                         GAsyncResult* _res_,
                                         GError** error);
static gboolean folks_search_view_unprepare_co (FolksSearchViewUnprepareData* _data_);
static void folks_search_view_refresh_data_free (gpointer _data);
static void folks_search_view_refresh_async_ready_wrapper (GObject *source_object,
                                                    GAsyncResult *res,
                                                    void *user_data);
static gboolean folks_search_view_refresh_co (FolksSearchViewRefreshData* _data_);
static void _folks_search_view_evaluate_all_aggregator_individuals (FolksSearchView* self);
static void _folks_search_view_evaluate_individuals (FolksSearchView* self,
                                              GeeMultiMap* changes,
                                              GeeSet* evaluates);
static gchar* _folks_search_view_build_match_strength_key (FolksSearchView* self);
static gint _folks_search_view_compare_individual_matches (FolksSearchView* self,
                                                    FolksIndividual* a,
                                                    FolksIndividual* b);
const gchar* folks_individual_get_display_name (FolksIndividual* self);
const gchar* folks_individual_get_id (FolksIndividual* self);
static gint __folks_search_view_compare_individual_matches_gcompare_data_func (gconstpointer a,
                                                                        gconstpointer b,
                                                                        gpointer self);
static gboolean _folks_search_view_check_match (FolksSearchView* self,
                                         FolksIndividual* individual);
static inline gboolean _folks_search_view_remove_individual (FolksSearchView* self,
                                               FolksIndividual* individual);
static inline gboolean _folks_search_view_add_individual (FolksSearchView* self,
                                            FolksIndividual* individual);
static void _folks_search_view_individual_notify_cb (FolksSearchView* self,
                                              GObject* obj,
                                              GParamSpec* ps);
static void __folks_search_view_individual_notify_cb_g_object_notify (GObject* _sender,
                                                               GParamSpec* pspec,
                                                               gpointer self);
GeeMap* folks_individual_aggregator_get_individuals (FolksIndividualAggregator* self);
guint folks_query_is_match (FolksQuery* self,
                            FolksIndividual* individual);
static gboolean _folks_search_view_evaluate_match (FolksSearchView* self,
                                            FolksIndividual* individual);
static void _folks_search_view_query_notify_cb (FolksSearchView* self,
                                         GObject* obj,
                                         GParamSpec* ps);
FolksIndividualAggregator* folks_search_view_get_aggregator (FolksSearchView* self);
FolksQuery* folks_search_view_get_query (FolksSearchView* self);
void folks_search_view_set_query (FolksSearchView* self,
                                  FolksQuery* value);
static void __folks_search_view_query_notify_cb_g_object_notify (GObject* _sender,
                                                          GParamSpec* pspec,
                                                          gpointer self);
GeeSortedSet* folks_search_view_get_individuals (FolksSearchView* self);
gboolean folks_search_view_get_is_prepared (FolksSearchView* self);
gboolean folks_search_view_get_is_quiescent (FolksSearchView* self);
gboolean folks_individual_aggregator_get_is_quiescent (FolksIndividualAggregator* self);
static void g_cclosure_user_marshal_VOID__OBJECT_OBJECT (GClosure * closure,
                                                  GValue * return_value,
                                                  guint n_param_values,
                                                  const GValue * param_values,
                                                  gpointer invocation_hint,
                                                  gpointer marshal_data);
static void folks_search_view_finalize (GObject * obj);
static void _vala_folks_search_view_get_property (GObject * object,
                                           guint property_id,
                                           GValue * value,
                                           GParamSpec * pspec);
static void _vala_folks_search_view_set_property (GObject * object,
                                           guint property_id,
                                           const GValue * value,
                                           GParamSpec * pspec);


static void
__folks_search_view_aggregator_is_quiescent_cb_g_object_notify (GObject* _sender,
                                                                GParamSpec* pspec,
                                                                gpointer self)
{
#line 210 "/run/build/folks/folks/search-view.vala"
	_folks_search_view_aggregator_is_quiescent_cb ((FolksSearchView*) self);
#line 293 "search-view.c"
}


static void
_folks_search_view_aggregator_is_quiescent_cb (FolksSearchView* self)
{
#line 152 "/run/build/folks/folks/search-view.vala"
	g_return_if_fail (self != NULL);
#line 154 "/run/build/folks/folks/search-view.vala"
	g_object_notify ((GObject*) self, "is-quiescent");
#line 304 "search-view.c"
}


/**
   * Create a new view of Individuals matching a given query.
   *
   * This view will be kept up-to-date as individuals change (which may change
   * their membership in the results).
   *
   * @param query query to match upon
   * @param aggregator the {@link IndividualAggregator} to match within
   *
   * @since 0.11.0
   */
static gpointer
_g_object_ref0 (gpointer self)
{
#line 196 "/run/build/folks/folks/search-view.vala"
	return self ? g_object_ref (self) : NULL;
#line 324 "search-view.c"
}


FolksSearchView*
folks_search_view_construct (GType object_type,
                             FolksIndividualAggregator* aggregator,
                             FolksQuery* query)
{
	FolksSearchView * self = NULL;
	FolksIndividualAggregator* _tmp0_;
	FolksIndividualAggregator* _tmp1_;
	GeeSortedSet* _tmp2_;
	GeeSortedSet* _tmp3_;
	GeeSortedSet* _tmp4_;
	GeeSortedSet* _tmp5_;
	FolksQuery* _tmp6_;
#line 192 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (aggregator != NULL, NULL);
#line 192 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (query != NULL, NULL);
#line 192 "/run/build/folks/folks/search-view.vala"
	self = (FolksSearchView*) g_object_new (object_type, NULL);
#line 194 "/run/build/folks/folks/search-view.vala"
	g_debug ("search-view.vala:194: Constructing SearchView %p", self);
#line 196 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = _g_object_ref0 (aggregator);
#line 196 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (self->priv->_aggregator);
#line 196 "/run/build/folks/folks/search-view.vala"
	self->priv->_aggregator = _tmp0_;
#line 197 "/run/build/folks/folks/search-view.vala"
	_tmp1_ = self->priv->_aggregator;
#line 197 "/run/build/folks/folks/search-view.vala"
	g_signal_connect_object ((GObject*) _tmp1_, "notify::is-quiescent", (GCallback) __folks_search_view_aggregator_is_quiescent_cb_g_object_notify, self, 0);
#line 199 "/run/build/folks/folks/search-view.vala"
	_tmp2_ = _folks_search_view_create_empty_sorted_set (self);
#line 199 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (self->priv->_individuals);
#line 199 "/run/build/folks/folks/search-view.vala"
	self->priv->_individuals = _tmp2_;
#line 200 "/run/build/folks/folks/search-view.vala"
	_tmp3_ = self->priv->_individuals;
#line 200 "/run/build/folks/folks/search-view.vala"
	_tmp4_ = gee_sorted_set_get_read_only_view (_tmp3_);
#line 200 "/run/build/folks/folks/search-view.vala"
	_tmp5_ = _tmp4_;
#line 200 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (self->priv->_individuals_ro);
#line 200 "/run/build/folks/folks/search-view.vala"
	self->priv->_individuals_ro = _tmp5_;
#line 201 "/run/build/folks/folks/search-view.vala"
	self->priv->_is_prepared = FALSE;
#line 202 "/run/build/folks/folks/search-view.vala"
	self->priv->_prepare_pending = FALSE;
#line 203 "/run/build/folks/folks/search-view.vala"
	_tmp6_ = _g_object_ref0 (query);
#line 203 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (self->priv->_query);
#line 203 "/run/build/folks/folks/search-view.vala"
	self->priv->_query = _tmp6_;
#line 192 "/run/build/folks/folks/search-view.vala"
	return self;
#line 387 "search-view.c"
}


FolksSearchView*
folks_search_view_new (FolksIndividualAggregator* aggregator,
                       FolksQuery* query)
{
#line 192 "/run/build/folks/folks/search-view.vala"
	return folks_search_view_construct (FOLKS_TYPE_SEARCH_VIEW, aggregator, query);
#line 397 "search-view.c"
}


static void
folks_search_view_prepare_data_free (gpointer _data)
{
	FolksSearchViewPrepareData* _data_;
	_data_ = _data;
#line 45 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (_data_->self);
#line 45 "/run/build/folks/folks/search-view.vala"
	g_slice_free (FolksSearchViewPrepareData, _data_);
#line 410 "search-view.c"
}


static void
folks_search_view_prepare_async_ready_wrapper (GObject *source_object,
                                               GAsyncResult *res,
                                               void *user_data)
{
	FolksSearchViewPrepareData* _task_data_;
#line 45 "/run/build/folks/folks/search-view.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 45 "/run/build/folks/folks/search-view.vala"
	if (_task_data_->_callback_ != NULL) {
#line 45 "/run/build/folks/folks/search-view.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 426 "search-view.c"
	}
#line 45 "/run/build/folks/folks/search-view.vala"
	_task_data_->_task_complete_ = TRUE;
#line 430 "search-view.c"
}


void
folks_search_view_prepare (FolksSearchView* self,
                           GAsyncReadyCallback _callback_,
                           gpointer _user_data_)
{
	FolksSearchViewPrepareData* _data_;
	FolksSearchView* _tmp0_;
#line 45 "/run/build/folks/folks/search-view.vala"
	_data_ = g_slice_new0 (FolksSearchViewPrepareData);
#line 45 "/run/build/folks/folks/search-view.vala"
	_data_->_callback_ = _callback_;
#line 45 "/run/build/folks/folks/search-view.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_search_view_prepare_async_ready_wrapper, _user_data_);
#line 45 "/run/build/folks/folks/search-view.vala"
	if (_callback_ == NULL) {
#line 45 "/run/build/folks/folks/search-view.vala"
		_data_->_task_complete_ = TRUE;
#line 451 "search-view.c"
	}
#line 45 "/run/build/folks/folks/search-view.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_search_view_prepare_data_free);
#line 45 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 45 "/run/build/folks/folks/search-view.vala"
	_data_->self = _tmp0_;
#line 45 "/run/build/folks/folks/search-view.vala"
	folks_search_view_prepare_co (_data_);
#line 461 "search-view.c"
}


void
folks_search_view_prepare_finish (FolksSearchView* self,
                                  GAsyncResult* _res_,
                                  GError** error)
{
	FolksSearchViewPrepareData* _data_;
#line 45 "/run/build/folks/folks/search-view.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 45 "/run/build/folks/folks/search-view.vala"
	if (NULL == _data_) {
#line 45 "/run/build/folks/folks/search-view.vala"
		return;
#line 477 "search-view.c"
	}
}


/**
   * Prepare the view for use.
   *
   * This calls {@link IndividualAggregator.prepare} as necessary to start
   * aggregating all {@link Individual}s.
   *
   * This function is guaranteed to be idempotent, so multiple search views may
   * share a single aggregator; {@link SearchView.prepare} must be called on all
   * of the views.
   *
   * For any clients only interested in a snapshot of search results,
   * {@link SearchView.individuals} is valid once this async function is
   * finished.
   *
   * @throws GLib.Error if preparation failed
   *
   * @since 0.11.0
   */
static void
__folks_search_view_aggregator_individuals_changed_detailed_cb_folks_individual_aggregator_individuals_changed_detailed (FolksIndividualAggregator* _sender,
                                                                                                                         GeeMultiMap* changes,
                                                                                                                         gpointer self)
{
#line 237 "/run/build/folks/folks/search-view.vala"
	_folks_search_view_aggregator_individuals_changed_detailed_cb ((FolksSearchView*) self, changes);
#line 507 "search-view.c"
}


static void
folks_search_view_prepare_ready (GObject* source_object,
                                 GAsyncResult* _res_,
                                 gpointer _user_data_)
{
	FolksSearchViewPrepareData* _data_;
#line 241 "/run/build/folks/folks/search-view.vala"
	_data_ = _user_data_;
#line 241 "/run/build/folks/folks/search-view.vala"
	_data_->_source_object_ = source_object;
#line 241 "/run/build/folks/folks/search-view.vala"
	_data_->_res_ = _res_;
#line 241 "/run/build/folks/folks/search-view.vala"
	_data_->_task_complete_ = TRUE;
#line 241 "/run/build/folks/folks/search-view.vala"
	folks_search_view_prepare_co (_data_);
#line 527 "search-view.c"
}


static gpointer
_g_error_copy0 (gpointer self)
{
#line 249 "/run/build/folks/folks/search-view.vala"
	return self ? g_error_copy (self) : NULL;
#line 536 "search-view.c"
}


static gboolean
folks_search_view_prepare_co (FolksSearchViewPrepareData* _data_)
{
#line 232 "/run/build/folks/folks/search-view.vala"
	switch (_data_->_state_) {
#line 232 "/run/build/folks/folks/search-view.vala"
		case 0:
#line 547 "search-view.c"
		goto _state_0;
#line 232 "/run/build/folks/folks/search-view.vala"
		case 1:
#line 551 "search-view.c"
		goto _state_1;
#line 232 "/run/build/folks/folks/search-view.vala"
		case 2:
#line 555 "search-view.c"
		goto _state_2;
		default:
#line 232 "/run/build/folks/folks/search-view.vala"
		g_assert_not_reached ();
#line 560 "search-view.c"
	}
	_state_0:
#line 234 "/run/build/folks/folks/search-view.vala"
	_data_->_tmp1_ = _data_->self->priv->_is_prepared;
#line 234 "/run/build/folks/folks/search-view.vala"
	if (!_data_->_tmp1_) {
#line 234 "/run/build/folks/folks/search-view.vala"
		_data_->_tmp2_ = _data_->self->priv->_prepare_pending;
#line 234 "/run/build/folks/folks/search-view.vala"
		_data_->_tmp0_ = !_data_->_tmp2_;
#line 571 "search-view.c"
	} else {
#line 234 "/run/build/folks/folks/search-view.vala"
		_data_->_tmp0_ = FALSE;
#line 575 "search-view.c"
	}
#line 234 "/run/build/folks/folks/search-view.vala"
	if (_data_->_tmp0_) {
#line 236 "/run/build/folks/folks/search-view.vala"
		_data_->self->priv->_prepare_pending = TRUE;
#line 237 "/run/build/folks/folks/search-view.vala"
		_data_->_tmp3_ = _data_->self->priv->_aggregator;
#line 237 "/run/build/folks/folks/search-view.vala"
		g_signal_connect_object (_data_->_tmp3_, "individuals-changed-detailed", (GCallback) __folks_search_view_aggregator_individuals_changed_detailed_cb_folks_individual_aggregator_individuals_changed_detailed, _data_->self, 0);
#line 585 "search-view.c"
		{
#line 241 "/run/build/folks/folks/search-view.vala"
			_data_->_tmp4_ = _data_->self->priv->_aggregator;
#line 241 "/run/build/folks/folks/search-view.vala"
			_data_->_state_ = 1;
#line 241 "/run/build/folks/folks/search-view.vala"
			folks_individual_aggregator_prepare (_data_->_tmp4_, folks_search_view_prepare_ready, _data_);
#line 241 "/run/build/folks/folks/search-view.vala"
			return FALSE;
#line 595 "search-view.c"
			_state_1:
#line 241 "/run/build/folks/folks/search-view.vala"
			folks_individual_aggregator_prepare_finish (_data_->_tmp4_, _data_->_res_, &_data_->_inner_error_);
#line 241 "/run/build/folks/folks/search-view.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 601 "search-view.c"
				goto __catch35_g_error;
			}
		}
		goto __finally35;
		__catch35_g_error:
		{
#line 239 "/run/build/folks/folks/search-view.vala"
			_data_->e = _data_->_inner_error_;
#line 239 "/run/build/folks/folks/search-view.vala"
			_data_->_inner_error_ = NULL;
#line 245 "/run/build/folks/folks/search-view.vala"
			_data_->self->priv->_prepare_pending = FALSE;
#line 246 "/run/build/folks/folks/search-view.vala"
			_data_->_tmp5_ = _data_->self->priv->_aggregator;
#line 246 "/run/build/folks/folks/search-view.vala"
			g_signal_parse_name ("individuals-changed-detailed", FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, &_data_->_tmp6_, NULL, FALSE);
#line 246 "/run/build/folks/folks/search-view.vala"
			g_signal_handlers_disconnect_matched (_data_->_tmp5_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _data_->_tmp6_, 0, NULL, (GCallback) __folks_search_view_aggregator_individuals_changed_detailed_cb_folks_individual_aggregator_individuals_changed_detailed, _data_->self);
#line 249 "/run/build/folks/folks/search-view.vala"
			_data_->_tmp7_ = _data_->e;
#line 249 "/run/build/folks/folks/search-view.vala"
			_data_->_tmp8_ = _g_error_copy0 (_data_->_tmp7_);
#line 249 "/run/build/folks/folks/search-view.vala"
			_data_->_inner_error_ = _data_->_tmp8_;
#line 249 "/run/build/folks/folks/search-view.vala"
			_g_error_free0 (_data_->e);
#line 628 "search-view.c"
			goto __finally35;
		}
		__finally35:
#line 239 "/run/build/folks/folks/search-view.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 239 "/run/build/folks/folks/search-view.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 239 "/run/build/folks/folks/search-view.vala"
			g_object_unref (_data_->_async_result);
#line 239 "/run/build/folks/folks/search-view.vala"
			return FALSE;
#line 640 "search-view.c"
		}
#line 252 "/run/build/folks/folks/search-view.vala"
		_data_->self->priv->_is_prepared = TRUE;
#line 253 "/run/build/folks/folks/search-view.vala"
		_data_->self->priv->_prepare_pending = FALSE;
#line 254 "/run/build/folks/folks/search-view.vala"
		g_object_notify ((GObject*) _data_->self, "is-prepared");
#line 256 "/run/build/folks/folks/search-view.vala"
		_data_->_state_ = 2;
#line 256 "/run/build/folks/folks/search-view.vala"
		folks_search_view_refresh (_data_->self, folks_search_view_prepare_ready, _data_);
#line 256 "/run/build/folks/folks/search-view.vala"
		return FALSE;
#line 654 "search-view.c"
		_state_2:
#line 256 "/run/build/folks/folks/search-view.vala"
		folks_search_view_refresh_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 256 "/run/build/folks/folks/search-view.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 256 "/run/build/folks/folks/search-view.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 256 "/run/build/folks/folks/search-view.vala"
			g_object_unref (_data_->_async_result);
#line 256 "/run/build/folks/folks/search-view.vala"
			return FALSE;
#line 666 "search-view.c"
		}
	}
#line 232 "/run/build/folks/folks/search-view.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 232 "/run/build/folks/folks/search-view.vala"
	if (_data_->_state_ != 0) {
#line 232 "/run/build/folks/folks/search-view.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 232 "/run/build/folks/folks/search-view.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 677 "search-view.c"
		}
	}
#line 232 "/run/build/folks/folks/search-view.vala"
	g_object_unref (_data_->_async_result);
#line 232 "/run/build/folks/folks/search-view.vala"
	return FALSE;
#line 684 "search-view.c"
}


static void
folks_search_view_unprepare_data_free (gpointer _data)
{
	FolksSearchViewUnprepareData* _data_;
	_data_ = _data;
#line 45 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (_data_->self);
#line 45 "/run/build/folks/folks/search-view.vala"
	g_slice_free (FolksSearchViewUnprepareData, _data_);
#line 697 "search-view.c"
}


static void
folks_search_view_unprepare_async_ready_wrapper (GObject *source_object,
                                                 GAsyncResult *res,
                                                 void *user_data)
{
	FolksSearchViewUnprepareData* _task_data_;
#line 45 "/run/build/folks/folks/search-view.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 45 "/run/build/folks/folks/search-view.vala"
	if (_task_data_->_callback_ != NULL) {
#line 45 "/run/build/folks/folks/search-view.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 713 "search-view.c"
	}
#line 45 "/run/build/folks/folks/search-view.vala"
	_task_data_->_task_complete_ = TRUE;
#line 717 "search-view.c"
}


void
folks_search_view_unprepare (FolksSearchView* self,
                             GAsyncReadyCallback _callback_,
                             gpointer _user_data_)
{
	FolksSearchViewUnprepareData* _data_;
	FolksSearchView* _tmp0_;
#line 45 "/run/build/folks/folks/search-view.vala"
	_data_ = g_slice_new0 (FolksSearchViewUnprepareData);
#line 45 "/run/build/folks/folks/search-view.vala"
	_data_->_callback_ = _callback_;
#line 45 "/run/build/folks/folks/search-view.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_search_view_unprepare_async_ready_wrapper, _user_data_);
#line 45 "/run/build/folks/folks/search-view.vala"
	if (_callback_ == NULL) {
#line 45 "/run/build/folks/folks/search-view.vala"
		_data_->_task_complete_ = TRUE;
#line 738 "search-view.c"
	}
#line 45 "/run/build/folks/folks/search-view.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_search_view_unprepare_data_free);
#line 45 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 45 "/run/build/folks/folks/search-view.vala"
	_data_->self = _tmp0_;
#line 45 "/run/build/folks/folks/search-view.vala"
	folks_search_view_unprepare_co (_data_);
#line 748 "search-view.c"
}


void
folks_search_view_unprepare_finish (FolksSearchView* self,
                                    GAsyncResult* _res_,
                                    GError** error)
{
	FolksSearchViewUnprepareData* _data_;
#line 45 "/run/build/folks/folks/search-view.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 45 "/run/build/folks/folks/search-view.vala"
	if (NULL == _data_) {
#line 45 "/run/build/folks/folks/search-view.vala"
		return;
#line 764 "search-view.c"
	}
}


/**
   * Clean up and release resources used by the search view.
   *
   * This will disconnect the aggregator cleanly from any resources it is using.
   * It is recommended to call this method before finalising the search view,
   * but calling it is not required.
   *
   * Note that this will not unprepare the underlying aggregator: call
   * {@link IndividualAggregator.unprepare} to do that. This allows multiple
   * search views to use a single aggregator and unprepare at different times.
   *
   * Concurrent calls to this function from different threads will block until
   * preparation has completed. However, concurrent calls to this function from
   * a single thread might not, i.e. the first call will block but subsequent
   * calls might return before the first one. (Though they will be safe in every
   * other respect.)
   *
   * @since 0.11.0
   * @throws GLib.Error if unpreparing the backend-specific services failed —
   * this will be a backend-specific error
   */
static gboolean
folks_search_view_unprepare_co (FolksSearchViewUnprepareData* _data_)
{
#line 281 "/run/build/folks/folks/search-view.vala"
	switch (_data_->_state_) {
#line 281 "/run/build/folks/folks/search-view.vala"
		case 0:
#line 797 "search-view.c"
		goto _state_0;
		default:
#line 281 "/run/build/folks/folks/search-view.vala"
		g_assert_not_reached ();
#line 802 "search-view.c"
	}
	_state_0:
#line 283 "/run/build/folks/folks/search-view.vala"
	_data_->_tmp1_ = _data_->self->priv->_is_prepared;
#line 283 "/run/build/folks/folks/search-view.vala"
	if (!_data_->_tmp1_) {
#line 283 "/run/build/folks/folks/search-view.vala"
		_data_->_tmp0_ = TRUE;
#line 811 "search-view.c"
	} else {
#line 283 "/run/build/folks/folks/search-view.vala"
		_data_->_tmp2_ = _data_->self->priv->_prepare_pending;
#line 283 "/run/build/folks/folks/search-view.vala"
		_data_->_tmp0_ = _data_->_tmp2_;
#line 817 "search-view.c"
	}
#line 283 "/run/build/folks/folks/search-view.vala"
	if (_data_->_tmp0_) {
#line 285 "/run/build/folks/folks/search-view.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 285 "/run/build/folks/folks/search-view.vala"
		if (_data_->_state_ != 0) {
#line 285 "/run/build/folks/folks/search-view.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 285 "/run/build/folks/folks/search-view.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 829 "search-view.c"
			}
		}
#line 285 "/run/build/folks/folks/search-view.vala"
		g_object_unref (_data_->_async_result);
#line 285 "/run/build/folks/folks/search-view.vala"
		return FALSE;
#line 836 "search-view.c"
	}
#line 288 "/run/build/folks/folks/search-view.vala"
	_data_->self->priv->_prepare_pending = FALSE;
#line 281 "/run/build/folks/folks/search-view.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 281 "/run/build/folks/folks/search-view.vala"
	if (_data_->_state_ != 0) {
#line 281 "/run/build/folks/folks/search-view.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 281 "/run/build/folks/folks/search-view.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 848 "search-view.c"
		}
	}
#line 281 "/run/build/folks/folks/search-view.vala"
	g_object_unref (_data_->_async_result);
#line 281 "/run/build/folks/folks/search-view.vala"
	return FALSE;
#line 855 "search-view.c"
}


static void
folks_search_view_refresh_data_free (gpointer _data)
{
	FolksSearchViewRefreshData* _data_;
	_data_ = _data;
#line 45 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (_data_->self);
#line 45 "/run/build/folks/folks/search-view.vala"
	g_slice_free (FolksSearchViewRefreshData, _data_);
#line 868 "search-view.c"
}


static void
folks_search_view_refresh_async_ready_wrapper (GObject *source_object,
                                               GAsyncResult *res,
                                               void *user_data)
{
	FolksSearchViewRefreshData* _task_data_;
#line 45 "/run/build/folks/folks/search-view.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 45 "/run/build/folks/folks/search-view.vala"
	if (_task_data_->_callback_ != NULL) {
#line 45 "/run/build/folks/folks/search-view.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 884 "search-view.c"
	}
#line 45 "/run/build/folks/folks/search-view.vala"
	_task_data_->_task_complete_ = TRUE;
#line 888 "search-view.c"
}


void
folks_search_view_refresh (FolksSearchView* self,
                           GAsyncReadyCallback _callback_,
                           gpointer _user_data_)
{
	FolksSearchViewRefreshData* _data_;
	FolksSearchView* _tmp0_;
#line 45 "/run/build/folks/folks/search-view.vala"
	_data_ = g_slice_new0 (FolksSearchViewRefreshData);
#line 45 "/run/build/folks/folks/search-view.vala"
	_data_->_callback_ = _callback_;
#line 45 "/run/build/folks/folks/search-view.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_search_view_refresh_async_ready_wrapper, _user_data_);
#line 45 "/run/build/folks/folks/search-view.vala"
	if (_callback_ == NULL) {
#line 45 "/run/build/folks/folks/search-view.vala"
		_data_->_task_complete_ = TRUE;
#line 909 "search-view.c"
	}
#line 45 "/run/build/folks/folks/search-view.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_search_view_refresh_data_free);
#line 45 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 45 "/run/build/folks/folks/search-view.vala"
	_data_->self = _tmp0_;
#line 45 "/run/build/folks/folks/search-view.vala"
	folks_search_view_refresh_co (_data_);
#line 919 "search-view.c"
}


void
folks_search_view_refresh_finish (FolksSearchView* self,
                                  GAsyncResult* _res_,
                                  GError** error)
{
	FolksSearchViewRefreshData* _data_;
#line 45 "/run/build/folks/folks/search-view.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 45 "/run/build/folks/folks/search-view.vala"
	if (NULL == _data_) {
#line 45 "/run/build/folks/folks/search-view.vala"
		return;
#line 935 "search-view.c"
	}
}


/**
   * Refresh the view’s results.
   *
   * Explicitly re-match all the view’s results to ensure matches are up to
   * date. For a normal {@link IndividualAggregator}, this is explicitly not
   * necessary, as the view will watch signal emissions from the aggregator and
   * keep itself up to date.
   *
   * However, for search-only persona stores, which do not support notification
   * of changes to personas, this method is the only way to update the set of
   * matches against the store.
   *
   * This method should be called whenever an explicit update is needed to the
   * search results, e.g. if the user requests a refresh.
   *
   * @throws GLib.Error if matching failed
   * @since 0.11.0
   */
static gboolean
folks_search_view_refresh_co (FolksSearchViewRefreshData* _data_)
{
#line 309 "/run/build/folks/folks/search-view.vala"
	switch (_data_->_state_) {
#line 309 "/run/build/folks/folks/search-view.vala"
		case 0:
#line 965 "search-view.c"
		goto _state_0;
		default:
#line 309 "/run/build/folks/folks/search-view.vala"
		g_assert_not_reached ();
#line 970 "search-view.c"
	}
	_state_0:
#line 311 "/run/build/folks/folks/search-view.vala"
	_data_->_tmp0_ = _data_->self->priv->_is_prepared;
#line 311 "/run/build/folks/folks/search-view.vala"
	if (_data_->_tmp0_) {
#line 312 "/run/build/folks/folks/search-view.vala"
		_folks_search_view_evaluate_all_aggregator_individuals (_data_->self);
#line 979 "search-view.c"
	}
#line 309 "/run/build/folks/folks/search-view.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 309 "/run/build/folks/folks/search-view.vala"
	if (_data_->_state_ != 0) {
#line 309 "/run/build/folks/folks/search-view.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 309 "/run/build/folks/folks/search-view.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 989 "search-view.c"
		}
	}
#line 309 "/run/build/folks/folks/search-view.vala"
	g_object_unref (_data_->_async_result);
#line 309 "/run/build/folks/folks/search-view.vala"
	return FALSE;
#line 996 "search-view.c"
}


static void
_folks_search_view_aggregator_individuals_changed_detailed_cb (FolksSearchView* self,
                                                               GeeMultiMap* changes)
{
#line 315 "/run/build/folks/folks/search-view.vala"
	g_return_if_fail (self != NULL);
#line 315 "/run/build/folks/folks/search-view.vala"
	g_return_if_fail (changes != NULL);
#line 318 "/run/build/folks/folks/search-view.vala"
	_folks_search_view_evaluate_individuals (self, changes, NULL);
#line 1010 "search-view.c"
}


static gchar*
_folks_search_view_build_match_strength_key (FolksSearchView* self)
{
	gchar* result = NULL;
	gchar* _tmp0_;
#line 321 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 329 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = g_strdup_printf ("folks-match-strength-%p", self);
#line 329 "/run/build/folks/folks/search-view.vala"
	result = _tmp0_;
#line 329 "/run/build/folks/folks/search-view.vala"
	return result;
#line 1027 "search-view.c"
}


static gint
_folks_search_view_compare_individual_matches (FolksSearchView* self,
                                               FolksIndividual* a,
                                               FolksIndividual* b)
{
	gint result = 0;
	gchar* key = NULL;
	gchar* _tmp0_;
	guint match_strength_a = 0U;
	const gchar* _tmp1_;
	gconstpointer _tmp2_;
	guint match_strength_b = 0U;
	const gchar* _tmp3_;
	gconstpointer _tmp4_;
	guint _tmp5_;
	guint _tmp6_;
	gint display_name = 0;
	const gchar* _tmp9_;
	const gchar* _tmp10_;
	const gchar* _tmp11_;
	const gchar* _tmp12_;
	gint _tmp13_;
	const gchar* _tmp14_;
	const gchar* _tmp15_;
	const gchar* _tmp16_;
	const gchar* _tmp17_;
#line 332 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 332 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (a != NULL, 0);
#line 332 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (b != NULL, 0);
#line 336 "/run/build/folks/folks/search-view.vala"
	if (a == b) {
#line 337 "/run/build/folks/folks/search-view.vala"
		result = 0;
#line 337 "/run/build/folks/folks/search-view.vala"
		return result;
#line 1069 "search-view.c"
	}
#line 339 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = _folks_search_view_build_match_strength_key (self);
#line 339 "/run/build/folks/folks/search-view.vala"
	key = _tmp0_;
#line 344 "/run/build/folks/folks/search-view.vala"
	_tmp1_ = key;
#line 344 "/run/build/folks/folks/search-view.vala"
	_tmp2_ = g_object_get_data ((GObject*) a, _tmp1_);
#line 344 "/run/build/folks/folks/search-view.vala"
	match_strength_a = (guint) ((guintptr) _tmp2_);
#line 345 "/run/build/folks/folks/search-view.vala"
	_tmp3_ = key;
#line 345 "/run/build/folks/folks/search-view.vala"
	_tmp4_ = g_object_get_data ((GObject*) b, _tmp3_);
#line 345 "/run/build/folks/folks/search-view.vala"
	match_strength_b = (guint) ((guintptr) _tmp4_);
#line 347 "/run/build/folks/folks/search-view.vala"
	_tmp5_ = match_strength_a;
#line 347 "/run/build/folks/folks/search-view.vala"
	_tmp6_ = match_strength_b;
#line 347 "/run/build/folks/folks/search-view.vala"
	if (_tmp5_ != _tmp6_) {
#line 1093 "search-view.c"
		guint _tmp7_;
		guint _tmp8_;
#line 348 "/run/build/folks/folks/search-view.vala"
		_tmp7_ = match_strength_b;
#line 348 "/run/build/folks/folks/search-view.vala"
		_tmp8_ = match_strength_a;
#line 348 "/run/build/folks/folks/search-view.vala"
		result = ((gint) _tmp7_) - ((gint) _tmp8_);
#line 348 "/run/build/folks/folks/search-view.vala"
		_g_free0 (key);
#line 348 "/run/build/folks/folks/search-view.vala"
		return result;
#line 1106 "search-view.c"
	}
#line 351 "/run/build/folks/folks/search-view.vala"
	_tmp9_ = folks_individual_get_display_name (a);
#line 351 "/run/build/folks/folks/search-view.vala"
	_tmp10_ = _tmp9_;
#line 351 "/run/build/folks/folks/search-view.vala"
	_tmp11_ = folks_individual_get_display_name (b);
#line 351 "/run/build/folks/folks/search-view.vala"
	_tmp12_ = _tmp11_;
#line 351 "/run/build/folks/folks/search-view.vala"
	display_name = g_utf8_collate (_tmp10_, _tmp12_);
#line 352 "/run/build/folks/folks/search-view.vala"
	_tmp13_ = display_name;
#line 352 "/run/build/folks/folks/search-view.vala"
	if (_tmp13_ != 0) {
#line 353 "/run/build/folks/folks/search-view.vala"
		result = display_name;
#line 353 "/run/build/folks/folks/search-view.vala"
		_g_free0 (key);
#line 353 "/run/build/folks/folks/search-view.vala"
		return result;
#line 1128 "search-view.c"
	}
#line 356 "/run/build/folks/folks/search-view.vala"
	_tmp14_ = folks_individual_get_id (a);
#line 356 "/run/build/folks/folks/search-view.vala"
	_tmp15_ = _tmp14_;
#line 356 "/run/build/folks/folks/search-view.vala"
	_tmp16_ = folks_individual_get_id (b);
#line 356 "/run/build/folks/folks/search-view.vala"
	_tmp17_ = _tmp16_;
#line 356 "/run/build/folks/folks/search-view.vala"
	result = g_utf8_collate (_tmp15_, _tmp17_);
#line 356 "/run/build/folks/folks/search-view.vala"
	_g_free0 (key);
#line 356 "/run/build/folks/folks/search-view.vala"
	return result;
#line 1144 "search-view.c"
}


static gint
__folks_search_view_compare_individual_matches_gcompare_data_func (gconstpointer a,
                                                                   gconstpointer b,
                                                                   gpointer self)
{
	gint result;
	result = _folks_search_view_compare_individual_matches ((FolksSearchView*) self, (FolksIndividual*) a, (FolksIndividual*) b);
#line 361 "/run/build/folks/folks/search-view.vala"
	return result;
#line 1157 "search-view.c"
}


static GeeSortedSet*
_folks_search_view_create_empty_sorted_set (FolksSearchView* self)
{
	GeeSortedSet* result = NULL;
	GeeTreeSet* _tmp0_;
#line 359 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 361 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = gee_tree_set_new (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, __folks_search_view_compare_individual_matches_gcompare_data_func, g_object_ref (self), g_object_unref);
#line 361 "/run/build/folks/folks/search-view.vala"
	result = (GeeSortedSet*) _tmp0_;
#line 361 "/run/build/folks/folks/search-view.vala"
	return result;
#line 1174 "search-view.c"
}


static void
_folks_search_view_evaluate_individuals (FolksSearchView* self,
                                         GeeMultiMap* changes,
                                         GeeSet* evaluates)
{
	GeeSortedSet* view_added = NULL;
	GeeSortedSet* _tmp0_;
	GeeSortedSet* view_removed = NULL;
	GeeSortedSet* _tmp1_;
	GeeIterator* iter = NULL;
	GeeSortedSet* _tmp26_;
	GeeIterator* _tmp27_;
	GeeSortedSet* _tmp35_;
	GeeIterator* _tmp36_;
	gboolean _tmp44_ = FALSE;
	GeeSortedSet* _tmp45_;
	gint _tmp46_;
	gint _tmp47_;
#line 364 "/run/build/folks/folks/search-view.vala"
	g_return_if_fail (self != NULL);
#line 368 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = _folks_search_view_create_empty_sorted_set (self);
#line 368 "/run/build/folks/folks/search-view.vala"
	view_added = _tmp0_;
#line 369 "/run/build/folks/folks/search-view.vala"
	_tmp1_ = _folks_search_view_create_empty_sorted_set (self);
#line 369 "/run/build/folks/folks/search-view.vala"
	view_removed = _tmp1_;
#line 373 "/run/build/folks/folks/search-view.vala"
	if (evaluates != NULL) {
#line 1208 "search-view.c"
		{
			GeeIterator* _evaluate_it = NULL;
			GeeIterator* _tmp2_;
#line 375 "/run/build/folks/folks/search-view.vala"
			_tmp2_ = gee_iterable_iterator ((GeeIterable*) evaluates);
#line 375 "/run/build/folks/folks/search-view.vala"
			_evaluate_it = _tmp2_;
#line 375 "/run/build/folks/folks/search-view.vala"
			while (TRUE) {
#line 1218 "search-view.c"
				GeeIterator* _tmp3_;
				FolksIndividual* evaluate = NULL;
				GeeIterator* _tmp4_;
				gpointer _tmp5_;
				FolksIndividual* _tmp6_;
				FolksIndividual* _tmp7_;
#line 375 "/run/build/folks/folks/search-view.vala"
				_tmp3_ = _evaluate_it;
#line 375 "/run/build/folks/folks/search-view.vala"
				if (!gee_iterator_next (_tmp3_)) {
#line 375 "/run/build/folks/folks/search-view.vala"
					break;
#line 1231 "search-view.c"
				}
#line 375 "/run/build/folks/folks/search-view.vala"
				_tmp4_ = _evaluate_it;
#line 375 "/run/build/folks/folks/search-view.vala"
				_tmp5_ = gee_iterator_get (_tmp4_);
#line 375 "/run/build/folks/folks/search-view.vala"
				evaluate = (FolksIndividual*) _tmp5_;
#line 377 "/run/build/folks/folks/search-view.vala"
				_tmp6_ = evaluate;
#line 377 "/run/build/folks/folks/search-view.vala"
				if (_tmp6_ == NULL) {
#line 378 "/run/build/folks/folks/search-view.vala"
					_g_object_unref0 (evaluate);
#line 378 "/run/build/folks/folks/search-view.vala"
					continue;
#line 1247 "search-view.c"
				}
#line 380 "/run/build/folks/folks/search-view.vala"
				_tmp7_ = evaluate;
#line 380 "/run/build/folks/folks/search-view.vala"
				if (_folks_search_view_check_match (self, _tmp7_)) {
#line 1253 "search-view.c"
					GeeSortedSet* _tmp8_;
					FolksIndividual* _tmp9_;
#line 381 "/run/build/folks/folks/search-view.vala"
					_tmp8_ = view_added;
#line 381 "/run/build/folks/folks/search-view.vala"
					_tmp9_ = evaluate;
#line 381 "/run/build/folks/folks/search-view.vala"
					gee_collection_add ((GeeCollection*) _tmp8_, _tmp9_);
#line 1262 "search-view.c"
				} else {
					GeeSortedSet* _tmp10_;
					FolksIndividual* _tmp11_;
#line 383 "/run/build/folks/folks/search-view.vala"
					_tmp10_ = view_removed;
#line 383 "/run/build/folks/folks/search-view.vala"
					_tmp11_ = evaluate;
#line 383 "/run/build/folks/folks/search-view.vala"
					gee_collection_add ((GeeCollection*) _tmp10_, _tmp11_);
#line 1272 "search-view.c"
				}
#line 375 "/run/build/folks/folks/search-view.vala"
				_g_object_unref0 (evaluate);
#line 1276 "search-view.c"
			}
#line 375 "/run/build/folks/folks/search-view.vala"
			_g_object_unref0 (_evaluate_it);
#line 1280 "search-view.c"
		}
	}
#line 388 "/run/build/folks/folks/search-view.vala"
	if (changes != NULL) {
#line 1285 "search-view.c"
		GeeMapIterator* iter = NULL;
		GeeMapIterator* _tmp12_;
#line 392 "/run/build/folks/folks/search-view.vala"
		_tmp12_ = gee_multi_map_map_iterator (changes);
#line 392 "/run/build/folks/folks/search-view.vala"
		iter = _tmp12_;
#line 394 "/run/build/folks/folks/search-view.vala"
		while (TRUE) {
#line 1294 "search-view.c"
			GeeMapIterator* _tmp13_;
			FolksIndividual* individual_old = NULL;
			GeeMapIterator* _tmp14_;
			gpointer _tmp15_;
			FolksIndividual* individual_new = NULL;
			GeeMapIterator* _tmp16_;
			gpointer _tmp17_;
			gboolean _tmp18_ = FALSE;
			FolksIndividual* _tmp19_;
			FolksIndividual* _tmp23_;
#line 394 "/run/build/folks/folks/search-view.vala"
			_tmp13_ = iter;
#line 394 "/run/build/folks/folks/search-view.vala"
			if (!gee_map_iterator_next (_tmp13_)) {
#line 394 "/run/build/folks/folks/search-view.vala"
				break;
#line 1311 "search-view.c"
			}
#line 396 "/run/build/folks/folks/search-view.vala"
			_tmp14_ = iter;
#line 396 "/run/build/folks/folks/search-view.vala"
			_tmp15_ = gee_map_iterator_get_key (_tmp14_);
#line 396 "/run/build/folks/folks/search-view.vala"
			individual_old = (FolksIndividual*) _tmp15_;
#line 397 "/run/build/folks/folks/search-view.vala"
			_tmp16_ = iter;
#line 397 "/run/build/folks/folks/search-view.vala"
			_tmp17_ = gee_map_iterator_get_value (_tmp16_);
#line 397 "/run/build/folks/folks/search-view.vala"
			individual_new = (FolksIndividual*) _tmp17_;
#line 399 "/run/build/folks/folks/search-view.vala"
			_tmp19_ = individual_new;
#line 399 "/run/build/folks/folks/search-view.vala"
			if (_tmp19_ != NULL) {
#line 1329 "search-view.c"
				FolksIndividual* _tmp20_;
#line 399 "/run/build/folks/folks/search-view.vala"
				_tmp20_ = individual_new;
#line 399 "/run/build/folks/folks/search-view.vala"
				_tmp18_ = _folks_search_view_check_match (self, _tmp20_);
#line 1335 "search-view.c"
			} else {
#line 399 "/run/build/folks/folks/search-view.vala"
				_tmp18_ = FALSE;
#line 1339 "search-view.c"
			}
#line 399 "/run/build/folks/folks/search-view.vala"
			if (_tmp18_) {
#line 1343 "search-view.c"
				GeeSortedSet* _tmp21_;
				FolksIndividual* _tmp22_;
#line 403 "/run/build/folks/folks/search-view.vala"
				_tmp21_ = view_added;
#line 403 "/run/build/folks/folks/search-view.vala"
				_tmp22_ = individual_new;
#line 403 "/run/build/folks/folks/search-view.vala"
				gee_collection_add ((GeeCollection*) _tmp21_, _tmp22_);
#line 1352 "search-view.c"
			}
#line 406 "/run/build/folks/folks/search-view.vala"
			_tmp23_ = individual_old;
#line 406 "/run/build/folks/folks/search-view.vala"
			if (_tmp23_ != NULL) {
#line 1358 "search-view.c"
				GeeSortedSet* _tmp24_;
				FolksIndividual* _tmp25_;
#line 411 "/run/build/folks/folks/search-view.vala"
				_tmp24_ = view_removed;
#line 411 "/run/build/folks/folks/search-view.vala"
				_tmp25_ = individual_old;
#line 411 "/run/build/folks/folks/search-view.vala"
				gee_collection_add ((GeeCollection*) _tmp24_, _tmp25_);
#line 1367 "search-view.c"
			}
#line 394 "/run/build/folks/folks/search-view.vala"
			_g_object_unref0 (individual_new);
#line 394 "/run/build/folks/folks/search-view.vala"
			_g_object_unref0 (individual_old);
#line 1373 "search-view.c"
		}
#line 388 "/run/build/folks/folks/search-view.vala"
		_g_object_unref0 (iter);
#line 1377 "search-view.c"
	}
#line 418 "/run/build/folks/folks/search-view.vala"
	_tmp26_ = view_removed;
#line 418 "/run/build/folks/folks/search-view.vala"
	_tmp27_ = gee_iterable_iterator ((GeeIterable*) _tmp26_);
#line 418 "/run/build/folks/folks/search-view.vala"
	iter = _tmp27_;
#line 420 "/run/build/folks/folks/search-view.vala"
	while (TRUE) {
#line 1387 "search-view.c"
		GeeIterator* _tmp28_;
		FolksIndividual* individual_old = NULL;
		GeeIterator* _tmp29_;
		gpointer _tmp30_;
		gboolean _tmp31_ = FALSE;
		FolksIndividual* _tmp32_;
#line 420 "/run/build/folks/folks/search-view.vala"
		_tmp28_ = iter;
#line 420 "/run/build/folks/folks/search-view.vala"
		if (!gee_iterator_next (_tmp28_)) {
#line 420 "/run/build/folks/folks/search-view.vala"
			break;
#line 1400 "search-view.c"
		}
#line 422 "/run/build/folks/folks/search-view.vala"
		_tmp29_ = iter;
#line 422 "/run/build/folks/folks/search-view.vala"
		_tmp30_ = gee_iterator_get (_tmp29_);
#line 422 "/run/build/folks/folks/search-view.vala"
		individual_old = (FolksIndividual*) _tmp30_;
#line 424 "/run/build/folks/folks/search-view.vala"
		_tmp32_ = individual_old;
#line 424 "/run/build/folks/folks/search-view.vala"
		if (_tmp32_ != NULL) {
#line 1412 "search-view.c"
			FolksIndividual* _tmp33_;
#line 425 "/run/build/folks/folks/search-view.vala"
			_tmp33_ = individual_old;
#line 425 "/run/build/folks/folks/search-view.vala"
			_tmp31_ = !_folks_search_view_remove_individual (self, _tmp33_);
#line 1418 "search-view.c"
		} else {
#line 424 "/run/build/folks/folks/search-view.vala"
			_tmp31_ = FALSE;
#line 1422 "search-view.c"
		}
#line 424 "/run/build/folks/folks/search-view.vala"
		if (_tmp31_) {
#line 1426 "search-view.c"
			GeeIterator* _tmp34_;
#line 427 "/run/build/folks/folks/search-view.vala"
			_tmp34_ = iter;
#line 427 "/run/build/folks/folks/search-view.vala"
			gee_iterator_remove (_tmp34_);
#line 1432 "search-view.c"
		}
#line 420 "/run/build/folks/folks/search-view.vala"
		_g_object_unref0 (individual_old);
#line 1436 "search-view.c"
	}
#line 433 "/run/build/folks/folks/search-view.vala"
	_tmp35_ = view_added;
#line 433 "/run/build/folks/folks/search-view.vala"
	_tmp36_ = gee_iterable_iterator ((GeeIterable*) _tmp35_);
#line 433 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (iter);
#line 433 "/run/build/folks/folks/search-view.vala"
	iter = _tmp36_;
#line 435 "/run/build/folks/folks/search-view.vala"
	while (TRUE) {
#line 1448 "search-view.c"
		GeeIterator* _tmp37_;
		FolksIndividual* individual_new = NULL;
		GeeIterator* _tmp38_;
		gpointer _tmp39_;
		gboolean _tmp40_ = FALSE;
		FolksIndividual* _tmp41_;
#line 435 "/run/build/folks/folks/search-view.vala"
		_tmp37_ = iter;
#line 435 "/run/build/folks/folks/search-view.vala"
		if (!gee_iterator_next (_tmp37_)) {
#line 435 "/run/build/folks/folks/search-view.vala"
			break;
#line 1461 "search-view.c"
		}
#line 437 "/run/build/folks/folks/search-view.vala"
		_tmp38_ = iter;
#line 437 "/run/build/folks/folks/search-view.vala"
		_tmp39_ = gee_iterator_get (_tmp38_);
#line 437 "/run/build/folks/folks/search-view.vala"
		individual_new = (FolksIndividual*) _tmp39_;
#line 439 "/run/build/folks/folks/search-view.vala"
		_tmp41_ = individual_new;
#line 439 "/run/build/folks/folks/search-view.vala"
		if (_tmp41_ != NULL) {
#line 1473 "search-view.c"
			FolksIndividual* _tmp42_;
#line 439 "/run/build/folks/folks/search-view.vala"
			_tmp42_ = individual_new;
#line 439 "/run/build/folks/folks/search-view.vala"
			_tmp40_ = !_folks_search_view_add_individual (self, _tmp42_);
#line 1479 "search-view.c"
		} else {
#line 439 "/run/build/folks/folks/search-view.vala"
			_tmp40_ = FALSE;
#line 1483 "search-view.c"
		}
#line 439 "/run/build/folks/folks/search-view.vala"
		if (_tmp40_) {
#line 1487 "search-view.c"
			GeeIterator* _tmp43_;
#line 441 "/run/build/folks/folks/search-view.vala"
			_tmp43_ = iter;
#line 441 "/run/build/folks/folks/search-view.vala"
			gee_iterator_remove (_tmp43_);
#line 1493 "search-view.c"
		}
#line 435 "/run/build/folks/folks/search-view.vala"
		_g_object_unref0 (individual_new);
#line 1497 "search-view.c"
	}
#line 446 "/run/build/folks/folks/search-view.vala"
	_tmp45_ = view_added;
#line 446 "/run/build/folks/folks/search-view.vala"
	_tmp46_ = gee_collection_get_size ((GeeCollection*) _tmp45_);
#line 446 "/run/build/folks/folks/search-view.vala"
	_tmp47_ = _tmp46_;
#line 446 "/run/build/folks/folks/search-view.vala"
	if (_tmp47_ > 0) {
#line 446 "/run/build/folks/folks/search-view.vala"
		_tmp44_ = TRUE;
#line 1509 "search-view.c"
	} else {
		GeeSortedSet* _tmp48_;
		gint _tmp49_;
		gint _tmp50_;
#line 446 "/run/build/folks/folks/search-view.vala"
		_tmp48_ = view_removed;
#line 446 "/run/build/folks/folks/search-view.vala"
		_tmp49_ = gee_collection_get_size ((GeeCollection*) _tmp48_);
#line 446 "/run/build/folks/folks/search-view.vala"
		_tmp50_ = _tmp49_;
#line 446 "/run/build/folks/folks/search-view.vala"
		_tmp44_ = _tmp50_ > 0;
#line 1522 "search-view.c"
	}
#line 446 "/run/build/folks/folks/search-view.vala"
	if (_tmp44_) {
#line 1526 "search-view.c"
		GeeSortedSet* _tmp51_;
		GeeSortedSet* _tmp52_;
#line 447 "/run/build/folks/folks/search-view.vala"
		_tmp51_ = view_added;
#line 447 "/run/build/folks/folks/search-view.vala"
		_tmp52_ = view_removed;
#line 447 "/run/build/folks/folks/search-view.vala"
		g_signal_emit (self, folks_search_view_signals[FOLKS_SEARCH_VIEW_INDIVIDUALS_CHANGED_DETAILED_SIGNAL], 0, _tmp51_, _tmp52_);
#line 1535 "search-view.c"
	}
#line 364 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (iter);
#line 364 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (view_removed);
#line 364 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (view_added);
#line 1543 "search-view.c"
}


static void
__folks_search_view_individual_notify_cb_g_object_notify (GObject* _sender,
                                                          GParamSpec* pspec,
                                                          gpointer self)
{
#line 454 "/run/build/folks/folks/search-view.vala"
	_folks_search_view_individual_notify_cb ((FolksSearchView*) self, _sender, pspec);
#line 1554 "search-view.c"
}


static inline gboolean
_folks_search_view_add_individual (FolksSearchView* self,
                                   FolksIndividual* individual)
{
	gboolean result = FALSE;
	GeeSortedSet* _tmp0_;
#line 450 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 450 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (individual != NULL, FALSE);
#line 452 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = self->priv->_individuals;
#line 452 "/run/build/folks/folks/search-view.vala"
	if (gee_collection_add ((GeeCollection*) _tmp0_, individual)) {
#line 454 "/run/build/folks/folks/search-view.vala"
		g_signal_connect_object ((GObject*) individual, "notify", (GCallback) __folks_search_view_individual_notify_cb_g_object_notify, self, 0);
#line 455 "/run/build/folks/folks/search-view.vala"
		result = TRUE;
#line 455 "/run/build/folks/folks/search-view.vala"
		return result;
#line 1578 "search-view.c"
	}
#line 458 "/run/build/folks/folks/search-view.vala"
	result = FALSE;
#line 458 "/run/build/folks/folks/search-view.vala"
	return result;
#line 1584 "search-view.c"
}


static inline gboolean
_folks_search_view_remove_individual (FolksSearchView* self,
                                      FolksIndividual* individual)
{
	gboolean result = FALSE;
	GeeSortedSet* _tmp0_;
#line 461 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 461 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (individual != NULL, FALSE);
#line 463 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = self->priv->_individuals;
#line 463 "/run/build/folks/folks/search-view.vala"
	if (gee_collection_remove ((GeeCollection*) _tmp0_, individual)) {
#line 1602 "search-view.c"
		guint _tmp1_;
#line 465 "/run/build/folks/folks/search-view.vala"
		g_signal_parse_name ("notify", G_TYPE_OBJECT, &_tmp1_, NULL, FALSE);
#line 465 "/run/build/folks/folks/search-view.vala"
		g_signal_handlers_disconnect_matched ((GObject*) individual, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp1_, 0, NULL, (GCallback) __folks_search_view_individual_notify_cb_g_object_notify, self);
#line 466 "/run/build/folks/folks/search-view.vala"
		result = TRUE;
#line 466 "/run/build/folks/folks/search-view.vala"
		return result;
#line 1612 "search-view.c"
	}
#line 469 "/run/build/folks/folks/search-view.vala"
	result = FALSE;
#line 469 "/run/build/folks/folks/search-view.vala"
	return result;
#line 1618 "search-view.c"
}


static void
_folks_search_view_evaluate_all_aggregator_individuals (FolksSearchView* self)
{
	GeeHashSet* individuals = NULL;
	GeeHashSet* _tmp0_;
	FolksIndividualAggregator* _tmp1_;
	GeeMap* _tmp2_;
	GeeMap* _tmp3_;
	GeeCollection* _tmp4_;
	GeeCollection* _tmp5_;
	GeeCollection* _tmp6_;
#line 472 "/run/build/folks/folks/search-view.vala"
	g_return_if_fail (self != NULL);
#line 474 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = gee_hash_set_new (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 474 "/run/build/folks/folks/search-view.vala"
	individuals = _tmp0_;
#line 475 "/run/build/folks/folks/search-view.vala"
	_tmp1_ = self->priv->_aggregator;
#line 475 "/run/build/folks/folks/search-view.vala"
	_tmp2_ = folks_individual_aggregator_get_individuals (_tmp1_);
#line 475 "/run/build/folks/folks/search-view.vala"
	_tmp3_ = _tmp2_;
#line 475 "/run/build/folks/folks/search-view.vala"
	_tmp4_ = gee_map_get_values (_tmp3_);
#line 475 "/run/build/folks/folks/search-view.vala"
	_tmp5_ = _tmp4_;
#line 475 "/run/build/folks/folks/search-view.vala"
	_tmp6_ = _tmp5_;
#line 475 "/run/build/folks/folks/search-view.vala"
	gee_collection_add_all ((GeeCollection*) individuals, _tmp6_);
#line 475 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (_tmp6_);
#line 476 "/run/build/folks/folks/search-view.vala"
	_folks_search_view_evaluate_individuals (self, NULL, (GeeSet*) individuals);
#line 472 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (individuals);
#line 1659 "search-view.c"
}


static gboolean
_folks_search_view_check_match (FolksSearchView* self,
                                FolksIndividual* individual)
{
	gboolean result = FALSE;
	guint match_score = 0U;
	FolksQuery* _tmp0_;
	gchar* key = NULL;
	gchar* _tmp1_;
#line 480 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 480 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (individual != NULL, FALSE);
#line 482 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = self->priv->_query;
#line 482 "/run/build/folks/folks/search-view.vala"
	match_score = folks_query_is_match (_tmp0_, individual);
#line 484 "/run/build/folks/folks/search-view.vala"
	_tmp1_ = _folks_search_view_build_match_strength_key (self);
#line 484 "/run/build/folks/folks/search-view.vala"
	key = _tmp1_;
#line 485 "/run/build/folks/folks/search-view.vala"
	g_object_set_data_full ((GObject*) individual, key, (gpointer) ((guintptr) match_score), NULL);
#line 487 "/run/build/folks/folks/search-view.vala"
	result = match_score != ((guint) 0);
#line 487 "/run/build/folks/folks/search-view.vala"
	_g_free0 (key);
#line 487 "/run/build/folks/folks/search-view.vala"
	return result;
#line 1692 "search-view.c"
}


static gboolean
_folks_search_view_evaluate_match (FolksSearchView* self,
                                   FolksIndividual* individual)
{
	gboolean result = FALSE;
	gboolean match = FALSE;
	gboolean _tmp0_;
#line 492 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 492 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (individual != NULL, FALSE);
#line 494 "/run/build/folks/folks/search-view.vala"
	match = _folks_search_view_check_match (self, individual);
#line 496 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = match;
#line 496 "/run/build/folks/folks/search-view.vala"
	if (_tmp0_) {
#line 498 "/run/build/folks/folks/search-view.vala"
		_folks_search_view_add_individual (self, individual);
#line 1715 "search-view.c"
	} else {
#line 502 "/run/build/folks/folks/search-view.vala"
		_folks_search_view_remove_individual (self, individual);
#line 1719 "search-view.c"
	}
#line 505 "/run/build/folks/folks/search-view.vala"
	result = match;
#line 505 "/run/build/folks/folks/search-view.vala"
	return result;
#line 1725 "search-view.c"
}


static void
_folks_search_view_individual_notify_cb (FolksSearchView* self,
                                         GObject* obj,
                                         GParamSpec* ps)
{
	FolksIndividual* individual = NULL;
	FolksIndividual* _tmp0_;
	FolksIndividual* _tmp1_;
	gboolean had_individual = FALSE;
	GeeSortedSet* _tmp2_;
	FolksIndividual* _tmp3_;
	gboolean have_individual = FALSE;
	FolksIndividual* _tmp4_;
	gboolean _tmp5_ = FALSE;
	gboolean _tmp6_;
	gboolean added = FALSE;
	gboolean _tmp8_ = FALSE;
	gboolean _tmp9_;
	gboolean removed = FALSE;
	GeeSortedSet* view_added = NULL;
	GeeSortedSet* _tmp11_;
	GeeSortedSet* view_removed = NULL;
	GeeSortedSet* _tmp12_;
	gboolean _tmp13_;
	gboolean _tmp19_ = FALSE;
	GeeSortedSet* _tmp20_;
	gint _tmp21_;
	gint _tmp22_;
#line 508 "/run/build/folks/folks/search-view.vala"
	g_return_if_fail (self != NULL);
#line 508 "/run/build/folks/folks/search-view.vala"
	g_return_if_fail (obj != NULL);
#line 508 "/run/build/folks/folks/search-view.vala"
	g_return_if_fail (ps != NULL);
#line 510 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (obj, FOLKS_TYPE_INDIVIDUAL) ? ((FolksIndividual*) obj) : NULL);
#line 510 "/run/build/folks/folks/search-view.vala"
	individual = _tmp0_;
#line 512 "/run/build/folks/folks/search-view.vala"
	_tmp1_ = individual;
#line 512 "/run/build/folks/folks/search-view.vala"
	if (_tmp1_ == NULL) {
#line 513 "/run/build/folks/folks/search-view.vala"
		_g_object_unref0 (individual);
#line 513 "/run/build/folks/folks/search-view.vala"
		return;
#line 1775 "search-view.c"
	}
#line 515 "/run/build/folks/folks/search-view.vala"
	_tmp2_ = self->priv->_individuals;
#line 515 "/run/build/folks/folks/search-view.vala"
	_tmp3_ = individual;
#line 515 "/run/build/folks/folks/search-view.vala"
	had_individual = gee_collection_contains ((GeeCollection*) _tmp2_, _tmp3_);
#line 516 "/run/build/folks/folks/search-view.vala"
	_tmp4_ = individual;
#line 516 "/run/build/folks/folks/search-view.vala"
	have_individual = _folks_search_view_evaluate_match (self, _tmp4_);
#line 518 "/run/build/folks/folks/search-view.vala"
	_tmp6_ = had_individual;
#line 518 "/run/build/folks/folks/search-view.vala"
	if (!_tmp6_) {
#line 1791 "search-view.c"
		gboolean _tmp7_;
#line 518 "/run/build/folks/folks/search-view.vala"
		_tmp7_ = have_individual;
#line 518 "/run/build/folks/folks/search-view.vala"
		_tmp5_ = _tmp7_;
#line 1797 "search-view.c"
	} else {
#line 518 "/run/build/folks/folks/search-view.vala"
		_tmp5_ = FALSE;
#line 1801 "search-view.c"
	}
#line 518 "/run/build/folks/folks/search-view.vala"
	added = _tmp5_;
#line 519 "/run/build/folks/folks/search-view.vala"
	_tmp9_ = had_individual;
#line 519 "/run/build/folks/folks/search-view.vala"
	if (_tmp9_) {
#line 1809 "search-view.c"
		gboolean _tmp10_;
#line 519 "/run/build/folks/folks/search-view.vala"
		_tmp10_ = have_individual;
#line 519 "/run/build/folks/folks/search-view.vala"
		_tmp8_ = !_tmp10_;
#line 1815 "search-view.c"
	} else {
#line 519 "/run/build/folks/folks/search-view.vala"
		_tmp8_ = FALSE;
#line 1819 "search-view.c"
	}
#line 519 "/run/build/folks/folks/search-view.vala"
	removed = _tmp8_;
#line 520 "/run/build/folks/folks/search-view.vala"
	_tmp11_ = _folks_search_view_create_empty_sorted_set (self);
#line 520 "/run/build/folks/folks/search-view.vala"
	view_added = _tmp11_;
#line 521 "/run/build/folks/folks/search-view.vala"
	_tmp12_ = _folks_search_view_create_empty_sorted_set (self);
#line 521 "/run/build/folks/folks/search-view.vala"
	view_removed = _tmp12_;
#line 523 "/run/build/folks/folks/search-view.vala"
	_tmp13_ = added;
#line 523 "/run/build/folks/folks/search-view.vala"
	if (_tmp13_) {
#line 1835 "search-view.c"
		GeeSortedSet* _tmp14_;
		FolksIndividual* _tmp15_;
#line 524 "/run/build/folks/folks/search-view.vala"
		_tmp14_ = view_added;
#line 524 "/run/build/folks/folks/search-view.vala"
		_tmp15_ = individual;
#line 524 "/run/build/folks/folks/search-view.vala"
		gee_collection_add ((GeeCollection*) _tmp14_, _tmp15_);
#line 1844 "search-view.c"
	} else {
		gboolean _tmp16_;
#line 525 "/run/build/folks/folks/search-view.vala"
		_tmp16_ = removed;
#line 525 "/run/build/folks/folks/search-view.vala"
		if (_tmp16_) {
#line 1851 "search-view.c"
			GeeSortedSet* _tmp17_;
			FolksIndividual* _tmp18_;
#line 526 "/run/build/folks/folks/search-view.vala"
			_tmp17_ = view_removed;
#line 526 "/run/build/folks/folks/search-view.vala"
			_tmp18_ = individual;
#line 526 "/run/build/folks/folks/search-view.vala"
			gee_collection_add ((GeeCollection*) _tmp17_, _tmp18_);
#line 1860 "search-view.c"
		}
	}
#line 528 "/run/build/folks/folks/search-view.vala"
	_tmp20_ = view_added;
#line 528 "/run/build/folks/folks/search-view.vala"
	_tmp21_ = gee_collection_get_size ((GeeCollection*) _tmp20_);
#line 528 "/run/build/folks/folks/search-view.vala"
	_tmp22_ = _tmp21_;
#line 528 "/run/build/folks/folks/search-view.vala"
	if (_tmp22_ > 0) {
#line 528 "/run/build/folks/folks/search-view.vala"
		_tmp19_ = TRUE;
#line 1873 "search-view.c"
	} else {
		GeeSortedSet* _tmp23_;
		gint _tmp24_;
		gint _tmp25_;
#line 528 "/run/build/folks/folks/search-view.vala"
		_tmp23_ = view_removed;
#line 528 "/run/build/folks/folks/search-view.vala"
		_tmp24_ = gee_collection_get_size ((GeeCollection*) _tmp23_);
#line 528 "/run/build/folks/folks/search-view.vala"
		_tmp25_ = _tmp24_;
#line 528 "/run/build/folks/folks/search-view.vala"
		_tmp19_ = _tmp25_ > 0;
#line 1886 "search-view.c"
	}
#line 528 "/run/build/folks/folks/search-view.vala"
	if (_tmp19_) {
#line 1890 "search-view.c"
		GeeSortedSet* _tmp26_;
		GeeSortedSet* _tmp27_;
#line 529 "/run/build/folks/folks/search-view.vala"
		_tmp26_ = view_added;
#line 529 "/run/build/folks/folks/search-view.vala"
		_tmp27_ = view_removed;
#line 529 "/run/build/folks/folks/search-view.vala"
		g_signal_emit (self, folks_search_view_signals[FOLKS_SEARCH_VIEW_INDIVIDUALS_CHANGED_DETAILED_SIGNAL], 0, _tmp26_, _tmp27_);
#line 1899 "search-view.c"
	}
#line 508 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (view_removed);
#line 508 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (view_added);
#line 508 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (individual);
#line 1907 "search-view.c"
}


static void
_folks_search_view_query_notify_cb (FolksSearchView* self,
                                    GObject* obj,
                                    GParamSpec* ps)
{
#line 532 "/run/build/folks/folks/search-view.vala"
	g_return_if_fail (self != NULL);
#line 532 "/run/build/folks/folks/search-view.vala"
	g_return_if_fail (obj != NULL);
#line 532 "/run/build/folks/folks/search-view.vala"
	g_return_if_fail (ps != NULL);
#line 534 "/run/build/folks/folks/search-view.vala"
	g_debug ("search-view.vala:534: %s", "SearchView's Query changed, forcing re-evaluation of all " "Individuals");
#line 536 "/run/build/folks/folks/search-view.vala"
	folks_search_view_refresh (self, NULL, NULL);
#line 1926 "search-view.c"
}


FolksIndividualAggregator*
folks_search_view_get_aggregator (FolksSearchView* self)
{
	FolksIndividualAggregator* result;
	FolksIndividualAggregator* _tmp0_;
#line 57 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 57 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = self->priv->_aggregator;
#line 57 "/run/build/folks/folks/search-view.vala"
	result = _tmp0_;
#line 57 "/run/build/folks/folks/search-view.vala"
	return result;
#line 1943 "search-view.c"
}


FolksQuery*
folks_search_view_get_query (FolksSearchView* self)
{
	FolksQuery* result;
	FolksQuery* _tmp0_;
#line 76 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 76 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = self->priv->_query;
#line 76 "/run/build/folks/folks/search-view.vala"
	result = _tmp0_;
#line 76 "/run/build/folks/folks/search-view.vala"
	return result;
#line 1960 "search-view.c"
}


static void
__folks_search_view_query_notify_cb_g_object_notify (GObject* _sender,
                                                     GParamSpec* pspec,
                                                     gpointer self)
{
#line 88 "/run/build/folks/folks/search-view.vala"
	_folks_search_view_query_notify_cb ((FolksSearchView*) self, _sender, pspec);
#line 1971 "search-view.c"
}


void
folks_search_view_set_query (FolksSearchView* self,
                             FolksQuery* value)
{
	FolksQuery* _tmp0_;
	FolksQuery* _tmp1_;
	FolksQuery* _tmp2_;
	guint _tmp3_;
	FolksQuery* _tmp4_;
	FolksQuery* _tmp5_;
#line 77 "/run/build/folks/folks/search-view.vala"
	g_return_if_fail (self != NULL);
#line 79 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = self->priv->_query;
#line 79 "/run/build/folks/folks/search-view.vala"
	if (_tmp0_ == value) {
#line 80 "/run/build/folks/folks/search-view.vala"
		return;
#line 1993 "search-view.c"
	}
#line 82 "/run/build/folks/folks/search-view.vala"
	_tmp1_ = self->priv->_query;
#line 82 "/run/build/folks/folks/search-view.vala"
	if (_tmp1_ != NULL) {
#line 84 "/run/build/folks/folks/search-view.vala"
		g_debug ("search-view.vala:84: %s", "SearchView's query replaced, forcing re-evaluation of " "all Individuals.");
#line 2001 "search-view.c"
	}
#line 88 "/run/build/folks/folks/search-view.vala"
	_tmp2_ = self->priv->_query;
#line 88 "/run/build/folks/folks/search-view.vala"
	g_signal_parse_name ("notify", G_TYPE_OBJECT, &_tmp3_, NULL, FALSE);
#line 88 "/run/build/folks/folks/search-view.vala"
	g_signal_handlers_disconnect_matched ((GObject*) _tmp2_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp3_, 0, NULL, (GCallback) __folks_search_view_query_notify_cb_g_object_notify, self);
#line 89 "/run/build/folks/folks/search-view.vala"
	_tmp4_ = _g_object_ref0 (value);
#line 89 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (self->priv->_query);
#line 89 "/run/build/folks/folks/search-view.vala"
	self->priv->_query = _tmp4_;
#line 90 "/run/build/folks/folks/search-view.vala"
	_tmp5_ = self->priv->_query;
#line 90 "/run/build/folks/folks/search-view.vala"
	g_signal_connect_object ((GObject*) _tmp5_, "notify", (GCallback) __folks_search_view_query_notify_cb_g_object_notify, self, 0);
#line 93 "/run/build/folks/folks/search-view.vala"
	folks_search_view_refresh (self, NULL, NULL);
#line 77 "/run/build/folks/folks/search-view.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_search_view_properties[FOLKS_SEARCH_VIEW_QUERY_PROPERTY]);
#line 2023 "search-view.c"
}


GeeSortedSet*
folks_search_view_get_individuals (FolksSearchView* self)
{
	GeeSortedSet* result;
	GeeSortedSet* _tmp0_;
#line 120 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 120 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = self->priv->_individuals_ro;
#line 120 "/run/build/folks/folks/search-view.vala"
	result = _tmp0_;
#line 120 "/run/build/folks/folks/search-view.vala"
	return result;
#line 2040 "search-view.c"
}


gboolean
folks_search_view_get_is_prepared (FolksSearchView* self)
{
	gboolean result;
	gboolean _tmp0_;
#line 132 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 132 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = self->priv->_is_prepared;
#line 132 "/run/build/folks/folks/search-view.vala"
	result = _tmp0_;
#line 132 "/run/build/folks/folks/search-view.vala"
	return result;
#line 2057 "search-view.c"
}


gboolean
folks_search_view_get_is_quiescent (FolksSearchView* self)
{
	gboolean result;
	FolksIndividualAggregator* _tmp0_;
	FolksIndividualAggregator* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
#line 149 "/run/build/folks/folks/search-view.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 149 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = folks_search_view_get_aggregator (self);
#line 149 "/run/build/folks/folks/search-view.vala"
	_tmp1_ = _tmp0_;
#line 149 "/run/build/folks/folks/search-view.vala"
	_tmp2_ = folks_individual_aggregator_get_is_quiescent (_tmp1_);
#line 149 "/run/build/folks/folks/search-view.vala"
	_tmp3_ = _tmp2_;
#line 149 "/run/build/folks/folks/search-view.vala"
	result = _tmp3_;
#line 149 "/run/build/folks/folks/search-view.vala"
	return result;
#line 2083 "search-view.c"
}


static void
g_cclosure_user_marshal_VOID__OBJECT_OBJECT (GClosure * closure,
                                             GValue * return_value,
                                             guint n_param_values,
                                             const GValue * param_values,
                                             gpointer invocation_hint,
                                             gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECT_OBJECT) (gpointer data1, gpointer arg_1, gpointer arg_2, gpointer data2);
	register GMarshalFunc_VOID__OBJECT_OBJECT callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 45 "/run/build/folks/folks/search-view.vala"
	g_return_if_fail (n_param_values == 3);
#line 45 "/run/build/folks/folks/search-view.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 45 "/run/build/folks/folks/search-view.vala"
		data1 = closure->data;
#line 45 "/run/build/folks/folks/search-view.vala"
		data2 = param_values->data[0].v_pointer;
#line 2109 "search-view.c"
	} else {
#line 45 "/run/build/folks/folks/search-view.vala"
		data1 = param_values->data[0].v_pointer;
#line 45 "/run/build/folks/folks/search-view.vala"
		data2 = closure->data;
#line 2115 "search-view.c"
	}
#line 45 "/run/build/folks/folks/search-view.vala"
	callback = (GMarshalFunc_VOID__OBJECT_OBJECT) (marshal_data ? marshal_data : cc->callback);
#line 45 "/run/build/folks/folks/search-view.vala"
	callback (data1, g_value_get_object (param_values + 1), g_value_get_object (param_values + 2), data2);
#line 2121 "search-view.c"
}


static void
folks_search_view_class_init (FolksSearchViewClass * klass)
{
#line 45 "/run/build/folks/folks/search-view.vala"
	folks_search_view_parent_class = g_type_class_peek_parent (klass);
#line 45 "/run/build/folks/folks/search-view.vala"
	g_type_class_add_private (klass, sizeof (FolksSearchViewPrivate));
#line 45 "/run/build/folks/folks/search-view.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_folks_search_view_get_property;
#line 45 "/run/build/folks/folks/search-view.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_folks_search_view_set_property;
#line 45 "/run/build/folks/folks/search-view.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_search_view_finalize;
#line 2138 "search-view.c"
	/**
	   * The {@link IndividualAggregator} that this view is based upon.
	   *
	   * @since 0.11.0
	   */
#line 45 "/run/build/folks/folks/search-view.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_SEARCH_VIEW_AGGREGATOR_PROPERTY, folks_search_view_properties[FOLKS_SEARCH_VIEW_AGGREGATOR_PROPERTY] = g_param_spec_object ("aggregator", "aggregator", "aggregator", FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 2146 "search-view.c"
	/**
	   * The {@link Query} that this view is based upon.
	   *
	   * If this {@link SearchView} has already been prepared, setting this will
	   * force a re-evaluation of all {@link Individual}s in the
	   * {@link IndividualAggregator} which can be an expensive operation.
	   *
	   * This re-evaluates the query immediately, so most clients should implement
	   * de-bouncing to ensure re-evaluation only happens when (for example) the
	   * user has stopped typing a new query.
	   *
	   * @since 0.11.0
	   */
#line 45 "/run/build/folks/folks/search-view.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_SEARCH_VIEW_QUERY_PROPERTY, folks_search_view_properties[FOLKS_SEARCH_VIEW_QUERY_PROPERTY] = g_param_spec_object ("query", "query", "query", FOLKS_TYPE_QUERY, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 2162 "search-view.c"
	/**
	   * A sorted set of {@link Individual}s which match the search query.
	   *
	   * This is the canonical set of {@link Individual}s provided by this
	   * view. It is sorted by match strength, with the individual who is the best
	   * match to the search query as the {@link Gee.SortedSet.first} element of
	   * the set.
	   *
	   * Match strengths are not publicly exposed, as they are on an arbitrary
	   * scale. To compare two matching individuals for match strength, check for
	   * membership of one of them in the {@link Gee.SortedSet.head_set} of the
	   * other.
	   *
	   * For clients who only wish to have a snapshot of search results, this
	   * property is valid once {@link SearchView.prepare} is finished and this
	   * {@link SearchView} may be unreferenced and ignored afterward.
	   *
	   * @since 0.11.0
	   */
#line 45 "/run/build/folks/folks/search-view.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_SEARCH_VIEW_INDIVIDUALS_PROPERTY, folks_search_view_properties[FOLKS_SEARCH_VIEW_INDIVIDUALS_PROPERTY] = g_param_spec_object ("individuals", "individuals", "individuals", GEE_TYPE_SORTED_SET, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 2184 "search-view.c"
	/**
	   * Whether {@link IndividualAggregator.prepare} has successfully completed for
	   * this view's aggregator.
	   *
	   * @since 0.11.0
	   */
#line 45 "/run/build/folks/folks/search-view.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_SEARCH_VIEW_IS_PREPARED_PROPERTY, folks_search_view_properties[FOLKS_SEARCH_VIEW_IS_PREPARED_PROPERTY] = g_param_spec_boolean ("is-prepared", "is-prepared", "is-prepared", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 2193 "search-view.c"
	/**
	   * Whether the search view has reached a quiescent state. This will happen at
	   * some point after {@link IndividualAggregator.prepare} has successfully
	   * completed for its aggregator.
	   *
	   * It's guaranteed that this property's value will only ever change after
	   * {@link SearchView.is_prepared} has changed to ``true``.
	   *
	   * @since 0.11.0
	   */
#line 45 "/run/build/folks/folks/search-view.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_SEARCH_VIEW_IS_QUIESCENT_PROPERTY, folks_search_view_properties[FOLKS_SEARCH_VIEW_IS_QUIESCENT_PROPERTY] = g_param_spec_boolean ("is-quiescent", "is-quiescent", "is-quiescent", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 2206 "search-view.c"
	/**
	   * Emitted when one or more {@link Individual}s are added to or removed from
	   * the view.
	   *
	   * The sets of `added` and `removed` individuals are sorted by descending
	   * match strength. Using the {@link Gee.SortedSet.lower} and
	   * {@link Gee.SortedSet.higher} APIs with {@link SearchView.individuals}, the
	   * `added` individuals can be inserted at the correct positions in a UI
	   * representation of the search view.
	   *
	   * The match strengths are on the same scale as in
	   * {@link SearchView.individuals}, so orderings between the two sorted sets
	   * are valid. See {@link SearchView.individuals} for more information about
	   * match strengths.
	   *
	   * @param added a set of {@link Individual}s added to the search view
	   * @param removed a set of {@link Individual}s removed from the search view
	   *
	   * @see IndividualAggregator.individuals_changed_detailed
	   * @since 0.11.0
	   */
#line 45 "/run/build/folks/folks/search-view.vala"
	folks_search_view_signals[FOLKS_SEARCH_VIEW_INDIVIDUALS_CHANGED_DETAILED_SIGNAL] = g_signal_new ("individuals-changed-detailed", FOLKS_TYPE_SEARCH_VIEW, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECT_OBJECT, G_TYPE_NONE, 2, GEE_TYPE_SORTED_SET, GEE_TYPE_SORTED_SET);
#line 2230 "search-view.c"
}


static void
folks_search_view_instance_init (FolksSearchView * self)
{
#line 45 "/run/build/folks/folks/search-view.vala"
	self->priv = FOLKS_SEARCH_VIEW_GET_PRIVATE (self);
#line 47 "/run/build/folks/folks/search-view.vala"
	self->priv->_prepare_pending = FALSE;
#line 123 "/run/build/folks/folks/search-view.vala"
	self->priv->_is_prepared = FALSE;
#line 2243 "search-view.c"
}


static void
folks_search_view_finalize (GObject * obj)
{
	FolksSearchView * self;
	FolksIndividualAggregator* _tmp0_;
	guint _tmp1_;
	GQuark _tmp2_;
#line 45 "/run/build/folks/folks/search-view.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_SEARCH_VIEW, FolksSearchView);
#line 208 "/run/build/folks/folks/search-view.vala"
	g_debug ("search-view.vala:208: Destroying SearchView %p", self);
#line 210 "/run/build/folks/folks/search-view.vala"
	_tmp0_ = self->priv->_aggregator;
#line 210 "/run/build/folks/folks/search-view.vala"
	g_signal_parse_name ("notify::is-quiescent", G_TYPE_OBJECT, &_tmp1_, &_tmp2_, TRUE);
#line 210 "/run/build/folks/folks/search-view.vala"
	g_signal_handlers_disconnect_matched ((GObject*) _tmp0_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_DETAIL | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp1_, _tmp2_, NULL, (GCallback) __folks_search_view_aggregator_is_quiescent_cb_g_object_notify, self);
#line 49 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (self->priv->_aggregator);
#line 60 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (self->priv->_query);
#line 97 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (self->priv->_individuals);
#line 98 "/run/build/folks/folks/search-view.vala"
	_g_object_unref0 (self->priv->_individuals_ro);
#line 45 "/run/build/folks/folks/search-view.vala"
	G_OBJECT_CLASS (folks_search_view_parent_class)->finalize (obj);
#line 2274 "search-view.c"
}


/**
 * A view of {@link Individual}s which match a given {@link Query}.
 *
 * The search view supports ‘live’ and ‘snapshot’ search results. Live results
 * will continue to update over a long period of time as persona stores go
 * online and offline or individuals are edited so they start or stop matching
 * the {@link Query}.
 *
 * For a shell search provider, for example, snapshot results are appropriate.
 * For a search in a contacts UI, live results are more appropriate as they will
 * update over time as other edits are made in the application.
 *
 * In both cases, {@link SearchView.individuals} is guaranteed to be correct
 * after {@link SearchView.prepare} finishes.
 *
 * For live results, continue listening to the
 * {@link SearchView.individuals_changed_detailed} signal.
 *
 * @since 0.11.0
 */
GType
folks_search_view_get_type (void)
{
	static volatile gsize folks_search_view_type_id__volatile = 0;
	if (g_once_init_enter (&folks_search_view_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksSearchViewClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_search_view_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksSearchView), 0, (GInstanceInitFunc) folks_search_view_instance_init, NULL };
		GType folks_search_view_type_id;
		folks_search_view_type_id = g_type_register_static (G_TYPE_OBJECT, "FolksSearchView", &g_define_type_info, 0);
		g_once_init_leave (&folks_search_view_type_id__volatile, folks_search_view_type_id);
	}
	return folks_search_view_type_id__volatile;
}


static void
_vala_folks_search_view_get_property (GObject * object,
                                      guint property_id,
                                      GValue * value,
                                      GParamSpec * pspec)
{
	FolksSearchView * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_SEARCH_VIEW, FolksSearchView);
#line 45 "/run/build/folks/folks/search-view.vala"
	switch (property_id) {
#line 45 "/run/build/folks/folks/search-view.vala"
		case FOLKS_SEARCH_VIEW_AGGREGATOR_PROPERTY:
#line 45 "/run/build/folks/folks/search-view.vala"
		g_value_set_object (value, folks_search_view_get_aggregator (self));
#line 45 "/run/build/folks/folks/search-view.vala"
		break;
#line 45 "/run/build/folks/folks/search-view.vala"
		case FOLKS_SEARCH_VIEW_QUERY_PROPERTY:
#line 45 "/run/build/folks/folks/search-view.vala"
		g_value_set_object (value, folks_search_view_get_query (self));
#line 45 "/run/build/folks/folks/search-view.vala"
		break;
#line 45 "/run/build/folks/folks/search-view.vala"
		case FOLKS_SEARCH_VIEW_INDIVIDUALS_PROPERTY:
#line 45 "/run/build/folks/folks/search-view.vala"
		g_value_set_object (value, folks_search_view_get_individuals (self));
#line 45 "/run/build/folks/folks/search-view.vala"
		break;
#line 45 "/run/build/folks/folks/search-view.vala"
		case FOLKS_SEARCH_VIEW_IS_PREPARED_PROPERTY:
#line 45 "/run/build/folks/folks/search-view.vala"
		g_value_set_boolean (value, folks_search_view_get_is_prepared (self));
#line 45 "/run/build/folks/folks/search-view.vala"
		break;
#line 45 "/run/build/folks/folks/search-view.vala"
		case FOLKS_SEARCH_VIEW_IS_QUIESCENT_PROPERTY:
#line 45 "/run/build/folks/folks/search-view.vala"
		g_value_set_boolean (value, folks_search_view_get_is_quiescent (self));
#line 45 "/run/build/folks/folks/search-view.vala"
		break;
#line 2352 "search-view.c"
		default:
#line 45 "/run/build/folks/folks/search-view.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 45 "/run/build/folks/folks/search-view.vala"
		break;
#line 2358 "search-view.c"
	}
}


static void
_vala_folks_search_view_set_property (GObject * object,
                                      guint property_id,
                                      const GValue * value,
                                      GParamSpec * pspec)
{
	FolksSearchView * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_SEARCH_VIEW, FolksSearchView);
#line 45 "/run/build/folks/folks/search-view.vala"
	switch (property_id) {
#line 45 "/run/build/folks/folks/search-view.vala"
		case FOLKS_SEARCH_VIEW_QUERY_PROPERTY:
#line 45 "/run/build/folks/folks/search-view.vala"
		folks_search_view_set_query (self, g_value_get_object (value));
#line 45 "/run/build/folks/folks/search-view.vala"
		break;
#line 2379 "search-view.c"
		default:
#line 45 "/run/build/folks/folks/search-view.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 45 "/run/build/folks/folks/search-view.vala"
		break;
#line 2385 "search-view.c"
	}
}



