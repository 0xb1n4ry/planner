/* command-set.c generated by valac 0.40.11, the Vala compiler
 * generated from command-set.vala, do not modify */

/*
 * Copyright (C) 2012 Jeremy Whiting <jeremy.whiting@collabora.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Jeremy Whiting <jeremy.whiting@collabora.com>
 */


#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <folks/folks.h>
#include <gee.h>
#include <stdio.h>
#include <readline/readline.h>


#define FOLKS_INSPECT_TYPE_COMMAND (folks_inspect_command_get_type ())
#define FOLKS_INSPECT_COMMAND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_INSPECT_TYPE_COMMAND, FolksInspectCommand))
#define FOLKS_INSPECT_COMMAND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_INSPECT_TYPE_COMMAND, FolksInspectCommandClass))
#define FOLKS_INSPECT_IS_COMMAND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_INSPECT_TYPE_COMMAND))
#define FOLKS_INSPECT_IS_COMMAND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_INSPECT_TYPE_COMMAND))
#define FOLKS_INSPECT_COMMAND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_INSPECT_TYPE_COMMAND, FolksInspectCommandClass))

typedef struct _FolksInspectCommand FolksInspectCommand;
typedef struct _FolksInspectCommandClass FolksInspectCommandClass;
typedef struct _FolksInspectCommandPrivate FolksInspectCommandPrivate;

#define FOLKS_INSPECT_TYPE_CLIENT (folks_inspect_client_get_type ())
#define FOLKS_INSPECT_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_INSPECT_TYPE_CLIENT, FolksInspectClient))
#define FOLKS_INSPECT_CLIENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_INSPECT_TYPE_CLIENT, FolksInspectClientClass))
#define FOLKS_INSPECT_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_INSPECT_TYPE_CLIENT))
#define FOLKS_INSPECT_IS_CLIENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_INSPECT_TYPE_CLIENT))
#define FOLKS_INSPECT_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_INSPECT_TYPE_CLIENT, FolksInspectClientClass))

typedef struct _FolksInspectClient FolksInspectClient;
typedef struct _FolksInspectClientClass FolksInspectClientClass;

#define FOLKS_INSPECT_COMMANDS_TYPE_SET (folks_inspect_commands_set_get_type ())
#define FOLKS_INSPECT_COMMANDS_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_INSPECT_COMMANDS_TYPE_SET, FolksInspectCommandsSet))
#define FOLKS_INSPECT_COMMANDS_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_INSPECT_COMMANDS_TYPE_SET, FolksInspectCommandsSetClass))
#define FOLKS_INSPECT_COMMANDS_IS_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_INSPECT_COMMANDS_TYPE_SET))
#define FOLKS_INSPECT_COMMANDS_IS_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_INSPECT_COMMANDS_TYPE_SET))
#define FOLKS_INSPECT_COMMANDS_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_INSPECT_COMMANDS_TYPE_SET, FolksInspectCommandsSetClass))

typedef struct _FolksInspectCommandsSet FolksInspectCommandsSet;
typedef struct _FolksInspectCommandsSetClass FolksInspectCommandsSetClass;
typedef struct _FolksInspectCommandsSetPrivate FolksInspectCommandsSetPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _folks_inspect_command_unref0(var) ((var == NULL) ? NULL : (var = (folks_inspect_command_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _FolksInspectCommandsSetRunData FolksInspectCommandsSetRunData;

struct _FolksInspectCommand {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FolksInspectCommandPrivate * priv;
	FolksInspectClient* client;
};

struct _FolksInspectCommandClass {
	GTypeClass parent_class;
	void (*finalize) (FolksInspectCommand *self);
	void (*run) (FolksInspectCommand* self, const gchar* command_string, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*run_finish) (FolksInspectCommand* self, GAsyncResult* _res_);
	gchar** (*complete_subcommand) (FolksInspectCommand* self, const gchar* subcommand, int* result_length1);
	const gchar* (*get_name) (FolksInspectCommand* self);
	const gchar* (*get_description) (FolksInspectCommand* self);
	const gchar* (*get_help) (FolksInspectCommand* self);
};

struct _FolksInspectCommandsSet {
	FolksInspectCommand parent_instance;
	FolksInspectCommandsSetPrivate * priv;
};

struct _FolksInspectCommandsSetClass {
	FolksInspectCommandClass parent_class;
};

struct _FolksInspectCommandsSetRunData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksInspectCommandsSet* self;
	gchar* command_string;
	gint result;
	gchar** parts;
	gchar** _tmp0_;
	gint parts_length1;
	gint _parts_size_;
	gchar** _tmp1_;
	gchar** _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	gchar** _tmp5_;
	gint _tmp5__length1;
	const gchar* _tmp6_;
	gchar** _tmp7_;
	gint _tmp7__length1;
	const gchar* _tmp8_;
	gchar** _tmp9_;
	gint _tmp9__length1;
	gboolean _tmp10_;
	gchar** _tmp11_;
	gint _tmp11__length1;
	const gchar* _tmp12_;
	gchar** _tmp13_;
	gint _tmp13__length1;
	const gchar* _tmp14_;
	gchar* _tmp15_;
	gchar* _tmp16_;
	gchar** _tmp17_;
	gint _tmp17__length1;
	const gchar* _tmp18_;
	gchar* id;
	gchar** _tmp19_;
	gint _tmp19__length1;
	const gchar* _tmp20_;
	gchar* _tmp21_;
	FolksIndividual* individual;
	FolksInspectClient* _tmp22_;
	FolksIndividualAggregator* _tmp23_;
	FolksIndividualAggregator* _tmp24_;
	GeeMap* _tmp25_;
	GeeMap* _tmp26_;
	const gchar* _tmp27_;
	gpointer _tmp28_;
	FolksIndividual* _tmp29_;
	const gchar* _tmp30_;
	FolksPersona* persona;
	FolksInspectClient* _tmp31_;
	FolksIndividualAggregator* _tmp32_;
	FolksIndividualAggregator* _tmp33_;
	FolksIndividual* _tmp34_;
	FolksPersona* _tmp35_;
	FolksPersona* _tmp36_;
	FolksIndividual* _tmp37_;
	FolksIndividual* _tmp38_;
	gchar** _tmp39_;
	gint _tmp39__length1;
	const gchar* _tmp40_;
	gchar** _tmp41_;
	gint _tmp41__length1;
	const gchar* _tmp42_;
	GError* e;
	gchar** _tmp43_;
	gint _tmp43__length1;
	const gchar* _tmp44_;
	GError * _inner_error_;
};


static gpointer folks_inspect_commands_set_parent_class = NULL;
static gchar** folks_inspect_commands_set_subcommand_completions;
static gchar** folks_inspect_commands_set_subcommand_completions = NULL;
static guint folks_inspect_commands_set_completion_count;
static guint folks_inspect_commands_set_completion_count = 0U;
static gchar* folks_inspect_commands_set_prefix;
static gchar* folks_inspect_commands_set_prefix = NULL;

gpointer folks_inspect_command_ref (gpointer instance);
void folks_inspect_command_unref (gpointer instance);
GParamSpec* folks_inspect_param_spec_command (const gchar* name,
                                              const gchar* nick,
                                              const gchar* blurb,
                                              GType object_type,
                                              GParamFlags flags);
void folks_inspect_value_set_command (GValue* value,
                                      gpointer v_object);
void folks_inspect_value_take_command (GValue* value,
                                       gpointer v_object);
gpointer folks_inspect_value_get_command (const GValue* value);
GType folks_inspect_command_get_type (void) G_GNUC_CONST;
GType folks_inspect_client_get_type (void) G_GNUC_CONST;
GType folks_inspect_commands_set_get_type (void) G_GNUC_CONST;
FolksInspectCommandsSet* folks_inspect_commands_set_new (FolksInspectClient* client);
FolksInspectCommandsSet* folks_inspect_commands_set_construct (GType object_type,
                                                               FolksInspectClient* client);
FolksInspectCommand* folks_inspect_command_construct (GType object_type,
                                                      FolksInspectClient* client);
static void folks_inspect_commands_set_real_run_data_free (gpointer _data);
static void folks_inspect_commands_set_real_run_async_ready_wrapper (GObject *source_object,
                                                              GAsyncResult *res,
                                                              void *user_data);
static void folks_inspect_commands_set_real_run (FolksInspectCommand* base,
                                          const gchar* command_string,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_);
static gboolean folks_inspect_commands_set_real_run_co (FolksInspectCommandsSetRunData* _data_);
gboolean folks_inspect_utils_validate_subcommand (const gchar* command,
                                                  const gchar* command_string,
                                                  const gchar* subcommand,
                                                  gchar** valid_subcommands,
                                                  int valid_subcommands_length1);
const gchar* folks_inspect_command_get_name (FolksInspectCommand* self);
void folks_inspect_utils_print_line (const gchar* format,
                                     ...) G_GNUC_PRINTF(1,2);
FolksIndividualAggregator* folks_inspect_client_get_aggregator (FolksInspectClient* self);
static void folks_inspect_commands_set_run_ready (GObject* source_object,
                                           GAsyncResult* _res_,
                                           gpointer _user_data_);
gchar* folks_inspect_commands_set_subcommand_name_completion_cb (const gchar* word,
                                                                 gint state);
gchar* folks_inspect_utils_individual_id_completion_cb (const gchar* word,
                                                        gint state);
static gchar* _folks_inspect_utils_individual_id_completion_cb_rl_compentry_func_t (const gchar* str,
                                                                             gint a);
static gchar** _vala_array_dup11 (gchar** self,
                           int length);
static gchar** _vala_array_dup12 (gchar** self,
                           int length);
static gchar** folks_inspect_commands_set_real_complete_subcommand (FolksInspectCommand* base,
                                                             const gchar* subcommand,
                                                             int* result_length1);
static gchar* _folks_inspect_commands_set_subcommand_name_completion_cb_rl_compentry_func_t (const gchar* str,
                                                                                      gint a);
static gchar** _vala_array_dup13 (gchar** self,
                           int length);
static void folks_inspect_commands_set_finalize (FolksInspectCommand * obj);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

static const gchar* FOLKS_INSPECT_COMMANDS_SET__valid_subcommands[1] = {"alias"};

FolksInspectCommandsSet*
folks_inspect_commands_set_construct (GType object_type,
                                      FolksInspectClient* client)
{
	FolksInspectCommandsSet* self = NULL;
#line 54 "/run/build/folks/tools/inspect/command-set.vala"
	g_return_val_if_fail (client != NULL, NULL);
#line 56 "/run/build/folks/tools/inspect/command-set.vala"
	self = (FolksInspectCommandsSet*) folks_inspect_command_construct (object_type, client);
#line 54 "/run/build/folks/tools/inspect/command-set.vala"
	return self;
#line 265 "command-set.c"
}


FolksInspectCommandsSet*
folks_inspect_commands_set_new (FolksInspectClient* client)
{
#line 54 "/run/build/folks/tools/inspect/command-set.vala"
	return folks_inspect_commands_set_construct (FOLKS_INSPECT_COMMANDS_TYPE_SET, client);
#line 274 "command-set.c"
}


static void
folks_inspect_commands_set_real_run_data_free (gpointer _data)
{
	FolksInspectCommandsSetRunData* _data_;
	_data_ = _data;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	_g_free0 (_data_->command_string);
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	_folks_inspect_command_unref0 (_data_->self);
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	g_slice_free (FolksInspectCommandsSetRunData, _data_);
#line 289 "command-set.c"
}


static void
folks_inspect_commands_set_real_run_async_ready_wrapper (GObject *source_object,
                                                         GAsyncResult *res,
                                                         void *user_data)
{
	FolksInspectCommandsSetRunData* _task_data_;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	if (_task_data_->_callback_ != NULL) {
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 305 "command-set.c"
	}
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	_task_data_->_task_complete_ = TRUE;
#line 309 "command-set.c"
}


static gpointer
_folks_inspect_command_ref0 (gpointer self)
{
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	return self ? folks_inspect_command_ref (self) : NULL;
#line 318 "command-set.c"
}


static void
folks_inspect_commands_set_real_run (FolksInspectCommand* base,
                                     const gchar* command_string,
                                     GAsyncReadyCallback _callback_,
                                     gpointer _user_data_)
{
	FolksInspectCommandsSet * self;
	FolksInspectCommandsSetRunData* _data_;
	FolksInspectCommandsSet* _tmp0_;
	gchar* _tmp1_;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	self = (FolksInspectCommandsSet*) base;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	_data_ = g_slice_new0 (FolksInspectCommandsSetRunData);
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->_callback_ = _callback_;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->_async_result = g_task_new (NULL, NULL, folks_inspect_commands_set_real_run_async_ready_wrapper, _user_data_);
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	if (_callback_ == NULL) {
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_task_complete_ = TRUE;
#line 344 "command-set.c"
	}
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_inspect_commands_set_real_run_data_free);
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	_tmp0_ = _folks_inspect_command_ref0 (self);
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->self = _tmp0_;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	_tmp1_ = g_strdup (command_string);
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	_g_free0 (_data_->command_string);
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->command_string = _tmp1_;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	folks_inspect_commands_set_real_run_co (_data_);
#line 360 "command-set.c"
}


static gint
folks_inspect_commands_set_real_run_finish (FolksInspectCommand* base,
                                            GAsyncResult* _res_)
{
	gint result;
	FolksInspectCommandsSetRunData* _data_;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	result = _data_->result;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	return result;
#line 376 "command-set.c"
}


static gchar*
string_strip (const gchar* self)
{
	gchar* result = NULL;
	gchar* _result_ = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
#line 1304 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1305 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = g_strdup (self);
#line 1305 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_result_ = _tmp0_;
#line 1306 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp1_ = _result_;
#line 1306 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_strstrip (_tmp1_);
#line 1307 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _result_;
#line 1307 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 401 "command-set.c"
}


static void
folks_inspect_commands_set_run_ready (GObject* source_object,
                                      GAsyncResult* _res_,
                                      gpointer _user_data_)
{
	FolksInspectCommandsSetRunData* _data_;
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
	_data_ = _user_data_;
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->_source_object_ = source_object;
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->_res_ = _res_;
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->_task_complete_ = TRUE;
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
	folks_inspect_commands_set_real_run_co (_data_);
#line 421 "command-set.c"
}


static gboolean
folks_inspect_commands_set_real_run_co (FolksInspectCommandsSetRunData* _data_)
{
#line 59 "/run/build/folks/tools/inspect/command-set.vala"
	switch (_data_->_state_) {
#line 59 "/run/build/folks/tools/inspect/command-set.vala"
		case 0:
#line 432 "command-set.c"
		goto _state_0;
#line 59 "/run/build/folks/tools/inspect/command-set.vala"
		case 1:
#line 436 "command-set.c"
		goto _state_1;
		default:
#line 59 "/run/build/folks/tools/inspect/command-set.vala"
		g_assert_not_reached ();
#line 441 "command-set.c"
	}
	_state_0:
#line 61 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->_tmp0_ = g_new0 (gchar*, 0 + 1);
#line 61 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->parts = _data_->_tmp0_;
#line 61 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->parts_length1 = 0;
#line 61 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->_parts_size_ = _data_->parts_length1;
#line 63 "/run/build/folks/tools/inspect/command-set.vala"
	if (_data_->command_string != NULL) {
#line 66 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp2_ = _data_->_tmp1_ = g_strsplit (_data_->command_string, " ", 0);
#line 66 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
#line 66 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->parts = _data_->_tmp2_;
#line 66 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->parts_length1 = _vala_array_length (_data_->_tmp1_);
#line 66 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_parts_size_ = _data_->parts_length1;
#line 464 "command-set.c"
	}
#line 69 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->_tmp3_ = folks_inspect_command_get_name ((FolksInspectCommand*) _data_->self);
#line 69 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->_tmp4_ = _data_->_tmp3_;
#line 69 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->_tmp5_ = _data_->parts;
#line 69 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->_tmp5__length1 = _data_->parts_length1;
#line 69 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->_tmp6_ = _data_->_tmp5_[0];
#line 69 "/run/build/folks/tools/inspect/command-set.vala"
	if (!folks_inspect_utils_validate_subcommand (_data_->_tmp4_, _data_->command_string, _data_->_tmp6_, FOLKS_INSPECT_COMMANDS_SET__valid_subcommands, G_N_ELEMENTS (FOLKS_INSPECT_COMMANDS_SET__valid_subcommands))) {
#line 71 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->result = 1;
#line 71 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
#line 71 "/run/build/folks/tools/inspect/command-set.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 71 "/run/build/folks/tools/inspect/command-set.vala"
		if (_data_->_state_ != 0) {
#line 71 "/run/build/folks/tools/inspect/command-set.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 71 "/run/build/folks/tools/inspect/command-set.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 490 "command-set.c"
			}
		}
#line 71 "/run/build/folks/tools/inspect/command-set.vala"
		g_object_unref (_data_->_async_result);
#line 71 "/run/build/folks/tools/inspect/command-set.vala"
		return FALSE;
#line 497 "command-set.c"
	}
#line 73 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->_tmp7_ = _data_->parts;
#line 73 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->_tmp7__length1 = _data_->parts_length1;
#line 73 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->_tmp8_ = _data_->_tmp7_[0];
#line 73 "/run/build/folks/tools/inspect/command-set.vala"
	if (g_strcmp0 (_data_->_tmp8_, "alias") == 0) {
#line 75 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp9_ = _data_->parts;
#line 75 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp9__length1 = _data_->parts_length1;
#line 75 "/run/build/folks/tools/inspect/command-set.vala"
		if (_data_->_tmp9__length1 < 3) {
#line 77 "/run/build/folks/tools/inspect/command-set.vala"
			folks_inspect_utils_print_line ("%s", "Must pass at least one individual ID and a new alias to an " "'alias' subcommand.");
#line 80 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->result = 1;
#line 80 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
#line 80 "/run/build/folks/tools/inspect/command-set.vala"
			g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 80 "/run/build/folks/tools/inspect/command-set.vala"
			if (_data_->_state_ != 0) {
#line 80 "/run/build/folks/tools/inspect/command-set.vala"
				while (_data_->_task_complete_ != TRUE) {
#line 80 "/run/build/folks/tools/inspect/command-set.vala"
					g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 527 "command-set.c"
				}
			}
#line 80 "/run/build/folks/tools/inspect/command-set.vala"
			g_object_unref (_data_->_async_result);
#line 80 "/run/build/folks/tools/inspect/command-set.vala"
			return FALSE;
#line 534 "command-set.c"
		}
#line 84 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp11_ = _data_->parts;
#line 84 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp11__length1 = _data_->parts_length1;
#line 84 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp12_ = _data_->_tmp11_[1];
#line 84 "/run/build/folks/tools/inspect/command-set.vala"
		if (_data_->_tmp12_ == NULL) {
#line 84 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp10_ = TRUE;
#line 546 "command-set.c"
		} else {
#line 84 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp13_ = _data_->parts;
#line 84 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp13__length1 = _data_->parts_length1;
#line 84 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp14_ = _data_->_tmp13_[1];
#line 84 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp15_ = string_strip (_data_->_tmp14_);
#line 84 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp16_ = _data_->_tmp15_;
#line 84 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp10_ = g_strcmp0 (_data_->_tmp16_, "") == 0;
#line 84 "/run/build/folks/tools/inspect/command-set.vala"
			_g_free0 (_data_->_tmp16_);
#line 562 "command-set.c"
		}
#line 84 "/run/build/folks/tools/inspect/command-set.vala"
		if (_data_->_tmp10_) {
#line 86 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp17_ = _data_->parts;
#line 86 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp17__length1 = _data_->parts_length1;
#line 86 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp18_ = _data_->_tmp17_[1];
#line 86 "/run/build/folks/tools/inspect/command-set.vala"
			folks_inspect_utils_print_line ("Unrecognised individual ID '%s'.", _data_->_tmp18_);
#line 89 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->result = 1;
#line 89 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
#line 89 "/run/build/folks/tools/inspect/command-set.vala"
			g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 89 "/run/build/folks/tools/inspect/command-set.vala"
			if (_data_->_state_ != 0) {
#line 89 "/run/build/folks/tools/inspect/command-set.vala"
				while (_data_->_task_complete_ != TRUE) {
#line 89 "/run/build/folks/tools/inspect/command-set.vala"
					g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 586 "command-set.c"
				}
			}
#line 89 "/run/build/folks/tools/inspect/command-set.vala"
			g_object_unref (_data_->_async_result);
#line 89 "/run/build/folks/tools/inspect/command-set.vala"
			return FALSE;
#line 593 "command-set.c"
		}
#line 92 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp19_ = _data_->parts;
#line 92 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp19__length1 = _data_->parts_length1;
#line 92 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp20_ = _data_->_tmp19_[1];
#line 92 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp21_ = string_strip (_data_->_tmp20_);
#line 92 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->id = _data_->_tmp21_;
#line 94 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp22_ = ((FolksInspectCommand*) _data_->self)->client;
#line 94 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp23_ = folks_inspect_client_get_aggregator (_data_->_tmp22_);
#line 94 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp24_ = _data_->_tmp23_;
#line 94 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp25_ = folks_individual_aggregator_get_individuals (_data_->_tmp24_);
#line 94 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp26_ = _data_->_tmp25_;
#line 94 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp27_ = _data_->id;
#line 94 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp28_ = gee_map_get (_data_->_tmp26_, _data_->_tmp27_);
#line 94 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->individual = (FolksIndividual*) _data_->_tmp28_;
#line 95 "/run/build/folks/tools/inspect/command-set.vala"
		_data_->_tmp29_ = _data_->individual;
#line 95 "/run/build/folks/tools/inspect/command-set.vala"
		if (_data_->_tmp29_ == NULL) {
#line 97 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp30_ = _data_->id;
#line 97 "/run/build/folks/tools/inspect/command-set.vala"
			folks_inspect_utils_print_line ("Unrecognized individual ID '%s'.", _data_->_tmp30_);
#line 98 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->result = 1;
#line 98 "/run/build/folks/tools/inspect/command-set.vala"
			_g_object_unref0 (_data_->individual);
#line 98 "/run/build/folks/tools/inspect/command-set.vala"
			_g_free0 (_data_->id);
#line 98 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
#line 98 "/run/build/folks/tools/inspect/command-set.vala"
			g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 98 "/run/build/folks/tools/inspect/command-set.vala"
			if (_data_->_state_ != 0) {
#line 98 "/run/build/folks/tools/inspect/command-set.vala"
				while (_data_->_task_complete_ != TRUE) {
#line 98 "/run/build/folks/tools/inspect/command-set.vala"
					g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 645 "command-set.c"
				}
			}
#line 98 "/run/build/folks/tools/inspect/command-set.vala"
			g_object_unref (_data_->_async_result);
#line 98 "/run/build/folks/tools/inspect/command-set.vala"
			return FALSE;
#line 652 "command-set.c"
		}
		{
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp31_ = ((FolksInspectCommand*) _data_->self)->client;
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp32_ = folks_inspect_client_get_aggregator (_data_->_tmp31_);
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp33_ = _data_->_tmp32_;
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp34_ = _data_->individual;
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_state_ = 1;
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
			folks_individual_aggregator_ensure_individual_property_writeable (_data_->_tmp33_, _data_->_tmp34_, "alias", folks_inspect_commands_set_run_ready, _data_);
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
			return FALSE;
#line 669 "command-set.c"
			_state_1:
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp35_ = folks_individual_aggregator_ensure_individual_property_writeable_finish (_data_->_tmp33_, _data_->_res_, &_data_->_inner_error_);
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->persona = _data_->_tmp35_;
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
				if (_data_->_inner_error_->domain == FOLKS_INDIVIDUAL_AGGREGATOR_ERROR) {
#line 679 "command-set.c"
					goto __catch3_folks_individual_aggregator_error;
				}
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
				_g_object_unref0 (_data_->individual);
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
				_g_free0 (_data_->id);
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
				_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
				g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
				g_clear_error (&_data_->_inner_error_);
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
				g_object_unref (_data_->_async_result);
#line 103 "/run/build/folks/tools/inspect/command-set.vala"
				return FALSE;
#line 696 "command-set.c"
			}
#line 106 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp36_ = _data_->persona;
#line 106 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp37_ = folks_persona_get_individual (_data_->_tmp36_);
#line 106 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp38_ = _data_->_tmp37_;
#line 106 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp39_ = _data_->parts;
#line 106 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp39__length1 = _data_->parts_length1;
#line 106 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp40_ = _data_->_tmp39_[2];
#line 106 "/run/build/folks/tools/inspect/command-set.vala"
			folks_alias_details_set_alias ((FolksAliasDetails*) _data_->_tmp38_, _data_->_tmp40_);
#line 107 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp41_ = _data_->parts;
#line 107 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp41__length1 = _data_->parts_length1;
#line 107 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp42_ = _data_->_tmp41_[2];
#line 107 "/run/build/folks/tools/inspect/command-set.vala"
			folks_inspect_utils_print_line ("Setting of individual's alias to '%s' was successful.", _data_->_tmp42_);
#line 101 "/run/build/folks/tools/inspect/command-set.vala"
			_g_object_unref0 (_data_->persona);
#line 722 "command-set.c"
		}
		goto __finally3;
		__catch3_folks_individual_aggregator_error:
		{
#line 101 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->e = _data_->_inner_error_;
#line 101 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_inner_error_ = NULL;
#line 112 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp43_ = _data_->parts;
#line 112 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp43__length1 = _data_->parts_length1;
#line 112 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->_tmp44_ = _data_->_tmp43_[2];
#line 112 "/run/build/folks/tools/inspect/command-set.vala"
			folks_inspect_utils_print_line ("Setting of individual's alias to '%s' failed.", _data_->_tmp44_);
#line 114 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->result = 1;
#line 114 "/run/build/folks/tools/inspect/command-set.vala"
			_g_error_free0 (_data_->e);
#line 114 "/run/build/folks/tools/inspect/command-set.vala"
			_g_object_unref0 (_data_->individual);
#line 114 "/run/build/folks/tools/inspect/command-set.vala"
			_g_free0 (_data_->id);
#line 114 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
#line 114 "/run/build/folks/tools/inspect/command-set.vala"
			g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 114 "/run/build/folks/tools/inspect/command-set.vala"
			if (_data_->_state_ != 0) {
#line 114 "/run/build/folks/tools/inspect/command-set.vala"
				while (_data_->_task_complete_ != TRUE) {
#line 114 "/run/build/folks/tools/inspect/command-set.vala"
					g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 757 "command-set.c"
				}
			}
#line 114 "/run/build/folks/tools/inspect/command-set.vala"
			g_object_unref (_data_->_async_result);
#line 114 "/run/build/folks/tools/inspect/command-set.vala"
			return FALSE;
#line 764 "command-set.c"
		}
		__finally3:
#line 101 "/run/build/folks/tools/inspect/command-set.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 101 "/run/build/folks/tools/inspect/command-set.vala"
			_g_object_unref0 (_data_->individual);
#line 101 "/run/build/folks/tools/inspect/command-set.vala"
			_g_free0 (_data_->id);
#line 101 "/run/build/folks/tools/inspect/command-set.vala"
			_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
#line 101 "/run/build/folks/tools/inspect/command-set.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 101 "/run/build/folks/tools/inspect/command-set.vala"
			g_clear_error (&_data_->_inner_error_);
#line 101 "/run/build/folks/tools/inspect/command-set.vala"
			g_object_unref (_data_->_async_result);
#line 101 "/run/build/folks/tools/inspect/command-set.vala"
			return FALSE;
#line 783 "command-set.c"
		}
#line 73 "/run/build/folks/tools/inspect/command-set.vala"
		_g_object_unref0 (_data_->individual);
#line 73 "/run/build/folks/tools/inspect/command-set.vala"
		_g_free0 (_data_->id);
#line 789 "command-set.c"
	} else {
#line 119 "/run/build/folks/tools/inspect/command-set.vala"
		g_assert_not_reached ();
#line 793 "command-set.c"
	}
#line 122 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->result = 0;
#line 122 "/run/build/folks/tools/inspect/command-set.vala"
	_data_->parts = (_vala_array_free (_data_->parts, _data_->parts_length1, (GDestroyNotify) g_free), NULL);
#line 122 "/run/build/folks/tools/inspect/command-set.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 122 "/run/build/folks/tools/inspect/command-set.vala"
	if (_data_->_state_ != 0) {
#line 122 "/run/build/folks/tools/inspect/command-set.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 122 "/run/build/folks/tools/inspect/command-set.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 807 "command-set.c"
		}
	}
#line 122 "/run/build/folks/tools/inspect/command-set.vala"
	g_object_unref (_data_->_async_result);
#line 122 "/run/build/folks/tools/inspect/command-set.vala"
	return FALSE;
#line 814 "command-set.c"
}


static gchar*
_folks_inspect_utils_individual_id_completion_cb_rl_compentry_func_t (const gchar* str,
                                                                      gint a)
{
	gchar* result;
	result = folks_inspect_utils_individual_id_completion_cb (str, a);
#line 147 "/run/build/folks/tools/inspect/command-set.vala"
	return result;
#line 826 "command-set.c"
}


static gchar**
_vala_array_dup11 (gchar** self,
                   int length)
{
	gchar** result;
	int i;
#line 147 "/run/build/folks/tools/inspect/command-set.vala"
	result = g_new0 (gchar*, length + 1);
#line 147 "/run/build/folks/tools/inspect/command-set.vala"
	for (i = 0; i < length; i++) {
#line 840 "command-set.c"
		gchar* _tmp0_;
#line 147 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp0_ = g_strdup (self[i]);
#line 147 "/run/build/folks/tools/inspect/command-set.vala"
		result[i] = _tmp0_;
#line 846 "command-set.c"
	}
#line 147 "/run/build/folks/tools/inspect/command-set.vala"
	return result;
#line 850 "command-set.c"
}


static gchar*
string_slice (const gchar* self,
              glong start,
              glong end)
{
	gchar* result = NULL;
	glong string_length = 0L;
	gint _tmp0_;
	gint _tmp1_;
	gboolean _tmp4_ = FALSE;
	gboolean _tmp6_ = FALSE;
	gchar* _tmp8_;
#line 1425 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1426 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = strlen (self);
#line 1426 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp1_ = _tmp0_;
#line 1426 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	string_length = (glong) _tmp1_;
#line 1427 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (start < ((glong) 0)) {
#line 876 "command-set.c"
		glong _tmp2_;
#line 1428 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp2_ = string_length;
#line 1428 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		start = _tmp2_ + start;
#line 882 "command-set.c"
	}
#line 1430 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (end < ((glong) 0)) {
#line 886 "command-set.c"
		glong _tmp3_;
#line 1431 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp3_ = string_length;
#line 1431 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		end = _tmp3_ + end;
#line 892 "command-set.c"
	}
#line 1433 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (start >= ((glong) 0)) {
#line 896 "command-set.c"
		glong _tmp5_;
#line 1433 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp5_ = string_length;
#line 1433 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp4_ = start <= _tmp5_;
#line 902 "command-set.c"
	} else {
#line 1433 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp4_ = FALSE;
#line 906 "command-set.c"
	}
#line 1433 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (_tmp4_, NULL);
#line 1434 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (end >= ((glong) 0)) {
#line 912 "command-set.c"
		glong _tmp7_;
#line 1434 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp7_ = string_length;
#line 1434 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp6_ = end <= _tmp7_;
#line 918 "command-set.c"
	} else {
#line 1434 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp6_ = FALSE;
#line 922 "command-set.c"
	}
#line 1434 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (_tmp6_, NULL);
#line 1435 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (start <= end, NULL);
#line 1436 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp8_ = g_strndup (((gchar*) self) + start, (gsize) (end - start));
#line 1436 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _tmp8_;
#line 1436 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 934 "command-set.c"
}


static gchar**
_vala_array_dup12 (gchar** self,
                   int length)
{
	gchar** result;
	int i;
#line 163 "/run/build/folks/tools/inspect/command-set.vala"
	result = g_new0 (gchar*, length + 1);
#line 163 "/run/build/folks/tools/inspect/command-set.vala"
	for (i = 0; i < length; i++) {
#line 948 "command-set.c"
		gchar* _tmp0_;
#line 163 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp0_ = g_strdup (self[i]);
#line 163 "/run/build/folks/tools/inspect/command-set.vala"
		result[i] = _tmp0_;
#line 954 "command-set.c"
	}
#line 163 "/run/build/folks/tools/inspect/command-set.vala"
	return result;
#line 958 "command-set.c"
}


gchar*
folks_inspect_commands_set_subcommand_name_completion_cb (const gchar* word,
                                                          gint state)
{
	gchar* result = NULL;
	gchar* _tmp39_;
#line 133 "/run/build/folks/tools/inspect/command-set.vala"
	g_return_val_if_fail (word != NULL, NULL);
#line 136 "/run/build/folks/tools/inspect/command-set.vala"
	if (state == 0) {
#line 972 "command-set.c"
		gchar** parts = NULL;
		gchar** _tmp0_;
		gchar** _tmp1_;
		gint parts_length1;
		gint _parts_size_;
		gboolean _tmp2_ = FALSE;
		gchar** _tmp3_;
		gint _tmp3__length1;
#line 138 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp1_ = _tmp0_ = g_strsplit (word, " ", 0);
#line 138 "/run/build/folks/tools/inspect/command-set.vala"
		parts = _tmp1_;
#line 138 "/run/build/folks/tools/inspect/command-set.vala"
		parts_length1 = _vala_array_length (_tmp0_);
#line 138 "/run/build/folks/tools/inspect/command-set.vala"
		_parts_size_ = parts_length1;
#line 140 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp3_ = parts;
#line 140 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp3__length1 = parts_length1;
#line 140 "/run/build/folks/tools/inspect/command-set.vala"
		if (_tmp3__length1 > 0) {
#line 995 "command-set.c"
			gchar** _tmp4_;
			gint _tmp4__length1;
			const gchar* _tmp5_;
#line 141 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp4_ = parts;
#line 141 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp4__length1 = parts_length1;
#line 141 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp5_ = _tmp4_[0];
#line 141 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp2_ = g_strcmp0 (_tmp5_, "alias") == 0;
#line 1007 "command-set.c"
		} else {
#line 140 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp2_ = FALSE;
#line 1011 "command-set.c"
		}
#line 140 "/run/build/folks/tools/inspect/command-set.vala"
		if (_tmp2_) {
#line 1015 "command-set.c"
			gchar* last_part = NULL;
			gchar** _tmp6_;
			gint _tmp6__length1;
			gchar** _tmp7_;
			gint _tmp7__length1;
			const gchar* _tmp8_;
			gchar* _tmp9_;
			gchar** _tmp10_;
			gint _tmp10__length1;
			const gchar* _tmp11_;
			const gchar* _tmp16_;
#line 143 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp6_ = parts;
#line 143 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp6__length1 = parts_length1;
#line 143 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp7_ = parts;
#line 143 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp7__length1 = parts_length1;
#line 143 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp8_ = _tmp6_[_tmp7__length1 - 1];
#line 143 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp9_ = g_strdup (_tmp8_);
#line 143 "/run/build/folks/tools/inspect/command-set.vala"
			last_part = _tmp9_;
#line 145 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp10_ = parts;
#line 145 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp10__length1 = parts_length1;
#line 145 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp11_ = _tmp10_[0];
#line 145 "/run/build/folks/tools/inspect/command-set.vala"
			if (g_strcmp0 (_tmp11_, "alias") == 0) {
#line 1049 "command-set.c"
				const gchar* _tmp12_;
				gchar** _tmp13_;
				gchar** _tmp14_;
				gchar** _tmp15_;
				gint _tmp15__length1;
#line 147 "/run/build/folks/tools/inspect/command-set.vala"
				_tmp12_ = last_part;
#line 147 "/run/build/folks/tools/inspect/command-set.vala"
				_tmp14_ = _tmp13_ = rl_completion_matches (_tmp12_, _folks_inspect_utils_individual_id_completion_cb_rl_compentry_func_t);
#line 147 "/run/build/folks/tools/inspect/command-set.vala"
				_tmp15_ = (_tmp14_ != NULL) ? _vala_array_dup11 (_tmp14_, _vala_array_length (_tmp13_)) : ((gpointer) _tmp14_);
#line 147 "/run/build/folks/tools/inspect/command-set.vala"
				_tmp15__length1 = _vala_array_length (_tmp13_);
#line 147 "/run/build/folks/tools/inspect/command-set.vala"
				folks_inspect_commands_set_subcommand_completions = (_vala_array_free (folks_inspect_commands_set_subcommand_completions, _vala_array_length (folks_inspect_commands_set_subcommand_completions), (GDestroyNotify) g_free), NULL);
#line 147 "/run/build/folks/tools/inspect/command-set.vala"
				folks_inspect_commands_set_subcommand_completions = _tmp15_;
#line 1067 "command-set.c"
			}
#line 152 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp16_ = last_part;
#line 152 "/run/build/folks/tools/inspect/command-set.vala"
			if (g_strcmp0 (_tmp16_, "") == 0) {
#line 1073 "command-set.c"
				gchar* _tmp17_;
#line 154 "/run/build/folks/tools/inspect/command-set.vala"
				_tmp17_ = g_strdup (word);
#line 154 "/run/build/folks/tools/inspect/command-set.vala"
				_g_free0 (folks_inspect_commands_set_prefix);
#line 154 "/run/build/folks/tools/inspect/command-set.vala"
				folks_inspect_commands_set_prefix = _tmp17_;
#line 1081 "command-set.c"
			} else {
				const gchar* _tmp18_;
				gint _tmp19_;
				gint _tmp20_;
				gchar* _tmp21_;
#line 158 "/run/build/folks/tools/inspect/command-set.vala"
				_tmp18_ = last_part;
#line 158 "/run/build/folks/tools/inspect/command-set.vala"
				_tmp19_ = strlen (_tmp18_);
#line 158 "/run/build/folks/tools/inspect/command-set.vala"
				_tmp20_ = _tmp19_;
#line 158 "/run/build/folks/tools/inspect/command-set.vala"
				_tmp21_ = string_slice (word, (glong) 0, (glong) (-_tmp20_));
#line 158 "/run/build/folks/tools/inspect/command-set.vala"
				_g_free0 (folks_inspect_commands_set_prefix);
#line 158 "/run/build/folks/tools/inspect/command-set.vala"
				folks_inspect_commands_set_prefix = _tmp21_;
#line 1099 "command-set.c"
			}
#line 140 "/run/build/folks/tools/inspect/command-set.vala"
			_g_free0 (last_part);
#line 1103 "command-set.c"
		} else {
			gchar** _tmp22_;
			gint _tmp22__length1;
			gchar* _tmp23_;
#line 163 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp22_ = (FOLKS_INSPECT_COMMANDS_SET__valid_subcommands != NULL) ? _vala_array_dup12 (FOLKS_INSPECT_COMMANDS_SET__valid_subcommands, G_N_ELEMENTS (FOLKS_INSPECT_COMMANDS_SET__valid_subcommands)) : ((gpointer) FOLKS_INSPECT_COMMANDS_SET__valid_subcommands);
#line 163 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp22__length1 = G_N_ELEMENTS (FOLKS_INSPECT_COMMANDS_SET__valid_subcommands);
#line 163 "/run/build/folks/tools/inspect/command-set.vala"
			folks_inspect_commands_set_subcommand_completions = (_vala_array_free (folks_inspect_commands_set_subcommand_completions, _vala_array_length (folks_inspect_commands_set_subcommand_completions), (GDestroyNotify) g_free), NULL);
#line 163 "/run/build/folks/tools/inspect/command-set.vala"
			folks_inspect_commands_set_subcommand_completions = _tmp22_;
#line 164 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp23_ = g_strdup ("");
#line 164 "/run/build/folks/tools/inspect/command-set.vala"
			_g_free0 (folks_inspect_commands_set_prefix);
#line 164 "/run/build/folks/tools/inspect/command-set.vala"
			folks_inspect_commands_set_prefix = _tmp23_;
#line 1122 "command-set.c"
		}
#line 167 "/run/build/folks/tools/inspect/command-set.vala"
		folks_inspect_commands_set_completion_count = (guint) 0;
#line 136 "/run/build/folks/tools/inspect/command-set.vala"
		parts = (_vala_array_free (parts, parts_length1, (GDestroyNotify) g_free), NULL);
#line 1128 "command-set.c"
	}
#line 170 "/run/build/folks/tools/inspect/command-set.vala"
	while (TRUE) {
#line 1132 "command-set.c"
		guint _tmp24_;
		gchar** _tmp25_;
		gint _tmp25__length1;
		gchar* completion = NULL;
		gchar** _tmp26_;
		gint _tmp26__length1;
		guint _tmp27_;
		const gchar* _tmp28_;
		gchar* _tmp29_;
		gchar* candidate = NULL;
		const gchar* _tmp30_;
		const gchar* _tmp31_;
		gchar* _tmp32_;
		guint _tmp33_;
		gboolean _tmp34_ = FALSE;
		gboolean _tmp35_ = FALSE;
		const gchar* _tmp36_;
#line 170 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp24_ = folks_inspect_commands_set_completion_count;
#line 170 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp25_ = folks_inspect_commands_set_subcommand_completions;
#line 170 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp25__length1 = _vala_array_length (folks_inspect_commands_set_subcommand_completions);
#line 170 "/run/build/folks/tools/inspect/command-set.vala"
		if (!(_tmp24_ < ((guint) _tmp25__length1))) {
#line 170 "/run/build/folks/tools/inspect/command-set.vala"
			break;
#line 1160 "command-set.c"
		}
#line 172 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp26_ = folks_inspect_commands_set_subcommand_completions;
#line 172 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp26__length1 = _vala_array_length (folks_inspect_commands_set_subcommand_completions);
#line 172 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp27_ = folks_inspect_commands_set_completion_count;
#line 172 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp28_ = _tmp26_[_tmp27_];
#line 172 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp29_ = g_strdup (_tmp28_);
#line 172 "/run/build/folks/tools/inspect/command-set.vala"
		completion = _tmp29_;
#line 173 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp30_ = folks_inspect_commands_set_prefix;
#line 173 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp31_ = completion;
#line 173 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp32_ = g_strconcat (_tmp30_, _tmp31_, NULL);
#line 173 "/run/build/folks/tools/inspect/command-set.vala"
		candidate = _tmp32_;
#line 174 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp33_ = folks_inspect_commands_set_completion_count;
#line 174 "/run/build/folks/tools/inspect/command-set.vala"
		folks_inspect_commands_set_completion_count = _tmp33_ + 1;
#line 176 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp36_ = completion;
#line 176 "/run/build/folks/tools/inspect/command-set.vala"
		if (_tmp36_ != NULL) {
#line 1190 "command-set.c"
			const gchar* _tmp37_;
#line 176 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp37_ = completion;
#line 176 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp35_ = g_strcmp0 (_tmp37_, "") != 0;
#line 1196 "command-set.c"
		} else {
#line 176 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp35_ = FALSE;
#line 1200 "command-set.c"
		}
#line 176 "/run/build/folks/tools/inspect/command-set.vala"
		if (_tmp35_) {
#line 1204 "command-set.c"
			const gchar* _tmp38_;
#line 177 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp38_ = candidate;
#line 177 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp34_ = g_str_has_prefix (_tmp38_, word);
#line 1210 "command-set.c"
		} else {
#line 176 "/run/build/folks/tools/inspect/command-set.vala"
			_tmp34_ = FALSE;
#line 1214 "command-set.c"
		}
#line 176 "/run/build/folks/tools/inspect/command-set.vala"
		if (_tmp34_) {
#line 179 "/run/build/folks/tools/inspect/command-set.vala"
			result = completion;
#line 179 "/run/build/folks/tools/inspect/command-set.vala"
			_g_free0 (candidate);
#line 179 "/run/build/folks/tools/inspect/command-set.vala"
			return result;
#line 1224 "command-set.c"
		}
#line 170 "/run/build/folks/tools/inspect/command-set.vala"
		_g_free0 (candidate);
#line 170 "/run/build/folks/tools/inspect/command-set.vala"
		_g_free0 (completion);
#line 1230 "command-set.c"
	}
#line 184 "/run/build/folks/tools/inspect/command-set.vala"
	folks_inspect_commands_set_subcommand_completions = (_vala_array_free (folks_inspect_commands_set_subcommand_completions, _vala_array_length (folks_inspect_commands_set_subcommand_completions), (GDestroyNotify) g_free), NULL);
#line 184 "/run/build/folks/tools/inspect/command-set.vala"
	folks_inspect_commands_set_subcommand_completions = NULL;
#line 185 "/run/build/folks/tools/inspect/command-set.vala"
	folks_inspect_commands_set_completion_count = (guint) 0;
#line 186 "/run/build/folks/tools/inspect/command-set.vala"
	_tmp39_ = g_strdup ("");
#line 186 "/run/build/folks/tools/inspect/command-set.vala"
	_g_free0 (folks_inspect_commands_set_prefix);
#line 186 "/run/build/folks/tools/inspect/command-set.vala"
	folks_inspect_commands_set_prefix = _tmp39_;
#line 188 "/run/build/folks/tools/inspect/command-set.vala"
	result = NULL;
#line 188 "/run/build/folks/tools/inspect/command-set.vala"
	return result;
#line 1248 "command-set.c"
}


static gchar*
_folks_inspect_commands_set_subcommand_name_completion_cb_rl_compentry_func_t (const gchar* str,
                                                                               gint a)
{
	gchar* result;
	result = folks_inspect_commands_set_subcommand_name_completion_cb (str, a);
#line 194 "/run/build/folks/tools/inspect/command-set.vala"
	return result;
#line 1260 "command-set.c"
}


static gchar**
_vala_array_dup13 (gchar** self,
                   int length)
{
	gchar** result;
	int i;
#line 194 "/run/build/folks/tools/inspect/command-set.vala"
	result = g_new0 (gchar*, length + 1);
#line 194 "/run/build/folks/tools/inspect/command-set.vala"
	for (i = 0; i < length; i++) {
#line 1274 "command-set.c"
		gchar* _tmp0_;
#line 194 "/run/build/folks/tools/inspect/command-set.vala"
		_tmp0_ = g_strdup (self[i]);
#line 194 "/run/build/folks/tools/inspect/command-set.vala"
		result[i] = _tmp0_;
#line 1280 "command-set.c"
	}
#line 194 "/run/build/folks/tools/inspect/command-set.vala"
	return result;
#line 1284 "command-set.c"
}


static gchar**
folks_inspect_commands_set_real_complete_subcommand (FolksInspectCommand* base,
                                                     const gchar* subcommand,
                                                     int* result_length1)
{
	FolksInspectCommandsSet * self;
	gchar** result = NULL;
	gchar** _tmp0_;
	gchar** _tmp1_;
	gchar** _tmp2_;
	gint _tmp2__length1;
	gchar** _tmp3_;
	gint _tmp3__length1;
#line 191 "/run/build/folks/tools/inspect/command-set.vala"
	self = (FolksInspectCommandsSet*) base;
#line 191 "/run/build/folks/tools/inspect/command-set.vala"
	g_return_val_if_fail (subcommand != NULL, NULL);
#line 194 "/run/build/folks/tools/inspect/command-set.vala"
	_tmp1_ = _tmp0_ = rl_completion_matches (subcommand, _folks_inspect_commands_set_subcommand_name_completion_cb_rl_compentry_func_t);
#line 194 "/run/build/folks/tools/inspect/command-set.vala"
	_tmp2_ = (_tmp1_ != NULL) ? _vala_array_dup13 (_tmp1_, _vala_array_length (_tmp0_)) : ((gpointer) _tmp1_);
#line 194 "/run/build/folks/tools/inspect/command-set.vala"
	_tmp2__length1 = _vala_array_length (_tmp0_);
#line 194 "/run/build/folks/tools/inspect/command-set.vala"
	_tmp3_ = _tmp2_;
#line 194 "/run/build/folks/tools/inspect/command-set.vala"
	_tmp3__length1 = _tmp2__length1;
#line 194 "/run/build/folks/tools/inspect/command-set.vala"
	if (result_length1) {
#line 194 "/run/build/folks/tools/inspect/command-set.vala"
		*result_length1 = _tmp3__length1;
#line 1319 "command-set.c"
	}
#line 194 "/run/build/folks/tools/inspect/command-set.vala"
	result = _tmp3_;
#line 194 "/run/build/folks/tools/inspect/command-set.vala"
	return result;
#line 1325 "command-set.c"
}


static const gchar*
folks_inspect_commands_set_real_get_name (FolksInspectCommand* base)
{
	const gchar* result;
	FolksInspectCommandsSet* self;
#line 34 "/run/build/folks/tools/inspect/command-set.vala"
	self = (FolksInspectCommandsSet*) base;
#line 34 "/run/build/folks/tools/inspect/command-set.vala"
	result = "set";
#line 34 "/run/build/folks/tools/inspect/command-set.vala"
	return result;
#line 1340 "command-set.c"
}


static const gchar*
folks_inspect_commands_set_real_get_description (FolksInspectCommand* base)
{
	const gchar* result;
	FolksInspectCommandsSet* self;
#line 39 "/run/build/folks/tools/inspect/command-set.vala"
	self = (FolksInspectCommandsSet*) base;
#line 41 "/run/build/folks/tools/inspect/command-set.vala"
	result = "Set an individual's properties";
#line 41 "/run/build/folks/tools/inspect/command-set.vala"
	return result;
#line 1355 "command-set.c"
}


static const gchar*
folks_inspect_commands_set_real_get_help (FolksInspectCommand* base)
{
	const gchar* result;
	FolksInspectCommandsSet* self;
#line 47 "/run/build/folks/tools/inspect/command-set.vala"
	self = (FolksInspectCommandsSet*) base;
#line 49 "/run/build/folks/tools/inspect/command-set.vala"
	result = "set alias [individual UID] [new alias]" "   Set the alias of the given individual.";
#line 49 "/run/build/folks/tools/inspect/command-set.vala"
	return result;
#line 1370 "command-set.c"
}


static void
folks_inspect_commands_set_class_init (FolksInspectCommandsSetClass * klass)
{
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	folks_inspect_commands_set_parent_class = g_type_class_peek_parent (klass);
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	((FolksInspectCommandClass *) klass)->finalize = folks_inspect_commands_set_finalize;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	((FolksInspectCommandClass *) klass)->run = (void (*) (FolksInspectCommand *, const gchar*, GAsyncReadyCallback, gpointer)) folks_inspect_commands_set_real_run;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	((FolksInspectCommandClass *) klass)->run_finish = (gint (*) (FolksInspectCommand *, GAsyncResult*)) folks_inspect_commands_set_real_run_finish;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	((FolksInspectCommandClass *) klass)->complete_subcommand = (gchar** (*) (FolksInspectCommand *, const gchar*, int*)) folks_inspect_commands_set_real_complete_subcommand;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	FOLKS_INSPECT_COMMAND_CLASS (klass)->get_name = folks_inspect_commands_set_real_get_name;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	FOLKS_INSPECT_COMMAND_CLASS (klass)->get_description = folks_inspect_commands_set_real_get_description;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	FOLKS_INSPECT_COMMAND_CLASS (klass)->get_help = folks_inspect_commands_set_real_get_help;
#line 1393 "command-set.c"
}


static void
folks_inspect_commands_set_instance_init (FolksInspectCommandsSet * self)
{
}


static void
folks_inspect_commands_set_finalize (FolksInspectCommand * obj)
{
	FolksInspectCommandsSet * self;
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_INSPECT_COMMANDS_TYPE_SET, FolksInspectCommandsSet);
#line 25 "/run/build/folks/tools/inspect/command-set.vala"
	FOLKS_INSPECT_COMMAND_CLASS (folks_inspect_commands_set_parent_class)->finalize (obj);
#line 1411 "command-set.c"
}


GType
folks_inspect_commands_set_get_type (void)
{
	static volatile gsize folks_inspect_commands_set_type_id__volatile = 0;
	if (g_once_init_enter (&folks_inspect_commands_set_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksInspectCommandsSetClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_inspect_commands_set_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksInspectCommandsSet), 0, (GInstanceInitFunc) folks_inspect_commands_set_instance_init, NULL };
		GType folks_inspect_commands_set_type_id;
		folks_inspect_commands_set_type_id = g_type_register_static (FOLKS_INSPECT_TYPE_COMMAND, "FolksInspectCommandsSet", &g_define_type_info, 0);
		g_once_init_leave (&folks_inspect_commands_set_type_id__volatile, folks_inspect_commands_set_type_id);
	}
	return folks_inspect_commands_set_type_id__volatile;
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



