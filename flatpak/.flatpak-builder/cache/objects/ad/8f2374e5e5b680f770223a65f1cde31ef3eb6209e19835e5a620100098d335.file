/* ProjectRow.c generated by valac 0.40.11, the Vala compiler
 * generated from ProjectRow.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <gdk/gdk.h>
#include <sqlite3.h>
#include <pango/pango.h>
#include <glib/gi18n-lib.h>
#include <granite.h>
#include <gee.h>


#define WIDGETS_TYPE_PROJECT_ROW (widgets_project_row_get_type ())
#define WIDGETS_PROJECT_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_PROJECT_ROW, WidgetsProjectRow))
#define WIDGETS_PROJECT_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_PROJECT_ROW, WidgetsProjectRowClass))
#define WIDGETS_IS_PROJECT_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_PROJECT_ROW))
#define WIDGETS_IS_PROJECT_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_PROJECT_ROW))
#define WIDGETS_PROJECT_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_PROJECT_ROW, WidgetsProjectRowClass))

typedef struct _WidgetsProjectRow WidgetsProjectRow;
typedef struct _WidgetsProjectRowClass WidgetsProjectRowClass;
typedef struct _WidgetsProjectRowPrivate WidgetsProjectRowPrivate;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;
enum  {
	WIDGETS_PROJECT_ROW_0_PROPERTY,
	WIDGETS_PROJECT_ROW_PROJECT_PROPERTY,
	WIDGETS_PROJECT_ROW_WINDOW_PROPERTY,
	WIDGETS_PROJECT_ROW_NUM_PROPERTIES
};
static GParamSpec* widgets_project_row_properties[WIDGETS_PROJECT_ROW_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _objects_project_unref0(var) ((var == NULL) ? NULL : (var = (objects_project_unref (var), NULL)))
typedef struct _ObjectsProjectPrivate ObjectsProjectPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define WIDGETS_POPOVERS_TYPE_PROJECT_MENU (widgets_popovers_project_menu_get_type ())
#define WIDGETS_POPOVERS_PROJECT_MENU(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_POPOVERS_TYPE_PROJECT_MENU, WidgetsPopoversProjectMenu))
#define WIDGETS_POPOVERS_PROJECT_MENU_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_POPOVERS_TYPE_PROJECT_MENU, WidgetsPopoversProjectMenuClass))
#define WIDGETS_POPOVERS_IS_PROJECT_MENU(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_POPOVERS_TYPE_PROJECT_MENU))
#define WIDGETS_POPOVERS_IS_PROJECT_MENU_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_POPOVERS_TYPE_PROJECT_MENU))
#define WIDGETS_POPOVERS_PROJECT_MENU_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_POPOVERS_TYPE_PROJECT_MENU, WidgetsPopoversProjectMenuClass))

typedef struct _WidgetsPopoversProjectMenu WidgetsPopoversProjectMenu;
typedef struct _WidgetsPopoversProjectMenuClass WidgetsPopoversProjectMenuClass;
typedef struct _Block55Data Block55Data;

#define OBJECTS_TYPE_TASK (objects_task_get_type ())
#define OBJECTS_TASK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TASK, ObjectsTask))
#define OBJECTS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TASK, ObjectsTaskClass))
#define OBJECTS_IS_TASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TASK))
#define OBJECTS_IS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TASK))
#define OBJECTS_TASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TASK, ObjectsTaskClass))

typedef struct _ObjectsTask ObjectsTask;
typedef struct _ObjectsTaskClass ObjectsTaskClass;
typedef struct _ObjectsTaskPrivate ObjectsTaskPrivate;
#define _objects_task_unref0(var) ((var == NULL) ? NULL : (var = (objects_task_unref (var), NULL)))

#define DIALOGS_TYPE_SHARE_DIALOG (dialogs_share_dialog_get_type ())
#define DIALOGS_SHARE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_TYPE_SHARE_DIALOG, DialogsShareDialog))
#define DIALOGS_SHARE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_TYPE_SHARE_DIALOG, DialogsShareDialogClass))
#define DIALOGS_IS_SHARE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_TYPE_SHARE_DIALOG))
#define DIALOGS_IS_SHARE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_TYPE_SHARE_DIALOG))
#define DIALOGS_SHARE_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_TYPE_SHARE_DIALOG, DialogsShareDialogClass))

typedef struct _DialogsShareDialog DialogsShareDialog;
typedef struct _DialogsShareDialogClass DialogsShareDialogClass;

#define TYPE_APPLICATION (application_get_type ())
#define APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_APPLICATION, Application))
#define APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_APPLICATION, ApplicationClass))
#define IS_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_APPLICATION))
#define IS_APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_APPLICATION))
#define APPLICATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_APPLICATION, ApplicationClass))

typedef struct _Application Application;
typedef struct _ApplicationClass ApplicationClass;
typedef struct _ApplicationPrivate ApplicationPrivate;

struct _WidgetsProjectRow {
	GtkListBoxRow parent_instance;
	WidgetsProjectRowPrivate * priv;
	gboolean menu_open;
};

struct _WidgetsProjectRowClass {
	GtkListBoxRowClass parent_class;
};

struct _WidgetsProjectRowPrivate {
	GtkBox* main_box;
	GtkLabel* name_label;
	GtkEntry* name_entry;
	GtkLabel* number_label;
	ObjectsProject* _project;
	MainWindow* _window;
};

struct _ObjectsProject {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsProjectPrivate * priv;
	gint id;
	gchar* name;
	gchar* note;
	gchar* deadline;
	gint item_order;
	gint is_deleted;
	gchar* color;
};

struct _ObjectsProjectClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsProject *self);
};

struct _Block55Data {
	int _ref_count_;
	WidgetsProjectRow* self;
	GtkToggleButton* menu_button;
	GtkRevealer* menu_revealer;
	WidgetsPopoversProjectMenu* menu_popover;
};

struct _ObjectsTask {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsTaskPrivate * priv;
	gint id;
	gint checked;
	gint project_id;
	gint list_id;
	gint task_order;
	gint is_inbox;
	gint has_reminder;
	gint sidebar_width;
	gint was_notified;
	gchar* content;
	gchar* note;
	gchar* when_date_utc;
	gchar* reminder_time;
	gchar* labels;
	gchar* checklist;
};

struct _ObjectsTaskClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsTask *self);
};

struct _Application {
	GtkApplication parent_instance;
	ApplicationPrivate * priv;
	MainWindow* main_window;
};

struct _ApplicationClass {
	GtkApplicationClass parent_class;
};


static gpointer widgets_project_row_parent_class = NULL;
extern ServicesDatabase* application_database;

GType widgets_project_row_get_type (void) G_GNUC_CONST;
gpointer objects_project_ref (gpointer instance);
void objects_project_unref (gpointer instance);
GParamSpec* objects_param_spec_project (const gchar* name,
                                        const gchar* nick,
                                        const gchar* blurb,
                                        GType object_type,
                                        GParamFlags flags);
void objects_value_set_project (GValue* value,
                                gpointer v_object);
void objects_value_take_project (GValue* value,
                                 gpointer v_object);
gpointer objects_value_get_project (const GValue* value);
GType objects_project_get_type (void) G_GNUC_CONST;
GType main_window_get_type (void) G_GNUC_CONST;
#define WIDGETS_PROJECT_ROW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_PROJECT_ROW, WidgetsProjectRowPrivate))
#define WIDGETS_PROJECT_ROW_COLOR_CSS "\n" \
"        .proyect-%i {\n" \
"            background-color: %s;\n" \
"            border-radius: 50px;\n" \
"            box-shadow: inset 0px 0px 0px 1px rgba(0, 0, 0, 0.2);\n" \
"        }\n" \
"    "
WidgetsProjectRow* widgets_project_row_new (ObjectsProject* _objec);
WidgetsProjectRow* widgets_project_row_construct (GType object_type,
                                                  ObjectsProject* _objec);
static void widgets_project_row_apply_styles (WidgetsProjectRow* self);
ObjectsProject* widgets_project_row_get_project (WidgetsProjectRow* self);
static void widgets_project_row_update_project (WidgetsProjectRow* self);
GType services_database_get_type (void) G_GNUC_CONST;
gint services_database_update_project (ServicesDatabase* self,
                                       ObjectsProject* project);
static void widgets_project_row_update_tooltip_text (WidgetsProjectRow* self);
gint services_database_get_project_tasks_number (ServicesDatabase* self,
                                                 gint id);
gint services_database_get_project_completed_tasks_number (ServicesDatabase* self,
                                                           gint id);
static void widgets_project_row_check_number_label (WidgetsProjectRow* self);
gint services_database_get_project_no_completed_tasks_number (ServicesDatabase* self,
                                                              gint id);
static void widgets_project_row_set_project (WidgetsProjectRow* self,
                                      ObjectsProject* value);
MainWindow* widgets_project_row_get_window (WidgetsProjectRow* self);
static void widgets_project_row_set_window (WidgetsProjectRow* self,
                                     MainWindow* value);
static GObject * widgets_project_row_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties);
GType widgets_popovers_project_menu_get_type (void) G_GNUC_CONST;
static Block55Data* block55_data_ref (Block55Data* _data55_);
static void block55_data_unref (void * _userdata_);
WidgetsPopoversProjectMenu* widgets_popovers_project_menu_new (GtkWidget* relative);
WidgetsPopoversProjectMenu* widgets_popovers_project_menu_construct (GType object_type,
                                                                     GtkWidget* relative);
static void _widgets_project_row___lambda200_ (WidgetsProjectRow* self);
static void __widgets_project_row___lambda200__services_database_update_indicators (ServicesDatabase* _sender,
                                                                             gpointer self);
static void _widgets_project_row___lambda201_ (Block55Data* _data55_);
static void __widgets_project_row___lambda201__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                                   gpointer self);
static void _widgets_project_row___lambda202_ (Block55Data* _data55_);
static void __widgets_project_row___lambda202__gtk_popover_closed (GtkPopover* _sender,
                                                            gpointer self);
static void _widgets_project_row___lambda203_ (WidgetsProjectRow* self,
                                        gint index);
gpointer objects_task_ref (gpointer instance);
void objects_task_unref (gpointer instance);
GParamSpec* objects_param_spec_task (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void objects_value_set_task (GValue* value,
                             gpointer v_object);
void objects_value_take_task (GValue* value,
                              gpointer v_object);
gpointer objects_value_get_task (const GValue* value);
GType objects_task_get_type (void) G_GNUC_CONST;
GeeArrayList* services_database_get_all_tasks_by_project (ServicesDatabase* self,
                                                          gint id);
gint services_database_update_task (ServicesDatabase* self,
                                    ObjectsTask* task);
static gboolean ____lambda204_ (WidgetsProjectRow* self);
static gboolean _____lambda204__gsource_func (gpointer self);
GType dialogs_share_dialog_get_type (void) G_GNUC_CONST;
GType application_get_type (void) G_GNUC_CONST;
Application* application_get_instance (void);
DialogsShareDialog* dialogs_share_dialog_new (MainWindow* parent);
DialogsShareDialog* dialogs_share_dialog_construct (GType object_type,
                                                    MainWindow* parent);
void dialogs_share_dialog_set_project (DialogsShareDialog* self,
                                       gint value);
static void _gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                        gpointer self);
gint services_database_remove_project (ServicesDatabase* self,
                                       gint id);
static gboolean ________lambda205_ (WidgetsProjectRow* self);
static gboolean _________lambda205__gsource_func (gpointer self);
static void __widgets_project_row___lambda203__widgets_popovers_project_menu_on_selected_menu (WidgetsPopoversProjectMenu* _sender,
                                                                                        gint index,
                                                                                        gpointer self);
static gboolean _widgets_project_row___lambda206_ (WidgetsProjectRow* self,
                                            GdkEvent* event);
static gboolean ___lambda207_ (WidgetsProjectRow* self);
static gboolean ____lambda207__gsource_func (gpointer self);
static gboolean __widgets_project_row___lambda206__gtk_widget_event (GtkWidget* _sender,
                                                              GdkEvent* event,
                                                              gpointer self);
static void _widgets_project_row___lambda208_ (WidgetsProjectRow* self);
static void __widgets_project_row___lambda208__gtk_entry_activate (GtkEntry* _sender,
                                                            gpointer self);
static gboolean _widgets_project_row___lambda209_ (WidgetsProjectRow* self);
static gboolean __widgets_project_row___lambda209__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                        GdkEventFocus* event,
                                                                        gpointer self);
static gboolean _widgets_project_row___lambda210_ (WidgetsProjectRow* self,
                                            GdkEventKey* key);
static gboolean __widgets_project_row___lambda210__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                          GdkEventKey* event,
                                                                          gpointer self);
static gboolean _widgets_project_row___lambda211_ (Block55Data* _data55_,
                                            GdkEventCrossing* event);
static gboolean __widgets_project_row___lambda211__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                                           GdkEventCrossing* event,
                                                                           gpointer self);
static gboolean _widgets_project_row___lambda212_ (Block55Data* _data55_,
                                            GdkEventCrossing* event);
static gboolean __widgets_project_row___lambda212__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                                           GdkEventCrossing* event,
                                                                           gpointer self);
static void _widgets_project_row___lambda213_ (WidgetsProjectRow* self,
                                        ObjectsProject* _project);
static void __widgets_project_row___lambda213__services_database_update_project_signal (ServicesDatabase* _sender,
                                                                                 ObjectsProject* project,
                                                                                 gpointer self);
static void widgets_project_row_finalize (GObject * obj);
static void _vala_widgets_project_row_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec);
static void _vala_widgets_project_row_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec);


WidgetsProjectRow*
widgets_project_row_construct (GType object_type,
                               ObjectsProject* _objec)
{
	WidgetsProjectRow * self = NULL;
#line 44 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_return_val_if_fail (_objec != NULL, NULL);
#line 45 "/run/build/planner/src/Widgets/ProjectRow.vala"
	self = (WidgetsProjectRow*) g_object_new (object_type, "project", _objec, "margin-left", 6, "margin-top", 6, "margin-right", 6, NULL);
#line 44 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return self;
#line 373 "ProjectRow.c"
}


WidgetsProjectRow*
widgets_project_row_new (ObjectsProject* _objec)
{
#line 44 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return widgets_project_row_construct (WIDGETS_TYPE_PROJECT_ROW, _objec);
#line 382 "ProjectRow.c"
}


static void
widgets_project_row_apply_styles (WidgetsProjectRow* self)
{
	GtkCssProvider* provider = NULL;
	GtkCssProvider* _tmp0_;
	GError * _inner_error_ = NULL;
#line 267 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_return_if_fail (self != NULL);
#line 268 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = gtk_css_provider_new ();
#line 268 "/run/build/planner/src/Widgets/ProjectRow.vala"
	provider = _tmp0_;
#line 398 "ProjectRow.c"
	{
		gchar* colored_css = NULL;
		ObjectsProject* _tmp1_;
		gint _tmp2_;
		ObjectsProject* _tmp3_;
		const gchar* _tmp4_;
		gchar* _tmp5_;
		GtkCssProvider* _tmp6_;
		const gchar* _tmp7_;
		const gchar* _tmp8_;
		gint _tmp9_;
		gint _tmp10_;
		GdkScreen* _tmp11_;
		GtkCssProvider* _tmp12_;
#line 271 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp1_ = self->priv->_project;
#line 271 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp2_ = _tmp1_->id;
#line 271 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp3_ = self->priv->_project;
#line 271 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp4_ = _tmp3_->color;
#line 271 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp5_ = g_strdup_printf (WIDGETS_PROJECT_ROW_COLOR_CSS, _tmp2_, _tmp4_);
#line 271 "/run/build/planner/src/Widgets/ProjectRow.vala"
		colored_css = _tmp5_;
#line 276 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp6_ = provider;
#line 276 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp7_ = colored_css;
#line 276 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp8_ = colored_css;
#line 276 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp9_ = strlen (_tmp8_);
#line 276 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp10_ = _tmp9_;
#line 276 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_css_provider_load_from_data (_tmp6_, _tmp7_, (gssize) _tmp10_, &_inner_error_);
#line 276 "/run/build/planner/src/Widgets/ProjectRow.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 276 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_g_free0 (colored_css);
#line 441 "ProjectRow.c"
			goto __catch40_g_error;
		}
#line 278 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp11_ = gdk_screen_get_default ();
#line 278 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp12_ = provider;
#line 278 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_style_context_add_provider_for_screen (_tmp11_, (GtkStyleProvider*) _tmp12_, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 270 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_g_free0 (colored_css);
#line 452 "ProjectRow.c"
	}
	goto __finally40;
	__catch40_g_error:
	{
		GError* e = NULL;
#line 270 "/run/build/planner/src/Widgets/ProjectRow.vala"
		e = _inner_error_;
#line 270 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_inner_error_ = NULL;
#line 280 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_g_error_free0 (e);
#line 280 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_g_object_unref0 (provider);
#line 280 "/run/build/planner/src/Widgets/ProjectRow.vala"
		return;
#line 468 "ProjectRow.c"
	}
	__finally40:
#line 270 "/run/build/planner/src/Widgets/ProjectRow.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 270 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_g_object_unref0 (provider);
#line 270 "/run/build/planner/src/Widgets/ProjectRow.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 270 "/run/build/planner/src/Widgets/ProjectRow.vala"
		g_clear_error (&_inner_error_);
#line 270 "/run/build/planner/src/Widgets/ProjectRow.vala"
		return;
#line 481 "ProjectRow.c"
	}
#line 267 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_object_unref0 (provider);
#line 485 "ProjectRow.c"
}


static void
widgets_project_row_update_project (WidgetsProjectRow* self)
{
	GtkEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 284 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_return_if_fail (self != NULL);
#line 285 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = self->priv->name_entry;
#line 285 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp1_ = gtk_entry_get_text (_tmp0_);
#line 285 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp2_ = _tmp1_;
#line 285 "/run/build/planner/src/Widgets/ProjectRow.vala"
	if (g_strcmp0 (_tmp2_, "") != 0) {
#line 505 "ProjectRow.c"
		ObjectsProject* _tmp3_;
		GtkEntry* _tmp4_;
		const gchar* _tmp5_;
		const gchar* _tmp6_;
		gchar* _tmp7_;
		ServicesDatabase* _tmp8_;
		ObjectsProject* _tmp9_;
#line 286 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp3_ = self->priv->_project;
#line 286 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp4_ = self->priv->name_entry;
#line 286 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp5_ = gtk_entry_get_text (_tmp4_);
#line 286 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp6_ = _tmp5_;
#line 286 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp7_ = g_strdup (_tmp6_);
#line 286 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_g_free0 (_tmp3_->name);
#line 286 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp3_->name = _tmp7_;
#line 288 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp8_ = application_database;
#line 288 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp9_ = self->priv->_project;
#line 288 "/run/build/planner/src/Widgets/ProjectRow.vala"
		if (services_database_update_project (_tmp8_, _tmp9_) == SQLITE_DONE) {
#line 533 "ProjectRow.c"
			GtkLabel* _tmp10_;
			ObjectsProject* _tmp11_;
			const gchar* _tmp12_;
			gchar* _tmp13_;
			gchar* _tmp14_;
			GtkLabel* _tmp15_;
			GtkEntry* _tmp16_;
#line 289 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_tmp10_ = self->priv->name_label;
#line 289 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_tmp11_ = self->priv->_project;
#line 289 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_tmp12_ = _tmp11_->name;
#line 289 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_tmp13_ = g_strdup_printf ("<b>%s</b>", _tmp12_);
#line 289 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_tmp14_ = _tmp13_;
#line 289 "/run/build/planner/src/Widgets/ProjectRow.vala"
			gtk_label_set_label (_tmp10_, _tmp14_);
#line 289 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_g_free0 (_tmp14_);
#line 290 "/run/build/planner/src/Widgets/ProjectRow.vala"
			widgets_project_row_update_tooltip_text (self);
#line 292 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_tmp15_ = self->priv->name_label;
#line 292 "/run/build/planner/src/Widgets/ProjectRow.vala"
			gtk_widget_set_visible ((GtkWidget*) _tmp15_, TRUE);
#line 293 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_tmp16_ = self->priv->name_entry;
#line 293 "/run/build/planner/src/Widgets/ProjectRow.vala"
			gtk_widget_set_visible ((GtkWidget*) _tmp16_, FALSE);
#line 565 "ProjectRow.c"
		}
	}
}


static void
widgets_project_row_update_tooltip_text (WidgetsProjectRow* self)
{
	gint all_tasks = 0;
	ServicesDatabase* _tmp0_;
	ObjectsProject* _tmp1_;
	gint _tmp2_;
	gint completed_tasks = 0;
	ServicesDatabase* _tmp3_;
	ObjectsProject* _tmp4_;
	gint _tmp5_;
	ObjectsProject* _tmp6_;
	const gchar* _tmp7_;
	gchar* _tmp8_;
	gchar* _tmp9_;
	gchar* _tmp10_;
	gchar* _tmp11_;
#line 298 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_return_if_fail (self != NULL);
#line 299 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = application_database;
#line 299 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp1_ = self->priv->_project;
#line 299 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp2_ = _tmp1_->id;
#line 299 "/run/build/planner/src/Widgets/ProjectRow.vala"
	all_tasks = services_database_get_project_tasks_number (_tmp0_, _tmp2_);
#line 300 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp3_ = application_database;
#line 300 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp4_ = self->priv->_project;
#line 300 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp5_ = _tmp4_->id;
#line 300 "/run/build/planner/src/Widgets/ProjectRow.vala"
	completed_tasks = services_database_get_project_completed_tasks_number (_tmp3_, _tmp5_);
#line 302 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp6_ = self->priv->_project;
#line 302 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp7_ = _tmp6_->name;
#line 302 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp8_ = g_strdup_printf (" %i/%i", completed_tasks, all_tasks);
#line 302 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp9_ = _tmp8_;
#line 302 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp10_ = g_strconcat (_tmp7_, _tmp9_, NULL);
#line 302 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp11_ = _tmp10_;
#line 302 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) self, _tmp11_);
#line 302 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_free0 (_tmp11_);
#line 302 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_free0 (_tmp9_);
#line 303 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 626 "ProjectRow.c"
}


static void
widgets_project_row_check_number_label (WidgetsProjectRow* self)
{
	gint number = 0;
	ServicesDatabase* _tmp0_;
	ObjectsProject* _tmp1_;
	gint _tmp2_;
	GtkLabel* _tmp3_;
	gint _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gint _tmp7_;
#line 306 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_return_if_fail (self != NULL);
#line 307 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = application_database;
#line 307 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp1_ = self->priv->_project;
#line 307 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp2_ = _tmp1_->id;
#line 307 "/run/build/planner/src/Widgets/ProjectRow.vala"
	number = services_database_get_project_no_completed_tasks_number (_tmp0_, _tmp2_);
#line 308 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp3_ = self->priv->number_label;
#line 308 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp4_ = number;
#line 308 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp5_ = g_strdup_printf ("%i", _tmp4_);
#line 308 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp6_ = _tmp5_;
#line 308 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_label_set_label (_tmp3_, _tmp6_);
#line 308 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_free0 (_tmp6_);
#line 310 "/run/build/planner/src/Widgets/ProjectRow.vala"
	widgets_project_row_update_tooltip_text (self);
#line 312 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp7_ = number;
#line 312 "/run/build/planner/src/Widgets/ProjectRow.vala"
	if (_tmp7_ <= 0) {
#line 670 "ProjectRow.c"
		GtkLabel* _tmp8_;
		GtkLabel* _tmp9_;
#line 313 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp8_ = self->priv->number_label;
#line 313 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp8_, FALSE);
#line 314 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp9_ = self->priv->number_label;
#line 314 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp9_, TRUE);
#line 681 "ProjectRow.c"
	} else {
		GtkLabel* _tmp10_;
		GtkLabel* _tmp11_;
#line 316 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp10_ = self->priv->number_label;
#line 316 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp10_, TRUE);
#line 317 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp11_ = self->priv->number_label;
#line 317 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp11_, FALSE);
#line 693 "ProjectRow.c"
	}
}


ObjectsProject*
widgets_project_row_get_project (WidgetsProjectRow* self)
{
	ObjectsProject* result;
	ObjectsProject* _tmp0_;
#line 29 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 29 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = self->priv->_project;
#line 29 "/run/build/planner/src/Widgets/ProjectRow.vala"
	result = _tmp0_;
#line 29 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 711 "ProjectRow.c"
}


static gpointer
_objects_project_ref0 (gpointer self)
{
#line 29 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return self ? objects_project_ref (self) : NULL;
#line 720 "ProjectRow.c"
}


static void
widgets_project_row_set_project (WidgetsProjectRow* self,
                                 ObjectsProject* value)
{
#line 29 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_return_if_fail (self != NULL);
#line 29 "/run/build/planner/src/Widgets/ProjectRow.vala"
	if (widgets_project_row_get_project (self) != value) {
#line 732 "ProjectRow.c"
		ObjectsProject* _tmp0_;
#line 29 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp0_ = _objects_project_ref0 (value);
#line 29 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_objects_project_unref0 (self->priv->_project);
#line 29 "/run/build/planner/src/Widgets/ProjectRow.vala"
		self->priv->_project = _tmp0_;
#line 29 "/run/build/planner/src/Widgets/ProjectRow.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_project_row_properties[WIDGETS_PROJECT_ROW_PROJECT_PROPERTY]);
#line 742 "ProjectRow.c"
	}
}


MainWindow*
widgets_project_row_get_window (WidgetsProjectRow* self)
{
	MainWindow* result;
	MainWindow* _tmp0_;
#line 30 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 30 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = self->priv->_window;
#line 30 "/run/build/planner/src/Widgets/ProjectRow.vala"
	result = _tmp0_;
#line 30 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 760 "ProjectRow.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 30 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return self ? g_object_ref (self) : NULL;
#line 769 "ProjectRow.c"
}


static void
widgets_project_row_set_window (WidgetsProjectRow* self,
                                MainWindow* value)
{
#line 30 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_return_if_fail (self != NULL);
#line 30 "/run/build/planner/src/Widgets/ProjectRow.vala"
	if (widgets_project_row_get_window (self) != value) {
#line 781 "ProjectRow.c"
		MainWindow* _tmp0_;
#line 30 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 30 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_g_object_unref0 (self->priv->_window);
#line 30 "/run/build/planner/src/Widgets/ProjectRow.vala"
		self->priv->_window = _tmp0_;
#line 30 "/run/build/planner/src/Widgets/ProjectRow.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_project_row_properties[WIDGETS_PROJECT_ROW_WINDOW_PROPERTY]);
#line 791 "ProjectRow.c"
	}
}


static Block55Data*
block55_data_ref (Block55Data* _data55_)
{
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_atomic_int_inc (&_data55_->_ref_count_);
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return _data55_;
#line 803 "ProjectRow.c"
}


static void
block55_data_unref (void * _userdata_)
{
	Block55Data* _data55_;
	_data55_ = (Block55Data*) _userdata_;
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
	if (g_atomic_int_dec_and_test (&_data55_->_ref_count_)) {
#line 814 "ProjectRow.c"
		WidgetsProjectRow* self;
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
		self = _data55_->self;
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_g_object_unref0 (_data55_->menu_popover);
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_g_object_unref0 (_data55_->menu_revealer);
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_g_object_unref0 (_data55_->menu_button);
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_g_object_unref0 (self);
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
		g_slice_free (Block55Data, _data55_);
#line 828 "ProjectRow.c"
	}
}


static void
_widgets_project_row___lambda200_ (WidgetsProjectRow* self)
{
#line 116 "/run/build/planner/src/Widgets/ProjectRow.vala"
	widgets_project_row_check_number_label (self);
#line 838 "ProjectRow.c"
}


static void
__widgets_project_row___lambda200__services_database_update_indicators (ServicesDatabase* _sender,
                                                                        gpointer self)
{
#line 115 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_widgets_project_row___lambda200_ ((WidgetsProjectRow*) self);
#line 848 "ProjectRow.c"
}


static void
_widgets_project_row___lambda201_ (Block55Data* _data55_)
{
	WidgetsProjectRow* self;
	GtkToggleButton* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 119 "/run/build/planner/src/Widgets/ProjectRow.vala"
	self = _data55_->self;
#line 120 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = _data55_->menu_button;
#line 120 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp1_ = gtk_toggle_button_get_active (_tmp0_);
#line 120 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp2_ = _tmp1_;
#line 120 "/run/build/planner/src/Widgets/ProjectRow.vala"
	if (_tmp2_) {
#line 869 "ProjectRow.c"
		WidgetsPopoversProjectMenu* _tmp3_;
#line 121 "/run/build/planner/src/Widgets/ProjectRow.vala"
		self->menu_open = TRUE;
#line 122 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp3_ = _data55_->menu_popover;
#line 122 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp3_);
#line 877 "ProjectRow.c"
	}
}


static void
__widgets_project_row___lambda201__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                              gpointer self)
{
#line 119 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_widgets_project_row___lambda201_ (self);
#line 888 "ProjectRow.c"
}


static void
_widgets_project_row___lambda202_ (Block55Data* _data55_)
{
	WidgetsProjectRow* self;
	GtkToggleButton* _tmp0_;
	GtkRevealer* _tmp1_;
#line 126 "/run/build/planner/src/Widgets/ProjectRow.vala"
	self = _data55_->self;
#line 127 "/run/build/planner/src/Widgets/ProjectRow.vala"
	self->menu_open = FALSE;
#line 128 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = _data55_->menu_button;
#line 128 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_toggle_button_set_active (_tmp0_, FALSE);
#line 129 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp1_ = _data55_->menu_revealer;
#line 129 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_revealer_set_reveal_child (_tmp1_, FALSE);
#line 910 "ProjectRow.c"
}


static void
__widgets_project_row___lambda202__gtk_popover_closed (GtkPopover* _sender,
                                                       gpointer self)
{
#line 126 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_widgets_project_row___lambda202_ (self);
#line 920 "ProjectRow.c"
}


static gboolean
____lambda204_ (WidgetsProjectRow* self)
{
	gboolean result = FALSE;
	GtkEntry* _tmp0_;
#line 166 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = self->priv->name_entry;
#line 166 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_widget_grab_focus ((GtkWidget*) _tmp0_);
#line 167 "/run/build/planner/src/Widgets/ProjectRow.vala"
	result = FALSE;
#line 167 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 937 "ProjectRow.c"
}


static gboolean
_____lambda204__gsource_func (gpointer self)
{
	gboolean result;
	result = ____lambda204_ ((WidgetsProjectRow*) self);
#line 165 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 948 "ProjectRow.c"
}


static void
_gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                   gpointer self)
{
#line 173 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_main_quit ();
#line 958 "ProjectRow.c"
}


static gboolean
________lambda205_ (WidgetsProjectRow* self)
{
	gboolean result = FALSE;
#line 196 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_widget_destroy ((GtkWidget*) self);
#line 197 "/run/build/planner/src/Widgets/ProjectRow.vala"
	result = G_SOURCE_REMOVE;
#line 197 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 972 "ProjectRow.c"
}


static gboolean
_________lambda205__gsource_func (gpointer self)
{
	gboolean result;
	result = ________lambda205_ ((WidgetsProjectRow*) self);
#line 195 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 983 "ProjectRow.c"
}


static void
_widgets_project_row___lambda203_ (WidgetsProjectRow* self,
                                   gint index)
{
#line 133 "/run/build/planner/src/Widgets/ProjectRow.vala"
	if (index == 0) {
#line 993 "ProjectRow.c"
		gint tasks_number = 0;
		ServicesDatabase* _tmp0_;
		ObjectsProject* _tmp1_;
		gint _tmp2_;
		GraniteMessageDialog* message_dialog = NULL;
		gint _tmp3_;
		gchar* _tmp4_;
		gchar* _tmp5_;
		GraniteMessageDialog* _tmp6_;
		GraniteMessageDialog* _tmp7_;
		GtkButton* remove_button = NULL;
		GtkButton* _tmp8_;
		GtkButton* _tmp9_;
		GtkStyleContext* _tmp10_;
		GraniteMessageDialog* _tmp11_;
		GtkButton* _tmp12_;
		GraniteMessageDialog* _tmp13_;
		GraniteMessageDialog* _tmp14_;
		GraniteMessageDialog* _tmp36_;
#line 134 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp0_ = application_database;
#line 134 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp1_ = self->priv->_project;
#line 134 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp2_ = _tmp1_->id;
#line 134 "/run/build/planner/src/Widgets/ProjectRow.vala"
		tasks_number = services_database_get_project_no_completed_tasks_number (_tmp0_, _tmp2_);
#line 136 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp3_ = tasks_number;
#line 136 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp4_ = g_strdup_printf ("This project contains %i incomplete tasks", _tmp3_);
#line 136 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp5_ = _tmp4_;
#line 136 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp6_ = granite_message_dialog_new_with_image_from_icon_name (_ ("Are you sure you want to mark as completed this project?"), _ (_tmp5_), "dialog-warning", GTK_BUTTONS_CANCEL);
#line 136 "/run/build/planner/src/Widgets/ProjectRow.vala"
		g_object_ref_sink (_tmp6_);
#line 136 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp7_ = _tmp6_;
#line 136 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_g_free0 (_tmp5_);
#line 136 "/run/build/planner/src/Widgets/ProjectRow.vala"
		message_dialog = _tmp7_;
#line 142 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp8_ = (GtkButton*) gtk_button_new_with_label (_ ("Mark as Completed"));
#line 142 "/run/build/planner/src/Widgets/ProjectRow.vala"
		g_object_ref_sink (_tmp8_);
#line 142 "/run/build/planner/src/Widgets/ProjectRow.vala"
		remove_button = _tmp8_;
#line 143 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp9_ = remove_button;
#line 143 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) _tmp9_);
#line 143 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_style_context_add_class (_tmp10_, GTK_STYLE_CLASS_DESTRUCTIVE_ACTION);
#line 144 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp11_ = message_dialog;
#line 144 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp12_ = remove_button;
#line 144 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_dialog_add_action_widget ((GtkDialog*) _tmp11_, (GtkWidget*) _tmp12_, (gint) GTK_RESPONSE_ACCEPT);
#line 146 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp13_ = message_dialog;
#line 146 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp13_);
#line 148 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp14_ = message_dialog;
#line 148 "/run/build/planner/src/Widgets/ProjectRow.vala"
		if (gtk_dialog_run ((GtkDialog*) _tmp14_) == ((gint) GTK_RESPONSE_ACCEPT)) {
#line 1063 "ProjectRow.c"
			GeeArrayList* all_tasks = NULL;
			GeeArrayList* _tmp15_;
			ServicesDatabase* _tmp16_;
			ObjectsProject* _tmp17_;
			gint _tmp18_;
			GeeArrayList* _tmp19_;
#line 149 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_tmp15_ = gee_array_list_new (OBJECTS_TYPE_TASK, (GBoxedCopyFunc) objects_task_ref, (GDestroyNotify) objects_task_unref, NULL, NULL, NULL);
#line 149 "/run/build/planner/src/Widgets/ProjectRow.vala"
			all_tasks = _tmp15_;
#line 150 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_tmp16_ = application_database;
#line 150 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_tmp17_ = self->priv->_project;
#line 150 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_tmp18_ = _tmp17_->id;
#line 150 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_tmp19_ = services_database_get_all_tasks_by_project (_tmp16_, _tmp18_);
#line 150 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_g_object_unref0 (all_tasks);
#line 150 "/run/build/planner/src/Widgets/ProjectRow.vala"
			all_tasks = _tmp19_;
#line 1086 "ProjectRow.c"
			{
				GeeArrayList* _task_list = NULL;
				GeeArrayList* _tmp20_;
				GeeArrayList* _tmp21_;
				gint _task_size = 0;
				GeeArrayList* _tmp22_;
				gint _tmp23_;
				gint _tmp24_;
				gint _task_index = 0;
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_tmp20_ = all_tasks;
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_tmp21_ = _g_object_ref0 (_tmp20_);
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_task_list = _tmp21_;
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_tmp22_ = _task_list;
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_tmp23_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp22_);
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_tmp24_ = _tmp23_;
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_task_size = _tmp24_;
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_task_index = -1;
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
				while (TRUE) {
#line 1114 "ProjectRow.c"
					gint _tmp25_;
					gint _tmp26_;
					gint _tmp27_;
					ObjectsTask* task = NULL;
					GeeArrayList* _tmp28_;
					gint _tmp29_;
					gpointer _tmp30_;
					ObjectsTask* _tmp31_;
					ServicesDatabase* _tmp32_;
					ObjectsTask* _tmp33_;
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp25_ = _task_index;
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_task_index = _tmp25_ + 1;
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp26_ = _task_index;
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp27_ = _task_size;
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
					if (!(_tmp26_ < _tmp27_)) {
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
						break;
#line 1137 "ProjectRow.c"
					}
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp28_ = _task_list;
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp29_ = _task_index;
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp30_ = gee_abstract_list_get ((GeeAbstractList*) _tmp28_, _tmp29_);
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
					task = (ObjectsTask*) _tmp30_;
#line 153 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp31_ = task;
#line 153 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp31_->checked = 1;
#line 154 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp32_ = application_database;
#line 154 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp33_ = task;
#line 154 "/run/build/planner/src/Widgets/ProjectRow.vala"
					if (services_database_update_task (_tmp32_, _tmp33_) == SQLITE_DONE) {
#line 1157 "ProjectRow.c"
						ServicesDatabase* _tmp34_;
						ObjectsTask* _tmp35_;
#line 155 "/run/build/planner/src/Widgets/ProjectRow.vala"
						_tmp34_ = application_database;
#line 155 "/run/build/planner/src/Widgets/ProjectRow.vala"
						_tmp35_ = task;
#line 155 "/run/build/planner/src/Widgets/ProjectRow.vala"
						g_signal_emit_by_name (_tmp34_, "update-task-signal", _tmp35_);
#line 1166 "ProjectRow.c"
					}
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_objects_task_unref0 (task);
#line 1170 "ProjectRow.c"
				}
#line 152 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_g_object_unref0 (_task_list);
#line 1174 "ProjectRow.c"
			}
#line 148 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_g_object_unref0 (all_tasks);
#line 1178 "ProjectRow.c"
		}
#line 160 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp36_ = message_dialog;
#line 160 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_widget_destroy ((GtkWidget*) _tmp36_);
#line 133 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_g_object_unref0 (remove_button);
#line 133 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_g_object_unref0 (message_dialog);
#line 1188 "ProjectRow.c"
	} else {
#line 161 "/run/build/planner/src/Widgets/ProjectRow.vala"
		if (index == 1) {
#line 1192 "ProjectRow.c"
			GtkLabel* _tmp37_;
			GtkEntry* _tmp38_;
#line 162 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_tmp37_ = self->priv->name_label;
#line 162 "/run/build/planner/src/Widgets/ProjectRow.vala"
			gtk_widget_set_visible ((GtkWidget*) _tmp37_, FALSE);
#line 163 "/run/build/planner/src/Widgets/ProjectRow.vala"
			_tmp38_ = self->priv->name_entry;
#line 163 "/run/build/planner/src/Widgets/ProjectRow.vala"
			gtk_widget_set_visible ((GtkWidget*) _tmp38_, TRUE);
#line 165 "/run/build/planner/src/Widgets/ProjectRow.vala"
			g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 200, _____lambda204__gsource_func, g_object_ref (self), g_object_unref);
#line 1205 "ProjectRow.c"
		} else {
#line 169 "/run/build/planner/src/Widgets/ProjectRow.vala"
			if (index == 2) {
#line 1209 "ProjectRow.c"
				DialogsShareDialog* share_dialog = NULL;
				Application* _tmp39_;
				Application* _tmp40_;
				MainWindow* _tmp41_;
				DialogsShareDialog* _tmp42_;
				DialogsShareDialog* _tmp43_;
				ObjectsProject* _tmp44_;
				gint _tmp45_;
				DialogsShareDialog* _tmp46_;
				DialogsShareDialog* _tmp47_;
#line 171 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_tmp39_ = application_get_instance ();
#line 171 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_tmp40_ = _tmp39_;
#line 171 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_tmp41_ = _tmp40_->main_window;
#line 171 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_tmp42_ = dialogs_share_dialog_new (_tmp41_);
#line 171 "/run/build/planner/src/Widgets/ProjectRow.vala"
				g_object_ref_sink (_tmp42_);
#line 171 "/run/build/planner/src/Widgets/ProjectRow.vala"
				share_dialog = _tmp42_;
#line 172 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_tmp43_ = share_dialog;
#line 172 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_tmp44_ = self->priv->_project;
#line 172 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_tmp45_ = _tmp44_->id;
#line 172 "/run/build/planner/src/Widgets/ProjectRow.vala"
				dialogs_share_dialog_set_project (_tmp43_, _tmp45_);
#line 173 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_tmp46_ = share_dialog;
#line 173 "/run/build/planner/src/Widgets/ProjectRow.vala"
				g_signal_connect ((GtkWidget*) _tmp46_, "destroy", (GCallback) _gtk_main_quit_gtk_widget_destroy, NULL);
#line 174 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_tmp47_ = share_dialog;
#line 174 "/run/build/planner/src/Widgets/ProjectRow.vala"
				gtk_widget_show_all ((GtkWidget*) _tmp47_);
#line 169 "/run/build/planner/src/Widgets/ProjectRow.vala"
				_g_object_unref0 (share_dialog);
#line 1250 "ProjectRow.c"
			} else {
#line 175 "/run/build/planner/src/Widgets/ProjectRow.vala"
				if (index == 3) {
#line 1254 "ProjectRow.c"
					gint tasks_number = 0;
					ServicesDatabase* _tmp48_;
					ObjectsProject* _tmp49_;
					gint _tmp50_;
					GraniteMessageDialog* message_dialog = NULL;
					gint _tmp51_;
					gchar* _tmp52_;
					gchar* _tmp53_;
					GraniteMessageDialog* _tmp54_;
					GraniteMessageDialog* _tmp55_;
					GtkButton* remove_button = NULL;
					GtkButton* _tmp56_;
					GtkButton* _tmp57_;
					GtkStyleContext* _tmp58_;
					GraniteMessageDialog* _tmp59_;
					GtkButton* _tmp60_;
					GraniteMessageDialog* _tmp61_;
					GraniteMessageDialog* _tmp62_;
					GraniteMessageDialog* _tmp68_;
#line 176 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp48_ = application_database;
#line 176 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp49_ = self->priv->_project;
#line 176 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp50_ = _tmp49_->id;
#line 176 "/run/build/planner/src/Widgets/ProjectRow.vala"
					tasks_number = services_database_get_project_tasks_number (_tmp48_, _tmp50_);
#line 179 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp51_ = tasks_number;
#line 179 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp52_ = g_strdup_printf ("It contains %i elements that are also deleted, this operation can't be" \
" undone", _tmp51_);
#line 179 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp53_ = _tmp52_;
#line 179 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp54_ = granite_message_dialog_new_with_image_from_icon_name (_ ("Are you sure you want to delete this project?"), _ (_tmp53_), "dialog-warning", GTK_BUTTONS_CANCEL);
#line 179 "/run/build/planner/src/Widgets/ProjectRow.vala"
					g_object_ref_sink (_tmp54_);
#line 179 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp55_ = _tmp54_;
#line 179 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_g_free0 (_tmp53_);
#line 179 "/run/build/planner/src/Widgets/ProjectRow.vala"
					message_dialog = _tmp55_;
#line 185 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp56_ = (GtkButton*) gtk_button_new_with_label (_ ("Delete Project"));
#line 185 "/run/build/planner/src/Widgets/ProjectRow.vala"
					g_object_ref_sink (_tmp56_);
#line 185 "/run/build/planner/src/Widgets/ProjectRow.vala"
					remove_button = _tmp56_;
#line 186 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp57_ = remove_button;
#line 186 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp58_ = gtk_widget_get_style_context ((GtkWidget*) _tmp57_);
#line 186 "/run/build/planner/src/Widgets/ProjectRow.vala"
					gtk_style_context_add_class (_tmp58_, GTK_STYLE_CLASS_DESTRUCTIVE_ACTION);
#line 187 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp59_ = message_dialog;
#line 187 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp60_ = remove_button;
#line 187 "/run/build/planner/src/Widgets/ProjectRow.vala"
					gtk_dialog_add_action_widget ((GtkDialog*) _tmp59_, (GtkWidget*) _tmp60_, (gint) GTK_RESPONSE_ACCEPT);
#line 189 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp61_ = message_dialog;
#line 189 "/run/build/planner/src/Widgets/ProjectRow.vala"
					gtk_widget_show_all ((GtkWidget*) _tmp61_);
#line 191 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp62_ = message_dialog;
#line 191 "/run/build/planner/src/Widgets/ProjectRow.vala"
					if (gtk_dialog_run ((GtkDialog*) _tmp62_) == ((gint) GTK_RESPONSE_ACCEPT)) {
#line 1324 "ProjectRow.c"
						ServicesDatabase* _tmp63_;
						ObjectsProject* _tmp64_;
						gint _tmp65_;
#line 192 "/run/build/planner/src/Widgets/ProjectRow.vala"
						_tmp63_ = application_database;
#line 192 "/run/build/planner/src/Widgets/ProjectRow.vala"
						_tmp64_ = self->priv->_project;
#line 192 "/run/build/planner/src/Widgets/ProjectRow.vala"
						_tmp65_ = _tmp64_->id;
#line 192 "/run/build/planner/src/Widgets/ProjectRow.vala"
						if (services_database_remove_project (_tmp63_, _tmp65_) == SQLITE_DONE) {
#line 1336 "ProjectRow.c"
							ServicesDatabase* _tmp66_;
							ObjectsProject* _tmp67_;
#line 193 "/run/build/planner/src/Widgets/ProjectRow.vala"
							_tmp66_ = application_database;
#line 193 "/run/build/planner/src/Widgets/ProjectRow.vala"
							_tmp67_ = self->priv->_project;
#line 193 "/run/build/planner/src/Widgets/ProjectRow.vala"
							g_signal_emit_by_name (_tmp66_, "on-signal-remove-project", _tmp67_);
#line 195 "/run/build/planner/src/Widgets/ProjectRow.vala"
							g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 250, _________lambda205__gsource_func, g_object_ref (self), g_object_unref);
#line 1347 "ProjectRow.c"
						}
					}
#line 202 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_tmp68_ = message_dialog;
#line 202 "/run/build/planner/src/Widgets/ProjectRow.vala"
					gtk_widget_destroy ((GtkWidget*) _tmp68_);
#line 175 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_g_object_unref0 (remove_button);
#line 175 "/run/build/planner/src/Widgets/ProjectRow.vala"
					_g_object_unref0 (message_dialog);
#line 1358 "ProjectRow.c"
				}
			}
		}
	}
}


static void
__widgets_project_row___lambda203__widgets_popovers_project_menu_on_selected_menu (WidgetsPopoversProjectMenu* _sender,
                                                                                   gint index,
                                                                                   gpointer self)
{
#line 132 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_widgets_project_row___lambda203_ ((WidgetsProjectRow*) self, index);
#line 1373 "ProjectRow.c"
}


static gboolean
___lambda207_ (WidgetsProjectRow* self)
{
	gboolean result = FALSE;
	GtkEntry* _tmp0_;
#line 212 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = self->priv->name_entry;
#line 212 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_widget_grab_focus ((GtkWidget*) _tmp0_);
#line 213 "/run/build/planner/src/Widgets/ProjectRow.vala"
	result = FALSE;
#line 213 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 1390 "ProjectRow.c"
}


static gboolean
____lambda207__gsource_func (gpointer self)
{
	gboolean result;
	result = ___lambda207_ ((WidgetsProjectRow*) self);
#line 211 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 1401 "ProjectRow.c"
}


static gboolean
_widgets_project_row___lambda206_ (WidgetsProjectRow* self,
                                   GdkEvent* event)
{
	gboolean result = FALSE;
	GdkEventType _tmp0_;
#line 206 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 207 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = event->type;
#line 207 "/run/build/planner/src/Widgets/ProjectRow.vala"
	if (_tmp0_ == GDK_2BUTTON_PRESS) {
#line 1417 "ProjectRow.c"
		GtkLabel* _tmp1_;
		GtkEntry* _tmp2_;
#line 208 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp1_ = self->priv->name_label;
#line 208 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp1_, FALSE);
#line 209 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp2_ = self->priv->name_entry;
#line 209 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp2_, TRUE);
#line 211 "/run/build/planner/src/Widgets/ProjectRow.vala"
		g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 200, ____lambda207__gsource_func, g_object_ref (self), g_object_unref);
#line 1430 "ProjectRow.c"
	}
#line 217 "/run/build/planner/src/Widgets/ProjectRow.vala"
	result = FALSE;
#line 217 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 1436 "ProjectRow.c"
}


static gboolean
__widgets_project_row___lambda206__gtk_widget_event (GtkWidget* _sender,
                                                     GdkEvent* event,
                                                     gpointer self)
{
	gboolean result;
	result = _widgets_project_row___lambda206_ ((WidgetsProjectRow*) self, event);
#line 206 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 1449 "ProjectRow.c"
}


static void
_widgets_project_row___lambda208_ (WidgetsProjectRow* self)
{
#line 221 "/run/build/planner/src/Widgets/ProjectRow.vala"
	widgets_project_row_update_project (self);
#line 1458 "ProjectRow.c"
}


static void
__widgets_project_row___lambda208__gtk_entry_activate (GtkEntry* _sender,
                                                       gpointer self)
{
#line 220 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_widgets_project_row___lambda208_ ((WidgetsProjectRow*) self);
#line 1468 "ProjectRow.c"
}


static gboolean
_widgets_project_row___lambda209_ (WidgetsProjectRow* self)
{
	gboolean result = FALSE;
#line 225 "/run/build/planner/src/Widgets/ProjectRow.vala"
	widgets_project_row_update_project (self);
#line 226 "/run/build/planner/src/Widgets/ProjectRow.vala"
	result = FALSE;
#line 226 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 1482 "ProjectRow.c"
}


static gboolean
__widgets_project_row___lambda209__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                               GdkEventFocus* event,
                                                               gpointer self)
{
	gboolean result;
	result = _widgets_project_row___lambda209_ ((WidgetsProjectRow*) self);
#line 224 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 1495 "ProjectRow.c"
}


static gboolean
_widgets_project_row___lambda210_ (WidgetsProjectRow* self,
                                   GdkEventKey* key)
{
	gboolean result = FALSE;
	guint _tmp0_;
#line 229 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_return_val_if_fail (key != NULL, FALSE);
#line 230 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = key->keyval;
#line 230 "/run/build/planner/src/Widgets/ProjectRow.vala"
	if (_tmp0_ == ((guint) 65307)) {
#line 231 "/run/build/planner/src/Widgets/ProjectRow.vala"
		widgets_project_row_update_project (self);
#line 1513 "ProjectRow.c"
	}
#line 234 "/run/build/planner/src/Widgets/ProjectRow.vala"
	result = FALSE;
#line 234 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 1519 "ProjectRow.c"
}


static gboolean
__widgets_project_row___lambda210__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                 GdkEventKey* event,
                                                                 gpointer self)
{
	gboolean result;
	result = _widgets_project_row___lambda210_ ((WidgetsProjectRow*) self, event);
#line 229 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 1532 "ProjectRow.c"
}


static gboolean
_widgets_project_row___lambda211_ (Block55Data* _data55_,
                                   GdkEventCrossing* event)
{
	WidgetsProjectRow* self;
	gboolean result = FALSE;
	gboolean _tmp0_;
#line 237 "/run/build/planner/src/Widgets/ProjectRow.vala"
	self = _data55_->self;
#line 237 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 238 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = self->menu_open;
#line 238 "/run/build/planner/src/Widgets/ProjectRow.vala"
	if (_tmp0_ != TRUE) {
#line 1551 "ProjectRow.c"
		GtkRevealer* _tmp1_;
#line 239 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp1_ = _data55_->menu_revealer;
#line 239 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_revealer_set_reveal_child (_tmp1_, TRUE);
#line 1557 "ProjectRow.c"
	}
#line 242 "/run/build/planner/src/Widgets/ProjectRow.vala"
	result = FALSE;
#line 242 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 1563 "ProjectRow.c"
}


static gboolean
__widgets_project_row___lambda211__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                                  GdkEventCrossing* event,
                                                                  gpointer self)
{
	gboolean result;
	result = _widgets_project_row___lambda211_ (self, event);
#line 237 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 1576 "ProjectRow.c"
}


static gboolean
_widgets_project_row___lambda212_ (Block55Data* _data55_,
                                   GdkEventCrossing* event)
{
	WidgetsProjectRow* self;
	gboolean result = FALSE;
	GdkNotifyType _tmp0_;
	gboolean _tmp1_;
#line 245 "/run/build/planner/src/Widgets/ProjectRow.vala"
	self = _data55_->self;
#line 245 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 246 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = event->detail;
#line 246 "/run/build/planner/src/Widgets/ProjectRow.vala"
	if (_tmp0_ == GDK_NOTIFY_INFERIOR) {
#line 247 "/run/build/planner/src/Widgets/ProjectRow.vala"
		result = FALSE;
#line 247 "/run/build/planner/src/Widgets/ProjectRow.vala"
		return result;
#line 1600 "ProjectRow.c"
	}
#line 250 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp1_ = self->menu_open;
#line 250 "/run/build/planner/src/Widgets/ProjectRow.vala"
	if (_tmp1_ != TRUE) {
#line 1606 "ProjectRow.c"
		GtkRevealer* _tmp2_;
#line 251 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp2_ = _data55_->menu_revealer;
#line 251 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_revealer_set_reveal_child (_tmp2_, FALSE);
#line 1612 "ProjectRow.c"
	}
#line 254 "/run/build/planner/src/Widgets/ProjectRow.vala"
	result = FALSE;
#line 254 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 1618 "ProjectRow.c"
}


static gboolean
__widgets_project_row___lambda212__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                                  GdkEventCrossing* event,
                                                                  gpointer self)
{
	gboolean result;
	result = _widgets_project_row___lambda212_ (self, event);
#line 245 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return result;
#line 1631 "ProjectRow.c"
}


static void
_widgets_project_row___lambda213_ (WidgetsProjectRow* self,
                                   ObjectsProject* _project)
{
	ObjectsProject* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
#line 257 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_return_if_fail (_project != NULL);
#line 258 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = self->priv->_project;
#line 258 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp1_ = _tmp0_->id;
#line 258 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp2_ = _project->id;
#line 258 "/run/build/planner/src/Widgets/ProjectRow.vala"
	if (_tmp1_ == _tmp2_) {
#line 1652 "ProjectRow.c"
		GtkLabel* _tmp3_;
		const gchar* _tmp4_;
		gchar* _tmp5_;
		gchar* _tmp6_;
		ObjectsProject* _tmp7_;
		const gchar* _tmp8_;
		gchar* _tmp9_;
#line 259 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp3_ = self->priv->name_label;
#line 259 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp4_ = _project->name;
#line 259 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp5_ = g_strdup_printf ("<b>%s</b>", _tmp4_);
#line 259 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp6_ = _tmp5_;
#line 259 "/run/build/planner/src/Widgets/ProjectRow.vala"
		gtk_label_set_label (_tmp3_, _tmp6_);
#line 259 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_g_free0 (_tmp6_);
#line 260 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp7_ = self->priv->_project;
#line 260 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp8_ = _project->color;
#line 260 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp9_ = g_strdup (_tmp8_);
#line 260 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_g_free0 (_tmp7_->color);
#line 260 "/run/build/planner/src/Widgets/ProjectRow.vala"
		_tmp7_->color = _tmp9_;
#line 262 "/run/build/planner/src/Widgets/ProjectRow.vala"
		widgets_project_row_apply_styles (self);
#line 1684 "ProjectRow.c"
	}
}


static void
__widgets_project_row___lambda213__services_database_update_project_signal (ServicesDatabase* _sender,
                                                                            ObjectsProject* project,
                                                                            gpointer self)
{
#line 257 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_widgets_project_row___lambda213_ ((WidgetsProjectRow*) self, project);
#line 1696 "ProjectRow.c"
}


static GObject *
widgets_project_row_constructor (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsProjectRow * self;
	Block55Data* _data55_;
	GtkStyleContext* _tmp0_;
	GtkGrid* label_color = NULL;
	GtkGrid* _tmp1_;
	GtkGrid* _tmp2_;
	GtkStyleContext* _tmp3_;
	ObjectsProject* _tmp4_;
	gint _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	GtkGrid* _tmp8_;
	GtkGrid* _tmp9_;
	ObjectsProject* _tmp10_;
	const gchar* _tmp11_;
	gchar* _tmp12_;
	gchar* _tmp13_;
	GtkLabel* _tmp14_;
	GtkLabel* _tmp15_;
	GtkLabel* _tmp16_;
	GtkLabel* _tmp17_;
	GtkEntry* _tmp18_;
	GtkEntry* _tmp19_;
	GtkEntry* _tmp20_;
	GtkEntry* _tmp21_;
	GtkEntry* _tmp22_;
	ObjectsProject* _tmp23_;
	const gchar* _tmp24_;
	GtkEntry* _tmp25_;
	GtkEntry* _tmp26_;
	GtkToggleButton* _tmp27_;
	GtkToggleButton* _tmp28_;
	GtkToggleButton* _tmp29_;
	GtkImage* _tmp30_;
	GtkImage* _tmp31_;
	GtkToggleButton* _tmp32_;
	GtkToggleButton* _tmp33_;
	GtkStyleContext* _tmp34_;
	GtkToggleButton* _tmp35_;
	GtkStyleContext* _tmp36_;
	GtkToggleButton* _tmp37_;
	GtkStyleContext* _tmp38_;
	GtkRevealer* _tmp39_;
	GtkRevealer* _tmp40_;
	GtkRevealer* _tmp41_;
	GtkToggleButton* _tmp42_;
	GtkRevealer* _tmp43_;
	GtkToggleButton* _tmp44_;
	WidgetsPopoversProjectMenu* _tmp45_;
	GtkLabel* _tmp46_;
	GtkLabel* _tmp47_;
	GtkBox* _tmp48_;
	GtkBox* _tmp49_;
	GtkBox* _tmp50_;
	GtkGrid* _tmp51_;
	GtkBox* _tmp52_;
	GtkLabel* _tmp53_;
	GtkBox* _tmp54_;
	GtkEntry* _tmp55_;
	GtkBox* _tmp56_;
	GtkRevealer* _tmp57_;
	GtkBox* _tmp58_;
	GtkLabel* _tmp59_;
	GtkEventBox* eventbox = NULL;
	GtkEventBox* _tmp60_;
	GtkEventBox* _tmp61_;
	GtkEventBox* _tmp62_;
	GtkBox* _tmp63_;
	GtkEventBox* _tmp64_;
	ServicesDatabase* _tmp65_;
	GtkToggleButton* _tmp66_;
	WidgetsPopoversProjectMenu* _tmp67_;
	WidgetsPopoversProjectMenu* _tmp68_;
	GtkEventBox* _tmp69_;
	GtkEntry* _tmp70_;
	GtkEntry* _tmp71_;
	GtkEntry* _tmp72_;
	GtkEventBox* _tmp73_;
	GtkEventBox* _tmp74_;
	ServicesDatabase* _tmp75_;
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
	parent_class = G_OBJECT_CLASS (widgets_project_row_parent_class);
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_PROJECT_ROW, WidgetsProjectRow);
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_data55_ = g_slice_new0 (Block55Data);
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_data55_->_ref_count_ = 1;
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_data55_->self = g_object_ref (self);
#line 54 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_widget_set_can_focus ((GtkWidget*) self, TRUE);
#line 55 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 55 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_style_context_add_class (_tmp0_, "item-row");
#line 57 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp1_ = (GtkGrid*) gtk_grid_new ();
#line 57 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_object_ref_sink (_tmp1_);
#line 57 "/run/build/planner/src/Widgets/ProjectRow.vala"
	label_color = _tmp1_;
#line 58 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp2_ = label_color;
#line 58 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp3_ = gtk_widget_get_style_context ((GtkWidget*) _tmp2_);
#line 58 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp4_ = self->priv->_project;
#line 58 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp5_ = _tmp4_->id;
#line 58 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp6_ = g_strdup_printf ("proyect-%i", _tmp5_);
#line 58 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp7_ = _tmp6_;
#line 58 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_style_context_add_class (_tmp3_, _tmp7_);
#line 58 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_free0 (_tmp7_);
#line 59 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp8_ = label_color;
#line 59 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_widget_set_size_request ((GtkWidget*) _tmp8_, 16, 16);
#line 60 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp9_ = label_color;
#line 60 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_object_set ((GtkWidget*) _tmp9_, "margin", 6, NULL);
#line 62 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp10_ = self->priv->_project;
#line 62 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp11_ = _tmp10_->name;
#line 62 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp12_ = g_strdup_printf ("<b>%s</b>", _tmp11_);
#line 62 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp13_ = _tmp12_;
#line 62 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp14_ = (GtkLabel*) gtk_label_new (_tmp13_);
#line 62 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_object_ref_sink (_tmp14_);
#line 62 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_object_unref0 (self->priv->name_label);
#line 62 "/run/build/planner/src/Widgets/ProjectRow.vala"
	self->priv->name_label = _tmp14_;
#line 62 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_free0 (_tmp13_);
#line 63 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp15_ = self->priv->name_label;
#line 63 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_label_set_ellipsize (_tmp15_, PANGO_ELLIPSIZE_END);
#line 64 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp16_ = self->priv->name_label;
#line 64 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp16_, GTK_ALIGN_CENTER);
#line 65 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp17_ = self->priv->name_label;
#line 65 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_label_set_use_markup (_tmp17_, TRUE);
#line 67 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp18_ = (GtkEntry*) gtk_entry_new ();
#line 67 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_object_ref_sink (_tmp18_);
#line 67 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_object_unref0 (self->priv->name_entry);
#line 67 "/run/build/planner/src/Widgets/ProjectRow.vala"
	self->priv->name_entry = _tmp18_;
#line 68 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp19_ = self->priv->name_entry;
#line 68 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp19_, GTK_ALIGN_CENTER);
#line 69 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp20_ = self->priv->name_entry;
#line 69 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_object_set ((GtkWidget*) _tmp20_, "expand", TRUE, NULL);
#line 70 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp21_ = self->priv->name_entry;
#line 70 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_entry_set_max_length (_tmp21_, 50);
#line 71 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp22_ = self->priv->name_entry;
#line 71 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp23_ = self->priv->_project;
#line 71 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp24_ = _tmp23_->name;
#line 71 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_entry_set_text (_tmp22_, _tmp24_);
#line 72 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp25_ = self->priv->name_entry;
#line 72 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_widget_set_no_show_all ((GtkWidget*) _tmp25_, TRUE);
#line 73 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp26_ = self->priv->name_entry;
#line 73 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_entry_set_placeholder_text (_tmp26_, _ ("Project name"));
#line 75 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp27_ = (GtkToggleButton*) gtk_toggle_button_new ();
#line 75 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_object_ref_sink (_tmp27_);
#line 75 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_data55_->menu_button = _tmp27_;
#line 76 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp28_ = _data55_->menu_button;
#line 76 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp28_, FALSE);
#line 77 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp29_ = _data55_->menu_button;
#line 77 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp30_ = (GtkImage*) gtk_image_new_from_icon_name ("view-more-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 77 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_object_ref_sink (_tmp30_);
#line 77 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp31_ = _tmp30_;
#line 77 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_container_add ((GtkContainer*) _tmp29_, (GtkWidget*) _tmp31_);
#line 77 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_object_unref0 (_tmp31_);
#line 78 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp32_ = _data55_->menu_button;
#line 78 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp32_, _ ("Menu"));
#line 79 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp33_ = _data55_->menu_button;
#line 79 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp34_ = gtk_widget_get_style_context ((GtkWidget*) _tmp33_);
#line 79 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_style_context_add_class (_tmp34_, GTK_STYLE_CLASS_FLAT);
#line 80 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp35_ = _data55_->menu_button;
#line 80 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp36_ = gtk_widget_get_style_context ((GtkWidget*) _tmp35_);
#line 80 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_style_context_add_class (_tmp36_, "settings-button");
#line 81 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp37_ = _data55_->menu_button;
#line 81 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp38_ = gtk_widget_get_style_context ((GtkWidget*) _tmp37_);
#line 81 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_style_context_add_class (_tmp38_, "menu-button");
#line 83 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp39_ = (GtkRevealer*) gtk_revealer_new ();
#line 83 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_object_ref_sink (_tmp39_);
#line 83 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_data55_->menu_revealer = _tmp39_;
#line 84 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp40_ = _data55_->menu_revealer;
#line 84 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_revealer_set_transition_type (_tmp40_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT);
#line 85 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp41_ = _data55_->menu_revealer;
#line 85 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp42_ = _data55_->menu_button;
#line 85 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_container_add ((GtkContainer*) _tmp41_, (GtkWidget*) _tmp42_);
#line 86 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp43_ = _data55_->menu_revealer;
#line 86 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_revealer_set_reveal_child (_tmp43_, FALSE);
#line 88 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp44_ = _data55_->menu_button;
#line 88 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp45_ = widgets_popovers_project_menu_new ((GtkWidget*) _tmp44_);
#line 88 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_object_ref_sink (_tmp45_);
#line 88 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_data55_->menu_popover = _tmp45_;
#line 90 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp46_ = (GtkLabel*) gtk_label_new (NULL);
#line 90 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_object_ref_sink (_tmp46_);
#line 90 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_object_unref0 (self->priv->number_label);
#line 90 "/run/build/planner/src/Widgets/ProjectRow.vala"
	self->priv->number_label = _tmp46_;
#line 91 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp47_ = self->priv->number_label;
#line 91 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp47_, GTK_ALIGN_CENTER);
#line 93 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp48_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 12);
#line 93 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_object_ref_sink (_tmp48_);
#line 93 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_object_unref0 (self->priv->main_box);
#line 93 "/run/build/planner/src/Widgets/ProjectRow.vala"
	self->priv->main_box = _tmp48_;
#line 94 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp49_ = self->priv->main_box;
#line 94 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_object_set ((GtkWidget*) _tmp49_, "margin", 3, NULL);
#line 96 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp50_ = self->priv->main_box;
#line 96 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp51_ = label_color;
#line 96 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_box_pack_start (_tmp50_, (GtkWidget*) _tmp51_, FALSE, FALSE, (guint) 0);
#line 97 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp52_ = self->priv->main_box;
#line 97 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp53_ = self->priv->name_label;
#line 97 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_box_pack_start (_tmp52_, (GtkWidget*) _tmp53_, FALSE, TRUE, (guint) 0);
#line 98 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp54_ = self->priv->main_box;
#line 98 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp55_ = self->priv->name_entry;
#line 98 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_box_pack_start (_tmp54_, (GtkWidget*) _tmp55_, FALSE, TRUE, (guint) 0);
#line 99 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp56_ = self->priv->main_box;
#line 99 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp57_ = _data55_->menu_revealer;
#line 99 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_box_pack_end (_tmp56_, (GtkWidget*) _tmp57_, FALSE, FALSE, (guint) 0);
#line 100 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp58_ = self->priv->main_box;
#line 100 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp59_ = self->priv->number_label;
#line 100 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_box_pack_end (_tmp58_, (GtkWidget*) _tmp59_, FALSE, FALSE, (guint) 0);
#line 102 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp60_ = (GtkEventBox*) gtk_event_box_new ();
#line 102 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_object_ref_sink (_tmp60_);
#line 102 "/run/build/planner/src/Widgets/ProjectRow.vala"
	eventbox = _tmp60_;
#line 103 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp61_ = eventbox;
#line 103 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_widget_add_events ((GtkWidget*) _tmp61_, (gint) (GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK));
#line 104 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp62_ = eventbox;
#line 104 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp63_ = self->priv->main_box;
#line 104 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_container_add ((GtkContainer*) _tmp62_, (GtkWidget*) _tmp63_);
#line 106 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp64_ = eventbox;
#line 106 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp64_);
#line 107 "/run/build/planner/src/Widgets/ProjectRow.vala"
	widgets_project_row_apply_styles (self);
#line 108 "/run/build/planner/src/Widgets/ProjectRow.vala"
	widgets_project_row_update_tooltip_text (self);
#line 109 "/run/build/planner/src/Widgets/ProjectRow.vala"
	widgets_project_row_check_number_label (self);
#line 112 "/run/build/planner/src/Widgets/ProjectRow.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 115 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp65_ = application_database;
#line 115 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_signal_connect_object (_tmp65_, "update-indicators", (GCallback) __widgets_project_row___lambda200__services_database_update_indicators, self, 0);
#line 119 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp66_ = _data55_->menu_button;
#line 119 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_signal_connect_data (_tmp66_, "toggled", (GCallback) __widgets_project_row___lambda201__gtk_toggle_button_toggled, block55_data_ref (_data55_), (GClosureNotify) block55_data_unref, 0);
#line 126 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp67_ = _data55_->menu_popover;
#line 126 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_signal_connect_data ((GtkPopover*) _tmp67_, "closed", (GCallback) __widgets_project_row___lambda202__gtk_popover_closed, block55_data_ref (_data55_), (GClosureNotify) block55_data_unref, 0);
#line 132 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp68_ = _data55_->menu_popover;
#line 132 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_signal_connect_object (_tmp68_, "on-selected-menu", (GCallback) __widgets_project_row___lambda203__widgets_popovers_project_menu_on_selected_menu, self, 0);
#line 206 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp69_ = eventbox;
#line 206 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp69_, "event", (GCallback) __widgets_project_row___lambda206__gtk_widget_event, self, 0);
#line 220 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp70_ = self->priv->name_entry;
#line 220 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_signal_connect_object (_tmp70_, "activate", (GCallback) __widgets_project_row___lambda208__gtk_entry_activate, self, 0);
#line 224 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp71_ = self->priv->name_entry;
#line 224 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp71_, "focus-out-event", (GCallback) __widgets_project_row___lambda209__gtk_widget_focus_out_event, self, 0);
#line 229 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp72_ = self->priv->name_entry;
#line 229 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_signal_connect_object ((GtkWidget*) _tmp72_, "key-release-event", (GCallback) __widgets_project_row___lambda210__gtk_widget_key_release_event, self, 0);
#line 237 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp73_ = eventbox;
#line 237 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_signal_connect_data ((GtkWidget*) _tmp73_, "enter-notify-event", (GCallback) __widgets_project_row___lambda211__gtk_widget_enter_notify_event, block55_data_ref (_data55_), (GClosureNotify) block55_data_unref, 0);
#line 245 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp74_ = eventbox;
#line 245 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_signal_connect_data ((GtkWidget*) _tmp74_, "leave-notify-event", (GCallback) __widgets_project_row___lambda212__gtk_widget_leave_notify_event, block55_data_ref (_data55_), (GClosureNotify) block55_data_unref, 0);
#line 257 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_tmp75_ = application_database;
#line 257 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_signal_connect_object (_tmp75_, "update-project-signal", (GCallback) __widgets_project_row___lambda213__services_database_update_project_signal, self, 0);
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_object_unref0 (eventbox);
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_object_unref0 (label_color);
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
	block55_data_unref (_data55_);
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_data55_ = NULL;
#line 53 "/run/build/planner/src/Widgets/ProjectRow.vala"
	return obj;
#line 2109 "ProjectRow.c"
}


static void
widgets_project_row_class_init (WidgetsProjectRowClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
	widgets_project_row_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_type_class_add_private (klass, sizeof (WidgetsProjectRowPrivate));
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_project_row_get_property;
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_project_row_set_property;
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_project_row_constructor;
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_project_row_finalize;
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_PROJECT_ROW_PROJECT_PROPERTY, widgets_project_row_properties[WIDGETS_PROJECT_ROW_PROJECT_PROPERTY] = objects_param_spec_project ("project", "project", "project", OBJECTS_TYPE_PROJECT, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_PROJECT_ROW_WINDOW_PROPERTY, widgets_project_row_properties[WIDGETS_PROJECT_ROW_WINDOW_PROPERTY] = g_param_spec_object ("window", "window", "window", TYPE_MAIN_WINDOW, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 2132 "ProjectRow.c"
}


static void
widgets_project_row_instance_init (WidgetsProjectRow * self)
{
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
	self->priv = WIDGETS_PROJECT_ROW_GET_PRIVATE (self);
#line 24 "/run/build/planner/src/Widgets/ProjectRow.vala"
	self->menu_open = FALSE;
#line 2143 "ProjectRow.c"
}


static void
widgets_project_row_finalize (GObject * obj)
{
	WidgetsProjectRow * self;
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_PROJECT_ROW, WidgetsProjectRow);
#line 23 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_object_unref0 (self->priv->main_box);
#line 26 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_object_unref0 (self->priv->name_label);
#line 27 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_object_unref0 (self->priv->name_entry);
#line 28 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_object_unref0 (self->priv->number_label);
#line 29 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_objects_project_unref0 (self->priv->_project);
#line 30 "/run/build/planner/src/Widgets/ProjectRow.vala"
	_g_object_unref0 (self->priv->_window);
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
	G_OBJECT_CLASS (widgets_project_row_parent_class)->finalize (obj);
#line 2167 "ProjectRow.c"
}


GType
widgets_project_row_get_type (void)
{
	static volatile gsize widgets_project_row_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_project_row_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsProjectRowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_project_row_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsProjectRow), 0, (GInstanceInitFunc) widgets_project_row_instance_init, NULL };
		GType widgets_project_row_type_id;
		widgets_project_row_type_id = g_type_register_static (gtk_list_box_row_get_type (), "WidgetsProjectRow", &g_define_type_info, 0);
		g_once_init_leave (&widgets_project_row_type_id__volatile, widgets_project_row_type_id);
	}
	return widgets_project_row_type_id__volatile;
}


static void
_vala_widgets_project_row_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec)
{
	WidgetsProjectRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_PROJECT_ROW, WidgetsProjectRow);
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		case WIDGETS_PROJECT_ROW_PROJECT_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		objects_value_set_project (value, widgets_project_row_get_project (self));
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		case WIDGETS_PROJECT_ROW_WINDOW_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		g_value_set_object (value, widgets_project_row_get_window (self));
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		break;
#line 2207 "ProjectRow.c"
		default:
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		break;
#line 2213 "ProjectRow.c"
	}
}


static void
_vala_widgets_project_row_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec)
{
	WidgetsProjectRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_PROJECT_ROW, WidgetsProjectRow);
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		case WIDGETS_PROJECT_ROW_PROJECT_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		widgets_project_row_set_project (self, objects_value_get_project (value));
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		case WIDGETS_PROJECT_ROW_WINDOW_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		widgets_project_row_set_window (self, g_value_get_object (value));
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		break;
#line 2240 "ProjectRow.c"
		default:
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/ProjectRow.vala"
		break;
#line 2246 "ProjectRow.c"
	}
}



