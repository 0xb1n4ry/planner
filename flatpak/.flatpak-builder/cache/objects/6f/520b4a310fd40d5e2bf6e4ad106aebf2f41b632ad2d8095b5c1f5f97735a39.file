/* abstract-field-details.c generated by valac 0.40.11, the Vala compiler
 * generated from abstract-field-details.vala, do not modify */

/*
 * Copyright (C) 2011 Collabora Ltd.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Marco Barisione <marco.barisione@collabora.co.uk>
 *       Travis Reitter <travis.reitter@collabora.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>


#define FOLKS_TYPE_ABSTRACT_FIELD_DETAILS (folks_abstract_field_details_get_type ())
#define FOLKS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails))
#define FOLKS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))

typedef struct _FolksAbstractFieldDetails FolksAbstractFieldDetails;
typedef struct _FolksAbstractFieldDetailsClass FolksAbstractFieldDetailsClass;
typedef struct _FolksAbstractFieldDetailsPrivate FolksAbstractFieldDetailsPrivate;
enum  {
	FOLKS_ABSTRACT_FIELD_DETAILS_0_PROPERTY,
	FOLKS_ABSTRACT_FIELD_DETAILS_T_TYPE,
	FOLKS_ABSTRACT_FIELD_DETAILS_T_DUP_FUNC,
	FOLKS_ABSTRACT_FIELD_DETAILS_T_DESTROY_FUNC,
	FOLKS_ABSTRACT_FIELD_DETAILS_VALUE_PROPERTY,
	FOLKS_ABSTRACT_FIELD_DETAILS_VALUE_TYPE_PROPERTY,
	FOLKS_ABSTRACT_FIELD_DETAILS_ID_PROPERTY,
	FOLKS_ABSTRACT_FIELD_DETAILS_PARAMETERS_PROPERTY,
	FOLKS_ABSTRACT_FIELD_DETAILS_NUM_PROPERTIES
};
static GParamSpec* folks_abstract_field_details_properties[FOLKS_ABSTRACT_FIELD_DETAILS_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _FolksAbstractFieldDetails {
	GObject parent_instance;
	FolksAbstractFieldDetailsPrivate * priv;
};

struct _FolksAbstractFieldDetailsClass {
	GObjectClass parent_class;
	gboolean (*equal) (FolksAbstractFieldDetails* self, FolksAbstractFieldDetails* that);
	gboolean (*parameters_equal) (FolksAbstractFieldDetails* self, FolksAbstractFieldDetails* that);
	gboolean (*values_equal) (FolksAbstractFieldDetails* self, FolksAbstractFieldDetails* that);
	guint (*hash) (FolksAbstractFieldDetails* self);
	gconstpointer (*get_value) (FolksAbstractFieldDetails* self);
	void (*set_value) (FolksAbstractFieldDetails* self, gconstpointer value);
	const gchar* (*get_id) (FolksAbstractFieldDetails* self);
	void (*set_id) (FolksAbstractFieldDetails* self, const gchar* value);
	GeeMultiMap* (*get_parameters) (FolksAbstractFieldDetails* self);
	void (*set_parameters) (FolksAbstractFieldDetails* self, GeeMultiMap* value);
};

struct _FolksAbstractFieldDetailsPrivate {
	GType t_type;
	GBoxedCopyFunc t_dup_func;
	GDestroyNotify t_destroy_func;
	gpointer _value;
	gchar* _id;
	GeeMultiMap* _parameters;
};


static gpointer folks_abstract_field_details_parent_class = NULL;

GType folks_abstract_field_details_get_type (void) G_GNUC_CONST;
#define FOLKS_ABSTRACT_FIELD_DETAILS_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsPrivate))
#define FOLKS_ABSTRACT_FIELD_DETAILS_PARAM_TYPE "type"
#define FOLKS_ABSTRACT_FIELD_DETAILS_PARAM_TYPE_HOME "home"
#define FOLKS_ABSTRACT_FIELD_DETAILS_PARAM_TYPE_WORK "work"
#define FOLKS_ABSTRACT_FIELD_DETAILS_PARAM_TYPE_OTHER "other"
GeeCollection* folks_abstract_field_details_get_parameter_values (FolksAbstractFieldDetails* self,
                                                                  const gchar* parameter_name);
GeeMultiMap* folks_abstract_field_details_get_parameters (FolksAbstractFieldDetails* self);
void folks_abstract_field_details_add_parameter (FolksAbstractFieldDetails* self,
                                                 const gchar* parameter_name,
                                                 const gchar* parameter_value);
void folks_abstract_field_details_set_parameter (FolksAbstractFieldDetails* self,
                                                 const gchar* parameter_name,
                                                 const gchar* parameter_value);
void folks_abstract_field_details_extend_parameters (FolksAbstractFieldDetails* self,
                                                     GeeMultiMap* additional);
void folks_abstract_field_details_remove_parameter_all (FolksAbstractFieldDetails* self,
                                                        const gchar* parameter_name);
gboolean folks_abstract_field_details_equal (FolksAbstractFieldDetails* self,
                                             FolksAbstractFieldDetails* that);
static gboolean folks_abstract_field_details_real_equal (FolksAbstractFieldDetails* self,
                                                  FolksAbstractFieldDetails* that);
gboolean folks_abstract_field_details_values_equal (FolksAbstractFieldDetails* self,
                                                    FolksAbstractFieldDetails* that);
gboolean folks_abstract_field_details_parameters_equal (FolksAbstractFieldDetails* self,
                                                        FolksAbstractFieldDetails* that);
gboolean folks_abstract_field_details_equal_static (FolksAbstractFieldDetails* left,
                                                    FolksAbstractFieldDetails* right);
static gboolean folks_abstract_field_details_real_parameters_equal (FolksAbstractFieldDetails* self,
                                                             FolksAbstractFieldDetails* that);
static gboolean folks_abstract_field_details_real_values_equal (FolksAbstractFieldDetails* self,
                                                         FolksAbstractFieldDetails* that);
gconstpointer folks_abstract_field_details_get_value (FolksAbstractFieldDetails* self);
guint folks_abstract_field_details_hash (FolksAbstractFieldDetails* self);
static guint folks_abstract_field_details_real_hash (FolksAbstractFieldDetails* self);
guint folks_abstract_field_details_hash_static (FolksAbstractFieldDetails* value);
FolksAbstractFieldDetails* folks_abstract_field_details_construct (GType object_type,
                                                                   GType t_type,
                                                                   GBoxedCopyFunc t_dup_func,
                                                                   GDestroyNotify t_destroy_func);
void folks_abstract_field_details_set_value (FolksAbstractFieldDetails* self,
                                             gconstpointer value);
GType folks_abstract_field_details_get_value_type (FolksAbstractFieldDetails* self);
const gchar* folks_abstract_field_details_get_id (FolksAbstractFieldDetails* self);
void folks_abstract_field_details_set_id (FolksAbstractFieldDetails* self,
                                          const gchar* value);
void folks_abstract_field_details_set_parameters (FolksAbstractFieldDetails* self,
                                                  GeeMultiMap* value);
static void folks_abstract_field_details_finalize (GObject * obj);
static void _vala_folks_abstract_field_details_get_property (GObject * object,
                                                      guint property_id,
                                                      GValue * value,
                                                      GParamSpec * pspec);
static void _vala_folks_abstract_field_details_set_property (GObject * object,
                                                      guint property_id,
                                                      const GValue * value,
                                                      GParamSpec * pspec);


/**
   * Get the values for a parameter
   *
   * @param parameter_name the parameter name
   * @return a collection of values for ``parameter_name`` or ``null`` (i.e. no
   * collection) if there are no such parameters.
   *
   * @since 0.6.0
   */
GeeCollection*
folks_abstract_field_details_get_parameter_values (FolksAbstractFieldDetails* self,
                                                   const gchar* parameter_name)
{
	GeeCollection* result = NULL;
	GeeMultiMap* _tmp0_;
	GeeMultiMap* _tmp1_;
	GeeMultiMap* _tmp2_;
	GeeMultiMap* _tmp3_;
	GeeCollection* _tmp4_;
	GeeCollection* _tmp5_;
	GeeCollection* _tmp6_;
	GeeCollection* _tmp7_;
	GeeCollection* _tmp8_;
#line 169 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 169 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (parameter_name != NULL, NULL);
#line 171 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp0_ = folks_abstract_field_details_get_parameters (self);
#line 171 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp1_ = _tmp0_;
#line 171 "/run/build/folks/folks/abstract-field-details.vala"
	if (gee_multi_map_contains (_tmp1_, parameter_name) == FALSE) {
#line 173 "/run/build/folks/folks/abstract-field-details.vala"
		result = NULL;
#line 173 "/run/build/folks/folks/abstract-field-details.vala"
		return result;
#line 187 "abstract-field-details.c"
	}
#line 176 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp2_ = folks_abstract_field_details_get_parameters (self);
#line 176 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp3_ = _tmp2_;
#line 176 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp4_ = gee_multi_map_get (_tmp3_, parameter_name);
#line 176 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp5_ = _tmp4_;
#line 176 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp6_ = gee_collection_get_read_only_view (_tmp5_);
#line 176 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp7_ = _tmp6_;
#line 176 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp8_ = _tmp7_;
#line 176 "/run/build/folks/folks/abstract-field-details.vala"
	_g_object_unref0 (_tmp5_);
#line 176 "/run/build/folks/folks/abstract-field-details.vala"
	result = _tmp8_;
#line 176 "/run/build/folks/folks/abstract-field-details.vala"
	return result;
#line 209 "abstract-field-details.c"
}


/**
   * Add a new value for a parameter.
   *
   * If there is already a parameter called ``parameter_name`` then
   * ``parameter_value`` is added to the existing ones.
   *
   * @param parameter_name the name of the parameter
   * @param parameter_value the value to add
   *
   * @since 0.6.0
   */
void
folks_abstract_field_details_add_parameter (FolksAbstractFieldDetails* self,
                                            const gchar* parameter_name,
                                            const gchar* parameter_value)
{
	GeeMultiMap* _tmp0_;
	GeeMultiMap* _tmp1_;
#line 190 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_if_fail (self != NULL);
#line 190 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_if_fail (parameter_name != NULL);
#line 190 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_if_fail (parameter_value != NULL);
#line 192 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp0_ = folks_abstract_field_details_get_parameters (self);
#line 192 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp1_ = _tmp0_;
#line 192 "/run/build/folks/folks/abstract-field-details.vala"
	gee_multi_map_set (_tmp1_, parameter_name, parameter_value);
#line 243 "abstract-field-details.c"
}


/**
   * Set the value of a parameter.
   *
   * Sets the parameter called ``parameter_name`` to be ``parameter_value``.
   * If there were already parameters with the same name they are replaced.
   *
   * @param parameter_name the name of the parameter
   * @param parameter_value the value to add
   *
   * @since 0.6.0
   */
void
folks_abstract_field_details_set_parameter (FolksAbstractFieldDetails* self,
                                            const gchar* parameter_name,
                                            const gchar* parameter_value)
{
	GeeMultiMap* _tmp0_;
	GeeMultiMap* _tmp1_;
	GeeMultiMap* _tmp2_;
	GeeMultiMap* _tmp3_;
#line 206 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_if_fail (self != NULL);
#line 206 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_if_fail (parameter_name != NULL);
#line 206 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_if_fail (parameter_value != NULL);
#line 208 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp0_ = folks_abstract_field_details_get_parameters (self);
#line 208 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp1_ = _tmp0_;
#line 208 "/run/build/folks/folks/abstract-field-details.vala"
	gee_multi_map_remove_all (_tmp1_, parameter_name);
#line 209 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp2_ = folks_abstract_field_details_get_parameters (self);
#line 209 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp3_ = _tmp2_;
#line 209 "/run/build/folks/folks/abstract-field-details.vala"
	gee_multi_map_set (_tmp3_, parameter_name, parameter_value);
#line 285 "abstract-field-details.c"
}


/**
   * Extend the existing parameters.
   *
   * Merge the parameters from ``additional`` into the existing ones.
   *
   * @param additional the parameters to add
   *
   * @since 0.6.0
   */
void
folks_abstract_field_details_extend_parameters (FolksAbstractFieldDetails* self,
                                                GeeMultiMap* additional)
{
	GeeMapIterator* iter = NULL;
	GeeMapIterator* _tmp0_;
#line 221 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_if_fail (self != NULL);
#line 221 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_if_fail (additional != NULL);
#line 223 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp0_ = gee_multi_map_map_iterator (additional);
#line 223 "/run/build/folks/folks/abstract-field-details.vala"
	iter = _tmp0_;
#line 225 "/run/build/folks/folks/abstract-field-details.vala"
	while (TRUE) {
#line 314 "abstract-field-details.c"
		GeeMapIterator* _tmp1_;
		GeeMapIterator* _tmp2_;
		gpointer _tmp3_;
		gchar* _tmp4_;
		GeeMapIterator* _tmp5_;
		gpointer _tmp6_;
		gchar* _tmp7_;
#line 225 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp1_ = iter;
#line 225 "/run/build/folks/folks/abstract-field-details.vala"
		if (!gee_map_iterator_next (_tmp1_)) {
#line 225 "/run/build/folks/folks/abstract-field-details.vala"
			break;
#line 328 "abstract-field-details.c"
		}
#line 226 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp2_ = iter;
#line 226 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp3_ = gee_map_iterator_get_key (_tmp2_);
#line 226 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp4_ = (gchar*) _tmp3_;
#line 226 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp5_ = iter;
#line 226 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp6_ = gee_map_iterator_get_value (_tmp5_);
#line 226 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp7_ = (gchar*) _tmp6_;
#line 226 "/run/build/folks/folks/abstract-field-details.vala"
		folks_abstract_field_details_add_parameter (self, _tmp4_, _tmp7_);
#line 226 "/run/build/folks/folks/abstract-field-details.vala"
		_g_free0 (_tmp7_);
#line 226 "/run/build/folks/folks/abstract-field-details.vala"
		_g_free0 (_tmp4_);
#line 348 "abstract-field-details.c"
	}
#line 221 "/run/build/folks/folks/abstract-field-details.vala"
	_g_object_unref0 (iter);
#line 352 "abstract-field-details.c"
}


/**
   * Remove all instances of a parameter.
   *
   * @param parameter_name the name of the parameter
   *
   * @since 0.6.0
   */
void
folks_abstract_field_details_remove_parameter_all (FolksAbstractFieldDetails* self,
                                                   const gchar* parameter_name)
{
	GeeMultiMap* _tmp0_;
	GeeMultiMap* _tmp1_;
#line 236 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_if_fail (self != NULL);
#line 236 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_if_fail (parameter_name != NULL);
#line 238 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp0_ = folks_abstract_field_details_get_parameters (self);
#line 238 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp1_ = _tmp0_;
#line 238 "/run/build/folks/folks/abstract-field-details.vala"
	gee_multi_map_remove_all (_tmp1_, parameter_name);
#line 379 "abstract-field-details.c"
}


/**
   * A fairly-strict equality function for {@link AbstractFieldDetails}.
   *
   * This function compares:
   *
   *  * {@link AbstractFieldDetails.value}s
   *  * {@link AbstractFieldDetails.parameters}
   *
   * And does not compare:
   *
   *  * {@link AbstractFieldDetails.id}s
   *
   * See the description of {@link AbstractFieldDetails.values_equal} for
   * details on the value comparison.
   *
   * To check equality not including the parameters, see
   * {@link AbstractFieldDetails.values_equal}.
   *
   * @param that another {@link AbstractFieldDetails}
   *
   * @return whether the elements are equal
   *
   * @see AbstractFieldDetails.parameters_equal
   * @see AbstractFieldDetails.values_equal
   * @since 0.6.0
   */
static gboolean
folks_abstract_field_details_real_equal (FolksAbstractFieldDetails* self,
                                         FolksAbstractFieldDetails* that)
{
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
#line 267 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (that != NULL, FALSE);
#line 269 "/run/build/folks/folks/abstract-field-details.vala"
	if (G_TYPE_FROM_INSTANCE ((GObject*) self) == G_TYPE_FROM_INSTANCE ((GObject*) that)) {
#line 270 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp1_ = folks_abstract_field_details_values_equal (self, that);
#line 422 "abstract-field-details.c"
	} else {
#line 269 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp1_ = FALSE;
#line 426 "abstract-field-details.c"
	}
#line 269 "/run/build/folks/folks/abstract-field-details.vala"
	if (_tmp1_) {
#line 271 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp0_ = folks_abstract_field_details_parameters_equal (self, that);
#line 432 "abstract-field-details.c"
	} else {
#line 269 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp0_ = FALSE;
#line 436 "abstract-field-details.c"
	}
#line 269 "/run/build/folks/folks/abstract-field-details.vala"
	result = _tmp0_;
#line 269 "/run/build/folks/folks/abstract-field-details.vala"
	return result;
#line 442 "abstract-field-details.c"
}


gboolean
folks_abstract_field_details_equal (FolksAbstractFieldDetails* self,
                                    FolksAbstractFieldDetails* that)
{
#line 267 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 267 "/run/build/folks/folks/abstract-field-details.vala"
	return FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS (self)->equal (self, that);
#line 454 "abstract-field-details.c"
}


/**
   * Same as {@link AbstractFieldDetails.equal}, but static, so we can use
   * libgee 0.8 without an API break.
   *
   * See [[https://bugzilla.gnome.org/show_bug.cgi?id=673918|673918]]
   * This can and should be removed next time we break the API.
   * Note: This uses Gee.EqualDataFunc signature, to avoid having to cast.
   *
   * @param left one {@link AbstractFieldDetails} to compare
   * @param right another {@link AbstractFieldDetails} to compare
   *
   * @return whether the elemants are equal
   *
   * @since 0.9.0
   */
static gpointer
_g_object_ref0 (gpointer self)
{
#line 295 "/run/build/folks/folks/abstract-field-details.vala"
	return self ? g_object_ref (self) : NULL;
#line 478 "abstract-field-details.c"
}


gboolean
folks_abstract_field_details_equal_static (FolksAbstractFieldDetails* left,
                                           FolksAbstractFieldDetails* right)
{
	gboolean result = FALSE;
	FolksAbstractFieldDetails* left_details = NULL;
	FolksAbstractFieldDetails* _tmp0_;
	FolksAbstractFieldDetails* right_details = NULL;
	FolksAbstractFieldDetails* _tmp1_;
#line 289 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (left != NULL, FALSE);
#line 289 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (right != NULL, FALSE);
#line 292 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (left != NULL, FALSE);
#line 293 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (right != NULL, FALSE);
#line 295 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (left, FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails));
#line 295 "/run/build/folks/folks/abstract-field-details.vala"
	left_details = _tmp0_;
#line 296 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp1_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (right, FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails));
#line 296 "/run/build/folks/folks/abstract-field-details.vala"
	right_details = _tmp1_;
#line 297 "/run/build/folks/folks/abstract-field-details.vala"
	result = folks_abstract_field_details_equal (left_details, right_details);
#line 297 "/run/build/folks/folks/abstract-field-details.vala"
	_g_object_unref0 (right_details);
#line 297 "/run/build/folks/folks/abstract-field-details.vala"
	_g_object_unref0 (left_details);
#line 297 "/run/build/folks/folks/abstract-field-details.vala"
	return result;
#line 515 "abstract-field-details.c"
}


/**
   * An equality function which only considers parameters.
   *
   * This function compares:
   *
   *  * {@link AbstractFieldDetails.parameters}
   *
   * And does not compare:
   *
   *  * {@link AbstractFieldDetails.value}s
   *  * {@link AbstractFieldDetails.id}s
   *
   * @param that another {@link AbstractFieldDetails}
   *
   * @return whether the elements' {@link AbstractFieldDetails.value}s are
   * equal.
   *
   * @see AbstractFieldDetails.equal
   * @see AbstractFieldDetails.values_equal
   * @since 0.6.5
   */
static gboolean
folks_abstract_field_details_real_parameters_equal (FolksAbstractFieldDetails* self,
                                                    FolksAbstractFieldDetails* that)
{
	gboolean result = FALSE;
	GeeMultiMap* _tmp0_;
	GeeMultiMap* _tmp1_;
	gint _tmp2_;
	gint _tmp3_;
	GeeMultiMap* _tmp4_;
	GeeMultiMap* _tmp5_;
	gint _tmp6_;
	gint _tmp7_;
#line 321 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (that != NULL, FALSE);
#line 325 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp0_ = folks_abstract_field_details_get_parameters (self);
#line 325 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp1_ = _tmp0_;
#line 325 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp2_ = gee_multi_map_get_size (_tmp1_);
#line 325 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp3_ = _tmp2_;
#line 325 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp4_ = folks_abstract_field_details_get_parameters (that);
#line 325 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp5_ = _tmp4_;
#line 325 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp6_ = gee_multi_map_get_size (_tmp5_);
#line 325 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp7_ = _tmp6_;
#line 325 "/run/build/folks/folks/abstract-field-details.vala"
	if (_tmp3_ != _tmp7_) {
#line 326 "/run/build/folks/folks/abstract-field-details.vala"
		result = FALSE;
#line 326 "/run/build/folks/folks/abstract-field-details.vala"
		return result;
#line 577 "abstract-field-details.c"
	}
	{
		GeeIterator* _param_it = NULL;
		GeeMultiMap* _tmp8_;
		GeeMultiMap* _tmp9_;
		GeeSet* _tmp10_;
		GeeSet* _tmp11_;
		GeeIterator* _tmp12_;
		GeeIterator* _tmp13_;
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp8_ = folks_abstract_field_details_get_parameters (self);
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp9_ = _tmp8_;
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp10_ = gee_multi_map_get_keys (_tmp9_);
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp11_ = _tmp10_;
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp12_ = gee_iterable_iterator ((GeeIterable*) _tmp11_);
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp13_ = _tmp12_;
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
		_g_object_unref0 (_tmp11_);
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
		_param_it = _tmp13_;
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
		while (TRUE) {
#line 605 "abstract-field-details.c"
			GeeIterator* _tmp14_;
			gchar* param = NULL;
			GeeIterator* _tmp15_;
			gpointer _tmp16_;
			GeeMultiMap* _tmp17_;
			GeeMultiMap* _tmp18_;
			const gchar* _tmp19_;
			GeeCollection* this_param_values = NULL;
			GeeMultiMap* _tmp20_;
			GeeMultiMap* _tmp21_;
			GeeCollection* _tmp22_;
			GeeCollection* that_param_values = NULL;
			GeeMultiMap* _tmp23_;
			GeeMultiMap* _tmp24_;
			GeeCollection* _tmp25_;
			GeeCollection* _tmp26_;
			gint _tmp27_;
			gint _tmp28_;
			GeeCollection* _tmp29_;
			gint _tmp30_;
			gint _tmp31_;
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp14_ = _param_it;
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
			if (!gee_iterator_next (_tmp14_)) {
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
				break;
#line 633 "abstract-field-details.c"
			}
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp15_ = _param_it;
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp16_ = gee_iterator_get (_tmp15_);
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
			param = (gchar*) _tmp16_;
#line 344 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp17_ = folks_abstract_field_details_get_parameters (that);
#line 344 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp18_ = _tmp17_;
#line 344 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp19_ = param;
#line 344 "/run/build/folks/folks/abstract-field-details.vala"
			if (!gee_multi_map_contains (_tmp18_, _tmp19_)) {
#line 345 "/run/build/folks/folks/abstract-field-details.vala"
				result = FALSE;
#line 345 "/run/build/folks/folks/abstract-field-details.vala"
				_g_free0 (param);
#line 345 "/run/build/folks/folks/abstract-field-details.vala"
				_g_object_unref0 (_param_it);
#line 345 "/run/build/folks/folks/abstract-field-details.vala"
				return result;
#line 657 "abstract-field-details.c"
			}
#line 347 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp20_ = folks_abstract_field_details_get_parameters (self);
#line 347 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp21_ = _tmp20_;
#line 347 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp22_ = gee_multi_map_get_values (_tmp21_);
#line 347 "/run/build/folks/folks/abstract-field-details.vala"
			this_param_values = _tmp22_;
#line 348 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp23_ = folks_abstract_field_details_get_parameters (that);
#line 348 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp24_ = _tmp23_;
#line 348 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp25_ = gee_multi_map_get_values (_tmp24_);
#line 348 "/run/build/folks/folks/abstract-field-details.vala"
			that_param_values = _tmp25_;
#line 350 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp26_ = this_param_values;
#line 350 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp27_ = gee_collection_get_size (_tmp26_);
#line 350 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp28_ = _tmp27_;
#line 350 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp29_ = that_param_values;
#line 350 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp30_ = gee_collection_get_size (_tmp29_);
#line 350 "/run/build/folks/folks/abstract-field-details.vala"
			_tmp31_ = _tmp30_;
#line 350 "/run/build/folks/folks/abstract-field-details.vala"
			if (_tmp28_ != _tmp31_) {
#line 351 "/run/build/folks/folks/abstract-field-details.vala"
				result = FALSE;
#line 351 "/run/build/folks/folks/abstract-field-details.vala"
				_g_object_unref0 (that_param_values);
#line 351 "/run/build/folks/folks/abstract-field-details.vala"
				_g_object_unref0 (this_param_values);
#line 351 "/run/build/folks/folks/abstract-field-details.vala"
				_g_free0 (param);
#line 351 "/run/build/folks/folks/abstract-field-details.vala"
				_g_object_unref0 (_param_it);
#line 351 "/run/build/folks/folks/abstract-field-details.vala"
				return result;
#line 701 "abstract-field-details.c"
			}
			{
				GeeIterator* _param_val_it = NULL;
				GeeMultiMap* _tmp32_;
				GeeMultiMap* _tmp33_;
				GeeCollection* _tmp34_;
				GeeCollection* _tmp35_;
				GeeIterator* _tmp36_;
				GeeIterator* _tmp37_;
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
				_tmp32_ = folks_abstract_field_details_get_parameters (self);
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
				_tmp33_ = _tmp32_;
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
				_tmp34_ = gee_multi_map_get_values (_tmp33_);
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
				_tmp35_ = _tmp34_;
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
				_tmp36_ = gee_iterable_iterator ((GeeIterable*) _tmp35_);
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
				_tmp37_ = _tmp36_;
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
				_g_object_unref0 (_tmp35_);
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
				_param_val_it = _tmp37_;
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
				while (TRUE) {
#line 729 "abstract-field-details.c"
					GeeIterator* _tmp38_;
					gchar* param_val = NULL;
					GeeIterator* _tmp39_;
					gpointer _tmp40_;
					GeeCollection* _tmp41_;
					const gchar* _tmp42_;
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
					_tmp38_ = _param_val_it;
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
					if (!gee_iterator_next (_tmp38_)) {
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
						break;
#line 742 "abstract-field-details.c"
					}
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
					_tmp39_ = _param_val_it;
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
					_tmp40_ = gee_iterator_get (_tmp39_);
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
					param_val = (gchar*) _tmp40_;
#line 355 "/run/build/folks/folks/abstract-field-details.vala"
					_tmp41_ = that_param_values;
#line 355 "/run/build/folks/folks/abstract-field-details.vala"
					_tmp42_ = param_val;
#line 355 "/run/build/folks/folks/abstract-field-details.vala"
					if (!gee_collection_contains (_tmp41_, _tmp42_)) {
#line 356 "/run/build/folks/folks/abstract-field-details.vala"
						result = FALSE;
#line 356 "/run/build/folks/folks/abstract-field-details.vala"
						_g_free0 (param_val);
#line 356 "/run/build/folks/folks/abstract-field-details.vala"
						_g_object_unref0 (_param_val_it);
#line 356 "/run/build/folks/folks/abstract-field-details.vala"
						_g_object_unref0 (that_param_values);
#line 356 "/run/build/folks/folks/abstract-field-details.vala"
						_g_object_unref0 (this_param_values);
#line 356 "/run/build/folks/folks/abstract-field-details.vala"
						_g_free0 (param);
#line 356 "/run/build/folks/folks/abstract-field-details.vala"
						_g_object_unref0 (_param_it);
#line 356 "/run/build/folks/folks/abstract-field-details.vala"
						return result;
#line 772 "abstract-field-details.c"
					}
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
					_g_free0 (param_val);
#line 776 "abstract-field-details.c"
				}
#line 353 "/run/build/folks/folks/abstract-field-details.vala"
				_g_object_unref0 (_param_val_it);
#line 780 "abstract-field-details.c"
			}
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
			_g_object_unref0 (that_param_values);
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
			_g_object_unref0 (this_param_values);
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
			_g_free0 (param);
#line 788 "abstract-field-details.c"
		}
#line 328 "/run/build/folks/folks/abstract-field-details.vala"
		_g_object_unref0 (_param_it);
#line 792 "abstract-field-details.c"
	}
#line 360 "/run/build/folks/folks/abstract-field-details.vala"
	result = TRUE;
#line 360 "/run/build/folks/folks/abstract-field-details.vala"
	return result;
#line 798 "abstract-field-details.c"
}


gboolean
folks_abstract_field_details_parameters_equal (FolksAbstractFieldDetails* self,
                                               FolksAbstractFieldDetails* that)
{
#line 321 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 321 "/run/build/folks/folks/abstract-field-details.vala"
	return FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS (self)->parameters_equal (self, that);
#line 810 "abstract-field-details.c"
}


/**
   * An equality function which does not consider parameters.
   *
   * Specific classes may override this function to provide "smart" value
   * comparisons (eg, considering the phone number values "+1 555 123 4567" and
   * "123-4567" equal). If you wish to do strict comparisons, simply compare the
   * {@link AbstractFieldDetails.value}s directly.
   *
   * This function compares:
   *
   *  * {@link AbstractFieldDetails.value}s
   *
   * And does not compare:
   *
   *  * {@link AbstractFieldDetails.parameters}
   *  * {@link AbstractFieldDetails.id}s
   *
   * This defaults to string comparison of the
   * {@link AbstractFieldDetails.value}s if the generic type is string;
   * otherwise, direct pointer comparison of the
   * {@link AbstractFieldDetails.value}s.
   *
   * @param that another {@link AbstractFieldDetails}
   *
   * @return whether the elements' {@link AbstractFieldDetails.value}s are
   * equal.
   *
   * @see AbstractFieldDetails.equal
   * @see AbstractFieldDetails.parameters_equal
   * @since 0.6.5
   */
static gboolean
folks_abstract_field_details_real_values_equal (FolksAbstractFieldDetails* self,
                                                FolksAbstractFieldDetails* that)
{
	gboolean result = FALSE;
	GEqualFunc equal_func = NULL;
	GEqualFunc _tmp0_;
	gboolean _tmp2_ = FALSE;
#line 394 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (that != NULL, FALSE);
#line 396 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp0_ = g_direct_equal;
#line 396 "/run/build/folks/folks/abstract-field-details.vala"
	equal_func = _tmp0_;
#line 398 "/run/build/folks/folks/abstract-field-details.vala"
	if (self->priv->t_type == G_TYPE_STRING) {
#line 861 "abstract-field-details.c"
		GEqualFunc _tmp1_;
#line 399 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp1_ = g_str_equal;
#line 399 "/run/build/folks/folks/abstract-field-details.vala"
		equal_func = _tmp1_;
#line 867 "abstract-field-details.c"
	}
#line 401 "/run/build/folks/folks/abstract-field-details.vala"
	if (G_TYPE_FROM_INSTANCE ((GObject*) self) != G_TYPE_FROM_INSTANCE ((GObject*) that)) {
#line 401 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp2_ = TRUE;
#line 873 "abstract-field-details.c"
	} else {
		GEqualFunc _tmp3_;
		gconstpointer _tmp4_;
		gconstpointer _tmp5_;
		gconstpointer _tmp6_;
		gconstpointer _tmp7_;
#line 402 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp3_ = equal_func;
#line 402 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp4_ = folks_abstract_field_details_get_value (self);
#line 402 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp5_ = _tmp4_;
#line 402 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp6_ = folks_abstract_field_details_get_value (that);
#line 402 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp7_ = _tmp6_;
#line 402 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp2_ = !_tmp3_ (_tmp5_, _tmp7_);
#line 892 "abstract-field-details.c"
	}
#line 401 "/run/build/folks/folks/abstract-field-details.vala"
	if (_tmp2_) {
#line 404 "/run/build/folks/folks/abstract-field-details.vala"
		result = FALSE;
#line 404 "/run/build/folks/folks/abstract-field-details.vala"
		return result;
#line 900 "abstract-field-details.c"
	}
#line 407 "/run/build/folks/folks/abstract-field-details.vala"
	result = TRUE;
#line 407 "/run/build/folks/folks/abstract-field-details.vala"
	return result;
#line 906 "abstract-field-details.c"
}


gboolean
folks_abstract_field_details_values_equal (FolksAbstractFieldDetails* self,
                                           FolksAbstractFieldDetails* that)
{
#line 394 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 394 "/run/build/folks/folks/abstract-field-details.vala"
	return FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS (self)->values_equal (self, that);
#line 918 "abstract-field-details.c"
}


/**
   * A hash function for the {@link AbstractFieldDetails}.
   *
   * This defaults to a string hash of the
   * {@link AbstractFieldDetails.value} if the generic type is string;
   * otherwise, direct hash of the {@link AbstractFieldDetails.value}.
   *
   * @return the hash value
   *
   * @since 0.6.0
   */
static guint
folks_abstract_field_details_real_hash (FolksAbstractFieldDetails* self)
{
	guint result = 0U;
	GHashFunc hash_func = NULL;
	GHashFunc _tmp0_;
	GHashFunc _tmp2_;
	gconstpointer _tmp3_;
	gconstpointer _tmp4_;
#line 423 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp0_ = g_direct_hash;
#line 423 "/run/build/folks/folks/abstract-field-details.vala"
	hash_func = _tmp0_;
#line 425 "/run/build/folks/folks/abstract-field-details.vala"
	if (self->priv->t_type == G_TYPE_STRING) {
#line 948 "abstract-field-details.c"
		GHashFunc _tmp1_;
#line 426 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp1_ = g_str_hash;
#line 426 "/run/build/folks/folks/abstract-field-details.vala"
		hash_func = _tmp1_;
#line 954 "abstract-field-details.c"
	}
#line 428 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp2_ = hash_func;
#line 428 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp3_ = folks_abstract_field_details_get_value (self);
#line 428 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp4_ = _tmp3_;
#line 428 "/run/build/folks/folks/abstract-field-details.vala"
	result = _tmp2_ (_tmp4_);
#line 428 "/run/build/folks/folks/abstract-field-details.vala"
	return result;
#line 966 "abstract-field-details.c"
}


guint
folks_abstract_field_details_hash (FolksAbstractFieldDetails* self)
{
#line 421 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (self != NULL, 0U);
#line 421 "/run/build/folks/folks/abstract-field-details.vala"
	return FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS (self)->hash (self);
#line 977 "abstract-field-details.c"
}


/**
   * Same as {@link AbstractFieldDetails.hash}, but static, so we can use libgee
   * 0.8 without an API break.
   *
   * See [[https://bugzilla.gnome.org/show_bug.cgi?id=673918|673918]]
   * This can and should be removed next time we break the API.
   * Note: This uses Gee.HashDataFunc signature, to avoid having to cast.
   *
   * @param value the value to hash
   *
   * @return the hash value
   *
   * @since 0.9.0
   */
guint
folks_abstract_field_details_hash_static (FolksAbstractFieldDetails* value)
{
	guint result = 0U;
	FolksAbstractFieldDetails* details = NULL;
	FolksAbstractFieldDetails* _tmp0_;
#line 445 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (value != NULL, 0U);
#line 447 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (value != NULL, 0);
#line 449 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (value, FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails));
#line 449 "/run/build/folks/folks/abstract-field-details.vala"
	details = _tmp0_;
#line 450 "/run/build/folks/folks/abstract-field-details.vala"
	result = folks_abstract_field_details_hash (details);
#line 450 "/run/build/folks/folks/abstract-field-details.vala"
	_g_object_unref0 (details);
#line 450 "/run/build/folks/folks/abstract-field-details.vala"
	return result;
#line 1015 "abstract-field-details.c"
}


FolksAbstractFieldDetails*
folks_abstract_field_details_construct (GType object_type,
                                        GType t_type,
                                        GBoxedCopyFunc t_dup_func,
                                        GDestroyNotify t_destroy_func)
{
	FolksAbstractFieldDetails * self = NULL;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	self = (FolksAbstractFieldDetails*) g_object_new (object_type, NULL);
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	self->priv->t_type = t_type;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	self->priv->t_dup_func = t_dup_func;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	self->priv->t_destroy_func = t_destroy_func;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	return self;
#line 1036 "abstract-field-details.c"
}


gconstpointer
folks_abstract_field_details_get_value (FolksAbstractFieldDetails* self)
{
#line 100 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 100 "/run/build/folks/folks/abstract-field-details.vala"
	return FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS (self)->get_value (self);
#line 1047 "abstract-field-details.c"
}


static gconstpointer
folks_abstract_field_details_real_get_value (FolksAbstractFieldDetails* base)
{
	gconstpointer result;
	FolksAbstractFieldDetails* self;
	gconstpointer _tmp0_;
#line 100 "/run/build/folks/folks/abstract-field-details.vala"
	self = base;
#line 100 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp0_ = self->priv->_value;
#line 100 "/run/build/folks/folks/abstract-field-details.vala"
	result = _tmp0_;
#line 100 "/run/build/folks/folks/abstract-field-details.vala"
	return result;
#line 1065 "abstract-field-details.c"
}


void
folks_abstract_field_details_set_value (FolksAbstractFieldDetails* self,
                                        gconstpointer value)
{
#line 101 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_if_fail (self != NULL);
#line 101 "/run/build/folks/folks/abstract-field-details.vala"
	FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS (self)->set_value (self, value);
#line 1077 "abstract-field-details.c"
}


static void
folks_abstract_field_details_real_set_value (FolksAbstractFieldDetails* base,
                                             gconstpointer value)
{
	FolksAbstractFieldDetails* self;
	gpointer _tmp0_;
#line 101 "/run/build/folks/folks/abstract-field-details.vala"
	self = base;
#line 101 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp0_ = ((value != NULL) && (self->priv->t_dup_func != NULL)) ? self->priv->t_dup_func ((gpointer) value) : ((gpointer) value);
#line 101 "/run/build/folks/folks/abstract-field-details.vala"
	((self->priv->_value == NULL) || (self->priv->t_destroy_func == NULL)) ? NULL : (self->priv->_value = (self->priv->t_destroy_func (self->priv->_value), NULL));
#line 101 "/run/build/folks/folks/abstract-field-details.vala"
	self->priv->_value = _tmp0_;
#line 101 "/run/build/folks/folks/abstract-field-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_abstract_field_details_properties[FOLKS_ABSTRACT_FIELD_DETAILS_VALUE_PROPERTY]);
#line 1097 "abstract-field-details.c"
}


GType
folks_abstract_field_details_get_value_type (FolksAbstractFieldDetails* self)
{
	GType result;
#line 115 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (self != NULL, 0UL);
#line 115 "/run/build/folks/folks/abstract-field-details.vala"
	result = self->priv->t_type;
#line 115 "/run/build/folks/folks/abstract-field-details.vala"
	return result;
#line 1111 "abstract-field-details.c"
}


const gchar*
folks_abstract_field_details_get_id (FolksAbstractFieldDetails* self)
{
#line 133 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 133 "/run/build/folks/folks/abstract-field-details.vala"
	return FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS (self)->get_id (self);
#line 1122 "abstract-field-details.c"
}


static const gchar*
folks_abstract_field_details_real_get_id (FolksAbstractFieldDetails* base)
{
	const gchar* result;
	FolksAbstractFieldDetails* self;
	const gchar* _tmp0_;
#line 133 "/run/build/folks/folks/abstract-field-details.vala"
	self = base;
#line 133 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp0_ = self->priv->_id;
#line 133 "/run/build/folks/folks/abstract-field-details.vala"
	result = _tmp0_;
#line 133 "/run/build/folks/folks/abstract-field-details.vala"
	return result;
#line 1140 "abstract-field-details.c"
}


void
folks_abstract_field_details_set_id (FolksAbstractFieldDetails* self,
                                     const gchar* value)
{
#line 134 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_if_fail (self != NULL);
#line 134 "/run/build/folks/folks/abstract-field-details.vala"
	FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS (self)->set_id (self, value);
#line 1152 "abstract-field-details.c"
}


static void
folks_abstract_field_details_real_set_id (FolksAbstractFieldDetails* base,
                                          const gchar* value)
{
	FolksAbstractFieldDetails* self;
	const gchar* _tmp0_ = NULL;
	gchar* _tmp1_;
#line 134 "/run/build/folks/folks/abstract-field-details.vala"
	self = base;
#line 134 "/run/build/folks/folks/abstract-field-details.vala"
	if (value != NULL) {
#line 134 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp0_ = value;
#line 1169 "abstract-field-details.c"
	} else {
#line 134 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp0_ = "";
#line 1173 "abstract-field-details.c"
	}
#line 134 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 134 "/run/build/folks/folks/abstract-field-details.vala"
	_g_free0 (self->priv->_id);
#line 134 "/run/build/folks/folks/abstract-field-details.vala"
	self->priv->_id = _tmp1_;
#line 134 "/run/build/folks/folks/abstract-field-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_abstract_field_details_properties[FOLKS_ABSTRACT_FIELD_DETAILS_ID_PROPERTY]);
#line 1183 "abstract-field-details.c"
}


GeeMultiMap*
folks_abstract_field_details_get_parameters (FolksAbstractFieldDetails* self)
{
#line 150 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 150 "/run/build/folks/folks/abstract-field-details.vala"
	return FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS (self)->get_parameters (self);
#line 1194 "abstract-field-details.c"
}


static GeeMultiMap*
folks_abstract_field_details_real_get_parameters (FolksAbstractFieldDetails* base)
{
	GeeMultiMap* result;
	FolksAbstractFieldDetails* self;
	GeeMultiMap* _tmp0_;
#line 150 "/run/build/folks/folks/abstract-field-details.vala"
	self = base;
#line 150 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp0_ = self->priv->_parameters;
#line 150 "/run/build/folks/folks/abstract-field-details.vala"
	result = _tmp0_;
#line 150 "/run/build/folks/folks/abstract-field-details.vala"
	return result;
#line 1212 "abstract-field-details.c"
}


void
folks_abstract_field_details_set_parameters (FolksAbstractFieldDetails* self,
                                             GeeMultiMap* value)
{
#line 151 "/run/build/folks/folks/abstract-field-details.vala"
	g_return_if_fail (self != NULL);
#line 151 "/run/build/folks/folks/abstract-field-details.vala"
	FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS (self)->set_parameters (self, value);
#line 1224 "abstract-field-details.c"
}


static void
folks_abstract_field_details_real_set_parameters (FolksAbstractFieldDetails* base,
                                                  GeeMultiMap* value)
{
	FolksAbstractFieldDetails* self;
#line 151 "/run/build/folks/folks/abstract-field-details.vala"
	self = base;
#line 153 "/run/build/folks/folks/abstract-field-details.vala"
	if (value == NULL) {
#line 1237 "abstract-field-details.c"
		GeeMultiMap* _tmp0_;
#line 154 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp0_ = self->priv->_parameters;
#line 154 "/run/build/folks/folks/abstract-field-details.vala"
		gee_multi_map_clear (_tmp0_);
#line 1243 "abstract-field-details.c"
	} else {
		GeeMultiMap* _tmp1_;
#line 156 "/run/build/folks/folks/abstract-field-details.vala"
		_tmp1_ = _g_object_ref0 (value);
#line 156 "/run/build/folks/folks/abstract-field-details.vala"
		_g_object_unref0 (self->priv->_parameters);
#line 156 "/run/build/folks/folks/abstract-field-details.vala"
		self->priv->_parameters = _tmp1_;
#line 1252 "abstract-field-details.c"
	}
#line 151 "/run/build/folks/folks/abstract-field-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_abstract_field_details_properties[FOLKS_ABSTRACT_FIELD_DETAILS_PARAMETERS_PROPERTY]);
#line 1256 "abstract-field-details.c"
}


static void
folks_abstract_field_details_class_init (FolksAbstractFieldDetailsClass * klass)
{
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	folks_abstract_field_details_parent_class = g_type_class_peek_parent (klass);
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	g_type_class_add_private (klass, sizeof (FolksAbstractFieldDetailsPrivate));
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	((FolksAbstractFieldDetailsClass *) klass)->equal = (gboolean (*) (FolksAbstractFieldDetails *, FolksAbstractFieldDetails*)) folks_abstract_field_details_real_equal;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	((FolksAbstractFieldDetailsClass *) klass)->parameters_equal = (gboolean (*) (FolksAbstractFieldDetails *, FolksAbstractFieldDetails*)) folks_abstract_field_details_real_parameters_equal;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	((FolksAbstractFieldDetailsClass *) klass)->values_equal = (gboolean (*) (FolksAbstractFieldDetails *, FolksAbstractFieldDetails*)) folks_abstract_field_details_real_values_equal;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	((FolksAbstractFieldDetailsClass *) klass)->hash = (guint (*) (FolksAbstractFieldDetails *)) folks_abstract_field_details_real_hash;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (klass)->get_value = folks_abstract_field_details_real_get_value;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (klass)->set_value = folks_abstract_field_details_real_set_value;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (klass)->get_id = folks_abstract_field_details_real_get_id;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (klass)->set_id = folks_abstract_field_details_real_set_id;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (klass)->get_parameters = folks_abstract_field_details_real_get_parameters;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (klass)->set_parameters = folks_abstract_field_details_real_set_parameters;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_folks_abstract_field_details_get_property;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_folks_abstract_field_details_set_property;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_abstract_field_details_finalize;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_ABSTRACT_FIELD_DETAILS_T_TYPE, g_param_spec_gtype ("t-type", "type", "type", G_TYPE_NONE, G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_ABSTRACT_FIELD_DETAILS_T_DUP_FUNC, g_param_spec_pointer ("t-dup-func", "dup func", "dup func", G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_ABSTRACT_FIELD_DETAILS_T_DESTROY_FUNC, g_param_spec_pointer ("t-destroy-func", "destroy func", "destroy func", G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 1299 "abstract-field-details.c"
	/**
	   * The value of the field.
	   *
	   * The value of the field, the exact type and content of which depends on what
	   * the structure is used for.
	   *
	   * @since 0.6.0
	   */
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_ABSTRACT_FIELD_DETAILS_VALUE_PROPERTY, folks_abstract_field_details_properties[FOLKS_ABSTRACT_FIELD_DETAILS_VALUE_PROPERTY] = g_param_spec_pointer ("value", "value", "value", G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
#line 1310 "abstract-field-details.c"
	/**
	   * The {@link GLib.Type} of the {@link AbstractFieldDetails.value}.
	   *
	   * This is particularly useful for treating collections of different types of
	   * {@link AbstractFieldDetails} in a uniform way without needing to name them
	   * explicitly.
	   *
	   * @since 0.6.5
	   */
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_ABSTRACT_FIELD_DETAILS_VALUE_TYPE_PROPERTY, folks_abstract_field_details_properties[FOLKS_ABSTRACT_FIELD_DETAILS_VALUE_TYPE_PROPERTY] = g_param_spec_gtype ("value-type", "value-type", "value-type", G_TYPE_NONE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1322 "abstract-field-details.c"
	/**
	   * A unique ID (if any) for this specific detail.
	   *
	   * This is primarily intended for {@link PersonaStore}s which need to track
	   * specific instances of details (because their backing store is wacky).
	   *
	   * In most cases, this will be an empty string.
	   *
	   * The content of this is opaque to all but the package which set it.
	   *
	   * @since 0.6.5
	   */
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_ABSTRACT_FIELD_DETAILS_ID_PROPERTY, folks_abstract_field_details_properties[FOLKS_ABSTRACT_FIELD_DETAILS_ID_PROPERTY] = g_param_spec_string ("id", "id", "id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 1337 "abstract-field-details.c"
	/**
	   * The parameters associated with the value.
	   *
	   * A multi-map of the parameters associated with
	   * {@link Folks.AbstractFieldDetails.value}. The keys are the names of
	   * the parameters, while the values are a list of strings.
	   *
	   * @since 0.6.0
	   */
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_ABSTRACT_FIELD_DETAILS_PARAMETERS_PROPERTY, folks_abstract_field_details_properties[FOLKS_ABSTRACT_FIELD_DETAILS_PARAMETERS_PROPERTY] = g_param_spec_object ("parameters", "parameters", "parameters", GEE_TYPE_MULTI_MAP, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
#line 1349 "abstract-field-details.c"
}


static void
folks_abstract_field_details_instance_init (FolksAbstractFieldDetails * self)
{
	GeeHashMultiMap* _tmp0_;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	self->priv = FOLKS_ABSTRACT_FIELD_DETAILS_GET_PRIVATE (self);
#line 137 "/run/build/folks/folks/abstract-field-details.vala"
	_tmp0_ = gee_hash_multi_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 137 "/run/build/folks/folks/abstract-field-details.vala"
	self->priv->_parameters = (GeeMultiMap*) _tmp0_;
#line 1363 "abstract-field-details.c"
}


static void
folks_abstract_field_details_finalize (GObject * obj)
{
	FolksAbstractFieldDetails * self;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails);
#line 89 "/run/build/folks/folks/abstract-field-details.vala"
	((self->priv->_value == NULL) || (self->priv->t_destroy_func == NULL)) ? NULL : (self->priv->_value = (self->priv->t_destroy_func (self->priv->_value), NULL));
#line 118 "/run/build/folks/folks/abstract-field-details.vala"
	_g_free0 (self->priv->_id);
#line 137 "/run/build/folks/folks/abstract-field-details.vala"
	_g_object_unref0 (self->priv->_parameters);
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	G_OBJECT_CLASS (folks_abstract_field_details_parent_class)->finalize (obj);
#line 1381 "abstract-field-details.c"
}


/**
 * Object representing any type of value that can have some vCard-like
 * parameters associated with it.
 *
 * Some contact details, like phone numbers or URLs, can have some
 * extra details associated with them.
 * For instance, a phone number expressed in vcard notation as
 * ``tel;type=work,voice:(111) 555-1234`` would be represented as
 * a AbstractFieldDetails with value "(111) 555-1234" and with parameters
 * ``['type': ('work', 'voice')]``.
 *
 * The parameter name "type" with values "work", "home", or "other" are common
 * amongst most vCard attributes (and thus most AbstractFieldDetails-derived
 * classes). A "type" of "pref" may be used to indicate a preferred
 * {@link AbstractFieldDetails.value} amongst many. See specific classes for
 * information on additional parameters and values specific to that class.
 *
 * See [[http://www.ietf.org/rfc/rfc2426.txt|RFC2426]] for more details on
 * pre-defined parameter names and values.
 *
 * @since 0.6.0
 */
GType
folks_abstract_field_details_get_type (void)
{
	static volatile gsize folks_abstract_field_details_type_id__volatile = 0;
	if (g_once_init_enter (&folks_abstract_field_details_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksAbstractFieldDetailsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_abstract_field_details_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksAbstractFieldDetails), 0, (GInstanceInitFunc) folks_abstract_field_details_instance_init, NULL };
		GType folks_abstract_field_details_type_id;
		folks_abstract_field_details_type_id = g_type_register_static (G_TYPE_OBJECT, "FolksAbstractFieldDetails", &g_define_type_info, G_TYPE_FLAG_ABSTRACT);
		g_once_init_leave (&folks_abstract_field_details_type_id__volatile, folks_abstract_field_details_type_id);
	}
	return folks_abstract_field_details_type_id__volatile;
}


static void
_vala_folks_abstract_field_details_get_property (GObject * object,
                                                 guint property_id,
                                                 GValue * value,
                                                 GParamSpec * pspec)
{
	FolksAbstractFieldDetails * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails);
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	switch (property_id) {
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		case FOLKS_ABSTRACT_FIELD_DETAILS_VALUE_PROPERTY:
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		g_value_set_pointer (value, folks_abstract_field_details_get_value (self));
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		break;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		case FOLKS_ABSTRACT_FIELD_DETAILS_VALUE_TYPE_PROPERTY:
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		g_value_set_gtype (value, folks_abstract_field_details_get_value_type (self));
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		break;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		case FOLKS_ABSTRACT_FIELD_DETAILS_ID_PROPERTY:
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		g_value_set_string (value, folks_abstract_field_details_get_id (self));
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		break;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		case FOLKS_ABSTRACT_FIELD_DETAILS_PARAMETERS_PROPERTY:
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		g_value_set_object (value, folks_abstract_field_details_get_parameters (self));
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		break;
#line 1455 "abstract-field-details.c"
		default:
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		break;
#line 1461 "abstract-field-details.c"
	}
}


static void
_vala_folks_abstract_field_details_set_property (GObject * object,
                                                 guint property_id,
                                                 const GValue * value,
                                                 GParamSpec * pspec)
{
	FolksAbstractFieldDetails * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails);
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
	switch (property_id) {
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		case FOLKS_ABSTRACT_FIELD_DETAILS_VALUE_PROPERTY:
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		folks_abstract_field_details_set_value (self, g_value_get_pointer (value));
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		break;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		case FOLKS_ABSTRACT_FIELD_DETAILS_ID_PROPERTY:
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		folks_abstract_field_details_set_id (self, g_value_get_string (value));
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		break;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		case FOLKS_ABSTRACT_FIELD_DETAILS_PARAMETERS_PROPERTY:
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		folks_abstract_field_details_set_parameters (self, g_value_get_object (value));
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		break;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		case FOLKS_ABSTRACT_FIELD_DETAILS_T_TYPE:
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		self->priv->t_type = g_value_get_gtype (value);
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		break;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		case FOLKS_ABSTRACT_FIELD_DETAILS_T_DUP_FUNC:
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		self->priv->t_dup_func = g_value_get_pointer (value);
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		break;
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		case FOLKS_ABSTRACT_FIELD_DETAILS_T_DESTROY_FUNC:
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		self->priv->t_destroy_func = g_value_get_pointer (value);
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		break;
#line 1512 "abstract-field-details.c"
		default:
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 47 "/run/build/folks/folks/abstract-field-details.vala"
		break;
#line 1518 "abstract-field-details.c"
	}
}



