/* unity-preferences-manager.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-preferences-manager.vala, do not modify */

/*
 * Copyright (C) 2012 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Didier Roche <didrocks@ubuntu.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include "unity.h"
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>

enum  {
	UNITY_PREFERENCES_MANAGER_0_PROPERTY,
	UNITY_PREFERENCES_MANAGER_REMOTE_CONTENT_SEARCH_PROPERTY,
	UNITY_PREFERENCES_MANAGER_ALWAYS_SEARCH_PROPERTY,
	UNITY_PREFERENCES_MANAGER_HOME_LENS_PRIORITY_PROPERTY,
	UNITY_PREFERENCES_MANAGER_HOME_LENS_DEFAULT_VIEW_PROPERTY,
	UNITY_PREFERENCES_MANAGER_DISABLED_SCOPES_PROPERTY,
	UNITY_PREFERENCES_MANAGER_NUM_PROPERTIES
};
static GParamSpec* unity_preferences_manager_properties[UNITY_PREFERENCES_MANAGER_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _UnityPreferencesManagerPrivate {
	GSettings* gp_settings;
	UnityPreferencesManagerRemoteContent _remote_content_search;
	gchar** _always_search;
	gint _always_search_length1;
	gint __always_search_size_;
	gchar** _home_lens_priority;
	gint _home_lens_priority_length1;
	gint __home_lens_priority_size_;
	gchar** _home_lens_default_view;
	gint _home_lens_default_view_length1;
	gint __home_lens_default_view_size_;
	gchar** _disabled_scopes;
	gint _disabled_scopes_length1;
	gint __disabled_scopes_size_;
};


static gpointer unity_preferences_manager_parent_class = NULL;
static UnityPreferencesManager* unity_preferences_manager_singleton;
static UnityPreferencesManager* unity_preferences_manager_singleton = NULL;

#define UNITY_PREFERENCES_MANAGER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_PREFERENCES_MANAGER, UnityPreferencesManagerPrivate))
#define UNITY_PREFERENCES_MANAGER_REMOTE_CONTENT_KEY "remote-content-search"
#define UNITY_PREFERENCES_MANAGER_ALWAYS_SEARCH_KEY "always-search"
#define UNITY_PREFERENCES_MANAGER_HOMELENS_PRIORITY "home-lens-priority"
#define UNITY_PREFERENCES_MANAGER_HOMELENS_DEFAULT_VIEW "home-lens-default-view"
#define UNITY_PREFERENCES_MANAGER_DISABLED_SCOPES_KEY "disabled-scopes"
static UnityPreferencesManager* unity_preferences_manager_new (void);
static UnityPreferencesManager* unity_preferences_manager_construct (GType object_type);
static gchar** _vala_array_dup3 (gchar** self,
                          int length);
static gchar** _vala_array_dup4 (gchar** self,
                          int length);
static gchar** _vala_array_dup5 (gchar** self,
                          int length);
static gchar** _vala_array_dup6 (gchar** self,
                          int length);
static GObject * unity_preferences_manager_constructor (GType type,
                                                 guint n_construct_properties,
                                                 GObjectConstructParam * construct_properties);
static void unity_preferences_manager_finalize (GObject * obj);
static void _vala_unity_preferences_manager_get_property (GObject * object,
                                                   guint property_id,
                                                   GValue * value,
                                                   GParamSpec * pspec);
static void _vala_unity_preferences_manager_set_property (GObject * object,
                                                   guint property_id,
                                                   const GValue * value,
                                                   GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);


GType
unity_preferences_manager_remote_content_get_type (void)
{
	static volatile gsize unity_preferences_manager_remote_content_type_id__volatile = 0;
	if (g_once_init_enter (&unity_preferences_manager_remote_content_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_PREFERENCES_MANAGER_REMOTE_CONTENT_ALL, "UNITY_PREFERENCES_MANAGER_REMOTE_CONTENT_ALL", "all"}, {UNITY_PREFERENCES_MANAGER_REMOTE_CONTENT_NONE, "UNITY_PREFERENCES_MANAGER_REMOTE_CONTENT_NONE", "none"}, {0, NULL, NULL}};
		GType unity_preferences_manager_remote_content_type_id;
		unity_preferences_manager_remote_content_type_id = g_enum_register_static ("UnityPreferencesManagerRemoteContent", values);
		g_once_init_leave (&unity_preferences_manager_remote_content_type_id__volatile, unity_preferences_manager_remote_content_type_id);
	}
	return unity_preferences_manager_remote_content_type_id__volatile;
}


static UnityPreferencesManager*
unity_preferences_manager_construct (GType object_type)
{
	UnityPreferencesManager * self = NULL;
	self = (UnityPreferencesManager*) g_object_new (object_type, NULL);
	return self;
}


static UnityPreferencesManager*
unity_preferences_manager_new (void)
{
	return unity_preferences_manager_construct (UNITY_TYPE_PREFERENCES_MANAGER);
}


/**
     * Get a ref to the singleton PreferencesManager
     */
static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


UnityPreferencesManager*
unity_preferences_manager_get_default (void)
{
	UnityPreferencesManager* result = NULL;
	UnityPreferencesManager* _tmp0_;
	UnityPreferencesManager* _tmp2_;
	UnityPreferencesManager* _tmp3_;
	_tmp0_ = unity_preferences_manager_singleton;
	if (_tmp0_ == NULL) {
		UnityPreferencesManager* _tmp1_;
		_tmp1_ = unity_preferences_manager_new ();
		_g_object_unref0 (unity_preferences_manager_singleton);
		unity_preferences_manager_singleton = _tmp1_;
	}
	_tmp2_ = unity_preferences_manager_singleton;
	_tmp3_ = _g_object_ref0 (_tmp2_);
	result = _tmp3_;
	return result;
}


UnityPreferencesManagerRemoteContent
unity_preferences_manager_get_remote_content_search (UnityPreferencesManager* self)
{
	UnityPreferencesManagerRemoteContent result;
	UnityPreferencesManagerRemoteContent _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->priv->_remote_content_search;
	result = _tmp0_;
	return result;
}


void
unity_preferences_manager_set_remote_content_search (UnityPreferencesManager* self,
                                                     UnityPreferencesManagerRemoteContent value)
{
	g_return_if_fail (self != NULL);
	if (unity_preferences_manager_get_remote_content_search (self) != value) {
		self->priv->_remote_content_search = value;
		g_object_notify_by_pspec ((GObject *) self, unity_preferences_manager_properties[UNITY_PREFERENCES_MANAGER_REMOTE_CONTENT_SEARCH_PROPERTY]);
	}
}


gchar**
unity_preferences_manager_get_always_search (UnityPreferencesManager* self,
                                             int* result_length1)
{
	gchar** result;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_always_search;
	_tmp0__length1 = self->priv->_always_search_length1;
	_tmp1_ = _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	if (result_length1) {
		*result_length1 = _tmp1__length1;
	}
	result = _tmp1_;
	return result;
}


static gchar**
_vala_array_dup3 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
	result = g_new0 (gchar*, length + 1);
	for (i = 0; i < length; i++) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (self[i]);
		result[i] = _tmp0_;
	}
	return result;
}


void
unity_preferences_manager_set_always_search (UnityPreferencesManager* self,
                                             gchar** value,
                                             int value_length1)
{
	int old_value_length;
	g_return_if_fail (self != NULL);
	if (unity_preferences_manager_get_always_search (self, &old_value_length) != value) {
		gchar** _tmp0_;
		gint _tmp0__length1;
		_tmp0_ = (value != NULL) ? _vala_array_dup3 (value, value_length1) : ((gpointer) value);
		_tmp0__length1 = value_length1;
		self->priv->_always_search = (_vala_array_free (self->priv->_always_search, self->priv->_always_search_length1, (GDestroyNotify) g_free), NULL);
		self->priv->_always_search = _tmp0_;
		self->priv->_always_search_length1 = _tmp0__length1;
		self->priv->__always_search_size_ = self->priv->_always_search_length1;
		g_object_notify_by_pspec ((GObject *) self, unity_preferences_manager_properties[UNITY_PREFERENCES_MANAGER_ALWAYS_SEARCH_PROPERTY]);
	}
}


gchar**
unity_preferences_manager_get_home_lens_priority (UnityPreferencesManager* self,
                                                  int* result_length1)
{
	gchar** result;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_home_lens_priority;
	_tmp0__length1 = self->priv->_home_lens_priority_length1;
	_tmp1_ = _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	if (result_length1) {
		*result_length1 = _tmp1__length1;
	}
	result = _tmp1_;
	return result;
}


static gchar**
_vala_array_dup4 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
	result = g_new0 (gchar*, length + 1);
	for (i = 0; i < length; i++) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (self[i]);
		result[i] = _tmp0_;
	}
	return result;
}


void
unity_preferences_manager_set_home_lens_priority (UnityPreferencesManager* self,
                                                  gchar** value,
                                                  int value_length1)
{
	int old_value_length;
	g_return_if_fail (self != NULL);
	if (unity_preferences_manager_get_home_lens_priority (self, &old_value_length) != value) {
		gchar** _tmp0_;
		gint _tmp0__length1;
		_tmp0_ = (value != NULL) ? _vala_array_dup4 (value, value_length1) : ((gpointer) value);
		_tmp0__length1 = value_length1;
		self->priv->_home_lens_priority = (_vala_array_free (self->priv->_home_lens_priority, self->priv->_home_lens_priority_length1, (GDestroyNotify) g_free), NULL);
		self->priv->_home_lens_priority = _tmp0_;
		self->priv->_home_lens_priority_length1 = _tmp0__length1;
		self->priv->__home_lens_priority_size_ = self->priv->_home_lens_priority_length1;
		g_object_notify_by_pspec ((GObject *) self, unity_preferences_manager_properties[UNITY_PREFERENCES_MANAGER_HOME_LENS_PRIORITY_PROPERTY]);
	}
}


gchar**
unity_preferences_manager_get_home_lens_default_view (UnityPreferencesManager* self,
                                                      int* result_length1)
{
	gchar** result;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_home_lens_default_view;
	_tmp0__length1 = self->priv->_home_lens_default_view_length1;
	_tmp1_ = _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	if (result_length1) {
		*result_length1 = _tmp1__length1;
	}
	result = _tmp1_;
	return result;
}


static gchar**
_vala_array_dup5 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
	result = g_new0 (gchar*, length + 1);
	for (i = 0; i < length; i++) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (self[i]);
		result[i] = _tmp0_;
	}
	return result;
}


void
unity_preferences_manager_set_home_lens_default_view (UnityPreferencesManager* self,
                                                      gchar** value,
                                                      int value_length1)
{
	int old_value_length;
	g_return_if_fail (self != NULL);
	if (unity_preferences_manager_get_home_lens_default_view (self, &old_value_length) != value) {
		gchar** _tmp0_;
		gint _tmp0__length1;
		_tmp0_ = (value != NULL) ? _vala_array_dup5 (value, value_length1) : ((gpointer) value);
		_tmp0__length1 = value_length1;
		self->priv->_home_lens_default_view = (_vala_array_free (self->priv->_home_lens_default_view, self->priv->_home_lens_default_view_length1, (GDestroyNotify) g_free), NULL);
		self->priv->_home_lens_default_view = _tmp0_;
		self->priv->_home_lens_default_view_length1 = _tmp0__length1;
		self->priv->__home_lens_default_view_size_ = self->priv->_home_lens_default_view_length1;
		g_object_notify_by_pspec ((GObject *) self, unity_preferences_manager_properties[UNITY_PREFERENCES_MANAGER_HOME_LENS_DEFAULT_VIEW_PROPERTY]);
	}
}


gchar**
unity_preferences_manager_get_disabled_scopes (UnityPreferencesManager* self,
                                               int* result_length1)
{
	gchar** result;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_disabled_scopes;
	_tmp0__length1 = self->priv->_disabled_scopes_length1;
	_tmp1_ = _tmp0_;
	_tmp1__length1 = _tmp0__length1;
	if (result_length1) {
		*result_length1 = _tmp1__length1;
	}
	result = _tmp1_;
	return result;
}


static gchar**
_vala_array_dup6 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
	result = g_new0 (gchar*, length + 1);
	for (i = 0; i < length; i++) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (self[i]);
		result[i] = _tmp0_;
	}
	return result;
}


void
unity_preferences_manager_set_disabled_scopes (UnityPreferencesManager* self,
                                               gchar** value,
                                               int value_length1)
{
	int old_value_length;
	g_return_if_fail (self != NULL);
	if (unity_preferences_manager_get_disabled_scopes (self, &old_value_length) != value) {
		gchar** _tmp0_;
		gint _tmp0__length1;
		_tmp0_ = (value != NULL) ? _vala_array_dup6 (value, value_length1) : ((gpointer) value);
		_tmp0__length1 = value_length1;
		self->priv->_disabled_scopes = (_vala_array_free (self->priv->_disabled_scopes, self->priv->_disabled_scopes_length1, (GDestroyNotify) g_free), NULL);
		self->priv->_disabled_scopes = _tmp0_;
		self->priv->_disabled_scopes_length1 = _tmp0__length1;
		self->priv->__disabled_scopes_size_ = self->priv->_disabled_scopes_length1;
		g_object_notify_by_pspec ((GObject *) self, unity_preferences_manager_properties[UNITY_PREFERENCES_MANAGER_DISABLED_SCOPES_PROPERTY]);
	}
}


static GObject *
unity_preferences_manager_constructor (GType type,
                                       guint n_construct_properties,
                                       GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	UnityPreferencesManager * self;
	GSettingsBindFlags flags = 0;
	GSettings* _tmp0_;
	GSettings* _tmp1_;
	GSettingsBindFlags _tmp2_;
	GSettings* _tmp3_;
	GSettingsBindFlags _tmp4_;
	GSettings* _tmp5_;
	GSettingsBindFlags _tmp6_;
	GSettings* _tmp7_;
	GSettingsBindFlags _tmp8_;
	GSettings* _tmp9_;
	GSettingsBindFlags _tmp10_;
	parent_class = G_OBJECT_CLASS (unity_preferences_manager_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_PREFERENCES_MANAGER, UnityPreferencesManager);
	flags = G_SETTINGS_BIND_GET;
	_tmp0_ = g_settings_new ("com.canonical.Unity.Lenses");
	_g_object_unref0 (self->priv->gp_settings);
	self->priv->gp_settings = _tmp0_;
	_tmp1_ = self->priv->gp_settings;
	_tmp2_ = flags;
	g_settings_bind (_tmp1_, UNITY_PREFERENCES_MANAGER_REMOTE_CONTENT_KEY, (GObject*) self, "remote_content_search", _tmp2_);
	_tmp3_ = self->priv->gp_settings;
	_tmp4_ = flags;
	g_settings_bind (_tmp3_, UNITY_PREFERENCES_MANAGER_ALWAYS_SEARCH_KEY, (GObject*) self, "always_search", _tmp4_);
	_tmp5_ = self->priv->gp_settings;
	_tmp6_ = flags;
	g_settings_bind (_tmp5_, UNITY_PREFERENCES_MANAGER_HOMELENS_PRIORITY, (GObject*) self, "home_lens_priority", _tmp6_);
	_tmp7_ = self->priv->gp_settings;
	_tmp8_ = flags;
	g_settings_bind (_tmp7_, UNITY_PREFERENCES_MANAGER_HOMELENS_DEFAULT_VIEW, (GObject*) self, "home_lens_default_view", _tmp8_);
	_tmp9_ = self->priv->gp_settings;
	_tmp10_ = flags;
	g_settings_bind (_tmp9_, UNITY_PREFERENCES_MANAGER_DISABLED_SCOPES_KEY, (GObject*) self, "disabled_scopes", _tmp10_);
	return obj;
}


static void
unity_preferences_manager_class_init (UnityPreferencesManagerClass * klass)
{
	unity_preferences_manager_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityPreferencesManagerPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_preferences_manager_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_preferences_manager_set_property;
	G_OBJECT_CLASS (klass)->constructor = unity_preferences_manager_constructor;
	G_OBJECT_CLASS (klass)->finalize = unity_preferences_manager_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREFERENCES_MANAGER_REMOTE_CONTENT_SEARCH_PROPERTY, unity_preferences_manager_properties[UNITY_PREFERENCES_MANAGER_REMOTE_CONTENT_SEARCH_PROPERTY] = g_param_spec_enum ("remote-content-search", "remote-content-search", "remote-content-search", UNITY_PREFERENCES_MANAGER_TYPE_REMOTE_CONTENT, UNITY_PREFERENCES_MANAGER_REMOTE_CONTENT_ALL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREFERENCES_MANAGER_ALWAYS_SEARCH_PROPERTY, unity_preferences_manager_properties[UNITY_PREFERENCES_MANAGER_ALWAYS_SEARCH_PROPERTY] = g_param_spec_boxed ("always-search", "always-search", "always-search", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREFERENCES_MANAGER_HOME_LENS_PRIORITY_PROPERTY, unity_preferences_manager_properties[UNITY_PREFERENCES_MANAGER_HOME_LENS_PRIORITY_PROPERTY] = g_param_spec_boxed ("home-lens-priority", "home-lens-priority", "home-lens-priority", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREFERENCES_MANAGER_HOME_LENS_DEFAULT_VIEW_PROPERTY, unity_preferences_manager_properties[UNITY_PREFERENCES_MANAGER_HOME_LENS_DEFAULT_VIEW_PROPERTY] = g_param_spec_boxed ("home-lens-default-view", "home-lens-default-view", "home-lens-default-view", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PREFERENCES_MANAGER_DISABLED_SCOPES_PROPERTY, unity_preferences_manager_properties[UNITY_PREFERENCES_MANAGER_DISABLED_SCOPES_PROPERTY] = g_param_spec_boxed ("disabled-scopes", "disabled-scopes", "disabled-scopes", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


static void
unity_preferences_manager_instance_init (UnityPreferencesManager * self)
{
	gchar** _tmp0_;
	gchar** _tmp1_;
	gchar** _tmp2_;
	gchar** _tmp3_;
	self->priv = UNITY_PREFERENCES_MANAGER_GET_PRIVATE (self);
	self->priv->_remote_content_search = UNITY_PREFERENCES_MANAGER_REMOTE_CONTENT_ALL;
	_tmp0_ = g_new0 (gchar*, 0 + 1);
	self->priv->_always_search = _tmp0_;
	self->priv->_always_search_length1 = 0;
	self->priv->__always_search_size_ = self->priv->_always_search_length1;
	_tmp1_ = g_new0 (gchar*, 0 + 1);
	self->priv->_home_lens_priority = _tmp1_;
	self->priv->_home_lens_priority_length1 = 0;
	self->priv->__home_lens_priority_size_ = self->priv->_home_lens_priority_length1;
	_tmp2_ = g_new0 (gchar*, 0 + 1);
	self->priv->_home_lens_default_view = _tmp2_;
	self->priv->_home_lens_default_view_length1 = 0;
	self->priv->__home_lens_default_view_size_ = self->priv->_home_lens_default_view_length1;
	_tmp3_ = g_new0 (gchar*, 0 + 1);
	self->priv->_disabled_scopes = _tmp3_;
	self->priv->_disabled_scopes_length1 = 0;
	self->priv->__disabled_scopes_size_ = self->priv->_disabled_scopes_length1;
}


static void
unity_preferences_manager_finalize (GObject * obj)
{
	UnityPreferencesManager * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_PREFERENCES_MANAGER, UnityPreferencesManager);
	_g_object_unref0 (self->priv->gp_settings);
	self->priv->_always_search = (_vala_array_free (self->priv->_always_search, self->priv->_always_search_length1, (GDestroyNotify) g_free), NULL);
	self->priv->_home_lens_priority = (_vala_array_free (self->priv->_home_lens_priority, self->priv->_home_lens_priority_length1, (GDestroyNotify) g_free), NULL);
	self->priv->_home_lens_default_view = (_vala_array_free (self->priv->_home_lens_default_view, self->priv->_home_lens_default_view_length1, (GDestroyNotify) g_free), NULL);
	self->priv->_disabled_scopes = (_vala_array_free (self->priv->_disabled_scopes, self->priv->_disabled_scopes_length1, (GDestroyNotify) g_free), NULL);
	G_OBJECT_CLASS (unity_preferences_manager_parent_class)->finalize (obj);
}


/**
   * A singleton class that caches different gsettings settings.
   *
   */
GType
unity_preferences_manager_get_type (void)
{
	static volatile gsize unity_preferences_manager_type_id__volatile = 0;
	if (g_once_init_enter (&unity_preferences_manager_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityPreferencesManagerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_preferences_manager_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityPreferencesManager), 0, (GInstanceInitFunc) unity_preferences_manager_instance_init, NULL };
		GType unity_preferences_manager_type_id;
		unity_preferences_manager_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityPreferencesManager", &g_define_type_info, 0);
		g_once_init_leave (&unity_preferences_manager_type_id__volatile, unity_preferences_manager_type_id);
	}
	return unity_preferences_manager_type_id__volatile;
}


static void
_vala_unity_preferences_manager_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec)
{
	UnityPreferencesManager * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_PREFERENCES_MANAGER, UnityPreferencesManager);
	switch (property_id) {
		case UNITY_PREFERENCES_MANAGER_REMOTE_CONTENT_SEARCH_PROPERTY:
		g_value_set_enum (value, unity_preferences_manager_get_remote_content_search (self));
		break;
		case UNITY_PREFERENCES_MANAGER_ALWAYS_SEARCH_PROPERTY:
		{
			int length;
			g_value_set_boxed (value, unity_preferences_manager_get_always_search (self, &length));
		}
		break;
		case UNITY_PREFERENCES_MANAGER_HOME_LENS_PRIORITY_PROPERTY:
		{
			int length;
			g_value_set_boxed (value, unity_preferences_manager_get_home_lens_priority (self, &length));
		}
		break;
		case UNITY_PREFERENCES_MANAGER_HOME_LENS_DEFAULT_VIEW_PROPERTY:
		{
			int length;
			g_value_set_boxed (value, unity_preferences_manager_get_home_lens_default_view (self, &length));
		}
		break;
		case UNITY_PREFERENCES_MANAGER_DISABLED_SCOPES_PROPERTY:
		{
			int length;
			g_value_set_boxed (value, unity_preferences_manager_get_disabled_scopes (self, &length));
		}
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_preferences_manager_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec)
{
	UnityPreferencesManager * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_PREFERENCES_MANAGER, UnityPreferencesManager);
	switch (property_id) {
		case UNITY_PREFERENCES_MANAGER_REMOTE_CONTENT_SEARCH_PROPERTY:
		unity_preferences_manager_set_remote_content_search (self, g_value_get_enum (value));
		break;
		case UNITY_PREFERENCES_MANAGER_ALWAYS_SEARCH_PROPERTY:
		{
			gpointer boxed;
			boxed = g_value_get_boxed (value);
			unity_preferences_manager_set_always_search (self, boxed, (boxed == NULL) ? 0 : g_strv_length (boxed));
		}
		break;
		case UNITY_PREFERENCES_MANAGER_HOME_LENS_PRIORITY_PROPERTY:
		{
			gpointer boxed;
			boxed = g_value_get_boxed (value);
			unity_preferences_manager_set_home_lens_priority (self, boxed, (boxed == NULL) ? 0 : g_strv_length (boxed));
		}
		break;
		case UNITY_PREFERENCES_MANAGER_HOME_LENS_DEFAULT_VIEW_PROPERTY:
		{
			gpointer boxed;
			boxed = g_value_get_boxed (value);
			unity_preferences_manager_set_home_lens_default_view (self, boxed, (boxed == NULL) ? 0 : g_strv_length (boxed));
		}
		break;
		case UNITY_PREFERENCES_MANAGER_DISABLED_SCOPES_PROPERTY:
		{
			gpointer boxed;
			boxed = g_value_get_boxed (value);
			unity_preferences_manager_set_disabled_scopes (self, boxed, (boxed == NULL) ? 0 : g_strv_length (boxed));
		}
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}



