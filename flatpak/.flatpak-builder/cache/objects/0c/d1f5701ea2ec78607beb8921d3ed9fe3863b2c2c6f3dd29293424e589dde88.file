
/* This file is generated by glib-mkenums, do not modify it. This code is licensed under the same license as the containing project. Note that it links to GLib, so must comply with the LGPL linking clauses. */

#include "e-cal-enumtypes.h"
/* enumerations from "/run/build/evolution-data-server/src/calendar/libecal/e-cal-types.h" */
#include "/run/build/evolution-data-server/src/calendar/libecal/e-cal-types.h"
GType
e_cal_client_source_type_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_CAL_CLIENT_SOURCE_TYPE_EVENTS,
			  "E_CAL_CLIENT_SOURCE_TYPE_EVENTS",
			  "events" },
			{ E_CAL_CLIENT_SOURCE_TYPE_TASKS,
			  "E_CAL_CLIENT_SOURCE_TYPE_TASKS",
			  "tasks" },
			{ E_CAL_CLIENT_SOURCE_TYPE_MEMOS,
			  "E_CAL_CLIENT_SOURCE_TYPE_MEMOS",
			  "memos" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("ECalClientSourceType"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_cal_obj_mod_type_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GFlagsValue values[] = {
			{ E_CAL_OBJ_MOD_THIS,
			  "E_CAL_OBJ_MOD_THIS",
			  "this" },
			{ E_CAL_OBJ_MOD_THIS_AND_PRIOR,
			  "E_CAL_OBJ_MOD_THIS_AND_PRIOR",
			  "this-and-prior" },
			{ E_CAL_OBJ_MOD_THIS_AND_FUTURE,
			  "E_CAL_OBJ_MOD_THIS_AND_FUTURE",
			  "this-and-future" },
			{ E_CAL_OBJ_MOD_ALL,
			  "E_CAL_OBJ_MOD_ALL",
			  "all" },
			{ E_CAL_OBJ_MOD_ONLY_THIS,
			  "E_CAL_OBJ_MOD_ONLY_THIS",
			  "only-this" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_flags_register_static (
			g_intern_static_string ("ECalObjModType"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_cal_change_type_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GFlagsValue values[] = {
			{ E_CAL_CHANGE_ADDED,
			  "E_CAL_CHANGE_ADDED",
			  "added" },
			{ E_CAL_CHANGE_MODIFIED,
			  "E_CAL_CHANGE_MODIFIED",
			  "modified" },
			{ E_CAL_CHANGE_DELETED,
			  "E_CAL_CHANGE_DELETED",
			  "deleted" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_flags_register_static (
			g_intern_static_string ("ECalChangeType"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_calendar_status_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_CALENDAR_STATUS_OK,
			  "E_CALENDAR_STATUS_OK",
			  "ok" },
			{ E_CALENDAR_STATUS_INVALID_ARG,
			  "E_CALENDAR_STATUS_INVALID_ARG",
			  "invalid-arg" },
			{ E_CALENDAR_STATUS_BUSY,
			  "E_CALENDAR_STATUS_BUSY",
			  "busy" },
			{ E_CALENDAR_STATUS_REPOSITORY_OFFLINE,
			  "E_CALENDAR_STATUS_REPOSITORY_OFFLINE",
			  "repository-offline" },
			{ E_CALENDAR_STATUS_NO_SUCH_CALENDAR,
			  "E_CALENDAR_STATUS_NO_SUCH_CALENDAR",
			  "no-such-calendar" },
			{ E_CALENDAR_STATUS_OBJECT_NOT_FOUND,
			  "E_CALENDAR_STATUS_OBJECT_NOT_FOUND",
			  "object-not-found" },
			{ E_CALENDAR_STATUS_INVALID_OBJECT,
			  "E_CALENDAR_STATUS_INVALID_OBJECT",
			  "invalid-object" },
			{ E_CALENDAR_STATUS_URI_NOT_LOADED,
			  "E_CALENDAR_STATUS_URI_NOT_LOADED",
			  "uri-not-loaded" },
			{ E_CALENDAR_STATUS_URI_ALREADY_LOADED,
			  "E_CALENDAR_STATUS_URI_ALREADY_LOADED",
			  "uri-already-loaded" },
			{ E_CALENDAR_STATUS_PERMISSION_DENIED,
			  "E_CALENDAR_STATUS_PERMISSION_DENIED",
			  "permission-denied" },
			{ E_CALENDAR_STATUS_UNKNOWN_USER,
			  "E_CALENDAR_STATUS_UNKNOWN_USER",
			  "unknown-user" },
			{ E_CALENDAR_STATUS_OBJECT_ID_ALREADY_EXISTS,
			  "E_CALENDAR_STATUS_OBJECT_ID_ALREADY_EXISTS",
			  "object-id-already-exists" },
			{ E_CALENDAR_STATUS_PROTOCOL_NOT_SUPPORTED,
			  "E_CALENDAR_STATUS_PROTOCOL_NOT_SUPPORTED",
			  "protocol-not-supported" },
			{ E_CALENDAR_STATUS_CANCELLED,
			  "E_CALENDAR_STATUS_CANCELLED",
			  "cancelled" },
			{ E_CALENDAR_STATUS_COULD_NOT_CANCEL,
			  "E_CALENDAR_STATUS_COULD_NOT_CANCEL",
			  "could-not-cancel" },
			{ E_CALENDAR_STATUS_AUTHENTICATION_FAILED,
			  "E_CALENDAR_STATUS_AUTHENTICATION_FAILED",
			  "authentication-failed" },
			{ E_CALENDAR_STATUS_AUTHENTICATION_REQUIRED,
			  "E_CALENDAR_STATUS_AUTHENTICATION_REQUIRED",
			  "authentication-required" },
			{ E_CALENDAR_STATUS_DBUS_EXCEPTION,
			  "E_CALENDAR_STATUS_DBUS_EXCEPTION",
			  "dbus-exception" },
			{ E_CALENDAR_STATUS_OTHER_ERROR,
			  "E_CALENDAR_STATUS_OTHER_ERROR",
			  "other-error" },
			{ E_CALENDAR_STATUS_INVALID_SERVER_VERSION,
			  "E_CALENDAR_STATUS_INVALID_SERVER_VERSION",
			  "invalid-server-version" },
			{ E_CALENDAR_STATUS_NOT_SUPPORTED,
			  "E_CALENDAR_STATUS_NOT_SUPPORTED",
			  "not-supported" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("ECalendarStatus"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_data_cal_obj_type_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GFlagsValue values[] = {
			{ Event,
			  "Event",
			  "event" },
			{ Todo,
			  "Todo",
			  "todo" },
			{ Journal,
			  "Journal",
			  "journal" },
			{ AnyType,
			  "AnyType",
			  "anytype" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_flags_register_static (
			g_intern_static_string ("EDataCalObjType"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_data_cal_obj_mod_type_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GFlagsValue values[] = {
			{ This,
			  "This",
			  "this" },
			{ ThisAndPrior,
			  "ThisAndPrior",
			  "thisandprior" },
			{ ThisAndFuture,
			  "ThisAndFuture",
			  "thisandfuture" },
			{ All,
			  "All",
			  "all" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_flags_register_static (
			g_intern_static_string ("EDataCalObjModType"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}

/* Generated data ends here */

