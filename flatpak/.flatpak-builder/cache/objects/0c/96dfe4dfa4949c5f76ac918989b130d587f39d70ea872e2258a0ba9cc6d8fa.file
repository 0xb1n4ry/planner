/* ModelButton.c generated by valac 0.40.11, the Vala compiler
 * generated from ModelButton.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>


#define WIDGETS_TYPE_MODEL_BUTTON (widgets_model_button_get_type ())
#define WIDGETS_MODEL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_MODEL_BUTTON, WidgetsModelButton))
#define WIDGETS_MODEL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_MODEL_BUTTON, WidgetsModelButtonClass))
#define WIDGETS_IS_MODEL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_MODEL_BUTTON))
#define WIDGETS_IS_MODEL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_MODEL_BUTTON))
#define WIDGETS_MODEL_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_MODEL_BUTTON, WidgetsModelButtonClass))

typedef struct _WidgetsModelButton WidgetsModelButton;
typedef struct _WidgetsModelButtonClass WidgetsModelButtonClass;
typedef struct _WidgetsModelButtonPrivate WidgetsModelButtonPrivate;
enum  {
	WIDGETS_MODEL_BUTTON_0_PROPERTY,
	WIDGETS_MODEL_BUTTON_ICON_PROPERTY,
	WIDGETS_MODEL_BUTTON_TEXT_PROPERTY,
	WIDGETS_MODEL_BUTTON_TOOLTIP_PROPERTY,
	WIDGETS_MODEL_BUTTON_NUM_PROPERTIES
};
static GParamSpec* widgets_model_button_properties[WIDGETS_MODEL_BUTTON_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _WidgetsModelButton {
	GtkButton parent_instance;
	WidgetsModelButtonPrivate * priv;
};

struct _WidgetsModelButtonClass {
	GtkButtonClass parent_class;
};

struct _WidgetsModelButtonPrivate {
	gchar* _icon;
	gchar* _text;
	gchar* _tooltip;
};


static gpointer widgets_model_button_parent_class = NULL;

GType widgets_model_button_get_type (void) G_GNUC_CONST;
#define WIDGETS_MODEL_BUTTON_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_MODEL_BUTTON, WidgetsModelButtonPrivate))
WidgetsModelButton* widgets_model_button_new (const gchar* _text,
                                              const gchar* _icon,
                                              const gchar* _tooltip);
WidgetsModelButton* widgets_model_button_construct (GType object_type,
                                                    const gchar* _text,
                                                    const gchar* _icon,
                                                    const gchar* _tooltip);
const gchar* widgets_model_button_get_icon (WidgetsModelButton* self);
static void widgets_model_button_set_icon (WidgetsModelButton* self,
                                    const gchar* value);
const gchar* widgets_model_button_get_text (WidgetsModelButton* self);
static void widgets_model_button_set_text (WidgetsModelButton* self,
                                    const gchar* value);
const gchar* widgets_model_button_get_tooltip (WidgetsModelButton* self);
static void widgets_model_button_set_tooltip (WidgetsModelButton* self,
                                       const gchar* value);
static GObject * widgets_model_button_constructor (GType type,
                                            guint n_construct_properties,
                                            GObjectConstructParam * construct_properties);
static void widgets_model_button_finalize (GObject * obj);
static void _vala_widgets_model_button_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec);
static void _vala_widgets_model_button_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec);


WidgetsModelButton*
widgets_model_button_construct (GType object_type,
                                const gchar* _text,
                                const gchar* _icon,
                                const gchar* _tooltip)
{
	WidgetsModelButton * self = NULL;
#line 27 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_return_val_if_fail (_text != NULL, NULL);
#line 27 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_return_val_if_fail (_icon != NULL, NULL);
#line 27 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_return_val_if_fail (_tooltip != NULL, NULL);
#line 28 "/run/build/planner/src/Widgets/ModelButton.vala"
	self = (WidgetsModelButton*) g_object_new (object_type, "icon", _icon, "text", _text, "tooltip", _tooltip, "expand", TRUE, NULL);
#line 27 "/run/build/planner/src/Widgets/ModelButton.vala"
	return self;
#line 122 "ModelButton.c"
}


WidgetsModelButton*
widgets_model_button_new (const gchar* _text,
                          const gchar* _icon,
                          const gchar* _tooltip)
{
#line 27 "/run/build/planner/src/Widgets/ModelButton.vala"
	return widgets_model_button_construct (WIDGETS_TYPE_MODEL_BUTTON, _text, _icon, _tooltip);
#line 133 "ModelButton.c"
}


const gchar*
widgets_model_button_get_icon (WidgetsModelButton* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 23 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp0_ = self->priv->_icon;
#line 23 "/run/build/planner/src/Widgets/ModelButton.vala"
	result = _tmp0_;
#line 23 "/run/build/planner/src/Widgets/ModelButton.vala"
	return result;
#line 150 "ModelButton.c"
}


static void
widgets_model_button_set_icon (WidgetsModelButton* self,
                               const gchar* value)
{
#line 23 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_return_if_fail (self != NULL);
#line 23 "/run/build/planner/src/Widgets/ModelButton.vala"
	if (g_strcmp0 (value, widgets_model_button_get_icon (self)) != 0) {
#line 162 "ModelButton.c"
		gchar* _tmp0_;
#line 23 "/run/build/planner/src/Widgets/ModelButton.vala"
		_tmp0_ = g_strdup (value);
#line 23 "/run/build/planner/src/Widgets/ModelButton.vala"
		_g_free0 (self->priv->_icon);
#line 23 "/run/build/planner/src/Widgets/ModelButton.vala"
		self->priv->_icon = _tmp0_;
#line 23 "/run/build/planner/src/Widgets/ModelButton.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_model_button_properties[WIDGETS_MODEL_BUTTON_ICON_PROPERTY]);
#line 172 "ModelButton.c"
	}
}


const gchar*
widgets_model_button_get_text (WidgetsModelButton* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 24 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 24 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp0_ = self->priv->_text;
#line 24 "/run/build/planner/src/Widgets/ModelButton.vala"
	result = _tmp0_;
#line 24 "/run/build/planner/src/Widgets/ModelButton.vala"
	return result;
#line 190 "ModelButton.c"
}


static void
widgets_model_button_set_text (WidgetsModelButton* self,
                               const gchar* value)
{
#line 24 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_return_if_fail (self != NULL);
#line 24 "/run/build/planner/src/Widgets/ModelButton.vala"
	if (g_strcmp0 (value, widgets_model_button_get_text (self)) != 0) {
#line 202 "ModelButton.c"
		gchar* _tmp0_;
#line 24 "/run/build/planner/src/Widgets/ModelButton.vala"
		_tmp0_ = g_strdup (value);
#line 24 "/run/build/planner/src/Widgets/ModelButton.vala"
		_g_free0 (self->priv->_text);
#line 24 "/run/build/planner/src/Widgets/ModelButton.vala"
		self->priv->_text = _tmp0_;
#line 24 "/run/build/planner/src/Widgets/ModelButton.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_model_button_properties[WIDGETS_MODEL_BUTTON_TEXT_PROPERTY]);
#line 212 "ModelButton.c"
	}
}


const gchar*
widgets_model_button_get_tooltip (WidgetsModelButton* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 25 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 25 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp0_ = self->priv->_tooltip;
#line 25 "/run/build/planner/src/Widgets/ModelButton.vala"
	result = _tmp0_;
#line 25 "/run/build/planner/src/Widgets/ModelButton.vala"
	return result;
#line 230 "ModelButton.c"
}


static void
widgets_model_button_set_tooltip (WidgetsModelButton* self,
                                  const gchar* value)
{
#line 25 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_return_if_fail (self != NULL);
#line 25 "/run/build/planner/src/Widgets/ModelButton.vala"
	if (g_strcmp0 (value, widgets_model_button_get_tooltip (self)) != 0) {
#line 242 "ModelButton.c"
		gchar* _tmp0_;
#line 25 "/run/build/planner/src/Widgets/ModelButton.vala"
		_tmp0_ = g_strdup (value);
#line 25 "/run/build/planner/src/Widgets/ModelButton.vala"
		_g_free0 (self->priv->_tooltip);
#line 25 "/run/build/planner/src/Widgets/ModelButton.vala"
		self->priv->_tooltip = _tmp0_;
#line 25 "/run/build/planner/src/Widgets/ModelButton.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_model_button_properties[WIDGETS_MODEL_BUTTON_TOOLTIP_PROPERTY]);
#line 252 "ModelButton.c"
	}
}


static GObject *
widgets_model_button_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsModelButton * self;
	GtkStyleContext* _tmp0_;
	GtkStyleContext* _tmp1_;
	const gchar* _tmp2_;
	GtkLabel* label = NULL;
	const gchar* _tmp3_;
	GtkLabel* _tmp4_;
	GtkImage* image = NULL;
	const gchar* _tmp5_;
	GtkImage* _tmp6_;
	GtkGrid* grid = NULL;
	GtkGrid* _tmp7_;
	GtkGrid* _tmp8_;
	GtkGrid* _tmp9_;
	GtkImage* _tmp10_;
	GtkGrid* _tmp11_;
	GtkLabel* _tmp12_;
	GtkGrid* _tmp13_;
#line 36 "/run/build/planner/src/Widgets/ModelButton.vala"
	parent_class = G_OBJECT_CLASS (widgets_model_button_parent_class);
#line 36 "/run/build/planner/src/Widgets/ModelButton.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 36 "/run/build/planner/src/Widgets/ModelButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_MODEL_BUTTON, WidgetsModelButton);
#line 37 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 37 "/run/build/planner/src/Widgets/ModelButton.vala"
	gtk_style_context_remove_class (_tmp0_, "button");
#line 38 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 38 "/run/build/planner/src/Widgets/ModelButton.vala"
	gtk_style_context_add_class (_tmp1_, "menuitem");
#line 40 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp2_ = self->priv->_tooltip;
#line 40 "/run/build/planner/src/Widgets/ModelButton.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) self, _tmp2_);
#line 41 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp3_ = self->priv->_text;
#line 41 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp4_ = (GtkLabel*) gtk_label_new (_tmp3_);
#line 41 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_object_ref_sink (_tmp4_);
#line 41 "/run/build/planner/src/Widgets/ModelButton.vala"
	label = _tmp4_;
#line 42 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp5_ = self->priv->_icon;
#line 42 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp6_ = (GtkImage*) gtk_image_new_from_icon_name (_tmp5_, (GtkIconSize) GTK_ICON_SIZE_SMALL_TOOLBAR);
#line 42 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_object_ref_sink (_tmp6_);
#line 42 "/run/build/planner/src/Widgets/ModelButton.vala"
	image = _tmp6_;
#line 44 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp7_ = (GtkGrid*) gtk_grid_new ();
#line 44 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_object_ref_sink (_tmp7_);
#line 44 "/run/build/planner/src/Widgets/ModelButton.vala"
	grid = _tmp7_;
#line 45 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp8_ = grid;
#line 45 "/run/build/planner/src/Widgets/ModelButton.vala"
	gtk_grid_set_column_spacing (_tmp8_, 6);
#line 46 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp9_ = grid;
#line 46 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp10_ = image;
#line 46 "/run/build/planner/src/Widgets/ModelButton.vala"
	gtk_container_add ((GtkContainer*) _tmp9_, (GtkWidget*) _tmp10_);
#line 47 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp11_ = grid;
#line 47 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp12_ = label;
#line 47 "/run/build/planner/src/Widgets/ModelButton.vala"
	gtk_container_add ((GtkContainer*) _tmp11_, (GtkWidget*) _tmp12_);
#line 49 "/run/build/planner/src/Widgets/ModelButton.vala"
	_tmp13_ = grid;
#line 49 "/run/build/planner/src/Widgets/ModelButton.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp13_);
#line 36 "/run/build/planner/src/Widgets/ModelButton.vala"
	_g_object_unref0 (grid);
#line 36 "/run/build/planner/src/Widgets/ModelButton.vala"
	_g_object_unref0 (image);
#line 36 "/run/build/planner/src/Widgets/ModelButton.vala"
	_g_object_unref0 (label);
#line 36 "/run/build/planner/src/Widgets/ModelButton.vala"
	return obj;
#line 350 "ModelButton.c"
}


static void
widgets_model_button_class_init (WidgetsModelButtonClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
	widgets_model_button_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_type_class_add_private (klass, sizeof (WidgetsModelButtonPrivate));
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_model_button_get_property;
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_model_button_set_property;
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_model_button_constructor;
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_model_button_finalize;
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_MODEL_BUTTON_ICON_PROPERTY, widgets_model_button_properties[WIDGETS_MODEL_BUTTON_ICON_PROPERTY] = g_param_spec_string ("icon", "icon", "icon", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_MODEL_BUTTON_TEXT_PROPERTY, widgets_model_button_properties[WIDGETS_MODEL_BUTTON_TEXT_PROPERTY] = g_param_spec_string ("text", "text", "text", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_MODEL_BUTTON_TOOLTIP_PROPERTY, widgets_model_button_properties[WIDGETS_MODEL_BUTTON_TOOLTIP_PROPERTY] = g_param_spec_string ("tooltip", "tooltip", "tooltip", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 375 "ModelButton.c"
}


static void
widgets_model_button_instance_init (WidgetsModelButton * self)
{
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
	self->priv = WIDGETS_MODEL_BUTTON_GET_PRIVATE (self);
#line 384 "ModelButton.c"
}


static void
widgets_model_button_finalize (GObject * obj)
{
	WidgetsModelButton * self;
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_MODEL_BUTTON, WidgetsModelButton);
#line 23 "/run/build/planner/src/Widgets/ModelButton.vala"
	_g_free0 (self->priv->_icon);
#line 24 "/run/build/planner/src/Widgets/ModelButton.vala"
	_g_free0 (self->priv->_text);
#line 25 "/run/build/planner/src/Widgets/ModelButton.vala"
	_g_free0 (self->priv->_tooltip);
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
	G_OBJECT_CLASS (widgets_model_button_parent_class)->finalize (obj);
#line 402 "ModelButton.c"
}


GType
widgets_model_button_get_type (void)
{
	static volatile gsize widgets_model_button_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_model_button_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsModelButtonClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_model_button_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsModelButton), 0, (GInstanceInitFunc) widgets_model_button_instance_init, NULL };
		GType widgets_model_button_type_id;
		widgets_model_button_type_id = g_type_register_static (gtk_button_get_type (), "WidgetsModelButton", &g_define_type_info, 0);
		g_once_init_leave (&widgets_model_button_type_id__volatile, widgets_model_button_type_id);
	}
	return widgets_model_button_type_id__volatile;
}


static void
_vala_widgets_model_button_get_property (GObject * object,
                                         guint property_id,
                                         GValue * value,
                                         GParamSpec * pspec)
{
	WidgetsModelButton * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_MODEL_BUTTON, WidgetsModelButton);
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		case WIDGETS_MODEL_BUTTON_ICON_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		g_value_set_string (value, widgets_model_button_get_icon (self));
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		case WIDGETS_MODEL_BUTTON_TEXT_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		g_value_set_string (value, widgets_model_button_get_text (self));
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		case WIDGETS_MODEL_BUTTON_TOOLTIP_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		g_value_set_string (value, widgets_model_button_get_tooltip (self));
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		break;
#line 448 "ModelButton.c"
		default:
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		break;
#line 454 "ModelButton.c"
	}
}


static void
_vala_widgets_model_button_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec)
{
	WidgetsModelButton * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_MODEL_BUTTON, WidgetsModelButton);
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		case WIDGETS_MODEL_BUTTON_ICON_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		widgets_model_button_set_icon (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		case WIDGETS_MODEL_BUTTON_TEXT_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		widgets_model_button_set_text (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		case WIDGETS_MODEL_BUTTON_TOOLTIP_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		widgets_model_button_set_tooltip (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		break;
#line 487 "ModelButton.c"
		default:
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/ModelButton.vala"
		break;
#line 493 "ModelButton.c"
	}
}



