/* unity-models.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-models.vala, do not modify */

/*
 * Copyright (C) 2013 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Michal Hruby <michal.hruby@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include "unity.h"
#include <dee.h>
#include <stdlib.h>
#include <string.h>
#include <unity-trace.h>


#define UNITY_INTERNAL_TYPE_DEE_RESULT_SET (unity_internal_dee_result_set_get_type ())
#define UNITY_INTERNAL_DEE_RESULT_SET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_DEE_RESULT_SET, UnityInternalDeeResultSet))
#define UNITY_INTERNAL_DEE_RESULT_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_TYPE_DEE_RESULT_SET, UnityInternalDeeResultSetClass))
#define UNITY_INTERNAL_IS_DEE_RESULT_SET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_DEE_RESULT_SET))
#define UNITY_INTERNAL_IS_DEE_RESULT_SET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_TYPE_DEE_RESULT_SET))
#define UNITY_INTERNAL_DEE_RESULT_SET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_TYPE_DEE_RESULT_SET, UnityInternalDeeResultSetClass))

typedef struct _UnityInternalDeeResultSet UnityInternalDeeResultSet;
typedef struct _UnityInternalDeeResultSetClass UnityInternalDeeResultSetClass;
typedef struct _UnityInternalDeeResultSetPrivate UnityInternalDeeResultSetPrivate;
enum  {
	UNITY_INTERNAL_DEE_RESULT_SET_0_PROPERTY,
	UNITY_INTERNAL_DEE_RESULT_SET_RESULTS_MODEL_PROPERTY,
	UNITY_INTERNAL_DEE_RESULT_SET_FLUSH_MODEL_PROPERTY,
	UNITY_INTERNAL_DEE_RESULT_SET_NUM_PROPERTIES
};
static GParamSpec* unity_internal_dee_result_set_properties[UNITY_INTERNAL_DEE_RESULT_SET_NUM_PROPERTIES];
#define _g_ptr_array_unref0(var) ((var == NULL) ? NULL : (var = (g_ptr_array_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))

#define UNITY_INTERNAL_TYPE_DIFF_MODEL (unity_internal_diff_model_get_type ())
#define UNITY_INTERNAL_DIFF_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_INTERNAL_TYPE_DIFF_MODEL, UnityInternalDiffModel))
#define UNITY_INTERNAL_DIFF_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_INTERNAL_TYPE_DIFF_MODEL, UnityInternalDiffModelClass))
#define UNITY_INTERNAL_IS_DIFF_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_INTERNAL_TYPE_DIFF_MODEL))
#define UNITY_INTERNAL_IS_DIFF_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_INTERNAL_TYPE_DIFF_MODEL))
#define UNITY_INTERNAL_DIFF_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_INTERNAL_TYPE_DIFF_MODEL, UnityInternalDiffModelClass))

typedef struct _UnityInternalDiffModel UnityInternalDiffModel;
typedef struct _UnityInternalDiffModelClass UnityInternalDiffModelClass;
typedef struct _Block2Data Block2Data;
#define _g_async_queue_unref0(var) ((var == NULL) ? NULL : (var = (g_async_queue_unref (var), NULL)))
#define _g_source_unref0(var) ((var == NULL) ? NULL : (var = (g_source_unref (var), NULL)))
typedef struct _UnityInternalDiffModelPrivate UnityInternalDiffModelPrivate;
enum  {
	UNITY_INTERNAL_DIFF_MODEL_0_PROPERTY,
	UNITY_INTERNAL_DIFF_MODEL_TARGET_MODEL_PROPERTY,
	UNITY_INTERNAL_DIFF_MODEL_NUM_PROPERTIES
};
static GParamSpec* unity_internal_diff_model_properties[UNITY_INTERNAL_DIFF_MODEL_NUM_PROPERTIES];

#define UNITY_INTERNAL_UTILS_DIFF_TYPE_CHANGE (unity_internal_utils_diff_change_get_type ())
typedef struct _UnityInternalUtilsDiffChange UnityInternalUtilsDiffChange;

#define UNITY_INTERNAL_TYPE_RESULT_COLUMN (unity_internal_result_column_get_type ())
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _UnityInternalDeeResultSet {
	UnityResultSet parent_instance;
	UnityInternalDeeResultSetPrivate * priv;
};

struct _UnityInternalDeeResultSetClass {
	UnityResultSetClass parent_class;
};

struct _UnityInternalDeeResultSetPrivate {
	GThread* origin_thread;
	GMainContext* origin_context;
	GPtrArray* results;
	DeeSerializableModel* _results_model;
	DeeSerializableModel* _flush_model;
};

struct _Block2Data {
	int _ref_count_;
	UnityInternalDeeResultSet* self;
	GAsyncQueue* queue;
};

struct _UnityInternalDiffModel {
	DeeSharedModel parent_instance;
	UnityInternalDiffModelPrivate * priv;
};

struct _UnityInternalDiffModelClass {
	DeeSharedModelClass parent_class;
};

struct _UnityInternalDiffModelPrivate {
	DeeModel* _target_model;
};

struct _UnityInternalUtilsDiffChange {
	gint x_offset;
	gint y_offset;
	gint inserted;
	gint deleted;
};

typedef gboolean (*UnityInternalUtilsDiffResultSetCompareFunc) (gint index_a, gint index_b, gpointer user_data);
typedef enum  {
	UNITY_INTERNAL_RESULT_COLUMN_URI,
	UNITY_INTERNAL_RESULT_COLUMN_ICON_HINT,
	UNITY_INTERNAL_RESULT_COLUMN_CATEGORY,
	UNITY_INTERNAL_RESULT_COLUMN_RESULT_TYPE,
	UNITY_INTERNAL_RESULT_COLUMN_MIMETYPE,
	UNITY_INTERNAL_RESULT_COLUMN_TITLE,
	UNITY_INTERNAL_RESULT_COLUMN_COMMENT,
	UNITY_INTERNAL_RESULT_COLUMN_DND_URI,
	UNITY_INTERNAL_RESULT_COLUMN_METADATA,
	UNITY_INTERNAL_RESULT_COLUMN_N_COLUMNS
} UnityInternalResultColumn;


static gpointer unity_internal_dee_result_set_parent_class = NULL;
static gpointer unity_internal_diff_model_parent_class = NULL;

GType unity_internal_dee_result_set_get_type (void) G_GNUC_CONST;
#define UNITY_INTERNAL_DEE_RESULT_SET_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_INTERNAL_TYPE_DEE_RESULT_SET, UnityInternalDeeResultSetPrivate))
UnityInternalDeeResultSet* unity_internal_dee_result_set_new (void);
UnityInternalDeeResultSet* unity_internal_dee_result_set_construct (GType object_type);
UnityInternalDeeResultSet* unity_internal_dee_result_set_new_with_model (DeeSerializableModel* model);
UnityInternalDeeResultSet* unity_internal_dee_result_set_construct_with_model (GType object_type,
                                                                               DeeSerializableModel* model);
static void unity_internal_dee_result_set_real_constructed (GObject* base);
DeeSerializableModel* unity_internal_dee_result_set_get_results_model (UnityInternalDeeResultSet* self);
void unity_internal_dee_result_set_set_results_model (UnityInternalDeeResultSet* self,
                                                      DeeSerializableModel* value);
static void unity_internal_dee_result_set_real_add_result (UnityResultSet* base,
                                                    UnityScopeResult* _result_);
static GVariant* _variant_new16 (GHashTable* value);
static void unity_internal_dee_result_set_real_add_result_from_variant (UnityResultSet* base,
                                                                 GVariant* variant);
static void unity_internal_dee_result_set_do_flush_locked (UnityInternalDeeResultSet* self);
GType unity_internal_diff_model_get_type (void) G_GNUC_CONST;
DeeSerializableModel* unity_internal_dee_result_set_get_flush_model (UnityInternalDeeResultSet* self);
void unity_internal_diff_model_commit_changes (UnityInternalDiffModel* self);
static void unity_internal_dee_result_set_real_flush (UnityResultSet* base);
static Block2Data* block2_data_ref (Block2Data* _data2_);
static void block2_data_unref (void * _userdata_);
static gboolean ___lambda7_ (Block2Data* _data2_);
static gboolean ____lambda7__gsource_func (gpointer self);
void unity_internal_dee_result_set_set_flush_model (UnityInternalDeeResultSet* self,
                                                    DeeSerializableModel* value);
static GObject * unity_internal_dee_result_set_constructor (GType type,
                                                     guint n_construct_properties,
                                                     GObjectConstructParam * construct_properties);
static void _g_variant_unref0_ (gpointer var);
static void unity_internal_dee_result_set_finalize (GObject * obj);
static void _vala_unity_internal_dee_result_set_get_property (GObject * object,
                                                       guint property_id,
                                                       GValue * value,
                                                       GParamSpec * pspec);
static void _vala_unity_internal_dee_result_set_set_property (GObject * object,
                                                       guint property_id,
                                                       const GValue * value,
                                                       GParamSpec * pspec);
#define UNITY_INTERNAL_DIFF_MODEL_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_INTERNAL_TYPE_DIFF_MODEL, UnityInternalDiffModelPrivate))
UnityInternalDiffModel* unity_internal_diff_model_new (DeePeer* peer,
                                                       DeeModel* target);
UnityInternalDiffModel* unity_internal_diff_model_construct (GType object_type,
                                                             DeePeer* peer,
                                                             DeeModel* target);
DeeModel* unity_internal_diff_model_get_target_model (UnityInternalDiffModel* self);
GType unity_internal_utils_diff_change_get_type (void) G_GNUC_CONST;
UnityInternalUtilsDiffChange* unity_internal_utils_diff_change_dup (const UnityInternalUtilsDiffChange* self);
void unity_internal_utils_diff_change_free (UnityInternalUtilsDiffChange* self);
GSList* unity_internal_utils_diff_run (gint x_set_length,
                                       gint y_set_length,
                                       UnityInternalUtilsDiffResultSetCompareFunc cmp_func,
                                       gpointer cmp_func_target);
static gboolean __lambda6_ (UnityInternalDiffModel* self,
                     gint index_a,
                     gint index_b);
GType unity_internal_result_column_get_type (void) G_GNUC_CONST;
static gboolean ___lambda6__unity_internal_utils_diff_result_set_compare_func (gint index_a,
                                                                        gint index_b,
                                                                        gpointer self);
static void _unity_internal_utils_diff_change_free0_ (gpointer var);
static inline void _g_slist_free__unity_internal_utils_diff_change_free0_ (GSList* self);
void unity_internal_diff_model_set_target_model (UnityInternalDiffModel* self,
                                                 DeeModel* value);
static void unity_internal_diff_model_finalize (GObject * obj);
static void _vala_unity_internal_diff_model_get_property (GObject * object,
                                                   guint property_id,
                                                   GValue * value,
                                                   GParamSpec * pspec);
static void _vala_unity_internal_diff_model_set_property (GObject * object,
                                                   guint property_id,
                                                   const GValue * value,
                                                   GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

extern const gchar* UNITY_INTERNAL_RESULTS_SCHEMA[9];
extern const gchar* UNITY_INTERNAL_RESULTS_COLUMN_NAMES[9];

UnityInternalDeeResultSet*
unity_internal_dee_result_set_construct (GType object_type)
{
	UnityInternalDeeResultSet * self = NULL;
	self = (UnityInternalDeeResultSet*) g_object_new (object_type, NULL);
	return self;
}


UnityInternalDeeResultSet*
unity_internal_dee_result_set_new (void)
{
	return unity_internal_dee_result_set_construct (UNITY_INTERNAL_TYPE_DEE_RESULT_SET);
}


UnityInternalDeeResultSet*
unity_internal_dee_result_set_construct_with_model (GType object_type,
                                                    DeeSerializableModel* model)
{
	UnityInternalDeeResultSet * self = NULL;
	g_return_val_if_fail (model != NULL, NULL);
	self = (UnityInternalDeeResultSet*) g_object_new (object_type, "results-model", model, NULL);
	return self;
}


UnityInternalDeeResultSet*
unity_internal_dee_result_set_new_with_model (DeeSerializableModel* model)
{
	return unity_internal_dee_result_set_construct_with_model (UNITY_INTERNAL_TYPE_DEE_RESULT_SET, model);
}


static void
unity_internal_dee_result_set_real_constructed (GObject* base)
{
	UnityInternalDeeResultSet * self;
	DeeSerializableModel* _tmp0_;
	self = (UnityInternalDeeResultSet*) base;
	_tmp0_ = self->priv->_results_model;
	if (_tmp0_ == NULL) {
		DeeSequenceModel* _tmp1_;
		DeeSequenceModel* _tmp2_;
		DeeSerializableModel* _tmp3_;
		DeeSerializableModel* _tmp4_;
		_tmp1_ = (DeeSequenceModel*) dee_sequence_model_new ();
		_tmp2_ = _tmp1_;
		unity_internal_dee_result_set_set_results_model (self, (DeeSerializableModel*) _tmp2_);
		_g_object_unref0 (_tmp2_);
		_tmp3_ = self->priv->_results_model;
		dee_model_set_schema_full ((DeeModel*) _tmp3_, UNITY_INTERNAL_RESULTS_SCHEMA, (guint) G_N_ELEMENTS (UNITY_INTERNAL_RESULTS_SCHEMA));
		_tmp4_ = self->priv->_results_model;
		dee_model_set_column_names_full ((DeeModel*) _tmp4_, UNITY_INTERNAL_RESULTS_COLUMN_NAMES, (guint) G_N_ELEMENTS (UNITY_INTERNAL_RESULTS_COLUMN_NAMES));
	}
}


static GVariant*
_variant_new16 (GHashTable* value)
{
	GVariantBuilder _tmp4_;
	GHashTableIter _tmp5_;
	gpointer _tmp6_;
	gpointer _tmp7_;
	g_hash_table_iter_init (&_tmp5_, value);
	g_variant_builder_init (&_tmp4_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp5_, &_tmp6_, &_tmp7_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp6_;
		_value = (GVariant*) _tmp7_;
		g_variant_builder_add (&_tmp4_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	return g_variant_ref_sink (g_variant_builder_end (&_tmp4_));
}


static void
unity_internal_dee_result_set_real_add_result (UnityResultSet* base,
                                               UnityScopeResult* _result_)
{
	UnityInternalDeeResultSet * self;
	GVariant* metadata_v = NULL;
	UnityScopeResult _tmp0_;
	GHashTable* _tmp1_;
	GVariant* v = NULL;
	UnityScopeResult _tmp14_;
	const gchar* _tmp15_;
	UnityScopeResult _tmp16_;
	const gchar* _tmp17_;
	UnityScopeResult _tmp18_;
	guint _tmp19_;
	UnityScopeResult _tmp20_;
	UnityResultType _tmp21_;
	UnityScopeResult _tmp22_;
	const gchar* _tmp23_;
	UnityScopeResult _tmp24_;
	const gchar* _tmp25_;
	UnityScopeResult _tmp26_;
	const gchar* _tmp27_;
	UnityScopeResult _tmp28_;
	const gchar* _tmp29_;
	GVariant* _tmp30_;
	GVariant* _tmp31_;
	GPtrArray* _tmp32_;
	GVariant* _tmp33_;
	self = (UnityInternalDeeResultSet*) base;
	g_return_if_fail (_result_ != NULL);
	_tmp0_ = *_result_;
	_tmp1_ = _tmp0_.metadata;
	if (_tmp1_ != NULL) {
		UnityScopeResult _tmp2_;
		GHashTable* _tmp3_;
		GVariant* _tmp8_;
		_tmp2_ = *_result_;
		_tmp3_ = _tmp2_.metadata;
		_tmp8_ = _variant_new16 (_tmp3_);
		_g_variant_unref0 (metadata_v);
		metadata_v = _tmp8_;
	} else {
		const GVariantType* _tmp9_;
		const GVariantType* _tmp10_;
		GVariant** _tmp11_;
		GVariant** _tmp12_;
		gint _tmp12__length1;
		GVariant* _tmp13_;
		_tmp9_ = G_VARIANT_TYPE_VARDICT;
		_tmp10_ = g_variant_type_element (_tmp9_);
		_tmp11_ = g_new0 (GVariant*, 0 + 1);
		_tmp12_ = _tmp11_;
		_tmp12__length1 = 0;
		_tmp13_ = g_variant_new_array (_tmp10_, _tmp12_, 0);
		g_variant_ref_sink (_tmp13_);
		_g_variant_unref0 (metadata_v);
		metadata_v = _tmp13_;
		_tmp12_ = (_vala_array_free (_tmp12_, _tmp12__length1, (GDestroyNotify) g_variant_unref), NULL);
	}
	_tmp14_ = *_result_;
	_tmp15_ = _tmp14_.uri;
	_tmp16_ = *_result_;
	_tmp17_ = _tmp16_.icon_hint;
	_tmp18_ = *_result_;
	_tmp19_ = _tmp18_.category;
	_tmp20_ = *_result_;
	_tmp21_ = _tmp20_.result_type;
	_tmp22_ = *_result_;
	_tmp23_ = _tmp22_.mimetype;
	_tmp24_ = *_result_;
	_tmp25_ = _tmp24_.title;
	_tmp26_ = *_result_;
	_tmp27_ = _tmp26_.comment;
	_tmp28_ = *_result_;
	_tmp29_ = _tmp28_.dnd_uri;
	_tmp30_ = metadata_v;
	_tmp31_ = g_variant_new ("(ssuussss@a{sv})", _tmp15_, _tmp17_, _tmp19_, _tmp21_, _tmp23_, _tmp25_, _tmp27_, _tmp29_, _tmp30_, NULL);
	g_variant_ref_sink (_tmp31_);
	v = _tmp31_;
	_tmp32_ = self->priv->results;
	_tmp33_ = v;
	v = NULL;
	g_ptr_array_add (_tmp32_, _tmp33_);
	_g_variant_unref0 (v);
	_g_variant_unref0 (metadata_v);
}


static gpointer
_g_variant_ref0 (gpointer self)
{
	return self ? g_variant_ref (self) : NULL;
}


static void
unity_internal_dee_result_set_real_add_result_from_variant (UnityResultSet* base,
                                                            GVariant* variant)
{
	UnityInternalDeeResultSet * self;
	static const char EXPECTED_TYPE_STRING[] = "(ssuussssa{sv})";
	const gchar* _tmp0_;
	GPtrArray* _tmp2_;
	GVariant* _tmp3_;
	self = (UnityInternalDeeResultSet*) base;
	g_return_if_fail (variant != NULL);
	_tmp0_ = g_variant_get_type_string (variant);
	if (g_strcmp0 (_tmp0_, EXPECTED_TYPE_STRING) != 0) {
		const gchar* _tmp1_;
		_tmp1_ = g_variant_get_type_string (variant);
		g_warning ("unity-models.vala:86: Incorrect signature for %s, expected %s, but got" \
" %s", "Unity.Internal.DeeResultSet.add_result_from_variant", EXPECTED_TYPE_STRING, _tmp1_);
		return;
	}
	_tmp2_ = self->priv->results;
	_tmp3_ = _g_variant_ref0 (variant);
	g_ptr_array_add (_tmp2_, _tmp3_);
}


static gint
g_ptr_array_get_length (GPtrArray* self)
{
	gint result;
	guint _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->len;
	result = (gint) _tmp0_;
	return result;
}


static void
g_ptr_array_set_length (GPtrArray* self,
                        gint value)
{
	g_return_if_fail (self != NULL);
	g_ptr_array_set_size (self, value);
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
unity_internal_dee_result_set_do_flush_locked (UnityInternalDeeResultSet* self)
{
	guint results_len = 0U;
	GPtrArray* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	GPtrArray* _tmp13_;
	UnityInternalDiffModel* diff_model = NULL;
	DeeSerializableModel* _tmp14_;
	UnityInternalDiffModel* _tmp15_;
	UnityInternalDiffModel* _tmp16_;
	DeeSharedModel* sm = NULL;
	DeeSerializableModel* _tmp18_;
	DeeSharedModel* _tmp19_;
	DeeSharedModel* _tmp20_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->results;
	_tmp1_ = g_ptr_array_get_length (_tmp0_);
	_tmp2_ = _tmp1_;
	results_len = (guint) _tmp2_;
	{
		guint i = 0U;
		i = (guint) 0;
		{
			gboolean _tmp3_ = FALSE;
			_tmp3_ = TRUE;
			while (TRUE) {
				guint _tmp5_;
				guint _tmp6_;
				GVariant* variant = NULL;
				GPtrArray* _tmp7_;
				gpointer* _tmp8_;
				gint _tmp8__length1;
				guint _tmp9_;
				GVariant* _tmp10_;
				GVariant* row_buf[9] = {0};
				GVariant* _tmp11_;
				DeeSerializableModel* _tmp12_;
				if (!_tmp3_) {
					guint _tmp4_;
					_tmp4_ = i;
					i = _tmp4_ + 1;
				}
				_tmp3_ = FALSE;
				_tmp5_ = i;
				_tmp6_ = results_len;
				if (!(_tmp5_ < _tmp6_)) {
					break;
				}
				_tmp7_ = self->priv->results;
				_tmp8_ = _tmp7_->pdata;
				_tmp8__length1 = (gint) _tmp7_->len;
				_tmp9_ = i;
				_tmp10_ = _tmp8_[_tmp9_];
				_tmp8_[_tmp9_] = NULL;
				variant = _tmp10_;
				_tmp11_ = variant;
				g_variant_get (_tmp11_, "(@s@s@u@u@s@s@s@s@a{sv})", &row_buf[0], &row_buf[1], &row_buf[2], &row_buf[3], &row_buf[4], &row_buf[5], &row_buf[6], &row_buf[7], &row_buf[8], NULL);
				_tmp12_ = self->priv->_results_model;
				dee_model_append_row ((DeeModel*) _tmp12_, row_buf);
				_vala_array_destroy (row_buf, 9, (GDestroyNotify) g_variant_unref);
				_g_variant_unref0 (variant);
			}
		}
	}
	_tmp13_ = self->priv->results;
	g_ptr_array_set_length (_tmp13_, 0);
	_tmp14_ = self->priv->_flush_model;
	_tmp15_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp14_, UNITY_INTERNAL_TYPE_DIFF_MODEL) ? ((UnityInternalDiffModel*) _tmp14_) : NULL);
	diff_model = _tmp15_;
	_tmp16_ = diff_model;
	if (_tmp16_ != NULL) {
		UnityInternalDiffModel* _tmp17_;
		_tmp17_ = diff_model;
		unity_internal_diff_model_commit_changes (_tmp17_);
	}
	_tmp18_ = self->priv->_flush_model;
	_tmp19_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp18_, dee_shared_model_get_type ()) ? ((DeeSharedModel*) _tmp18_) : NULL);
	sm = _tmp19_;
	_tmp20_ = sm;
	if (_tmp20_ != NULL) {
		DeeSharedModel* _tmp21_;
		const gchar* _tmp22_;
		DeeSharedModel* _tmp23_;
		_tmp21_ = sm;
		_tmp22_ = dee_shared_model_get_swarm_name (_tmp21_);
		unity_trace_tracepoint ("flush::%s", _tmp22_);
		_tmp23_ = sm;
		dee_shared_model_flush_revision_queue (_tmp23_);
	}
	_g_object_unref0 (sm);
	_g_object_unref0 (diff_model);
}


static Block2Data*
block2_data_ref (Block2Data* _data2_)
{
	g_atomic_int_inc (&_data2_->_ref_count_);
	return _data2_;
}


static void
block2_data_unref (void * _userdata_)
{
	Block2Data* _data2_;
	_data2_ = (Block2Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data2_->_ref_count_)) {
		UnityInternalDeeResultSet* self;
		self = _data2_->self;
		_g_async_queue_unref0 (_data2_->queue);
		_g_object_unref0 (self);
		g_slice_free (Block2Data, _data2_);
	}
}


static gboolean
___lambda7_ (Block2Data* _data2_)
{
	UnityInternalDeeResultSet* self;
	gboolean result = FALSE;
	GAsyncQueue* _tmp0_;
	self = _data2_->self;
	unity_internal_dee_result_set_do_flush_locked (self);
	_tmp0_ = _data2_->queue;
	g_async_queue_push (_tmp0_, (gpointer) ((gintptr) TRUE));
	result = FALSE;
	return result;
}


static gboolean
____lambda7__gsource_func (gpointer self)
{
	gboolean result;
	result = ___lambda7_ (self);
	return result;
}


static void
unity_internal_dee_result_set_real_flush (UnityResultSet* base)
{
	UnityInternalDeeResultSet * self;
	GThread* current_thread = NULL;
	GThread* _tmp0_;
	GThread* _tmp1_;
	GThread* _tmp2_;
	self = (UnityInternalDeeResultSet*) base;
	_tmp0_ = g_thread_self ();
	current_thread = _tmp0_;
	_tmp1_ = current_thread;
	_tmp2_ = self->priv->origin_thread;
	if (_tmp1_ == _tmp2_) {
		unity_internal_dee_result_set_do_flush_locked (self);
	} else {
		Block2Data* _data2_;
		GAsyncQueue* _tmp3_;
		GSource* idle = NULL;
		GSource* _tmp4_;
		GSource* _tmp5_;
		GSource* _tmp6_;
		GMainContext* _tmp7_;
		GAsyncQueue* _tmp8_;
		_data2_ = g_slice_new0 (Block2Data);
		_data2_->_ref_count_ = 1;
		_data2_->self = g_object_ref (self);
		_tmp3_ = g_async_queue_new_full (NULL);
		_data2_->queue = _tmp3_;
		_tmp4_ = g_idle_source_new ();
		idle = _tmp4_;
		_tmp5_ = idle;
		g_source_set_callback (_tmp5_, ____lambda7__gsource_func, block2_data_ref (_data2_), block2_data_unref);
		_tmp6_ = idle;
		_tmp7_ = self->priv->origin_context;
		g_source_attach (_tmp6_, _tmp7_);
		_tmp8_ = _data2_->queue;
		g_async_queue_pop (_tmp8_);
		_g_source_unref0 (idle);
		block2_data_unref (_data2_);
		_data2_ = NULL;
	}
}


DeeSerializableModel*
unity_internal_dee_result_set_get_results_model (UnityInternalDeeResultSet* self)
{
	DeeSerializableModel* result;
	DeeSerializableModel* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_results_model;
	result = _tmp0_;
	return result;
}


void
unity_internal_dee_result_set_set_results_model (UnityInternalDeeResultSet* self,
                                                 DeeSerializableModel* value)
{
	g_return_if_fail (self != NULL);
	if (unity_internal_dee_result_set_get_results_model (self) != value) {
		DeeSerializableModel* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_results_model);
		self->priv->_results_model = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_internal_dee_result_set_properties[UNITY_INTERNAL_DEE_RESULT_SET_RESULTS_MODEL_PROPERTY]);
	}
}


DeeSerializableModel*
unity_internal_dee_result_set_get_flush_model (UnityInternalDeeResultSet* self)
{
	DeeSerializableModel* result;
	DeeSerializableModel* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_flush_model;
	result = _tmp0_;
	return result;
}


void
unity_internal_dee_result_set_set_flush_model (UnityInternalDeeResultSet* self,
                                               DeeSerializableModel* value)
{
	g_return_if_fail (self != NULL);
	if (unity_internal_dee_result_set_get_flush_model (self) != value) {
		DeeSerializableModel* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_flush_model);
		self->priv->_flush_model = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_internal_dee_result_set_properties[UNITY_INTERNAL_DEE_RESULT_SET_FLUSH_MODEL_PROPERTY]);
	}
}


static void
_g_variant_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_variant_unref (var), NULL));
}


static GObject *
unity_internal_dee_result_set_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	UnityInternalDeeResultSet * self;
	GThread* _tmp0_;
	GMainContext* _tmp1_;
	GMainContext* _tmp2_;
	GPtrArray* _tmp4_;
	parent_class = G_OBJECT_CLASS (unity_internal_dee_result_set_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_INTERNAL_TYPE_DEE_RESULT_SET, UnityInternalDeeResultSet);
	_tmp0_ = g_thread_self ();
	self->priv->origin_thread = _tmp0_;
	_tmp1_ = g_main_context_get_thread_default ();
	self->priv->origin_context = _tmp1_;
	_tmp2_ = self->priv->origin_context;
	if (_tmp2_ == NULL) {
		GMainContext* _tmp3_;
		_tmp3_ = g_main_context_default ();
		self->priv->origin_context = _tmp3_;
	}
	_tmp4_ = g_ptr_array_new_full ((guint) 0, _g_variant_unref0_);
	_g_ptr_array_unref0 (self->priv->results);
	self->priv->results = _tmp4_;
	return obj;
}


static void
unity_internal_dee_result_set_class_init (UnityInternalDeeResultSetClass * klass)
{
	unity_internal_dee_result_set_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityInternalDeeResultSetPrivate));
	((GObjectClass *) klass)->constructed = (void (*) (GObject *)) unity_internal_dee_result_set_real_constructed;
	((UnityResultSetClass *) klass)->add_result = (void (*) (UnityResultSet *, UnityScopeResult*)) unity_internal_dee_result_set_real_add_result;
	((UnityResultSetClass *) klass)->add_result_from_variant = (void (*) (UnityResultSet *, GVariant*)) unity_internal_dee_result_set_real_add_result_from_variant;
	((UnityResultSetClass *) klass)->flush = (void (*) (UnityResultSet *)) unity_internal_dee_result_set_real_flush;
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_internal_dee_result_set_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_internal_dee_result_set_set_property;
	G_OBJECT_CLASS (klass)->constructor = unity_internal_dee_result_set_constructor;
	G_OBJECT_CLASS (klass)->finalize = unity_internal_dee_result_set_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INTERNAL_DEE_RESULT_SET_RESULTS_MODEL_PROPERTY, unity_internal_dee_result_set_properties[UNITY_INTERNAL_DEE_RESULT_SET_RESULTS_MODEL_PROPERTY] = g_param_spec_object ("results-model", "results-model", "results-model", dee_serializable_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INTERNAL_DEE_RESULT_SET_FLUSH_MODEL_PROPERTY, unity_internal_dee_result_set_properties[UNITY_INTERNAL_DEE_RESULT_SET_FLUSH_MODEL_PROPERTY] = g_param_spec_object ("flush-model", "flush-model", "flush-model", dee_serializable_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


static void
unity_internal_dee_result_set_instance_init (UnityInternalDeeResultSet * self)
{
	self->priv = UNITY_INTERNAL_DEE_RESULT_SET_GET_PRIVATE (self);
}


static void
unity_internal_dee_result_set_finalize (GObject * obj)
{
	UnityInternalDeeResultSet * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_INTERNAL_TYPE_DEE_RESULT_SET, UnityInternalDeeResultSet);
	_g_ptr_array_unref0 (self->priv->results);
	_g_object_unref0 (self->priv->_results_model);
	_g_object_unref0 (self->priv->_flush_model);
	G_OBJECT_CLASS (unity_internal_dee_result_set_parent_class)->finalize (obj);
}


GType
unity_internal_dee_result_set_get_type (void)
{
	static volatile gsize unity_internal_dee_result_set_type_id__volatile = 0;
	if (g_once_init_enter (&unity_internal_dee_result_set_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityInternalDeeResultSetClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_internal_dee_result_set_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityInternalDeeResultSet), 0, (GInstanceInitFunc) unity_internal_dee_result_set_instance_init, NULL };
		GType unity_internal_dee_result_set_type_id;
		unity_internal_dee_result_set_type_id = g_type_register_static (UNITY_TYPE_RESULT_SET, "UnityInternalDeeResultSet", &g_define_type_info, 0);
		g_once_init_leave (&unity_internal_dee_result_set_type_id__volatile, unity_internal_dee_result_set_type_id);
	}
	return unity_internal_dee_result_set_type_id__volatile;
}


static void
_vala_unity_internal_dee_result_set_get_property (GObject * object,
                                                  guint property_id,
                                                  GValue * value,
                                                  GParamSpec * pspec)
{
	UnityInternalDeeResultSet * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_INTERNAL_TYPE_DEE_RESULT_SET, UnityInternalDeeResultSet);
	switch (property_id) {
		case UNITY_INTERNAL_DEE_RESULT_SET_RESULTS_MODEL_PROPERTY:
		g_value_set_object (value, unity_internal_dee_result_set_get_results_model (self));
		break;
		case UNITY_INTERNAL_DEE_RESULT_SET_FLUSH_MODEL_PROPERTY:
		g_value_set_object (value, unity_internal_dee_result_set_get_flush_model (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_internal_dee_result_set_set_property (GObject * object,
                                                  guint property_id,
                                                  const GValue * value,
                                                  GParamSpec * pspec)
{
	UnityInternalDeeResultSet * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_INTERNAL_TYPE_DEE_RESULT_SET, UnityInternalDeeResultSet);
	switch (property_id) {
		case UNITY_INTERNAL_DEE_RESULT_SET_RESULTS_MODEL_PROPERTY:
		unity_internal_dee_result_set_set_results_model (self, g_value_get_object (value));
		break;
		case UNITY_INTERNAL_DEE_RESULT_SET_FLUSH_MODEL_PROPERTY:
		unity_internal_dee_result_set_set_flush_model (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


UnityInternalDiffModel*
unity_internal_diff_model_construct (GType object_type,
                                     DeePeer* peer,
                                     DeeModel* target)
{
	UnityInternalDiffModel * self = NULL;
	DeeSequenceModel* model = NULL;
	DeeSequenceModel* _tmp0_;
	g_return_val_if_fail (peer != NULL, NULL);
	g_return_val_if_fail (target != NULL, NULL);
	_tmp0_ = (DeeSequenceModel*) dee_sequence_model_new ();
	model = _tmp0_;
	self = (UnityInternalDiffModel*) g_object_new (object_type, "peer", peer, "back-end", model, "target-model", target, "access-mode", DEE_SHARED_MODEL_ACCESS_MODE_LEADER_WRITABLE, NULL);
	_g_object_unref0 (model);
	return self;
}


UnityInternalDiffModel*
unity_internal_diff_model_new (DeePeer* peer,
                               DeeModel* target)
{
	return unity_internal_diff_model_construct (UNITY_INTERNAL_TYPE_DIFF_MODEL, peer, target);
}


static gboolean
__lambda6_ (UnityInternalDiffModel* self,
            gint index_a,
            gint index_b)
{
	gboolean result = FALSE;
	DeeModelIter* this_iter = NULL;
	DeeModelIter* _tmp0_;
	DeeModelIter* target_iter = NULL;
	DeeModel* _tmp1_;
	DeeModelIter* _tmp2_;
	DeeModelIter* _tmp3_;
	DeeModel* _tmp4_;
	DeeModelIter* _tmp5_;
	DeeModelIter* _tmp6_;
	const gchar* _tmp7_;
	DeeModel* _tmp8_;
	DeeModelIter* _tmp9_;
	const gchar* _tmp10_;
	GVariant* om = NULL;
	DeeModel* _tmp11_;
	DeeModelIter* _tmp12_;
	GVariant* _tmp13_;
	DeeModelIter* _tmp14_;
	GVariant* _tmp15_;
	GVariant* _tmp16_;
	GVariant* _tmp17_;
	gboolean _tmp18_;
	_tmp0_ = dee_model_get_iter_at_row ((DeeModel*) self, (guint) index_a);
	this_iter = _tmp0_;
	_tmp1_ = self->priv->_target_model;
	_tmp2_ = dee_model_get_iter_at_row (_tmp1_, (guint) index_b);
	target_iter = _tmp2_;
	_tmp3_ = this_iter;
	_tmp4_ = self->priv->_target_model;
	_tmp5_ = target_iter;
	if (dee_model_get_uint32 ((DeeModel*) self, _tmp3_, (guint) UNITY_INTERNAL_RESULT_COLUMN_CATEGORY) != dee_model_get_uint32 (_tmp4_, _tmp5_, (guint) UNITY_INTERNAL_RESULT_COLUMN_CATEGORY)) {
		result = FALSE;
		return result;
	}
	_tmp6_ = this_iter;
	_tmp7_ = dee_model_get_string ((DeeModel*) self, _tmp6_, (guint) UNITY_INTERNAL_RESULT_COLUMN_URI);
	_tmp8_ = self->priv->_target_model;
	_tmp9_ = target_iter;
	_tmp10_ = dee_model_get_string (_tmp8_, _tmp9_, (guint) UNITY_INTERNAL_RESULT_COLUMN_URI);
	if (g_strcmp0 (_tmp7_, _tmp10_) != 0) {
		result = FALSE;
		return result;
	}
	_tmp11_ = self->priv->_target_model;
	_tmp12_ = target_iter;
	_tmp13_ = dee_model_get_value (_tmp11_, _tmp12_, (guint) UNITY_INTERNAL_RESULT_COLUMN_METADATA);
	om = _tmp13_;
	_tmp14_ = this_iter;
	_tmp15_ = dee_model_get_value ((DeeModel*) self, _tmp14_, (guint) UNITY_INTERNAL_RESULT_COLUMN_METADATA);
	_tmp16_ = _tmp15_;
	_tmp17_ = om;
	_tmp18_ = g_variant_equal (_tmp16_, _tmp17_);
	_g_variant_unref0 (_tmp16_);
	result = _tmp18_;
	_g_variant_unref0 (om);
	return result;
}


static gboolean
___lambda6__unity_internal_utils_diff_result_set_compare_func (gint index_a,
                                                               gint index_b,
                                                               gpointer self)
{
	gboolean result;
	result = __lambda6_ ((UnityInternalDiffModel*) self, index_a, index_b);
	return result;
}


static void
_unity_internal_utils_diff_change_free0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (unity_internal_utils_diff_change_free (var), NULL));
}


static inline void
_g_slist_free__unity_internal_utils_diff_change_free0_ (GSList* self)
{
	g_slist_free_full (self, (GDestroyNotify) _unity_internal_utils_diff_change_free0_);
}


void
unity_internal_diff_model_commit_changes (UnityInternalDiffModel* self)
{
	guint this_rows = 0U;
	guint target_rows = 0U;
	DeeModel* _tmp0_;
	guint _tmp1_;
	const gchar* _tmp20_;
	GSList* script = NULL;
	guint _tmp21_;
	guint _tmp22_;
	GSList* _tmp23_;
	GSList* _tmp24_;
	const gchar* _tmp61_;
	DeeModel* _tmp62_;
	g_return_if_fail (self != NULL);
	this_rows = dee_model_get_n_rows ((DeeModel*) self);
	_tmp0_ = self->priv->_target_model;
	target_rows = dee_model_get_n_rows (_tmp0_);
	_tmp1_ = target_rows;
	if (_tmp1_ == ((guint) 0)) {
		dee_model_clear ((DeeModel*) self);
		return;
	} else {
		guint _tmp2_;
		_tmp2_ = this_rows;
		if (_tmp2_ == ((guint) 0)) {
			GVariant* row_buf[9] = {0};
			DeeModelIter* iter = NULL;
			DeeModel* _tmp3_;
			DeeModelIter* _tmp4_;
			DeeModelIter* end_iter = NULL;
			DeeModel* _tmp5_;
			DeeModelIter* _tmp6_;
			_tmp3_ = self->priv->_target_model;
			_tmp4_ = dee_model_get_first_iter (_tmp3_);
			iter = _tmp4_;
			_tmp5_ = self->priv->_target_model;
			_tmp6_ = dee_model_get_last_iter (_tmp5_);
			end_iter = _tmp6_;
			while (TRUE) {
				DeeModelIter* _tmp7_;
				DeeModelIter* _tmp8_;
				DeeModel* _tmp14_;
				DeeModelIter* _tmp15_;
				GVariant** _tmp16_;
				DeeModel* _tmp17_;
				DeeModelIter* _tmp18_;
				DeeModelIter* _tmp19_;
				_tmp7_ = iter;
				_tmp8_ = end_iter;
				if (!(_tmp7_ != _tmp8_)) {
					break;
				}
				{
					gint i = 0;
					i = 0;
					{
						gboolean _tmp9_ = FALSE;
						_tmp9_ = TRUE;
						while (TRUE) {
							gint _tmp11_;
							gint _tmp12_;
							GVariant* _tmp13_;
							if (!_tmp9_) {
								gint _tmp10_;
								_tmp10_ = i;
								i = _tmp10_ + 1;
							}
							_tmp9_ = FALSE;
							_tmp11_ = i;
							if (!(_tmp11_ < 9)) {
								break;
							}
							_tmp12_ = i;
							_g_variant_unref0 (row_buf[_tmp12_]);
							row_buf[_tmp12_] = NULL;
							_tmp13_ = row_buf[_tmp12_];
						}
					}
				}
				_tmp14_ = self->priv->_target_model;
				_tmp15_ = iter;
				_tmp16_ = dee_model_get_row (_tmp14_, _tmp15_, row_buf);
				dee_model_append_row ((DeeModel*) self, row_buf);
				_tmp17_ = self->priv->_target_model;
				_tmp18_ = iter;
				_tmp19_ = dee_model_next (_tmp17_, _tmp18_);
				iter = _tmp19_;
			}
			_vala_array_destroy (row_buf, 9, (GDestroyNotify) g_variant_unref);
			return;
		}
	}
	_tmp20_ = dee_shared_model_get_swarm_name ((DeeSharedModel*) self);
	unity_trace_tracepoint ("diff:start::%s", _tmp20_);
	_tmp21_ = this_rows;
	_tmp22_ = target_rows;
	_tmp23_ = unity_internal_utils_diff_run ((gint) _tmp21_, (gint) _tmp22_, ___lambda6__unity_internal_utils_diff_result_set_compare_func, self);
	script = _tmp23_;
	_tmp24_ = script;
	{
		GSList* change_collection = NULL;
		GSList* change_it = NULL;
		change_collection = _tmp24_;
		for (change_it = change_collection; change_it != NULL; change_it = change_it->next) {
			UnityInternalUtilsDiffChange* change = NULL;
			change = (UnityInternalUtilsDiffChange*) change_it->data;
			{
				gint to_delete = 0;
				UnityInternalUtilsDiffChange* _tmp25_;
				gint _tmp26_;
				DeeModelIter* iter = NULL;
				UnityInternalUtilsDiffChange* _tmp27_;
				gint _tmp28_;
				DeeModelIter* _tmp29_;
				UnityInternalUtilsDiffChange* _tmp36_;
				gint _tmp37_;
				_tmp25_ = change;
				_tmp26_ = (*_tmp25_).deleted;
				to_delete = _tmp26_;
				_tmp27_ = change;
				_tmp28_ = (*_tmp27_).x_offset;
				_tmp29_ = dee_model_get_iter_at_row ((DeeModel*) self, (guint) _tmp28_);
				iter = _tmp29_;
				while (TRUE) {
					gint _tmp30_;
					DeeModelIter* rm_iter = NULL;
					DeeModelIter* _tmp31_;
					DeeModelIter* _tmp32_;
					DeeModelIter* _tmp33_;
					DeeModelIter* _tmp34_;
					gint _tmp35_;
					_tmp30_ = to_delete;
					if (!(_tmp30_ > 0)) {
						break;
					}
					_tmp31_ = iter;
					rm_iter = _tmp31_;
					_tmp32_ = iter;
					_tmp33_ = dee_model_next ((DeeModel*) self, _tmp32_);
					iter = _tmp33_;
					_tmp34_ = rm_iter;
					dee_model_remove ((DeeModel*) self, _tmp34_);
					_tmp35_ = to_delete;
					to_delete = _tmp35_ - 1;
				}
				_tmp36_ = change;
				_tmp37_ = (*_tmp36_).inserted;
				if (_tmp37_ > 0) {
					GVariant* row_buf[9] = {0};
					gint to_insert = 0;
					UnityInternalUtilsDiffChange* _tmp38_;
					gint _tmp39_;
					gint inserted = 0;
					DeeModelIter* target_iter = NULL;
					DeeModel* _tmp40_;
					UnityInternalUtilsDiffChange* _tmp41_;
					gint _tmp42_;
					DeeModelIter* _tmp43_;
					_tmp38_ = change;
					_tmp39_ = (*_tmp38_).inserted;
					to_insert = _tmp39_;
					inserted = 0;
					_tmp40_ = self->priv->_target_model;
					_tmp41_ = change;
					_tmp42_ = (*_tmp41_).y_offset;
					_tmp43_ = dee_model_get_iter_at_row (_tmp40_, (guint) _tmp42_);
					target_iter = _tmp43_;
					while (TRUE) {
						gint _tmp44_;
						gint _tmp45_;
						DeeModel* _tmp51_;
						DeeModelIter* _tmp52_;
						GVariant** _tmp53_;
						UnityInternalUtilsDiffChange* _tmp54_;
						gint _tmp55_;
						gint _tmp56_;
						DeeModel* _tmp57_;
						DeeModelIter* _tmp58_;
						DeeModelIter* _tmp59_;
						gint _tmp60_;
						_tmp44_ = inserted;
						_tmp45_ = to_insert;
						if (!(_tmp44_ < _tmp45_)) {
							break;
						}
						{
							gint i = 0;
							i = 0;
							{
								gboolean _tmp46_ = FALSE;
								_tmp46_ = TRUE;
								while (TRUE) {
									gint _tmp48_;
									gint _tmp49_;
									GVariant* _tmp50_;
									if (!_tmp46_) {
										gint _tmp47_;
										_tmp47_ = i;
										i = _tmp47_ + 1;
									}
									_tmp46_ = FALSE;
									_tmp48_ = i;
									if (!(_tmp48_ < 9)) {
										break;
									}
									_tmp49_ = i;
									_g_variant_unref0 (row_buf[_tmp49_]);
									row_buf[_tmp49_] = NULL;
									_tmp50_ = row_buf[_tmp49_];
								}
							}
						}
						_tmp51_ = self->priv->_target_model;
						_tmp52_ = target_iter;
						_tmp53_ = dee_model_get_row (_tmp51_, _tmp52_, row_buf);
						_tmp54_ = change;
						_tmp55_ = (*_tmp54_).x_offset;
						_tmp56_ = inserted;
						dee_model_insert_row ((DeeModel*) self, (guint) (_tmp55_ + _tmp56_), row_buf);
						_tmp57_ = self->priv->_target_model;
						_tmp58_ = target_iter;
						_tmp59_ = dee_model_next (_tmp57_, _tmp58_);
						target_iter = _tmp59_;
						_tmp60_ = inserted;
						inserted = _tmp60_ + 1;
					}
					_vala_array_destroy (row_buf, 9, (GDestroyNotify) g_variant_unref);
				}
			}
		}
	}
	_tmp61_ = dee_shared_model_get_swarm_name ((DeeSharedModel*) self);
	unity_trace_tracepoint ("diff:end::%s", _tmp61_);
	_tmp62_ = self->priv->_target_model;
	_vala_assert (dee_model_get_n_rows ((DeeModel*) self) == dee_model_get_n_rows (_tmp62_), "get_n_rows () == target_model.get_n_rows ()");
	(script == NULL) ? NULL : (script = (_g_slist_free__unity_internal_utils_diff_change_free0_ (script), NULL));
}


DeeModel*
unity_internal_diff_model_get_target_model (UnityInternalDiffModel* self)
{
	DeeModel* result;
	DeeModel* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_target_model;
	result = _tmp0_;
	return result;
}


void
unity_internal_diff_model_set_target_model (UnityInternalDiffModel* self,
                                            DeeModel* value)
{
	g_return_if_fail (self != NULL);
	if (unity_internal_diff_model_get_target_model (self) != value) {
		DeeModel* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_target_model);
		self->priv->_target_model = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_internal_diff_model_properties[UNITY_INTERNAL_DIFF_MODEL_TARGET_MODEL_PROPERTY]);
	}
}


static void
unity_internal_diff_model_class_init (UnityInternalDiffModelClass * klass)
{
	unity_internal_diff_model_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityInternalDiffModelPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_internal_diff_model_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_internal_diff_model_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_internal_diff_model_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_INTERNAL_DIFF_MODEL_TARGET_MODEL_PROPERTY, unity_internal_diff_model_properties[UNITY_INTERNAL_DIFF_MODEL_TARGET_MODEL_PROPERTY] = g_param_spec_object ("target-model", "target-model", "target-model", dee_model_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
}


static void
unity_internal_diff_model_instance_init (UnityInternalDiffModel * self)
{
	self->priv = UNITY_INTERNAL_DIFF_MODEL_GET_PRIVATE (self);
}


static void
unity_internal_diff_model_finalize (GObject * obj)
{
	UnityInternalDiffModel * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_INTERNAL_TYPE_DIFF_MODEL, UnityInternalDiffModel);
	_g_object_unref0 (self->priv->_target_model);
	G_OBJECT_CLASS (unity_internal_diff_model_parent_class)->finalize (obj);
}


GType
unity_internal_diff_model_get_type (void)
{
	static volatile gsize unity_internal_diff_model_type_id__volatile = 0;
	if (g_once_init_enter (&unity_internal_diff_model_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityInternalDiffModelClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_internal_diff_model_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityInternalDiffModel), 0, (GInstanceInitFunc) unity_internal_diff_model_instance_init, NULL };
		GType unity_internal_diff_model_type_id;
		unity_internal_diff_model_type_id = g_type_register_static (dee_shared_model_get_type (), "UnityInternalDiffModel", &g_define_type_info, 0);
		g_once_init_leave (&unity_internal_diff_model_type_id__volatile, unity_internal_diff_model_type_id);
	}
	return unity_internal_diff_model_type_id__volatile;
}


static void
_vala_unity_internal_diff_model_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec)
{
	UnityInternalDiffModel * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_INTERNAL_TYPE_DIFF_MODEL, UnityInternalDiffModel);
	switch (property_id) {
		case UNITY_INTERNAL_DIFF_MODEL_TARGET_MODEL_PROPERTY:
		g_value_set_object (value, unity_internal_diff_model_get_target_model (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_internal_diff_model_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec)
{
	UnityInternalDiffModel * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_INTERNAL_TYPE_DIFF_MODEL, UnityInternalDiffModel);
	switch (property_id) {
		case UNITY_INTERNAL_DIFF_MODEL_TARGET_MODEL_PROPERTY:
		unity_internal_diff_model_set_target_model (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



