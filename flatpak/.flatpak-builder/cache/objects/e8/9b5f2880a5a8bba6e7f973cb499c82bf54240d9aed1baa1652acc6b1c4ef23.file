/* name-details.c generated by valac 0.40.11, the Vala compiler
 * generated from name-details.vala, do not modify */

/*
 * Copyright (C) 2011, 2013 Collabora Ltd.
 * Copyright (C) 2011, 2013 Philip Withnall
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Marco Barisione <marco.barisione@collabora.co.uk>
 *       Raul Gutierrez Segales <raul.gutierrez.segales@collabora.co.uk>
 *       Philip Withnall <philip@tecnocode.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>
#include <gio/gio.h>


#define FOLKS_TYPE_STRUCTURED_NAME (folks_structured_name_get_type ())
#define FOLKS_STRUCTURED_NAME(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_STRUCTURED_NAME, FolksStructuredName))
#define FOLKS_STRUCTURED_NAME_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_STRUCTURED_NAME, FolksStructuredNameClass))
#define FOLKS_IS_STRUCTURED_NAME(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_STRUCTURED_NAME))
#define FOLKS_IS_STRUCTURED_NAME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_STRUCTURED_NAME))
#define FOLKS_STRUCTURED_NAME_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_STRUCTURED_NAME, FolksStructuredNameClass))

typedef struct _FolksStructuredName FolksStructuredName;
typedef struct _FolksStructuredNameClass FolksStructuredNameClass;
typedef struct _FolksStructuredNamePrivate FolksStructuredNamePrivate;
enum  {
	FOLKS_STRUCTURED_NAME_0_PROPERTY,
	FOLKS_STRUCTURED_NAME_FAMILY_NAME_PROPERTY,
	FOLKS_STRUCTURED_NAME_GIVEN_NAME_PROPERTY,
	FOLKS_STRUCTURED_NAME_ADDITIONAL_NAMES_PROPERTY,
	FOLKS_STRUCTURED_NAME_PREFIXES_PROPERTY,
	FOLKS_STRUCTURED_NAME_SUFFIXES_PROPERTY,
	FOLKS_STRUCTURED_NAME_NUM_PROPERTIES
};
static GParamSpec* folks_structured_name_properties[FOLKS_STRUCTURED_NAME_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_string_free0(var) ((var == NULL) ? NULL : (var = (g_string_free (var, TRUE), NULL)))

#define FOLKS_TYPE_NAME_DETAILS (folks_name_details_get_type ())
#define FOLKS_NAME_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_NAME_DETAILS, FolksNameDetails))
#define FOLKS_IS_NAME_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_NAME_DETAILS))
#define FOLKS_NAME_DETAILS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_NAME_DETAILS, FolksNameDetailsIface))

typedef struct _FolksNameDetails FolksNameDetails;
typedef struct _FolksNameDetailsIface FolksNameDetailsIface;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _FolksNameDetailsChangeStructuredNameData FolksNameDetailsChangeStructuredNameData;
typedef struct _FolksNameDetailsChangeFullNameData FolksNameDetailsChangeFullNameData;
typedef struct _FolksNameDetailsChangeNicknameData FolksNameDetailsChangeNicknameData;

struct _FolksStructuredName {
	GObject parent_instance;
	FolksStructuredNamePrivate * priv;
};

struct _FolksStructuredNameClass {
	GObjectClass parent_class;
};

struct _FolksStructuredNamePrivate {
	gchar* _family_name;
	gchar* _given_name;
	gchar* _additional_names;
	gchar* _prefixes;
	gchar* _suffixes;
};

typedef enum  {
	FOLKS_PROPERTY_ERROR_NOT_WRITEABLE,
	FOLKS_PROPERTY_ERROR_INVALID_VALUE,
	FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR,
	FOLKS_PROPERTY_ERROR_UNAVAILABLE
} FolksPropertyError;
#define FOLKS_PROPERTY_ERROR folks_property_error_quark ()
struct _FolksNameDetailsIface {
	GTypeInterface parent_iface;
	void (*change_structured_name) (FolksNameDetails* self, FolksStructuredName* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_structured_name_finish) (FolksNameDetails* self, GAsyncResult* _res_, GError** error);
	void (*change_full_name) (FolksNameDetails* self, const gchar* full_name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_full_name_finish) (FolksNameDetails* self, GAsyncResult* _res_, GError** error);
	void (*change_nickname) (FolksNameDetails* self, const gchar* nickname, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_nickname_finish) (FolksNameDetails* self, GAsyncResult* _res_, GError** error);
	FolksStructuredName* (*get_structured_name) (FolksNameDetails* self);
	void (*set_structured_name) (FolksNameDetails* self, FolksStructuredName* value);
	const gchar* (*get_full_name) (FolksNameDetails* self);
	void (*set_full_name) (FolksNameDetails* self, const gchar* value);
	const gchar* (*get_nickname) (FolksNameDetails* self);
	void (*set_nickname) (FolksNameDetails* self, const gchar* value);
};

struct _FolksNameDetailsChangeStructuredNameData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksNameDetails* self;
	FolksStructuredName* name;
	GError* _tmp0_;
	GError * _inner_error_;
};

struct _FolksNameDetailsChangeFullNameData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksNameDetails* self;
	gchar* full_name;
	GError* _tmp0_;
	GError * _inner_error_;
};

struct _FolksNameDetailsChangeNicknameData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksNameDetails* self;
	gchar* nickname;
	GError* _tmp0_;
	GError * _inner_error_;
};


static gpointer folks_structured_name_parent_class = NULL;

GType folks_structured_name_get_type (void) G_GNUC_CONST;
#define FOLKS_STRUCTURED_NAME_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_TYPE_STRUCTURED_NAME, FolksStructuredNamePrivate))
FolksStructuredName* folks_structured_name_new (const gchar* family_name,
                                                const gchar* given_name,
                                                const gchar* additional_names,
                                                const gchar* prefixes,
                                                const gchar* suffixes);
FolksStructuredName* folks_structured_name_construct (GType object_type,
                                                      const gchar* family_name,
                                                      const gchar* given_name,
                                                      const gchar* additional_names,
                                                      const gchar* prefixes,
                                                      const gchar* suffixes);
FolksStructuredName* folks_structured_name_new_simple (const gchar* family_name,
                                                       const gchar* given_name);
FolksStructuredName* folks_structured_name_construct_simple (GType object_type,
                                                             const gchar* family_name,
                                                             const gchar* given_name);
gboolean folks_structured_name_is_empty (FolksStructuredName* self);
gboolean folks_structured_name_equal (FolksStructuredName* self,
                                      FolksStructuredName* other);
const gchar* folks_structured_name_get_family_name (FolksStructuredName* self);
const gchar* folks_structured_name_get_given_name (FolksStructuredName* self);
const gchar* folks_structured_name_get_additional_names (FolksStructuredName* self);
const gchar* folks_structured_name_get_prefixes (FolksStructuredName* self);
const gchar* folks_structured_name_get_suffixes (FolksStructuredName* self);
static gchar* _folks_structured_name_extract_initials (FolksStructuredName* self,
                                                const gchar* names);
gchar* folks_structured_name_to_string (FolksStructuredName* self);
gchar* folks_structured_name_to_string_with_format (FolksStructuredName* self,
                                                    const gchar* name_fmt);
void folks_structured_name_set_family_name (FolksStructuredName* self,
                                            const gchar* value);
void folks_structured_name_set_given_name (FolksStructuredName* self,
                                           const gchar* value);
void folks_structured_name_set_additional_names (FolksStructuredName* self,
                                                 const gchar* value);
void folks_structured_name_set_prefixes (FolksStructuredName* self,
                                         const gchar* value);
void folks_structured_name_set_suffixes (FolksStructuredName* self,
                                         const gchar* value);
static void folks_structured_name_finalize (GObject * obj);
static void _vala_folks_structured_name_get_property (GObject * object,
                                               guint property_id,
                                               GValue * value,
                                               GParamSpec * pspec);
static void _vala_folks_structured_name_set_property (GObject * object,
                                               guint property_id,
                                               const GValue * value,
                                               GParamSpec * pspec);
GQuark folks_property_error_quark (void);
GType folks_name_details_get_type (void) G_GNUC_CONST;
static void folks_name_details_real_change_structured_name_data_free (gpointer _data);
static void folks_name_details_real_change_structured_name_async_ready_wrapper (GObject *source_object,
                                                                         GAsyncResult *res,
                                                                         void *user_data);
static void folks_name_details_real_change_structured_name (FolksNameDetails* self,
                                                     FolksStructuredName* name,
                                                     GAsyncReadyCallback _callback_,
                                                     gpointer _user_data_);
void folks_name_details_change_structured_name (FolksNameDetails* self,
                                                FolksStructuredName* name,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_);
void folks_name_details_change_structured_name_finish (FolksNameDetails* self,
                                                       GAsyncResult* _res_,
                                                       GError** error);
static gboolean folks_name_details_real_change_structured_name_co (FolksNameDetailsChangeStructuredNameData* _data_);
static void folks_name_details_real_change_full_name_data_free (gpointer _data);
static void folks_name_details_real_change_full_name_async_ready_wrapper (GObject *source_object,
                                                                   GAsyncResult *res,
                                                                   void *user_data);
static void folks_name_details_real_change_full_name (FolksNameDetails* self,
                                               const gchar* full_name,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
void folks_name_details_change_full_name (FolksNameDetails* self,
                                          const gchar* full_name,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_);
void folks_name_details_change_full_name_finish (FolksNameDetails* self,
                                                 GAsyncResult* _res_,
                                                 GError** error);
static gboolean folks_name_details_real_change_full_name_co (FolksNameDetailsChangeFullNameData* _data_);
static void folks_name_details_real_change_nickname_data_free (gpointer _data);
static void folks_name_details_real_change_nickname_async_ready_wrapper (GObject *source_object,
                                                                  GAsyncResult *res,
                                                                  void *user_data);
static void folks_name_details_real_change_nickname (FolksNameDetails* self,
                                              const gchar* nickname,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_);
void folks_name_details_change_nickname (FolksNameDetails* self,
                                         const gchar* nickname,
                                         GAsyncReadyCallback _callback_,
                                         gpointer _user_data_);
void folks_name_details_change_nickname_finish (FolksNameDetails* self,
                                                GAsyncResult* _res_,
                                                GError** error);
static gboolean folks_name_details_real_change_nickname_co (FolksNameDetailsChangeNicknameData* _data_);
FolksStructuredName* folks_name_details_get_structured_name (FolksNameDetails* self);
void folks_name_details_set_structured_name (FolksNameDetails* self,
                                             FolksStructuredName* value);
const gchar* folks_name_details_get_full_name (FolksNameDetails* self);
void folks_name_details_set_full_name (FolksNameDetails* self,
                                       const gchar* value);
const gchar* folks_name_details_get_nickname (FolksNameDetails* self);
void folks_name_details_set_nickname (FolksNameDetails* self,
                                      const gchar* value);


/**
   * Create a StructuredName.
   *
   * You can pass ``null`` if a component is not set.
   *
   * @param family_name the family (last) name
   * @param given_name the given (first) name
   * @param additional_names additional names
   * @param prefixes prefixes of the name
   * @param suffixes suffixes of the name
   * @return a new StructuredName
   *
   * @since 0.3.5
   */
FolksStructuredName*
folks_structured_name_construct (GType object_type,
                                 const gchar* family_name,
                                 const gchar* given_name,
                                 const gchar* additional_names,
                                 const gchar* prefixes,
                                 const gchar* suffixes)
{
	FolksStructuredName * self = NULL;
#line 127 "/run/build/folks/folks/name-details.vala"
	self = (FolksStructuredName*) g_object_new (object_type, "family-name", family_name, "given-name", given_name, "additional-names", additional_names, "prefixes", prefixes, "suffixes", suffixes, NULL);
#line 124 "/run/build/folks/folks/name-details.vala"
	return self;
#line 292 "name-details.c"
}


FolksStructuredName*
folks_structured_name_new (const gchar* family_name,
                           const gchar* given_name,
                           const gchar* additional_names,
                           const gchar* prefixes,
                           const gchar* suffixes)
{
#line 124 "/run/build/folks/folks/name-details.vala"
	return folks_structured_name_construct (FOLKS_TYPE_STRUCTURED_NAME, family_name, given_name, additional_names, prefixes, suffixes);
#line 305 "name-details.c"
}


/**
   * Create a StructuredName.
   *
   * Shorthand for the common case of just having the family and given
   * name of a contact. It's equivalent to calling
   * {@link StructuredName.StructuredName} and passing ``null`` for all
   * the other components.
   *
   * @param family_name the family (last) name
   * @param given_name the given (first) name
   * @return a new StructuredName
   *
   * @since 0.3.5
   */
FolksStructuredName*
folks_structured_name_construct_simple (GType object_type,
                                        const gchar* family_name,
                                        const gchar* given_name)
{
	FolksStructuredName * self = NULL;
#line 150 "/run/build/folks/folks/name-details.vala"
	self = (FolksStructuredName*) g_object_new (object_type, "family-name", family_name, "given-name", given_name, NULL);
#line 148 "/run/build/folks/folks/name-details.vala"
	return self;
#line 333 "name-details.c"
}


FolksStructuredName*
folks_structured_name_new_simple (const gchar* family_name,
                                  const gchar* given_name)
{
#line 148 "/run/build/folks/folks/name-details.vala"
	return folks_structured_name_construct_simple (FOLKS_TYPE_STRUCTURED_NAME, family_name, given_name);
#line 343 "name-details.c"
}


/**
   * Whether none of the components is set.
   *
   * @return ``true`` if all the components are the empty string, ``false``
   * otherwise.
   *
   * @since 0.3.5
   */
gboolean
folks_structured_name_is_empty (FolksStructuredName* self)
{
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp2_ = FALSE;
	gboolean _tmp3_ = FALSE;
	const gchar* _tmp4_;
#line 162 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 164 "/run/build/folks/folks/name-details.vala"
	_tmp4_ = self->priv->_family_name;
#line 164 "/run/build/folks/folks/name-details.vala"
	if (g_strcmp0 (_tmp4_, "") == 0) {
#line 370 "name-details.c"
		const gchar* _tmp5_;
#line 165 "/run/build/folks/folks/name-details.vala"
		_tmp5_ = self->priv->_given_name;
#line 165 "/run/build/folks/folks/name-details.vala"
		_tmp3_ = g_strcmp0 (_tmp5_, "") == 0;
#line 376 "name-details.c"
	} else {
#line 164 "/run/build/folks/folks/name-details.vala"
		_tmp3_ = FALSE;
#line 380 "name-details.c"
	}
#line 164 "/run/build/folks/folks/name-details.vala"
	if (_tmp3_) {
#line 384 "name-details.c"
		const gchar* _tmp6_;
#line 166 "/run/build/folks/folks/name-details.vala"
		_tmp6_ = self->priv->_additional_names;
#line 166 "/run/build/folks/folks/name-details.vala"
		_tmp2_ = g_strcmp0 (_tmp6_, "") == 0;
#line 390 "name-details.c"
	} else {
#line 164 "/run/build/folks/folks/name-details.vala"
		_tmp2_ = FALSE;
#line 394 "name-details.c"
	}
#line 164 "/run/build/folks/folks/name-details.vala"
	if (_tmp2_) {
#line 398 "name-details.c"
		const gchar* _tmp7_;
#line 167 "/run/build/folks/folks/name-details.vala"
		_tmp7_ = self->priv->_prefixes;
#line 167 "/run/build/folks/folks/name-details.vala"
		_tmp1_ = g_strcmp0 (_tmp7_, "") == 0;
#line 404 "name-details.c"
	} else {
#line 164 "/run/build/folks/folks/name-details.vala"
		_tmp1_ = FALSE;
#line 408 "name-details.c"
	}
#line 164 "/run/build/folks/folks/name-details.vala"
	if (_tmp1_) {
#line 412 "name-details.c"
		const gchar* _tmp8_;
#line 168 "/run/build/folks/folks/name-details.vala"
		_tmp8_ = self->priv->_suffixes;
#line 168 "/run/build/folks/folks/name-details.vala"
		_tmp0_ = g_strcmp0 (_tmp8_, "") == 0;
#line 418 "name-details.c"
	} else {
#line 164 "/run/build/folks/folks/name-details.vala"
		_tmp0_ = FALSE;
#line 422 "name-details.c"
	}
#line 164 "/run/build/folks/folks/name-details.vala"
	result = _tmp0_;
#line 164 "/run/build/folks/folks/name-details.vala"
	return result;
#line 428 "name-details.c"
}


/**
   * Whether two StructuredNames are the same.
   *
   * @param other the other structured name to compare with
   * @return ``true`` if all the components are the same, ``false``
   * otherwise.
   *
   * @since 0.5.0
   */
gboolean
folks_structured_name_equal (FolksStructuredName* self,
                             FolksStructuredName* other)
{
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp2_ = FALSE;
	gboolean _tmp3_ = FALSE;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
#line 180 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 180 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (other != NULL, FALSE);
#line 182 "/run/build/folks/folks/name-details.vala"
	_tmp4_ = self->priv->_family_name;
#line 182 "/run/build/folks/folks/name-details.vala"
	_tmp5_ = folks_structured_name_get_family_name (other);
#line 182 "/run/build/folks/folks/name-details.vala"
	_tmp6_ = _tmp5_;
#line 182 "/run/build/folks/folks/name-details.vala"
	if (g_strcmp0 (_tmp4_, _tmp6_) == 0) {
#line 465 "name-details.c"
		const gchar* _tmp7_;
		const gchar* _tmp8_;
		const gchar* _tmp9_;
#line 183 "/run/build/folks/folks/name-details.vala"
		_tmp7_ = self->priv->_given_name;
#line 183 "/run/build/folks/folks/name-details.vala"
		_tmp8_ = folks_structured_name_get_given_name (other);
#line 183 "/run/build/folks/folks/name-details.vala"
		_tmp9_ = _tmp8_;
#line 183 "/run/build/folks/folks/name-details.vala"
		_tmp3_ = g_strcmp0 (_tmp7_, _tmp9_) == 0;
#line 477 "name-details.c"
	} else {
#line 182 "/run/build/folks/folks/name-details.vala"
		_tmp3_ = FALSE;
#line 481 "name-details.c"
	}
#line 182 "/run/build/folks/folks/name-details.vala"
	if (_tmp3_) {
#line 485 "name-details.c"
		const gchar* _tmp10_;
		const gchar* _tmp11_;
		const gchar* _tmp12_;
#line 184 "/run/build/folks/folks/name-details.vala"
		_tmp10_ = self->priv->_additional_names;
#line 184 "/run/build/folks/folks/name-details.vala"
		_tmp11_ = folks_structured_name_get_additional_names (other);
#line 184 "/run/build/folks/folks/name-details.vala"
		_tmp12_ = _tmp11_;
#line 184 "/run/build/folks/folks/name-details.vala"
		_tmp2_ = g_strcmp0 (_tmp10_, _tmp12_) == 0;
#line 497 "name-details.c"
	} else {
#line 182 "/run/build/folks/folks/name-details.vala"
		_tmp2_ = FALSE;
#line 501 "name-details.c"
	}
#line 182 "/run/build/folks/folks/name-details.vala"
	if (_tmp2_) {
#line 505 "name-details.c"
		const gchar* _tmp13_;
		const gchar* _tmp14_;
		const gchar* _tmp15_;
#line 185 "/run/build/folks/folks/name-details.vala"
		_tmp13_ = self->priv->_prefixes;
#line 185 "/run/build/folks/folks/name-details.vala"
		_tmp14_ = folks_structured_name_get_prefixes (other);
#line 185 "/run/build/folks/folks/name-details.vala"
		_tmp15_ = _tmp14_;
#line 185 "/run/build/folks/folks/name-details.vala"
		_tmp1_ = g_strcmp0 (_tmp13_, _tmp15_) == 0;
#line 517 "name-details.c"
	} else {
#line 182 "/run/build/folks/folks/name-details.vala"
		_tmp1_ = FALSE;
#line 521 "name-details.c"
	}
#line 182 "/run/build/folks/folks/name-details.vala"
	if (_tmp1_) {
#line 525 "name-details.c"
		const gchar* _tmp16_;
		const gchar* _tmp17_;
		const gchar* _tmp18_;
#line 186 "/run/build/folks/folks/name-details.vala"
		_tmp16_ = self->priv->_suffixes;
#line 186 "/run/build/folks/folks/name-details.vala"
		_tmp17_ = folks_structured_name_get_suffixes (other);
#line 186 "/run/build/folks/folks/name-details.vala"
		_tmp18_ = _tmp17_;
#line 186 "/run/build/folks/folks/name-details.vala"
		_tmp0_ = g_strcmp0 (_tmp16_, _tmp18_) == 0;
#line 537 "name-details.c"
	} else {
#line 182 "/run/build/folks/folks/name-details.vala"
		_tmp0_ = FALSE;
#line 541 "name-details.c"
	}
#line 182 "/run/build/folks/folks/name-details.vala"
	result = _tmp0_;
#line 182 "/run/build/folks/folks/name-details.vala"
	return result;
#line 547 "name-details.c"
}


static gboolean
string_get_next_char (const gchar* self,
                      gint* index,
                      gunichar* c)
{
	gunichar _vala_c = 0U;
	gboolean result = FALSE;
	gunichar _tmp0_;
#line 1199 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, FALSE);
#line 1200 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_vala_c = g_utf8_get_char (((gchar*) self) + (*index));
#line 1201 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = _vala_c;
#line 1201 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (_tmp0_ != ((gunichar) 0)) {
#line 567 "name-details.c"
		gchar* _tmp1_;
#line 1202 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp1_ = g_utf8_next_char (((gchar*) self) + (*index));
#line 1202 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		*index = (gint) (_tmp1_ - ((gchar*) self));
#line 1203 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = TRUE;
#line 1203 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		if (c) {
#line 1203 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			*c = _vala_c;
#line 579 "name-details.c"
		}
#line 1203 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 583 "name-details.c"
	} else {
#line 1205 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = FALSE;
#line 1205 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		if (c) {
#line 1205 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
			*c = _vala_c;
#line 591 "name-details.c"
		}
#line 1205 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 595 "name-details.c"
	}
#line 1199 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (c) {
#line 1199 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		*c = _vala_c;
#line 601 "name-details.c"
	}
}


static gchar*
_folks_structured_name_extract_initials (FolksStructuredName* self,
                                         const gchar* names)
{
	gchar* result = NULL;
	GString* output = NULL;
	GString* _tmp0_;
	gboolean at_start_of_word = FALSE;
	gint index = 0;
	gunichar c = 0U;
	GString* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
#line 189 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 189 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (names != NULL, NULL);
#line 197 "/run/build/folks/folks/name-details.vala"
	_tmp0_ = g_string_new ("");
#line 197 "/run/build/folks/folks/name-details.vala"
	output = _tmp0_;
#line 198 "/run/build/folks/folks/name-details.vala"
	at_start_of_word = TRUE;
#line 199 "/run/build/folks/folks/name-details.vala"
	index = 0;
#line 202 "/run/build/folks/folks/name-details.vala"
	while (TRUE) {
#line 633 "name-details.c"
		gunichar _tmp1_ = 0U;
		gboolean _tmp2_;
		gboolean _tmp3_ = FALSE;
		gunichar _tmp4_;
#line 202 "/run/build/folks/folks/name-details.vala"
		_tmp2_ = string_get_next_char (names, &index, &_tmp1_);
#line 202 "/run/build/folks/folks/name-details.vala"
		c = _tmp1_;
#line 202 "/run/build/folks/folks/name-details.vala"
		if (!(_tmp2_ == TRUE)) {
#line 202 "/run/build/folks/folks/name-details.vala"
			break;
#line 646 "name-details.c"
		}
#line 206 "/run/build/folks/folks/name-details.vala"
		_tmp4_ = c;
#line 206 "/run/build/folks/folks/name-details.vala"
		if (g_unichar_isspace (_tmp4_)) {
#line 206 "/run/build/folks/folks/name-details.vala"
			_tmp3_ = TRUE;
#line 654 "name-details.c"
		} else {
			gunichar _tmp5_;
#line 206 "/run/build/folks/folks/name-details.vala"
			_tmp5_ = c;
#line 206 "/run/build/folks/folks/name-details.vala"
			_tmp3_ = _tmp5_ == ((gunichar) '-');
#line 661 "name-details.c"
		}
#line 206 "/run/build/folks/folks/name-details.vala"
		if (_tmp3_) {
#line 208 "/run/build/folks/folks/name-details.vala"
			at_start_of_word = TRUE;
#line 667 "name-details.c"
		} else {
			gboolean _tmp6_;
#line 210 "/run/build/folks/folks/name-details.vala"
			_tmp6_ = at_start_of_word;
#line 210 "/run/build/folks/folks/name-details.vala"
			if (_tmp6_) {
#line 674 "name-details.c"
				GString* _tmp7_;
				gunichar _tmp8_;
#line 212 "/run/build/folks/folks/name-details.vala"
				_tmp7_ = output;
#line 212 "/run/build/folks/folks/name-details.vala"
				_tmp8_ = c;
#line 212 "/run/build/folks/folks/name-details.vala"
				g_string_append_unichar (_tmp7_, _tmp8_);
#line 213 "/run/build/folks/folks/name-details.vala"
				at_start_of_word = FALSE;
#line 685 "name-details.c"
			}
		}
	}
#line 217 "/run/build/folks/folks/name-details.vala"
	_tmp9_ = output;
#line 217 "/run/build/folks/folks/name-details.vala"
	_tmp10_ = _tmp9_->str;
#line 217 "/run/build/folks/folks/name-details.vala"
	_tmp11_ = g_strdup (_tmp10_);
#line 217 "/run/build/folks/folks/name-details.vala"
	result = _tmp11_;
#line 217 "/run/build/folks/folks/name-details.vala"
	_g_string_free0 (output);
#line 217 "/run/build/folks/folks/name-details.vala"
	return result;
#line 701 "name-details.c"
}


/**
   * Formatted version of the structured name.
   *
   * @return name formatted according to the current locale
   * @since 0.4.0
   */
gchar*
folks_structured_name_to_string (FolksStructuredName* self)
{
	gchar* result = NULL;
	gchar* name_fmt = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
#line 226 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 268 "/run/build/folks/folks/name-details.vala"
	_tmp0_ = g_strdup (_ ("%g%t%m%t%f"));
#line 268 "/run/build/folks/folks/name-details.vala"
	name_fmt = _tmp0_;
#line 270 "/run/build/folks/folks/name-details.vala"
	_tmp1_ = folks_structured_name_to_string_with_format (self, name_fmt);
#line 270 "/run/build/folks/folks/name-details.vala"
	result = _tmp1_;
#line 270 "/run/build/folks/folks/name-details.vala"
	_g_free0 (name_fmt);
#line 270 "/run/build/folks/folks/name-details.vala"
	return result;
#line 732 "name-details.c"
}


/**
   * Formatted version of the structured name.
   *
   * This allows a custom format string to be specified, using the placeholders
   * described on [[http://lh.2xlibre.net/values/name_fmt/]]. This ``name_fmt``
   * must almost always be translated to the current locale. (Ideally it would
   * be translated to the locale of the persona whose name is being formatted,
   * but such locale information isn’t available.)
   *
   * @param name_fmt format string for the name
   * @return name formatted according to the given format
   * @since 0.9.7
   */
gchar*
folks_structured_name_to_string_with_format (FolksStructuredName* self,
                                             const gchar* name_fmt)
{
	gchar* result = NULL;
	GString* output = NULL;
	GString* _tmp0_;
	gboolean in_field_descriptor = FALSE;
	gboolean field_descriptor_romanised = FALSE;
	gboolean field_descriptor_empty = FALSE;
	gint index = 0;
	gunichar c = 0U;
	GString* _tmp49_;
	const gchar* _tmp50_;
	gchar* _tmp51_;
#line 286 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 286 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (name_fmt != NULL, NULL);
#line 288 "/run/build/folks/folks/name-details.vala"
	_tmp0_ = g_string_new ("");
#line 288 "/run/build/folks/folks/name-details.vala"
	output = _tmp0_;
#line 289 "/run/build/folks/folks/name-details.vala"
	in_field_descriptor = FALSE;
#line 290 "/run/build/folks/folks/name-details.vala"
	field_descriptor_romanised = FALSE;
#line 291 "/run/build/folks/folks/name-details.vala"
	field_descriptor_empty = TRUE;
#line 292 "/run/build/folks/folks/name-details.vala"
	index = 0;
#line 295 "/run/build/folks/folks/name-details.vala"
	while (TRUE) {
#line 782 "name-details.c"
		gunichar _tmp1_ = 0U;
		gboolean _tmp2_;
		gunichar _tmp3_;
		gboolean _tmp6_;
#line 295 "/run/build/folks/folks/name-details.vala"
		_tmp2_ = string_get_next_char (name_fmt, &index, &_tmp1_);
#line 295 "/run/build/folks/folks/name-details.vala"
		c = _tmp1_;
#line 295 "/run/build/folks/folks/name-details.vala"
		if (!(_tmp2_ == TRUE)) {
#line 295 "/run/build/folks/folks/name-details.vala"
			break;
#line 795 "name-details.c"
		}
#line 298 "/run/build/folks/folks/name-details.vala"
		_tmp3_ = c;
#line 298 "/run/build/folks/folks/name-details.vala"
		if (_tmp3_ == ((gunichar) '%')) {
#line 801 "name-details.c"
			gboolean _tmp4_;
			gboolean _tmp5_;
#line 300 "/run/build/folks/folks/name-details.vala"
			_tmp4_ = in_field_descriptor;
#line 300 "/run/build/folks/folks/name-details.vala"
			in_field_descriptor = !_tmp4_;
#line 304 "/run/build/folks/folks/name-details.vala"
			_tmp5_ = in_field_descriptor;
#line 304 "/run/build/folks/folks/name-details.vala"
			if (_tmp5_) {
#line 306 "/run/build/folks/folks/name-details.vala"
				field_descriptor_romanised = FALSE;
#line 307 "/run/build/folks/folks/name-details.vala"
				continue;
#line 816 "name-details.c"
			}
		}
#line 311 "/run/build/folks/folks/name-details.vala"
		_tmp6_ = in_field_descriptor;
#line 311 "/run/build/folks/folks/name-details.vala"
		if (_tmp6_) {
#line 823 "name-details.c"
			gunichar _tmp7_;
			gchar* val = NULL;
			gchar* _tmp8_;
			gunichar _tmp9_;
			GString* _tmp44_;
			const gchar* _tmp45_;
			const gchar* _tmp46_;
#line 314 "/run/build/folks/folks/name-details.vala"
			_tmp7_ = c;
#line 314 "/run/build/folks/folks/name-details.vala"
			if (_tmp7_ == ((gunichar) 'R')) {
#line 317 "/run/build/folks/folks/name-details.vala"
				field_descriptor_romanised = TRUE;
#line 318 "/run/build/folks/folks/name-details.vala"
				continue;
#line 839 "name-details.c"
			}
#line 321 "/run/build/folks/folks/name-details.vala"
			_tmp8_ = g_strdup ("");
#line 321 "/run/build/folks/folks/name-details.vala"
			val = _tmp8_;
#line 324 "/run/build/folks/folks/name-details.vala"
			_tmp9_ = c;
#line 324 "/run/build/folks/folks/name-details.vala"
			if (_tmp9_ == ((gunichar) 'f')) {
#line 849 "name-details.c"
				const gchar* _tmp10_;
				gchar* _tmp11_;
#line 326 "/run/build/folks/folks/name-details.vala"
				_tmp10_ = self->priv->_family_name;
#line 326 "/run/build/folks/folks/name-details.vala"
				_tmp11_ = g_strdup (_tmp10_);
#line 326 "/run/build/folks/folks/name-details.vala"
				_g_free0 (val);
#line 326 "/run/build/folks/folks/name-details.vala"
				val = _tmp11_;
#line 860 "name-details.c"
			} else {
				gunichar _tmp12_;
#line 328 "/run/build/folks/folks/name-details.vala"
				_tmp12_ = c;
#line 328 "/run/build/folks/folks/name-details.vala"
				if (_tmp12_ == ((gunichar) 'F')) {
#line 867 "name-details.c"
					const gchar* _tmp13_;
					gchar* _tmp14_;
#line 330 "/run/build/folks/folks/name-details.vala"
					_tmp13_ = self->priv->_family_name;
#line 330 "/run/build/folks/folks/name-details.vala"
					_tmp14_ = g_utf8_strup (_tmp13_, (gssize) -1);
#line 330 "/run/build/folks/folks/name-details.vala"
					_g_free0 (val);
#line 330 "/run/build/folks/folks/name-details.vala"
					val = _tmp14_;
#line 878 "name-details.c"
				} else {
					gunichar _tmp15_;
#line 332 "/run/build/folks/folks/name-details.vala"
					_tmp15_ = c;
#line 332 "/run/build/folks/folks/name-details.vala"
					if (_tmp15_ == ((gunichar) 'g')) {
#line 885 "name-details.c"
						const gchar* _tmp16_;
						gchar* _tmp17_;
#line 334 "/run/build/folks/folks/name-details.vala"
						_tmp16_ = self->priv->_given_name;
#line 334 "/run/build/folks/folks/name-details.vala"
						_tmp17_ = g_strdup (_tmp16_);
#line 334 "/run/build/folks/folks/name-details.vala"
						_g_free0 (val);
#line 334 "/run/build/folks/folks/name-details.vala"
						val = _tmp17_;
#line 896 "name-details.c"
					} else {
						gunichar _tmp18_;
#line 336 "/run/build/folks/folks/name-details.vala"
						_tmp18_ = c;
#line 336 "/run/build/folks/folks/name-details.vala"
						if (_tmp18_ == ((gunichar) 'G')) {
#line 903 "name-details.c"
							const gchar* _tmp19_;
							gchar* _tmp20_;
#line 338 "/run/build/folks/folks/name-details.vala"
							_tmp19_ = self->priv->_given_name;
#line 338 "/run/build/folks/folks/name-details.vala"
							_tmp20_ = _folks_structured_name_extract_initials (self, _tmp19_);
#line 338 "/run/build/folks/folks/name-details.vala"
							_g_free0 (val);
#line 338 "/run/build/folks/folks/name-details.vala"
							val = _tmp20_;
#line 914 "name-details.c"
						} else {
							gunichar _tmp21_;
#line 340 "/run/build/folks/folks/name-details.vala"
							_tmp21_ = c;
#line 340 "/run/build/folks/folks/name-details.vala"
							if (_tmp21_ == ((gunichar) 'm')) {
#line 921 "name-details.c"
								const gchar* _tmp22_;
								gchar* _tmp23_;
#line 342 "/run/build/folks/folks/name-details.vala"
								_tmp22_ = self->priv->_additional_names;
#line 342 "/run/build/folks/folks/name-details.vala"
								_tmp23_ = g_strdup (_tmp22_);
#line 342 "/run/build/folks/folks/name-details.vala"
								_g_free0 (val);
#line 342 "/run/build/folks/folks/name-details.vala"
								val = _tmp23_;
#line 932 "name-details.c"
							} else {
								gunichar _tmp24_;
#line 344 "/run/build/folks/folks/name-details.vala"
								_tmp24_ = c;
#line 344 "/run/build/folks/folks/name-details.vala"
								if (_tmp24_ == ((gunichar) 'M')) {
#line 939 "name-details.c"
									const gchar* _tmp25_;
									gchar* _tmp26_;
#line 346 "/run/build/folks/folks/name-details.vala"
									_tmp25_ = self->priv->_additional_names;
#line 346 "/run/build/folks/folks/name-details.vala"
									_tmp26_ = _folks_structured_name_extract_initials (self, _tmp25_);
#line 346 "/run/build/folks/folks/name-details.vala"
									_g_free0 (val);
#line 346 "/run/build/folks/folks/name-details.vala"
									val = _tmp26_;
#line 950 "name-details.c"
								} else {
									gboolean _tmp27_ = FALSE;
									gboolean _tmp28_ = FALSE;
									gunichar _tmp29_;
#line 348 "/run/build/folks/folks/name-details.vala"
									_tmp29_ = c;
#line 348 "/run/build/folks/folks/name-details.vala"
									if (_tmp29_ == ((gunichar) 's')) {
#line 348 "/run/build/folks/folks/name-details.vala"
										_tmp28_ = TRUE;
#line 961 "name-details.c"
									} else {
										gunichar _tmp30_;
#line 348 "/run/build/folks/folks/name-details.vala"
										_tmp30_ = c;
#line 348 "/run/build/folks/folks/name-details.vala"
										_tmp28_ = _tmp30_ == ((gunichar) 'S');
#line 968 "name-details.c"
									}
#line 348 "/run/build/folks/folks/name-details.vala"
									if (_tmp28_) {
#line 348 "/run/build/folks/folks/name-details.vala"
										_tmp27_ = TRUE;
#line 974 "name-details.c"
									} else {
										gunichar _tmp31_;
#line 348 "/run/build/folks/folks/name-details.vala"
										_tmp31_ = c;
#line 348 "/run/build/folks/folks/name-details.vala"
										_tmp27_ = _tmp31_ == ((gunichar) 'd');
#line 981 "name-details.c"
									}
#line 348 "/run/build/folks/folks/name-details.vala"
									if (_tmp27_) {
#line 985 "name-details.c"
										const gchar* _tmp32_;
										gchar* _tmp33_;
#line 351 "/run/build/folks/folks/name-details.vala"
										_tmp32_ = self->priv->_prefixes;
#line 351 "/run/build/folks/folks/name-details.vala"
										_tmp33_ = g_strdup (_tmp32_);
#line 351 "/run/build/folks/folks/name-details.vala"
										_g_free0 (val);
#line 351 "/run/build/folks/folks/name-details.vala"
										val = _tmp33_;
#line 996 "name-details.c"
									} else {
										gunichar _tmp34_;
#line 353 "/run/build/folks/folks/name-details.vala"
										_tmp34_ = c;
#line 353 "/run/build/folks/folks/name-details.vala"
										if (_tmp34_ == ((gunichar) 't')) {
#line 1003 "name-details.c"
											const gchar* _tmp35_ = NULL;
											gboolean _tmp36_;
											gchar* _tmp37_;
#line 355 "/run/build/folks/folks/name-details.vala"
											_tmp36_ = field_descriptor_empty;
#line 355 "/run/build/folks/folks/name-details.vala"
											if (_tmp36_ == FALSE) {
#line 355 "/run/build/folks/folks/name-details.vala"
												_tmp35_ = " ";
#line 1013 "name-details.c"
											} else {
#line 355 "/run/build/folks/folks/name-details.vala"
												_tmp35_ = "";
#line 1017 "name-details.c"
											}
#line 355 "/run/build/folks/folks/name-details.vala"
											_tmp37_ = g_strdup (_tmp35_);
#line 355 "/run/build/folks/folks/name-details.vala"
											_g_free0 (val);
#line 355 "/run/build/folks/folks/name-details.vala"
											val = _tmp37_;
#line 1025 "name-details.c"
										} else {
											gboolean _tmp38_ = FALSE;
											gboolean _tmp39_ = FALSE;
											gunichar _tmp40_;
#line 357 "/run/build/folks/folks/name-details.vala"
											_tmp40_ = c;
#line 357 "/run/build/folks/folks/name-details.vala"
											if (_tmp40_ == ((gunichar) 'l')) {
#line 357 "/run/build/folks/folks/name-details.vala"
												_tmp39_ = TRUE;
#line 1036 "name-details.c"
											} else {
												gunichar _tmp41_;
#line 357 "/run/build/folks/folks/name-details.vala"
												_tmp41_ = c;
#line 357 "/run/build/folks/folks/name-details.vala"
												_tmp39_ = _tmp41_ == ((gunichar) 'o');
#line 1043 "name-details.c"
											}
#line 357 "/run/build/folks/folks/name-details.vala"
											if (_tmp39_) {
#line 357 "/run/build/folks/folks/name-details.vala"
												_tmp38_ = TRUE;
#line 1049 "name-details.c"
											} else {
												gunichar _tmp42_;
#line 357 "/run/build/folks/folks/name-details.vala"
												_tmp42_ = c;
#line 357 "/run/build/folks/folks/name-details.vala"
												_tmp38_ = _tmp42_ == ((gunichar) 'p');
#line 1056 "name-details.c"
											}
#line 357 "/run/build/folks/folks/name-details.vala"
											if (_tmp38_) {
#line 1060 "name-details.c"
												gchar* _tmp43_;
#line 360 "/run/build/folks/folks/name-details.vala"
												_tmp43_ = g_strdup ("");
#line 360 "/run/build/folks/folks/name-details.vala"
												_g_free0 (val);
#line 360 "/run/build/folks/folks/name-details.vala"
												val = _tmp43_;
#line 1068 "name-details.c"
											}
										}
									}
								}
							}
						}
					}
				}
			}
#line 364 "/run/build/folks/folks/name-details.vala"
			_tmp44_ = output;
#line 364 "/run/build/folks/folks/name-details.vala"
			_tmp45_ = val;
#line 364 "/run/build/folks/folks/name-details.vala"
			g_string_append (_tmp44_, _tmp45_);
#line 365 "/run/build/folks/folks/name-details.vala"
			in_field_descriptor = FALSE;
#line 366 "/run/build/folks/folks/name-details.vala"
			_tmp46_ = val;
#line 366 "/run/build/folks/folks/name-details.vala"
			field_descriptor_empty = g_strcmp0 (_tmp46_, "") == 0;
#line 311 "/run/build/folks/folks/name-details.vala"
			_g_free0 (val);
#line 1092 "name-details.c"
		} else {
			GString* _tmp47_;
			gunichar _tmp48_;
#line 371 "/run/build/folks/folks/name-details.vala"
			_tmp47_ = output;
#line 371 "/run/build/folks/folks/name-details.vala"
			_tmp48_ = c;
#line 371 "/run/build/folks/folks/name-details.vala"
			g_string_append_unichar (_tmp47_, _tmp48_);
#line 1102 "name-details.c"
		}
	}
#line 375 "/run/build/folks/folks/name-details.vala"
	_tmp49_ = output;
#line 375 "/run/build/folks/folks/name-details.vala"
	_tmp50_ = _tmp49_->str;
#line 375 "/run/build/folks/folks/name-details.vala"
	_tmp51_ = g_strdup (_tmp50_);
#line 375 "/run/build/folks/folks/name-details.vala"
	result = _tmp51_;
#line 375 "/run/build/folks/folks/name-details.vala"
	_g_string_free0 (output);
#line 375 "/run/build/folks/folks/name-details.vala"
	return result;
#line 1117 "name-details.c"
}


const gchar*
folks_structured_name_get_family_name (FolksStructuredName* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 48 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 48 "/run/build/folks/folks/name-details.vala"
	_tmp0_ = self->priv->_family_name;
#line 48 "/run/build/folks/folks/name-details.vala"
	result = _tmp0_;
#line 48 "/run/build/folks/folks/name-details.vala"
	return result;
#line 1134 "name-details.c"
}


void
folks_structured_name_set_family_name (FolksStructuredName* self,
                                       const gchar* value)
{
	const gchar* _tmp0_ = NULL;
	gchar* _tmp1_;
#line 49 "/run/build/folks/folks/name-details.vala"
	g_return_if_fail (self != NULL);
#line 49 "/run/build/folks/folks/name-details.vala"
	if (value != NULL) {
#line 49 "/run/build/folks/folks/name-details.vala"
		_tmp0_ = value;
#line 1150 "name-details.c"
	} else {
#line 49 "/run/build/folks/folks/name-details.vala"
		_tmp0_ = "";
#line 1154 "name-details.c"
	}
#line 49 "/run/build/folks/folks/name-details.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 49 "/run/build/folks/folks/name-details.vala"
	_g_free0 (self->priv->_family_name);
#line 49 "/run/build/folks/folks/name-details.vala"
	self->priv->_family_name = _tmp1_;
#line 49 "/run/build/folks/folks/name-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_structured_name_properties[FOLKS_STRUCTURED_NAME_FAMILY_NAME_PROPERTY]);
#line 1164 "name-details.c"
}


const gchar*
folks_structured_name_get_given_name (FolksStructuredName* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 62 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 62 "/run/build/folks/folks/name-details.vala"
	_tmp0_ = self->priv->_given_name;
#line 62 "/run/build/folks/folks/name-details.vala"
	result = _tmp0_;
#line 62 "/run/build/folks/folks/name-details.vala"
	return result;
#line 1181 "name-details.c"
}


void
folks_structured_name_set_given_name (FolksStructuredName* self,
                                      const gchar* value)
{
	const gchar* _tmp0_ = NULL;
	gchar* _tmp1_;
#line 63 "/run/build/folks/folks/name-details.vala"
	g_return_if_fail (self != NULL);
#line 63 "/run/build/folks/folks/name-details.vala"
	if (value != NULL) {
#line 63 "/run/build/folks/folks/name-details.vala"
		_tmp0_ = value;
#line 1197 "name-details.c"
	} else {
#line 63 "/run/build/folks/folks/name-details.vala"
		_tmp0_ = "";
#line 1201 "name-details.c"
	}
#line 63 "/run/build/folks/folks/name-details.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 63 "/run/build/folks/folks/name-details.vala"
	_g_free0 (self->priv->_given_name);
#line 63 "/run/build/folks/folks/name-details.vala"
	self->priv->_given_name = _tmp1_;
#line 63 "/run/build/folks/folks/name-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_structured_name_properties[FOLKS_STRUCTURED_NAME_GIVEN_NAME_PROPERTY]);
#line 1211 "name-details.c"
}


const gchar*
folks_structured_name_get_additional_names (FolksStructuredName* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 77 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 77 "/run/build/folks/folks/name-details.vala"
	_tmp0_ = self->priv->_additional_names;
#line 77 "/run/build/folks/folks/name-details.vala"
	result = _tmp0_;
#line 77 "/run/build/folks/folks/name-details.vala"
	return result;
#line 1228 "name-details.c"
}


void
folks_structured_name_set_additional_names (FolksStructuredName* self,
                                            const gchar* value)
{
	const gchar* _tmp0_ = NULL;
	gchar* _tmp1_;
#line 78 "/run/build/folks/folks/name-details.vala"
	g_return_if_fail (self != NULL);
#line 78 "/run/build/folks/folks/name-details.vala"
	if (value != NULL) {
#line 78 "/run/build/folks/folks/name-details.vala"
		_tmp0_ = value;
#line 1244 "name-details.c"
	} else {
#line 78 "/run/build/folks/folks/name-details.vala"
		_tmp0_ = "";
#line 1248 "name-details.c"
	}
#line 78 "/run/build/folks/folks/name-details.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 78 "/run/build/folks/folks/name-details.vala"
	_g_free0 (self->priv->_additional_names);
#line 78 "/run/build/folks/folks/name-details.vala"
	self->priv->_additional_names = _tmp1_;
#line 78 "/run/build/folks/folks/name-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_structured_name_properties[FOLKS_STRUCTURED_NAME_ADDITIONAL_NAMES_PROPERTY]);
#line 1258 "name-details.c"
}


const gchar*
folks_structured_name_get_prefixes (FolksStructuredName* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 92 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 92 "/run/build/folks/folks/name-details.vala"
	_tmp0_ = self->priv->_prefixes;
#line 92 "/run/build/folks/folks/name-details.vala"
	result = _tmp0_;
#line 92 "/run/build/folks/folks/name-details.vala"
	return result;
#line 1275 "name-details.c"
}


void
folks_structured_name_set_prefixes (FolksStructuredName* self,
                                    const gchar* value)
{
	const gchar* _tmp0_ = NULL;
	gchar* _tmp1_;
#line 93 "/run/build/folks/folks/name-details.vala"
	g_return_if_fail (self != NULL);
#line 93 "/run/build/folks/folks/name-details.vala"
	if (value != NULL) {
#line 93 "/run/build/folks/folks/name-details.vala"
		_tmp0_ = value;
#line 1291 "name-details.c"
	} else {
#line 93 "/run/build/folks/folks/name-details.vala"
		_tmp0_ = "";
#line 1295 "name-details.c"
	}
#line 93 "/run/build/folks/folks/name-details.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 93 "/run/build/folks/folks/name-details.vala"
	_g_free0 (self->priv->_prefixes);
#line 93 "/run/build/folks/folks/name-details.vala"
	self->priv->_prefixes = _tmp1_;
#line 93 "/run/build/folks/folks/name-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_structured_name_properties[FOLKS_STRUCTURED_NAME_PREFIXES_PROPERTY]);
#line 1305 "name-details.c"
}


const gchar*
folks_structured_name_get_suffixes (FolksStructuredName* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 106 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 106 "/run/build/folks/folks/name-details.vala"
	_tmp0_ = self->priv->_suffixes;
#line 106 "/run/build/folks/folks/name-details.vala"
	result = _tmp0_;
#line 106 "/run/build/folks/folks/name-details.vala"
	return result;
#line 1322 "name-details.c"
}


void
folks_structured_name_set_suffixes (FolksStructuredName* self,
                                    const gchar* value)
{
	const gchar* _tmp0_ = NULL;
	gchar* _tmp1_;
#line 107 "/run/build/folks/folks/name-details.vala"
	g_return_if_fail (self != NULL);
#line 107 "/run/build/folks/folks/name-details.vala"
	if (value != NULL) {
#line 107 "/run/build/folks/folks/name-details.vala"
		_tmp0_ = value;
#line 1338 "name-details.c"
	} else {
#line 107 "/run/build/folks/folks/name-details.vala"
		_tmp0_ = "";
#line 1342 "name-details.c"
	}
#line 107 "/run/build/folks/folks/name-details.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 107 "/run/build/folks/folks/name-details.vala"
	_g_free0 (self->priv->_suffixes);
#line 107 "/run/build/folks/folks/name-details.vala"
	self->priv->_suffixes = _tmp1_;
#line 107 "/run/build/folks/folks/name-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_structured_name_properties[FOLKS_STRUCTURED_NAME_SUFFIXES_PROPERTY]);
#line 1352 "name-details.c"
}


static void
folks_structured_name_class_init (FolksStructuredNameClass * klass)
{
#line 36 "/run/build/folks/folks/name-details.vala"
	folks_structured_name_parent_class = g_type_class_peek_parent (klass);
#line 36 "/run/build/folks/folks/name-details.vala"
	g_type_class_add_private (klass, sizeof (FolksStructuredNamePrivate));
#line 36 "/run/build/folks/folks/name-details.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_folks_structured_name_get_property;
#line 36 "/run/build/folks/folks/name-details.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_folks_structured_name_set_property;
#line 36 "/run/build/folks/folks/name-details.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_structured_name_finalize;
#line 1369 "name-details.c"
	/**
	   * The family name.
	   *
	   * The family name (also known as surname or last name) of a contact.
	   *
	   * @since 0.3.5
	   */
#line 36 "/run/build/folks/folks/name-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_STRUCTURED_NAME_FAMILY_NAME_PROPERTY, folks_structured_name_properties[FOLKS_STRUCTURED_NAME_FAMILY_NAME_PROPERTY] = g_param_spec_string ("family-name", "family-name", "family-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
#line 1379 "name-details.c"
	/**
	   * The given name.
	   *
	   * The family name (also known as first name) of a contact.
	   *
	   * @since 0.3.5
	   */
#line 36 "/run/build/folks/folks/name-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_STRUCTURED_NAME_GIVEN_NAME_PROPERTY, folks_structured_name_properties[FOLKS_STRUCTURED_NAME_GIVEN_NAME_PROPERTY] = g_param_spec_string ("given-name", "given-name", "given-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
#line 1389 "name-details.c"
	/**
	   * Additional names.
	   *
	   * The additional names of a contact, for instance the contact's
	   * middle name.
	   *
	   * @since 0.3.5
	   */
#line 36 "/run/build/folks/folks/name-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_STRUCTURED_NAME_ADDITIONAL_NAMES_PROPERTY, folks_structured_name_properties[FOLKS_STRUCTURED_NAME_ADDITIONAL_NAMES_PROPERTY] = g_param_spec_string ("additional-names", "additional-names", "additional-names", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
#line 1400 "name-details.c"
	/**
	   * The prefixes of a name.
	   *
	   * The prefixes used in front of the name (for instance "Mr", "Mrs",
	   * "Doctor" or honorific titles).
	   *
	   * @since 0.3.5
	   */
#line 36 "/run/build/folks/folks/name-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_STRUCTURED_NAME_PREFIXES_PROPERTY, folks_structured_name_properties[FOLKS_STRUCTURED_NAME_PREFIXES_PROPERTY] = g_param_spec_string ("prefixes", "prefixes", "prefixes", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
#line 1411 "name-details.c"
	/**
	   * The suffixes of a name.
	   *
	   * The suffixes used after a name (for instance "PhD" or "Junior").
	   *
	   * @since 0.3.5
	   */
#line 36 "/run/build/folks/folks/name-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_STRUCTURED_NAME_SUFFIXES_PROPERTY, folks_structured_name_properties[FOLKS_STRUCTURED_NAME_SUFFIXES_PROPERTY] = g_param_spec_string ("suffixes", "suffixes", "suffixes", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
#line 1421 "name-details.c"
}


static void
folks_structured_name_instance_init (FolksStructuredName * self)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
#line 36 "/run/build/folks/folks/name-details.vala"
	self->priv = FOLKS_STRUCTURED_NAME_GET_PRIVATE (self);
#line 38 "/run/build/folks/folks/name-details.vala"
	_tmp0_ = g_strdup ("");
#line 38 "/run/build/folks/folks/name-details.vala"
	self->priv->_family_name = _tmp0_;
#line 52 "/run/build/folks/folks/name-details.vala"
	_tmp1_ = g_strdup ("");
#line 52 "/run/build/folks/folks/name-details.vala"
	self->priv->_given_name = _tmp1_;
#line 66 "/run/build/folks/folks/name-details.vala"
	_tmp2_ = g_strdup ("");
#line 66 "/run/build/folks/folks/name-details.vala"
	self->priv->_additional_names = _tmp2_;
#line 81 "/run/build/folks/folks/name-details.vala"
	_tmp3_ = g_strdup ("");
#line 81 "/run/build/folks/folks/name-details.vala"
	self->priv->_prefixes = _tmp3_;
#line 96 "/run/build/folks/folks/name-details.vala"
	_tmp4_ = g_strdup ("");
#line 96 "/run/build/folks/folks/name-details.vala"
	self->priv->_suffixes = _tmp4_;
#line 1455 "name-details.c"
}


static void
folks_structured_name_finalize (GObject * obj)
{
	FolksStructuredName * self;
#line 36 "/run/build/folks/folks/name-details.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_STRUCTURED_NAME, FolksStructuredName);
#line 38 "/run/build/folks/folks/name-details.vala"
	_g_free0 (self->priv->_family_name);
#line 52 "/run/build/folks/folks/name-details.vala"
	_g_free0 (self->priv->_given_name);
#line 66 "/run/build/folks/folks/name-details.vala"
	_g_free0 (self->priv->_additional_names);
#line 81 "/run/build/folks/folks/name-details.vala"
	_g_free0 (self->priv->_prefixes);
#line 96 "/run/build/folks/folks/name-details.vala"
	_g_free0 (self->priv->_suffixes);
#line 36 "/run/build/folks/folks/name-details.vala"
	G_OBJECT_CLASS (folks_structured_name_parent_class)->finalize (obj);
#line 1477 "name-details.c"
}


/**
 * Structured name representation for human names.
 *
 * Represents a full name split in its constituent parts (given name,
 * family name, etc.). This structure corresponds to the "N" field in
 * vCards. The parts of the name are never ``null``: an empty string
 * indicates that a property is not set.
 *
 * @since 0.3.5
 */
GType
folks_structured_name_get_type (void)
{
	static volatile gsize folks_structured_name_type_id__volatile = 0;
	if (g_once_init_enter (&folks_structured_name_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksStructuredNameClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_structured_name_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksStructuredName), 0, (GInstanceInitFunc) folks_structured_name_instance_init, NULL };
		GType folks_structured_name_type_id;
		folks_structured_name_type_id = g_type_register_static (G_TYPE_OBJECT, "FolksStructuredName", &g_define_type_info, 0);
		g_once_init_leave (&folks_structured_name_type_id__volatile, folks_structured_name_type_id);
	}
	return folks_structured_name_type_id__volatile;
}


static void
_vala_folks_structured_name_get_property (GObject * object,
                                          guint property_id,
                                          GValue * value,
                                          GParamSpec * pspec)
{
	FolksStructuredName * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_STRUCTURED_NAME, FolksStructuredName);
#line 36 "/run/build/folks/folks/name-details.vala"
	switch (property_id) {
#line 36 "/run/build/folks/folks/name-details.vala"
		case FOLKS_STRUCTURED_NAME_FAMILY_NAME_PROPERTY:
#line 36 "/run/build/folks/folks/name-details.vala"
		g_value_set_string (value, folks_structured_name_get_family_name (self));
#line 36 "/run/build/folks/folks/name-details.vala"
		break;
#line 36 "/run/build/folks/folks/name-details.vala"
		case FOLKS_STRUCTURED_NAME_GIVEN_NAME_PROPERTY:
#line 36 "/run/build/folks/folks/name-details.vala"
		g_value_set_string (value, folks_structured_name_get_given_name (self));
#line 36 "/run/build/folks/folks/name-details.vala"
		break;
#line 36 "/run/build/folks/folks/name-details.vala"
		case FOLKS_STRUCTURED_NAME_ADDITIONAL_NAMES_PROPERTY:
#line 36 "/run/build/folks/folks/name-details.vala"
		g_value_set_string (value, folks_structured_name_get_additional_names (self));
#line 36 "/run/build/folks/folks/name-details.vala"
		break;
#line 36 "/run/build/folks/folks/name-details.vala"
		case FOLKS_STRUCTURED_NAME_PREFIXES_PROPERTY:
#line 36 "/run/build/folks/folks/name-details.vala"
		g_value_set_string (value, folks_structured_name_get_prefixes (self));
#line 36 "/run/build/folks/folks/name-details.vala"
		break;
#line 36 "/run/build/folks/folks/name-details.vala"
		case FOLKS_STRUCTURED_NAME_SUFFIXES_PROPERTY:
#line 36 "/run/build/folks/folks/name-details.vala"
		g_value_set_string (value, folks_structured_name_get_suffixes (self));
#line 36 "/run/build/folks/folks/name-details.vala"
		break;
#line 1545 "name-details.c"
		default:
#line 36 "/run/build/folks/folks/name-details.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 36 "/run/build/folks/folks/name-details.vala"
		break;
#line 1551 "name-details.c"
	}
}


static void
_vala_folks_structured_name_set_property (GObject * object,
                                          guint property_id,
                                          const GValue * value,
                                          GParamSpec * pspec)
{
	FolksStructuredName * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_STRUCTURED_NAME, FolksStructuredName);
#line 36 "/run/build/folks/folks/name-details.vala"
	switch (property_id) {
#line 36 "/run/build/folks/folks/name-details.vala"
		case FOLKS_STRUCTURED_NAME_FAMILY_NAME_PROPERTY:
#line 36 "/run/build/folks/folks/name-details.vala"
		folks_structured_name_set_family_name (self, g_value_get_string (value));
#line 36 "/run/build/folks/folks/name-details.vala"
		break;
#line 36 "/run/build/folks/folks/name-details.vala"
		case FOLKS_STRUCTURED_NAME_GIVEN_NAME_PROPERTY:
#line 36 "/run/build/folks/folks/name-details.vala"
		folks_structured_name_set_given_name (self, g_value_get_string (value));
#line 36 "/run/build/folks/folks/name-details.vala"
		break;
#line 36 "/run/build/folks/folks/name-details.vala"
		case FOLKS_STRUCTURED_NAME_ADDITIONAL_NAMES_PROPERTY:
#line 36 "/run/build/folks/folks/name-details.vala"
		folks_structured_name_set_additional_names (self, g_value_get_string (value));
#line 36 "/run/build/folks/folks/name-details.vala"
		break;
#line 36 "/run/build/folks/folks/name-details.vala"
		case FOLKS_STRUCTURED_NAME_PREFIXES_PROPERTY:
#line 36 "/run/build/folks/folks/name-details.vala"
		folks_structured_name_set_prefixes (self, g_value_get_string (value));
#line 36 "/run/build/folks/folks/name-details.vala"
		break;
#line 36 "/run/build/folks/folks/name-details.vala"
		case FOLKS_STRUCTURED_NAME_SUFFIXES_PROPERTY:
#line 36 "/run/build/folks/folks/name-details.vala"
		folks_structured_name_set_suffixes (self, g_value_get_string (value));
#line 36 "/run/build/folks/folks/name-details.vala"
		break;
#line 1596 "name-details.c"
		default:
#line 36 "/run/build/folks/folks/name-details.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 36 "/run/build/folks/folks/name-details.vala"
		break;
#line 1602 "name-details.c"
	}
}


static void
folks_name_details_real_change_structured_name_data_free (gpointer _data)
{
	FolksNameDetailsChangeStructuredNameData* _data_;
	_data_ = _data;
#line 385 "/run/build/folks/folks/name-details.vala"
	_g_object_unref0 (_data_->name);
#line 385 "/run/build/folks/folks/name-details.vala"
	_g_object_unref0 (_data_->self);
#line 385 "/run/build/folks/folks/name-details.vala"
	g_slice_free (FolksNameDetailsChangeStructuredNameData, _data_);
#line 1618 "name-details.c"
}


static void
folks_name_details_real_change_structured_name_async_ready_wrapper (GObject *source_object,
                                                                    GAsyncResult *res,
                                                                    void *user_data)
{
	FolksNameDetailsChangeStructuredNameData* _task_data_;
#line 385 "/run/build/folks/folks/name-details.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 385 "/run/build/folks/folks/name-details.vala"
	if (_task_data_->_callback_ != NULL) {
#line 385 "/run/build/folks/folks/name-details.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 1634 "name-details.c"
	}
#line 385 "/run/build/folks/folks/name-details.vala"
	_task_data_->_task_complete_ = TRUE;
#line 1638 "name-details.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 385 "/run/build/folks/folks/name-details.vala"
	return self ? g_object_ref (self) : NULL;
#line 1647 "name-details.c"
}


static void
folks_name_details_real_change_structured_name (FolksNameDetails* self,
                                                FolksStructuredName* name,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_)
{
	FolksNameDetailsChangeStructuredNameData* _data_;
	FolksNameDetails* _tmp0_;
	FolksStructuredName* _tmp1_;
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_ = g_slice_new0 (FolksNameDetailsChangeStructuredNameData);
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_->_callback_ = _callback_;
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_name_details_real_change_structured_name_async_ready_wrapper, _user_data_);
#line 385 "/run/build/folks/folks/name-details.vala"
	if (_callback_ == NULL) {
#line 385 "/run/build/folks/folks/name-details.vala"
		_data_->_task_complete_ = TRUE;
#line 1670 "name-details.c"
	}
#line 385 "/run/build/folks/folks/name-details.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_name_details_real_change_structured_name_data_free);
#line 385 "/run/build/folks/folks/name-details.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_->self = _tmp0_;
#line 385 "/run/build/folks/folks/name-details.vala"
	_tmp1_ = _g_object_ref0 (name);
#line 385 "/run/build/folks/folks/name-details.vala"
	_g_object_unref0 (_data_->name);
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_->name = _tmp1_;
#line 385 "/run/build/folks/folks/name-details.vala"
	folks_name_details_real_change_structured_name_co (_data_);
#line 1686 "name-details.c"
}


static void
folks_name_details_real_change_structured_name_finish (FolksNameDetails* self,
                                                       GAsyncResult* _res_,
                                                       GError** error)
{
	FolksNameDetailsChangeStructuredNameData* _data_;
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 385 "/run/build/folks/folks/name-details.vala"
	if (NULL == _data_) {
#line 385 "/run/build/folks/folks/name-details.vala"
		return;
#line 1702 "name-details.c"
	}
}


/**
   * Change the contact's structured name.
   *
   * It's preferred to call this rather than setting
   * {@link NameDetails.structured_name} directly, as this method gives error
   * notification and will only return once the name has been written to the
   * relevant backing store (or the operation's failed).
   *
   * @param name the structured name (``null`` to unset it)
   * @throws PropertyError if setting the structured name failed
   * @since 0.6.2
   */
static gboolean
folks_name_details_real_change_structured_name_co (FolksNameDetailsChangeStructuredNameData* _data_)
{
#line 412 "/run/build/folks/folks/name-details.vala"
	switch (_data_->_state_) {
#line 412 "/run/build/folks/folks/name-details.vala"
		case 0:
#line 1726 "name-details.c"
		goto _state_0;
		default:
#line 412 "/run/build/folks/folks/name-details.vala"
		g_assert_not_reached ();
#line 1731 "name-details.c"
	}
	_state_0:
#line 416 "/run/build/folks/folks/name-details.vala"
	_data_->_tmp0_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_NOT_WRITEABLE, _ ("Structured name is not writeable on this contact."));
#line 416 "/run/build/folks/folks/name-details.vala"
	_data_->_inner_error_ = _data_->_tmp0_;
#line 416 "/run/build/folks/folks/name-details.vala"
	if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 416 "/run/build/folks/folks/name-details.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 416 "/run/build/folks/folks/name-details.vala"
		g_object_unref (_data_->_async_result);
#line 416 "/run/build/folks/folks/name-details.vala"
		return FALSE;
#line 1746 "name-details.c"
	} else {
#line 416 "/run/build/folks/folks/name-details.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 416 "/run/build/folks/folks/name-details.vala"
		g_clear_error (&_data_->_inner_error_);
#line 416 "/run/build/folks/folks/name-details.vala"
		g_object_unref (_data_->_async_result);
#line 416 "/run/build/folks/folks/name-details.vala"
		return FALSE;
#line 1756 "name-details.c"
	}
#line 412 "/run/build/folks/folks/name-details.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 412 "/run/build/folks/folks/name-details.vala"
	if (_data_->_state_ != 0) {
#line 412 "/run/build/folks/folks/name-details.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 412 "/run/build/folks/folks/name-details.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1766 "name-details.c"
		}
	}
#line 412 "/run/build/folks/folks/name-details.vala"
	g_object_unref (_data_->_async_result);
#line 412 "/run/build/folks/folks/name-details.vala"
	return FALSE;
#line 1773 "name-details.c"
}


void
folks_name_details_change_structured_name (FolksNameDetails* self,
                                           FolksStructuredName* name,
                                           GAsyncReadyCallback _callback_,
                                           gpointer _user_data_)
{
#line 385 "/run/build/folks/folks/name-details.vala"
	FOLKS_NAME_DETAILS_GET_INTERFACE (self)->change_structured_name (self, name, _callback_, _user_data_);
#line 1785 "name-details.c"
}


void
folks_name_details_change_structured_name_finish (FolksNameDetails* self,
                                                  GAsyncResult* _res_,
                                                  GError** error)
{
#line 385 "/run/build/folks/folks/name-details.vala"
	FOLKS_NAME_DETAILS_GET_INTERFACE (self)->change_structured_name_finish (self, _res_, error);
#line 1796 "name-details.c"
}


static void
folks_name_details_real_change_full_name_data_free (gpointer _data)
{
	FolksNameDetailsChangeFullNameData* _data_;
	_data_ = _data;
#line 385 "/run/build/folks/folks/name-details.vala"
	_g_free0 (_data_->full_name);
#line 385 "/run/build/folks/folks/name-details.vala"
	_g_object_unref0 (_data_->self);
#line 385 "/run/build/folks/folks/name-details.vala"
	g_slice_free (FolksNameDetailsChangeFullNameData, _data_);
#line 1811 "name-details.c"
}


static void
folks_name_details_real_change_full_name_async_ready_wrapper (GObject *source_object,
                                                              GAsyncResult *res,
                                                              void *user_data)
{
	FolksNameDetailsChangeFullNameData* _task_data_;
#line 385 "/run/build/folks/folks/name-details.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 385 "/run/build/folks/folks/name-details.vala"
	if (_task_data_->_callback_ != NULL) {
#line 385 "/run/build/folks/folks/name-details.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 1827 "name-details.c"
	}
#line 385 "/run/build/folks/folks/name-details.vala"
	_task_data_->_task_complete_ = TRUE;
#line 1831 "name-details.c"
}


static void
folks_name_details_real_change_full_name (FolksNameDetails* self,
                                          const gchar* full_name,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_)
{
	FolksNameDetailsChangeFullNameData* _data_;
	FolksNameDetails* _tmp0_;
	gchar* _tmp1_;
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_ = g_slice_new0 (FolksNameDetailsChangeFullNameData);
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_->_callback_ = _callback_;
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_name_details_real_change_full_name_async_ready_wrapper, _user_data_);
#line 385 "/run/build/folks/folks/name-details.vala"
	if (_callback_ == NULL) {
#line 385 "/run/build/folks/folks/name-details.vala"
		_data_->_task_complete_ = TRUE;
#line 1854 "name-details.c"
	}
#line 385 "/run/build/folks/folks/name-details.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_name_details_real_change_full_name_data_free);
#line 385 "/run/build/folks/folks/name-details.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_->self = _tmp0_;
#line 385 "/run/build/folks/folks/name-details.vala"
	_tmp1_ = g_strdup (full_name);
#line 385 "/run/build/folks/folks/name-details.vala"
	_g_free0 (_data_->full_name);
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_->full_name = _tmp1_;
#line 385 "/run/build/folks/folks/name-details.vala"
	folks_name_details_real_change_full_name_co (_data_);
#line 1870 "name-details.c"
}


static void
folks_name_details_real_change_full_name_finish (FolksNameDetails* self,
                                                 GAsyncResult* _res_,
                                                 GError** error)
{
	FolksNameDetailsChangeFullNameData* _data_;
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 385 "/run/build/folks/folks/name-details.vala"
	if (NULL == _data_) {
#line 385 "/run/build/folks/folks/name-details.vala"
		return;
#line 1886 "name-details.c"
	}
}


/**
   * Change the contact's full name.
   *
   * It's preferred to call this rather than setting
   * {@link NameDetails.full_name} directly, as this method gives error
   * notification and will only return once the name has been written to the
   * relevant backing store (or the operation's failed).
   *
   * @param full_name the full name (empty string to unset it)
   * @throws PropertyError if setting the full name failed
   * @since 0.6.2
   */
static gboolean
folks_name_details_real_change_full_name_co (FolksNameDetailsChangeFullNameData* _data_)
{
#line 449 "/run/build/folks/folks/name-details.vala"
	switch (_data_->_state_) {
#line 449 "/run/build/folks/folks/name-details.vala"
		case 0:
#line 1910 "name-details.c"
		goto _state_0;
		default:
#line 449 "/run/build/folks/folks/name-details.vala"
		g_assert_not_reached ();
#line 1915 "name-details.c"
	}
	_state_0:
#line 453 "/run/build/folks/folks/name-details.vala"
	_data_->_tmp0_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_NOT_WRITEABLE, _ ("Full name is not writeable on this contact."));
#line 453 "/run/build/folks/folks/name-details.vala"
	_data_->_inner_error_ = _data_->_tmp0_;
#line 453 "/run/build/folks/folks/name-details.vala"
	if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 453 "/run/build/folks/folks/name-details.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 453 "/run/build/folks/folks/name-details.vala"
		g_object_unref (_data_->_async_result);
#line 453 "/run/build/folks/folks/name-details.vala"
		return FALSE;
#line 1930 "name-details.c"
	} else {
#line 453 "/run/build/folks/folks/name-details.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 453 "/run/build/folks/folks/name-details.vala"
		g_clear_error (&_data_->_inner_error_);
#line 453 "/run/build/folks/folks/name-details.vala"
		g_object_unref (_data_->_async_result);
#line 453 "/run/build/folks/folks/name-details.vala"
		return FALSE;
#line 1940 "name-details.c"
	}
#line 449 "/run/build/folks/folks/name-details.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 449 "/run/build/folks/folks/name-details.vala"
	if (_data_->_state_ != 0) {
#line 449 "/run/build/folks/folks/name-details.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 449 "/run/build/folks/folks/name-details.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1950 "name-details.c"
		}
	}
#line 449 "/run/build/folks/folks/name-details.vala"
	g_object_unref (_data_->_async_result);
#line 449 "/run/build/folks/folks/name-details.vala"
	return FALSE;
#line 1957 "name-details.c"
}


void
folks_name_details_change_full_name (FolksNameDetails* self,
                                     const gchar* full_name,
                                     GAsyncReadyCallback _callback_,
                                     gpointer _user_data_)
{
#line 385 "/run/build/folks/folks/name-details.vala"
	FOLKS_NAME_DETAILS_GET_INTERFACE (self)->change_full_name (self, full_name, _callback_, _user_data_);
#line 1969 "name-details.c"
}


void
folks_name_details_change_full_name_finish (FolksNameDetails* self,
                                            GAsyncResult* _res_,
                                            GError** error)
{
#line 385 "/run/build/folks/folks/name-details.vala"
	FOLKS_NAME_DETAILS_GET_INTERFACE (self)->change_full_name_finish (self, _res_, error);
#line 1980 "name-details.c"
}


static void
folks_name_details_real_change_nickname_data_free (gpointer _data)
{
	FolksNameDetailsChangeNicknameData* _data_;
	_data_ = _data;
#line 385 "/run/build/folks/folks/name-details.vala"
	_g_free0 (_data_->nickname);
#line 385 "/run/build/folks/folks/name-details.vala"
	_g_object_unref0 (_data_->self);
#line 385 "/run/build/folks/folks/name-details.vala"
	g_slice_free (FolksNameDetailsChangeNicknameData, _data_);
#line 1995 "name-details.c"
}


static void
folks_name_details_real_change_nickname_async_ready_wrapper (GObject *source_object,
                                                             GAsyncResult *res,
                                                             void *user_data)
{
	FolksNameDetailsChangeNicknameData* _task_data_;
#line 385 "/run/build/folks/folks/name-details.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 385 "/run/build/folks/folks/name-details.vala"
	if (_task_data_->_callback_ != NULL) {
#line 385 "/run/build/folks/folks/name-details.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 2011 "name-details.c"
	}
#line 385 "/run/build/folks/folks/name-details.vala"
	_task_data_->_task_complete_ = TRUE;
#line 2015 "name-details.c"
}


static void
folks_name_details_real_change_nickname (FolksNameDetails* self,
                                         const gchar* nickname,
                                         GAsyncReadyCallback _callback_,
                                         gpointer _user_data_)
{
	FolksNameDetailsChangeNicknameData* _data_;
	FolksNameDetails* _tmp0_;
	gchar* _tmp1_;
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_ = g_slice_new0 (FolksNameDetailsChangeNicknameData);
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_->_callback_ = _callback_;
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_name_details_real_change_nickname_async_ready_wrapper, _user_data_);
#line 385 "/run/build/folks/folks/name-details.vala"
	if (_callback_ == NULL) {
#line 385 "/run/build/folks/folks/name-details.vala"
		_data_->_task_complete_ = TRUE;
#line 2038 "name-details.c"
	}
#line 385 "/run/build/folks/folks/name-details.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_name_details_real_change_nickname_data_free);
#line 385 "/run/build/folks/folks/name-details.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_->self = _tmp0_;
#line 385 "/run/build/folks/folks/name-details.vala"
	_tmp1_ = g_strdup (nickname);
#line 385 "/run/build/folks/folks/name-details.vala"
	_g_free0 (_data_->nickname);
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_->nickname = _tmp1_;
#line 385 "/run/build/folks/folks/name-details.vala"
	folks_name_details_real_change_nickname_co (_data_);
#line 2054 "name-details.c"
}


static void
folks_name_details_real_change_nickname_finish (FolksNameDetails* self,
                                                GAsyncResult* _res_,
                                                GError** error)
{
	FolksNameDetailsChangeNicknameData* _data_;
#line 385 "/run/build/folks/folks/name-details.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 385 "/run/build/folks/folks/name-details.vala"
	if (NULL == _data_) {
#line 385 "/run/build/folks/folks/name-details.vala"
		return;
#line 2070 "name-details.c"
	}
}


/**
   * Change the contact's nickname.
   *
   * It's preferred to call this rather than setting
   * {@link NameDetails.nickname} directly, as this method gives error
   * notification and will only return once the name has been written to the
   * relevant backing store (or the operation's failed).
   *
   * @param nickname the nickname (empty string to unset it)
   * @throws PropertyError if setting the nickname failed
   * @since 0.6.2
   */
static gboolean
folks_name_details_real_change_nickname_co (FolksNameDetailsChangeNicknameData* _data_)
{
#line 487 "/run/build/folks/folks/name-details.vala"
	switch (_data_->_state_) {
#line 487 "/run/build/folks/folks/name-details.vala"
		case 0:
#line 2094 "name-details.c"
		goto _state_0;
		default:
#line 487 "/run/build/folks/folks/name-details.vala"
		g_assert_not_reached ();
#line 2099 "name-details.c"
	}
	_state_0:
#line 491 "/run/build/folks/folks/name-details.vala"
	_data_->_tmp0_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_NOT_WRITEABLE, _ ("Nickname is not writeable on this contact."));
#line 491 "/run/build/folks/folks/name-details.vala"
	_data_->_inner_error_ = _data_->_tmp0_;
#line 491 "/run/build/folks/folks/name-details.vala"
	if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 491 "/run/build/folks/folks/name-details.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 491 "/run/build/folks/folks/name-details.vala"
		g_object_unref (_data_->_async_result);
#line 491 "/run/build/folks/folks/name-details.vala"
		return FALSE;
#line 2114 "name-details.c"
	} else {
#line 491 "/run/build/folks/folks/name-details.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 491 "/run/build/folks/folks/name-details.vala"
		g_clear_error (&_data_->_inner_error_);
#line 491 "/run/build/folks/folks/name-details.vala"
		g_object_unref (_data_->_async_result);
#line 491 "/run/build/folks/folks/name-details.vala"
		return FALSE;
#line 2124 "name-details.c"
	}
#line 487 "/run/build/folks/folks/name-details.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 487 "/run/build/folks/folks/name-details.vala"
	if (_data_->_state_ != 0) {
#line 487 "/run/build/folks/folks/name-details.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 487 "/run/build/folks/folks/name-details.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2134 "name-details.c"
		}
	}
#line 487 "/run/build/folks/folks/name-details.vala"
	g_object_unref (_data_->_async_result);
#line 487 "/run/build/folks/folks/name-details.vala"
	return FALSE;
#line 2141 "name-details.c"
}


void
folks_name_details_change_nickname (FolksNameDetails* self,
                                    const gchar* nickname,
                                    GAsyncReadyCallback _callback_,
                                    gpointer _user_data_)
{
#line 385 "/run/build/folks/folks/name-details.vala"
	FOLKS_NAME_DETAILS_GET_INTERFACE (self)->change_nickname (self, nickname, _callback_, _user_data_);
#line 2153 "name-details.c"
}


void
folks_name_details_change_nickname_finish (FolksNameDetails* self,
                                           GAsyncResult* _res_,
                                           GError** error)
{
#line 385 "/run/build/folks/folks/name-details.vala"
	FOLKS_NAME_DETAILS_GET_INTERFACE (self)->change_nickname_finish (self, _res_, error);
#line 2164 "name-details.c"
}


FolksStructuredName*
folks_name_details_get_structured_name (FolksNameDetails* self)
{
#line 398 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 398 "/run/build/folks/folks/name-details.vala"
	return FOLKS_NAME_DETAILS_GET_INTERFACE (self)->get_structured_name (self);
#line 2175 "name-details.c"
}


void
folks_name_details_set_structured_name (FolksNameDetails* self,
                                        FolksStructuredName* value)
{
#line 398 "/run/build/folks/folks/name-details.vala"
	g_return_if_fail (self != NULL);
#line 398 "/run/build/folks/folks/name-details.vala"
	FOLKS_NAME_DETAILS_GET_INTERFACE (self)->set_structured_name (self, value);
#line 2187 "name-details.c"
}


const gchar*
folks_name_details_get_full_name (FolksNameDetails* self)
{
#line 435 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 435 "/run/build/folks/folks/name-details.vala"
	return FOLKS_NAME_DETAILS_GET_INTERFACE (self)->get_full_name (self);
#line 2198 "name-details.c"
}


void
folks_name_details_set_full_name (FolksNameDetails* self,
                                  const gchar* value)
{
#line 435 "/run/build/folks/folks/name-details.vala"
	g_return_if_fail (self != NULL);
#line 435 "/run/build/folks/folks/name-details.vala"
	FOLKS_NAME_DETAILS_GET_INTERFACE (self)->set_full_name (self, value);
#line 2210 "name-details.c"
}


const gchar*
folks_name_details_get_nickname (FolksNameDetails* self)
{
#line 473 "/run/build/folks/folks/name-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 473 "/run/build/folks/folks/name-details.vala"
	return FOLKS_NAME_DETAILS_GET_INTERFACE (self)->get_nickname (self);
#line 2221 "name-details.c"
}


void
folks_name_details_set_nickname (FolksNameDetails* self,
                                 const gchar* value)
{
#line 473 "/run/build/folks/folks/name-details.vala"
	g_return_if_fail (self != NULL);
#line 473 "/run/build/folks/folks/name-details.vala"
	FOLKS_NAME_DETAILS_GET_INTERFACE (self)->set_nickname (self, value);
#line 2233 "name-details.c"
}


static void
folks_name_details_default_init (FolksNameDetailsIface * iface)
{
	/**
	   * The contact name split in its constituent parts.
	   *
	   * Note that most of the time the structured name is not set (i.e.
	   * it's ``null``) or just some of the components are set.
	   * The components are immutable. To get notification of changes of
	   * the structured name, you just have to connect to the ``notify`` signal
	   * of this property.
	   *
	   * @since 0.3.5
	   */
#line 385 "/run/build/folks/folks/name-details.vala"
	g_object_interface_install_property (iface, g_param_spec_object ("structured-name", "structured-name", "structured-name", FOLKS_TYPE_STRUCTURED_NAME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 2253 "name-details.c"
	/**
	   * The full name of the contact.
	   *
	   * The full name is the name of the contact written in the way the contact
	   * prefers. For instance for English names this is usually the given name
	   * followed by the family name, but Chinese names are usually the family
	   * name followed by the given name.
	   * The full name could or could not contain additional names (like a
	   * middle name), prefixes or suffixes.
	   *
	   * The full name must not be ``null``: the empty string represents an unset
	   * full name.
	   *
	   * @since 0.3.5
	   */
#line 385 "/run/build/folks/folks/name-details.vala"
	g_object_interface_install_property (iface, g_param_spec_string ("full-name", "full-name", "full-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 2271 "name-details.c"
	/**
	   * The nickname of the contact.
	   *
	   * The nickname is the name that the contact chose for himself. This is
	   * different from {@link AliasDetails.alias} as aliases can be chosen by
	   * the user and not by the contacts themselves.
	   *
	   * Consequently, setting the nickname only makes sense in the context of an
	   * address book when updating the information a contact has specified about
	   * themselves.
	   *
	   * The nickname must not be ``null``: the empty string represents an unset
	   * nickname.
	   *
	   * @since 0.3.5
	   */
#line 385 "/run/build/folks/folks/name-details.vala"
	g_object_interface_install_property (iface, g_param_spec_string ("nickname", "nickname", "nickname", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 385 "/run/build/folks/folks/name-details.vala"
	iface->change_structured_name = folks_name_details_real_change_structured_name;
#line 385 "/run/build/folks/folks/name-details.vala"
	iface->change_structured_name_finish = folks_name_details_real_change_structured_name_finish;
#line 385 "/run/build/folks/folks/name-details.vala"
	iface->change_full_name = folks_name_details_real_change_full_name;
#line 385 "/run/build/folks/folks/name-details.vala"
	iface->change_full_name_finish = folks_name_details_real_change_full_name_finish;
#line 385 "/run/build/folks/folks/name-details.vala"
	iface->change_nickname = folks_name_details_real_change_nickname;
#line 385 "/run/build/folks/folks/name-details.vala"
	iface->change_nickname_finish = folks_name_details_real_change_nickname_finish;
#line 2302 "name-details.c"
}


/**
 * Interface for classes which represent contacts with names, such as
 * {@link Persona} and {@link Individual}.
 *
 * @since 0.3.5
 */
GType
folks_name_details_get_type (void)
{
	static volatile gsize folks_name_details_type_id__volatile = 0;
	if (g_once_init_enter (&folks_name_details_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksNameDetailsIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_name_details_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
		GType folks_name_details_type_id;
		folks_name_details_type_id = g_type_register_static (G_TYPE_INTERFACE, "FolksNameDetails", &g_define_type_info, 0);
		g_type_interface_add_prerequisite (folks_name_details_type_id, G_TYPE_OBJECT);
		g_once_init_leave (&folks_name_details_type_id__volatile, folks_name_details_type_id);
	}
	return folks_name_details_type_id__volatile;
}



