/* Calendar.c generated by valac 0.40.11, the Vala compiler
 * generated from Calendar.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <float.h>
#include <math.h>


#define WIDGETS_CALENDAR_TYPE_CALENDAR (widgets_calendar_calendar_get_type ())
#define WIDGETS_CALENDAR_CALENDAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR, WidgetsCalendarCalendar))
#define WIDGETS_CALENDAR_CALENDAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR, WidgetsCalendarCalendarClass))
#define WIDGETS_CALENDAR_IS_CALENDAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR))
#define WIDGETS_CALENDAR_IS_CALENDAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR))
#define WIDGETS_CALENDAR_CALENDAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR, WidgetsCalendarCalendarClass))

typedef struct _WidgetsCalendarCalendar WidgetsCalendarCalendar;
typedef struct _WidgetsCalendarCalendarClass WidgetsCalendarCalendarClass;
typedef struct _WidgetsCalendarCalendarPrivate WidgetsCalendarCalendarPrivate;

#define WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER (widgets_calendar_calendar_header_get_type ())
#define WIDGETS_CALENDAR_CALENDAR_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeader))
#define WIDGETS_CALENDAR_CALENDAR_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeaderClass))
#define WIDGETS_CALENDAR_IS_CALENDAR_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER))
#define WIDGETS_CALENDAR_IS_CALENDAR_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER))
#define WIDGETS_CALENDAR_CALENDAR_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_HEADER, WidgetsCalendarCalendarHeaderClass))

typedef struct _WidgetsCalendarCalendarHeader WidgetsCalendarCalendarHeader;
typedef struct _WidgetsCalendarCalendarHeaderClass WidgetsCalendarCalendarHeaderClass;

#define WIDGETS_CALENDAR_TYPE_CALENDAR_WEEK (widgets_calendar_calendar_week_get_type ())
#define WIDGETS_CALENDAR_CALENDAR_WEEK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_WEEK, WidgetsCalendarCalendarWeek))
#define WIDGETS_CALENDAR_CALENDAR_WEEK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_WEEK, WidgetsCalendarCalendarWeekClass))
#define WIDGETS_CALENDAR_IS_CALENDAR_WEEK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_WEEK))
#define WIDGETS_CALENDAR_IS_CALENDAR_WEEK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_WEEK))
#define WIDGETS_CALENDAR_CALENDAR_WEEK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_WEEK, WidgetsCalendarCalendarWeekClass))

typedef struct _WidgetsCalendarCalendarWeek WidgetsCalendarCalendarWeek;
typedef struct _WidgetsCalendarCalendarWeekClass WidgetsCalendarCalendarWeekClass;

#define WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW (widgets_calendar_calendar_view_get_type ())
#define WIDGETS_CALENDAR_CALENDAR_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW, WidgetsCalendarCalendarView))
#define WIDGETS_CALENDAR_CALENDAR_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW, WidgetsCalendarCalendarViewClass))
#define WIDGETS_CALENDAR_IS_CALENDAR_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW))
#define WIDGETS_CALENDAR_IS_CALENDAR_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW))
#define WIDGETS_CALENDAR_CALENDAR_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_CALENDAR_TYPE_CALENDAR_VIEW, WidgetsCalendarCalendarViewClass))

typedef struct _WidgetsCalendarCalendarView WidgetsCalendarCalendarView;
typedef struct _WidgetsCalendarCalendarViewClass WidgetsCalendarCalendarViewClass;
enum  {
	WIDGETS_CALENDAR_CALENDAR_0_PROPERTY,
	WIDGETS_CALENDAR_CALENDAR_DATE_PROPERTY,
	WIDGETS_CALENDAR_CALENDAR_NUM_PROPERTIES
};
static GParamSpec* widgets_calendar_calendar_properties[WIDGETS_CALENDAR_CALENDAR_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
enum  {
	WIDGETS_CALENDAR_CALENDAR_SELECTION_CHANGED_SIGNAL,
	WIDGETS_CALENDAR_CALENDAR_SELECTION_DOUBLE_CHANGED_SIGNAL,
	WIDGETS_CALENDAR_CALENDAR_NUM_SIGNALS
};
static guint widgets_calendar_calendar_signals[WIDGETS_CALENDAR_CALENDAR_NUM_SIGNALS] = {0};

struct _WidgetsCalendarCalendar {
	GtkBox parent_instance;
	WidgetsCalendarCalendarPrivate * priv;
};

struct _WidgetsCalendarCalendarClass {
	GtkBoxClass parent_class;
};

struct _WidgetsCalendarCalendarPrivate {
	WidgetsCalendarCalendarHeader* calendar_header;
	WidgetsCalendarCalendarWeek* calendar_week;
	WidgetsCalendarCalendarView* calendar_view;
	gboolean sensitive_past_days;
	gint month_nav;
	gint year_nav;
	gint day_nav;
	GDateTime* current_date;
	GDateTime* _date;
};


static gpointer widgets_calendar_calendar_parent_class = NULL;
extern Utils* application_utils;

GType widgets_calendar_calendar_get_type (void) G_GNUC_CONST;
GType widgets_calendar_calendar_header_get_type (void) G_GNUC_CONST;
GType widgets_calendar_calendar_week_get_type (void) G_GNUC_CONST;
GType widgets_calendar_calendar_view_get_type (void) G_GNUC_CONST;
#define WIDGETS_CALENDAR_CALENDAR_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_CALENDAR_TYPE_CALENDAR, WidgetsCalendarCalendarPrivate))
WidgetsCalendarCalendar* widgets_calendar_calendar_new (gboolean _sensitive_past_days);
WidgetsCalendarCalendar* widgets_calendar_calendar_construct (GType object_type,
                                                              gboolean _sensitive_past_days);
WidgetsCalendarCalendarHeader* widgets_calendar_calendar_header_new (void);
WidgetsCalendarCalendarHeader* widgets_calendar_calendar_header_construct (GType object_type);
WidgetsCalendarCalendarWeek* widgets_calendar_calendar_week_new (void);
WidgetsCalendarCalendarWeek* widgets_calendar_calendar_week_construct (GType object_type);
WidgetsCalendarCalendarView* widgets_calendar_calendar_view_new (void);
WidgetsCalendarCalendarView* widgets_calendar_calendar_view_construct (GType object_type);
static void widgets_calendar_calendar_today (WidgetsCalendarCalendar* self);
static void __lambda18_ (WidgetsCalendarCalendar* self);
void widgets_calendar_calendar_previous_month (WidgetsCalendarCalendar* self);
static void ___lambda18__widgets_calendar_calendar_header_left_clicked (WidgetsCalendarCalendarHeader* _sender,
                                                                 gpointer self);
static void __lambda19_ (WidgetsCalendarCalendar* self);
static void ___lambda19__widgets_calendar_calendar_header_center_clicked (WidgetsCalendarCalendarHeader* _sender,
                                                                   gpointer self);
static void __lambda20_ (WidgetsCalendarCalendar* self);
void widgets_calendar_calendar_next_month (WidgetsCalendarCalendar* self);
static void ___lambda20__widgets_calendar_calendar_header_right_clicked (WidgetsCalendarCalendarHeader* _sender,
                                                                  gpointer self);
static void __lambda21_ (WidgetsCalendarCalendar* self,
                  gint day);
static void ___lambda21__widgets_calendar_calendar_view_day_selected (WidgetsCalendarCalendarView* _sender,
                                                               gint day,
                                                               gpointer self);
static void __lambda22_ (WidgetsCalendarCalendar* self,
                  gint day);
static void ___lambda22__widgets_calendar_calendar_view_day_double_selected (WidgetsCalendarCalendarView* _sender,
                                                                      gint day,
                                                                      gpointer self);
GType utils_get_type (void) G_GNUC_CONST;
gint utils_get_days_of_month (Utils* self,
                              gint index);
void widgets_calendar_calendar_view_fill_grid_days (WidgetsCalendarCalendarView* self,
                                                    gint start_day,
                                                    gint max_day,
                                                    gint current_day,
                                                    gboolean is_current_month,
                                                    gboolean sensitive_past_days,
                                                    GDateTime* month);
gboolean utils_is_current_month (Utils* self,
                                 GDateTime* date);
void widgets_calendar_calendar_header_set_date (WidgetsCalendarCalendarHeader* self,
                                                GDateTime* value);
GDateTime* widgets_calendar_calendar_get_date (WidgetsCalendarCalendar* self);
static void widgets_calendar_calendar_finalize (GObject * obj);
static void _vala_widgets_calendar_calendar_get_property (GObject * object,
                                                   guint property_id,
                                                   GValue * value,
                                                   GParamSpec * pspec);


static void
__lambda18_ (WidgetsCalendarCalendar* self)
{
#line 64 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_previous_month (self);
#line 187 "Calendar.c"
}


static void
___lambda18__widgets_calendar_calendar_header_left_clicked (WidgetsCalendarCalendarHeader* _sender,
                                                            gpointer self)
{
#line 63 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	__lambda18_ ((WidgetsCalendarCalendar*) self);
#line 197 "Calendar.c"
}


static void
__lambda19_ (WidgetsCalendarCalendar* self)
{
#line 68 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_today (self);
#line 206 "Calendar.c"
}


static void
___lambda19__widgets_calendar_calendar_header_center_clicked (WidgetsCalendarCalendarHeader* _sender,
                                                              gpointer self)
{
#line 67 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	__lambda19_ ((WidgetsCalendarCalendar*) self);
#line 216 "Calendar.c"
}


static void
__lambda20_ (WidgetsCalendarCalendar* self)
{
#line 72 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_next_month (self);
#line 225 "Calendar.c"
}


static void
___lambda20__widgets_calendar_calendar_header_right_clicked (WidgetsCalendarCalendarHeader* _sender,
                                                             gpointer self)
{
#line 71 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	__lambda20_ ((WidgetsCalendarCalendar*) self);
#line 235 "Calendar.c"
}


static void
__lambda21_ (WidgetsCalendarCalendar* self,
             gint day)
{
	GDateTime* date = NULL;
	gint _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	GDateTime* _tmp3_;
#line 76 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self->priv->day_nav = day;
#line 78 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp0_ = self->priv->year_nav;
#line 78 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp1_ = self->priv->month_nav;
#line 78 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp2_ = self->priv->day_nav;
#line 78 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp3_ = g_date_time_new_local (_tmp0_, _tmp1_, _tmp2_, 0, 0, (gdouble) 0);
#line 78 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	date = _tmp3_;
#line 80 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_signal_emit (self, widgets_calendar_calendar_signals[WIDGETS_CALENDAR_CALENDAR_SELECTION_CHANGED_SIGNAL], 0, date);
#line 75 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (date);
#line 264 "Calendar.c"
}


static void
___lambda21__widgets_calendar_calendar_view_day_selected (WidgetsCalendarCalendarView* _sender,
                                                          gint day,
                                                          gpointer self)
{
#line 75 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	__lambda21_ ((WidgetsCalendarCalendar*) self, day);
#line 275 "Calendar.c"
}


static void
__lambda22_ (WidgetsCalendarCalendar* self,
             gint day)
{
	GDateTime* date = NULL;
	gint _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	GDateTime* _tmp3_;
#line 84 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self->priv->day_nav = day;
#line 86 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp0_ = self->priv->year_nav;
#line 86 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp1_ = self->priv->month_nav;
#line 86 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp2_ = self->priv->day_nav;
#line 86 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp3_ = g_date_time_new_local (_tmp0_, _tmp1_, _tmp2_, 0, 0, (gdouble) 0);
#line 86 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	date = _tmp3_;
#line 88 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_signal_emit (self, widgets_calendar_calendar_signals[WIDGETS_CALENDAR_CALENDAR_SELECTION_DOUBLE_CHANGED_SIGNAL], 0, date);
#line 83 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (date);
#line 304 "Calendar.c"
}


static void
___lambda22__widgets_calendar_calendar_view_day_double_selected (WidgetsCalendarCalendarView* _sender,
                                                                 gint day,
                                                                 gpointer self)
{
#line 83 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	__lambda22_ ((WidgetsCalendarCalendar*) self, day);
#line 315 "Calendar.c"
}


WidgetsCalendarCalendar*
widgets_calendar_calendar_construct (GType object_type,
                                     gboolean _sensitive_past_days)
{
	WidgetsCalendarCalendar * self = NULL;
	GDateTime* _tmp0_;
	WidgetsCalendarCalendarHeader* _tmp1_;
	WidgetsCalendarCalendarWeek* _tmp2_;
	WidgetsCalendarCalendarView* _tmp3_;
	WidgetsCalendarCalendarHeader* _tmp4_;
	WidgetsCalendarCalendarWeek* _tmp5_;
	WidgetsCalendarCalendarView* _tmp6_;
	WidgetsCalendarCalendarHeader* _tmp7_;
	WidgetsCalendarCalendarHeader* _tmp8_;
	WidgetsCalendarCalendarHeader* _tmp9_;
	WidgetsCalendarCalendarView* _tmp10_;
	WidgetsCalendarCalendarView* _tmp11_;
#line 46 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self = (WidgetsCalendarCalendar*) g_object_new (object_type, NULL);
#line 47 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self->priv->sensitive_past_days = _sensitive_past_days;
#line 48 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) self, GTK_ORIENTATION_VERTICAL);
#line 49 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_object_set ((GtkWidget*) self, "margin", 6, NULL);
#line 51 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp0_ = g_date_time_new_now_local ();
#line 51 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (self->priv->current_date);
#line 51 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self->priv->current_date = _tmp0_;
#line 53 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp1_ = widgets_calendar_calendar_header_new ();
#line 53 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_object_ref_sink (_tmp1_);
#line 53 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (self->priv->calendar_header);
#line 53 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self->priv->calendar_header = _tmp1_;
#line 54 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp2_ = widgets_calendar_calendar_week_new ();
#line 54 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_object_ref_sink (_tmp2_);
#line 54 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (self->priv->calendar_week);
#line 54 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self->priv->calendar_week = _tmp2_;
#line 55 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp3_ = widgets_calendar_calendar_view_new ();
#line 55 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_object_ref_sink (_tmp3_);
#line 55 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (self->priv->calendar_view);
#line 55 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self->priv->calendar_view = _tmp3_;
#line 57 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp4_ = self->priv->calendar_header;
#line 57 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	gtk_box_pack_start ((GtkBox*) self, (GtkWidget*) _tmp4_, TRUE, TRUE, (guint) 0);
#line 58 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp5_ = self->priv->calendar_week;
#line 58 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	gtk_box_pack_start ((GtkBox*) self, (GtkWidget*) _tmp5_, TRUE, TRUE, (guint) 0);
#line 59 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp6_ = self->priv->calendar_view;
#line 59 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	gtk_box_pack_start ((GtkBox*) self, (GtkWidget*) _tmp6_, TRUE, TRUE, (guint) 0);
#line 61 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_today (self);
#line 63 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp7_ = self->priv->calendar_header;
#line 63 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_signal_connect_object (_tmp7_, "left-clicked", (GCallback) ___lambda18__widgets_calendar_calendar_header_left_clicked, self, 0);
#line 67 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp8_ = self->priv->calendar_header;
#line 67 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_signal_connect_object (_tmp8_, "center-clicked", (GCallback) ___lambda19__widgets_calendar_calendar_header_center_clicked, self, 0);
#line 71 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp9_ = self->priv->calendar_header;
#line 71 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_signal_connect_object (_tmp9_, "right-clicked", (GCallback) ___lambda20__widgets_calendar_calendar_header_right_clicked, self, 0);
#line 75 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp10_ = self->priv->calendar_view;
#line 75 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_signal_connect_object (_tmp10_, "day-selected", (GCallback) ___lambda21__widgets_calendar_calendar_view_day_selected, self, 0);
#line 83 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp11_ = self->priv->calendar_view;
#line 83 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_signal_connect_object (_tmp11_, "day-double-selected", (GCallback) ___lambda22__widgets_calendar_calendar_view_day_double_selected, self, 0);
#line 46 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	return self;
#line 410 "Calendar.c"
}


WidgetsCalendarCalendar*
widgets_calendar_calendar_new (gboolean _sensitive_past_days)
{
#line 46 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	return widgets_calendar_calendar_construct (WIDGETS_CALENDAR_TYPE_CALENDAR, _sensitive_past_days);
#line 419 "Calendar.c"
}


void
widgets_calendar_calendar_next_month (WidgetsCalendarCalendar* self)
{
	gint _tmp0_;
	gint _tmp1_;
	GDateTime* date = NULL;
	gint _tmp3_;
	gint _tmp4_;
	GDateTime* _tmp5_;
	GDateTime* firts_week = NULL;
	GDateTime* _tmp6_;
	gint start_day = 0;
	gint max_days = 0;
	Utils* _tmp7_;
	WidgetsCalendarCalendarView* _tmp8_;
	Utils* _tmp9_;
	gboolean _tmp10_;
	WidgetsCalendarCalendarHeader* _tmp11_;
#line 92 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_return_if_fail (self != NULL);
#line 93 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp0_ = self->priv->month_nav;
#line 93 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self->priv->month_nav = _tmp0_ + 1;
#line 95 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp1_ = self->priv->month_nav;
#line 95 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	if (_tmp1_ > 12) {
#line 451 "Calendar.c"
		gint _tmp2_;
#line 96 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
		_tmp2_ = self->priv->year_nav;
#line 96 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
		self->priv->year_nav = _tmp2_ + 1;
#line 97 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
		self->priv->month_nav = 1;
#line 459 "Calendar.c"
	}
#line 100 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp3_ = self->priv->year_nav;
#line 100 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp4_ = self->priv->month_nav;
#line 100 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp5_ = g_date_time_new_local (_tmp3_, _tmp4_, 1, 0, 0, (gdouble) 0);
#line 100 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	date = _tmp5_;
#line 102 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp6_ = g_date_time_new_local (g_date_time_get_year (date), g_date_time_get_month (date), 1, 0, 0, (gdouble) 0);
#line 102 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	firts_week = _tmp6_;
#line 103 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	start_day = g_date_time_get_day_of_week (firts_week) - 1;
#line 105 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp7_ = application_utils;
#line 105 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	max_days = utils_get_days_of_month (_tmp7_, g_date_time_get_month (date));
#line 107 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp8_ = self->priv->calendar_view;
#line 107 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp9_ = application_utils;
#line 107 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp10_ = self->priv->sensitive_past_days;
#line 107 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_view_fill_grid_days (_tmp8_, start_day, max_days, g_date_time_get_day_of_month (date), utils_is_current_month (_tmp9_, date), _tmp10_, date);
#line 114 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp11_ = self->priv->calendar_header;
#line 114 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_header_set_date (_tmp11_, date);
#line 92 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (firts_week);
#line 92 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (date);
#line 495 "Calendar.c"
}


void
widgets_calendar_calendar_previous_month (WidgetsCalendarCalendar* self)
{
	gint _tmp0_;
	gint _tmp1_;
	GDateTime* date = NULL;
	gint _tmp3_;
	gint _tmp4_;
	GDateTime* _tmp5_;
	GDateTime* firts_week = NULL;
	GDateTime* _tmp6_;
	gint start_day = 0;
	gint max_days = 0;
	Utils* _tmp7_;
	WidgetsCalendarCalendarView* _tmp8_;
	Utils* _tmp9_;
	gboolean _tmp10_;
	WidgetsCalendarCalendarHeader* _tmp11_;
#line 117 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_return_if_fail (self != NULL);
#line 118 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp0_ = self->priv->month_nav;
#line 118 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self->priv->month_nav = _tmp0_ - 1;
#line 120 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp1_ = self->priv->month_nav;
#line 120 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	if (_tmp1_ < 1) {
#line 527 "Calendar.c"
		gint _tmp2_;
#line 121 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
		_tmp2_ = self->priv->year_nav;
#line 121 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
		self->priv->year_nav = _tmp2_ - 1;
#line 122 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
		self->priv->month_nav = 12;
#line 535 "Calendar.c"
	}
#line 125 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp3_ = self->priv->year_nav;
#line 125 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp4_ = self->priv->month_nav;
#line 125 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp5_ = g_date_time_new_local (_tmp3_, _tmp4_, 1, 0, 0, (gdouble) 0);
#line 125 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	date = _tmp5_;
#line 127 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp6_ = g_date_time_new_local (g_date_time_get_year (date), g_date_time_get_month (date), 1, 0, 0, (gdouble) 0);
#line 127 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	firts_week = _tmp6_;
#line 128 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	start_day = g_date_time_get_day_of_week (firts_week) - 1;
#line 130 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp7_ = application_utils;
#line 130 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	max_days = utils_get_days_of_month (_tmp7_, g_date_time_get_month (date));
#line 132 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp8_ = self->priv->calendar_view;
#line 132 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp9_ = application_utils;
#line 132 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp10_ = self->priv->sensitive_past_days;
#line 132 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_view_fill_grid_days (_tmp8_, start_day, max_days, g_date_time_get_day_of_month (date), utils_is_current_month (_tmp9_, date), _tmp10_, date);
#line 139 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp11_ = self->priv->calendar_header;
#line 139 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_header_set_date (_tmp11_, date);
#line 117 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (firts_week);
#line 117 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (date);
#line 571 "Calendar.c"
}


static void
widgets_calendar_calendar_today (WidgetsCalendarCalendar* self)
{
	gint year = 0;
	GDateTime* _tmp0_;
	gint month = 0;
	GDateTime* _tmp1_;
	gint day = 0;
	GDateTime* _tmp2_;
	GDateTime* firts_week = NULL;
	GDateTime* _tmp3_;
	gint start_day = 0;
	gint max_days = 0;
	Utils* _tmp4_;
	GDateTime* _tmp5_;
	WidgetsCalendarCalendarView* _tmp6_;
	gboolean _tmp7_;
	GDateTime* _tmp8_;
	WidgetsCalendarCalendarHeader* _tmp9_;
	GDateTime* _tmp10_;
	GDateTime* _tmp11_;
	GDateTime* _tmp12_;
#line 142 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_return_if_fail (self != NULL);
#line 143 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp0_ = self->priv->current_date;
#line 143 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	year = g_date_time_get_year (_tmp0_);
#line 144 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp1_ = self->priv->current_date;
#line 144 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	month = g_date_time_get_month (_tmp1_);
#line 145 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp2_ = self->priv->current_date;
#line 145 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	day = g_date_time_get_day_of_month (_tmp2_);
#line 147 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self->priv->month_nav = month;
#line 148 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self->priv->year_nav = year;
#line 149 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self->priv->day_nav = day;
#line 151 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp3_ = g_date_time_new_local (year, month, 1, 0, 0, (gdouble) 0);
#line 151 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	firts_week = _tmp3_;
#line 152 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	start_day = g_date_time_get_day_of_week (firts_week) - 1;
#line 154 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp4_ = application_utils;
#line 154 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp5_ = self->priv->current_date;
#line 154 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	max_days = utils_get_days_of_month (_tmp4_, g_date_time_get_month (_tmp5_));
#line 155 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp6_ = self->priv->calendar_view;
#line 155 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp7_ = self->priv->sensitive_past_days;
#line 155 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp8_ = self->priv->current_date;
#line 155 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_view_fill_grid_days (_tmp6_, start_day, max_days, day, TRUE, _tmp7_, _tmp8_);
#line 156 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp9_ = self->priv->calendar_header;
#line 156 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp10_ = self->priv->current_date;
#line 156 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_header_set_date (_tmp9_, _tmp10_);
#line 158 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp11_ = g_date_time_new_now_local ();
#line 158 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp12_ = _tmp11_;
#line 158 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_signal_emit (self, widgets_calendar_calendar_signals[WIDGETS_CALENDAR_CALENDAR_SELECTION_CHANGED_SIGNAL], 0, _tmp12_);
#line 158 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (_tmp12_);
#line 142 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (firts_week);
#line 653 "Calendar.c"
}


GDateTime*
widgets_calendar_calendar_get_date (WidgetsCalendarCalendar* self)
{
	GDateTime* result;
	gint _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	GDateTime* _tmp3_;
	GDateTime* _tmp4_;
#line 38 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 39 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp0_ = self->priv->year_nav;
#line 39 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp1_ = self->priv->month_nav;
#line 39 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp2_ = self->priv->day_nav;
#line 39 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp3_ = g_date_time_new_local (_tmp0_, _tmp1_, _tmp2_, 0, 0, (gdouble) 0);
#line 39 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (self->priv->_date);
#line 39 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self->priv->_date = _tmp3_;
#line 40 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_tmp4_ = self->priv->_date;
#line 40 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	result = _tmp4_;
#line 40 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	return result;
#line 686 "Calendar.c"
}


static void
widgets_calendar_calendar_class_init (WidgetsCalendarCalendarClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_type_class_add_private (klass, sizeof (WidgetsCalendarCalendarPrivate));
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_calendar_calendar_get_property;
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_calendar_calendar_finalize;
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_CALENDAR_CALENDAR_DATE_PROPERTY, widgets_calendar_calendar_properties[WIDGETS_CALENDAR_CALENDAR_DATE_PROPERTY] = g_param_spec_boxed ("date", "date", "date", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_signals[WIDGETS_CALENDAR_CALENDAR_SELECTION_CHANGED_SIGNAL] = g_signal_new ("selection-changed", WIDGETS_CALENDAR_TYPE_CALENDAR, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__BOXED, G_TYPE_NONE, 1, G_TYPE_DATE_TIME);
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	widgets_calendar_calendar_signals[WIDGETS_CALENDAR_CALENDAR_SELECTION_DOUBLE_CHANGED_SIGNAL] = g_signal_new ("selection-double-changed", WIDGETS_CALENDAR_TYPE_CALENDAR, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__BOXED, G_TYPE_NONE, 1, G_TYPE_DATE_TIME);
#line 707 "Calendar.c"
}


static void
widgets_calendar_calendar_instance_init (WidgetsCalendarCalendar * self)
{
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self->priv = WIDGETS_CALENDAR_CALENDAR_GET_PRIVATE (self);
#line 716 "Calendar.c"
}


static void
widgets_calendar_calendar_finalize (GObject * obj)
{
	WidgetsCalendarCalendar * self;
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_CALENDAR_TYPE_CALENDAR, WidgetsCalendarCalendar);
#line 23 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (self->priv->calendar_header);
#line 24 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (self->priv->calendar_week);
#line 25 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_object_unref0 (self->priv->calendar_view);
#line 33 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (self->priv->current_date);
#line 35 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	_g_date_time_unref0 (self->priv->_date);
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	G_OBJECT_CLASS (widgets_calendar_calendar_parent_class)->finalize (obj);
#line 738 "Calendar.c"
}


GType
widgets_calendar_calendar_get_type (void)
{
	static volatile gsize widgets_calendar_calendar_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_calendar_calendar_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsCalendarCalendarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_calendar_calendar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsCalendarCalendar), 0, (GInstanceInitFunc) widgets_calendar_calendar_instance_init, NULL };
		GType widgets_calendar_calendar_type_id;
		widgets_calendar_calendar_type_id = g_type_register_static (gtk_box_get_type (), "WidgetsCalendarCalendar", &g_define_type_info, 0);
		g_once_init_leave (&widgets_calendar_calendar_type_id__volatile, widgets_calendar_calendar_type_id);
	}
	return widgets_calendar_calendar_type_id__volatile;
}


static void
_vala_widgets_calendar_calendar_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec)
{
	WidgetsCalendarCalendar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_CALENDAR_TYPE_CALENDAR, WidgetsCalendarCalendar);
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
		case WIDGETS_CALENDAR_CALENDAR_DATE_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
		g_value_set_boxed (value, widgets_calendar_calendar_get_date (self));
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
		break;
#line 772 "Calendar.c"
		default:
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/Calendar/Calendar.vala"
		break;
#line 778 "Calendar.c"
	}
}



