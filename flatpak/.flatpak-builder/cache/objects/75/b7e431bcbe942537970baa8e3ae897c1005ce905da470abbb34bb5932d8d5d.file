/*
 * Generated by gdbus-codegen 2.58.1 from org.gnome.evolution.dataserver.AddressBook.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __E_DBUS_ADDRESS_BOOK_H__
#define __E_DBUS_ADDRESS_BOOK_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.evolution.dataserver.AddressBook */

#define E_DBUS_TYPE_ADDRESS_BOOK (e_dbus_address_book_get_type ())
#define E_DBUS_ADDRESS_BOOK(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_TYPE_ADDRESS_BOOK, EDBusAddressBook))
#define E_DBUS_IS_ADDRESS_BOOK(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_TYPE_ADDRESS_BOOK))
#define E_DBUS_ADDRESS_BOOK_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), E_DBUS_TYPE_ADDRESS_BOOK, EDBusAddressBookIface))

struct _EDBusAddressBook;
typedef struct _EDBusAddressBook EDBusAddressBook;
typedef struct _EDBusAddressBookIface EDBusAddressBookIface;

struct _EDBusAddressBookIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_close) (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_create_contacts) (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_vcards);

  gboolean (*handle_get_contact) (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uid);

  gboolean (*handle_get_contact_list) (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_query);

  gboolean (*handle_get_contact_list_uids) (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_query);

  gboolean (*handle_get_cursor) (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_query,
    const gchar *const *arg_sort_keys,
    const gchar *const *arg_sort_types);

  gboolean (*handle_get_view) (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_query);

  gboolean (*handle_modify_contacts) (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_vcards);

  gboolean (*handle_open) (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_refresh) (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_contacts) (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_uids);

  gboolean (*handle_retrieve_properties) (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_cache_dir) (EDBusAddressBook *object);

  const gchar *const * (*get_capabilities) (EDBusAddressBook *object);

  const gchar * (*get_locale) (EDBusAddressBook *object);

  gboolean  (*get_online) (EDBusAddressBook *object);

  const gchar *const * (*get_required_fields) (EDBusAddressBook *object);

  const gchar * (*get_revision) (EDBusAddressBook *object);

  const gchar *const * (*get_supported_fields) (EDBusAddressBook *object);

  gboolean  (*get_writable) (EDBusAddressBook *object);

  void (*error) (
    EDBusAddressBook *object,
    const gchar *arg_error_message);

};

GType e_dbus_address_book_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *e_dbus_address_book_interface_info (void);
guint e_dbus_address_book_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void e_dbus_address_book_complete_retrieve_properties (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *properties);

void e_dbus_address_book_complete_open (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *properties);

void e_dbus_address_book_complete_close (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation);

void e_dbus_address_book_complete_refresh (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation);

void e_dbus_address_book_complete_create_contacts (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *uids);

void e_dbus_address_book_complete_modify_contacts (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation);

void e_dbus_address_book_complete_remove_contacts (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation);

void e_dbus_address_book_complete_get_contact (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *vcard);

void e_dbus_address_book_complete_get_contact_list (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *vcards);

void e_dbus_address_book_complete_get_contact_list_uids (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *uids);

void e_dbus_address_book_complete_get_view (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *object_path);

void e_dbus_address_book_complete_get_cursor (
    EDBusAddressBook *object,
    GDBusMethodInvocation *invocation,
    const gchar *object_path);



/* D-Bus signal emissions functions: */
void e_dbus_address_book_emit_error (
    EDBusAddressBook *object,
    const gchar *arg_error_message);



/* D-Bus method calls: */
void e_dbus_address_book_call_retrieve_properties (
    EDBusAddressBook *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_call_retrieve_properties_finish (
    EDBusAddressBook *proxy,
    gchar ***out_properties,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_call_retrieve_properties_sync (
    EDBusAddressBook *proxy,
    gchar ***out_properties,
    GCancellable *cancellable,
    GError **error);

void e_dbus_address_book_call_open (
    EDBusAddressBook *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_call_open_finish (
    EDBusAddressBook *proxy,
    gchar ***out_properties,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_call_open_sync (
    EDBusAddressBook *proxy,
    gchar ***out_properties,
    GCancellable *cancellable,
    GError **error);

void e_dbus_address_book_call_close (
    EDBusAddressBook *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_call_close_finish (
    EDBusAddressBook *proxy,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_call_close_sync (
    EDBusAddressBook *proxy,
    GCancellable *cancellable,
    GError **error);

void e_dbus_address_book_call_refresh (
    EDBusAddressBook *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_call_refresh_finish (
    EDBusAddressBook *proxy,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_call_refresh_sync (
    EDBusAddressBook *proxy,
    GCancellable *cancellable,
    GError **error);

void e_dbus_address_book_call_create_contacts (
    EDBusAddressBook *proxy,
    const gchar *const *arg_vcards,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_call_create_contacts_finish (
    EDBusAddressBook *proxy,
    gchar ***out_uids,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_call_create_contacts_sync (
    EDBusAddressBook *proxy,
    const gchar *const *arg_vcards,
    gchar ***out_uids,
    GCancellable *cancellable,
    GError **error);

void e_dbus_address_book_call_modify_contacts (
    EDBusAddressBook *proxy,
    const gchar *const *arg_vcards,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_call_modify_contacts_finish (
    EDBusAddressBook *proxy,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_call_modify_contacts_sync (
    EDBusAddressBook *proxy,
    const gchar *const *arg_vcards,
    GCancellable *cancellable,
    GError **error);

void e_dbus_address_book_call_remove_contacts (
    EDBusAddressBook *proxy,
    const gchar *const *arg_uids,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_call_remove_contacts_finish (
    EDBusAddressBook *proxy,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_call_remove_contacts_sync (
    EDBusAddressBook *proxy,
    const gchar *const *arg_uids,
    GCancellable *cancellable,
    GError **error);

void e_dbus_address_book_call_get_contact (
    EDBusAddressBook *proxy,
    const gchar *arg_uid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_call_get_contact_finish (
    EDBusAddressBook *proxy,
    gchar **out_vcard,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_call_get_contact_sync (
    EDBusAddressBook *proxy,
    const gchar *arg_uid,
    gchar **out_vcard,
    GCancellable *cancellable,
    GError **error);

void e_dbus_address_book_call_get_contact_list (
    EDBusAddressBook *proxy,
    const gchar *arg_query,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_call_get_contact_list_finish (
    EDBusAddressBook *proxy,
    gchar ***out_vcards,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_call_get_contact_list_sync (
    EDBusAddressBook *proxy,
    const gchar *arg_query,
    gchar ***out_vcards,
    GCancellable *cancellable,
    GError **error);

void e_dbus_address_book_call_get_contact_list_uids (
    EDBusAddressBook *proxy,
    const gchar *arg_query,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_call_get_contact_list_uids_finish (
    EDBusAddressBook *proxy,
    gchar ***out_uids,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_call_get_contact_list_uids_sync (
    EDBusAddressBook *proxy,
    const gchar *arg_query,
    gchar ***out_uids,
    GCancellable *cancellable,
    GError **error);

void e_dbus_address_book_call_get_view (
    EDBusAddressBook *proxy,
    const gchar *arg_query,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_call_get_view_finish (
    EDBusAddressBook *proxy,
    gchar **out_object_path,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_call_get_view_sync (
    EDBusAddressBook *proxy,
    const gchar *arg_query,
    gchar **out_object_path,
    GCancellable *cancellable,
    GError **error);

void e_dbus_address_book_call_get_cursor (
    EDBusAddressBook *proxy,
    const gchar *arg_query,
    const gchar *const *arg_sort_keys,
    const gchar *const *arg_sort_types,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_call_get_cursor_finish (
    EDBusAddressBook *proxy,
    gchar **out_object_path,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_call_get_cursor_sync (
    EDBusAddressBook *proxy,
    const gchar *arg_query,
    const gchar *const *arg_sort_keys,
    const gchar *const *arg_sort_types,
    gchar **out_object_path,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean e_dbus_address_book_get_online (EDBusAddressBook *object);
void e_dbus_address_book_set_online (EDBusAddressBook *object, gboolean value);

const gchar *e_dbus_address_book_get_revision (EDBusAddressBook *object);
gchar *e_dbus_address_book_dup_revision (EDBusAddressBook *object);
void e_dbus_address_book_set_revision (EDBusAddressBook *object, const gchar *value);

const gchar *e_dbus_address_book_get_locale (EDBusAddressBook *object);
gchar *e_dbus_address_book_dup_locale (EDBusAddressBook *object);
void e_dbus_address_book_set_locale (EDBusAddressBook *object, const gchar *value);

gboolean e_dbus_address_book_get_writable (EDBusAddressBook *object);
void e_dbus_address_book_set_writable (EDBusAddressBook *object, gboolean value);

const gchar *e_dbus_address_book_get_cache_dir (EDBusAddressBook *object);
gchar *e_dbus_address_book_dup_cache_dir (EDBusAddressBook *object);
void e_dbus_address_book_set_cache_dir (EDBusAddressBook *object, const gchar *value);

const gchar *const *e_dbus_address_book_get_capabilities (EDBusAddressBook *object);
gchar **e_dbus_address_book_dup_capabilities (EDBusAddressBook *object);
void e_dbus_address_book_set_capabilities (EDBusAddressBook *object, const gchar *const *value);

const gchar *const *e_dbus_address_book_get_required_fields (EDBusAddressBook *object);
gchar **e_dbus_address_book_dup_required_fields (EDBusAddressBook *object);
void e_dbus_address_book_set_required_fields (EDBusAddressBook *object, const gchar *const *value);

const gchar *const *e_dbus_address_book_get_supported_fields (EDBusAddressBook *object);
gchar **e_dbus_address_book_dup_supported_fields (EDBusAddressBook *object);
void e_dbus_address_book_set_supported_fields (EDBusAddressBook *object, const gchar *const *value);


/* ---- */

#define E_DBUS_TYPE_ADDRESS_BOOK_PROXY (e_dbus_address_book_proxy_get_type ())
#define E_DBUS_ADDRESS_BOOK_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_TYPE_ADDRESS_BOOK_PROXY, EDBusAddressBookProxy))
#define E_DBUS_ADDRESS_BOOK_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), E_DBUS_TYPE_ADDRESS_BOOK_PROXY, EDBusAddressBookProxyClass))
#define E_DBUS_ADDRESS_BOOK_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), E_DBUS_TYPE_ADDRESS_BOOK_PROXY, EDBusAddressBookProxyClass))
#define E_DBUS_IS_ADDRESS_BOOK_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_TYPE_ADDRESS_BOOK_PROXY))
#define E_DBUS_IS_ADDRESS_BOOK_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), E_DBUS_TYPE_ADDRESS_BOOK_PROXY))

typedef struct _EDBusAddressBookProxy EDBusAddressBookProxy;
typedef struct _EDBusAddressBookProxyClass EDBusAddressBookProxyClass;
typedef struct _EDBusAddressBookProxyPrivate EDBusAddressBookProxyPrivate;

struct _EDBusAddressBookProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  EDBusAddressBookProxyPrivate *priv;
};

struct _EDBusAddressBookProxyClass
{
  GDBusProxyClass parent_class;
};

GType e_dbus_address_book_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (EDBusAddressBookProxy, g_object_unref)
#endif

void e_dbus_address_book_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EDBusAddressBook *e_dbus_address_book_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
EDBusAddressBook *e_dbus_address_book_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void e_dbus_address_book_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EDBusAddressBook *e_dbus_address_book_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
EDBusAddressBook *e_dbus_address_book_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define E_DBUS_TYPE_ADDRESS_BOOK_SKELETON (e_dbus_address_book_skeleton_get_type ())
#define E_DBUS_ADDRESS_BOOK_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_TYPE_ADDRESS_BOOK_SKELETON, EDBusAddressBookSkeleton))
#define E_DBUS_ADDRESS_BOOK_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), E_DBUS_TYPE_ADDRESS_BOOK_SKELETON, EDBusAddressBookSkeletonClass))
#define E_DBUS_ADDRESS_BOOK_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), E_DBUS_TYPE_ADDRESS_BOOK_SKELETON, EDBusAddressBookSkeletonClass))
#define E_DBUS_IS_ADDRESS_BOOK_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_TYPE_ADDRESS_BOOK_SKELETON))
#define E_DBUS_IS_ADDRESS_BOOK_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), E_DBUS_TYPE_ADDRESS_BOOK_SKELETON))

typedef struct _EDBusAddressBookSkeleton EDBusAddressBookSkeleton;
typedef struct _EDBusAddressBookSkeletonClass EDBusAddressBookSkeletonClass;
typedef struct _EDBusAddressBookSkeletonPrivate EDBusAddressBookSkeletonPrivate;

struct _EDBusAddressBookSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  EDBusAddressBookSkeletonPrivate *priv;
};

struct _EDBusAddressBookSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType e_dbus_address_book_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (EDBusAddressBookSkeleton, g_object_unref)
#endif

EDBusAddressBook *e_dbus_address_book_skeleton_new (void);


G_END_DECLS

#endif /* __E_DBUS_ADDRESS_BOOK_H__ */
