/* SourceItem.c generated by valac 0.40.11, the Vala compiler
 * generated from SourceItem.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <libedataserver/libedataserver.h>
#include <float.h>
#include <math.h>


#define WIDGETS_TYPE_SOURCE_ITEM (widgets_source_item_get_type ())
#define WIDGETS_SOURCE_ITEM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_SOURCE_ITEM, WidgetsSourceItem))
#define WIDGETS_SOURCE_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_SOURCE_ITEM, WidgetsSourceItemClass))
#define WIDGETS_IS_SOURCE_ITEM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_SOURCE_ITEM))
#define WIDGETS_IS_SOURCE_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_SOURCE_ITEM))
#define WIDGETS_SOURCE_ITEM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_SOURCE_ITEM, WidgetsSourceItemClass))

typedef struct _WidgetsSourceItem WidgetsSourceItem;
typedef struct _WidgetsSourceItemClass WidgetsSourceItemClass;
typedef struct _WidgetsSourceItemPrivate WidgetsSourceItemPrivate;
enum  {
	WIDGETS_SOURCE_ITEM_0_PROPERTY,
	WIDGETS_SOURCE_ITEM_LOCATION_PROPERTY,
	WIDGETS_SOURCE_ITEM_LABEL_PROPERTY,
	WIDGETS_SOURCE_ITEM_SOURCE_PROPERTY,
	WIDGETS_SOURCE_ITEM_NUM_PROPERTIES
};
static GParamSpec* widgets_source_item_properties[WIDGETS_SOURCE_ITEM_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block67Data Block67Data;

#define MAYA_MODEL_TYPE_CALENDAR_MODEL (maya_model_calendar_model_get_type ())
#define MAYA_MODEL_CALENDAR_MODEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MAYA_MODEL_TYPE_CALENDAR_MODEL, MayaModelCalendarModel))
#define MAYA_MODEL_CALENDAR_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MAYA_MODEL_TYPE_CALENDAR_MODEL, MayaModelCalendarModelClass))
#define MAYA_MODEL_IS_CALENDAR_MODEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MAYA_MODEL_TYPE_CALENDAR_MODEL))
#define MAYA_MODEL_IS_CALENDAR_MODEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MAYA_MODEL_TYPE_CALENDAR_MODEL))
#define MAYA_MODEL_CALENDAR_MODEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MAYA_MODEL_TYPE_CALENDAR_MODEL, MayaModelCalendarModelClass))

typedef struct _MayaModelCalendarModel MayaModelCalendarModel;
typedef struct _MayaModelCalendarModelClass MayaModelCalendarModelClass;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
enum  {
	WIDGETS_SOURCE_ITEM_REMOVE_REQUEST_SIGNAL,
	WIDGETS_SOURCE_ITEM_EDIT_REQUEST_SIGNAL,
	WIDGETS_SOURCE_ITEM_NUM_SIGNALS
};
static guint widgets_source_item_signals[WIDGETS_SOURCE_ITEM_NUM_SIGNALS] = {0};

#define WIDGETS_TYPE_SOURCE_ITEM_HEADER (widgets_source_item_header_get_type ())
#define WIDGETS_SOURCE_ITEM_HEADER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_SOURCE_ITEM_HEADER, WidgetsSourceItemHeader))
#define WIDGETS_SOURCE_ITEM_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_SOURCE_ITEM_HEADER, WidgetsSourceItemHeaderClass))
#define WIDGETS_IS_SOURCE_ITEM_HEADER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_SOURCE_ITEM_HEADER))
#define WIDGETS_IS_SOURCE_ITEM_HEADER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_SOURCE_ITEM_HEADER))
#define WIDGETS_SOURCE_ITEM_HEADER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_SOURCE_ITEM_HEADER, WidgetsSourceItemHeaderClass))

typedef struct _WidgetsSourceItemHeader WidgetsSourceItemHeader;
typedef struct _WidgetsSourceItemHeaderClass WidgetsSourceItemHeaderClass;
typedef struct _WidgetsSourceItemHeaderPrivate WidgetsSourceItemHeaderPrivate;
enum  {
	WIDGETS_SOURCE_ITEM_HEADER_0_PROPERTY,
	WIDGETS_SOURCE_ITEM_HEADER_LABEL_PROPERTY,
	WIDGETS_SOURCE_ITEM_HEADER_NUM_PROPERTIES
};
static GParamSpec* widgets_source_item_header_properties[WIDGETS_SOURCE_ITEM_HEADER_NUM_PROPERTIES];

struct _WidgetsSourceItem {
	GtkListBoxRow parent_instance;
	WidgetsSourceItemPrivate * priv;
};

struct _WidgetsSourceItemClass {
	GtkListBoxRowClass parent_class;
};

struct _WidgetsSourceItemPrivate {
	gchar* _location;
	gchar* _label;
	ESource* _source;
	GtkLabel* calendar_name_label;
	GtkLabel* calendar_color_label;
	GtkCheckButton* visible_checkbutton;
};

struct _Block67Data {
	int _ref_count_;
	WidgetsSourceItem* self;
	ESourceCalendar* cal;
	ESource* source;
};

struct _WidgetsSourceItemHeader {
	GtkListBoxRow parent_instance;
	WidgetsSourceItemHeaderPrivate * priv;
	guint children;
};

struct _WidgetsSourceItemHeaderClass {
	GtkListBoxRowClass parent_class;
};

struct _WidgetsSourceItemHeaderPrivate {
	gchar* _label;
};


static gpointer widgets_source_item_parent_class = NULL;
static gpointer widgets_source_item_header_parent_class = NULL;

GType widgets_source_item_get_type (void) G_GNUC_CONST;
#define WIDGETS_SOURCE_ITEM_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_SOURCE_ITEM, WidgetsSourceItemPrivate))
WidgetsSourceItem* widgets_source_item_new (ESource* source);
WidgetsSourceItem* widgets_source_item_construct (GType object_type,
                                                  ESource* source);
static Block67Data* block67_data_ref (Block67Data* _data67_);
static void block67_data_unref (void * _userdata_);
static void widgets_source_item_set_source (WidgetsSourceItem* self,
                                     ESource* value);
static void widgets_source_item_set_label (WidgetsSourceItem* self,
                                    const gchar* value);
gchar* maya_util_get_source_location (ESource* source);
static void widgets_source_item_set_location (WidgetsSourceItem* self,
                                       const gchar* value);
static void __lambda127_ (Block67Data* _data67_);
GType maya_model_calendar_model_get_type (void) G_GNUC_CONST;
MayaModelCalendarModel* maya_model_calendar_model_get_default (void);
void maya_model_calendar_model_add_source (MayaModelCalendarModel* self,
                                           ESource* source);
void maya_model_calendar_model_remove_source (MayaModelCalendarModel* self,
                                              ESource* source);
static void ___lambda127__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                              gpointer self);
static void widgets_source_item_style_calendar_color (WidgetsSourceItem* self,
                                               const gchar* color);
void widgets_source_item_source_has_changed (WidgetsSourceItem* self);
static void _widgets_source_item_source_has_changed_e_source_changed (ESource* _sender,
                                                               gpointer self);
ESource* widgets_source_item_get_source (WidgetsSourceItem* self);
const gchar* widgets_source_item_get_location (WidgetsSourceItem* self);
const gchar* widgets_source_item_get_label (WidgetsSourceItem* self);
static void widgets_source_item_finalize (GObject * obj);
static void _vala_widgets_source_item_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec);
static void _vala_widgets_source_item_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec);
GType widgets_source_item_header_get_type (void) G_GNUC_CONST;
#define WIDGETS_SOURCE_ITEM_HEADER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_SOURCE_ITEM_HEADER, WidgetsSourceItemHeaderPrivate))
WidgetsSourceItemHeader* widgets_source_item_header_new (const gchar* label);
WidgetsSourceItemHeader* widgets_source_item_header_construct (GType object_type,
                                                               const gchar* label);
static void widgets_source_item_header_set_label (WidgetsSourceItemHeader* self,
                                           const gchar* value);
const gchar* widgets_source_item_header_get_label (WidgetsSourceItemHeader* self);
static void widgets_source_item_header_finalize (GObject * obj);
static void _vala_widgets_source_item_header_get_property (GObject * object,
                                                    guint property_id,
                                                    GValue * value,
                                                    GParamSpec * pspec);
static void _vala_widgets_source_item_header_set_property (GObject * object,
                                                    guint property_id,
                                                    const GValue * value,
                                                    GParamSpec * pspec);


static gpointer
_g_object_ref0 (gpointer self)
{
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	return self ? g_object_ref (self) : NULL;
#line 200 "SourceItem.c"
}


static Block67Data*
block67_data_ref (Block67Data* _data67_)
{
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_atomic_int_inc (&_data67_->_ref_count_);
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	return _data67_;
#line 211 "SourceItem.c"
}


static void
block67_data_unref (void * _userdata_)
{
	Block67Data* _data67_;
	_data67_ = (Block67Data*) _userdata_;
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	if (g_atomic_int_dec_and_test (&_data67_->_ref_count_)) {
#line 222 "SourceItem.c"
		WidgetsSourceItem* self;
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
		self = _data67_->self;
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
		_g_object_unref0 (_data67_->cal);
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
		_g_object_unref0 (_data67_->source);
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
		_g_object_unref0 (self);
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
		g_slice_free (Block67Data, _data67_);
#line 234 "SourceItem.c"
	}
}


static void
__lambda127_ (Block67Data* _data67_)
{
	WidgetsSourceItem* self;
	MayaModelCalendarModel* calmodel = NULL;
	MayaModelCalendarModel* _tmp0_;
	GtkCheckButton* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	GtkCheckButton* _tmp6_;
	gboolean _tmp7_;
	gboolean _tmp8_;
	GError * _inner_error_ = NULL;
#line 49 "/run/build/planner/src/Widgets/SourceItem.vala"
	self = _data67_->self;
#line 50 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp0_ = maya_model_calendar_model_get_default ();
#line 50 "/run/build/planner/src/Widgets/SourceItem.vala"
	calmodel = _tmp0_;
#line 51 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp1_ = self->priv->visible_checkbutton;
#line 51 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp2_ = gtk_toggle_button_get_active ((GtkToggleButton*) _tmp1_);
#line 51 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp3_ = _tmp2_;
#line 51 "/run/build/planner/src/Widgets/SourceItem.vala"
	if (_tmp3_ == TRUE) {
#line 266 "SourceItem.c"
		MayaModelCalendarModel* _tmp4_;
#line 52 "/run/build/planner/src/Widgets/SourceItem.vala"
		_tmp4_ = calmodel;
#line 52 "/run/build/planner/src/Widgets/SourceItem.vala"
		maya_model_calendar_model_add_source (_tmp4_, _data67_->source);
#line 272 "SourceItem.c"
	} else {
		MayaModelCalendarModel* _tmp5_;
#line 54 "/run/build/planner/src/Widgets/SourceItem.vala"
		_tmp5_ = calmodel;
#line 54 "/run/build/planner/src/Widgets/SourceItem.vala"
		maya_model_calendar_model_remove_source (_tmp5_, _data67_->source);
#line 279 "SourceItem.c"
	}
#line 57 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp6_ = self->priv->visible_checkbutton;
#line 57 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp7_ = gtk_toggle_button_get_active ((GtkToggleButton*) _tmp6_);
#line 57 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp8_ = _tmp7_;
#line 57 "/run/build/planner/src/Widgets/SourceItem.vala"
	e_source_selectable_set_selected ((ESourceSelectable*) _data67_->cal, _tmp8_);
#line 289 "SourceItem.c"
	{
#line 59 "/run/build/planner/src/Widgets/SourceItem.vala"
		e_source_write_sync (_data67_->source, NULL, &_inner_error_);
#line 59 "/run/build/planner/src/Widgets/SourceItem.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 295 "SourceItem.c"
			goto __catch43_g_error;
		}
	}
	goto __finally43;
	__catch43_g_error:
	{
		GError* _error_ = NULL;
		GError* _tmp9_;
		const gchar* _tmp10_;
#line 58 "/run/build/planner/src/Widgets/SourceItem.vala"
		_error_ = _inner_error_;
#line 58 "/run/build/planner/src/Widgets/SourceItem.vala"
		_inner_error_ = NULL;
#line 61 "/run/build/planner/src/Widgets/SourceItem.vala"
		_tmp9_ = _error_;
#line 61 "/run/build/planner/src/Widgets/SourceItem.vala"
		_tmp10_ = _tmp9_->message;
#line 61 "/run/build/planner/src/Widgets/SourceItem.vala"
		g_critical ("SourceItem.vala:61: %s", _tmp10_);
#line 58 "/run/build/planner/src/Widgets/SourceItem.vala"
		_g_error_free0 (_error_);
#line 317 "SourceItem.c"
	}
	__finally43:
#line 58 "/run/build/planner/src/Widgets/SourceItem.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 58 "/run/build/planner/src/Widgets/SourceItem.vala"
		_g_object_unref0 (calmodel);
#line 58 "/run/build/planner/src/Widgets/SourceItem.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 58 "/run/build/planner/src/Widgets/SourceItem.vala"
		g_clear_error (&_inner_error_);
#line 58 "/run/build/planner/src/Widgets/SourceItem.vala"
		return;
#line 330 "SourceItem.c"
	}
#line 49 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_object_unref0 (calmodel);
#line 334 "SourceItem.c"
}


static void
___lambda127__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                         gpointer self)
{
#line 49 "/run/build/planner/src/Widgets/SourceItem.vala"
	__lambda127_ (self);
#line 344 "SourceItem.c"
}


static void
_widgets_source_item_source_has_changed_e_source_changed (ESource* _sender,
                                                          gpointer self)
{
#line 76 "/run/build/planner/src/Widgets/SourceItem.vala"
	widgets_source_item_source_has_changed ((WidgetsSourceItem*) self);
#line 354 "SourceItem.c"
}


WidgetsSourceItem*
widgets_source_item_construct (GType object_type,
                               ESource* source)
{
	WidgetsSourceItem * self = NULL;
	Block67Data* _data67_;
	ESource* _tmp0_;
	ESourceExtension* _tmp1_;
	ESourceCalendar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	GtkLabel* _tmp5_;
	GtkLabel* _tmp6_;
	GtkLabel* _tmp7_;
	gchar* _tmp8_;
	gchar* _tmp9_;
	gchar* _tmp10_;
	gchar* _tmp11_;
	GtkCheckButton* _tmp12_;
	GtkCheckButton* _tmp13_;
	gboolean _tmp14_;
	gboolean _tmp15_;
	GtkCheckButton* _tmp16_;
	gchar* _tmp17_;
	gchar* _tmp18_;
	GtkGrid* calendar_grid = NULL;
	GtkGrid* _tmp19_;
	GtkCheckButton* _tmp20_;
	GtkLabel* _tmp21_;
	GtkLabel* _tmp22_;
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_return_val_if_fail (source != NULL, NULL);
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	_data67_ = g_slice_new0 (Block67Data);
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	_data67_->_ref_count_ = 1;
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp0_ = _g_object_ref0 (source);
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_object_unref0 (_data67_->source);
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	_data67_->source = _tmp0_;
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	self = (WidgetsSourceItem*) g_object_new (object_type, NULL);
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	_data67_->self = g_object_ref (self);
#line 35 "/run/build/planner/src/Widgets/SourceItem.vala"
	widgets_source_item_set_source (self, _data67_->source);
#line 38 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp1_ = e_source_get_extension (_data67_->source, E_SOURCE_EXTENSION_CALENDAR);
#line 38 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp2_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp1_, e_source_calendar_get_type (), ESourceCalendar));
#line 38 "/run/build/planner/src/Widgets/SourceItem.vala"
	_data67_->cal = _tmp2_;
#line 40 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp3_ = e_source_dup_display_name (_data67_->source);
#line 40 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp4_ = _tmp3_;
#line 40 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp5_ = (GtkLabel*) gtk_label_new (_tmp4_);
#line 40 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_object_ref_sink (_tmp5_);
#line 40 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_object_unref0 (self->priv->calendar_name_label);
#line 40 "/run/build/planner/src/Widgets/SourceItem.vala"
	self->priv->calendar_name_label = _tmp5_;
#line 40 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_free0 (_tmp4_);
#line 41 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp6_ = self->priv->calendar_name_label;
#line 41 "/run/build/planner/src/Widgets/SourceItem.vala"
	gtk_label_set_xalign (_tmp6_, (gfloat) 0);
#line 42 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp7_ = self->priv->calendar_name_label;
#line 42 "/run/build/planner/src/Widgets/SourceItem.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp7_, TRUE);
#line 44 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp8_ = e_source_dup_display_name (_data67_->source);
#line 44 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp9_ = _tmp8_;
#line 44 "/run/build/planner/src/Widgets/SourceItem.vala"
	widgets_source_item_set_label (self, _tmp9_);
#line 44 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_free0 (_tmp9_);
#line 45 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp10_ = maya_util_get_source_location (_data67_->source);
#line 45 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp11_ = _tmp10_;
#line 45 "/run/build/planner/src/Widgets/SourceItem.vala"
	widgets_source_item_set_location (self, _tmp11_);
#line 45 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_free0 (_tmp11_);
#line 47 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp12_ = (GtkCheckButton*) gtk_check_button_new ();
#line 47 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_object_ref_sink (_tmp12_);
#line 47 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_object_unref0 (self->priv->visible_checkbutton);
#line 47 "/run/build/planner/src/Widgets/SourceItem.vala"
	self->priv->visible_checkbutton = _tmp12_;
#line 48 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp13_ = self->priv->visible_checkbutton;
#line 48 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp14_ = e_source_selectable_get_selected ((ESourceSelectable*) _data67_->cal);
#line 48 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp15_ = _tmp14_;
#line 48 "/run/build/planner/src/Widgets/SourceItem.vala"
	gtk_toggle_button_set_active ((GtkToggleButton*) _tmp13_, _tmp15_);
#line 49 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp16_ = self->priv->visible_checkbutton;
#line 49 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_signal_connect_data ((GtkToggleButton*) _tmp16_, "toggled", (GCallback) ___lambda127__gtk_toggle_button_toggled, block67_data_ref (_data67_), (GClosureNotify) block67_data_unref, 0);
#line 65 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp17_ = e_source_selectable_dup_color ((ESourceSelectable*) _data67_->cal);
#line 65 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp18_ = _tmp17_;
#line 65 "/run/build/planner/src/Widgets/SourceItem.vala"
	widgets_source_item_style_calendar_color (self, _tmp18_);
#line 65 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_free0 (_tmp18_);
#line 67 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp19_ = (GtkGrid*) gtk_grid_new ();
#line 67 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_object_ref_sink (_tmp19_);
#line 67 "/run/build/planner/src/Widgets/SourceItem.vala"
	calendar_grid = _tmp19_;
#line 68 "/run/build/planner/src/Widgets/SourceItem.vala"
	gtk_grid_set_column_spacing (calendar_grid, 6);
#line 69 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_object_set ((GtkWidget*) calendar_grid, "margin", 6, NULL);
#line 70 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp20_ = self->priv->visible_checkbutton;
#line 70 "/run/build/planner/src/Widgets/SourceItem.vala"
	gtk_grid_attach (calendar_grid, (GtkWidget*) _tmp20_, 0, 0, 1, 1);
#line 71 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp21_ = self->priv->calendar_color_label;
#line 71 "/run/build/planner/src/Widgets/SourceItem.vala"
	gtk_grid_attach (calendar_grid, (GtkWidget*) _tmp21_, 1, 0, 1, 1);
#line 72 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp22_ = self->priv->calendar_name_label;
#line 72 "/run/build/planner/src/Widgets/SourceItem.vala"
	gtk_grid_attach (calendar_grid, (GtkWidget*) _tmp22_, 2, 0, 1, 1);
#line 74 "/run/build/planner/src/Widgets/SourceItem.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) calendar_grid);
#line 76 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_signal_connect_object (_data67_->source, "changed", (GCallback) _widgets_source_item_source_has_changed_e_source_changed, self, 0);
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_object_unref0 (calendar_grid);
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	block67_data_unref (_data67_);
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	_data67_ = NULL;
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	return self;
#line 512 "SourceItem.c"
}


WidgetsSourceItem*
widgets_source_item_new (ESource* source)
{
#line 34 "/run/build/planner/src/Widgets/SourceItem.vala"
	return widgets_source_item_construct (WIDGETS_TYPE_SOURCE_ITEM, source);
#line 521 "SourceItem.c"
}


static void
widgets_source_item_style_calendar_color (WidgetsSourceItem* self,
                                          const gchar* color)
{
	gchar* css_color = NULL;
	gchar* _tmp0_;
	GtkCssProvider* style_provider = NULL;
	GtkCssProvider* _tmp1_;
	GError * _inner_error_ = NULL;
#line 79 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_return_if_fail (self != NULL);
#line 79 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_return_if_fail (color != NULL);
#line 80 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp0_ = g_strdup_printf ("@define-color colorAccent %s;", color);
#line 80 "/run/build/planner/src/Widgets/SourceItem.vala"
	css_color = _tmp0_;
#line 82 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp1_ = gtk_css_provider_new ();
#line 82 "/run/build/planner/src/Widgets/SourceItem.vala"
	style_provider = _tmp1_;
#line 546 "SourceItem.c"
	{
		gint _tmp2_;
		gint _tmp3_;
		GtkCheckButton* _tmp4_;
		GtkStyleContext* _tmp5_;
#line 85 "/run/build/planner/src/Widgets/SourceItem.vala"
		_tmp2_ = strlen (css_color);
#line 85 "/run/build/planner/src/Widgets/SourceItem.vala"
		_tmp3_ = _tmp2_;
#line 85 "/run/build/planner/src/Widgets/SourceItem.vala"
		gtk_css_provider_load_from_data (style_provider, css_color, (gssize) _tmp3_, &_inner_error_);
#line 85 "/run/build/planner/src/Widgets/SourceItem.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 560 "SourceItem.c"
			goto __catch44_g_error;
		}
#line 86 "/run/build/planner/src/Widgets/SourceItem.vala"
		_tmp4_ = self->priv->visible_checkbutton;
#line 86 "/run/build/planner/src/Widgets/SourceItem.vala"
		_tmp5_ = gtk_widget_get_style_context ((GtkWidget*) _tmp4_);
#line 86 "/run/build/planner/src/Widgets/SourceItem.vala"
		gtk_style_context_add_provider (_tmp5_, (GtkStyleProvider*) style_provider, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 569 "SourceItem.c"
	}
	goto __finally44;
	__catch44_g_error:
	{
		GError* e = NULL;
		GError* _tmp6_;
		const gchar* _tmp7_;
#line 84 "/run/build/planner/src/Widgets/SourceItem.vala"
		e = _inner_error_;
#line 84 "/run/build/planner/src/Widgets/SourceItem.vala"
		_inner_error_ = NULL;
#line 88 "/run/build/planner/src/Widgets/SourceItem.vala"
		_tmp6_ = e;
#line 88 "/run/build/planner/src/Widgets/SourceItem.vala"
		_tmp7_ = _tmp6_->message;
#line 88 "/run/build/planner/src/Widgets/SourceItem.vala"
		g_warning ("SourceItem.vala:88: Could not create CSS Provider: %s\n" \
"Stylesheet:\n" \
"%s", _tmp7_, css_color);
#line 84 "/run/build/planner/src/Widgets/SourceItem.vala"
		_g_error_free0 (e);
#line 589 "SourceItem.c"
	}
	__finally44:
#line 84 "/run/build/planner/src/Widgets/SourceItem.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 84 "/run/build/planner/src/Widgets/SourceItem.vala"
		_g_object_unref0 (style_provider);
#line 84 "/run/build/planner/src/Widgets/SourceItem.vala"
		_g_free0 (css_color);
#line 84 "/run/build/planner/src/Widgets/SourceItem.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 84 "/run/build/planner/src/Widgets/SourceItem.vala"
		g_clear_error (&_inner_error_);
#line 84 "/run/build/planner/src/Widgets/SourceItem.vala"
		return;
#line 604 "SourceItem.c"
	}
#line 79 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_object_unref0 (style_provider);
#line 79 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_free0 (css_color);
#line 610 "SourceItem.c"
}


void
widgets_source_item_source_has_changed (WidgetsSourceItem* self)
{
	GtkLabel* _tmp0_;
	ESource* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	ESourceCalendar* cal = NULL;
	ESource* _tmp4_;
	ESourceExtension* _tmp5_;
	ESourceCalendar* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	GtkCheckButton* _tmp9_;
	gboolean _tmp10_;
	gboolean _tmp11_;
#line 92 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_return_if_fail (self != NULL);
#line 93 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp0_ = self->priv->calendar_name_label;
#line 93 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp1_ = self->priv->_source;
#line 93 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp2_ = e_source_dup_display_name (_tmp1_);
#line 93 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp3_ = _tmp2_;
#line 93 "/run/build/planner/src/Widgets/SourceItem.vala"
	gtk_label_set_label (_tmp0_, _tmp3_);
#line 93 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_free0 (_tmp3_);
#line 95 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp4_ = self->priv->_source;
#line 95 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp5_ = e_source_get_extension (_tmp4_, E_SOURCE_EXTENSION_CALENDAR);
#line 95 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp6_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp5_, e_source_calendar_get_type (), ESourceCalendar));
#line 95 "/run/build/planner/src/Widgets/SourceItem.vala"
	cal = _tmp6_;
#line 97 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp7_ = e_source_selectable_dup_color ((ESourceSelectable*) cal);
#line 97 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp8_ = _tmp7_;
#line 97 "/run/build/planner/src/Widgets/SourceItem.vala"
	widgets_source_item_style_calendar_color (self, _tmp8_);
#line 97 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_free0 (_tmp8_);
#line 99 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp9_ = self->priv->visible_checkbutton;
#line 99 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp10_ = e_source_selectable_get_selected ((ESourceSelectable*) cal);
#line 99 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp11_ = _tmp10_;
#line 99 "/run/build/planner/src/Widgets/SourceItem.vala"
	gtk_toggle_button_set_active ((GtkToggleButton*) _tmp9_, _tmp11_);
#line 92 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_object_unref0 (cal);
#line 670 "SourceItem.c"
}


const gchar*
widgets_source_item_get_location (WidgetsSourceItem* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 26 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 26 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp0_ = self->priv->_location;
#line 26 "/run/build/planner/src/Widgets/SourceItem.vala"
	result = _tmp0_;
#line 26 "/run/build/planner/src/Widgets/SourceItem.vala"
	return result;
#line 687 "SourceItem.c"
}


static void
widgets_source_item_set_location (WidgetsSourceItem* self,
                                  const gchar* value)
{
#line 26 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_return_if_fail (self != NULL);
#line 26 "/run/build/planner/src/Widgets/SourceItem.vala"
	if (g_strcmp0 (value, widgets_source_item_get_location (self)) != 0) {
#line 699 "SourceItem.c"
		gchar* _tmp0_;
#line 26 "/run/build/planner/src/Widgets/SourceItem.vala"
		_tmp0_ = g_strdup (value);
#line 26 "/run/build/planner/src/Widgets/SourceItem.vala"
		_g_free0 (self->priv->_location);
#line 26 "/run/build/planner/src/Widgets/SourceItem.vala"
		self->priv->_location = _tmp0_;
#line 26 "/run/build/planner/src/Widgets/SourceItem.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_source_item_properties[WIDGETS_SOURCE_ITEM_LOCATION_PROPERTY]);
#line 709 "SourceItem.c"
	}
}


const gchar*
widgets_source_item_get_label (WidgetsSourceItem* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 27 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 27 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp0_ = self->priv->_label;
#line 27 "/run/build/planner/src/Widgets/SourceItem.vala"
	result = _tmp0_;
#line 27 "/run/build/planner/src/Widgets/SourceItem.vala"
	return result;
#line 727 "SourceItem.c"
}


static void
widgets_source_item_set_label (WidgetsSourceItem* self,
                               const gchar* value)
{
#line 27 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_return_if_fail (self != NULL);
#line 27 "/run/build/planner/src/Widgets/SourceItem.vala"
	if (g_strcmp0 (value, widgets_source_item_get_label (self)) != 0) {
#line 739 "SourceItem.c"
		gchar* _tmp0_;
#line 27 "/run/build/planner/src/Widgets/SourceItem.vala"
		_tmp0_ = g_strdup (value);
#line 27 "/run/build/planner/src/Widgets/SourceItem.vala"
		_g_free0 (self->priv->_label);
#line 27 "/run/build/planner/src/Widgets/SourceItem.vala"
		self->priv->_label = _tmp0_;
#line 27 "/run/build/planner/src/Widgets/SourceItem.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_source_item_properties[WIDGETS_SOURCE_ITEM_LABEL_PROPERTY]);
#line 749 "SourceItem.c"
	}
}


ESource*
widgets_source_item_get_source (WidgetsSourceItem* self)
{
	ESource* result;
	ESource* _tmp0_;
#line 28 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 28 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp0_ = self->priv->_source;
#line 28 "/run/build/planner/src/Widgets/SourceItem.vala"
	result = _tmp0_;
#line 28 "/run/build/planner/src/Widgets/SourceItem.vala"
	return result;
#line 767 "SourceItem.c"
}


static void
widgets_source_item_set_source (WidgetsSourceItem* self,
                                ESource* value)
{
#line 28 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_return_if_fail (self != NULL);
#line 28 "/run/build/planner/src/Widgets/SourceItem.vala"
	if (widgets_source_item_get_source (self) != value) {
#line 779 "SourceItem.c"
		ESource* _tmp0_;
#line 28 "/run/build/planner/src/Widgets/SourceItem.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 28 "/run/build/planner/src/Widgets/SourceItem.vala"
		_g_object_unref0 (self->priv->_source);
#line 28 "/run/build/planner/src/Widgets/SourceItem.vala"
		self->priv->_source = _tmp0_;
#line 28 "/run/build/planner/src/Widgets/SourceItem.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_source_item_properties[WIDGETS_SOURCE_ITEM_SOURCE_PROPERTY]);
#line 789 "SourceItem.c"
	}
}


static void
widgets_source_item_class_init (WidgetsSourceItemClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
	widgets_source_item_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_type_class_add_private (klass, sizeof (WidgetsSourceItemPrivate));
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_source_item_get_property;
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_source_item_set_property;
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_source_item_finalize;
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_SOURCE_ITEM_LOCATION_PROPERTY, widgets_source_item_properties[WIDGETS_SOURCE_ITEM_LOCATION_PROPERTY] = g_param_spec_string ("location", "location", "location", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_SOURCE_ITEM_LABEL_PROPERTY, widgets_source_item_properties[WIDGETS_SOURCE_ITEM_LABEL_PROPERTY] = g_param_spec_string ("label", "label", "label", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_SOURCE_ITEM_SOURCE_PROPERTY, widgets_source_item_properties[WIDGETS_SOURCE_ITEM_SOURCE_PROPERTY] = g_param_spec_object ("source", "source", "source", e_source_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
	widgets_source_item_signals[WIDGETS_SOURCE_ITEM_REMOVE_REQUEST_SIGNAL] = g_signal_new ("remove-request", WIDGETS_TYPE_SOURCE_ITEM, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, e_source_get_type ());
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
	widgets_source_item_signals[WIDGETS_SOURCE_ITEM_EDIT_REQUEST_SIGNAL] = g_signal_new ("edit-request", WIDGETS_TYPE_SOURCE_ITEM, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, e_source_get_type ());
#line 817 "SourceItem.c"
}


static void
widgets_source_item_instance_init (WidgetsSourceItem * self)
{
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
	self->priv = WIDGETS_SOURCE_ITEM_GET_PRIVATE (self);
#line 826 "SourceItem.c"
}


static void
widgets_source_item_finalize (GObject * obj)
{
	WidgetsSourceItem * self;
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_SOURCE_ITEM, WidgetsSourceItem);
#line 26 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_free0 (self->priv->_location);
#line 27 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_free0 (self->priv->_label);
#line 28 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_object_unref0 (self->priv->_source);
#line 30 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_object_unref0 (self->priv->calendar_name_label);
#line 31 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_object_unref0 (self->priv->calendar_color_label);
#line 32 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_object_unref0 (self->priv->visible_checkbutton);
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
	G_OBJECT_CLASS (widgets_source_item_parent_class)->finalize (obj);
#line 850 "SourceItem.c"
}


GType
widgets_source_item_get_type (void)
{
	static volatile gsize widgets_source_item_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_source_item_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsSourceItemClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_source_item_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsSourceItem), 0, (GInstanceInitFunc) widgets_source_item_instance_init, NULL };
		GType widgets_source_item_type_id;
		widgets_source_item_type_id = g_type_register_static (gtk_list_box_row_get_type (), "WidgetsSourceItem", &g_define_type_info, 0);
		g_once_init_leave (&widgets_source_item_type_id__volatile, widgets_source_item_type_id);
	}
	return widgets_source_item_type_id__volatile;
}


static void
_vala_widgets_source_item_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec)
{
	WidgetsSourceItem * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_SOURCE_ITEM, WidgetsSourceItem);
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		case WIDGETS_SOURCE_ITEM_LOCATION_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		g_value_set_string (value, widgets_source_item_get_location (self));
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		case WIDGETS_SOURCE_ITEM_LABEL_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		g_value_set_string (value, widgets_source_item_get_label (self));
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		case WIDGETS_SOURCE_ITEM_SOURCE_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		g_value_set_object (value, widgets_source_item_get_source (self));
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		break;
#line 896 "SourceItem.c"
		default:
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		break;
#line 902 "SourceItem.c"
	}
}


static void
_vala_widgets_source_item_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec)
{
	WidgetsSourceItem * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_SOURCE_ITEM, WidgetsSourceItem);
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		case WIDGETS_SOURCE_ITEM_LOCATION_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		widgets_source_item_set_location (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		case WIDGETS_SOURCE_ITEM_LABEL_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		widgets_source_item_set_label (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		case WIDGETS_SOURCE_ITEM_SOURCE_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		widgets_source_item_set_source (self, g_value_get_object (value));
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		break;
#line 935 "SourceItem.c"
		default:
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/SourceItem.vala"
		break;
#line 941 "SourceItem.c"
	}
}


WidgetsSourceItemHeader*
widgets_source_item_header_construct (GType object_type,
                                      const gchar* label)
{
	WidgetsSourceItemHeader * self = NULL;
	GtkLabel* header_label = NULL;
	GtkLabel* _tmp0_;
	GtkStyleContext* _tmp1_;
#line 106 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_return_val_if_fail (label != NULL, NULL);
#line 106 "/run/build/planner/src/Widgets/SourceItem.vala"
	self = (WidgetsSourceItemHeader*) g_object_new (object_type, NULL);
#line 107 "/run/build/planner/src/Widgets/SourceItem.vala"
	widgets_source_item_header_set_label (self, label);
#line 108 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp0_ = (GtkLabel*) gtk_label_new (label);
#line 108 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_object_ref_sink (_tmp0_);
#line 108 "/run/build/planner/src/Widgets/SourceItem.vala"
	header_label = _tmp0_;
#line 109 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) header_label);
#line 109 "/run/build/planner/src/Widgets/SourceItem.vala"
	gtk_style_context_add_class (_tmp1_, "h4");
#line 110 "/run/build/planner/src/Widgets/SourceItem.vala"
	gtk_label_set_xalign (header_label, 0.0f);
#line 111 "/run/build/planner/src/Widgets/SourceItem.vala"
	gtk_widget_set_hexpand ((GtkWidget*) header_label, TRUE);
#line 112 "/run/build/planner/src/Widgets/SourceItem.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) header_label);
#line 106 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_object_unref0 (header_label);
#line 106 "/run/build/planner/src/Widgets/SourceItem.vala"
	return self;
#line 980 "SourceItem.c"
}


WidgetsSourceItemHeader*
widgets_source_item_header_new (const gchar* label)
{
#line 106 "/run/build/planner/src/Widgets/SourceItem.vala"
	return widgets_source_item_header_construct (WIDGETS_TYPE_SOURCE_ITEM_HEADER, label);
#line 989 "SourceItem.c"
}


const gchar*
widgets_source_item_header_get_label (WidgetsSourceItemHeader* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 104 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 104 "/run/build/planner/src/Widgets/SourceItem.vala"
	_tmp0_ = self->priv->_label;
#line 104 "/run/build/planner/src/Widgets/SourceItem.vala"
	result = _tmp0_;
#line 104 "/run/build/planner/src/Widgets/SourceItem.vala"
	return result;
#line 1006 "SourceItem.c"
}


static void
widgets_source_item_header_set_label (WidgetsSourceItemHeader* self,
                                      const gchar* value)
{
#line 104 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_return_if_fail (self != NULL);
#line 104 "/run/build/planner/src/Widgets/SourceItem.vala"
	if (g_strcmp0 (value, widgets_source_item_header_get_label (self)) != 0) {
#line 1018 "SourceItem.c"
		gchar* _tmp0_;
#line 104 "/run/build/planner/src/Widgets/SourceItem.vala"
		_tmp0_ = g_strdup (value);
#line 104 "/run/build/planner/src/Widgets/SourceItem.vala"
		_g_free0 (self->priv->_label);
#line 104 "/run/build/planner/src/Widgets/SourceItem.vala"
		self->priv->_label = _tmp0_;
#line 104 "/run/build/planner/src/Widgets/SourceItem.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_source_item_header_properties[WIDGETS_SOURCE_ITEM_HEADER_LABEL_PROPERTY]);
#line 1028 "SourceItem.c"
	}
}


static void
widgets_source_item_header_class_init (WidgetsSourceItemHeaderClass * klass)
{
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
	widgets_source_item_header_parent_class = g_type_class_peek_parent (klass);
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_type_class_add_private (klass, sizeof (WidgetsSourceItemHeaderPrivate));
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_source_item_header_get_property;
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_source_item_header_set_property;
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_source_item_header_finalize;
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_SOURCE_ITEM_HEADER_LABEL_PROPERTY, widgets_source_item_header_properties[WIDGETS_SOURCE_ITEM_HEADER_LABEL_PROPERTY] = g_param_spec_string ("label", "label", "label", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1048 "SourceItem.c"
}


static void
widgets_source_item_header_instance_init (WidgetsSourceItemHeader * self)
{
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
	self->priv = WIDGETS_SOURCE_ITEM_HEADER_GET_PRIVATE (self);
#line 105 "/run/build/planner/src/Widgets/SourceItem.vala"
	self->children = (guint) 1;
#line 1059 "SourceItem.c"
}


static void
widgets_source_item_header_finalize (GObject * obj)
{
	WidgetsSourceItemHeader * self;
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_SOURCE_ITEM_HEADER, WidgetsSourceItemHeader);
#line 104 "/run/build/planner/src/Widgets/SourceItem.vala"
	_g_free0 (self->priv->_label);
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
	G_OBJECT_CLASS (widgets_source_item_header_parent_class)->finalize (obj);
#line 1073 "SourceItem.c"
}


GType
widgets_source_item_header_get_type (void)
{
	static volatile gsize widgets_source_item_header_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_source_item_header_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsSourceItemHeaderClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_source_item_header_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsSourceItemHeader), 0, (GInstanceInitFunc) widgets_source_item_header_instance_init, NULL };
		GType widgets_source_item_header_type_id;
		widgets_source_item_header_type_id = g_type_register_static (gtk_list_box_row_get_type (), "WidgetsSourceItemHeader", &g_define_type_info, 0);
		g_once_init_leave (&widgets_source_item_header_type_id__volatile, widgets_source_item_header_type_id);
	}
	return widgets_source_item_header_type_id__volatile;
}


static void
_vala_widgets_source_item_header_get_property (GObject * object,
                                               guint property_id,
                                               GValue * value,
                                               GParamSpec * pspec)
{
	WidgetsSourceItemHeader * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_SOURCE_ITEM_HEADER, WidgetsSourceItemHeader);
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
	switch (property_id) {
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
		case WIDGETS_SOURCE_ITEM_HEADER_LABEL_PROPERTY:
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
		g_value_set_string (value, widgets_source_item_header_get_label (self));
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
		break;
#line 1107 "SourceItem.c"
		default:
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
		break;
#line 1113 "SourceItem.c"
	}
}


static void
_vala_widgets_source_item_header_set_property (GObject * object,
                                               guint property_id,
                                               const GValue * value,
                                               GParamSpec * pspec)
{
	WidgetsSourceItemHeader * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_SOURCE_ITEM_HEADER, WidgetsSourceItemHeader);
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
	switch (property_id) {
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
		case WIDGETS_SOURCE_ITEM_HEADER_LABEL_PROPERTY:
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
		widgets_source_item_header_set_label (self, g_value_get_string (value));
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
		break;
#line 1134 "SourceItem.c"
		default:
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 103 "/run/build/planner/src/Widgets/SourceItem.vala"
		break;
#line 1140 "SourceItem.c"
	}
}



