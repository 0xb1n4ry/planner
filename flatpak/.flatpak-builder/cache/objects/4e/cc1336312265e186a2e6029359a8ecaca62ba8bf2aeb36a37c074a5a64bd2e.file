/* unity-extra-utils.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-extra-utils.vala, do not modify */

/*
 * Copyright (C) 2012 Canonical Ltd
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authored by Pawel Stolowski <pawel.stolowski@canonical.com>
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include "unity-extras.h"
#include <gio/gio.h>


#define UNITY_EXTRAS_TYPE_FILE_MANAGER_INTERFACE (unity_extras_file_manager_interface_get_type ())
#define UNITY_EXTRAS_FILE_MANAGER_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_EXTRAS_TYPE_FILE_MANAGER_INTERFACE, UnityExtrasFileManagerInterface))
#define UNITY_EXTRAS_IS_FILE_MANAGER_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_EXTRAS_TYPE_FILE_MANAGER_INTERFACE))
#define UNITY_EXTRAS_FILE_MANAGER_INTERFACE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), UNITY_EXTRAS_TYPE_FILE_MANAGER_INTERFACE, UnityExtrasFileManagerInterfaceIface))

typedef struct _UnityExtrasFileManagerInterface UnityExtrasFileManagerInterface;
typedef struct _UnityExtrasFileManagerInterfaceIface UnityExtrasFileManagerInterfaceIface;

#define UNITY_EXTRAS_TYPE_FILE_MANAGER_INTERFACE_PROXY (unity_extras_file_manager_interface_proxy_get_type ())
typedef GDBusProxy UnityExtrasFileManagerInterfaceProxy;
typedef GDBusProxyClass UnityExtrasFileManagerInterfaceProxyClass;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _UnityExtrasShowInFolderData UnityExtrasShowInFolderData;
#define _g_variant_type_free0(var) ((var == NULL) ? NULL : (var = (g_variant_type_free (var), NULL)))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))

struct _UnityExtrasFileManagerInterfaceIface {
	GTypeInterface parent_iface;
	void (*show_items) (UnityExtrasFileManagerInterface* self, gchar** uris, int uris_length1, const gchar* startup_id, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*show_items_finish) (UnityExtrasFileManagerInterface* self, GAsyncResult* _res_, GError** error);
};

struct _UnityExtrasShowInFolderData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	gchar* uri;
	gchar** uris;
	gchar* _tmp0_;
	gchar** _tmp1_;
	gint uris_length1;
	gint _uris_size_;
	GFile* file;
	GFile* _tmp2_;
	GFile* _tmp3_;
	GFile* parent_dir;
	GFile* _tmp4_;
	GFile* _tmp5_;
	GFile* _tmp6_;
	UnityExtrasFileManagerInterface* service;
	UnityExtrasFileManagerInterface* _tmp7_;
	UnityExtrasFileManagerInterface* _tmp8_;
	gchar** _tmp9_;
	gint _tmp9__length1;
	GError* e;
	GError* _tmp10_;
	const gchar* _tmp11_;
	GFile* _tmp12_;
	gchar* _tmp13_;
	gchar* _tmp14_;
	gchar* _tmp15_;
	gchar* _tmp16_;
	GError* _tmp17_;
	GError* _tmp18_;
	gchar* _tmp19_;
	gchar* _tmp20_;
	GError* _tmp21_;
	GError* _tmp22_;
	GError * _inner_error_;
};



#define UNITY_EXTRAS_FILE_MANAGER_DBUS_NAME "org.freedesktop.FileManager1"
#define UNITY_EXTRAS_FILE_MANAGER_DBUS_PATH "/org/freedesktop/FileManager1"
GType unity_extras_file_manager_interface_proxy_get_type (void) G_GNUC_CONST;
guint unity_extras_file_manager_interface_register_object (void* object,
                                                           GDBusConnection* connection,
                                                           const gchar* path,
                                                           GError** error);
GType unity_extras_file_manager_interface_get_type (void) G_GNUC_CONST;
void unity_extras_file_manager_interface_show_items (UnityExtrasFileManagerInterface* self,
                                                     gchar** uris,
                                                     int uris_length1,
                                                     const gchar* startup_id,
                                                     GAsyncReadyCallback _callback_,
                                                     gpointer _user_data_);
void unity_extras_file_manager_interface_show_items_finish (UnityExtrasFileManagerInterface* self,
                                                            GAsyncResult* _res_,
                                                            GError** error);
static void unity_extras_file_manager_interface_proxy_g_signal (GDBusProxy* proxy,
                                                         const gchar* sender_name,
                                                         const gchar* signal_name,
                                                         GVariant* parameters);
static void _vala_g_async_ready_callback (GObject *source_object,
                                   GAsyncResult *res,
                                   void *user_data);
static void unity_extras_file_manager_interface_proxy_show_items_async (UnityExtrasFileManagerInterface* self,
                                                                 gchar** uris,
                                                                 int uris_length1,
                                                                 const gchar* startup_id,
                                                                 GAsyncReadyCallback _callback_,
                                                                 gpointer _user_data_);
static void unity_extras_file_manager_interface_proxy_show_items_finish (UnityExtrasFileManagerInterface* self,
                                                                  GAsyncResult* _res_,
                                                                  GError** error);
static void unity_extras_file_manager_interface_proxy_unity_extras_file_manager_interface_interface_init (UnityExtrasFileManagerInterfaceIface* iface);
static void _dbus_unity_extras_file_manager_interface_show_items (UnityExtrasFileManagerInterface* self,
                                                           GVariant* _parameters_,
                                                           GDBusMethodInvocation* invocation);
static void _dbus_unity_extras_file_manager_interface_show_items_ready (GObject * source_object,
                                                                 GAsyncResult * _res_,
                                                                 gpointer _user_data_);
static void unity_extras_file_manager_interface_dbus_interface_method_call (GDBusConnection* connection,
                                                                     const gchar* sender,
                                                                     const gchar* object_path,
                                                                     const gchar* interface_name,
                                                                     const gchar* method_name,
                                                                     GVariant* parameters,
                                                                     GDBusMethodInvocation* invocation,
                                                                     gpointer user_data);
static GVariant* unity_extras_file_manager_interface_dbus_interface_get_property (GDBusConnection* connection,
                                                                           const gchar* sender,
                                                                           const gchar* object_path,
                                                                           const gchar* interface_name,
                                                                           const gchar* property_name,
                                                                           GError** error,
                                                                           gpointer user_data);
static gboolean unity_extras_file_manager_interface_dbus_interface_set_property (GDBusConnection* connection,
                                                                          const gchar* sender,
                                                                          const gchar* object_path,
                                                                          const gchar* interface_name,
                                                                          const gchar* property_name,
                                                                          GVariant* value,
                                                                          GError** error,
                                                                          gpointer user_data);
static void _unity_extras_file_manager_interface_unregister_object (gpointer user_data);
static void unity_extras_show_in_folder_data_free (gpointer _data);
static void unity_extras_show_in_folder_async_ready_wrapper (GObject *source_object,
                                                      GAsyncResult *res,
                                                      void *user_data);
static gboolean unity_extras_show_in_folder_co (UnityExtrasShowInFolderData* _data_);
static void unity_extras_show_in_folder_ready (GObject* source_object,
                                        GAsyncResult* _res_,
                                        gpointer _user_data_);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);

static const GDBusArgInfo _unity_extras_file_manager_interface_dbus_arg_info_show_items_uris = {-1, "uris", "as"};
static const GDBusArgInfo _unity_extras_file_manager_interface_dbus_arg_info_show_items_startup_id = {-1, "startup_id", "s"};
static const GDBusArgInfo * const _unity_extras_file_manager_interface_dbus_arg_info_show_items_in[] = {&_unity_extras_file_manager_interface_dbus_arg_info_show_items_uris, &_unity_extras_file_manager_interface_dbus_arg_info_show_items_startup_id, NULL};
static const GDBusArgInfo * const _unity_extras_file_manager_interface_dbus_arg_info_show_items_out[] = {NULL};
static const GDBusMethodInfo _unity_extras_file_manager_interface_dbus_method_info_show_items = {-1, "ShowItems", (GDBusArgInfo **) (&_unity_extras_file_manager_interface_dbus_arg_info_show_items_in), (GDBusArgInfo **) (&_unity_extras_file_manager_interface_dbus_arg_info_show_items_out)};
static const GDBusMethodInfo * const _unity_extras_file_manager_interface_dbus_method_info[] = {&_unity_extras_file_manager_interface_dbus_method_info_show_items, NULL};
static const GDBusSignalInfo * const _unity_extras_file_manager_interface_dbus_signal_info[] = {NULL};
static const GDBusPropertyInfo * const _unity_extras_file_manager_interface_dbus_property_info[] = {NULL};
static const GDBusInterfaceInfo _unity_extras_file_manager_interface_dbus_interface_info = {-1, "org.freedesktop.FileManager1", (GDBusMethodInfo **) (&_unity_extras_file_manager_interface_dbus_method_info), (GDBusSignalInfo **) (&_unity_extras_file_manager_interface_dbus_signal_info), (GDBusPropertyInfo **) (&_unity_extras_file_manager_interface_dbus_property_info)};
static const GDBusInterfaceVTable _unity_extras_file_manager_interface_dbus_interface_vtable = {unity_extras_file_manager_interface_dbus_interface_method_call, unity_extras_file_manager_interface_dbus_interface_get_property, unity_extras_file_manager_interface_dbus_interface_set_property};

void
unity_extras_file_manager_interface_show_items (UnityExtrasFileManagerInterface* self,
                                                gchar** uris,
                                                int uris_length1,
                                                const gchar* startup_id,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_)
{
	UNITY_EXTRAS_FILE_MANAGER_INTERFACE_GET_INTERFACE (self)->show_items (self, uris, uris_length1, startup_id, _callback_, _user_data_);
}


void
unity_extras_file_manager_interface_show_items_finish (UnityExtrasFileManagerInterface* self,
                                                       GAsyncResult* _res_,
                                                       GError** error)
{
	UNITY_EXTRAS_FILE_MANAGER_INTERFACE_GET_INTERFACE (self)->show_items_finish (self, _res_, error);
}


static void
unity_extras_file_manager_interface_default_init (UnityExtrasFileManagerInterfaceIface * iface)
{
}


GType
unity_extras_file_manager_interface_get_type (void)
{
	static volatile gsize unity_extras_file_manager_interface_type_id__volatile = 0;
	if (g_once_init_enter (&unity_extras_file_manager_interface_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityExtrasFileManagerInterfaceIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_extras_file_manager_interface_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
		GType unity_extras_file_manager_interface_type_id;
		unity_extras_file_manager_interface_type_id = g_type_register_static (G_TYPE_INTERFACE, "UnityExtrasFileManagerInterface", &g_define_type_info, 0);
		g_type_interface_add_prerequisite (unity_extras_file_manager_interface_type_id, G_TYPE_OBJECT);
		g_type_set_qdata (unity_extras_file_manager_interface_type_id, g_quark_from_static_string ("vala-dbus-proxy-type"), (void*) unity_extras_file_manager_interface_proxy_get_type);
		g_type_set_qdata (unity_extras_file_manager_interface_type_id, g_quark_from_static_string ("vala-dbus-interface-name"), "org.freedesktop.FileManager1");
		g_type_set_qdata (unity_extras_file_manager_interface_type_id, g_quark_from_static_string ("vala-dbus-interface-info"), (void*) (&_unity_extras_file_manager_interface_dbus_interface_info));
		g_type_set_qdata (unity_extras_file_manager_interface_type_id, g_quark_from_static_string ("vala-dbus-register-object"), (void*) unity_extras_file_manager_interface_register_object);
		g_once_init_leave (&unity_extras_file_manager_interface_type_id__volatile, unity_extras_file_manager_interface_type_id);
	}
	return unity_extras_file_manager_interface_type_id__volatile;
}


G_DEFINE_TYPE_EXTENDED (UnityExtrasFileManagerInterfaceProxy, unity_extras_file_manager_interface_proxy, G_TYPE_DBUS_PROXY, 0, G_IMPLEMENT_INTERFACE (UNITY_EXTRAS_TYPE_FILE_MANAGER_INTERFACE, unity_extras_file_manager_interface_proxy_unity_extras_file_manager_interface_interface_init) )
static void
unity_extras_file_manager_interface_proxy_class_init (UnityExtrasFileManagerInterfaceProxyClass* klass)
{
	G_DBUS_PROXY_CLASS (klass)->g_signal = unity_extras_file_manager_interface_proxy_g_signal;
}


static void
unity_extras_file_manager_interface_proxy_g_signal (GDBusProxy* proxy,
                                                    const gchar* sender_name,
                                                    const gchar* signal_name,
                                                    GVariant* parameters)
{
}


static void
unity_extras_file_manager_interface_proxy_init (UnityExtrasFileManagerInterfaceProxy* self)
{
}


static void
_vala_g_async_ready_callback (GObject *source_object,
                              GAsyncResult *res,
                              void *user_data)
{
	g_task_return_pointer (user_data, g_object_ref (res), g_object_unref);
	g_object_unref (user_data);
}


static void
unity_extras_file_manager_interface_proxy_show_items_async (UnityExtrasFileManagerInterface* self,
                                                            gchar** uris,
                                                            int uris_length1,
                                                            const gchar* startup_id,
                                                            GAsyncReadyCallback _callback_,
                                                            gpointer _user_data_)
{
	GDBusMessage *_message;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	gchar** _tmp14_;
	GVariantBuilder _tmp15_;
	int _tmp16_;
	_message = g_dbus_message_new_method_call (g_dbus_proxy_get_name ((GDBusProxy *) self), g_dbus_proxy_get_object_path ((GDBusProxy *) self), "org.freedesktop.FileManager1", "ShowItems");
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	_tmp14_ = uris;
	g_variant_builder_init (&_tmp15_, G_VARIANT_TYPE ("as"));
	for (_tmp16_ = 0; _tmp16_ < uris_length1; _tmp16_++) {
		g_variant_builder_add_value (&_tmp15_, g_variant_new_string (*_tmp14_));
		_tmp14_++;
	}
	g_variant_builder_add_value (&_arguments_builder, g_variant_builder_end (&_tmp15_));
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (startup_id));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_message_set_body (_message, _arguments);
	g_dbus_connection_send_message_with_reply (g_dbus_proxy_get_connection ((GDBusProxy *) self), _message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, g_dbus_proxy_get_default_timeout ((GDBusProxy *) self), NULL, NULL, _vala_g_async_ready_callback, g_task_new ((GObject *) self, NULL, _callback_, _user_data_));
	g_object_unref (_message);
}


static void
unity_extras_file_manager_interface_proxy_show_items_finish (UnityExtrasFileManagerInterface* self,
                                                             GAsyncResult* _res_,
                                                             GError** error)
{
	GAsyncResult *_inner_res;
	GDBusMessage *_reply_message;
	_inner_res = g_task_propagate_pointer ((GTask *) _res_, NULL);
	_reply_message = g_dbus_connection_send_message_with_reply_finish (g_dbus_proxy_get_connection ((GDBusProxy *) self), _inner_res, error);
	g_object_unref (_inner_res);
	if (!_reply_message) {
		return;
	}
	if (g_dbus_message_to_gerror (_reply_message, error)) {
		g_object_unref (_reply_message);
		return;
	}
	g_object_unref (_reply_message);
}


static void
unity_extras_file_manager_interface_proxy_unity_extras_file_manager_interface_interface_init (UnityExtrasFileManagerInterfaceIface* iface)
{
	iface->show_items = unity_extras_file_manager_interface_proxy_show_items_async;
	iface->show_items_finish = unity_extras_file_manager_interface_proxy_show_items_finish;
}


static void
_dbus_unity_extras_file_manager_interface_show_items (UnityExtrasFileManagerInterface* self,
                                                      GVariant* _parameters_,
                                                      GDBusMethodInvocation* invocation)
{
	GVariantIter _arguments_iter;
	gchar** uris = NULL;
	int uris_length1 = 0;
	GVariant* _tmp17_;
	gchar** _tmp18_;
	int _tmp18__length;
	int _tmp18__size;
	int _tmp18__length1;
	GVariantIter _tmp19_;
	GVariant* _tmp20_;
	gchar* startup_id = NULL;
	GVariant* _tmp21_;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	_tmp17_ = g_variant_iter_next_value (&_arguments_iter);
	_tmp18_ = g_new (gchar*, 5);
	_tmp18__length = 0;
	_tmp18__size = 4;
	_tmp18__length1 = 0;
	g_variant_iter_init (&_tmp19_, _tmp17_);
	for (; (_tmp20_ = g_variant_iter_next_value (&_tmp19_)) != NULL; _tmp18__length1++) {
		if (_tmp18__size == _tmp18__length) {
			_tmp18__size = 2 * _tmp18__size;
			_tmp18_ = g_renew (gchar*, _tmp18_, _tmp18__size + 1);
		}
		_tmp18_[_tmp18__length++] = g_variant_dup_string (_tmp20_, NULL);
		g_variant_unref (_tmp20_);
	}
	uris_length1 = _tmp18__length1;
	_tmp18_[_tmp18__length] = NULL;
	uris = _tmp18_;
	g_variant_unref (_tmp17_);
	_tmp21_ = g_variant_iter_next_value (&_arguments_iter);
	startup_id = g_variant_dup_string (_tmp21_, NULL);
	g_variant_unref (_tmp21_);
	unity_extras_file_manager_interface_show_items (self, uris, uris_length1, startup_id, (GAsyncReadyCallback) _dbus_unity_extras_file_manager_interface_show_items_ready, invocation);
	uris = (_vala_array_free (uris, uris_length1, (GDestroyNotify) g_free), NULL);
	_g_free0 (startup_id);
}


static void
_dbus_unity_extras_file_manager_interface_show_items_ready (GObject * source_object,
                                                            GAsyncResult * _res_,
                                                            gpointer _user_data_)
{
	GDBusMethodInvocation * invocation;
	GError* error = NULL;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	invocation = _user_data_;
	unity_extras_file_manager_interface_show_items_finish ((UnityExtrasFileManagerInterface*) source_object, _res_, &error);
	if (error) {
		g_dbus_method_invocation_return_gerror (invocation, error);
		g_error_free (error);
		return;
	}
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
}


static void
unity_extras_file_manager_interface_dbus_interface_method_call (GDBusConnection* connection,
                                                                const gchar* sender,
                                                                const gchar* object_path,
                                                                const gchar* interface_name,
                                                                const gchar* method_name,
                                                                GVariant* parameters,
                                                                GDBusMethodInvocation* invocation,
                                                                gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (method_name, "ShowItems") == 0) {
		_dbus_unity_extras_file_manager_interface_show_items (object, parameters, invocation);
	} else {
		g_object_unref (invocation);
	}
}


static GVariant*
unity_extras_file_manager_interface_dbus_interface_get_property (GDBusConnection* connection,
                                                                 const gchar* sender,
                                                                 const gchar* object_path,
                                                                 const gchar* interface_name,
                                                                 const gchar* property_name,
                                                                 GError** error,
                                                                 gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	return NULL;
}


static gboolean
unity_extras_file_manager_interface_dbus_interface_set_property (GDBusConnection* connection,
                                                                 const gchar* sender,
                                                                 const gchar* object_path,
                                                                 const gchar* interface_name,
                                                                 const gchar* property_name,
                                                                 GVariant* value,
                                                                 GError** error,
                                                                 gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	return FALSE;
}


guint
unity_extras_file_manager_interface_register_object (gpointer object,
                                                     GDBusConnection* connection,
                                                     const gchar* path,
                                                     GError** error)
{
	guint result;
	gpointer *data;
	data = g_new (gpointer, 3);
	data[0] = g_object_ref (object);
	data[1] = g_object_ref (connection);
	data[2] = g_strdup (path);
	result = g_dbus_connection_register_object (connection, path, (GDBusInterfaceInfo *) (&_unity_extras_file_manager_interface_dbus_interface_info), &_unity_extras_file_manager_interface_dbus_interface_vtable, data, _unity_extras_file_manager_interface_unregister_object, error);
	if (!result) {
		return 0;
	}
	return result;
}


static void
_unity_extras_file_manager_interface_unregister_object (gpointer user_data)
{
	gpointer* data;
	data = user_data;
	g_object_unref (data[0]);
	g_object_unref (data[1]);
	g_free (data[2]);
	g_free (data);
}


static void
unity_extras_show_in_folder_data_free (gpointer _data)
{
	UnityExtrasShowInFolderData* _data_;
	_data_ = _data;
	_g_free0 (_data_->uri);
	g_slice_free (UnityExtrasShowInFolderData, _data_);
}


static void
unity_extras_show_in_folder_async_ready_wrapper (GObject *source_object,
                                                 GAsyncResult *res,
                                                 void *user_data)
{
	UnityExtrasShowInFolderData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


void
unity_extras_show_in_folder (const gchar* uri,
                             GAsyncReadyCallback _callback_,
                             gpointer _user_data_)
{
	UnityExtrasShowInFolderData* _data_;
	gchar* _tmp0_;
	_data_ = g_slice_new0 (UnityExtrasShowInFolderData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (NULL, NULL, unity_extras_show_in_folder_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_extras_show_in_folder_data_free);
	_tmp0_ = g_strdup (uri);
	_g_free0 (_data_->uri);
	_data_->uri = _tmp0_;
	unity_extras_show_in_folder_co (_data_);
}


void
unity_extras_show_in_folder_finish (GAsyncResult* _res_,
                                    GError** error)
{
	UnityExtrasShowInFolderData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return;
	}
}


/**
   * Opens file manager showing given uri in its parent folder.
   * It tries to activate file manager using org.freedesktop.FileManager1 interface first and if it fails,
   * uses GLib.AppInfo.launch_default_for_uri.
   */
static void
unity_extras_show_in_folder_ready (GObject* source_object,
                                   GAsyncResult* _res_,
                                   gpointer _user_data_)
{
	UnityExtrasShowInFolderData* _data_;
	_data_ = _user_data_;
	_data_->_source_object_ = source_object;
	_data_->_res_ = _res_;
	_data_->_task_complete_ = TRUE;
	unity_extras_show_in_folder_co (_data_);
}


static gboolean
unity_extras_show_in_folder_co (UnityExtrasShowInFolderData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		case 2:
		goto _state_2;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = g_strdup (_data_->uri);
	_data_->_tmp1_ = g_new0 (gchar*, 1 + 1);
	_data_->_tmp1_[0] = _data_->_tmp0_;
	_data_->uris = _data_->_tmp1_;
	_data_->uris_length1 = 1;
	_data_->_uris_size_ = _data_->uris_length1;
	_data_->_tmp2_ = g_file_new_for_uri (_data_->uri);
	_data_->file = _data_->_tmp2_;
	_data_->_tmp3_ = _data_->file;
	if (_data_->_tmp3_ != NULL) {
		_data_->_tmp4_ = _data_->file;
		_data_->_tmp5_ = g_file_get_parent (_data_->_tmp4_);
		_data_->parent_dir = _data_->_tmp5_;
		_data_->_tmp6_ = _data_->parent_dir;
		if (_data_->_tmp6_ != NULL) {
			{
				_data_->_state_ = 1;
				g_async_initable_new_async (UNITY_EXTRAS_TYPE_FILE_MANAGER_INTERFACE_PROXY, 0, NULL, unity_extras_show_in_folder_ready, _data_, "g-flags", 0, "g-name", UNITY_EXTRAS_FILE_MANAGER_DBUS_NAME, "g-bus-type", G_BUS_TYPE_SESSION, "g-object-path", UNITY_EXTRAS_FILE_MANAGER_DBUS_PATH, "g-interface-name", "org.freedesktop.FileManager1", "g-interface-info", g_type_get_qdata (UNITY_EXTRAS_TYPE_FILE_MANAGER_INTERFACE, g_quark_from_static_string ("vala-dbus-interface-info")), NULL);
				return FALSE;
				_state_1:
				_data_->_tmp7_ = g_async_initable_new_finish (_data_->_source_object_, _data_->_res_, &_data_->_inner_error_);
				_data_->service = (UnityExtrasFileManagerInterface*) _data_->_tmp7_;
				if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
					goto __catch0_g_error;
				}
				_data_->_tmp8_ = _data_->service;
				_data_->_tmp9_ = _data_->uris;
				_data_->_tmp9__length1 = _data_->uris_length1;
				_data_->_state_ = 2;
				unity_extras_file_manager_interface_show_items (_data_->_tmp8_, _data_->_tmp9_, _data_->_tmp9__length1, "", unity_extras_show_in_folder_ready, _data_);
				return FALSE;
				_state_2:
				unity_extras_file_manager_interface_show_items_finish (_data_->_tmp8_, _data_->_res_, &_data_->_inner_error_);
				if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
					_g_object_unref0 (_data_->service);
					goto __catch0_g_error;
				}
				_g_object_unref0 (_data_->service);
				_g_object_unref0 (_data_->parent_dir);
				_g_object_unref0 (_data_->file);
				_data_->uris = (_vala_array_free (_data_->uris, _data_->uris_length1, (GDestroyNotify) g_free), NULL);
				g_task_return_pointer (_data_->_async_result, _data_, NULL);
				if (_data_->_state_ != 0) {
					while (_data_->_task_complete_ != TRUE) {
						g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
					}
				}
				g_object_unref (_data_->_async_result);
				return FALSE;
			}
			goto __finally0;
			__catch0_g_error:
			{
				_data_->e = _data_->_inner_error_;
				_data_->_inner_error_ = NULL;
				_data_->_tmp10_ = _data_->e;
				_data_->_tmp11_ = _data_->_tmp10_->message;
				g_warning ("unity-extra-utils.vala:60: Failed to activate file manager via dbus: '" \
"%s', uri '%s'", _data_->_tmp11_, _data_->uri);
				_g_error_free0 (_data_->e);
			}
			__finally0:
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
				_g_object_unref0 (_data_->parent_dir);
				_g_object_unref0 (_data_->file);
				_data_->uris = (_vala_array_free (_data_->uris, _data_->uris_length1, (GDestroyNotify) g_free), NULL);
				g_object_unref (_data_->_async_result);
				return FALSE;
			}
			_data_->_tmp12_ = _data_->parent_dir;
			_data_->_tmp13_ = g_file_get_uri (_data_->_tmp12_);
			_data_->_tmp14_ = _data_->_tmp13_;
			g_app_info_launch_default_for_uri (_data_->_tmp14_, NULL, &_data_->_inner_error_);
			_g_free0 (_data_->_tmp14_);
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
				_g_object_unref0 (_data_->parent_dir);
				_g_object_unref0 (_data_->file);
				_data_->uris = (_vala_array_free (_data_->uris, _data_->uris_length1, (GDestroyNotify) g_free), NULL);
				g_object_unref (_data_->_async_result);
				return FALSE;
			}
			_g_object_unref0 (_data_->parent_dir);
			_g_object_unref0 (_data_->file);
			_data_->uris = (_vala_array_free (_data_->uris, _data_->uris_length1, (GDestroyNotify) g_free), NULL);
			g_task_return_pointer (_data_->_async_result, _data_, NULL);
			if (_data_->_state_ != 0) {
				while (_data_->_task_complete_ != TRUE) {
					g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
				}
			}
			g_object_unref (_data_->_async_result);
			return FALSE;
		} else {
			_data_->_tmp15_ = g_strdup_printf ("Failed to get parent dir for uri: '%s'", _data_->uri);
			_data_->_tmp16_ = _data_->_tmp15_;
			_data_->_tmp17_ = g_error_new_literal (G_IO_ERROR, G_IO_ERROR_FAILED, _data_->_tmp16_);
			_data_->_tmp18_ = _data_->_tmp17_;
			_g_free0 (_data_->_tmp16_);
			_data_->_inner_error_ = _data_->_tmp18_;
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			_g_object_unref0 (_data_->parent_dir);
			_g_object_unref0 (_data_->file);
			_data_->uris = (_vala_array_free (_data_->uris, _data_->uris_length1, (GDestroyNotify) g_free), NULL);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
		_g_object_unref0 (_data_->parent_dir);
	} else {
		_data_->_tmp19_ = g_strdup_printf ("Failed to create file object for uri: '%s'", _data_->uri);
		_data_->_tmp20_ = _data_->_tmp19_;
		_data_->_tmp21_ = g_error_new_literal (G_IO_ERROR, G_IO_ERROR_FAILED, _data_->_tmp20_);
		_data_->_tmp22_ = _data_->_tmp21_;
		_g_free0 (_data_->_tmp20_);
		_data_->_inner_error_ = _data_->_tmp22_;
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		_g_object_unref0 (_data_->file);
		_data_->uris = (_vala_array_free (_data_->uris, _data_->uris_length1, (GDestroyNotify) g_free), NULL);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_g_object_unref0 (_data_->file);
	_data_->uris = (_vala_array_free (_data_->uris, _data_->uris_length1, (GDestroyNotify) g_free), NULL);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


/**
   * Check if a given well known DBus is owned. Failure (exception) means ownership couldn't be determined.
   * WARNING: This does sync IO!
   *
   * @param name DBus name to test for availability
   * @return true if name is available
   */
gboolean
unity_extras_dbus_name_has_owner (const gchar* name,
                                  GError** error)
{
	gboolean result = FALSE;
	gboolean has_owner = FALSE;
	GDBusConnection* bus = NULL;
	GDBusConnection* _tmp0_;
	GVariant* _result_ = NULL;
	GDBusConnection* _tmp2_;
	GVariant* _tmp3_;
	GVariant* _tmp4_;
	GVariantType* _tmp5_;
	GVariantType* _tmp6_;
	GVariant* _tmp7_;
	GVariant* _tmp8_;
	GVariant* _tmp10_;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (name != NULL, FALSE);
	_tmp0_ = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &_inner_error_);
	bus = _tmp0_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		gboolean _tmp1_ = FALSE;
		g_propagate_error (error, _inner_error_);
		return _tmp1_;
	}
	_tmp2_ = bus;
	_tmp3_ = g_variant_new ("(s)", name, NULL);
	g_variant_ref_sink (_tmp3_);
	_tmp4_ = _tmp3_;
	_tmp5_ = g_variant_type_new ("(b)");
	_tmp6_ = _tmp5_;
	_tmp7_ = g_dbus_connection_call_sync (_tmp2_, "org.freedesktop.DBus", "/org/freedesktop/dbus", "org.freedesktop.DBus", "NameHasOwner", _tmp4_, _tmp6_, G_DBUS_CALL_FLAGS_NO_AUTO_START, -1, NULL, &_inner_error_);
	_tmp8_ = _tmp7_;
	_g_variant_type_free0 (_tmp6_);
	_g_variant_unref0 (_tmp4_);
	_result_ = _tmp8_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		gboolean _tmp9_ = FALSE;
		g_propagate_error (error, _inner_error_);
		_g_object_unref0 (bus);
		return _tmp9_;
	}
	_tmp10_ = _result_;
	g_variant_get (_tmp10_, "(b)", &has_owner, NULL);
	result = has_owner;
	_g_variant_unref0 (_result_);
	_g_object_unref0 (bus);
	return result;
}


/**
   * Attempts to own DBus name (calls dbus_name_has_owner first). CreateScopeCallback should create Lens/Scope object -
   * it will be called after initial dbus name availability check, but before acquiring the name, so this function may
   * still fail even after executing the callback.
   *
   * @param name DBus name to own
   * @param scope_creation_cb callback that creates Lens/Scope object
   * @return application instance (on success)
   */
GApplication*
unity_extras_dbus_own_name (const gchar* name,
                            UnityExtrasCreateScopeCallback scope_creation_cb,
                            gpointer scope_creation_cb_target,
                            GError** error)
{
	GApplication* result = NULL;
	GApplication* app = NULL;
	gboolean _tmp0_ = FALSE;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (name != NULL, NULL);
	app = NULL;
	_tmp0_ = unity_extras_dbus_name_has_owner (name, &_inner_error_);
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_object_unref0 (app);
		return NULL;
	}
	if (!_tmp0_) {
		GApplication* _tmp1_;
		GApplication* _tmp2_;
		GApplication* _tmp3_;
		scope_creation_cb (scope_creation_cb_target);
		_tmp1_ = g_application_new (name, G_APPLICATION_IS_SERVICE);
		_g_object_unref0 (app);
		app = _tmp1_;
		_tmp2_ = app;
		g_application_register (_tmp2_, NULL, &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_object_unref0 (app);
			return NULL;
		}
		_tmp3_ = app;
		if (g_application_get_is_remote (_tmp3_)) {
			_g_object_unref0 (app);
			app = NULL;
		} else {
			GApplication* _tmp4_;
			_tmp4_ = app;
			g_application_hold (_tmp4_);
		}
	}
	result = app;
	return result;
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}



