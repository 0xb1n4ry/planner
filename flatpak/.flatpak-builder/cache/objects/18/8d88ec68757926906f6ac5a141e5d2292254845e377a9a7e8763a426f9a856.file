/* kf-backend.c generated by valac 0.40.11, the Vala compiler
 * generated from kf-backend.vala, do not modify */

/*
 * Copyright (C) 2010 Collabora Ltd.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Philip Withnall <philip.withnall@collabora.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <folks/folks.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <folks-internal.h>


#define FOLKS_BACKENDS_KF_TYPE_BACKEND (folks_backends_kf_backend_get_type ())
#define FOLKS_BACKENDS_KF_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_BACKENDS_KF_TYPE_BACKEND, FolksBackendsKfBackend))
#define FOLKS_BACKENDS_KF_BACKEND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_BACKENDS_KF_TYPE_BACKEND, FolksBackendsKfBackendClass))
#define FOLKS_BACKENDS_KF_IS_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_BACKENDS_KF_TYPE_BACKEND))
#define FOLKS_BACKENDS_KF_IS_BACKEND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_BACKENDS_KF_TYPE_BACKEND))
#define FOLKS_BACKENDS_KF_BACKEND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_BACKENDS_KF_TYPE_BACKEND, FolksBackendsKfBackendClass))

typedef struct _FolksBackendsKfBackend FolksBackendsKfBackend;
typedef struct _FolksBackendsKfBackendClass FolksBackendsKfBackendClass;
typedef struct _FolksBackendsKfBackendPrivate FolksBackendsKfBackendPrivate;

#define FOLKS_BACKENDS_KF_TYPE_PERSONA_STORE (folks_backends_kf_persona_store_get_type ())
#define FOLKS_BACKENDS_KF_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_BACKENDS_KF_TYPE_PERSONA_STORE, FolksBackendsKfPersonaStore))
#define FOLKS_BACKENDS_KF_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_BACKENDS_KF_TYPE_PERSONA_STORE, FolksBackendsKfPersonaStoreClass))
#define FOLKS_BACKENDS_KF_IS_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_BACKENDS_KF_TYPE_PERSONA_STORE))
#define FOLKS_BACKENDS_KF_IS_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_BACKENDS_KF_TYPE_PERSONA_STORE))
#define FOLKS_BACKENDS_KF_PERSONA_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_BACKENDS_KF_TYPE_PERSONA_STORE, FolksBackendsKfPersonaStoreClass))

typedef struct _FolksBackendsKfPersonaStore FolksBackendsKfPersonaStore;
typedef struct _FolksBackendsKfPersonaStoreClass FolksBackendsKfPersonaStoreClass;
enum  {
	FOLKS_BACKENDS_KF_BACKEND_0_PROPERTY,
	FOLKS_BACKENDS_KF_BACKEND_IS_PREPARED_PROPERTY,
	FOLKS_BACKENDS_KF_BACKEND_IS_QUIESCENT_PROPERTY,
	FOLKS_BACKENDS_KF_BACKEND_NAME_PROPERTY,
	FOLKS_BACKENDS_KF_BACKEND_PERSONA_STORES_PROPERTY,
	FOLKS_BACKENDS_KF_BACKEND_NUM_PROPERTIES
};
static GParamSpec* folks_backends_kf_backend_properties[FOLKS_BACKENDS_KF_BACKEND_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _FolksBackendsKfBackendPrepareData FolksBackendsKfBackendPrepareData;
typedef struct _FolksBackendsKfBackendUnprepareData FolksBackendsKfBackendUnprepareData;

struct _FolksBackendsKfBackend {
	FolksBackend parent_instance;
	FolksBackendsKfBackendPrivate * priv;
};

struct _FolksBackendsKfBackendClass {
	FolksBackendClass parent_class;
};

struct _FolksBackendsKfBackendPrivate {
	gboolean _is_prepared;
	gboolean _prepare_pending;
	gboolean _is_quiescent;
	GeeHashMap* _persona_stores;
	GeeMap* _persona_stores_ro;
};

struct _FolksBackendsKfBackendPrepareData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksBackendsKfBackend* self;
	gboolean _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	GFile* file;
	const gchar* path;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	GFile* _tmp5_;
	GFile* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	const gchar* _tmp9_;
	GFile* _tmp10_;
	const gchar* _tmp11_;
	FolksBackendsKfPersonaStore* store;
	GFile* _tmp12_;
	FolksBackendsKfPersonaStore* _tmp13_;
	FolksBackendsKfPersonaStore* _tmp14_;
	GError * _inner_error_;
};

struct _FolksBackendsKfBackendUnprepareData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksBackendsKfBackend* self;
	gboolean _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	GeeIterator* _persona_store_it;
	GeeHashMap* _tmp3_;
	GeeCollection* _tmp4_;
	GeeCollection* _tmp5_;
	GeeCollection* _tmp6_;
	GeeIterator* _tmp7_;
	GeeIterator* _tmp8_;
	GeeIterator* _tmp9_;
	FolksBackendsKfPersonaStore* persona_store;
	GeeIterator* _tmp10_;
	gpointer _tmp11_;
	FolksBackendsKfPersonaStore* _tmp12_;
	GeeHashMap* _tmp13_;
	GError * _inner_error_;
};


static gpointer folks_backends_kf_backend_parent_class = NULL;

GType folks_backends_kf_backend_get_type (void) G_GNUC_CONST;
GType folks_backends_kf_persona_store_get_type (void) G_GNUC_CONST;
#define FOLKS_BACKENDS_KF_BACKEND_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_BACKENDS_KF_TYPE_BACKEND, FolksBackendsKfBackendPrivate))
static void folks_backends_kf_backend_real_enable_persona_store (FolksBackend* base,
                                                          FolksPersonaStore* store);
static void _folks_backends_kf_backend_add_store (FolksBackendsKfBackend* self,
                                           FolksBackendsKfPersonaStore* store,
                                           gboolean notify);
static void folks_backends_kf_backend_real_disable_persona_store (FolksBackend* base,
                                                           FolksPersonaStore* store);
static void _folks_backends_kf_backend_store_removed_cb (FolksBackendsKfBackend* self,
                                                  FolksPersonaStore* store);
static GFile* _folks_backends_kf_backend_get_default_file (FolksBackendsKfBackend* self,
                                                    const gchar* basename);
static void folks_backends_kf_backend_real_set_persona_stores (FolksBackend* base,
                                                        GeeSet* storeids);
FolksBackendsKfPersonaStore* folks_backends_kf_persona_store_new (GFile* key_file);
FolksBackendsKfPersonaStore* folks_backends_kf_persona_store_construct (GType object_type,
                                                                        GFile* key_file);
static void _vala_array_add1 (FolksBackendsKfPersonaStore** * array,
                       int* length,
                       int* size,
                       FolksBackendsKfPersonaStore* value);
static void _folks_backends_kf_backend_remove_store (FolksBackendsKfBackend* self,
                                              FolksBackendsKfPersonaStore* store,
                                              gboolean notify);
FolksBackendsKfBackend* folks_backends_kf_backend_new (void);
FolksBackendsKfBackend* folks_backends_kf_backend_construct (GType object_type);
static void folks_backends_kf_backend_real_prepare_data_free (gpointer _data);
static void folks_backends_kf_backend_real_prepare_async_ready_wrapper (GObject *source_object,
                                                                 GAsyncResult *res,
                                                                 void *user_data);
static void folks_backends_kf_backend_real_prepare (FolksBackend* base,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
static gboolean folks_backends_kf_backend_real_prepare_co (FolksBackendsKfBackendPrepareData* _data_);
static void __folks_backends_kf_backend_store_removed_cb_folks_persona_store_removed (FolksPersonaStore* _sender,
                                                                               gpointer self);
static void folks_backends_kf_backend_real_unprepare_data_free (gpointer _data);
static void folks_backends_kf_backend_real_unprepare_async_ready_wrapper (GObject *source_object,
                                                                   GAsyncResult *res,
                                                                   void *user_data);
static void folks_backends_kf_backend_real_unprepare (FolksBackend* base,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
static gboolean folks_backends_kf_backend_real_unprepare_co (FolksBackendsKfBackendUnprepareData* _data_);
static GObject * folks_backends_kf_backend_constructor (GType type,
                                                 guint n_construct_properties,
                                                 GObjectConstructParam * construct_properties);
static void folks_backends_kf_backend_finalize (GObject * obj);
static void _vala_folks_backends_kf_backend_get_property (GObject * object,
                                                   guint property_id,
                                                   GValue * value,
                                                   GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);


/**
   * {@inheritDoc}
   */
static void
folks_backends_kf_backend_real_enable_persona_store (FolksBackend* base,
                                                     FolksPersonaStore* store)
{
	FolksBackendsKfBackend * self;
	GeeHashMap* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 83 "/run/build/folks/backends/key-file/kf-backend.vala"
	self = (FolksBackendsKfBackend*) base;
#line 83 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_return_if_fail (store != NULL);
#line 85 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp0_ = self->priv->_persona_stores;
#line 85 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp1_ = folks_persona_store_get_id (store);
#line 85 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp2_ = _tmp1_;
#line 85 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp0_, _tmp2_) == FALSE) {
#line 87 "/run/build/folks/backends/key-file/kf-backend.vala"
		_folks_backends_kf_backend_add_store (self, G_TYPE_CHECK_INSTANCE_CAST (store, FOLKS_BACKENDS_KF_TYPE_PERSONA_STORE, FolksBackendsKfPersonaStore), TRUE);
#line 233 "kf-backend.c"
	}
}


/**
   * {@inheritDoc}
   */
static void
folks_backends_kf_backend_real_disable_persona_store (FolksBackend* base,
                                                      FolksPersonaStore* store)
{
	FolksBackendsKfBackend * self;
	GeeHashMap* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 94 "/run/build/folks/backends/key-file/kf-backend.vala"
	self = (FolksBackendsKfBackend*) base;
#line 94 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_return_if_fail (store != NULL);
#line 96 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp0_ = self->priv->_persona_stores;
#line 96 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp1_ = folks_persona_store_get_id (store);
#line 96 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp2_ = _tmp1_;
#line 96 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp0_, _tmp2_)) {
#line 98 "/run/build/folks/backends/key-file/kf-backend.vala"
		_folks_backends_kf_backend_store_removed_cb (self, store);
#line 263 "kf-backend.c"
	}
}


static GFile*
_folks_backends_kf_backend_get_default_file (FolksBackendsKfBackend* self,
                                             const gchar* basename)
{
	GFile* result = NULL;
	gchar* filename = NULL;
	gchar* _tmp0_;
	GFile* file = NULL;
	const gchar* _tmp1_;
	GFile* _tmp2_;
	GFile* _tmp3_;
	GFile* _tmp4_;
	GFile* _tmp5_;
	GFile* _tmp6_;
#line 102 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 102 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_return_val_if_fail (basename != NULL, NULL);
#line 104 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp0_ = g_strconcat (basename, ".ini", NULL);
#line 104 "/run/build/folks/backends/key-file/kf-backend.vala"
	filename = _tmp0_;
#line 105 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp1_ = g_get_user_data_dir ();
#line 105 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp2_ = g_file_new_for_path (_tmp1_);
#line 105 "/run/build/folks/backends/key-file/kf-backend.vala"
	file = _tmp2_;
#line 106 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp3_ = file;
#line 106 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp4_ = g_file_get_child (_tmp3_, "folks");
#line 106 "/run/build/folks/backends/key-file/kf-backend.vala"
	_g_object_unref0 (file);
#line 106 "/run/build/folks/backends/key-file/kf-backend.vala"
	file = _tmp4_;
#line 107 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp5_ = file;
#line 107 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp6_ = g_file_get_child (_tmp5_, filename);
#line 107 "/run/build/folks/backends/key-file/kf-backend.vala"
	_g_object_unref0 (file);
#line 107 "/run/build/folks/backends/key-file/kf-backend.vala"
	file = _tmp6_;
#line 108 "/run/build/folks/backends/key-file/kf-backend.vala"
	result = file;
#line 108 "/run/build/folks/backends/key-file/kf-backend.vala"
	_g_free0 (filename);
#line 108 "/run/build/folks/backends/key-file/kf-backend.vala"
	return result;
#line 318 "kf-backend.c"
}


/**
   * {@inheritDoc}
   * In this implementation storeids are assumed to be base filenames for
   * ini files under user_data_dir()/folks/ like the default relationships 
   * {@link PersonaStore}.
   */
static gpointer
_g_object_ref0 (gpointer self)
{
#line 141 "/run/build/folks/backends/key-file/kf-backend.vala"
	return self ? g_object_ref (self) : NULL;
#line 333 "kf-backend.c"
}


static void
_vala_array_add1 (FolksBackendsKfPersonaStore** * array,
                  int* length,
                  int* size,
                  FolksBackendsKfPersonaStore* value)
{
#line 141 "/run/build/folks/backends/key-file/kf-backend.vala"
	if ((*length) == (*size)) {
#line 141 "/run/build/folks/backends/key-file/kf-backend.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 141 "/run/build/folks/backends/key-file/kf-backend.vala"
		*array = g_renew (FolksBackendsKfPersonaStore*, *array, (*size) + 1);
#line 349 "kf-backend.c"
	}
#line 141 "/run/build/folks/backends/key-file/kf-backend.vala"
	(*array)[(*length)++] = value;
#line 141 "/run/build/folks/backends/key-file/kf-backend.vala"
	(*array)[*length] = NULL;
#line 355 "kf-backend.c"
}


static void
folks_backends_kf_backend_real_set_persona_stores (FolksBackend* base,
                                                   GeeSet* storeids)
{
	FolksBackendsKfBackend * self;
	gboolean added_stores = FALSE;
	FolksBackendsKfPersonaStore** removed_stores = NULL;
	FolksBackendsKfPersonaStore** _tmp0_;
	gint removed_stores_length1;
	gint _removed_stores_size_;
	gboolean _tmp34_ = FALSE;
	gboolean _tmp35_;
#line 117 "/run/build/folks/backends/key-file/kf-backend.vala"
	self = (FolksBackendsKfBackend*) base;
#line 121 "/run/build/folks/backends/key-file/kf-backend.vala"
	added_stores = FALSE;
#line 122 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp0_ = g_new0 (FolksBackendsKfPersonaStore*, 0 + 1);
#line 122 "/run/build/folks/backends/key-file/kf-backend.vala"
	removed_stores = _tmp0_;
#line 122 "/run/build/folks/backends/key-file/kf-backend.vala"
	removed_stores_length1 = 0;
#line 122 "/run/build/folks/backends/key-file/kf-backend.vala"
	_removed_stores_size_ = removed_stores_length1;
#line 383 "kf-backend.c"
	{
		GeeIterator* _id_it = NULL;
		GeeIterator* _tmp1_;
#line 125 "/run/build/folks/backends/key-file/kf-backend.vala"
		_tmp1_ = gee_iterable_iterator ((GeeIterable*) storeids);
#line 125 "/run/build/folks/backends/key-file/kf-backend.vala"
		_id_it = _tmp1_;
#line 125 "/run/build/folks/backends/key-file/kf-backend.vala"
		while (TRUE) {
#line 393 "kf-backend.c"
			GeeIterator* _tmp2_;
			gchar* id = NULL;
			GeeIterator* _tmp3_;
			gpointer _tmp4_;
			GeeHashMap* _tmp5_;
			const gchar* _tmp6_;
#line 125 "/run/build/folks/backends/key-file/kf-backend.vala"
			_tmp2_ = _id_it;
#line 125 "/run/build/folks/backends/key-file/kf-backend.vala"
			if (!gee_iterator_next (_tmp2_)) {
#line 125 "/run/build/folks/backends/key-file/kf-backend.vala"
				break;
#line 406 "kf-backend.c"
			}
#line 125 "/run/build/folks/backends/key-file/kf-backend.vala"
			_tmp3_ = _id_it;
#line 125 "/run/build/folks/backends/key-file/kf-backend.vala"
			_tmp4_ = gee_iterator_get (_tmp3_);
#line 125 "/run/build/folks/backends/key-file/kf-backend.vala"
			id = (gchar*) _tmp4_;
#line 127 "/run/build/folks/backends/key-file/kf-backend.vala"
			_tmp5_ = self->priv->_persona_stores;
#line 127 "/run/build/folks/backends/key-file/kf-backend.vala"
			_tmp6_ = id;
#line 127 "/run/build/folks/backends/key-file/kf-backend.vala"
			if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp5_, _tmp6_) == FALSE) {
#line 420 "kf-backend.c"
				GFile* file = NULL;
				const gchar* _tmp7_;
				GFile* _tmp8_;
				FolksBackendsKfPersonaStore* store = NULL;
				GFile* _tmp9_;
				FolksBackendsKfPersonaStore* _tmp10_;
				FolksBackendsKfPersonaStore* _tmp11_;
#line 129 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp7_ = id;
#line 129 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp8_ = _folks_backends_kf_backend_get_default_file (self, _tmp7_);
#line 129 "/run/build/folks/backends/key-file/kf-backend.vala"
				file = _tmp8_;
#line 131 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp9_ = file;
#line 131 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp10_ = folks_backends_kf_persona_store_new (_tmp9_);
#line 131 "/run/build/folks/backends/key-file/kf-backend.vala"
				store = _tmp10_;
#line 132 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp11_ = store;
#line 132 "/run/build/folks/backends/key-file/kf-backend.vala"
				_folks_backends_kf_backend_add_store (self, _tmp11_, FALSE);
#line 133 "/run/build/folks/backends/key-file/kf-backend.vala"
				added_stores = TRUE;
#line 127 "/run/build/folks/backends/key-file/kf-backend.vala"
				_g_object_unref0 (store);
#line 127 "/run/build/folks/backends/key-file/kf-backend.vala"
				_g_object_unref0 (file);
#line 450 "kf-backend.c"
			}
#line 125 "/run/build/folks/backends/key-file/kf-backend.vala"
			_g_free0 (id);
#line 454 "kf-backend.c"
		}
#line 125 "/run/build/folks/backends/key-file/kf-backend.vala"
		_g_object_unref0 (_id_it);
#line 458 "kf-backend.c"
	}
	{
		GeeIterator* _store_it = NULL;
		GeeHashMap* _tmp12_;
		GeeCollection* _tmp13_;
		GeeCollection* _tmp14_;
		GeeCollection* _tmp15_;
		GeeIterator* _tmp16_;
		GeeIterator* _tmp17_;
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
		_tmp12_ = self->priv->_persona_stores;
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
		_tmp13_ = gee_abstract_map_get_values ((GeeAbstractMap*) _tmp12_);
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
		_tmp14_ = _tmp13_;
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
		_tmp15_ = _tmp14_;
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
		_tmp16_ = gee_iterable_iterator ((GeeIterable*) _tmp15_);
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
		_tmp17_ = _tmp16_;
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
		_g_object_unref0 (_tmp15_);
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
		_store_it = _tmp17_;
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
		while (TRUE) {
#line 486 "kf-backend.c"
			GeeIterator* _tmp18_;
			FolksBackendsKfPersonaStore* store = NULL;
			GeeIterator* _tmp19_;
			gpointer _tmp20_;
			FolksBackendsKfPersonaStore* _tmp21_;
			const gchar* _tmp22_;
			const gchar* _tmp23_;
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
			_tmp18_ = _store_it;
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
			if (!gee_iterator_next (_tmp18_)) {
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
				break;
#line 500 "kf-backend.c"
			}
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
			_tmp19_ = _store_it;
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
			_tmp20_ = gee_iterator_get (_tmp19_);
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
			store = (FolksBackendsKfPersonaStore*) _tmp20_;
#line 139 "/run/build/folks/backends/key-file/kf-backend.vala"
			_tmp21_ = store;
#line 139 "/run/build/folks/backends/key-file/kf-backend.vala"
			_tmp22_ = folks_persona_store_get_id ((FolksPersonaStore*) _tmp21_);
#line 139 "/run/build/folks/backends/key-file/kf-backend.vala"
			_tmp23_ = _tmp22_;
#line 139 "/run/build/folks/backends/key-file/kf-backend.vala"
			if (!gee_collection_contains ((GeeCollection*) storeids, _tmp23_)) {
#line 516 "kf-backend.c"
				FolksBackendsKfPersonaStore** _tmp24_;
				gint _tmp24__length1;
				FolksBackendsKfPersonaStore* _tmp25_;
				FolksBackendsKfPersonaStore* _tmp26_;
#line 141 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp24_ = removed_stores;
#line 141 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp24__length1 = removed_stores_length1;
#line 141 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp25_ = store;
#line 141 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp26_ = _g_object_ref0 (_tmp25_);
#line 141 "/run/build/folks/backends/key-file/kf-backend.vala"
				_vala_array_add1 (&removed_stores, &removed_stores_length1, &_removed_stores_size_, _tmp26_);
#line 531 "kf-backend.c"
			}
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
			_g_object_unref0 (store);
#line 535 "kf-backend.c"
		}
#line 137 "/run/build/folks/backends/key-file/kf-backend.vala"
		_g_object_unref0 (_store_it);
#line 539 "kf-backend.c"
	}
	{
		gint i = 0;
#line 145 "/run/build/folks/backends/key-file/kf-backend.vala"
		i = 0;
#line 545 "kf-backend.c"
		{
			gboolean _tmp27_ = FALSE;
#line 145 "/run/build/folks/backends/key-file/kf-backend.vala"
			_tmp27_ = TRUE;
#line 145 "/run/build/folks/backends/key-file/kf-backend.vala"
			while (TRUE) {
#line 552 "kf-backend.c"
				gint _tmp29_;
				FolksBackendsKfPersonaStore** _tmp30_;
				gint _tmp30__length1;
				FolksBackendsKfPersonaStore** _tmp31_;
				gint _tmp31__length1;
				gint _tmp32_;
				FolksBackendsKfPersonaStore* _tmp33_;
#line 145 "/run/build/folks/backends/key-file/kf-backend.vala"
				if (!_tmp27_) {
#line 562 "kf-backend.c"
					gint _tmp28_;
#line 145 "/run/build/folks/backends/key-file/kf-backend.vala"
					_tmp28_ = i;
#line 145 "/run/build/folks/backends/key-file/kf-backend.vala"
					i = _tmp28_ + 1;
#line 568 "kf-backend.c"
				}
#line 145 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp27_ = FALSE;
#line 145 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp29_ = i;
#line 145 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp30_ = removed_stores;
#line 145 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp30__length1 = removed_stores_length1;
#line 145 "/run/build/folks/backends/key-file/kf-backend.vala"
				if (!(_tmp29_ < _tmp30__length1)) {
#line 145 "/run/build/folks/backends/key-file/kf-backend.vala"
					break;
#line 582 "kf-backend.c"
				}
#line 147 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp31_ = removed_stores;
#line 147 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp31__length1 = removed_stores_length1;
#line 147 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp32_ = i;
#line 147 "/run/build/folks/backends/key-file/kf-backend.vala"
				_tmp33_ = _tmp31_[_tmp32_];
#line 147 "/run/build/folks/backends/key-file/kf-backend.vala"
				_folks_backends_kf_backend_remove_store (self, G_TYPE_CHECK_INSTANCE_CAST (_tmp33_, FOLKS_BACKENDS_KF_TYPE_PERSONA_STORE, FolksBackendsKfPersonaStore), FALSE);
#line 594 "kf-backend.c"
			}
		}
	}
#line 151 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp35_ = added_stores;
#line 151 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (_tmp35_) {
#line 151 "/run/build/folks/backends/key-file/kf-backend.vala"
		_tmp34_ = TRUE;
#line 604 "kf-backend.c"
	} else {
		FolksBackendsKfPersonaStore** _tmp36_;
		gint _tmp36__length1;
#line 151 "/run/build/folks/backends/key-file/kf-backend.vala"
		_tmp36_ = removed_stores;
#line 151 "/run/build/folks/backends/key-file/kf-backend.vala"
		_tmp36__length1 = removed_stores_length1;
#line 151 "/run/build/folks/backends/key-file/kf-backend.vala"
		_tmp34_ = _tmp36__length1 > 0;
#line 614 "kf-backend.c"
	}
#line 151 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (_tmp34_) {
#line 153 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_notify ((GObject*) self, "persona-stores");
#line 620 "kf-backend.c"
	}
#line 117 "/run/build/folks/backends/key-file/kf-backend.vala"
	removed_stores = (_vala_array_free (removed_stores, removed_stores_length1, (GDestroyNotify) g_object_unref), NULL);
#line 624 "kf-backend.c"
}


/**
   * {@inheritDoc}
   */
FolksBackendsKfBackend*
folks_backends_kf_backend_construct (GType object_type)
{
	FolksBackendsKfBackend * self = NULL;
#line 162 "/run/build/folks/backends/key-file/kf-backend.vala"
	self = (FolksBackendsKfBackend*) g_object_new (object_type, NULL);
#line 160 "/run/build/folks/backends/key-file/kf-backend.vala"
	return self;
#line 639 "kf-backend.c"
}


FolksBackendsKfBackend*
folks_backends_kf_backend_new (void)
{
#line 160 "/run/build/folks/backends/key-file/kf-backend.vala"
	return folks_backends_kf_backend_construct (FOLKS_BACKENDS_KF_TYPE_BACKEND);
#line 648 "kf-backend.c"
}


static void
folks_backends_kf_backend_real_prepare_data_free (gpointer _data)
{
	FolksBackendsKfBackendPrepareData* _data_;
	_data_ = _data;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_g_object_unref0 (_data_->self);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_slice_free (FolksBackendsKfBackendPrepareData, _data_);
#line 661 "kf-backend.c"
}


static void
folks_backends_kf_backend_real_prepare_async_ready_wrapper (GObject *source_object,
                                                            GAsyncResult *res,
                                                            void *user_data)
{
	FolksBackendsKfBackendPrepareData* _task_data_;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (_task_data_->_callback_ != NULL) {
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 677 "kf-backend.c"
	}
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_task_data_->_task_complete_ = TRUE;
#line 681 "kf-backend.c"
}


static void
folks_backends_kf_backend_real_prepare (FolksBackend* base,
                                        GAsyncReadyCallback _callback_,
                                        gpointer _user_data_)
{
	FolksBackendsKfBackend * self;
	FolksBackendsKfBackendPrepareData* _data_;
	FolksBackendsKfBackend* _tmp0_;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	self = (FolksBackendsKfBackend*) base;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_data_ = g_slice_new0 (FolksBackendsKfBackendPrepareData);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_data_->_callback_ = _callback_;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_backends_kf_backend_real_prepare_async_ready_wrapper, _user_data_);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (_callback_ == NULL) {
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->_task_complete_ = TRUE;
#line 705 "kf-backend.c"
	}
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_backends_kf_backend_real_prepare_data_free);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_data_->self = _tmp0_;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	folks_backends_kf_backend_real_prepare_co (_data_);
#line 715 "kf-backend.c"
}


static void
folks_backends_kf_backend_real_prepare_finish (FolksBackend* base,
                                               GAsyncResult* _res_,
                                               GError** error)
{
	FolksBackendsKfBackendPrepareData* _data_;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (NULL == _data_) {
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		return;
#line 731 "kf-backend.c"
	}
}


/**
   * {@inheritDoc}
   */
static gboolean
folks_backends_kf_backend_real_prepare_co (FolksBackendsKfBackendPrepareData* _data_)
{
#line 174 "/run/build/folks/backends/key-file/kf-backend.vala"
	switch (_data_->_state_) {
#line 174 "/run/build/folks/backends/key-file/kf-backend.vala"
		case 0:
#line 746 "kf-backend.c"
		goto _state_0;
		default:
#line 174 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_assert_not_reached ();
#line 751 "kf-backend.c"
	}
	_state_0:
#line 176 "/run/build/folks/backends/key-file/kf-backend.vala"
	folks_internal_profiling_start ("preparing Kf.Backend", NULL);
#line 178 "/run/build/folks/backends/key-file/kf-backend.vala"
	_data_->_tmp1_ = _data_->self->priv->_is_prepared;
#line 178 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (_data_->_tmp1_) {
#line 178 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->_tmp0_ = TRUE;
#line 762 "kf-backend.c"
	} else {
#line 178 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->_tmp2_ = _data_->self->priv->_prepare_pending;
#line 178 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->_tmp0_ = _data_->_tmp2_;
#line 768 "kf-backend.c"
	}
#line 178 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (_data_->_tmp0_) {
#line 180 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 180 "/run/build/folks/backends/key-file/kf-backend.vala"
		if (_data_->_state_ != 0) {
#line 180 "/run/build/folks/backends/key-file/kf-backend.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 180 "/run/build/folks/backends/key-file/kf-backend.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 780 "kf-backend.c"
			}
		}
#line 180 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_unref (_data_->_async_result);
#line 180 "/run/build/folks/backends/key-file/kf-backend.vala"
		return FALSE;
#line 787 "kf-backend.c"
	}
	{
#line 185 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->self->priv->_prepare_pending = TRUE;
#line 186 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_freeze_notify ((GObject*) _data_->self);
#line 189 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->_tmp3_ = g_getenv ("FOLKS_BACKEND_KEY_FILE_PATH");
#line 189 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->path = _data_->_tmp3_;
#line 191 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->_tmp4_ = _data_->path;
#line 191 "/run/build/folks/backends/key-file/kf-backend.vala"
		if (_data_->_tmp4_ == NULL) {
#line 193 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->_tmp5_ = _folks_backends_kf_backend_get_default_file (_data_->self, "relationships");
#line 193 "/run/build/folks/backends/key-file/kf-backend.vala"
			_g_object_unref0 (_data_->file);
#line 193 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->file = _data_->_tmp5_;
#line 195 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->_tmp6_ = _data_->file;
#line 195 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->_tmp7_ = g_file_get_path (_data_->_tmp6_);
#line 195 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->_tmp8_ = _data_->_tmp7_;
#line 195 "/run/build/folks/backends/key-file/kf-backend.vala"
			g_debug ("Using built-in key file '%s' (override with " "environment variable FOLKS_BACKEND_KEY_FILE_PATH)", _data_->_tmp8_);
#line 195 "/run/build/folks/backends/key-file/kf-backend.vala"
			_g_free0 (_data_->_tmp8_);
#line 818 "kf-backend.c"
		} else {
#line 201 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->_tmp9_ = _data_->path;
#line 201 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->_tmp10_ = g_file_new_for_path (_data_->_tmp9_);
#line 201 "/run/build/folks/backends/key-file/kf-backend.vala"
			_g_object_unref0 (_data_->file);
#line 201 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->file = _data_->_tmp10_;
#line 202 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->_tmp11_ = _data_->path;
#line 202 "/run/build/folks/backends/key-file/kf-backend.vala"
			g_debug ("Using environment variable " "FOLKS_BACKEND_KEY_FILE_PATH = '%s' to load the key " "file.", _data_->_tmp11_);
#line 832 "kf-backend.c"
		}
#line 208 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->_tmp12_ = _data_->file;
#line 208 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->_tmp13_ = folks_backends_kf_persona_store_new (_data_->_tmp12_);
#line 208 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->store = _data_->_tmp13_;
#line 210 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->_tmp14_ = _data_->store;
#line 210 "/run/build/folks/backends/key-file/kf-backend.vala"
		_folks_backends_kf_backend_add_store (_data_->self, _data_->_tmp14_, TRUE);
#line 212 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->self->priv->_is_prepared = TRUE;
#line 213 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_notify ((GObject*) _data_->self, "is-prepared");
#line 215 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->self->priv->_is_quiescent = TRUE;
#line 216 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_notify ((GObject*) _data_->self, "is-quiescent");
#line 183 "/run/build/folks/backends/key-file/kf-backend.vala"
		_g_object_unref0 (_data_->store);
#line 183 "/run/build/folks/backends/key-file/kf-backend.vala"
		_g_object_unref0 (_data_->file);
#line 856 "kf-backend.c"
	}
	__finally0:
	{
#line 220 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_thaw_notify ((GObject*) _data_->self);
#line 221 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->self->priv->_prepare_pending = FALSE;
#line 864 "kf-backend.c"
	}
#line 183 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 183 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 183 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_unref (_data_->_async_result);
#line 183 "/run/build/folks/backends/key-file/kf-backend.vala"
		return FALSE;
#line 874 "kf-backend.c"
	}
#line 224 "/run/build/folks/backends/key-file/kf-backend.vala"
	folks_internal_profiling_end ("preparing Kf.Backend", NULL);
#line 174 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 174 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (_data_->_state_ != 0) {
#line 174 "/run/build/folks/backends/key-file/kf-backend.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 174 "/run/build/folks/backends/key-file/kf-backend.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 886 "kf-backend.c"
		}
	}
#line 174 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_object_unref (_data_->_async_result);
#line 174 "/run/build/folks/backends/key-file/kf-backend.vala"
	return FALSE;
#line 893 "kf-backend.c"
}


/**
   * Utility function to add a persona store.
   *
   * @param store the store to add.
   * @param notify whether or not to emit notification signals.
   */
static void
__folks_backends_kf_backend_store_removed_cb_folks_persona_store_removed (FolksPersonaStore* _sender,
                                                                          gpointer self)
{
#line 236 "/run/build/folks/backends/key-file/kf-backend.vala"
	_folks_backends_kf_backend_store_removed_cb ((FolksBackendsKfBackend*) self, _sender);
#line 909 "kf-backend.c"
}


static void
_folks_backends_kf_backend_add_store (FolksBackendsKfBackend* self,
                                      FolksBackendsKfPersonaStore* store,
                                      gboolean notify)
{
	GeeHashMap* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 233 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_return_if_fail (self != NULL);
#line 233 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_return_if_fail (store != NULL);
#line 235 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp0_ = self->priv->_persona_stores;
#line 235 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp1_ = folks_persona_store_get_id ((FolksPersonaStore*) store);
#line 235 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp2_ = _tmp1_;
#line 235 "/run/build/folks/backends/key-file/kf-backend.vala"
	gee_abstract_map_set ((GeeAbstractMap*) _tmp0_, _tmp2_, store);
#line 236 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_signal_connect_object ((FolksPersonaStore*) store, "removed", (GCallback) __folks_backends_kf_backend_store_removed_cb_folks_persona_store_removed, self, 0);
#line 237 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_signal_emit_by_name ((FolksBackend*) self, "persona-store-added", (FolksPersonaStore*) store);
#line 238 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (notify) {
#line 240 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_notify ((GObject*) self, "persona-stores");
#line 941 "kf-backend.c"
	}
}


/**
   * Utility function to remove a persona store.
   *
   * @param store the store to remove.
   * @param notify whether or not to emit notification signals.
   */
static void
_folks_backends_kf_backend_remove_store (FolksBackendsKfBackend* self,
                                         FolksBackendsKfPersonaStore* store,
                                         gboolean notify)
{
	guint _tmp0_;
	GeeHashMap* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
#line 250 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_return_if_fail (self != NULL);
#line 250 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_return_if_fail (store != NULL);
#line 252 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_signal_parse_name ("removed", FOLKS_TYPE_PERSONA_STORE, &_tmp0_, NULL, FALSE);
#line 252 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_signal_handlers_disconnect_matched ((FolksPersonaStore*) store, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp0_, 0, NULL, (GCallback) __folks_backends_kf_backend_store_removed_cb_folks_persona_store_removed, self);
#line 253 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp1_ = self->priv->_persona_stores;
#line 253 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp2_ = folks_persona_store_get_id ((FolksPersonaStore*) store);
#line 253 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp3_ = _tmp2_;
#line 253 "/run/build/folks/backends/key-file/kf-backend.vala"
	gee_abstract_map_unset ((GeeAbstractMap*) _tmp1_, _tmp3_, NULL);
#line 254 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_signal_emit_by_name ((FolksBackend*) self, "persona-store-removed", (FolksPersonaStore*) store);
#line 256 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (notify) {
#line 258 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_notify ((GObject*) self, "persona-stores");
#line 983 "kf-backend.c"
	}
}


static void
folks_backends_kf_backend_real_unprepare_data_free (gpointer _data)
{
	FolksBackendsKfBackendUnprepareData* _data_;
	_data_ = _data;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_g_object_unref0 (_data_->self);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_slice_free (FolksBackendsKfBackendUnprepareData, _data_);
#line 997 "kf-backend.c"
}


static void
folks_backends_kf_backend_real_unprepare_async_ready_wrapper (GObject *source_object,
                                                              GAsyncResult *res,
                                                              void *user_data)
{
	FolksBackendsKfBackendUnprepareData* _task_data_;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (_task_data_->_callback_ != NULL) {
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 1013 "kf-backend.c"
	}
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_task_data_->_task_complete_ = TRUE;
#line 1017 "kf-backend.c"
}


static void
folks_backends_kf_backend_real_unprepare (FolksBackend* base,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_)
{
	FolksBackendsKfBackend * self;
	FolksBackendsKfBackendUnprepareData* _data_;
	FolksBackendsKfBackend* _tmp0_;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	self = (FolksBackendsKfBackend*) base;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_data_ = g_slice_new0 (FolksBackendsKfBackendUnprepareData);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_data_->_callback_ = _callback_;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_backends_kf_backend_real_unprepare_async_ready_wrapper, _user_data_);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (_callback_ == NULL) {
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->_task_complete_ = TRUE;
#line 1041 "kf-backend.c"
	}
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_backends_kf_backend_real_unprepare_data_free);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_data_->self = _tmp0_;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	folks_backends_kf_backend_real_unprepare_co (_data_);
#line 1051 "kf-backend.c"
}


static void
folks_backends_kf_backend_real_unprepare_finish (FolksBackend* base,
                                                 GAsyncResult* _res_,
                                                 GError** error)
{
	FolksBackendsKfBackendUnprepareData* _data_;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (NULL == _data_) {
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		return;
#line 1067 "kf-backend.c"
	}
}


/**
   * {@inheritDoc}
   */
static gboolean
folks_backends_kf_backend_real_unprepare_co (FolksBackendsKfBackendUnprepareData* _data_)
{
#line 265 "/run/build/folks/backends/key-file/kf-backend.vala"
	switch (_data_->_state_) {
#line 265 "/run/build/folks/backends/key-file/kf-backend.vala"
		case 0:
#line 1082 "kf-backend.c"
		goto _state_0;
		default:
#line 265 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_assert_not_reached ();
#line 1087 "kf-backend.c"
	}
	_state_0:
#line 267 "/run/build/folks/backends/key-file/kf-backend.vala"
	_data_->_tmp1_ = _data_->self->priv->_is_prepared;
#line 267 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (!_data_->_tmp1_) {
#line 267 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->_tmp0_ = TRUE;
#line 1096 "kf-backend.c"
	} else {
#line 267 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->_tmp2_ = _data_->self->priv->_prepare_pending;
#line 267 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->_tmp0_ = _data_->_tmp2_ == TRUE;
#line 1102 "kf-backend.c"
	}
#line 267 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (_data_->_tmp0_) {
#line 269 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 269 "/run/build/folks/backends/key-file/kf-backend.vala"
		if (_data_->_state_ != 0) {
#line 269 "/run/build/folks/backends/key-file/kf-backend.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 269 "/run/build/folks/backends/key-file/kf-backend.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1114 "kf-backend.c"
			}
		}
#line 269 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_unref (_data_->_async_result);
#line 269 "/run/build/folks/backends/key-file/kf-backend.vala"
		return FALSE;
#line 1121 "kf-backend.c"
	}
	{
#line 274 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->self->priv->_prepare_pending = TRUE;
#line 275 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_freeze_notify ((GObject*) _data_->self);
#line 1128 "kf-backend.c"
		{
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->_tmp3_ = _data_->self->priv->_persona_stores;
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->_tmp4_ = gee_abstract_map_get_values ((GeeAbstractMap*) _data_->_tmp3_);
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->_tmp5_ = _data_->_tmp4_;
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->_tmp6_ = _data_->_tmp5_;
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->_tmp7_ = gee_iterable_iterator ((GeeIterable*) _data_->_tmp6_);
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->_tmp8_ = _data_->_tmp7_;
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
			_g_object_unref0 (_data_->_tmp6_);
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
			_data_->_persona_store_it = _data_->_tmp8_;
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
			while (TRUE) {
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
				_data_->_tmp9_ = _data_->_persona_store_it;
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
				if (!gee_iterator_next (_data_->_tmp9_)) {
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
					break;
#line 1154 "kf-backend.c"
				}
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
				_data_->_tmp10_ = _data_->_persona_store_it;
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
				_data_->_tmp11_ = gee_iterator_get (_data_->_tmp10_);
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
				_data_->persona_store = (FolksBackendsKfPersonaStore*) _data_->_tmp11_;
#line 279 "/run/build/folks/backends/key-file/kf-backend.vala"
				_data_->_tmp12_ = _data_->persona_store;
#line 279 "/run/build/folks/backends/key-file/kf-backend.vala"
				g_signal_emit_by_name ((FolksBackend*) _data_->self, "persona-store-removed", (FolksPersonaStore*) _data_->_tmp12_);
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
				_g_object_unref0 (_data_->persona_store);
#line 1168 "kf-backend.c"
			}
#line 277 "/run/build/folks/backends/key-file/kf-backend.vala"
			_g_object_unref0 (_data_->_persona_store_it);
#line 1172 "kf-backend.c"
		}
#line 282 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->_tmp13_ = _data_->self->priv->_persona_stores;
#line 282 "/run/build/folks/backends/key-file/kf-backend.vala"
		gee_abstract_map_clear ((GeeAbstractMap*) _data_->_tmp13_);
#line 283 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_notify ((GObject*) _data_->self, "persona-stores");
#line 285 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->self->priv->_is_quiescent = FALSE;
#line 286 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_notify ((GObject*) _data_->self, "is-quiescent");
#line 288 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->self->priv->_is_prepared = FALSE;
#line 289 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_notify ((GObject*) _data_->self, "is-prepared");
#line 1188 "kf-backend.c"
	}
	__finally1:
	{
#line 293 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_thaw_notify ((GObject*) _data_->self);
#line 294 "/run/build/folks/backends/key-file/kf-backend.vala"
		_data_->self->priv->_prepare_pending = FALSE;
#line 1196 "kf-backend.c"
	}
#line 272 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 272 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 272 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_object_unref (_data_->_async_result);
#line 272 "/run/build/folks/backends/key-file/kf-backend.vala"
		return FALSE;
#line 1206 "kf-backend.c"
	}
#line 265 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 265 "/run/build/folks/backends/key-file/kf-backend.vala"
	if (_data_->_state_ != 0) {
#line 265 "/run/build/folks/backends/key-file/kf-backend.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 265 "/run/build/folks/backends/key-file/kf-backend.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1216 "kf-backend.c"
		}
	}
#line 265 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_object_unref (_data_->_async_result);
#line 265 "/run/build/folks/backends/key-file/kf-backend.vala"
	return FALSE;
#line 1223 "kf-backend.c"
}


static void
_folks_backends_kf_backend_store_removed_cb (FolksBackendsKfBackend* self,
                                             FolksPersonaStore* store)
{
#line 298 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_return_if_fail (self != NULL);
#line 298 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_return_if_fail (store != NULL);
#line 300 "/run/build/folks/backends/key-file/kf-backend.vala"
	_folks_backends_kf_backend_remove_store (self, G_TYPE_CHECK_INSTANCE_CAST (store, FOLKS_BACKENDS_KF_TYPE_PERSONA_STORE, FolksBackendsKfPersonaStore), TRUE);
#line 1237 "kf-backend.c"
}


static gboolean
folks_backends_kf_backend_real_get_is_prepared (FolksBackend* base)
{
	gboolean result;
	FolksBackendsKfBackend* self;
	gboolean _tmp0_;
#line 52 "/run/build/folks/backends/key-file/kf-backend.vala"
	self = (FolksBackendsKfBackend*) base;
#line 52 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp0_ = self->priv->_is_prepared;
#line 52 "/run/build/folks/backends/key-file/kf-backend.vala"
	result = _tmp0_;
#line 52 "/run/build/folks/backends/key-file/kf-backend.vala"
	return result;
#line 1255 "kf-backend.c"
}


static gboolean
folks_backends_kf_backend_real_get_is_quiescent (FolksBackend* base)
{
	gboolean result;
	FolksBackendsKfBackend* self;
	gboolean _tmp0_;
#line 64 "/run/build/folks/backends/key-file/kf-backend.vala"
	self = (FolksBackendsKfBackend*) base;
#line 64 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp0_ = self->priv->_is_quiescent;
#line 64 "/run/build/folks/backends/key-file/kf-backend.vala"
	result = _tmp0_;
#line 64 "/run/build/folks/backends/key-file/kf-backend.vala"
	return result;
#line 1273 "kf-backend.c"
}


static const gchar*
folks_backends_kf_backend_real_get_name (FolksBackend* base)
{
	const gchar* result;
	FolksBackendsKfBackend* self;
#line 70 "/run/build/folks/backends/key-file/kf-backend.vala"
	self = (FolksBackendsKfBackend*) base;
#line 70 "/run/build/folks/backends/key-file/kf-backend.vala"
	result = BACKEND_NAME;
#line 70 "/run/build/folks/backends/key-file/kf-backend.vala"
	return result;
#line 1288 "kf-backend.c"
}


static GeeMap*
folks_backends_kf_backend_real_get_persona_stores (FolksBackend* base)
{
	GeeMap* result;
	FolksBackendsKfBackend* self;
	GeeMap* _tmp0_;
#line 77 "/run/build/folks/backends/key-file/kf-backend.vala"
	self = (FolksBackendsKfBackend*) base;
#line 77 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp0_ = self->priv->_persona_stores_ro;
#line 77 "/run/build/folks/backends/key-file/kf-backend.vala"
	result = _tmp0_;
#line 77 "/run/build/folks/backends/key-file/kf-backend.vala"
	return result;
#line 1306 "kf-backend.c"
}


static GObject *
folks_backends_kf_backend_constructor (GType type,
                                       guint n_construct_properties,
                                       GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	FolksBackendsKfBackend * self;
	GeeHashMap* _tmp0_;
	GeeHashMap* _tmp1_;
	GeeMap* _tmp2_;
	GeeMap* _tmp3_;
#line 165 "/run/build/folks/backends/key-file/kf-backend.vala"
	parent_class = G_OBJECT_CLASS (folks_backends_kf_backend_parent_class);
#line 165 "/run/build/folks/backends/key-file/kf-backend.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 165 "/run/build/folks/backends/key-file/kf-backend.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_BACKENDS_KF_TYPE_BACKEND, FolksBackendsKfBackend);
#line 167 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp0_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, FOLKS_BACKENDS_KF_TYPE_PERSONA_STORE, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 167 "/run/build/folks/backends/key-file/kf-backend.vala"
	_g_object_unref0 (self->priv->_persona_stores);
#line 167 "/run/build/folks/backends/key-file/kf-backend.vala"
	self->priv->_persona_stores = _tmp0_;
#line 168 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp1_ = self->priv->_persona_stores;
#line 168 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp2_ = gee_abstract_map_get_read_only_view ((GeeAbstractMap*) _tmp1_);
#line 168 "/run/build/folks/backends/key-file/kf-backend.vala"
	_tmp3_ = _tmp2_;
#line 168 "/run/build/folks/backends/key-file/kf-backend.vala"
	_g_object_unref0 (self->priv->_persona_stores_ro);
#line 168 "/run/build/folks/backends/key-file/kf-backend.vala"
	self->priv->_persona_stores_ro = _tmp3_;
#line 165 "/run/build/folks/backends/key-file/kf-backend.vala"
	return obj;
#line 1346 "kf-backend.c"
}


static void
folks_backends_kf_backend_class_init (FolksBackendsKfBackendClass * klass)
{
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	folks_backends_kf_backend_parent_class = g_type_class_peek_parent (klass);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_type_class_add_private (klass, sizeof (FolksBackendsKfBackendPrivate));
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	((FolksBackendClass *) klass)->enable_persona_store = (void (*) (FolksBackend *, FolksPersonaStore*)) folks_backends_kf_backend_real_enable_persona_store;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	((FolksBackendClass *) klass)->disable_persona_store = (void (*) (FolksBackend *, FolksPersonaStore*)) folks_backends_kf_backend_real_disable_persona_store;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	((FolksBackendClass *) klass)->set_persona_stores = (void (*) (FolksBackend *, GeeSet*)) folks_backends_kf_backend_real_set_persona_stores;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	((FolksBackendClass *) klass)->prepare = (void (*) (FolksBackend *, GAsyncReadyCallback, gpointer)) folks_backends_kf_backend_real_prepare;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	((FolksBackendClass *) klass)->prepare_finish = (void (*) (FolksBackend *, GAsyncResult*, GError**)) folks_backends_kf_backend_real_prepare_finish;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	((FolksBackendClass *) klass)->unprepare = (void (*) (FolksBackend *, GAsyncReadyCallback, gpointer)) folks_backends_kf_backend_real_unprepare;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	((FolksBackendClass *) klass)->unprepare_finish = (void (*) (FolksBackend *, GAsyncResult*, GError**)) folks_backends_kf_backend_real_unprepare_finish;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	FOLKS_BACKEND_CLASS (klass)->get_is_prepared = folks_backends_kf_backend_real_get_is_prepared;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	FOLKS_BACKEND_CLASS (klass)->get_is_quiescent = folks_backends_kf_backend_real_get_is_quiescent;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	FOLKS_BACKEND_CLASS (klass)->get_name = folks_backends_kf_backend_real_get_name;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	FOLKS_BACKEND_CLASS (klass)->get_persona_stores = folks_backends_kf_backend_real_get_persona_stores;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_folks_backends_kf_backend_get_property;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	G_OBJECT_CLASS (klass)->constructor = folks_backends_kf_backend_constructor;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_backends_kf_backend_finalize;
#line 1385 "kf-backend.c"
	/**
	   * Whether this Backend has been prepared.
	   *
	   * See {@link Folks.Backend.is_prepared}.
	   *
	   * @since 0.3.0
	   */
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_BACKENDS_KF_BACKEND_IS_PREPARED_PROPERTY, folks_backends_kf_backend_properties[FOLKS_BACKENDS_KF_BACKEND_IS_PREPARED_PROPERTY] = g_param_spec_boolean ("is-prepared", "is-prepared", "is-prepared", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1395 "kf-backend.c"
	/**
	   * Whether this Backend has reached a quiescent state.
	   *
	   * See {@link Folks.Backend.is_quiescent}.
	   *
	   * @since 0.6.2
	   */
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_BACKENDS_KF_BACKEND_IS_QUIESCENT_PROPERTY, folks_backends_kf_backend_properties[FOLKS_BACKENDS_KF_BACKEND_IS_QUIESCENT_PROPERTY] = g_param_spec_boolean ("is-quiescent", "is-quiescent", "is-quiescent", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1405 "kf-backend.c"
	/**
	   * {@inheritDoc}
	   */
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_BACKENDS_KF_BACKEND_NAME_PROPERTY, folks_backends_kf_backend_properties[FOLKS_BACKENDS_KF_BACKEND_NAME_PROPERTY] = g_param_spec_string ("name", "name", "name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1411 "kf-backend.c"
	/**
	   * {@inheritDoc}
	   */
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_BACKENDS_KF_BACKEND_PERSONA_STORES_PROPERTY, folks_backends_kf_backend_properties[FOLKS_BACKENDS_KF_BACKEND_PERSONA_STORES_PROPERTY] = g_param_spec_object ("persona-stores", "persona-stores", "persona-stores", GEE_TYPE_MAP, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1417 "kf-backend.c"
}


static void
folks_backends_kf_backend_instance_init (FolksBackendsKfBackend * self)
{
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	self->priv = FOLKS_BACKENDS_KF_BACKEND_GET_PRIVATE (self);
#line 37 "/run/build/folks/backends/key-file/kf-backend.vala"
	self->priv->_is_prepared = FALSE;
#line 38 "/run/build/folks/backends/key-file/kf-backend.vala"
	self->priv->_prepare_pending = FALSE;
#line 39 "/run/build/folks/backends/key-file/kf-backend.vala"
	self->priv->_is_quiescent = FALSE;
#line 1432 "kf-backend.c"
}


static void
folks_backends_kf_backend_finalize (GObject * obj)
{
	FolksBackendsKfBackend * self;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_BACKENDS_KF_TYPE_BACKEND, FolksBackendsKfBackend);
#line 40 "/run/build/folks/backends/key-file/kf-backend.vala"
	_g_object_unref0 (self->priv->_persona_stores);
#line 41 "/run/build/folks/backends/key-file/kf-backend.vala"
	_g_object_unref0 (self->priv->_persona_stores_ro);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	G_OBJECT_CLASS (folks_backends_kf_backend_parent_class)->finalize (obj);
#line 1448 "kf-backend.c"
}


/**
 * A backend which loads {@link Persona}s from a simple key file in
 * (XDG_DATA_HOME/folks/) and presents them through a single
 * {@link PersonaStore}.
 *
 * @since 0.1.13
 */
GType
folks_backends_kf_backend_get_type (void)
{
	static volatile gsize folks_backends_kf_backend_type_id__volatile = 0;
	if (g_once_init_enter (&folks_backends_kf_backend_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksBackendsKfBackendClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_backends_kf_backend_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksBackendsKfBackend), 0, (GInstanceInitFunc) folks_backends_kf_backend_instance_init, NULL };
		GType folks_backends_kf_backend_type_id;
		folks_backends_kf_backend_type_id = g_type_register_static (FOLKS_TYPE_BACKEND, "FolksBackendsKfBackend", &g_define_type_info, 0);
		g_once_init_leave (&folks_backends_kf_backend_type_id__volatile, folks_backends_kf_backend_type_id);
	}
	return folks_backends_kf_backend_type_id__volatile;
}


static void
_vala_folks_backends_kf_backend_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec)
{
	FolksBackendsKfBackend * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_BACKENDS_KF_TYPE_BACKEND, FolksBackendsKfBackend);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
	switch (property_id) {
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		case FOLKS_BACKENDS_KF_BACKEND_IS_PREPARED_PROPERTY:
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_value_set_boolean (value, folks_backend_get_is_prepared ((FolksBackend*) self));
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		break;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		case FOLKS_BACKENDS_KF_BACKEND_IS_QUIESCENT_PROPERTY:
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_value_set_boolean (value, folks_backend_get_is_quiescent ((FolksBackend*) self));
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		break;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		case FOLKS_BACKENDS_KF_BACKEND_NAME_PROPERTY:
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_value_set_string (value, folks_backend_get_name ((FolksBackend*) self));
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		break;
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		case FOLKS_BACKENDS_KF_BACKEND_PERSONA_STORES_PROPERTY:
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		g_value_set_object (value, folks_backend_get_persona_stores ((FolksBackend*) self));
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		break;
#line 1507 "kf-backend.c"
		default:
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 35 "/run/build/folks/backends/key-file/kf-backend.vala"
		break;
#line 1513 "kf-backend.c"
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}



