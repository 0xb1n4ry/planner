/* protocol-icon.c generated by valac 0.40.11, the Vala compiler
 * generated from protocol-icon.vala, do not modify */

/*
 * Copyright (C) 2012 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Michal Hruby <michal.hruby@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <float.h>
#include <math.h>


#define UNITY_PROTOCOL_TYPE_CATEGORY_TYPE (unity_protocol_category_type_get_type ())

#define UNITY_PROTOCOL_TYPE_ANNOTATED_ICON (unity_protocol_annotated_icon_get_type ())
#define UNITY_PROTOCOL_ANNOTATED_ICON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_PROTOCOL_TYPE_ANNOTATED_ICON, UnityProtocolAnnotatedIcon))
#define UNITY_PROTOCOL_ANNOTATED_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_PROTOCOL_TYPE_ANNOTATED_ICON, UnityProtocolAnnotatedIconClass))
#define UNITY_PROTOCOL_IS_ANNOTATED_ICON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_PROTOCOL_TYPE_ANNOTATED_ICON))
#define UNITY_PROTOCOL_IS_ANNOTATED_ICON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_PROTOCOL_TYPE_ANNOTATED_ICON))
#define UNITY_PROTOCOL_ANNOTATED_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_PROTOCOL_TYPE_ANNOTATED_ICON, UnityProtocolAnnotatedIconClass))

typedef struct _UnityProtocolAnnotatedIcon UnityProtocolAnnotatedIcon;
typedef struct _UnityProtocolAnnotatedIconClass UnityProtocolAnnotatedIconClass;
typedef struct _UnityProtocolAnnotatedIconPrivate UnityProtocolAnnotatedIconPrivate;
enum  {
	UNITY_PROTOCOL_ANNOTATED_ICON_0_PROPERTY,
	UNITY_PROTOCOL_ANNOTATED_ICON_ICON_PROPERTY,
	UNITY_PROTOCOL_ANNOTATED_ICON_RIBBON_PROPERTY,
	UNITY_PROTOCOL_ANNOTATED_ICON_CATEGORY_PROPERTY,
	UNITY_PROTOCOL_ANNOTATED_ICON_USE_SMALL_ICON_PROPERTY,
	UNITY_PROTOCOL_ANNOTATED_ICON_COLORIZE_VALUE_PROPERTY,
	UNITY_PROTOCOL_ANNOTATED_ICON_NUM_PROPERTIES
};
static GParamSpec* unity_protocol_annotated_icon_properties[UNITY_PROTOCOL_ANNOTATED_ICON_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

typedef enum  {
	UNITY_PROTOCOL_CATEGORY_TYPE_NONE,
	UNITY_PROTOCOL_CATEGORY_TYPE_APPLICATION,
	UNITY_PROTOCOL_CATEGORY_TYPE_BOOK,
	UNITY_PROTOCOL_CATEGORY_TYPE_MUSIC,
	UNITY_PROTOCOL_CATEGORY_TYPE_MOVIE,
	UNITY_PROTOCOL_CATEGORY_TYPE_GAMES,
	UNITY_PROTOCOL_CATEGORY_TYPE_ELECTRONICS,
	UNITY_PROTOCOL_CATEGORY_TYPE_COMPUTERS,
	UNITY_PROTOCOL_CATEGORY_TYPE_OFFICE,
	UNITY_PROTOCOL_CATEGORY_TYPE_HOME,
	UNITY_PROTOCOL_CATEGORY_TYPE_GARDEN,
	UNITY_PROTOCOL_CATEGORY_TYPE_PETS,
	UNITY_PROTOCOL_CATEGORY_TYPE_TOYS,
	UNITY_PROTOCOL_CATEGORY_TYPE_CHILDREN,
	UNITY_PROTOCOL_CATEGORY_TYPE_BABY,
	UNITY_PROTOCOL_CATEGORY_TYPE_CLOTHES,
	UNITY_PROTOCOL_CATEGORY_TYPE_SHOES,
	UNITY_PROTOCOL_CATEGORY_TYPE_WATCHES,
	UNITY_PROTOCOL_CATEGORY_TYPE_SPORTS,
	UNITY_PROTOCOL_CATEGORY_TYPE_OUTDOORS,
	UNITY_PROTOCOL_CATEGORY_TYPE_GROCERY,
	UNITY_PROTOCOL_CATEGORY_TYPE_HEALTH,
	UNITY_PROTOCOL_CATEGORY_TYPE_BEAUTY,
	UNITY_PROTOCOL_CATEGORY_TYPE_DIY,
	UNITY_PROTOCOL_CATEGORY_TYPE_TOOLS,
	UNITY_PROTOCOL_CATEGORY_TYPE_CAR,
	UNITY_PROTOCOL_CATEGORY_TYPE_N_CATEGORIES
} UnityProtocolCategoryType;

struct _UnityProtocolAnnotatedIcon {
	GObject parent_instance;
	UnityProtocolAnnotatedIconPrivate * priv;
};

struct _UnityProtocolAnnotatedIconClass {
	GObjectClass parent_class;
};

struct _UnityProtocolAnnotatedIconPrivate {
	GIcon* _icon;
	gchar* _ribbon;
	UnityProtocolCategoryType _category;
	gboolean _use_small_icon;
	guint32 _colorize_value;
	GHashTable* _hints;
};


static gpointer unity_protocol_annotated_icon_parent_class = NULL;
static GIconIface * unity_protocol_annotated_icon_g_icon_parent_iface = NULL;

GType unity_protocol_category_type_get_type (void) G_GNUC_CONST;
GType unity_protocol_annotated_icon_get_type (void) G_GNUC_CONST;
#define UNITY_PROTOCOL_ANNOTATED_ICON_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_PROTOCOL_TYPE_ANNOTATED_ICON, UnityProtocolAnnotatedIconPrivate))
UnityProtocolAnnotatedIcon* unity_protocol_annotated_icon_new (GIcon* base_icon);
UnityProtocolAnnotatedIcon* unity_protocol_annotated_icon_construct (GType object_type,
                                                                     GIcon* base_icon);
void unity_protocol_annotated_icon_add_hint (UnityProtocolAnnotatedIcon* self,
                                             const gchar* name,
                                             GVariant* value);
GVariant* unity_protocol_annotated_icon_get_hint (UnityProtocolAnnotatedIcon* self,
                                                  const gchar* name);
void unity_protocol_annotated_icon_set_colorize_rgba (UnityProtocolAnnotatedIcon* self,
                                                      gdouble r,
                                                      gdouble g,
                                                      gdouble b,
                                                      gdouble a);
void unity_protocol_annotated_icon_set_colorize_value (UnityProtocolAnnotatedIcon* self,
                                                       guint32 value);
static gboolean unity_protocol_annotated_icon_real_equal (GIcon* base,
                                                   GIcon* icon2);
static guint unity_protocol_annotated_icon_real_hash (GIcon* base);
static GIcon* unity_protocol_annotated_icon_real_from_tokens (gchar** tokens,
                                                       int tokens_length1,
                                                       gint version,
                                                       GError** error,
                                                       GIcon* base);
static GHashTable* _variant_get1 (GVariant* value);
void unity_protocol_annotated_icon_set_icon (UnityProtocolAnnotatedIcon* self,
                                             GIcon* value);
void unity_protocol_annotated_icon_set_category (UnityProtocolAnnotatedIcon* self,
                                                 UnityProtocolCategoryType value);
void unity_protocol_annotated_icon_set_ribbon (UnityProtocolAnnotatedIcon* self,
                                               const gchar* value);
void unity_protocol_annotated_icon_set_use_small_icon (UnityProtocolAnnotatedIcon* self,
                                                       gboolean value);
static gboolean unity_protocol_annotated_icon_real_to_tokens (GIcon* base,
                                                       GPtrArray* tokens,
                                                       gint* version);
GIcon* unity_protocol_annotated_icon_get_icon (UnityProtocolAnnotatedIcon* self);
static GVariant* _variant_new2 (const gchar* value);
UnityProtocolCategoryType unity_protocol_annotated_icon_get_category (UnityProtocolAnnotatedIcon* self);
const gchar* unity_protocol_annotated_icon_get_ribbon (UnityProtocolAnnotatedIcon* self);
static GVariant* _variant_new3 (const gchar* value);
gboolean unity_protocol_annotated_icon_get_use_small_icon (UnityProtocolAnnotatedIcon* self);
guint32 unity_protocol_annotated_icon_get_colorize_value (UnityProtocolAnnotatedIcon* self);
static GVariant* _variant_new4 (GHashTable* value);
static GVariant* unity_protocol_annotated_icon_real_serialize (GIcon* base);
static GObject * unity_protocol_annotated_icon_constructor (GType type,
                                                     guint n_construct_properties,
                                                     GObjectConstructParam * construct_properties);
static void _g_free0_ (gpointer var);
static void _g_variant_unref0_ (gpointer var);
static void unity_protocol_annotated_icon_finalize (GObject * obj);
static void _vala_unity_protocol_annotated_icon_get_property (GObject * object,
                                                       guint property_id,
                                                       GValue * value,
                                                       GParamSpec * pspec);
static void _vala_unity_protocol_annotated_icon_set_property (GObject * object,
                                                       guint property_id,
                                                       const GValue * value,
                                                       GParamSpec * pspec);


GType
unity_protocol_category_type_get_type (void)
{
	static volatile gsize unity_protocol_category_type_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_category_type_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_PROTOCOL_CATEGORY_TYPE_NONE, "UNITY_PROTOCOL_CATEGORY_TYPE_NONE", "none"}, {UNITY_PROTOCOL_CATEGORY_TYPE_APPLICATION, "UNITY_PROTOCOL_CATEGORY_TYPE_APPLICATION", "application"}, {UNITY_PROTOCOL_CATEGORY_TYPE_BOOK, "UNITY_PROTOCOL_CATEGORY_TYPE_BOOK", "book"}, {UNITY_PROTOCOL_CATEGORY_TYPE_MUSIC, "UNITY_PROTOCOL_CATEGORY_TYPE_MUSIC", "music"}, {UNITY_PROTOCOL_CATEGORY_TYPE_MOVIE, "UNITY_PROTOCOL_CATEGORY_TYPE_MOVIE", "movie"}, {UNITY_PROTOCOL_CATEGORY_TYPE_GAMES, "UNITY_PROTOCOL_CATEGORY_TYPE_GAMES", "games"}, {UNITY_PROTOCOL_CATEGORY_TYPE_ELECTRONICS, "UNITY_PROTOCOL_CATEGORY_TYPE_ELECTRONICS", "electronics"}, {UNITY_PROTOCOL_CATEGORY_TYPE_COMPUTERS, "UNITY_PROTOCOL_CATEGORY_TYPE_COMPUTERS", "computers"}, {UNITY_PROTOCOL_CATEGORY_TYPE_OFFICE, "UNITY_PROTOCOL_CATEGORY_TYPE_OFFICE", "office"}, {UNITY_PROTOCOL_CATEGORY_TYPE_HOME, "UNITY_PROTOCOL_CATEGORY_TYPE_HOME", "home"}, {UNITY_PROTOCOL_CATEGORY_TYPE_GARDEN, "UNITY_PROTOCOL_CATEGORY_TYPE_GARDEN", "garden"}, {UNITY_PROTOCOL_CATEGORY_TYPE_PETS, "UNITY_PROTOCOL_CATEGORY_TYPE_PETS", "pets"}, {UNITY_PROTOCOL_CATEGORY_TYPE_TOYS, "UNITY_PROTOCOL_CATEGORY_TYPE_TOYS", "toys"}, {UNITY_PROTOCOL_CATEGORY_TYPE_CHILDREN, "UNITY_PROTOCOL_CATEGORY_TYPE_CHILDREN", "children"}, {UNITY_PROTOCOL_CATEGORY_TYPE_BABY, "UNITY_PROTOCOL_CATEGORY_TYPE_BABY", "baby"}, {UNITY_PROTOCOL_CATEGORY_TYPE_CLOTHES, "UNITY_PROTOCOL_CATEGORY_TYPE_CLOTHES", "clothes"}, {UNITY_PROTOCOL_CATEGORY_TYPE_SHOES, "UNITY_PROTOCOL_CATEGORY_TYPE_SHOES", "shoes"}, {UNITY_PROTOCOL_CATEGORY_TYPE_WATCHES, "UNITY_PROTOCOL_CATEGORY_TYPE_WATCHES", "watches"}, {UNITY_PROTOCOL_CATEGORY_TYPE_SPORTS, "UNITY_PROTOCOL_CATEGORY_TYPE_SPORTS", "sports"}, {UNITY_PROTOCOL_CATEGORY_TYPE_OUTDOORS, "UNITY_PROTOCOL_CATEGORY_TYPE_OUTDOORS", "outdoors"}, {UNITY_PROTOCOL_CATEGORY_TYPE_GROCERY, "UNITY_PROTOCOL_CATEGORY_TYPE_GROCERY", "grocery"}, {UNITY_PROTOCOL_CATEGORY_TYPE_HEALTH, "UNITY_PROTOCOL_CATEGORY_TYPE_HEALTH", "health"}, {UNITY_PROTOCOL_CATEGORY_TYPE_BEAUTY, "UNITY_PROTOCOL_CATEGORY_TYPE_BEAUTY", "beauty"}, {UNITY_PROTOCOL_CATEGORY_TYPE_DIY, "UNITY_PROTOCOL_CATEGORY_TYPE_DIY", "diy"}, {UNITY_PROTOCOL_CATEGORY_TYPE_TOOLS, "UNITY_PROTOCOL_CATEGORY_TYPE_TOOLS", "tools"}, {UNITY_PROTOCOL_CATEGORY_TYPE_CAR, "UNITY_PROTOCOL_CATEGORY_TYPE_CAR", "car"}, {UNITY_PROTOCOL_CATEGORY_TYPE_N_CATEGORIES, "UNITY_PROTOCOL_CATEGORY_TYPE_N_CATEGORIES", "n-categories"}, {0, NULL, NULL}};
		GType unity_protocol_category_type_type_id;
		unity_protocol_category_type_type_id = g_enum_register_static ("UnityProtocolCategoryType", values);
		g_once_init_leave (&unity_protocol_category_type_type_id__volatile, unity_protocol_category_type_type_id);
	}
	return unity_protocol_category_type_type_id__volatile;
}


UnityProtocolAnnotatedIcon*
unity_protocol_annotated_icon_construct (GType object_type,
                                         GIcon* base_icon)
{
	UnityProtocolAnnotatedIcon * self = NULL;
	self = (UnityProtocolAnnotatedIcon*) g_object_new (object_type, "icon", base_icon, NULL);
	return self;
}


UnityProtocolAnnotatedIcon*
unity_protocol_annotated_icon_new (GIcon* base_icon)
{
	return unity_protocol_annotated_icon_construct (UNITY_PROTOCOL_TYPE_ANNOTATED_ICON, base_icon);
}


static gpointer
_g_variant_ref0 (gpointer self)
{
	return self ? g_variant_ref (self) : NULL;
}


void
unity_protocol_annotated_icon_add_hint (UnityProtocolAnnotatedIcon* self,
                                        const gchar* name,
                                        GVariant* value)
{
	GHashTable* _tmp0_;
	gchar* _tmp1_;
	GVariant* _tmp2_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (name != NULL);
	g_return_if_fail (value != NULL);
	_tmp0_ = self->priv->_hints;
	_tmp1_ = g_strdup (name);
	_tmp2_ = _g_variant_ref0 (value);
	g_hash_table_insert (_tmp0_, _tmp1_, _tmp2_);
}


GVariant*
unity_protocol_annotated_icon_get_hint (UnityProtocolAnnotatedIcon* self,
                                        const gchar* name)
{
	GVariant* result = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	g_return_val_if_fail (self != NULL, NULL);
	g_return_val_if_fail (name != NULL, NULL);
	_tmp0_ = self->priv->_hints;
	_tmp1_ = g_hash_table_lookup (_tmp0_, name);
	result = (GVariant*) _tmp1_;
	return result;
}


void
unity_protocol_annotated_icon_set_colorize_rgba (UnityProtocolAnnotatedIcon* self,
                                                 gdouble r,
                                                 gdouble g,
                                                 gdouble b,
                                                 gdouble a)
{
	static const guint MAX_VAL = (guint) 255;
	static const gdouble MAX_VAL_DBL = 255.0;
	guint32 color = 0U;
	guint32 _tmp0_;
	guint32 _tmp1_;
	guint32 _tmp2_;
	guint32 _tmp3_;
	guint32 _tmp4_;
	guint32 _tmp5_;
	guint32 _tmp6_;
	guint32 _tmp7_;
	g_return_if_fail (self != NULL);
	color = (guint32) 0;
	_tmp0_ = color;
	color = _tmp0_ + MIN (MAX_VAL, (guint) round (r * MAX_VAL_DBL));
	_tmp1_ = color;
	color = _tmp1_ << 8;
	_tmp2_ = color;
	color = _tmp2_ + MIN (MAX_VAL, (guint) round (g * MAX_VAL_DBL));
	_tmp3_ = color;
	color = _tmp3_ << 8;
	_tmp4_ = color;
	color = _tmp4_ + MIN (MAX_VAL, (guint) round (b * MAX_VAL_DBL));
	_tmp5_ = color;
	color = _tmp5_ << 8;
	_tmp6_ = color;
	color = _tmp6_ + MIN (MAX_VAL, (guint) round (a * MAX_VAL_DBL));
	_tmp7_ = color;
	unity_protocol_annotated_icon_set_colorize_value (self, _tmp7_);
}


static gboolean
unity_protocol_annotated_icon_real_equal (GIcon* base,
                                          GIcon* icon2)
{
	UnityProtocolAnnotatedIcon * self;
	gboolean result = FALSE;
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gboolean _tmp4_;
	self = (UnityProtocolAnnotatedIcon*) base;
	_tmp0_ = g_icon_to_string ((GIcon*) self);
	_tmp1_ = _tmp0_;
	_tmp2_ = g_icon_to_string (icon2);
	_tmp3_ = _tmp2_;
	_tmp4_ = g_strcmp0 (_tmp1_, _tmp3_) == 0;
	_g_free0 (_tmp3_);
	_g_free0 (_tmp1_);
	result = _tmp4_;
	return result;
}


static guint
unity_protocol_annotated_icon_real_hash (GIcon* base)
{
	UnityProtocolAnnotatedIcon * self;
	guint result = 0U;
	GHashFunc _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	guint _tmp3_;
	self = (UnityProtocolAnnotatedIcon*) base;
	_tmp0_ = g_str_hash;
	_tmp1_ = g_icon_to_string ((GIcon*) self);
	_tmp2_ = _tmp1_;
	_tmp3_ = _tmp0_ (_tmp2_);
	_g_free0 (_tmp2_);
	result = _tmp3_;
	return result;
}


static GHashTable*
_variant_get1 (GVariant* value)
{
	GHashTable* _tmp9_;
	GVariantIter _tmp10_;
	GVariant* _tmp11_;
	GVariant* _tmp12_;
	_tmp9_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, (GDestroyNotify) g_variant_unref);
	g_variant_iter_init (&_tmp10_, value);
	while (g_variant_iter_loop (&_tmp10_, "{?*}", &_tmp11_, &_tmp12_)) {
		g_hash_table_insert (_tmp9_, g_variant_dup_string (_tmp11_, NULL), g_variant_get_variant (_tmp12_));
	}
	return _tmp9_;
}


static GIcon*
unity_protocol_annotated_icon_real_from_tokens (gchar** tokens,
                                                int tokens_length1,
                                                gint version,
                                                GError** error,
                                                GIcon* base)
{
	UnityProtocolAnnotatedIcon * self;
	GIcon* result = NULL;
	GVariant* dict = NULL;
	const gchar* _tmp1_;
	GVariant* _tmp2_;
	UnityProtocolAnnotatedIcon* icon = NULL;
	GObject* _tmp3_;
	GObject* _tmp4_;
	UnityProtocolAnnotatedIcon* _tmp5_;
	UnityProtocolAnnotatedIcon* _tmp6_;
	GVariant* _tmp7_;
	GHashTable* _tmp8_;
	GVariant* icon_variant = NULL;
	UnityProtocolAnnotatedIcon* _tmp13_;
	GVariant* _tmp14_;
	gboolean _tmp15_ = FALSE;
	GVariant* _tmp16_;
	GVariant* category_variant = NULL;
	UnityProtocolAnnotatedIcon* _tmp26_;
	GVariant* _tmp27_;
	GVariant* _tmp28_;
	GVariant* ribbon_variant = NULL;
	UnityProtocolAnnotatedIcon* _tmp33_;
	GVariant* _tmp34_;
	gboolean _tmp35_ = FALSE;
	GVariant* _tmp36_;
	GVariant* small_icon_variant = NULL;
	UnityProtocolAnnotatedIcon* _tmp44_;
	GVariant* _tmp45_;
	GVariant* _tmp46_;
	GVariant* colorize_variant = NULL;
	UnityProtocolAnnotatedIcon* _tmp51_;
	GVariant* _tmp52_;
	GVariant* _tmp53_;
	GError * _inner_error_ = NULL;
	self = (UnityProtocolAnnotatedIcon*) base;
	if (tokens_length1 != 1) {
		GError* _tmp0_;
		_tmp0_ = g_error_new_literal (G_IO_ERROR, G_IO_ERROR_INVALID_ARGUMENT, "Unable to construct AnnotatedIcon: wrong number of tokens");
		_inner_error_ = _tmp0_;
		g_propagate_error (error, _inner_error_);
		return NULL;
	}
	_tmp1_ = tokens[0];
	_tmp2_ = g_variant_parse (NULL, _tmp1_, NULL, NULL, &_inner_error_);
	dict = _tmp2_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		return NULL;
	}
	_tmp3_ = g_object_new (UNITY_PROTOCOL_TYPE_ANNOTATED_ICON, NULL);
	_tmp4_ = G_IS_INITIALLY_UNOWNED (_tmp3_) ? g_object_ref_sink (_tmp3_) : _tmp3_;
	_tmp5_ = G_TYPE_CHECK_INSTANCE_TYPE (_tmp4_, UNITY_PROTOCOL_TYPE_ANNOTATED_ICON) ? ((UnityProtocolAnnotatedIcon*) _tmp4_) : NULL;
	if (_tmp5_ == NULL) {
		_g_object_unref0 (_tmp4_);
	}
	icon = _tmp5_;
	_tmp6_ = icon;
	_tmp7_ = dict;
	_tmp8_ = _variant_get1 (_tmp7_);
	_g_hash_table_unref0 (_tmp6_->priv->_hints);
	_tmp6_->priv->_hints = _tmp8_;
	_tmp13_ = icon;
	_tmp14_ = unity_protocol_annotated_icon_get_hint (_tmp13_, "base-icon");
	icon_variant = _tmp14_;
	_tmp16_ = icon_variant;
	if (_tmp16_ != NULL) {
		GVariant* _tmp17_;
		const gchar* _tmp18_;
		_tmp17_ = icon_variant;
		_tmp18_ = g_variant_get_string (_tmp17_, NULL);
		_tmp15_ = _tmp18_ != NULL;
	} else {
		_tmp15_ = FALSE;
	}
	if (_tmp15_) {
		GIcon* _tmp19_ = NULL;
		GVariant* _tmp20_;
		const gchar* _tmp21_;
		GIcon* _tmp22_;
		UnityProtocolAnnotatedIcon* _tmp23_;
		UnityProtocolAnnotatedIcon* _tmp24_;
		GHashTable* _tmp25_;
		_tmp20_ = icon_variant;
		_tmp21_ = g_variant_get_string (_tmp20_, NULL);
		_tmp22_ = g_icon_new_for_string (_tmp21_, &_inner_error_);
		_tmp19_ = _tmp22_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			g_propagate_error (error, _inner_error_);
			_g_object_unref0 (icon);
			_g_variant_unref0 (dict);
			return NULL;
		}
		_tmp23_ = icon;
		unity_protocol_annotated_icon_set_icon (_tmp23_, _tmp19_);
		_tmp24_ = icon;
		_tmp25_ = _tmp24_->priv->_hints;
		g_hash_table_remove (_tmp25_, "base-icon");
		_g_object_unref0 (_tmp19_);
	}
	_tmp26_ = icon;
	_tmp27_ = unity_protocol_annotated_icon_get_hint (_tmp26_, "category");
	category_variant = _tmp27_;
	_tmp28_ = category_variant;
	if (_tmp28_ != NULL) {
		UnityProtocolAnnotatedIcon* _tmp29_;
		GVariant* _tmp30_;
		UnityProtocolAnnotatedIcon* _tmp31_;
		GHashTable* _tmp32_;
		_tmp29_ = icon;
		_tmp30_ = category_variant;
		unity_protocol_annotated_icon_set_category (_tmp29_, (UnityProtocolCategoryType) g_variant_get_uint32 (_tmp30_));
		_tmp31_ = icon;
		_tmp32_ = _tmp31_->priv->_hints;
		g_hash_table_remove (_tmp32_, "category");
	}
	_tmp33_ = icon;
	_tmp34_ = unity_protocol_annotated_icon_get_hint (_tmp33_, "ribbon");
	ribbon_variant = _tmp34_;
	_tmp36_ = ribbon_variant;
	if (_tmp36_ != NULL) {
		GVariant* _tmp37_;
		const gchar* _tmp38_;
		_tmp37_ = ribbon_variant;
		_tmp38_ = g_variant_get_string (_tmp37_, NULL);
		_tmp35_ = _tmp38_ != NULL;
	} else {
		_tmp35_ = FALSE;
	}
	if (_tmp35_) {
		UnityProtocolAnnotatedIcon* _tmp39_;
		GVariant* _tmp40_;
		const gchar* _tmp41_;
		UnityProtocolAnnotatedIcon* _tmp42_;
		GHashTable* _tmp43_;
		_tmp39_ = icon;
		_tmp40_ = ribbon_variant;
		_tmp41_ = g_variant_get_string (_tmp40_, NULL);
		unity_protocol_annotated_icon_set_ribbon (_tmp39_, _tmp41_);
		_tmp42_ = icon;
		_tmp43_ = _tmp42_->priv->_hints;
		g_hash_table_remove (_tmp43_, "ribbon");
	}
	_tmp44_ = icon;
	_tmp45_ = unity_protocol_annotated_icon_get_hint (_tmp44_, "use-small-icon");
	small_icon_variant = _tmp45_;
	_tmp46_ = small_icon_variant;
	if (_tmp46_ != NULL) {
		UnityProtocolAnnotatedIcon* _tmp47_;
		GVariant* _tmp48_;
		UnityProtocolAnnotatedIcon* _tmp49_;
		GHashTable* _tmp50_;
		_tmp47_ = icon;
		_tmp48_ = small_icon_variant;
		unity_protocol_annotated_icon_set_use_small_icon (_tmp47_, g_variant_get_boolean (_tmp48_));
		_tmp49_ = icon;
		_tmp50_ = _tmp49_->priv->_hints;
		g_hash_table_remove (_tmp50_, "use-small-icon");
	}
	_tmp51_ = icon;
	_tmp52_ = unity_protocol_annotated_icon_get_hint (_tmp51_, "colorize-value");
	colorize_variant = _tmp52_;
	_tmp53_ = colorize_variant;
	if (_tmp53_ != NULL) {
		UnityProtocolAnnotatedIcon* _tmp54_;
		GVariant* _tmp55_;
		UnityProtocolAnnotatedIcon* _tmp56_;
		GHashTable* _tmp57_;
		_tmp54_ = icon;
		_tmp55_ = colorize_variant;
		unity_protocol_annotated_icon_set_colorize_value (_tmp54_, g_variant_get_uint32 (_tmp55_));
		_tmp56_ = icon;
		_tmp57_ = _tmp56_->priv->_hints;
		g_hash_table_remove (_tmp57_, "colorize-value");
	}
	result = (GIcon*) icon;
	_g_variant_unref0 (dict);
	return result;
}


static GVariant*
_variant_new2 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static gchar
string_get (const gchar* self,
            glong index)
{
	gchar result = '\0';
	gchar _tmp0_;
	g_return_val_if_fail (self != NULL, '\0');
	_tmp0_ = ((gchar*) self)[index];
	result = _tmp0_;
	return result;
}


static GVariant*
_variant_new3 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static GVariant*
_variant_new4 (GHashTable* value)
{
	GVariantBuilder _tmp24_;
	GHashTableIter _tmp25_;
	gpointer _tmp26_;
	gpointer _tmp27_;
	g_hash_table_iter_init (&_tmp25_, value);
	g_variant_builder_init (&_tmp24_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp25_, &_tmp26_, &_tmp27_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp26_;
		_value = (GVariant*) _tmp27_;
		g_variant_builder_add (&_tmp24_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	return g_variant_ref_sink (g_variant_builder_end (&_tmp24_));
}


static gboolean
unity_protocol_annotated_icon_real_to_tokens (GIcon* base,
                                              GPtrArray* tokens,
                                              gint* version)
{
	UnityProtocolAnnotatedIcon * self;
	gint _vala_version = 0;
	gboolean result = FALSE;
	GIcon* _tmp0_;
	gchar* base_icon_string = NULL;
	GIcon* _tmp1_;
	gchar* _tmp2_;
	const gchar* _tmp3_;
	GVariant* _tmp4_;
	gboolean _tmp5_ = FALSE;
	UnityProtocolCategoryType _tmp6_;
	gboolean _tmp11_ = FALSE;
	const gchar* _tmp12_;
	gboolean _tmp16_;
	guint32 _tmp19_;
	GVariant* dict = NULL;
	GHashTable* _tmp23_;
	GVariant* _tmp28_;
	gchar* _tmp29_;
	self = (UnityProtocolAnnotatedIcon*) base;
	g_return_val_if_fail (tokens != NULL, FALSE);
	_tmp0_ = self->priv->_icon;
	_vala_return_val_if_fail (_tmp0_ != NULL, "icon != null", FALSE);
	_vala_version = 0;
	_tmp1_ = self->priv->_icon;
	_tmp2_ = g_icon_to_string (_tmp1_);
	base_icon_string = _tmp2_;
	_tmp3_ = base_icon_string;
	_tmp4_ = _variant_new2 (_tmp3_);
	unity_protocol_annotated_icon_add_hint (self, "base-icon", _tmp4_);
	_g_variant_unref0 (_tmp4_);
	_tmp6_ = self->priv->_category;
	if (_tmp6_ != UNITY_PROTOCOL_CATEGORY_TYPE_NONE) {
		UnityProtocolCategoryType _tmp7_;
		_tmp7_ = self->priv->_category;
		_tmp5_ = _tmp7_ < UNITY_PROTOCOL_CATEGORY_TYPE_N_CATEGORIES;
	} else {
		_tmp5_ = FALSE;
	}
	if (_tmp5_) {
		UnityProtocolCategoryType _tmp8_;
		GVariant* _tmp9_;
		GVariant* _tmp10_;
		_tmp8_ = self->priv->_category;
		_tmp9_ = g_variant_new_uint32 ((guint32) _tmp8_);
		g_variant_ref_sink (_tmp9_);
		_tmp10_ = _tmp9_;
		unity_protocol_annotated_icon_add_hint (self, "category", _tmp10_);
		_g_variant_unref0 (_tmp10_);
	}
	_tmp12_ = self->priv->_ribbon;
	if (_tmp12_ != NULL) {
		const gchar* _tmp13_;
		_tmp13_ = self->priv->_ribbon;
		_tmp11_ = string_get (_tmp13_, (glong) 0) != '\0';
	} else {
		_tmp11_ = FALSE;
	}
	if (_tmp11_) {
		const gchar* _tmp14_;
		GVariant* _tmp15_;
		_tmp14_ = self->priv->_ribbon;
		_tmp15_ = _variant_new3 (_tmp14_);
		unity_protocol_annotated_icon_add_hint (self, "ribbon", _tmp15_);
		_g_variant_unref0 (_tmp15_);
	}
	_tmp16_ = self->priv->_use_small_icon;
	if (_tmp16_) {
		GVariant* _tmp17_;
		GVariant* _tmp18_;
		_tmp17_ = g_variant_new_boolean (TRUE);
		g_variant_ref_sink (_tmp17_);
		_tmp18_ = _tmp17_;
		unity_protocol_annotated_icon_add_hint (self, "use-small-icon", _tmp18_);
		_g_variant_unref0 (_tmp18_);
	}
	_tmp19_ = self->priv->_colorize_value;
	if (_tmp19_ > ((guint32) 0)) {
		guint32 _tmp20_;
		GVariant* _tmp21_;
		GVariant* _tmp22_;
		_tmp20_ = self->priv->_colorize_value;
		_tmp21_ = g_variant_new_uint32 (_tmp20_);
		g_variant_ref_sink (_tmp21_);
		_tmp22_ = _tmp21_;
		unity_protocol_annotated_icon_add_hint (self, "colorize-value", _tmp22_);
		_g_variant_unref0 (_tmp22_);
	}
	_tmp23_ = self->priv->_hints;
	_tmp28_ = _variant_new4 (_tmp23_);
	dict = _tmp28_;
	_tmp29_ = g_variant_print (dict, TRUE);
	g_ptr_array_add (tokens, _tmp29_);
	result = TRUE;
	_g_variant_unref0 (dict);
	_g_free0 (base_icon_string);
	if (version) {
		*version = _vala_version;
	}
	return result;
}


static GVariant*
unity_protocol_annotated_icon_real_serialize (GIcon* base)
{
	UnityProtocolAnnotatedIcon * self;
	GVariant* result = NULL;
	GVariant* ret = NULL;
	self = (UnityProtocolAnnotatedIcon*) base;
	ret = NULL;
	result = ret;
	return result;
}


GIcon*
unity_protocol_annotated_icon_get_icon (UnityProtocolAnnotatedIcon* self)
{
	GIcon* result;
	GIcon* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_icon;
	result = _tmp0_;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


void
unity_protocol_annotated_icon_set_icon (UnityProtocolAnnotatedIcon* self,
                                        GIcon* value)
{
	g_return_if_fail (self != NULL);
	if (unity_protocol_annotated_icon_get_icon (self) != value) {
		GIcon* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_icon);
		self->priv->_icon = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_protocol_annotated_icon_properties[UNITY_PROTOCOL_ANNOTATED_ICON_ICON_PROPERTY]);
	}
}


const gchar*
unity_protocol_annotated_icon_get_ribbon (UnityProtocolAnnotatedIcon* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_ribbon;
	result = _tmp0_;
	return result;
}


void
unity_protocol_annotated_icon_set_ribbon (UnityProtocolAnnotatedIcon* self,
                                          const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_protocol_annotated_icon_get_ribbon (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_ribbon);
		self->priv->_ribbon = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_protocol_annotated_icon_properties[UNITY_PROTOCOL_ANNOTATED_ICON_RIBBON_PROPERTY]);
	}
}


UnityProtocolCategoryType
unity_protocol_annotated_icon_get_category (UnityProtocolAnnotatedIcon* self)
{
	UnityProtocolCategoryType result;
	UnityProtocolCategoryType _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->priv->_category;
	result = _tmp0_;
	return result;
}


void
unity_protocol_annotated_icon_set_category (UnityProtocolAnnotatedIcon* self,
                                            UnityProtocolCategoryType value)
{
	g_return_if_fail (self != NULL);
	if (unity_protocol_annotated_icon_get_category (self) != value) {
		self->priv->_category = value;
		g_object_notify_by_pspec ((GObject *) self, unity_protocol_annotated_icon_properties[UNITY_PROTOCOL_ANNOTATED_ICON_CATEGORY_PROPERTY]);
	}
}


gboolean
unity_protocol_annotated_icon_get_use_small_icon (UnityProtocolAnnotatedIcon* self)
{
	gboolean result;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_use_small_icon;
	result = _tmp0_;
	return result;
}


void
unity_protocol_annotated_icon_set_use_small_icon (UnityProtocolAnnotatedIcon* self,
                                                  gboolean value)
{
	g_return_if_fail (self != NULL);
	if (unity_protocol_annotated_icon_get_use_small_icon (self) != value) {
		self->priv->_use_small_icon = value;
		g_object_notify_by_pspec ((GObject *) self, unity_protocol_annotated_icon_properties[UNITY_PROTOCOL_ANNOTATED_ICON_USE_SMALL_ICON_PROPERTY]);
	}
}


guint32
unity_protocol_annotated_icon_get_colorize_value (UnityProtocolAnnotatedIcon* self)
{
	guint32 result;
	guint32 _tmp0_;
	g_return_val_if_fail (self != NULL, 0U);
	_tmp0_ = self->priv->_colorize_value;
	result = _tmp0_;
	return result;
}


void
unity_protocol_annotated_icon_set_colorize_value (UnityProtocolAnnotatedIcon* self,
                                                  guint32 value)
{
	g_return_if_fail (self != NULL);
	if (unity_protocol_annotated_icon_get_colorize_value (self) != value) {
		self->priv->_colorize_value = value;
		g_object_notify_by_pspec ((GObject *) self, unity_protocol_annotated_icon_properties[UNITY_PROTOCOL_ANNOTATED_ICON_COLORIZE_VALUE_PROPERTY]);
	}
}


static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static void
_g_variant_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_variant_unref (var), NULL));
}


static GObject *
unity_protocol_annotated_icon_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	UnityProtocolAnnotatedIcon * self;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	parent_class = G_OBJECT_CLASS (unity_protocol_annotated_icon_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_PROTOCOL_TYPE_ANNOTATED_ICON, UnityProtocolAnnotatedIcon);
	_tmp0_ = g_str_hash;
	_tmp1_ = g_str_equal;
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, _g_variant_unref0_);
	_g_hash_table_unref0 (self->priv->_hints);
	self->priv->_hints = _tmp2_;
	return obj;
}


static void
unity_protocol_annotated_icon_class_init (UnityProtocolAnnotatedIconClass * klass)
{
	unity_protocol_annotated_icon_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityProtocolAnnotatedIconPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_protocol_annotated_icon_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_protocol_annotated_icon_set_property;
	G_OBJECT_CLASS (klass)->constructor = unity_protocol_annotated_icon_constructor;
	G_OBJECT_CLASS (klass)->finalize = unity_protocol_annotated_icon_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_ANNOTATED_ICON_ICON_PROPERTY, unity_protocol_annotated_icon_properties[UNITY_PROTOCOL_ANNOTATED_ICON_ICON_PROPERTY] = g_param_spec_object ("icon", "icon", "icon", g_icon_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_ANNOTATED_ICON_RIBBON_PROPERTY, unity_protocol_annotated_icon_properties[UNITY_PROTOCOL_ANNOTATED_ICON_RIBBON_PROPERTY] = g_param_spec_string ("ribbon", "ribbon", "ribbon", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_ANNOTATED_ICON_CATEGORY_PROPERTY, unity_protocol_annotated_icon_properties[UNITY_PROTOCOL_ANNOTATED_ICON_CATEGORY_PROPERTY] = g_param_spec_enum ("category", "category", "category", UNITY_PROTOCOL_TYPE_CATEGORY_TYPE, UNITY_PROTOCOL_CATEGORY_TYPE_NONE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_ANNOTATED_ICON_USE_SMALL_ICON_PROPERTY, unity_protocol_annotated_icon_properties[UNITY_PROTOCOL_ANNOTATED_ICON_USE_SMALL_ICON_PROPERTY] = g_param_spec_boolean ("use-small-icon", "use-small-icon", "use-small-icon", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROTOCOL_ANNOTATED_ICON_COLORIZE_VALUE_PROPERTY, unity_protocol_annotated_icon_properties[UNITY_PROTOCOL_ANNOTATED_ICON_COLORIZE_VALUE_PROPERTY] = g_param_spec_uint ("colorize-value", "colorize-value", "colorize-value", 0, G_MAXUINT, 0U, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


static void
unity_protocol_annotated_icon_g_icon_interface_init (GIconIface * iface)
{
	unity_protocol_annotated_icon_g_icon_parent_iface = g_type_interface_peek_parent (iface);
	iface->equal = (gboolean (*) (GIcon *, GIcon*)) unity_protocol_annotated_icon_real_equal;
	iface->hash = (guint (*) (GIcon *)) unity_protocol_annotated_icon_real_hash;
	iface->from_tokens = (GIcon* (*) (GIcon *, gchar**, int, gint, GError**)) unity_protocol_annotated_icon_real_from_tokens;
	iface->to_tokens = (gboolean (*) (GIcon *, GPtrArray*, gint*)) unity_protocol_annotated_icon_real_to_tokens;
	iface->serialize = (GVariant* (*) (GIcon *)) unity_protocol_annotated_icon_real_serialize;
}


static void
unity_protocol_annotated_icon_instance_init (UnityProtocolAnnotatedIcon * self)
{
	self->priv = UNITY_PROTOCOL_ANNOTATED_ICON_GET_PRIVATE (self);
	self->priv->_category = UNITY_PROTOCOL_CATEGORY_TYPE_NONE;
}


static void
unity_protocol_annotated_icon_finalize (GObject * obj)
{
	UnityProtocolAnnotatedIcon * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_PROTOCOL_TYPE_ANNOTATED_ICON, UnityProtocolAnnotatedIcon);
	_g_object_unref0 (self->priv->_icon);
	_g_free0 (self->priv->_ribbon);
	_g_hash_table_unref0 (self->priv->_hints);
	G_OBJECT_CLASS (unity_protocol_annotated_icon_parent_class)->finalize (obj);
}


GType
unity_protocol_annotated_icon_get_type (void)
{
	static volatile gsize unity_protocol_annotated_icon_type_id__volatile = 0;
	if (g_once_init_enter (&unity_protocol_annotated_icon_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityProtocolAnnotatedIconClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_protocol_annotated_icon_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityProtocolAnnotatedIcon), 0, (GInstanceInitFunc) unity_protocol_annotated_icon_instance_init, NULL };
		static const GInterfaceInfo g_icon_info = { (GInterfaceInitFunc) unity_protocol_annotated_icon_g_icon_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		GType unity_protocol_annotated_icon_type_id;
		unity_protocol_annotated_icon_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityProtocolAnnotatedIcon", &g_define_type_info, 0);
		g_type_add_interface_static (unity_protocol_annotated_icon_type_id, g_icon_get_type (), &g_icon_info);
		g_once_init_leave (&unity_protocol_annotated_icon_type_id__volatile, unity_protocol_annotated_icon_type_id);
	}
	return unity_protocol_annotated_icon_type_id__volatile;
}


static void
_vala_unity_protocol_annotated_icon_get_property (GObject * object,
                                                  guint property_id,
                                                  GValue * value,
                                                  GParamSpec * pspec)
{
	UnityProtocolAnnotatedIcon * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_PROTOCOL_TYPE_ANNOTATED_ICON, UnityProtocolAnnotatedIcon);
	switch (property_id) {
		case UNITY_PROTOCOL_ANNOTATED_ICON_ICON_PROPERTY:
		g_value_set_object (value, unity_protocol_annotated_icon_get_icon (self));
		break;
		case UNITY_PROTOCOL_ANNOTATED_ICON_RIBBON_PROPERTY:
		g_value_set_string (value, unity_protocol_annotated_icon_get_ribbon (self));
		break;
		case UNITY_PROTOCOL_ANNOTATED_ICON_CATEGORY_PROPERTY:
		g_value_set_enum (value, unity_protocol_annotated_icon_get_category (self));
		break;
		case UNITY_PROTOCOL_ANNOTATED_ICON_USE_SMALL_ICON_PROPERTY:
		g_value_set_boolean (value, unity_protocol_annotated_icon_get_use_small_icon (self));
		break;
		case UNITY_PROTOCOL_ANNOTATED_ICON_COLORIZE_VALUE_PROPERTY:
		g_value_set_uint (value, unity_protocol_annotated_icon_get_colorize_value (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_protocol_annotated_icon_set_property (GObject * object,
                                                  guint property_id,
                                                  const GValue * value,
                                                  GParamSpec * pspec)
{
	UnityProtocolAnnotatedIcon * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_PROTOCOL_TYPE_ANNOTATED_ICON, UnityProtocolAnnotatedIcon);
	switch (property_id) {
		case UNITY_PROTOCOL_ANNOTATED_ICON_ICON_PROPERTY:
		unity_protocol_annotated_icon_set_icon (self, g_value_get_object (value));
		break;
		case UNITY_PROTOCOL_ANNOTATED_ICON_RIBBON_PROPERTY:
		unity_protocol_annotated_icon_set_ribbon (self, g_value_get_string (value));
		break;
		case UNITY_PROTOCOL_ANNOTATED_ICON_CATEGORY_PROPERTY:
		unity_protocol_annotated_icon_set_category (self, g_value_get_enum (value));
		break;
		case UNITY_PROTOCOL_ANNOTATED_ICON_USE_SMALL_ICON_PROPERTY:
		unity_protocol_annotated_icon_set_use_small_icon (self, g_value_get_boolean (value));
		break;
		case UNITY_PROTOCOL_ANNOTATED_ICON_COLORIZE_VALUE_PROPERTY:
		unity_protocol_annotated_icon_set_colorize_value (self, g_value_get_uint (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



