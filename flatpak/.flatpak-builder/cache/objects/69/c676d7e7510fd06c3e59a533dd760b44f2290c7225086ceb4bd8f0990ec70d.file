/* Github.c generated by valac 0.40.11, the Vala compiler
 * generated from Github.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <libsoup/soup.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <json-glib/json-glib.h>
#include <stdio.h>
#include <sqlite3.h>
#include <gio/gio.h>


#define SERVICES_TYPE_GITHUB (services_github_get_type ())
#define SERVICES_GITHUB(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_GITHUB, ServicesGithub))
#define SERVICES_GITHUB_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_GITHUB, ServicesGithubClass))
#define SERVICES_IS_GITHUB(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_GITHUB))
#define SERVICES_IS_GITHUB_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_GITHUB))
#define SERVICES_GITHUB_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_GITHUB, ServicesGithubClass))

typedef struct _ServicesGithub ServicesGithub;
typedef struct _ServicesGithubClass ServicesGithubClass;
typedef struct _ServicesGithubPrivate ServicesGithubPrivate;
enum  {
	SERVICES_GITHUB_0_PROPERTY,
	SERVICES_GITHUB_NUM_PROPERTIES
};
static GParamSpec* services_github_properties[SERVICES_GITHUB_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define OBJECTS_TYPE_USER (objects_user_get_type ())
#define OBJECTS_USER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_USER, ObjectsUser))
#define OBJECTS_USER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_USER, ObjectsUserClass))
#define OBJECTS_IS_USER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_USER))
#define OBJECTS_IS_USER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_USER))
#define OBJECTS_USER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_USER, ObjectsUserClass))

typedef struct _ObjectsUser ObjectsUser;
typedef struct _ObjectsUserClass ObjectsUserClass;

#define OBJECTS_TYPE_REPOSITORY (objects_repository_get_type ())
#define OBJECTS_REPOSITORY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_REPOSITORY, ObjectsRepository))
#define OBJECTS_REPOSITORY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_REPOSITORY, ObjectsRepositoryClass))
#define OBJECTS_IS_REPOSITORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_REPOSITORY))
#define OBJECTS_IS_REPOSITORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_REPOSITORY))
#define OBJECTS_REPOSITORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_REPOSITORY, ObjectsRepositoryClass))

typedef struct _ObjectsRepository ObjectsRepository;
typedef struct _ObjectsRepositoryClass ObjectsRepositoryClass;
typedef struct _ObjectsRepositoryPrivate ObjectsRepositoryPrivate;
typedef struct _ObjectsUserPrivate ObjectsUserPrivate;
#define _objects_repository_unref0(var) ((var == NULL) ? NULL : (var = (objects_repository_unref (var), NULL)))
#define _objects_user_unref0(var) ((var == NULL) ? NULL : (var = (objects_user_unref (var), NULL)))
#define __vala_SoupBuffer_free0(var) ((var == NULL) ? NULL : (var = (_vala_SoupBuffer_free (var), NULL)))

#define OBJECTS_TYPE_TASK (objects_task_get_type ())
#define OBJECTS_TASK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TASK, ObjectsTask))
#define OBJECTS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TASK, ObjectsTaskClass))
#define OBJECTS_IS_TASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TASK))
#define OBJECTS_IS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TASK))
#define OBJECTS_TASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TASK, ObjectsTaskClass))

typedef struct _ObjectsTask ObjectsTask;
typedef struct _ObjectsTaskClass ObjectsTaskClass;
typedef struct _ObjectsTaskPrivate ObjectsTaskPrivate;

#define SERVICES_TYPE_NOTIFICATIONS (services_notifications_get_type ())
#define SERVICES_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotifications))
#define SERVICES_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))
#define SERVICES_IS_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_IS_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_NOTIFICATIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))

typedef struct _ServicesNotifications ServicesNotifications;
typedef struct _ServicesNotificationsClass ServicesNotificationsClass;
#define _objects_task_unref0(var) ((var == NULL) ? NULL : (var = (objects_task_unref (var), NULL)))
#define _json_object_unref0(var) ((var == NULL) ? NULL : (var = (json_object_unref (var), NULL)))
#define _json_array_unref0(var) ((var == NULL) ? NULL : (var = (json_array_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define __vala_JsonNode_free0(var) ((var == NULL) ? NULL : (var = (_vala_JsonNode_free (var), NULL)))
typedef struct _Block1Data Block1Data;
typedef struct _Block2Data Block2Data;
#define _g_main_loop_unref0(var) ((var == NULL) ? NULL : (var = (g_main_loop_unref (var), NULL)))

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
typedef struct _UtilsPrivate UtilsPrivate;
typedef struct _Block3Data Block3Data;
#define _g_thread_unref0(var) ((var == NULL) ? NULL : (var = (g_thread_unref (var), NULL)))
enum  {
	SERVICES_GITHUB_USER_IS_VALID_SIGNAL,
	SERVICES_GITHUB_COMPLETED_USER_SIGNAL,
	SERVICES_GITHUB_NUM_SIGNALS
};
static guint services_github_signals[SERVICES_GITHUB_NUM_SIGNALS] = {0};

struct _ServicesGithub {
	GObject parent_instance;
	ServicesGithubPrivate * priv;
};

struct _ServicesGithubClass {
	GObjectClass parent_class;
};

struct _ServicesGithubPrivate {
	SoupSession* session;
	gchar* GITHUB_URI;
};

struct _ObjectsRepository {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsRepositoryPrivate * priv;
	gint64 id;
	gchar* name;
	gint sensitive;
	gchar* issues;
	gint64 user_id;
};

struct _ObjectsRepositoryClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsRepository *self);
};

struct _ObjectsUser {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsUserPrivate * priv;
	gint64 id;
	gchar* name;
	gchar* login;
	gchar* token;
	gchar* avatar_url;
};

struct _ObjectsUserClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsUser *self);
};

struct _ObjectsTask {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsTaskPrivate * priv;
	gint id;
	gint checked;
	gint project_id;
	gint list_id;
	gint task_order;
	gint is_inbox;
	gint has_reminder;
	gint sidebar_width;
	gint was_notified;
	gchar* content;
	gchar* note;
	gchar* when_date_utc;
	gchar* reminder_time;
	gchar* labels;
	gchar* checklist;
};

struct _ObjectsTaskClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsTask *self);
};

struct _Block1Data {
	int _ref_count_;
	ServicesGithub* self;
	ObjectsUser* user;
};

struct _Block2Data {
	int _ref_count_;
	Block1Data * _data1_;
	GFile* file_from_uri;
	GMainLoop* loop;
};

struct _Utils {
	GObject parent_instance;
	UtilsPrivate * priv;
	gchar* CACHE_FOLDER;
	gchar* PROFILE_FOLDER;
};

struct _UtilsClass {
	GObjectClass parent_class;
};

struct _Block3Data {
	int _ref_count_;
	ServicesGithub* self;
	gchar* username;
	gchar* token;
	gint64 user_id;
};


static gpointer services_github_parent_class = NULL;
extern ServicesDatabase* application_database;
extern ServicesNotifications* application_notification;
extern Utils* application_utils;

GType services_github_get_type (void) G_GNUC_CONST;
#define SERVICES_GITHUB_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), SERVICES_TYPE_GITHUB, ServicesGithubPrivate))
ServicesGithub* services_github_new (void);
ServicesGithub* services_github_construct (GType object_type);
static gboolean __lambda130_ (ServicesGithub* self);
void services_github_check_issues (ServicesGithub* self);
static gboolean ___lambda130__gsource_func (gpointer self);
static void services_github_init_server (ServicesGithub* self);
static gboolean __lambda131_ (ServicesGithub* self);
static gboolean ___lambda131__gsource_func (gpointer self);
GType services_database_get_type (void) G_GNUC_CONST;
gboolean services_database_user_exists (ServicesDatabase* self);
gboolean services_database_repo_exists (ServicesDatabase* self);
gpointer objects_user_ref (gpointer instance);
void objects_user_unref (gpointer instance);
GParamSpec* objects_param_spec_user (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void objects_value_set_user (GValue* value,
                             gpointer v_object);
void objects_value_take_user (GValue* value,
                              gpointer v_object);
gpointer objects_value_get_user (const GValue* value);
GType objects_user_get_type (void) G_GNUC_CONST;
ObjectsUser* services_database_get_user (ServicesDatabase* self);
gpointer objects_repository_ref (gpointer instance);
void objects_repository_unref (gpointer instance);
GParamSpec* objects_param_spec_repository (const gchar* name,
                                           const gchar* nick,
                                           const gchar* blurb,
                                           GType object_type,
                                           GParamFlags flags);
void objects_value_set_repository (GValue* value,
                                   gpointer v_object);
void objects_value_take_repository (GValue* value,
                                    gpointer v_object);
gpointer objects_value_get_repository (const GValue* value);
GType objects_repository_get_type (void) G_GNUC_CONST;
GeeArrayList* services_database_get_all_repos (ServicesDatabase* self);
void services_github_get_issues (ServicesGithub* self,
                                 const gchar* username,
                                 const gchar* token,
                                 ObjectsRepository* repo);
static void _vala_SoupBuffer_free (SoupBuffer* self);
gboolean services_github_issue_exists (ServicesGithub* self,
                                       const gchar* issues,
                                       gint64 id);
gpointer objects_task_ref (gpointer instance);
void objects_task_unref (gpointer instance);
GParamSpec* objects_param_spec_task (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void objects_value_set_task (GValue* value,
                             gpointer v_object);
void objects_value_take_task (GValue* value,
                              gpointer v_object);
gpointer objects_value_get_task (const GValue* value);
GType objects_task_get_type (void) G_GNUC_CONST;
ObjectsTask* objects_task_new (gint id,
                               gint checked,
                               gint project_id,
                               gint list_id,
                               gint task_order,
                               gint is_inbox,
                               gint has_reminder,
                               gint sidebar_width,
                               gint was_notified,
                               const gchar* content,
                               const gchar* note,
                               const gchar* when_date_utc,
                               const gchar* reminder_time,
                               const gchar* labels,
                               const gchar* checklist);
ObjectsTask* objects_task_construct (GType object_type,
                                     gint id,
                                     gint checked,
                                     gint project_id,
                                     gint list_id,
                                     gint task_order,
                                     gint is_inbox,
                                     gint has_reminder,
                                     gint sidebar_width,
                                     gint was_notified,
                                     const gchar* content,
                                     const gchar* note,
                                     const gchar* when_date_utc,
                                     const gchar* reminder_time,
                                     const gchar* labels,
                                     const gchar* checklist);
gint services_database_add_task (ServicesDatabase* self,
                                 ObjectsTask* task);
GType services_notifications_get_type (void) G_GNUC_CONST;
void services_notifications_send_notification (ServicesNotifications* self,
                                               const gchar* summary,
                                               const gchar* body,
                                               const gchar* icon);
gint services_database_update_repository (ServicesDatabase* self,
                                          ObjectsRepository* repository);
void services_github_get_token (ServicesGithub* self,
                                const gchar* username,
                                const gchar* password);
void services_github_get_username_data (ServicesGithub* self,
                                        const gchar* username,
                                        const gchar* token);
static void _vala_JsonNode_free (JsonNode* self);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
ObjectsUser* objects_user_new (gint64 id,
                               const gchar* name,
                               const gchar* login,
                               const gchar* token,
                               const gchar* avatar_url);
ObjectsUser* objects_user_construct (GType object_type,
                                     gint64 id,
                                     const gchar* name,
                                     const gchar* login,
                                     const gchar* token,
                                     const gchar* avatar_url);
gint services_database_add_user (ServicesDatabase* self,
                                 ObjectsUser* user);
static Block2Data* block2_data_ref (Block2Data* _data2_);
static void block2_data_unref (void * _userdata_);
GType utils_get_type (void) G_GNUC_CONST;
static void ____lambda132_ (ServicesGithub* self,
                     gint64 current_num_bytes,
                     gint64 total_num_bytes);
static void _____lambda132__gfile_progress_callback (gint64 current_num_bytes,
                                              gint64 total_num_bytes,
                                              gpointer self);
static void ____lambda133_ (Block2Data* _data2_,
                     GObject* obj,
                     GAsyncResult* res);
void services_github_get_repos (ServicesGithub* self,
                                const gchar* username,
                                const gchar* token,
                                gint64 user_id);
static void _____lambda133__gasync_ready_callback (GObject* source_object,
                                            GAsyncResult* res,
                                            gpointer self);
static Block3Data* block3_data_ref (Block3Data* _data3_);
static void block3_data_unref (void * _userdata_);
static void* __lambda134_ (Block3Data* _data3_);
gboolean services_database_repository_exists (ServicesDatabase* self,
                                              gint64 id);
ObjectsRepository* objects_repository_new (gint64 id,
                                           const gchar* name,
                                           gint sensitive,
                                           const gchar* issues,
                                           gint64 user_id);
ObjectsRepository* objects_repository_construct (GType object_type,
                                                 gint64 id,
                                                 const gchar* name,
                                                 gint sensitive,
                                                 const gchar* issues,
                                                 gint64 user_id);
gint services_database_add_repository (ServicesDatabase* self,
                                       ObjectsRepository* repository);
static gpointer ___lambda134__gthread_func (gpointer self);
gboolean services_github_delete_account (ServicesGithub* self);
gint services_database_remove_all_users (ServicesDatabase* self);
gint services_database_remove_all_repos (ServicesDatabase* self);
static void g_cclosure_user_marshal_VOID__OBJECTS_USER (GClosure * closure,
                                                 GValue * return_value,
                                                 guint n_param_values,
                                                 const GValue * param_values,
                                                 gpointer invocation_hint,
                                                 gpointer marshal_data);
static void services_github_finalize (GObject * obj);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


static gboolean
__lambda130_ (ServicesGithub* self)
{
	gboolean result = FALSE;
#line 35 "/run/build/planner/src/Services/Github.vala"
	services_github_check_issues (self);
#line 37 "/run/build/planner/src/Services/Github.vala"
	result = FALSE;
#line 37 "/run/build/planner/src/Services/Github.vala"
	return result;
#line 441 "Github.c"
}


static gboolean
___lambda130__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda130_ ((ServicesGithub*) self);
#line 34 "/run/build/planner/src/Services/Github.vala"
	return result;
#line 452 "Github.c"
}


ServicesGithub*
services_github_construct (GType object_type)
{
	ServicesGithub * self = NULL;
	SoupSession* _tmp0_;
	SoupSession* _tmp1_;
#line 30 "/run/build/planner/src/Services/Github.vala"
	self = (ServicesGithub*) g_object_new (object_type, NULL);
#line 31 "/run/build/planner/src/Services/Github.vala"
	_tmp0_ = soup_session_new ();
#line 31 "/run/build/planner/src/Services/Github.vala"
	_g_object_unref0 (self->priv->session);
#line 31 "/run/build/planner/src/Services/Github.vala"
	self->priv->session = _tmp0_;
#line 32 "/run/build/planner/src/Services/Github.vala"
	_tmp1_ = self->priv->session;
#line 32 "/run/build/planner/src/Services/Github.vala"
	g_object_set (_tmp1_, "ssl-strict", FALSE, NULL);
#line 34 "/run/build/planner/src/Services/Github.vala"
	g_timeout_add_seconds_full (G_PRIORITY_DEFAULT, (guint) (1 * 30), ___lambda130__gsource_func, g_object_ref (self), g_object_unref);
#line 40 "/run/build/planner/src/Services/Github.vala"
	services_github_init_server (self);
#line 30 "/run/build/planner/src/Services/Github.vala"
	return self;
#line 480 "Github.c"
}


ServicesGithub*
services_github_new (void)
{
#line 30 "/run/build/planner/src/Services/Github.vala"
	return services_github_construct (SERVICES_TYPE_GITHUB);
#line 489 "Github.c"
}


static gboolean
__lambda131_ (ServicesGithub* self)
{
	gboolean result = FALSE;
#line 45 "/run/build/planner/src/Services/Github.vala"
	services_github_check_issues (self);
#line 47 "/run/build/planner/src/Services/Github.vala"
	result = TRUE;
#line 47 "/run/build/planner/src/Services/Github.vala"
	return result;
#line 503 "Github.c"
}


static gboolean
___lambda131__gsource_func (gpointer self)
{
	gboolean result;
	result = __lambda131_ ((ServicesGithub*) self);
#line 44 "/run/build/planner/src/Services/Github.vala"
	return result;
#line 514 "Github.c"
}


static void
services_github_init_server (ServicesGithub* self)
{
#line 43 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (self != NULL);
#line 44 "/run/build/planner/src/Services/Github.vala"
	g_timeout_add_seconds_full (G_PRIORITY_DEFAULT, (guint) ((1 * 60) * 10), ___lambda131__gsource_func, g_object_ref (self), g_object_unref);
#line 525 "Github.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 58 "/run/build/planner/src/Services/Github.vala"
	return self ? g_object_ref (self) : NULL;
#line 534 "Github.c"
}


void
services_github_check_issues (ServicesGithub* self)
{
	gboolean _tmp0_ = FALSE;
	ServicesDatabase* _tmp1_;
#line 51 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (self != NULL);
#line 52 "/run/build/planner/src/Services/Github.vala"
	_tmp1_ = application_database;
#line 52 "/run/build/planner/src/Services/Github.vala"
	if (services_database_user_exists (_tmp1_)) {
#line 549 "Github.c"
		ServicesDatabase* _tmp2_;
#line 52 "/run/build/planner/src/Services/Github.vala"
		_tmp2_ = application_database;
#line 52 "/run/build/planner/src/Services/Github.vala"
		_tmp0_ = services_database_repo_exists (_tmp2_);
#line 555 "Github.c"
	} else {
#line 52 "/run/build/planner/src/Services/Github.vala"
		_tmp0_ = FALSE;
#line 559 "Github.c"
	}
#line 52 "/run/build/planner/src/Services/Github.vala"
	if (_tmp0_) {
#line 563 "Github.c"
		ObjectsUser* user = NULL;
		ServicesDatabase* _tmp3_;
		ObjectsUser* _tmp4_;
		GeeArrayList* all_repos = NULL;
		GeeArrayList* _tmp5_;
		ServicesDatabase* _tmp6_;
		GeeArrayList* _tmp7_;
#line 53 "/run/build/planner/src/Services/Github.vala"
		_tmp3_ = application_database;
#line 53 "/run/build/planner/src/Services/Github.vala"
		_tmp4_ = services_database_get_user (_tmp3_);
#line 53 "/run/build/planner/src/Services/Github.vala"
		user = _tmp4_;
#line 55 "/run/build/planner/src/Services/Github.vala"
		_tmp5_ = gee_array_list_new (OBJECTS_TYPE_REPOSITORY, (GBoxedCopyFunc) objects_repository_ref, (GDestroyNotify) objects_repository_unref, NULL, NULL, NULL);
#line 55 "/run/build/planner/src/Services/Github.vala"
		all_repos = _tmp5_;
#line 56 "/run/build/planner/src/Services/Github.vala"
		_tmp6_ = application_database;
#line 56 "/run/build/planner/src/Services/Github.vala"
		_tmp7_ = services_database_get_all_repos (_tmp6_);
#line 56 "/run/build/planner/src/Services/Github.vala"
		_g_object_unref0 (all_repos);
#line 56 "/run/build/planner/src/Services/Github.vala"
		all_repos = _tmp7_;
#line 589 "Github.c"
		{
			GeeArrayList* _repo_list = NULL;
			GeeArrayList* _tmp8_;
			GeeArrayList* _tmp9_;
			gint _repo_size = 0;
			GeeArrayList* _tmp10_;
			gint _tmp11_;
			gint _tmp12_;
			gint _repo_index = 0;
#line 58 "/run/build/planner/src/Services/Github.vala"
			_tmp8_ = all_repos;
#line 58 "/run/build/planner/src/Services/Github.vala"
			_tmp9_ = _g_object_ref0 (_tmp8_);
#line 58 "/run/build/planner/src/Services/Github.vala"
			_repo_list = _tmp9_;
#line 58 "/run/build/planner/src/Services/Github.vala"
			_tmp10_ = _repo_list;
#line 58 "/run/build/planner/src/Services/Github.vala"
			_tmp11_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp10_);
#line 58 "/run/build/planner/src/Services/Github.vala"
			_tmp12_ = _tmp11_;
#line 58 "/run/build/planner/src/Services/Github.vala"
			_repo_size = _tmp12_;
#line 58 "/run/build/planner/src/Services/Github.vala"
			_repo_index = -1;
#line 58 "/run/build/planner/src/Services/Github.vala"
			while (TRUE) {
#line 617 "Github.c"
				gint _tmp13_;
				gint _tmp14_;
				gint _tmp15_;
				ObjectsRepository* repo = NULL;
				GeeArrayList* _tmp16_;
				gint _tmp17_;
				gpointer _tmp18_;
				ObjectsRepository* _tmp19_;
				gint _tmp20_;
#line 58 "/run/build/planner/src/Services/Github.vala"
				_tmp13_ = _repo_index;
#line 58 "/run/build/planner/src/Services/Github.vala"
				_repo_index = _tmp13_ + 1;
#line 58 "/run/build/planner/src/Services/Github.vala"
				_tmp14_ = _repo_index;
#line 58 "/run/build/planner/src/Services/Github.vala"
				_tmp15_ = _repo_size;
#line 58 "/run/build/planner/src/Services/Github.vala"
				if (!(_tmp14_ < _tmp15_)) {
#line 58 "/run/build/planner/src/Services/Github.vala"
					break;
#line 639 "Github.c"
				}
#line 58 "/run/build/planner/src/Services/Github.vala"
				_tmp16_ = _repo_list;
#line 58 "/run/build/planner/src/Services/Github.vala"
				_tmp17_ = _repo_index;
#line 58 "/run/build/planner/src/Services/Github.vala"
				_tmp18_ = gee_abstract_list_get ((GeeAbstractList*) _tmp16_, _tmp17_);
#line 58 "/run/build/planner/src/Services/Github.vala"
				repo = (ObjectsRepository*) _tmp18_;
#line 59 "/run/build/planner/src/Services/Github.vala"
				_tmp19_ = repo;
#line 59 "/run/build/planner/src/Services/Github.vala"
				_tmp20_ = _tmp19_->sensitive;
#line 59 "/run/build/planner/src/Services/Github.vala"
				if (_tmp20_ == 1) {
#line 655 "Github.c"
					ObjectsUser* _tmp21_;
					const gchar* _tmp22_;
					ObjectsUser* _tmp23_;
					const gchar* _tmp24_;
					ObjectsRepository* _tmp25_;
#line 60 "/run/build/planner/src/Services/Github.vala"
					_tmp21_ = user;
#line 60 "/run/build/planner/src/Services/Github.vala"
					_tmp22_ = _tmp21_->login;
#line 60 "/run/build/planner/src/Services/Github.vala"
					_tmp23_ = user;
#line 60 "/run/build/planner/src/Services/Github.vala"
					_tmp24_ = _tmp23_->token;
#line 60 "/run/build/planner/src/Services/Github.vala"
					_tmp25_ = repo;
#line 60 "/run/build/planner/src/Services/Github.vala"
					services_github_get_issues (self, _tmp22_, _tmp24_, _tmp25_);
#line 673 "Github.c"
				}
#line 58 "/run/build/planner/src/Services/Github.vala"
				_objects_repository_unref0 (repo);
#line 677 "Github.c"
			}
#line 58 "/run/build/planner/src/Services/Github.vala"
			_g_object_unref0 (_repo_list);
#line 681 "Github.c"
		}
#line 52 "/run/build/planner/src/Services/Github.vala"
		_g_object_unref0 (all_repos);
#line 52 "/run/build/planner/src/Services/Github.vala"
		_objects_user_unref0 (user);
#line 687 "Github.c"
	}
}


static void
_vala_SoupBuffer_free (SoupBuffer* self)
{
#line 77 "/run/build/planner/src/Services/Github.vala"
	g_boxed_free (soup_buffer_get_type (), self);
#line 697 "Github.c"
}


static gpointer
_json_array_ref0 (gpointer self)
{
#line 79 "/run/build/planner/src/Services/Github.vala"
	return self ? json_array_ref (self) : NULL;
#line 706 "Github.c"
}


static gpointer
_json_object_ref0 (gpointer self)
{
#line 82 "/run/build/planner/src/Services/Github.vala"
	return self ? json_object_ref (self) : NULL;
#line 715 "Github.c"
}


void
services_github_get_issues (ServicesGithub* self,
                            const gchar* username,
                            const gchar* token,
                            ObjectsRepository* repo)
{
	gchar* uri_issues = NULL;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	gchar* _tmp2_;
	SoupMessage* message = NULL;
	SoupMessage* _tmp3_;
	SoupMessageHeaders* _tmp4_;
	SoupMessageHeaders* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	SoupSession* _tmp8_;
	GError * _inner_error_ = NULL;
#line 66 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (self != NULL);
#line 66 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (username != NULL);
#line 66 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (token != NULL);
#line 66 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (repo != NULL);
#line 67 "/run/build/planner/src/Services/Github.vala"
	_tmp0_ = self->priv->GITHUB_URI;
#line 67 "/run/build/planner/src/Services/Github.vala"
	_tmp1_ = repo->name;
#line 67 "/run/build/planner/src/Services/Github.vala"
	_tmp2_ = g_strdup_printf ("%s/repos/%s/%s/issues", _tmp0_, username, _tmp1_);
#line 67 "/run/build/planner/src/Services/Github.vala"
	uri_issues = _tmp2_;
#line 69 "/run/build/planner/src/Services/Github.vala"
	_tmp3_ = soup_message_new ("GET", uri_issues);
#line 69 "/run/build/planner/src/Services/Github.vala"
	message = _tmp3_;
#line 70 "/run/build/planner/src/Services/Github.vala"
	_tmp4_ = message->request_headers;
#line 70 "/run/build/planner/src/Services/Github.vala"
	soup_message_headers_append (_tmp4_, "User-Agent", "Planner");
#line 71 "/run/build/planner/src/Services/Github.vala"
	_tmp5_ = message->request_headers;
#line 71 "/run/build/planner/src/Services/Github.vala"
	_tmp6_ = g_strconcat ("token ", token, NULL);
#line 71 "/run/build/planner/src/Services/Github.vala"
	_tmp7_ = _tmp6_;
#line 71 "/run/build/planner/src/Services/Github.vala"
	soup_message_headers_append (_tmp5_, "Authorization", _tmp7_);
#line 71 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (_tmp7_);
#line 73 "/run/build/planner/src/Services/Github.vala"
	_tmp8_ = self->priv->session;
#line 73 "/run/build/planner/src/Services/Github.vala"
	soup_session_send_message (_tmp8_, message);
#line 775 "Github.c"
	{
		JsonParser* parser = NULL;
		JsonParser* _tmp9_;
		SoupMessageBody* _tmp10_;
		SoupBuffer* _tmp11_;
		SoupBuffer* _tmp12_;
		guint8* _tmp13_;
		gint _tmp13__length1;
		JsonArray* root = NULL;
		JsonNode* _tmp14_;
		JsonArray* _tmp15_;
		JsonArray* _tmp16_;
		JsonArray* _tmp17_;
		GList* _tmp18_;
#line 76 "/run/build/planner/src/Services/Github.vala"
		_tmp9_ = json_parser_new ();
#line 76 "/run/build/planner/src/Services/Github.vala"
		parser = _tmp9_;
#line 77 "/run/build/planner/src/Services/Github.vala"
		_tmp10_ = message->response_body;
#line 77 "/run/build/planner/src/Services/Github.vala"
		_tmp11_ = soup_message_body_flatten (_tmp10_);
#line 77 "/run/build/planner/src/Services/Github.vala"
		_tmp12_ = _tmp11_;
#line 77 "/run/build/planner/src/Services/Github.vala"
		_tmp13_ = _tmp12_->data;
#line 77 "/run/build/planner/src/Services/Github.vala"
		_tmp13__length1 = (gint) _tmp12_->length;
#line 77 "/run/build/planner/src/Services/Github.vala"
		json_parser_load_from_data (parser, (const gchar*) _tmp13_, (gssize) -1, &_inner_error_);
#line 77 "/run/build/planner/src/Services/Github.vala"
		__vala_SoupBuffer_free0 (_tmp12_);
#line 77 "/run/build/planner/src/Services/Github.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 77 "/run/build/planner/src/Services/Github.vala"
			_g_object_unref0 (parser);
#line 812 "Github.c"
			goto __catch7_g_error;
		}
#line 79 "/run/build/planner/src/Services/Github.vala"
		_tmp14_ = json_parser_get_root (parser);
#line 79 "/run/build/planner/src/Services/Github.vala"
		_tmp15_ = json_node_get_array (_tmp14_);
#line 79 "/run/build/planner/src/Services/Github.vala"
		_tmp16_ = _json_array_ref0 (_tmp15_);
#line 79 "/run/build/planner/src/Services/Github.vala"
		root = _tmp16_;
#line 81 "/run/build/planner/src/Services/Github.vala"
		_tmp17_ = root;
#line 81 "/run/build/planner/src/Services/Github.vala"
		_tmp18_ = json_array_get_elements (_tmp17_);
#line 827 "Github.c"
		{
			GList* item_collection = NULL;
			GList* item_it = NULL;
#line 81 "/run/build/planner/src/Services/Github.vala"
			item_collection = _tmp18_;
#line 81 "/run/build/planner/src/Services/Github.vala"
			for (item_it = item_collection; item_it != NULL; item_it = item_it->next) {
#line 835 "Github.c"
				JsonNode* item = NULL;
#line 81 "/run/build/planner/src/Services/Github.vala"
				item = (JsonNode*) item_it->data;
#line 839 "Github.c"
				{
					JsonObject* item_details = NULL;
					JsonNode* _tmp19_;
					JsonObject* _tmp20_;
					JsonObject* _tmp21_;
					gint64 id = 0LL;
					JsonObject* _tmp22_;
					const gchar* _tmp23_;
					gint64 _tmp24_;
#line 82 "/run/build/planner/src/Services/Github.vala"
					_tmp19_ = item;
#line 82 "/run/build/planner/src/Services/Github.vala"
					_tmp20_ = json_node_get_object (_tmp19_);
#line 82 "/run/build/planner/src/Services/Github.vala"
					_tmp21_ = _json_object_ref0 (_tmp20_);
#line 82 "/run/build/planner/src/Services/Github.vala"
					item_details = _tmp21_;
#line 84 "/run/build/planner/src/Services/Github.vala"
					_tmp22_ = item_details;
#line 84 "/run/build/planner/src/Services/Github.vala"
					id = json_object_get_int_member (_tmp22_, "id");
#line 86 "/run/build/planner/src/Services/Github.vala"
					_tmp23_ = repo->issues;
#line 86 "/run/build/planner/src/Services/Github.vala"
					_tmp24_ = id;
#line 86 "/run/build/planner/src/Services/Github.vala"
					if (!services_github_issue_exists (self, _tmp23_, _tmp24_)) {
#line 867 "Github.c"
						const gchar* _tmp25_;
						gint64 _tmp26_;
						gchar* _tmp27_;
						gchar* _tmp28_;
						gchar* _tmp29_;
						gchar* _tmp30_;
						gchar* _tmp31_;
						ObjectsTask* task = NULL;
						ObjectsTask* _tmp32_;
						ObjectsTask* _tmp33_;
						JsonObject* _tmp34_;
						const gchar* _tmp35_;
						gchar* _tmp36_;
						ObjectsTask* _tmp37_;
						ObjectsTask* _tmp38_;
						JsonObject* _tmp39_;
						const gchar* _tmp40_;
						gchar* _tmp41_;
						ServicesDatabase* _tmp42_;
						ObjectsTask* _tmp43_;
						ServicesNotifications* _tmp44_;
						const gchar* _tmp45_;
						gchar* _tmp46_;
						gchar* _tmp47_;
						ObjectsTask* _tmp48_;
						const gchar* _tmp49_;
						ServicesDatabase* _tmp50_;
#line 88 "/run/build/planner/src/Services/Github.vala"
						_tmp25_ = repo->issues;
#line 88 "/run/build/planner/src/Services/Github.vala"
						_tmp26_ = id;
#line 88 "/run/build/planner/src/Services/Github.vala"
						_tmp27_ = g_strdup_printf ("%" G_GINT64_FORMAT, _tmp26_);
#line 88 "/run/build/planner/src/Services/Github.vala"
						_tmp28_ = _tmp27_;
#line 88 "/run/build/planner/src/Services/Github.vala"
						_tmp29_ = g_strconcat (_tmp25_, _tmp28_, NULL);
#line 88 "/run/build/planner/src/Services/Github.vala"
						_tmp30_ = _tmp29_;
#line 88 "/run/build/planner/src/Services/Github.vala"
						_tmp31_ = g_strconcat (_tmp30_, ";", NULL);
#line 88 "/run/build/planner/src/Services/Github.vala"
						_g_free0 (repo->issues);
#line 88 "/run/build/planner/src/Services/Github.vala"
						repo->issues = _tmp31_;
#line 88 "/run/build/planner/src/Services/Github.vala"
						_g_free0 (_tmp30_);
#line 88 "/run/build/planner/src/Services/Github.vala"
						_g_free0 (_tmp28_);
#line 91 "/run/build/planner/src/Services/Github.vala"
						_tmp32_ = objects_task_new (0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "", "", "", "");
#line 91 "/run/build/planner/src/Services/Github.vala"
						task = _tmp32_;
#line 92 "/run/build/planner/src/Services/Github.vala"
						_tmp33_ = task;
#line 92 "/run/build/planner/src/Services/Github.vala"
						_tmp34_ = item_details;
#line 92 "/run/build/planner/src/Services/Github.vala"
						_tmp35_ = json_object_get_string_member (_tmp34_, "title");
#line 92 "/run/build/planner/src/Services/Github.vala"
						_tmp36_ = g_strdup (_tmp35_);
#line 92 "/run/build/planner/src/Services/Github.vala"
						_g_free0 (_tmp33_->content);
#line 92 "/run/build/planner/src/Services/Github.vala"
						_tmp33_->content = _tmp36_;
#line 93 "/run/build/planner/src/Services/Github.vala"
						_tmp37_ = task;
#line 93 "/run/build/planner/src/Services/Github.vala"
						_tmp37_->is_inbox = 1;
#line 94 "/run/build/planner/src/Services/Github.vala"
						_tmp38_ = task;
#line 94 "/run/build/planner/src/Services/Github.vala"
						_tmp39_ = item_details;
#line 94 "/run/build/planner/src/Services/Github.vala"
						_tmp40_ = json_object_get_string_member (_tmp39_, "body");
#line 94 "/run/build/planner/src/Services/Github.vala"
						_tmp41_ = g_strdup (_tmp40_);
#line 94 "/run/build/planner/src/Services/Github.vala"
						_g_free0 (_tmp38_->note);
#line 94 "/run/build/planner/src/Services/Github.vala"
						_tmp38_->note = _tmp41_;
#line 97 "/run/build/planner/src/Services/Github.vala"
						_tmp42_ = application_database;
#line 97 "/run/build/planner/src/Services/Github.vala"
						_tmp43_ = task;
#line 97 "/run/build/planner/src/Services/Github.vala"
						services_database_add_task (_tmp42_, _tmp43_);
#line 100 "/run/build/planner/src/Services/Github.vala"
						_tmp44_ = application_notification;
#line 100 "/run/build/planner/src/Services/Github.vala"
						_tmp45_ = repo->name;
#line 100 "/run/build/planner/src/Services/Github.vala"
						_tmp46_ = g_strdup_printf ("Github Issues - %s", _tmp45_);
#line 100 "/run/build/planner/src/Services/Github.vala"
						_tmp47_ = _tmp46_;
#line 100 "/run/build/planner/src/Services/Github.vala"
						_tmp48_ = task;
#line 100 "/run/build/planner/src/Services/Github.vala"
						_tmp49_ = _tmp48_->content;
#line 100 "/run/build/planner/src/Services/Github.vala"
						services_notifications_send_notification (_tmp44_, _tmp47_, _tmp49_, "planner-github");
#line 100 "/run/build/planner/src/Services/Github.vala"
						_g_free0 (_tmp47_);
#line 103 "/run/build/planner/src/Services/Github.vala"
						_tmp50_ = application_database;
#line 103 "/run/build/planner/src/Services/Github.vala"
						services_database_update_repository (_tmp50_, repo);
#line 86 "/run/build/planner/src/Services/Github.vala"
						_objects_task_unref0 (task);
#line 977 "Github.c"
					}
#line 81 "/run/build/planner/src/Services/Github.vala"
					_json_object_unref0 (item_details);
#line 981 "Github.c"
				}
			}
#line 81 "/run/build/planner/src/Services/Github.vala"
			(item_collection == NULL) ? NULL : (item_collection = (g_list_free (item_collection), NULL));
#line 986 "Github.c"
		}
#line 75 "/run/build/planner/src/Services/Github.vala"
		_json_array_unref0 (root);
#line 75 "/run/build/planner/src/Services/Github.vala"
		_g_object_unref0 (parser);
#line 992 "Github.c"
	}
	goto __finally7;
	__catch7_g_error:
	{
		GError* e = NULL;
		FILE* _tmp51_;
#line 75 "/run/build/planner/src/Services/Github.vala"
		e = _inner_error_;
#line 75 "/run/build/planner/src/Services/Github.vala"
		_inner_error_ = NULL;
#line 107 "/run/build/planner/src/Services/Github.vala"
		_tmp51_ = stderr;
#line 107 "/run/build/planner/src/Services/Github.vala"
		fprintf (_tmp51_, "Failed to connect to Github service.\n");
#line 75 "/run/build/planner/src/Services/Github.vala"
		_g_error_free0 (e);
#line 1009 "Github.c"
	}
	__finally7:
#line 75 "/run/build/planner/src/Services/Github.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 75 "/run/build/planner/src/Services/Github.vala"
		_g_object_unref0 (message);
#line 75 "/run/build/planner/src/Services/Github.vala"
		_g_free0 (uri_issues);
#line 75 "/run/build/planner/src/Services/Github.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 75 "/run/build/planner/src/Services/Github.vala"
		g_clear_error (&_inner_error_);
#line 75 "/run/build/planner/src/Services/Github.vala"
		return;
#line 1024 "Github.c"
	}
#line 66 "/run/build/planner/src/Services/Github.vala"
	_g_object_unref0 (message);
#line 66 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (uri_issues);
#line 1030 "Github.c"
}


gboolean
services_github_issue_exists (ServicesGithub* self,
                              const gchar* issues,
                              gint64 id)
{
	gboolean result = FALSE;
	gchar** _issues = NULL;
	gchar** _tmp0_;
	gchar** _tmp1_;
	gint _issues_length1;
	gint __issues_size_;
	gchar** _tmp2_;
	gint _tmp2__length1;
#line 112 "/run/build/planner/src/Services/Github.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 112 "/run/build/planner/src/Services/Github.vala"
	g_return_val_if_fail (issues != NULL, FALSE);
#line 113 "/run/build/planner/src/Services/Github.vala"
	_tmp1_ = _tmp0_ = g_strsplit (issues, ";", 0);
#line 113 "/run/build/planner/src/Services/Github.vala"
	_issues = _tmp1_;
#line 113 "/run/build/planner/src/Services/Github.vala"
	_issues_length1 = _vala_array_length (_tmp0_);
#line 113 "/run/build/planner/src/Services/Github.vala"
	__issues_size_ = _issues_length1;
#line 115 "/run/build/planner/src/Services/Github.vala"
	_tmp2_ = _issues;
#line 115 "/run/build/planner/src/Services/Github.vala"
	_tmp2__length1 = _issues_length1;
#line 1063 "Github.c"
	{
		gchar** _id_collection = NULL;
		gint _id_collection_length1 = 0;
		gint __id_collection_size_ = 0;
		gint _id_it = 0;
#line 115 "/run/build/planner/src/Services/Github.vala"
		_id_collection = _tmp2_;
#line 115 "/run/build/planner/src/Services/Github.vala"
		_id_collection_length1 = _tmp2__length1;
#line 115 "/run/build/planner/src/Services/Github.vala"
		for (_id_it = 0; _id_it < _tmp2__length1; _id_it = _id_it + 1) {
#line 1075 "Github.c"
			const gchar* _id = NULL;
#line 115 "/run/build/planner/src/Services/Github.vala"
			_id = _id_collection[_id_it];
#line 1079 "Github.c"
			{
				const gchar* _tmp3_;
				gchar* _tmp4_;
				gchar* _tmp5_;
				gboolean _tmp6_;
#line 116 "/run/build/planner/src/Services/Github.vala"
				_tmp3_ = _id;
#line 116 "/run/build/planner/src/Services/Github.vala"
				_tmp4_ = g_strdup_printf ("%" G_GINT64_FORMAT, id);
#line 116 "/run/build/planner/src/Services/Github.vala"
				_tmp5_ = _tmp4_;
#line 116 "/run/build/planner/src/Services/Github.vala"
				_tmp6_ = g_strcmp0 (_tmp3_, _tmp5_) == 0;
#line 116 "/run/build/planner/src/Services/Github.vala"
				_g_free0 (_tmp5_);
#line 116 "/run/build/planner/src/Services/Github.vala"
				if (_tmp6_) {
#line 117 "/run/build/planner/src/Services/Github.vala"
					result = TRUE;
#line 117 "/run/build/planner/src/Services/Github.vala"
					_issues = (_vala_array_free (_issues, _issues_length1, (GDestroyNotify) g_free), NULL);
#line 117 "/run/build/planner/src/Services/Github.vala"
					return result;
#line 1103 "Github.c"
				}
			}
		}
	}
#line 121 "/run/build/planner/src/Services/Github.vala"
	result = FALSE;
#line 121 "/run/build/planner/src/Services/Github.vala"
	_issues = (_vala_array_free (_issues, _issues_length1, (GDestroyNotify) g_free), NULL);
#line 121 "/run/build/planner/src/Services/Github.vala"
	return result;
#line 1114 "Github.c"
}


static guint8*
string_get_data (const gchar* self,
                 int* result_length1)
{
	guint8* result;
	guint8* res = NULL;
	gint res_length1;
	gint _res_size_;
	gint _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
	guint8* _tmp3_;
	gint _tmp3__length1;
	guint8* _tmp4_;
	gint _tmp4__length1;
#line 1498 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1499 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	res = (guint8*) self;
#line 1499 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	res_length1 = -1;
#line 1499 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_res_size_ = res_length1;
#line 1500 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = strlen (self);
#line 1500 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp1_ = _tmp0_;
#line 1500 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	res_length1 = (gint) _tmp1_;
#line 1500 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp2_ = res_length1;
#line 1501 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp3_ = res;
#line 1501 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp3__length1 = res_length1;
#line 1501 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp4_ = _tmp3_;
#line 1501 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp4__length1 = _tmp3__length1;
#line 1501 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (result_length1) {
#line 1501 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		*result_length1 = _tmp4__length1;
#line 1161 "Github.c"
	}
#line 1501 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _tmp4_;
#line 1501 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 1167 "Github.c"
}


static gboolean
string_contains (const gchar* self,
                 const gchar* needle)
{
	gboolean result = FALSE;
	gchar* _tmp0_;
#line 1473 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, FALSE);
#line 1473 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (needle != NULL, FALSE);
#line 1474 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = strstr ((gchar*) self, (gchar*) needle);
#line 1474 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _tmp0_ != NULL;
#line 1474 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 1187 "Github.c"
}


static void
_vala_JsonNode_free (JsonNode* self)
{
#line 162 "/run/build/planner/src/Services/Github.vala"
	g_boxed_free (json_node_get_type (), self);
#line 1196 "Github.c"
}


void
services_github_get_token (ServicesGithub* self,
                           const gchar* username,
                           const gchar* password)
{
	JsonBuilder* builder = NULL;
	JsonBuilder* _tmp0_;
	JsonBuilder* _tmp1_;
	JsonBuilder* _tmp2_;
	JsonBuilder* _tmp3_;
	JsonBuilder* _tmp4_;
	JsonBuilder* _tmp5_;
	JsonBuilder* _tmp6_;
	JsonBuilder* _tmp7_;
	JsonBuilder* _tmp8_;
	JsonBuilder* _tmp9_;
	JsonBuilder* _tmp10_;
	JsonBuilder* _tmp11_;
	JsonBuilder* _tmp12_;
	JsonBuilder* _tmp13_;
	JsonBuilder* _tmp14_;
	JsonBuilder* _tmp15_;
	JsonGenerator* generator = NULL;
	JsonGenerator* _tmp16_;
	JsonNode* root = NULL;
	JsonBuilder* _tmp17_;
	JsonNode* _tmp18_;
	JsonGenerator* _tmp19_;
	JsonNode* _tmp20_;
	gchar* str = NULL;
	JsonGenerator* _tmp21_;
	gchar* _tmp22_;
	gchar* uri = NULL;
	gchar* _tmp23_;
	SoupMessage* message = NULL;
	const gchar* _tmp24_;
	SoupMessage* _tmp25_;
	SoupMemoryUse buffer = 0;
	SoupMessage* _tmp26_;
	SoupMessageHeaders* _tmp27_;
	SoupMessage* _tmp28_;
	SoupMemoryUse _tmp29_;
	const gchar* _tmp30_;
	guint8* _tmp31_;
	gint _tmp31__length1;
	guint8* _tmp32_;
	gint _tmp32__length1;
	gchar* encoded = NULL;
	gchar* _tmp33_;
	gchar* _tmp34_;
	gchar* _tmp35_;
	gchar* _tmp36_;
	guint8* _tmp37_;
	gint _tmp37__length1;
	guint8* _tmp38_;
	gint _tmp38__length1;
	gchar* _tmp39_;
	gchar* _tmp40_;
	SoupMessage* _tmp41_;
	SoupMessageHeaders* _tmp42_;
	const gchar* _tmp43_;
	gchar* _tmp44_;
	gchar* _tmp45_;
	SoupSession* _tmp46_;
	SoupMessage* _tmp47_;
	gchar* response = NULL;
	SoupMessage* _tmp48_;
	SoupMessageBody* _tmp49_;
	SoupBuffer* _tmp50_;
	SoupBuffer* _tmp51_;
	guint8* _tmp52_;
	gint _tmp52__length1;
	gchar* _tmp53_;
	gchar* _tmp54_;
	const gchar* _tmp55_;
	GError * _inner_error_ = NULL;
#line 124 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (self != NULL);
#line 124 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (username != NULL);
#line 124 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (password != NULL);
#line 125 "/run/build/planner/src/Services/Github.vala"
	_tmp0_ = json_builder_new ();
#line 125 "/run/build/planner/src/Services/Github.vala"
	builder = _tmp0_;
#line 126 "/run/build/planner/src/Services/Github.vala"
	_tmp1_ = builder;
#line 126 "/run/build/planner/src/Services/Github.vala"
	json_builder_begin_object (_tmp1_);
#line 127 "/run/build/planner/src/Services/Github.vala"
	_tmp2_ = builder;
#line 127 "/run/build/planner/src/Services/Github.vala"
	json_builder_set_member_name (_tmp2_, "client_id");
#line 128 "/run/build/planner/src/Services/Github.vala"
	_tmp3_ = builder;
#line 128 "/run/build/planner/src/Services/Github.vala"
	json_builder_add_string_value (_tmp3_, "c0fc83d4d56d7b6e006f");
#line 129 "/run/build/planner/src/Services/Github.vala"
	_tmp4_ = builder;
#line 129 "/run/build/planner/src/Services/Github.vala"
	json_builder_set_member_name (_tmp4_, "client_secret");
#line 130 "/run/build/planner/src/Services/Github.vala"
	_tmp5_ = builder;
#line 130 "/run/build/planner/src/Services/Github.vala"
	json_builder_add_string_value (_tmp5_, "cbd427556f7533d48483362592be1df4086a5015");
#line 131 "/run/build/planner/src/Services/Github.vala"
	_tmp6_ = builder;
#line 131 "/run/build/planner/src/Services/Github.vala"
	json_builder_set_member_name (_tmp6_, "scopes");
#line 132 "/run/build/planner/src/Services/Github.vala"
	_tmp7_ = builder;
#line 132 "/run/build/planner/src/Services/Github.vala"
	json_builder_begin_array (_tmp7_);
#line 133 "/run/build/planner/src/Services/Github.vala"
	_tmp8_ = builder;
#line 133 "/run/build/planner/src/Services/Github.vala"
	json_builder_add_string_value (_tmp8_, "user");
#line 134 "/run/build/planner/src/Services/Github.vala"
	_tmp9_ = builder;
#line 134 "/run/build/planner/src/Services/Github.vala"
	json_builder_add_string_value (_tmp9_, "repo");
#line 135 "/run/build/planner/src/Services/Github.vala"
	_tmp10_ = builder;
#line 135 "/run/build/planner/src/Services/Github.vala"
	json_builder_end_array (_tmp10_);
#line 136 "/run/build/planner/src/Services/Github.vala"
	_tmp11_ = builder;
#line 136 "/run/build/planner/src/Services/Github.vala"
	json_builder_set_member_name (_tmp11_, "note");
#line 137 "/run/build/planner/src/Services/Github.vala"
	_tmp12_ = builder;
#line 137 "/run/build/planner/src/Services/Github.vala"
	json_builder_add_string_value (_tmp12_, "planner");
#line 138 "/run/build/planner/src/Services/Github.vala"
	_tmp13_ = builder;
#line 138 "/run/build/planner/src/Services/Github.vala"
	json_builder_set_member_name (_tmp13_, "note_url");
#line 139 "/run/build/planner/src/Services/Github.vala"
	_tmp14_ = builder;
#line 139 "/run/build/planner/src/Services/Github.vala"
	json_builder_add_string_value (_tmp14_, "https://github.com/alainm23/planner");
#line 140 "/run/build/planner/src/Services/Github.vala"
	_tmp15_ = builder;
#line 140 "/run/build/planner/src/Services/Github.vala"
	json_builder_end_object (_tmp15_);
#line 142 "/run/build/planner/src/Services/Github.vala"
	_tmp16_ = json_generator_new ();
#line 142 "/run/build/planner/src/Services/Github.vala"
	generator = _tmp16_;
#line 143 "/run/build/planner/src/Services/Github.vala"
	_tmp17_ = builder;
#line 143 "/run/build/planner/src/Services/Github.vala"
	_tmp18_ = json_builder_get_root (_tmp17_);
#line 143 "/run/build/planner/src/Services/Github.vala"
	root = _tmp18_;
#line 144 "/run/build/planner/src/Services/Github.vala"
	_tmp19_ = generator;
#line 144 "/run/build/planner/src/Services/Github.vala"
	_tmp20_ = root;
#line 144 "/run/build/planner/src/Services/Github.vala"
	json_generator_set_root (_tmp19_, _tmp20_);
#line 145 "/run/build/planner/src/Services/Github.vala"
	_tmp21_ = generator;
#line 145 "/run/build/planner/src/Services/Github.vala"
	_tmp22_ = json_generator_to_data (_tmp21_, NULL);
#line 145 "/run/build/planner/src/Services/Github.vala"
	str = _tmp22_;
#line 147 "/run/build/planner/src/Services/Github.vala"
	_tmp23_ = g_strdup ("https://api.github.com/authorizations");
#line 147 "/run/build/planner/src/Services/Github.vala"
	uri = _tmp23_;
#line 149 "/run/build/planner/src/Services/Github.vala"
	_tmp24_ = uri;
#line 149 "/run/build/planner/src/Services/Github.vala"
	_tmp25_ = soup_message_new ("POST", _tmp24_);
#line 149 "/run/build/planner/src/Services/Github.vala"
	message = _tmp25_;
#line 150 "/run/build/planner/src/Services/Github.vala"
	buffer = SOUP_MEMORY_COPY;
#line 151 "/run/build/planner/src/Services/Github.vala"
	_tmp26_ = message;
#line 151 "/run/build/planner/src/Services/Github.vala"
	_tmp27_ = _tmp26_->request_headers;
#line 151 "/run/build/planner/src/Services/Github.vala"
	soup_message_headers_append (_tmp27_, "User-Agent", "planner");
#line 152 "/run/build/planner/src/Services/Github.vala"
	_tmp28_ = message;
#line 152 "/run/build/planner/src/Services/Github.vala"
	_tmp29_ = buffer;
#line 152 "/run/build/planner/src/Services/Github.vala"
	_tmp30_ = str;
#line 152 "/run/build/planner/src/Services/Github.vala"
	_tmp31_ = string_get_data (_tmp30_, &_tmp31__length1);
#line 152 "/run/build/planner/src/Services/Github.vala"
	_tmp32_ = _tmp31_;
#line 152 "/run/build/planner/src/Services/Github.vala"
	_tmp32__length1 = _tmp31__length1;
#line 152 "/run/build/planner/src/Services/Github.vala"
	soup_message_set_request (_tmp28_, "application/json; charset=utf-8", _tmp29_, _tmp32_, (gsize) _tmp32__length1);
#line 153 "/run/build/planner/src/Services/Github.vala"
	_tmp33_ = g_strconcat (username, ":", NULL);
#line 153 "/run/build/planner/src/Services/Github.vala"
	_tmp34_ = _tmp33_;
#line 153 "/run/build/planner/src/Services/Github.vala"
	_tmp35_ = g_strconcat (_tmp34_, password, NULL);
#line 153 "/run/build/planner/src/Services/Github.vala"
	_tmp36_ = _tmp35_;
#line 153 "/run/build/planner/src/Services/Github.vala"
	_tmp37_ = string_get_data (_tmp36_, &_tmp37__length1);
#line 153 "/run/build/planner/src/Services/Github.vala"
	_tmp38_ = _tmp37_;
#line 153 "/run/build/planner/src/Services/Github.vala"
	_tmp38__length1 = _tmp37__length1;
#line 153 "/run/build/planner/src/Services/Github.vala"
	_tmp39_ = g_base64_encode (_tmp38_, _tmp38__length1);
#line 153 "/run/build/planner/src/Services/Github.vala"
	_tmp40_ = _tmp39_;
#line 153 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (_tmp36_);
#line 153 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (_tmp34_);
#line 153 "/run/build/planner/src/Services/Github.vala"
	encoded = _tmp40_;
#line 154 "/run/build/planner/src/Services/Github.vala"
	_tmp41_ = message;
#line 154 "/run/build/planner/src/Services/Github.vala"
	_tmp42_ = _tmp41_->request_headers;
#line 154 "/run/build/planner/src/Services/Github.vala"
	_tmp43_ = encoded;
#line 154 "/run/build/planner/src/Services/Github.vala"
	_tmp44_ = g_strconcat ("Basic ", _tmp43_, NULL);
#line 154 "/run/build/planner/src/Services/Github.vala"
	_tmp45_ = _tmp44_;
#line 154 "/run/build/planner/src/Services/Github.vala"
	soup_message_headers_append (_tmp42_, "Authorization", _tmp45_);
#line 154 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (_tmp45_);
#line 155 "/run/build/planner/src/Services/Github.vala"
	_tmp46_ = self->priv->session;
#line 155 "/run/build/planner/src/Services/Github.vala"
	_tmp47_ = message;
#line 155 "/run/build/planner/src/Services/Github.vala"
	soup_session_send_message (_tmp46_, _tmp47_);
#line 157 "/run/build/planner/src/Services/Github.vala"
	_tmp48_ = message;
#line 157 "/run/build/planner/src/Services/Github.vala"
	_tmp49_ = _tmp48_->response_body;
#line 157 "/run/build/planner/src/Services/Github.vala"
	_tmp50_ = soup_message_body_flatten (_tmp49_);
#line 157 "/run/build/planner/src/Services/Github.vala"
	_tmp51_ = _tmp50_;
#line 157 "/run/build/planner/src/Services/Github.vala"
	_tmp52_ = _tmp51_->data;
#line 157 "/run/build/planner/src/Services/Github.vala"
	_tmp52__length1 = (gint) _tmp51_->length;
#line 157 "/run/build/planner/src/Services/Github.vala"
	_tmp53_ = g_strdup ((const gchar*) _tmp52_);
#line 157 "/run/build/planner/src/Services/Github.vala"
	_tmp54_ = _tmp53_;
#line 157 "/run/build/planner/src/Services/Github.vala"
	__vala_SoupBuffer_free0 (_tmp51_);
#line 157 "/run/build/planner/src/Services/Github.vala"
	response = _tmp54_;
#line 159 "/run/build/planner/src/Services/Github.vala"
	_tmp55_ = response;
#line 159 "/run/build/planner/src/Services/Github.vala"
	if (string_contains (_tmp55_, "Bad credentials")) {
#line 160 "/run/build/planner/src/Services/Github.vala"
		g_signal_emit (self, services_github_signals[SERVICES_GITHUB_USER_IS_VALID_SIGNAL], 0, FALSE);
#line 1470 "Github.c"
	} else {
		{
			JsonParser* parser = NULL;
			JsonParser* _tmp56_;
			JsonParser* _tmp57_;
			const gchar* _tmp58_;
			JsonObject* root_oa = NULL;
			JsonParser* _tmp59_;
			JsonNode* _tmp60_;
			JsonObject* _tmp61_;
			JsonObject* _tmp62_;
			gchar* token = NULL;
			JsonObject* _tmp63_;
			const gchar* _tmp64_;
			gchar* _tmp65_;
			const gchar* _tmp66_;
#line 163 "/run/build/planner/src/Services/Github.vala"
			_tmp56_ = json_parser_new ();
#line 163 "/run/build/planner/src/Services/Github.vala"
			parser = _tmp56_;
#line 164 "/run/build/planner/src/Services/Github.vala"
			_tmp57_ = parser;
#line 164 "/run/build/planner/src/Services/Github.vala"
			_tmp58_ = response;
#line 164 "/run/build/planner/src/Services/Github.vala"
			json_parser_load_from_data (_tmp57_, _tmp58_, (gssize) -1, &_inner_error_);
#line 164 "/run/build/planner/src/Services/Github.vala"
			if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 164 "/run/build/planner/src/Services/Github.vala"
				_g_object_unref0 (parser);
#line 1501 "Github.c"
				goto __catch8_g_error;
			}
#line 166 "/run/build/planner/src/Services/Github.vala"
			_tmp59_ = parser;
#line 166 "/run/build/planner/src/Services/Github.vala"
			_tmp60_ = json_parser_get_root (_tmp59_);
#line 166 "/run/build/planner/src/Services/Github.vala"
			_tmp61_ = json_node_get_object (_tmp60_);
#line 166 "/run/build/planner/src/Services/Github.vala"
			_tmp62_ = _json_object_ref0 (_tmp61_);
#line 166 "/run/build/planner/src/Services/Github.vala"
			root_oa = _tmp62_;
#line 167 "/run/build/planner/src/Services/Github.vala"
			_tmp63_ = root_oa;
#line 167 "/run/build/planner/src/Services/Github.vala"
			_tmp64_ = json_object_get_string_member (_tmp63_, "token");
#line 167 "/run/build/planner/src/Services/Github.vala"
			_tmp65_ = g_strdup (_tmp64_);
#line 167 "/run/build/planner/src/Services/Github.vala"
			token = _tmp65_;
#line 169 "/run/build/planner/src/Services/Github.vala"
			_tmp66_ = token;
#line 169 "/run/build/planner/src/Services/Github.vala"
			if (g_strcmp0 (_tmp66_, "") != 0) {
#line 1526 "Github.c"
				const gchar* _tmp67_;
#line 170 "/run/build/planner/src/Services/Github.vala"
				_tmp67_ = token;
#line 170 "/run/build/planner/src/Services/Github.vala"
				services_github_get_username_data (self, username, _tmp67_);
#line 1532 "Github.c"
			}
#line 162 "/run/build/planner/src/Services/Github.vala"
			_g_free0 (token);
#line 162 "/run/build/planner/src/Services/Github.vala"
			_json_object_unref0 (root_oa);
#line 162 "/run/build/planner/src/Services/Github.vala"
			_g_object_unref0 (parser);
#line 1540 "Github.c"
		}
		goto __finally8;
		__catch8_g_error:
		{
			GError* e = NULL;
			GError* _tmp68_;
			const gchar* _tmp69_;
#line 162 "/run/build/planner/src/Services/Github.vala"
			e = _inner_error_;
#line 162 "/run/build/planner/src/Services/Github.vala"
			_inner_error_ = NULL;
#line 173 "/run/build/planner/src/Services/Github.vala"
			_tmp68_ = e;
#line 173 "/run/build/planner/src/Services/Github.vala"
			_tmp69_ = _tmp68_->message;
#line 173 "/run/build/planner/src/Services/Github.vala"
			g_debug ("Github.vala:173: %s", _tmp69_);
#line 162 "/run/build/planner/src/Services/Github.vala"
			_g_error_free0 (e);
#line 1560 "Github.c"
		}
		__finally8:
#line 162 "/run/build/planner/src/Services/Github.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 162 "/run/build/planner/src/Services/Github.vala"
			_g_free0 (response);
#line 162 "/run/build/planner/src/Services/Github.vala"
			_g_free0 (encoded);
#line 162 "/run/build/planner/src/Services/Github.vala"
			_g_object_unref0 (message);
#line 162 "/run/build/planner/src/Services/Github.vala"
			_g_free0 (uri);
#line 162 "/run/build/planner/src/Services/Github.vala"
			_g_free0 (str);
#line 162 "/run/build/planner/src/Services/Github.vala"
			__vala_JsonNode_free0 (root);
#line 162 "/run/build/planner/src/Services/Github.vala"
			_g_object_unref0 (generator);
#line 162 "/run/build/planner/src/Services/Github.vala"
			_g_object_unref0 (builder);
#line 162 "/run/build/planner/src/Services/Github.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 162 "/run/build/planner/src/Services/Github.vala"
			g_clear_error (&_inner_error_);
#line 162 "/run/build/planner/src/Services/Github.vala"
			return;
#line 1587 "Github.c"
		}
	}
#line 124 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (response);
#line 124 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (encoded);
#line 124 "/run/build/planner/src/Services/Github.vala"
	_g_object_unref0 (message);
#line 124 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (uri);
#line 124 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (str);
#line 124 "/run/build/planner/src/Services/Github.vala"
	__vala_JsonNode_free0 (root);
#line 124 "/run/build/planner/src/Services/Github.vala"
	_g_object_unref0 (generator);
#line 124 "/run/build/planner/src/Services/Github.vala"
	_g_object_unref0 (builder);
#line 1606 "Github.c"
}


static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
#line 189 "/run/build/planner/src/Services/Github.vala"
	g_atomic_int_inc (&_data1_->_ref_count_);
#line 189 "/run/build/planner/src/Services/Github.vala"
	return _data1_;
#line 1617 "Github.c"
}


static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
#line 189 "/run/build/planner/src/Services/Github.vala"
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
#line 1628 "Github.c"
		ServicesGithub* self;
#line 189 "/run/build/planner/src/Services/Github.vala"
		self = _data1_->self;
#line 189 "/run/build/planner/src/Services/Github.vala"
		_objects_user_unref0 (_data1_->user);
#line 189 "/run/build/planner/src/Services/Github.vala"
		_g_object_unref0 (self);
#line 189 "/run/build/planner/src/Services/Github.vala"
		g_slice_free (Block1Data, _data1_);
#line 1638 "Github.c"
	}
}


static Block2Data*
block2_data_ref (Block2Data* _data2_)
{
#line 217 "/run/build/planner/src/Services/Github.vala"
	g_atomic_int_inc (&_data2_->_ref_count_);
#line 217 "/run/build/planner/src/Services/Github.vala"
	return _data2_;
#line 1650 "Github.c"
}


static void
block2_data_unref (void * _userdata_)
{
	Block2Data* _data2_;
	_data2_ = (Block2Data*) _userdata_;
#line 217 "/run/build/planner/src/Services/Github.vala"
	if (g_atomic_int_dec_and_test (&_data2_->_ref_count_)) {
#line 1661 "Github.c"
		ServicesGithub* self;
#line 217 "/run/build/planner/src/Services/Github.vala"
		self = _data2_->_data1_->self;
#line 217 "/run/build/planner/src/Services/Github.vala"
		_g_main_loop_unref0 (_data2_->loop);
#line 217 "/run/build/planner/src/Services/Github.vala"
		_g_object_unref0 (_data2_->file_from_uri);
#line 217 "/run/build/planner/src/Services/Github.vala"
		block1_data_unref (_data2_->_data1_);
#line 217 "/run/build/planner/src/Services/Github.vala"
		_data2_->_data1_ = NULL;
#line 217 "/run/build/planner/src/Services/Github.vala"
		g_slice_free (Block2Data, _data2_);
#line 1675 "Github.c"
	}
}


static void
____lambda132_ (ServicesGithub* self,
                gint64 current_num_bytes,
                gint64 total_num_bytes)
{
#line 230 "/run/build/planner/src/Services/Github.vala"
	g_print ("%" G_GINT64_FORMAT " bytes of %" G_GINT64_FORMAT " bytes copied.\n", current_num_bytes, total_num_bytes);
#line 1687 "Github.c"
}


static void
_____lambda132__gfile_progress_callback (gint64 current_num_bytes,
                                         gint64 total_num_bytes,
                                         gpointer self)
{
#line 228 "/run/build/planner/src/Services/Github.vala"
	____lambda132_ ((ServicesGithub*) self, current_num_bytes, total_num_bytes);
#line 1698 "Github.c"
}


static void
____lambda133_ (Block2Data* _data2_,
                GObject* obj,
                GAsyncResult* res)
{
	Block1Data* _data1_;
	ServicesGithub* self;
	GMainLoop* _tmp11_;
	GError * _inner_error_ = NULL;
#line 232 "/run/build/planner/src/Services/Github.vala"
	_data1_ = _data2_->_data1_;
#line 232 "/run/build/planner/src/Services/Github.vala"
	self = _data1_->self;
#line 232 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (res != NULL);
#line 1717 "Github.c"
	{
		gboolean _tmp0_ = FALSE;
		GFile* _tmp1_;
#line 234 "/run/build/planner/src/Services/Github.vala"
		_tmp1_ = _data2_->file_from_uri;
#line 234 "/run/build/planner/src/Services/Github.vala"
		_tmp0_ = g_file_copy_finish (_tmp1_, res, &_inner_error_);
#line 234 "/run/build/planner/src/Services/Github.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 1727 "Github.c"
			goto __catch10_g_error;
		}
#line 234 "/run/build/planner/src/Services/Github.vala"
		if (_tmp0_) {
#line 1732 "Github.c"
			ObjectsUser* _tmp2_;
			ObjectsUser* _tmp3_;
			const gchar* _tmp4_;
			ObjectsUser* _tmp5_;
			const gchar* _tmp6_;
			ObjectsUser* _tmp7_;
			gint64 _tmp8_;
#line 235 "/run/build/planner/src/Services/Github.vala"
			_tmp2_ = _data1_->user;
#line 235 "/run/build/planner/src/Services/Github.vala"
			g_signal_emit (self, services_github_signals[SERVICES_GITHUB_COMPLETED_USER_SIGNAL], 0, _tmp2_);
#line 237 "/run/build/planner/src/Services/Github.vala"
			_tmp3_ = _data1_->user;
#line 237 "/run/build/planner/src/Services/Github.vala"
			_tmp4_ = _tmp3_->login;
#line 237 "/run/build/planner/src/Services/Github.vala"
			_tmp5_ = _data1_->user;
#line 237 "/run/build/planner/src/Services/Github.vala"
			_tmp6_ = _tmp5_->token;
#line 237 "/run/build/planner/src/Services/Github.vala"
			_tmp7_ = _data1_->user;
#line 237 "/run/build/planner/src/Services/Github.vala"
			_tmp8_ = _tmp7_->id;
#line 237 "/run/build/planner/src/Services/Github.vala"
			services_github_get_repos (self, _tmp4_, _tmp6_, _tmp8_);
#line 1758 "Github.c"
		}
	}
	goto __finally10;
	__catch10_g_error:
	{
		GError* e = NULL;
		GError* _tmp9_;
		const gchar* _tmp10_;
#line 233 "/run/build/planner/src/Services/Github.vala"
		e = _inner_error_;
#line 233 "/run/build/planner/src/Services/Github.vala"
		_inner_error_ = NULL;
#line 240 "/run/build/planner/src/Services/Github.vala"
		_tmp9_ = e;
#line 240 "/run/build/planner/src/Services/Github.vala"
		_tmp10_ = _tmp9_->message;
#line 240 "/run/build/planner/src/Services/Github.vala"
		g_print ("Error: %s\n", _tmp10_);
#line 233 "/run/build/planner/src/Services/Github.vala"
		_g_error_free0 (e);
#line 1779 "Github.c"
	}
	__finally10:
#line 233 "/run/build/planner/src/Services/Github.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 233 "/run/build/planner/src/Services/Github.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 233 "/run/build/planner/src/Services/Github.vala"
		g_clear_error (&_inner_error_);
#line 233 "/run/build/planner/src/Services/Github.vala"
		return;
#line 1790 "Github.c"
	}
#line 243 "/run/build/planner/src/Services/Github.vala"
	_tmp11_ = _data2_->loop;
#line 243 "/run/build/planner/src/Services/Github.vala"
	g_main_loop_quit (_tmp11_);
#line 1796 "Github.c"
}


static void
_____lambda133__gasync_ready_callback (GObject* source_object,
                                       GAsyncResult* res,
                                       gpointer self)
{
#line 228 "/run/build/planner/src/Services/Github.vala"
	____lambda133_ (self, source_object, res);
#line 228 "/run/build/planner/src/Services/Github.vala"
	block2_data_unref (self);
#line 1809 "Github.c"
}


void
services_github_get_username_data (ServicesGithub* self,
                                   const gchar* username,
                                   const gchar* token)
{
	gchar* uri_user = NULL;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	SoupMessage* message = NULL;
	SoupMessage* _tmp2_;
	SoupMessageHeaders* _tmp3_;
	SoupMessageHeaders* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	SoupSession* _tmp7_;
	gchar* response = NULL;
	SoupMessageBody* _tmp8_;
	SoupBuffer* _tmp9_;
	SoupBuffer* _tmp10_;
	guint8* _tmp11_;
	gint _tmp11__length1;
	gchar* _tmp12_;
	gchar* _tmp13_;
	GError * _inner_error_ = NULL;
#line 178 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (self != NULL);
#line 178 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (username != NULL);
#line 178 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (token != NULL);
#line 179 "/run/build/planner/src/Services/Github.vala"
	_tmp0_ = self->priv->GITHUB_URI;
#line 179 "/run/build/planner/src/Services/Github.vala"
	_tmp1_ = g_strdup_printf ("%s/users/%s", _tmp0_, username);
#line 179 "/run/build/planner/src/Services/Github.vala"
	uri_user = _tmp1_;
#line 181 "/run/build/planner/src/Services/Github.vala"
	_tmp2_ = soup_message_new ("GET", uri_user);
#line 181 "/run/build/planner/src/Services/Github.vala"
	message = _tmp2_;
#line 182 "/run/build/planner/src/Services/Github.vala"
	_tmp3_ = message->request_headers;
#line 182 "/run/build/planner/src/Services/Github.vala"
	soup_message_headers_append (_tmp3_, "User-Agent", "Planner");
#line 183 "/run/build/planner/src/Services/Github.vala"
	_tmp4_ = message->request_headers;
#line 183 "/run/build/planner/src/Services/Github.vala"
	_tmp5_ = g_strconcat ("token ", token, NULL);
#line 183 "/run/build/planner/src/Services/Github.vala"
	_tmp6_ = _tmp5_;
#line 183 "/run/build/planner/src/Services/Github.vala"
	soup_message_headers_append (_tmp4_, "Authorization", _tmp6_);
#line 183 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (_tmp6_);
#line 185 "/run/build/planner/src/Services/Github.vala"
	_tmp7_ = self->priv->session;
#line 185 "/run/build/planner/src/Services/Github.vala"
	soup_session_send_message (_tmp7_, message);
#line 187 "/run/build/planner/src/Services/Github.vala"
	_tmp8_ = message->response_body;
#line 187 "/run/build/planner/src/Services/Github.vala"
	_tmp9_ = soup_message_body_flatten (_tmp8_);
#line 187 "/run/build/planner/src/Services/Github.vala"
	_tmp10_ = _tmp9_;
#line 187 "/run/build/planner/src/Services/Github.vala"
	_tmp11_ = _tmp10_->data;
#line 187 "/run/build/planner/src/Services/Github.vala"
	_tmp11__length1 = (gint) _tmp10_->length;
#line 187 "/run/build/planner/src/Services/Github.vala"
	_tmp12_ = g_strdup ((const gchar*) _tmp11_);
#line 187 "/run/build/planner/src/Services/Github.vala"
	_tmp13_ = _tmp12_;
#line 187 "/run/build/planner/src/Services/Github.vala"
	__vala_SoupBuffer_free0 (_tmp10_);
#line 187 "/run/build/planner/src/Services/Github.vala"
	response = _tmp13_;
#line 1889 "Github.c"
	{
		Block1Data* _data1_;
		JsonParser* parser = NULL;
		JsonParser* _tmp14_;
		JsonObject* nodo = NULL;
		JsonNode* _tmp15_;
		JsonObject* _tmp16_;
		JsonObject* _tmp17_;
		ObjectsUser* _tmp18_;
		ObjectsUser* _tmp19_;
		JsonObject* _tmp20_;
		ObjectsUser* _tmp21_;
		gchar* _tmp22_;
		JsonObject* _tmp23_;
		const gchar* _tmp24_;
		JsonObject* _tmp31_;
		const gchar* _tmp32_;
		JsonObject* _tmp39_;
		const gchar* _tmp40_;
		ServicesDatabase* _tmp47_;
		ObjectsUser* _tmp48_;
#line 189 "/run/build/planner/src/Services/Github.vala"
		_data1_ = g_slice_new0 (Block1Data);
#line 189 "/run/build/planner/src/Services/Github.vala"
		_data1_->_ref_count_ = 1;
#line 189 "/run/build/planner/src/Services/Github.vala"
		_data1_->self = g_object_ref (self);
#line 190 "/run/build/planner/src/Services/Github.vala"
		_tmp14_ = json_parser_new ();
#line 190 "/run/build/planner/src/Services/Github.vala"
		parser = _tmp14_;
#line 191 "/run/build/planner/src/Services/Github.vala"
		json_parser_load_from_data (parser, response, (gssize) -1, &_inner_error_);
#line 191 "/run/build/planner/src/Services/Github.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 191 "/run/build/planner/src/Services/Github.vala"
			_g_object_unref0 (parser);
#line 191 "/run/build/planner/src/Services/Github.vala"
			block1_data_unref (_data1_);
#line 191 "/run/build/planner/src/Services/Github.vala"
			_data1_ = NULL;
#line 1931 "Github.c"
			goto __catch9_g_error;
		}
#line 193 "/run/build/planner/src/Services/Github.vala"
		_tmp15_ = json_parser_get_root (parser);
#line 193 "/run/build/planner/src/Services/Github.vala"
		_tmp16_ = json_node_get_object (_tmp15_);
#line 193 "/run/build/planner/src/Services/Github.vala"
		_tmp17_ = _json_object_ref0 (_tmp16_);
#line 193 "/run/build/planner/src/Services/Github.vala"
		nodo = _tmp17_;
#line 195 "/run/build/planner/src/Services/Github.vala"
		_tmp18_ = objects_user_new ((gint64) 0, "", "", "", "");
#line 195 "/run/build/planner/src/Services/Github.vala"
		_data1_->user = _tmp18_;
#line 196 "/run/build/planner/src/Services/Github.vala"
		_tmp19_ = _data1_->user;
#line 196 "/run/build/planner/src/Services/Github.vala"
		_tmp20_ = nodo;
#line 196 "/run/build/planner/src/Services/Github.vala"
		_tmp19_->id = json_object_get_int_member (_tmp20_, "id");
#line 197 "/run/build/planner/src/Services/Github.vala"
		_tmp21_ = _data1_->user;
#line 197 "/run/build/planner/src/Services/Github.vala"
		_tmp22_ = g_strdup (token);
#line 197 "/run/build/planner/src/Services/Github.vala"
		_g_free0 (_tmp21_->token);
#line 197 "/run/build/planner/src/Services/Github.vala"
		_tmp21_->token = _tmp22_;
#line 199 "/run/build/planner/src/Services/Github.vala"
		_tmp23_ = nodo;
#line 199 "/run/build/planner/src/Services/Github.vala"
		_tmp24_ = json_object_get_string_member (_tmp23_, "name");
#line 199 "/run/build/planner/src/Services/Github.vala"
		if (_tmp24_ == NULL) {
#line 1966 "Github.c"
			ObjectsUser* _tmp25_;
			gchar* _tmp26_;
#line 200 "/run/build/planner/src/Services/Github.vala"
			_tmp25_ = _data1_->user;
#line 200 "/run/build/planner/src/Services/Github.vala"
			_tmp26_ = g_strdup ("");
#line 200 "/run/build/planner/src/Services/Github.vala"
			_g_free0 (_tmp25_->name);
#line 200 "/run/build/planner/src/Services/Github.vala"
			_tmp25_->name = _tmp26_;
#line 1977 "Github.c"
		} else {
			ObjectsUser* _tmp27_;
			JsonObject* _tmp28_;
			const gchar* _tmp29_;
			gchar* _tmp30_;
#line 202 "/run/build/planner/src/Services/Github.vala"
			_tmp27_ = _data1_->user;
#line 202 "/run/build/planner/src/Services/Github.vala"
			_tmp28_ = nodo;
#line 202 "/run/build/planner/src/Services/Github.vala"
			_tmp29_ = json_object_get_string_member (_tmp28_, "name");
#line 202 "/run/build/planner/src/Services/Github.vala"
			_tmp30_ = g_strdup (_tmp29_);
#line 202 "/run/build/planner/src/Services/Github.vala"
			_g_free0 (_tmp27_->name);
#line 202 "/run/build/planner/src/Services/Github.vala"
			_tmp27_->name = _tmp30_;
#line 1995 "Github.c"
		}
#line 205 "/run/build/planner/src/Services/Github.vala"
		_tmp31_ = nodo;
#line 205 "/run/build/planner/src/Services/Github.vala"
		_tmp32_ = json_object_get_string_member (_tmp31_, "login");
#line 205 "/run/build/planner/src/Services/Github.vala"
		if (_tmp32_ == NULL) {
#line 2003 "Github.c"
			ObjectsUser* _tmp33_;
			gchar* _tmp34_;
#line 206 "/run/build/planner/src/Services/Github.vala"
			_tmp33_ = _data1_->user;
#line 206 "/run/build/planner/src/Services/Github.vala"
			_tmp34_ = g_strdup ("");
#line 206 "/run/build/planner/src/Services/Github.vala"
			_g_free0 (_tmp33_->login);
#line 206 "/run/build/planner/src/Services/Github.vala"
			_tmp33_->login = _tmp34_;
#line 2014 "Github.c"
		} else {
			ObjectsUser* _tmp35_;
			JsonObject* _tmp36_;
			const gchar* _tmp37_;
			gchar* _tmp38_;
#line 208 "/run/build/planner/src/Services/Github.vala"
			_tmp35_ = _data1_->user;
#line 208 "/run/build/planner/src/Services/Github.vala"
			_tmp36_ = nodo;
#line 208 "/run/build/planner/src/Services/Github.vala"
			_tmp37_ = json_object_get_string_member (_tmp36_, "login");
#line 208 "/run/build/planner/src/Services/Github.vala"
			_tmp38_ = g_strdup (_tmp37_);
#line 208 "/run/build/planner/src/Services/Github.vala"
			_g_free0 (_tmp35_->login);
#line 208 "/run/build/planner/src/Services/Github.vala"
			_tmp35_->login = _tmp38_;
#line 2032 "Github.c"
		}
#line 211 "/run/build/planner/src/Services/Github.vala"
		_tmp39_ = nodo;
#line 211 "/run/build/planner/src/Services/Github.vala"
		_tmp40_ = json_object_get_string_member (_tmp39_, "avatar_url");
#line 211 "/run/build/planner/src/Services/Github.vala"
		if (_tmp40_ == NULL) {
#line 2040 "Github.c"
			ObjectsUser* _tmp41_;
			gchar* _tmp42_;
#line 212 "/run/build/planner/src/Services/Github.vala"
			_tmp41_ = _data1_->user;
#line 212 "/run/build/planner/src/Services/Github.vala"
			_tmp42_ = g_strdup ("");
#line 212 "/run/build/planner/src/Services/Github.vala"
			_g_free0 (_tmp41_->avatar_url);
#line 212 "/run/build/planner/src/Services/Github.vala"
			_tmp41_->avatar_url = _tmp42_;
#line 2051 "Github.c"
		} else {
			ObjectsUser* _tmp43_;
			JsonObject* _tmp44_;
			const gchar* _tmp45_;
			gchar* _tmp46_;
#line 214 "/run/build/planner/src/Services/Github.vala"
			_tmp43_ = _data1_->user;
#line 214 "/run/build/planner/src/Services/Github.vala"
			_tmp44_ = nodo;
#line 214 "/run/build/planner/src/Services/Github.vala"
			_tmp45_ = json_object_get_string_member (_tmp44_, "avatar_url");
#line 214 "/run/build/planner/src/Services/Github.vala"
			_tmp46_ = g_strdup (_tmp45_);
#line 214 "/run/build/planner/src/Services/Github.vala"
			_g_free0 (_tmp43_->avatar_url);
#line 214 "/run/build/planner/src/Services/Github.vala"
			_tmp43_->avatar_url = _tmp46_;
#line 2069 "Github.c"
		}
#line 217 "/run/build/planner/src/Services/Github.vala"
		_tmp47_ = application_database;
#line 217 "/run/build/planner/src/Services/Github.vala"
		_tmp48_ = _data1_->user;
#line 217 "/run/build/planner/src/Services/Github.vala"
		if (services_database_add_user (_tmp47_, _tmp48_) == SQLITE_DONE) {
#line 2077 "Github.c"
			Block2Data* _data2_;
			gchar* image_path = NULL;
			Utils* _tmp49_;
			const gchar* _tmp50_;
			ObjectsUser* _tmp51_;
			gint64 _tmp52_;
			gchar* _tmp53_;
			gchar* _tmp54_;
			gchar* _tmp55_;
			gchar* _tmp56_;
			GFile* file_path = NULL;
			const gchar* _tmp57_;
			GFile* _tmp58_;
			ObjectsUser* _tmp59_;
			const gchar* _tmp60_;
			GFile* _tmp61_;
			GMainLoop* _tmp62_;
			GFile* _tmp63_;
			GFile* _tmp64_;
			GMainLoop* _tmp65_;
#line 217 "/run/build/planner/src/Services/Github.vala"
			_data2_ = g_slice_new0 (Block2Data);
#line 217 "/run/build/planner/src/Services/Github.vala"
			_data2_->_ref_count_ = 1;
#line 217 "/run/build/planner/src/Services/Github.vala"
			_data2_->_data1_ = block1_data_ref (_data1_);
#line 219 "/run/build/planner/src/Services/Github.vala"
			_tmp49_ = application_utils;
#line 219 "/run/build/planner/src/Services/Github.vala"
			_tmp50_ = _tmp49_->PROFILE_FOLDER;
#line 219 "/run/build/planner/src/Services/Github.vala"
			_tmp51_ = _data1_->user;
#line 219 "/run/build/planner/src/Services/Github.vala"
			_tmp52_ = _tmp51_->id;
#line 219 "/run/build/planner/src/Services/Github.vala"
			_tmp53_ = g_strdup_printf ("%i.jpg", (gint) _tmp52_);
#line 219 "/run/build/planner/src/Services/Github.vala"
			_tmp54_ = _tmp53_;
#line 219 "/run/build/planner/src/Services/Github.vala"
			_tmp55_ = g_build_filename (_tmp50_, _tmp54_, NULL);
#line 219 "/run/build/planner/src/Services/Github.vala"
			_tmp56_ = _tmp55_;
#line 219 "/run/build/planner/src/Services/Github.vala"
			_g_free0 (_tmp54_);
#line 219 "/run/build/planner/src/Services/Github.vala"
			image_path = _tmp56_;
#line 222 "/run/build/planner/src/Services/Github.vala"
			_tmp57_ = image_path;
#line 222 "/run/build/planner/src/Services/Github.vala"
			_tmp58_ = g_file_new_for_path (_tmp57_);
#line 222 "/run/build/planner/src/Services/Github.vala"
			file_path = _tmp58_;
#line 223 "/run/build/planner/src/Services/Github.vala"
			_tmp59_ = _data1_->user;
#line 223 "/run/build/planner/src/Services/Github.vala"
			_tmp60_ = _tmp59_->avatar_url;
#line 223 "/run/build/planner/src/Services/Github.vala"
			_tmp61_ = g_file_new_for_uri (_tmp60_);
#line 223 "/run/build/planner/src/Services/Github.vala"
			_data2_->file_from_uri = _tmp61_;
#line 226 "/run/build/planner/src/Services/Github.vala"
			_tmp62_ = g_main_loop_new (NULL, FALSE);
#line 226 "/run/build/planner/src/Services/Github.vala"
			_data2_->loop = _tmp62_;
#line 228 "/run/build/planner/src/Services/Github.vala"
			_tmp63_ = _data2_->file_from_uri;
#line 228 "/run/build/planner/src/Services/Github.vala"
			_tmp64_ = file_path;
#line 228 "/run/build/planner/src/Services/Github.vala"
			g_file_copy_async (_tmp63_, _tmp64_, 0, G_PRIORITY_DEFAULT, NULL, _____lambda132__gfile_progress_callback, self, _____lambda133__gasync_ready_callback, block2_data_ref (_data2_));
#line 246 "/run/build/planner/src/Services/Github.vala"
			_tmp65_ = _data2_->loop;
#line 246 "/run/build/planner/src/Services/Github.vala"
			g_main_loop_run (_tmp65_);
#line 217 "/run/build/planner/src/Services/Github.vala"
			_g_object_unref0 (file_path);
#line 217 "/run/build/planner/src/Services/Github.vala"
			_g_free0 (image_path);
#line 217 "/run/build/planner/src/Services/Github.vala"
			block2_data_unref (_data2_);
#line 217 "/run/build/planner/src/Services/Github.vala"
			_data2_ = NULL;
#line 2160 "Github.c"
		}
#line 189 "/run/build/planner/src/Services/Github.vala"
		_json_object_unref0 (nodo);
#line 189 "/run/build/planner/src/Services/Github.vala"
		_g_object_unref0 (parser);
#line 189 "/run/build/planner/src/Services/Github.vala"
		block1_data_unref (_data1_);
#line 189 "/run/build/planner/src/Services/Github.vala"
		_data1_ = NULL;
#line 2170 "Github.c"
	}
	goto __finally9;
	__catch9_g_error:
	{
		GError* e = NULL;
		FILE* _tmp66_;
#line 189 "/run/build/planner/src/Services/Github.vala"
		e = _inner_error_;
#line 189 "/run/build/planner/src/Services/Github.vala"
		_inner_error_ = NULL;
#line 249 "/run/build/planner/src/Services/Github.vala"
		_tmp66_ = stderr;
#line 249 "/run/build/planner/src/Services/Github.vala"
		fprintf (_tmp66_, "Failed to connect to Github service.\n");
#line 189 "/run/build/planner/src/Services/Github.vala"
		_g_error_free0 (e);
#line 2187 "Github.c"
	}
	__finally9:
#line 189 "/run/build/planner/src/Services/Github.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 189 "/run/build/planner/src/Services/Github.vala"
		_g_free0 (response);
#line 189 "/run/build/planner/src/Services/Github.vala"
		_g_object_unref0 (message);
#line 189 "/run/build/planner/src/Services/Github.vala"
		_g_free0 (uri_user);
#line 189 "/run/build/planner/src/Services/Github.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 189 "/run/build/planner/src/Services/Github.vala"
		g_clear_error (&_inner_error_);
#line 189 "/run/build/planner/src/Services/Github.vala"
		return;
#line 2204 "Github.c"
	}
#line 178 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (response);
#line 178 "/run/build/planner/src/Services/Github.vala"
	_g_object_unref0 (message);
#line 178 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (uri_user);
#line 2212 "Github.c"
}


static Block3Data*
block3_data_ref (Block3Data* _data3_)
{
#line 253 "/run/build/planner/src/Services/Github.vala"
	g_atomic_int_inc (&_data3_->_ref_count_);
#line 253 "/run/build/planner/src/Services/Github.vala"
	return _data3_;
#line 2223 "Github.c"
}


static void
block3_data_unref (void * _userdata_)
{
	Block3Data* _data3_;
	_data3_ = (Block3Data*) _userdata_;
#line 253 "/run/build/planner/src/Services/Github.vala"
	if (g_atomic_int_dec_and_test (&_data3_->_ref_count_)) {
#line 2234 "Github.c"
		ServicesGithub* self;
#line 253 "/run/build/planner/src/Services/Github.vala"
		self = _data3_->self;
#line 253 "/run/build/planner/src/Services/Github.vala"
		_g_free0 (_data3_->username);
#line 253 "/run/build/planner/src/Services/Github.vala"
		_g_free0 (_data3_->token);
#line 253 "/run/build/planner/src/Services/Github.vala"
		_g_object_unref0 (self);
#line 253 "/run/build/planner/src/Services/Github.vala"
		g_slice_free (Block3Data, _data3_);
#line 2246 "Github.c"
	}
}


static void*
__lambda134_ (Block3Data* _data3_)
{
	ServicesGithub* self;
	void* result = NULL;
	gchar* uri_repos = NULL;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	SoupMessage* message = NULL;
	SoupMessage* _tmp2_;
	SoupMessageHeaders* _tmp3_;
	SoupMessageHeaders* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	SoupSession* _tmp7_;
	GError * _inner_error_ = NULL;
#line 254 "/run/build/planner/src/Services/Github.vala"
	self = _data3_->self;
#line 255 "/run/build/planner/src/Services/Github.vala"
	_tmp0_ = self->priv->GITHUB_URI;
#line 255 "/run/build/planner/src/Services/Github.vala"
	_tmp1_ = g_strdup_printf ("%s/users/%s/repos", _tmp0_, _data3_->username);
#line 255 "/run/build/planner/src/Services/Github.vala"
	uri_repos = _tmp1_;
#line 257 "/run/build/planner/src/Services/Github.vala"
	_tmp2_ = soup_message_new ("GET", uri_repos);
#line 257 "/run/build/planner/src/Services/Github.vala"
	message = _tmp2_;
#line 258 "/run/build/planner/src/Services/Github.vala"
	_tmp3_ = message->request_headers;
#line 258 "/run/build/planner/src/Services/Github.vala"
	soup_message_headers_append (_tmp3_, "User-Agent", "planner");
#line 259 "/run/build/planner/src/Services/Github.vala"
	_tmp4_ = message->request_headers;
#line 259 "/run/build/planner/src/Services/Github.vala"
	_tmp5_ = g_strconcat ("token ", _data3_->token, NULL);
#line 259 "/run/build/planner/src/Services/Github.vala"
	_tmp6_ = _tmp5_;
#line 259 "/run/build/planner/src/Services/Github.vala"
	soup_message_headers_append (_tmp4_, "Authorization", _tmp6_);
#line 259 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (_tmp6_);
#line 261 "/run/build/planner/src/Services/Github.vala"
	_tmp7_ = self->priv->session;
#line 261 "/run/build/planner/src/Services/Github.vala"
	soup_session_send_message (_tmp7_, message);
#line 2297 "Github.c"
	{
		JsonParser* parser = NULL;
		JsonParser* _tmp8_;
		SoupMessageBody* _tmp9_;
		SoupBuffer* _tmp10_;
		SoupBuffer* _tmp11_;
		guint8* _tmp12_;
		gint _tmp12__length1;
		JsonArray* root = NULL;
		JsonNode* _tmp13_;
		JsonArray* _tmp14_;
		JsonArray* _tmp15_;
		JsonArray* _tmp16_;
		GList* _tmp17_;
#line 264 "/run/build/planner/src/Services/Github.vala"
		_tmp8_ = json_parser_new ();
#line 264 "/run/build/planner/src/Services/Github.vala"
		parser = _tmp8_;
#line 265 "/run/build/planner/src/Services/Github.vala"
		_tmp9_ = message->response_body;
#line 265 "/run/build/planner/src/Services/Github.vala"
		_tmp10_ = soup_message_body_flatten (_tmp9_);
#line 265 "/run/build/planner/src/Services/Github.vala"
		_tmp11_ = _tmp10_;
#line 265 "/run/build/planner/src/Services/Github.vala"
		_tmp12_ = _tmp11_->data;
#line 265 "/run/build/planner/src/Services/Github.vala"
		_tmp12__length1 = (gint) _tmp11_->length;
#line 265 "/run/build/planner/src/Services/Github.vala"
		json_parser_load_from_data (parser, (const gchar*) _tmp12_, (gssize) -1, &_inner_error_);
#line 265 "/run/build/planner/src/Services/Github.vala"
		__vala_SoupBuffer_free0 (_tmp11_);
#line 265 "/run/build/planner/src/Services/Github.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 265 "/run/build/planner/src/Services/Github.vala"
			_g_object_unref0 (parser);
#line 2334 "Github.c"
			goto __catch11_g_error;
		}
#line 267 "/run/build/planner/src/Services/Github.vala"
		_tmp13_ = json_parser_get_root (parser);
#line 267 "/run/build/planner/src/Services/Github.vala"
		_tmp14_ = json_node_get_array (_tmp13_);
#line 267 "/run/build/planner/src/Services/Github.vala"
		_tmp15_ = _json_array_ref0 (_tmp14_);
#line 267 "/run/build/planner/src/Services/Github.vala"
		root = _tmp15_;
#line 269 "/run/build/planner/src/Services/Github.vala"
		_tmp16_ = root;
#line 269 "/run/build/planner/src/Services/Github.vala"
		_tmp17_ = json_array_get_elements (_tmp16_);
#line 2349 "Github.c"
		{
			GList* item_collection = NULL;
			GList* item_it = NULL;
#line 269 "/run/build/planner/src/Services/Github.vala"
			item_collection = _tmp17_;
#line 269 "/run/build/planner/src/Services/Github.vala"
			for (item_it = item_collection; item_it != NULL; item_it = item_it->next) {
#line 2357 "Github.c"
				JsonNode* item = NULL;
#line 269 "/run/build/planner/src/Services/Github.vala"
				item = (JsonNode*) item_it->data;
#line 2361 "Github.c"
				{
					JsonObject* item_details = NULL;
					JsonNode* _tmp18_;
					JsonObject* _tmp19_;
					JsonObject* _tmp20_;
					JsonObject* _tmp21_;
#line 270 "/run/build/planner/src/Services/Github.vala"
					_tmp18_ = item;
#line 270 "/run/build/planner/src/Services/Github.vala"
					_tmp19_ = json_node_get_object (_tmp18_);
#line 270 "/run/build/planner/src/Services/Github.vala"
					_tmp20_ = _json_object_ref0 (_tmp19_);
#line 270 "/run/build/planner/src/Services/Github.vala"
					item_details = _tmp20_;
#line 272 "/run/build/planner/src/Services/Github.vala"
					_tmp21_ = item_details;
#line 272 "/run/build/planner/src/Services/Github.vala"
					if (json_object_get_boolean_member (_tmp21_, "fork") == FALSE) {
#line 2380 "Github.c"
						ServicesDatabase* _tmp22_;
						JsonObject* _tmp23_;
#line 273 "/run/build/planner/src/Services/Github.vala"
						_tmp22_ = application_database;
#line 273 "/run/build/planner/src/Services/Github.vala"
						_tmp23_ = item_details;
#line 273 "/run/build/planner/src/Services/Github.vala"
						if (services_database_repository_exists (_tmp22_, json_object_get_int_member (_tmp23_, "id")) == FALSE) {
#line 2389 "Github.c"
							ObjectsRepository* repo = NULL;
							ObjectsRepository* _tmp24_;
							ObjectsRepository* _tmp25_;
							JsonObject* _tmp26_;
							ObjectsRepository* _tmp27_;
							JsonObject* _tmp28_;
							const gchar* _tmp29_;
							gchar* _tmp30_;
							ObjectsRepository* _tmp31_;
							ServicesDatabase* _tmp32_;
							ObjectsRepository* _tmp33_;
#line 274 "/run/build/planner/src/Services/Github.vala"
							_tmp24_ = objects_repository_new ((gint64) 0, "", 0, "", (gint64) 0);
#line 274 "/run/build/planner/src/Services/Github.vala"
							repo = _tmp24_;
#line 275 "/run/build/planner/src/Services/Github.vala"
							_tmp25_ = repo;
#line 275 "/run/build/planner/src/Services/Github.vala"
							_tmp26_ = item_details;
#line 275 "/run/build/planner/src/Services/Github.vala"
							_tmp25_->id = json_object_get_int_member (_tmp26_, "id");
#line 276 "/run/build/planner/src/Services/Github.vala"
							_tmp27_ = repo;
#line 276 "/run/build/planner/src/Services/Github.vala"
							_tmp28_ = item_details;
#line 276 "/run/build/planner/src/Services/Github.vala"
							_tmp29_ = json_object_get_string_member (_tmp28_, "name");
#line 276 "/run/build/planner/src/Services/Github.vala"
							_tmp30_ = g_strdup (_tmp29_);
#line 276 "/run/build/planner/src/Services/Github.vala"
							_g_free0 (_tmp27_->name);
#line 276 "/run/build/planner/src/Services/Github.vala"
							_tmp27_->name = _tmp30_;
#line 277 "/run/build/planner/src/Services/Github.vala"
							_tmp31_ = repo;
#line 277 "/run/build/planner/src/Services/Github.vala"
							_tmp31_->user_id = _data3_->user_id;
#line 279 "/run/build/planner/src/Services/Github.vala"
							_tmp32_ = application_database;
#line 279 "/run/build/planner/src/Services/Github.vala"
							_tmp33_ = repo;
#line 279 "/run/build/planner/src/Services/Github.vala"
							services_database_add_repository (_tmp32_, _tmp33_);
#line 273 "/run/build/planner/src/Services/Github.vala"
							_objects_repository_unref0 (repo);
#line 2435 "Github.c"
						}
					}
#line 269 "/run/build/planner/src/Services/Github.vala"
					_json_object_unref0 (item_details);
#line 2440 "Github.c"
				}
			}
#line 269 "/run/build/planner/src/Services/Github.vala"
			(item_collection == NULL) ? NULL : (item_collection = (g_list_free (item_collection), NULL));
#line 2445 "Github.c"
		}
#line 263 "/run/build/planner/src/Services/Github.vala"
		_json_array_unref0 (root);
#line 263 "/run/build/planner/src/Services/Github.vala"
		_g_object_unref0 (parser);
#line 2451 "Github.c"
	}
	goto __finally11;
	__catch11_g_error:
	{
		GError* e = NULL;
		FILE* _tmp34_;
#line 263 "/run/build/planner/src/Services/Github.vala"
		e = _inner_error_;
#line 263 "/run/build/planner/src/Services/Github.vala"
		_inner_error_ = NULL;
#line 286 "/run/build/planner/src/Services/Github.vala"
		_tmp34_ = stderr;
#line 286 "/run/build/planner/src/Services/Github.vala"
		fprintf (_tmp34_, "Failed to connect to Github service.\n");
#line 263 "/run/build/planner/src/Services/Github.vala"
		_g_error_free0 (e);
#line 2468 "Github.c"
	}
	__finally11:
#line 263 "/run/build/planner/src/Services/Github.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 263 "/run/build/planner/src/Services/Github.vala"
		_g_object_unref0 (message);
#line 263 "/run/build/planner/src/Services/Github.vala"
		_g_free0 (uri_repos);
#line 263 "/run/build/planner/src/Services/Github.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 263 "/run/build/planner/src/Services/Github.vala"
		g_clear_error (&_inner_error_);
#line 263 "/run/build/planner/src/Services/Github.vala"
		return NULL;
#line 2483 "Github.c"
	}
#line 289 "/run/build/planner/src/Services/Github.vala"
	result = NULL;
#line 289 "/run/build/planner/src/Services/Github.vala"
	_g_object_unref0 (message);
#line 289 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (uri_repos);
#line 289 "/run/build/planner/src/Services/Github.vala"
	return result;
#line 2493 "Github.c"
}


static gpointer
___lambda134__gthread_func (gpointer self)
{
	gpointer result;
	result = __lambda134_ (self);
#line 254 "/run/build/planner/src/Services/Github.vala"
	block3_data_unref (self);
#line 254 "/run/build/planner/src/Services/Github.vala"
	return result;
#line 2506 "Github.c"
}


void
services_github_get_repos (ServicesGithub* self,
                           const gchar* username,
                           const gchar* token,
                           gint64 user_id)
{
	Block3Data* _data3_;
	gchar* _tmp0_;
	gchar* _tmp1_;
	GThread* _tmp2_;
	GThread* _tmp3_;
#line 253 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (self != NULL);
#line 253 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (username != NULL);
#line 253 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (token != NULL);
#line 253 "/run/build/planner/src/Services/Github.vala"
	_data3_ = g_slice_new0 (Block3Data);
#line 253 "/run/build/planner/src/Services/Github.vala"
	_data3_->_ref_count_ = 1;
#line 253 "/run/build/planner/src/Services/Github.vala"
	_data3_->self = g_object_ref (self);
#line 253 "/run/build/planner/src/Services/Github.vala"
	_tmp0_ = g_strdup (username);
#line 253 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (_data3_->username);
#line 253 "/run/build/planner/src/Services/Github.vala"
	_data3_->username = _tmp0_;
#line 253 "/run/build/planner/src/Services/Github.vala"
	_tmp1_ = g_strdup (token);
#line 253 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (_data3_->token);
#line 253 "/run/build/planner/src/Services/Github.vala"
	_data3_->token = _tmp1_;
#line 253 "/run/build/planner/src/Services/Github.vala"
	_data3_->user_id = user_id;
#line 254 "/run/build/planner/src/Services/Github.vala"
	_tmp2_ = g_thread_new ("scan_local_files", ___lambda134__gthread_func, block3_data_ref (_data3_));
#line 254 "/run/build/planner/src/Services/Github.vala"
	_tmp3_ = _tmp2_;
#line 254 "/run/build/planner/src/Services/Github.vala"
	_g_thread_unref0 (_tmp3_);
#line 253 "/run/build/planner/src/Services/Github.vala"
	block3_data_unref (_data3_);
#line 253 "/run/build/planner/src/Services/Github.vala"
	_data3_ = NULL;
#line 2557 "Github.c"
}


gboolean
services_github_delete_account (ServicesGithub* self)
{
	gboolean result = FALSE;
	ObjectsUser* user = NULL;
	ServicesDatabase* _tmp0_;
	ObjectsUser* _tmp1_;
	gchar* image_path = NULL;
	Utils* _tmp2_;
	const gchar* _tmp3_;
	ObjectsUser* _tmp4_;
	gint64 _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	gchar* _tmp9_;
	GFile* file_path = NULL;
	const gchar* _tmp10_;
	GFile* _tmp11_;
	GFile* _tmp12_;
	gboolean _tmp17_ = FALSE;
	ServicesDatabase* _tmp18_;
	GError * _inner_error_ = NULL;
#line 293 "/run/build/planner/src/Services/Github.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 294 "/run/build/planner/src/Services/Github.vala"
	_tmp0_ = application_database;
#line 294 "/run/build/planner/src/Services/Github.vala"
	_tmp1_ = services_database_get_user (_tmp0_);
#line 294 "/run/build/planner/src/Services/Github.vala"
	user = _tmp1_;
#line 295 "/run/build/planner/src/Services/Github.vala"
	_tmp2_ = application_utils;
#line 295 "/run/build/planner/src/Services/Github.vala"
	_tmp3_ = _tmp2_->PROFILE_FOLDER;
#line 295 "/run/build/planner/src/Services/Github.vala"
	_tmp4_ = user;
#line 295 "/run/build/planner/src/Services/Github.vala"
	_tmp5_ = _tmp4_->id;
#line 295 "/run/build/planner/src/Services/Github.vala"
	_tmp6_ = g_strdup_printf ("%i.jpg", (gint) _tmp5_);
#line 295 "/run/build/planner/src/Services/Github.vala"
	_tmp7_ = _tmp6_;
#line 295 "/run/build/planner/src/Services/Github.vala"
	_tmp8_ = g_build_filename (_tmp3_, _tmp7_, NULL);
#line 295 "/run/build/planner/src/Services/Github.vala"
	_tmp9_ = _tmp8_;
#line 295 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (_tmp7_);
#line 295 "/run/build/planner/src/Services/Github.vala"
	image_path = _tmp9_;
#line 296 "/run/build/planner/src/Services/Github.vala"
	_tmp10_ = image_path;
#line 296 "/run/build/planner/src/Services/Github.vala"
	_tmp11_ = g_file_new_for_path (_tmp10_);
#line 296 "/run/build/planner/src/Services/Github.vala"
	file_path = _tmp11_;
#line 298 "/run/build/planner/src/Services/Github.vala"
	_tmp12_ = file_path;
#line 298 "/run/build/planner/src/Services/Github.vala"
	if (g_file_query_exists (_tmp12_, NULL)) {
#line 2622 "Github.c"
		{
			GFile* _tmp13_;
#line 300 "/run/build/planner/src/Services/Github.vala"
			_tmp13_ = file_path;
#line 300 "/run/build/planner/src/Services/Github.vala"
			g_file_delete (_tmp13_, NULL, &_inner_error_);
#line 300 "/run/build/planner/src/Services/Github.vala"
			if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 2631 "Github.c"
				goto __catch12_g_error;
			}
		}
		goto __finally12;
		__catch12_g_error:
		{
			GError* e = NULL;
			GError* _tmp14_;
			const gchar* _tmp15_;
#line 299 "/run/build/planner/src/Services/Github.vala"
			e = _inner_error_;
#line 299 "/run/build/planner/src/Services/Github.vala"
			_inner_error_ = NULL;
#line 302 "/run/build/planner/src/Services/Github.vala"
			_tmp14_ = e;
#line 302 "/run/build/planner/src/Services/Github.vala"
			_tmp15_ = _tmp14_->message;
#line 302 "/run/build/planner/src/Services/Github.vala"
			g_print ("Error: %s\n", _tmp15_);
#line 299 "/run/build/planner/src/Services/Github.vala"
			_g_error_free0 (e);
#line 2653 "Github.c"
		}
		__finally12:
#line 299 "/run/build/planner/src/Services/Github.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 2658 "Github.c"
			gboolean _tmp16_ = FALSE;
#line 299 "/run/build/planner/src/Services/Github.vala"
			_g_object_unref0 (file_path);
#line 299 "/run/build/planner/src/Services/Github.vala"
			_g_free0 (image_path);
#line 299 "/run/build/planner/src/Services/Github.vala"
			_objects_user_unref0 (user);
#line 299 "/run/build/planner/src/Services/Github.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 299 "/run/build/planner/src/Services/Github.vala"
			g_clear_error (&_inner_error_);
#line 299 "/run/build/planner/src/Services/Github.vala"
			return _tmp16_;
#line 2672 "Github.c"
		}
	}
#line 306 "/run/build/planner/src/Services/Github.vala"
	_tmp18_ = application_database;
#line 306 "/run/build/planner/src/Services/Github.vala"
	if (services_database_remove_all_users (_tmp18_) == SQLITE_DONE) {
#line 2679 "Github.c"
		ServicesDatabase* _tmp19_;
#line 306 "/run/build/planner/src/Services/Github.vala"
		_tmp19_ = application_database;
#line 306 "/run/build/planner/src/Services/Github.vala"
		_tmp17_ = services_database_remove_all_repos (_tmp19_) == SQLITE_DONE;
#line 2685 "Github.c"
	} else {
#line 306 "/run/build/planner/src/Services/Github.vala"
		_tmp17_ = FALSE;
#line 2689 "Github.c"
	}
#line 306 "/run/build/planner/src/Services/Github.vala"
	if (_tmp17_) {
#line 307 "/run/build/planner/src/Services/Github.vala"
		result = TRUE;
#line 307 "/run/build/planner/src/Services/Github.vala"
		_g_object_unref0 (file_path);
#line 307 "/run/build/planner/src/Services/Github.vala"
		_g_free0 (image_path);
#line 307 "/run/build/planner/src/Services/Github.vala"
		_objects_user_unref0 (user);
#line 307 "/run/build/planner/src/Services/Github.vala"
		return result;
#line 2703 "Github.c"
	} else {
#line 309 "/run/build/planner/src/Services/Github.vala"
		result = FALSE;
#line 309 "/run/build/planner/src/Services/Github.vala"
		_g_object_unref0 (file_path);
#line 309 "/run/build/planner/src/Services/Github.vala"
		_g_free0 (image_path);
#line 309 "/run/build/planner/src/Services/Github.vala"
		_objects_user_unref0 (user);
#line 309 "/run/build/planner/src/Services/Github.vala"
		return result;
#line 2715 "Github.c"
	}
#line 293 "/run/build/planner/src/Services/Github.vala"
	_g_object_unref0 (file_path);
#line 293 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (image_path);
#line 293 "/run/build/planner/src/Services/Github.vala"
	_objects_user_unref0 (user);
#line 2723 "Github.c"
}


static void
g_cclosure_user_marshal_VOID__OBJECTS_USER (GClosure * closure,
                                            GValue * return_value,
                                            guint n_param_values,
                                            const GValue * param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECTS_USER) (gpointer data1, gpointer arg_1, gpointer data2);
	register GMarshalFunc_VOID__OBJECTS_USER callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 22 "/run/build/planner/src/Services/Github.vala"
	g_return_if_fail (n_param_values == 2);
#line 22 "/run/build/planner/src/Services/Github.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 22 "/run/build/planner/src/Services/Github.vala"
		data1 = closure->data;
#line 22 "/run/build/planner/src/Services/Github.vala"
		data2 = param_values->data[0].v_pointer;
#line 2749 "Github.c"
	} else {
#line 22 "/run/build/planner/src/Services/Github.vala"
		data1 = param_values->data[0].v_pointer;
#line 22 "/run/build/planner/src/Services/Github.vala"
		data2 = closure->data;
#line 2755 "Github.c"
	}
#line 22 "/run/build/planner/src/Services/Github.vala"
	callback = (GMarshalFunc_VOID__OBJECTS_USER) (marshal_data ? marshal_data : cc->callback);
#line 22 "/run/build/planner/src/Services/Github.vala"
	callback (data1, objects_value_get_user (param_values + 1), data2);
#line 2761 "Github.c"
}


static void
services_github_class_init (ServicesGithubClass * klass)
{
#line 22 "/run/build/planner/src/Services/Github.vala"
	services_github_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Services/Github.vala"
	g_type_class_add_private (klass, sizeof (ServicesGithubPrivate));
#line 22 "/run/build/planner/src/Services/Github.vala"
	G_OBJECT_CLASS (klass)->finalize = services_github_finalize;
#line 22 "/run/build/planner/src/Services/Github.vala"
	services_github_signals[SERVICES_GITHUB_USER_IS_VALID_SIGNAL] = g_signal_new ("user-is-valid", SERVICES_TYPE_GITHUB, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__BOOLEAN, G_TYPE_NONE, 1, G_TYPE_BOOLEAN);
#line 22 "/run/build/planner/src/Services/Github.vala"
	services_github_signals[SERVICES_GITHUB_COMPLETED_USER_SIGNAL] = g_signal_new ("completed-user", SERVICES_TYPE_GITHUB, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECTS_USER, G_TYPE_NONE, 1, OBJECTS_TYPE_USER);
#line 2778 "Github.c"
}


static void
services_github_instance_init (ServicesGithub * self)
{
	gchar* _tmp0_;
#line 22 "/run/build/planner/src/Services/Github.vala"
	self->priv = SERVICES_GITHUB_GET_PRIVATE (self);
#line 25 "/run/build/planner/src/Services/Github.vala"
	_tmp0_ = g_strdup ("https://api.github.com");
#line 25 "/run/build/planner/src/Services/Github.vala"
	self->priv->GITHUB_URI = _tmp0_;
#line 2792 "Github.c"
}


static void
services_github_finalize (GObject * obj)
{
	ServicesGithub * self;
#line 22 "/run/build/planner/src/Services/Github.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SERVICES_TYPE_GITHUB, ServicesGithub);
#line 23 "/run/build/planner/src/Services/Github.vala"
	_g_object_unref0 (self->priv->session);
#line 25 "/run/build/planner/src/Services/Github.vala"
	_g_free0 (self->priv->GITHUB_URI);
#line 22 "/run/build/planner/src/Services/Github.vala"
	G_OBJECT_CLASS (services_github_parent_class)->finalize (obj);
#line 2808 "Github.c"
}


GType
services_github_get_type (void)
{
	static volatile gsize services_github_type_id__volatile = 0;
	if (g_once_init_enter (&services_github_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ServicesGithubClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) services_github_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ServicesGithub), 0, (GInstanceInitFunc) services_github_instance_init, NULL };
		GType services_github_type_id;
		services_github_type_id = g_type_register_static (G_TYPE_OBJECT, "ServicesGithub", &g_define_type_info, 0);
		g_once_init_leave (&services_github_type_id__volatile, services_github_type_id);
	}
	return services_github_type_id__volatile;
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



