/* BackendsManager.c generated by valac 0.40.11, the Vala compiler
 * generated from BackendsManager.vala, do not modify */

/* -*- Mode: vala; indent-tabs-mode: nil; tab-width: 4 -*-*/
/*-
 * Copyright (c) 2013 Maya Developers (https://launchpad.net/maya)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 *
 * Authored by: Corentin NoÃ«l <tintou@mailoo.org>
 */


#include <glib.h>
#include <glib-object.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <libedataserver/libedataserver.h>
#include <gio/gio.h>
#include <gmodule.h>


#define MAYA_TYPE_BACKENDS_MANAGER (maya_backends_manager_get_type ())
#define MAYA_BACKENDS_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MAYA_TYPE_BACKENDS_MANAGER, MayaBackendsManager))
#define MAYA_BACKENDS_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MAYA_TYPE_BACKENDS_MANAGER, MayaBackendsManagerClass))
#define MAYA_IS_BACKENDS_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MAYA_TYPE_BACKENDS_MANAGER))
#define MAYA_IS_BACKENDS_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MAYA_TYPE_BACKENDS_MANAGER))
#define MAYA_BACKENDS_MANAGER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MAYA_TYPE_BACKENDS_MANAGER, MayaBackendsManagerClass))

typedef struct _MayaBackendsManager MayaBackendsManager;
typedef struct _MayaBackendsManagerClass MayaBackendsManagerClass;
typedef struct _MayaBackendsManagerPrivate MayaBackendsManagerPrivate;

#define MAYA_TYPE_BACKEND (maya_backend_get_type ())
#define MAYA_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MAYA_TYPE_BACKEND, MayaBackend))
#define MAYA_IS_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MAYA_TYPE_BACKEND))
#define MAYA_BACKEND_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), MAYA_TYPE_BACKEND, MayaBackendIface))

typedef struct _MayaBackend MayaBackend;
typedef struct _MayaBackendIface MayaBackendIface;

#define MAYA_TYPE_PLACEMENT_WIDGET (maya_placement_widget_get_type ())
#define MAYA_PLACEMENT_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MAYA_TYPE_PLACEMENT_WIDGET, MayaPlacementWidget))
#define MAYA_PLACEMENT_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MAYA_TYPE_PLACEMENT_WIDGET, MayaPlacementWidgetClass))
#define MAYA_IS_PLACEMENT_WIDGET(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MAYA_TYPE_PLACEMENT_WIDGET))
#define MAYA_IS_PLACEMENT_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MAYA_TYPE_PLACEMENT_WIDGET))
#define MAYA_PLACEMENT_WIDGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MAYA_TYPE_PLACEMENT_WIDGET, MayaPlacementWidgetClass))

typedef struct _MayaPlacementWidget MayaPlacementWidget;
typedef struct _MayaPlacementWidgetClass MayaPlacementWidgetClass;

#define MAYA_TYPE_LOCAL_BACKEND (maya_local_backend_get_type ())
#define MAYA_LOCAL_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), MAYA_TYPE_LOCAL_BACKEND, MayaLocalBackend))
#define MAYA_LOCAL_BACKEND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), MAYA_TYPE_LOCAL_BACKEND, MayaLocalBackendClass))
#define MAYA_IS_LOCAL_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), MAYA_TYPE_LOCAL_BACKEND))
#define MAYA_IS_LOCAL_BACKEND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), MAYA_TYPE_LOCAL_BACKEND))
#define MAYA_LOCAL_BACKEND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), MAYA_TYPE_LOCAL_BACKEND, MayaLocalBackendClass))

typedef struct _MayaLocalBackend MayaLocalBackend;
typedef struct _MayaLocalBackendClass MayaLocalBackendClass;
enum  {
	MAYA_BACKENDS_MANAGER_0_PROPERTY,
	MAYA_BACKENDS_MANAGER_NUM_PROPERTIES
};
static GParamSpec* maya_backends_manager_properties[MAYA_BACKENDS_MANAGER_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_module_close0(var) ((var == NULL) ? NULL : (var = (g_module_close (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
enum  {
	MAYA_BACKENDS_MANAGER_BACKEND_ADDED_SIGNAL,
	MAYA_BACKENDS_MANAGER_BACKEND_REMOVED_SIGNAL,
	MAYA_BACKENDS_MANAGER_NUM_SIGNALS
};
static guint maya_backends_manager_signals[MAYA_BACKENDS_MANAGER_NUM_SIGNALS] = {0};

struct _MayaBackendIface {
	GTypeInterface parent_iface;
	gchar* (*get_name) (MayaBackend* self);
	gchar* (*get_uid) (MayaBackend* self);
	GeeCollection* (*get_new_calendar_widget) (MayaBackend* self, ESource* to_edit);
	void (*add_new_calendar) (MayaBackend* self, const gchar* name, const gchar* color, gboolean set_default, GeeCollection* widgets);
	void (*modify_calendar) (MayaBackend* self, const gchar* name, const gchar* color, gboolean set_default, GeeCollection* widgets, ESource* source);
};

struct _MayaBackendsManager {
	GObject parent_instance;
	MayaBackendsManagerPrivate * priv;
	GeeArrayList* backends;
};

struct _MayaBackendsManagerClass {
	GObjectClass parent_class;
};

struct _MayaBackendsManagerPrivate {
	MayaLocalBackend* local_backend;
};

typedef MayaBackend* (*MayaBackendsManagerRegisterPluginFunction) (GModule* module);

static gpointer maya_backends_manager_parent_class = NULL;
static MayaBackendsManager* maya_backends_manager_backends_manager;
static MayaBackendsManager* maya_backends_manager_backends_manager = NULL;

GType maya_backends_manager_get_type (void) G_GNUC_CONST;
GType maya_placement_widget_get_type (void) G_GNUC_CONST;
GType maya_backend_get_type (void) G_GNUC_CONST;
GType maya_local_backend_get_type (void) G_GNUC_CONST;
#define MAYA_BACKENDS_MANAGER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), MAYA_TYPE_BACKENDS_MANAGER, MayaBackendsManagerPrivate))
MayaBackendsManager* maya_backends_manager_get_default (void);
static MayaBackendsManager* maya_backends_manager_new (void);
static MayaBackendsManager* maya_backends_manager_construct (GType object_type);
MayaLocalBackend* maya_local_backend_new (void);
MayaLocalBackend* maya_local_backend_construct (GType object_type);
void maya_backends_manager_add_backend (MayaBackendsManager* self,
                                        MayaBackend* b);
#define BUILD_PLUGIN_DIR "/app/lib/io.elementary.calendar/plugins"
static void maya_backends_manager_find_plugins (MayaBackendsManager* self,
                                         GFile* base_folder);
static void maya_backends_manager_load (MayaBackendsManager* self,
                                 const gchar* path);
void maya_backends_manager_remove_backend (MayaBackendsManager* self,
                                           MayaBackend* b);
static void maya_backends_manager_finalize (GObject * obj);


static gpointer
_g_object_ref0 (gpointer self)
{
#line 29 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	return self ? g_object_ref (self) : NULL;
#line 148 "BackendsManager.c"
}


MayaBackendsManager*
maya_backends_manager_get_default (void)
{
	MayaBackendsManager* result = NULL;
	MayaBackendsManager* _tmp0_;
	MayaBackendsManager* _tmp2_;
	MayaBackendsManager* _tmp3_;
#line 27 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp0_ = maya_backends_manager_backends_manager;
#line 27 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	if (_tmp0_ == NULL) {
#line 163 "BackendsManager.c"
		MayaBackendsManager* _tmp1_;
#line 28 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		_tmp1_ = maya_backends_manager_new ();
#line 28 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		_g_object_unref0 (maya_backends_manager_backends_manager);
#line 28 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		maya_backends_manager_backends_manager = _tmp1_;
#line 171 "BackendsManager.c"
	}
#line 29 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp2_ = maya_backends_manager_backends_manager;
#line 29 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp3_ = _g_object_ref0 (_tmp2_);
#line 29 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	result = _tmp3_;
#line 29 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	return result;
#line 181 "BackendsManager.c"
}


static MayaBackendsManager*
maya_backends_manager_construct (GType object_type)
{
	MayaBackendsManager * self = NULL;
	GeeArrayList* _tmp0_;
	MayaLocalBackend* _tmp1_;
	MayaLocalBackend* _tmp2_;
	GFile* base_folder = NULL;
	GFile* _tmp3_;
#line 42 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	self = (MayaBackendsManager*) g_object_new (object_type, NULL);
#line 43 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp0_ = gee_array_list_new (MAYA_TYPE_BACKEND, NULL, NULL, NULL, NULL, NULL);
#line 43 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_g_object_unref0 (self->backends);
#line 43 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	self->backends = _tmp0_;
#line 46 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp1_ = maya_local_backend_new ();
#line 46 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_g_object_unref0 (self->priv->local_backend);
#line 46 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	self->priv->local_backend = _tmp1_;
#line 47 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp2_ = self->priv->local_backend;
#line 47 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	maya_backends_manager_add_backend (self, (MayaBackend*) _tmp2_);
#line 48 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp3_ = g_file_new_for_path (BUILD_PLUGIN_DIR);
#line 48 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	base_folder = _tmp3_;
#line 49 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	maya_backends_manager_find_plugins (self, base_folder);
#line 42 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_g_object_unref0 (base_folder);
#line 42 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	return self;
#line 222 "BackendsManager.c"
}


static MayaBackendsManager*
maya_backends_manager_new (void)
{
#line 42 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	return maya_backends_manager_construct (MAYA_TYPE_BACKENDS_MANAGER);
#line 231 "BackendsManager.c"
}


static void
maya_backends_manager_load (MayaBackendsManager* self,
                            const gchar* path)
{
	GModule* module = NULL;
	GModule* _tmp0_;
	GModule* _tmp1_;
	void* function = NULL;
	GModule* _tmp3_;
	void* _tmp4_ = NULL;
	void* _tmp5_;
	MayaBackendsManagerRegisterPluginFunction register_plugin = NULL;
	void* _tmp6_;
	MayaBackend* plug = NULL;
	MayaBackendsManagerRegisterPluginFunction _tmp7_;
	GModule* _tmp8_;
	MayaBackend* _tmp9_;
	MayaBackend* _tmp10_;
	GModule* _tmp11_;
	MayaBackend* _tmp12_;
#line 52 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	g_return_if_fail (self != NULL);
#line 52 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	g_return_if_fail (path != NULL);
#line 53 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	if (g_module_supported () == FALSE) {
#line 54 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		g_error ("BackendsManager.vala:54: Maya plugins are not supported by this system" \
"!");
#line 263 "BackendsManager.c"
	}
#line 57 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp0_ = g_module_open (path, G_MODULE_BIND_LAZY);
#line 57 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	module = _tmp0_;
#line 58 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp1_ = module;
#line 58 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	if (_tmp1_ == NULL) {
#line 273 "BackendsManager.c"
		const gchar* _tmp2_;
#line 59 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		_tmp2_ = g_module_error ();
#line 59 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		g_critical ("BackendsManager.vala:59: %s", _tmp2_);
#line 60 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		_g_module_close0 (module);
#line 60 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		return;
#line 283 "BackendsManager.c"
	}
#line 64 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp3_ = module;
#line 64 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	g_module_symbol (_tmp3_, "get_backend", &_tmp4_);
#line 64 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	function = _tmp4_;
#line 65 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp5_ = function;
#line 65 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	if (_tmp5_ == NULL) {
#line 66 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		g_critical ("BackendsManager.vala:66: get_backend () not found in %s", path);
#line 67 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		_g_module_close0 (module);
#line 67 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		return;
#line 301 "BackendsManager.c"
	}
#line 70 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp6_ = function;
#line 70 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	register_plugin = (MayaBackendsManagerRegisterPluginFunction) _tmp6_;
#line 71 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp7_ = register_plugin;
#line 71 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp8_ = module;
#line 71 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp9_ = _tmp7_ (_tmp8_);
#line 71 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	plug = _tmp9_;
#line 72 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp10_ = plug;
#line 72 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	if (_tmp10_ == NULL) {
#line 73 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		g_critical ("BackendsManager.vala:73: Unknown plugin type for %s !", path);
#line 74 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		_g_object_unref0 (plug);
#line 74 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		_g_module_close0 (module);
#line 74 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		return;
#line 327 "BackendsManager.c"
	}
#line 76 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp11_ = module;
#line 76 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	g_module_make_resident (_tmp11_);
#line 77 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp12_ = plug;
#line 77 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	maya_backends_manager_add_backend (self, _tmp12_);
#line 52 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_g_object_unref0 (plug);
#line 52 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_g_module_close0 (module);
#line 341 "BackendsManager.c"
}


static void
maya_backends_manager_find_plugins (MayaBackendsManager* self,
                                    GFile* base_folder)
{
	GFileInfo* file_info = NULL;
	GError * _inner_error_ = NULL;
#line 80 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	g_return_if_fail (self != NULL);
#line 80 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	g_return_if_fail (base_folder != NULL);
#line 81 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	file_info = NULL;
#line 357 "BackendsManager.c"
	{
		GFileEnumerator* enumerator = NULL;
		GFileEnumerator* _tmp0_;
#line 83 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		_tmp0_ = g_file_enumerate_children (base_folder, G_FILE_ATTRIBUTE_STANDARD_NAME "," G_FILE_ATTRIBUTE_STANDARD_TYPE "," G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE, 0, NULL, &_inner_error_);
#line 83 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		enumerator = _tmp0_;
#line 83 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 367 "BackendsManager.c"
			goto __catch0_g_error;
		}
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		while (TRUE) {
#line 372 "BackendsManager.c"
			GFileInfo* _tmp1_ = NULL;
			GFileEnumerator* _tmp2_;
			GFileInfo* _tmp3_;
			GFileInfo* _tmp4_;
			GFileInfo* _tmp5_;
			GFile* file = NULL;
			GFileInfo* _tmp6_;
			const gchar* _tmp7_;
			GFile* _tmp8_;
			gboolean _tmp9_ = FALSE;
			GFileInfo* _tmp10_;
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			_tmp2_ = enumerator;
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			_tmp3_ = g_file_enumerator_next_file (_tmp2_, NULL, &_inner_error_);
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			_tmp1_ = _tmp3_;
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
				_g_object_unref0 (enumerator);
#line 394 "BackendsManager.c"
				goto __catch0_g_error;
			}
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			_tmp4_ = _tmp1_;
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			_tmp1_ = NULL;
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			_g_object_unref0 (file_info);
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			file_info = _tmp4_;
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			_tmp5_ = file_info;
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			if (!(_tmp5_ != NULL)) {
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
				_g_object_unref0 (_tmp1_);
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
				break;
#line 413 "BackendsManager.c"
			}
#line 85 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			_tmp6_ = file_info;
#line 85 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			_tmp7_ = g_file_info_get_name (_tmp6_);
#line 85 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			_tmp8_ = g_file_get_child (base_folder, _tmp7_);
#line 85 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			file = _tmp8_;
#line 87 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			_tmp10_ = file_info;
#line 87 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			if (g_file_info_get_file_type (_tmp10_) == G_FILE_TYPE_REGULAR) {
#line 427 "BackendsManager.c"
				GFileInfo* _tmp11_;
				const gchar* _tmp12_;
#line 87 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
				_tmp11_ = file_info;
#line 87 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
				_tmp12_ = g_file_info_get_content_type (_tmp11_);
#line 87 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
				_tmp9_ = g_content_type_equals (_tmp12_, "application/x-sharedlib");
#line 436 "BackendsManager.c"
			} else {
#line 87 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
				_tmp9_ = FALSE;
#line 440 "BackendsManager.c"
			}
#line 87 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			if (_tmp9_) {
#line 444 "BackendsManager.c"
				GFile* _tmp13_;
				gchar* _tmp14_;
				gchar* _tmp15_;
#line 88 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
				_tmp13_ = file;
#line 88 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
				_tmp14_ = g_file_get_path (_tmp13_);
#line 88 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
				_tmp15_ = _tmp14_;
#line 88 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
				maya_backends_manager_load (self, _tmp15_);
#line 88 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
				_g_free0 (_tmp15_);
#line 458 "BackendsManager.c"
			} else {
				GFileInfo* _tmp16_;
#line 89 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
				_tmp16_ = file_info;
#line 89 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
				if (g_file_info_get_file_type (_tmp16_) == G_FILE_TYPE_DIRECTORY) {
#line 465 "BackendsManager.c"
					GFile* _tmp17_;
#line 90 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
					_tmp17_ = file;
#line 90 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
					maya_backends_manager_find_plugins (self, _tmp17_);
#line 471 "BackendsManager.c"
				}
			}
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			_g_object_unref0 (file);
#line 84 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
			_g_object_unref0 (_tmp1_);
#line 478 "BackendsManager.c"
		}
#line 82 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		_g_object_unref0 (enumerator);
#line 482 "BackendsManager.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* err = NULL;
		GError* _tmp18_;
		const gchar* _tmp19_;
#line 82 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		err = _inner_error_;
#line 82 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		_inner_error_ = NULL;
#line 94 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		_tmp18_ = err;
#line 94 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		_tmp19_ = _tmp18_->message;
#line 94 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		g_warning ("BackendsManager.vala:94: Unable to scan plugs folder: %s\n", _tmp19_);
#line 82 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		_g_error_free0 (err);
#line 502 "BackendsManager.c"
	}
	__finally0:
#line 82 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 82 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		_g_object_unref0 (file_info);
#line 82 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 82 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		g_clear_error (&_inner_error_);
#line 82 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		return;
#line 515 "BackendsManager.c"
	}
#line 80 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_g_object_unref0 (file_info);
#line 519 "BackendsManager.c"
}


void
maya_backends_manager_add_backend (MayaBackendsManager* self,
                                   MayaBackend* b)
{
	GeeArrayList* _tmp0_;
#line 98 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	g_return_if_fail (self != NULL);
#line 98 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	g_return_if_fail (b != NULL);
#line 99 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp0_ = self->backends;
#line 99 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	gee_abstract_collection_add ((GeeAbstractCollection*) _tmp0_, b);
#line 100 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	g_signal_emit (self, maya_backends_manager_signals[MAYA_BACKENDS_MANAGER_BACKEND_ADDED_SIGNAL], 0, b);
#line 538 "BackendsManager.c"
}


void
maya_backends_manager_remove_backend (MayaBackendsManager* self,
                                      MayaBackend* b)
{
	GeeArrayList* _tmp0_;
#line 103 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	g_return_if_fail (self != NULL);
#line 103 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	g_return_if_fail (b != NULL);
#line 104 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_tmp0_ = self->backends;
#line 104 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	if (gee_abstract_collection_contains ((GeeAbstractCollection*) _tmp0_, b)) {
#line 555 "BackendsManager.c"
		GeeArrayList* _tmp1_;
#line 105 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		_tmp1_ = self->backends;
#line 105 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		gee_abstract_collection_remove ((GeeAbstractCollection*) _tmp1_, b);
#line 106 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
		g_signal_emit (self, maya_backends_manager_signals[MAYA_BACKENDS_MANAGER_BACKEND_REMOVED_SIGNAL], 0, b);
#line 563 "BackendsManager.c"
	}
}


static void
maya_backends_manager_class_init (MayaBackendsManagerClass * klass)
{
#line 23 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	maya_backends_manager_parent_class = g_type_class_peek_parent (klass);
#line 23 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	g_type_class_add_private (klass, sizeof (MayaBackendsManagerPrivate));
#line 23 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	G_OBJECT_CLASS (klass)->finalize = maya_backends_manager_finalize;
#line 23 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	maya_backends_manager_signals[MAYA_BACKENDS_MANAGER_BACKEND_ADDED_SIGNAL] = g_signal_new ("backend-added", MAYA_TYPE_BACKENDS_MANAGER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, MAYA_TYPE_BACKEND);
#line 23 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	maya_backends_manager_signals[MAYA_BACKENDS_MANAGER_BACKEND_REMOVED_SIGNAL] = g_signal_new ("backend-removed", MAYA_TYPE_BACKENDS_MANAGER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, MAYA_TYPE_BACKEND);
#line 581 "BackendsManager.c"
}


static void
maya_backends_manager_instance_init (MayaBackendsManager * self)
{
#line 23 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	self->priv = MAYA_BACKENDS_MANAGER_GET_PRIVATE (self);
#line 590 "BackendsManager.c"
}


static void
maya_backends_manager_finalize (GObject * obj)
{
	MayaBackendsManager * self;
#line 23 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, MAYA_TYPE_BACKENDS_MANAGER, MayaBackendsManager);
#line 35 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_g_object_unref0 (self->backends);
#line 40 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	_g_object_unref0 (self->priv->local_backend);
#line 23 "/run/build/io.elementary.calendar/core/Backends/BackendsManager.vala"
	G_OBJECT_CLASS (maya_backends_manager_parent_class)->finalize (obj);
#line 606 "BackendsManager.c"
}


GType
maya_backends_manager_get_type (void)
{
	static volatile gsize maya_backends_manager_type_id__volatile = 0;
	if (g_once_init_enter (&maya_backends_manager_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (MayaBackendsManagerClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) maya_backends_manager_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (MayaBackendsManager), 0, (GInstanceInitFunc) maya_backends_manager_instance_init, NULL };
		GType maya_backends_manager_type_id;
		maya_backends_manager_type_id = g_type_register_static (G_TYPE_OBJECT, "MayaBackendsManager", &g_define_type_info, 0);
		g_once_init_leave (&maya_backends_manager_type_id__volatile, maya_backends_manager_type_id);
	}
	return maya_backends_manager_type_id__volatile;
}



