/* phone-details.c generated by valac 0.40.11, the Vala compiler
 * generated from phone-details.vala, do not modify */

/*
 * Copyright (C) 2011 Collabora Ltd.
 * Copyright (C) 2011, 2013 Philip Withnall
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Marco Barisione <marco.barisione@collabora.co.uk>
 *       Raul Gutierrez Segales <raul.gutierrez.segales@collabora.co.uk>
 *       Philip Withnall <philip@tecnocode.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <gio/gio.h>
#include <glib/gi18n-lib.h>


#define FOLKS_TYPE_ABSTRACT_FIELD_DETAILS (folks_abstract_field_details_get_type ())
#define FOLKS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails))
#define FOLKS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))

typedef struct _FolksAbstractFieldDetails FolksAbstractFieldDetails;
typedef struct _FolksAbstractFieldDetailsClass FolksAbstractFieldDetailsClass;
typedef struct _FolksAbstractFieldDetailsPrivate FolksAbstractFieldDetailsPrivate;

#define FOLKS_TYPE_PHONE_FIELD_DETAILS (folks_phone_field_details_get_type ())
#define FOLKS_PHONE_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_PHONE_FIELD_DETAILS, FolksPhoneFieldDetails))
#define FOLKS_PHONE_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_PHONE_FIELD_DETAILS, FolksPhoneFieldDetailsClass))
#define FOLKS_IS_PHONE_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_PHONE_FIELD_DETAILS))
#define FOLKS_IS_PHONE_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_PHONE_FIELD_DETAILS))
#define FOLKS_PHONE_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_PHONE_FIELD_DETAILS, FolksPhoneFieldDetailsClass))

typedef struct _FolksPhoneFieldDetails FolksPhoneFieldDetails;
typedef struct _FolksPhoneFieldDetailsClass FolksPhoneFieldDetailsClass;
typedef struct _FolksPhoneFieldDetailsPrivate FolksPhoneFieldDetailsPrivate;
enum  {
	FOLKS_PHONE_FIELD_DETAILS_0_PROPERTY,
	FOLKS_PHONE_FIELD_DETAILS_ID_PROPERTY,
	FOLKS_PHONE_FIELD_DETAILS_NUM_PROPERTIES
};
static GParamSpec* folks_phone_field_details_properties[FOLKS_PHONE_FIELD_DETAILS_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_string_free0(var) ((var == NULL) ? NULL : (var = (g_string_free (var, TRUE), NULL)))

#define FOLKS_TYPE_PHONE_DETAILS (folks_phone_details_get_type ())
#define FOLKS_PHONE_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_PHONE_DETAILS, FolksPhoneDetails))
#define FOLKS_IS_PHONE_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_PHONE_DETAILS))
#define FOLKS_PHONE_DETAILS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_PHONE_DETAILS, FolksPhoneDetailsIface))

typedef struct _FolksPhoneDetails FolksPhoneDetails;
typedef struct _FolksPhoneDetailsIface FolksPhoneDetailsIface;
typedef struct _FolksPhoneDetailsChangePhoneNumbersData FolksPhoneDetailsChangePhoneNumbersData;

struct _FolksAbstractFieldDetails {
	GObject parent_instance;
	FolksAbstractFieldDetailsPrivate * priv;
};

struct _FolksAbstractFieldDetailsClass {
	GObjectClass parent_class;
	gboolean (*equal) (FolksAbstractFieldDetails* self, FolksAbstractFieldDetails* that);
	gboolean (*parameters_equal) (FolksAbstractFieldDetails* self, FolksAbstractFieldDetails* that);
	gboolean (*values_equal) (FolksAbstractFieldDetails* self, FolksAbstractFieldDetails* that);
	guint (*hash) (FolksAbstractFieldDetails* self);
	gconstpointer (*get_value) (FolksAbstractFieldDetails* self);
	void (*set_value) (FolksAbstractFieldDetails* self, gconstpointer value);
	const gchar* (*get_id) (FolksAbstractFieldDetails* self);
	void (*set_id) (FolksAbstractFieldDetails* self, const gchar* value);
	GeeMultiMap* (*get_parameters) (FolksAbstractFieldDetails* self);
	void (*set_parameters) (FolksAbstractFieldDetails* self, GeeMultiMap* value);
};

struct _FolksPhoneFieldDetails {
	FolksAbstractFieldDetails parent_instance;
	FolksPhoneFieldDetailsPrivate * priv;
};

struct _FolksPhoneFieldDetailsClass {
	FolksAbstractFieldDetailsClass parent_class;
};

struct _FolksPhoneFieldDetailsPrivate {
	gchar* _id;
};

typedef enum  {
	FOLKS_PROPERTY_ERROR_NOT_WRITEABLE,
	FOLKS_PROPERTY_ERROR_INVALID_VALUE,
	FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR,
	FOLKS_PROPERTY_ERROR_UNAVAILABLE
} FolksPropertyError;
#define FOLKS_PROPERTY_ERROR folks_property_error_quark ()
struct _FolksPhoneDetailsIface {
	GTypeInterface parent_iface;
	void (*change_phone_numbers) (FolksPhoneDetails* self, GeeSet* phone_numbers, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_phone_numbers_finish) (FolksPhoneDetails* self, GAsyncResult* _res_, GError** error);
	GeeSet* (*get_phone_numbers) (FolksPhoneDetails* self);
	void (*set_phone_numbers) (FolksPhoneDetails* self, GeeSet* value);
};

struct _FolksPhoneDetailsChangePhoneNumbersData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksPhoneDetails* self;
	GeeSet* phone_numbers;
	GError* _tmp0_;
	GError * _inner_error_;
};


static gpointer folks_phone_field_details_parent_class = NULL;

GType folks_abstract_field_details_get_type (void) G_GNUC_CONST;
GType folks_phone_field_details_get_type (void) G_GNUC_CONST;
#define FOLKS_PHONE_FIELD_DETAILS_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_TYPE_PHONE_FIELD_DETAILS, FolksPhoneFieldDetailsPrivate))
FolksPhoneFieldDetails* folks_phone_field_details_new (const gchar* value,
                                                       GeeMultiMap* parameters);
FolksPhoneFieldDetails* folks_phone_field_details_construct (GType object_type,
                                                             const gchar* value,
                                                             GeeMultiMap* parameters);
static gboolean folks_phone_field_details_real_equal (FolksAbstractFieldDetails* base,
                                               FolksAbstractFieldDetails* that);
gboolean folks_abstract_field_details_equal (FolksAbstractFieldDetails* self,
                                             FolksAbstractFieldDetails* that);
static gboolean folks_phone_field_details_real_values_equal (FolksAbstractFieldDetails* base,
                                                      FolksAbstractFieldDetails* that);
gchar* _folks_phone_field_details_drop_extension (const gchar* number);
gchar* folks_phone_field_details_get_normalised (FolksPhoneFieldDetails* self);
static guint folks_phone_field_details_real_hash (FolksAbstractFieldDetails* base);
guint folks_abstract_field_details_hash (FolksAbstractFieldDetails* self);
gconstpointer folks_abstract_field_details_get_value (FolksAbstractFieldDetails* self);
static gboolean _vala_char_array_contains (gchar * stack,
                                    int stack_length,
                                    gchar needle);
static void folks_phone_field_details_finalize (GObject * obj);
const gchar* folks_abstract_field_details_get_id (FolksAbstractFieldDetails* self);
static void _vala_folks_phone_field_details_get_property (GObject * object,
                                                   guint property_id,
                                                   GValue * value,
                                                   GParamSpec * pspec);
void folks_abstract_field_details_set_id (FolksAbstractFieldDetails* self,
                                          const gchar* value);
static void _vala_folks_phone_field_details_set_property (GObject * object,
                                                   guint property_id,
                                                   const GValue * value,
                                                   GParamSpec * pspec);
GQuark folks_property_error_quark (void);
GType folks_phone_details_get_type (void) G_GNUC_CONST;
static void folks_phone_details_real_change_phone_numbers_data_free (gpointer _data);
static void folks_phone_details_real_change_phone_numbers_async_ready_wrapper (GObject *source_object,
                                                                        GAsyncResult *res,
                                                                        void *user_data);
static void folks_phone_details_real_change_phone_numbers (FolksPhoneDetails* self,
                                                    GeeSet* phone_numbers,
                                                    GAsyncReadyCallback _callback_,
                                                    gpointer _user_data_);
void folks_phone_details_change_phone_numbers (FolksPhoneDetails* self,
                                               GeeSet* phone_numbers,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
void folks_phone_details_change_phone_numbers_finish (FolksPhoneDetails* self,
                                                      GAsyncResult* _res_,
                                                      GError** error);
static gboolean folks_phone_details_real_change_phone_numbers_co (FolksPhoneDetailsChangePhoneNumbersData* _data_);
GeeSet* folks_phone_details_get_phone_numbers (FolksPhoneDetails* self);
void folks_phone_details_set_phone_numbers (FolksPhoneDetails* self,
                                            GeeSet* value);

static const gchar FOLKS_PHONE_FIELD_DETAILS__extension_chars[6] = {'p', 'P', 'w', 'W', 'x', 'X'};
static const gchar FOLKS_PHONE_FIELD_DETAILS__common_delimiters[8] = {',', '.', '(', ')', '-', ' ', '\t', '/'};
static const gchar FOLKS_PHONE_FIELD_DETAILS__valid_digits[12] = {'#', '*', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};

/**
   * Create a new PhoneFieldDetails.
   *
   * @param value the value of the field, which should be a non-empty phone
   * number (no particular format is mandated)
   * @param parameters initial parameters. See
   * {@link AbstractFieldDetails.parameters}. A ``null`` value is equivalent to
   * an empty map of parameters.
   *
   * @return a new PhoneFieldDetails
   *
   * @since 0.6.0
   */
FolksPhoneFieldDetails*
folks_phone_field_details_construct (GType object_type,
                                     const gchar* value,
                                     GeeMultiMap* parameters)
{
	FolksPhoneFieldDetails * self = NULL;
#line 67 "/run/build/folks/folks/phone-details.vala"
	g_return_val_if_fail (value != NULL, NULL);
#line 70 "/run/build/folks/folks/phone-details.vala"
	if (g_strcmp0 (value, "") == 0) {
#line 72 "/run/build/folks/folks/phone-details.vala"
		g_warning ("phone-details.vala:72: Empty phone number passed to PhoneFieldDetails.");
#line 226 "phone-details.c"
	}
#line 75 "/run/build/folks/folks/phone-details.vala"
	self = (FolksPhoneFieldDetails*) g_object_new (object_type, "t_type", G_TYPE_STRING, "t_dup_func", (GBoxedCopyFunc) g_strdup, "t_destroy_func", (GDestroyNotify) g_free, "value", value, "parameters", parameters, NULL);
#line 67 "/run/build/folks/folks/phone-details.vala"
	return self;
#line 232 "phone-details.c"
}


FolksPhoneFieldDetails*
folks_phone_field_details_new (const gchar* value,
                               GeeMultiMap* parameters)
{
#line 67 "/run/build/folks/folks/phone-details.vala"
	return folks_phone_field_details_construct (FOLKS_TYPE_PHONE_FIELD_DETAILS, value, parameters);
#line 242 "phone-details.c"
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.0
   */
static gboolean
folks_phone_field_details_real_equal (FolksAbstractFieldDetails* base,
                                      FolksAbstractFieldDetails* that)
{
	FolksPhoneFieldDetails * self;
	gboolean result = FALSE;
#line 84 "/run/build/folks/folks/phone-details.vala"
	self = (FolksPhoneFieldDetails*) base;
#line 84 "/run/build/folks/folks/phone-details.vala"
	g_return_val_if_fail (that != NULL, FALSE);
#line 86 "/run/build/folks/folks/phone-details.vala"
	result = FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (folks_phone_field_details_parent_class)->equal (G_TYPE_CHECK_INSTANCE_CAST (self, FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails), that);
#line 86 "/run/build/folks/folks/phone-details.vala"
	return result;
#line 265 "phone-details.c"
}


/**
   * {@inheritDoc}
   */
static gpointer
_g_object_ref0 (gpointer self)
{
#line 94 "/run/build/folks/folks/phone-details.vala"
	return self ? g_object_ref (self) : NULL;
#line 277 "phone-details.c"
}


static gchar*
string_slice (const gchar* self,
              glong start,
              glong end)
{
	gchar* result = NULL;
	glong string_length = 0L;
	gint _tmp0_;
	gint _tmp1_;
	gboolean _tmp4_ = FALSE;
	gboolean _tmp6_ = FALSE;
	gchar* _tmp8_;
#line 1425 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1426 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = strlen (self);
#line 1426 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp1_ = _tmp0_;
#line 1426 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	string_length = (glong) _tmp1_;
#line 1427 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (start < ((glong) 0)) {
#line 303 "phone-details.c"
		glong _tmp2_;
#line 1428 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp2_ = string_length;
#line 1428 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		start = _tmp2_ + start;
#line 309 "phone-details.c"
	}
#line 1430 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (end < ((glong) 0)) {
#line 313 "phone-details.c"
		glong _tmp3_;
#line 1431 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp3_ = string_length;
#line 1431 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		end = _tmp3_ + end;
#line 319 "phone-details.c"
	}
#line 1433 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (start >= ((glong) 0)) {
#line 323 "phone-details.c"
		glong _tmp5_;
#line 1433 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp5_ = string_length;
#line 1433 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp4_ = start <= _tmp5_;
#line 329 "phone-details.c"
	} else {
#line 1433 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp4_ = FALSE;
#line 333 "phone-details.c"
	}
#line 1433 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (_tmp4_, NULL);
#line 1434 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (end >= ((glong) 0)) {
#line 339 "phone-details.c"
		glong _tmp7_;
#line 1434 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp7_ = string_length;
#line 1434 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp6_ = end <= _tmp7_;
#line 345 "phone-details.c"
	} else {
#line 1434 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp6_ = FALSE;
#line 349 "phone-details.c"
	}
#line 1434 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (_tmp6_, NULL);
#line 1435 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (start <= end, NULL);
#line 1436 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp8_ = g_strndup (((gchar*) self) + start, (gsize) (end - start));
#line 1436 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _tmp8_;
#line 1436 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 361 "phone-details.c"
}


static gboolean
folks_phone_field_details_real_values_equal (FolksAbstractFieldDetails* base,
                                             FolksAbstractFieldDetails* that)
{
	FolksPhoneFieldDetails * self;
	gboolean result = FALSE;
	FolksPhoneFieldDetails* _that_fd = NULL;
	FolksPhoneFieldDetails* _tmp0_;
	FolksPhoneFieldDetails* _tmp1_;
	FolksPhoneFieldDetails* that_fd = NULL;
	FolksPhoneFieldDetails* _tmp2_;
	FolksPhoneFieldDetails* _tmp3_;
	gchar* n1 = NULL;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* n2 = NULL;
	FolksPhoneFieldDetails* _tmp8_;
	gchar* _tmp9_;
	gchar* _tmp10_;
	gchar* _tmp11_;
	gchar* _tmp12_;
	gboolean _tmp13_ = FALSE;
	const gchar* _tmp14_;
	gint _tmp15_;
	gint _tmp16_;
	const gchar* _tmp34_;
	const gchar* _tmp35_;
#line 92 "/run/build/folks/folks/phone-details.vala"
	self = (FolksPhoneFieldDetails*) base;
#line 92 "/run/build/folks/folks/phone-details.vala"
	g_return_val_if_fail (that != NULL, FALSE);
#line 94 "/run/build/folks/folks/phone-details.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (that, FOLKS_TYPE_PHONE_FIELD_DETAILS) ? ((FolksPhoneFieldDetails*) that) : NULL);
#line 94 "/run/build/folks/folks/phone-details.vala"
	_that_fd = _tmp0_;
#line 95 "/run/build/folks/folks/phone-details.vala"
	_tmp1_ = _that_fd;
#line 95 "/run/build/folks/folks/phone-details.vala"
	if (_tmp1_ == NULL) {
#line 96 "/run/build/folks/folks/phone-details.vala"
		result = FALSE;
#line 96 "/run/build/folks/folks/phone-details.vala"
		_g_object_unref0 (_that_fd);
#line 96 "/run/build/folks/folks/phone-details.vala"
		return result;
#line 412 "phone-details.c"
	}
#line 97 "/run/build/folks/folks/phone-details.vala"
	_tmp2_ = _that_fd;
#line 97 "/run/build/folks/folks/phone-details.vala"
	_tmp3_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp2_, FOLKS_TYPE_PHONE_FIELD_DETAILS, FolksPhoneFieldDetails));
#line 97 "/run/build/folks/folks/phone-details.vala"
	that_fd = _tmp3_;
#line 99 "/run/build/folks/folks/phone-details.vala"
	_tmp4_ = folks_phone_field_details_get_normalised (self);
#line 99 "/run/build/folks/folks/phone-details.vala"
	_tmp5_ = _tmp4_;
#line 99 "/run/build/folks/folks/phone-details.vala"
	_tmp6_ = _folks_phone_field_details_drop_extension (_tmp5_);
#line 99 "/run/build/folks/folks/phone-details.vala"
	_tmp7_ = _tmp6_;
#line 99 "/run/build/folks/folks/phone-details.vala"
	_g_free0 (_tmp5_);
#line 99 "/run/build/folks/folks/phone-details.vala"
	n1 = _tmp7_;
#line 100 "/run/build/folks/folks/phone-details.vala"
	_tmp8_ = that_fd;
#line 100 "/run/build/folks/folks/phone-details.vala"
	_tmp9_ = folks_phone_field_details_get_normalised (_tmp8_);
#line 100 "/run/build/folks/folks/phone-details.vala"
	_tmp10_ = _tmp9_;
#line 100 "/run/build/folks/folks/phone-details.vala"
	_tmp11_ = _folks_phone_field_details_drop_extension (_tmp10_);
#line 100 "/run/build/folks/folks/phone-details.vala"
	_tmp12_ = _tmp11_;
#line 100 "/run/build/folks/folks/phone-details.vala"
	_g_free0 (_tmp10_);
#line 100 "/run/build/folks/folks/phone-details.vala"
	n2 = _tmp12_;
#line 103 "/run/build/folks/folks/phone-details.vala"
	_tmp14_ = n1;
#line 103 "/run/build/folks/folks/phone-details.vala"
	_tmp15_ = strlen (_tmp14_);
#line 103 "/run/build/folks/folks/phone-details.vala"
	_tmp16_ = _tmp15_;
#line 103 "/run/build/folks/folks/phone-details.vala"
	if (_tmp16_ >= 7) {
#line 454 "phone-details.c"
		const gchar* _tmp17_;
		gint _tmp18_;
		gint _tmp19_;
#line 103 "/run/build/folks/folks/phone-details.vala"
		_tmp17_ = n2;
#line 103 "/run/build/folks/folks/phone-details.vala"
		_tmp18_ = strlen (_tmp17_);
#line 103 "/run/build/folks/folks/phone-details.vala"
		_tmp19_ = _tmp18_;
#line 103 "/run/build/folks/folks/phone-details.vala"
		_tmp13_ = _tmp19_ >= 7;
#line 466 "phone-details.c"
	} else {
#line 103 "/run/build/folks/folks/phone-details.vala"
		_tmp13_ = FALSE;
#line 470 "phone-details.c"
	}
#line 103 "/run/build/folks/folks/phone-details.vala"
	if (_tmp13_) {
#line 474 "phone-details.c"
		gchar* n1_reduced = NULL;
		const gchar* _tmp20_;
		const gchar* _tmp21_;
		gint _tmp22_;
		gint _tmp23_;
		gchar* _tmp24_;
		gchar* n2_reduced = NULL;
		const gchar* _tmp25_;
		const gchar* _tmp26_;
		gint _tmp27_;
		gint _tmp28_;
		gchar* _tmp29_;
		const gchar* _tmp30_;
		const gchar* _tmp31_;
		const gchar* _tmp32_;
		const gchar* _tmp33_;
#line 105 "/run/build/folks/folks/phone-details.vala"
		_tmp20_ = n1;
#line 105 "/run/build/folks/folks/phone-details.vala"
		_tmp21_ = n1;
#line 105 "/run/build/folks/folks/phone-details.vala"
		_tmp22_ = strlen (_tmp21_);
#line 105 "/run/build/folks/folks/phone-details.vala"
		_tmp23_ = _tmp22_;
#line 105 "/run/build/folks/folks/phone-details.vala"
		_tmp24_ = string_slice (_tmp20_, (glong) -7, (glong) _tmp23_);
#line 105 "/run/build/folks/folks/phone-details.vala"
		n1_reduced = _tmp24_;
#line 106 "/run/build/folks/folks/phone-details.vala"
		_tmp25_ = n2;
#line 106 "/run/build/folks/folks/phone-details.vala"
		_tmp26_ = n2;
#line 106 "/run/build/folks/folks/phone-details.vala"
		_tmp27_ = strlen (_tmp26_);
#line 106 "/run/build/folks/folks/phone-details.vala"
		_tmp28_ = _tmp27_;
#line 106 "/run/build/folks/folks/phone-details.vala"
		_tmp29_ = string_slice (_tmp25_, (glong) -7, (glong) _tmp28_);
#line 106 "/run/build/folks/folks/phone-details.vala"
		n2_reduced = _tmp29_;
#line 108 "/run/build/folks/folks/phone-details.vala"
		_tmp30_ = n1_reduced;
#line 108 "/run/build/folks/folks/phone-details.vala"
		_tmp31_ = n2_reduced;
#line 108 "/run/build/folks/folks/phone-details.vala"
		g_debug ("phone-details.vala:108: [PhoneDetails.equal] Comparing %s with %s", _tmp30_, _tmp31_);
#line 111 "/run/build/folks/folks/phone-details.vala"
		_tmp32_ = n1_reduced;
#line 111 "/run/build/folks/folks/phone-details.vala"
		_tmp33_ = n2_reduced;
#line 111 "/run/build/folks/folks/phone-details.vala"
		result = g_strcmp0 (_tmp32_, _tmp33_) == 0;
#line 111 "/run/build/folks/folks/phone-details.vala"
		_g_free0 (n2_reduced);
#line 111 "/run/build/folks/folks/phone-details.vala"
		_g_free0 (n1_reduced);
#line 111 "/run/build/folks/folks/phone-details.vala"
		_g_free0 (n2);
#line 111 "/run/build/folks/folks/phone-details.vala"
		_g_free0 (n1);
#line 111 "/run/build/folks/folks/phone-details.vala"
		_g_object_unref0 (that_fd);
#line 111 "/run/build/folks/folks/phone-details.vala"
		_g_object_unref0 (_that_fd);
#line 111 "/run/build/folks/folks/phone-details.vala"
		return result;
#line 541 "phone-details.c"
	}
#line 114 "/run/build/folks/folks/phone-details.vala"
	_tmp34_ = n1;
#line 114 "/run/build/folks/folks/phone-details.vala"
	_tmp35_ = n2;
#line 114 "/run/build/folks/folks/phone-details.vala"
	result = g_strcmp0 (_tmp34_, _tmp35_) == 0;
#line 114 "/run/build/folks/folks/phone-details.vala"
	_g_free0 (n2);
#line 114 "/run/build/folks/folks/phone-details.vala"
	_g_free0 (n1);
#line 114 "/run/build/folks/folks/phone-details.vala"
	_g_object_unref0 (that_fd);
#line 114 "/run/build/folks/folks/phone-details.vala"
	_g_object_unref0 (_that_fd);
#line 114 "/run/build/folks/folks/phone-details.vala"
	return result;
#line 559 "phone-details.c"
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.0
   */
static guint
folks_phone_field_details_real_hash (FolksAbstractFieldDetails* base)
{
	FolksPhoneFieldDetails * self;
	guint result = 0U;
#line 122 "/run/build/folks/folks/phone-details.vala"
	self = (FolksPhoneFieldDetails*) base;
#line 124 "/run/build/folks/folks/phone-details.vala"
	result = FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (folks_phone_field_details_parent_class)->hash (G_TYPE_CHECK_INSTANCE_CAST (self, FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails));
#line 124 "/run/build/folks/folks/phone-details.vala"
	return result;
#line 579 "phone-details.c"
}


/**
   * Return this object's normalised phone number.
   *
   * Typical normalisations:
   *
   *  - ``1-800-123-4567`` → ``18001234567``
   *  - ``+1-800-123-4567`` → ``+18001234567``
   *  - ``+1-800-123-4567P123`` → ``+18001234567P123``
   *
   * @return the normalised form of ``number``
   *
   * @since 0.6.0
   */
static gchar
string_get (const gchar* self,
            glong index)
{
	gchar result = '\0';
	gchar _tmp0_;
#line 1180 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, '\0');
#line 1181 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = ((gchar*) self)[index];
#line 1181 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _tmp0_;
#line 1181 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 610 "phone-details.c"
}


static gboolean
_vala_char_array_contains (gchar * stack,
                           int stack_length,
                           gchar needle)
{
	int i;
#line 149 "/run/build/folks/folks/phone-details.vala"
	for (i = 0; i < stack_length; i++) {
#line 149 "/run/build/folks/folks/phone-details.vala"
		if (needle == stack[i]) {
#line 149 "/run/build/folks/folks/phone-details.vala"
			return TRUE;
#line 626 "phone-details.c"
		}
	}
#line 149 "/run/build/folks/folks/phone-details.vala"
	return FALSE;
#line 631 "phone-details.c"
}


gchar*
folks_phone_field_details_get_normalised (FolksPhoneFieldDetails* self)
{
	gchar* result = NULL;
	GString* builder = NULL;
	GString* _tmp0_;
	GString* _tmp31_;
	const gchar* _tmp32_;
	gchar* _tmp33_;
#line 140 "/run/build/folks/folks/phone-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 142 "/run/build/folks/folks/phone-details.vala"
	_tmp0_ = g_string_new ("");
#line 142 "/run/build/folks/folks/phone-details.vala"
	builder = _tmp0_;
#line 650 "phone-details.c"
	{
		guint i = 0U;
#line 145 "/run/build/folks/folks/phone-details.vala"
		i = (guint) 0;
#line 655 "phone-details.c"
		{
			gboolean _tmp1_ = FALSE;
#line 145 "/run/build/folks/folks/phone-details.vala"
			_tmp1_ = TRUE;
#line 145 "/run/build/folks/folks/phone-details.vala"
			while (TRUE) {
#line 662 "phone-details.c"
				guint _tmp3_;
				gconstpointer _tmp4_;
				const gchar* _tmp5_;
				gint _tmp6_;
				gint _tmp7_;
				gchar digit = '\0';
				gconstpointer _tmp8_;
				const gchar* _tmp9_;
				guint _tmp10_;
				gchar _tmp11_;
				GString* _tmp29_;
				gchar _tmp30_;
#line 145 "/run/build/folks/folks/phone-details.vala"
				if (!_tmp1_) {
#line 677 "phone-details.c"
					guint _tmp2_;
#line 145 "/run/build/folks/folks/phone-details.vala"
					_tmp2_ = i;
#line 145 "/run/build/folks/folks/phone-details.vala"
					i = _tmp2_ + 1;
#line 683 "phone-details.c"
				}
#line 145 "/run/build/folks/folks/phone-details.vala"
				_tmp1_ = FALSE;
#line 145 "/run/build/folks/folks/phone-details.vala"
				_tmp3_ = i;
#line 145 "/run/build/folks/folks/phone-details.vala"
				_tmp4_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) self);
#line 145 "/run/build/folks/folks/phone-details.vala"
				_tmp5_ = _tmp4_;
#line 145 "/run/build/folks/folks/phone-details.vala"
				_tmp6_ = strlen ((const gchar*) _tmp5_);
#line 145 "/run/build/folks/folks/phone-details.vala"
				_tmp7_ = _tmp6_;
#line 145 "/run/build/folks/folks/phone-details.vala"
				if (!(_tmp3_ < ((guint) _tmp7_))) {
#line 145 "/run/build/folks/folks/phone-details.vala"
					break;
#line 701 "phone-details.c"
				}
#line 147 "/run/build/folks/folks/phone-details.vala"
				_tmp8_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) self);
#line 147 "/run/build/folks/folks/phone-details.vala"
				_tmp9_ = _tmp8_;
#line 147 "/run/build/folks/folks/phone-details.vala"
				_tmp10_ = i;
#line 147 "/run/build/folks/folks/phone-details.vala"
				digit = string_get ((const gchar*) _tmp9_, (glong) _tmp10_);
#line 149 "/run/build/folks/folks/phone-details.vala"
				_tmp11_ = digit;
#line 149 "/run/build/folks/folks/phone-details.vala"
				if (_vala_char_array_contains (FOLKS_PHONE_FIELD_DETAILS__extension_chars, G_N_ELEMENTS (FOLKS_PHONE_FIELD_DETAILS__extension_chars), _tmp11_)) {
#line 715 "phone-details.c"
					gchar _tmp12_;
#line 153 "/run/build/folks/folks/phone-details.vala"
					_tmp12_ = digit;
#line 153 "/run/build/folks/folks/phone-details.vala"
					digit = g_ascii_toupper (_tmp12_);
#line 721 "phone-details.c"
				} else {
					gchar _tmp13_;
#line 155 "/run/build/folks/folks/phone-details.vala"
					_tmp13_ = digit;
#line 155 "/run/build/folks/folks/phone-details.vala"
					if (_tmp13_ == '+') {
#line 728 "phone-details.c"
						gboolean _tmp14_ = FALSE;
						gboolean _tmp15_ = FALSE;
						GString* _tmp16_;
						const gchar* _tmp17_;
#line 159 "/run/build/folks/folks/phone-details.vala"
						_tmp16_ = builder;
#line 159 "/run/build/folks/folks/phone-details.vala"
						_tmp17_ = _tmp16_->str;
#line 159 "/run/build/folks/folks/phone-details.vala"
						if (g_strcmp0 (_tmp17_, "") != 0) {
#line 739 "phone-details.c"
							GString* _tmp18_;
							const gchar* _tmp19_;
#line 160 "/run/build/folks/folks/phone-details.vala"
							_tmp18_ = builder;
#line 160 "/run/build/folks/folks/phone-details.vala"
							_tmp19_ = _tmp18_->str;
#line 160 "/run/build/folks/folks/phone-details.vala"
							_tmp15_ = g_strcmp0 (_tmp19_, "*31#") != 0;
#line 748 "phone-details.c"
						} else {
#line 159 "/run/build/folks/folks/phone-details.vala"
							_tmp15_ = FALSE;
#line 752 "phone-details.c"
						}
#line 159 "/run/build/folks/folks/phone-details.vala"
						if (_tmp15_) {
#line 756 "phone-details.c"
							GString* _tmp20_;
							const gchar* _tmp21_;
#line 161 "/run/build/folks/folks/phone-details.vala"
							_tmp20_ = builder;
#line 161 "/run/build/folks/folks/phone-details.vala"
							_tmp21_ = _tmp20_->str;
#line 161 "/run/build/folks/folks/phone-details.vala"
							_tmp14_ = g_strcmp0 (_tmp21_, "#31#") != 0;
#line 765 "phone-details.c"
						} else {
#line 159 "/run/build/folks/folks/phone-details.vala"
							_tmp14_ = FALSE;
#line 769 "phone-details.c"
						}
#line 159 "/run/build/folks/folks/phone-details.vala"
						if (_tmp14_) {
#line 773 "phone-details.c"
							gconstpointer _tmp22_;
							const gchar* _tmp23_;
#line 164 "/run/build/folks/folks/phone-details.vala"
							_tmp22_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) self);
#line 164 "/run/build/folks/folks/phone-details.vala"
							_tmp23_ = _tmp22_;
#line 164 "/run/build/folks/folks/phone-details.vala"
							g_debug ("phone-details.vala:164: [PhoneDetails.get_normalised] Wrong '+' in %s", (const gchar*) _tmp23_);
#line 166 "/run/build/folks/folks/phone-details.vala"
							continue;
#line 784 "phone-details.c"
						}
					} else {
						gchar _tmp24_;
#line 169 "/run/build/folks/folks/phone-details.vala"
						_tmp24_ = digit;
#line 169 "/run/build/folks/folks/phone-details.vala"
						if (_vala_char_array_contains (FOLKS_PHONE_FIELD_DETAILS__common_delimiters, G_N_ELEMENTS (FOLKS_PHONE_FIELD_DETAILS__common_delimiters), _tmp24_)) {
#line 172 "/run/build/folks/folks/phone-details.vala"
							continue;
#line 794 "phone-details.c"
						} else {
							gchar _tmp25_;
#line 174 "/run/build/folks/folks/phone-details.vala"
							_tmp25_ = digit;
#line 174 "/run/build/folks/folks/phone-details.vala"
							if (_vala_char_array_contains (FOLKS_PHONE_FIELD_DETAILS__valid_digits, G_N_ELEMENTS (FOLKS_PHONE_FIELD_DETAILS__valid_digits), _tmp25_)) {
#line 801 "phone-details.c"
							} else {
								gchar _tmp26_;
								gconstpointer _tmp27_;
								const gchar* _tmp28_;
#line 181 "/run/build/folks/folks/phone-details.vala"
								_tmp26_ = digit;
#line 181 "/run/build/folks/folks/phone-details.vala"
								_tmp27_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) self);
#line 181 "/run/build/folks/folks/phone-details.vala"
								_tmp28_ = _tmp27_;
#line 181 "/run/build/folks/folks/phone-details.vala"
								g_debug ("phone-details.vala:181: [PhoneDetails.get_normalised] Unknown characte" \
"r '%c' in '%s'", (gint) _tmp26_, (const gchar*) _tmp28_);
#line 814 "phone-details.c"
							}
						}
					}
				}
#line 185 "/run/build/folks/folks/phone-details.vala"
				_tmp29_ = builder;
#line 185 "/run/build/folks/folks/phone-details.vala"
				_tmp30_ = digit;
#line 185 "/run/build/folks/folks/phone-details.vala"
				g_string_append_c (_tmp29_, _tmp30_);
#line 825 "phone-details.c"
			}
		}
	}
#line 188 "/run/build/folks/folks/phone-details.vala"
	_tmp31_ = builder;
#line 188 "/run/build/folks/folks/phone-details.vala"
	_tmp32_ = _tmp31_->str;
#line 188 "/run/build/folks/folks/phone-details.vala"
	_tmp33_ = g_strdup (_tmp32_);
#line 188 "/run/build/folks/folks/phone-details.vala"
	result = _tmp33_;
#line 188 "/run/build/folks/folks/phone-details.vala"
	_g_string_free0 (builder);
#line 188 "/run/build/folks/folks/phone-details.vala"
	return result;
#line 841 "phone-details.c"
}


/**
   * Returns the given number without its extension (if any).
   *
   * @param number the phone number to process
   * @return the number without its extension; if the number didn't have an
   * extension in the first place, the number is returned unmodified
   *
   * @since 0.6.0
   */
gchar*
_folks_phone_field_details_drop_extension (const gchar* number)
{
	gchar* result = NULL;
	GString* builder = NULL;
	GString* _tmp0_;
	GString* _tmp10_;
	const gchar* _tmp11_;
	gchar* _tmp12_;
#line 200 "/run/build/folks/folks/phone-details.vala"
	g_return_val_if_fail (number != NULL, NULL);
#line 203 "/run/build/folks/folks/phone-details.vala"
	_tmp0_ = g_string_new ("");
#line 203 "/run/build/folks/folks/phone-details.vala"
	builder = _tmp0_;
#line 869 "phone-details.c"
	{
		guint i = 0U;
#line 205 "/run/build/folks/folks/phone-details.vala"
		i = (guint) 0;
#line 874 "phone-details.c"
		{
			gboolean _tmp1_ = FALSE;
#line 205 "/run/build/folks/folks/phone-details.vala"
			_tmp1_ = TRUE;
#line 205 "/run/build/folks/folks/phone-details.vala"
			while (TRUE) {
#line 881 "phone-details.c"
				guint _tmp3_;
				gint _tmp4_;
				gint _tmp5_;
				gchar digit = '\0';
				guint _tmp6_;
				gchar _tmp7_;
				GString* _tmp8_;
				gchar _tmp9_;
#line 205 "/run/build/folks/folks/phone-details.vala"
				if (!_tmp1_) {
#line 892 "phone-details.c"
					guint _tmp2_;
#line 205 "/run/build/folks/folks/phone-details.vala"
					_tmp2_ = i;
#line 205 "/run/build/folks/folks/phone-details.vala"
					i = _tmp2_ + 1;
#line 898 "phone-details.c"
				}
#line 205 "/run/build/folks/folks/phone-details.vala"
				_tmp1_ = FALSE;
#line 205 "/run/build/folks/folks/phone-details.vala"
				_tmp3_ = i;
#line 205 "/run/build/folks/folks/phone-details.vala"
				_tmp4_ = strlen (number);
#line 205 "/run/build/folks/folks/phone-details.vala"
				_tmp5_ = _tmp4_;
#line 205 "/run/build/folks/folks/phone-details.vala"
				if (!(_tmp3_ < ((guint) _tmp5_))) {
#line 205 "/run/build/folks/folks/phone-details.vala"
					break;
#line 912 "phone-details.c"
				}
#line 207 "/run/build/folks/folks/phone-details.vala"
				_tmp6_ = i;
#line 207 "/run/build/folks/folks/phone-details.vala"
				digit = string_get (number, (glong) _tmp6_);
#line 208 "/run/build/folks/folks/phone-details.vala"
				_tmp7_ = digit;
#line 208 "/run/build/folks/folks/phone-details.vala"
				if (_vala_char_array_contains (FOLKS_PHONE_FIELD_DETAILS__extension_chars, G_N_ELEMENTS (FOLKS_PHONE_FIELD_DETAILS__extension_chars), _tmp7_)) {
#line 212 "/run/build/folks/folks/phone-details.vala"
					break;
#line 924 "phone-details.c"
				}
#line 214 "/run/build/folks/folks/phone-details.vala"
				_tmp8_ = builder;
#line 214 "/run/build/folks/folks/phone-details.vala"
				_tmp9_ = digit;
#line 214 "/run/build/folks/folks/phone-details.vala"
				g_string_append_c (_tmp8_, _tmp9_);
#line 932 "phone-details.c"
			}
		}
	}
#line 217 "/run/build/folks/folks/phone-details.vala"
	_tmp10_ = builder;
#line 217 "/run/build/folks/folks/phone-details.vala"
	_tmp11_ = _tmp10_->str;
#line 217 "/run/build/folks/folks/phone-details.vala"
	_tmp12_ = g_strdup (_tmp11_);
#line 217 "/run/build/folks/folks/phone-details.vala"
	result = _tmp12_;
#line 217 "/run/build/folks/folks/phone-details.vala"
	_g_string_free0 (builder);
#line 217 "/run/build/folks/folks/phone-details.vala"
	return result;
#line 948 "phone-details.c"
}


static const gchar*
folks_phone_field_details_real_get_id (FolksAbstractFieldDetails* base)
{
	const gchar* result;
	FolksPhoneFieldDetails* self;
	const gchar* _tmp0_;
#line 50 "/run/build/folks/folks/phone-details.vala"
	self = (FolksPhoneFieldDetails*) base;
#line 50 "/run/build/folks/folks/phone-details.vala"
	_tmp0_ = self->priv->_id;
#line 50 "/run/build/folks/folks/phone-details.vala"
	result = _tmp0_;
#line 50 "/run/build/folks/folks/phone-details.vala"
	return result;
#line 966 "phone-details.c"
}


static void
folks_phone_field_details_real_set_id (FolksAbstractFieldDetails* base,
                                       const gchar* value)
{
	FolksPhoneFieldDetails* self;
	const gchar* _tmp0_ = NULL;
	gchar* _tmp1_;
#line 51 "/run/build/folks/folks/phone-details.vala"
	self = (FolksPhoneFieldDetails*) base;
#line 51 "/run/build/folks/folks/phone-details.vala"
	if (value != NULL) {
#line 51 "/run/build/folks/folks/phone-details.vala"
		_tmp0_ = value;
#line 983 "phone-details.c"
	} else {
#line 51 "/run/build/folks/folks/phone-details.vala"
		_tmp0_ = "";
#line 987 "phone-details.c"
	}
#line 51 "/run/build/folks/folks/phone-details.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 51 "/run/build/folks/folks/phone-details.vala"
	_g_free0 (self->priv->_id);
#line 51 "/run/build/folks/folks/phone-details.vala"
	self->priv->_id = _tmp1_;
#line 51 "/run/build/folks/folks/phone-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_phone_field_details_properties[FOLKS_PHONE_FIELD_DETAILS_ID_PROPERTY]);
#line 997 "phone-details.c"
}


static void
folks_phone_field_details_class_init (FolksPhoneFieldDetailsClass * klass)
{
#line 36 "/run/build/folks/folks/phone-details.vala"
	folks_phone_field_details_parent_class = g_type_class_peek_parent (klass);
#line 36 "/run/build/folks/folks/phone-details.vala"
	g_type_class_add_private (klass, sizeof (FolksPhoneFieldDetailsPrivate));
#line 36 "/run/build/folks/folks/phone-details.vala"
	((FolksAbstractFieldDetailsClass *) klass)->equal = (gboolean (*) (FolksAbstractFieldDetails *, FolksAbstractFieldDetails*)) folks_phone_field_details_real_equal;
#line 36 "/run/build/folks/folks/phone-details.vala"
	((FolksAbstractFieldDetailsClass *) klass)->values_equal = (gboolean (*) (FolksAbstractFieldDetails *, FolksAbstractFieldDetails*)) folks_phone_field_details_real_values_equal;
#line 36 "/run/build/folks/folks/phone-details.vala"
	((FolksAbstractFieldDetailsClass *) klass)->hash = (guint (*) (FolksAbstractFieldDetails *)) folks_phone_field_details_real_hash;
#line 36 "/run/build/folks/folks/phone-details.vala"
	FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (klass)->get_id = folks_phone_field_details_real_get_id;
#line 36 "/run/build/folks/folks/phone-details.vala"
	FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (klass)->set_id = folks_phone_field_details_real_set_id;
#line 36 "/run/build/folks/folks/phone-details.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_folks_phone_field_details_get_property;
#line 36 "/run/build/folks/folks/phone-details.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_folks_phone_field_details_set_property;
#line 36 "/run/build/folks/folks/phone-details.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_phone_field_details_finalize;
#line 1024 "phone-details.c"
	/**
	   * {@inheritDoc}
	   */
#line 36 "/run/build/folks/folks/phone-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_PHONE_FIELD_DETAILS_ID_PROPERTY, folks_phone_field_details_properties[FOLKS_PHONE_FIELD_DETAILS_ID_PROPERTY] = g_param_spec_string ("id", "id", "id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 1030 "phone-details.c"
}


static void
folks_phone_field_details_instance_init (FolksPhoneFieldDetails * self)
{
#line 36 "/run/build/folks/folks/phone-details.vala"
	self->priv = FOLKS_PHONE_FIELD_DETAILS_GET_PRIVATE (self);
#line 1039 "phone-details.c"
}


static void
folks_phone_field_details_finalize (GObject * obj)
{
	FolksPhoneFieldDetails * self;
#line 36 "/run/build/folks/folks/phone-details.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_PHONE_FIELD_DETAILS, FolksPhoneFieldDetails);
#line 44 "/run/build/folks/folks/phone-details.vala"
	_g_free0 (self->priv->_id);
#line 36 "/run/build/folks/folks/phone-details.vala"
	G_OBJECT_CLASS (folks_phone_field_details_parent_class)->finalize (obj);
#line 1053 "phone-details.c"
}


/**
 * Object representing a phone number that can have some parameters associated
 * with it.
 *
 * See {@link Folks.AbstractFieldDetails} for details on common parameter names
 * and values.
 *
 * @since 0.6.0
 */
GType
folks_phone_field_details_get_type (void)
{
	static volatile gsize folks_phone_field_details_type_id__volatile = 0;
	if (g_once_init_enter (&folks_phone_field_details_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksPhoneFieldDetailsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_phone_field_details_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksPhoneFieldDetails), 0, (GInstanceInitFunc) folks_phone_field_details_instance_init, NULL };
		GType folks_phone_field_details_type_id;
		folks_phone_field_details_type_id = g_type_register_static (FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, "FolksPhoneFieldDetails", &g_define_type_info, 0);
		g_once_init_leave (&folks_phone_field_details_type_id__volatile, folks_phone_field_details_type_id);
	}
	return folks_phone_field_details_type_id__volatile;
}


static void
_vala_folks_phone_field_details_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec)
{
	FolksPhoneFieldDetails * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_PHONE_FIELD_DETAILS, FolksPhoneFieldDetails);
#line 36 "/run/build/folks/folks/phone-details.vala"
	switch (property_id) {
#line 36 "/run/build/folks/folks/phone-details.vala"
		case FOLKS_PHONE_FIELD_DETAILS_ID_PROPERTY:
#line 36 "/run/build/folks/folks/phone-details.vala"
		g_value_set_string (value, folks_abstract_field_details_get_id ((FolksAbstractFieldDetails*) self));
#line 36 "/run/build/folks/folks/phone-details.vala"
		break;
#line 1096 "phone-details.c"
		default:
#line 36 "/run/build/folks/folks/phone-details.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 36 "/run/build/folks/folks/phone-details.vala"
		break;
#line 1102 "phone-details.c"
	}
}


static void
_vala_folks_phone_field_details_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec)
{
	FolksPhoneFieldDetails * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_PHONE_FIELD_DETAILS, FolksPhoneFieldDetails);
#line 36 "/run/build/folks/folks/phone-details.vala"
	switch (property_id) {
#line 36 "/run/build/folks/folks/phone-details.vala"
		case FOLKS_PHONE_FIELD_DETAILS_ID_PROPERTY:
#line 36 "/run/build/folks/folks/phone-details.vala"
		folks_abstract_field_details_set_id ((FolksAbstractFieldDetails*) self, g_value_get_string (value));
#line 36 "/run/build/folks/folks/phone-details.vala"
		break;
#line 1123 "phone-details.c"
		default:
#line 36 "/run/build/folks/folks/phone-details.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 36 "/run/build/folks/folks/phone-details.vala"
		break;
#line 1129 "phone-details.c"
	}
}


static void
folks_phone_details_real_change_phone_numbers_data_free (gpointer _data)
{
	FolksPhoneDetailsChangePhoneNumbersData* _data_;
	_data_ = _data;
#line 227 "/run/build/folks/folks/phone-details.vala"
	_g_object_unref0 (_data_->phone_numbers);
#line 227 "/run/build/folks/folks/phone-details.vala"
	_g_object_unref0 (_data_->self);
#line 227 "/run/build/folks/folks/phone-details.vala"
	g_slice_free (FolksPhoneDetailsChangePhoneNumbersData, _data_);
#line 1145 "phone-details.c"
}


static void
folks_phone_details_real_change_phone_numbers_async_ready_wrapper (GObject *source_object,
                                                                   GAsyncResult *res,
                                                                   void *user_data)
{
	FolksPhoneDetailsChangePhoneNumbersData* _task_data_;
#line 227 "/run/build/folks/folks/phone-details.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 227 "/run/build/folks/folks/phone-details.vala"
	if (_task_data_->_callback_ != NULL) {
#line 227 "/run/build/folks/folks/phone-details.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 1161 "phone-details.c"
	}
#line 227 "/run/build/folks/folks/phone-details.vala"
	_task_data_->_task_complete_ = TRUE;
#line 1165 "phone-details.c"
}


static void
folks_phone_details_real_change_phone_numbers (FolksPhoneDetails* self,
                                               GeeSet* phone_numbers,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_)
{
	FolksPhoneDetailsChangePhoneNumbersData* _data_;
	FolksPhoneDetails* _tmp0_;
	GeeSet* _tmp1_;
#line 227 "/run/build/folks/folks/phone-details.vala"
	_data_ = g_slice_new0 (FolksPhoneDetailsChangePhoneNumbersData);
#line 227 "/run/build/folks/folks/phone-details.vala"
	_data_->_callback_ = _callback_;
#line 227 "/run/build/folks/folks/phone-details.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_phone_details_real_change_phone_numbers_async_ready_wrapper, _user_data_);
#line 227 "/run/build/folks/folks/phone-details.vala"
	if (_callback_ == NULL) {
#line 227 "/run/build/folks/folks/phone-details.vala"
		_data_->_task_complete_ = TRUE;
#line 1188 "phone-details.c"
	}
#line 227 "/run/build/folks/folks/phone-details.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_phone_details_real_change_phone_numbers_data_free);
#line 227 "/run/build/folks/folks/phone-details.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 227 "/run/build/folks/folks/phone-details.vala"
	_data_->self = _tmp0_;
#line 227 "/run/build/folks/folks/phone-details.vala"
	_tmp1_ = _g_object_ref0 (phone_numbers);
#line 227 "/run/build/folks/folks/phone-details.vala"
	_g_object_unref0 (_data_->phone_numbers);
#line 227 "/run/build/folks/folks/phone-details.vala"
	_data_->phone_numbers = _tmp1_;
#line 227 "/run/build/folks/folks/phone-details.vala"
	folks_phone_details_real_change_phone_numbers_co (_data_);
#line 1204 "phone-details.c"
}


static void
folks_phone_details_real_change_phone_numbers_finish (FolksPhoneDetails* self,
                                                      GAsyncResult* _res_,
                                                      GError** error)
{
	FolksPhoneDetailsChangePhoneNumbersData* _data_;
#line 227 "/run/build/folks/folks/phone-details.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 227 "/run/build/folks/folks/phone-details.vala"
	if (NULL == _data_) {
#line 227 "/run/build/folks/folks/phone-details.vala"
		return;
#line 1220 "phone-details.c"
	}
}


/**
   * Change the contact's phone numbers.
   *
   * It's preferred to call this rather than setting
   * {@link PhoneDetails.phone_numbers} directly, as this method gives error
   * notification and will only return once the phone numbers have been written
   * to the relevant backing store (or the operation's failed).
   *
   * @param phone_numbers the set of phone numbers
   * @throws PropertyError if setting the phone numbers failed
   * @since 0.6.2
   */
static gboolean
folks_phone_details_real_change_phone_numbers_co (FolksPhoneDetailsChangePhoneNumbersData* _data_)
{
#line 250 "/run/build/folks/folks/phone-details.vala"
	switch (_data_->_state_) {
#line 250 "/run/build/folks/folks/phone-details.vala"
		case 0:
#line 1244 "phone-details.c"
		goto _state_0;
		default:
#line 250 "/run/build/folks/folks/phone-details.vala"
		g_assert_not_reached ();
#line 1249 "phone-details.c"
	}
	_state_0:
#line 254 "/run/build/folks/folks/phone-details.vala"
	_data_->_tmp0_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_NOT_WRITEABLE, _ ("Phone numbers are not writeable on this contact."));
#line 254 "/run/build/folks/folks/phone-details.vala"
	_data_->_inner_error_ = _data_->_tmp0_;
#line 254 "/run/build/folks/folks/phone-details.vala"
	if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 254 "/run/build/folks/folks/phone-details.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 254 "/run/build/folks/folks/phone-details.vala"
		g_object_unref (_data_->_async_result);
#line 254 "/run/build/folks/folks/phone-details.vala"
		return FALSE;
#line 1264 "phone-details.c"
	} else {
#line 254 "/run/build/folks/folks/phone-details.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 254 "/run/build/folks/folks/phone-details.vala"
		g_clear_error (&_data_->_inner_error_);
#line 254 "/run/build/folks/folks/phone-details.vala"
		g_object_unref (_data_->_async_result);
#line 254 "/run/build/folks/folks/phone-details.vala"
		return FALSE;
#line 1274 "phone-details.c"
	}
#line 250 "/run/build/folks/folks/phone-details.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 250 "/run/build/folks/folks/phone-details.vala"
	if (_data_->_state_ != 0) {
#line 250 "/run/build/folks/folks/phone-details.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 250 "/run/build/folks/folks/phone-details.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1284 "phone-details.c"
		}
	}
#line 250 "/run/build/folks/folks/phone-details.vala"
	g_object_unref (_data_->_async_result);
#line 250 "/run/build/folks/folks/phone-details.vala"
	return FALSE;
#line 1291 "phone-details.c"
}


void
folks_phone_details_change_phone_numbers (FolksPhoneDetails* self,
                                          GeeSet* phone_numbers,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_)
{
#line 227 "/run/build/folks/folks/phone-details.vala"
	FOLKS_PHONE_DETAILS_GET_INTERFACE (self)->change_phone_numbers (self, phone_numbers, _callback_, _user_data_);
#line 1303 "phone-details.c"
}


void
folks_phone_details_change_phone_numbers_finish (FolksPhoneDetails* self,
                                                 GAsyncResult* _res_,
                                                 GError** error)
{
#line 227 "/run/build/folks/folks/phone-details.vala"
	FOLKS_PHONE_DETAILS_GET_INTERFACE (self)->change_phone_numbers_finish (self, _res_, error);
#line 1314 "phone-details.c"
}


GeeSet*
folks_phone_details_get_phone_numbers (FolksPhoneDetails* self)
{
#line 236 "/run/build/folks/folks/phone-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 236 "/run/build/folks/folks/phone-details.vala"
	return FOLKS_PHONE_DETAILS_GET_INTERFACE (self)->get_phone_numbers (self);
#line 1325 "phone-details.c"
}


void
folks_phone_details_set_phone_numbers (FolksPhoneDetails* self,
                                       GeeSet* value)
{
#line 236 "/run/build/folks/folks/phone-details.vala"
	g_return_if_fail (self != NULL);
#line 236 "/run/build/folks/folks/phone-details.vala"
	FOLKS_PHONE_DETAILS_GET_INTERFACE (self)->set_phone_numbers (self, value);
#line 1337 "phone-details.c"
}


static void
folks_phone_details_default_init (FolksPhoneDetailsIface * iface)
{
	/**
	   * The phone numbers of the contact.
	   *
	   * A list of phone numbers associated to the contact.
	   *
	   * @since 0.6.0
	   */
#line 227 "/run/build/folks/folks/phone-details.vala"
	g_object_interface_install_property (iface, g_param_spec_object ("phone-numbers", "phone-numbers", "phone-numbers", GEE_TYPE_SET, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 227 "/run/build/folks/folks/phone-details.vala"
	iface->change_phone_numbers = folks_phone_details_real_change_phone_numbers;
#line 227 "/run/build/folks/folks/phone-details.vala"
	iface->change_phone_numbers_finish = folks_phone_details_real_change_phone_numbers_finish;
#line 1357 "phone-details.c"
}


/**
 * Interface for classes that can provide a phone number, such as
 * {@link Persona} and {@link Individual}.
 *
 * @since 0.3.5
 */
GType
folks_phone_details_get_type (void)
{
	static volatile gsize folks_phone_details_type_id__volatile = 0;
	if (g_once_init_enter (&folks_phone_details_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksPhoneDetailsIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_phone_details_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
		GType folks_phone_details_type_id;
		folks_phone_details_type_id = g_type_register_static (G_TYPE_INTERFACE, "FolksPhoneDetails", &g_define_type_info, 0);
		g_type_interface_add_prerequisite (folks_phone_details_type_id, G_TYPE_OBJECT);
		g_once_init_leave (&folks_phone_details_type_id__volatile, folks_phone_details_type_id);
	}
	return folks_phone_details_type_id__volatile;
}



