/* Task.c generated by valac 0.40.11, the Vala compiler
 * generated from Task.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gobject/gvaluecollector.h>


#define OBJECTS_TYPE_TASK (objects_task_get_type ())
#define OBJECTS_TASK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TASK, ObjectsTask))
#define OBJECTS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TASK, ObjectsTaskClass))
#define OBJECTS_IS_TASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TASK))
#define OBJECTS_IS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TASK))
#define OBJECTS_TASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TASK, ObjectsTaskClass))

typedef struct _ObjectsTask ObjectsTask;
typedef struct _ObjectsTaskClass ObjectsTaskClass;
typedef struct _ObjectsTaskPrivate ObjectsTaskPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _ObjectsParamSpecTask ObjectsParamSpecTask;

struct _ObjectsTask {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsTaskPrivate * priv;
	gint id;
	gint checked;
	gint project_id;
	gint list_id;
	gint task_order;
	gint is_inbox;
	gint has_reminder;
	gint sidebar_width;
	gint was_notified;
	gchar* content;
	gchar* note;
	gchar* when_date_utc;
	gchar* reminder_time;
	gchar* labels;
	gchar* checklist;
};

struct _ObjectsTaskClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsTask *self);
};

struct _ObjectsParamSpecTask {
	GParamSpec parent_instance;
};


static gpointer objects_task_parent_class = NULL;

gpointer objects_task_ref (gpointer instance);
void objects_task_unref (gpointer instance);
GParamSpec* objects_param_spec_task (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void objects_value_set_task (GValue* value,
                             gpointer v_object);
void objects_value_take_task (GValue* value,
                              gpointer v_object);
gpointer objects_value_get_task (const GValue* value);
GType objects_task_get_type (void) G_GNUC_CONST;
ObjectsTask* objects_task_new (gint id,
                               gint checked,
                               gint project_id,
                               gint list_id,
                               gint task_order,
                               gint is_inbox,
                               gint has_reminder,
                               gint sidebar_width,
                               gint was_notified,
                               const gchar* content,
                               const gchar* note,
                               const gchar* when_date_utc,
                               const gchar* reminder_time,
                               const gchar* labels,
                               const gchar* checklist);
ObjectsTask* objects_task_construct (GType object_type,
                                     gint id,
                                     gint checked,
                                     gint project_id,
                                     gint list_id,
                                     gint task_order,
                                     gint is_inbox,
                                     gint has_reminder,
                                     gint sidebar_width,
                                     gint was_notified,
                                     const gchar* content,
                                     const gchar* note,
                                     const gchar* when_date_utc,
                                     const gchar* reminder_time,
                                     const gchar* labels,
                                     const gchar* checklist);
static void objects_task_finalize (ObjectsTask * obj);


ObjectsTask*
objects_task_construct (GType object_type,
                        gint id,
                        gint checked,
                        gint project_id,
                        gint list_id,
                        gint task_order,
                        gint is_inbox,
                        gint has_reminder,
                        gint sidebar_width,
                        gint was_notified,
                        const gchar* content,
                        const gchar* note,
                        const gchar* when_date_utc,
                        const gchar* reminder_time,
                        const gchar* labels,
                        const gchar* checklist)
{
	ObjectsTask* self = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
#line 39 "/run/build/planner/src/Objects/Task.vala"
	g_return_val_if_fail (content != NULL, NULL);
#line 39 "/run/build/planner/src/Objects/Task.vala"
	g_return_val_if_fail (note != NULL, NULL);
#line 39 "/run/build/planner/src/Objects/Task.vala"
	g_return_val_if_fail (when_date_utc != NULL, NULL);
#line 39 "/run/build/planner/src/Objects/Task.vala"
	g_return_val_if_fail (reminder_time != NULL, NULL);
#line 39 "/run/build/planner/src/Objects/Task.vala"
	g_return_val_if_fail (labels != NULL, NULL);
#line 39 "/run/build/planner/src/Objects/Task.vala"
	g_return_val_if_fail (checklist != NULL, NULL);
#line 39 "/run/build/planner/src/Objects/Task.vala"
	self = (ObjectsTask*) g_type_create_instance (object_type);
#line 54 "/run/build/planner/src/Objects/Task.vala"
	self->id = id;
#line 55 "/run/build/planner/src/Objects/Task.vala"
	self->checked = checked;
#line 56 "/run/build/planner/src/Objects/Task.vala"
	self->project_id = project_id;
#line 57 "/run/build/planner/src/Objects/Task.vala"
	self->list_id = list_id;
#line 58 "/run/build/planner/src/Objects/Task.vala"
	self->task_order = task_order;
#line 59 "/run/build/planner/src/Objects/Task.vala"
	self->is_inbox = is_inbox;
#line 60 "/run/build/planner/src/Objects/Task.vala"
	self->has_reminder = has_reminder;
#line 61 "/run/build/planner/src/Objects/Task.vala"
	self->sidebar_width = sidebar_width;
#line 62 "/run/build/planner/src/Objects/Task.vala"
	self->was_notified = was_notified;
#line 63 "/run/build/planner/src/Objects/Task.vala"
	_tmp0_ = g_strdup (content);
#line 63 "/run/build/planner/src/Objects/Task.vala"
	_g_free0 (self->content);
#line 63 "/run/build/planner/src/Objects/Task.vala"
	self->content = _tmp0_;
#line 64 "/run/build/planner/src/Objects/Task.vala"
	_tmp1_ = g_strdup (note);
#line 64 "/run/build/planner/src/Objects/Task.vala"
	_g_free0 (self->note);
#line 64 "/run/build/planner/src/Objects/Task.vala"
	self->note = _tmp1_;
#line 65 "/run/build/planner/src/Objects/Task.vala"
	_tmp2_ = g_strdup (when_date_utc);
#line 65 "/run/build/planner/src/Objects/Task.vala"
	_g_free0 (self->when_date_utc);
#line 65 "/run/build/planner/src/Objects/Task.vala"
	self->when_date_utc = _tmp2_;
#line 66 "/run/build/planner/src/Objects/Task.vala"
	_tmp3_ = g_strdup (reminder_time);
#line 66 "/run/build/planner/src/Objects/Task.vala"
	_g_free0 (self->reminder_time);
#line 66 "/run/build/planner/src/Objects/Task.vala"
	self->reminder_time = _tmp3_;
#line 67 "/run/build/planner/src/Objects/Task.vala"
	_tmp4_ = g_strdup (labels);
#line 67 "/run/build/planner/src/Objects/Task.vala"
	_g_free0 (self->labels);
#line 67 "/run/build/planner/src/Objects/Task.vala"
	self->labels = _tmp4_;
#line 68 "/run/build/planner/src/Objects/Task.vala"
	_tmp5_ = g_strdup (checklist);
#line 68 "/run/build/planner/src/Objects/Task.vala"
	_g_free0 (self->checklist);
#line 68 "/run/build/planner/src/Objects/Task.vala"
	self->checklist = _tmp5_;
#line 39 "/run/build/planner/src/Objects/Task.vala"
	return self;
#line 222 "Task.c"
}


ObjectsTask*
objects_task_new (gint id,
                  gint checked,
                  gint project_id,
                  gint list_id,
                  gint task_order,
                  gint is_inbox,
                  gint has_reminder,
                  gint sidebar_width,
                  gint was_notified,
                  const gchar* content,
                  const gchar* note,
                  const gchar* when_date_utc,
                  const gchar* reminder_time,
                  const gchar* labels,
                  const gchar* checklist)
{
#line 39 "/run/build/planner/src/Objects/Task.vala"
	return objects_task_construct (OBJECTS_TYPE_TASK, id, checked, project_id, list_id, task_order, is_inbox, has_reminder, sidebar_width, was_notified, content, note, when_date_utc, reminder_time, labels, checklist);
#line 245 "Task.c"
}


static void
objects_value_task_init (GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Task.vala"
	value->data[0].v_pointer = NULL;
#line 254 "Task.c"
}


static void
objects_value_task_free_value (GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Task.vala"
	if (value->data[0].v_pointer) {
#line 22 "/run/build/planner/src/Objects/Task.vala"
		objects_task_unref (value->data[0].v_pointer);
#line 265 "Task.c"
	}
}


static void
objects_value_task_copy_value (const GValue* src_value,
                               GValue* dest_value)
{
#line 22 "/run/build/planner/src/Objects/Task.vala"
	if (src_value->data[0].v_pointer) {
#line 22 "/run/build/planner/src/Objects/Task.vala"
		dest_value->data[0].v_pointer = objects_task_ref (src_value->data[0].v_pointer);
#line 278 "Task.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Task.vala"
		dest_value->data[0].v_pointer = NULL;
#line 282 "Task.c"
	}
}


static gpointer
objects_value_task_peek_pointer (const GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Task.vala"
	return value->data[0].v_pointer;
#line 292 "Task.c"
}


static gchar*
objects_value_task_collect_value (GValue* value,
                                  guint n_collect_values,
                                  GTypeCValue* collect_values,
                                  guint collect_flags)
{
#line 22 "/run/build/planner/src/Objects/Task.vala"
	if (collect_values[0].v_pointer) {
#line 304 "Task.c"
		ObjectsTask * object;
		object = collect_values[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Task.vala"
		if (object->parent_instance.g_class == NULL) {
#line 22 "/run/build/planner/src/Objects/Task.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 311 "Task.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 22 "/run/build/planner/src/Objects/Task.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 315 "Task.c"
		}
#line 22 "/run/build/planner/src/Objects/Task.vala"
		value->data[0].v_pointer = objects_task_ref (object);
#line 319 "Task.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Task.vala"
		value->data[0].v_pointer = NULL;
#line 323 "Task.c"
	}
#line 22 "/run/build/planner/src/Objects/Task.vala"
	return NULL;
#line 327 "Task.c"
}


static gchar*
objects_value_task_lcopy_value (const GValue* value,
                                guint n_collect_values,
                                GTypeCValue* collect_values,
                                guint collect_flags)
{
	ObjectsTask ** object_p;
	object_p = collect_values[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Task.vala"
	if (!object_p) {
#line 22 "/run/build/planner/src/Objects/Task.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 343 "Task.c"
	}
#line 22 "/run/build/planner/src/Objects/Task.vala"
	if (!value->data[0].v_pointer) {
#line 22 "/run/build/planner/src/Objects/Task.vala"
		*object_p = NULL;
#line 349 "Task.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 22 "/run/build/planner/src/Objects/Task.vala"
		*object_p = value->data[0].v_pointer;
#line 353 "Task.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Task.vala"
		*object_p = objects_task_ref (value->data[0].v_pointer);
#line 357 "Task.c"
	}
#line 22 "/run/build/planner/src/Objects/Task.vala"
	return NULL;
#line 361 "Task.c"
}


GParamSpec*
objects_param_spec_task (const gchar* name,
                         const gchar* nick,
                         const gchar* blurb,
                         GType object_type,
                         GParamFlags flags)
{
	ObjectsParamSpecTask* spec;
#line 22 "/run/build/planner/src/Objects/Task.vala"
	g_return_val_if_fail (g_type_is_a (object_type, OBJECTS_TYPE_TASK), NULL);
#line 22 "/run/build/planner/src/Objects/Task.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 22 "/run/build/planner/src/Objects/Task.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 22 "/run/build/planner/src/Objects/Task.vala"
	return G_PARAM_SPEC (spec);
#line 381 "Task.c"
}


gpointer
objects_value_get_task (const GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Task.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, OBJECTS_TYPE_TASK), NULL);
#line 22 "/run/build/planner/src/Objects/Task.vala"
	return value->data[0].v_pointer;
#line 392 "Task.c"
}


void
objects_value_set_task (GValue* value,
                        gpointer v_object)
{
	ObjectsTask * old;
#line 22 "/run/build/planner/src/Objects/Task.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, OBJECTS_TYPE_TASK));
#line 22 "/run/build/planner/src/Objects/Task.vala"
	old = value->data[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Task.vala"
	if (v_object) {
#line 22 "/run/build/planner/src/Objects/Task.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, OBJECTS_TYPE_TASK));
#line 22 "/run/build/planner/src/Objects/Task.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "/run/build/planner/src/Objects/Task.vala"
		value->data[0].v_pointer = v_object;
#line 22 "/run/build/planner/src/Objects/Task.vala"
		objects_task_ref (value->data[0].v_pointer);
#line 415 "Task.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Task.vala"
		value->data[0].v_pointer = NULL;
#line 419 "Task.c"
	}
#line 22 "/run/build/planner/src/Objects/Task.vala"
	if (old) {
#line 22 "/run/build/planner/src/Objects/Task.vala"
		objects_task_unref (old);
#line 425 "Task.c"
	}
}


void
objects_value_take_task (GValue* value,
                         gpointer v_object)
{
	ObjectsTask * old;
#line 22 "/run/build/planner/src/Objects/Task.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, OBJECTS_TYPE_TASK));
#line 22 "/run/build/planner/src/Objects/Task.vala"
	old = value->data[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Task.vala"
	if (v_object) {
#line 22 "/run/build/planner/src/Objects/Task.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, OBJECTS_TYPE_TASK));
#line 22 "/run/build/planner/src/Objects/Task.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "/run/build/planner/src/Objects/Task.vala"
		value->data[0].v_pointer = v_object;
#line 447 "Task.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Task.vala"
		value->data[0].v_pointer = NULL;
#line 451 "Task.c"
	}
#line 22 "/run/build/planner/src/Objects/Task.vala"
	if (old) {
#line 22 "/run/build/planner/src/Objects/Task.vala"
		objects_task_unref (old);
#line 457 "Task.c"
	}
}


static void
objects_task_class_init (ObjectsTaskClass * klass)
{
#line 22 "/run/build/planner/src/Objects/Task.vala"
	objects_task_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Objects/Task.vala"
	((ObjectsTaskClass *) klass)->finalize = objects_task_finalize;
#line 469 "Task.c"
}


static void
objects_task_instance_init (ObjectsTask * self)
{
#line 22 "/run/build/planner/src/Objects/Task.vala"
	self->ref_count = 1;
#line 478 "Task.c"
}


static void
objects_task_finalize (ObjectsTask * obj)
{
	ObjectsTask * self;
#line 22 "/run/build/planner/src/Objects/Task.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, OBJECTS_TYPE_TASK, ObjectsTask);
#line 22 "/run/build/planner/src/Objects/Task.vala"
	g_signal_handlers_destroy (self);
#line 32 "/run/build/planner/src/Objects/Task.vala"
	_g_free0 (self->content);
#line 33 "/run/build/planner/src/Objects/Task.vala"
	_g_free0 (self->note);
#line 34 "/run/build/planner/src/Objects/Task.vala"
	_g_free0 (self->when_date_utc);
#line 35 "/run/build/planner/src/Objects/Task.vala"
	_g_free0 (self->reminder_time);
#line 36 "/run/build/planner/src/Objects/Task.vala"
	_g_free0 (self->labels);
#line 37 "/run/build/planner/src/Objects/Task.vala"
	_g_free0 (self->checklist);
#line 502 "Task.c"
}


GType
objects_task_get_type (void)
{
	static volatile gsize objects_task_type_id__volatile = 0;
	if (g_once_init_enter (&objects_task_type_id__volatile)) {
		static const GTypeValueTable g_define_type_value_table = { objects_value_task_init, objects_value_task_free_value, objects_value_task_copy_value, objects_value_task_peek_pointer, "p", objects_value_task_collect_value, "p", objects_value_task_lcopy_value };
		static const GTypeInfo g_define_type_info = { sizeof (ObjectsTaskClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) objects_task_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ObjectsTask), 0, (GInstanceInitFunc) objects_task_instance_init, &g_define_type_value_table };
		static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
		GType objects_task_type_id;
		objects_task_type_id = g_type_register_fundamental (g_type_fundamental_next (), "ObjectsTask", &g_define_type_info, &g_define_type_fundamental_info, 0);
		g_once_init_leave (&objects_task_type_id__volatile, objects_task_type_id);
	}
	return objects_task_type_id__volatile;
}


gpointer
objects_task_ref (gpointer instance)
{
	ObjectsTask * self;
	self = instance;
#line 22 "/run/build/planner/src/Objects/Task.vala"
	g_atomic_int_inc (&self->ref_count);
#line 22 "/run/build/planner/src/Objects/Task.vala"
	return instance;
#line 531 "Task.c"
}


void
objects_task_unref (gpointer instance)
{
	ObjectsTask * self;
	self = instance;
#line 22 "/run/build/planner/src/Objects/Task.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 22 "/run/build/planner/src/Objects/Task.vala"
		OBJECTS_TASK_GET_CLASS (self)->finalize (self);
#line 22 "/run/build/planner/src/Objects/Task.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 546 "Task.c"
	}
}



