/* command-debug.c generated by valac 0.40.11, the Vala compiler
 * generated from command-debug.vala, do not modify */

/*
 * Copyright (C) 2011 Philip Withnall
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Philip Withnall <philip@tecnocode.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <folks/folks.h>


#define FOLKS_INSPECT_TYPE_COMMAND (folks_inspect_command_get_type ())
#define FOLKS_INSPECT_COMMAND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_INSPECT_TYPE_COMMAND, FolksInspectCommand))
#define FOLKS_INSPECT_COMMAND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_INSPECT_TYPE_COMMAND, FolksInspectCommandClass))
#define FOLKS_INSPECT_IS_COMMAND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_INSPECT_TYPE_COMMAND))
#define FOLKS_INSPECT_IS_COMMAND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_INSPECT_TYPE_COMMAND))
#define FOLKS_INSPECT_COMMAND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_INSPECT_TYPE_COMMAND, FolksInspectCommandClass))

typedef struct _FolksInspectCommand FolksInspectCommand;
typedef struct _FolksInspectCommandClass FolksInspectCommandClass;
typedef struct _FolksInspectCommandPrivate FolksInspectCommandPrivate;

#define FOLKS_INSPECT_TYPE_CLIENT (folks_inspect_client_get_type ())
#define FOLKS_INSPECT_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_INSPECT_TYPE_CLIENT, FolksInspectClient))
#define FOLKS_INSPECT_CLIENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_INSPECT_TYPE_CLIENT, FolksInspectClientClass))
#define FOLKS_INSPECT_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_INSPECT_TYPE_CLIENT))
#define FOLKS_INSPECT_IS_CLIENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_INSPECT_TYPE_CLIENT))
#define FOLKS_INSPECT_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_INSPECT_TYPE_CLIENT, FolksInspectClientClass))

typedef struct _FolksInspectClient FolksInspectClient;
typedef struct _FolksInspectClientClass FolksInspectClientClass;

#define FOLKS_INSPECT_COMMANDS_TYPE_DEBUG (folks_inspect_commands_debug_get_type ())
#define FOLKS_INSPECT_COMMANDS_DEBUG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_INSPECT_COMMANDS_TYPE_DEBUG, FolksInspectCommandsDebug))
#define FOLKS_INSPECT_COMMANDS_DEBUG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_INSPECT_COMMANDS_TYPE_DEBUG, FolksInspectCommandsDebugClass))
#define FOLKS_INSPECT_COMMANDS_IS_DEBUG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_INSPECT_COMMANDS_TYPE_DEBUG))
#define FOLKS_INSPECT_COMMANDS_IS_DEBUG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_INSPECT_COMMANDS_TYPE_DEBUG))
#define FOLKS_INSPECT_COMMANDS_DEBUG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_INSPECT_COMMANDS_TYPE_DEBUG, FolksInspectCommandsDebugClass))

typedef struct _FolksInspectCommandsDebug FolksInspectCommandsDebug;
typedef struct _FolksInspectCommandsDebugClass FolksInspectCommandsDebugClass;
typedef struct _FolksInspectCommandsDebugPrivate FolksInspectCommandsDebugPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _folks_inspect_command_unref0(var) ((var == NULL) ? NULL : (var = (folks_inspect_command_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _FolksInspectCommandsDebugRunData FolksInspectCommandsDebugRunData;

struct _FolksInspectCommand {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FolksInspectCommandPrivate * priv;
	FolksInspectClient* client;
};

struct _FolksInspectCommandClass {
	GTypeClass parent_class;
	void (*finalize) (FolksInspectCommand *self);
	void (*run) (FolksInspectCommand* self, const gchar* command_string, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*run_finish) (FolksInspectCommand* self, GAsyncResult* _res_);
	gchar** (*complete_subcommand) (FolksInspectCommand* self, const gchar* subcommand, int* result_length1);
	const gchar* (*get_name) (FolksInspectCommand* self);
	const gchar* (*get_description) (FolksInspectCommand* self);
	const gchar* (*get_help) (FolksInspectCommand* self);
};

struct _FolksInspectCommandsDebug {
	FolksInspectCommand parent_instance;
	FolksInspectCommandsDebugPrivate * priv;
};

struct _FolksInspectCommandsDebugClass {
	FolksInspectCommandClass parent_class;
};

struct _FolksInspectCommandsDebugRunData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksInspectCommandsDebug* self;
	gchar* command_string;
	gint result;
	FolksDebug* debug;
	FolksDebug* _tmp0_;
};


static gpointer folks_inspect_commands_debug_parent_class = NULL;

gpointer folks_inspect_command_ref (gpointer instance);
void folks_inspect_command_unref (gpointer instance);
GParamSpec* folks_inspect_param_spec_command (const gchar* name,
                                              const gchar* nick,
                                              const gchar* blurb,
                                              GType object_type,
                                              GParamFlags flags);
void folks_inspect_value_set_command (GValue* value,
                                      gpointer v_object);
void folks_inspect_value_take_command (GValue* value,
                                       gpointer v_object);
gpointer folks_inspect_value_get_command (const GValue* value);
GType folks_inspect_command_get_type (void) G_GNUC_CONST;
GType folks_inspect_client_get_type (void) G_GNUC_CONST;
GType folks_inspect_commands_debug_get_type (void) G_GNUC_CONST;
FolksInspectCommandsDebug* folks_inspect_commands_debug_new (FolksInspectClient* client);
FolksInspectCommandsDebug* folks_inspect_commands_debug_construct (GType object_type,
                                                                   FolksInspectClient* client);
FolksInspectCommand* folks_inspect_command_construct (GType object_type,
                                                      FolksInspectClient* client);
static void folks_inspect_commands_debug_real_run_data_free (gpointer _data);
static void folks_inspect_commands_debug_real_run_async_ready_wrapper (GObject *source_object,
                                                                GAsyncResult *res,
                                                                void *user_data);
static void folks_inspect_commands_debug_real_run (FolksInspectCommand* base,
                                            const gchar* command_string,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
static gboolean folks_inspect_commands_debug_real_run_co (FolksInspectCommandsDebugRunData* _data_);


FolksInspectCommandsDebug*
folks_inspect_commands_debug_construct (GType object_type,
                                        FolksInspectClient* client)
{
	FolksInspectCommandsDebug* self = NULL;
#line 44 "/run/build/folks/tools/inspect/command-debug.vala"
	g_return_val_if_fail (client != NULL, NULL);
#line 46 "/run/build/folks/tools/inspect/command-debug.vala"
	self = (FolksInspectCommandsDebug*) folks_inspect_command_construct (object_type, client);
#line 44 "/run/build/folks/tools/inspect/command-debug.vala"
	return self;
#line 156 "command-debug.c"
}


FolksInspectCommandsDebug*
folks_inspect_commands_debug_new (FolksInspectClient* client)
{
#line 44 "/run/build/folks/tools/inspect/command-debug.vala"
	return folks_inspect_commands_debug_construct (FOLKS_INSPECT_COMMANDS_TYPE_DEBUG, client);
#line 165 "command-debug.c"
}


static void
folks_inspect_commands_debug_real_run_data_free (gpointer _data)
{
	FolksInspectCommandsDebugRunData* _data_;
	_data_ = _data;
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	_g_free0 (_data_->command_string);
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	_folks_inspect_command_unref0 (_data_->self);
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	g_slice_free (FolksInspectCommandsDebugRunData, _data_);
#line 180 "command-debug.c"
}


static void
folks_inspect_commands_debug_real_run_async_ready_wrapper (GObject *source_object,
                                                           GAsyncResult *res,
                                                           void *user_data)
{
	FolksInspectCommandsDebugRunData* _task_data_;
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	if (_task_data_->_callback_ != NULL) {
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 196 "command-debug.c"
	}
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	_task_data_->_task_complete_ = TRUE;
#line 200 "command-debug.c"
}


static gpointer
_folks_inspect_command_ref0 (gpointer self)
{
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	return self ? folks_inspect_command_ref (self) : NULL;
#line 209 "command-debug.c"
}


static void
folks_inspect_commands_debug_real_run (FolksInspectCommand* base,
                                       const gchar* command_string,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_)
{
	FolksInspectCommandsDebug * self;
	FolksInspectCommandsDebugRunData* _data_;
	FolksInspectCommandsDebug* _tmp0_;
	gchar* _tmp1_;
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	self = (FolksInspectCommandsDebug*) base;
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	_data_ = g_slice_new0 (FolksInspectCommandsDebugRunData);
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	_data_->_callback_ = _callback_;
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	_data_->_async_result = g_task_new (NULL, NULL, folks_inspect_commands_debug_real_run_async_ready_wrapper, _user_data_);
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	if (_callback_ == NULL) {
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
		_data_->_task_complete_ = TRUE;
#line 235 "command-debug.c"
	}
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_inspect_commands_debug_real_run_data_free);
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	_tmp0_ = _folks_inspect_command_ref0 (self);
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	_data_->self = _tmp0_;
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	_tmp1_ = g_strdup (command_string);
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	_g_free0 (_data_->command_string);
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	_data_->command_string = _tmp1_;
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	folks_inspect_commands_debug_real_run_co (_data_);
#line 251 "command-debug.c"
}


static gint
folks_inspect_commands_debug_real_run_finish (FolksInspectCommand* base,
                                              GAsyncResult* _res_)
{
	gint result;
	FolksInspectCommandsDebugRunData* _data_;
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	result = _data_->result;
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	return result;
#line 267 "command-debug.c"
}


static gboolean
folks_inspect_commands_debug_real_run_co (FolksInspectCommandsDebugRunData* _data_)
{
#line 49 "/run/build/folks/tools/inspect/command-debug.vala"
	switch (_data_->_state_) {
#line 49 "/run/build/folks/tools/inspect/command-debug.vala"
		case 0:
#line 278 "command-debug.c"
		goto _state_0;
		default:
#line 49 "/run/build/folks/tools/inspect/command-debug.vala"
		g_assert_not_reached ();
#line 283 "command-debug.c"
	}
	_state_0:
#line 51 "/run/build/folks/tools/inspect/command-debug.vala"
	_data_->_tmp0_ = folks_debug_dup ();
#line 51 "/run/build/folks/tools/inspect/command-debug.vala"
	_data_->debug = _data_->_tmp0_;
#line 52 "/run/build/folks/tools/inspect/command-debug.vala"
	folks_debug_emit_print_status (_data_->debug);
#line 53 "/run/build/folks/tools/inspect/command-debug.vala"
	_data_->result = 0;
#line 53 "/run/build/folks/tools/inspect/command-debug.vala"
	_g_object_unref0 (_data_->debug);
#line 53 "/run/build/folks/tools/inspect/command-debug.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 53 "/run/build/folks/tools/inspect/command-debug.vala"
	if (_data_->_state_ != 0) {
#line 53 "/run/build/folks/tools/inspect/command-debug.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 53 "/run/build/folks/tools/inspect/command-debug.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 304 "command-debug.c"
		}
	}
#line 53 "/run/build/folks/tools/inspect/command-debug.vala"
	g_object_unref (_data_->_async_result);
#line 53 "/run/build/folks/tools/inspect/command-debug.vala"
	return FALSE;
#line 311 "command-debug.c"
}


static const gchar*
folks_inspect_commands_debug_real_get_name (FolksInspectCommand* base)
{
	const gchar* result;
	FolksInspectCommandsDebug* self;
#line 28 "/run/build/folks/tools/inspect/command-debug.vala"
	self = (FolksInspectCommandsDebug*) base;
#line 28 "/run/build/folks/tools/inspect/command-debug.vala"
	result = "debug";
#line 28 "/run/build/folks/tools/inspect/command-debug.vala"
	return result;
#line 326 "command-debug.c"
}


static const gchar*
folks_inspect_commands_debug_real_get_description (FolksInspectCommand* base)
{
	const gchar* result;
	FolksInspectCommandsDebug* self;
#line 33 "/run/build/folks/tools/inspect/command-debug.vala"
	self = (FolksInspectCommandsDebug*) base;
#line 33 "/run/build/folks/tools/inspect/command-debug.vala"
	result = "Print debugging output from libfolks.";
#line 33 "/run/build/folks/tools/inspect/command-debug.vala"
	return result;
#line 341 "command-debug.c"
}


static const gchar*
folks_inspect_commands_debug_real_get_help (FolksInspectCommand* base)
{
	const gchar* result;
	FolksInspectCommandsDebug* self;
#line 38 "/run/build/folks/tools/inspect/command-debug.vala"
	self = (FolksInspectCommandsDebug*) base;
#line 40 "/run/build/folks/tools/inspect/command-debug.vala"
	result = "debug    Print status information from libfolks.";
#line 40 "/run/build/folks/tools/inspect/command-debug.vala"
	return result;
#line 356 "command-debug.c"
}


static void
folks_inspect_commands_debug_class_init (FolksInspectCommandsDebugClass * klass)
{
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	folks_inspect_commands_debug_parent_class = g_type_class_peek_parent (klass);
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	((FolksInspectCommandClass *) klass)->run = (void (*) (FolksInspectCommand *, const gchar*, GAsyncReadyCallback, gpointer)) folks_inspect_commands_debug_real_run;
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	((FolksInspectCommandClass *) klass)->run_finish = (gint (*) (FolksInspectCommand *, GAsyncResult*)) folks_inspect_commands_debug_real_run_finish;
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	FOLKS_INSPECT_COMMAND_CLASS (klass)->get_name = folks_inspect_commands_debug_real_get_name;
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	FOLKS_INSPECT_COMMAND_CLASS (klass)->get_description = folks_inspect_commands_debug_real_get_description;
#line 24 "/run/build/folks/tools/inspect/command-debug.vala"
	FOLKS_INSPECT_COMMAND_CLASS (klass)->get_help = folks_inspect_commands_debug_real_get_help;
#line 375 "command-debug.c"
}


static void
folks_inspect_commands_debug_instance_init (FolksInspectCommandsDebug * self)
{
}


GType
folks_inspect_commands_debug_get_type (void)
{
	static volatile gsize folks_inspect_commands_debug_type_id__volatile = 0;
	if (g_once_init_enter (&folks_inspect_commands_debug_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksInspectCommandsDebugClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_inspect_commands_debug_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksInspectCommandsDebug), 0, (GInstanceInitFunc) folks_inspect_commands_debug_instance_init, NULL };
		GType folks_inspect_commands_debug_type_id;
		folks_inspect_commands_debug_type_id = g_type_register_static (FOLKS_INSPECT_TYPE_COMMAND, "FolksInspectCommandsDebug", &g_define_type_info, 0);
		g_once_init_leave (&folks_inspect_commands_debug_type_id__volatile, folks_inspect_commands_debug_type_id);
	}
	return folks_inspect_commands_debug_type_id__volatile;
}



