/* WhenButton.c generated by valac 0.40.11, the Vala compiler
 * generated from WhenButton.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>
#include <granite.h>


#define WIDGETS_TYPE_WHEN_BUTTON (widgets_when_button_get_type ())
#define WIDGETS_WHEN_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButton))
#define WIDGETS_WHEN_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButtonClass))
#define WIDGETS_IS_WHEN_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_WHEN_BUTTON))
#define WIDGETS_IS_WHEN_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_WHEN_BUTTON))
#define WIDGETS_WHEN_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButtonClass))

typedef struct _WidgetsWhenButton WidgetsWhenButton;
typedef struct _WidgetsWhenButtonClass WidgetsWhenButtonClass;
typedef struct _WidgetsWhenButtonPrivate WidgetsWhenButtonPrivate;

#define WIDGETS_POPOVERS_TYPE_WHEN_POPOVER (widgets_popovers_when_popover_get_type ())
#define WIDGETS_POPOVERS_WHEN_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_POPOVERS_TYPE_WHEN_POPOVER, WidgetsPopoversWhenPopover))
#define WIDGETS_POPOVERS_WHEN_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_POPOVERS_TYPE_WHEN_POPOVER, WidgetsPopoversWhenPopoverClass))
#define WIDGETS_POPOVERS_IS_WHEN_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_POPOVERS_TYPE_WHEN_POPOVER))
#define WIDGETS_POPOVERS_IS_WHEN_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_POPOVERS_TYPE_WHEN_POPOVER))
#define WIDGETS_POPOVERS_WHEN_POPOVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_POPOVERS_TYPE_WHEN_POPOVER, WidgetsPopoversWhenPopoverClass))

typedef struct _WidgetsPopoversWhenPopover WidgetsPopoversWhenPopover;
typedef struct _WidgetsPopoversWhenPopoverClass WidgetsPopoversWhenPopoverClass;
enum  {
	WIDGETS_WHEN_BUTTON_0_PROPERTY,
	WIDGETS_WHEN_BUTTON_NUM_PROPERTIES
};
static GParamSpec* widgets_when_button_properties[WIDGETS_WHEN_BUTTON_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))
typedef struct _WidgetsPopoversWhenPopoverPrivate WidgetsPopoversWhenPopoverPrivate;

#define WIDGETS_TYPE_TIME_PICKER (widgets_time_picker_get_type ())
#define WIDGETS_TIME_PICKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TIME_PICKER, WidgetsTimePicker))
#define WIDGETS_TIME_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TIME_PICKER, WidgetsTimePickerClass))
#define WIDGETS_IS_TIME_PICKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TIME_PICKER))
#define WIDGETS_IS_TIME_PICKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TIME_PICKER))
#define WIDGETS_TIME_PICKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TIME_PICKER, WidgetsTimePickerClass))

typedef struct _WidgetsTimePicker WidgetsTimePicker;
typedef struct _WidgetsTimePickerClass WidgetsTimePickerClass;
#define _g_free0(var) (var = (g_free (var), NULL))

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
enum  {
	WIDGETS_WHEN_BUTTON_ON_SIGNAL_SELECTED_SIGNAL,
	WIDGETS_WHEN_BUTTON_NUM_SIGNALS
};
static guint widgets_when_button_signals[WIDGETS_WHEN_BUTTON_NUM_SIGNALS] = {0};

struct _WidgetsWhenButton {
	GtkToggleButton parent_instance;
	WidgetsWhenButtonPrivate * priv;
	gboolean has_when;
	gboolean has_reminder;
	GDateTime* reminder_datetime;
	GDateTime* when_datetime;
};

struct _WidgetsWhenButtonClass {
	GtkToggleButtonClass parent_class;
};

struct _WidgetsWhenButtonPrivate {
	WidgetsPopoversWhenPopover* when_popover;
	GtkRevealer* reminder_revealer;
	GtkLabel* when_label;
	GtkLabel* reminder_label;
};

struct _WidgetsPopoversWhenPopover {
	GtkPopover parent_instance;
	WidgetsPopoversWhenPopoverPrivate * priv;
	GtkButton* remove_button;
	GtkSwitch* reminder_switch;
	WidgetsTimePicker* reminder_timepicker;
};

struct _WidgetsPopoversWhenPopoverClass {
	GtkPopoverClass parent_class;
};


static gpointer widgets_when_button_parent_class = NULL;
extern Utils* application_utils;

GType widgets_when_button_get_type (void) G_GNUC_CONST;
GType widgets_popovers_when_popover_get_type (void) G_GNUC_CONST;
#define WIDGETS_WHEN_BUTTON_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButtonPrivate))
#define WIDGETS_WHEN_BUTTON_when_text _ ("When")
WidgetsWhenButton* widgets_when_button_new (void);
WidgetsWhenButton* widgets_when_button_construct (GType object_type);
void widgets_when_button_clear (WidgetsWhenButton* self);
void widgets_when_button_set_date (WidgetsWhenButton* self,
                                   GDateTime* date,
                                   gboolean _has_reminder,
                                   GDateTime* _reminder_datetime);
GType widgets_time_picker_get_type (void) G_GNUC_CONST;
void widgets_time_picker_set_time (WidgetsTimePicker* self,
                                   GDateTime* value);
GType utils_get_type (void) G_GNUC_CONST;
gboolean utils_is_today (Utils* self,
                         GDateTime* date_1);
gboolean utils_is_tomorrow (Utils* self,
                            GDateTime* date_1);
gchar* utils_get_default_date_format_from_date (Utils* self,
                                                GDateTime* date);
static GObject * widgets_when_button_constructor (GType type,
                                           guint n_construct_properties,
                                           GObjectConstructParam * construct_properties);
WidgetsPopoversWhenPopover* widgets_popovers_when_popover_new (GtkWidget* relative);
WidgetsPopoversWhenPopover* widgets_popovers_when_popover_construct (GType object_type,
                                                                     GtkWidget* relative);
static void _widgets_when_button___lambda36_ (WidgetsWhenButton* self);
static void __widgets_when_button___lambda36__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                                  gpointer self);
static void _widgets_when_button___lambda37_ (WidgetsWhenButton* self);
static void __widgets_when_button___lambda37__gtk_popover_closed (GtkPopover* _sender,
                                                           gpointer self);
static void _widgets_when_button___lambda38_ (WidgetsWhenButton* self);
static void __widgets_when_button___lambda38__widgets_popovers_when_popover_on_selected_remove (WidgetsPopoversWhenPopover* _sender,
                                                                                         gpointer self);
static void _widgets_when_button___lambda39_ (WidgetsWhenButton* self,
                                       GDateTime* date,
                                       gboolean _has_reminder,
                                       GDateTime* _reminder_datetime);
static void __widgets_when_button___lambda39__widgets_popovers_when_popover_on_selected_date (WidgetsPopoversWhenPopover* _sender,
                                                                                       GDateTime* duedate,
                                                                                       gboolean has_reminder,
                                                                                       GDateTime* reminder_datetime,
                                                                                       gpointer self);
static void widgets_when_button_finalize (GObject * obj);


WidgetsWhenButton*
widgets_when_button_construct (GType object_type)
{
	WidgetsWhenButton * self = NULL;
#line 38 "/run/build/planner/src/Widgets/WhenButton.vala"
	self = (WidgetsWhenButton*) g_object_new (object_type, "valign", GTK_ALIGN_CENTER, NULL);
#line 37 "/run/build/planner/src/Widgets/WhenButton.vala"
	return self;
#line 183 "WhenButton.c"
}


WidgetsWhenButton*
widgets_when_button_new (void)
{
#line 37 "/run/build/planner/src/Widgets/WhenButton.vala"
	return widgets_when_button_construct (WIDGETS_TYPE_WHEN_BUTTON);
#line 192 "WhenButton.c"
}


void
widgets_when_button_clear (WidgetsWhenButton* self)
{
	GtkLabel* _tmp0_;
	GtkRevealer* _tmp1_;
#line 96 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_return_if_fail (self != NULL);
#line 97 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp0_ = self->priv->when_label;
#line 97 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_label_set_label (_tmp0_, WIDGETS_WHEN_BUTTON_when_text);
#line 98 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp1_ = self->priv->reminder_revealer;
#line 98 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_revealer_set_reveal_child (_tmp1_, FALSE);
#line 100 "/run/build/planner/src/Widgets/WhenButton.vala"
	self->has_when = FALSE;
#line 101 "/run/build/planner/src/Widgets/WhenButton.vala"
	self->has_reminder = FALSE;
#line 215 "WhenButton.c"
}


static gpointer
_g_date_time_ref0 (gpointer self)
{
#line 113 "/run/build/planner/src/Widgets/WhenButton.vala"
	return self ? g_date_time_ref (self) : NULL;
#line 224 "WhenButton.c"
}


void
widgets_when_button_set_date (WidgetsWhenButton* self,
                              GDateTime* date,
                              gboolean _has_reminder,
                              GDateTime* _reminder_datetime)
{
	GtkRevealer* _tmp0_;
	WidgetsPopoversWhenPopover* _tmp1_;
	GtkSwitch* _tmp2_;
	WidgetsPopoversWhenPopover* _tmp3_;
	WidgetsTimePicker* _tmp4_;
	gchar* time_format = NULL;
	gchar* _tmp5_;
	GtkLabel* _tmp6_;
	const gchar* _tmp7_;
	gchar* _tmp8_;
	gchar* _tmp9_;
	GDateTime* _tmp10_;
	GDateTime* _tmp11_;
	Utils* _tmp12_;
#line 104 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_return_if_fail (self != NULL);
#line 104 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_return_if_fail (date != NULL);
#line 104 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_return_if_fail (_reminder_datetime != NULL);
#line 105 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp0_ = self->priv->reminder_revealer;
#line 105 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_revealer_set_reveal_child (_tmp0_, _has_reminder);
#line 107 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp1_ = self->priv->when_popover;
#line 107 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp2_ = _tmp1_->reminder_switch;
#line 107 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_switch_set_active (_tmp2_, _has_reminder);
#line 108 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp3_ = self->priv->when_popover;
#line 108 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp4_ = _tmp3_->reminder_timepicker;
#line 108 "/run/build/planner/src/Widgets/WhenButton.vala"
	widgets_time_picker_set_time (_tmp4_, _reminder_datetime);
#line 110 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp5_ = granite_date_time_get_default_time_format (TRUE, FALSE);
#line 110 "/run/build/planner/src/Widgets/WhenButton.vala"
	time_format = _tmp5_;
#line 111 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp6_ = self->priv->reminder_label;
#line 111 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp7_ = time_format;
#line 111 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp8_ = g_date_time_format (_reminder_datetime, _tmp7_);
#line 111 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp9_ = _tmp8_;
#line 111 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_label_set_label (_tmp6_, _tmp9_);
#line 111 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_free0 (_tmp9_);
#line 113 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp10_ = _g_date_time_ref0 (date);
#line 113 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_date_time_unref0 (self->when_datetime);
#line 113 "/run/build/planner/src/Widgets/WhenButton.vala"
	self->when_datetime = _tmp10_;
#line 114 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp11_ = _g_date_time_ref0 (_reminder_datetime);
#line 114 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_date_time_unref0 (self->reminder_datetime);
#line 114 "/run/build/planner/src/Widgets/WhenButton.vala"
	self->reminder_datetime = _tmp11_;
#line 115 "/run/build/planner/src/Widgets/WhenButton.vala"
	self->has_reminder = _has_reminder;
#line 116 "/run/build/planner/src/Widgets/WhenButton.vala"
	self->has_when = TRUE;
#line 118 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp12_ = application_utils;
#line 118 "/run/build/planner/src/Widgets/WhenButton.vala"
	if (utils_is_today (_tmp12_, date)) {
#line 306 "WhenButton.c"
		GtkLabel* _tmp13_;
#line 119 "/run/build/planner/src/Widgets/WhenButton.vala"
		_tmp13_ = self->priv->when_label;
#line 119 "/run/build/planner/src/Widgets/WhenButton.vala"
		gtk_label_set_label (_tmp13_, _ ("Today"));
#line 120 "/run/build/planner/src/Widgets/WhenButton.vala"
		self->has_when = TRUE;
#line 314 "WhenButton.c"
	} else {
		Utils* _tmp14_;
#line 121 "/run/build/planner/src/Widgets/WhenButton.vala"
		_tmp14_ = application_utils;
#line 121 "/run/build/planner/src/Widgets/WhenButton.vala"
		if (utils_is_tomorrow (_tmp14_, date)) {
#line 321 "WhenButton.c"
			GtkLabel* _tmp15_;
#line 122 "/run/build/planner/src/Widgets/WhenButton.vala"
			_tmp15_ = self->priv->when_label;
#line 122 "/run/build/planner/src/Widgets/WhenButton.vala"
			gtk_label_set_label (_tmp15_, _ ("Tomorrow"));
#line 123 "/run/build/planner/src/Widgets/WhenButton.vala"
			self->has_when = TRUE;
#line 329 "WhenButton.c"
		} else {
			GtkLabel* _tmp16_;
			Utils* _tmp17_;
			gchar* _tmp18_;
			gchar* _tmp19_;
#line 125 "/run/build/planner/src/Widgets/WhenButton.vala"
			_tmp16_ = self->priv->when_label;
#line 125 "/run/build/planner/src/Widgets/WhenButton.vala"
			_tmp17_ = application_utils;
#line 125 "/run/build/planner/src/Widgets/WhenButton.vala"
			_tmp18_ = utils_get_default_date_format_from_date (_tmp17_, date);
#line 125 "/run/build/planner/src/Widgets/WhenButton.vala"
			_tmp19_ = _tmp18_;
#line 125 "/run/build/planner/src/Widgets/WhenButton.vala"
			gtk_label_set_label (_tmp16_, _tmp19_);
#line 125 "/run/build/planner/src/Widgets/WhenButton.vala"
			_g_free0 (_tmp19_);
#line 126 "/run/build/planner/src/Widgets/WhenButton.vala"
			self->has_when = TRUE;
#line 349 "WhenButton.c"
		}
	}
#line 129 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 104 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_free0 (time_format);
#line 356 "WhenButton.c"
}


static void
_widgets_when_button___lambda36_ (WidgetsWhenButton* self)
{
	gboolean _tmp0_;
	gboolean _tmp1_;
#line 74 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp0_ = gtk_toggle_button_get_active ((GtkToggleButton*) self);
#line 74 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp1_ = _tmp0_;
#line 74 "/run/build/planner/src/Widgets/WhenButton.vala"
	if (_tmp1_) {
#line 371 "WhenButton.c"
		WidgetsPopoversWhenPopover* _tmp2_;
		gboolean _tmp3_;
#line 75 "/run/build/planner/src/Widgets/WhenButton.vala"
		_tmp2_ = self->priv->when_popover;
#line 75 "/run/build/planner/src/Widgets/WhenButton.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp2_);
#line 76 "/run/build/planner/src/Widgets/WhenButton.vala"
		_tmp3_ = self->has_when;
#line 76 "/run/build/planner/src/Widgets/WhenButton.vala"
		if (_tmp3_) {
#line 382 "WhenButton.c"
			WidgetsPopoversWhenPopover* _tmp4_;
			GtkButton* _tmp5_;
#line 77 "/run/build/planner/src/Widgets/WhenButton.vala"
			_tmp4_ = self->priv->when_popover;
#line 77 "/run/build/planner/src/Widgets/WhenButton.vala"
			_tmp5_ = _tmp4_->remove_button;
#line 77 "/run/build/planner/src/Widgets/WhenButton.vala"
			gtk_widget_set_visible ((GtkWidget*) _tmp5_, TRUE);
#line 391 "WhenButton.c"
		}
	}
}


static void
__widgets_when_button___lambda36__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                             gpointer self)
{
#line 73 "/run/build/planner/src/Widgets/WhenButton.vala"
	_widgets_when_button___lambda36_ ((WidgetsWhenButton*) self);
#line 403 "WhenButton.c"
}


static void
_widgets_when_button___lambda37_ (WidgetsWhenButton* self)
{
#line 83 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_toggle_button_set_active ((GtkToggleButton*) self, FALSE);
#line 412 "WhenButton.c"
}


static void
__widgets_when_button___lambda37__gtk_popover_closed (GtkPopover* _sender,
                                                      gpointer self)
{
#line 82 "/run/build/planner/src/Widgets/WhenButton.vala"
	_widgets_when_button___lambda37_ ((WidgetsWhenButton*) self);
#line 422 "WhenButton.c"
}


static void
_widgets_when_button___lambda38_ (WidgetsWhenButton* self)
{
#line 87 "/run/build/planner/src/Widgets/WhenButton.vala"
	widgets_when_button_clear (self);
#line 431 "WhenButton.c"
}


static void
__widgets_when_button___lambda38__widgets_popovers_when_popover_on_selected_remove (WidgetsPopoversWhenPopover* _sender,
                                                                                    gpointer self)
{
#line 86 "/run/build/planner/src/Widgets/WhenButton.vala"
	_widgets_when_button___lambda38_ ((WidgetsWhenButton*) self);
#line 441 "WhenButton.c"
}


static void
_widgets_when_button___lambda39_ (WidgetsWhenButton* self,
                                  GDateTime* date,
                                  gboolean _has_reminder,
                                  GDateTime* _reminder_datetime)
{
#line 90 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_return_if_fail (date != NULL);
#line 90 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_return_if_fail (_reminder_datetime != NULL);
#line 91 "/run/build/planner/src/Widgets/WhenButton.vala"
	widgets_when_button_set_date (self, date, _has_reminder, _reminder_datetime);
#line 92 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_signal_emit (self, widgets_when_button_signals[WIDGETS_WHEN_BUTTON_ON_SIGNAL_SELECTED_SIGNAL], 0);
#line 459 "WhenButton.c"
}


static void
__widgets_when_button___lambda39__widgets_popovers_when_popover_on_selected_date (WidgetsPopoversWhenPopover* _sender,
                                                                                  GDateTime* duedate,
                                                                                  gboolean has_reminder,
                                                                                  GDateTime* reminder_datetime,
                                                                                  gpointer self)
{
#line 90 "/run/build/planner/src/Widgets/WhenButton.vala"
	_widgets_when_button___lambda39_ ((WidgetsWhenButton*) self, duedate, has_reminder, reminder_datetime);
#line 472 "WhenButton.c"
}


static GObject *
widgets_when_button_constructor (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsWhenButton * self;
	GtkStyleContext* _tmp0_;
	GtkImage* when_icon = NULL;
	GtkImage* _tmp1_;
	GtkLabel* _tmp2_;
	GtkLabel* _tmp3_;
	GtkImage* reminder_icon = NULL;
	GtkImage* _tmp4_;
	GtkLabel* _tmp5_;
	GtkBox* reminder_box = NULL;
	GtkBox* _tmp6_;
	GtkBox* _tmp7_;
	GtkImage* _tmp8_;
	GtkBox* _tmp9_;
	GtkLabel* _tmp10_;
	GtkRevealer* _tmp11_;
	GtkRevealer* _tmp12_;
	GtkRevealer* _tmp13_;
	GtkRevealer* _tmp14_;
	GtkRevealer* _tmp15_;
	GtkBox* _tmp16_;
	WidgetsPopoversWhenPopover* _tmp17_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp18_;
	GtkBox* _tmp19_;
	GtkImage* _tmp20_;
	GtkBox* _tmp21_;
	GtkLabel* _tmp22_;
	GtkBox* _tmp23_;
	GtkRevealer* _tmp24_;
	GtkBox* _tmp25_;
	WidgetsPopoversWhenPopover* _tmp26_;
	WidgetsPopoversWhenPopover* _tmp27_;
	WidgetsPopoversWhenPopover* _tmp28_;
#line 43 "/run/build/planner/src/Widgets/WhenButton.vala"
	parent_class = G_OBJECT_CLASS (widgets_when_button_parent_class);
#line 43 "/run/build/planner/src/Widgets/WhenButton.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 43 "/run/build/planner/src/Widgets/WhenButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButton);
#line 44 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 44 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_style_context_add_class (_tmp0_, GTK_STYLE_CLASS_FLAT);
#line 46 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp1_ = (GtkImage*) gtk_image_new_from_icon_name ("office-calendar-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 46 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_object_ref_sink (_tmp1_);
#line 46 "/run/build/planner/src/Widgets/WhenButton.vala"
	when_icon = _tmp1_;
#line 48 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp2_ = (GtkLabel*) gtk_label_new (WIDGETS_WHEN_BUTTON_when_text);
#line 48 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_object_ref_sink (_tmp2_);
#line 48 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_object_unref0 (self->priv->when_label);
#line 48 "/run/build/planner/src/Widgets/WhenButton.vala"
	self->priv->when_label = _tmp2_;
#line 49 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp3_ = self->priv->when_label;
#line 49 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp3_, 1);
#line 51 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp4_ = (GtkImage*) gtk_image_new_from_icon_name ("notification-new-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 51 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_object_ref_sink (_tmp4_);
#line 51 "/run/build/planner/src/Widgets/WhenButton.vala"
	reminder_icon = _tmp4_;
#line 52 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp5_ = (GtkLabel*) gtk_label_new ("");
#line 52 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_object_ref_sink (_tmp5_);
#line 52 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_object_unref0 (self->priv->reminder_label);
#line 52 "/run/build/planner/src/Widgets/WhenButton.vala"
	self->priv->reminder_label = _tmp5_;
#line 54 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp6_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 54 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_object_ref_sink (_tmp6_);
#line 54 "/run/build/planner/src/Widgets/WhenButton.vala"
	reminder_box = _tmp6_;
#line 55 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp7_ = reminder_box;
#line 55 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp8_ = reminder_icon;
#line 55 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_box_pack_start (_tmp7_, (GtkWidget*) _tmp8_, FALSE, FALSE, (guint) 0);
#line 56 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp9_ = reminder_box;
#line 56 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp10_ = self->priv->reminder_label;
#line 56 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_box_pack_start (_tmp9_, (GtkWidget*) _tmp10_, FALSE, FALSE, (guint) 0);
#line 58 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp11_ = (GtkRevealer*) gtk_revealer_new ();
#line 58 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_object_ref_sink (_tmp11_);
#line 58 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_object_unref0 (self->priv->reminder_revealer);
#line 58 "/run/build/planner/src/Widgets/WhenButton.vala"
	self->priv->reminder_revealer = _tmp11_;
#line 59 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp12_ = self->priv->reminder_revealer;
#line 59 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_revealer_set_transition_type (_tmp12_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT);
#line 60 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp13_ = self->priv->reminder_revealer;
#line 60 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp13_, 3);
#line 61 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp14_ = self->priv->reminder_revealer;
#line 61 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_revealer_set_reveal_child (_tmp14_, FALSE);
#line 62 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp15_ = self->priv->reminder_revealer;
#line 62 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp16_ = reminder_box;
#line 62 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_container_add ((GtkContainer*) _tmp15_, (GtkWidget*) _tmp16_);
#line 64 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp17_ = widgets_popovers_when_popover_new ((GtkWidget*) self);
#line 64 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_object_ref_sink (_tmp17_);
#line 64 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_object_unref0 (self->priv->when_popover);
#line 64 "/run/build/planner/src/Widgets/WhenButton.vala"
	self->priv->when_popover = _tmp17_;
#line 66 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp18_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 66 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_object_ref_sink (_tmp18_);
#line 66 "/run/build/planner/src/Widgets/WhenButton.vala"
	main_box = _tmp18_;
#line 67 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp19_ = main_box;
#line 67 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp20_ = when_icon;
#line 67 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_box_pack_start (_tmp19_, (GtkWidget*) _tmp20_, FALSE, FALSE, (guint) 0);
#line 68 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp21_ = main_box;
#line 68 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp22_ = self->priv->when_label;
#line 68 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_box_pack_start (_tmp21_, (GtkWidget*) _tmp22_, FALSE, FALSE, (guint) 0);
#line 69 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp23_ = main_box;
#line 69 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp24_ = self->priv->reminder_revealer;
#line 69 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_box_pack_start (_tmp23_, (GtkWidget*) _tmp24_, FALSE, FALSE, (guint) 0);
#line 71 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp25_ = main_box;
#line 71 "/run/build/planner/src/Widgets/WhenButton.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp25_);
#line 73 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_signal_connect_object ((GtkToggleButton*) self, "toggled", (GCallback) __widgets_when_button___lambda36__gtk_toggle_button_toggled, self, 0);
#line 82 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp26_ = self->priv->when_popover;
#line 82 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_signal_connect_object ((GtkPopover*) _tmp26_, "closed", (GCallback) __widgets_when_button___lambda37__gtk_popover_closed, self, 0);
#line 86 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp27_ = self->priv->when_popover;
#line 86 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_signal_connect_object (_tmp27_, "on-selected-remove", (GCallback) __widgets_when_button___lambda38__widgets_popovers_when_popover_on_selected_remove, self, 0);
#line 90 "/run/build/planner/src/Widgets/WhenButton.vala"
	_tmp28_ = self->priv->when_popover;
#line 90 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_signal_connect_object (_tmp28_, "on-selected-date", (GCallback) __widgets_when_button___lambda39__widgets_popovers_when_popover_on_selected_date, self, 0);
#line 43 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_object_unref0 (main_box);
#line 43 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_object_unref0 (reminder_box);
#line 43 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_object_unref0 (reminder_icon);
#line 43 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_object_unref0 (when_icon);
#line 43 "/run/build/planner/src/Widgets/WhenButton.vala"
	return obj;
#line 663 "WhenButton.c"
}


static void
widgets_when_button_class_init (WidgetsWhenButtonClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/WhenButton.vala"
	widgets_when_button_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/WhenButton.vala"
	g_type_class_add_private (klass, sizeof (WidgetsWhenButtonPrivate));
#line 22 "/run/build/planner/src/Widgets/WhenButton.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_when_button_constructor;
#line 22 "/run/build/planner/src/Widgets/WhenButton.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_when_button_finalize;
#line 22 "/run/build/planner/src/Widgets/WhenButton.vala"
	widgets_when_button_signals[WIDGETS_WHEN_BUTTON_ON_SIGNAL_SELECTED_SIGNAL] = g_signal_new ("on-signal-selected", WIDGETS_TYPE_WHEN_BUTTON, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 680 "WhenButton.c"
}


static void
widgets_when_button_instance_init (WidgetsWhenButton * self)
{
#line 22 "/run/build/planner/src/Widgets/WhenButton.vala"
	self->priv = WIDGETS_WHEN_BUTTON_GET_PRIVATE (self);
#line 26 "/run/build/planner/src/Widgets/WhenButton.vala"
	self->has_when = FALSE;
#line 27 "/run/build/planner/src/Widgets/WhenButton.vala"
	self->has_reminder = FALSE;
#line 693 "WhenButton.c"
}


static void
widgets_when_button_finalize (GObject * obj)
{
	WidgetsWhenButton * self;
#line 22 "/run/build/planner/src/Widgets/WhenButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButton);
#line 23 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_object_unref0 (self->priv->when_popover);
#line 29 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_date_time_unref0 (self->reminder_datetime);
#line 30 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_date_time_unref0 (self->when_datetime);
#line 32 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_object_unref0 (self->priv->reminder_revealer);
#line 33 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_object_unref0 (self->priv->when_label);
#line 34 "/run/build/planner/src/Widgets/WhenButton.vala"
	_g_object_unref0 (self->priv->reminder_label);
#line 22 "/run/build/planner/src/Widgets/WhenButton.vala"
	G_OBJECT_CLASS (widgets_when_button_parent_class)->finalize (obj);
#line 717 "WhenButton.c"
}


GType
widgets_when_button_get_type (void)
{
	static volatile gsize widgets_when_button_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_when_button_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsWhenButtonClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_when_button_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsWhenButton), 0, (GInstanceInitFunc) widgets_when_button_instance_init, NULL };
		GType widgets_when_button_type_id;
		widgets_when_button_type_id = g_type_register_static (gtk_toggle_button_get_type (), "WidgetsWhenButton", &g_define_type_info, 0);
		g_once_init_leave (&widgets_when_button_type_id__volatile, widgets_when_button_type_id);
	}
	return widgets_when_button_type_id__volatile;
}



