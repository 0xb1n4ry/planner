/* RepositoryRow.c generated by valac 0.40.11, the Vala compiler
 * generated from RepositoryRow.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <gdk/gdk.h>


#define WIDGETS_TYPE_REPOSITORY_ROW (widgets_repository_row_get_type ())
#define WIDGETS_REPOSITORY_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_REPOSITORY_ROW, WidgetsRepositoryRow))
#define WIDGETS_REPOSITORY_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_REPOSITORY_ROW, WidgetsRepositoryRowClass))
#define WIDGETS_IS_REPOSITORY_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_REPOSITORY_ROW))
#define WIDGETS_IS_REPOSITORY_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_REPOSITORY_ROW))
#define WIDGETS_REPOSITORY_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_REPOSITORY_ROW, WidgetsRepositoryRowClass))

typedef struct _WidgetsRepositoryRow WidgetsRepositoryRow;
typedef struct _WidgetsRepositoryRowClass WidgetsRepositoryRowClass;
typedef struct _WidgetsRepositoryRowPrivate WidgetsRepositoryRowPrivate;

#define OBJECTS_TYPE_REPOSITORY (objects_repository_get_type ())
#define OBJECTS_REPOSITORY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_REPOSITORY, ObjectsRepository))
#define OBJECTS_REPOSITORY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_REPOSITORY, ObjectsRepositoryClass))
#define OBJECTS_IS_REPOSITORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_REPOSITORY))
#define OBJECTS_IS_REPOSITORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_REPOSITORY))
#define OBJECTS_REPOSITORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_REPOSITORY, ObjectsRepositoryClass))

typedef struct _ObjectsRepository ObjectsRepository;
typedef struct _ObjectsRepositoryClass ObjectsRepositoryClass;
enum  {
	WIDGETS_REPOSITORY_ROW_0_PROPERTY,
	WIDGETS_REPOSITORY_ROW_REPOSITORY_PROPERTY,
	WIDGETS_REPOSITORY_ROW_NUM_PROPERTIES
};
static GParamSpec* widgets_repository_row_properties[WIDGETS_REPOSITORY_ROW_NUM_PROPERTIES];
#define _objects_repository_unref0(var) ((var == NULL) ? NULL : (var = (objects_repository_unref (var), NULL)))
typedef struct _Block71Data Block71Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _ObjectsRepositoryPrivate ObjectsRepositoryPrivate;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

struct _WidgetsRepositoryRow {
	GtkListBoxRow parent_instance;
	WidgetsRepositoryRowPrivate * priv;
};

struct _WidgetsRepositoryRowClass {
	GtkListBoxRowClass parent_class;
};

struct _WidgetsRepositoryRowPrivate {
	ObjectsRepository* _repository;
};

struct _Block71Data {
	int _ref_count_;
	WidgetsRepositoryRow* self;
	GtkSwitch* sensitive_switch;
};

struct _ObjectsRepository {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsRepositoryPrivate * priv;
	gint64 id;
	gchar* name;
	gint sensitive;
	gchar* issues;
	gint64 user_id;
};

struct _ObjectsRepositoryClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsRepository *self);
};


static gpointer widgets_repository_row_parent_class = NULL;
extern ServicesDatabase* application_database;

GType widgets_repository_row_get_type (void) G_GNUC_CONST;
gpointer objects_repository_ref (gpointer instance);
void objects_repository_unref (gpointer instance);
GParamSpec* objects_param_spec_repository (const gchar* name,
                                           const gchar* nick,
                                           const gchar* blurb,
                                           GType object_type,
                                           GParamFlags flags);
void objects_value_set_repository (GValue* value,
                                   gpointer v_object);
void objects_value_take_repository (GValue* value,
                                    gpointer v_object);
gpointer objects_value_get_repository (const GValue* value);
GType objects_repository_get_type (void) G_GNUC_CONST;
#define WIDGETS_REPOSITORY_ROW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_REPOSITORY_ROW, WidgetsRepositoryRowPrivate))
WidgetsRepositoryRow* widgets_repository_row_new (ObjectsRepository* _objec);
WidgetsRepositoryRow* widgets_repository_row_construct (GType object_type,
                                                        ObjectsRepository* _objec);
ObjectsRepository* widgets_repository_row_get_repository (WidgetsRepositoryRow* self);
static void widgets_repository_row_set_repository (WidgetsRepositoryRow* self,
                                            ObjectsRepository* value);
static GObject * widgets_repository_row_constructor (GType type,
                                              guint n_construct_properties,
                                              GObjectConstructParam * construct_properties);
static Block71Data* block71_data_ref (Block71Data* _data71_);
static void block71_data_unref (void * _userdata_);
static void _widgets_repository_row___lambda142_ (Block71Data* _data71_);
GType services_database_get_type (void) G_GNUC_CONST;
gint services_database_update_repository (ServicesDatabase* self,
                                          ObjectsRepository* repository);
static void __widgets_repository_row___lambda142__g_object_notify (GObject* _sender,
                                                            GParamSpec* pspec,
                                                            gpointer self);
static gboolean _widgets_repository_row___lambda143_ (Block71Data* _data71_,
                                               GdkEvent* event);
static gboolean __widgets_repository_row___lambda143__gtk_widget_event (GtkWidget* _sender,
                                                                 GdkEvent* event,
                                                                 gpointer self);
static void widgets_repository_row_finalize (GObject * obj);
static void _vala_widgets_repository_row_get_property (GObject * object,
                                                guint property_id,
                                                GValue * value,
                                                GParamSpec * pspec);
static void _vala_widgets_repository_row_set_property (GObject * object,
                                                guint property_id,
                                                const GValue * value,
                                                GParamSpec * pspec);


WidgetsRepositoryRow*
widgets_repository_row_construct (GType object_type,
                                  ObjectsRepository* _objec)
{
	WidgetsRepositoryRow * self = NULL;
#line 25 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_return_val_if_fail (_objec != NULL, NULL);
#line 26 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	self = (WidgetsRepositoryRow*) g_object_new (object_type, "repository", _objec, NULL);
#line 25 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	return self;
#line 176 "RepositoryRow.c"
}


WidgetsRepositoryRow*
widgets_repository_row_new (ObjectsRepository* _objec)
{
#line 25 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	return widgets_repository_row_construct (WIDGETS_TYPE_REPOSITORY_ROW, _objec);
#line 185 "RepositoryRow.c"
}


ObjectsRepository*
widgets_repository_row_get_repository (WidgetsRepositoryRow* self)
{
	ObjectsRepository* result;
	ObjectsRepository* _tmp0_;
#line 23 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp0_ = self->priv->_repository;
#line 23 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	result = _tmp0_;
#line 23 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	return result;
#line 202 "RepositoryRow.c"
}


static gpointer
_objects_repository_ref0 (gpointer self)
{
#line 23 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	return self ? objects_repository_ref (self) : NULL;
#line 211 "RepositoryRow.c"
}


static void
widgets_repository_row_set_repository (WidgetsRepositoryRow* self,
                                       ObjectsRepository* value)
{
#line 23 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_return_if_fail (self != NULL);
#line 23 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	if (widgets_repository_row_get_repository (self) != value) {
#line 223 "RepositoryRow.c"
		ObjectsRepository* _tmp0_;
#line 23 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		_tmp0_ = _objects_repository_ref0 (value);
#line 23 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		_objects_repository_unref0 (self->priv->_repository);
#line 23 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		self->priv->_repository = _tmp0_;
#line 23 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_repository_row_properties[WIDGETS_REPOSITORY_ROW_REPOSITORY_PROPERTY]);
#line 233 "RepositoryRow.c"
	}
}


static Block71Data*
block71_data_ref (Block71Data* _data71_)
{
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_atomic_int_inc (&_data71_->_ref_count_);
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	return _data71_;
#line 245 "RepositoryRow.c"
}


static void
block71_data_unref (void * _userdata_)
{
	Block71Data* _data71_;
	_data71_ = (Block71Data*) _userdata_;
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	if (g_atomic_int_dec_and_test (&_data71_->_ref_count_)) {
#line 256 "RepositoryRow.c"
		WidgetsRepositoryRow* self;
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		self = _data71_->self;
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		_g_object_unref0 (_data71_->sensitive_switch);
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		_g_object_unref0 (self);
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		g_slice_free (Block71Data, _data71_);
#line 266 "RepositoryRow.c"
	}
}


static void
_widgets_repository_row___lambda142_ (Block71Data* _data71_)
{
	WidgetsRepositoryRow* self;
	GtkSwitch* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	ServicesDatabase* _tmp5_;
	ObjectsRepository* _tmp6_;
#line 76 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	self = _data71_->self;
#line 77 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp0_ = _data71_->sensitive_switch;
#line 77 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp1_ = gtk_switch_get_active (_tmp0_);
#line 77 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp2_ = _tmp1_;
#line 77 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	if (_tmp2_) {
#line 290 "RepositoryRow.c"
		ObjectsRepository* _tmp3_;
#line 78 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		_tmp3_ = self->priv->_repository;
#line 78 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		_tmp3_->sensitive = 1;
#line 296 "RepositoryRow.c"
	} else {
		ObjectsRepository* _tmp4_;
#line 80 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		_tmp4_ = self->priv->_repository;
#line 80 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		_tmp4_->sensitive = 0;
#line 303 "RepositoryRow.c"
	}
#line 83 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp5_ = application_database;
#line 83 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp6_ = self->priv->_repository;
#line 83 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	services_database_update_repository (_tmp5_, _tmp6_);
#line 311 "RepositoryRow.c"
}


static void
__widgets_repository_row___lambda142__g_object_notify (GObject* _sender,
                                                       GParamSpec* pspec,
                                                       gpointer self)
{
#line 76 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_widgets_repository_row___lambda142_ (self);
#line 322 "RepositoryRow.c"
}


static gboolean
_widgets_repository_row___lambda143_ (Block71Data* _data71_,
                                      GdkEvent* event)
{
	WidgetsRepositoryRow* self;
	gboolean result = FALSE;
	GdkEventType _tmp0_;
#line 86 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	self = _data71_->self;
#line 86 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 87 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp0_ = event->type;
#line 87 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	if (_tmp0_ == GDK_BUTTON_PRESS) {
#line 341 "RepositoryRow.c"
		GtkSwitch* _tmp1_;
		gboolean _tmp2_;
		gboolean _tmp3_;
#line 88 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		_tmp1_ = _data71_->sensitive_switch;
#line 88 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		_tmp2_ = gtk_switch_get_active (_tmp1_);
#line 88 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		_tmp3_ = _tmp2_;
#line 88 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		if (_tmp3_) {
#line 353 "RepositoryRow.c"
			GtkSwitch* _tmp4_;
#line 89 "/run/build/planner/src/Widgets/RepositoryRow.vala"
			_tmp4_ = _data71_->sensitive_switch;
#line 89 "/run/build/planner/src/Widgets/RepositoryRow.vala"
			gtk_switch_set_active (_tmp4_, FALSE);
#line 359 "RepositoryRow.c"
		} else {
			GtkSwitch* _tmp5_;
#line 91 "/run/build/planner/src/Widgets/RepositoryRow.vala"
			_tmp5_ = _data71_->sensitive_switch;
#line 91 "/run/build/planner/src/Widgets/RepositoryRow.vala"
			gtk_switch_set_active (_tmp5_, TRUE);
#line 366 "RepositoryRow.c"
		}
	}
#line 94 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	result = FALSE;
#line 94 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	return result;
#line 373 "RepositoryRow.c"
}


static gboolean
__widgets_repository_row___lambda143__gtk_widget_event (GtkWidget* _sender,
                                                        GdkEvent* event,
                                                        gpointer self)
{
	gboolean result;
	result = _widgets_repository_row___lambda143_ (self, event);
#line 86 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	return result;
#line 386 "RepositoryRow.c"
}


static GObject *
widgets_repository_row_constructor (GType type,
                                    guint n_construct_properties,
                                    GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsRepositoryRow * self;
	Block71Data* _data71_;
	GtkStyleContext* _tmp0_;
	GtkImage* repo_icon = NULL;
	GtkImage* _tmp1_;
	GtkImage* _tmp2_;
	GThemedIcon* _tmp3_;
	GThemedIcon* _tmp4_;
	GtkImage* _tmp5_;
	GtkLabel* name_label = NULL;
	ObjectsRepository* _tmp6_;
	const gchar* _tmp7_;
	GtkLabel* _tmp8_;
	GtkLabel* _tmp9_;
	GtkLabel* _tmp10_;
	GtkStyleContext* _tmp11_;
	GtkSwitch* _tmp12_;
	GtkSwitch* _tmp13_;
	GtkSwitch* _tmp14_;
	GtkStyleContext* _tmp15_;
	GtkSwitch* _tmp16_;
	ObjectsRepository* _tmp17_;
	gint _tmp18_;
	GtkBox* box = NULL;
	GtkBox* _tmp21_;
	GtkBox* _tmp22_;
	GtkBox* _tmp23_;
	GtkBox* _tmp24_;
	GtkImage* _tmp25_;
	GtkBox* _tmp26_;
	GtkLabel* _tmp27_;
	GtkBox* _tmp28_;
	GtkSwitch* _tmp29_;
	GtkSeparator* s = NULL;
	GtkSeparator* _tmp30_;
	GtkSeparator* _tmp31_;
	GtkGrid* main_grid = NULL;
	GtkGrid* _tmp32_;
	GtkGrid* _tmp33_;
	GtkGrid* _tmp34_;
	GtkBox* _tmp35_;
	GtkGrid* _tmp36_;
	GtkSeparator* _tmp37_;
	GtkEventBox* eventbox = NULL;
	GtkEventBox* _tmp38_;
	GtkEventBox* _tmp39_;
	GtkGrid* _tmp40_;
	GtkEventBox* _tmp41_;
	GtkSwitch* _tmp42_;
	GtkEventBox* _tmp43_;
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	parent_class = G_OBJECT_CLASS (widgets_repository_row_parent_class);
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_REPOSITORY_ROW, WidgetsRepositoryRow);
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_data71_ = g_slice_new0 (Block71Data);
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_data71_->_ref_count_ = 1;
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_data71_->self = g_object_ref (self);
#line 32 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 32 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_style_context_add_class (_tmp0_, "task");
#line 33 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_list_box_row_set_selectable ((GtkListBoxRow*) self, FALSE);
#line 35 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp1_ = (GtkImage*) gtk_image_new ();
#line 35 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_object_ref_sink (_tmp1_);
#line 35 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	repo_icon = _tmp1_;
#line 36 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp2_ = repo_icon;
#line 36 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp3_ = (GThemedIcon*) g_themed_icon_new ("planner-repository-symbolic");
#line 36 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp4_ = _tmp3_;
#line 36 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_object_set (_tmp2_, "gicon", (GIcon*) _tmp4_, NULL);
#line 36 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_g_object_unref0 (_tmp4_);
#line 37 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp5_ = repo_icon;
#line 37 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_image_set_pixel_size (_tmp5_, 16);
#line 39 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp6_ = self->priv->_repository;
#line 39 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp7_ = _tmp6_->name;
#line 39 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp8_ = (GtkLabel*) gtk_label_new (_tmp7_);
#line 39 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_object_ref_sink (_tmp8_);
#line 39 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	name_label = _tmp8_;
#line 40 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp9_ = name_label;
#line 40 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp9_, 1);
#line 41 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp10_ = name_label;
#line 41 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp11_ = gtk_widget_get_style_context ((GtkWidget*) _tmp10_);
#line 41 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_style_context_add_class (_tmp11_, "h3");
#line 43 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp12_ = (GtkSwitch*) gtk_switch_new ();
#line 43 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_object_ref_sink (_tmp12_);
#line 43 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_data71_->sensitive_switch = _tmp12_;
#line 44 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp13_ = _data71_->sensitive_switch;
#line 44 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp13_, 6);
#line 45 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp14_ = _data71_->sensitive_switch;
#line 45 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp15_ = gtk_widget_get_style_context ((GtkWidget*) _tmp14_);
#line 45 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_style_context_add_class (_tmp15_, "active-switch");
#line 46 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp16_ = _data71_->sensitive_switch;
#line 46 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp16_, GTK_ALIGN_CENTER);
#line 48 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp17_ = self->priv->_repository;
#line 48 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp18_ = _tmp17_->sensitive;
#line 48 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	if (_tmp18_ == 0) {
#line 531 "RepositoryRow.c"
		GtkSwitch* _tmp19_;
#line 49 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		_tmp19_ = _data71_->sensitive_switch;
#line 49 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		gtk_switch_set_active (_tmp19_, FALSE);
#line 537 "RepositoryRow.c"
	} else {
		GtkSwitch* _tmp20_;
#line 51 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		_tmp20_ = _data71_->sensitive_switch;
#line 51 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		gtk_switch_set_active (_tmp20_, TRUE);
#line 544 "RepositoryRow.c"
	}
#line 54 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp21_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 54 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_object_ref_sink (_tmp21_);
#line 54 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	box = _tmp21_;
#line 55 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp22_ = box;
#line 55 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_object_set ((GtkWidget*) _tmp22_, "margin", 6, NULL);
#line 56 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp23_ = box;
#line 56 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_object_set ((GtkWidget*) _tmp23_, "expand", TRUE, NULL);
#line 58 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp24_ = box;
#line 58 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp25_ = repo_icon;
#line 58 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_box_pack_start (_tmp24_, (GtkWidget*) _tmp25_, FALSE, FALSE, (guint) 0);
#line 59 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp26_ = box;
#line 59 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp27_ = name_label;
#line 59 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_box_pack_start (_tmp26_, (GtkWidget*) _tmp27_, FALSE, FALSE, (guint) 6);
#line 60 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp28_ = box;
#line 60 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp29_ = _data71_->sensitive_switch;
#line 60 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_box_pack_end (_tmp28_, (GtkWidget*) _tmp29_, FALSE, FALSE, (guint) 0);
#line 62 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp30_ = (GtkSeparator*) gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);
#line 62 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_object_ref_sink (_tmp30_);
#line 62 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	s = _tmp30_;
#line 63 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp31_ = s;
#line 63 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp31_, 30);
#line 65 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp32_ = (GtkGrid*) gtk_grid_new ();
#line 65 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_object_ref_sink (_tmp32_);
#line 65 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	main_grid = _tmp32_;
#line 66 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp33_ = main_grid;
#line 66 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp33_, GTK_ORIENTATION_VERTICAL);
#line 68 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp34_ = main_grid;
#line 68 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp35_ = box;
#line 68 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_container_add ((GtkContainer*) _tmp34_, (GtkWidget*) _tmp35_);
#line 69 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp36_ = main_grid;
#line 69 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp37_ = s;
#line 69 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_container_add ((GtkContainer*) _tmp36_, (GtkWidget*) _tmp37_);
#line 71 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp38_ = (GtkEventBox*) gtk_event_box_new ();
#line 71 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_object_ref_sink (_tmp38_);
#line 71 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	eventbox = _tmp38_;
#line 72 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp39_ = eventbox;
#line 72 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp40_ = main_grid;
#line 72 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_container_add ((GtkContainer*) _tmp39_, (GtkWidget*) _tmp40_);
#line 74 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp41_ = eventbox;
#line 74 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp41_);
#line 76 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp42_ = _data71_->sensitive_switch;
#line 76 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_signal_connect_data ((GObject*) _tmp42_, "notify::active", (GCallback) __widgets_repository_row___lambda142__g_object_notify, block71_data_ref (_data71_), (GClosureNotify) block71_data_unref, 0);
#line 86 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_tmp43_ = eventbox;
#line 86 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_signal_connect_data ((GtkWidget*) _tmp43_, "event", (GCallback) __widgets_repository_row___lambda143__gtk_widget_event, block71_data_ref (_data71_), (GClosureNotify) block71_data_unref, 0);
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_g_object_unref0 (eventbox);
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_g_object_unref0 (main_grid);
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_g_object_unref0 (s);
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_g_object_unref0 (box);
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_g_object_unref0 (name_label);
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_g_object_unref0 (repo_icon);
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	block71_data_unref (_data71_);
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_data71_ = NULL;
#line 31 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	return obj;
#line 652 "RepositoryRow.c"
}


static void
widgets_repository_row_class_init (WidgetsRepositoryRowClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	widgets_repository_row_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_type_class_add_private (klass, sizeof (WidgetsRepositoryRowPrivate));
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_repository_row_get_property;
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_repository_row_set_property;
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_repository_row_constructor;
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_repository_row_finalize;
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_REPOSITORY_ROW_REPOSITORY_PROPERTY, widgets_repository_row_properties[WIDGETS_REPOSITORY_ROW_REPOSITORY_PROPERTY] = objects_param_spec_repository ("repository", "repository", "repository", OBJECTS_TYPE_REPOSITORY, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 673 "RepositoryRow.c"
}


static void
widgets_repository_row_instance_init (WidgetsRepositoryRow * self)
{
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	self->priv = WIDGETS_REPOSITORY_ROW_GET_PRIVATE (self);
#line 682 "RepositoryRow.c"
}


static void
widgets_repository_row_finalize (GObject * obj)
{
	WidgetsRepositoryRow * self;
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_REPOSITORY_ROW, WidgetsRepositoryRow);
#line 23 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	_objects_repository_unref0 (self->priv->_repository);
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	G_OBJECT_CLASS (widgets_repository_row_parent_class)->finalize (obj);
#line 696 "RepositoryRow.c"
}


GType
widgets_repository_row_get_type (void)
{
	static volatile gsize widgets_repository_row_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_repository_row_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsRepositoryRowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_repository_row_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsRepositoryRow), 0, (GInstanceInitFunc) widgets_repository_row_instance_init, NULL };
		GType widgets_repository_row_type_id;
		widgets_repository_row_type_id = g_type_register_static (gtk_list_box_row_get_type (), "WidgetsRepositoryRow", &g_define_type_info, 0);
		g_once_init_leave (&widgets_repository_row_type_id__volatile, widgets_repository_row_type_id);
	}
	return widgets_repository_row_type_id__volatile;
}


static void
_vala_widgets_repository_row_get_property (GObject * object,
                                           guint property_id,
                                           GValue * value,
                                           GParamSpec * pspec)
{
	WidgetsRepositoryRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_REPOSITORY_ROW, WidgetsRepositoryRow);
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		case WIDGETS_REPOSITORY_ROW_REPOSITORY_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		objects_value_set_repository (value, widgets_repository_row_get_repository (self));
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		break;
#line 730 "RepositoryRow.c"
		default:
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		break;
#line 736 "RepositoryRow.c"
	}
}


static void
_vala_widgets_repository_row_set_property (GObject * object,
                                           guint property_id,
                                           const GValue * value,
                                           GParamSpec * pspec)
{
	WidgetsRepositoryRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_REPOSITORY_ROW, WidgetsRepositoryRow);
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		case WIDGETS_REPOSITORY_ROW_REPOSITORY_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		widgets_repository_row_set_repository (self, objects_value_get_repository (value));
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		break;
#line 757 "RepositoryRow.c"
		default:
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/RepositoryRow.vala"
		break;
#line 763 "RepositoryRow.c"
	}
}



