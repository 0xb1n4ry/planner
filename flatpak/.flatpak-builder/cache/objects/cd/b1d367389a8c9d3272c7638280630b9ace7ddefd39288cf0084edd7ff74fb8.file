/* dummy-persona.c generated by valac 0.40.11, the Vala compiler
 * generated from dummy-persona.vala, do not modify */

/*
 * Copyright (C) 2013 Philip Withnall
 * Copyright (C) 2013 Collabora Ltd.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Philip Withnall <philip@tecnocode.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <folks/folks.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <folks/small-set.h>
#include <folks-internal.h>
#include <gio/gio.h>


#define FOLKS_DUMMY_TYPE_PERSONA (folks_dummy_persona_get_type ())
#define FOLKS_DUMMY_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_DUMMY_TYPE_PERSONA, FolksDummyPersona))
#define FOLKS_DUMMY_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_DUMMY_TYPE_PERSONA, FolksDummyPersonaClass))
#define FOLKS_DUMMY_IS_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_DUMMY_TYPE_PERSONA))
#define FOLKS_DUMMY_IS_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_DUMMY_TYPE_PERSONA))
#define FOLKS_DUMMY_PERSONA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_DUMMY_TYPE_PERSONA, FolksDummyPersonaClass))

typedef struct _FolksDummyPersona FolksDummyPersona;
typedef struct _FolksDummyPersonaClass FolksDummyPersonaClass;
typedef struct _FolksDummyPersonaPrivate FolksDummyPersonaPrivate;
enum  {
	FOLKS_DUMMY_PERSONA_0_PROPERTY,
	FOLKS_DUMMY_PERSONA_LINKABLE_PROPERTIES_PROPERTY,
	FOLKS_DUMMY_PERSONA_WRITEABLE_PROPERTIES_PROPERTY,
	FOLKS_DUMMY_PERSONA_PROPERTY_CHANGE_DELAY_PROPERTY,
	FOLKS_DUMMY_PERSONA_NUM_PROPERTIES
};
static GParamSpec* folks_dummy_persona_properties[FOLKS_DUMMY_PERSONA_NUM_PROPERTIES];

#define FOLKS_DUMMY_TYPE_PERSONA_STORE (folks_dummy_persona_store_get_type ())
#define FOLKS_DUMMY_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_DUMMY_TYPE_PERSONA_STORE, FolksDummyPersonaStore))
#define FOLKS_DUMMY_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_DUMMY_TYPE_PERSONA_STORE, FolksDummyPersonaStoreClass))
#define FOLKS_DUMMY_IS_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_DUMMY_TYPE_PERSONA_STORE))
#define FOLKS_DUMMY_IS_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_DUMMY_TYPE_PERSONA_STORE))
#define FOLKS_DUMMY_PERSONA_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_DUMMY_TYPE_PERSONA_STORE, FolksDummyPersonaStoreClass))

typedef struct _FolksDummyPersonaStore FolksDummyPersonaStore;
typedef struct _FolksDummyPersonaStoreClass FolksDummyPersonaStoreClass;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block1Data Block1Data;
typedef struct _FolksDummyPersonaChangePropertyData FolksDummyPersonaChangePropertyData;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _FolksDummyPersona {
	FolksPersona parent_instance;
	FolksDummyPersonaPrivate * priv;
};

struct _FolksDummyPersonaClass {
	FolksPersonaClass parent_class;
};

struct _FolksDummyPersonaPrivate {
	gchar** _linkable_properties;
	gint _linkable_properties_length1;
	gint __linkable_properties_size_;
	gchar** _writeable_properties;
	gint _writeable_properties_length1;
	gint __writeable_properties_size_;
	gint _property_change_delay;
};

typedef void (*FolksDummyPersonaChangePropertyCallback) (gpointer user_data);
struct _Block1Data {
	int _ref_count_;
	FolksDummyPersona* self;
	FolksDummyPersonaChangePropertyCallback callback;
	gpointer callback_target;
	gpointer _async_data_;
};

struct _FolksDummyPersonaChangePropertyData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksDummyPersona* self;
	gchar* property_name;
	FolksDummyPersonaChangePropertyCallback callback;
	gpointer callback_target;
	Block1Data* _data1_;
	gint _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
};


static gpointer folks_dummy_persona_parent_class = NULL;

GType folks_dummy_persona_get_type (void) G_GNUC_CONST;
#define FOLKS_DUMMY_PERSONA_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_DUMMY_TYPE_PERSONA, FolksDummyPersonaPrivate))
GType folks_dummy_persona_store_get_type (void) G_GNUC_CONST;
FolksDummyPersona* folks_dummy_persona_new (FolksDummyPersonaStore* store,
                                            const gchar* contact_id,
                                            gboolean is_user,
                                            gchar** linkable_properties,
                                            int linkable_properties_length1);
FolksDummyPersona* folks_dummy_persona_construct (GType object_type,
                                                  FolksDummyPersonaStore* store,
                                                  const gchar* contact_id,
                                                  gboolean is_user,
                                                  gchar** linkable_properties,
                                                  int linkable_properties_length1);
static gchar** _vala_array_dup1 (gchar** self,
                          int length);
static gchar** _vala_array_dup2 (gchar** self,
                          int length);
static void folks_dummy_persona_real_linkable_property_to_links (FolksPersona* base,
                                                          const gchar* prop_name,
                                                          FolksPersonaLinkablePropertyCallback callback,
                                                          gpointer callback_target);
void folks_dummy_persona_update_writeable_properties (FolksDummyPersona* self,
                                                      gchar** writeable_properties,
                                                      int writeable_properties_length1);
void folks_dummy_persona_update_linkable_properties (FolksDummyPersona* self,
                                                     gchar** linkable_properties,
                                                     int linkable_properties_length1);
static gchar** _vala_array_dup3 (gchar** self,
                          int length);
static void folks_dummy_persona_change_property_data_free (gpointer _data);
static void folks_dummy_persona_change_property_async_ready_wrapper (GObject *source_object,
                                                              GAsyncResult *res,
                                                              void *user_data);
void folks_dummy_persona_change_property (FolksDummyPersona* self,
                                          const gchar* property_name,
                                          FolksDummyPersonaChangePropertyCallback callback,
                                          gpointer callback_target,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_);
void folks_dummy_persona_change_property_finish (FolksDummyPersona* self,
                                                 GAsyncResult* _res_);
static gboolean folks_dummy_persona_change_property_co (FolksDummyPersonaChangePropertyData* _data_);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
gint folks_dummy_persona_get_property_change_delay (FolksDummyPersona* self);
static gboolean ____lambda4_ (Block1Data* _data1_);
static gboolean _____lambda4__gsource_func (gpointer self);
static gboolean ____lambda5_ (Block1Data* _data1_);
static gboolean _____lambda5__gsource_func (gpointer self);
void folks_dummy_persona_set_property_change_delay (FolksDummyPersona* self,
                                                    gint value);
static void folks_dummy_persona_finalize (GObject * obj);
static void _vala_folks_dummy_persona_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec);
static void _vala_folks_dummy_persona_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);


/**
   * Create a new persona.
   *
   * Create a new persona for the {@link FolksDummy.PersonaStore} ``store``,
   * with the given construct-only properties.
   *
   * The personaâ€™s {@link Folks.Persona.writeable_properties} are initialised to
   * the given ``store``â€™s
   * {@link Folks.PersonaStore.always_writeable_properties}. They may be updated
   * afterwards using {@link FolksDummy.Persona.update_writeable_properties}.
   *
   * @param store the store which will contain the persona
   * @param contact_id a unique free-form string identifier for the persona
   * @param is_user ``true`` if the persona represents the user, ``false``
   * otherwise
   * @param linkable_properties an array of names of the properties which should
   * be used for linking this persona to others
   *
   * @since 0.9.7
   */
static gchar**
_vala_array_dup1 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
#line 111 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	result = g_new0 (gchar*, length + 1);
#line 111 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	for (i = 0; i < length; i++) {
#line 222 "dummy-persona.c"
		gchar* _tmp0_;
#line 111 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_tmp0_ = g_strdup (self[i]);
#line 111 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		result[i] = _tmp0_;
#line 228 "dummy-persona.c"
	}
#line 111 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	return result;
#line 232 "dummy-persona.c"
}


static gchar**
_vala_array_dup2 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	result = g_new0 (gchar*, length + 1);
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	for (i = 0; i < length; i++) {
#line 246 "dummy-persona.c"
		gchar* _tmp0_;
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_tmp0_ = g_strdup (self[i]);
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		result[i] = _tmp0_;
#line 252 "dummy-persona.c"
	}
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	return result;
#line 256 "dummy-persona.c"
}


FolksDummyPersona*
folks_dummy_persona_construct (GType object_type,
                               FolksDummyPersonaStore* store,
                               const gchar* contact_id,
                               gboolean is_user,
                               gchar** linkable_properties,
                               int linkable_properties_length1)
{
	FolksDummyPersona * self = NULL;
	gchar* uid = NULL;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* iid = NULL;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	gchar** _tmp9_;
	gint _tmp9__length1;
	FolksPersonaStore* _tmp10_;
	FolksPersonaStore* _tmp11_;
	gchar** _tmp12_;
	gint _tmp12__length1;
	gchar** _tmp13_;
	gint _tmp13__length1;
	gchar** _tmp14_;
	gint _tmp14__length1;
#line 99 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_return_val_if_fail (store != NULL, NULL);
#line 99 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_return_val_if_fail (contact_id != NULL, NULL);
#line 102 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp0_ = folks_persona_store_get_id ((FolksPersonaStore*) store);
#line 102 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp1_ = _tmp0_;
#line 102 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp2_ = folks_persona_build_uid (BACKEND_NAME, _tmp1_, contact_id);
#line 102 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	uid = _tmp2_;
#line 103 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp3_ = folks_persona_store_get_id ((FolksPersonaStore*) store);
#line 103 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp4_ = _tmp3_;
#line 103 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp5_ = g_strconcat (_tmp4_, ":", NULL);
#line 103 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp6_ = _tmp5_;
#line 103 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp7_ = g_strconcat (_tmp6_, contact_id, NULL);
#line 103 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp8_ = _tmp7_;
#line 103 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_g_free0 (_tmp6_);
#line 103 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	iid = _tmp8_;
#line 105 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self = (FolksDummyPersona*) g_object_new (object_type, "display-id", contact_id, "uid", uid, "iid", iid, "store", store, "is-user", is_user, NULL);
#line 111 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp9_ = (linkable_properties != NULL) ? _vala_array_dup1 (linkable_properties, linkable_properties_length1) : ((gpointer) linkable_properties);
#line 111 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp9__length1 = linkable_properties_length1;
#line 111 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->_linkable_properties = (_vala_array_free (self->priv->_linkable_properties, self->priv->_linkable_properties_length1, (GDestroyNotify) g_free), NULL);
#line 111 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->_linkable_properties = _tmp9_;
#line 111 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->_linkable_properties_length1 = _tmp9__length1;
#line 111 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->__linkable_properties_size_ = self->priv->_linkable_properties_length1;
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp10_ = folks_persona_get_store ((FolksPersona*) self);
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp11_ = _tmp10_;
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp12_ = folks_persona_store_get_always_writeable_properties (_tmp11_, &_tmp12__length1);
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp13_ = _tmp12_;
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp13__length1 = _tmp12__length1;
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp14_ = (_tmp13_ != NULL) ? _vala_array_dup2 (_tmp13_, _tmp13__length1) : ((gpointer) _tmp13_);
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp14__length1 = _tmp13__length1;
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->_writeable_properties = (_vala_array_free (self->priv->_writeable_properties, self->priv->_writeable_properties_length1, (GDestroyNotify) g_free), NULL);
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->_writeable_properties = _tmp14_;
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->_writeable_properties_length1 = _tmp14__length1;
#line 112 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->__writeable_properties_size_ = self->priv->_writeable_properties_length1;
#line 99 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_g_free0 (iid);
#line 99 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_g_free0 (uid);
#line 99 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	return self;
#line 360 "dummy-persona.c"
}


FolksDummyPersona*
folks_dummy_persona_new (FolksDummyPersonaStore* store,
                         const gchar* contact_id,
                         gboolean is_user,
                         gchar** linkable_properties,
                         int linkable_properties_length1)
{
#line 99 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	return folks_dummy_persona_construct (FOLKS_DUMMY_TYPE_PERSONA, store, contact_id, is_user, linkable_properties, linkable_properties_length1);
#line 373 "dummy-persona.c"
}


/**
   * {@inheritDoc}
   *
   * @since 0.9.7
   */
static gpointer
_g_object_ref0 (gpointer self)
{
#line 125 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	return self ? g_object_ref (self) : NULL;
#line 387 "dummy-persona.c"
}


static void
folks_dummy_persona_real_linkable_property_to_links (FolksPersona* base,
                                                     const gchar* prop_name,
                                                     FolksPersonaLinkablePropertyCallback callback,
                                                     gpointer callback_target)
{
	FolksDummyPersona * self;
#line 120 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self = (FolksDummyPersona*) base;
#line 120 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_return_if_fail (prop_name != NULL);
#line 123 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	if (g_strcmp0 (prop_name, "im-addresses") == 0) {
#line 404 "dummy-persona.c"
		FolksImDetails* persona = NULL;
		FolksImDetails* _tmp0_;
		FolksImDetails* _tmp1_;
#line 125 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (self, FOLKS_TYPE_IM_DETAILS) ? ((FolksImDetails*) self) : NULL);
#line 125 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		persona = _tmp0_;
#line 126 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_tmp1_ = persona;
#line 126 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_vala_assert (_tmp1_ != NULL, "persona != null");
#line 416 "dummy-persona.c"
		{
			GeeIterator* _protocol_it = NULL;
			FolksImDetails* _tmp2_;
			GeeMultiMap* _tmp3_;
			GeeMultiMap* _tmp4_;
			GeeSet* _tmp5_;
			GeeSet* _tmp6_;
			GeeIterator* _tmp7_;
			GeeIterator* _tmp8_;
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_tmp2_ = persona;
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_tmp3_ = folks_im_details_get_im_addresses (_tmp2_);
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_tmp4_ = _tmp3_;
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_tmp5_ = gee_multi_map_get_keys (_tmp4_);
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_tmp6_ = _tmp5_;
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_tmp7_ = gee_iterable_iterator ((GeeIterable*) _tmp6_);
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_tmp8_ = _tmp7_;
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_g_object_unref0 (_tmp6_);
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_protocol_it = _tmp8_;
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			while (TRUE) {
#line 446 "dummy-persona.c"
				GeeIterator* _tmp9_;
				gchar* protocol = NULL;
				GeeIterator* _tmp10_;
				gpointer _tmp11_;
				GeeCollection* im_fds = NULL;
				FolksImDetails* _tmp12_;
				GeeMultiMap* _tmp13_;
				GeeMultiMap* _tmp14_;
				const gchar* _tmp15_;
				GeeCollection* _tmp16_;
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp9_ = _protocol_it;
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				if (!gee_iterator_next (_tmp9_)) {
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					break;
#line 463 "dummy-persona.c"
				}
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp10_ = _protocol_it;
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp11_ = gee_iterator_get (_tmp10_);
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				protocol = (gchar*) _tmp11_;
#line 130 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp12_ = persona;
#line 130 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp13_ = folks_im_details_get_im_addresses (_tmp12_);
#line 130 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp14_ = _tmp13_;
#line 130 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp15_ = protocol;
#line 130 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp16_ = gee_multi_map_get (_tmp14_, _tmp15_);
#line 130 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				im_fds = _tmp16_;
#line 483 "dummy-persona.c"
				{
					GeeIterator* _im_fd_it = NULL;
					GeeCollection* _tmp17_;
					GeeIterator* _tmp18_;
#line 132 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp17_ = im_fds;
#line 132 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp18_ = gee_iterable_iterator ((GeeIterable*) _tmp17_);
#line 132 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_im_fd_it = _tmp18_;
#line 132 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					while (TRUE) {
#line 496 "dummy-persona.c"
						GeeIterator* _tmp19_;
						FolksImFieldDetails* im_fd = NULL;
						GeeIterator* _tmp20_;
						gpointer _tmp21_;
						const gchar* _tmp22_;
						gchar* _tmp23_;
						gchar* _tmp24_;
						FolksImFieldDetails* _tmp25_;
						gconstpointer _tmp26_;
						const gchar* _tmp27_;
						gchar* _tmp28_;
						gchar* _tmp29_;
#line 132 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp19_ = _im_fd_it;
#line 132 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						if (!gee_iterator_next (_tmp19_)) {
#line 132 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							break;
#line 515 "dummy-persona.c"
						}
#line 132 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp20_ = _im_fd_it;
#line 132 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp21_ = gee_iterator_get (_tmp20_);
#line 132 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						im_fd = (FolksImFieldDetails*) _tmp21_;
#line 134 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp22_ = protocol;
#line 134 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp23_ = g_strconcat (_tmp22_, ":", NULL);
#line 134 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp24_ = _tmp23_;
#line 134 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp25_ = im_fd;
#line 134 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp26_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) _tmp25_);
#line 134 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp27_ = _tmp26_;
#line 134 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp28_ = g_strconcat (_tmp24_, (const gchar*) _tmp27_, NULL);
#line 134 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp29_ = _tmp28_;
#line 134 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						callback (_tmp29_, callback_target);
#line 134 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_g_free0 (_tmp29_);
#line 134 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_g_free0 (_tmp24_);
#line 132 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_g_object_unref0 (im_fd);
#line 547 "dummy-persona.c"
					}
#line 132 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_g_object_unref0 (_im_fd_it);
#line 551 "dummy-persona.c"
				}
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_g_object_unref0 (im_fds);
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_g_free0 (protocol);
#line 557 "dummy-persona.c"
			}
#line 128 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_g_object_unref0 (_protocol_it);
#line 561 "dummy-persona.c"
		}
#line 123 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_g_object_unref0 (persona);
#line 565 "dummy-persona.c"
	} else {
#line 138 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		if (g_strcmp0 (prop_name, "local-ids") == 0) {
#line 569 "dummy-persona.c"
			FolksLocalIdDetails* persona = NULL;
			FolksLocalIdDetails* _tmp30_;
			FolksLocalIdDetails* _tmp31_;
#line 140 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_tmp30_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (self, FOLKS_TYPE_LOCAL_ID_DETAILS) ? ((FolksLocalIdDetails*) self) : NULL);
#line 140 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			persona = _tmp30_;
#line 141 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_tmp31_ = persona;
#line 141 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_vala_assert (_tmp31_ != NULL, "persona != null");
#line 581 "dummy-persona.c"
			{
				GeeIterator* _id_it = NULL;
				FolksLocalIdDetails* _tmp32_;
				GeeSet* _tmp33_;
				GeeSet* _tmp34_;
				GeeIterator* _tmp35_;
#line 143 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp32_ = persona;
#line 143 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp33_ = folks_local_id_details_get_local_ids (_tmp32_);
#line 143 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp34_ = _tmp33_;
#line 143 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp35_ = gee_iterable_iterator ((GeeIterable*) _tmp34_);
#line 143 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_id_it = _tmp35_;
#line 143 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				while (TRUE) {
#line 600 "dummy-persona.c"
					GeeIterator* _tmp36_;
					gchar* id = NULL;
					GeeIterator* _tmp37_;
					gpointer _tmp38_;
					const gchar* _tmp39_;
#line 143 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp36_ = _id_it;
#line 143 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					if (!gee_iterator_next (_tmp36_)) {
#line 143 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						break;
#line 612 "dummy-persona.c"
					}
#line 143 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp37_ = _id_it;
#line 143 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp38_ = gee_iterator_get (_tmp37_);
#line 143 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					id = (gchar*) _tmp38_;
#line 145 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp39_ = id;
#line 145 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					callback (_tmp39_, callback_target);
#line 143 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_g_free0 (id);
#line 626 "dummy-persona.c"
				}
#line 143 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_g_object_unref0 (_id_it);
#line 630 "dummy-persona.c"
			}
#line 138 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_g_object_unref0 (persona);
#line 634 "dummy-persona.c"
		} else {
#line 148 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			if (g_strcmp0 (prop_name, "web-service-addresses") == 0) {
#line 638 "dummy-persona.c"
				FolksWebServiceDetails* persona = NULL;
				FolksWebServiceDetails* _tmp40_;
				FolksWebServiceDetails* _tmp41_;
#line 150 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp40_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (self, FOLKS_TYPE_WEB_SERVICE_DETAILS) ? ((FolksWebServiceDetails*) self) : NULL);
#line 150 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				persona = _tmp40_;
#line 151 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp41_ = persona;
#line 151 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_vala_assert (_tmp41_ != NULL, "persona != null");
#line 650 "dummy-persona.c"
				{
					GeeIterator* _web_service_it = NULL;
					FolksWebServiceDetails* _tmp42_;
					GeeMultiMap* _tmp43_;
					GeeMultiMap* _tmp44_;
					GeeSet* _tmp45_;
					GeeSet* _tmp46_;
					GeeIterator* _tmp47_;
					GeeIterator* _tmp48_;
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp42_ = persona;
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp43_ = folks_web_service_details_get_web_service_addresses (_tmp42_);
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp44_ = _tmp43_;
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp45_ = gee_multi_map_get_keys (_tmp44_);
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp46_ = _tmp45_;
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp47_ = gee_iterable_iterator ((GeeIterable*) _tmp46_);
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp48_ = _tmp47_;
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_g_object_unref0 (_tmp46_);
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_web_service_it = _tmp48_;
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					while (TRUE) {
#line 680 "dummy-persona.c"
						GeeIterator* _tmp49_;
						gchar* web_service = NULL;
						GeeIterator* _tmp50_;
						gpointer _tmp51_;
						GeeCollection* web_service_addresses = NULL;
						FolksWebServiceDetails* _tmp52_;
						GeeMultiMap* _tmp53_;
						GeeMultiMap* _tmp54_;
						const gchar* _tmp55_;
						GeeCollection* _tmp56_;
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp49_ = _web_service_it;
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						if (!gee_iterator_next (_tmp49_)) {
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							break;
#line 697 "dummy-persona.c"
						}
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp50_ = _web_service_it;
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp51_ = gee_iterator_get (_tmp50_);
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						web_service = (gchar*) _tmp51_;
#line 155 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp52_ = persona;
#line 155 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp53_ = folks_web_service_details_get_web_service_addresses (_tmp52_);
#line 155 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp54_ = _tmp53_;
#line 155 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp55_ = web_service;
#line 155 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp56_ = gee_multi_map_get (_tmp54_, _tmp55_);
#line 155 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						web_service_addresses = _tmp56_;
#line 717 "dummy-persona.c"
						{
							GeeIterator* _ws_fd_it = NULL;
							GeeCollection* _tmp57_;
							GeeIterator* _tmp58_;
#line 158 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							_tmp57_ = web_service_addresses;
#line 158 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							_tmp58_ = gee_iterable_iterator ((GeeIterable*) _tmp57_);
#line 158 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							_ws_fd_it = _tmp58_;
#line 158 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							while (TRUE) {
#line 730 "dummy-persona.c"
								GeeIterator* _tmp59_;
								FolksWebServiceFieldDetails* ws_fd = NULL;
								GeeIterator* _tmp60_;
								gpointer _tmp61_;
								const gchar* _tmp62_;
								gchar* _tmp63_;
								gchar* _tmp64_;
								FolksWebServiceFieldDetails* _tmp65_;
								gconstpointer _tmp66_;
								const gchar* _tmp67_;
								gchar* _tmp68_;
								gchar* _tmp69_;
#line 158 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								_tmp59_ = _ws_fd_it;
#line 158 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								if (!gee_iterator_next (_tmp59_)) {
#line 158 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
									break;
#line 749 "dummy-persona.c"
								}
#line 158 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								_tmp60_ = _ws_fd_it;
#line 158 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								_tmp61_ = gee_iterator_get (_tmp60_);
#line 158 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								ws_fd = (FolksWebServiceFieldDetails*) _tmp61_;
#line 160 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								_tmp62_ = web_service;
#line 160 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								_tmp63_ = g_strconcat (_tmp62_, ":", NULL);
#line 160 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								_tmp64_ = _tmp63_;
#line 160 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								_tmp65_ = ws_fd;
#line 160 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								_tmp66_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) _tmp65_);
#line 160 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								_tmp67_ = _tmp66_;
#line 160 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								_tmp68_ = g_strconcat (_tmp64_, (const gchar*) _tmp67_, NULL);
#line 160 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								_tmp69_ = _tmp68_;
#line 160 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								callback (_tmp69_, callback_target);
#line 160 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								_g_free0 (_tmp69_);
#line 160 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								_g_free0 (_tmp64_);
#line 158 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								_g_object_unref0 (ws_fd);
#line 781 "dummy-persona.c"
							}
#line 158 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							_g_object_unref0 (_ws_fd_it);
#line 785 "dummy-persona.c"
						}
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_g_object_unref0 (web_service_addresses);
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_g_free0 (web_service);
#line 791 "dummy-persona.c"
					}
#line 153 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_g_object_unref0 (_web_service_it);
#line 795 "dummy-persona.c"
				}
#line 148 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_g_object_unref0 (persona);
#line 799 "dummy-persona.c"
			} else {
#line 164 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				if (g_strcmp0 (prop_name, "email-addresses") == 0) {
#line 803 "dummy-persona.c"
					FolksEmailDetails* persona = NULL;
					FolksEmailDetails* _tmp70_;
					FolksEmailDetails* _tmp71_;
#line 166 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp70_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (self, FOLKS_TYPE_EMAIL_DETAILS) ? ((FolksEmailDetails*) self) : NULL);
#line 166 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					persona = _tmp70_;
#line 167 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp71_ = persona;
#line 167 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_vala_assert (_tmp71_ != NULL, "persona != null");
#line 815 "dummy-persona.c"
					{
						GeeIterator* _email_it = NULL;
						FolksEmailDetails* _tmp72_;
						GeeSet* _tmp73_;
						GeeSet* _tmp74_;
						GeeIterator* _tmp75_;
#line 169 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp72_ = persona;
#line 169 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp73_ = folks_email_details_get_email_addresses (_tmp72_);
#line 169 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp74_ = _tmp73_;
#line 169 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_tmp75_ = gee_iterable_iterator ((GeeIterable*) _tmp74_);
#line 169 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_email_it = _tmp75_;
#line 169 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						while (TRUE) {
#line 834 "dummy-persona.c"
							GeeIterator* _tmp76_;
							FolksEmailFieldDetails* email = NULL;
							GeeIterator* _tmp77_;
							gpointer _tmp78_;
							FolksEmailFieldDetails* _tmp79_;
							gconstpointer _tmp80_;
							const gchar* _tmp81_;
#line 169 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							_tmp76_ = _email_it;
#line 169 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							if (!gee_iterator_next (_tmp76_)) {
#line 169 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
								break;
#line 848 "dummy-persona.c"
							}
#line 169 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							_tmp77_ = _email_it;
#line 169 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							_tmp78_ = gee_iterator_get (_tmp77_);
#line 169 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							email = (FolksEmailFieldDetails*) _tmp78_;
#line 171 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							_tmp79_ = email;
#line 171 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							_tmp80_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) _tmp79_);
#line 171 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							_tmp81_ = _tmp80_;
#line 171 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							callback ((const gchar*) _tmp81_, callback_target);
#line 169 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
							_g_object_unref0 (email);
#line 866 "dummy-persona.c"
						}
#line 169 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_g_object_unref0 (_email_it);
#line 870 "dummy-persona.c"
					}
#line 164 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_g_object_unref0 (persona);
#line 874 "dummy-persona.c"
				} else {
#line 177 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					FOLKS_PERSONA_CLASS (folks_dummy_persona_parent_class)->linkable_property_to_links (G_TYPE_CHECK_INSTANCE_CAST (self, FOLKS_TYPE_PERSONA, FolksPersona), prop_name, callback, callback_target);
#line 878 "dummy-persona.c"
				}
			}
		}
	}
}


/**
   * Update the personaâ€™s set of writeable properties.
   *
   * Update the {@link Folks.Persona.writeable_properties} property to contain
   * the union of {@link Folks.PersonaStore.always_writeable_properties} from
   * the personaâ€™s store, and the given ``writeable_properties``.
   *
   * This should be used to simulate a change in the backing store for the
   * persona which affects the writeability of one or more of its properties.
   *
   * @since 0.9.7
   */
void
folks_dummy_persona_update_writeable_properties (FolksDummyPersona* self,
                                                 gchar** writeable_properties,
                                                 int writeable_properties_length1)
{
	GeeHashSet* new_writeable_properties = NULL;
	GeeHashSet* _tmp0_;
	FolksPersonaStore* _tmp1_;
	FolksPersonaStore* _tmp2_;
	gchar** _tmp3_;
	gint _tmp3__length1;
	gchar** _tmp4_;
	gint _tmp4__length1;
	gboolean changed = FALSE;
	gchar** _tmp11_;
	gint _tmp11__length1;
	GeeHashSet* _tmp12_;
	gint _tmp13_;
	gint _tmp14_;
	gboolean _tmp19_;
#line 201 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_return_if_fail (self != NULL);
#line 203 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp0_ = gee_hash_set_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, NULL, NULL, NULL, NULL, NULL, NULL);
#line 203 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	new_writeable_properties = _tmp0_;
#line 205 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp1_ = folks_persona_get_store ((FolksPersona*) self);
#line 205 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp2_ = _tmp1_;
#line 205 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp3_ = folks_persona_store_get_always_writeable_properties (_tmp2_, &_tmp3__length1);
#line 205 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp4_ = _tmp3_;
#line 205 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp4__length1 = _tmp3__length1;
#line 934 "dummy-persona.c"
	{
		gchar** p_collection = NULL;
		gint p_collection_length1 = 0;
		gint _p_collection_size_ = 0;
		gint p_it = 0;
#line 205 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		p_collection = _tmp4_;
#line 205 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		p_collection_length1 = _tmp4__length1;
#line 205 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		for (p_it = 0; p_it < _tmp4__length1; p_it = p_it + 1) {
#line 946 "dummy-persona.c"
			gchar* _tmp5_;
			gchar* p = NULL;
#line 205 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_tmp5_ = g_strdup (p_collection[p_it]);
#line 205 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			p = _tmp5_;
#line 953 "dummy-persona.c"
			{
				GeeHashSet* _tmp6_;
				const gchar* _tmp7_;
#line 206 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp6_ = new_writeable_properties;
#line 206 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp7_ = p;
#line 206 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp6_, _tmp7_);
#line 205 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_g_free0 (p);
#line 965 "dummy-persona.c"
			}
		}
	}
	{
		gchar** p_collection = NULL;
		gint p_collection_length1 = 0;
		gint _p_collection_size_ = 0;
		gint p_it = 0;
#line 207 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		p_collection = writeable_properties;
#line 207 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		p_collection_length1 = writeable_properties_length1;
#line 207 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		for (p_it = 0; p_it < writeable_properties_length1; p_it = p_it + 1) {
#line 980 "dummy-persona.c"
			gchar* _tmp8_;
			gchar* p = NULL;
#line 207 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_tmp8_ = g_strdup (p_collection[p_it]);
#line 207 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			p = _tmp8_;
#line 987 "dummy-persona.c"
			{
				GeeHashSet* _tmp9_;
				const gchar* _tmp10_;
#line 208 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp9_ = new_writeable_properties;
#line 208 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp10_ = p;
#line 208 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp9_, _tmp10_);
#line 207 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_g_free0 (p);
#line 999 "dummy-persona.c"
			}
		}
	}
#line 211 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	changed = FALSE;
#line 213 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp11_ = self->priv->_writeable_properties;
#line 213 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp11__length1 = self->priv->_writeable_properties_length1;
#line 213 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp12_ = new_writeable_properties;
#line 213 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp13_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp12_);
#line 213 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp14_ = _tmp13_;
#line 213 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	if (_tmp11__length1 != _tmp14_) {
#line 215 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		changed = TRUE;
#line 1019 "dummy-persona.c"
	} else {
		gchar** _tmp15_;
		gint _tmp15__length1;
#line 219 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_tmp15_ = self->priv->_writeable_properties;
#line 219 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_tmp15__length1 = self->priv->_writeable_properties_length1;
#line 1027 "dummy-persona.c"
		{
			gchar** p_collection = NULL;
			gint p_collection_length1 = 0;
			gint _p_collection_size_ = 0;
			gint p_it = 0;
#line 219 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			p_collection = _tmp15_;
#line 219 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			p_collection_length1 = _tmp15__length1;
#line 219 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			for (p_it = 0; p_it < _tmp15__length1; p_it = p_it + 1) {
#line 1039 "dummy-persona.c"
				gchar* _tmp16_;
				gchar* p = NULL;
#line 219 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				_tmp16_ = g_strdup (p_collection[p_it]);
#line 219 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
				p = _tmp16_;
#line 1046 "dummy-persona.c"
				{
					GeeHashSet* _tmp17_;
					const gchar* _tmp18_;
#line 221 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp17_ = new_writeable_properties;
#line 221 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_tmp18_ = p;
#line 221 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					if (gee_abstract_collection_contains ((GeeAbstractCollection*) _tmp17_, _tmp18_) == FALSE) {
#line 223 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						changed = TRUE;
#line 224 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						_g_free0 (p);
#line 224 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
						break;
#line 1062 "dummy-persona.c"
					}
#line 219 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
					_g_free0 (p);
#line 1066 "dummy-persona.c"
				}
			}
		}
	}
#line 229 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp19_ = changed;
#line 229 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	if (_tmp19_ == TRUE) {
#line 1075 "dummy-persona.c"
		GeeHashSet* _tmp20_;
		gint _tmp21_ = 0;
		gpointer* _tmp22_;
#line 231 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_tmp20_ = new_writeable_properties;
#line 231 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_tmp22_ = gee_collection_to_array ((GeeCollection*) _tmp20_, &_tmp21_);
#line 231 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		self->priv->_writeable_properties = (_vala_array_free (self->priv->_writeable_properties, self->priv->_writeable_properties_length1, (GDestroyNotify) g_free), NULL);
#line 231 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		self->priv->_writeable_properties = _tmp22_;
#line 231 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		self->priv->_writeable_properties_length1 = _tmp21_;
#line 231 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		self->priv->__writeable_properties_size_ = self->priv->_writeable_properties_length1;
#line 232 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		g_object_notify ((GObject*) self, "writeable-properties");
#line 1093 "dummy-persona.c"
	}
#line 201 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_g_object_unref0 (new_writeable_properties);
#line 1097 "dummy-persona.c"
}


/**
   * Update the personaâ€™s set of linkable properties.
   *
   * Update the {@link Folks.Persona.linkable_properties} property to contain
   * the given ``linkable_properties``.
   *
   * @param linkable_properties new set of linkable property names, in lower
   * case, hyphenated form
   * @since 0.9.7
   */
static gchar**
_vala_array_dup3 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
#line 257 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	result = g_new0 (gchar*, length + 1);
#line 257 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	for (i = 0; i < length; i++) {
#line 1121 "dummy-persona.c"
		gchar* _tmp0_;
#line 257 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_tmp0_ = g_strdup (self[i]);
#line 257 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		result[i] = _tmp0_;
#line 1127 "dummy-persona.c"
	}
#line 257 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	return result;
#line 1131 "dummy-persona.c"
}


void
folks_dummy_persona_update_linkable_properties (FolksDummyPersona* self,
                                                gchar** linkable_properties,
                                                int linkable_properties_length1)
{
	FolksSmallSet* new_linkable_properties = NULL;
	FolksSmallSet* _tmp0_;
	FolksSmallSet* _tmp1_;
	FolksSmallSet* old_linkable_properties = NULL;
	FolksSmallSet* _tmp2_;
	FolksSmallSet* _tmp3_;
	gchar** _tmp4_;
	gint _tmp4__length1;
	FolksSmallSet* _tmp5_;
	FolksSmallSet* _tmp6_;
#line 246 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_return_if_fail (self != NULL);
#line 248 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp0_ = folks_small_set_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, NULL, NULL, NULL, NULL, NULL, NULL);
#line 248 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	new_linkable_properties = _tmp0_;
#line 249 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp1_ = new_linkable_properties;
#line 249 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	gee_collection_add_all_array ((GeeCollection*) _tmp1_, linkable_properties, linkable_properties_length1);
#line 251 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp2_ = folks_small_set_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, NULL, NULL, NULL, NULL, NULL, NULL);
#line 251 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	old_linkable_properties = _tmp2_;
#line 252 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp3_ = old_linkable_properties;
#line 252 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp4_ = self->priv->_linkable_properties;
#line 252 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp4__length1 = self->priv->_linkable_properties_length1;
#line 252 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	gee_collection_add_all_array ((GeeCollection*) _tmp3_, _tmp4_, _tmp4__length1);
#line 254 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp5_ = old_linkable_properties;
#line 254 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp6_ = new_linkable_properties;
#line 254 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	if (!folks_internal_equal_sets (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, (GeeSet*) _tmp5_, (GeeSet*) _tmp6_)) {
#line 1178 "dummy-persona.c"
		gchar** _tmp7_;
		gint _tmp7__length1;
#line 257 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_tmp7_ = (linkable_properties != NULL) ? _vala_array_dup3 (linkable_properties, linkable_properties_length1) : ((gpointer) linkable_properties);
#line 257 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_tmp7__length1 = linkable_properties_length1;
#line 257 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		self->priv->_linkable_properties = (_vala_array_free (self->priv->_linkable_properties, self->priv->_linkable_properties_length1, (GDestroyNotify) g_free), NULL);
#line 257 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		self->priv->_linkable_properties = _tmp7_;
#line 257 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		self->priv->_linkable_properties_length1 = _tmp7__length1;
#line 257 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		self->priv->__linkable_properties_size_ = self->priv->_linkable_properties_length1;
#line 258 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		g_object_notify ((GObject*) self, "linkable-properties");
#line 1195 "dummy-persona.c"
	}
#line 246 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_g_object_unref0 (old_linkable_properties);
#line 246 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_g_object_unref0 (new_linkable_properties);
#line 1201 "dummy-persona.c"
}


static void
folks_dummy_persona_change_property_data_free (gpointer _data)
{
	FolksDummyPersonaChangePropertyData* _data_;
	_data_ = _data;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_g_free0 (_data_->property_name);
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_g_object_unref0 (_data_->self);
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_slice_free (FolksDummyPersonaChangePropertyData, _data_);
#line 1216 "dummy-persona.c"
}


static void
folks_dummy_persona_change_property_async_ready_wrapper (GObject *source_object,
                                                         GAsyncResult *res,
                                                         void *user_data)
{
	FolksDummyPersonaChangePropertyData* _task_data_;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	if (_task_data_->_callback_ != NULL) {
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 1232 "dummy-persona.c"
	}
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_task_data_->_task_complete_ = TRUE;
#line 1236 "dummy-persona.c"
}


void
folks_dummy_persona_change_property (FolksDummyPersona* self,
                                     const gchar* property_name,
                                     FolksDummyPersonaChangePropertyCallback callback,
                                     gpointer callback_target,
                                     GAsyncReadyCallback _callback_,
                                     gpointer _user_data_)
{
	FolksDummyPersonaChangePropertyData* _data_;
	FolksDummyPersona* _tmp0_;
	gchar* _tmp1_;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_ = g_slice_new0 (FolksDummyPersonaChangePropertyData);
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_->_callback_ = _callback_;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_dummy_persona_change_property_async_ready_wrapper, _user_data_);
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	if (_callback_ == NULL) {
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_data_->_task_complete_ = TRUE;
#line 1261 "dummy-persona.c"
	}
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_dummy_persona_change_property_data_free);
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_->self = _tmp0_;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp1_ = g_strdup (property_name);
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_g_free0 (_data_->property_name);
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_->property_name = _tmp1_;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_->callback = callback;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_->callback_target = callback_target;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	folks_dummy_persona_change_property_co (_data_);
#line 1281 "dummy-persona.c"
}


void
folks_dummy_persona_change_property_finish (FolksDummyPersona* self,
                                            GAsyncResult* _res_)
{
	FolksDummyPersonaChangePropertyData* _data_;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 1292 "dummy-persona.c"
}


/**
   * Change a property in the simulated backing store.
   *
   * This triggers a property change in the simulated backing store, applying
   * the current {@link FolksDummy.Persona.property_change_delay} before calling
   * the given ``callback`` which should actually effect the property change.
   *
   * @param property_name name of the property being changed
   * @param callback callback to call once the change delay has passed
   * @since 0.9.7
   */
static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_atomic_int_inc (&_data1_->_ref_count_);
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	return _data1_;
#line 1314 "dummy-persona.c"
}


static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
#line 1325 "dummy-persona.c"
		FolksDummyPersona* self;
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		self = _data1_->self;
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_g_object_unref0 (self);
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		g_slice_free (Block1Data, _data1_);
#line 1333 "dummy-persona.c"
	}
}


static gboolean
____lambda4_ (Block1Data* _data1_)
{
	FolksDummyPersona* self;
	gboolean result = FALSE;
#line 316 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self = _data1_->self;
#line 318 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data1_->callback (_data1_->callback_target);
#line 319 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	folks_dummy_persona_change_property_co (_data1_->_async_data_);
#line 320 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	result = FALSE;
#line 320 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	return result;
#line 1353 "dummy-persona.c"
}


static gboolean
_____lambda4__gsource_func (gpointer self)
{
	gboolean result;
	result = ____lambda4_ (self);
#line 316 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	return result;
#line 1364 "dummy-persona.c"
}


static gboolean
____lambda5_ (Block1Data* _data1_)
{
	FolksDummyPersona* self;
	gboolean result = FALSE;
#line 328 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self = _data1_->self;
#line 330 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data1_->callback (_data1_->callback_target);
#line 331 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	folks_dummy_persona_change_property_co (_data1_->_async_data_);
#line 332 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	result = FALSE;
#line 332 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	return result;
#line 1383 "dummy-persona.c"
}


static gboolean
_____lambda5__gsource_func (gpointer self)
{
	gboolean result;
	result = ____lambda5_ (self);
#line 328 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	return result;
#line 1394 "dummy-persona.c"
}


static gboolean
folks_dummy_persona_change_property_co (FolksDummyPersonaChangePropertyData* _data_)
{
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	switch (_data_->_state_) {
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		case 0:
#line 1405 "dummy-persona.c"
		goto _state_0;
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		case 1:
#line 1409 "dummy-persona.c"
		goto _state_1;
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		case 2:
#line 1413 "dummy-persona.c"
		goto _state_2;
		default:
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		g_assert_not_reached ();
#line 1418 "dummy-persona.c"
	}
	_state_0:
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_->_data1_ = g_slice_new0 (Block1Data);
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_->_data1_->_ref_count_ = 1;
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_->_data1_->self = g_object_ref (_data_->self);
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_->_data1_->callback = _data_->callback;
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_->_data1_->callback_target = _data_->callback_target;
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_->_data1_->_async_data_ = _data_;
#line 308 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_->_tmp0_ = _data_->self->priv->_property_change_delay;
#line 308 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	if (_data_->_tmp0_ < 0) {
#line 311 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_data_->_data1_->callback (_data_->_data1_->callback_target);
#line 1439 "dummy-persona.c"
	} else {
#line 313 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		_data_->_tmp1_ = _data_->self->priv->_property_change_delay;
#line 313 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		if (_data_->_tmp1_ == 0) {
#line 316 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, _____lambda4__gsource_func, block1_data_ref (_data_->_data1_), block1_data_unref);
#line 323 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_data_->_state_ = 1;
#line 323 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			return FALSE;
#line 1451 "dummy-persona.c"
			_state_1:
			;
		} else {
#line 328 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_data_->_tmp2_ = _data_->self->priv->_property_change_delay;
#line 328 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) _data_->_tmp2_, _____lambda5__gsource_func, block1_data_ref (_data_->_data1_), block1_data_unref);
#line 335 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			_data_->_state_ = 2;
#line 335 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			return FALSE;
#line 1463 "dummy-persona.c"
			_state_2:
			;
		}
	}
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	block1_data_unref (_data_->_data1_);
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_data_->_data1_ = NULL;
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	if (_data_->_state_ != 0) {
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1480 "dummy-persona.c"
		}
	}
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_object_unref (_data_->_async_result);
#line 305 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	return FALSE;
#line 1487 "dummy-persona.c"
}


static gchar**
folks_dummy_persona_real_get_linkable_properties (FolksPersona* base,
                                                  int* result_length1)
{
	gchar** result;
	FolksDummyPersona* self;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
#line 64 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self = (FolksDummyPersona*) base;
#line 64 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp0_ = self->priv->_linkable_properties;
#line 64 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp0__length1 = self->priv->_linkable_properties_length1;
#line 64 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp1_ = _tmp0_;
#line 64 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp1__length1 = _tmp0__length1;
#line 64 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	if (result_length1) {
#line 64 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		*result_length1 = _tmp1__length1;
#line 1515 "dummy-persona.c"
	}
#line 64 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	result = _tmp1_;
#line 64 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	return result;
#line 1521 "dummy-persona.c"
}


static gchar**
folks_dummy_persona_real_get_writeable_properties (FolksPersona* base,
                                                   int* result_length1)
{
	gchar** result;
	FolksDummyPersona* self;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
#line 76 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self = (FolksDummyPersona*) base;
#line 76 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp0_ = self->priv->_writeable_properties;
#line 76 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp0__length1 = self->priv->_writeable_properties_length1;
#line 76 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp1_ = _tmp0_;
#line 76 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp1__length1 = _tmp0__length1;
#line 76 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	if (result_length1) {
#line 76 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		*result_length1 = _tmp1__length1;
#line 1549 "dummy-persona.c"
	}
#line 76 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	result = _tmp1_;
#line 76 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	return result;
#line 1555 "dummy-persona.c"
}


gint
folks_dummy_persona_get_property_change_delay (FolksDummyPersona* self)
{
	gint result;
	gint _tmp0_;
#line 279 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 279 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp0_ = self->priv->_property_change_delay;
#line 279 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	result = _tmp0_;
#line 279 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	return result;
#line 1572 "dummy-persona.c"
}


void
folks_dummy_persona_set_property_change_delay (FolksDummyPersona* self,
                                               gint value)
{
#line 279 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_return_if_fail (self != NULL);
#line 279 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	if (folks_dummy_persona_get_property_change_delay (self) != value) {
#line 279 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		self->priv->_property_change_delay = value;
#line 279 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		g_object_notify_by_pspec ((GObject *) self, folks_dummy_persona_properties[FOLKS_DUMMY_PERSONA_PROPERTY_CHANGE_DELAY_PROPERTY]);
#line 1588 "dummy-persona.c"
	}
}


static void
folks_dummy_persona_class_init (FolksDummyPersonaClass * klass)
{
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	folks_dummy_persona_parent_class = g_type_class_peek_parent (klass);
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_type_class_add_private (klass, sizeof (FolksDummyPersonaPrivate));
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	((FolksPersonaClass *) klass)->linkable_property_to_links = (void (*) (FolksPersona *, const gchar*, FolksPersonaLinkablePropertyCallback, gpointer)) folks_dummy_persona_real_linkable_property_to_links;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	FOLKS_PERSONA_CLASS (klass)->get_linkable_properties = folks_dummy_persona_real_get_linkable_properties;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	FOLKS_PERSONA_CLASS (klass)->get_writeable_properties = folks_dummy_persona_real_get_writeable_properties;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_folks_dummy_persona_get_property;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_folks_dummy_persona_set_property;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_dummy_persona_finalize;
#line 1612 "dummy-persona.c"
	/**
	   * {@inheritDoc}
	   *
	   * @since 0.9.7
	   */
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_DUMMY_PERSONA_LINKABLE_PROPERTIES_PROPERTY, folks_dummy_persona_properties[FOLKS_DUMMY_PERSONA_LINKABLE_PROPERTIES_PROPERTY] = g_param_spec_boxed ("linkable-properties", "linkable-properties", "linkable-properties", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1620 "dummy-persona.c"
	/**
	   * {@inheritDoc}
	   *
	   * @since 0.9.7
	   */
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_DUMMY_PERSONA_WRITEABLE_PROPERTIES_PROPERTY, folks_dummy_persona_properties[FOLKS_DUMMY_PERSONA_WRITEABLE_PROPERTIES_PROPERTY] = g_param_spec_boxed ("writeable-properties", "writeable-properties", "writeable-properties", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 1628 "dummy-persona.c"
	/**
	   * Delay between property changes and notifications.
	   *
	   * This sets an optional delay between client code requesting a property
	   * change (e.g. by calling {@link Folks.NameDetails.change_nickname}) and the
	   * property change taking place and a {@link Object.notify} signal being
	   * emitted for it.
	   *
	   * Delays are in milliseconds. Negative delays mean that property change
	   * notifications happen synchronously in the change method. A delay of 0
	   * means that property change notifications happen in an idle callback
	   * immediately after the change method. A positive delay means that property
	   * change notifications happen that many milliseconds after the change method
	   * is called.
	   *
	   * @since 0.9.7
	   */
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_DUMMY_PERSONA_PROPERTY_CHANGE_DELAY_PROPERTY, folks_dummy_persona_properties[FOLKS_DUMMY_PERSONA_PROPERTY_CHANGE_DELAY_PROPERTY] = g_param_spec_int ("property-change-delay", "property-change-delay", "property-change-delay", G_MININT, G_MAXINT, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 1648 "dummy-persona.c"
}


static void
folks_dummy_persona_instance_init (FolksDummyPersona * self)
{
	gchar** _tmp0_;
	gchar** _tmp1_;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv = FOLKS_DUMMY_PERSONA_GET_PRIVATE (self);
#line 55 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp0_ = g_new0 (gchar*, 0 + 1);
#line 55 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->_linkable_properties = _tmp0_;
#line 55 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->_linkable_properties_length1 = 0;
#line 55 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->__linkable_properties_size_ = self->priv->_linkable_properties_length1;
#line 67 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	_tmp1_ = g_new0 (gchar*, 0 + 1);
#line 67 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->_writeable_properties = _tmp1_;
#line 67 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->_writeable_properties_length1 = 0;
#line 67 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->__writeable_properties_size_ = self->priv->_writeable_properties_length1;
#line 279 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->_property_change_delay = 0;
#line 1677 "dummy-persona.c"
}


static void
folks_dummy_persona_finalize (GObject * obj)
{
	FolksDummyPersona * self;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_DUMMY_TYPE_PERSONA, FolksDummyPersona);
#line 55 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->_linkable_properties = (_vala_array_free (self->priv->_linkable_properties, self->priv->_linkable_properties_length1, (GDestroyNotify) g_free), NULL);
#line 67 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	self->priv->_writeable_properties = (_vala_array_free (self->priv->_writeable_properties, self->priv->_writeable_properties_length1, (GDestroyNotify) g_free), NULL);
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	G_OBJECT_CLASS (folks_dummy_persona_parent_class)->finalize (obj);
#line 1693 "dummy-persona.c"
}


/**
 * A persona subclass representing a single contact.
 *
 * This mocks up a â€˜thinâ€™ persona which implements none of the available
 * property interfaces provided by libfolks, and is designed as a base class to
 * be subclassed by personas which will implement one or more of these
 * interfaces. For example, {@link FolksDummy.FullPersona} is one such subclass
 * which implements all available interfaces.
 *
 * There are two sides to this classâ€™ interface: the normal methods required by
 * {@link Folks.Persona}, such as
 * {@link Folks.Persona.linkable_property_to_links},
 * and the backend methods which should be called by test driver code to
 * simulate changes in the backing store providing this persona, such as
 * {@link FolksDummy.Persona.update_writeable_properties}. The ``update_``,
 * ``register_`` and ``unregister_`` prefixes are commonly used for backend
 * methods.
 *
 * All property changes for contact details of subclasses of
 * {@link FolksDummy.Persona} have a configurable delay before taking effect,
 * which can be controlled by {@link FolksDummy.Persona.property_change_delay}.
 *
 * The API in {@link FolksDummy} is unstable and may change wildly. It is
 * designed mostly for use by libfolks unit tests.
 *
 * @since 0.9.7
 */
GType
folks_dummy_persona_get_type (void)
{
	static volatile gsize folks_dummy_persona_type_id__volatile = 0;
	if (g_once_init_enter (&folks_dummy_persona_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksDummyPersonaClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_dummy_persona_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksDummyPersona), 0, (GInstanceInitFunc) folks_dummy_persona_instance_init, NULL };
		GType folks_dummy_persona_type_id;
		folks_dummy_persona_type_id = g_type_register_static (FOLKS_TYPE_PERSONA, "FolksDummyPersona", &g_define_type_info, 0);
		g_once_init_leave (&folks_dummy_persona_type_id__volatile, folks_dummy_persona_type_id);
	}
	return folks_dummy_persona_type_id__volatile;
}


static void
_vala_folks_dummy_persona_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec)
{
	FolksDummyPersona * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_DUMMY_TYPE_PERSONA, FolksDummyPersona);
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	switch (property_id) {
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		case FOLKS_DUMMY_PERSONA_LINKABLE_PROPERTIES_PROPERTY:
#line 1750 "dummy-persona.c"
		{
			int length;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			g_value_set_boxed (value, folks_persona_get_linkable_properties ((FolksPersona*) self, &length));
#line 1755 "dummy-persona.c"
		}
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		break;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		case FOLKS_DUMMY_PERSONA_WRITEABLE_PROPERTIES_PROPERTY:
#line 1761 "dummy-persona.c"
		{
			int length;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
			g_value_set_boxed (value, folks_persona_get_writeable_properties ((FolksPersona*) self, &length));
#line 1766 "dummy-persona.c"
		}
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		break;
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		case FOLKS_DUMMY_PERSONA_PROPERTY_CHANGE_DELAY_PROPERTY:
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		g_value_set_int (value, folks_dummy_persona_get_property_change_delay (self));
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		break;
#line 1776 "dummy-persona.c"
		default:
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		break;
#line 1782 "dummy-persona.c"
	}
}


static void
_vala_folks_dummy_persona_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec)
{
	FolksDummyPersona * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_DUMMY_TYPE_PERSONA, FolksDummyPersona);
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
	switch (property_id) {
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		case FOLKS_DUMMY_PERSONA_PROPERTY_CHANGE_DELAY_PROPERTY:
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		folks_dummy_persona_set_property_change_delay (self, g_value_get_int (value));
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		break;
#line 1803 "dummy-persona.c"
		default:
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 53 "/run/build/folks/backends/dummy/lib/dummy-persona.vala"
		break;
#line 1809 "dummy-persona.c"
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}



