/* HeaderBar.c generated by valac 0.40.11, the Vala compiler
 * generated from HeaderBar.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <granite.h>
#include <float.h>
#include <math.h>
#include <glib/gi18n-lib.h>
#include <gio/gio.h>
#include <gdk/gdk.h>


#define WIDGETS_TYPE_HEADER_BAR (widgets_header_bar_get_type ())
#define WIDGETS_HEADER_BAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_HEADER_BAR, WidgetsHeaderBar))
#define WIDGETS_HEADER_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_HEADER_BAR, WidgetsHeaderBarClass))
#define WIDGETS_IS_HEADER_BAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_HEADER_BAR))
#define WIDGETS_IS_HEADER_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_HEADER_BAR))
#define WIDGETS_HEADER_BAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_HEADER_BAR, WidgetsHeaderBarClass))

typedef struct _WidgetsHeaderBar WidgetsHeaderBar;
typedef struct _WidgetsHeaderBarClass WidgetsHeaderBarClass;
typedef struct _WidgetsHeaderBarPrivate WidgetsHeaderBarPrivate;
enum  {
	WIDGETS_HEADER_BAR_0_PROPERTY,
	WIDGETS_HEADER_BAR_WINDOW_PROPERTY,
	WIDGETS_HEADER_BAR_NUM_PROPERTIES
};
static GParamSpec* widgets_header_bar_properties[WIDGETS_HEADER_BAR_NUM_PROPERTIES];
typedef struct _Block50Data Block50Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define WIDGETS_POPOVERS_TYPE_NOTIFICATION_ACTION_POPOVER (widgets_popovers_notification_action_popover_get_type ())
#define WIDGETS_POPOVERS_NOTIFICATION_ACTION_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_POPOVERS_TYPE_NOTIFICATION_ACTION_POPOVER, WidgetsPopoversNotificationActionPopover))
#define WIDGETS_POPOVERS_NOTIFICATION_ACTION_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_POPOVERS_TYPE_NOTIFICATION_ACTION_POPOVER, WidgetsPopoversNotificationActionPopoverClass))
#define WIDGETS_POPOVERS_IS_NOTIFICATION_ACTION_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_POPOVERS_TYPE_NOTIFICATION_ACTION_POPOVER))
#define WIDGETS_POPOVERS_IS_NOTIFICATION_ACTION_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_POPOVERS_TYPE_NOTIFICATION_ACTION_POPOVER))
#define WIDGETS_POPOVERS_NOTIFICATION_ACTION_POPOVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_POPOVERS_TYPE_NOTIFICATION_ACTION_POPOVER, WidgetsPopoversNotificationActionPopoverClass))

typedef struct _WidgetsPopoversNotificationActionPopover WidgetsPopoversNotificationActionPopover;
typedef struct _WidgetsPopoversNotificationActionPopoverClass WidgetsPopoversNotificationActionPopoverClass;
typedef struct _Block51Data Block51Data;

#define WIDGETS_POPOVERS_TYPE_NOTIFICATIONS_POPOVER (widgets_popovers_notifications_popover_get_type ())
#define WIDGETS_POPOVERS_NOTIFICATIONS_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_POPOVERS_TYPE_NOTIFICATIONS_POPOVER, WidgetsPopoversNotificationsPopover))
#define WIDGETS_POPOVERS_NOTIFICATIONS_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_POPOVERS_TYPE_NOTIFICATIONS_POPOVER, WidgetsPopoversNotificationsPopoverClass))
#define WIDGETS_POPOVERS_IS_NOTIFICATIONS_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_POPOVERS_TYPE_NOTIFICATIONS_POPOVER))
#define WIDGETS_POPOVERS_IS_NOTIFICATIONS_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_POPOVERS_TYPE_NOTIFICATIONS_POPOVER))
#define WIDGETS_POPOVERS_NOTIFICATIONS_POPOVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_POPOVERS_TYPE_NOTIFICATIONS_POPOVER, WidgetsPopoversNotificationsPopoverClass))

typedef struct _WidgetsPopoversNotificationsPopover WidgetsPopoversNotificationsPopover;
typedef struct _WidgetsPopoversNotificationsPopoverClass WidgetsPopoversNotificationsPopoverClass;

#define SERVICES_TYPE_SIGNALS (services_signals_get_type ())
#define SERVICES_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_SIGNALS, ServicesSignals))
#define SERVICES_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_SIGNALS, ServicesSignalsClass))
#define SERVICES_IS_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_SIGNALS))
#define SERVICES_IS_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_SIGNALS))
#define SERVICES_SIGNALS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_SIGNALS, ServicesSignalsClass))

typedef struct _ServicesSignals ServicesSignals;
typedef struct _ServicesSignalsClass ServicesSignalsClass;

#define SERVICES_TYPE_NOTIFICATIONS (services_notifications_get_type ())
#define SERVICES_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotifications))
#define SERVICES_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))
#define SERVICES_IS_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_IS_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_NOTIFICATIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))

typedef struct _ServicesNotifications ServicesNotifications;
typedef struct _ServicesNotificationsClass ServicesNotificationsClass;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

#define DIALOGS_TYPE_PREFERENCES_DIALOG (dialogs_preferences_dialog_get_type ())
#define DIALOGS_PREFERENCES_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_TYPE_PREFERENCES_DIALOG, DialogsPreferencesDialog))
#define DIALOGS_PREFERENCES_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_TYPE_PREFERENCES_DIALOG, DialogsPreferencesDialogClass))
#define DIALOGS_IS_PREFERENCES_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_TYPE_PREFERENCES_DIALOG))
#define DIALOGS_IS_PREFERENCES_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_TYPE_PREFERENCES_DIALOG))
#define DIALOGS_PREFERENCES_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_TYPE_PREFERENCES_DIALOG, DialogsPreferencesDialogClass))

typedef struct _DialogsPreferencesDialog DialogsPreferencesDialog;
typedef struct _DialogsPreferencesDialogClass DialogsPreferencesDialogClass;

struct _WidgetsHeaderBar {
	GtkHeaderBar parent_instance;
	WidgetsHeaderBarPrivate * priv;
};

struct _WidgetsHeaderBarClass {
	GtkHeaderBarClass parent_class;
};

struct _WidgetsHeaderBarPrivate {
	GtkWindow* _window;
};

struct _Block50Data {
	int _ref_count_;
	WidgetsHeaderBar* self;
	GtkLevelBar* overview_levelbar;
	GtkLabel* completed_task_number;
	GtkLabel* todo_task_number;
	GtkLabel* all_task_number;
};

struct _Block51Data {
	int _ref_count_;
	WidgetsHeaderBar* self;
	GtkImage* notification_icon;
	GraniteModeSwitch* mode_switch;
	GtkEventBox* night_mode_eventbox;
	WidgetsPopoversNotificationActionPopover* notification_action;
};


static gpointer widgets_header_bar_parent_class = NULL;
extern ServicesDatabase* application_database;
extern ServicesSignals* application_signals;
extern ServicesNotifications* application_notification;
extern Utils* application_utils;
extern GSettings* application_settings;

GType widgets_header_bar_get_type (void) G_GNUC_CONST;
#define WIDGETS_HEADER_BAR_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_HEADER_BAR, WidgetsHeaderBarPrivate))
#define WIDGETS_HEADER_BAR_CSS "\n" \
"        @define-color color_header %s;\n" \
"        @define-color color_selected %s;\n" \
"        @define-color color_text %s;\n" \
"    "
WidgetsHeaderBar* widgets_header_bar_new (GtkWindow* parent);
WidgetsHeaderBar* widgets_header_bar_construct (GType object_type,
                                                GtkWindow* parent);
static GtkGrid* widgets_header_bar_get_overview (WidgetsHeaderBar* self);
static Block50Data* block50_data_ref (Block50Data* _data50_);
static void block50_data_unref (void * _userdata_);
GType services_database_get_type (void) G_GNUC_CONST;
static void __lambda103_ (Block50Data* _data50_);
gint services_database_get_all_completed_tasks (ServicesDatabase* self);
gint services_database_get_all_todo_tasks (ServicesDatabase* self);
gint services_database_get_all_tasks (ServicesDatabase* self);
static void ___lambda103__services_database_update_indicators (ServicesDatabase* _sender,
                                                        gpointer self);
GtkWindow* widgets_header_bar_get_window (WidgetsHeaderBar* self);
static void widgets_header_bar_set_window (WidgetsHeaderBar* self,
                                    GtkWindow* value);
static GObject * widgets_header_bar_constructor (GType type,
                                          guint n_construct_properties,
                                          GObjectConstructParam * construct_properties);
GType widgets_popovers_notification_action_popover_get_type (void) G_GNUC_CONST;
static Block51Data* block51_data_ref (Block51Data* _data51_);
static void block51_data_unref (void * _userdata_);
GType widgets_popovers_notifications_popover_get_type (void) G_GNUC_CONST;
WidgetsPopoversNotificationsPopover* widgets_popovers_notifications_popover_new (GtkWidget* relative);
WidgetsPopoversNotificationsPopover* widgets_popovers_notifications_popover_construct (GType object_type,
                                                                                       GtkWidget* relative);
WidgetsPopoversNotificationActionPopover* widgets_popovers_notification_action_popover_new (GtkWidget* relative);
WidgetsPopoversNotificationActionPopover* widgets_popovers_notification_action_popover_construct (GType object_type,
                                                                                                  GtkWidget* relative);
static void _widgets_header_bar___lambda108_ (WidgetsHeaderBar* self);
GType services_signals_get_type (void) G_GNUC_CONST;
static void __widgets_header_bar___lambda108__gtk_button_clicked (GtkButton* _sender,
                                                           gpointer self);
static void _widgets_header_bar___lambda109_ (WidgetsHeaderBar* self);
static void __widgets_header_bar___lambda109__gtk_button_clicked (GtkButton* _sender,
                                                           gpointer self);
GType services_notifications_get_type (void) G_GNUC_CONST;
static void _widgets_header_bar___lambda110_ (Block51Data* _data51_,
                                       const gchar* title,
                                       const gchar* description,
                                       const gchar* icon_name,
                                       gint time,
                                       gboolean remove);
void widgets_popovers_notification_action_popover_send_local_notification (WidgetsPopoversNotificationActionPopover* self,
                                                                           const gchar* title,
                                                                           const gchar* description,
                                                                           const gchar* icon_name,
                                                                           gint time,
                                                                           gboolean remove);
static void __widgets_header_bar___lambda110__services_notifications_send_local_notification (ServicesNotifications* _sender,
                                                                                       const gchar* title,
                                                                                       const gchar* description,
                                                                                       const gchar* icon_name,
                                                                                       gint time,
                                                                                       gboolean remove_clipboard_task,
                                                                                       gpointer self);
static void _widgets_header_bar___lambda111_ (Block51Data* _data51_);
static void __widgets_header_bar___lambda111__gtk_widget_show (GtkWidget* _sender,
                                                        gpointer self);
static void _widgets_header_bar___lambda112_ (Block51Data* _data51_);
static void __widgets_header_bar___lambda112__gtk_popover_closed (GtkPopover* _sender,
                                                           gpointer self);
static void _widgets_header_bar___lambda113_ (Block51Data* _data51_);
GType utils_get_type (void) G_GNUC_CONST;
gchar* utils_get_theme (Utils* self,
                        gint key);
gchar* utils_convert_invert (Utils* self,
                             const gchar* hex);
static void __widgets_header_bar___lambda113__g_object_notify (GObject* _sender,
                                                        GParamSpec* pspec,
                                                        gpointer self);
static void _widgets_header_bar___lambda114_ (WidgetsHeaderBar* self);
GType dialogs_preferences_dialog_get_type (void) G_GNUC_CONST;
DialogsPreferencesDialog* dialogs_preferences_dialog_new (GtkWindow* parent);
DialogsPreferencesDialog* dialogs_preferences_dialog_construct (GType object_type,
                                                                GtkWindow* parent);
static void _gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                        gpointer self);
static void __widgets_header_bar___lambda114__gtk_button_clicked (GtkButton* _sender,
                                                           gpointer self);
static gboolean _widgets_header_bar___lambda193_ (Block51Data* _data51_,
                                           GdkEventCrossing* event);
static gboolean __widgets_header_bar___lambda193__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                                          GdkEventCrossing* event,
                                                                          gpointer self);
static gboolean _widgets_header_bar___lambda194_ (Block51Data* _data51_,
                                           GdkEventCrossing* event);
static gboolean __widgets_header_bar___lambda194__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                                          GdkEventCrossing* event,
                                                                          gpointer self);
static gboolean _widgets_header_bar___lambda195_ (Block51Data* _data51_,
                                           GdkEvent* event);
static gboolean __widgets_header_bar___lambda195__gtk_widget_event (GtkWidget* _sender,
                                                             GdkEvent* event,
                                                             gpointer self);
static void widgets_header_bar_finalize (GObject * obj);
static void _vala_widgets_header_bar_get_property (GObject * object,
                                            guint property_id,
                                            GValue * value,
                                            GParamSpec * pspec);
static void _vala_widgets_header_bar_set_property (GObject * object,
                                            guint property_id,
                                            const GValue * value,
                                            GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);


WidgetsHeaderBar*
widgets_header_bar_construct (GType object_type,
                              GtkWindow* parent)
{
	WidgetsHeaderBar * self = NULL;
#line 31 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_return_val_if_fail (parent != NULL, NULL);
#line 32 "/run/build/planner/src/Widgets/HeaderBar.vala"
	self = (WidgetsHeaderBar*) g_object_new (object_type, "window", parent, "show-close-button", TRUE, NULL);
#line 31 "/run/build/planner/src/Widgets/HeaderBar.vala"
	return self;
#line 297 "HeaderBar.c"
}


WidgetsHeaderBar*
widgets_header_bar_new (GtkWindow* parent)
{
#line 31 "/run/build/planner/src/Widgets/HeaderBar.vala"
	return widgets_header_bar_construct (WIDGETS_TYPE_HEADER_BAR, parent);
#line 306 "HeaderBar.c"
}


static Block50Data*
block50_data_ref (Block50Data* _data50_)
{
#line 224 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_atomic_int_inc (&_data50_->_ref_count_);
#line 224 "/run/build/planner/src/Widgets/HeaderBar.vala"
	return _data50_;
#line 317 "HeaderBar.c"
}


static void
block50_data_unref (void * _userdata_)
{
	Block50Data* _data50_;
	_data50_ = (Block50Data*) _userdata_;
#line 224 "/run/build/planner/src/Widgets/HeaderBar.vala"
	if (g_atomic_int_dec_and_test (&_data50_->_ref_count_)) {
#line 328 "HeaderBar.c"
		WidgetsHeaderBar* self;
#line 224 "/run/build/planner/src/Widgets/HeaderBar.vala"
		self = _data50_->self;
#line 224 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_object_unref0 (_data50_->all_task_number);
#line 224 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_object_unref0 (_data50_->todo_task_number);
#line 224 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_object_unref0 (_data50_->completed_task_number);
#line 224 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_object_unref0 (_data50_->overview_levelbar);
#line 224 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_object_unref0 (self);
#line 224 "/run/build/planner/src/Widgets/HeaderBar.vala"
		g_slice_free (Block50Data, _data50_);
#line 344 "HeaderBar.c"
	}
}


static const gchar*
string_to_string (const gchar* self)
{
	const gchar* result = NULL;
#line 1513 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1514 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = self;
#line 1514 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 359 "HeaderBar.c"
}


static void
__lambda103_ (Block50Data* _data50_)
{
	WidgetsHeaderBar* self;
	gint completed_tasks = 0;
	ServicesDatabase* _tmp0_;
	gint todo_tasks = 0;
	ServicesDatabase* _tmp1_;
	gint all_tasks = 0;
	ServicesDatabase* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
#line 301 "/run/build/planner/src/Widgets/HeaderBar.vala"
	self = _data50_->self;
#line 302 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp0_ = application_database;
#line 302 "/run/build/planner/src/Widgets/HeaderBar.vala"
	completed_tasks = services_database_get_all_completed_tasks (_tmp0_);
#line 303 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp1_ = application_database;
#line 303 "/run/build/planner/src/Widgets/HeaderBar.vala"
	todo_tasks = services_database_get_all_todo_tasks (_tmp1_);
#line 304 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp2_ = application_database;
#line 304 "/run/build/planner/src/Widgets/HeaderBar.vala"
	all_tasks = services_database_get_all_tasks (_tmp2_);
#line 306 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp3_ = g_strdup_printf ("%i", completed_tasks);
#line 306 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp4_ = _tmp3_;
#line 306 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_label_set_label (_data50_->completed_task_number, _tmp4_);
#line 306 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_free0 (_tmp4_);
#line 307 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp5_ = g_strdup_printf ("%i", todo_tasks);
#line 307 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp6_ = _tmp5_;
#line 307 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_label_set_label (_data50_->todo_task_number, _tmp6_);
#line 307 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_free0 (_tmp6_);
#line 308 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp7_ = g_strdup_printf ("%i", all_tasks);
#line 308 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp8_ = _tmp7_;
#line 308 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_label_set_label (_data50_->all_task_number, _tmp8_);
#line 308 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_free0 (_tmp8_);
#line 310 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_level_bar_set_value (_data50_->overview_levelbar, ((gdouble) completed_tasks) / ((gdouble) all_tasks));
#line 419 "HeaderBar.c"
}


static void
___lambda103__services_database_update_indicators (ServicesDatabase* _sender,
                                                   gpointer self)
{
#line 301 "/run/build/planner/src/Widgets/HeaderBar.vala"
	__lambda103_ (self);
#line 429 "HeaderBar.c"
}


static GtkGrid*
widgets_header_bar_get_overview (WidgetsHeaderBar* self)
{
	GtkGrid* result = NULL;
	Block50Data* _data50_;
	gchar* username = NULL;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* iconfile = NULL;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	GraniteWidgetsAvatar* avatar = NULL;
	GraniteWidgetsAvatar* _tmp4_;
	GtkLabel* username_label = NULL;
	const gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	GtkLabel* _tmp8_;
	GtkLabel* _tmp9_;
	GtkLevelBar* _tmp10_;
	GtkLabel* completed_task_label = NULL;
	GtkLabel* _tmp11_;
	GtkLabel* _tmp12_;
	GtkStyleContext* _tmp13_;
	GtkStyleContext* _tmp14_;
	GtkBox* completed_task_box = NULL;
	GtkBox* _tmp15_;
	GtkLabel* todo_task_label = NULL;
	GtkLabel* _tmp16_;
	GtkLabel* _tmp17_;
	GtkStyleContext* _tmp18_;
	GtkStyleContext* _tmp19_;
	GtkBox* todo_task_box = NULL;
	GtkBox* _tmp20_;
	GtkLabel* all_task_label = NULL;
	GtkLabel* _tmp21_;
	GtkLabel* _tmp22_;
	GtkStyleContext* _tmp23_;
	GtkStyleContext* _tmp24_;
	GtkBox* all_task_box = NULL;
	GtkBox* _tmp25_;
	GtkGrid* grid = NULL;
	GtkGrid* _tmp26_;
	GtkGrid* overview_grid = NULL;
	GtkGrid* _tmp27_;
	ServicesDatabase* _tmp28_;
#line 224 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 224 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data50_ = g_slice_new0 (Block50Data);
#line 224 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data50_->_ref_count_ = 1;
#line 224 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data50_->self = g_object_ref (self);
#line 225 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp0_ = g_get_user_name ();
#line 225 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 225 "/run/build/planner/src/Widgets/HeaderBar.vala"
	username = _tmp1_;
#line 226 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp2_ = string_to_string (username);
#line 226 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp3_ = g_strconcat ("/var/lib/AccountsService/icons/", _tmp2_, NULL);
#line 226 "/run/build/planner/src/Widgets/HeaderBar.vala"
	iconfile = _tmp3_;
#line 228 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp4_ = granite_widgets_avatar_new_from_file (iconfile, 44);
#line 228 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp4_);
#line 228 "/run/build/planner/src/Widgets/HeaderBar.vala"
	avatar = _tmp4_;
#line 230 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp5_ = g_get_real_name ();
#line 230 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp6_ = g_strdup_printf ("<b>%s</b>", _tmp5_);
#line 230 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp7_ = _tmp6_;
#line 230 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp8_ = (GtkLabel*) gtk_label_new (_tmp7_);
#line 230 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp8_);
#line 230 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp9_ = _tmp8_;
#line 230 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_free0 (_tmp7_);
#line 230 "/run/build/planner/src/Widgets/HeaderBar.vala"
	username_label = _tmp9_;
#line 231 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_margin_top ((GtkWidget*) username_label, 6);
#line 232 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_halign ((GtkWidget*) username_label, GTK_ALIGN_CENTER);
#line 233 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_label_set_use_markup (username_label, TRUE);
#line 235 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp10_ = (GtkLevelBar*) gtk_level_bar_new_for_interval ((gdouble) 0, (gdouble) 1);
#line 235 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp10_);
#line 235 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data50_->overview_levelbar = _tmp10_;
#line 236 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _data50_->overview_levelbar, 12);
#line 237 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_valign ((GtkWidget*) _data50_->overview_levelbar, GTK_ALIGN_CENTER);
#line 238 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _data50_->overview_levelbar, TRUE);
#line 239 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_set ((GtkWidget*) _data50_->overview_levelbar, "width-request", 200, NULL);
#line 241 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp11_ = (GtkLabel*) gtk_label_new (_ ("Completed tasks"));
#line 241 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp11_);
#line 241 "/run/build/planner/src/Widgets/HeaderBar.vala"
	completed_task_label = _tmp11_;
#line 242 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_label_set_max_width_chars (completed_task_label, 1);
#line 243 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_valign ((GtkWidget*) completed_task_label, GTK_ALIGN_CENTER);
#line 244 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_set (completed_task_label, "wrap", TRUE, NULL);
#line 245 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_label_set_use_markup (completed_task_label, TRUE);
#line 246 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_label_set_justify (completed_task_label, GTK_JUSTIFY_CENTER);
#line 248 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp12_ = (GtkLabel*) gtk_label_new (NULL);
#line 248 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp12_);
#line 248 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data50_->completed_task_number = _tmp12_;
#line 249 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp13_ = gtk_widget_get_style_context ((GtkWidget*) _data50_->completed_task_number);
#line 249 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_style_context_add_class (_tmp13_, "h3");
#line 250 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp14_ = gtk_widget_get_style_context ((GtkWidget*) _data50_->completed_task_number);
#line 250 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_style_context_add_class (_tmp14_, "h4");
#line 252 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp15_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 252 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp15_);
#line 252 "/run/build/planner/src/Widgets/HeaderBar.vala"
	completed_task_box = _tmp15_;
#line 253 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_box_pack_start (completed_task_box, (GtkWidget*) _data50_->completed_task_number, FALSE, FALSE, (guint) 0);
#line 254 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_box_pack_start (completed_task_box, (GtkWidget*) completed_task_label, FALSE, FALSE, (guint) 0);
#line 256 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp16_ = (GtkLabel*) gtk_label_new (_ ("To do tasks"));
#line 256 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp16_);
#line 256 "/run/build/planner/src/Widgets/HeaderBar.vala"
	todo_task_label = _tmp16_;
#line 257 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_label_set_max_width_chars (todo_task_label, 1);
#line 258 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_valign ((GtkWidget*) todo_task_label, GTK_ALIGN_CENTER);
#line 259 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_set (todo_task_label, "wrap", TRUE, NULL);
#line 260 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_label_set_use_markup (todo_task_label, TRUE);
#line 261 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_label_set_justify (todo_task_label, GTK_JUSTIFY_CENTER);
#line 263 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp17_ = (GtkLabel*) gtk_label_new (NULL);
#line 263 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp17_);
#line 263 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data50_->todo_task_number = _tmp17_;
#line 264 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp18_ = gtk_widget_get_style_context ((GtkWidget*) _data50_->todo_task_number);
#line 264 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_style_context_add_class (_tmp18_, "h3");
#line 265 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp19_ = gtk_widget_get_style_context ((GtkWidget*) _data50_->todo_task_number);
#line 265 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_style_context_add_class (_tmp19_, "h4");
#line 267 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp20_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 267 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp20_);
#line 267 "/run/build/planner/src/Widgets/HeaderBar.vala"
	todo_task_box = _tmp20_;
#line 268 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_box_pack_start (todo_task_box, (GtkWidget*) _data50_->todo_task_number, FALSE, FALSE, (guint) 0);
#line 269 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_box_pack_start (todo_task_box, (GtkWidget*) todo_task_label, FALSE, FALSE, (guint) 0);
#line 271 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp21_ = (GtkLabel*) gtk_label_new (_ ("All tasks"));
#line 271 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp21_);
#line 271 "/run/build/planner/src/Widgets/HeaderBar.vala"
	all_task_label = _tmp21_;
#line 272 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_label_set_max_width_chars (all_task_label, 1);
#line 273 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_valign ((GtkWidget*) all_task_label, GTK_ALIGN_CENTER);
#line 274 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_set (all_task_label, "wrap", TRUE, NULL);
#line 275 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_label_set_use_markup (all_task_label, TRUE);
#line 276 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_label_set_justify (all_task_label, GTK_JUSTIFY_CENTER);
#line 278 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp22_ = (GtkLabel*) gtk_label_new (NULL);
#line 278 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp22_);
#line 278 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data50_->all_task_number = _tmp22_;
#line 279 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp23_ = gtk_widget_get_style_context ((GtkWidget*) _data50_->all_task_number);
#line 279 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_style_context_add_class (_tmp23_, "h3");
#line 280 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp24_ = gtk_widget_get_style_context ((GtkWidget*) _data50_->all_task_number);
#line 280 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_style_context_add_class (_tmp24_, "h4");
#line 282 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp25_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 282 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp25_);
#line 282 "/run/build/planner/src/Widgets/HeaderBar.vala"
	all_task_box = _tmp25_;
#line 283 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_box_pack_start (all_task_box, (GtkWidget*) _data50_->all_task_number, FALSE, FALSE, (guint) 0);
#line 284 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_box_pack_start (all_task_box, (GtkWidget*) all_task_label, FALSE, FALSE, (guint) 0);
#line 286 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp26_ = (GtkGrid*) gtk_grid_new ();
#line 286 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp26_);
#line 286 "/run/build/planner/src/Widgets/HeaderBar.vala"
	grid = _tmp26_;
#line 287 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_margin_top ((GtkWidget*) grid, 12);
#line 288 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_grid_set_column_homogeneous (grid, TRUE);
#line 289 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_add ((GtkContainer*) grid, (GtkWidget*) completed_task_box);
#line 290 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_add ((GtkContainer*) grid, (GtkWidget*) todo_task_box);
#line 291 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_add ((GtkContainer*) grid, (GtkWidget*) all_task_box);
#line 293 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp27_ = (GtkGrid*) gtk_grid_new ();
#line 293 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp27_);
#line 293 "/run/build/planner/src/Widgets/HeaderBar.vala"
	overview_grid = _tmp27_;
#line 294 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) overview_grid, GTK_ORIENTATION_VERTICAL);
#line 295 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_set ((GtkWidget*) overview_grid, "margin", 12, NULL);
#line 296 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_add ((GtkContainer*) overview_grid, (GtkWidget*) avatar);
#line 297 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_add ((GtkContainer*) overview_grid, (GtkWidget*) username_label);
#line 298 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_add ((GtkContainer*) overview_grid, (GtkWidget*) _data50_->overview_levelbar);
#line 299 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_add ((GtkContainer*) overview_grid, (GtkWidget*) grid);
#line 301 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp28_ = application_database;
#line 301 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_signal_connect_data (_tmp28_, "update-indicators", (GCallback) ___lambda103__services_database_update_indicators, block50_data_ref (_data50_), (GClosureNotify) block50_data_unref, 0);
#line 313 "/run/build/planner/src/Widgets/HeaderBar.vala"
	result = overview_grid;
#line 313 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (grid);
#line 313 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (all_task_box);
#line 313 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (all_task_label);
#line 313 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (todo_task_box);
#line 313 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (todo_task_label);
#line 313 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (completed_task_box);
#line 313 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (completed_task_label);
#line 313 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (username_label);
#line 313 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (avatar);
#line 313 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_free0 (iconfile);
#line 313 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_free0 (username);
#line 313 "/run/build/planner/src/Widgets/HeaderBar.vala"
	block50_data_unref (_data50_);
#line 313 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data50_ = NULL;
#line 313 "/run/build/planner/src/Widgets/HeaderBar.vala"
	return result;
#line 729 "HeaderBar.c"
}


GtkWindow*
widgets_header_bar_get_window (WidgetsHeaderBar* self)
{
	GtkWindow* result;
	GtkWindow* _tmp0_;
#line 23 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp0_ = self->priv->_window;
#line 23 "/run/build/planner/src/Widgets/HeaderBar.vala"
	result = _tmp0_;
#line 23 "/run/build/planner/src/Widgets/HeaderBar.vala"
	return result;
#line 746 "HeaderBar.c"
}


static void
widgets_header_bar_set_window (WidgetsHeaderBar* self,
                               GtkWindow* value)
{
#line 23 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_return_if_fail (self != NULL);
#line 23 "/run/build/planner/src/Widgets/HeaderBar.vala"
	if (widgets_header_bar_get_window (self) != value) {
#line 23 "/run/build/planner/src/Widgets/HeaderBar.vala"
		self->priv->_window = value;
#line 23 "/run/build/planner/src/Widgets/HeaderBar.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_header_bar_properties[WIDGETS_HEADER_BAR_WINDOW_PROPERTY]);
#line 762 "HeaderBar.c"
	}
}


static Block51Data*
block51_data_ref (Block51Data* _data51_)
{
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_atomic_int_inc (&_data51_->_ref_count_);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	return _data51_;
#line 774 "HeaderBar.c"
}


static void
block51_data_unref (void * _userdata_)
{
	Block51Data* _data51_;
	_data51_ = (Block51Data*) _userdata_;
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	if (g_atomic_int_dec_and_test (&_data51_->_ref_count_)) {
#line 785 "HeaderBar.c"
		WidgetsHeaderBar* self;
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
		self = _data51_->self;
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_object_unref0 (_data51_->notification_action);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_object_unref0 (_data51_->night_mode_eventbox);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_object_unref0 (_data51_->mode_switch);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_object_unref0 (_data51_->notification_icon);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_object_unref0 (self);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
		g_slice_free (Block51Data, _data51_);
#line 801 "HeaderBar.c"
	}
}


static void
_widgets_header_bar___lambda108_ (WidgetsHeaderBar* self)
{
	ServicesSignals* _tmp0_;
#line 129 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp0_ = application_signals;
#line 129 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_signal_emit_by_name (_tmp0_, "on-signal-show-quick-find");
#line 814 "HeaderBar.c"
}


static void
__widgets_header_bar___lambda108__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self)
{
#line 128 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_widgets_header_bar___lambda108_ ((WidgetsHeaderBar*) self);
#line 824 "HeaderBar.c"
}


static void
_widgets_header_bar___lambda109_ (WidgetsHeaderBar* self)
{
	ServicesSignals* _tmp0_;
#line 133 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp0_ = application_signals;
#line 133 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_signal_emit_by_name (_tmp0_, "on-signal-show-events");
#line 836 "HeaderBar.c"
}


static void
__widgets_header_bar___lambda109__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self)
{
#line 132 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_widgets_header_bar___lambda109_ ((WidgetsHeaderBar*) self);
#line 846 "HeaderBar.c"
}


static void
_widgets_header_bar___lambda110_ (Block51Data* _data51_,
                                  const gchar* title,
                                  const gchar* description,
                                  const gchar* icon_name,
                                  gint time,
                                  gboolean remove)
{
	WidgetsHeaderBar* self;
	WidgetsPopoversNotificationActionPopover* _tmp0_;
#line 148 "/run/build/planner/src/Widgets/HeaderBar.vala"
	self = _data51_->self;
#line 148 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_return_if_fail (title != NULL);
#line 148 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_return_if_fail (description != NULL);
#line 148 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_return_if_fail (icon_name != NULL);
#line 149 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp0_ = _data51_->notification_action;
#line 149 "/run/build/planner/src/Widgets/HeaderBar.vala"
	widgets_popovers_notification_action_popover_send_local_notification (_tmp0_, title, description, icon_name, time, remove);
#line 872 "HeaderBar.c"
}


static void
__widgets_header_bar___lambda110__services_notifications_send_local_notification (ServicesNotifications* _sender,
                                                                                  const gchar* title,
                                                                                  const gchar* description,
                                                                                  const gchar* icon_name,
                                                                                  gint time,
                                                                                  gboolean remove_clipboard_task,
                                                                                  gpointer self)
{
#line 148 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_widgets_header_bar___lambda110_ (self, title, description, icon_name, time, remove_clipboard_task);
#line 887 "HeaderBar.c"
}


static void
_widgets_header_bar___lambda111_ (Block51Data* _data51_)
{
	WidgetsHeaderBar* self;
	GtkImage* _tmp0_;
#line 152 "/run/build/planner/src/Widgets/HeaderBar.vala"
	self = _data51_->self;
#line 153 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp0_ = _data51_->notification_icon;
#line 153 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_set (_tmp0_, "icon-name", "notification-new-symbolic", NULL);
#line 902 "HeaderBar.c"
}


static void
__widgets_header_bar___lambda111__gtk_widget_show (GtkWidget* _sender,
                                                   gpointer self)
{
#line 152 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_widgets_header_bar___lambda111_ (self);
#line 912 "HeaderBar.c"
}


static void
_widgets_header_bar___lambda112_ (Block51Data* _data51_)
{
	WidgetsHeaderBar* self;
	GtkImage* _tmp0_;
#line 156 "/run/build/planner/src/Widgets/HeaderBar.vala"
	self = _data51_->self;
#line 157 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp0_ = _data51_->notification_icon;
#line 157 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_set (_tmp0_, "icon-name", "notification-symbolic", NULL);
#line 927 "HeaderBar.c"
}


static void
__widgets_header_bar___lambda112__gtk_popover_closed (GtkPopover* _sender,
                                                      gpointer self)
{
#line 156 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_widgets_header_bar___lambda112_ (self);
#line 937 "HeaderBar.c"
}


static void
_widgets_header_bar___lambda113_ (Block51Data* _data51_)
{
	WidgetsHeaderBar* self;
	GtkCssProvider* provider = NULL;
	GtkCssProvider* _tmp0_;
	gchar* colored_css = NULL;
	gchar* _tmp1_;
	GraniteModeSwitch* _tmp2_;
	gboolean _tmp3_;
	gboolean _tmp4_;
	GError * _inner_error_ = NULL;
#line 160 "/run/build/planner/src/Widgets/HeaderBar.vala"
	self = _data51_->self;
#line 161 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp0_ = gtk_css_provider_new ();
#line 161 "/run/build/planner/src/Widgets/HeaderBar.vala"
	provider = _tmp0_;
#line 162 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp1_ = g_strdup ("");
#line 162 "/run/build/planner/src/Widgets/HeaderBar.vala"
	colored_css = _tmp1_;
#line 164 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp2_ = _data51_->mode_switch;
#line 164 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp3_ = granite_mode_switch_get_active (_tmp2_);
#line 164 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp4_ = _tmp3_;
#line 164 "/run/build/planner/src/Widgets/HeaderBar.vala"
	if (_tmp4_) {
#line 971 "HeaderBar.c"
		gchar* _tmp5_;
#line 165 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp5_ = g_strdup_printf (WIDGETS_HEADER_BAR_CSS, "@base_color", "@selected_bg_color", "@text_color");
#line 165 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_free0 (colored_css);
#line 165 "/run/build/planner/src/Widgets/HeaderBar.vala"
		colored_css = _tmp5_;
#line 979 "HeaderBar.c"
	} else {
		Utils* _tmp6_;
		GSettings* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
		Utils* _tmp10_;
		GSettings* _tmp11_;
		gchar* _tmp12_;
		gchar* _tmp13_;
		Utils* _tmp14_;
		Utils* _tmp15_;
		GSettings* _tmp16_;
		gchar* _tmp17_;
		gchar* _tmp18_;
		gchar* _tmp19_;
		gchar* _tmp20_;
		gchar* _tmp21_;
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp6_ = application_utils;
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp7_ = application_settings;
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp8_ = utils_get_theme (_tmp6_, g_settings_get_enum (_tmp7_, "theme"));
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp9_ = _tmp8_;
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp10_ = application_utils;
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp11_ = application_settings;
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp12_ = utils_get_theme (_tmp10_, g_settings_get_enum (_tmp11_, "theme"));
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp13_ = _tmp12_;
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp14_ = application_utils;
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp15_ = application_utils;
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp16_ = application_settings;
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp17_ = utils_get_theme (_tmp15_, g_settings_get_enum (_tmp16_, "theme"));
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp18_ = _tmp17_;
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp19_ = utils_convert_invert (_tmp14_, _tmp18_);
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp20_ = _tmp19_;
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp21_ = g_strdup_printf (WIDGETS_HEADER_BAR_CSS, _tmp9_, _tmp13_, _tmp20_);
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_free0 (colored_css);
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		colored_css = _tmp21_;
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_free0 (_tmp20_);
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_free0 (_tmp18_);
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_free0 (_tmp13_);
#line 171 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_free0 (_tmp9_);
#line 1041 "HeaderBar.c"
	}
	{
		GtkCssProvider* _tmp22_;
		const gchar* _tmp23_;
		const gchar* _tmp24_;
		gint _tmp25_;
		gint _tmp26_;
		GdkScreen* _tmp27_;
		GtkCssProvider* _tmp28_;
#line 179 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp22_ = provider;
#line 179 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp23_ = colored_css;
#line 179 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp24_ = colored_css;
#line 179 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp25_ = strlen (_tmp24_);
#line 179 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp26_ = _tmp25_;
#line 179 "/run/build/planner/src/Widgets/HeaderBar.vala"
		gtk_css_provider_load_from_data (_tmp22_, _tmp23_, (gssize) _tmp26_, &_inner_error_);
#line 179 "/run/build/planner/src/Widgets/HeaderBar.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 1065 "HeaderBar.c"
			goto __catch39_g_error;
		}
#line 181 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp27_ = gdk_screen_get_default ();
#line 181 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp28_ = provider;
#line 181 "/run/build/planner/src/Widgets/HeaderBar.vala"
		gtk_style_context_add_provider_for_screen (_tmp27_, (GtkStyleProvider*) _tmp28_, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 1074 "HeaderBar.c"
	}
	goto __finally39;
	__catch39_g_error:
	{
		GError* e = NULL;
#line 178 "/run/build/planner/src/Widgets/HeaderBar.vala"
		e = _inner_error_;
#line 178 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_inner_error_ = NULL;
#line 183 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_error_free0 (e);
#line 183 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_free0 (colored_css);
#line 183 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_object_unref0 (provider);
#line 183 "/run/build/planner/src/Widgets/HeaderBar.vala"
		return;
#line 1092 "HeaderBar.c"
	}
	__finally39:
#line 178 "/run/build/planner/src/Widgets/HeaderBar.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 178 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_free0 (colored_css);
#line 178 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_g_object_unref0 (provider);
#line 178 "/run/build/planner/src/Widgets/HeaderBar.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 178 "/run/build/planner/src/Widgets/HeaderBar.vala"
		g_clear_error (&_inner_error_);
#line 178 "/run/build/planner/src/Widgets/HeaderBar.vala"
		return;
#line 1107 "HeaderBar.c"
	}
#line 160 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_free0 (colored_css);
#line 160 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (provider);
#line 1113 "HeaderBar.c"
}


static void
__widgets_header_bar___lambda113__g_object_notify (GObject* _sender,
                                                   GParamSpec* pspec,
                                                   gpointer self)
{
#line 160 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_widgets_header_bar___lambda113_ (self);
#line 1124 "HeaderBar.c"
}


static void
_gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                   gpointer self)
{
#line 189 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_main_quit ();
#line 1134 "HeaderBar.c"
}


static void
_widgets_header_bar___lambda114_ (WidgetsHeaderBar* self)
{
	DialogsPreferencesDialog* preferences_dialog = NULL;
	GtkWindow* _tmp0_;
	DialogsPreferencesDialog* _tmp1_;
	DialogsPreferencesDialog* _tmp2_;
	DialogsPreferencesDialog* _tmp3_;
#line 188 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp0_ = self->priv->_window;
#line 188 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp1_ = dialogs_preferences_dialog_new (_tmp0_);
#line 188 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp1_);
#line 188 "/run/build/planner/src/Widgets/HeaderBar.vala"
	preferences_dialog = _tmp1_;
#line 189 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp2_ = preferences_dialog;
#line 189 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_signal_connect ((GtkWidget*) _tmp2_, "destroy", (GCallback) _gtk_main_quit_gtk_widget_destroy, NULL);
#line 190 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp3_ = preferences_dialog;
#line 190 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp3_);
#line 187 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (preferences_dialog);
#line 1164 "HeaderBar.c"
}


static void
__widgets_header_bar___lambda114__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self)
{
#line 187 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_widgets_header_bar___lambda114_ ((WidgetsHeaderBar*) self);
#line 1174 "HeaderBar.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 193 "/run/build/planner/src/Widgets/HeaderBar.vala"
	return self ? g_object_ref (self) : NULL;
#line 1183 "HeaderBar.c"
}


static gboolean
_widgets_header_bar___lambda193_ (Block51Data* _data51_,
                                  GdkEventCrossing* event)
{
	WidgetsHeaderBar* self;
	gboolean result = FALSE;
	GtkEventBox* _tmp0_;
	GtkStyleContext* _tmp1_;
#line 197 "/run/build/planner/src/Widgets/HeaderBar.vala"
	self = _data51_->self;
#line 197 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 198 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp0_ = _data51_->night_mode_eventbox;
#line 198 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp1_ = gtk_widget_get_style_context ((GtkWidget*) _tmp0_);
#line 198 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_style_context_add_class (_tmp1_, "when-item");
#line 199 "/run/build/planner/src/Widgets/HeaderBar.vala"
	result = FALSE;
#line 199 "/run/build/planner/src/Widgets/HeaderBar.vala"
	return result;
#line 1209 "HeaderBar.c"
}


static gboolean
__widgets_header_bar___lambda193__gtk_widget_enter_notify_event (GtkWidget* _sender,
                                                                 GdkEventCrossing* event,
                                                                 gpointer self)
{
	gboolean result;
	result = _widgets_header_bar___lambda193_ (self, event);
#line 197 "/run/build/planner/src/Widgets/HeaderBar.vala"
	return result;
#line 1222 "HeaderBar.c"
}


static gboolean
_widgets_header_bar___lambda194_ (Block51Data* _data51_,
                                  GdkEventCrossing* event)
{
	WidgetsHeaderBar* self;
	gboolean result = FALSE;
	GdkNotifyType _tmp0_;
	GtkEventBox* _tmp1_;
	GtkStyleContext* _tmp2_;
#line 202 "/run/build/planner/src/Widgets/HeaderBar.vala"
	self = _data51_->self;
#line 202 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 203 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp0_ = event->detail;
#line 203 "/run/build/planner/src/Widgets/HeaderBar.vala"
	if (_tmp0_ == GDK_NOTIFY_INFERIOR) {
#line 204 "/run/build/planner/src/Widgets/HeaderBar.vala"
		result = FALSE;
#line 204 "/run/build/planner/src/Widgets/HeaderBar.vala"
		return result;
#line 1247 "HeaderBar.c"
	}
#line 207 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp1_ = _data51_->night_mode_eventbox;
#line 207 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp2_ = gtk_widget_get_style_context ((GtkWidget*) _tmp1_);
#line 207 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_style_context_remove_class (_tmp2_, "when-item");
#line 208 "/run/build/planner/src/Widgets/HeaderBar.vala"
	result = FALSE;
#line 208 "/run/build/planner/src/Widgets/HeaderBar.vala"
	return result;
#line 1259 "HeaderBar.c"
}


static gboolean
__widgets_header_bar___lambda194__gtk_widget_leave_notify_event (GtkWidget* _sender,
                                                                 GdkEventCrossing* event,
                                                                 gpointer self)
{
	gboolean result;
	result = _widgets_header_bar___lambda194_ (self, event);
#line 202 "/run/build/planner/src/Widgets/HeaderBar.vala"
	return result;
#line 1272 "HeaderBar.c"
}


static gboolean
_widgets_header_bar___lambda195_ (Block51Data* _data51_,
                                  GdkEvent* event)
{
	WidgetsHeaderBar* self;
	gboolean result = FALSE;
	GdkEventType _tmp0_;
#line 211 "/run/build/planner/src/Widgets/HeaderBar.vala"
	self = _data51_->self;
#line 211 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 212 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp0_ = event->type;
#line 212 "/run/build/planner/src/Widgets/HeaderBar.vala"
	if (_tmp0_ == GDK_BUTTON_PRESS) {
#line 1291 "HeaderBar.c"
		GraniteModeSwitch* _tmp1_;
		gboolean _tmp2_;
		gboolean _tmp3_;
#line 213 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp1_ = _data51_->mode_switch;
#line 213 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp2_ = granite_mode_switch_get_active (_tmp1_);
#line 213 "/run/build/planner/src/Widgets/HeaderBar.vala"
		_tmp3_ = _tmp2_;
#line 213 "/run/build/planner/src/Widgets/HeaderBar.vala"
		if (_tmp3_) {
#line 1303 "HeaderBar.c"
			GraniteModeSwitch* _tmp4_;
#line 214 "/run/build/planner/src/Widgets/HeaderBar.vala"
			_tmp4_ = _data51_->mode_switch;
#line 214 "/run/build/planner/src/Widgets/HeaderBar.vala"
			granite_mode_switch_set_active (_tmp4_, FALSE);
#line 1309 "HeaderBar.c"
		} else {
			GraniteModeSwitch* _tmp5_;
#line 216 "/run/build/planner/src/Widgets/HeaderBar.vala"
			_tmp5_ = _data51_->mode_switch;
#line 216 "/run/build/planner/src/Widgets/HeaderBar.vala"
			granite_mode_switch_set_active (_tmp5_, TRUE);
#line 1316 "HeaderBar.c"
		}
	}
#line 220 "/run/build/planner/src/Widgets/HeaderBar.vala"
	result = FALSE;
#line 220 "/run/build/planner/src/Widgets/HeaderBar.vala"
	return result;
#line 1323 "HeaderBar.c"
}


static gboolean
__widgets_header_bar___lambda195__gtk_widget_event (GtkWidget* _sender,
                                                    GdkEvent* event,
                                                    gpointer self)
{
	gboolean result;
	result = _widgets_header_bar___lambda195_ (self, event);
#line 211 "/run/build/planner/src/Widgets/HeaderBar.vala"
	return result;
#line 1336 "HeaderBar.c"
}


static GObject *
widgets_header_bar_constructor (GType type,
                                guint n_construct_properties,
                                GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsHeaderBar * self;
	Block51Data* _data51_;
	GtkStyleContext* _tmp0_;
	GtkButton* add_task_button = NULL;
	GtkButton* _tmp1_;
	GtkButton* _tmp2_;
	gchar* _tmp3_;
	gchar** _tmp4_;
	gchar** _tmp5_;
	gint _tmp5__length1;
	gchar* _tmp6_;
	gchar* _tmp7_;
	GtkButton* _tmp8_;
	GtkImage* add_task_icon = NULL;
	GtkImage* _tmp9_;
	GtkImage* _tmp10_;
	GThemedIcon* _tmp11_;
	GThemedIcon* _tmp12_;
	GtkImage* _tmp13_;
	GtkButton* _tmp14_;
	GtkImage* _tmp15_;
	GtkButton* quick_find_button = NULL;
	GtkButton* _tmp16_;
	GtkButton* _tmp17_;
	gchar* _tmp18_;
	gchar** _tmp19_;
	gchar** _tmp20_;
	gint _tmp20__length1;
	gchar* _tmp21_;
	gchar* _tmp22_;
	GtkButton* _tmp23_;
	GtkImage* quick_find_icon = NULL;
	GtkImage* _tmp24_;
	GtkImage* _tmp25_;
	GThemedIcon* _tmp26_;
	GThemedIcon* _tmp27_;
	GtkImage* _tmp28_;
	GtkButton* _tmp29_;
	GtkImage* _tmp30_;
	GtkButton* notification_menu = NULL;
	GtkButton* _tmp31_;
	GtkButton* _tmp32_;
	gchar* _tmp33_;
	gchar** _tmp34_;
	gchar** _tmp35_;
	gint _tmp35__length1;
	gchar* _tmp36_;
	gchar* _tmp37_;
	GtkButton* _tmp38_;
	GtkButton* _tmp39_;
	GtkStyleContext* _tmp40_;
	GtkImage* _tmp41_;
	GtkImage* _tmp42_;
	GThemedIcon* _tmp43_;
	GThemedIcon* _tmp44_;
	GtkImage* _tmp45_;
	GtkButton* _tmp46_;
	GtkImage* _tmp47_;
	GraniteModeSwitch* _tmp48_;
	GraniteModeSwitch* _tmp49_;
	GraniteModeSwitch* _tmp50_;
	GraniteModeSwitch* _tmp51_;
	GraniteModeSwitch* _tmp52_;
	GtkLabel* label = NULL;
	GtkLabel* _tmp53_;
	GtkLabel* _tmp54_;
	GtkBox* night_mode_box = NULL;
	GtkBox* _tmp55_;
	GtkBox* _tmp56_;
	GtkStyleContext* _tmp57_;
	GtkBox* _tmp58_;
	GtkLabel* _tmp59_;
	GtkBox* _tmp60_;
	GraniteModeSwitch* _tmp61_;
	GtkEventBox* _tmp62_;
	GtkEventBox* _tmp63_;
	GtkEventBox* _tmp64_;
	GtkStyleContext* _tmp65_;
	GtkEventBox* _tmp66_;
	GtkBox* _tmp67_;
	WidgetsPopoversNotificationsPopover* notifications_popover = NULL;
	GtkButton* _tmp68_;
	WidgetsPopoversNotificationsPopover* _tmp69_;
	GtkButton* _tmp70_;
	WidgetsPopoversNotificationActionPopover* _tmp71_;
	GtkModelButton* preferences_menuitem = NULL;
	GtkModelButton* _tmp72_;
	GtkModelButton* _tmp73_;
	GtkGrid* menu_grid = NULL;
	GtkGrid* _tmp74_;
	GtkGrid* _tmp75_;
	GtkGrid* _tmp76_;
	GtkGrid* _tmp77_;
	GtkGrid* _tmp78_;
	GtkGrid* _tmp79_;
	GtkGrid* _tmp80_;
	GtkGrid* _tmp81_;
	GtkEventBox* _tmp82_;
	GtkGrid* _tmp83_;
	GtkModelButton* _tmp84_;
	GtkGrid* _tmp85_;
	GtkPopover* menu_popover = NULL;
	GtkPopover* _tmp86_;
	GtkPopover* _tmp87_;
	GtkGrid* _tmp88_;
	GtkMenuButton* app_menu = NULL;
	GtkMenuButton* _tmp89_;
	GtkMenuButton* _tmp90_;
	GtkMenuButton* _tmp91_;
	GtkMenuButton* _tmp92_;
	GtkPopover* _tmp93_;
	GtkImage* menu_icon = NULL;
	GtkImage* _tmp94_;
	GtkImage* _tmp95_;
	GThemedIcon* _tmp96_;
	GThemedIcon* _tmp97_;
	GtkImage* _tmp98_;
	GtkMenuButton* _tmp99_;
	GtkImage* _tmp100_;
	GtkButton* _tmp101_;
	GtkImage* _tmp102_;
	GtkMenuButton* _tmp103_;
	GtkButton* _tmp104_;
	GtkButton* _tmp105_;
	GtkButton* _tmp106_;
	GtkButton* _tmp107_;
	ServicesNotifications* _tmp108_;
	WidgetsPopoversNotificationActionPopover* _tmp109_;
	WidgetsPopoversNotificationActionPopover* _tmp110_;
	GraniteModeSwitch* _tmp111_;
	GtkModelButton* _tmp112_;
	GtkSettings* gtk_settings = NULL;
	GtkSettings* _tmp113_;
	GtkSettings* _tmp114_;
	GraniteModeSwitch* _tmp115_;
	GtkSettings* _tmp116_;
	GSettings* _tmp117_;
	GraniteModeSwitch* _tmp118_;
	GtkEventBox* _tmp119_;
	GtkEventBox* _tmp120_;
	GtkEventBox* _tmp121_;
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	parent_class = G_OBJECT_CLASS (widgets_header_bar_parent_class);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_HEADER_BAR, WidgetsHeaderBar);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data51_ = g_slice_new0 (Block51Data);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data51_->_ref_count_ = 1;
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data51_->self = g_object_ref (self);
#line 39 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 39 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_style_context_add_class (_tmp0_, "default-decoration");
#line 41 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp1_ = (GtkButton*) gtk_button_new ();
#line 41 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp1_);
#line 41 "/run/build/planner/src/Widgets/HeaderBar.vala"
	add_task_button = _tmp1_;
#line 42 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp2_ = add_task_button;
#line 42 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp3_ = g_strdup ("<Ctrl>F");
#line 42 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp4_ = g_new0 (gchar*, 1 + 1);
#line 42 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp4_[0] = _tmp3_;
#line 42 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp5_ = _tmp4_;
#line 42 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp5__length1 = 1;
#line 42 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp6_ = granite_markup_accel_tooltip (_tmp5_, 1, _ ("Quick Find"));
#line 42 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp7_ = _tmp6_;
#line 42 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_tooltip_markup ((GtkWidget*) _tmp2_, _tmp7_);
#line 42 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_free0 (_tmp7_);
#line 42 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp5_ = (_vala_array_free (_tmp5_, _tmp5__length1, (GDestroyNotify) g_free), NULL);
#line 43 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp8_ = add_task_button;
#line 43 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_set_border_width ((GtkContainer*) _tmp8_, (guint) 4);
#line 45 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp9_ = (GtkImage*) gtk_image_new ();
#line 45 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp9_);
#line 45 "/run/build/planner/src/Widgets/HeaderBar.vala"
	add_task_icon = _tmp9_;
#line 46 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp10_ = add_task_icon;
#line 46 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp11_ = (GThemedIcon*) g_themed_icon_new ("list-add-symbolic");
#line 46 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp12_ = _tmp11_;
#line 46 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_set (_tmp10_, "gicon", (GIcon*) _tmp12_, NULL);
#line 46 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (_tmp12_);
#line 47 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp13_ = add_task_icon;
#line 47 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_image_set_pixel_size (_tmp13_, 24);
#line 48 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp14_ = add_task_button;
#line 48 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp15_ = add_task_icon;
#line 48 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_button_set_image (_tmp14_, (GtkWidget*) _tmp15_);
#line 50 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp16_ = (GtkButton*) gtk_button_new ();
#line 50 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp16_);
#line 50 "/run/build/planner/src/Widgets/HeaderBar.vala"
	quick_find_button = _tmp16_;
#line 51 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp17_ = quick_find_button;
#line 51 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp18_ = g_strdup ("<Ctrl>F");
#line 51 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp19_ = g_new0 (gchar*, 1 + 1);
#line 51 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp19_[0] = _tmp18_;
#line 51 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp20_ = _tmp19_;
#line 51 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp20__length1 = 1;
#line 51 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp21_ = granite_markup_accel_tooltip (_tmp20_, 1, _ ("Quick Find"));
#line 51 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp22_ = _tmp21_;
#line 51 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_tooltip_markup ((GtkWidget*) _tmp17_, _tmp22_);
#line 51 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_free0 (_tmp22_);
#line 51 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp20_ = (_vala_array_free (_tmp20_, _tmp20__length1, (GDestroyNotify) g_free), NULL);
#line 52 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp23_ = quick_find_button;
#line 52 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_set_border_width ((GtkContainer*) _tmp23_, (guint) 4);
#line 54 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp24_ = (GtkImage*) gtk_image_new ();
#line 54 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp24_);
#line 54 "/run/build/planner/src/Widgets/HeaderBar.vala"
	quick_find_icon = _tmp24_;
#line 55 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp25_ = quick_find_icon;
#line 55 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp26_ = (GThemedIcon*) g_themed_icon_new ("edit-find-symbolic");
#line 55 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp27_ = _tmp26_;
#line 55 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_set (_tmp25_, "gicon", (GIcon*) _tmp27_, NULL);
#line 55 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (_tmp27_);
#line 56 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp28_ = quick_find_icon;
#line 56 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_image_set_pixel_size (_tmp28_, 24);
#line 57 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp29_ = quick_find_button;
#line 57 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp30_ = quick_find_icon;
#line 57 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_button_set_image (_tmp29_, (GtkWidget*) _tmp30_);
#line 59 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp31_ = (GtkButton*) gtk_button_new ();
#line 59 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp31_);
#line 59 "/run/build/planner/src/Widgets/HeaderBar.vala"
	notification_menu = _tmp31_;
#line 60 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp32_ = notification_menu;
#line 60 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp33_ = g_strdup ("<Ctrl>E");
#line 60 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp34_ = g_new0 (gchar*, 1 + 1);
#line 60 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp34_[0] = _tmp33_;
#line 60 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp35_ = _tmp34_;
#line 60 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp35__length1 = 1;
#line 60 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp36_ = granite_markup_accel_tooltip (_tmp35_, 1, _ ("Weather and Events"));
#line 60 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp37_ = _tmp36_;
#line 60 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_tooltip_markup ((GtkWidget*) _tmp32_, _tmp37_);
#line 60 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_free0 (_tmp37_);
#line 60 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp35_ = (_vala_array_free (_tmp35_, _tmp35__length1, (GDestroyNotify) g_free), NULL);
#line 61 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp38_ = notification_menu;
#line 61 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_set_border_width ((GtkContainer*) _tmp38_, (guint) 6);
#line 62 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp39_ = notification_menu;
#line 62 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp40_ = gtk_widget_get_style_context ((GtkWidget*) _tmp39_);
#line 62 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_style_context_add_class (_tmp40_, GTK_STYLE_CLASS_FLAT);
#line 64 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp41_ = (GtkImage*) gtk_image_new ();
#line 64 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp41_);
#line 64 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data51_->notification_icon = _tmp41_;
#line 65 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp42_ = _data51_->notification_icon;
#line 65 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp43_ = (GThemedIcon*) g_themed_icon_new ("notification-symbolic");
#line 65 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp44_ = _tmp43_;
#line 65 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_set (_tmp42_, "gicon", (GIcon*) _tmp44_, NULL);
#line 65 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (_tmp44_);
#line 66 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp45_ = _data51_->notification_icon;
#line 66 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_image_set_pixel_size (_tmp45_, 20);
#line 68 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp46_ = notification_menu;
#line 68 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp47_ = _data51_->notification_icon;
#line 68 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_add ((GtkContainer*) _tmp46_, (GtkWidget*) _tmp47_);
#line 70 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp48_ = granite_mode_switch_new_from_icon_name ("display-brightness-symbolic", "weather-clear-night-symbolic");
#line 70 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp48_);
#line 70 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data51_->mode_switch = _tmp48_;
#line 71 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp49_ = _data51_->mode_switch;
#line 71 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp49_, 12);
#line 72 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp50_ = _data51_->mode_switch;
#line 72 "/run/build/planner/src/Widgets/HeaderBar.vala"
	granite_mode_switch_set_primary_icon_tooltip_text (_tmp50_, "Light background");
#line 73 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp51_ = _data51_->mode_switch;
#line 73 "/run/build/planner/src/Widgets/HeaderBar.vala"
	granite_mode_switch_set_secondary_icon_tooltip_text (_tmp51_, "Dark background");
#line 74 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp52_ = _data51_->mode_switch;
#line 74 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp52_, GTK_ALIGN_CENTER);
#line 76 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp53_ = (GtkLabel*) gtk_label_new (_ ("Night Mode"));
#line 76 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp53_);
#line 76 "/run/build/planner/src/Widgets/HeaderBar.vala"
	label = _tmp53_;
#line 77 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp54_ = label;
#line 77 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp54_, 6);
#line 79 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp55_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 79 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp55_);
#line 79 "/run/build/planner/src/Widgets/HeaderBar.vala"
	night_mode_box = _tmp55_;
#line 80 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp56_ = night_mode_box;
#line 80 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp57_ = gtk_widget_get_style_context ((GtkWidget*) _tmp56_);
#line 80 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_style_context_add_class (_tmp57_, "menuitem");
#line 81 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp58_ = night_mode_box;
#line 81 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp59_ = label;
#line 81 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_box_pack_start (_tmp58_, (GtkWidget*) _tmp59_, FALSE, FALSE, (guint) 0);
#line 82 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp60_ = night_mode_box;
#line 82 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp61_ = _data51_->mode_switch;
#line 82 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_box_pack_end (_tmp60_, (GtkWidget*) _tmp61_, FALSE, FALSE, (guint) 0);
#line 84 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp62_ = (GtkEventBox*) gtk_event_box_new ();
#line 84 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp62_);
#line 84 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data51_->night_mode_eventbox = _tmp62_;
#line 85 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp63_ = _data51_->night_mode_eventbox;
#line 85 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_add_events ((GtkWidget*) _tmp63_, (gint) (GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK));
#line 86 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp64_ = _data51_->night_mode_eventbox;
#line 86 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp65_ = gtk_widget_get_style_context ((GtkWidget*) _tmp64_);
#line 86 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_style_context_add_class (_tmp65_, "menuitem");
#line 87 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp66_ = _data51_->night_mode_eventbox;
#line 87 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp67_ = night_mode_box;
#line 87 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_add ((GtkContainer*) _tmp66_, (GtkWidget*) _tmp67_);
#line 89 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp68_ = notification_menu;
#line 89 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp69_ = widgets_popovers_notifications_popover_new ((GtkWidget*) _tmp68_);
#line 89 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp69_);
#line 89 "/run/build/planner/src/Widgets/HeaderBar.vala"
	notifications_popover = _tmp69_;
#line 90 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp70_ = notification_menu;
#line 90 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp71_ = widgets_popovers_notification_action_popover_new ((GtkWidget*) _tmp70_);
#line 90 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp71_);
#line 90 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data51_->notification_action = _tmp71_;
#line 92 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp72_ = (GtkModelButton*) gtk_model_button_new ();
#line 92 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp72_);
#line 92 "/run/build/planner/src/Widgets/HeaderBar.vala"
	preferences_menuitem = _tmp72_;
#line 93 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp73_ = preferences_menuitem;
#line 93 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_set (_tmp73_, "text", _ ("Preferences"), NULL);
#line 95 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp74_ = (GtkGrid*) gtk_grid_new ();
#line 95 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp74_);
#line 95 "/run/build/planner/src/Widgets/HeaderBar.vala"
	menu_grid = _tmp74_;
#line 96 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp75_ = menu_grid;
#line 96 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp75_, 3);
#line 97 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp76_ = menu_grid;
#line 97 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_orientable_set_orientation ((GtkOrientable*) _tmp76_, GTK_ORIENTATION_VERTICAL);
#line 98 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp77_ = menu_grid;
#line 98 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_set ((GtkWidget*) _tmp77_, "width-request", 250, NULL);
#line 100 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp78_ = menu_grid;
#line 100 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp79_ = widgets_header_bar_get_overview (self);
#line 100 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp80_ = _tmp79_;
#line 100 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_add ((GtkContainer*) _tmp78_, (GtkWidget*) _tmp80_);
#line 100 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (_tmp80_);
#line 101 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp81_ = menu_grid;
#line 101 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp82_ = _data51_->night_mode_eventbox;
#line 101 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_add ((GtkContainer*) _tmp81_, (GtkWidget*) _tmp82_);
#line 102 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp83_ = menu_grid;
#line 102 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp84_ = preferences_menuitem;
#line 102 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_add ((GtkContainer*) _tmp83_, (GtkWidget*) _tmp84_);
#line 103 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp85_ = menu_grid;
#line 103 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp85_);
#line 105 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp86_ = (GtkPopover*) gtk_popover_new (NULL);
#line 105 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp86_);
#line 105 "/run/build/planner/src/Widgets/HeaderBar.vala"
	menu_popover = _tmp86_;
#line 107 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp87_ = menu_popover;
#line 107 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp88_ = menu_grid;
#line 107 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_add ((GtkContainer*) _tmp87_, (GtkWidget*) _tmp88_);
#line 109 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp89_ = (GtkMenuButton*) gtk_menu_button_new ();
#line 109 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp89_);
#line 109 "/run/build/planner/src/Widgets/HeaderBar.vala"
	app_menu = _tmp89_;
#line 110 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp90_ = app_menu;
#line 110 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_set_border_width ((GtkContainer*) _tmp90_, (guint) 6);
#line 112 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp91_ = app_menu;
#line 112 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp91_, _ ("Menu"));
#line 113 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp92_ = app_menu;
#line 113 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp93_ = menu_popover;
#line 113 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_menu_button_set_popover (_tmp92_, _tmp93_);
#line 115 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp94_ = (GtkImage*) gtk_image_new ();
#line 115 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_ref_sink (_tmp94_);
#line 115 "/run/build/planner/src/Widgets/HeaderBar.vala"
	menu_icon = _tmp94_;
#line 116 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp95_ = menu_icon;
#line 116 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp96_ = (GThemedIcon*) g_themed_icon_new ("open-menu-symbolic");
#line 116 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp97_ = _tmp96_;
#line 116 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_set (_tmp95_, "gicon", (GIcon*) _tmp97_, NULL);
#line 116 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (_tmp97_);
#line 117 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp98_ = menu_icon;
#line 117 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_image_set_pixel_size (_tmp98_, 20);
#line 119 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp99_ = app_menu;
#line 119 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp100_ = menu_icon;
#line 119 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_button_set_image ((GtkButton*) _tmp99_, (GtkWidget*) _tmp100_);
#line 121 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp101_ = notification_menu;
#line 121 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp102_ = _data51_->notification_icon;
#line 121 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_container_add ((GtkContainer*) _tmp101_, (GtkWidget*) _tmp102_);
#line 124 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp103_ = app_menu;
#line 124 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_header_bar_pack_end ((GtkHeaderBar*) self, (GtkWidget*) _tmp103_);
#line 125 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp104_ = notification_menu;
#line 125 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_header_bar_pack_end ((GtkHeaderBar*) self, (GtkWidget*) _tmp104_);
#line 126 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp105_ = quick_find_button;
#line 126 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_header_bar_pack_end ((GtkHeaderBar*) self, (GtkWidget*) _tmp105_);
#line 128 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp106_ = quick_find_button;
#line 128 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_signal_connect_object (_tmp106_, "clicked", (GCallback) __widgets_header_bar___lambda108__gtk_button_clicked, self, 0);
#line 132 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp107_ = notification_menu;
#line 132 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_signal_connect_object (_tmp107_, "clicked", (GCallback) __widgets_header_bar___lambda109__gtk_button_clicked, self, 0);
#line 148 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp108_ = application_notification;
#line 148 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_signal_connect_data (_tmp108_, "send-local-notification", (GCallback) __widgets_header_bar___lambda110__services_notifications_send_local_notification, block51_data_ref (_data51_), (GClosureNotify) block51_data_unref, 0);
#line 152 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp109_ = _data51_->notification_action;
#line 152 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_signal_connect_data ((GtkWidget*) _tmp109_, "show", (GCallback) __widgets_header_bar___lambda111__gtk_widget_show, block51_data_ref (_data51_), (GClosureNotify) block51_data_unref, 0);
#line 156 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp110_ = _data51_->notification_action;
#line 156 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_signal_connect_data ((GtkPopover*) _tmp110_, "closed", (GCallback) __widgets_header_bar___lambda112__gtk_popover_closed, block51_data_ref (_data51_), (GClosureNotify) block51_data_unref, 0);
#line 160 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp111_ = _data51_->mode_switch;
#line 160 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_signal_connect_data ((GObject*) _tmp111_, "notify::active", (GCallback) __widgets_header_bar___lambda113__g_object_notify, block51_data_ref (_data51_), (GClosureNotify) block51_data_unref, 0);
#line 187 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp112_ = preferences_menuitem;
#line 187 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_signal_connect_object ((GtkButton*) _tmp112_, "clicked", (GCallback) __widgets_header_bar___lambda114__gtk_button_clicked, self, 0);
#line 193 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp113_ = gtk_settings_get_default ();
#line 193 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp114_ = _g_object_ref0 (_tmp113_);
#line 193 "/run/build/planner/src/Widgets/HeaderBar.vala"
	gtk_settings = _tmp114_;
#line 194 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp115_ = _data51_->mode_switch;
#line 194 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp116_ = gtk_settings;
#line 194 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_bind_property_with_closures ((GObject*) _tmp115_, "active", (GObject*) _tmp116_, "gtk_application_prefer_dark_theme", G_BINDING_DEFAULT, (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)), (GClosure*) ((NULL == NULL) ? NULL : g_cclosure_new ((GCallback) NULL, NULL, (GClosureNotify) NULL)));
#line 195 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp117_ = application_settings;
#line 195 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp118_ = _data51_->mode_switch;
#line 195 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_settings_bind (_tmp117_, "prefer-dark-style", (GObject*) _tmp118_, "active", G_SETTINGS_BIND_DEFAULT);
#line 197 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp119_ = _data51_->night_mode_eventbox;
#line 197 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_signal_connect_data ((GtkWidget*) _tmp119_, "enter-notify-event", (GCallback) __widgets_header_bar___lambda193__gtk_widget_enter_notify_event, block51_data_ref (_data51_), (GClosureNotify) block51_data_unref, 0);
#line 202 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp120_ = _data51_->night_mode_eventbox;
#line 202 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_signal_connect_data ((GtkWidget*) _tmp120_, "leave-notify-event", (GCallback) __widgets_header_bar___lambda194__gtk_widget_leave_notify_event, block51_data_ref (_data51_), (GClosureNotify) block51_data_unref, 0);
#line 211 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_tmp121_ = _data51_->night_mode_eventbox;
#line 211 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_signal_connect_data ((GtkWidget*) _tmp121_, "event", (GCallback) __widgets_header_bar___lambda195__gtk_widget_event, block51_data_ref (_data51_), (GClosureNotify) block51_data_unref, 0);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (gtk_settings);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (menu_icon);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (app_menu);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (menu_popover);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (menu_grid);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (preferences_menuitem);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (notifications_popover);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (night_mode_box);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (label);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (notification_menu);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (quick_find_icon);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (quick_find_button);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (add_task_icon);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_g_object_unref0 (add_task_button);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	block51_data_unref (_data51_);
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	_data51_ = NULL;
#line 38 "/run/build/planner/src/Widgets/HeaderBar.vala"
	return obj;
#line 2000 "HeaderBar.c"
}


static void
widgets_header_bar_class_init (WidgetsHeaderBarClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
	widgets_header_bar_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_type_class_add_private (klass, sizeof (WidgetsHeaderBarPrivate));
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_header_bar_get_property;
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_header_bar_set_property;
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_header_bar_constructor;
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_header_bar_finalize;
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_HEADER_BAR_WINDOW_PROPERTY, widgets_header_bar_properties[WIDGETS_HEADER_BAR_WINDOW_PROPERTY] = g_param_spec_object ("window", "window", "window", gtk_window_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 2021 "HeaderBar.c"
}


static void
widgets_header_bar_instance_init (WidgetsHeaderBar * self)
{
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
	self->priv = WIDGETS_HEADER_BAR_GET_PRIVATE (self);
#line 2030 "HeaderBar.c"
}


static void
widgets_header_bar_finalize (GObject * obj)
{
	WidgetsHeaderBar * self;
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_HEADER_BAR, WidgetsHeaderBar);
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
	G_OBJECT_CLASS (widgets_header_bar_parent_class)->finalize (obj);
#line 2042 "HeaderBar.c"
}


GType
widgets_header_bar_get_type (void)
{
	static volatile gsize widgets_header_bar_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_header_bar_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsHeaderBarClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_header_bar_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsHeaderBar), 0, (GInstanceInitFunc) widgets_header_bar_instance_init, NULL };
		GType widgets_header_bar_type_id;
		widgets_header_bar_type_id = g_type_register_static (gtk_header_bar_get_type (), "WidgetsHeaderBar", &g_define_type_info, 0);
		g_once_init_leave (&widgets_header_bar_type_id__volatile, widgets_header_bar_type_id);
	}
	return widgets_header_bar_type_id__volatile;
}


static void
_vala_widgets_header_bar_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec)
{
	WidgetsHeaderBar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_HEADER_BAR, WidgetsHeaderBar);
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
		case WIDGETS_HEADER_BAR_WINDOW_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
		g_value_set_object (value, widgets_header_bar_get_window (self));
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
		break;
#line 2076 "HeaderBar.c"
		default:
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
		break;
#line 2082 "HeaderBar.c"
	}
}


static void
_vala_widgets_header_bar_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec)
{
	WidgetsHeaderBar * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_HEADER_BAR, WidgetsHeaderBar);
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
		case WIDGETS_HEADER_BAR_WINDOW_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
		widgets_header_bar_set_window (self, g_value_get_object (value));
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
		break;
#line 2103 "HeaderBar.c"
		default:
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/HeaderBar.vala"
		break;
#line 2109 "HeaderBar.c"
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}



