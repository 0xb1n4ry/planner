/* Signals.c generated by valac 0.40.11, the Vala compiler
 * generated from Signals.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>


#define SERVICES_TYPE_SIGNALS (services_signals_get_type ())
#define SERVICES_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_SIGNALS, ServicesSignals))
#define SERVICES_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_SIGNALS, ServicesSignalsClass))
#define SERVICES_IS_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_SIGNALS))
#define SERVICES_IS_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_SIGNALS))
#define SERVICES_SIGNALS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_SIGNALS, ServicesSignalsClass))

typedef struct _ServicesSignals ServicesSignals;
typedef struct _ServicesSignalsClass ServicesSignalsClass;
typedef struct _ServicesSignalsPrivate ServicesSignalsPrivate;
enum  {
	SERVICES_SIGNALS_0_PROPERTY,
	SERVICES_SIGNALS_NUM_PROPERTIES
};
static GParamSpec* services_signals_properties[SERVICES_SIGNALS_NUM_PROPERTIES];
enum  {
	SERVICES_SIGNALS_ON_SIGNAL_SHOW_QUICK_FIND_SIGNAL,
	SERVICES_SIGNALS_ON_SIGNAL_SHOW_EVENTS_SIGNAL,
	SERVICES_SIGNALS_GO_ACTION_PAGE_SIGNAL,
	SERVICES_SIGNALS_GO_PROJECT_PAGE_SIGNAL,
	SERVICES_SIGNALS_GO_TASK_PAGE_SIGNAL,
	SERVICES_SIGNALS_NUM_SIGNALS
};
static guint services_signals_signals[SERVICES_SIGNALS_NUM_SIGNALS] = {0};

struct _ServicesSignals {
	GObject parent_instance;
	ServicesSignalsPrivate * priv;
};

struct _ServicesSignalsClass {
	GObjectClass parent_class;
};


static gpointer services_signals_parent_class = NULL;

GType services_signals_get_type (void) G_GNUC_CONST;
ServicesSignals* services_signals_new (void);
ServicesSignals* services_signals_construct (GType object_type);
static void g_cclosure_user_marshal_VOID__INT_INT (GClosure * closure,
                                            GValue * return_value,
                                            guint n_param_values,
                                            const GValue * param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);


ServicesSignals*
services_signals_construct (GType object_type)
{
	ServicesSignals * self = NULL;
#line 31 "/run/build/planner/src/Services/Signals.vala"
	self = (ServicesSignals*) g_object_new (object_type, NULL);
#line 31 "/run/build/planner/src/Services/Signals.vala"
	return self;
#line 87 "Signals.c"
}


ServicesSignals*
services_signals_new (void)
{
#line 31 "/run/build/planner/src/Services/Signals.vala"
	return services_signals_construct (SERVICES_TYPE_SIGNALS);
#line 96 "Signals.c"
}


static void
g_cclosure_user_marshal_VOID__INT_INT (GClosure * closure,
                                       GValue * return_value,
                                       guint n_param_values,
                                       const GValue * param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__INT_INT) (gpointer data1, gint arg_1, gint arg_2, gpointer data2);
	register GMarshalFunc_VOID__INT_INT callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 22 "/run/build/planner/src/Services/Signals.vala"
	g_return_if_fail (n_param_values == 3);
#line 22 "/run/build/planner/src/Services/Signals.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 22 "/run/build/planner/src/Services/Signals.vala"
		data1 = closure->data;
#line 22 "/run/build/planner/src/Services/Signals.vala"
		data2 = param_values->data[0].v_pointer;
#line 122 "Signals.c"
	} else {
#line 22 "/run/build/planner/src/Services/Signals.vala"
		data1 = param_values->data[0].v_pointer;
#line 22 "/run/build/planner/src/Services/Signals.vala"
		data2 = closure->data;
#line 128 "Signals.c"
	}
#line 22 "/run/build/planner/src/Services/Signals.vala"
	callback = (GMarshalFunc_VOID__INT_INT) (marshal_data ? marshal_data : cc->callback);
#line 22 "/run/build/planner/src/Services/Signals.vala"
	callback (data1, g_value_get_int (param_values + 1), g_value_get_int (param_values + 2), data2);
#line 134 "Signals.c"
}


static void
services_signals_class_init (ServicesSignalsClass * klass)
{
#line 22 "/run/build/planner/src/Services/Signals.vala"
	services_signals_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Services/Signals.vala"
	services_signals_signals[SERVICES_SIGNALS_ON_SIGNAL_SHOW_QUICK_FIND_SIGNAL] = g_signal_new ("on-signal-show-quick-find", SERVICES_TYPE_SIGNALS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 22 "/run/build/planner/src/Services/Signals.vala"
	services_signals_signals[SERVICES_SIGNALS_ON_SIGNAL_SHOW_EVENTS_SIGNAL] = g_signal_new ("on-signal-show-events", SERVICES_TYPE_SIGNALS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 22 "/run/build/planner/src/Services/Signals.vala"
	services_signals_signals[SERVICES_SIGNALS_GO_ACTION_PAGE_SIGNAL] = g_signal_new ("go-action-page", SERVICES_TYPE_SIGNALS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__INT, G_TYPE_NONE, 1, G_TYPE_INT);
#line 22 "/run/build/planner/src/Services/Signals.vala"
	services_signals_signals[SERVICES_SIGNALS_GO_PROJECT_PAGE_SIGNAL] = g_signal_new ("go-project-page", SERVICES_TYPE_SIGNALS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__INT, G_TYPE_NONE, 1, G_TYPE_INT);
#line 22 "/run/build/planner/src/Services/Signals.vala"
	services_signals_signals[SERVICES_SIGNALS_GO_TASK_PAGE_SIGNAL] = g_signal_new ("go-task-page", SERVICES_TYPE_SIGNALS, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__INT_INT, G_TYPE_NONE, 2, G_TYPE_INT, G_TYPE_INT);
#line 153 "Signals.c"
}


static void
services_signals_instance_init (ServicesSignals * self)
{
}


GType
services_signals_get_type (void)
{
	static volatile gsize services_signals_type_id__volatile = 0;
	if (g_once_init_enter (&services_signals_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ServicesSignalsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) services_signals_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ServicesSignals), 0, (GInstanceInitFunc) services_signals_instance_init, NULL };
		GType services_signals_type_id;
		services_signals_type_id = g_type_register_static (G_TYPE_OBJECT, "ServicesSignals", &g_define_type_info, 0);
		g_once_init_leave (&services_signals_type_id__volatile, services_signals_type_id);
	}
	return services_signals_type_id__volatile;
}



