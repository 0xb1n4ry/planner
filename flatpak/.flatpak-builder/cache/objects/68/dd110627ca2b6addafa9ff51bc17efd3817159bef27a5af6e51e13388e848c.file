/* command-backends.c generated by valac 0.40.11, the Vala compiler
 * generated from command-backends.vala, do not modify */

/*
 * Copyright (C) 2010 Collabora Ltd.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Philip Withnall <philip.withnall@collabora.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <folks/folks.h>
#include <stdio.h>
#include <readline/readline.h>


#define FOLKS_INSPECT_TYPE_COMMAND (folks_inspect_command_get_type ())
#define FOLKS_INSPECT_COMMAND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_INSPECT_TYPE_COMMAND, FolksInspectCommand))
#define FOLKS_INSPECT_COMMAND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_INSPECT_TYPE_COMMAND, FolksInspectCommandClass))
#define FOLKS_INSPECT_IS_COMMAND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_INSPECT_TYPE_COMMAND))
#define FOLKS_INSPECT_IS_COMMAND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_INSPECT_TYPE_COMMAND))
#define FOLKS_INSPECT_COMMAND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_INSPECT_TYPE_COMMAND, FolksInspectCommandClass))

typedef struct _FolksInspectCommand FolksInspectCommand;
typedef struct _FolksInspectCommandClass FolksInspectCommandClass;
typedef struct _FolksInspectCommandPrivate FolksInspectCommandPrivate;

#define FOLKS_INSPECT_TYPE_CLIENT (folks_inspect_client_get_type ())
#define FOLKS_INSPECT_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_INSPECT_TYPE_CLIENT, FolksInspectClient))
#define FOLKS_INSPECT_CLIENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_INSPECT_TYPE_CLIENT, FolksInspectClientClass))
#define FOLKS_INSPECT_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_INSPECT_TYPE_CLIENT))
#define FOLKS_INSPECT_IS_CLIENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_INSPECT_TYPE_CLIENT))
#define FOLKS_INSPECT_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_INSPECT_TYPE_CLIENT, FolksInspectClientClass))

typedef struct _FolksInspectClient FolksInspectClient;
typedef struct _FolksInspectClientClass FolksInspectClientClass;

#define FOLKS_INSPECT_COMMANDS_TYPE_BACKENDS (folks_inspect_commands_backends_get_type ())
#define FOLKS_INSPECT_COMMANDS_BACKENDS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_INSPECT_COMMANDS_TYPE_BACKENDS, FolksInspectCommandsBackends))
#define FOLKS_INSPECT_COMMANDS_BACKENDS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_INSPECT_COMMANDS_TYPE_BACKENDS, FolksInspectCommandsBackendsClass))
#define FOLKS_INSPECT_COMMANDS_IS_BACKENDS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_INSPECT_COMMANDS_TYPE_BACKENDS))
#define FOLKS_INSPECT_COMMANDS_IS_BACKENDS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_INSPECT_COMMANDS_TYPE_BACKENDS))
#define FOLKS_INSPECT_COMMANDS_BACKENDS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_INSPECT_COMMANDS_TYPE_BACKENDS, FolksInspectCommandsBackendsClass))

typedef struct _FolksInspectCommandsBackends FolksInspectCommandsBackends;
typedef struct _FolksInspectCommandsBackendsClass FolksInspectCommandsBackendsClass;
typedef struct _FolksInspectCommandsBackendsPrivate FolksInspectCommandsBackendsPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _folks_inspect_command_unref0(var) ((var == NULL) ? NULL : (var = (folks_inspect_command_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _FolksInspectCommandsBackendsRunData FolksInspectCommandsBackendsRunData;

struct _FolksInspectCommand {
	GTypeInstance parent_instance;
	volatile int ref_count;
	FolksInspectCommandPrivate * priv;
	FolksInspectClient* client;
};

struct _FolksInspectCommandClass {
	GTypeClass parent_class;
	void (*finalize) (FolksInspectCommand *self);
	void (*run) (FolksInspectCommand* self, const gchar* command_string, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*run_finish) (FolksInspectCommand* self, GAsyncResult* _res_);
	gchar** (*complete_subcommand) (FolksInspectCommand* self, const gchar* subcommand, int* result_length1);
	const gchar* (*get_name) (FolksInspectCommand* self);
	const gchar* (*get_description) (FolksInspectCommand* self);
	const gchar* (*get_help) (FolksInspectCommand* self);
};

struct _FolksInspectCommandsBackends {
	FolksInspectCommand parent_instance;
	FolksInspectCommandsBackendsPrivate * priv;
};

struct _FolksInspectCommandsBackendsClass {
	FolksInspectCommandClass parent_class;
};

struct _FolksInspectCommandsBackendsRunData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksInspectCommandsBackends* self;
	gchar* command_string;
	gint result;
	GeeCollection* backends;
	FolksInspectClient* _tmp0_;
	FolksBackendStore* _tmp1_;
	FolksBackendStore* _tmp2_;
	GeeCollection* _tmp3_;
	GeeCollection* _tmp4_;
	gint _tmp5_;
	gint _tmp6_;
	GeeIterator* _backend_it;
	GeeCollection* _tmp7_;
	GeeIterator* _tmp8_;
	GeeIterator* _tmp9_;
	FolksBackend* backend;
	GeeIterator* _tmp10_;
	gpointer _tmp11_;
	FolksBackend* _tmp12_;
	const gchar* _tmp13_;
	const gchar* _tmp14_;
	FolksBackend* _vala1_backend;
	FolksInspectClient* _tmp15_;
	FolksBackendStore* _tmp16_;
	FolksBackendStore* _tmp17_;
	FolksBackend* _tmp18_;
	FolksBackend* _tmp19_;
	FolksBackend* _tmp20_;
	const gchar* _tmp21_;
	const gchar* _tmp22_;
	FolksBackend* _tmp23_;
	GeeMap* _tmp24_;
	GeeMap* _tmp25_;
	gint _tmp26_;
	gint _tmp27_;
	GeeIterator* _store_it;
	FolksBackend* _tmp28_;
	GeeMap* _tmp29_;
	GeeMap* _tmp30_;
	GeeCollection* _tmp31_;
	GeeCollection* _tmp32_;
	GeeCollection* _tmp33_;
	GeeIterator* _tmp34_;
	GeeIterator* _tmp35_;
	GeeIterator* _tmp36_;
	FolksPersonaStore* store;
	GeeIterator* _tmp37_;
	gpointer _tmp38_;
	FolksPersonaStore* _tmp39_;
	const gchar* _tmp40_;
	const gchar* _tmp41_;
	FolksPersonaStore* _tmp42_;
	const gchar* _tmp43_;
	const gchar* _tmp44_;
	FolksPersonaStore* _tmp45_;
	const gchar* _tmp46_;
	const gchar* _tmp47_;
};


static gpointer folks_inspect_commands_backends_parent_class = NULL;

gpointer folks_inspect_command_ref (gpointer instance);
void folks_inspect_command_unref (gpointer instance);
GParamSpec* folks_inspect_param_spec_command (const gchar* name,
                                              const gchar* nick,
                                              const gchar* blurb,
                                              GType object_type,
                                              GParamFlags flags);
void folks_inspect_value_set_command (GValue* value,
                                      gpointer v_object);
void folks_inspect_value_take_command (GValue* value,
                                       gpointer v_object);
gpointer folks_inspect_value_get_command (const GValue* value);
GType folks_inspect_command_get_type (void) G_GNUC_CONST;
GType folks_inspect_client_get_type (void) G_GNUC_CONST;
GType folks_inspect_commands_backends_get_type (void) G_GNUC_CONST;
FolksInspectCommandsBackends* folks_inspect_commands_backends_new (FolksInspectClient* client);
FolksInspectCommandsBackends* folks_inspect_commands_backends_construct (GType object_type,
                                                                         FolksInspectClient* client);
FolksInspectCommand* folks_inspect_command_construct (GType object_type,
                                                      FolksInspectClient* client);
static void folks_inspect_commands_backends_real_run_data_free (gpointer _data);
static void folks_inspect_commands_backends_real_run_async_ready_wrapper (GObject *source_object,
                                                                   GAsyncResult *res,
                                                                   void *user_data);
static void folks_inspect_commands_backends_real_run (FolksInspectCommand* base,
                                               const gchar* command_string,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_);
static gboolean folks_inspect_commands_backends_real_run_co (FolksInspectCommandsBackendsRunData* _data_);
FolksBackendStore* folks_inspect_client_get_backend_store (FolksInspectClient* self);
void folks_inspect_utils_print_line (const gchar* format,
                                     ...) G_GNUC_PRINTF(1,2);
void folks_inspect_utils_indent (void);
void folks_inspect_utils_unindent (void);
static gchar** folks_inspect_commands_backends_real_complete_subcommand (FolksInspectCommand* base,
                                                                  const gchar* subcommand,
                                                                  int* result_length1);
gchar* folks_inspect_utils_backend_name_completion_cb (const gchar* word,
                                                       gint state);
static gchar* _folks_inspect_utils_backend_name_completion_cb_rl_compentry_func_t (const gchar* str,
                                                                            gint a);
static gchar** _vala_array_dup1 (gchar** self,
                          int length);
static gint _vala_array_length (gpointer array);


FolksInspectCommandsBackends*
folks_inspect_commands_backends_construct (GType object_type,
                                           FolksInspectClient* client)
{
	FolksInspectCommandsBackends* self = NULL;
#line 47 "/run/build/folks/tools/inspect/command-backends.vala"
	g_return_val_if_fail (client != NULL, NULL);
#line 49 "/run/build/folks/tools/inspect/command-backends.vala"
	self = (FolksInspectCommandsBackends*) folks_inspect_command_construct (object_type, client);
#line 47 "/run/build/folks/tools/inspect/command-backends.vala"
	return self;
#line 226 "command-backends.c"
}


FolksInspectCommandsBackends*
folks_inspect_commands_backends_new (FolksInspectClient* client)
{
#line 47 "/run/build/folks/tools/inspect/command-backends.vala"
	return folks_inspect_commands_backends_construct (FOLKS_INSPECT_COMMANDS_TYPE_BACKENDS, client);
#line 235 "command-backends.c"
}


static void
folks_inspect_commands_backends_real_run_data_free (gpointer _data)
{
	FolksInspectCommandsBackendsRunData* _data_;
	_data_ = _data;
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	_g_free0 (_data_->command_string);
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	_folks_inspect_command_unref0 (_data_->self);
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	g_slice_free (FolksInspectCommandsBackendsRunData, _data_);
#line 250 "command-backends.c"
}


static void
folks_inspect_commands_backends_real_run_async_ready_wrapper (GObject *source_object,
                                                              GAsyncResult *res,
                                                              void *user_data)
{
	FolksInspectCommandsBackendsRunData* _task_data_;
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	if (_task_data_->_callback_ != NULL) {
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 266 "command-backends.c"
	}
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	_task_data_->_task_complete_ = TRUE;
#line 270 "command-backends.c"
}


static gpointer
_folks_inspect_command_ref0 (gpointer self)
{
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	return self ? folks_inspect_command_ref (self) : NULL;
#line 279 "command-backends.c"
}


static void
folks_inspect_commands_backends_real_run (FolksInspectCommand* base,
                                          const gchar* command_string,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_)
{
	FolksInspectCommandsBackends * self;
	FolksInspectCommandsBackendsRunData* _data_;
	FolksInspectCommandsBackends* _tmp0_;
	gchar* _tmp1_;
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	self = (FolksInspectCommandsBackends*) base;
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	_data_ = g_slice_new0 (FolksInspectCommandsBackendsRunData);
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	_data_->_callback_ = _callback_;
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	_data_->_async_result = g_task_new (NULL, NULL, folks_inspect_commands_backends_real_run_async_ready_wrapper, _user_data_);
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	if (_callback_ == NULL) {
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_task_complete_ = TRUE;
#line 305 "command-backends.c"
	}
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_inspect_commands_backends_real_run_data_free);
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	_tmp0_ = _folks_inspect_command_ref0 (self);
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	_data_->self = _tmp0_;
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	_tmp1_ = g_strdup (command_string);
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	_g_free0 (_data_->command_string);
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	_data_->command_string = _tmp1_;
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	folks_inspect_commands_backends_real_run_co (_data_);
#line 321 "command-backends.c"
}


static gint
folks_inspect_commands_backends_real_run_finish (FolksInspectCommand* base,
                                                 GAsyncResult* _res_)
{
	gint result;
	FolksInspectCommandsBackendsRunData* _data_;
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	result = _data_->result;
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	return result;
#line 337 "command-backends.c"
}


static gboolean
folks_inspect_commands_backends_real_run_co (FolksInspectCommandsBackendsRunData* _data_)
{
#line 52 "/run/build/folks/tools/inspect/command-backends.vala"
	switch (_data_->_state_) {
#line 52 "/run/build/folks/tools/inspect/command-backends.vala"
		case 0:
#line 348 "command-backends.c"
		goto _state_0;
		default:
#line 52 "/run/build/folks/tools/inspect/command-backends.vala"
		g_assert_not_reached ();
#line 353 "command-backends.c"
	}
	_state_0:
#line 54 "/run/build/folks/tools/inspect/command-backends.vala"
	if (_data_->command_string == NULL) {
#line 57 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp0_ = ((FolksInspectCommand*) _data_->self)->client;
#line 57 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp1_ = folks_inspect_client_get_backend_store (_data_->_tmp0_);
#line 57 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp2_ = _data_->_tmp1_;
#line 57 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp3_ = folks_backend_store_list_backends (_data_->_tmp2_);
#line 57 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->backends = _data_->_tmp3_;
#line 60 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp4_ = _data_->backends;
#line 60 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp5_ = gee_collection_get_size (_data_->_tmp4_);
#line 60 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp6_ = _data_->_tmp5_;
#line 60 "/run/build/folks/tools/inspect/command-backends.vala"
		folks_inspect_utils_print_line ("%u backends:", (guint) _data_->_tmp6_);
#line 62 "/run/build/folks/tools/inspect/command-backends.vala"
		folks_inspect_utils_indent ();
#line 378 "command-backends.c"
		{
#line 63 "/run/build/folks/tools/inspect/command-backends.vala"
			_data_->_tmp7_ = _data_->backends;
#line 63 "/run/build/folks/tools/inspect/command-backends.vala"
			_data_->_tmp8_ = gee_iterable_iterator ((GeeIterable*) _data_->_tmp7_);
#line 63 "/run/build/folks/tools/inspect/command-backends.vala"
			_data_->_backend_it = _data_->_tmp8_;
#line 63 "/run/build/folks/tools/inspect/command-backends.vala"
			while (TRUE) {
#line 63 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp9_ = _data_->_backend_it;
#line 63 "/run/build/folks/tools/inspect/command-backends.vala"
				if (!gee_iterator_next (_data_->_tmp9_)) {
#line 63 "/run/build/folks/tools/inspect/command-backends.vala"
					break;
#line 394 "command-backends.c"
				}
#line 63 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp10_ = _data_->_backend_it;
#line 63 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp11_ = gee_iterator_get (_data_->_tmp10_);
#line 63 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->backend = (FolksBackend*) _data_->_tmp11_;
#line 64 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp12_ = _data_->backend;
#line 64 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp13_ = folks_backend_get_name (_data_->_tmp12_);
#line 64 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp14_ = _data_->_tmp13_;
#line 64 "/run/build/folks/tools/inspect/command-backends.vala"
				folks_inspect_utils_print_line ("%s", _data_->_tmp14_);
#line 63 "/run/build/folks/tools/inspect/command-backends.vala"
				_g_object_unref0 (_data_->backend);
#line 412 "command-backends.c"
			}
#line 63 "/run/build/folks/tools/inspect/command-backends.vala"
			_g_object_unref0 (_data_->_backend_it);
#line 416 "command-backends.c"
		}
#line 65 "/run/build/folks/tools/inspect/command-backends.vala"
		folks_inspect_utils_unindent ();
#line 54 "/run/build/folks/tools/inspect/command-backends.vala"
		_g_object_unref0 (_data_->backends);
#line 422 "command-backends.c"
	} else {
#line 70 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp15_ = ((FolksInspectCommand*) _data_->self)->client;
#line 70 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp16_ = folks_inspect_client_get_backend_store (_data_->_tmp15_);
#line 70 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp17_ = _data_->_tmp16_;
#line 70 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp18_ = folks_backend_store_dup_backend_by_name (_data_->_tmp17_, _data_->command_string);
#line 70 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_vala1_backend = _data_->_tmp18_;
#line 73 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp19_ = _data_->_vala1_backend;
#line 73 "/run/build/folks/tools/inspect/command-backends.vala"
		if (_data_->_tmp19_ == NULL) {
#line 75 "/run/build/folks/tools/inspect/command-backends.vala"
			folks_inspect_utils_print_line ("Unrecognised backend name '%s'.", _data_->command_string);
#line 77 "/run/build/folks/tools/inspect/command-backends.vala"
			_data_->result = 1;
#line 77 "/run/build/folks/tools/inspect/command-backends.vala"
			_g_object_unref0 (_data_->_vala1_backend);
#line 77 "/run/build/folks/tools/inspect/command-backends.vala"
			g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 77 "/run/build/folks/tools/inspect/command-backends.vala"
			if (_data_->_state_ != 0) {
#line 77 "/run/build/folks/tools/inspect/command-backends.vala"
				while (_data_->_task_complete_ != TRUE) {
#line 77 "/run/build/folks/tools/inspect/command-backends.vala"
					g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 452 "command-backends.c"
				}
			}
#line 77 "/run/build/folks/tools/inspect/command-backends.vala"
			g_object_unref (_data_->_async_result);
#line 77 "/run/build/folks/tools/inspect/command-backends.vala"
			return FALSE;
#line 459 "command-backends.c"
		}
#line 80 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp20_ = _data_->_vala1_backend;
#line 80 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp21_ = folks_backend_get_name (_data_->_tmp20_);
#line 80 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp22_ = _data_->_tmp21_;
#line 80 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp23_ = _data_->_vala1_backend;
#line 80 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp24_ = folks_backend_get_persona_stores (_data_->_tmp23_);
#line 80 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp25_ = _data_->_tmp24_;
#line 80 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp26_ = gee_map_get_size (_data_->_tmp25_);
#line 80 "/run/build/folks/tools/inspect/command-backends.vala"
		_data_->_tmp27_ = _data_->_tmp26_;
#line 80 "/run/build/folks/tools/inspect/command-backends.vala"
		folks_inspect_utils_print_line ("Backend '%s' with %u persona stores " "(type ID, ID ('display name')):", _data_->_tmp22_, _data_->_tmp27_);
#line 85 "/run/build/folks/tools/inspect/command-backends.vala"
		folks_inspect_utils_indent ();
#line 481 "command-backends.c"
		{
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
			_data_->_tmp28_ = _data_->_vala1_backend;
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
			_data_->_tmp29_ = folks_backend_get_persona_stores (_data_->_tmp28_);
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
			_data_->_tmp30_ = _data_->_tmp29_;
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
			_data_->_tmp31_ = gee_map_get_values (_data_->_tmp30_);
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
			_data_->_tmp32_ = _data_->_tmp31_;
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
			_data_->_tmp33_ = _data_->_tmp32_;
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
			_data_->_tmp34_ = gee_iterable_iterator ((GeeIterable*) _data_->_tmp33_);
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
			_data_->_tmp35_ = _data_->_tmp34_;
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
			_g_object_unref0 (_data_->_tmp33_);
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
			_data_->_store_it = _data_->_tmp35_;
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
			while (TRUE) {
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp36_ = _data_->_store_it;
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
				if (!gee_iterator_next (_data_->_tmp36_)) {
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
					break;
#line 511 "command-backends.c"
				}
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp37_ = _data_->_store_it;
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp38_ = gee_iterator_get (_data_->_tmp37_);
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->store = (FolksPersonaStore*) _data_->_tmp38_;
#line 88 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp39_ = _data_->store;
#line 88 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp40_ = folks_persona_store_get_type_id (_data_->_tmp39_);
#line 88 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp41_ = _data_->_tmp40_;
#line 88 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp42_ = _data_->store;
#line 88 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp43_ = folks_persona_store_get_id (_data_->_tmp42_);
#line 88 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp44_ = _data_->_tmp43_;
#line 88 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp45_ = _data_->store;
#line 88 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp46_ = folks_persona_store_get_display_name (_data_->_tmp45_);
#line 88 "/run/build/folks/tools/inspect/command-backends.vala"
				_data_->_tmp47_ = _data_->_tmp46_;
#line 88 "/run/build/folks/tools/inspect/command-backends.vala"
				folks_inspect_utils_print_line ("%s, %s ('%s')", _data_->_tmp41_, _data_->_tmp44_, _data_->_tmp47_);
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
				_g_object_unref0 (_data_->store);
#line 541 "command-backends.c"
			}
#line 86 "/run/build/folks/tools/inspect/command-backends.vala"
			_g_object_unref0 (_data_->_store_it);
#line 545 "command-backends.c"
		}
#line 91 "/run/build/folks/tools/inspect/command-backends.vala"
		folks_inspect_utils_unindent ();
#line 54 "/run/build/folks/tools/inspect/command-backends.vala"
		_g_object_unref0 (_data_->_vala1_backend);
#line 551 "command-backends.c"
	}
#line 94 "/run/build/folks/tools/inspect/command-backends.vala"
	_data_->result = 0;
#line 94 "/run/build/folks/tools/inspect/command-backends.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 94 "/run/build/folks/tools/inspect/command-backends.vala"
	if (_data_->_state_ != 0) {
#line 94 "/run/build/folks/tools/inspect/command-backends.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 94 "/run/build/folks/tools/inspect/command-backends.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 563 "command-backends.c"
		}
	}
#line 94 "/run/build/folks/tools/inspect/command-backends.vala"
	g_object_unref (_data_->_async_result);
#line 94 "/run/build/folks/tools/inspect/command-backends.vala"
	return FALSE;
#line 570 "command-backends.c"
}


static gchar*
_folks_inspect_utils_backend_name_completion_cb_rl_compentry_func_t (const gchar* str,
                                                                     gint a)
{
	gchar* result;
	result = folks_inspect_utils_backend_name_completion_cb (str, a);
#line 100 "/run/build/folks/tools/inspect/command-backends.vala"
	return result;
#line 582 "command-backends.c"
}


static gchar**
_vala_array_dup1 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
#line 100 "/run/build/folks/tools/inspect/command-backends.vala"
	result = g_new0 (gchar*, length + 1);
#line 100 "/run/build/folks/tools/inspect/command-backends.vala"
	for (i = 0; i < length; i++) {
#line 596 "command-backends.c"
		gchar* _tmp0_;
#line 100 "/run/build/folks/tools/inspect/command-backends.vala"
		_tmp0_ = g_strdup (self[i]);
#line 100 "/run/build/folks/tools/inspect/command-backends.vala"
		result[i] = _tmp0_;
#line 602 "command-backends.c"
	}
#line 100 "/run/build/folks/tools/inspect/command-backends.vala"
	return result;
#line 606 "command-backends.c"
}


static gchar**
folks_inspect_commands_backends_real_complete_subcommand (FolksInspectCommand* base,
                                                          const gchar* subcommand,
                                                          int* result_length1)
{
	FolksInspectCommandsBackends * self;
	gchar** result = NULL;
	gchar** _tmp0_;
	gchar** _tmp1_;
	gchar** _tmp2_;
	gint _tmp2__length1;
	gchar** _tmp3_;
	gint _tmp3__length1;
#line 97 "/run/build/folks/tools/inspect/command-backends.vala"
	self = (FolksInspectCommandsBackends*) base;
#line 97 "/run/build/folks/tools/inspect/command-backends.vala"
	g_return_val_if_fail (subcommand != NULL, NULL);
#line 100 "/run/build/folks/tools/inspect/command-backends.vala"
	_tmp1_ = _tmp0_ = rl_completion_matches (subcommand, _folks_inspect_utils_backend_name_completion_cb_rl_compentry_func_t);
#line 100 "/run/build/folks/tools/inspect/command-backends.vala"
	_tmp2_ = (_tmp1_ != NULL) ? _vala_array_dup1 (_tmp1_, _vala_array_length (_tmp0_)) : ((gpointer) _tmp1_);
#line 100 "/run/build/folks/tools/inspect/command-backends.vala"
	_tmp2__length1 = _vala_array_length (_tmp0_);
#line 100 "/run/build/folks/tools/inspect/command-backends.vala"
	_tmp3_ = _tmp2_;
#line 100 "/run/build/folks/tools/inspect/command-backends.vala"
	_tmp3__length1 = _tmp2__length1;
#line 100 "/run/build/folks/tools/inspect/command-backends.vala"
	if (result_length1) {
#line 100 "/run/build/folks/tools/inspect/command-backends.vala"
		*result_length1 = _tmp3__length1;
#line 641 "command-backends.c"
	}
#line 100 "/run/build/folks/tools/inspect/command-backends.vala"
	result = _tmp3_;
#line 100 "/run/build/folks/tools/inspect/command-backends.vala"
	return result;
#line 647 "command-backends.c"
}


static const gchar*
folks_inspect_commands_backends_real_get_name (FolksInspectCommand* base)
{
	const gchar* result;
	FolksInspectCommandsBackends* self;
#line 29 "/run/build/folks/tools/inspect/command-backends.vala"
	self = (FolksInspectCommandsBackends*) base;
#line 29 "/run/build/folks/tools/inspect/command-backends.vala"
	result = "backends";
#line 29 "/run/build/folks/tools/inspect/command-backends.vala"
	return result;
#line 662 "command-backends.c"
}


static const gchar*
folks_inspect_commands_backends_real_get_description (FolksInspectCommand* base)
{
	const gchar* result;
	FolksInspectCommandsBackends* self;
#line 34 "/run/build/folks/tools/inspect/command-backends.vala"
	self = (FolksInspectCommandsBackends*) base;
#line 34 "/run/build/folks/tools/inspect/command-backends.vala"
	result = "Inspect the backends loaded by the aggregator.";
#line 34 "/run/build/folks/tools/inspect/command-backends.vala"
	return result;
#line 677 "command-backends.c"
}


static const gchar*
folks_inspect_commands_backends_real_get_help (FolksInspectCommand* base)
{
	const gchar* result;
	FolksInspectCommandsBackends* self;
#line 39 "/run/build/folks/tools/inspect/command-backends.vala"
	self = (FolksInspectCommandsBackends*) base;
#line 41 "/run/build/folks/tools/inspect/command-backends.vala"
	result = "backends                   List all known backends.\n" "backends [backend name]    Display the details of the " "specified backend and list its persona stores.";
#line 41 "/run/build/folks/tools/inspect/command-backends.vala"
	return result;
#line 692 "command-backends.c"
}


static void
folks_inspect_commands_backends_class_init (FolksInspectCommandsBackendsClass * klass)
{
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	folks_inspect_commands_backends_parent_class = g_type_class_peek_parent (klass);
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	((FolksInspectCommandClass *) klass)->run = (void (*) (FolksInspectCommand *, const gchar*, GAsyncReadyCallback, gpointer)) folks_inspect_commands_backends_real_run;
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	((FolksInspectCommandClass *) klass)->run_finish = (gint (*) (FolksInspectCommand *, GAsyncResult*)) folks_inspect_commands_backends_real_run_finish;
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	((FolksInspectCommandClass *) klass)->complete_subcommand = (gchar** (*) (FolksInspectCommand *, const gchar*, int*)) folks_inspect_commands_backends_real_complete_subcommand;
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	FOLKS_INSPECT_COMMAND_CLASS (klass)->get_name = folks_inspect_commands_backends_real_get_name;
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	FOLKS_INSPECT_COMMAND_CLASS (klass)->get_description = folks_inspect_commands_backends_real_get_description;
#line 25 "/run/build/folks/tools/inspect/command-backends.vala"
	FOLKS_INSPECT_COMMAND_CLASS (klass)->get_help = folks_inspect_commands_backends_real_get_help;
#line 713 "command-backends.c"
}


static void
folks_inspect_commands_backends_instance_init (FolksInspectCommandsBackends * self)
{
}


GType
folks_inspect_commands_backends_get_type (void)
{
	static volatile gsize folks_inspect_commands_backends_type_id__volatile = 0;
	if (g_once_init_enter (&folks_inspect_commands_backends_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksInspectCommandsBackendsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_inspect_commands_backends_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksInspectCommandsBackends), 0, (GInstanceInitFunc) folks_inspect_commands_backends_instance_init, NULL };
		GType folks_inspect_commands_backends_type_id;
		folks_inspect_commands_backends_type_id = g_type_register_static (FOLKS_INSPECT_TYPE_COMMAND, "FolksInspectCommandsBackends", &g_define_type_info, 0);
		g_once_init_leave (&folks_inspect_commands_backends_type_id__volatile, folks_inspect_commands_backends_type_id);
	}
	return folks_inspect_commands_backends_type_id__volatile;
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



