/* Repository.c generated by valac 0.40.11, the Vala compiler
 * generated from Repository.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gobject/gvaluecollector.h>


#define OBJECTS_TYPE_REPOSITORY (objects_repository_get_type ())
#define OBJECTS_REPOSITORY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_REPOSITORY, ObjectsRepository))
#define OBJECTS_REPOSITORY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_REPOSITORY, ObjectsRepositoryClass))
#define OBJECTS_IS_REPOSITORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_REPOSITORY))
#define OBJECTS_IS_REPOSITORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_REPOSITORY))
#define OBJECTS_REPOSITORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_REPOSITORY, ObjectsRepositoryClass))

typedef struct _ObjectsRepository ObjectsRepository;
typedef struct _ObjectsRepositoryClass ObjectsRepositoryClass;
typedef struct _ObjectsRepositoryPrivate ObjectsRepositoryPrivate;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _ObjectsParamSpecRepository ObjectsParamSpecRepository;

struct _ObjectsRepository {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsRepositoryPrivate * priv;
	gint64 id;
	gchar* name;
	gint sensitive;
	gchar* issues;
	gint64 user_id;
};

struct _ObjectsRepositoryClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsRepository *self);
};

struct _ObjectsParamSpecRepository {
	GParamSpec parent_instance;
};


static gpointer objects_repository_parent_class = NULL;

gpointer objects_repository_ref (gpointer instance);
void objects_repository_unref (gpointer instance);
GParamSpec* objects_param_spec_repository (const gchar* name,
                                           const gchar* nick,
                                           const gchar* blurb,
                                           GType object_type,
                                           GParamFlags flags);
void objects_value_set_repository (GValue* value,
                                   gpointer v_object);
void objects_value_take_repository (GValue* value,
                                    gpointer v_object);
gpointer objects_value_get_repository (const GValue* value);
GType objects_repository_get_type (void) G_GNUC_CONST;
ObjectsRepository* objects_repository_new (gint64 id,
                                           const gchar* name,
                                           gint sensitive,
                                           const gchar* issues,
                                           gint64 user_id);
ObjectsRepository* objects_repository_construct (GType object_type,
                                                 gint64 id,
                                                 const gchar* name,
                                                 gint sensitive,
                                                 const gchar* issues,
                                                 gint64 user_id);
static void objects_repository_finalize (ObjectsRepository * obj);


ObjectsRepository*
objects_repository_construct (GType object_type,
                              gint64 id,
                              const gchar* name,
                              gint sensitive,
                              const gchar* issues,
                              gint64 user_id)
{
	ObjectsRepository* self = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
#line 29 "/run/build/planner/src/Objects/Repository.vala"
	g_return_val_if_fail (name != NULL, NULL);
#line 29 "/run/build/planner/src/Objects/Repository.vala"
	g_return_val_if_fail (issues != NULL, NULL);
#line 29 "/run/build/planner/src/Objects/Repository.vala"
	self = (ObjectsRepository*) g_type_create_instance (object_type);
#line 34 "/run/build/planner/src/Objects/Repository.vala"
	self->id = id;
#line 35 "/run/build/planner/src/Objects/Repository.vala"
	_tmp0_ = g_strdup (name);
#line 35 "/run/build/planner/src/Objects/Repository.vala"
	_g_free0 (self->name);
#line 35 "/run/build/planner/src/Objects/Repository.vala"
	self->name = _tmp0_;
#line 36 "/run/build/planner/src/Objects/Repository.vala"
	self->sensitive = sensitive;
#line 37 "/run/build/planner/src/Objects/Repository.vala"
	_tmp1_ = g_strdup (issues);
#line 37 "/run/build/planner/src/Objects/Repository.vala"
	_g_free0 (self->issues);
#line 37 "/run/build/planner/src/Objects/Repository.vala"
	self->issues = _tmp1_;
#line 38 "/run/build/planner/src/Objects/Repository.vala"
	self->user_id = user_id;
#line 29 "/run/build/planner/src/Objects/Repository.vala"
	return self;
#line 134 "Repository.c"
}


ObjectsRepository*
objects_repository_new (gint64 id,
                        const gchar* name,
                        gint sensitive,
                        const gchar* issues,
                        gint64 user_id)
{
#line 29 "/run/build/planner/src/Objects/Repository.vala"
	return objects_repository_construct (OBJECTS_TYPE_REPOSITORY, id, name, sensitive, issues, user_id);
#line 147 "Repository.c"
}


static void
objects_value_repository_init (GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	value->data[0].v_pointer = NULL;
#line 156 "Repository.c"
}


static void
objects_value_repository_free_value (GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	if (value->data[0].v_pointer) {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		objects_repository_unref (value->data[0].v_pointer);
#line 167 "Repository.c"
	}
}


static void
objects_value_repository_copy_value (const GValue* src_value,
                                     GValue* dest_value)
{
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	if (src_value->data[0].v_pointer) {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		dest_value->data[0].v_pointer = objects_repository_ref (src_value->data[0].v_pointer);
#line 180 "Repository.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		dest_value->data[0].v_pointer = NULL;
#line 184 "Repository.c"
	}
}


static gpointer
objects_value_repository_peek_pointer (const GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	return value->data[0].v_pointer;
#line 194 "Repository.c"
}


static gchar*
objects_value_repository_collect_value (GValue* value,
                                        guint n_collect_values,
                                        GTypeCValue* collect_values,
                                        guint collect_flags)
{
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	if (collect_values[0].v_pointer) {
#line 206 "Repository.c"
		ObjectsRepository * object;
		object = collect_values[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		if (object->parent_instance.g_class == NULL) {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 213 "Repository.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 217 "Repository.c"
		}
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		value->data[0].v_pointer = objects_repository_ref (object);
#line 221 "Repository.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		value->data[0].v_pointer = NULL;
#line 225 "Repository.c"
	}
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	return NULL;
#line 229 "Repository.c"
}


static gchar*
objects_value_repository_lcopy_value (const GValue* value,
                                      guint n_collect_values,
                                      GTypeCValue* collect_values,
                                      guint collect_flags)
{
	ObjectsRepository ** object_p;
	object_p = collect_values[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	if (!object_p) {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 245 "Repository.c"
	}
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	if (!value->data[0].v_pointer) {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		*object_p = NULL;
#line 251 "Repository.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		*object_p = value->data[0].v_pointer;
#line 255 "Repository.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		*object_p = objects_repository_ref (value->data[0].v_pointer);
#line 259 "Repository.c"
	}
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	return NULL;
#line 263 "Repository.c"
}


GParamSpec*
objects_param_spec_repository (const gchar* name,
                               const gchar* nick,
                               const gchar* blurb,
                               GType object_type,
                               GParamFlags flags)
{
	ObjectsParamSpecRepository* spec;
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	g_return_val_if_fail (g_type_is_a (object_type, OBJECTS_TYPE_REPOSITORY), NULL);
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	return G_PARAM_SPEC (spec);
#line 283 "Repository.c"
}


gpointer
objects_value_get_repository (const GValue* value)
{
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, OBJECTS_TYPE_REPOSITORY), NULL);
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	return value->data[0].v_pointer;
#line 294 "Repository.c"
}


void
objects_value_set_repository (GValue* value,
                              gpointer v_object)
{
	ObjectsRepository * old;
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, OBJECTS_TYPE_REPOSITORY));
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	old = value->data[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	if (v_object) {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, OBJECTS_TYPE_REPOSITORY));
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		value->data[0].v_pointer = v_object;
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		objects_repository_ref (value->data[0].v_pointer);
#line 317 "Repository.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		value->data[0].v_pointer = NULL;
#line 321 "Repository.c"
	}
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	if (old) {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		objects_repository_unref (old);
#line 327 "Repository.c"
	}
}


void
objects_value_take_repository (GValue* value,
                               gpointer v_object)
{
	ObjectsRepository * old;
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, OBJECTS_TYPE_REPOSITORY));
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	old = value->data[0].v_pointer;
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	if (v_object) {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, OBJECTS_TYPE_REPOSITORY));
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		value->data[0].v_pointer = v_object;
#line 349 "Repository.c"
	} else {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		value->data[0].v_pointer = NULL;
#line 353 "Repository.c"
	}
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	if (old) {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		objects_repository_unref (old);
#line 359 "Repository.c"
	}
}


static void
objects_repository_class_init (ObjectsRepositoryClass * klass)
{
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	objects_repository_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	((ObjectsRepositoryClass *) klass)->finalize = objects_repository_finalize;
#line 371 "Repository.c"
}


static void
objects_repository_instance_init (ObjectsRepository * self)
{
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	self->ref_count = 1;
#line 380 "Repository.c"
}


static void
objects_repository_finalize (ObjectsRepository * obj)
{
	ObjectsRepository * self;
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, OBJECTS_TYPE_REPOSITORY, ObjectsRepository);
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	g_signal_handlers_destroy (self);
#line 24 "/run/build/planner/src/Objects/Repository.vala"
	_g_free0 (self->name);
#line 26 "/run/build/planner/src/Objects/Repository.vala"
	_g_free0 (self->issues);
#line 396 "Repository.c"
}


GType
objects_repository_get_type (void)
{
	static volatile gsize objects_repository_type_id__volatile = 0;
	if (g_once_init_enter (&objects_repository_type_id__volatile)) {
		static const GTypeValueTable g_define_type_value_table = { objects_value_repository_init, objects_value_repository_free_value, objects_value_repository_copy_value, objects_value_repository_peek_pointer, "p", objects_value_repository_collect_value, "p", objects_value_repository_lcopy_value };
		static const GTypeInfo g_define_type_info = { sizeof (ObjectsRepositoryClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) objects_repository_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ObjectsRepository), 0, (GInstanceInitFunc) objects_repository_instance_init, &g_define_type_value_table };
		static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
		GType objects_repository_type_id;
		objects_repository_type_id = g_type_register_fundamental (g_type_fundamental_next (), "ObjectsRepository", &g_define_type_info, &g_define_type_fundamental_info, 0);
		g_once_init_leave (&objects_repository_type_id__volatile, objects_repository_type_id);
	}
	return objects_repository_type_id__volatile;
}


gpointer
objects_repository_ref (gpointer instance)
{
	ObjectsRepository * self;
	self = instance;
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	g_atomic_int_inc (&self->ref_count);
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	return instance;
#line 425 "Repository.c"
}


void
objects_repository_unref (gpointer instance)
{
	ObjectsRepository * self;
	self = instance;
#line 22 "/run/build/planner/src/Objects/Repository.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		OBJECTS_REPOSITORY_GET_CLASS (self)->finalize (self);
#line 22 "/run/build/planner/src/Objects/Repository.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 440 "Repository.c"
	}
}



