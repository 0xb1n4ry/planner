/* unity-category.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-category.vala, do not modify */

/*
 * Copyright (C) 2011 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Neil Jagdish Patel <neil.patel@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include "unity.h"
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>

enum  {
	UNITY_METADATA_PROVIDER_0_PROPERTY,
	UNITY_METADATA_PROVIDER_NUM_PROPERTIES
};
static GParamSpec* unity_metadata_provider_properties[UNITY_METADATA_PROVIDER_NUM_PROPERTIES];
enum  {
	UNITY_PROGRESS_SOURCE_PROVIDER_0_PROPERTY,
	UNITY_PROGRESS_SOURCE_PROVIDER_DBUS_NAME_PROPERTY,
	UNITY_PROGRESS_SOURCE_PROVIDER_DBUS_PATH_PROPERTY,
	UNITY_PROGRESS_SOURCE_PROVIDER_NUM_PROPERTIES
};
static GParamSpec* unity_progress_source_provider_properties[UNITY_PROGRESS_SOURCE_PROVIDER_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
enum  {
	UNITY_CATEGORY_0_PROPERTY,
	UNITY_CATEGORY_ID_PROPERTY,
	UNITY_CATEGORY_NAME_PROPERTY,
	UNITY_CATEGORY_ICON_HINT_PROPERTY,
	UNITY_CATEGORY_DEFAULT_RENDERER_PROPERTY,
	UNITY_CATEGORY_CONTENT_TYPE_PROPERTY,
	UNITY_CATEGORY_RENDERER_HINT_PROPERTY,
	UNITY_CATEGORY_RENDERER_PROPERTY,
	UNITY_CATEGORY_NUM_PROPERTIES
};
static GParamSpec* unity_category_properties[UNITY_CATEGORY_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))

struct _UnityProgressSourceProviderPrivate {
	gchar* _dbus_name;
	gchar* _dbus_path;
};

struct _UnityCategoryPrivate {
	gchar* _id;
	gchar* _name;
	GIcon* _icon_hint;
	UnityCategoryRenderer _default_renderer;
	UnityCategoryContentType _content_type;
	gchar* _renderer_hint;
	GHashTable* hints;
};


static gpointer unity_metadata_provider_parent_class = NULL;
static gpointer unity_progress_source_provider_parent_class = NULL;
static gpointer unity_category_parent_class = NULL;

void unity_metadata_provider_update_hints (UnityMetadataProvider* self,
                                           GHashTable* hints);
static void unity_metadata_provider_real_update_hints (UnityMetadataProvider* self,
                                                GHashTable* hints);
#define UNITY_PROGRESS_SOURCE_PROVIDER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_PROGRESS_SOURCE_PROVIDER, UnityProgressSourceProviderPrivate))
static void unity_progress_source_provider_real_update_hints (UnityMetadataProvider* base,
                                                       GHashTable* hints);
static void unity_progress_source_provider_finalize (GObject * obj);
static void _vala_unity_progress_source_provider_get_property (GObject * object,
                                                        guint property_id,
                                                        GValue * value,
                                                        GParamSpec * pspec);
static void _vala_unity_progress_source_provider_set_property (GObject * object,
                                                        guint property_id,
                                                        const GValue * value,
                                                        GParamSpec * pspec);
#define UNITY_CATEGORY_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_CATEGORY, UnityCategoryPrivate))
static void _g_free0_ (gpointer var);
static void _g_variant_unref0_ (gpointer var);
GHashTable* unity_category_get_hints (UnityCategory* self);
static void unity_category_finalize (GObject * obj);
static void _vala_unity_category_get_property (GObject * object,
                                        guint property_id,
                                        GValue * value,
                                        GParamSpec * pspec);
static void _vala_unity_category_set_property (GObject * object,
                                        guint property_id,
                                        const GValue * value,
                                        GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);


UnityCategoryRenderer
unity_category_renderer_from_string (const gchar* renderer_name)
{
	UnityCategoryRenderer result = 0;
	const gchar* _tmp0_;
	GQuark _tmp2_ = 0U;
	static GQuark _tmp1_label0 = 0;
	static GQuark _tmp1_label1 = 0;
	static GQuark _tmp1_label2 = 0;
	static GQuark _tmp1_label3 = 0;
	static GQuark _tmp1_label4 = 0;
	static GQuark _tmp1_label5 = 0;
	g_return_val_if_fail (renderer_name != NULL, 0);
	_tmp0_ = renderer_name;
	_tmp2_ = (NULL == _tmp0_) ? 0 : g_quark_from_string (_tmp0_);
	if (_tmp2_ == ((0 != _tmp1_label0) ? _tmp1_label0 : (_tmp1_label0 = g_quark_from_static_string ("default")))) {
		switch (0) {
			default:
			{
				result = UNITY_CATEGORY_RENDERER_DEFAULT;
				return result;
			}
		}
	} else if (_tmp2_ == ((0 != _tmp1_label1) ? _tmp1_label1 : (_tmp1_label1 = g_quark_from_static_string ("grid")))) {
		switch (0) {
			default:
			{
				result = UNITY_CATEGORY_RENDERER_GRID;
				return result;
			}
		}
	} else if (_tmp2_ == ((0 != _tmp1_label2) ? _tmp1_label2 : (_tmp1_label2 = g_quark_from_static_string ("carousel")))) {
		switch (0) {
			default:
			{
				result = UNITY_CATEGORY_RENDERER_CAROUSEL;
				return result;
			}
		}
	} else if (_tmp2_ == ((0 != _tmp1_label3) ? _tmp1_label3 : (_tmp1_label3 = g_quark_from_static_string ("list")))) {
		switch (0) {
			default:
			{
				result = UNITY_CATEGORY_RENDERER_LIST;
				return result;
			}
		}
	} else if (_tmp2_ == ((0 != _tmp1_label4) ? _tmp1_label4 : (_tmp1_label4 = g_quark_from_static_string ("dynamic")))) {
		switch (0) {
			default:
			{
				result = UNITY_CATEGORY_RENDERER_DYNAMIC;
				return result;
			}
		}
	} else if (_tmp2_ == ((0 != _tmp1_label5) ? _tmp1_label5 : (_tmp1_label5 = g_quark_from_static_string ("special")))) {
		switch (0) {
			default:
			{
				result = UNITY_CATEGORY_RENDERER_SPECIAL;
				return result;
			}
		}
	} else {
		switch (0) {
			default:
			{
				g_warning ("unity-category.vala:57: Unknown CategoryRenderer: %s", renderer_name);
				result = UNITY_CATEGORY_RENDERER_DEFAULT;
				return result;
			}
		}
	}
}


const gchar*
unity_category_renderer_to_string (UnityCategoryRenderer val)
{
	const gchar* result = NULL;
	switch (val) {
		case UNITY_CATEGORY_RENDERER_DEFAULT:
		{
			result = "default";
			return result;
		}
		case UNITY_CATEGORY_RENDERER_GRID:
		{
			result = "grid";
			return result;
		}
		case UNITY_CATEGORY_RENDERER_LIST:
		{
			result = "list";
			return result;
		}
		case UNITY_CATEGORY_RENDERER_CAROUSEL:
		{
			result = "carousel";
			return result;
		}
		case UNITY_CATEGORY_RENDERER_DYNAMIC:
		{
			result = "dynamic";
			return result;
		}
		case UNITY_CATEGORY_RENDERER_SPECIAL:
		{
			result = "special";
			return result;
		}
		default:
		{
			result = "default";
			return result;
		}
	}
}


GType
unity_category_renderer_get_type (void)
{
	static volatile gsize unity_category_renderer_type_id__volatile = 0;
	if (g_once_init_enter (&unity_category_renderer_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_CATEGORY_RENDERER_DEFAULT, "UNITY_CATEGORY_RENDERER_DEFAULT", "default"}, {UNITY_CATEGORY_RENDERER_GRID, "UNITY_CATEGORY_RENDERER_GRID", "grid"}, {UNITY_CATEGORY_RENDERER_CAROUSEL, "UNITY_CATEGORY_RENDERER_CAROUSEL", "carousel"}, {UNITY_CATEGORY_RENDERER_LIST, "UNITY_CATEGORY_RENDERER_LIST", "list"}, {UNITY_CATEGORY_RENDERER_DYNAMIC, "UNITY_CATEGORY_RENDERER_DYNAMIC", "dynamic"}, {UNITY_CATEGORY_RENDERER_SPECIAL, "UNITY_CATEGORY_RENDERER_SPECIAL", "special"}, {UNITY_CATEGORY_RENDERER_VERTICAL_TILE, "UNITY_CATEGORY_RENDERER_VERTICAL_TILE", "vertical-tile"}, {UNITY_CATEGORY_RENDERER_HORIZONTAL_TILE, "UNITY_CATEGORY_RENDERER_HORIZONTAL_TILE", "horizontal-tile"}, {0, NULL, NULL}};
		GType unity_category_renderer_type_id;
		unity_category_renderer_type_id = g_enum_register_static ("UnityCategoryRenderer", values);
		g_once_init_leave (&unity_category_renderer_type_id__volatile, unity_category_renderer_type_id);
	}
	return unity_category_renderer_type_id__volatile;
}


UnityCategoryContentType
unity_category_content_type_from_string (const gchar* content_type)
{
	UnityCategoryContentType result = 0;
	const gchar* _tmp0_;
	GQuark _tmp2_ = 0U;
	static GQuark _tmp1_label0 = 0;
	static GQuark _tmp1_label1 = 0;
	static GQuark _tmp1_label2 = 0;
	static GQuark _tmp1_label3 = 0;
	static GQuark _tmp1_label4 = 0;
	static GQuark _tmp1_label5 = 0;
	g_return_val_if_fail (content_type != NULL, 0);
	_tmp0_ = content_type;
	_tmp2_ = (NULL == _tmp0_) ? 0 : g_quark_from_string (_tmp0_);
	if (_tmp2_ == ((0 != _tmp1_label0) ? _tmp1_label0 : (_tmp1_label0 = g_quark_from_static_string ("apps")))) {
		switch (0) {
			default:
			{
				result = UNITY_CATEGORY_CONTENT_TYPE_APPLICATIONS;
				return result;
			}
		}
	} else if (_tmp2_ == ((0 != _tmp1_label1) ? _tmp1_label1 : (_tmp1_label1 = g_quark_from_static_string ("music")))) {
		switch (0) {
			default:
			{
				result = UNITY_CATEGORY_CONTENT_TYPE_MUSIC;
				return result;
			}
		}
	} else if (_tmp2_ == ((0 != _tmp1_label2) ? _tmp1_label2 : (_tmp1_label2 = g_quark_from_static_string ("video")))) {
		switch (0) {
			default:
			{
				result = UNITY_CATEGORY_CONTENT_TYPE_VIDEO;
				return result;
			}
		}
	} else if (_tmp2_ == ((0 != _tmp1_label3) ? _tmp1_label3 : (_tmp1_label3 = g_quark_from_static_string ("places")))) {
		switch (0) {
			default:
			{
				result = UNITY_CATEGORY_CONTENT_TYPE_PLACES;
				return result;
			}
		}
	} else if (_tmp2_ == ((0 != _tmp1_label4) ? _tmp1_label4 : (_tmp1_label4 = g_quark_from_static_string ("social")))) {
		switch (0) {
			default:
			{
				result = UNITY_CATEGORY_CONTENT_TYPE_SOCIAL;
				return result;
			}
		}
	} else if (_tmp2_ == ((0 != _tmp1_label5) ? _tmp1_label5 : (_tmp1_label5 = g_quark_from_static_string ("weather")))) {
		switch (0) {
			default:
			{
				result = UNITY_CATEGORY_CONTENT_TYPE_WEATHER;
				return result;
			}
		}
	} else {
		switch (0) {
			default:
			{
				result = UNITY_CATEGORY_CONTENT_TYPE_DEFAULT;
				return result;
			}
		}
	}
}


const gchar*
unity_category_content_type_to_string (UnityCategoryContentType val)
{
	const gchar* result = NULL;
	switch (val) {
		case UNITY_CATEGORY_CONTENT_TYPE_APPLICATIONS:
		{
			result = "apps";
			return result;
		}
		case UNITY_CATEGORY_CONTENT_TYPE_MUSIC:
		{
			result = "music";
			return result;
		}
		case UNITY_CATEGORY_CONTENT_TYPE_VIDEO:
		{
			result = "video";
			return result;
		}
		case UNITY_CATEGORY_CONTENT_TYPE_PLACES:
		{
			result = "places";
			return result;
		}
		case UNITY_CATEGORY_CONTENT_TYPE_SOCIAL:
		{
			result = "social";
			return result;
		}
		case UNITY_CATEGORY_CONTENT_TYPE_WEATHER:
		{
			result = "weather";
			return result;
		}
		default:
		{
			result = "default";
			return result;
		}
	}
}


GType
unity_category_content_type_get_type (void)
{
	static volatile gsize unity_category_content_type_type_id__volatile = 0;
	if (g_once_init_enter (&unity_category_content_type_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_CATEGORY_CONTENT_TYPE_DEFAULT, "UNITY_CATEGORY_CONTENT_TYPE_DEFAULT", "default"}, {UNITY_CATEGORY_CONTENT_TYPE_APPLICATIONS, "UNITY_CATEGORY_CONTENT_TYPE_APPLICATIONS", "applications"}, {UNITY_CATEGORY_CONTENT_TYPE_MUSIC, "UNITY_CATEGORY_CONTENT_TYPE_MUSIC", "music"}, {UNITY_CATEGORY_CONTENT_TYPE_VIDEO, "UNITY_CATEGORY_CONTENT_TYPE_VIDEO", "video"}, {UNITY_CATEGORY_CONTENT_TYPE_PLACES, "UNITY_CATEGORY_CONTENT_TYPE_PLACES", "places"}, {UNITY_CATEGORY_CONTENT_TYPE_SOCIAL, "UNITY_CATEGORY_CONTENT_TYPE_SOCIAL", "social"}, {UNITY_CATEGORY_CONTENT_TYPE_WEATHER, "UNITY_CATEGORY_CONTENT_TYPE_WEATHER", "weather"}, {0, NULL, NULL}};
		GType unity_category_content_type_type_id;
		unity_category_content_type_type_id = g_enum_register_static ("UnityCategoryContentType", values);
		g_once_init_leave (&unity_category_content_type_type_id__volatile, unity_category_content_type_type_id);
	}
	return unity_category_content_type_type_id__volatile;
}


static void
unity_metadata_provider_real_update_hints (UnityMetadataProvider* self,
                                           GHashTable* hints)
{
	g_critical ("Type `%s' does not implement abstract method `unity_metadata_provider_update_hints'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
	return;
}


void
unity_metadata_provider_update_hints (UnityMetadataProvider* self,
                                      GHashTable* hints)
{
	g_return_if_fail (self != NULL);
	UNITY_METADATA_PROVIDER_GET_CLASS (self)->update_hints (self, hints);
}


UnityMetadataProvider*
unity_metadata_provider_construct (GType object_type)
{
	UnityMetadataProvider * self = NULL;
	self = (UnityMetadataProvider*) g_object_new (object_type, NULL);
	return self;
}


static void
unity_metadata_provider_class_init (UnityMetadataProviderClass * klass)
{
	unity_metadata_provider_parent_class = g_type_class_peek_parent (klass);
	((UnityMetadataProviderClass *) klass)->update_hints = (void (*) (UnityMetadataProvider *, GHashTable*)) unity_metadata_provider_real_update_hints;
}


static void
unity_metadata_provider_instance_init (UnityMetadataProvider * self)
{
}


GType
unity_metadata_provider_get_type (void)
{
	static volatile gsize unity_metadata_provider_type_id__volatile = 0;
	if (g_once_init_enter (&unity_metadata_provider_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityMetadataProviderClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_metadata_provider_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityMetadataProvider), 0, (GInstanceInitFunc) unity_metadata_provider_instance_init, NULL };
		GType unity_metadata_provider_type_id;
		unity_metadata_provider_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityMetadataProvider", &g_define_type_info, G_TYPE_FLAG_ABSTRACT);
		g_once_init_leave (&unity_metadata_provider_type_id__volatile, unity_metadata_provider_type_id);
	}
	return unity_metadata_provider_type_id__volatile;
}


UnityProgressSourceProvider*
unity_progress_source_provider_construct (GType object_type,
                                          const gchar* dbus_name,
                                          const gchar* dbus_path)
{
	UnityProgressSourceProvider * self = NULL;
	g_return_val_if_fail (dbus_name != NULL, NULL);
	g_return_val_if_fail (dbus_path != NULL, NULL);
	self = (UnityProgressSourceProvider*) g_object_new (object_type, "dbus-name", dbus_name, "dbus-path", dbus_path, NULL);
	return self;
}


UnityProgressSourceProvider*
unity_progress_source_provider_new (const gchar* dbus_name,
                                    const gchar* dbus_path)
{
	return unity_progress_source_provider_construct (UNITY_TYPE_PROGRESS_SOURCE_PROVIDER, dbus_name, dbus_path);
}


static void
unity_progress_source_provider_real_update_hints (UnityMetadataProvider* base,
                                                  GHashTable* hints)
{
	UnityProgressSourceProvider * self;
	GVariant** ps = NULL;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	const gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	GVariant* _tmp6_;
	GVariant** _tmp7_;
	GVariant** _tmp8_;
	gint _tmp8__length1;
	gint ps_length1;
	gint _ps_size_;
	gchar* _tmp9_;
	GVariant* _tmp10_;
	self = (UnityProgressSourceProvider*) base;
	g_return_if_fail (hints != NULL);
	_tmp0_ = self->priv->_dbus_name;
	_tmp1_ = g_strconcat (_tmp0_, ":", NULL);
	_tmp2_ = _tmp1_;
	_tmp3_ = self->priv->_dbus_path;
	_tmp4_ = g_strconcat (_tmp2_, _tmp3_, NULL);
	_tmp5_ = _tmp4_;
	_tmp6_ = g_variant_new_string (_tmp5_);
	g_variant_ref_sink (_tmp6_);
	_tmp7_ = g_new0 (GVariant*, 1 + 1);
	_tmp7_[0] = _tmp6_;
	_tmp8_ = _tmp7_;
	_tmp8__length1 = 1;
	_g_free0 (_tmp5_);
	_g_free0 (_tmp2_);
	ps = _tmp8_;
	ps_length1 = _tmp8__length1;
	_ps_size_ = ps_length1;
	_tmp9_ = g_strdup ("progress-source");
	_tmp10_ = g_variant_new_array (NULL, ps, ps_length1);
	g_variant_ref_sink (_tmp10_);
	g_hash_table_insert (hints, _tmp9_, _tmp10_);
	ps = (_vala_array_free (ps, ps_length1, (GDestroyNotify) g_variant_unref), NULL);
}


const gchar*
unity_progress_source_provider_get_dbus_name (UnityProgressSourceProvider* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_dbus_name;
	result = _tmp0_;
	return result;
}


static void
unity_progress_source_provider_set_dbus_name (UnityProgressSourceProvider* self,
                                              const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_progress_source_provider_get_dbus_name (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_dbus_name);
		self->priv->_dbus_name = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_progress_source_provider_properties[UNITY_PROGRESS_SOURCE_PROVIDER_DBUS_NAME_PROPERTY]);
	}
}


const gchar*
unity_progress_source_provider_get_dbus_path (UnityProgressSourceProvider* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_dbus_path;
	result = _tmp0_;
	return result;
}


static void
unity_progress_source_provider_set_dbus_path (UnityProgressSourceProvider* self,
                                              const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_progress_source_provider_get_dbus_path (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_dbus_path);
		self->priv->_dbus_path = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_progress_source_provider_properties[UNITY_PROGRESS_SOURCE_PROVIDER_DBUS_PATH_PROPERTY]);
	}
}


static void
unity_progress_source_provider_class_init (UnityProgressSourceProviderClass * klass)
{
	unity_progress_source_provider_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityProgressSourceProviderPrivate));
	((UnityMetadataProviderClass *) klass)->update_hints = (void (*) (UnityMetadataProvider *, GHashTable*)) unity_progress_source_provider_real_update_hints;
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_progress_source_provider_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_progress_source_provider_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_progress_source_provider_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROGRESS_SOURCE_PROVIDER_DBUS_NAME_PROPERTY, unity_progress_source_provider_properties[UNITY_PROGRESS_SOURCE_PROVIDER_DBUS_NAME_PROPERTY] = g_param_spec_string ("dbus-name", "dbus-name", "dbus-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_PROGRESS_SOURCE_PROVIDER_DBUS_PATH_PROPERTY, unity_progress_source_provider_properties[UNITY_PROGRESS_SOURCE_PROVIDER_DBUS_PATH_PROPERTY] = g_param_spec_string ("dbus-path", "dbus-path", "dbus-path", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
}


static void
unity_progress_source_provider_instance_init (UnityProgressSourceProvider * self)
{
	self->priv = UNITY_PROGRESS_SOURCE_PROVIDER_GET_PRIVATE (self);
}


static void
unity_progress_source_provider_finalize (GObject * obj)
{
	UnityProgressSourceProvider * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_PROGRESS_SOURCE_PROVIDER, UnityProgressSourceProvider);
	_g_free0 (self->priv->_dbus_name);
	_g_free0 (self->priv->_dbus_path);
	G_OBJECT_CLASS (unity_progress_source_provider_parent_class)->finalize (obj);
}


GType
unity_progress_source_provider_get_type (void)
{
	static volatile gsize unity_progress_source_provider_type_id__volatile = 0;
	if (g_once_init_enter (&unity_progress_source_provider_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityProgressSourceProviderClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_progress_source_provider_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityProgressSourceProvider), 0, (GInstanceInitFunc) unity_progress_source_provider_instance_init, NULL };
		GType unity_progress_source_provider_type_id;
		unity_progress_source_provider_type_id = g_type_register_static (UNITY_TYPE_METADATA_PROVIDER, "UnityProgressSourceProvider", &g_define_type_info, 0);
		g_once_init_leave (&unity_progress_source_provider_type_id__volatile, unity_progress_source_provider_type_id);
	}
	return unity_progress_source_provider_type_id__volatile;
}


static void
_vala_unity_progress_source_provider_get_property (GObject * object,
                                                   guint property_id,
                                                   GValue * value,
                                                   GParamSpec * pspec)
{
	UnityProgressSourceProvider * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_PROGRESS_SOURCE_PROVIDER, UnityProgressSourceProvider);
	switch (property_id) {
		case UNITY_PROGRESS_SOURCE_PROVIDER_DBUS_NAME_PROPERTY:
		g_value_set_string (value, unity_progress_source_provider_get_dbus_name (self));
		break;
		case UNITY_PROGRESS_SOURCE_PROVIDER_DBUS_PATH_PROPERTY:
		g_value_set_string (value, unity_progress_source_provider_get_dbus_path (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_progress_source_provider_set_property (GObject * object,
                                                   guint property_id,
                                                   const GValue * value,
                                                   GParamSpec * pspec)
{
	UnityProgressSourceProvider * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_PROGRESS_SOURCE_PROVIDER, UnityProgressSourceProvider);
	switch (property_id) {
		case UNITY_PROGRESS_SOURCE_PROVIDER_DBUS_NAME_PROPERTY:
		unity_progress_source_provider_set_dbus_name (self, g_value_get_string (value));
		break;
		case UNITY_PROGRESS_SOURCE_PROVIDER_DBUS_PATH_PROPERTY:
		unity_progress_source_provider_set_dbus_path (self, g_value_get_string (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


UnityCategory*
unity_category_construct (GType object_type,
                          const gchar* id,
                          const gchar* name,
                          GIcon* icon_hint,
                          UnityCategoryRenderer renderer)
{
	UnityCategory * self = NULL;
	g_return_val_if_fail (id != NULL, NULL);
	g_return_val_if_fail (name != NULL, NULL);
	g_return_val_if_fail (icon_hint != NULL, NULL);
	self = (UnityCategory*) g_object_new (object_type, "id", id, "name", name, "icon-hint", icon_hint, "default-renderer", renderer, NULL);
	return self;
}


UnityCategory*
unity_category_new (const gchar* id,
                    const gchar* name,
                    GIcon* icon_hint,
                    UnityCategoryRenderer renderer)
{
	return unity_category_construct (UNITY_TYPE_CATEGORY, id, name, icon_hint, renderer);
}


static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static void
_g_variant_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_variant_unref (var), NULL));
}


void
unity_category_add_metadata_provider (UnityCategory* self,
                                      UnityMetadataProvider* provider)
{
	GHashTable* _tmp0_;
	GHashTable* _tmp4_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (provider != NULL);
	_tmp0_ = self->priv->hints;
	if (_tmp0_ == NULL) {
		GHashFunc _tmp1_;
		GEqualFunc _tmp2_;
		GHashTable* _tmp3_;
		_tmp1_ = g_str_hash;
		_tmp2_ = g_str_equal;
		_tmp3_ = g_hash_table_new_full (_tmp1_, _tmp2_, _g_free0_, _g_variant_unref0_);
		_g_hash_table_unref0 (self->priv->hints);
		self->priv->hints = _tmp3_;
	}
	_tmp4_ = self->priv->hints;
	unity_metadata_provider_update_hints (provider, _tmp4_);
}


GHashTable*
unity_category_get_hints (UnityCategory* self)
{
	GHashTable* result = NULL;
	GHashTable* _tmp0_;
	GHashTable* _tmp4_;
	gchar* _tmp5_;
	UnityCategoryContentType _tmp6_;
	const gchar* _tmp7_;
	GVariant* _tmp8_;
	const gchar* _tmp9_;
	GHashTable* _tmp14_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->hints;
	if (_tmp0_ == NULL) {
		GHashFunc _tmp1_;
		GEqualFunc _tmp2_;
		GHashTable* _tmp3_;
		_tmp1_ = g_str_hash;
		_tmp2_ = g_str_equal;
		_tmp3_ = g_hash_table_new_full (_tmp1_, _tmp2_, _g_free0_, _g_variant_unref0_);
		_g_hash_table_unref0 (self->priv->hints);
		self->priv->hints = _tmp3_;
	}
	_tmp4_ = self->priv->hints;
	_tmp5_ = g_strdup ("content-type");
	_tmp6_ = self->priv->_content_type;
	_tmp7_ = unity_category_content_type_to_string (_tmp6_);
	_tmp8_ = g_variant_new_string (_tmp7_);
	g_variant_ref_sink (_tmp8_);
	g_hash_table_insert (_tmp4_, _tmp5_, _tmp8_);
	_tmp9_ = self->priv->_renderer_hint;
	if (_tmp9_ != NULL) {
		GHashTable* _tmp10_;
		gchar* _tmp11_;
		const gchar* _tmp12_;
		GVariant* _tmp13_;
		_tmp10_ = self->priv->hints;
		_tmp11_ = g_strdup ("renderer-hint");
		_tmp12_ = self->priv->_renderer_hint;
		_tmp13_ = g_variant_new_string (_tmp12_);
		g_variant_ref_sink (_tmp13_);
		g_hash_table_insert (_tmp10_, _tmp11_, _tmp13_);
	}
	_tmp14_ = self->priv->hints;
	result = _tmp14_;
	return result;
}


const gchar*
unity_category_get_id (UnityCategory* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_id;
	result = _tmp0_;
	return result;
}


static void
unity_category_set_id (UnityCategory* self,
                       const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_category_get_id (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_id);
		self->priv->_id = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_category_properties[UNITY_CATEGORY_ID_PROPERTY]);
	}
}


const gchar*
unity_category_get_name (UnityCategory* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_name;
	result = _tmp0_;
	return result;
}


static void
unity_category_set_name (UnityCategory* self,
                         const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_category_get_name (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_name);
		self->priv->_name = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_category_properties[UNITY_CATEGORY_NAME_PROPERTY]);
	}
}


GIcon*
unity_category_get_icon_hint (UnityCategory* self)
{
	GIcon* result;
	GIcon* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_icon_hint;
	result = _tmp0_;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
unity_category_set_icon_hint (UnityCategory* self,
                              GIcon* value)
{
	g_return_if_fail (self != NULL);
	if (unity_category_get_icon_hint (self) != value) {
		GIcon* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_icon_hint);
		self->priv->_icon_hint = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_category_properties[UNITY_CATEGORY_ICON_HINT_PROPERTY]);
	}
}


UnityCategoryRenderer
unity_category_get_default_renderer (UnityCategory* self)
{
	UnityCategoryRenderer result;
	UnityCategoryRenderer _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->priv->_default_renderer;
	result = _tmp0_;
	return result;
}


static void
unity_category_set_default_renderer (UnityCategory* self,
                                     UnityCategoryRenderer value)
{
	g_return_if_fail (self != NULL);
	if (unity_category_get_default_renderer (self) != value) {
		self->priv->_default_renderer = value;
		g_object_notify_by_pspec ((GObject *) self, unity_category_properties[UNITY_CATEGORY_DEFAULT_RENDERER_PROPERTY]);
	}
}


UnityCategoryContentType
unity_category_get_content_type (UnityCategory* self)
{
	UnityCategoryContentType result;
	UnityCategoryContentType _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->priv->_content_type;
	result = _tmp0_;
	return result;
}


void
unity_category_set_content_type (UnityCategory* self,
                                 UnityCategoryContentType value)
{
	g_return_if_fail (self != NULL);
	if (unity_category_get_content_type (self) != value) {
		self->priv->_content_type = value;
		g_object_notify_by_pspec ((GObject *) self, unity_category_properties[UNITY_CATEGORY_CONTENT_TYPE_PROPERTY]);
	}
}


const gchar*
unity_category_get_renderer_hint (UnityCategory* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_renderer_hint;
	result = _tmp0_;
	return result;
}


void
unity_category_set_renderer_hint (UnityCategory* self,
                                  const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_category_get_renderer_hint (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_renderer_hint);
		self->priv->_renderer_hint = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_category_properties[UNITY_CATEGORY_RENDERER_HINT_PROPERTY]);
	}
}


const gchar*
unity_category_get_renderer (UnityCategory* self)
{
	const gchar* result;
	UnityCategoryRenderer _tmp0_;
	const gchar* _tmp1_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_default_renderer;
	_tmp1_ = unity_category_renderer_to_string (_tmp0_);
	result = _tmp1_;
	return result;
}


static void
unity_category_class_init (UnityCategoryClass * klass)
{
	unity_category_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityCategoryPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_category_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_category_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_category_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_CATEGORY_ID_PROPERTY, unity_category_properties[UNITY_CATEGORY_ID_PROPERTY] = g_param_spec_string ("id", "id", "id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_CATEGORY_NAME_PROPERTY, unity_category_properties[UNITY_CATEGORY_NAME_PROPERTY] = g_param_spec_string ("name", "name", "name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_CATEGORY_ICON_HINT_PROPERTY, unity_category_properties[UNITY_CATEGORY_ICON_HINT_PROPERTY] = g_param_spec_object ("icon-hint", "icon-hint", "icon-hint", g_icon_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_CATEGORY_DEFAULT_RENDERER_PROPERTY, unity_category_properties[UNITY_CATEGORY_DEFAULT_RENDERER_PROPERTY] = g_param_spec_enum ("default-renderer", "default-renderer", "default-renderer", UNITY_TYPE_CATEGORY_RENDERER, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_CATEGORY_CONTENT_TYPE_PROPERTY, unity_category_properties[UNITY_CATEGORY_CONTENT_TYPE_PROPERTY] = g_param_spec_enum ("content-type", "content-type", "content-type", UNITY_TYPE_CATEGORY_CONTENT_TYPE, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_CATEGORY_RENDERER_HINT_PROPERTY, unity_category_properties[UNITY_CATEGORY_RENDERER_HINT_PROPERTY] = g_param_spec_string ("renderer-hint", "renderer-hint", "renderer-hint", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_CATEGORY_RENDERER_PROPERTY, unity_category_properties[UNITY_CATEGORY_RENDERER_PROPERTY] = g_param_spec_string ("renderer", "renderer", "renderer", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
}


static void
unity_category_instance_init (UnityCategory * self)
{
	self->priv = UNITY_CATEGORY_GET_PRIVATE (self);
}


static void
unity_category_finalize (GObject * obj)
{
	UnityCategory * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_CATEGORY, UnityCategory);
	_g_free0 (self->priv->_id);
	_g_free0 (self->priv->_name);
	_g_object_unref0 (self->priv->_icon_hint);
	_g_free0 (self->priv->_renderer_hint);
	_g_hash_table_unref0 (self->priv->hints);
	G_OBJECT_CLASS (unity_category_parent_class)->finalize (obj);
}


GType
unity_category_get_type (void)
{
	static volatile gsize unity_category_type_id__volatile = 0;
	if (g_once_init_enter (&unity_category_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityCategoryClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_category_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityCategory), 0, (GInstanceInitFunc) unity_category_instance_init, NULL };
		GType unity_category_type_id;
		unity_category_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityCategory", &g_define_type_info, 0);
		g_once_init_leave (&unity_category_type_id__volatile, unity_category_type_id);
	}
	return unity_category_type_id__volatile;
}


static void
_vala_unity_category_get_property (GObject * object,
                                   guint property_id,
                                   GValue * value,
                                   GParamSpec * pspec)
{
	UnityCategory * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_CATEGORY, UnityCategory);
	switch (property_id) {
		case UNITY_CATEGORY_ID_PROPERTY:
		g_value_set_string (value, unity_category_get_id (self));
		break;
		case UNITY_CATEGORY_NAME_PROPERTY:
		g_value_set_string (value, unity_category_get_name (self));
		break;
		case UNITY_CATEGORY_ICON_HINT_PROPERTY:
		g_value_set_object (value, unity_category_get_icon_hint (self));
		break;
		case UNITY_CATEGORY_DEFAULT_RENDERER_PROPERTY:
		g_value_set_enum (value, unity_category_get_default_renderer (self));
		break;
		case UNITY_CATEGORY_CONTENT_TYPE_PROPERTY:
		g_value_set_enum (value, unity_category_get_content_type (self));
		break;
		case UNITY_CATEGORY_RENDERER_HINT_PROPERTY:
		g_value_set_string (value, unity_category_get_renderer_hint (self));
		break;
		case UNITY_CATEGORY_RENDERER_PROPERTY:
		g_value_set_string (value, unity_category_get_renderer (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_category_set_property (GObject * object,
                                   guint property_id,
                                   const GValue * value,
                                   GParamSpec * pspec)
{
	UnityCategory * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_CATEGORY, UnityCategory);
	switch (property_id) {
		case UNITY_CATEGORY_ID_PROPERTY:
		unity_category_set_id (self, g_value_get_string (value));
		break;
		case UNITY_CATEGORY_NAME_PROPERTY:
		unity_category_set_name (self, g_value_get_string (value));
		break;
		case UNITY_CATEGORY_ICON_HINT_PROPERTY:
		unity_category_set_icon_hint (self, g_value_get_object (value));
		break;
		case UNITY_CATEGORY_DEFAULT_RENDERER_PROPERTY:
		unity_category_set_default_renderer (self, g_value_get_enum (value));
		break;
		case UNITY_CATEGORY_CONTENT_TYPE_PROPERTY:
		unity_category_set_content_type (self, g_value_get_enum (value));
		break;
		case UNITY_CATEGORY_RENDERER_HINT_PROPERTY:
		unity_category_set_renderer_hint (self, g_value_get_string (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}



