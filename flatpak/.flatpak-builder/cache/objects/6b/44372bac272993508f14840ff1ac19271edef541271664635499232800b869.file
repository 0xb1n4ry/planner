/*
 * Generated by gdbus-codegen 2.58.1 from org.gnome.evolution.dataserver.Subprocess.Backend.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __E_DBUS_SUBPROCESS_BACKEND_H__
#define __E_DBUS_SUBPROCESS_BACKEND_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.evolution.dataserver.Subprocess.Backend */

#define E_DBUS_SUBPROCESS_TYPE_BACKEND (e_dbus_subprocess_backend_get_type ())
#define E_DBUS_SUBPROCESS_BACKEND(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_SUBPROCESS_TYPE_BACKEND, EDBusSubprocessBackend))
#define E_DBUS_SUBPROCESS_IS_BACKEND(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_SUBPROCESS_TYPE_BACKEND))
#define E_DBUS_SUBPROCESS_BACKEND_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), E_DBUS_SUBPROCESS_TYPE_BACKEND, EDBusSubprocessBackendIface))

struct _EDBusSubprocessBackend;
typedef struct _EDBusSubprocessBackend EDBusSubprocessBackend;
typedef struct _EDBusSubprocessBackendIface EDBusSubprocessBackendIface;

struct _EDBusSubprocessBackendIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_close) (
    EDBusSubprocessBackend *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_create) (
    EDBusSubprocessBackend *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_source_id,
    const gchar *arg_backend_factory_type_name,
    const gchar *arg_module_filename);

  void (*backend_closed) (
    EDBusSubprocessBackend *object,
    const gchar *arg_sender);

};

GType e_dbus_subprocess_backend_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *e_dbus_subprocess_backend_interface_info (void);
guint e_dbus_subprocess_backend_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void e_dbus_subprocess_backend_complete_create (
    EDBusSubprocessBackend *object,
    GDBusMethodInvocation *invocation,
    const gchar *object_path);

void e_dbus_subprocess_backend_complete_close (
    EDBusSubprocessBackend *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void e_dbus_subprocess_backend_emit_backend_closed (
    EDBusSubprocessBackend *object,
    const gchar *arg_sender);



/* D-Bus method calls: */
void e_dbus_subprocess_backend_call_create (
    EDBusSubprocessBackend *proxy,
    const gchar *arg_source_id,
    const gchar *arg_backend_factory_type_name,
    const gchar *arg_module_filename,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_subprocess_backend_call_create_finish (
    EDBusSubprocessBackend *proxy,
    gchar **out_object_path,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_subprocess_backend_call_create_sync (
    EDBusSubprocessBackend *proxy,
    const gchar *arg_source_id,
    const gchar *arg_backend_factory_type_name,
    const gchar *arg_module_filename,
    gchar **out_object_path,
    GCancellable *cancellable,
    GError **error);

void e_dbus_subprocess_backend_call_close (
    EDBusSubprocessBackend *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_subprocess_backend_call_close_finish (
    EDBusSubprocessBackend *proxy,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_subprocess_backend_call_close_sync (
    EDBusSubprocessBackend *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define E_DBUS_SUBPROCESS_TYPE_BACKEND_PROXY (e_dbus_subprocess_backend_proxy_get_type ())
#define E_DBUS_SUBPROCESS_BACKEND_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_SUBPROCESS_TYPE_BACKEND_PROXY, EDBusSubprocessBackendProxy))
#define E_DBUS_SUBPROCESS_BACKEND_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), E_DBUS_SUBPROCESS_TYPE_BACKEND_PROXY, EDBusSubprocessBackendProxyClass))
#define E_DBUS_SUBPROCESS_BACKEND_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), E_DBUS_SUBPROCESS_TYPE_BACKEND_PROXY, EDBusSubprocessBackendProxyClass))
#define E_DBUS_SUBPROCESS_IS_BACKEND_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_SUBPROCESS_TYPE_BACKEND_PROXY))
#define E_DBUS_SUBPROCESS_IS_BACKEND_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), E_DBUS_SUBPROCESS_TYPE_BACKEND_PROXY))

typedef struct _EDBusSubprocessBackendProxy EDBusSubprocessBackendProxy;
typedef struct _EDBusSubprocessBackendProxyClass EDBusSubprocessBackendProxyClass;
typedef struct _EDBusSubprocessBackendProxyPrivate EDBusSubprocessBackendProxyPrivate;

struct _EDBusSubprocessBackendProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  EDBusSubprocessBackendProxyPrivate *priv;
};

struct _EDBusSubprocessBackendProxyClass
{
  GDBusProxyClass parent_class;
};

GType e_dbus_subprocess_backend_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (EDBusSubprocessBackendProxy, g_object_unref)
#endif

void e_dbus_subprocess_backend_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EDBusSubprocessBackend *e_dbus_subprocess_backend_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
EDBusSubprocessBackend *e_dbus_subprocess_backend_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void e_dbus_subprocess_backend_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EDBusSubprocessBackend *e_dbus_subprocess_backend_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
EDBusSubprocessBackend *e_dbus_subprocess_backend_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define E_DBUS_SUBPROCESS_TYPE_BACKEND_SKELETON (e_dbus_subprocess_backend_skeleton_get_type ())
#define E_DBUS_SUBPROCESS_BACKEND_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_SUBPROCESS_TYPE_BACKEND_SKELETON, EDBusSubprocessBackendSkeleton))
#define E_DBUS_SUBPROCESS_BACKEND_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), E_DBUS_SUBPROCESS_TYPE_BACKEND_SKELETON, EDBusSubprocessBackendSkeletonClass))
#define E_DBUS_SUBPROCESS_BACKEND_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), E_DBUS_SUBPROCESS_TYPE_BACKEND_SKELETON, EDBusSubprocessBackendSkeletonClass))
#define E_DBUS_SUBPROCESS_IS_BACKEND_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_SUBPROCESS_TYPE_BACKEND_SKELETON))
#define E_DBUS_SUBPROCESS_IS_BACKEND_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), E_DBUS_SUBPROCESS_TYPE_BACKEND_SKELETON))

typedef struct _EDBusSubprocessBackendSkeleton EDBusSubprocessBackendSkeleton;
typedef struct _EDBusSubprocessBackendSkeletonClass EDBusSubprocessBackendSkeletonClass;
typedef struct _EDBusSubprocessBackendSkeletonPrivate EDBusSubprocessBackendSkeletonPrivate;

struct _EDBusSubprocessBackendSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  EDBusSubprocessBackendSkeletonPrivate *priv;
};

struct _EDBusSubprocessBackendSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType e_dbus_subprocess_backend_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (EDBusSubprocessBackendSkeleton, g_object_unref)
#endif

EDBusSubprocessBackend *e_dbus_subprocess_backend_skeleton_new (void);


/* ---- */

#define E_DBUS_SUBPROCESS_TYPE_OBJECT (e_dbus_subprocess_object_get_type ())
#define E_DBUS_SUBPROCESS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_SUBPROCESS_TYPE_OBJECT, EDBusSubprocessObject))
#define E_DBUS_SUBPROCESS_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_SUBPROCESS_TYPE_OBJECT))
#define E_DBUS_SUBPROCESS_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), E_DBUS_SUBPROCESS_TYPE_OBJECT, EDBusSubprocessObject))

struct _EDBusSubprocessObject;
typedef struct _EDBusSubprocessObject EDBusSubprocessObject;
typedef struct _EDBusSubprocessObjectIface EDBusSubprocessObjectIface;

struct _EDBusSubprocessObjectIface
{
  GTypeInterface parent_iface;
};

GType e_dbus_subprocess_object_get_type (void) G_GNUC_CONST;

EDBusSubprocessBackend *e_dbus_subprocess_object_get_backend (EDBusSubprocessObject *object);
EDBusSubprocessBackend *e_dbus_subprocess_object_peek_backend (EDBusSubprocessObject *object);

#define E_DBUS_SUBPROCESS_TYPE_OBJECT_PROXY (e_dbus_subprocess_object_proxy_get_type ())
#define E_DBUS_SUBPROCESS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_SUBPROCESS_TYPE_OBJECT_PROXY, EDBusSubprocessObjectProxy))
#define E_DBUS_SUBPROCESS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), E_DBUS_SUBPROCESS_TYPE_OBJECT_PROXY, EDBusSubprocessObjectProxyClass))
#define E_DBUS_SUBPROCESS_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), E_DBUS_SUBPROCESS_TYPE_OBJECT_PROXY, EDBusSubprocessObjectProxyClass))
#define E_DBUS_SUBPROCESS_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_SUBPROCESS_TYPE_OBJECT_PROXY))
#define E_DBUS_SUBPROCESS_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), E_DBUS_SUBPROCESS_TYPE_OBJECT_PROXY))

typedef struct _EDBusSubprocessObjectProxy EDBusSubprocessObjectProxy;
typedef struct _EDBusSubprocessObjectProxyClass EDBusSubprocessObjectProxyClass;
typedef struct _EDBusSubprocessObjectProxyPrivate EDBusSubprocessObjectProxyPrivate;

struct _EDBusSubprocessObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  EDBusSubprocessObjectProxyPrivate *priv;
};

struct _EDBusSubprocessObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType e_dbus_subprocess_object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (EDBusSubprocessObjectProxy, g_object_unref)
#endif

EDBusSubprocessObjectProxy *e_dbus_subprocess_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define E_DBUS_SUBPROCESS_TYPE_OBJECT_SKELETON (e_dbus_subprocess_object_skeleton_get_type ())
#define E_DBUS_SUBPROCESS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_SUBPROCESS_TYPE_OBJECT_SKELETON, EDBusSubprocessObjectSkeleton))
#define E_DBUS_SUBPROCESS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), E_DBUS_SUBPROCESS_TYPE_OBJECT_SKELETON, EDBusSubprocessObjectSkeletonClass))
#define E_DBUS_SUBPROCESS_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), E_DBUS_SUBPROCESS_TYPE_OBJECT_SKELETON, EDBusSubprocessObjectSkeletonClass))
#define E_DBUS_SUBPROCESS_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_SUBPROCESS_TYPE_OBJECT_SKELETON))
#define E_DBUS_SUBPROCESS_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), E_DBUS_SUBPROCESS_TYPE_OBJECT_SKELETON))

typedef struct _EDBusSubprocessObjectSkeleton EDBusSubprocessObjectSkeleton;
typedef struct _EDBusSubprocessObjectSkeletonClass EDBusSubprocessObjectSkeletonClass;
typedef struct _EDBusSubprocessObjectSkeletonPrivate EDBusSubprocessObjectSkeletonPrivate;

struct _EDBusSubprocessObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  EDBusSubprocessObjectSkeletonPrivate *priv;
};

struct _EDBusSubprocessObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType e_dbus_subprocess_object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (EDBusSubprocessObjectSkeleton, g_object_unref)
#endif

EDBusSubprocessObjectSkeleton *e_dbus_subprocess_object_skeleton_new (const gchar *object_path);
void e_dbus_subprocess_object_skeleton_set_backend (EDBusSubprocessObjectSkeleton *object, EDBusSubprocessBackend *interface_);

/* ---- */

#define E_DBUS_SUBPROCESS_TYPE_OBJECT_MANAGER_CLIENT (e_dbus_subprocess_object_manager_client_get_type ())
#define E_DBUS_SUBPROCESS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_SUBPROCESS_TYPE_OBJECT_MANAGER_CLIENT, EDBusSubprocessObjectManagerClient))
#define E_DBUS_SUBPROCESS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), E_DBUS_SUBPROCESS_TYPE_OBJECT_MANAGER_CLIENT, EDBusSubprocessObjectManagerClientClass))
#define E_DBUS_SUBPROCESS_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), E_DBUS_SUBPROCESS_TYPE_OBJECT_MANAGER_CLIENT, EDBusSubprocessObjectManagerClientClass))
#define E_DBUS_SUBPROCESS_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_SUBPROCESS_TYPE_OBJECT_MANAGER_CLIENT))
#define E_DBUS_SUBPROCESS_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), E_DBUS_SUBPROCESS_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _EDBusSubprocessObjectManagerClient EDBusSubprocessObjectManagerClient;
typedef struct _EDBusSubprocessObjectManagerClientClass EDBusSubprocessObjectManagerClientClass;
typedef struct _EDBusSubprocessObjectManagerClientPrivate EDBusSubprocessObjectManagerClientPrivate;

struct _EDBusSubprocessObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  EDBusSubprocessObjectManagerClientPrivate *priv;
};

struct _EDBusSubprocessObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (EDBusSubprocessObjectManagerClient, g_object_unref)
#endif

GType e_dbus_subprocess_object_manager_client_get_type (void) G_GNUC_CONST;

GType e_dbus_subprocess_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void e_dbus_subprocess_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *e_dbus_subprocess_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *e_dbus_subprocess_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void e_dbus_subprocess_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *e_dbus_subprocess_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *e_dbus_subprocess_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __E_DBUS_SUBPROCESS_BACKEND_H__ */
