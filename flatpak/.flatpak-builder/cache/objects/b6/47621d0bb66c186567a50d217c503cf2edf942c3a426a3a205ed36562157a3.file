/* unity-tool-dbus-util.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-tool-dbus-util.vala, do not modify */



#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <gio/gio.h>
#include <gobject/gvaluecollector.h>


#define UNITY_TESTER_TYPE_DBUS_LENS_UTIL (unity_tester_dbus_lens_util_get_type ())
#define UNITY_TESTER_DBUS_LENS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_DBUS_LENS_UTIL, UnityTesterDBusLensUtil))
#define UNITY_TESTER_DBUS_LENS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_DBUS_LENS_UTIL, UnityTesterDBusLensUtilClass))
#define UNITY_TESTER_IS_DBUS_LENS_UTIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_DBUS_LENS_UTIL))
#define UNITY_TESTER_IS_DBUS_LENS_UTIL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_DBUS_LENS_UTIL))
#define UNITY_TESTER_DBUS_LENS_UTIL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_DBUS_LENS_UTIL, UnityTesterDBusLensUtilClass))

typedef struct _UnityTesterDBusLensUtil UnityTesterDBusLensUtil;
typedef struct _UnityTesterDBusLensUtilClass UnityTesterDBusLensUtilClass;
typedef struct _UnityTesterDBusLensUtilPrivate UnityTesterDBusLensUtilPrivate;

#define UNITY_TESTER_DBUS_LENS_UTIL_TYPE_DBUS_OBJECT_ADDRESS (unity_tester_dbus_lens_util_dbus_object_address_get_type ())
typedef struct _UnityTesterDBusLensUtilDBusObjectAddress UnityTesterDBusLensUtilDBusObjectAddress;
#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _g_variant_type_free0(var) ((var == NULL) ? NULL : (var = (g_variant_type_free (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
#define _unity_tester_dbus_lens_util_unref0(var) ((var == NULL) ? NULL : (var = (unity_tester_dbus_lens_util_unref (var), NULL)))
#define _g_variant_builder_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_builder_unref (var), NULL)))
#define _unity_tester_dbus_lens_util_dbus_object_address_free0(var) ((var == NULL) ? NULL : (var = (unity_tester_dbus_lens_util_dbus_object_address_free (var), NULL)))
#define _g_markup_parse_context_unref0(var) ((var == NULL) ? NULL : (var = (g_markup_parse_context_unref (var), NULL)))
typedef struct _unity_tester_dbus_lens_util_findLensesData unity_tester_dbus_lens_util_findLensesData;
typedef struct _UnityTesterParamSpecDBusLensUtil UnityTesterParamSpecDBusLensUtil;

struct _UnityTesterDBusLensUtil {
	GTypeInstance parent_instance;
	volatile int ref_count;
	UnityTesterDBusLensUtilPrivate * priv;
};

struct _UnityTesterDBusLensUtilClass {
	GTypeClass parent_class;
	void (*finalize) (UnityTesterDBusLensUtil *self);
};

struct _UnityTesterDBusLensUtilDBusObjectAddress {
	gchar* dbus_name;
	gchar* dbus_path;
};

struct _UnityTesterDBusLensUtilPrivate {
	GRegex* scope_dbusname_regex;
	gchar* current_dbus_name;
	gchar* current_dbus_path;
	GQueue* nodes;
	GList* lenses;
};

struct _unity_tester_dbus_lens_util_findLensesData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	UnityTesterDBusLensUtil* self;
	GList* result;
	GRegex* _tmp0_;
	FILE* _tmp1_;
	GList* _tmp2_;
	GDBusConnection* bus;
	GDBusConnection* _tmp3_;
	GVariantType* vt;
	GVariantType* _tmp4_;
	GList* _tmp5_;
	GList* _tmp6_;
	GList* srv_collection;
	GList* srv_it;
	gchar* _tmp7_;
	gchar* srv;
	GRegex* _tmp8_;
	const gchar* _tmp9_;
	gboolean _tmp10_;
	GVariantBuilder* vb;
	GVariantType* _tmp11_;
	GVariantType* _tmp12_;
	GVariantBuilder* _tmp13_;
	GVariantBuilder* _tmp14_;
	GVariantBuilder* _tmp15_;
	const gchar* _tmp16_;
	GVariant* _tmp17_;
	GVariant* v;
	GDBusConnection* _tmp18_;
	GVariantBuilder* _tmp19_;
	GVariant* _tmp20_;
	GVariant* _tmp21_;
	const GVariantType* _tmp22_;
	GVariant* _tmp23_;
	GVariant* _tmp24_;
	GVariant* _tmp25_;
	gchar* owner;
	GVariant* _tmp26_;
	GVariant* _tmp27_;
	GVariant* _tmp28_;
	const gchar* _tmp29_;
	gchar* _tmp30_;
	gchar* _tmp31_;
	const gchar* _tmp32_;
	UnityTesterDBusLensUtilDBusObjectAddress obj;
	const gchar* _tmp33_;
	gchar* _tmp34_;
	gchar* _tmp35_;
	UnityTesterDBusLensUtilDBusObjectAddress _tmp36_;
	GQueue* _tmp37_;
	UnityTesterDBusLensUtilDBusObjectAddress _tmp38_;
	UnityTesterDBusLensUtilDBusObjectAddress _tmp39_;
	UnityTesterDBusLensUtilDBusObjectAddress* _tmp40_;
	GError* e;
	GQueue* _tmp41_;
	guint _tmp42_;
	UnityTesterDBusLensUtilDBusObjectAddress node;
	GQueue* _tmp43_;
	gpointer _tmp44_;
	UnityTesterDBusLensUtilDBusObjectAddress* _tmp45_;
	UnityTesterDBusLensUtilDBusObjectAddress _tmp46_;
	UnityTesterDBusLensUtilDBusObjectAddress _tmp47_;
	UnityTesterDBusLensUtilDBusObjectAddress _tmp48_;
	const gchar* _tmp49_;
	gchar* _tmp50_;
	UnityTesterDBusLensUtilDBusObjectAddress _tmp51_;
	const gchar* _tmp52_;
	gchar* _tmp53_;
	GVariant* _vala1_v;
	GDBusConnection* _tmp54_;
	const gchar* _tmp55_;
	const gchar* _tmp56_;
	const GVariantType* _tmp57_;
	GVariant* _tmp58_;
	GVariant* _tmp59_;
	gchar* xmldata;
	GVariant* _tmp60_;
	GVariant* _tmp61_;
	GVariant* _tmp62_;
	const gchar* _tmp63_;
	gchar* _tmp64_;
	gchar* _tmp65_;
	GMarkupParseContext* context;
	GMarkupParseContext* _tmp66_;
	GMarkupParseContext* _tmp67_;
	const gchar* _tmp68_;
	const gchar* _tmp69_;
	gint _tmp70_;
	gint _tmp71_;
	GError* _vala1_e;
	GList* _tmp72_;
	GError * _inner_error_;
};

struct _UnityTesterParamSpecDBusLensUtil {
	GParamSpec parent_instance;
};


static gpointer unity_tester_dbus_lens_util_parent_class = NULL;

gpointer unity_tester_dbus_lens_util_ref (gpointer instance);
void unity_tester_dbus_lens_util_unref (gpointer instance);
GParamSpec* unity_tester_param_spec_dbus_lens_util (const gchar* name,
                                                    const gchar* nick,
                                                    const gchar* blurb,
                                                    GType object_type,
                                                    GParamFlags flags);
void unity_tester_value_set_dbus_lens_util (GValue* value,
                                            gpointer v_object);
void unity_tester_value_take_dbus_lens_util (GValue* value,
                                             gpointer v_object);
gpointer unity_tester_value_get_dbus_lens_util (const GValue* value);
GType unity_tester_dbus_lens_util_get_type (void) G_GNUC_CONST;
GType unity_tester_dbus_lens_util_dbus_object_address_get_type (void) G_GNUC_CONST;
UnityTesterDBusLensUtilDBusObjectAddress* unity_tester_dbus_lens_util_dbus_object_address_dup (const UnityTesterDBusLensUtilDBusObjectAddress* self);
void unity_tester_dbus_lens_util_dbus_object_address_free (UnityTesterDBusLensUtilDBusObjectAddress* self);
void unity_tester_dbus_lens_util_dbus_object_address_copy (const UnityTesterDBusLensUtilDBusObjectAddress* self,
                                                           UnityTesterDBusLensUtilDBusObjectAddress* dest);
void unity_tester_dbus_lens_util_dbus_object_address_destroy (UnityTesterDBusLensUtilDBusObjectAddress* self);
#define UNITY_TESTER_DBUS_LENS_UTIL_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TESTER_TYPE_DBUS_LENS_UTIL, UnityTesterDBusLensUtilPrivate))
static void _unity_tester_dbus_lens_util_dbus_object_address_free0_ (gpointer var);
static inline void _g_queue_free__unity_tester_dbus_lens_util_dbus_object_address_free0_ (GQueue* self);
static inline void _g_list_free__unity_tester_dbus_lens_util_dbus_object_address_free0_ (GList* self);
static void unity_tester_dbus_lens_util_start (UnityTesterDBusLensUtil* self,
                                        GMarkupParseContext* context,
                                        const gchar* name,
                                        gchar** attr_names,
                                        int attr_names_length1,
                                        gchar** attr_values,
                                        int attr_values_length1,
                                        GError** error);
static void _unity_tester_dbus_lens_util_start_gmarkup_parser_start_element_func (GMarkupParseContext* context,
                                                                           const gchar* element_name,
                                                                           gchar** attribute_names,
                                                                           gchar** attribute_values,
                                                                           gpointer self,
                                                                           GError** error);
UnityTesterDBusLensUtil* unity_tester_dbus_lens_util_new (void);
UnityTesterDBusLensUtil* unity_tester_dbus_lens_util_construct (GType object_type);
static GList* unity_tester_dbus_lens_util_getServices (UnityTesterDBusLensUtil* self,
                                                GError** error);
static void _g_free0_ (gpointer var);
static inline void _g_list_free__g_free0_ (GList* self);
static gint _______lambda5_ (UnityTesterDBusLensUtilDBusObjectAddress* a,
                      UnityTesterDBusLensUtilDBusObjectAddress* b);
static gint ________lambda5__gcompare_func (gconstpointer a,
                                     gconstpointer b);
static void unity_tester_dbus_lens_util_findLenses_data_free (gpointer _data);
static void unity_tester_dbus_lens_util_findLenses_async_ready_wrapper (GObject *source_object,
                                                                 GAsyncResult *res,
                                                                 void *user_data);
void unity_tester_dbus_lens_util_findLenses (UnityTesterDBusLensUtil* self,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
GList* unity_tester_dbus_lens_util_findLenses_finish (UnityTesterDBusLensUtil* self,
                                                      GAsyncResult* _res_,
                                                      GError** error);
static gboolean unity_tester_dbus_lens_util_findLenses_co (unity_tester_dbus_lens_util_findLensesData* _data_);
static GVariant* _variant_new3 (const gchar* value);
static gboolean _unity_tester_dbus_lens_util_findLenses_co_gsource_func (gpointer self);
static void unity_tester_dbus_lens_util_finalize (UnityTesterDBusLensUtil * obj);
static gint _vala_array_length (gpointer array);

static const GMarkupParser UNITY_TESTER_DBUS_LENS_UTIL_parser = {_unity_tester_dbus_lens_util_start_gmarkup_parser_start_element_func, NULL, NULL, NULL, NULL};

static void
_unity_tester_dbus_lens_util_dbus_object_address_free0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (unity_tester_dbus_lens_util_dbus_object_address_free (var), NULL));
}


static inline void
_g_queue_free__unity_tester_dbus_lens_util_dbus_object_address_free0_ (GQueue* self)
{
	g_queue_free_full (self, (GDestroyNotify) _unity_tester_dbus_lens_util_dbus_object_address_free0_);
}


static inline void
_g_list_free__unity_tester_dbus_lens_util_dbus_object_address_free0_ (GList* self)
{
	g_list_free_full (self, (GDestroyNotify) _unity_tester_dbus_lens_util_dbus_object_address_free0_);
}


static void
_unity_tester_dbus_lens_util_start_gmarkup_parser_start_element_func (GMarkupParseContext* context,
                                                                      const gchar* element_name,
                                                                      gchar** attribute_names,
                                                                      gchar** attribute_values,
                                                                      gpointer self,
                                                                      GError** error)
{
	unity_tester_dbus_lens_util_start ((UnityTesterDBusLensUtil*) self, context, element_name, attribute_names, _vala_array_length (attribute_names), attribute_values, _vala_array_length (attribute_values), error);
}


UnityTesterDBusLensUtil*
unity_tester_dbus_lens_util_construct (GType object_type)
{
	UnityTesterDBusLensUtil* self = NULL;
	GError * _inner_error_ = NULL;
	self = (UnityTesterDBusLensUtil*) g_type_create_instance (object_type);
	{
		GRegex* _tmp0_ = NULL;
		GRegex* _tmp1_;
		GRegex* _tmp2_;
		_tmp1_ = g_regex_new ("^.+[.]Scope[.][a-zA-Z.]+$", 0, 0, &_inner_error_);
		_tmp0_ = _tmp1_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch8_g_error;
		}
		_tmp2_ = _tmp0_;
		_tmp0_ = NULL;
		_g_regex_unref0 (self->priv->scope_dbusname_regex);
		self->priv->scope_dbusname_regex = _tmp2_;
		_g_regex_unref0 (_tmp0_);
	}
	goto __finally8;
	__catch8_g_error:
	{
		GError* e = NULL;
		FILE* _tmp3_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp3_ = stderr;
		fprintf (_tmp3_, "Error parsing scope_dbusname_regex");
		_g_error_free0 (e);
	}
	__finally8:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return NULL;
	}
	return self;
}


UnityTesterDBusLensUtil*
unity_tester_dbus_lens_util_new (void)
{
	return unity_tester_dbus_lens_util_construct (UNITY_TESTER_TYPE_DBUS_LENS_UTIL);
}


/**
         * Discover available DBus services
         */
static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static inline void
_g_list_free__g_free0_ (GList* self)
{
	g_list_free_full (self, (GDestroyNotify) _g_free0_);
}


static GList*
unity_tester_dbus_lens_util_getServices (UnityTesterDBusLensUtil* self,
                                         GError** error)
{
	GList* result = NULL;
	GList* services = NULL;
	GVariantType* vt = NULL;
	GVariantType* _tmp0_;
	GDBusConnection* bus = NULL;
	GDBusConnection* _tmp1_;
	GVariant* v = NULL;
	GDBusConnection* _tmp2_;
	const GVariantType* _tmp3_;
	GVariant* _tmp4_;
	const gchar** names = NULL;
	GVariant* _tmp5_;
	GVariant* _tmp6_;
	GVariant* _tmp7_;
	size_t _tmp8_;
	const gchar** _tmp9_;
	const gchar** _tmp10_;
	gint _tmp10__length1;
	gint names_length1;
	gint _names_size_;
	const gchar** _tmp11_;
	gint _tmp11__length1;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (self != NULL, NULL);
	services = NULL;
	_tmp0_ = g_variant_type_new ("(as)");
	vt = _tmp0_;
	_tmp1_ = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &_inner_error_);
	bus = _tmp1_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_variant_type_free0 (vt);
		(services == NULL) ? NULL : (services = (_g_list_free__g_free0_ (services), NULL));
		return NULL;
	}
	_tmp2_ = bus;
	_tmp3_ = vt;
	_tmp4_ = g_dbus_connection_call_sync (_tmp2_, "org.freedesktop.DBus", "/org/freedesktop/DBus", "org.freedesktop.DBus", "ListNames", NULL, _tmp3_, 0, -1, NULL, &_inner_error_);
	v = _tmp4_;
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_propagate_error (error, _inner_error_);
		_g_object_unref0 (bus);
		_g_variant_type_free0 (vt);
		(services == NULL) ? NULL : (services = (_g_list_free__g_free0_ (services), NULL));
		return NULL;
	}
	_tmp5_ = v;
	_tmp6_ = g_variant_get_child_value (_tmp5_, (gsize) 0);
	_tmp7_ = _tmp6_;
	_tmp9_ = g_variant_get_strv (_tmp7_, &_tmp8_);
	_tmp10_ = _tmp9_;
	_tmp10__length1 = _tmp8_;
	_g_variant_unref0 (_tmp7_);
	names = _tmp10_;
	names_length1 = _tmp10__length1;
	_names_size_ = names_length1;
	_tmp11_ = names;
	_tmp11__length1 = names_length1;
	{
		const gchar** s_collection = NULL;
		gint s_collection_length1 = 0;
		gint _s_collection_size_ = 0;
		gint s_it = 0;
		s_collection = _tmp11_;
		s_collection_length1 = _tmp11__length1;
		for (s_it = 0; s_it < _tmp11__length1; s_it = s_it + 1) {
			const gchar* s = NULL;
			s = s_collection[s_it];
			{
				const gchar* _tmp12_;
				gchar* _tmp13_;
				_tmp12_ = s;
				_tmp13_ = g_strdup ((gchar*) _tmp12_);
				services = g_list_append (services, _tmp13_);
			}
		}
	}
	result = services;
	names = (g_free (names), NULL);
	_g_variant_unref0 (v);
	_g_object_unref0 (bus);
	_g_variant_type_free0 (vt);
	return result;
}


static gpointer
_unity_tester_dbus_lens_util_dbus_object_address_dup0 (gpointer self)
{
	return self ? unity_tester_dbus_lens_util_dbus_object_address_dup (self) : NULL;
}


static gint
_______lambda5_ (UnityTesterDBusLensUtilDBusObjectAddress* a,
                 UnityTesterDBusLensUtilDBusObjectAddress* b)
{
	gint result = 0;
	gint _tmp0_ = 0;
	gboolean _tmp1_ = FALSE;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	_tmp2_ = (*a).dbus_name;
	_tmp3_ = (*b).dbus_name;
	if (g_strcmp0 (_tmp2_, _tmp3_) == 0) {
		const gchar* _tmp4_;
		const gchar* _tmp5_;
		_tmp4_ = (*a).dbus_path;
		_tmp5_ = (*b).dbus_path;
		_tmp1_ = g_strcmp0 (_tmp4_, _tmp5_) == 0;
	} else {
		_tmp1_ = FALSE;
	}
	if (_tmp1_) {
		_tmp0_ = 0;
	} else {
		_tmp0_ = 1;
	}
	result = _tmp0_;
	return result;
}


static gint
________lambda5__gcompare_func (gconstpointer a,
                                gconstpointer b)
{
	gint result;
	result = _______lambda5_ ((UnityTesterDBusLensUtilDBusObjectAddress*) a, (UnityTesterDBusLensUtilDBusObjectAddress*) b);
	return result;
}


static void
unity_tester_dbus_lens_util_start (UnityTesterDBusLensUtil* self,
                                   GMarkupParseContext* context,
                                   const gchar* name,
                                   gchar** attr_names,
                                   int attr_names_length1,
                                   gchar** attr_values,
                                   int attr_values_length1,
                                   GError** error)
{
	g_return_if_fail (self != NULL);
	g_return_if_fail (context != NULL);
	g_return_if_fail (name != NULL);
	if (g_strcmp0 (name, "node") == 0) {
		{
			gint i = 0;
			i = 0;
			{
				gboolean _tmp0_ = FALSE;
				_tmp0_ = TRUE;
				while (TRUE) {
					gint _tmp2_;
					gint _tmp3_;
					const gchar* _tmp4_;
					if (!_tmp0_) {
						gint _tmp1_;
						_tmp1_ = i;
						i = _tmp1_ + 1;
					}
					_tmp0_ = FALSE;
					_tmp2_ = i;
					if (!(_tmp2_ < attr_names_length1)) {
						break;
					}
					_tmp3_ = i;
					_tmp4_ = attr_names[_tmp3_];
					if (g_strcmp0 (_tmp4_, "name") == 0) {
						gchar* _tmp5_ = NULL;
						const gchar* _tmp6_;
						gchar* node_path = NULL;
						gchar* _tmp13_;
						UnityTesterDBusLensUtilDBusObjectAddress obj = {0};
						const gchar* _tmp14_;
						gchar* _tmp15_;
						const gchar* _tmp16_;
						const gchar* _tmp17_;
						gchar* _tmp18_;
						UnityTesterDBusLensUtilDBusObjectAddress _tmp19_ = {0};
						GQueue* _tmp20_;
						UnityTesterDBusLensUtilDBusObjectAddress _tmp21_;
						UnityTesterDBusLensUtilDBusObjectAddress _tmp22_;
						UnityTesterDBusLensUtilDBusObjectAddress* _tmp23_;
						_tmp6_ = self->priv->current_dbus_path;
						if (g_str_has_suffix (_tmp6_, "/")) {
							gint _tmp7_;
							const gchar* _tmp8_;
							gchar* _tmp9_;
							_tmp7_ = i;
							_tmp8_ = attr_values[_tmp7_];
							_tmp9_ = g_strdup (_tmp8_);
							_g_free0 (_tmp5_);
							_tmp5_ = _tmp9_;
						} else {
							gint _tmp10_;
							const gchar* _tmp11_;
							gchar* _tmp12_;
							_tmp10_ = i;
							_tmp11_ = attr_values[_tmp10_];
							_tmp12_ = g_strconcat ("/", _tmp11_, NULL);
							_g_free0 (_tmp5_);
							_tmp5_ = _tmp12_;
						}
						_tmp13_ = g_strdup (_tmp5_);
						node_path = _tmp13_;
						_tmp14_ = self->priv->current_dbus_name;
						_tmp15_ = g_strdup (_tmp14_);
						_tmp16_ = self->priv->current_dbus_path;
						_tmp17_ = node_path;
						_tmp18_ = g_strconcat (_tmp16_, _tmp17_, NULL);
						memset (&_tmp19_, 0, sizeof (UnityTesterDBusLensUtilDBusObjectAddress));
						_g_free0 (_tmp19_.dbus_name);
						_tmp19_.dbus_name = _tmp15_;
						_g_free0 (_tmp19_.dbus_path);
						_tmp19_.dbus_path = _tmp18_;
						obj = _tmp19_;
						_tmp20_ = self->priv->nodes;
						_tmp21_ = obj;
						_tmp22_ = _tmp21_;
						_tmp23_ = _unity_tester_dbus_lens_util_dbus_object_address_dup0 (&_tmp22_);
						g_queue_push_tail (_tmp20_, _tmp23_);
						unity_tester_dbus_lens_util_dbus_object_address_destroy (&obj);
						_g_free0 (node_path);
						_g_free0 (_tmp5_);
					}
				}
			}
		}
	}
	if (g_strcmp0 (name, "interface") == 0) {
		{
			gint i = 0;
			i = 0;
			{
				gboolean _tmp24_ = FALSE;
				_tmp24_ = TRUE;
				while (TRUE) {
					gint _tmp26_;
					gboolean _tmp27_ = FALSE;
					gint _tmp28_;
					const gchar* _tmp29_;
					if (!_tmp24_) {
						gint _tmp25_;
						_tmp25_ = i;
						i = _tmp25_ + 1;
					}
					_tmp24_ = FALSE;
					_tmp26_ = i;
					if (!(_tmp26_ < attr_names_length1)) {
						break;
					}
					_tmp28_ = i;
					_tmp29_ = attr_names[_tmp28_];
					if (g_strcmp0 (_tmp29_, "name") == 0) {
						gint _tmp30_;
						const gchar* _tmp31_;
						_tmp30_ = i;
						_tmp31_ = attr_values[_tmp30_];
						_tmp27_ = g_strcmp0 (_tmp31_, "com.canonical.Unity.Scope") == 0;
					} else {
						_tmp27_ = FALSE;
					}
					if (_tmp27_) {
						UnityTesterDBusLensUtilDBusObjectAddress obj = {0};
						const gchar* _tmp32_;
						gchar* _tmp33_;
						const gchar* _tmp34_;
						gchar* _tmp35_;
						UnityTesterDBusLensUtilDBusObjectAddress _tmp36_ = {0};
						GList* _tmp37_;
						UnityTesterDBusLensUtilDBusObjectAddress _tmp38_;
						GList* _tmp39_;
						_tmp32_ = self->priv->current_dbus_name;
						_tmp33_ = g_strdup (_tmp32_);
						_tmp34_ = self->priv->current_dbus_path;
						_tmp35_ = g_strdup (_tmp34_);
						memset (&_tmp36_, 0, sizeof (UnityTesterDBusLensUtilDBusObjectAddress));
						_g_free0 (_tmp36_.dbus_name);
						_tmp36_.dbus_name = _tmp33_;
						_g_free0 (_tmp36_.dbus_path);
						_tmp36_.dbus_path = _tmp35_;
						obj = _tmp36_;
						_tmp37_ = self->priv->lenses;
						_tmp38_ = obj;
						_tmp39_ = g_list_find_custom (_tmp37_, &_tmp38_, ________lambda5__gcompare_func);
						if (g_list_length (_tmp39_) == ((guint) 0)) {
							UnityTesterDBusLensUtilDBusObjectAddress _tmp40_;
							UnityTesterDBusLensUtilDBusObjectAddress _tmp41_;
							UnityTesterDBusLensUtilDBusObjectAddress* _tmp42_;
							_tmp40_ = obj;
							_tmp41_ = _tmp40_;
							_tmp42_ = _unity_tester_dbus_lens_util_dbus_object_address_dup0 (&_tmp41_);
							self->priv->lenses = g_list_append (self->priv->lenses, _tmp42_);
						}
						unity_tester_dbus_lens_util_dbus_object_address_destroy (&obj);
					}
				}
			}
		}
	}
}


static void
unity_tester_dbus_lens_util_findLenses_data_free (gpointer _data)
{
	unity_tester_dbus_lens_util_findLensesData* _data_;
	_data_ = _data;
	_unity_tester_dbus_lens_util_unref0 (_data_->self);
	g_slice_free (unity_tester_dbus_lens_util_findLensesData, _data_);
}


static void
unity_tester_dbus_lens_util_findLenses_async_ready_wrapper (GObject *source_object,
                                                            GAsyncResult *res,
                                                            void *user_data)
{
	unity_tester_dbus_lens_util_findLensesData* _task_data_;
	_task_data_ = g_task_get_task_data (G_TASK (res));
	if (_task_data_->_callback_ != NULL) {
		_task_data_->_callback_ (source_object, res, user_data);
	}
	_task_data_->_task_complete_ = TRUE;
}


static gpointer
_unity_tester_dbus_lens_util_ref0 (gpointer self)
{
	return self ? unity_tester_dbus_lens_util_ref (self) : NULL;
}


void
unity_tester_dbus_lens_util_findLenses (UnityTesterDBusLensUtil* self,
                                        GAsyncReadyCallback _callback_,
                                        gpointer _user_data_)
{
	unity_tester_dbus_lens_util_findLensesData* _data_;
	UnityTesterDBusLensUtil* _tmp0_;
	_data_ = g_slice_new0 (unity_tester_dbus_lens_util_findLensesData);
	_data_->_callback_ = _callback_;
	_data_->_async_result = g_task_new (NULL, NULL, unity_tester_dbus_lens_util_findLenses_async_ready_wrapper, _user_data_);
	if (_callback_ == NULL) {
		_data_->_task_complete_ = TRUE;
	}
	g_task_set_task_data (_data_->_async_result, _data_, unity_tester_dbus_lens_util_findLenses_data_free);
	_tmp0_ = _unity_tester_dbus_lens_util_ref0 (self);
	_data_->self = _tmp0_;
	unity_tester_dbus_lens_util_findLenses_co (_data_);
}


GList*
unity_tester_dbus_lens_util_findLenses_finish (UnityTesterDBusLensUtil* self,
                                               GAsyncResult* _res_,
                                               GError** error)
{
	GList* result;
	unity_tester_dbus_lens_util_findLensesData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
	if (NULL == _data_) {
		return NULL;
	}
	result = _data_->result;
	_data_->result = NULL;
	return result;
}


/**
         * Find objects implementing com.canonical.Unity.Lens interface
         */
static GVariant*
_variant_new3 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static gboolean
_unity_tester_dbus_lens_util_findLenses_co_gsource_func (gpointer self)
{
	gboolean result;
	result = unity_tester_dbus_lens_util_findLenses_co (self);
	return result;
}


static gboolean
unity_tester_dbus_lens_util_findLenses_co (unity_tester_dbus_lens_util_findLensesData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = _data_->self->priv->scope_dbusname_regex;
	if (_data_->_tmp0_ == NULL) {
		_data_->_tmp1_ = stderr;
		fprintf (_data_->_tmp1_, "Invalid scope_dbusname_regex");
		_data_->_tmp2_ = _data_->self->priv->lenses;
		_data_->result = _data_->_tmp2_;
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
		if (_data_->_state_ != 0) {
			while (_data_->_task_complete_ != TRUE) {
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
			}
		}
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp3_ = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &_data_->_inner_error_);
	_data_->bus = _data_->_tmp3_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	_data_->_tmp4_ = g_variant_type_new ("(s)");
	_data_->vt = _data_->_tmp4_;
	_data_->_tmp6_ = unity_tester_dbus_lens_util_getServices (_data_->self, &_data_->_inner_error_);
	_data_->_tmp5_ = _data_->_tmp6_;
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
		_g_variant_type_free0 (_data_->vt);
		_g_object_unref0 (_data_->bus);
		g_object_unref (_data_->_async_result);
		return FALSE;
	}
	{
		_data_->srv_collection = _data_->_tmp5_;
		for (_data_->srv_it = _data_->srv_collection; _data_->srv_it != NULL; _data_->srv_it = _data_->srv_it->next) {
			_data_->_tmp7_ = g_strdup ((const gchar*) _data_->srv_it->data);
			_data_->srv = _data_->_tmp7_;
			{
				_data_->_tmp8_ = _data_->self->priv->scope_dbusname_regex;
				_data_->_tmp9_ = _data_->srv;
				_data_->_tmp10_ = g_regex_match (_data_->_tmp8_, _data_->_tmp9_, 0, NULL);
				if (_data_->_tmp10_) {
					{
						_data_->_tmp11_ = g_variant_type_new ("(s)");
						_data_->_tmp12_ = _data_->_tmp11_;
						_data_->_tmp13_ = g_variant_builder_new (_data_->_tmp12_);
						_data_->_tmp14_ = _data_->_tmp13_;
						_g_variant_type_free0 (_data_->_tmp12_);
						_data_->vb = _data_->_tmp14_;
						_data_->_tmp15_ = _data_->vb;
						_data_->_tmp16_ = _data_->srv;
						_data_->_tmp17_ = _variant_new3 (_data_->_tmp16_);
						g_variant_builder_add_value (_data_->_tmp15_, _data_->_tmp17_);
						_g_variant_unref0 (_data_->_tmp17_);
						_data_->_tmp18_ = _data_->bus;
						_data_->_tmp19_ = _data_->vb;
						_data_->_tmp20_ = g_variant_builder_end (_data_->_tmp19_);
						g_variant_ref_sink (_data_->_tmp20_);
						_data_->_tmp21_ = _data_->_tmp20_;
						_data_->_tmp22_ = _data_->vt;
						_data_->_tmp23_ = g_dbus_connection_call_sync (_data_->_tmp18_, "org.freedesktop.DBus", "/", "org.freedesktop.DBus", "GetNameOwner", _data_->_tmp21_, _data_->_tmp22_, 0, 10, NULL, &_data_->_inner_error_);
						_data_->_tmp24_ = _data_->_tmp23_;
						_g_variant_unref0 (_data_->_tmp21_);
						_data_->v = _data_->_tmp24_;
						if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
							_g_variant_builder_unref0 (_data_->vb);
							goto __catch9_g_error;
						}
						_data_->_tmp25_ = _data_->v;
						if (_data_->_tmp25_ != NULL) {
							_data_->_tmp26_ = _data_->v;
							_data_->_tmp27_ = g_variant_get_child_value (_data_->_tmp26_, (gsize) 0);
							_data_->_tmp28_ = _data_->_tmp27_;
							_data_->_tmp29_ = g_variant_get_string (_data_->_tmp28_, NULL);
							_data_->_tmp30_ = g_strdup (_data_->_tmp29_);
							_data_->_tmp31_ = _data_->_tmp30_;
							_g_variant_unref0 (_data_->_tmp28_);
							_data_->owner = _data_->_tmp31_;
							_data_->_tmp32_ = _data_->owner;
							if (_data_->_tmp32_ != NULL) {
								_data_->_tmp33_ = _data_->owner;
								_data_->_tmp34_ = g_strdup (_data_->_tmp33_);
								_data_->_tmp35_ = g_strdup ("/");
								memset (&_data_->_tmp36_, 0, sizeof (UnityTesterDBusLensUtilDBusObjectAddress));
								memset (&_data_->_tmp36_, 0, sizeof (UnityTesterDBusLensUtilDBusObjectAddress));
								_g_free0 (_data_->_tmp36_.dbus_name);
								_data_->_tmp36_.dbus_name = _data_->_tmp34_;
								_g_free0 (_data_->_tmp36_.dbus_path);
								_data_->_tmp36_.dbus_path = _data_->_tmp35_;
								_data_->obj = _data_->_tmp36_;
								_data_->_tmp37_ = _data_->self->priv->nodes;
								_data_->_tmp38_ = _data_->obj;
								_data_->_tmp39_ = _data_->_tmp38_;
								_data_->_tmp40_ = _unity_tester_dbus_lens_util_dbus_object_address_dup0 (&_data_->_tmp39_);
								g_queue_push_tail (_data_->_tmp37_, _data_->_tmp40_);
								unity_tester_dbus_lens_util_dbus_object_address_destroy (&_data_->obj);
							}
							_g_free0 (_data_->owner);
						}
						_g_variant_unref0 (_data_->v);
						_g_variant_builder_unref0 (_data_->vb);
					}
					goto __finally9;
					__catch9_g_error:
					{
						_data_->e = _data_->_inner_error_;
						_data_->_inner_error_ = NULL;
						_g_error_free0 (_data_->e);
					}
					__finally9:
					if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
						g_task_return_error (_data_->_async_result, _data_->_inner_error_);
						_g_free0 (_data_->srv);
						(_data_->_tmp5_ == NULL) ? NULL : (_data_->_tmp5_ = (_g_list_free__g_free0_ (_data_->_tmp5_), NULL));
						_g_variant_type_free0 (_data_->vt);
						_g_object_unref0 (_data_->bus);
						g_object_unref (_data_->_async_result);
						return FALSE;
					}
				}
				_g_free0 (_data_->srv);
			}
		}
	}
	while (TRUE) {
		_data_->_tmp41_ = _data_->self->priv->nodes;
		_data_->_tmp42_ = _data_->_tmp41_->length;
		if (!(_data_->_tmp42_ > ((guint) 0))) {
			break;
		}
		_data_->_tmp43_ = _data_->self->priv->nodes;
		_data_->_tmp44_ = g_queue_pop_head (_data_->_tmp43_);
		_data_->_tmp45_ = (UnityTesterDBusLensUtilDBusObjectAddress*) _data_->_tmp44_;
		memset (&_data_->_tmp46_, 0, sizeof (UnityTesterDBusLensUtilDBusObjectAddress));
		unity_tester_dbus_lens_util_dbus_object_address_copy (_data_->_tmp45_, &_data_->_tmp46_);
		_data_->_tmp47_ = _data_->_tmp46_;
		_unity_tester_dbus_lens_util_dbus_object_address_free0 (_data_->_tmp45_);
		_data_->node = _data_->_tmp47_;
		_data_->_tmp48_ = _data_->node;
		_data_->_tmp49_ = _data_->_tmp48_.dbus_name;
		_data_->_tmp50_ = g_strdup (_data_->_tmp49_);
		_g_free0 (_data_->self->priv->current_dbus_name);
		_data_->self->priv->current_dbus_name = _data_->_tmp50_;
		_data_->_tmp51_ = _data_->node;
		_data_->_tmp52_ = _data_->_tmp51_.dbus_path;
		_data_->_tmp53_ = g_strdup (_data_->_tmp52_);
		_g_free0 (_data_->self->priv->current_dbus_path);
		_data_->self->priv->current_dbus_path = _data_->_tmp53_;
		{
			_data_->_tmp54_ = _data_->bus;
			_data_->_tmp55_ = _data_->self->priv->current_dbus_name;
			_data_->_tmp56_ = _data_->self->priv->current_dbus_path;
			_data_->_tmp57_ = _data_->vt;
			_data_->_tmp58_ = g_dbus_connection_call_sync (_data_->_tmp54_, _data_->_tmp55_, _data_->_tmp56_, "org.freedesktop.DBus.Introspectable", "Introspect", NULL, _data_->_tmp57_, 0, 10, NULL, &_data_->_inner_error_);
			_data_->_vala1_v = _data_->_tmp58_;
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
				goto __catch10_g_error;
			}
			_data_->_tmp59_ = _data_->_vala1_v;
			if (_data_->_tmp59_ != NULL) {
				_data_->_tmp60_ = _data_->_vala1_v;
				_data_->_tmp61_ = g_variant_get_child_value (_data_->_tmp60_, (gsize) 0);
				_data_->_tmp62_ = _data_->_tmp61_;
				_data_->_tmp63_ = g_variant_get_string (_data_->_tmp62_, NULL);
				_data_->_tmp64_ = g_strdup (_data_->_tmp63_);
				_data_->_tmp65_ = _data_->_tmp64_;
				_g_variant_unref0 (_data_->_tmp62_);
				_data_->xmldata = _data_->_tmp65_;
				_data_->_tmp66_ = g_markup_parse_context_new (&UNITY_TESTER_DBUS_LENS_UTIL_parser, G_MARKUP_TREAT_CDATA_AS_TEXT, _data_->self, NULL);
				_data_->context = _data_->_tmp66_;
				_data_->_tmp67_ = _data_->context;
				_data_->_tmp68_ = _data_->xmldata;
				_data_->_tmp69_ = _data_->xmldata;
				_data_->_tmp70_ = strlen (_data_->_tmp69_);
				_data_->_tmp71_ = _data_->_tmp70_;
				g_markup_parse_context_parse (_data_->_tmp67_, _data_->_tmp68_, (gssize) _data_->_tmp71_, &_data_->_inner_error_);
				if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
					_g_markup_parse_context_unref0 (_data_->context);
					_g_free0 (_data_->xmldata);
					_g_variant_unref0 (_data_->_vala1_v);
					goto __catch10_g_error;
				}
				_g_markup_parse_context_unref0 (_data_->context);
				_g_free0 (_data_->xmldata);
			}
			_g_variant_unref0 (_data_->_vala1_v);
		}
		goto __finally10;
		__catch10_g_error:
		{
			_data_->_vala1_e = _data_->_inner_error_;
			_data_->_inner_error_ = NULL;
			_g_error_free0 (_data_->_vala1_e);
		}
		__finally10:
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
			unity_tester_dbus_lens_util_dbus_object_address_destroy (&_data_->node);
			(_data_->_tmp5_ == NULL) ? NULL : (_data_->_tmp5_ = (_g_list_free__g_free0_ (_data_->_tmp5_), NULL));
			_g_variant_type_free0 (_data_->vt);
			_g_object_unref0 (_data_->bus);
			g_object_unref (_data_->_async_result);
			return FALSE;
		}
		g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, _unity_tester_dbus_lens_util_findLenses_co_gsource_func, _data_, NULL);
		_data_->_state_ = 1;
		return FALSE;
		_state_1:
		;
		unity_tester_dbus_lens_util_dbus_object_address_destroy (&_data_->node);
	}
	_data_->_tmp72_ = _data_->self->priv->lenses;
	_data_->result = _data_->_tmp72_;
	(_data_->_tmp5_ == NULL) ? NULL : (_data_->_tmp5_ = (_g_list_free__g_free0_ (_data_->_tmp5_), NULL));
	_g_variant_type_free0 (_data_->vt);
	_g_object_unref0 (_data_->bus);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (_data_->_task_complete_ != TRUE) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}


void
unity_tester_dbus_lens_util_dbus_object_address_copy (const UnityTesterDBusLensUtilDBusObjectAddress* self,
                                                      UnityTesterDBusLensUtilDBusObjectAddress* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	_tmp0_ = (*self).dbus_name;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).dbus_name);
	(*dest).dbus_name = _tmp1_;
	_tmp2_ = (*self).dbus_path;
	_tmp3_ = g_strdup (_tmp2_);
	_g_free0 ((*dest).dbus_path);
	(*dest).dbus_path = _tmp3_;
}


void
unity_tester_dbus_lens_util_dbus_object_address_destroy (UnityTesterDBusLensUtilDBusObjectAddress* self)
{
	_g_free0 ((*self).dbus_name);
	_g_free0 ((*self).dbus_path);
}


UnityTesterDBusLensUtilDBusObjectAddress*
unity_tester_dbus_lens_util_dbus_object_address_dup (const UnityTesterDBusLensUtilDBusObjectAddress* self)
{
	UnityTesterDBusLensUtilDBusObjectAddress* dup;
	dup = g_new0 (UnityTesterDBusLensUtilDBusObjectAddress, 1);
	unity_tester_dbus_lens_util_dbus_object_address_copy (self, dup);
	return dup;
}


void
unity_tester_dbus_lens_util_dbus_object_address_free (UnityTesterDBusLensUtilDBusObjectAddress* self)
{
	unity_tester_dbus_lens_util_dbus_object_address_destroy (self);
	g_free (self);
}


GType
unity_tester_dbus_lens_util_dbus_object_address_get_type (void)
{
	static volatile gsize unity_tester_dbus_lens_util_dbus_object_address_type_id__volatile = 0;
	if (g_once_init_enter (&unity_tester_dbus_lens_util_dbus_object_address_type_id__volatile)) {
		GType unity_tester_dbus_lens_util_dbus_object_address_type_id;
		unity_tester_dbus_lens_util_dbus_object_address_type_id = g_boxed_type_register_static ("UnityTesterDBusLensUtilDBusObjectAddress", (GBoxedCopyFunc) unity_tester_dbus_lens_util_dbus_object_address_dup, (GBoxedFreeFunc) unity_tester_dbus_lens_util_dbus_object_address_free);
		g_once_init_leave (&unity_tester_dbus_lens_util_dbus_object_address_type_id__volatile, unity_tester_dbus_lens_util_dbus_object_address_type_id);
	}
	return unity_tester_dbus_lens_util_dbus_object_address_type_id__volatile;
}


static void
unity_tester_value_dbus_lens_util_init (GValue* value)
{
	value->data[0].v_pointer = NULL;
}


static void
unity_tester_value_dbus_lens_util_free_value (GValue* value)
{
	if (value->data[0].v_pointer) {
		unity_tester_dbus_lens_util_unref (value->data[0].v_pointer);
	}
}


static void
unity_tester_value_dbus_lens_util_copy_value (const GValue* src_value,
                                              GValue* dest_value)
{
	if (src_value->data[0].v_pointer) {
		dest_value->data[0].v_pointer = unity_tester_dbus_lens_util_ref (src_value->data[0].v_pointer);
	} else {
		dest_value->data[0].v_pointer = NULL;
	}
}


static gpointer
unity_tester_value_dbus_lens_util_peek_pointer (const GValue* value)
{
	return value->data[0].v_pointer;
}


static gchar*
unity_tester_value_dbus_lens_util_collect_value (GValue* value,
                                                 guint n_collect_values,
                                                 GTypeCValue* collect_values,
                                                 guint collect_flags)
{
	if (collect_values[0].v_pointer) {
		UnityTesterDBusLensUtil * object;
		object = collect_values[0].v_pointer;
		if (object->parent_instance.g_class == NULL) {
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
		}
		value->data[0].v_pointer = unity_tester_dbus_lens_util_ref (object);
	} else {
		value->data[0].v_pointer = NULL;
	}
	return NULL;
}


static gchar*
unity_tester_value_dbus_lens_util_lcopy_value (const GValue* value,
                                               guint n_collect_values,
                                               GTypeCValue* collect_values,
                                               guint collect_flags)
{
	UnityTesterDBusLensUtil ** object_p;
	object_p = collect_values[0].v_pointer;
	if (!object_p) {
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
	}
	if (!value->data[0].v_pointer) {
		*object_p = NULL;
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
		*object_p = value->data[0].v_pointer;
	} else {
		*object_p = unity_tester_dbus_lens_util_ref (value->data[0].v_pointer);
	}
	return NULL;
}


GParamSpec*
unity_tester_param_spec_dbus_lens_util (const gchar* name,
                                        const gchar* nick,
                                        const gchar* blurb,
                                        GType object_type,
                                        GParamFlags flags)
{
	UnityTesterParamSpecDBusLensUtil* spec;
	g_return_val_if_fail (g_type_is_a (object_type, UNITY_TESTER_TYPE_DBUS_LENS_UTIL), NULL);
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
	G_PARAM_SPEC (spec)->value_type = object_type;
	return G_PARAM_SPEC (spec);
}


gpointer
unity_tester_value_get_dbus_lens_util (const GValue* value)
{
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_TESTER_TYPE_DBUS_LENS_UTIL), NULL);
	return value->data[0].v_pointer;
}


void
unity_tester_value_set_dbus_lens_util (GValue* value,
                                       gpointer v_object)
{
	UnityTesterDBusLensUtil * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_TESTER_TYPE_DBUS_LENS_UTIL));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_TESTER_TYPE_DBUS_LENS_UTIL));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
		unity_tester_dbus_lens_util_ref (value->data[0].v_pointer);
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_tester_dbus_lens_util_unref (old);
	}
}


void
unity_tester_value_take_dbus_lens_util (GValue* value,
                                        gpointer v_object)
{
	UnityTesterDBusLensUtil * old;
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, UNITY_TESTER_TYPE_DBUS_LENS_UTIL));
	old = value->data[0].v_pointer;
	if (v_object) {
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, UNITY_TESTER_TYPE_DBUS_LENS_UTIL));
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
		value->data[0].v_pointer = v_object;
	} else {
		value->data[0].v_pointer = NULL;
	}
	if (old) {
		unity_tester_dbus_lens_util_unref (old);
	}
}


static void
unity_tester_dbus_lens_util_class_init (UnityTesterDBusLensUtilClass * klass)
{
	unity_tester_dbus_lens_util_parent_class = g_type_class_peek_parent (klass);
	((UnityTesterDBusLensUtilClass *) klass)->finalize = unity_tester_dbus_lens_util_finalize;
	g_type_class_add_private (klass, sizeof (UnityTesterDBusLensUtilPrivate));
}


static void
unity_tester_dbus_lens_util_instance_init (UnityTesterDBusLensUtil * self)
{
	GQueue* _tmp0_;
	self->priv = UNITY_TESTER_DBUS_LENS_UTIL_GET_PRIVATE (self);
	_tmp0_ = g_queue_new ();
	self->priv->nodes = _tmp0_;
	self->priv->lenses = NULL;
	self->ref_count = 1;
}


static void
unity_tester_dbus_lens_util_finalize (UnityTesterDBusLensUtil * obj)
{
	UnityTesterDBusLensUtil * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TESTER_TYPE_DBUS_LENS_UTIL, UnityTesterDBusLensUtil);
	g_signal_handlers_destroy (self);
	_g_regex_unref0 (self->priv->scope_dbusname_regex);
	_g_free0 (self->priv->current_dbus_name);
	_g_free0 (self->priv->current_dbus_path);
	(self->priv->nodes == NULL) ? NULL : (self->priv->nodes = (_g_queue_free__unity_tester_dbus_lens_util_dbus_object_address_free0_ (self->priv->nodes), NULL));
	(self->priv->lenses == NULL) ? NULL : (self->priv->lenses = (_g_list_free__unity_tester_dbus_lens_util_dbus_object_address_free0_ (self->priv->lenses), NULL));
}


GType
unity_tester_dbus_lens_util_get_type (void)
{
	static volatile gsize unity_tester_dbus_lens_util_type_id__volatile = 0;
	if (g_once_init_enter (&unity_tester_dbus_lens_util_type_id__volatile)) {
		static const GTypeValueTable g_define_type_value_table = { unity_tester_value_dbus_lens_util_init, unity_tester_value_dbus_lens_util_free_value, unity_tester_value_dbus_lens_util_copy_value, unity_tester_value_dbus_lens_util_peek_pointer, "p", unity_tester_value_dbus_lens_util_collect_value, "p", unity_tester_value_dbus_lens_util_lcopy_value };
		static const GTypeInfo g_define_type_info = { sizeof (UnityTesterDBusLensUtilClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_tester_dbus_lens_util_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityTesterDBusLensUtil), 0, (GInstanceInitFunc) unity_tester_dbus_lens_util_instance_init, &g_define_type_value_table };
		static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
		GType unity_tester_dbus_lens_util_type_id;
		unity_tester_dbus_lens_util_type_id = g_type_register_fundamental (g_type_fundamental_next (), "UnityTesterDBusLensUtil", &g_define_type_info, &g_define_type_fundamental_info, 0);
		g_once_init_leave (&unity_tester_dbus_lens_util_type_id__volatile, unity_tester_dbus_lens_util_type_id);
	}
	return unity_tester_dbus_lens_util_type_id__volatile;
}


gpointer
unity_tester_dbus_lens_util_ref (gpointer instance)
{
	UnityTesterDBusLensUtil * self;
	self = instance;
	g_atomic_int_inc (&self->ref_count);
	return instance;
}


void
unity_tester_dbus_lens_util_unref (gpointer instance)
{
	UnityTesterDBusLensUtil * self;
	self = instance;
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
		UNITY_TESTER_DBUS_LENS_UTIL_GET_CLASS (self)->finalize (self);
		g_type_free_instance ((GTypeInstance *) self);
	}
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



