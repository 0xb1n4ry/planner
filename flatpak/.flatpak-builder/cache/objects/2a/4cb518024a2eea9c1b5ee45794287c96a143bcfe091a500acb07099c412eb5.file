/*
 * Generated by gdbus-codegen 2.58.1 from org.gnome.evolution.dataserver.AddressBookFactory.xml. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __E_DBUS_ADDRESS_BOOK_FACTORY_H__
#define __E_DBUS_ADDRESS_BOOK_FACTORY_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.evolution.dataserver.AddressBookFactory */

#define E_DBUS_TYPE_ADDRESS_BOOK_FACTORY (e_dbus_address_book_factory_get_type ())
#define E_DBUS_ADDRESS_BOOK_FACTORY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_TYPE_ADDRESS_BOOK_FACTORY, EDBusAddressBookFactory))
#define E_DBUS_IS_ADDRESS_BOOK_FACTORY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_TYPE_ADDRESS_BOOK_FACTORY))
#define E_DBUS_ADDRESS_BOOK_FACTORY_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), E_DBUS_TYPE_ADDRESS_BOOK_FACTORY, EDBusAddressBookFactoryIface))

struct _EDBusAddressBookFactory;
typedef struct _EDBusAddressBookFactory EDBusAddressBookFactory;
typedef struct _EDBusAddressBookFactoryIface EDBusAddressBookFactoryIface;

struct _EDBusAddressBookFactoryIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_open_address_book) (
    EDBusAddressBookFactory *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_source_uid);

};

GType e_dbus_address_book_factory_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *e_dbus_address_book_factory_interface_info (void);
guint e_dbus_address_book_factory_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void e_dbus_address_book_factory_complete_open_address_book (
    EDBusAddressBookFactory *object,
    GDBusMethodInvocation *invocation,
    const gchar *object_path,
    const gchar *bus_name);



/* D-Bus method calls: */
void e_dbus_address_book_factory_call_open_address_book (
    EDBusAddressBookFactory *proxy,
    const gchar *arg_source_uid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean e_dbus_address_book_factory_call_open_address_book_finish (
    EDBusAddressBookFactory *proxy,
    gchar **out_object_path,
    gchar **out_bus_name,
    GAsyncResult *res,
    GError **error);

gboolean e_dbus_address_book_factory_call_open_address_book_sync (
    EDBusAddressBookFactory *proxy,
    const gchar *arg_source_uid,
    gchar **out_object_path,
    gchar **out_bus_name,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define E_DBUS_TYPE_ADDRESS_BOOK_FACTORY_PROXY (e_dbus_address_book_factory_proxy_get_type ())
#define E_DBUS_ADDRESS_BOOK_FACTORY_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_TYPE_ADDRESS_BOOK_FACTORY_PROXY, EDBusAddressBookFactoryProxy))
#define E_DBUS_ADDRESS_BOOK_FACTORY_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), E_DBUS_TYPE_ADDRESS_BOOK_FACTORY_PROXY, EDBusAddressBookFactoryProxyClass))
#define E_DBUS_ADDRESS_BOOK_FACTORY_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), E_DBUS_TYPE_ADDRESS_BOOK_FACTORY_PROXY, EDBusAddressBookFactoryProxyClass))
#define E_DBUS_IS_ADDRESS_BOOK_FACTORY_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_TYPE_ADDRESS_BOOK_FACTORY_PROXY))
#define E_DBUS_IS_ADDRESS_BOOK_FACTORY_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), E_DBUS_TYPE_ADDRESS_BOOK_FACTORY_PROXY))

typedef struct _EDBusAddressBookFactoryProxy EDBusAddressBookFactoryProxy;
typedef struct _EDBusAddressBookFactoryProxyClass EDBusAddressBookFactoryProxyClass;
typedef struct _EDBusAddressBookFactoryProxyPrivate EDBusAddressBookFactoryProxyPrivate;

struct _EDBusAddressBookFactoryProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  EDBusAddressBookFactoryProxyPrivate *priv;
};

struct _EDBusAddressBookFactoryProxyClass
{
  GDBusProxyClass parent_class;
};

GType e_dbus_address_book_factory_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (EDBusAddressBookFactoryProxy, g_object_unref)
#endif

void e_dbus_address_book_factory_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EDBusAddressBookFactory *e_dbus_address_book_factory_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
EDBusAddressBookFactory *e_dbus_address_book_factory_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void e_dbus_address_book_factory_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
EDBusAddressBookFactory *e_dbus_address_book_factory_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
EDBusAddressBookFactory *e_dbus_address_book_factory_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define E_DBUS_TYPE_ADDRESS_BOOK_FACTORY_SKELETON (e_dbus_address_book_factory_skeleton_get_type ())
#define E_DBUS_ADDRESS_BOOK_FACTORY_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), E_DBUS_TYPE_ADDRESS_BOOK_FACTORY_SKELETON, EDBusAddressBookFactorySkeleton))
#define E_DBUS_ADDRESS_BOOK_FACTORY_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), E_DBUS_TYPE_ADDRESS_BOOK_FACTORY_SKELETON, EDBusAddressBookFactorySkeletonClass))
#define E_DBUS_ADDRESS_BOOK_FACTORY_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), E_DBUS_TYPE_ADDRESS_BOOK_FACTORY_SKELETON, EDBusAddressBookFactorySkeletonClass))
#define E_DBUS_IS_ADDRESS_BOOK_FACTORY_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), E_DBUS_TYPE_ADDRESS_BOOK_FACTORY_SKELETON))
#define E_DBUS_IS_ADDRESS_BOOK_FACTORY_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), E_DBUS_TYPE_ADDRESS_BOOK_FACTORY_SKELETON))

typedef struct _EDBusAddressBookFactorySkeleton EDBusAddressBookFactorySkeleton;
typedef struct _EDBusAddressBookFactorySkeletonClass EDBusAddressBookFactorySkeletonClass;
typedef struct _EDBusAddressBookFactorySkeletonPrivate EDBusAddressBookFactorySkeletonPrivate;

struct _EDBusAddressBookFactorySkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  EDBusAddressBookFactorySkeletonPrivate *priv;
};

struct _EDBusAddressBookFactorySkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType e_dbus_address_book_factory_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (EDBusAddressBookFactorySkeleton, g_object_unref)
#endif

EDBusAddressBookFactory *e_dbus_address_book_factory_skeleton_new (void);


G_END_DECLS

#endif /* __E_DBUS_ADDRESS_BOOK_FACTORY_H__ */
