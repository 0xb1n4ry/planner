/* note-details.c generated by valac 0.40.11, the Vala compiler
 * generated from note-details.vala, do not modify */

/*
 * Copyright (C) 2011 Collabora Ltd.
 * Copyright (C) 2011 Philip Withnall
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Raul Gutierrez Segales <raul.gutierrez.segales@collabora.co.uk>
 *       Philip Withnall <philip@tecnocode.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <gio/gio.h>
#include <glib/gi18n-lib.h>


#define FOLKS_TYPE_ABSTRACT_FIELD_DETAILS (folks_abstract_field_details_get_type ())
#define FOLKS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails))
#define FOLKS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))

typedef struct _FolksAbstractFieldDetails FolksAbstractFieldDetails;
typedef struct _FolksAbstractFieldDetailsClass FolksAbstractFieldDetailsClass;
typedef struct _FolksAbstractFieldDetailsPrivate FolksAbstractFieldDetailsPrivate;

#define FOLKS_TYPE_NOTE_FIELD_DETAILS (folks_note_field_details_get_type ())
#define FOLKS_NOTE_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_NOTE_FIELD_DETAILS, FolksNoteFieldDetails))
#define FOLKS_NOTE_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_NOTE_FIELD_DETAILS, FolksNoteFieldDetailsClass))
#define FOLKS_IS_NOTE_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_NOTE_FIELD_DETAILS))
#define FOLKS_IS_NOTE_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_NOTE_FIELD_DETAILS))
#define FOLKS_NOTE_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_NOTE_FIELD_DETAILS, FolksNoteFieldDetailsClass))

typedef struct _FolksNoteFieldDetails FolksNoteFieldDetails;
typedef struct _FolksNoteFieldDetailsClass FolksNoteFieldDetailsClass;
typedef struct _FolksNoteFieldDetailsPrivate FolksNoteFieldDetailsPrivate;
enum  {
	FOLKS_NOTE_FIELD_DETAILS_0_PROPERTY,
	FOLKS_NOTE_FIELD_DETAILS_ID_PROPERTY,
	FOLKS_NOTE_FIELD_DETAILS_UID_PROPERTY,
	FOLKS_NOTE_FIELD_DETAILS_NUM_PROPERTIES
};
static GParamSpec* folks_note_field_details_properties[FOLKS_NOTE_FIELD_DETAILS_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))

#define FOLKS_TYPE_NOTE_DETAILS (folks_note_details_get_type ())
#define FOLKS_NOTE_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_NOTE_DETAILS, FolksNoteDetails))
#define FOLKS_IS_NOTE_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_NOTE_DETAILS))
#define FOLKS_NOTE_DETAILS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_NOTE_DETAILS, FolksNoteDetailsIface))

typedef struct _FolksNoteDetails FolksNoteDetails;
typedef struct _FolksNoteDetailsIface FolksNoteDetailsIface;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _FolksNoteDetailsChangeNotesData FolksNoteDetailsChangeNotesData;

struct _FolksAbstractFieldDetails {
	GObject parent_instance;
	FolksAbstractFieldDetailsPrivate * priv;
};

struct _FolksAbstractFieldDetailsClass {
	GObjectClass parent_class;
	gboolean (*equal) (FolksAbstractFieldDetails* self, FolksAbstractFieldDetails* that);
	gboolean (*parameters_equal) (FolksAbstractFieldDetails* self, FolksAbstractFieldDetails* that);
	gboolean (*values_equal) (FolksAbstractFieldDetails* self, FolksAbstractFieldDetails* that);
	guint (*hash) (FolksAbstractFieldDetails* self);
	gconstpointer (*get_value) (FolksAbstractFieldDetails* self);
	void (*set_value) (FolksAbstractFieldDetails* self, gconstpointer value);
	const gchar* (*get_id) (FolksAbstractFieldDetails* self);
	void (*set_id) (FolksAbstractFieldDetails* self, const gchar* value);
	GeeMultiMap* (*get_parameters) (FolksAbstractFieldDetails* self);
	void (*set_parameters) (FolksAbstractFieldDetails* self, GeeMultiMap* value);
};

struct _FolksNoteFieldDetails {
	FolksAbstractFieldDetails parent_instance;
	FolksNoteFieldDetailsPrivate * priv;
};

struct _FolksNoteFieldDetailsClass {
	FolksAbstractFieldDetailsClass parent_class;
};

struct _FolksNoteFieldDetailsPrivate {
	gchar* _id;
};

typedef enum  {
	FOLKS_PROPERTY_ERROR_NOT_WRITEABLE,
	FOLKS_PROPERTY_ERROR_INVALID_VALUE,
	FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR,
	FOLKS_PROPERTY_ERROR_UNAVAILABLE
} FolksPropertyError;
#define FOLKS_PROPERTY_ERROR folks_property_error_quark ()
struct _FolksNoteDetailsIface {
	GTypeInterface parent_iface;
	void (*change_notes) (FolksNoteDetails* self, GeeSet* notes, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_notes_finish) (FolksNoteDetails* self, GAsyncResult* _res_, GError** error);
	GeeSet* (*get_notes) (FolksNoteDetails* self);
	void (*set_notes) (FolksNoteDetails* self, GeeSet* value);
};

struct _FolksNoteDetailsChangeNotesData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksNoteDetails* self;
	GeeSet* notes;
	GError* _tmp0_;
	GError * _inner_error_;
};


static gpointer folks_note_field_details_parent_class = NULL;

GType folks_abstract_field_details_get_type (void) G_GNUC_CONST;
GType folks_note_field_details_get_type (void) G_GNUC_CONST;
#define FOLKS_NOTE_FIELD_DETAILS_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_TYPE_NOTE_FIELD_DETAILS, FolksNoteFieldDetailsPrivate))
FolksNoteFieldDetails* folks_note_field_details_new (const gchar* value,
                                                     GeeMultiMap* parameters,
                                                     const gchar* uid);
FolksNoteFieldDetails* folks_note_field_details_construct (GType object_type,
                                                           const gchar* value,
                                                           GeeMultiMap* parameters,
                                                           const gchar* uid);
static gboolean folks_note_field_details_real_equal (FolksAbstractFieldDetails* base,
                                              FolksAbstractFieldDetails* that);
gboolean folks_abstract_field_details_equal (FolksAbstractFieldDetails* self,
                                             FolksAbstractFieldDetails* that);
static guint folks_note_field_details_real_hash (FolksAbstractFieldDetails* base);
gconstpointer folks_abstract_field_details_get_value (FolksAbstractFieldDetails* self);
const gchar* folks_abstract_field_details_get_id (FolksAbstractFieldDetails* self);
const gchar* folks_note_field_details_get_uid (FolksNoteFieldDetails* self) G_GNUC_DEPRECATED;
void folks_note_field_details_set_uid (FolksNoteFieldDetails* self,
                                       const gchar* value) G_GNUC_DEPRECATED;
void folks_abstract_field_details_set_id (FolksAbstractFieldDetails* self,
                                          const gchar* value);
static void folks_note_field_details_finalize (GObject * obj);
static void _vala_folks_note_field_details_get_property (GObject * object,
                                                  guint property_id,
                                                  GValue * value,
                                                  GParamSpec * pspec);
static void _vala_folks_note_field_details_set_property (GObject * object,
                                                  guint property_id,
                                                  const GValue * value,
                                                  GParamSpec * pspec);
GQuark folks_property_error_quark (void);
GType folks_note_details_get_type (void) G_GNUC_CONST;
static void folks_note_details_real_change_notes_data_free (gpointer _data);
static void folks_note_details_real_change_notes_async_ready_wrapper (GObject *source_object,
                                                               GAsyncResult *res,
                                                               void *user_data);
static void folks_note_details_real_change_notes (FolksNoteDetails* self,
                                           GeeSet* notes,
                                           GAsyncReadyCallback _callback_,
                                           gpointer _user_data_);
void folks_note_details_change_notes (FolksNoteDetails* self,
                                      GeeSet* notes,
                                      GAsyncReadyCallback _callback_,
                                      gpointer _user_data_);
void folks_note_details_change_notes_finish (FolksNoteDetails* self,
                                             GAsyncResult* _res_,
                                             GError** error);
static gboolean folks_note_details_real_change_notes_co (FolksNoteDetailsChangeNotesData* _data_);
GeeSet* folks_note_details_get_notes (FolksNoteDetails* self);
void folks_note_details_set_notes (FolksNoteDetails* self,
                                   GeeSet* value);


/**
   * Create a new NoteFieldDetails.
   *
   * @param value the value of the field, which should be a non-empty free-form
   * UTF-8 string as entered by the user
   * @param parameters initial parameters. See
   * {@link AbstractFieldDetails.parameters}. A ``null`` value is equivalent to
   * a empty map of parameters.
   * @param uid UID for the note object itself, if known. A ``null`` value means
   * the note has no unique ID.
   *
   * @return a new NoteFieldDetails
   *
   * @since 0.6.0
   */
FolksNoteFieldDetails*
folks_note_field_details_construct (GType object_type,
                                    const gchar* value,
                                    GeeMultiMap* parameters,
                                    const gchar* uid)
{
	FolksNoteFieldDetails * self = NULL;
#line 72 "/run/build/folks/folks/note-details.vala"
	g_return_val_if_fail (value != NULL, NULL);
#line 76 "/run/build/folks/folks/note-details.vala"
	if (g_strcmp0 (value, "") == 0) {
#line 78 "/run/build/folks/folks/note-details.vala"
		g_warning ("note-details.vala:78: Empty note passed to NoteFieldDetails.");
#line 222 "note-details.c"
	}
#line 81 "/run/build/folks/folks/note-details.vala"
	self = (FolksNoteFieldDetails*) g_object_new (object_type, "t_type", G_TYPE_STRING, "t_dup_func", (GBoxedCopyFunc) g_strdup, "t_destroy_func", (GDestroyNotify) g_free, "value", value, "id", uid, "parameters", parameters, NULL);
#line 72 "/run/build/folks/folks/note-details.vala"
	return self;
#line 228 "note-details.c"
}


FolksNoteFieldDetails*
folks_note_field_details_new (const gchar* value,
                              GeeMultiMap* parameters,
                              const gchar* uid)
{
#line 72 "/run/build/folks/folks/note-details.vala"
	return folks_note_field_details_construct (FOLKS_TYPE_NOTE_FIELD_DETAILS, value, parameters, uid);
#line 239 "note-details.c"
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.0
   */
static gboolean
folks_note_field_details_real_equal (FolksAbstractFieldDetails* base,
                                     FolksAbstractFieldDetails* that)
{
	FolksNoteFieldDetails * self;
	gboolean result = FALSE;
#line 91 "/run/build/folks/folks/note-details.vala"
	self = (FolksNoteFieldDetails*) base;
#line 91 "/run/build/folks/folks/note-details.vala"
	g_return_val_if_fail (that != NULL, FALSE);
#line 93 "/run/build/folks/folks/note-details.vala"
	result = FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (folks_note_field_details_parent_class)->equal (G_TYPE_CHECK_INSTANCE_CAST (self, FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails), that);
#line 93 "/run/build/folks/folks/note-details.vala"
	return result;
#line 262 "note-details.c"
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.0
   */
static guint
folks_note_field_details_real_hash (FolksAbstractFieldDetails* base)
{
	FolksNoteFieldDetails * self;
	guint result = 0U;
	gconstpointer _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
#line 101 "/run/build/folks/folks/note-details.vala"
	self = (FolksNoteFieldDetails*) base;
#line 103 "/run/build/folks/folks/note-details.vala"
	_tmp0_ = folks_abstract_field_details_get_value ((FolksAbstractFieldDetails*) self);
#line 103 "/run/build/folks/folks/note-details.vala"
	_tmp1_ = _tmp0_;
#line 103 "/run/build/folks/folks/note-details.vala"
	_tmp2_ = folks_abstract_field_details_get_id ((FolksAbstractFieldDetails*) self);
#line 103 "/run/build/folks/folks/note-details.vala"
	_tmp3_ = _tmp2_;
#line 103 "/run/build/folks/folks/note-details.vala"
	result = g_str_hash ((const gchar*) _tmp1_) + g_str_hash (_tmp3_);
#line 103 "/run/build/folks/folks/note-details.vala"
	return result;
#line 294 "note-details.c"
}


static const gchar*
folks_note_field_details_real_get_id (FolksAbstractFieldDetails* base)
{
	const gchar* result;
	FolksNoteFieldDetails* self;
	const gchar* _tmp0_;
#line 42 "/run/build/folks/folks/note-details.vala"
	self = (FolksNoteFieldDetails*) base;
#line 42 "/run/build/folks/folks/note-details.vala"
	_tmp0_ = self->priv->_id;
#line 42 "/run/build/folks/folks/note-details.vala"
	result = _tmp0_;
#line 42 "/run/build/folks/folks/note-details.vala"
	return result;
#line 312 "note-details.c"
}


static void
folks_note_field_details_real_set_id (FolksAbstractFieldDetails* base,
                                      const gchar* value)
{
	FolksNoteFieldDetails* self;
	const gchar* _tmp0_ = NULL;
	gchar* _tmp1_;
#line 43 "/run/build/folks/folks/note-details.vala"
	self = (FolksNoteFieldDetails*) base;
#line 43 "/run/build/folks/folks/note-details.vala"
	if (value != NULL) {
#line 43 "/run/build/folks/folks/note-details.vala"
		_tmp0_ = value;
#line 329 "note-details.c"
	} else {
#line 43 "/run/build/folks/folks/note-details.vala"
		_tmp0_ = "";
#line 333 "note-details.c"
	}
#line 43 "/run/build/folks/folks/note-details.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 43 "/run/build/folks/folks/note-details.vala"
	_g_free0 (self->priv->_id);
#line 43 "/run/build/folks/folks/note-details.vala"
	self->priv->_id = _tmp1_;
#line 43 "/run/build/folks/folks/note-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_note_field_details_properties[FOLKS_NOTE_FIELD_DETAILS_ID_PROPERTY]);
#line 343 "note-details.c"
}


const gchar*
folks_note_field_details_get_uid (FolksNoteFieldDetails* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
#line 53 "/run/build/folks/folks/note-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 53 "/run/build/folks/folks/note-details.vala"
	_tmp0_ = folks_abstract_field_details_get_id ((FolksAbstractFieldDetails*) self);
#line 53 "/run/build/folks/folks/note-details.vala"
	_tmp1_ = _tmp0_;
#line 53 "/run/build/folks/folks/note-details.vala"
	result = _tmp1_;
#line 53 "/run/build/folks/folks/note-details.vala"
	return result;
#line 363 "note-details.c"
}


void
folks_note_field_details_set_uid (FolksNoteFieldDetails* self,
                                  const gchar* value)
{
#line 54 "/run/build/folks/folks/note-details.vala"
	g_return_if_fail (self != NULL);
#line 54 "/run/build/folks/folks/note-details.vala"
	folks_abstract_field_details_set_id ((FolksAbstractFieldDetails*) self, value);
#line 54 "/run/build/folks/folks/note-details.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_note_field_details_properties[FOLKS_NOTE_FIELD_DETAILS_UID_PROPERTY]);
#line 377 "note-details.c"
}


static void
folks_note_field_details_class_init (FolksNoteFieldDetailsClass * klass)
{
#line 34 "/run/build/folks/folks/note-details.vala"
	folks_note_field_details_parent_class = g_type_class_peek_parent (klass);
#line 34 "/run/build/folks/folks/note-details.vala"
	g_type_class_add_private (klass, sizeof (FolksNoteFieldDetailsPrivate));
#line 34 "/run/build/folks/folks/note-details.vala"
	((FolksAbstractFieldDetailsClass *) klass)->equal = (gboolean (*) (FolksAbstractFieldDetails *, FolksAbstractFieldDetails*)) folks_note_field_details_real_equal;
#line 34 "/run/build/folks/folks/note-details.vala"
	((FolksAbstractFieldDetailsClass *) klass)->hash = (guint (*) (FolksAbstractFieldDetails *)) folks_note_field_details_real_hash;
#line 34 "/run/build/folks/folks/note-details.vala"
	FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (klass)->get_id = folks_note_field_details_real_get_id;
#line 34 "/run/build/folks/folks/note-details.vala"
	FOLKS_ABSTRACT_FIELD_DETAILS_CLASS (klass)->set_id = folks_note_field_details_real_set_id;
#line 34 "/run/build/folks/folks/note-details.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_folks_note_field_details_get_property;
#line 34 "/run/build/folks/folks/note-details.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_folks_note_field_details_set_property;
#line 34 "/run/build/folks/folks/note-details.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_note_field_details_finalize;
#line 402 "note-details.c"
	/**
	   * {@inheritDoc}
	   */
#line 34 "/run/build/folks/folks/note-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_NOTE_FIELD_DETAILS_ID_PROPERTY, folks_note_field_details_properties[FOLKS_NOTE_FIELD_DETAILS_ID_PROPERTY] = g_param_spec_string ("id", "id", "id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 408 "note-details.c"
	/**
	   * The UID of the note (if any).
	   */
#line 34 "/run/build/folks/folks/note-details.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_NOTE_FIELD_DETAILS_UID_PROPERTY, folks_note_field_details_properties[FOLKS_NOTE_FIELD_DETAILS_UID_PROPERTY] = g_param_spec_string ("uid", "uid", "uid", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_DEPRECATED));
#line 414 "note-details.c"
}


static void
folks_note_field_details_instance_init (FolksNoteFieldDetails * self)
{
	gchar* _tmp0_;
#line 34 "/run/build/folks/folks/note-details.vala"
	self->priv = FOLKS_NOTE_FIELD_DETAILS_GET_PRIVATE (self);
#line 36 "/run/build/folks/folks/note-details.vala"
	_tmp0_ = g_strdup ("");
#line 36 "/run/build/folks/folks/note-details.vala"
	self->priv->_id = _tmp0_;
#line 428 "note-details.c"
}


static void
folks_note_field_details_finalize (GObject * obj)
{
	FolksNoteFieldDetails * self;
#line 34 "/run/build/folks/folks/note-details.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_NOTE_FIELD_DETAILS, FolksNoteFieldDetails);
#line 36 "/run/build/folks/folks/note-details.vala"
	_g_free0 (self->priv->_id);
#line 34 "/run/build/folks/folks/note-details.vala"
	G_OBJECT_CLASS (folks_note_field_details_parent_class)->finalize (obj);
#line 442 "note-details.c"
}


/**
 * Object representing a note that can have some parameters associated with it.
 *
 * See {@link Folks.AbstractFieldDetails} for details on common parameter names
 * and values.
 *
 * @since 0.6.0
 */
GType
folks_note_field_details_get_type (void)
{
	static volatile gsize folks_note_field_details_type_id__volatile = 0;
	if (g_once_init_enter (&folks_note_field_details_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksNoteFieldDetailsClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_note_field_details_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksNoteFieldDetails), 0, (GInstanceInitFunc) folks_note_field_details_instance_init, NULL };
		GType folks_note_field_details_type_id;
		folks_note_field_details_type_id = g_type_register_static (FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, "FolksNoteFieldDetails", &g_define_type_info, 0);
		g_once_init_leave (&folks_note_field_details_type_id__volatile, folks_note_field_details_type_id);
	}
	return folks_note_field_details_type_id__volatile;
}


static void
_vala_folks_note_field_details_get_property (GObject * object,
                                             guint property_id,
                                             GValue * value,
                                             GParamSpec * pspec)
{
	FolksNoteFieldDetails * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_NOTE_FIELD_DETAILS, FolksNoteFieldDetails);
#line 34 "/run/build/folks/folks/note-details.vala"
	switch (property_id) {
#line 34 "/run/build/folks/folks/note-details.vala"
		case FOLKS_NOTE_FIELD_DETAILS_ID_PROPERTY:
#line 34 "/run/build/folks/folks/note-details.vala"
		g_value_set_string (value, folks_abstract_field_details_get_id ((FolksAbstractFieldDetails*) self));
#line 34 "/run/build/folks/folks/note-details.vala"
		break;
#line 34 "/run/build/folks/folks/note-details.vala"
		case FOLKS_NOTE_FIELD_DETAILS_UID_PROPERTY:
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
#line 487 "note-details.c"
		g_value_set_string (value, folks_note_field_details_get_uid (self));
G_GNUC_END_IGNORE_DEPRECATIONS
#line 34 "/run/build/folks/folks/note-details.vala"
		break;
#line 492 "note-details.c"
		default:
#line 34 "/run/build/folks/folks/note-details.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 34 "/run/build/folks/folks/note-details.vala"
		break;
#line 498 "note-details.c"
	}
}


static void
_vala_folks_note_field_details_set_property (GObject * object,
                                             guint property_id,
                                             const GValue * value,
                                             GParamSpec * pspec)
{
	FolksNoteFieldDetails * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_NOTE_FIELD_DETAILS, FolksNoteFieldDetails);
#line 34 "/run/build/folks/folks/note-details.vala"
	switch (property_id) {
#line 34 "/run/build/folks/folks/note-details.vala"
		case FOLKS_NOTE_FIELD_DETAILS_ID_PROPERTY:
#line 34 "/run/build/folks/folks/note-details.vala"
		folks_abstract_field_details_set_id ((FolksAbstractFieldDetails*) self, g_value_get_string (value));
#line 34 "/run/build/folks/folks/note-details.vala"
		break;
#line 34 "/run/build/folks/folks/note-details.vala"
		case FOLKS_NOTE_FIELD_DETAILS_UID_PROPERTY:
G_GNUC_BEGIN_IGNORE_DEPRECATIONS
#line 522 "note-details.c"
		folks_note_field_details_set_uid (self, g_value_get_string (value));
G_GNUC_END_IGNORE_DEPRECATIONS
#line 34 "/run/build/folks/folks/note-details.vala"
		break;
#line 527 "note-details.c"
		default:
#line 34 "/run/build/folks/folks/note-details.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 34 "/run/build/folks/folks/note-details.vala"
		break;
#line 533 "note-details.c"
	}
}


static void
folks_note_details_real_change_notes_data_free (gpointer _data)
{
	FolksNoteDetailsChangeNotesData* _data_;
	_data_ = _data;
#line 113 "/run/build/folks/folks/note-details.vala"
	_g_object_unref0 (_data_->notes);
#line 113 "/run/build/folks/folks/note-details.vala"
	_g_object_unref0 (_data_->self);
#line 113 "/run/build/folks/folks/note-details.vala"
	g_slice_free (FolksNoteDetailsChangeNotesData, _data_);
#line 549 "note-details.c"
}


static void
folks_note_details_real_change_notes_async_ready_wrapper (GObject *source_object,
                                                          GAsyncResult *res,
                                                          void *user_data)
{
	FolksNoteDetailsChangeNotesData* _task_data_;
#line 113 "/run/build/folks/folks/note-details.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 113 "/run/build/folks/folks/note-details.vala"
	if (_task_data_->_callback_ != NULL) {
#line 113 "/run/build/folks/folks/note-details.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 565 "note-details.c"
	}
#line 113 "/run/build/folks/folks/note-details.vala"
	_task_data_->_task_complete_ = TRUE;
#line 569 "note-details.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 113 "/run/build/folks/folks/note-details.vala"
	return self ? g_object_ref (self) : NULL;
#line 578 "note-details.c"
}


static void
folks_note_details_real_change_notes (FolksNoteDetails* self,
                                      GeeSet* notes,
                                      GAsyncReadyCallback _callback_,
                                      gpointer _user_data_)
{
	FolksNoteDetailsChangeNotesData* _data_;
	FolksNoteDetails* _tmp0_;
	GeeSet* _tmp1_;
#line 113 "/run/build/folks/folks/note-details.vala"
	_data_ = g_slice_new0 (FolksNoteDetailsChangeNotesData);
#line 113 "/run/build/folks/folks/note-details.vala"
	_data_->_callback_ = _callback_;
#line 113 "/run/build/folks/folks/note-details.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_note_details_real_change_notes_async_ready_wrapper, _user_data_);
#line 113 "/run/build/folks/folks/note-details.vala"
	if (_callback_ == NULL) {
#line 113 "/run/build/folks/folks/note-details.vala"
		_data_->_task_complete_ = TRUE;
#line 601 "note-details.c"
	}
#line 113 "/run/build/folks/folks/note-details.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_note_details_real_change_notes_data_free);
#line 113 "/run/build/folks/folks/note-details.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 113 "/run/build/folks/folks/note-details.vala"
	_data_->self = _tmp0_;
#line 113 "/run/build/folks/folks/note-details.vala"
	_tmp1_ = _g_object_ref0 (notes);
#line 113 "/run/build/folks/folks/note-details.vala"
	_g_object_unref0 (_data_->notes);
#line 113 "/run/build/folks/folks/note-details.vala"
	_data_->notes = _tmp1_;
#line 113 "/run/build/folks/folks/note-details.vala"
	folks_note_details_real_change_notes_co (_data_);
#line 617 "note-details.c"
}


static void
folks_note_details_real_change_notes_finish (FolksNoteDetails* self,
                                             GAsyncResult* _res_,
                                             GError** error)
{
	FolksNoteDetailsChangeNotesData* _data_;
#line 113 "/run/build/folks/folks/note-details.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 113 "/run/build/folks/folks/note-details.vala"
	if (NULL == _data_) {
#line 113 "/run/build/folks/folks/note-details.vala"
		return;
#line 633 "note-details.c"
	}
}


/**
   * Change the contact's notes.
   *
   * It's preferred to call this rather than setting {@link NoteDetails.notes}
   * directly, as this method gives error notification and will only return once
   * the notes have been written to the relevant backing store (or the
   * operation's failed).
   *
   * @param notes the set of notes
   * @throws PropertyError if setting the notes failed
   * @since 0.6.2
   */
static gboolean
folks_note_details_real_change_notes_co (FolksNoteDetailsChangeNotesData* _data_)
{
#line 134 "/run/build/folks/folks/note-details.vala"
	switch (_data_->_state_) {
#line 134 "/run/build/folks/folks/note-details.vala"
		case 0:
#line 657 "note-details.c"
		goto _state_0;
		default:
#line 134 "/run/build/folks/folks/note-details.vala"
		g_assert_not_reached ();
#line 662 "note-details.c"
	}
	_state_0:
#line 138 "/run/build/folks/folks/note-details.vala"
	_data_->_tmp0_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_NOT_WRITEABLE, _ ("Notes are not writeable on this contact."));
#line 138 "/run/build/folks/folks/note-details.vala"
	_data_->_inner_error_ = _data_->_tmp0_;
#line 138 "/run/build/folks/folks/note-details.vala"
	if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 138 "/run/build/folks/folks/note-details.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 138 "/run/build/folks/folks/note-details.vala"
		g_object_unref (_data_->_async_result);
#line 138 "/run/build/folks/folks/note-details.vala"
		return FALSE;
#line 677 "note-details.c"
	} else {
#line 138 "/run/build/folks/folks/note-details.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 138 "/run/build/folks/folks/note-details.vala"
		g_clear_error (&_data_->_inner_error_);
#line 138 "/run/build/folks/folks/note-details.vala"
		g_object_unref (_data_->_async_result);
#line 138 "/run/build/folks/folks/note-details.vala"
		return FALSE;
#line 687 "note-details.c"
	}
#line 134 "/run/build/folks/folks/note-details.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 134 "/run/build/folks/folks/note-details.vala"
	if (_data_->_state_ != 0) {
#line 134 "/run/build/folks/folks/note-details.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 134 "/run/build/folks/folks/note-details.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 697 "note-details.c"
		}
	}
#line 134 "/run/build/folks/folks/note-details.vala"
	g_object_unref (_data_->_async_result);
#line 134 "/run/build/folks/folks/note-details.vala"
	return FALSE;
#line 704 "note-details.c"
}


void
folks_note_details_change_notes (FolksNoteDetails* self,
                                 GeeSet* notes,
                                 GAsyncReadyCallback _callback_,
                                 gpointer _user_data_)
{
#line 113 "/run/build/folks/folks/note-details.vala"
	FOLKS_NOTE_DETAILS_GET_INTERFACE (self)->change_notes (self, notes, _callback_, _user_data_);
#line 716 "note-details.c"
}


void
folks_note_details_change_notes_finish (FolksNoteDetails* self,
                                        GAsyncResult* _res_,
                                        GError** error)
{
#line 113 "/run/build/folks/folks/note-details.vala"
	FOLKS_NOTE_DETAILS_GET_INTERFACE (self)->change_notes_finish (self, _res_, error);
#line 727 "note-details.c"
}


GeeSet*
folks_note_details_get_notes (FolksNoteDetails* self)
{
#line 120 "/run/build/folks/folks/note-details.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 120 "/run/build/folks/folks/note-details.vala"
	return FOLKS_NOTE_DETAILS_GET_INTERFACE (self)->get_notes (self);
#line 738 "note-details.c"
}


void
folks_note_details_set_notes (FolksNoteDetails* self,
                              GeeSet* value)
{
#line 120 "/run/build/folks/folks/note-details.vala"
	g_return_if_fail (self != NULL);
#line 120 "/run/build/folks/folks/note-details.vala"
	FOLKS_NOTE_DETAILS_GET_INTERFACE (self)->set_notes (self, value);
#line 750 "note-details.c"
}


static void
folks_note_details_default_init (FolksNoteDetailsIface * iface)
{
	/**
	   * The notes about the contact.
	   *
	   * @since 0.5.1
	   */
#line 113 "/run/build/folks/folks/note-details.vala"
	g_object_interface_install_property (iface, g_param_spec_object ("notes", "notes", "notes", GEE_TYPE_SET, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 113 "/run/build/folks/folks/note-details.vala"
	iface->change_notes = folks_note_details_real_change_notes;
#line 113 "/run/build/folks/folks/note-details.vala"
	iface->change_notes_finish = folks_note_details_real_change_notes_finish;
#line 768 "note-details.c"
}


/**
 * This interface represents the list of notes associated
 * to a {@link Persona} and {@link Individual}.
 *
 * @since 0.4.0
 */
GType
folks_note_details_get_type (void)
{
	static volatile gsize folks_note_details_type_id__volatile = 0;
	if (g_once_init_enter (&folks_note_details_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksNoteDetailsIface), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_note_details_default_init, (GClassFinalizeFunc) NULL, NULL, 0, 0, (GInstanceInitFunc) NULL, NULL };
		GType folks_note_details_type_id;
		folks_note_details_type_id = g_type_register_static (G_TYPE_INTERFACE, "FolksNoteDetails", &g_define_type_info, 0);
		g_type_interface_add_prerequisite (folks_note_details_type_id, G_TYPE_OBJECT);
		g_once_init_leave (&folks_note_details_type_id__volatile, folks_note_details_type_id);
	}
	return folks_note_details_type_id__volatile;
}



