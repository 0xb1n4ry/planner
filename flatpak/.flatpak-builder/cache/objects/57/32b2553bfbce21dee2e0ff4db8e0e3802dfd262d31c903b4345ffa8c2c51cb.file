/* individual-aggregator.c generated by valac 0.40.11, the Vala compiler
 * generated from individual-aggregator.vala, do not modify */

/*
 * Copyright (C) 2010 Collabora Ltd.
 * Copyright (C) 2012, 2013 Philip Withnall
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Travis Reitter <travis.reitter@collabora.co.uk>
 *       Philip Withnall <philip@tecnocode.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>
#include <folks/small-set.h>
#include <gio/gio.h>
#include <folks-internal.h>
#include <glib/gi18n-lib.h>
#include <folks/small-set-internal.h>
#include <config.h>


#define FOLKS_TYPE_INDIVIDUAL_AGGREGATOR (folks_individual_aggregator_get_type ())
#define FOLKS_INDIVIDUAL_AGGREGATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, FolksIndividualAggregator))
#define FOLKS_INDIVIDUAL_AGGREGATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, FolksIndividualAggregatorClass))
#define FOLKS_IS_INDIVIDUAL_AGGREGATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_INDIVIDUAL_AGGREGATOR))
#define FOLKS_IS_INDIVIDUAL_AGGREGATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_INDIVIDUAL_AGGREGATOR))
#define FOLKS_INDIVIDUAL_AGGREGATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, FolksIndividualAggregatorClass))

typedef struct _FolksIndividualAggregator FolksIndividualAggregator;
typedef struct _FolksIndividualAggregatorClass FolksIndividualAggregatorClass;
typedef struct _FolksIndividualAggregatorPrivate FolksIndividualAggregatorPrivate;

#define FOLKS_TYPE_BACKEND_STORE (folks_backend_store_get_type ())
#define FOLKS_BACKEND_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_BACKEND_STORE, FolksBackendStore))
#define FOLKS_BACKEND_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_BACKEND_STORE, FolksBackendStoreClass))
#define FOLKS_IS_BACKEND_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_BACKEND_STORE))
#define FOLKS_IS_BACKEND_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_BACKEND_STORE))
#define FOLKS_BACKEND_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_BACKEND_STORE, FolksBackendStoreClass))

typedef struct _FolksBackendStore FolksBackendStore;
typedef struct _FolksBackendStoreClass FolksBackendStoreClass;

#define FOLKS_TYPE_PERSONA_STORE (folks_persona_store_get_type ())
#define FOLKS_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_PERSONA_STORE, FolksPersonaStore))
#define FOLKS_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_PERSONA_STORE, FolksPersonaStoreClass))
#define FOLKS_IS_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_PERSONA_STORE))
#define FOLKS_IS_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_PERSONA_STORE))
#define FOLKS_PERSONA_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_PERSONA_STORE, FolksPersonaStoreClass))

typedef struct _FolksPersonaStore FolksPersonaStore;
typedef struct _FolksPersonaStoreClass FolksPersonaStoreClass;

#define FOLKS_TYPE_BACKEND (folks_backend_get_type ())
#define FOLKS_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_BACKEND, FolksBackend))
#define FOLKS_BACKEND_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_BACKEND, FolksBackendClass))
#define FOLKS_IS_BACKEND(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_BACKEND))
#define FOLKS_IS_BACKEND_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_BACKEND))
#define FOLKS_BACKEND_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_BACKEND, FolksBackendClass))

typedef struct _FolksBackend FolksBackend;
typedef struct _FolksBackendClass FolksBackendClass;

#define FOLKS_TYPE_INDIVIDUAL (folks_individual_get_type ())
#define FOLKS_INDIVIDUAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_INDIVIDUAL, FolksIndividual))
#define FOLKS_INDIVIDUAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_INDIVIDUAL, FolksIndividualClass))
#define FOLKS_IS_INDIVIDUAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_INDIVIDUAL))
#define FOLKS_IS_INDIVIDUAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_INDIVIDUAL))
#define FOLKS_INDIVIDUAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_INDIVIDUAL, FolksIndividualClass))

typedef struct _FolksIndividual FolksIndividual;
typedef struct _FolksIndividualClass FolksIndividualClass;

#define FOLKS_TYPE_DEBUG (folks_debug_get_type ())
#define FOLKS_DEBUG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_DEBUG, FolksDebug))
#define FOLKS_DEBUG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_DEBUG, FolksDebugClass))
#define FOLKS_IS_DEBUG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_DEBUG))
#define FOLKS_IS_DEBUG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_DEBUG))
#define FOLKS_DEBUG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_DEBUG, FolksDebugClass))

typedef struct _FolksDebug FolksDebug;
typedef struct _FolksDebugClass FolksDebugClass;
enum  {
	FOLKS_INDIVIDUAL_AGGREGATOR_0_PROPERTY,
	FOLKS_INDIVIDUAL_AGGREGATOR_IS_PREPARED_PROPERTY,
	FOLKS_INDIVIDUAL_AGGREGATOR_IS_QUIESCENT_PROPERTY,
	FOLKS_INDIVIDUAL_AGGREGATOR_PRIMARY_STORE_PROPERTY,
	FOLKS_INDIVIDUAL_AGGREGATOR_BACKEND_STORE_PROPERTY,
	FOLKS_INDIVIDUAL_AGGREGATOR_INDIVIDUALS_PROPERTY,
	FOLKS_INDIVIDUAL_AGGREGATOR_USER_PROPERTY,
	FOLKS_INDIVIDUAL_AGGREGATOR_NUM_PROPERTIES
};
static GParamSpec* folks_individual_aggregator_properties[FOLKS_INDIVIDUAL_AGGREGATOR_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

#define FOLKS_TYPE_TRUST_LEVEL (folks_trust_level_get_type ())

#define FOLKS_TYPE_PERSONA (folks_persona_get_type ())
#define FOLKS_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_PERSONA, FolksPersona))
#define FOLKS_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_PERSONA, FolksPersonaClass))
#define FOLKS_IS_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_PERSONA))
#define FOLKS_IS_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_PERSONA))
#define FOLKS_PERSONA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_PERSONA, FolksPersonaClass))

typedef struct _FolksPersona FolksPersona;
typedef struct _FolksPersonaClass FolksPersonaClass;
typedef struct _FolksIndividualAggregatorPrepareData FolksIndividualAggregatorPrepareData;
typedef struct _FolksIndividualAggregatorUnprepareData FolksIndividualAggregatorUnprepareData;

#define FOLKS_TYPE_MATCH_RESULT (folks_match_result_get_type ())

#define FOLKS_TYPE_POTENTIAL_MATCH (folks_potential_match_get_type ())
#define FOLKS_POTENTIAL_MATCH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_POTENTIAL_MATCH, FolksPotentialMatch))
#define FOLKS_POTENTIAL_MATCH_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_POTENTIAL_MATCH, FolksPotentialMatchClass))
#define FOLKS_IS_POTENTIAL_MATCH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_POTENTIAL_MATCH))
#define FOLKS_IS_POTENTIAL_MATCH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_POTENTIAL_MATCH))
#define FOLKS_POTENTIAL_MATCH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_POTENTIAL_MATCH, FolksPotentialMatchClass))

typedef struct _FolksPotentialMatch FolksPotentialMatch;
typedef struct _FolksPotentialMatchClass FolksPotentialMatchClass;
typedef struct _Block4Data Block4Data;

#define FOLKS_GROUP_DETAILS_TYPE_CHANGE_REASON (folks_group_details_change_reason_get_type ())
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _Block5Data Block5Data;

#define FOLKS_TYPE_PERSONA_STORE_TRUST (folks_persona_store_trust_get_type ())
typedef struct _Block6Data Block6Data;

#define FOLKS_TYPE_ANTI_LINKABLE (folks_anti_linkable_get_type ())
#define FOLKS_ANTI_LINKABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_ANTI_LINKABLE, FolksAntiLinkable))
#define FOLKS_IS_ANTI_LINKABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_ANTI_LINKABLE))
#define FOLKS_ANTI_LINKABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_ANTI_LINKABLE, FolksAntiLinkableIface))

typedef struct _FolksAntiLinkable FolksAntiLinkable;
typedef struct _FolksAntiLinkableIface FolksAntiLinkableIface;
#define _g_ptr_array_unref0(var) ((var == NULL) ? NULL : (var = (g_ptr_array_unref (var), NULL)))
typedef struct _Block7Data Block7Data;
typedef struct _FolksIndividualAggregatorAddPersonaFromDetailsData FolksIndividualAggregatorAddPersonaFromDetailsData;
typedef struct _Block8Data Block8Data;
typedef struct _FolksIndividualAggregatorRemoveIndividualData FolksIndividualAggregatorRemoveIndividualData;
typedef struct _FolksIndividualAggregatorRemovePersonaData FolksIndividualAggregatorRemovePersonaData;
typedef struct _FolksIndividualAggregatorLinkPersonasData FolksIndividualAggregatorLinkPersonasData;

#define FOLKS_TYPE_ABSTRACT_FIELD_DETAILS (folks_abstract_field_details_get_type ())
#define FOLKS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetails))
#define FOLKS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_IS_ABSTRACT_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS))
#define FOLKS_ABSTRACT_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_ABSTRACT_FIELD_DETAILS, FolksAbstractFieldDetailsClass))

typedef struct _FolksAbstractFieldDetails FolksAbstractFieldDetails;
typedef struct _FolksAbstractFieldDetailsClass FolksAbstractFieldDetailsClass;

#define FOLKS_TYPE_IM_FIELD_DETAILS (folks_im_field_details_get_type ())
#define FOLKS_IM_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_IM_FIELD_DETAILS, FolksImFieldDetails))
#define FOLKS_IM_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_IM_FIELD_DETAILS, FolksImFieldDetailsClass))
#define FOLKS_IS_IM_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_IM_FIELD_DETAILS))
#define FOLKS_IS_IM_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_IM_FIELD_DETAILS))
#define FOLKS_IM_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_IM_FIELD_DETAILS, FolksImFieldDetailsClass))

typedef struct _FolksImFieldDetails FolksImFieldDetails;
typedef struct _FolksImFieldDetailsClass FolksImFieldDetailsClass;

#define FOLKS_TYPE_WEB_SERVICE_FIELD_DETAILS (folks_web_service_field_details_get_type ())
#define FOLKS_WEB_SERVICE_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_WEB_SERVICE_FIELD_DETAILS, FolksWebServiceFieldDetails))
#define FOLKS_WEB_SERVICE_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), FOLKS_TYPE_WEB_SERVICE_FIELD_DETAILS, FolksWebServiceFieldDetailsClass))
#define FOLKS_IS_WEB_SERVICE_FIELD_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_WEB_SERVICE_FIELD_DETAILS))
#define FOLKS_IS_WEB_SERVICE_FIELD_DETAILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), FOLKS_TYPE_WEB_SERVICE_FIELD_DETAILS))
#define FOLKS_WEB_SERVICE_FIELD_DETAILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), FOLKS_TYPE_WEB_SERVICE_FIELD_DETAILS, FolksWebServiceFieldDetailsClass))

typedef struct _FolksWebServiceFieldDetails FolksWebServiceFieldDetails;
typedef struct _FolksWebServiceFieldDetailsClass FolksWebServiceFieldDetailsClass;

#define FOLKS_TYPE_IM_DETAILS (folks_im_details_get_type ())
#define FOLKS_IM_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_IM_DETAILS, FolksImDetails))
#define FOLKS_IS_IM_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_IM_DETAILS))
#define FOLKS_IM_DETAILS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_IM_DETAILS, FolksImDetailsIface))

typedef struct _FolksImDetails FolksImDetails;
typedef struct _FolksImDetailsIface FolksImDetailsIface;

#define FOLKS_TYPE_WEB_SERVICE_DETAILS (folks_web_service_details_get_type ())
#define FOLKS_WEB_SERVICE_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_WEB_SERVICE_DETAILS, FolksWebServiceDetails))
#define FOLKS_IS_WEB_SERVICE_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_WEB_SERVICE_DETAILS))
#define FOLKS_WEB_SERVICE_DETAILS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_WEB_SERVICE_DETAILS, FolksWebServiceDetailsIface))

typedef struct _FolksWebServiceDetails FolksWebServiceDetails;
typedef struct _FolksWebServiceDetailsIface FolksWebServiceDetailsIface;

#define FOLKS_TYPE_LOCAL_ID_DETAILS (folks_local_id_details_get_type ())
#define FOLKS_LOCAL_ID_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FOLKS_TYPE_LOCAL_ID_DETAILS, FolksLocalIdDetails))
#define FOLKS_IS_LOCAL_ID_DETAILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FOLKS_TYPE_LOCAL_ID_DETAILS))
#define FOLKS_LOCAL_ID_DETAILS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FOLKS_TYPE_LOCAL_ID_DETAILS, FolksLocalIdDetailsIface))

typedef struct _FolksLocalIdDetails FolksLocalIdDetails;
typedef struct _FolksLocalIdDetailsIface FolksLocalIdDetailsIface;

#define FOLKS_TYPE_PERSONA_DETAIL (folks_persona_detail_get_type ())
typedef struct _FolksIndividualAggregatorUnlinkIndividualData FolksIndividualAggregatorUnlinkIndividualData;
typedef struct _FolksIndividualAggregatorEnsureIndividualPropertyWriteableData FolksIndividualAggregatorEnsureIndividualPropertyWriteableData;
typedef struct _FolksIndividualAggregatorEnsurePersonasPropertyWriteableData FolksIndividualAggregatorEnsurePersonasPropertyWriteableData;
typedef struct _FolksIndividualAggregatorLookUpIndividualData FolksIndividualAggregatorLookUpIndividualData;
enum  {
	FOLKS_INDIVIDUAL_AGGREGATOR_INDIVIDUALS_CHANGED_SIGNAL,
	FOLKS_INDIVIDUAL_AGGREGATOR_INDIVIDUALS_CHANGED_DETAILED_SIGNAL,
	FOLKS_INDIVIDUAL_AGGREGATOR_NUM_SIGNALS
};
static guint folks_individual_aggregator_signals[FOLKS_INDIVIDUAL_AGGREGATOR_NUM_SIGNALS] = {0};
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

/**
 * Errors from {@link IndividualAggregator}s.
 */
typedef enum  {
	FOLKS_INDIVIDUAL_AGGREGATOR_ERROR_ADD_FAILED,
	FOLKS_INDIVIDUAL_AGGREGATOR_ERROR_NO_WRITEABLE_STORE,
	FOLKS_INDIVIDUAL_AGGREGATOR_ERROR_STORE_OFFLINE,
	FOLKS_INDIVIDUAL_AGGREGATOR_ERROR_PROPERTY_NOT_WRITEABLE,
	FOLKS_INDIVIDUAL_AGGREGATOR_ERROR_NO_PRIMARY_STORE
} FolksIndividualAggregatorError;
#define FOLKS_INDIVIDUAL_AGGREGATOR_ERROR folks_individual_aggregator_error_quark ()
struct _FolksIndividualAggregator {
	GObject parent_instance;
	FolksIndividualAggregatorPrivate * priv;
};

struct _FolksIndividualAggregatorClass {
	GObjectClass parent_class;
};

struct _FolksIndividualAggregatorPrivate {
	FolksBackendStore* _backend_store;
	GeeHashMap* _stores;
	FolksPersonaStore* _primary_store;
	FolksSmallSet* _backends;
	GSettings* _primary_store_setting;
	GHashTable* _link_map;
	gboolean _linking_enabled;
	gboolean _is_prepared;
	gboolean _prepare_pending;
	FolksDebug* _debug;
	gchar* _configured_primary_store_type_id;
	gchar* _configured_primary_store_id;
	guint _non_quiescent_persona_store_count;
	guint _non_quiescent_backend_count;
	gboolean _is_quiescent;
	guint _quiescent_timeout_id;
	gboolean _user_configured_primary_store;
	GeeMap* _individuals;
	GeeMap* _individuals_ro;
	FolksIndividual* _user;
};

typedef enum  {
	FOLKS_TRUST_LEVEL_NONE,
	FOLKS_TRUST_LEVEL_PERSONAS
} FolksTrustLevel;

struct _FolksIndividualAggregatorPrepareData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksIndividualAggregator* self;
	gboolean _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	guint _tmp3_;
	FolksBackendStore* _tmp4_;
	GeeCollection* backends;
	FolksBackendStore* _tmp5_;
	GeeMap* _tmp6_;
	GeeMap* _tmp7_;
	GeeCollection* _tmp8_;
	GeeCollection* _tmp9_;
	GeeIterator* _backend_it;
	GeeCollection* _tmp10_;
	GeeIterator* _tmp11_;
	GeeIterator* _tmp12_;
	FolksBackend* backend;
	GeeIterator* _tmp13_;
	gpointer _tmp14_;
	FolksBackendStore* _tmp15_;
	FolksBackend* _tmp16_;
	FolksBackendStore* _tmp17_;
	guint _tmp18_;
	gboolean _tmp19_;
	GError * _inner_error_;
};

struct _FolksIndividualAggregatorUnprepareData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksIndividualAggregator* self;
	gboolean _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	GeeIterator* _p_it;
	GeeHashMap* _tmp3_;
	GeeCollection* _tmp4_;
	GeeCollection* _tmp5_;
	GeeCollection* _tmp6_;
	GeeIterator* _tmp7_;
	GeeIterator* _tmp8_;
	GeeIterator* _tmp9_;
	FolksPersonaStore* p;
	GeeIterator* _tmp10_;
	gpointer _tmp11_;
	FolksPersonaStore* _tmp12_;
	GError * _inner_error_;
};

typedef enum  {
	FOLKS_MATCH_RESULT_NONE = -1,
	FOLKS_MATCH_RESULT_VERY_LOW = 0,
	FOLKS_MATCH_RESULT_LOW = 1,
	FOLKS_MATCH_RESULT_MEDIUM = 2,
	FOLKS_MATCH_RESULT_HIGH = 3,
	FOLKS_MATCH_RESULT_VERY_HIGH = 4,
	FOLKS_MATCH_RESULT_MIN = FOLKS_MATCH_RESULT_NONE,
	FOLKS_MATCH_RESULT_MAX = FOLKS_MATCH_RESULT_VERY_HIGH
} FolksMatchResult;

struct _Block4Data {
	int _ref_count_;
	FolksIndividualAggregator* self;
	gchar* store_id;
	FolksPersonaStore* store;
};

typedef enum  {
	FOLKS_GROUP_DETAILS_CHANGE_REASON_NONE = 0,
	FOLKS_GROUP_DETAILS_CHANGE_REASON_OFFLINE = 1,
	FOLKS_GROUP_DETAILS_CHANGE_REASON_KICKED = 2,
	FOLKS_GROUP_DETAILS_CHANGE_REASON_BUSY = 3,
	FOLKS_GROUP_DETAILS_CHANGE_REASON_INVITED = 4,
	FOLKS_GROUP_DETAILS_CHANGE_REASON_BANNED = 5,
	FOLKS_GROUP_DETAILS_CHANGE_REASON_ERROR = 6,
	FOLKS_GROUP_DETAILS_CHANGE_REASON_INVALID_MEMBER = 7,
	FOLKS_GROUP_DETAILS_CHANGE_REASON_NO_ANSWER = 8,
	FOLKS_GROUP_DETAILS_CHANGE_REASON_RENAMED = 9,
	FOLKS_GROUP_DETAILS_CHANGE_REASON_PERMISSION_DENIED = 10,
	FOLKS_GROUP_DETAILS_CHANGE_REASON_SEPARATED = 11
} FolksGroupDetailsChangeReason;

struct _Block5Data {
	int _ref_count_;
	FolksIndividualAggregator* self;
	FolksPersona* persona;
	GeeHashSet* candidate_inds;
};

typedef enum  {
	FOLKS_PERSONA_STORE_TRUST_NONE,
	FOLKS_PERSONA_STORE_TRUST_PARTIAL,
	FOLKS_PERSONA_STORE_TRUST_FULL
} FolksPersonaStoreTrust;

struct _Block6Data {
	int _ref_count_;
	Block5Data * _data5_;
	const gchar* prop_name;
};

typedef void (*FolksPersonaLinkablePropertyCallback) (const gchar* link, gpointer user_data);
typedef enum  {
	FOLKS_PROPERTY_ERROR_NOT_WRITEABLE,
	FOLKS_PROPERTY_ERROR_INVALID_VALUE,
	FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR,
	FOLKS_PROPERTY_ERROR_UNAVAILABLE
} FolksPropertyError;
#define FOLKS_PROPERTY_ERROR folks_property_error_quark ()
struct _FolksAntiLinkableIface {
	GTypeInterface parent_iface;
	void (*change_anti_links) (FolksAntiLinkable* self, GeeSet* anti_links, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_anti_links_finish) (FolksAntiLinkable* self, GAsyncResult* _res_, GError** error);
	GeeSet* (*get_anti_links) (FolksAntiLinkable* self);
	void (*set_anti_links) (FolksAntiLinkable* self, GeeSet* value);
};

struct _Block7Data {
	int _ref_count_;
	FolksIndividualAggregator* self;
	FolksIndividual* individual;
};

typedef enum  {
	FOLKS_PERSONA_STORE_ERROR_INVALID_ARGUMENT,
	FOLKS_PERSONA_STORE_ERROR_CREATE_FAILED,
	FOLKS_PERSONA_STORE_ERROR_UNSUPPORTED_ON_USER,
	FOLKS_PERSONA_STORE_ERROR_STORE_OFFLINE,
	FOLKS_PERSONA_STORE_ERROR_READ_ONLY,
	FOLKS_PERSONA_STORE_ERROR_PERMISSION_DENIED,
	FOLKS_PERSONA_STORE_ERROR_REMOVE_FAILED,
	FOLKS_PERSONA_STORE_ERROR_UNSUPPORTED_ON_NON_USER
} FolksPersonaStoreError;
#define FOLKS_PERSONA_STORE_ERROR folks_persona_store_error_quark ()
struct _FolksIndividualAggregatorAddPersonaFromDetailsData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksIndividualAggregator* self;
	FolksIndividual* parent;
	FolksPersonaStore* persona_store;
	GHashTable* details;
	FolksPersona* result;
	FolksPersona* persona;
	GHashTable* details_copy;
	GHashTable* _tmp0_;
	FolksPersona* _tmp1_;
	GHashTable* _tmp2_;
	FolksPersona* _tmp3_;
	FolksPersona* _tmp4_;
	GError* e;
	GError* _tmp5_;
	GError* _tmp6_;
	const gchar* _tmp7_;
	GError* _tmp8_;
	gchar* full_id;
	const gchar* _tmp9_;
	const gchar* _tmp10_;
	const gchar* _tmp11_;
	const gchar* _tmp12_;
	gchar* _tmp13_;
	const gchar* _tmp14_;
	GError* _tmp15_;
	const gchar* _tmp16_;
	GError* _tmp17_;
	gboolean _tmp18_;
	FolksPersona* _tmp19_;
	GeeSet* _tmp20_;
	GeeSet* _tmp21_;
	FolksPersona* _tmp22_;
	GError * _inner_error_;
};

struct _Block8Data {
	int _ref_count_;
	FolksIndividualAggregator* self;
	GHashTable* retval;
};

struct _FolksIndividualAggregatorRemoveIndividualData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksIndividualAggregator* self;
	FolksIndividual* individual;
	FolksSmallSet* personas;
	GeeSet* _tmp0_;
	GeeSet* _tmp1_;
	FolksSmallSet* _tmp2_;
	FolksSmallSet* _persona_list;
	FolksSmallSet* _tmp3_;
	FolksSmallSet* _tmp4_;
	gint _persona_size;
	FolksSmallSet* _tmp5_;
	gint _tmp6_;
	gint _tmp7_;
	gint _persona_index;
	gint _tmp8_;
	gint _tmp9_;
	gint _tmp10_;
	FolksPersona* persona;
	FolksSmallSet* _tmp11_;
	gint _tmp12_;
	gconstpointer _tmp13_;
	FolksPersona* _tmp14_;
	FolksPersona* _tmp15_;
	FolksPersonaStore* _tmp16_;
	FolksPersonaStore* _tmp17_;
	FolksPersona* _tmp18_;
	GError * _inner_error_;
};

struct _FolksIndividualAggregatorRemovePersonaData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksIndividualAggregator* self;
	FolksPersona* persona;
	FolksPersonaStore* _tmp0_;
	FolksPersonaStore* _tmp1_;
	GError * _inner_error_;
};

struct _FolksIndividualAggregatorLinkPersonasData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksIndividualAggregator* self;
	GeeSet* personas;
	FolksPersonaStore* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	const gchar* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
	gchar* _tmp12_;
	GError* _tmp13_;
	GError* _tmp14_;
	gint _tmp15_;
	gint _tmp16_;
	gboolean _tmp17_;
	GeeIterator* _p_it;
	GeeIterator* _tmp18_;
	GeeIterator* _tmp19_;
	FolksPersona* p;
	GeeIterator* _tmp20_;
	gpointer _tmp21_;
	FolksAntiLinkable* al;
	FolksPersona* _tmp22_;
	FolksAntiLinkable* _tmp23_;
	FolksAntiLinkable* _tmp24_;
	FolksAntiLinkable* _tmp25_;
	GError* e;
	GError* _tmp26_;
	FolksPersonaStore* _tmp27_;
	const gchar* _tmp28_;
	const gchar* _tmp29_;
	const gchar* _tmp30_;
	GHashTable* details;
	GHashTable* _tmp31_;
	FolksPersonaStore* _tmp32_;
	GHashTable* _tmp33_;
	FolksPersona* _tmp34_;
	FolksPersona* _tmp35_;
	GError * _inner_error_;
};

struct _FolksImDetailsIface {
	GTypeInterface parent_iface;
	void (*change_im_addresses) (FolksImDetails* self, GeeMultiMap* im_addresses, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_im_addresses_finish) (FolksImDetails* self, GAsyncResult* _res_, GError** error);
	GeeMultiMap* (*get_im_addresses) (FolksImDetails* self);
	void (*set_im_addresses) (FolksImDetails* self, GeeMultiMap* value);
};

struct _FolksWebServiceDetailsIface {
	GTypeInterface parent_iface;
	void (*change_web_service_addresses) (FolksWebServiceDetails* self, GeeMultiMap* web_service_addresses, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_web_service_addresses_finish) (FolksWebServiceDetails* self, GAsyncResult* _res_, GError** error);
	GeeMultiMap* (*get_web_service_addresses) (FolksWebServiceDetails* self);
	void (*set_web_service_addresses) (FolksWebServiceDetails* self, GeeMultiMap* value);
};

struct _FolksLocalIdDetailsIface {
	GTypeInterface parent_iface;
	void (*change_local_ids) (FolksLocalIdDetails* self, GeeSet* local_ids, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_local_ids_finish) (FolksLocalIdDetails* self, GAsyncResult* _res_, GError** error);
	GeeSet* (*get_local_ids) (FolksLocalIdDetails* self);
	void (*set_local_ids) (FolksLocalIdDetails* self, GeeSet* value);
};

typedef enum  {
	FOLKS_PERSONA_DETAIL_INVALID = -1,
	FOLKS_PERSONA_DETAIL_ALIAS = 0,
	FOLKS_PERSONA_DETAIL_AVATAR,
	FOLKS_PERSONA_DETAIL_BIRTHDAY,
	FOLKS_PERSONA_DETAIL_EMAIL_ADDRESSES,
	FOLKS_PERSONA_DETAIL_FULL_NAME,
	FOLKS_PERSONA_DETAIL_GENDER,
	FOLKS_PERSONA_DETAIL_IM_ADDRESSES,
	FOLKS_PERSONA_DETAIL_IS_FAVOURITE,
	FOLKS_PERSONA_DETAIL_LOCAL_IDS,
	FOLKS_PERSONA_DETAIL_LOCATION,
	FOLKS_PERSONA_DETAIL_NICKNAME,
	FOLKS_PERSONA_DETAIL_NOTES,
	FOLKS_PERSONA_DETAIL_PHONE_NUMBERS,
	FOLKS_PERSONA_DETAIL_POSTAL_ADDRESSES,
	FOLKS_PERSONA_DETAIL_ROLES,
	FOLKS_PERSONA_DETAIL_STRUCTURED_NAME,
	FOLKS_PERSONA_DETAIL_URLS,
	FOLKS_PERSONA_DETAIL_WEB_SERVICE_ADDRESSES,
	FOLKS_PERSONA_DETAIL_GROUPS,
	FOLKS_PERSONA_DETAIL_IM_INTERACTION_COUNT,
	FOLKS_PERSONA_DETAIL_LAST_IM_INTERACTION_DATETIME,
	FOLKS_PERSONA_DETAIL_CALL_INTERACTION_COUNT,
	FOLKS_PERSONA_DETAIL_LAST_CALL_INTERACTION_DATETIME,
	FOLKS_PERSONA_DETAIL_ANTI_LINKS,
	FOLKS_PERSONA_DETAIL_EXTENDED_INFO
} FolksPersonaDetail;

struct _FolksIndividualAggregatorUnlinkIndividualData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksIndividualAggregator* self;
	FolksIndividual* individual;
	gboolean _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	FolksSmallSet* individual_personas;
	GeeSet* _tmp5_;
	GeeSet* _tmp6_;
	FolksSmallSet* _tmp7_;
	FolksSmallSet* _pers_list;
	FolksSmallSet* _tmp8_;
	FolksSmallSet* _tmp9_;
	gint _pers_size;
	FolksSmallSet* _tmp10_;
	gint _tmp11_;
	gint _tmp12_;
	gint _pers_index;
	gint _tmp13_;
	gint _tmp14_;
	gint _tmp15_;
	FolksPersona* pers;
	FolksSmallSet* _tmp16_;
	gint _tmp17_;
	gconstpointer _tmp18_;
	FolksPersona* _tmp19_;
	FolksSmallSet* personas;
	FolksSmallSet* _tmp20_;
	FolksSmallSet* _tmp21_;
	FolksPersona* _tmp22_;
	FolksPersona* _tmp23_;
	const gchar* _tmp24_;
	const gchar* _tmp25_;
	FolksPersona* _tmp26_;
	FolksPersona* writeable_persona;
	FolksSmallSet* _tmp27_;
	FolksPersona* _tmp28_;
	FolksPersona* _tmp29_;
	const gchar* _tmp30_;
	const gchar* _tmp31_;
	FolksPersona* _tmp32_;
	FolksSmallSet* anti_link_personas;
	FolksSmallSet* _tmp33_;
	FolksSmallSet* _tmp34_;
	FolksSmallSet* _tmp35_;
	FolksPersona* _tmp36_;
	FolksAntiLinkable* al;
	FolksPersona* _tmp37_;
	FolksAntiLinkable* _tmp38_;
	FolksAntiLinkable* _tmp39_;
	FolksAntiLinkable* _tmp40_;
	FolksSmallSet* _tmp41_;
	GError* e1;
	GError* _tmp42_;
	const gchar* _tmp43_;
	GError * _inner_error_;
};

struct _FolksIndividualAggregatorEnsureIndividualPropertyWriteableData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksIndividualAggregator* self;
	FolksIndividual* individual;
	gchar* property_name;
	FolksPersona* result;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	FolksPersona* p;
	GeeSet* _tmp2_;
	GeeSet* _tmp3_;
	FolksPersona* _tmp4_;
	GError * _inner_error_;
};

struct _FolksIndividualAggregatorEnsurePersonasPropertyWriteableData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksIndividualAggregator* self;
	GeeSet* personas;
	gchar* property_name;
	FolksPersona* result;
	GeeIterator* _p1_it;
	GeeIterator* _tmp0_;
	GeeIterator* _tmp1_;
	FolksPersona* p1;
	GeeIterator* _tmp2_;
	gpointer _tmp3_;
	FolksPersona* _tmp4_;
	gchar** _tmp5_;
	gint _tmp5__length1;
	gchar** _tmp6_;
	gint _tmp6__length1;
	FolksPersona* _tmp7_;
	const gchar* _tmp8_;
	const gchar* _tmp9_;
	GHashTable* details;
	GHashTable* _tmp10_;
	FolksPersona* new_persona;
	gboolean _tmp11_;
	FolksPersonaStore* _tmp12_;
	FolksPersonaStore* _tmp13_;
	gchar** _tmp14_;
	gint _tmp14__length1;
	gchar** _tmp15_;
	gint _tmp15__length1;
	FolksPersona* _tmp16_;
	FolksPersonaStore* _tmp17_;
	GHashTable* _tmp18_;
	FolksPersona* _tmp19_;
	FolksPersona* _tmp20_;
	GError* e1;
	FolksPersona* _tmp21_;
	GeeIterator* _s_it;
	GeeHashMap* _tmp22_;
	GeeCollection* _tmp23_;
	GeeCollection* _tmp24_;
	GeeCollection* _tmp25_;
	GeeIterator* _tmp26_;
	GeeIterator* _tmp27_;
	GeeIterator* _tmp28_;
	FolksPersonaStore* s;
	GeeIterator* _tmp29_;
	gpointer _tmp30_;
	gboolean _tmp31_;
	FolksPersonaStore* _tmp32_;
	FolksPersonaStore* _tmp33_;
	FolksPersonaStore* _tmp34_;
	gchar** _tmp35_;
	gint _tmp35__length1;
	gchar** _tmp36_;
	gint _tmp36__length1;
	FolksPersonaStore* _tmp37_;
	const gchar* _tmp38_;
	const gchar* _tmp39_;
	FolksPersona* _tmp40_;
	FolksPersonaStore* _tmp41_;
	GHashTable* _tmp42_;
	FolksPersona* _tmp43_;
	FolksPersona* _tmp44_;
	GError* e2;
	gboolean _tmp45_;
	FolksPersona* _tmp46_;
	FolksPersonaStore* _tmp47_;
	gchar* _tmp48_;
	gchar* _tmp49_;
	gchar* _tmp50_;
	gchar* _tmp51_;
	gchar* _tmp52_;
	gchar* _tmp53_;
	gchar* _tmp54_;
	gchar* _tmp55_;
	const gchar* _tmp56_;
	const gchar* _tmp57_;
	gchar* _tmp58_;
	gchar* _tmp59_;
	GError* _tmp60_;
	GError* _tmp61_;
	FolksPersona* _tmp62_;
	GError* _tmp63_;
	FolksPersona* _tmp64_;
	FolksPersona* _tmp65_;
	GError * _inner_error_;
};

struct _FolksIndividualAggregatorLookUpIndividualData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	FolksIndividualAggregator* self;
	gchar* id;
	FolksIndividual* result;
	GeeMap* _tmp0_;
	gpointer _tmp1_;
	GError * _inner_error_;
};


static gpointer folks_individual_aggregator_parent_class = NULL;
static FolksIndividualAggregator* folks_individual_aggregator__instance;
static FolksIndividualAggregator* folks_individual_aggregator__instance = NULL;

GQuark folks_individual_aggregator_error_quark (void);
GType folks_individual_aggregator_get_type (void) G_GNUC_CONST;
GType folks_backend_store_get_type (void) G_GNUC_CONST;
GType folks_persona_store_get_type (void) G_GNUC_CONST;
GType folks_backend_get_type (void) G_GNUC_CONST;
GType folks_individual_get_type (void) G_GNUC_CONST;
GType folks_debug_get_type (void) G_GNUC_CONST;
#define FOLKS_INDIVIDUAL_AGGREGATOR_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, FolksIndividualAggregatorPrivate))
static void _folks_individual_aggregator_backend_available_cb (FolksIndividualAggregator* self,
                                                        FolksBackendStore* backend_store,
                                                        FolksBackend* backend);
static void __folks_individual_aggregator_backend_available_cb_folks_backend_store_backend_available (FolksBackendStore* _sender,
                                                                                               FolksBackend* backend,
                                                                                               gpointer self);
static void _folks_individual_aggregator_debug_print_status (FolksIndividualAggregator* self,
                                                      FolksDebug* debug);
static void __folks_individual_aggregator_debug_print_status_folks_debug_print_status (FolksDebug* _sender,
                                                                                gpointer self);
#define FOLKS_INDIVIDUAL_AGGREGATOR__FOLKS_GSETTINGS_SCHEMA "org.freedesktop.folks"
#define FOLKS_INDIVIDUAL_AGGREGATOR__PRIMARY_STORE_CONFIG_KEY "primary-store"
#define FOLKS_INDIVIDUAL_AGGREGATOR__QUIESCENT_TIMEOUT ((guint) 30)
FolksIndividualAggregator* folks_individual_aggregator_dup (void);
FolksIndividualAggregator* folks_individual_aggregator_new (void) G_GNUC_DEPRECATED;
FolksIndividualAggregator* folks_individual_aggregator_construct (GType object_type) G_GNUC_DEPRECATED;
FolksBackendStore* folks_backend_store_dup (void);
FolksIndividualAggregator* folks_individual_aggregator_dup_with_backend_store (FolksBackendStore* store);
FolksIndividualAggregator* folks_individual_aggregator_new_with_backend_store (FolksBackendStore* store) G_GNUC_DEPRECATED;
FolksIndividualAggregator* folks_individual_aggregator_construct_with_backend_store (GType object_type,
                                                                                     FolksBackendStore* store) G_GNUC_DEPRECATED;
static void _folks_individual_aggregator_primary_store_setting_changed_cb (FolksIndividualAggregator* self,
                                                                    GSettings* settings,
                                                                    const gchar* key);
static void _folks_individual_aggregator_configure_primary_store (FolksIndividualAggregator* self,
                                                           const gchar* store_config_ids);
static gchar* _folks_individual_aggregator_get_store_full_id (FolksIndividualAggregator* self,
                                                       const gchar* type_id,
                                                       const gchar* id);
static void _folks_individual_aggregator_set_primary_store (FolksIndividualAggregator* self,
                                                     FolksPersonaStore* store);
#define FOLKS_DEBUG_STATUS_LOG_DOMAIN "folks-status"
void folks_debug_print_heading (FolksDebug* self,
                                const gchar* domain,
                                GLogLevelFlags level,
                                const gchar* format,
                                ...) G_GNUC_PRINTF(4,5);
void folks_debug_print_key_value_pairs (FolksDebug* self,
                                        const gchar* domain,
                                        GLogLevelFlags level,
                                        ...);
void folks_debug_print_line (FolksDebug* self,
                             const gchar* domain,
                             GLogLevelFlags level,
                             const gchar* format,
                             ...) G_GNUC_PRINTF(4,5);
GeeMap* folks_individual_aggregator_get_individuals (FolksIndividualAggregator* self);
void folks_debug_indent (FolksDebug* self);
GType folks_trust_level_get_type (void) G_GNUC_CONST;
FolksTrustLevel folks_individual_get_trust_level (FolksIndividual* self);
gboolean folks_individual_get_is_user (FolksIndividual* self);
const gchar* folks_individual_get_id (FolksIndividual* self);
GType folks_persona_get_type (void) G_GNUC_CONST;
GeeSet* folks_individual_get_personas (FolksIndividual* self);
gboolean folks_persona_get_is_user (FolksPersona* self);
const gchar* folks_persona_get_uid (FolksPersona* self);
const gchar* folks_persona_get_iid (FolksPersona* self);
const gchar* folks_persona_get_display_id (FolksPersona* self);
void folks_debug_unindent (FolksDebug* self);
static void folks_individual_aggregator_prepare_data_free (gpointer _data);
static void folks_individual_aggregator_prepare_async_ready_wrapper (GObject *source_object,
                                                              GAsyncResult *res,
                                                              void *user_data);
void folks_individual_aggregator_prepare (FolksIndividualAggregator* self,
                                          GAsyncReadyCallback _callback_,
                                          gpointer _user_data_);
void folks_individual_aggregator_prepare_finish (FolksIndividualAggregator* self,
                                                 GAsyncResult* _res_,
                                                 GError** error);
static gboolean folks_individual_aggregator_prepare_co (FolksIndividualAggregatorPrepareData* _data_);
GeeMap* folks_backend_store_get_enabled_backends (FolksBackendStore* self);
void folks_backend_store_load_backends (FolksBackendStore* self,
                                        GAsyncReadyCallback _callback_,
                                        gpointer _user_data_);
void folks_backend_store_load_backends_finish (FolksBackendStore* self,
                                               GAsyncResult* _res_,
                                               GError** error);
static void folks_individual_aggregator_prepare_ready (GObject* source_object,
                                                GAsyncResult* _res_,
                                                gpointer _user_data_);
static void _folks_individual_aggregator_notify_if_is_quiescent (FolksIndividualAggregator* self);
static void folks_individual_aggregator_unprepare_data_free (gpointer _data);
static void folks_individual_aggregator_unprepare_async_ready_wrapper (GObject *source_object,
                                                                GAsyncResult *res,
                                                                void *user_data);
void folks_individual_aggregator_unprepare (FolksIndividualAggregator* self,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
void folks_individual_aggregator_unprepare_finish (FolksIndividualAggregator* self,
                                                   GAsyncResult* _res_,
                                                   GError** error);
static gboolean folks_individual_aggregator_unprepare_co (FolksIndividualAggregatorUnprepareData* _data_);
void folks_persona_store_flush (FolksPersonaStore* self,
                                GAsyncReadyCallback _callback_,
                                gpointer _user_data_);
void folks_persona_store_flush_finish (FolksPersonaStore* self,
                                       GAsyncResult* _res_);
static void folks_individual_aggregator_unprepare_ready (GObject* source_object,
                                                  GAsyncResult* _res_,
                                                  gpointer _user_data_);
GType folks_match_result_get_type (void) G_GNUC_CONST;
GeeMap* folks_individual_aggregator_get_potential_matches (FolksIndividualAggregator* self,
                                                           FolksIndividual* matchee,
                                                           FolksMatchResult min_threshold);
GType folks_potential_match_get_type (void) G_GNUC_CONST;
FolksPotentialMatch* folks_potential_match_new (void);
FolksPotentialMatch* folks_potential_match_construct (GType object_type);
FolksMatchResult folks_potential_match_potential_match (FolksPotentialMatch* self,
                                                        FolksIndividual* a,
                                                        FolksIndividual* b);
GeeMap* folks_individual_aggregator_get_all_potential_matches (FolksIndividualAggregator* self,
                                                               FolksMatchResult min_threshold);
static void _folks_individual_aggregator_add_backend (FolksIndividualAggregator* self,
                                               FolksBackend* backend);
static void _folks_individual_aggregator_backend_persona_store_added_cb (FolksIndividualAggregator* self,
                                                                  FolksBackend* backend,
                                                                  FolksPersonaStore* store);
static void __folks_individual_aggregator_backend_persona_store_added_cb_folks_backend_persona_store_added (FolksBackend* _sender,
                                                                                                     FolksPersonaStore* store,
                                                                                                     gpointer self);
static void _folks_individual_aggregator_backend_persona_store_removed_cb (FolksIndividualAggregator* self,
                                                                    FolksBackend* backend,
                                                                    FolksPersonaStore* store);
static void __folks_individual_aggregator_backend_persona_store_removed_cb_folks_backend_persona_store_removed (FolksBackend* _sender,
                                                                                                         FolksPersonaStore* store,
                                                                                                         gpointer self);
static void _folks_individual_aggregator_backend_is_quiescent_changed_cb (FolksIndividualAggregator* self,
                                                                   GObject* obj,
                                                                   GParamSpec* pspec);
static void __folks_individual_aggregator_backend_is_quiescent_changed_cb_g_object_notify (GObject* _sender,
                                                                                    GParamSpec* pspec,
                                                                                    gpointer self);
GeeMap* folks_backend_get_persona_stores (FolksBackend* self);
gboolean folks_backend_get_is_quiescent (FolksBackend* self);
static gboolean _folks_individual_aggregator_quiescent_timeout_cb (FolksIndividualAggregator* self);
static gboolean __folks_individual_aggregator_quiescent_timeout_cb_gsource_func (gpointer self);
const gchar* folks_persona_store_get_type_id (FolksPersonaStore* self);
const gchar* folks_persona_store_get_id (FolksPersonaStore* self);
void folks_persona_store_set_is_primary_store (FolksPersonaStore* self,
                                               gboolean value);
static Block4Data* block4_data_ref (Block4Data* _data4_);
static void block4_data_unref (void * _userdata_);
const gchar* folks_backend_get_name (FolksBackend* self);
static gboolean _folks_individual_aggregator_maybe_configure_as_primary (FolksIndividualAggregator* self,
                                                                  FolksPersonaStore* store);
GType folks_group_details_change_reason_get_type (void) G_GNUC_CONST;
static void _folks_individual_aggregator_personas_changed_cb (FolksIndividualAggregator* self,
                                                       FolksPersonaStore* store,
                                                       GeeSet* added,
                                                       GeeSet* removed,
                                                       const gchar* message,
                                                       FolksPersona* actor,
                                                       FolksGroupDetailsChangeReason reason);
static void __folks_individual_aggregator_personas_changed_cb_folks_persona_store_personas_changed (FolksPersonaStore* _sender,
                                                                                             GeeSet* added,
                                                                                             GeeSet* removed,
                                                                                             const gchar* message,
                                                                                             FolksPersona* actor,
                                                                                             FolksGroupDetailsChangeReason reason,
                                                                                             gpointer self);
static void _folks_individual_aggregator_is_primary_store_changed_cb (FolksIndividualAggregator* self,
                                                               GObject* object,
                                                               GParamSpec* pspec);
static void __folks_individual_aggregator_is_primary_store_changed_cb_g_object_notify (GObject* _sender,
                                                                                GParamSpec* pspec,
                                                                                gpointer self);
static void _folks_individual_aggregator_persona_store_is_quiescent_changed_cb (FolksIndividualAggregator* self,
                                                                         GObject* obj,
                                                                         GParamSpec* pspec);
static void __folks_individual_aggregator_persona_store_is_quiescent_changed_cb_g_object_notify (GObject* _sender,
                                                                                          GParamSpec* pspec,
                                                                                          gpointer self);
static void _folks_individual_aggregator_persona_store_is_user_set_default_changed_cb (FolksIndividualAggregator* self,
                                                                                GObject* obj,
                                                                                GParamSpec* pspec);
static void __folks_individual_aggregator_persona_store_is_user_set_default_changed_cb_g_object_notify (GObject* _sender,
                                                                                                 GParamSpec* pspec,
                                                                                                 gpointer self);
gboolean folks_persona_store_get_is_quiescent (FolksPersonaStore* self);
GeeMap* folks_persona_store_get_personas (FolksPersonaStore* self);
void folks_persona_store_prepare (FolksPersonaStore* self,
                                  GAsyncReadyCallback _callback_,
                                  gpointer _user_data_);
void folks_persona_store_prepare_finish (FolksPersonaStore* self,
                                         GAsyncResult* _res_,
                                         GError** error);
static void __lambda69_ (Block4Data* _data4_,
                  GObject* obj,
                  GAsyncResult* _result_);
static void ___lambda69__gasync_ready_callback (GObject* source_object,
                                         GAsyncResult* res,
                                         gpointer self);
static void _folks_individual_aggregator_emit_individuals_changed (FolksIndividualAggregator* self,
                                                            GeeSet* added,
                                                            GeeSet* removed,
                                                            GeeMultiMap* changes,
                                                            const gchar* message,
                                                            FolksPersona* actor,
                                                            FolksGroupDetailsChangeReason reason);
gboolean folks_debug_get_debug_output_enabled (FolksDebug* self);
static void _folks_individual_aggregator_connect_to_individual (FolksIndividualAggregator* self,
                                                         FolksIndividual* individual);
static void _folks_individual_aggregator_individual_removed_cb (FolksIndividualAggregator* self,
                                                         FolksIndividual* i,
                                                         FolksIndividual* replacement);
static void __folks_individual_aggregator_individual_removed_cb_folks_individual_removed (FolksIndividual* _sender,
                                                                                   FolksIndividual* replacement_individual,
                                                                                   gpointer self);
static void _folks_individual_aggregator_disconnect_from_individual (FolksIndividualAggregator* self,
                                                              FolksIndividual* individual);
static void _folks_individual_aggregator_add_personas (FolksIndividualAggregator* self,
                                                GeeSet* added,
                                                FolksIndividual* * user,
                                                GeeHashMultiMap* * individuals_changes);
static Block5Data* block5_data_ref (Block5Data* _data5_);
static void block5_data_unref (void * _userdata_);
GType folks_persona_store_trust_get_type (void) G_GNUC_CONST;
FolksPersonaStore* folks_persona_get_store (FolksPersona* self);
FolksPersonaStoreTrust folks_persona_store_get_trust_level (FolksPersonaStore* self);
gboolean folks_individual_has_anti_link_with_persona (FolksIndividual* self,
                                                      FolksPersona* p);
gchar** folks_persona_get_linkable_properties (FolksPersona* self,
                                               int* result_length1);
static Block6Data* block6_data_ref (Block6Data* _data6_);
static void block6_data_unref (void * _userdata_);
void folks_persona_linkable_property_to_links (FolksPersona* self,
                                               const gchar* prop_name,
                                               FolksPersonaLinkablePropertyCallback callback,
                                               gpointer callback_target);
static void _______lambda67_ (Block6Data* _data6_,
                       const gchar* l);
static void ________lambda67__folks_persona_linkable_property_callback (const gchar* link,
                                                                 gpointer self);
FolksIndividual* folks_individual_new (GeeSet* personas);
FolksIndividual* folks_individual_construct (GType object_type,
                                             GeeSet* personas);
static void _folks_individual_aggregator_add_persona_to_link_map (FolksIndividualAggregator* self,
                                                           FolksPersona* persona,
                                                           FolksIndividual* individual);
static void _folks_individual_aggregator_remove_individual_from_link_map (FolksIndividualAggregator* self,
                                                                   FolksIndividual* individual);
static void _folks_individual_aggregator_persona_linkable_property_changed_cb (FolksIndividualAggregator* self,
                                                                        GObject* obj,
                                                                        GParamSpec* pspec);
static void _folks_individual_aggregator_persona_anti_links_changed_cb (FolksIndividualAggregator* self,
                                                                 GObject* obj,
                                                                 GParamSpec* pspec);
static void _folks_individual_aggregator_connect_to_persona (FolksIndividualAggregator* self,
                                                      FolksPersona* persona);
static void __folks_individual_aggregator_persona_linkable_property_changed_cb_g_object_notify (GObject* _sender,
                                                                                         GParamSpec* pspec,
                                                                                         gpointer self);
GQuark folks_property_error_quark (void);
GType folks_anti_linkable_get_type (void) G_GNUC_CONST;
static void __folks_individual_aggregator_persona_anti_links_changed_cb_g_object_notify (GObject* _sender,
                                                                                  GParamSpec* pspec,
                                                                                  gpointer self);
static void _folks_individual_aggregator_disconnect_from_persona (FolksIndividualAggregator* self,
                                                           FolksPersona* persona);
static void _folks_individual_aggregator_link_map_set (FolksIndividualAggregator* self,
                                                const gchar* key,
                                                FolksIndividual* individual);
static void _g_object_unref0_ (gpointer var);
static Block7Data* block7_data_ref (Block7Data* _data7_);
static void block7_data_unref (void * _userdata_);
static void _____lambda68_ (Block7Data* _data7_,
                     const gchar* l);
static void ______lambda68__folks_persona_linkable_property_callback (const gchar* link,
                                                               gpointer self);
FolksIndividual* folks_individual_aggregator_get_user (FolksIndividualAggregator* self);
FolksIndividual* folks_persona_get_individual (FolksPersona* self);
void folks_individual_set_personas (FolksIndividual* self,
                                    GeeSet* value);
static void folks_individual_aggregator_set_user (FolksIndividualAggregator* self,
                                           FolksIndividual* value);
void folks_individual_replace (FolksIndividual* self,
                               FolksIndividual* replacement_individual);
gboolean folks_persona_store_get_is_primary_store (FolksPersonaStore* self);
gboolean folks_persona_store_get_is_user_set_default (FolksPersonaStore* self);
static void folks_individual_aggregator_add_persona_from_details_data_free (gpointer _data);
static void folks_individual_aggregator_add_persona_from_details_async_ready_wrapper (GObject *source_object,
                                                                               GAsyncResult *res,
                                                                               void *user_data);
void folks_individual_aggregator_add_persona_from_details (FolksIndividualAggregator* self,
                                                           FolksIndividual* parent,
                                                           FolksPersonaStore* persona_store,
                                                           GHashTable* details,
                                                           GAsyncReadyCallback _callback_,
                                                           gpointer _user_data_);
FolksPersona* folks_individual_aggregator_add_persona_from_details_finish (FolksIndividualAggregator* self,
                                                                           GAsyncResult* _res_,
                                                                           GError** error);
static gboolean folks_individual_aggregator_add_persona_from_details_co (FolksIndividualAggregatorAddPersonaFromDetailsData* _data_);
static GHashTable* _folks_individual_aggregator_asv_copy (FolksIndividualAggregator* self,
                                                   GHashTable* asv);
void folks_persona_store_add_persona_from_details (FolksPersonaStore* self,
                                                   GHashTable* details,
                                                   GAsyncReadyCallback _callback_,
                                                   gpointer _user_data_);
GQuark folks_persona_store_error_quark (void);
FolksPersona* folks_persona_store_add_persona_from_details_finish (FolksPersonaStore* self,
                                                                   GAsyncResult* _res_,
                                                                   GError** error);
static void folks_individual_aggregator_add_persona_from_details_ready (GObject* source_object,
                                                                 GAsyncResult* _res_,
                                                                 gpointer _user_data_);
static Block8Data* block8_data_ref (Block8Data* _data8_);
static void block8_data_unref (void * _userdata_);
static void _g_free0_ (gpointer var);
static void _vala_GValue_free (GValue* self);
static void __vala_GValue_free0_ (gpointer var);
static void __lambda70_ (Block8Data* _data8_,
                  const gchar* k,
                  GValue* v);
static GValue* _g_value_dup (GValue* self);
static void ___lambda70__gh_func (gconstpointer key,
                           gconstpointer value,
                           gpointer self);
static void folks_individual_aggregator_remove_individual_data_free (gpointer _data);
static void folks_individual_aggregator_remove_individual_async_ready_wrapper (GObject *source_object,
                                                                        GAsyncResult *res,
                                                                        void *user_data);
void folks_individual_aggregator_remove_individual (FolksIndividualAggregator* self,
                                                    FolksIndividual* individual,
                                                    GAsyncReadyCallback _callback_,
                                                    gpointer _user_data_);
void folks_individual_aggregator_remove_individual_finish (FolksIndividualAggregator* self,
                                                           GAsyncResult* _res_,
                                                           GError** error);
static gboolean folks_individual_aggregator_remove_individual_co (FolksIndividualAggregatorRemoveIndividualData* _data_);
void folks_persona_store_remove_persona (FolksPersonaStore* self,
                                         FolksPersona* persona,
                                         GAsyncReadyCallback _callback_,
                                         gpointer _user_data_);
void folks_persona_store_remove_persona_finish (FolksPersonaStore* self,
                                                GAsyncResult* _res_,
                                                GError** error);
static void folks_individual_aggregator_remove_individual_ready (GObject* source_object,
                                                          GAsyncResult* _res_,
                                                          gpointer _user_data_);
static void folks_individual_aggregator_remove_persona_data_free (gpointer _data);
static void folks_individual_aggregator_remove_persona_async_ready_wrapper (GObject *source_object,
                                                                     GAsyncResult *res,
                                                                     void *user_data);
void folks_individual_aggregator_remove_persona (FolksIndividualAggregator* self,
                                                 FolksPersona* persona,
                                                 GAsyncReadyCallback _callback_,
                                                 gpointer _user_data_);
void folks_individual_aggregator_remove_persona_finish (FolksIndividualAggregator* self,
                                                        GAsyncResult* _res_,
                                                        GError** error);
static gboolean folks_individual_aggregator_remove_persona_co (FolksIndividualAggregatorRemovePersonaData* _data_);
static void folks_individual_aggregator_remove_persona_ready (GObject* source_object,
                                                       GAsyncResult* _res_,
                                                       gpointer _user_data_);
static void folks_individual_aggregator_link_personas_data_free (gpointer _data);
static void folks_individual_aggregator_link_personas_async_ready_wrapper (GObject *source_object,
                                                                    GAsyncResult *res,
                                                                    void *user_data);
void folks_individual_aggregator_link_personas (FolksIndividualAggregator* self,
                                                GeeSet* personas,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_);
void folks_individual_aggregator_link_personas_finish (FolksIndividualAggregator* self,
                                                       GAsyncResult* _res_,
                                                       GError** error);
static gboolean folks_individual_aggregator_link_personas_co (FolksIndividualAggregatorLinkPersonasData* _data_);
void folks_anti_linkable_remove_anti_links (FolksAntiLinkable* self,
                                            GeeSet* other_personas,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
void folks_anti_linkable_remove_anti_links_finish (FolksAntiLinkable* self,
                                                   GAsyncResult* _res_,
                                                   GError** error);
static void folks_individual_aggregator_link_personas_ready (GObject* source_object,
                                                      GAsyncResult* _res_,
                                                      gpointer _user_data_);
static GHashTable* _folks_individual_aggregator_build_linking_details (FolksIndividualAggregator* self,
                                                                GeeSet* personas);
GType folks_abstract_field_details_get_type (void) G_GNUC_CONST;
GType folks_im_field_details_get_type (void) G_GNUC_CONST;
guint folks_abstract_field_details_hash_static (FolksAbstractFieldDetails* value);
static guint _folks_abstract_field_details_hash_static_gee_hash_data_func (gconstpointer v,
                                                                    gpointer self);
gboolean folks_abstract_field_details_equal_static (FolksAbstractFieldDetails* left,
                                                    FolksAbstractFieldDetails* right);
static gboolean _folks_abstract_field_details_equal_static_gee_equal_data_func (gconstpointer a,
                                                                         gconstpointer b,
                                                                         gpointer self);
GType folks_web_service_field_details_get_type (void) G_GNUC_CONST;
GType folks_im_details_get_type (void) G_GNUC_CONST;
GeeMultiMap* folks_im_details_get_im_addresses (FolksImDetails* self);
GType folks_web_service_details_get_type (void) G_GNUC_CONST;
GeeMultiMap* folks_web_service_details_get_web_service_addresses (FolksWebServiceDetails* self);
GType folks_local_id_details_get_type (void) G_GNUC_CONST;
GeeSet* folks_local_id_details_get_local_ids (FolksLocalIdDetails* self);
GType folks_persona_detail_get_type (void) G_GNUC_CONST;
const gchar* folks_persona_store_detail_key (FolksPersonaDetail detail);
static void folks_individual_aggregator_unlink_individual_data_free (gpointer _data);
static void folks_individual_aggregator_unlink_individual_async_ready_wrapper (GObject *source_object,
                                                                        GAsyncResult *res,
                                                                        void *user_data);
void folks_individual_aggregator_unlink_individual (FolksIndividualAggregator* self,
                                                    FolksIndividual* individual,
                                                    GAsyncReadyCallback _callback_,
                                                    gpointer _user_data_);
void folks_individual_aggregator_unlink_individual_finish (FolksIndividualAggregator* self,
                                                           GAsyncResult* _res_,
                                                           GError** error);
static gboolean folks_individual_aggregator_unlink_individual_co (FolksIndividualAggregatorUnlinkIndividualData* _data_);
static void _folks_individual_aggregator_ensure_personas_property_writeable (FolksIndividualAggregator* self,
                                                                      GeeSet* personas,
                                                                      const gchar* property_name,
                                                                      GAsyncReadyCallback _callback_,
                                                                      gpointer _user_data_);
static FolksPersona* _folks_individual_aggregator_ensure_personas_property_writeable_finish (FolksIndividualAggregator* self,
                                                                                      GAsyncResult* _res_,
                                                                                      GError** error);
static void folks_individual_aggregator_unlink_individual_ready (GObject* source_object,
                                                          GAsyncResult* _res_,
                                                          gpointer _user_data_);
void folks_anti_linkable_add_anti_links (FolksAntiLinkable* self,
                                         GeeSet* other_personas,
                                         GAsyncReadyCallback _callback_,
                                         gpointer _user_data_);
void folks_anti_linkable_add_anti_links_finish (FolksAntiLinkable* self,
                                                GAsyncResult* _res_,
                                                GError** error);
static void folks_individual_aggregator_ensure_individual_property_writeable_data_free (gpointer _data);
static void folks_individual_aggregator_ensure_individual_property_writeable_async_ready_wrapper (GObject *source_object,
                                                                                           GAsyncResult *res,
                                                                                           void *user_data);
void folks_individual_aggregator_ensure_individual_property_writeable (FolksIndividualAggregator* self,
                                                                       FolksIndividual* individual,
                                                                       const gchar* property_name,
                                                                       GAsyncReadyCallback _callback_,
                                                                       gpointer _user_data_);
FolksPersona* folks_individual_aggregator_ensure_individual_property_writeable_finish (FolksIndividualAggregator* self,
                                                                                       GAsyncResult* _res_,
                                                                                       GError** error);
static gboolean folks_individual_aggregator_ensure_individual_property_writeable_co (FolksIndividualAggregatorEnsureIndividualPropertyWriteableData* _data_);
static void folks_individual_aggregator_ensure_individual_property_writeable_ready (GObject* source_object,
                                                                             GAsyncResult* _res_,
                                                                             gpointer _user_data_);
static void _folks_individual_aggregator_ensure_personas_property_writeable_data_free (gpointer _data);
static void _folks_individual_aggregator_ensure_personas_property_writeable_async_ready_wrapper (GObject *source_object,
                                                                                          GAsyncResult *res,
                                                                                          void *user_data);
static gboolean _folks_individual_aggregator_ensure_personas_property_writeable_co (FolksIndividualAggregatorEnsurePersonasPropertyWriteableData* _data_);
gchar** folks_persona_get_writeable_properties (FolksPersona* self,
                                                int* result_length1);
static gboolean _vala_string_array_contains (gchar* * stack,
                                      int stack_length,
                                      gchar* needle);
gchar** folks_persona_store_get_always_writeable_properties (FolksPersonaStore* self,
                                                             int* result_length1);
static void _folks_individual_aggregator_ensure_personas_property_writeable_ready (GObject* source_object,
                                                                            GAsyncResult* _res_,
                                                                            gpointer _user_data_);
static void folks_individual_aggregator_look_up_individual_data_free (gpointer _data);
static void folks_individual_aggregator_look_up_individual_async_ready_wrapper (GObject *source_object,
                                                                         GAsyncResult *res,
                                                                         void *user_data);
void folks_individual_aggregator_look_up_individual (FolksIndividualAggregator* self,
                                                     const gchar* id,
                                                     GAsyncReadyCallback _callback_,
                                                     gpointer _user_data_);
FolksIndividual* folks_individual_aggregator_look_up_individual_finish (FolksIndividualAggregator* self,
                                                                        GAsyncResult* _res_,
                                                                        GError** error);
static gboolean folks_individual_aggregator_look_up_individual_co (FolksIndividualAggregatorLookUpIndividualData* _data_);
static void folks_individual_aggregator_look_up_individual_ready (GObject* source_object,
                                                           GAsyncResult* _res_,
                                                           gpointer _user_data_);
gboolean folks_individual_aggregator_get_is_prepared (FolksIndividualAggregator* self);
gboolean folks_individual_aggregator_get_is_quiescent (FolksIndividualAggregator* self);
FolksPersonaStore* folks_individual_aggregator_get_primary_store (FolksIndividualAggregator* self);
FolksBackendStore* folks_individual_aggregator_get_backend_store (FolksIndividualAggregator* self);
static void folks_individual_aggregator_set_backend_store (FolksIndividualAggregator* self,
                                                    FolksBackendStore* value);
static void folks_individual_aggregator_set_individuals (FolksIndividualAggregator* self,
                                                  GeeMap* value);
static void g_cclosure_user_marshal_VOID__OBJECT_OBJECT_STRING_OBJECT_ENUM (GClosure * closure,
                                                                     GValue * return_value,
                                                                     guint n_param_values,
                                                                     const GValue * param_values,
                                                                     gpointer invocation_hint,
                                                                     gpointer marshal_data);
static GObject * folks_individual_aggregator_constructor (GType type,
                                                   guint n_construct_properties,
                                                   GObjectConstructParam * construct_properties);
static void _g_ptr_array_unref0_ (gpointer var);
FolksDebug* folks_debug_dup (void);
static void __folks_individual_aggregator_primary_store_setting_changed_cb_g_settings_changed (GSettings* _sender,
                                                                                        const gchar* key,
                                                                                        gpointer self);
static void folks_individual_aggregator_finalize (GObject * obj);
static void _vala_folks_individual_aggregator_get_property (GObject * object,
                                                     guint property_id,
                                                     GValue * value,
                                                     GParamSpec * pspec);
static void _vala_folks_individual_aggregator_set_property (GObject * object,
                                                     guint property_id,
                                                     const GValue * value,
                                                     GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


GQuark
folks_individual_aggregator_error_quark (void)
{
	return g_quark_from_static_string ("folks_individual_aggregator_error-quark");
}


static void
__folks_individual_aggregator_backend_available_cb_folks_backend_store_backend_available (FolksBackendStore* _sender,
                                                                                          FolksBackend* backend,
                                                                                          gpointer self)
{
#line 526 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_backend_available_cb ((FolksIndividualAggregator*) self, _sender, backend);
#line 1368 "individual-aggregator.c"
}


static void
__folks_individual_aggregator_debug_print_status_folks_debug_print_status (FolksDebug* _sender,
                                                                           gpointer self)
{
#line 529 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_debug_print_status ((FolksIndividualAggregator*) self, _sender);
#line 1378 "individual-aggregator.c"
}


/**
   * Create or return the singleton {@link IndividualAggregator} class instance.
   * If the instance doesn't exist already, it will be created with the
   * default {@link BackendStore}.
   *
   * This function is thread-safe.
   *
   * @return Singleton {@link IndividualAggregator} instance
   * @since 0.9.5
   */
static gpointer
_g_object_ref0 (gpointer self)
{
#line 350 "/run/build/folks/folks/individual-aggregator.vala"
	return self ? g_object_ref (self) : NULL;
#line 1397 "individual-aggregator.c"
}


FolksIndividualAggregator*
folks_individual_aggregator_dup (void)
{
	FolksIndividualAggregator* result = NULL;
	FolksIndividualAggregator* _retval = NULL;
	FolksIndividualAggregator* _tmp0_;
	FolksIndividualAggregator* _tmp1_;
	FolksIndividualAggregator* retval = NULL;
	FolksIndividualAggregator* _tmp2_;
#line 350 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = folks_individual_aggregator__instance;
#line 350 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = _g_object_ref0 (_tmp0_);
#line 350 "/run/build/folks/folks/individual-aggregator.vala"
	_retval = _tmp1_;
#line 353 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = _retval;
#line 353 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp2_ == NULL) {
#line 1420 "individual-aggregator.c"
		FolksIndividualAggregator* _tmp3_;
		FolksIndividualAggregator* _tmp4_;
#line 356 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp3_ = folks_individual_aggregator_new ();
#line 356 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (retval);
#line 356 "/run/build/folks/folks/individual-aggregator.vala"
		retval = _tmp3_;
#line 357 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp4_ = retval;
#line 357 "/run/build/folks/folks/individual-aggregator.vala"
		folks_individual_aggregator__instance = _tmp4_;
#line 1433 "individual-aggregator.c"
	} else {
		FolksIndividualAggregator* _tmp5_;
		FolksIndividualAggregator* _tmp6_;
#line 361 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp5_ = _retval;
#line 361 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp6_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp5_, FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, FolksIndividualAggregator));
#line 361 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (retval);
#line 361 "/run/build/folks/folks/individual-aggregator.vala"
		retval = _tmp6_;
#line 1445 "individual-aggregator.c"
	}
#line 364 "/run/build/folks/folks/individual-aggregator.vala"
	result = retval;
#line 364 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_retval);
#line 364 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 1453 "individual-aggregator.c"
}


/**
   * Create a new IndividualAggregator.
   *
   * Clients should connect to the
   * {@link IndividualAggregator.individuals_changed} signal (or the
   * {@link IndividualAggregator.individuals_changed_detailed} signal), then
   * call {@link IndividualAggregator.prepare} to load the backends and start
   * aggregating individuals.
   *
   * An example of how to set up an IndividualAggregator:
   * {{{
   *   IndividualAggregator agg = new IndividualAggregator ();
   *   agg.individuals_changed_detailed.connect (individuals_changed_cb);
   *   agg.prepare ();
   * }}}
   *
   * Folks does not support having more than one IndividualAggregator
   * instantiated at the same time. So it's recommended to use
   * {@link IndividualAggregator.dup} instead.
   */
FolksIndividualAggregator*
folks_individual_aggregator_construct (GType object_type)
{
	FolksIndividualAggregator * self = NULL;
	FolksBackendStore* _tmp0_;
	FolksBackendStore* _tmp1_;
#line 391 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = folks_backend_store_dup ();
#line 391 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = _tmp0_;
#line 391 "/run/build/folks/folks/individual-aggregator.vala"
	self = (FolksIndividualAggregator*) g_object_new (object_type, "backend-store", _tmp1_, NULL);
#line 391 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_tmp1_);
#line 389 "/run/build/folks/folks/individual-aggregator.vala"
	return self;
#line 1493 "individual-aggregator.c"
}


FolksIndividualAggregator*
folks_individual_aggregator_new (void)
{
#line 389 "/run/build/folks/folks/individual-aggregator.vala"
	return folks_individual_aggregator_construct (FOLKS_TYPE_INDIVIDUAL_AGGREGATOR);
#line 1502 "individual-aggregator.c"
}


/**
   * Create or return the singleton {@link IndividualAggregator} class instance
   * with a custom {@link BackendStore}.
   * If the instance doesn't exist already, it will be created with
   * the given {@link BackendStore} rather than the default one.
   * If the instance already exists but is using another {@link BackendStore}
   * then a warning is raised and null is returned.
   *
   * This function is thread-safe.
   *
   * @param store the {@link BackendStore} to use instead of the default one.

   * @return Singleton {@link IndividualAggregator} instance, or null
   * @since 0.9.5
   */
FolksIndividualAggregator*
folks_individual_aggregator_dup_with_backend_store (FolksBackendStore* store)
{
	FolksIndividualAggregator* result = NULL;
	FolksIndividualAggregator* _retval = NULL;
	FolksIndividualAggregator* _tmp0_;
	FolksIndividualAggregator* _tmp1_;
	FolksIndividualAggregator* retval = NULL;
	FolksIndividualAggregator* _tmp2_;
#line 409 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (store != NULL, NULL);
#line 411 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = folks_individual_aggregator__instance;
#line 411 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = _g_object_ref0 (_tmp0_);
#line 411 "/run/build/folks/folks/individual-aggregator.vala"
	_retval = _tmp1_;
#line 414 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = _retval;
#line 414 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp2_ == NULL) {
#line 1542 "individual-aggregator.c"
		FolksIndividualAggregator* _tmp3_;
		FolksIndividualAggregator* _tmp4_;
#line 417 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp3_ = folks_individual_aggregator_new_with_backend_store (store);
#line 417 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (retval);
#line 417 "/run/build/folks/folks/individual-aggregator.vala"
		retval = _tmp3_;
#line 418 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp4_ = retval;
#line 418 "/run/build/folks/folks/individual-aggregator.vala"
		folks_individual_aggregator__instance = _tmp4_;
#line 1555 "individual-aggregator.c"
	} else {
		FolksIndividualAggregator* _tmp5_;
		FolksBackendStore* _tmp6_;
#line 420 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp5_ = _retval;
#line 420 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp6_ = _tmp5_->priv->_backend_store;
#line 420 "/run/build/folks/folks/individual-aggregator.vala"
		if (_tmp6_ != store) {
#line 422 "/run/build/folks/folks/individual-aggregator.vala"
			g_warning ("individual-aggregator.vala:422: An aggregator already exists using ano" \
"ther backend store");
#line 423 "/run/build/folks/folks/individual-aggregator.vala"
			result = NULL;
#line 423 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (retval);
#line 423 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_retval);
#line 423 "/run/build/folks/folks/individual-aggregator.vala"
			return result;
#line 1575 "individual-aggregator.c"
		} else {
			FolksIndividualAggregator* _tmp7_;
			FolksIndividualAggregator* _tmp8_;
#line 427 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp7_ = _retval;
#line 427 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp8_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp7_, FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, FolksIndividualAggregator));
#line 427 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (retval);
#line 427 "/run/build/folks/folks/individual-aggregator.vala"
			retval = _tmp8_;
#line 1587 "individual-aggregator.c"
		}
	}
#line 430 "/run/build/folks/folks/individual-aggregator.vala"
	result = retval;
#line 430 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_retval);
#line 430 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 1596 "individual-aggregator.c"
}


/**
   * Create a new IndividualAggregator with a custom {@link BackendStore}.
   *
   * This behaves the same as the default constructor for 
   * {@link IndividualAggregator}, but uses the given {@link BackendStore}
   * rather than the default one.
   *
   * @param store the {@link BackendStore} to use instead of the default one.
   *
   * @since 0.9.0
   */
FolksIndividualAggregator*
folks_individual_aggregator_construct_with_backend_store (GType object_type,
                                                          FolksBackendStore* store)
{
	FolksIndividualAggregator * self = NULL;
#line 446 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (store != NULL, NULL);
#line 448 "/run/build/folks/folks/individual-aggregator.vala"
	self = (FolksIndividualAggregator*) g_object_new (object_type, "backend-store", store, NULL);
#line 446 "/run/build/folks/folks/individual-aggregator.vala"
	return self;
#line 1622 "individual-aggregator.c"
}


FolksIndividualAggregator*
folks_individual_aggregator_new_with_backend_store (FolksBackendStore* store)
{
#line 446 "/run/build/folks/folks/individual-aggregator.vala"
	return folks_individual_aggregator_construct_with_backend_store (FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, store);
#line 1631 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_primary_store_setting_changed_cb (FolksIndividualAggregator* self,
                                                               GSettings* settings,
                                                               const gchar* key)
{
	gchar* val = NULL;
	gchar* _tmp0_;
	gboolean _tmp1_ = FALSE;
	const gchar* _tmp2_;
#line 535 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 535 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (settings != NULL);
#line 535 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (key != NULL);
#line 538 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = g_settings_get_string (settings, key);
#line 538 "/run/build/folks/folks/individual-aggregator.vala"
	val = _tmp0_;
#line 539 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = val;
#line 539 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp2_ != NULL) {
#line 1658 "individual-aggregator.c"
		const gchar* _tmp3_;
#line 539 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp3_ = val;
#line 539 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = g_strcmp0 (_tmp3_, "") != 0;
#line 1664 "individual-aggregator.c"
	} else {
#line 539 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = FALSE;
#line 1668 "individual-aggregator.c"
	}
#line 539 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp1_) {
#line 1672 "individual-aggregator.c"
		const gchar* _tmp4_;
		gchar* store_full_id = NULL;
		const gchar* _tmp5_;
		const gchar* _tmp6_;
		gchar* _tmp7_;
		GeeHashMap* _tmp8_;
		const gchar* _tmp9_;
#line 541 "/run/build/folks/folks/individual-aggregator.vala"
		g_debug ("individual-aggregator.vala:541: Setting primary store IDs from GSettin" \
"gs.");
#line 542 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp4_ = val;
#line 542 "/run/build/folks/folks/individual-aggregator.vala"
		_folks_individual_aggregator_configure_primary_store (self, (const gchar*) _tmp4_);
#line 544 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp5_ = self->priv->_configured_primary_store_type_id;
#line 544 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp6_ = self->priv->_configured_primary_store_id;
#line 544 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp7_ = _folks_individual_aggregator_get_store_full_id (self, _tmp5_, _tmp6_);
#line 544 "/run/build/folks/folks/individual-aggregator.vala"
		store_full_id = _tmp7_;
#line 547 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp8_ = self->priv->_stores;
#line 547 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp9_ = store_full_id;
#line 547 "/run/build/folks/folks/individual-aggregator.vala"
		if (gee_abstract_map_has_key ((GeeAbstractMap*) _tmp8_, _tmp9_)) {
#line 1700 "individual-aggregator.c"
			FolksPersonaStore* selected_store = NULL;
			GeeHashMap* _tmp10_;
			const gchar* _tmp11_;
			gpointer _tmp12_;
			FolksPersonaStore* _tmp13_;
#line 549 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp10_ = self->priv->_stores;
#line 549 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp11_ = store_full_id;
#line 549 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp12_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp10_, _tmp11_);
#line 549 "/run/build/folks/folks/individual-aggregator.vala"
			selected_store = (FolksPersonaStore*) _tmp12_;
#line 550 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp13_ = selected_store;
#line 550 "/run/build/folks/folks/individual-aggregator.vala"
			_folks_individual_aggregator_set_primary_store (self, _tmp13_);
#line 547 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (selected_store);
#line 1720 "individual-aggregator.c"
		}
#line 539 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (store_full_id);
#line 1724 "individual-aggregator.c"
	}
#line 535 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (val);
#line 1728 "individual-aggregator.c"
}


static gint
string_index_of (const gchar* self,
                 const gchar* needle,
                 gint start_index)
{
	gint result = 0;
	gchar* _result_ = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
#line 1081 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, 0);
#line 1081 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (needle != NULL, 0);
#line 1082 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = strstr (((gchar*) self) + start_index, (gchar*) needle);
#line 1082 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_result_ = _tmp0_;
#line 1084 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp1_ = _result_;
#line 1084 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	if (_tmp1_ != NULL) {
#line 1753 "individual-aggregator.c"
		gchar* _tmp2_;
#line 1085 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		_tmp2_ = _result_;
#line 1085 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = (gint) (_tmp2_ - ((gchar*) self));
#line 1085 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 1761 "individual-aggregator.c"
	} else {
#line 1087 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		result = -1;
#line 1087 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
		return result;
#line 1767 "individual-aggregator.c"
	}
}


static void
_folks_individual_aggregator_configure_primary_store (FolksIndividualAggregator* self,
                                                      const gchar* store_config_ids)
{
#line 555 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 555 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (store_config_ids != NULL);
#line 557 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:557: _configure_primary_store to '%s'", store_config_ids);
#line 558 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_user_configured_primary_store = TRUE;
#line 560 "/run/build/folks/folks/individual-aggregator.vala"
	if (string_index_of (store_config_ids, ":", 0) != -1) {
#line 1786 "individual-aggregator.c"
		gchar** ids = NULL;
		gchar** _tmp0_;
		gchar** _tmp1_;
		gint ids_length1;
		gint _ids_size_;
		gchar** _tmp2_;
		gint _tmp2__length1;
		const gchar* _tmp3_;
		gchar* _tmp4_;
		gchar** _tmp5_;
		gint _tmp5__length1;
		const gchar* _tmp6_;
		gchar* _tmp7_;
#line 562 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = _tmp0_ = g_strsplit (store_config_ids, ":", 2);
#line 562 "/run/build/folks/folks/individual-aggregator.vala"
		ids = _tmp1_;
#line 562 "/run/build/folks/folks/individual-aggregator.vala"
		ids_length1 = _vala_array_length (_tmp0_);
#line 562 "/run/build/folks/folks/individual-aggregator.vala"
		_ids_size_ = ids_length1;
#line 563 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = ids;
#line 563 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2__length1 = ids_length1;
#line 563 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp3_ = _tmp2_[0];
#line 563 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp4_ = g_strdup (_tmp3_);
#line 563 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (self->priv->_configured_primary_store_type_id);
#line 563 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_configured_primary_store_type_id = _tmp4_;
#line 564 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp5_ = ids;
#line 564 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp5__length1 = ids_length1;
#line 564 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp6_ = _tmp5_[1];
#line 564 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp7_ = g_strdup (_tmp6_);
#line 564 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (self->priv->_configured_primary_store_id);
#line 564 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_configured_primary_store_id = _tmp7_;
#line 560 "/run/build/folks/folks/individual-aggregator.vala"
		ids = (_vala_array_free (ids, ids_length1, (GDestroyNotify) g_free), NULL);
#line 1834 "individual-aggregator.c"
	} else {
		gchar* _tmp8_;
		gchar* _tmp9_;
#line 568 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp8_ = g_strdup (store_config_ids);
#line 568 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (self->priv->_configured_primary_store_type_id);
#line 568 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_configured_primary_store_type_id = _tmp8_;
#line 569 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp9_ = g_strdup ("");
#line 569 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (self->priv->_configured_primary_store_id);
#line 569 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_configured_primary_store_id = _tmp9_;
#line 1850 "individual-aggregator.c"
	}
}


static gint
g_ptr_array_get_length (GPtrArray* self)
{
	gint result;
	guint _tmp0_;
#line 5065 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, 0);
#line 5065 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = self->len;
#line 5065 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = (gint) _tmp0_;
#line 5065 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 1868 "individual-aggregator.c"
}


static void
g_ptr_array_set_length (GPtrArray* self,
                        gint value)
{
#line 5066 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_if_fail (self != NULL);
#line 5066 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_ptr_array_set_size (self, value);
#line 1880 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_debug_print_status (FolksIndividualAggregator* self,
                                                 FolksDebug* debug)
{
#line 575 "/run/build/folks/folks/individual-aggregator.vala"
	static const char domain[] = FOLKS_DEBUG_STATUS_LOG_DOMAIN;
#line 576 "/run/build/folks/folks/individual-aggregator.vala"
	static const GLogLevelFlags level = G_LOG_LEVEL_INFO;
#line 1892 "individual-aggregator.c"
	const gchar* _tmp0_ = NULL;
	gboolean _tmp1_;
	const gchar* _tmp2_ = NULL;
	gboolean _tmp3_;
	gchar* _tmp4_ = NULL;
	gboolean _tmp5_;
	guint _tmp10_;
	gchar* _tmp11_;
	gchar* _tmp12_;
	FolksPersonaStore* _tmp13_;
	gchar* _tmp14_;
	gchar* _tmp15_;
	const gchar* _tmp16_;
	const gchar* _tmp17_;
	GeeMap* _tmp18_;
	GeeMap* _tmp19_;
	gint _tmp20_;
	gint _tmp21_;
	GHashTable* _tmp80_;
	GHashTableIter iter = {0};
	GHashTable* _tmp81_;
	const gchar* link_key = NULL;
	GPtrArray* individuals = NULL;
#line 573 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 573 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (debug != NULL);
#line 578 "/run/build/folks/folks/individual-aggregator.vala"
	folks_debug_print_heading (debug, domain, level, "IndividualAggregator (%p)", self);
#line 584 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = self->priv->_linking_enabled;
#line 584 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp1_) {
#line 584 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp0_ = "yes";
#line 1928 "individual-aggregator.c"
	} else {
#line 584 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp0_ = "no";
#line 1932 "individual-aggregator.c"
	}
#line 585 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = self->priv->_is_prepared;
#line 585 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp3_) {
#line 585 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = "yes";
#line 1940 "individual-aggregator.c"
	} else {
#line 585 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = "no";
#line 1944 "individual-aggregator.c"
	}
#line 586 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp5_ = self->priv->_is_quiescent;
#line 586 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp5_) {
#line 1950 "individual-aggregator.c"
		gchar* _tmp6_;
#line 587 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp6_ = g_strdup ("yes");
#line 587 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (_tmp4_);
#line 587 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp4_ = _tmp6_;
#line 1958 "individual-aggregator.c"
	} else {
		guint _tmp7_;
		guint _tmp8_;
		gchar* _tmp9_;
#line 588 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp7_ = self->priv->_non_quiescent_backend_count;
#line 588 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp8_ = self->priv->_non_quiescent_persona_store_count;
#line 588 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp9_ = g_strdup_printf ("no (%u backends, %u persona stores left)", _tmp7_, _tmp8_);
#line 588 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (_tmp4_);
#line 588 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp4_ = _tmp9_;
#line 1973 "individual-aggregator.c"
	}
#line 579 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp10_ = ((GObject*) self)->ref_count;
#line 579 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp11_ = g_strdup_printf ("%u", _tmp10_);
#line 579 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp12_ = _tmp11_;
#line 579 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp13_ = self->priv->_primary_store;
#line 579 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp14_ = g_strdup_printf ("%p", _tmp13_);
#line 579 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp15_ = _tmp14_;
#line 579 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp16_ = self->priv->_configured_primary_store_type_id;
#line 579 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp17_ = self->priv->_configured_primary_store_id;
#line 579 "/run/build/folks/folks/individual-aggregator.vala"
	folks_debug_print_key_value_pairs (debug, domain, level, "Ref. count", _tmp12_, "Primary store", _tmp15_, "Configured store type id", _tmp16_, "Configured store id", _tmp17_, "Linking enabled?", _tmp0_, "Prepared?", _tmp2_, "Quiescent?", _tmp4_, NULL);
#line 579 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (_tmp15_);
#line 579 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (_tmp12_);
#line 593 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp18_ = folks_individual_aggregator_get_individuals (self);
#line 593 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp19_ = _tmp18_;
#line 593 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp20_ = gee_map_get_size (_tmp19_);
#line 593 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp21_ = _tmp20_;
#line 593 "/run/build/folks/folks/individual-aggregator.vala"
	folks_debug_print_line (debug, domain, level, "%u Individuals:", (guint) _tmp21_);
#line 595 "/run/build/folks/folks/individual-aggregator.vala"
	folks_debug_indent (debug);
#line 2009 "individual-aggregator.c"
	{
		GeeIterator* _individual_it = NULL;
		GeeMap* _tmp22_;
		GeeMap* _tmp23_;
		GeeCollection* _tmp24_;
		GeeCollection* _tmp25_;
		GeeCollection* _tmp26_;
		GeeIterator* _tmp27_;
		GeeIterator* _tmp28_;
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp22_ = folks_individual_aggregator_get_individuals (self);
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp23_ = _tmp22_;
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp24_ = gee_map_get_values (_tmp23_);
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp25_ = _tmp24_;
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp26_ = _tmp25_;
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp27_ = gee_iterable_iterator ((GeeIterable*) _tmp26_);
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp28_ = _tmp27_;
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_tmp26_);
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
		_individual_it = _tmp28_;
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 2039 "individual-aggregator.c"
			GeeIterator* _tmp29_;
			FolksIndividual* individual = NULL;
			GeeIterator* _tmp30_;
			gpointer _tmp31_;
			gchar* trust_level = NULL;
			FolksIndividual* _tmp32_;
			FolksTrustLevel _tmp33_;
			FolksTrustLevel _tmp34_;
			FolksIndividual* _tmp37_;
			const gchar* _tmp38_ = NULL;
			FolksIndividual* _tmp39_;
			gboolean _tmp40_;
			gboolean _tmp41_;
			FolksIndividual* _tmp42_;
			guint _tmp43_;
			gchar* _tmp44_;
			gchar* _tmp45_;
			FolksIndividual* _tmp46_;
			const gchar* _tmp47_;
			const gchar* _tmp48_;
			const gchar* _tmp49_;
			FolksIndividual* _tmp50_;
			GeeSet* _tmp51_;
			GeeSet* _tmp52_;
			gint _tmp53_;
			gint _tmp54_;
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp29_ = _individual_it;
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
			if (!gee_iterator_next (_tmp29_)) {
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 2072 "individual-aggregator.c"
			}
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp30_ = _individual_it;
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp31_ = gee_iterator_get (_tmp30_);
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
			individual = (FolksIndividual*) _tmp31_;
#line 599 "/run/build/folks/folks/individual-aggregator.vala"
			trust_level = NULL;
#line 601 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp32_ = individual;
#line 601 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp33_ = folks_individual_get_trust_level (_tmp32_);
#line 601 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp34_ = _tmp33_;
#line 601 "/run/build/folks/folks/individual-aggregator.vala"
			switch (_tmp34_) {
#line 601 "/run/build/folks/folks/individual-aggregator.vala"
				case FOLKS_TRUST_LEVEL_NONE:
#line 2092 "individual-aggregator.c"
				{
					gchar* _tmp35_;
#line 604 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp35_ = g_strdup ("none");
#line 604 "/run/build/folks/folks/individual-aggregator.vala"
					_g_free0 (trust_level);
#line 604 "/run/build/folks/folks/individual-aggregator.vala"
					trust_level = _tmp35_;
#line 605 "/run/build/folks/folks/individual-aggregator.vala"
					break;
#line 2103 "individual-aggregator.c"
				}
#line 601 "/run/build/folks/folks/individual-aggregator.vala"
				case FOLKS_TRUST_LEVEL_PERSONAS:
#line 2107 "individual-aggregator.c"
				{
					gchar* _tmp36_;
#line 607 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp36_ = g_strdup ("personas");
#line 607 "/run/build/folks/folks/individual-aggregator.vala"
					_g_free0 (trust_level);
#line 607 "/run/build/folks/folks/individual-aggregator.vala"
					trust_level = _tmp36_;
#line 608 "/run/build/folks/folks/individual-aggregator.vala"
					break;
#line 2118 "individual-aggregator.c"
				}
				default:
				{
#line 610 "/run/build/folks/folks/individual-aggregator.vala"
					g_assert_not_reached ();
#line 2124 "individual-aggregator.c"
				}
			}
#line 613 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp37_ = individual;
#line 613 "/run/build/folks/folks/individual-aggregator.vala"
			folks_debug_print_heading (debug, domain, level, "Individual (%p)", _tmp37_);
#line 617 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp39_ = individual;
#line 617 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp40_ = folks_individual_get_is_user (_tmp39_);
#line 617 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp41_ = _tmp40_;
#line 617 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp41_) {
#line 617 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp38_ = "yes";
#line 2141 "individual-aggregator.c"
			} else {
#line 617 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp38_ = "no";
#line 2145 "individual-aggregator.c"
			}
#line 614 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp42_ = individual;
#line 614 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp43_ = ((GObject*) _tmp42_)->ref_count;
#line 614 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp44_ = g_strdup_printf ("%u", _tmp43_);
#line 614 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp45_ = _tmp44_;
#line 614 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp46_ = individual;
#line 614 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp47_ = folks_individual_get_id (_tmp46_);
#line 614 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp48_ = _tmp47_;
#line 614 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp49_ = trust_level;
#line 614 "/run/build/folks/folks/individual-aggregator.vala"
			folks_debug_print_key_value_pairs (debug, domain, level, "Ref. count", _tmp45_, "ID", _tmp48_, "User?", _tmp38_, "Trust level", _tmp49_, NULL);
#line 614 "/run/build/folks/folks/individual-aggregator.vala"
			_g_free0 (_tmp45_);
#line 620 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp50_ = individual;
#line 620 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp51_ = folks_individual_get_personas (_tmp50_);
#line 620 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp52_ = _tmp51_;
#line 620 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp53_ = gee_collection_get_size ((GeeCollection*) _tmp52_);
#line 620 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp54_ = _tmp53_;
#line 620 "/run/build/folks/folks/individual-aggregator.vala"
			folks_debug_print_line (debug, domain, level, "%u Personas:", (guint) _tmp54_);
#line 623 "/run/build/folks/folks/individual-aggregator.vala"
			folks_debug_indent (debug);
#line 2181 "individual-aggregator.c"
			{
				GeeIterator* _persona_it = NULL;
				FolksIndividual* _tmp55_;
				GeeSet* _tmp56_;
				GeeSet* _tmp57_;
				GeeIterator* _tmp58_;
#line 625 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp55_ = individual;
#line 625 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp56_ = folks_individual_get_personas (_tmp55_);
#line 625 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp57_ = _tmp56_;
#line 625 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp58_ = gee_iterable_iterator ((GeeIterable*) _tmp57_);
#line 625 "/run/build/folks/folks/individual-aggregator.vala"
				_persona_it = _tmp58_;
#line 625 "/run/build/folks/folks/individual-aggregator.vala"
				while (TRUE) {
#line 2200 "individual-aggregator.c"
					GeeIterator* _tmp59_;
					FolksPersona* persona = NULL;
					GeeIterator* _tmp60_;
					gpointer _tmp61_;
					FolksPersona* _tmp62_;
					const gchar* _tmp63_ = NULL;
					FolksPersona* _tmp64_;
					gboolean _tmp65_;
					gboolean _tmp66_;
					FolksPersona* _tmp67_;
					guint _tmp68_;
					gchar* _tmp69_;
					gchar* _tmp70_;
					FolksPersona* _tmp71_;
					const gchar* _tmp72_;
					const gchar* _tmp73_;
					FolksPersona* _tmp74_;
					const gchar* _tmp75_;
					const gchar* _tmp76_;
					FolksPersona* _tmp77_;
					const gchar* _tmp78_;
					const gchar* _tmp79_;
#line 625 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp59_ = _persona_it;
#line 625 "/run/build/folks/folks/individual-aggregator.vala"
					if (!gee_iterator_next (_tmp59_)) {
#line 625 "/run/build/folks/folks/individual-aggregator.vala"
						break;
#line 2229 "individual-aggregator.c"
					}
#line 625 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp60_ = _persona_it;
#line 625 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp61_ = gee_iterator_get (_tmp60_);
#line 625 "/run/build/folks/folks/individual-aggregator.vala"
					persona = (FolksPersona*) _tmp61_;
#line 627 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp62_ = persona;
#line 627 "/run/build/folks/folks/individual-aggregator.vala"
					folks_debug_print_heading (debug, domain, level, "Persona (%p)", _tmp62_);
#line 633 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp64_ = persona;
#line 633 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp65_ = folks_persona_get_is_user (_tmp64_);
#line 633 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp66_ = _tmp65_;
#line 633 "/run/build/folks/folks/individual-aggregator.vala"
					if (_tmp66_) {
#line 633 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp63_ = "yes";
#line 2251 "individual-aggregator.c"
					} else {
#line 633 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp63_ = "no";
#line 2255 "individual-aggregator.c"
					}
#line 628 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp67_ = persona;
#line 628 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp68_ = ((GObject*) _tmp67_)->ref_count;
#line 628 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp69_ = g_strdup_printf ("%u", _tmp68_);
#line 628 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp70_ = _tmp69_;
#line 628 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp71_ = persona;
#line 628 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp72_ = folks_persona_get_uid (_tmp71_);
#line 628 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp73_ = _tmp72_;
#line 628 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp74_ = persona;
#line 628 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp75_ = folks_persona_get_iid (_tmp74_);
#line 628 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp76_ = _tmp75_;
#line 628 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp77_ = persona;
#line 628 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp78_ = folks_persona_get_display_id (_tmp77_);
#line 628 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp79_ = _tmp78_;
#line 628 "/run/build/folks/folks/individual-aggregator.vala"
					folks_debug_print_key_value_pairs (debug, domain, level, "Ref. count", _tmp70_, "UID", _tmp73_, "IID", _tmp76_, "Display ID", _tmp79_, "User?", _tmp63_, NULL);
#line 628 "/run/build/folks/folks/individual-aggregator.vala"
					_g_free0 (_tmp70_);
#line 625 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (persona);
#line 2289 "individual-aggregator.c"
				}
#line 625 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_persona_it);
#line 2293 "individual-aggregator.c"
			}
#line 637 "/run/build/folks/folks/individual-aggregator.vala"
			folks_debug_unindent (debug);
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
			_g_free0 (trust_level);
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (individual);
#line 2301 "individual-aggregator.c"
		}
#line 597 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_individual_it);
#line 2305 "individual-aggregator.c"
	}
#line 640 "/run/build/folks/folks/individual-aggregator.vala"
	folks_debug_unindent (debug);
#line 642 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp80_ = self->priv->_link_map;
#line 642 "/run/build/folks/folks/individual-aggregator.vala"
	folks_debug_print_line (debug, domain, level, "%u keys in the link map:", g_hash_table_size (_tmp80_));
#line 644 "/run/build/folks/folks/individual-aggregator.vala"
	folks_debug_indent (debug);
#line 646 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp81_ = self->priv->_link_map;
#line 646 "/run/build/folks/folks/individual-aggregator.vala"
	g_hash_table_iter_init (&iter, _tmp81_);
#line 651 "/run/build/folks/folks/individual-aggregator.vala"
	while (TRUE) {
#line 2321 "individual-aggregator.c"
		gconstpointer _tmp82_ = NULL;
		gconstpointer _tmp83_ = NULL;
		gboolean _tmp84_;
		const gchar* _tmp85_;
#line 651 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp84_ = g_hash_table_iter_next (&iter, (gpointer*) (&_tmp82_), (gpointer*) (&_tmp83_));
#line 651 "/run/build/folks/folks/individual-aggregator.vala"
		link_key = _tmp82_;
#line 651 "/run/build/folks/folks/individual-aggregator.vala"
		individuals = _tmp83_;
#line 651 "/run/build/folks/folks/individual-aggregator.vala"
		if (!_tmp84_) {
#line 651 "/run/build/folks/folks/individual-aggregator.vala"
			break;
#line 2336 "individual-aggregator.c"
		}
#line 653 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp85_ = link_key;
#line 653 "/run/build/folks/folks/individual-aggregator.vala"
		folks_debug_print_line (debug, domain, level, "%s → {", _tmp85_);
#line 654 "/run/build/folks/folks/individual-aggregator.vala"
		folks_debug_indent (debug);
#line 2344 "individual-aggregator.c"
		{
			guint i = 0U;
#line 656 "/run/build/folks/folks/individual-aggregator.vala"
			i = (guint) 0;
#line 2349 "individual-aggregator.c"
			{
				gboolean _tmp86_ = FALSE;
#line 656 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp86_ = TRUE;
#line 656 "/run/build/folks/folks/individual-aggregator.vala"
				while (TRUE) {
#line 2356 "individual-aggregator.c"
					guint _tmp88_;
					GPtrArray* _tmp89_;
					gint _tmp90_;
					gint _tmp91_;
					FolksIndividual* ind = NULL;
					GPtrArray* _tmp92_;
					guint _tmp93_;
					gconstpointer _tmp94_;
					FolksIndividual* _tmp95_;
#line 656 "/run/build/folks/folks/individual-aggregator.vala"
					if (!_tmp86_) {
#line 2368 "individual-aggregator.c"
						guint _tmp87_;
#line 656 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp87_ = i;
#line 656 "/run/build/folks/folks/individual-aggregator.vala"
						i = _tmp87_ + 1;
#line 2374 "individual-aggregator.c"
					}
#line 656 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp86_ = FALSE;
#line 656 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp88_ = i;
#line 656 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp89_ = individuals;
#line 656 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp90_ = g_ptr_array_get_length (_tmp89_);
#line 656 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp91_ = _tmp90_;
#line 656 "/run/build/folks/folks/individual-aggregator.vala"
					if (!(_tmp88_ < ((guint) _tmp91_))) {
#line 656 "/run/build/folks/folks/individual-aggregator.vala"
						break;
#line 2390 "individual-aggregator.c"
					}
#line 658 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp92_ = individuals;
#line 658 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp93_ = i;
#line 658 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp94_ = g_ptr_array_index (_tmp92_, _tmp93_);
#line 658 "/run/build/folks/folks/individual-aggregator.vala"
					ind = (FolksIndividual*) _tmp94_;
#line 660 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp95_ = ind;
#line 660 "/run/build/folks/folks/individual-aggregator.vala"
					folks_debug_print_line (debug, domain, level, "%p", _tmp95_);
#line 2404 "individual-aggregator.c"
				}
			}
		}
#line 663 "/run/build/folks/folks/individual-aggregator.vala"
		folks_debug_unindent (debug);
#line 664 "/run/build/folks/folks/individual-aggregator.vala"
		folks_debug_print_line (debug, domain, level, "}");
#line 2412 "individual-aggregator.c"
	}
#line 667 "/run/build/folks/folks/individual-aggregator.vala"
	folks_debug_unindent (debug);
#line 670 "/run/build/folks/folks/individual-aggregator.vala"
	folks_debug_print_line (debug, domain, level, "%s", "");
#line 573 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (_tmp4_);
#line 2420 "individual-aggregator.c"
}


static void
folks_individual_aggregator_prepare_data_free (gpointer _data)
{
	FolksIndividualAggregatorPrepareData* _data_;
	_data_ = _data;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_slice_free (FolksIndividualAggregatorPrepareData, _data_);
#line 2433 "individual-aggregator.c"
}


static void
folks_individual_aggregator_prepare_async_ready_wrapper (GObject *source_object,
                                                         GAsyncResult *res,
                                                         void *user_data)
{
	FolksIndividualAggregatorPrepareData* _task_data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_task_data_->_callback_ != NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 2449 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_->_task_complete_ = TRUE;
#line 2453 "individual-aggregator.c"
}


void
folks_individual_aggregator_prepare (FolksIndividualAggregator* self,
                                     GAsyncReadyCallback _callback_,
                                     gpointer _user_data_)
{
	FolksIndividualAggregatorPrepareData* _data_;
	FolksIndividualAggregator* _tmp0_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_slice_new0 (FolksIndividualAggregatorPrepareData);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_callback_ = _callback_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_individual_aggregator_prepare_async_ready_wrapper, _user_data_);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_callback_ == NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_task_complete_ = TRUE;
#line 2474 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_individual_aggregator_prepare_data_free);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->self = _tmp0_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_prepare_co (_data_);
#line 2484 "individual-aggregator.c"
}


void
folks_individual_aggregator_prepare_finish (FolksIndividualAggregator* self,
                                            GAsyncResult* _res_,
                                            GError** error)
{
	FolksIndividualAggregatorPrepareData* _data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (NULL == _data_) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		return;
#line 2500 "individual-aggregator.c"
	}
}


/**
   * Prepare the IndividualAggregator for use.
   *
   * This loads all the available backends and prepares them for use by the
   * IndividualAggregator. This should be called //after// connecting to the
   * {@link IndividualAggregator.individuals_changed} signal (or
   * {@link IndividualAggregator.individuals_changed_detailed} signal), or a
   * race condition could occur, with the signal being emitted before your code
   * has connected to them, and {@link Individual}s getting "lost" as a result.
   *
   * This function is guaranteed to be idempotent (since version 0.3.0).
   *
   * Concurrent calls to this function from different threads will block until
   * preparation has completed. However, concurrent calls to this function from
   * a single thread might not, i.e. the first call will block but subsequent
   * calls might return before the first one. (Though they will be safe in every
   * other respect.)
   *
   * @throws GLib.Error if preparing any of the backends failed — this error
   * will be passed through from {@link BackendStore.load_backends}
   *
   * @since 0.1.11
   */
static void
folks_individual_aggregator_prepare_ready (GObject* source_object,
                                           GAsyncResult* _res_,
                                           gpointer _user_data_)
{
	FolksIndividualAggregatorPrepareData* _data_;
#line 732 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = _user_data_;
#line 732 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_source_object_ = source_object;
#line 732 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_res_ = _res_;
#line 732 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_task_complete_ = TRUE;
#line 732 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_prepare_co (_data_);
#line 2544 "individual-aggregator.c"
}


static gboolean
folks_individual_aggregator_prepare_co (FolksIndividualAggregatorPrepareData* _data_)
{
#line 696 "/run/build/folks/folks/individual-aggregator.vala"
	switch (_data_->_state_) {
#line 696 "/run/build/folks/folks/individual-aggregator.vala"
		case 0:
#line 2555 "individual-aggregator.c"
		goto _state_0;
#line 696 "/run/build/folks/folks/individual-aggregator.vala"
		case 1:
#line 2559 "individual-aggregator.c"
		goto _state_1;
		default:
#line 696 "/run/build/folks/folks/individual-aggregator.vala"
		g_assert_not_reached ();
#line 2564 "individual-aggregator.c"
	}
	_state_0:
#line 698 "/run/build/folks/folks/individual-aggregator.vala"
	folks_internal_profiling_start ("preparing IndividualAggregator", NULL);
#line 704 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp1_ = _data_->self->priv->_is_prepared;
#line 704 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_tmp1_) {
#line 704 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp0_ = TRUE;
#line 2575 "individual-aggregator.c"
	} else {
#line 704 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp2_ = _data_->self->priv->_prepare_pending;
#line 704 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp0_ = _data_->_tmp2_;
#line 2581 "individual-aggregator.c"
	}
#line 704 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_tmp0_) {
#line 706 "/run/build/folks/folks/individual-aggregator.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 706 "/run/build/folks/folks/individual-aggregator.vala"
		if (_data_->_state_ != 0) {
#line 706 "/run/build/folks/folks/individual-aggregator.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 706 "/run/build/folks/folks/individual-aggregator.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2593 "individual-aggregator.c"
			}
		}
#line 706 "/run/build/folks/folks/individual-aggregator.vala"
		g_object_unref (_data_->_async_result);
#line 706 "/run/build/folks/folks/individual-aggregator.vala"
		return FALSE;
#line 2600 "individual-aggregator.c"
	}
	{
#line 711 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->self->priv->_prepare_pending = TRUE;
#line 716 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp3_ = _data_->self->priv->_non_quiescent_backend_count;
#line 716 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->self->priv->_non_quiescent_backend_count = _data_->_tmp3_ + 1;
#line 718 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp4_ = _data_->self->priv->_backend_store;
#line 718 "/run/build/folks/folks/individual-aggregator.vala"
		g_signal_connect_object (_data_->_tmp4_, "backend-available", (GCallback) __folks_individual_aggregator_backend_available_cb_folks_backend_store_backend_available, _data_->self, 0);
#line 724 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp5_ = _data_->self->priv->_backend_store;
#line 724 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp6_ = folks_backend_store_get_enabled_backends (_data_->_tmp5_);
#line 724 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp7_ = _data_->_tmp6_;
#line 724 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp8_ = gee_map_get_values (_data_->_tmp7_);
#line 724 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp9_ = _data_->_tmp8_;
#line 724 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->backends = _data_->_tmp9_;
#line 2625 "individual-aggregator.c"
		{
#line 725 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp10_ = _data_->backends;
#line 725 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp11_ = gee_iterable_iterator ((GeeIterable*) _data_->_tmp10_);
#line 725 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_backend_it = _data_->_tmp11_;
#line 725 "/run/build/folks/folks/individual-aggregator.vala"
			while (TRUE) {
#line 725 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp12_ = _data_->_backend_it;
#line 725 "/run/build/folks/folks/individual-aggregator.vala"
				if (!gee_iterator_next (_data_->_tmp12_)) {
#line 725 "/run/build/folks/folks/individual-aggregator.vala"
					break;
#line 2641 "individual-aggregator.c"
				}
#line 725 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp13_ = _data_->_backend_it;
#line 725 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp14_ = gee_iterator_get (_data_->_tmp13_);
#line 725 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->backend = (FolksBackend*) _data_->_tmp14_;
#line 727 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp15_ = _data_->self->priv->_backend_store;
#line 727 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp16_ = _data_->backend;
#line 727 "/run/build/folks/folks/individual-aggregator.vala"
				_folks_individual_aggregator_backend_available_cb (_data_->self, _data_->_tmp15_, _data_->_tmp16_);
#line 725 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->backend);
#line 2657 "individual-aggregator.c"
			}
#line 725 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->_backend_it);
#line 2661 "individual-aggregator.c"
		}
#line 732 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp17_ = _data_->self->priv->_backend_store;
#line 732 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_state_ = 1;
#line 732 "/run/build/folks/folks/individual-aggregator.vala"
		folks_backend_store_load_backends (_data_->_tmp17_, folks_individual_aggregator_prepare_ready, _data_);
#line 732 "/run/build/folks/folks/individual-aggregator.vala"
		return FALSE;
#line 2671 "individual-aggregator.c"
		_state_1:
#line 732 "/run/build/folks/folks/individual-aggregator.vala"
		folks_backend_store_load_backends_finish (_data_->_tmp17_, _data_->_res_, &_data_->_inner_error_);
#line 732 "/run/build/folks/folks/individual-aggregator.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 732 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->backends);
#line 2679 "individual-aggregator.c"
			goto __finally17;
		}
#line 734 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp18_ = _data_->self->priv->_non_quiescent_backend_count;
#line 734 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->self->priv->_non_quiescent_backend_count = _data_->_tmp18_ - 1;
#line 736 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->self->priv->_is_prepared = TRUE;
#line 737 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->self->priv->_prepare_pending = FALSE;
#line 738 "/run/build/folks/folks/individual-aggregator.vala"
		g_object_notify ((GObject*) _data_->self, "is-prepared");
#line 744 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp19_ = _data_->self->priv->_is_quiescent;
#line 744 "/run/build/folks/folks/individual-aggregator.vala"
		if (_data_->_tmp19_ == FALSE) {
#line 746 "/run/build/folks/folks/individual-aggregator.vala"
			_folks_individual_aggregator_notify_if_is_quiescent (_data_->self);
#line 2698 "individual-aggregator.c"
		}
#line 709 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_data_->backends);
#line 2702 "individual-aggregator.c"
	}
	__finally17:
	{
#line 751 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->self->priv->_prepare_pending = FALSE;
#line 2708 "individual-aggregator.c"
	}
#line 709 "/run/build/folks/folks/individual-aggregator.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 709 "/run/build/folks/folks/individual-aggregator.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 709 "/run/build/folks/folks/individual-aggregator.vala"
		g_object_unref (_data_->_async_result);
#line 709 "/run/build/folks/folks/individual-aggregator.vala"
		return FALSE;
#line 2718 "individual-aggregator.c"
	}
#line 754 "/run/build/folks/folks/individual-aggregator.vala"
	folks_internal_profiling_end ("preparing IndividualAggregator", NULL);
#line 696 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 696 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_state_ != 0) {
#line 696 "/run/build/folks/folks/individual-aggregator.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 696 "/run/build/folks/folks/individual-aggregator.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2730 "individual-aggregator.c"
		}
	}
#line 696 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_unref (_data_->_async_result);
#line 696 "/run/build/folks/folks/individual-aggregator.vala"
	return FALSE;
#line 2737 "individual-aggregator.c"
}


static void
folks_individual_aggregator_unprepare_data_free (gpointer _data)
{
	FolksIndividualAggregatorUnprepareData* _data_;
	_data_ = _data;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_slice_free (FolksIndividualAggregatorUnprepareData, _data_);
#line 2750 "individual-aggregator.c"
}


static void
folks_individual_aggregator_unprepare_async_ready_wrapper (GObject *source_object,
                                                           GAsyncResult *res,
                                                           void *user_data)
{
	FolksIndividualAggregatorUnprepareData* _task_data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_task_data_->_callback_ != NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 2766 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_->_task_complete_ = TRUE;
#line 2770 "individual-aggregator.c"
}


void
folks_individual_aggregator_unprepare (FolksIndividualAggregator* self,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_)
{
	FolksIndividualAggregatorUnprepareData* _data_;
	FolksIndividualAggregator* _tmp0_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_slice_new0 (FolksIndividualAggregatorUnprepareData);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_callback_ = _callback_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_individual_aggregator_unprepare_async_ready_wrapper, _user_data_);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_callback_ == NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_task_complete_ = TRUE;
#line 2791 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_individual_aggregator_unprepare_data_free);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->self = _tmp0_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_unprepare_co (_data_);
#line 2801 "individual-aggregator.c"
}


void
folks_individual_aggregator_unprepare_finish (FolksIndividualAggregator* self,
                                              GAsyncResult* _res_,
                                              GError** error)
{
	FolksIndividualAggregatorUnprepareData* _data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (NULL == _data_) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		return;
#line 2817 "individual-aggregator.c"
	}
}


/**
   * Clean up and release resources used by the aggregator.
   *
   * This will disconnect the aggregator cleanly from any resources it or its
   * persona stores are using. It is recommended to call this method before
   * finalising the individual aggregator, but calling it is not required. If
   * this method is not called then, for example, unsaved changes in backends
   * may not be flushed.
   *
   * Concurrent calls to this function from different threads will block until
   * preparation has completed. However, concurrent calls to this function from
   * a single thread might not, i.e. the first call will block but subsequent
   * calls might return before the first one. (Though they will be safe in every
   * other respect.)
   *
   * @since 0.7.3
   * @throws GLib.Error if unpreparing the backend-specific services failed —
   * this will be a backend-specific error
   */
static void
folks_individual_aggregator_unprepare_ready (GObject* source_object,
                                             GAsyncResult* _res_,
                                             gpointer _user_data_)
{
	FolksIndividualAggregatorUnprepareData* _data_;
#line 788 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = _user_data_;
#line 788 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_source_object_ = source_object;
#line 788 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_res_ = _res_;
#line 788 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_task_complete_ = TRUE;
#line 788 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_unprepare_co (_data_);
#line 2857 "individual-aggregator.c"
}


static gboolean
folks_individual_aggregator_unprepare_co (FolksIndividualAggregatorUnprepareData* _data_)
{
#line 776 "/run/build/folks/folks/individual-aggregator.vala"
	switch (_data_->_state_) {
#line 776 "/run/build/folks/folks/individual-aggregator.vala"
		case 0:
#line 2868 "individual-aggregator.c"
		goto _state_0;
#line 776 "/run/build/folks/folks/individual-aggregator.vala"
		case 1:
#line 2872 "individual-aggregator.c"
		goto _state_1;
		default:
#line 776 "/run/build/folks/folks/individual-aggregator.vala"
		g_assert_not_reached ();
#line 2877 "individual-aggregator.c"
	}
	_state_0:
#line 778 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp1_ = _data_->self->priv->_is_prepared;
#line 778 "/run/build/folks/folks/individual-aggregator.vala"
	if (!_data_->_tmp1_) {
#line 778 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp0_ = TRUE;
#line 2886 "individual-aggregator.c"
	} else {
#line 778 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp2_ = _data_->self->priv->_prepare_pending;
#line 778 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp0_ = _data_->_tmp2_;
#line 2892 "individual-aggregator.c"
	}
#line 778 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_tmp0_) {
#line 780 "/run/build/folks/folks/individual-aggregator.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 780 "/run/build/folks/folks/individual-aggregator.vala"
		if (_data_->_state_ != 0) {
#line 780 "/run/build/folks/folks/individual-aggregator.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 780 "/run/build/folks/folks/individual-aggregator.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2904 "individual-aggregator.c"
			}
		}
#line 780 "/run/build/folks/folks/individual-aggregator.vala"
		g_object_unref (_data_->_async_result);
#line 780 "/run/build/folks/folks/individual-aggregator.vala"
		return FALSE;
#line 2911 "individual-aggregator.c"
	}
	{
		{
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp3_ = _data_->self->priv->_stores;
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp4_ = gee_abstract_map_get_values ((GeeAbstractMap*) _data_->_tmp3_);
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp5_ = _data_->_tmp4_;
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp6_ = _data_->_tmp5_;
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp7_ = gee_iterable_iterator ((GeeIterable*) _data_->_tmp6_);
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp8_ = _data_->_tmp7_;
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->_tmp6_);
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_p_it = _data_->_tmp8_;
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
			while (TRUE) {
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp9_ = _data_->_p_it;
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
				if (!gee_iterator_next (_data_->_tmp9_)) {
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
					break;
#line 2939 "individual-aggregator.c"
				}
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp10_ = _data_->_p_it;
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp11_ = gee_iterator_get (_data_->_tmp10_);
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->p = (FolksPersonaStore*) _data_->_tmp11_;
#line 788 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp12_ = _data_->p;
#line 788 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_state_ = 1;
#line 788 "/run/build/folks/folks/individual-aggregator.vala"
				folks_persona_store_flush (_data_->_tmp12_, folks_individual_aggregator_unprepare_ready, _data_);
#line 788 "/run/build/folks/folks/individual-aggregator.vala"
				return FALSE;
#line 2955 "individual-aggregator.c"
				_state_1:
#line 788 "/run/build/folks/folks/individual-aggregator.vala"
				folks_persona_store_flush_finish (_data_->_tmp12_, _data_->_res_);
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->p);
#line 2961 "individual-aggregator.c"
			}
#line 786 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->_p_it);
#line 2965 "individual-aggregator.c"
		}
	}
	__finally18:
	{
#line 793 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->self->priv->_prepare_pending = FALSE;
#line 2972 "individual-aggregator.c"
	}
#line 783 "/run/build/folks/folks/individual-aggregator.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 783 "/run/build/folks/folks/individual-aggregator.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 783 "/run/build/folks/folks/individual-aggregator.vala"
		g_object_unref (_data_->_async_result);
#line 783 "/run/build/folks/folks/individual-aggregator.vala"
		return FALSE;
#line 2982 "individual-aggregator.c"
	}
#line 776 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 776 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_state_ != 0) {
#line 776 "/run/build/folks/folks/individual-aggregator.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 776 "/run/build/folks/folks/individual-aggregator.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2992 "individual-aggregator.c"
		}
	}
#line 776 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_unref (_data_->_async_result);
#line 776 "/run/build/folks/folks/individual-aggregator.vala"
	return FALSE;
#line 2999 "individual-aggregator.c"
}


/**
   * Get all matches for a given {@link Individual}.
   *
   * @param matchee the individual to find matches for
   * @param min_threshold the threshold for accepting a match
   * @return a map from matched individuals to the degree with which they match
   * ``matchee`` (which is guaranteed to at least equal ``min_threshold``);
   * if no matches could be found, an empty map is returned
   *
   * @since 0.5.1
   */
GeeMap*
folks_individual_aggregator_get_potential_matches (FolksIndividualAggregator* self,
                                                   FolksIndividual* matchee,
                                                   FolksMatchResult min_threshold)
{
	GeeMap* result = NULL;
	GeeHashMap* matches = NULL;
	GeeHashMap* _tmp0_;
	FolksPotentialMatch* matchObj = NULL;
	FolksPotentialMatch* _tmp1_;
#line 808 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 808 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (matchee != NULL, NULL);
#line 811 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = gee_hash_map_new (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, FOLKS_TYPE_MATCH_RESULT, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 811 "/run/build/folks/folks/individual-aggregator.vala"
	matches = _tmp0_;
#line 813 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = folks_potential_match_new ();
#line 813 "/run/build/folks/folks/individual-aggregator.vala"
	matchObj = _tmp1_;
#line 3036 "individual-aggregator.c"
	{
		GeeIterator* _i_it = NULL;
		GeeMap* _tmp2_;
		GeeCollection* _tmp3_;
		GeeCollection* _tmp4_;
		GeeCollection* _tmp5_;
		GeeIterator* _tmp6_;
		GeeIterator* _tmp7_;
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = self->priv->_individuals;
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp3_ = gee_map_get_values (_tmp2_);
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp4_ = _tmp3_;
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp5_ = _tmp4_;
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp6_ = gee_iterable_iterator ((GeeIterable*) _tmp5_);
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp7_ = _tmp6_;
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_tmp5_);
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
		_i_it = _tmp7_;
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 3063 "individual-aggregator.c"
			GeeIterator* _tmp8_;
			FolksIndividual* i = NULL;
			GeeIterator* _tmp9_;
			gpointer _tmp10_;
			FolksIndividual* _tmp11_;
			const gchar* _tmp12_;
			const gchar* _tmp13_;
			const gchar* _tmp14_;
			const gchar* _tmp15_;
			FolksMatchResult _result_ = 0;
			FolksPotentialMatch* _tmp16_;
			FolksIndividual* _tmp17_;
			FolksMatchResult _tmp18_;
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp8_ = _i_it;
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
			if (!gee_iterator_next (_tmp8_)) {
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 3083 "individual-aggregator.c"
			}
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp9_ = _i_it;
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp10_ = gee_iterator_get (_tmp9_);
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
			i = (FolksIndividual*) _tmp10_;
#line 817 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp11_ = i;
#line 817 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp12_ = folks_individual_get_id (_tmp11_);
#line 817 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp13_ = _tmp12_;
#line 817 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp14_ = folks_individual_get_id (matchee);
#line 817 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp15_ = _tmp14_;
#line 817 "/run/build/folks/folks/individual-aggregator.vala"
			if (g_strcmp0 (_tmp13_, _tmp15_) == 0) {
#line 818 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (i);
#line 818 "/run/build/folks/folks/individual-aggregator.vala"
				continue;
#line 3107 "individual-aggregator.c"
			}
#line 820 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp16_ = matchObj;
#line 820 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp17_ = i;
#line 820 "/run/build/folks/folks/individual-aggregator.vala"
			_result_ = folks_potential_match_potential_match (_tmp16_, _tmp17_, matchee);
#line 821 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp18_ = _result_;
#line 821 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp18_ >= min_threshold) {
#line 3119 "individual-aggregator.c"
				GeeHashMap* _tmp19_;
				FolksIndividual* _tmp20_;
				FolksMatchResult _tmp21_;
#line 823 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp19_ = matches;
#line 823 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp20_ = i;
#line 823 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp21_ = _result_;
#line 823 "/run/build/folks/folks/individual-aggregator.vala"
				gee_abstract_map_set ((GeeAbstractMap*) _tmp19_, _tmp20_, (gpointer) ((gintptr) _tmp21_));
#line 3131 "individual-aggregator.c"
			}
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (i);
#line 3135 "individual-aggregator.c"
		}
#line 815 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_i_it);
#line 3139 "individual-aggregator.c"
	}
#line 827 "/run/build/folks/folks/individual-aggregator.vala"
	result = (GeeMap*) matches;
#line 827 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (matchObj);
#line 827 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 3147 "individual-aggregator.c"
}


/**
   * Get all combinations between all {@link Individual}s.
   *
   * @param min_threshold the threshold for accepting a match
   * @return a map from each individual in the aggregator to a map of the
   * other individuals in the aggregator which can be matched with that
   * individual, mapped to the degree with which they match the original
   * individual (which is guaranteed to at least equal ``min_threshold``)
   *
   * @since 0.5.1
   */
GeeMap*
folks_individual_aggregator_get_all_potential_matches (FolksIndividualAggregator* self,
                                                       FolksMatchResult min_threshold)
{
	GeeMap* result = NULL;
	GeeHashMap* matches = NULL;
	GeeHashMap* _tmp0_;
	FolksIndividual** individuals = NULL;
	GeeMap* _tmp1_;
	GeeCollection* _tmp2_;
	GeeCollection* _tmp3_;
	GeeCollection* _tmp4_;
	gint _tmp5_ = 0;
	gpointer* _tmp6_;
	FolksIndividual** _tmp7_;
	gint _tmp7__length1;
	gint individuals_length1;
	gint _individuals_size_;
	FolksPotentialMatch* matchObj = NULL;
	FolksPotentialMatch* _tmp8_;
#line 841 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 845 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = gee_hash_map_new (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, GEE_TYPE_HASH_MAP, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 845 "/run/build/folks/folks/individual-aggregator.vala"
	matches = _tmp0_;
#line 847 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = self->priv->_individuals;
#line 847 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = gee_map_get_values (_tmp1_);
#line 847 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = _tmp2_;
#line 847 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp4_ = _tmp3_;
#line 847 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp6_ = gee_collection_to_array (_tmp4_, &_tmp5_);
#line 847 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp7_ = _tmp6_;
#line 847 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp7__length1 = _tmp5_;
#line 847 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_tmp4_);
#line 847 "/run/build/folks/folks/individual-aggregator.vala"
	individuals = _tmp7_;
#line 847 "/run/build/folks/folks/individual-aggregator.vala"
	individuals_length1 = _tmp7__length1;
#line 847 "/run/build/folks/folks/individual-aggregator.vala"
	_individuals_size_ = individuals_length1;
#line 848 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp8_ = folks_potential_match_new ();
#line 848 "/run/build/folks/folks/individual-aggregator.vala"
	matchObj = _tmp8_;
#line 3214 "individual-aggregator.c"
	{
		gint i = 0;
#line 850 "/run/build/folks/folks/individual-aggregator.vala"
		i = 0;
#line 3219 "individual-aggregator.c"
		{
			gboolean _tmp9_ = FALSE;
#line 850 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp9_ = TRUE;
#line 850 "/run/build/folks/folks/individual-aggregator.vala"
			while (TRUE) {
#line 3226 "individual-aggregator.c"
				gint _tmp11_;
				FolksIndividual** _tmp12_;
				gint _tmp12__length1;
				FolksIndividual* a = NULL;
				FolksIndividual** _tmp13_;
				gint _tmp13__length1;
				gint _tmp14_;
				FolksIndividual* _tmp15_;
				FolksIndividual* _tmp16_;
				GeeHashMap* _matches_a = NULL;
				GeeHashMap* _tmp17_;
				FolksIndividual* _tmp18_;
				gpointer _tmp19_;
				GeeHashMap* matches_a = NULL;
				GeeHashMap* _tmp20_;
#line 850 "/run/build/folks/folks/individual-aggregator.vala"
				if (!_tmp9_) {
#line 3244 "individual-aggregator.c"
					gint _tmp10_;
#line 850 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp10_ = i;
#line 850 "/run/build/folks/folks/individual-aggregator.vala"
					i = _tmp10_ + 1;
#line 3250 "individual-aggregator.c"
				}
#line 850 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp9_ = FALSE;
#line 850 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp11_ = i;
#line 850 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp12_ = individuals;
#line 850 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp12__length1 = individuals_length1;
#line 850 "/run/build/folks/folks/individual-aggregator.vala"
				if (!(_tmp11_ < _tmp12__length1)) {
#line 850 "/run/build/folks/folks/individual-aggregator.vala"
					break;
#line 3264 "individual-aggregator.c"
				}
#line 852 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp13_ = individuals;
#line 852 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp13__length1 = individuals_length1;
#line 852 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp14_ = i;
#line 852 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp15_ = _tmp13_[_tmp14_];
#line 852 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp16_ = _g_object_ref0 (_tmp15_);
#line 852 "/run/build/folks/folks/individual-aggregator.vala"
				a = _tmp16_;
#line 854 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp17_ = matches;
#line 854 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp18_ = a;
#line 854 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp19_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp17_, _tmp18_);
#line 854 "/run/build/folks/folks/individual-aggregator.vala"
				_matches_a = (GeeHashMap*) _tmp19_;
#line 856 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp20_ = _matches_a;
#line 856 "/run/build/folks/folks/individual-aggregator.vala"
				if (_tmp20_ == NULL) {
#line 3290 "individual-aggregator.c"
					GeeHashMap* _tmp21_;
					GeeHashMap* _tmp22_;
					FolksIndividual* _tmp23_;
					GeeHashMap* _tmp24_;
#line 858 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp21_ = gee_hash_map_new (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, FOLKS_TYPE_MATCH_RESULT, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 858 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (matches_a);
#line 858 "/run/build/folks/folks/individual-aggregator.vala"
					matches_a = _tmp21_;
#line 859 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp22_ = matches;
#line 859 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp23_ = a;
#line 859 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp24_ = matches_a;
#line 859 "/run/build/folks/folks/individual-aggregator.vala"
					gee_abstract_map_set ((GeeAbstractMap*) _tmp22_, _tmp23_, _tmp24_);
#line 3309 "individual-aggregator.c"
				} else {
					GeeHashMap* _tmp25_;
					GeeHashMap* _tmp26_;
#line 863 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp25_ = _matches_a;
#line 863 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp26_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp25_, GEE_TYPE_HASH_MAP, GeeHashMap));
#line 863 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (matches_a);
#line 863 "/run/build/folks/folks/individual-aggregator.vala"
					matches_a = _tmp26_;
#line 3321 "individual-aggregator.c"
				}
				{
					gint f = 0;
					gint _tmp27_;
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp27_ = i;
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
					f = _tmp27_ + 1;
#line 3330 "individual-aggregator.c"
					{
						gboolean _tmp28_ = FALSE;
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp28_ = TRUE;
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
						while (TRUE) {
#line 3337 "individual-aggregator.c"
							gint _tmp30_;
							FolksIndividual** _tmp31_;
							gint _tmp31__length1;
							FolksIndividual* b = NULL;
							FolksIndividual** _tmp32_;
							gint _tmp32__length1;
							gint _tmp33_;
							FolksIndividual* _tmp34_;
							FolksIndividual* _tmp35_;
							GeeHashMap* _matches_b = NULL;
							GeeHashMap* _tmp36_;
							FolksIndividual* _tmp37_;
							gpointer _tmp38_;
							GeeHashMap* matches_b = NULL;
							GeeHashMap* _tmp39_;
							FolksMatchResult _result_ = 0;
							FolksPotentialMatch* _tmp46_;
							FolksIndividual* _tmp47_;
							FolksIndividual* _tmp48_;
							FolksMatchResult _tmp49_;
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
							if (!_tmp28_) {
#line 3360 "individual-aggregator.c"
								gint _tmp29_;
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp29_ = f;
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
								f = _tmp29_ + 1;
#line 3366 "individual-aggregator.c"
							}
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp28_ = FALSE;
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp30_ = f;
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp31_ = individuals;
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp31__length1 = individuals_length1;
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
							if (!(_tmp30_ < _tmp31__length1)) {
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
								break;
#line 3380 "individual-aggregator.c"
							}
#line 868 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp32_ = individuals;
#line 868 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp32__length1 = individuals_length1;
#line 868 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp33_ = f;
#line 868 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp34_ = _tmp32_[_tmp33_];
#line 868 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp35_ = _g_object_ref0 (_tmp34_);
#line 868 "/run/build/folks/folks/individual-aggregator.vala"
							b = _tmp35_;
#line 870 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp36_ = matches;
#line 870 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp37_ = b;
#line 870 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp38_ = gee_abstract_map_get ((GeeAbstractMap*) _tmp36_, _tmp37_);
#line 870 "/run/build/folks/folks/individual-aggregator.vala"
							_matches_b = (GeeHashMap*) _tmp38_;
#line 872 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp39_ = _matches_b;
#line 872 "/run/build/folks/folks/individual-aggregator.vala"
							if (_tmp39_ == NULL) {
#line 3406 "individual-aggregator.c"
								GeeHashMap* _tmp40_;
								GeeHashMap* _tmp41_;
								FolksIndividual* _tmp42_;
								GeeHashMap* _tmp43_;
#line 874 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp40_ = gee_hash_map_new (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, FOLKS_TYPE_MATCH_RESULT, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 874 "/run/build/folks/folks/individual-aggregator.vala"
								_g_object_unref0 (matches_b);
#line 874 "/run/build/folks/folks/individual-aggregator.vala"
								matches_b = _tmp40_;
#line 875 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp41_ = matches;
#line 875 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp42_ = b;
#line 875 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp43_ = matches_b;
#line 875 "/run/build/folks/folks/individual-aggregator.vala"
								gee_abstract_map_set ((GeeAbstractMap*) _tmp41_, _tmp42_, _tmp43_);
#line 3425 "individual-aggregator.c"
							} else {
								GeeHashMap* _tmp44_;
								GeeHashMap* _tmp45_;
#line 879 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp44_ = _matches_b;
#line 879 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp45_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp44_, GEE_TYPE_HASH_MAP, GeeHashMap));
#line 879 "/run/build/folks/folks/individual-aggregator.vala"
								_g_object_unref0 (matches_b);
#line 879 "/run/build/folks/folks/individual-aggregator.vala"
								matches_b = _tmp45_;
#line 3437 "individual-aggregator.c"
							}
#line 882 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp46_ = matchObj;
#line 882 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp47_ = a;
#line 882 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp48_ = b;
#line 882 "/run/build/folks/folks/individual-aggregator.vala"
							_result_ = folks_potential_match_potential_match (_tmp46_, _tmp47_, _tmp48_);
#line 884 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp49_ = _result_;
#line 884 "/run/build/folks/folks/individual-aggregator.vala"
							if (_tmp49_ >= min_threshold) {
#line 3451 "individual-aggregator.c"
								GeeHashMap* _tmp50_;
								FolksIndividual* _tmp51_;
								FolksMatchResult _tmp52_;
								GeeHashMap* _tmp53_;
								FolksIndividual* _tmp54_;
								FolksMatchResult _tmp55_;
#line 886 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp50_ = matches_a;
#line 886 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp51_ = b;
#line 886 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp52_ = _result_;
#line 886 "/run/build/folks/folks/individual-aggregator.vala"
								gee_abstract_map_set ((GeeAbstractMap*) _tmp50_, _tmp51_, (gpointer) ((gintptr) _tmp52_));
#line 887 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp53_ = matches_b;
#line 887 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp54_ = a;
#line 887 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp55_ = _result_;
#line 887 "/run/build/folks/folks/individual-aggregator.vala"
								gee_abstract_map_set ((GeeAbstractMap*) _tmp53_, _tmp54_, (gpointer) ((gintptr) _tmp55_));
#line 3474 "individual-aggregator.c"
							}
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
							_g_object_unref0 (matches_b);
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
							_g_object_unref0 (_matches_b);
#line 866 "/run/build/folks/folks/individual-aggregator.vala"
							_g_object_unref0 (b);
#line 3482 "individual-aggregator.c"
						}
					}
				}
#line 850 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (matches_a);
#line 850 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_matches_a);
#line 850 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (a);
#line 3492 "individual-aggregator.c"
			}
		}
	}
#line 892 "/run/build/folks/folks/individual-aggregator.vala"
	result = (GeeMap*) matches;
#line 892 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (matchObj);
#line 892 "/run/build/folks/folks/individual-aggregator.vala"
	individuals = (_vala_array_free (individuals, individuals_length1, (GDestroyNotify) g_object_unref), NULL);
#line 892 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 3504 "individual-aggregator.c"
}


static void
__folks_individual_aggregator_backend_persona_store_added_cb_folks_backend_persona_store_added (FolksBackend* _sender,
                                                                                                FolksPersonaStore* store,
                                                                                                gpointer self)
{
#line 901 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_backend_persona_store_added_cb ((FolksIndividualAggregator*) self, _sender, store);
#line 3515 "individual-aggregator.c"
}


static void
__folks_individual_aggregator_backend_persona_store_removed_cb_folks_backend_persona_store_removed (FolksBackend* _sender,
                                                                                                    FolksPersonaStore* store,
                                                                                                    gpointer self)
{
#line 903 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_backend_persona_store_removed_cb ((FolksIndividualAggregator*) self, _sender, store);
#line 3526 "individual-aggregator.c"
}


static void
__folks_individual_aggregator_backend_is_quiescent_changed_cb_g_object_notify (GObject* _sender,
                                                                               GParamSpec* pspec,
                                                                               gpointer self)
{
#line 905 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_backend_is_quiescent_changed_cb ((FolksIndividualAggregator*) self, _sender, pspec);
#line 3537 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_add_backend (FolksIndividualAggregator* self,
                                          FolksBackend* backend)
{
	FolksSmallSet* _tmp0_;
#line 895 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 895 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (backend != NULL);
#line 897 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_backends;
#line 897 "/run/build/folks/folks/individual-aggregator.vala"
	if (!gee_abstract_collection_contains ((GeeAbstractCollection*) _tmp0_, backend)) {
#line 3554 "individual-aggregator.c"
		FolksSmallSet* _tmp1_;
		FolksPersonaStore** stores = NULL;
		GeeMap* _tmp2_;
		GeeMap* _tmp3_;
		GeeCollection* _tmp4_;
		GeeCollection* _tmp5_;
		GeeCollection* _tmp6_;
		gint _tmp7_ = 0;
		gpointer* _tmp8_;
		FolksPersonaStore** _tmp9_;
		gint _tmp9__length1;
		gint stores_length1;
		gint _stores_size_;
		FolksPersonaStore** _tmp10_;
		gint _tmp10__length1;
#line 899 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = self->priv->_backends;
#line 899 "/run/build/folks/folks/individual-aggregator.vala"
		gee_abstract_collection_add ((GeeAbstractCollection*) _tmp1_, backend);
#line 901 "/run/build/folks/folks/individual-aggregator.vala"
		g_signal_connect_object (backend, "persona-store-added", (GCallback) __folks_individual_aggregator_backend_persona_store_added_cb_folks_backend_persona_store_added, self, 0);
#line 903 "/run/build/folks/folks/individual-aggregator.vala"
		g_signal_connect_object (backend, "persona-store-removed", (GCallback) __folks_individual_aggregator_backend_persona_store_removed_cb_folks_backend_persona_store_removed, self, 0);
#line 905 "/run/build/folks/folks/individual-aggregator.vala"
		g_signal_connect_object ((GObject*) backend, "notify::is-quiescent", (GCallback) __folks_individual_aggregator_backend_is_quiescent_changed_cb_g_object_notify, self, 0);
#line 911 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = folks_backend_get_persona_stores (backend);
#line 911 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp3_ = _tmp2_;
#line 911 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp4_ = gee_map_get_values (_tmp3_);
#line 911 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp5_ = _tmp4_;
#line 911 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp6_ = _tmp5_;
#line 911 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp8_ = gee_collection_to_array (_tmp6_, &_tmp7_);
#line 911 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp9_ = _tmp8_;
#line 911 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp9__length1 = _tmp7_;
#line 911 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_tmp6_);
#line 911 "/run/build/folks/folks/individual-aggregator.vala"
		stores = _tmp9_;
#line 911 "/run/build/folks/folks/individual-aggregator.vala"
		stores_length1 = _tmp9__length1;
#line 911 "/run/build/folks/folks/individual-aggregator.vala"
		_stores_size_ = stores_length1;
#line 912 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp10_ = stores;
#line 912 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp10__length1 = stores_length1;
#line 3608 "individual-aggregator.c"
		{
			FolksPersonaStore** persona_store_collection = NULL;
			gint persona_store_collection_length1 = 0;
			gint _persona_store_collection_size_ = 0;
			gint persona_store_it = 0;
#line 912 "/run/build/folks/folks/individual-aggregator.vala"
			persona_store_collection = _tmp10_;
#line 912 "/run/build/folks/folks/individual-aggregator.vala"
			persona_store_collection_length1 = _tmp10__length1;
#line 912 "/run/build/folks/folks/individual-aggregator.vala"
			for (persona_store_it = 0; persona_store_it < _tmp10__length1; persona_store_it = persona_store_it + 1) {
#line 3620 "individual-aggregator.c"
				FolksPersonaStore* _tmp11_;
				FolksPersonaStore* persona_store = NULL;
#line 912 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp11_ = _g_object_ref0 (persona_store_collection[persona_store_it]);
#line 912 "/run/build/folks/folks/individual-aggregator.vala"
				persona_store = _tmp11_;
#line 3627 "individual-aggregator.c"
				{
					FolksPersonaStore* _tmp12_;
#line 914 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp12_ = persona_store;
#line 914 "/run/build/folks/folks/individual-aggregator.vala"
					_folks_individual_aggregator_backend_persona_store_added_cb (self, backend, _tmp12_);
#line 912 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (persona_store);
#line 3636 "individual-aggregator.c"
				}
			}
		}
#line 897 "/run/build/folks/folks/individual-aggregator.vala"
		stores = (_vala_array_free (stores, stores_length1, (GDestroyNotify) g_object_unref), NULL);
#line 3642 "individual-aggregator.c"
	}
}


static gboolean
__folks_individual_aggregator_quiescent_timeout_cb_gsource_func (gpointer self)
{
	gboolean result;
	result = _folks_individual_aggregator_quiescent_timeout_cb ((FolksIndividualAggregator*) self);
#line 935 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 3654 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_backend_available_cb (FolksIndividualAggregator* self,
                                                   FolksBackendStore* backend_store,
                                                   FolksBackend* backend)
{
	gboolean _tmp0_;
	gboolean _tmp1_;
#line 919 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 919 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (backend_store != NULL);
#line 919 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (backend != NULL);
#line 927 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = folks_backend_get_is_quiescent (backend);
#line 927 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = _tmp0_;
#line 927 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp1_ == FALSE) {
#line 3677 "individual-aggregator.c"
		guint _tmp2_;
		guint _tmp3_;
#line 929 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = self->priv->_non_quiescent_backend_count;
#line 929 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_non_quiescent_backend_count = _tmp2_ + 1;
#line 933 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp3_ = self->priv->_quiescent_timeout_id;
#line 933 "/run/build/folks/folks/individual-aggregator.vala"
		if (_tmp3_ == ((guint) 0)) {
#line 935 "/run/build/folks/folks/individual-aggregator.vala"
			self->priv->_quiescent_timeout_id = g_timeout_add_seconds_full (G_PRIORITY_DEFAULT, FOLKS_INDIVIDUAL_AGGREGATOR__QUIESCENT_TIMEOUT, __folks_individual_aggregator_quiescent_timeout_cb_gsource_func, g_object_ref (self), g_object_unref);
#line 3690 "individual-aggregator.c"
		}
	}
#line 941 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_add_backend (self, backend);
#line 3695 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_set_primary_store (FolksIndividualAggregator* self,
                                                FolksPersonaStore* store)
{
	FolksPersonaStore* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
#line 944 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 944 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (store != NULL);
#line 946 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:946: _set_primary_store()");
#line 948 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_primary_store;
#line 948 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp0_ == store) {
#line 949 "/run/build/folks/folks/individual-aggregator.vala"
		return;
#line 3719 "individual-aggregator.c"
	}
#line 957 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = folks_persona_store_get_type_id (store);
#line 957 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = _tmp1_;
#line 957 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = self->priv->_configured_primary_store_type_id;
#line 957 "/run/build/folks/folks/individual-aggregator.vala"
	if (g_strcmp0 (_tmp2_, _tmp3_) == 0) {
#line 3729 "individual-aggregator.c"
		gboolean _tmp4_ = FALSE;
		gboolean _tmp5_ = FALSE;
		const gchar* _tmp6_;
		const gchar* _tmp7_;
#line 959 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp6_ = folks_persona_store_get_type_id (store);
#line 959 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp7_ = _tmp6_;
#line 959 "/run/build/folks/folks/individual-aggregator.vala"
		if (g_strcmp0 (_tmp7_, "eds") != 0) {
#line 3740 "individual-aggregator.c"
			const gchar* _tmp8_;
#line 960 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp8_ = self->priv->_configured_primary_store_id;
#line 960 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp5_ = g_strcmp0 (_tmp8_, "") == 0;
#line 3746 "individual-aggregator.c"
		} else {
#line 959 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp5_ = FALSE;
#line 3750 "individual-aggregator.c"
		}
#line 959 "/run/build/folks/folks/individual-aggregator.vala"
		if (_tmp5_) {
#line 959 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp4_ = TRUE;
#line 3756 "individual-aggregator.c"
		} else {
			const gchar* _tmp9_;
			const gchar* _tmp10_;
			const gchar* _tmp11_;
#line 961 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp9_ = self->priv->_configured_primary_store_id;
#line 961 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp10_ = folks_persona_store_get_id (store);
#line 961 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp11_ = _tmp10_;
#line 961 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp4_ = g_strcmp0 (_tmp9_, _tmp11_) == 0;
#line 3769 "individual-aggregator.c"
		}
#line 959 "/run/build/folks/folks/individual-aggregator.vala"
		if (_tmp4_) {
#line 3773 "individual-aggregator.c"
			const gchar* _tmp12_;
			const gchar* _tmp13_;
			const gchar* _tmp14_;
			const gchar* _tmp15_;
			FolksPersonaStore* previous_store = NULL;
			FolksPersonaStore* _tmp16_;
			FolksPersonaStore* _tmp17_;
			FolksPersonaStore* _tmp18_;
			FolksPersonaStore* _tmp21_;
#line 963 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp12_ = folks_persona_store_get_type_id (store);
#line 963 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp13_ = _tmp12_;
#line 963 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp14_ = folks_persona_store_get_id (store);
#line 963 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp15_ = _tmp14_;
#line 963 "/run/build/folks/folks/individual-aggregator.vala"
			g_debug ("individual-aggregator.vala:963: Setting primary store to %p (type ID: " \
"%s, ID: %s)", store, _tmp13_, _tmp15_);
#line 966 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp16_ = self->priv->_primary_store;
#line 966 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp17_ = _g_object_ref0 (_tmp16_);
#line 966 "/run/build/folks/folks/individual-aggregator.vala"
			previous_store = _tmp17_;
#line 967 "/run/build/folks/folks/individual-aggregator.vala"
			self->priv->_primary_store = store;
#line 969 "/run/build/folks/folks/individual-aggregator.vala"
			g_object_freeze_notify ((GObject*) store);
#line 970 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp18_ = previous_store;
#line 970 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp18_ != NULL) {
#line 3807 "individual-aggregator.c"
				FolksPersonaStore* _tmp19_;
				FolksPersonaStore* _tmp20_;
#line 972 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp19_ = previous_store;
#line 972 "/run/build/folks/folks/individual-aggregator.vala"
				g_object_freeze_notify ((GObject*) G_TYPE_CHECK_INSTANCE_CAST (_tmp19_, FOLKS_TYPE_PERSONA_STORE, FolksPersonaStore));
#line 973 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp20_ = previous_store;
#line 973 "/run/build/folks/folks/individual-aggregator.vala"
				folks_persona_store_set_is_primary_store (G_TYPE_CHECK_INSTANCE_CAST (_tmp20_, FOLKS_TYPE_PERSONA_STORE, FolksPersonaStore), FALSE);
#line 3818 "individual-aggregator.c"
			}
#line 975 "/run/build/folks/folks/individual-aggregator.vala"
			folks_persona_store_set_is_primary_store (store, TRUE);
#line 976 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp21_ = previous_store;
#line 976 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp21_ != NULL) {
#line 3826 "individual-aggregator.c"
				FolksPersonaStore* _tmp22_;
#line 977 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp22_ = previous_store;
#line 977 "/run/build/folks/folks/individual-aggregator.vala"
				g_object_thaw_notify ((GObject*) G_TYPE_CHECK_INSTANCE_CAST (_tmp22_, FOLKS_TYPE_PERSONA_STORE, FolksPersonaStore));
#line 3832 "individual-aggregator.c"
			}
#line 978 "/run/build/folks/folks/individual-aggregator.vala"
			g_object_thaw_notify ((GObject*) store);
#line 980 "/run/build/folks/folks/individual-aggregator.vala"
			g_object_notify ((GObject*) self, "primary-store");
#line 959 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (previous_store);
#line 3840 "individual-aggregator.c"
		}
	}
}


static Block4Data*
block4_data_ref (Block4Data* _data4_)
{
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
	g_atomic_int_inc (&_data4_->_ref_count_);
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
	return _data4_;
#line 3853 "individual-aggregator.c"
}


static void
block4_data_unref (void * _userdata_)
{
	Block4Data* _data4_;
	_data4_ = (Block4Data*) _userdata_;
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
	if (g_atomic_int_dec_and_test (&_data4_->_ref_count_)) {
#line 3864 "individual-aggregator.c"
		FolksIndividualAggregator* self;
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
		self = _data4_->self;
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (_data4_->store_id);
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_data4_->store);
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (self);
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
		g_slice_free (Block4Data, _data4_);
#line 3876 "individual-aggregator.c"
	}
}


static void
__folks_individual_aggregator_personas_changed_cb_folks_persona_store_personas_changed (FolksPersonaStore* _sender,
                                                                                        GeeSet* added,
                                                                                        GeeSet* removed,
                                                                                        const gchar* message,
                                                                                        FolksPersona* actor,
                                                                                        FolksGroupDetailsChangeReason reason,
                                                                                        gpointer self)
{
#line 997 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_personas_changed_cb ((FolksIndividualAggregator*) self, _sender, added, removed, message, actor, reason);
#line 3892 "individual-aggregator.c"
}


static void
__folks_individual_aggregator_is_primary_store_changed_cb_g_object_notify (GObject* _sender,
                                                                           GParamSpec* pspec,
                                                                           gpointer self)
{
#line 998 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_is_primary_store_changed_cb ((FolksIndividualAggregator*) self, _sender, pspec);
#line 3903 "individual-aggregator.c"
}


static void
__folks_individual_aggregator_persona_store_is_quiescent_changed_cb_g_object_notify (GObject* _sender,
                                                                                     GParamSpec* pspec,
                                                                                     gpointer self)
{
#line 1000 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_persona_store_is_quiescent_changed_cb ((FolksIndividualAggregator*) self, _sender, pspec);
#line 3914 "individual-aggregator.c"
}


static void
__folks_individual_aggregator_persona_store_is_user_set_default_changed_cb_g_object_notify (GObject* _sender,
                                                                                            GParamSpec* pspec,
                                                                                            gpointer self)
{
#line 1002 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_persona_store_is_user_set_default_changed_cb ((FolksIndividualAggregator*) self, _sender, pspec);
#line 3925 "individual-aggregator.c"
}


static void
__lambda69_ (Block4Data* _data4_,
             GObject* obj,
             GAsyncResult* _result_)
{
	FolksIndividualAggregator* self;
	GError * _inner_error_ = NULL;
#line 1042 "/run/build/folks/folks/individual-aggregator.vala"
	self = _data4_->self;
#line 1042 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (_result_ != NULL);
#line 3940 "individual-aggregator.c"
	{
#line 1046 "/run/build/folks/folks/individual-aggregator.vala"
		folks_persona_store_prepare_finish (_data4_->store, _result_, &_inner_error_);
#line 1046 "/run/build/folks/folks/individual-aggregator.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 3946 "individual-aggregator.c"
			goto __catch19_g_error;
		}
	}
	goto __finally19;
	__catch19_g_error:
	{
		GError* e = NULL;
		const gchar* _tmp0_;
		GError* _tmp1_;
		const gchar* _tmp2_;
#line 1044 "/run/build/folks/folks/individual-aggregator.vala"
		e = _inner_error_;
#line 1044 "/run/build/folks/folks/individual-aggregator.vala"
		_inner_error_ = NULL;
#line 1052 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp0_ = _data4_->store_id;
#line 1052 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = e;
#line 1052 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = _tmp1_->message;
#line 1052 "/run/build/folks/folks/individual-aggregator.vala"
		g_warning (_ ("Error preparing persona store ‘%s’: %s"), _tmp0_, _tmp2_);
#line 1044 "/run/build/folks/folks/individual-aggregator.vala"
		_g_error_free0 (e);
#line 3971 "individual-aggregator.c"
	}
	__finally19:
#line 1044 "/run/build/folks/folks/individual-aggregator.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 1044 "/run/build/folks/folks/individual-aggregator.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 1044 "/run/build/folks/folks/individual-aggregator.vala"
		g_clear_error (&_inner_error_);
#line 1044 "/run/build/folks/folks/individual-aggregator.vala"
		return;
#line 3982 "individual-aggregator.c"
	}
}


static void
___lambda69__gasync_ready_callback (GObject* source_object,
                                    GAsyncResult* res,
                                    gpointer self)
{
#line 1042 "/run/build/folks/folks/individual-aggregator.vala"
	__lambda69_ (self, source_object, res);
#line 1042 "/run/build/folks/folks/individual-aggregator.vala"
	block4_data_unref (self);
#line 3996 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_backend_persona_store_added_cb (FolksIndividualAggregator* self,
                                                             FolksBackend* backend,
                                                             FolksPersonaStore* store)
{
	Block4Data* _data4_;
	FolksPersonaStore* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	GeeHashMap* _tmp10_;
	const gchar* _tmp11_;
	gboolean _tmp12_;
	gboolean _tmp13_;
	GeeMap* _tmp16_;
	GeeMap* _tmp17_;
	gint _tmp18_;
	gint _tmp19_;
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (backend != NULL);
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (store != NULL);
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
	_data4_ = g_slice_new0 (Block4Data);
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
	_data4_->_ref_count_ = 1;
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
	_data4_->self = g_object_ref (self);
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (store);
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data4_->store);
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
	_data4_->store = _tmp0_;
#line 988 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = folks_backend_get_name (backend);
#line 988 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = _tmp1_;
#line 988 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = folks_persona_store_get_id (_data4_->store);
#line 988 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp4_ = _tmp3_;
#line 988 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:988: _backend_persona_store_added_cb(): bac" \
"kend: %s, store: %s (%p)", _tmp2_, _tmp4_, _data4_->store);
#line 991 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp5_ = folks_persona_store_get_type_id (_data4_->store);
#line 991 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp6_ = _tmp5_;
#line 991 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp7_ = folks_persona_store_get_id (_data4_->store);
#line 991 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp8_ = _tmp7_;
#line 991 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp9_ = _folks_individual_aggregator_get_store_full_id (self, _tmp6_, _tmp8_);
#line 991 "/run/build/folks/folks/individual-aggregator.vala"
	_data4_->store_id = _tmp9_;
#line 993 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_maybe_configure_as_primary (self, _data4_->store);
#line 994 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_set_primary_store (self, _data4_->store);
#line 996 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp10_ = self->priv->_stores;
#line 996 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp11_ = _data4_->store_id;
#line 996 "/run/build/folks/folks/individual-aggregator.vala"
	gee_abstract_map_set ((GeeAbstractMap*) _tmp10_, _tmp11_, _data4_->store);
#line 997 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_connect_object (_data4_->store, "personas-changed", (GCallback) __folks_individual_aggregator_personas_changed_cb_folks_persona_store_personas_changed, self, 0);
#line 998 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_connect_object ((GObject*) _data4_->store, "notify::is-primary-store", (GCallback) __folks_individual_aggregator_is_primary_store_changed_cb_g_object_notify, self, 0);
#line 1000 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_connect_object ((GObject*) _data4_->store, "notify::is-quiescent", (GCallback) __folks_individual_aggregator_persona_store_is_quiescent_changed_cb_g_object_notify, self, 0);
#line 1002 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_connect_object ((GObject*) _data4_->store, "notify::is-user-set-default", (GCallback) __folks_individual_aggregator_persona_store_is_user_set_default_changed_cb_g_object_notify, self, 0);
#line 1010 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp12_ = folks_persona_store_get_is_quiescent (_data4_->store);
#line 1010 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp13_ = _tmp12_;
#line 1010 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp13_ == FALSE) {
#line 4088 "individual-aggregator.c"
		guint _tmp14_;
		guint _tmp15_;
#line 1012 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp14_ = self->priv->_non_quiescent_persona_store_count;
#line 1012 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_non_quiescent_persona_store_count = _tmp14_ + 1;
#line 1016 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp15_ = self->priv->_quiescent_timeout_id;
#line 1016 "/run/build/folks/folks/individual-aggregator.vala"
		if (_tmp15_ == ((guint) 0)) {
#line 1018 "/run/build/folks/folks/individual-aggregator.vala"
			self->priv->_quiescent_timeout_id = g_timeout_add_seconds_full (G_PRIORITY_DEFAULT, FOLKS_INDIVIDUAL_AGGREGATOR__QUIESCENT_TIMEOUT, __folks_individual_aggregator_quiescent_timeout_cb_gsource_func, g_object_ref (self), g_object_unref);
#line 4101 "individual-aggregator.c"
		}
	}
#line 1027 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp16_ = folks_persona_store_get_personas (_data4_->store);
#line 1027 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp17_ = _tmp16_;
#line 1027 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp18_ = gee_map_get_size (_tmp17_);
#line 1027 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp19_ = _tmp18_;
#line 1027 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp19_ > 0) {
#line 4114 "individual-aggregator.c"
		GeeHashSet* persona_set = NULL;
		GeeHashSet* _tmp20_;
		GeeHashSet* _tmp33_;
		FolksSmallSet* _tmp34_;
		FolksSmallSet* _tmp35_;
#line 1029 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp20_ = gee_hash_set_new (FOLKS_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1029 "/run/build/folks/folks/individual-aggregator.vala"
		persona_set = _tmp20_;
#line 4124 "individual-aggregator.c"
		{
			GeeIterator* _p_it = NULL;
			GeeMap* _tmp21_;
			GeeMap* _tmp22_;
			GeeCollection* _tmp23_;
			GeeCollection* _tmp24_;
			GeeCollection* _tmp25_;
			GeeIterator* _tmp26_;
			GeeIterator* _tmp27_;
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp21_ = folks_persona_store_get_personas (_data4_->store);
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp22_ = _tmp21_;
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp23_ = gee_map_get_values (_tmp22_);
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp24_ = _tmp23_;
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp25_ = _tmp24_;
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp26_ = gee_iterable_iterator ((GeeIterable*) _tmp25_);
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp27_ = _tmp26_;
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_tmp25_);
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
			_p_it = _tmp27_;
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
			while (TRUE) {
#line 4154 "individual-aggregator.c"
				GeeIterator* _tmp28_;
				FolksPersona* p = NULL;
				GeeIterator* _tmp29_;
				gpointer _tmp30_;
				GeeHashSet* _tmp31_;
				FolksPersona* _tmp32_;
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp28_ = _p_it;
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
				if (!gee_iterator_next (_tmp28_)) {
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
					break;
#line 4167 "individual-aggregator.c"
				}
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp29_ = _p_it;
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp30_ = gee_iterator_get (_tmp29_);
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
				p = (FolksPersona*) _tmp30_;
#line 1032 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp31_ = persona_set;
#line 1032 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp32_ = p;
#line 1032 "/run/build/folks/folks/individual-aggregator.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp31_, _tmp32_);
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (p);
#line 4183 "individual-aggregator.c"
			}
#line 1030 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_p_it);
#line 4187 "individual-aggregator.c"
		}
#line 1035 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp33_ = persona_set;
#line 1035 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp34_ = folks_small_set_empty (FOLKS_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref);
#line 1035 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp35_ = _tmp34_;
#line 1035 "/run/build/folks/folks/individual-aggregator.vala"
		_folks_individual_aggregator_personas_changed_cb (self, _data4_->store, (GeeSet*) _tmp33_, (GeeSet*) _tmp35_, NULL, NULL, FOLKS_GROUP_DETAILS_CHANGE_REASON_NONE);
#line 1035 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_tmp35_);
#line 1027 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (persona_set);
#line 4201 "individual-aggregator.c"
	}
#line 1042 "/run/build/folks/folks/individual-aggregator.vala"
	folks_persona_store_prepare (_data4_->store, ___lambda69__gasync_ready_callback, block4_data_ref (_data4_));
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
	block4_data_unref (_data4_);
#line 985 "/run/build/folks/folks/individual-aggregator.vala"
	_data4_ = NULL;
#line 4209 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_backend_persona_store_removed_cb (FolksIndividualAggregator* self,
                                                               FolksBackend* backend,
                                                               FolksPersonaStore* store)
{
	guint _tmp0_;
	guint _tmp1_;
	GQuark _tmp2_;
	guint _tmp3_;
	GQuark _tmp4_;
	guint _tmp5_;
	GQuark _tmp6_;
	gboolean _tmp7_ = FALSE;
	gboolean _tmp8_;
	GeeHashSet* removed_personas = NULL;
	GeeHashSet* _tmp12_;
	GeeMapIterator* iter = NULL;
	GeeMap* _tmp13_;
	GeeMap* _tmp14_;
	GeeMapIterator* _tmp15_;
	FolksSmallSet* _tmp21_;
	FolksSmallSet* _tmp22_;
	GeeHashSet* _tmp23_;
	FolksPersonaStore* _tmp24_;
	GeeHashMap* _tmp29_;
	const gchar* _tmp30_;
	const gchar* _tmp31_;
	const gchar* _tmp32_;
	const gchar* _tmp33_;
	gchar* _tmp34_;
	gchar* _tmp35_;
#line 1058 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1058 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (backend != NULL);
#line 1058 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (store != NULL);
#line 1061 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_parse_name ("personas-changed", FOLKS_TYPE_PERSONA_STORE, &_tmp0_, NULL, FALSE);
#line 1061 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_handlers_disconnect_matched (store, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp0_, 0, NULL, (GCallback) __folks_individual_aggregator_personas_changed_cb_folks_persona_store_personas_changed, self);
#line 1062 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_parse_name ("notify::is-quiescent", G_TYPE_OBJECT, &_tmp1_, &_tmp2_, TRUE);
#line 1062 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_handlers_disconnect_matched ((GObject*) store, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_DETAIL | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp1_, _tmp2_, NULL, (GCallback) __folks_individual_aggregator_persona_store_is_quiescent_changed_cb_g_object_notify, self);
#line 1064 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_parse_name ("notify::is-primary-store", G_TYPE_OBJECT, &_tmp3_, &_tmp4_, TRUE);
#line 1064 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_handlers_disconnect_matched ((GObject*) store, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_DETAIL | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp3_, _tmp4_, NULL, (GCallback) __folks_individual_aggregator_is_primary_store_changed_cb_g_object_notify, self);
#line 1066 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_parse_name ("notify::is-user-set-default", G_TYPE_OBJECT, &_tmp5_, &_tmp6_, TRUE);
#line 1066 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_handlers_disconnect_matched ((GObject*) store, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_DETAIL | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp5_, _tmp6_, NULL, (GCallback) __folks_individual_aggregator_persona_store_is_user_set_default_changed_cb_g_object_notify, self);
#line 1071 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp8_ = self->priv->_is_quiescent;
#line 1071 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp8_ == FALSE) {
#line 4270 "individual-aggregator.c"
		gboolean _tmp9_;
		gboolean _tmp10_;
#line 1071 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp9_ = folks_persona_store_get_is_quiescent (store);
#line 1071 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp10_ = _tmp9_;
#line 1071 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp7_ = _tmp10_ == FALSE;
#line 4279 "individual-aggregator.c"
	} else {
#line 1071 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp7_ = FALSE;
#line 4283 "individual-aggregator.c"
	}
#line 1071 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp7_) {
#line 4287 "individual-aggregator.c"
		guint _tmp11_;
#line 1073 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp11_ = self->priv->_non_quiescent_persona_store_count;
#line 1073 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_non_quiescent_persona_store_count = _tmp11_ - 1;
#line 1074 "/run/build/folks/folks/individual-aggregator.vala"
		_folks_individual_aggregator_notify_if_is_quiescent (self);
#line 4295 "individual-aggregator.c"
	}
#line 1086 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp12_ = gee_hash_set_new (FOLKS_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1086 "/run/build/folks/folks/individual-aggregator.vala"
	removed_personas = _tmp12_;
#line 1087 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp13_ = folks_persona_store_get_personas (store);
#line 1087 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp14_ = _tmp13_;
#line 1087 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp15_ = gee_map_map_iterator (_tmp14_);
#line 1087 "/run/build/folks/folks/individual-aggregator.vala"
	iter = _tmp15_;
#line 1089 "/run/build/folks/folks/individual-aggregator.vala"
	while (TRUE) {
#line 4311 "individual-aggregator.c"
		GeeMapIterator* _tmp16_;
		GeeHashSet* _tmp17_;
		GeeMapIterator* _tmp18_;
		gpointer _tmp19_;
		FolksPersona* _tmp20_;
#line 1089 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp16_ = iter;
#line 1089 "/run/build/folks/folks/individual-aggregator.vala"
		if (!(gee_map_iterator_next (_tmp16_) == TRUE)) {
#line 1089 "/run/build/folks/folks/individual-aggregator.vala"
			break;
#line 4323 "individual-aggregator.c"
		}
#line 1091 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp17_ = removed_personas;
#line 1091 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp18_ = iter;
#line 1091 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp19_ = gee_map_iterator_get_value (_tmp18_);
#line 1091 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp20_ = (FolksPersona*) _tmp19_;
#line 1091 "/run/build/folks/folks/individual-aggregator.vala"
		gee_abstract_collection_add ((GeeAbstractCollection*) _tmp17_, _tmp20_);
#line 1091 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_tmp20_);
#line 4337 "individual-aggregator.c"
	}
#line 1093 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp21_ = folks_small_set_empty (FOLKS_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref);
#line 1093 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp22_ = _tmp21_;
#line 1093 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp23_ = removed_personas;
#line 1093 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_personas_changed_cb (self, store, (GeeSet*) _tmp22_, (GeeSet*) _tmp23_, NULL, NULL, FOLKS_GROUP_DETAILS_CHANGE_REASON_NONE);
#line 1093 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_tmp22_);
#line 1096 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp24_ = self->priv->_primary_store;
#line 1096 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp24_ == store) {
#line 4353 "individual-aggregator.c"
		const gchar* _tmp25_;
		const gchar* _tmp26_;
		const gchar* _tmp27_;
		const gchar* _tmp28_;
#line 1098 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp25_ = folks_persona_store_get_type_id (store);
#line 1098 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp26_ = _tmp25_;
#line 1098 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp27_ = folks_persona_store_get_id (store);
#line 1098 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp28_ = _tmp27_;
#line 1098 "/run/build/folks/folks/individual-aggregator.vala"
		g_debug ("Unsetting primary store as store %p (type ID: %s, ID: %s) " "has been removed", store, _tmp26_, _tmp28_);
#line 1100 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_primary_store = NULL;
#line 1101 "/run/build/folks/folks/individual-aggregator.vala"
		g_object_notify ((GObject*) self, "primary-store");
#line 4372 "individual-aggregator.c"
	}
#line 1103 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp29_ = self->priv->_stores;
#line 1103 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp30_ = folks_persona_store_get_type_id (store);
#line 1103 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp31_ = _tmp30_;
#line 1103 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp32_ = folks_persona_store_get_id (store);
#line 1103 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp33_ = _tmp32_;
#line 1103 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp34_ = _folks_individual_aggregator_get_store_full_id (self, _tmp31_, _tmp33_);
#line 1103 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp35_ = _tmp34_;
#line 1103 "/run/build/folks/folks/individual-aggregator.vala"
	gee_abstract_map_unset ((GeeAbstractMap*) _tmp29_, _tmp35_, NULL);
#line 1103 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (_tmp35_);
#line 1058 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (iter);
#line 1058 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (removed_personas);
#line 4396 "individual-aggregator.c"
}


static gchar*
_folks_individual_aggregator_get_store_full_id (FolksIndividualAggregator* self,
                                                const gchar* type_id,
                                                const gchar* id)
{
	gchar* result = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
#line 1106 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 1106 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (type_id != NULL, NULL);
#line 1106 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (id != NULL, NULL);
#line 1108 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = g_strconcat (type_id, ":", NULL);
#line 1108 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = _tmp0_;
#line 1108 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = g_strconcat (_tmp1_, id, NULL);
#line 1108 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = _tmp2_;
#line 1108 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (_tmp1_);
#line 1108 "/run/build/folks/folks/individual-aggregator.vala"
	result = _tmp3_;
#line 1108 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 4430 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_emit_individuals_changed (FolksIndividualAggregator* self,
                                                       GeeSet* added,
                                                       GeeSet* removed,
                                                       GeeMultiMap* changes,
                                                       const gchar* message,
                                                       FolksPersona* actor,
                                                       FolksGroupDetailsChangeReason reason)
{
	GeeSet* _added = NULL;
	GeeSet* _removed = NULL;
	GeeMultiMap* _changes = NULL;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp2_ = FALSE;
	GeeSet* _tmp11_ = NULL;
	GeeSet* _tmp14_;
	GeeSet* _tmp15_ = NULL;
	GeeSet* _tmp18_;
	FolksDebug* _tmp21_;
	gboolean _tmp22_;
	gboolean _tmp23_;
	GeeSet* _tmp70_;
	GeeSet* _tmp71_;
	GeeSet* _tmp72_;
	GeeSet* _tmp73_;
	GeeSet* _tmp74_;
	GeeSet* _tmp75_;
	GeeSet* _tmp76_;
	GeeSet* _tmp77_;
	GeeMultiMap* _tmp78_;
#line 1114 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1125 "/run/build/folks/folks/individual-aggregator.vala"
	if (added == NULL) {
#line 1125 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = TRUE;
#line 4471 "individual-aggregator.c"
	} else {
		gint _tmp3_;
		gint _tmp4_;
#line 1125 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp3_ = gee_collection_get_size ((GeeCollection*) G_TYPE_CHECK_INSTANCE_CAST (added, GEE_TYPE_SET, GeeSet));
#line 1125 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp4_ = _tmp3_;
#line 1125 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = _tmp4_ == 0;
#line 4481 "individual-aggregator.c"
	}
#line 1125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp2_) {
#line 4485 "individual-aggregator.c"
		gboolean _tmp5_ = FALSE;
#line 1126 "/run/build/folks/folks/individual-aggregator.vala"
		if (removed == NULL) {
#line 1126 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp5_ = TRUE;
#line 4491 "individual-aggregator.c"
		} else {
			gint _tmp6_;
			gint _tmp7_;
#line 1126 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp6_ = gee_collection_get_size ((GeeCollection*) G_TYPE_CHECK_INSTANCE_CAST (removed, GEE_TYPE_SET, GeeSet));
#line 1126 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp7_ = _tmp6_;
#line 1126 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp5_ = _tmp7_ == 0;
#line 4501 "individual-aggregator.c"
		}
#line 1126 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = _tmp5_;
#line 4505 "individual-aggregator.c"
	} else {
#line 1125 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = FALSE;
#line 4509 "individual-aggregator.c"
	}
#line 1125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp1_) {
#line 4513 "individual-aggregator.c"
		gboolean _tmp8_ = FALSE;
#line 1127 "/run/build/folks/folks/individual-aggregator.vala"
		if (changes == NULL) {
#line 1127 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp8_ = TRUE;
#line 4519 "individual-aggregator.c"
		} else {
			gint _tmp9_;
			gint _tmp10_;
#line 1127 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp9_ = gee_multi_map_get_size (G_TYPE_CHECK_INSTANCE_CAST (changes, GEE_TYPE_MULTI_MAP, GeeMultiMap));
#line 1127 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp10_ = _tmp9_;
#line 1127 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp8_ = _tmp10_ == 0;
#line 4529 "individual-aggregator.c"
		}
#line 1127 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp0_ = _tmp8_;
#line 4533 "individual-aggregator.c"
	} else {
#line 1125 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp0_ = FALSE;
#line 4537 "individual-aggregator.c"
	}
#line 1125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp0_) {
#line 1130 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_changes);
#line 1130 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_removed);
#line 1130 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_added);
#line 1130 "/run/build/folks/folks/individual-aggregator.vala"
		return;
#line 4549 "individual-aggregator.c"
	}
#line 1133 "/run/build/folks/folks/individual-aggregator.vala"
	folks_internal_profiling_point ("%s", "emitting " "IndividualAggregator::individuals-changed");
#line 1136 "/run/build/folks/folks/individual-aggregator.vala"
	if (added != NULL) {
#line 4555 "individual-aggregator.c"
		GeeSet* _tmp12_;
#line 1136 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp12_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (added, GEE_TYPE_SET, GeeSet));
#line 1136 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_tmp11_);
#line 1136 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp11_ = _tmp12_;
#line 4563 "individual-aggregator.c"
	} else {
		FolksSmallSet* _tmp13_;
#line 1136 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp13_ = folks_small_set_empty (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref);
#line 1136 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_tmp11_);
#line 1136 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp11_ = (GeeSet*) _tmp13_;
#line 4572 "individual-aggregator.c"
	}
#line 1136 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp14_ = _g_object_ref0 (_tmp11_);
#line 1136 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_added);
#line 1136 "/run/build/folks/folks/individual-aggregator.vala"
	_added = _tmp14_;
#line 1137 "/run/build/folks/folks/individual-aggregator.vala"
	if (removed != NULL) {
#line 4582 "individual-aggregator.c"
		GeeSet* _tmp16_;
#line 1137 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp16_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (removed, GEE_TYPE_SET, GeeSet));
#line 1137 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_tmp15_);
#line 1137 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp15_ = _tmp16_;
#line 4590 "individual-aggregator.c"
	} else {
		FolksSmallSet* _tmp17_;
#line 1137 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp17_ = folks_small_set_empty (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref);
#line 1137 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_tmp15_);
#line 1137 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp15_ = (GeeSet*) _tmp17_;
#line 4599 "individual-aggregator.c"
	}
#line 1137 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp18_ = _g_object_ref0 (_tmp15_);
#line 1137 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_removed);
#line 1137 "/run/build/folks/folks/individual-aggregator.vala"
	_removed = _tmp18_;
#line 1139 "/run/build/folks/folks/individual-aggregator.vala"
	if (changes != NULL) {
#line 4609 "individual-aggregator.c"
		GeeMultiMap* _tmp19_;
#line 1141 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp19_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (changes, GEE_TYPE_MULTI_MAP, GeeMultiMap));
#line 1141 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_changes);
#line 1141 "/run/build/folks/folks/individual-aggregator.vala"
		_changes = _tmp19_;
#line 4617 "individual-aggregator.c"
	} else {
		GeeHashMultiMap* _tmp20_;
#line 1145 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp20_ = gee_hash_multi_map_new (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1145 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_changes);
#line 1145 "/run/build/folks/folks/individual-aggregator.vala"
		_changes = (GeeMultiMap*) _tmp20_;
#line 4626 "individual-aggregator.c"
	}
#line 1149 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp21_ = self->priv->_debug;
#line 1149 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp22_ = folks_debug_get_debug_output_enabled (_tmp21_);
#line 1149 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp23_ = _tmp22_;
#line 1149 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp23_ == TRUE) {
#line 4636 "individual-aggregator.c"
		GeeMultiMap* _tmp24_;
		gint _tmp25_;
		gint _tmp26_;
		GeeMapIterator* iter = NULL;
		GeeMultiMap* _tmp27_;
		GeeMapIterator* _tmp28_;
#line 1151 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp24_ = _changes;
#line 1151 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp25_ = gee_multi_map_get_size (_tmp24_);
#line 1151 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp26_ = _tmp25_;
#line 1151 "/run/build/folks/folks/individual-aggregator.vala"
		g_debug ("individual-aggregator.vala:1151: Emitting individuals-changed-detailed" \
" with %u mappings:", (guint) _tmp26_);
#line 1154 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp27_ = _changes;
#line 1154 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp28_ = gee_multi_map_map_iterator (_tmp27_);
#line 1154 "/run/build/folks/folks/individual-aggregator.vala"
		iter = _tmp28_;
#line 1156 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 4659 "individual-aggregator.c"
			GeeMapIterator* _tmp29_;
			FolksIndividual* removed_ind = NULL;
			GeeMapIterator* _tmp30_;
			gpointer _tmp31_;
			FolksIndividual* added_ind = NULL;
			GeeMapIterator* _tmp32_;
			gpointer _tmp33_;
			const gchar* _tmp34_ = NULL;
			FolksIndividual* _tmp35_;
			const gchar* _tmp39_ = NULL;
			FolksIndividual* _tmp40_;
			FolksIndividual* _tmp44_;
			FolksIndividual* _tmp45_;
			FolksIndividual* _tmp46_;
			FolksIndividual* _tmp58_;
#line 1156 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp29_ = iter;
#line 1156 "/run/build/folks/folks/individual-aggregator.vala"
			if (!gee_map_iterator_next (_tmp29_)) {
#line 1156 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 4681 "individual-aggregator.c"
			}
#line 1158 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp30_ = iter;
#line 1158 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp31_ = gee_map_iterator_get_key (_tmp30_);
#line 1158 "/run/build/folks/folks/individual-aggregator.vala"
			removed_ind = (FolksIndividual*) _tmp31_;
#line 1159 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp32_ = iter;
#line 1159 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp33_ = gee_map_iterator_get_value (_tmp32_);
#line 1159 "/run/build/folks/folks/individual-aggregator.vala"
			added_ind = (FolksIndividual*) _tmp33_;
#line 1162 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp35_ = removed_ind;
#line 1162 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp35_ != NULL) {
#line 4699 "individual-aggregator.c"
				FolksIndividual* _tmp36_;
				const gchar* _tmp37_;
				const gchar* _tmp38_;
#line 1162 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp36_ = removed_ind;
#line 1162 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp37_ = folks_individual_get_id (G_TYPE_CHECK_INSTANCE_CAST (_tmp36_, FOLKS_TYPE_INDIVIDUAL, FolksIndividual));
#line 1162 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp38_ = _tmp37_;
#line 1162 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp34_ = _tmp38_;
#line 4711 "individual-aggregator.c"
			} else {
#line 1162 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp34_ = "";
#line 4715 "individual-aggregator.c"
			}
#line 1164 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp40_ = added_ind;
#line 1164 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp40_ != NULL) {
#line 4721 "individual-aggregator.c"
				FolksIndividual* _tmp41_;
				const gchar* _tmp42_;
				const gchar* _tmp43_;
#line 1164 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp41_ = added_ind;
#line 1164 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp42_ = folks_individual_get_id (G_TYPE_CHECK_INSTANCE_CAST (_tmp41_, FOLKS_TYPE_INDIVIDUAL, FolksIndividual));
#line 1164 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp43_ = _tmp42_;
#line 1164 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp39_ = _tmp43_;
#line 4733 "individual-aggregator.c"
			} else {
#line 1164 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp39_ = "";
#line 4737 "individual-aggregator.c"
			}
#line 1161 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp44_ = removed_ind;
#line 1161 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp45_ = added_ind;
#line 1161 "/run/build/folks/folks/individual-aggregator.vala"
			g_debug ("individual-aggregator.vala:1161:     %s (%p) → %s (%p)", _tmp34_, _tmp44_, _tmp39_, _tmp45_);
#line 1166 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp46_ = removed_ind;
#line 1166 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp46_ != NULL) {
#line 1168 "/run/build/folks/folks/individual-aggregator.vala"
				g_debug ("individual-aggregator.vala:1168:       Removed individual's personas:");
#line 4751 "individual-aggregator.c"
				{
					GeeIterator* _p_it = NULL;
					FolksIndividual* _tmp47_;
					GeeSet* _tmp48_;
					GeeSet* _tmp49_;
					GeeIterator* _tmp50_;
#line 1170 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp47_ = removed_ind;
#line 1170 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp48_ = folks_individual_get_personas (G_TYPE_CHECK_INSTANCE_CAST (_tmp47_, FOLKS_TYPE_INDIVIDUAL, FolksIndividual));
#line 1170 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp49_ = _tmp48_;
#line 1170 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp50_ = gee_iterable_iterator ((GeeIterable*) _tmp49_);
#line 1170 "/run/build/folks/folks/individual-aggregator.vala"
					_p_it = _tmp50_;
#line 1170 "/run/build/folks/folks/individual-aggregator.vala"
					while (TRUE) {
#line 4770 "individual-aggregator.c"
						GeeIterator* _tmp51_;
						FolksPersona* p = NULL;
						GeeIterator* _tmp52_;
						gpointer _tmp53_;
						FolksPersona* _tmp54_;
						const gchar* _tmp55_;
						const gchar* _tmp56_;
						FolksPersona* _tmp57_;
#line 1170 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp51_ = _p_it;
#line 1170 "/run/build/folks/folks/individual-aggregator.vala"
						if (!gee_iterator_next (_tmp51_)) {
#line 1170 "/run/build/folks/folks/individual-aggregator.vala"
							break;
#line 4785 "individual-aggregator.c"
						}
#line 1170 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp52_ = _p_it;
#line 1170 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp53_ = gee_iterator_get (_tmp52_);
#line 1170 "/run/build/folks/folks/individual-aggregator.vala"
						p = (FolksPersona*) _tmp53_;
#line 1172 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp54_ = p;
#line 1172 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp55_ = folks_persona_get_uid (_tmp54_);
#line 1172 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp56_ = _tmp55_;
#line 1172 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp57_ = p;
#line 1172 "/run/build/folks/folks/individual-aggregator.vala"
						g_debug ("individual-aggregator.vala:1172:         %s (%p)", _tmp56_, _tmp57_);
#line 1170 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (p);
#line 4805 "individual-aggregator.c"
					}
#line 1170 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_p_it);
#line 4809 "individual-aggregator.c"
				}
			}
#line 1176 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp58_ = added_ind;
#line 1176 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp58_ != NULL) {
#line 1178 "/run/build/folks/folks/individual-aggregator.vala"
				g_debug ("individual-aggregator.vala:1178:       Added individual's personas:");
#line 4818 "individual-aggregator.c"
				{
					GeeIterator* _p_it = NULL;
					FolksIndividual* _tmp59_;
					GeeSet* _tmp60_;
					GeeSet* _tmp61_;
					GeeIterator* _tmp62_;
#line 1180 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp59_ = added_ind;
#line 1180 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp60_ = folks_individual_get_personas (G_TYPE_CHECK_INSTANCE_CAST (_tmp59_, FOLKS_TYPE_INDIVIDUAL, FolksIndividual));
#line 1180 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp61_ = _tmp60_;
#line 1180 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp62_ = gee_iterable_iterator ((GeeIterable*) _tmp61_);
#line 1180 "/run/build/folks/folks/individual-aggregator.vala"
					_p_it = _tmp62_;
#line 1180 "/run/build/folks/folks/individual-aggregator.vala"
					while (TRUE) {
#line 4837 "individual-aggregator.c"
						GeeIterator* _tmp63_;
						FolksPersona* p = NULL;
						GeeIterator* _tmp64_;
						gpointer _tmp65_;
						FolksPersona* _tmp66_;
						const gchar* _tmp67_;
						const gchar* _tmp68_;
						FolksPersona* _tmp69_;
#line 1180 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp63_ = _p_it;
#line 1180 "/run/build/folks/folks/individual-aggregator.vala"
						if (!gee_iterator_next (_tmp63_)) {
#line 1180 "/run/build/folks/folks/individual-aggregator.vala"
							break;
#line 4852 "individual-aggregator.c"
						}
#line 1180 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp64_ = _p_it;
#line 1180 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp65_ = gee_iterator_get (_tmp64_);
#line 1180 "/run/build/folks/folks/individual-aggregator.vala"
						p = (FolksPersona*) _tmp65_;
#line 1182 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp66_ = p;
#line 1182 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp67_ = folks_persona_get_uid (_tmp66_);
#line 1182 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp68_ = _tmp67_;
#line 1182 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp69_ = p;
#line 1182 "/run/build/folks/folks/individual-aggregator.vala"
						g_debug ("individual-aggregator.vala:1182:         %s (%p)", _tmp68_, _tmp69_);
#line 1180 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (p);
#line 4872 "individual-aggregator.c"
					}
#line 1180 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_p_it);
#line 4876 "individual-aggregator.c"
				}
			}
#line 1156 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (added_ind);
#line 1156 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (removed_ind);
#line 4883 "individual-aggregator.c"
		}
#line 1149 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (iter);
#line 4887 "individual-aggregator.c"
	}
#line 1188 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp70_ = _added;
#line 1188 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp71_ = gee_set_get_read_only_view (_tmp70_);
#line 1188 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp72_ = _tmp71_;
#line 1188 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp73_ = _tmp72_;
#line 1188 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp74_ = _removed;
#line 1188 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp75_ = gee_set_get_read_only_view (_tmp74_);
#line 1188 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp76_ = _tmp75_;
#line 1188 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp77_ = _tmp76_;
#line 1188 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_emit (self, folks_individual_aggregator_signals[FOLKS_INDIVIDUAL_AGGREGATOR_INDIVIDUALS_CHANGED_SIGNAL], 0, _tmp73_, _tmp77_, message, actor, reason);
#line 1188 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_tmp77_);
#line 1188 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_tmp73_);
#line 1190 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp78_ = _changes;
#line 1190 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_emit (self, folks_individual_aggregator_signals[FOLKS_INDIVIDUAL_AGGREGATOR_INDIVIDUALS_CHANGED_DETAILED_SIGNAL], 0, _tmp78_);
#line 1114 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_tmp15_);
#line 1114 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_tmp11_);
#line 1114 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_changes);
#line 1114 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_removed);
#line 1114 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_added);
#line 4925 "individual-aggregator.c"
}


static void
__folks_individual_aggregator_individual_removed_cb_folks_individual_removed (FolksIndividual* _sender,
                                                                              FolksIndividual* replacement_individual,
                                                                              gpointer self)
{
#line 1195 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_individual_removed_cb ((FolksIndividualAggregator*) self, _sender, replacement_individual);
#line 4936 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_connect_to_individual (FolksIndividualAggregator* self,
                                                    FolksIndividual* individual)
{
	GeeMap* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 1193 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1193 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (individual != NULL);
#line 1195 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_connect_object (individual, "removed", (GCallback) __folks_individual_aggregator_individual_removed_cb_folks_individual_removed, self, 0);
#line 1196 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_individuals;
#line 1196 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = folks_individual_get_id (individual);
#line 1196 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = _tmp1_;
#line 1196 "/run/build/folks/folks/individual-aggregator.vala"
	gee_map_set (_tmp0_, _tmp2_, individual);
#line 4961 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_disconnect_from_individual (FolksIndividualAggregator* self,
                                                         FolksIndividual* individual)
{
	GeeMap* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	guint _tmp3_;
#line 1199 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1199 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (individual != NULL);
#line 1201 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_individuals;
#line 1201 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = folks_individual_get_id (individual);
#line 1201 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = _tmp1_;
#line 1201 "/run/build/folks/folks/individual-aggregator.vala"
	gee_map_unset (_tmp0_, _tmp2_, NULL);
#line 1202 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_parse_name ("removed", FOLKS_TYPE_INDIVIDUAL, &_tmp3_, NULL, FALSE);
#line 1202 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_handlers_disconnect_matched (individual, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp3_, 0, NULL, (GCallback) __folks_individual_aggregator_individual_removed_cb_folks_individual_removed, self);
#line 4989 "individual-aggregator.c"
}


static Block5Data*
block5_data_ref (Block5Data* _data5_)
{
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
	g_atomic_int_inc (&_data5_->_ref_count_);
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
	return _data5_;
#line 5000 "individual-aggregator.c"
}


static void
block5_data_unref (void * _userdata_)
{
	Block5Data* _data5_;
	_data5_ = (Block5Data*) _userdata_;
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
	if (g_atomic_int_dec_and_test (&_data5_->_ref_count_)) {
#line 5011 "individual-aggregator.c"
		FolksIndividualAggregator* self;
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
		self = _data5_->self;
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_data5_->candidate_inds);
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_data5_->persona);
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (self);
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
		g_slice_free (Block5Data, _data5_);
#line 5023 "individual-aggregator.c"
	}
}


static Block6Data*
block6_data_ref (Block6Data* _data6_)
{
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
	g_atomic_int_inc (&_data6_->_ref_count_);
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
	return _data6_;
#line 5035 "individual-aggregator.c"
}


static void
block6_data_unref (void * _userdata_)
{
	Block6Data* _data6_;
	_data6_ = (Block6Data*) _userdata_;
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
	if (g_atomic_int_dec_and_test (&_data6_->_ref_count_)) {
#line 5046 "individual-aggregator.c"
		FolksIndividualAggregator* self;
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
		self = _data6_->_data5_->self;
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
		block5_data_unref (_data6_->_data5_);
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
		_data6_->_data5_ = NULL;
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
		g_slice_free (Block6Data, _data6_);
#line 5056 "individual-aggregator.c"
	}
}


static void
_______lambda67_ (Block6Data* _data6_,
                  const gchar* l)
{
	Block5Data* _data5_;
	FolksIndividualAggregator* self;
	const gchar* prop_linking_value = NULL;
	GPtrArray* candidates = NULL;
	GHashTable* _tmp0_;
	const gchar* _tmp1_;
	gconstpointer _tmp2_;
	GPtrArray* _tmp3_;
#line 1288 "/run/build/folks/folks/individual-aggregator.vala"
	_data5_ = _data6_->_data5_;
#line 1288 "/run/build/folks/folks/individual-aggregator.vala"
	self = _data5_->self;
#line 1288 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (l != NULL);
#line 1290 "/run/build/folks/folks/individual-aggregator.vala"
	prop_linking_value = l;
#line 1291 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_link_map;
#line 1291 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = prop_linking_value;
#line 1291 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = g_hash_table_lookup (_tmp0_, _tmp1_);
#line 1291 "/run/build/folks/folks/individual-aggregator.vala"
	candidates = (GPtrArray*) _tmp2_;
#line 1294 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = candidates;
#line 1294 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp3_ != NULL) {
#line 5093 "individual-aggregator.c"
		{
			guint i = 0U;
#line 1296 "/run/build/folks/folks/individual-aggregator.vala"
			i = (guint) 0;
#line 5098 "individual-aggregator.c"
			{
				gboolean _tmp4_ = FALSE;
#line 1296 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp4_ = TRUE;
#line 1296 "/run/build/folks/folks/individual-aggregator.vala"
				while (TRUE) {
#line 5105 "individual-aggregator.c"
					guint _tmp6_;
					GPtrArray* _tmp7_;
					gint _tmp8_;
					gint _tmp9_;
					FolksIndividual* candidate_ind = NULL;
					GPtrArray* _tmp10_;
					guint _tmp11_;
					gconstpointer _tmp12_;
					FolksIndividual* _tmp13_;
					gboolean _tmp14_ = FALSE;
					gboolean _tmp15_ = FALSE;
					FolksIndividual* _tmp16_;
					FolksTrustLevel _tmp17_;
					FolksTrustLevel _tmp18_;
#line 1296 "/run/build/folks/folks/individual-aggregator.vala"
					if (!_tmp4_) {
#line 5122 "individual-aggregator.c"
						guint _tmp5_;
#line 1296 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp5_ = i;
#line 1296 "/run/build/folks/folks/individual-aggregator.vala"
						i = _tmp5_ + 1;
#line 5128 "individual-aggregator.c"
					}
#line 1296 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp4_ = FALSE;
#line 1296 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp6_ = i;
#line 1296 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp7_ = candidates;
#line 1296 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp8_ = g_ptr_array_get_length ((GPtrArray*) _tmp7_);
#line 1296 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp9_ = _tmp8_;
#line 1296 "/run/build/folks/folks/individual-aggregator.vala"
					if (!(_tmp6_ < ((guint) _tmp9_))) {
#line 1296 "/run/build/folks/folks/individual-aggregator.vala"
						break;
#line 5144 "individual-aggregator.c"
					}
#line 1298 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp10_ = candidates;
#line 1298 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp11_ = i;
#line 1298 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp12_ = g_ptr_array_index ((GPtrArray*) _tmp10_, _tmp11_);
#line 1298 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp13_ = _g_object_ref0 ((FolksIndividual*) _tmp12_);
#line 1298 "/run/build/folks/folks/individual-aggregator.vala"
					candidate_ind = _tmp13_;
#line 1300 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp16_ = candidate_ind;
#line 1300 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp17_ = folks_individual_get_trust_level (_tmp16_);
#line 1300 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp18_ = _tmp17_;
#line 1300 "/run/build/folks/folks/individual-aggregator.vala"
					if (_tmp18_ != FOLKS_TRUST_LEVEL_NONE) {
#line 5164 "individual-aggregator.c"
						FolksIndividual* _tmp19_;
						FolksPersona* _tmp20_;
#line 1302 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp19_ = candidate_ind;
#line 1302 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp20_ = _data5_->persona;
#line 1302 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp15_ = folks_individual_has_anti_link_with_persona (_tmp19_, _tmp20_) == FALSE;
#line 5173 "individual-aggregator.c"
					} else {
#line 1300 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp15_ = FALSE;
#line 5177 "individual-aggregator.c"
					}
#line 1300 "/run/build/folks/folks/individual-aggregator.vala"
					if (_tmp15_) {
#line 5181 "individual-aggregator.c"
						GeeHashSet* _tmp21_;
						FolksIndividual* _tmp22_;
#line 1305 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp21_ = _data5_->candidate_inds;
#line 1305 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp22_ = candidate_ind;
#line 1305 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp14_ = gee_abstract_collection_add ((GeeAbstractCollection*) _tmp21_, _tmp22_);
#line 5190 "individual-aggregator.c"
					} else {
#line 1300 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp14_ = FALSE;
#line 5194 "individual-aggregator.c"
					}
#line 1300 "/run/build/folks/folks/individual-aggregator.vala"
					if (_tmp14_) {
#line 5198 "individual-aggregator.c"
						FolksIndividual* _tmp23_;
						const gchar* _tmp24_;
						const gchar* _tmp25_;
						const gchar* _tmp26_;
						const gchar* _tmp27_;
#line 1307 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp23_ = candidate_ind;
#line 1307 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp24_ = folks_individual_get_id (_tmp23_);
#line 1307 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp25_ = _tmp24_;
#line 1307 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp26_ = _data6_->prop_name;
#line 1307 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp27_ = prop_linking_value;
#line 1307 "/run/build/folks/folks/individual-aggregator.vala"
						g_debug ("    Found candidate individual '%s'" " by linkable property '%s' = '%s'.", _tmp25_, _tmp26_, _tmp27_);
#line 5216 "individual-aggregator.c"
					}
#line 1296 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (candidate_ind);
#line 5220 "individual-aggregator.c"
				}
			}
		}
	}
}


static void
________lambda67__folks_persona_linkable_property_callback (const gchar* link,
                                                            gpointer self)
{
#line 1288 "/run/build/folks/folks/individual-aggregator.vala"
	_______lambda67_ (self, link);
#line 5234 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_add_personas (FolksIndividualAggregator* self,
                                           GeeSet* added,
                                           FolksIndividual* * user,
                                           GeeHashMultiMap* * individuals_changes)
{
#line 1205 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1205 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (added != NULL);
#line 1205 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (*individuals_changes != NULL);
#line 5250 "individual-aggregator.c"
	{
		GeeIterator* _persona_it = NULL;
		GeeIterator* _tmp0_;
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp0_ = gee_iterable_iterator ((GeeIterable*) added);
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
		_persona_it = _tmp0_;
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 5260 "individual-aggregator.c"
			Block5Data* _data5_;
			GeeIterator* _tmp1_;
			GeeIterator* _tmp2_;
			gpointer _tmp3_;
			FolksPersonaStoreTrust trust_level = 0;
			FolksPersona* _tmp4_;
			FolksPersonaStore* _tmp5_;
			FolksPersonaStore* _tmp6_;
			FolksPersonaStoreTrust _tmp7_;
			FolksPersonaStoreTrust _tmp8_;
			GeeHashSet* _tmp9_;
			GeeHashSet* final_personas = NULL;
			GeeHashSet* _tmp10_;
			FolksPersona* _tmp11_;
			const gchar* _tmp12_;
			const gchar* _tmp13_;
			FolksPersona* _tmp14_;
			const gchar* _tmp15_;
			const gchar* _tmp16_;
			gboolean _tmp17_ = FALSE;
			gboolean _tmp18_ = FALSE;
			gboolean _tmp19_ = FALSE;
			gboolean _tmp20_;
			gboolean _tmp28_ = FALSE;
			gboolean _tmp29_;
			gboolean _tmp62_ = FALSE;
			gboolean _tmp63_;
			GeeHashSet* _tmp82_;
			FolksPersona* _tmp83_;
			gboolean _tmp84_ = FALSE;
			gboolean _tmp85_;
			gboolean _tmp89_ = FALSE;
			GeeHashSet* _tmp90_;
			gint _tmp91_;
			gint _tmp92_;
			FolksIndividual* final_individual = NULL;
			GeeHashSet* _tmp104_;
			FolksIndividual* _tmp105_;
			FolksIndividual* _tmp106_;
			const gchar* _tmp107_;
			const gchar* _tmp108_;
			FolksIndividual* _tmp109_;
			guint num_mappings_added = 0U;
			guint _tmp156_;
			FolksIndividual* _tmp158_;
			gboolean _tmp159_;
			gboolean _tmp160_;
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
			_data5_ = g_slice_new0 (Block5Data);
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
			_data5_->_ref_count_ = 1;
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
			_data5_->self = g_object_ref (self);
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp1_ = _persona_it;
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
			if (!gee_iterator_next (_tmp1_)) {
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
				block5_data_unref (_data5_);
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
				_data5_ = NULL;
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 5324 "individual-aggregator.c"
			}
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp2_ = _persona_it;
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp3_ = gee_iterator_get (_tmp2_);
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
			_data5_->persona = (FolksPersona*) _tmp3_;
#line 1210 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp4_ = _data5_->persona;
#line 1210 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp5_ = folks_persona_get_store (_tmp4_);
#line 1210 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp6_ = _tmp5_;
#line 1210 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp7_ = folks_persona_store_get_trust_level (_tmp6_);
#line 1210 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp8_ = _tmp7_;
#line 1210 "/run/build/folks/folks/individual-aggregator.vala"
			trust_level = _tmp8_;
#line 1220 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp9_ = gee_hash_set_new (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1220 "/run/build/folks/folks/individual-aggregator.vala"
			_data5_->candidate_inds = _tmp9_;
#line 1222 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp10_ = gee_hash_set_new (FOLKS_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1222 "/run/build/folks/folks/individual-aggregator.vala"
			final_personas = _tmp10_;
#line 1224 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp11_ = _data5_->persona;
#line 1224 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp12_ = folks_persona_get_uid (_tmp11_);
#line 1224 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp13_ = _tmp12_;
#line 1224 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp14_ = _data5_->persona;
#line 1224 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp15_ = folks_persona_get_iid (_tmp14_);
#line 1224 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp16_ = _tmp15_;
#line 1224 "/run/build/folks/folks/individual-aggregator.vala"
			g_debug ("individual-aggregator.vala:1224: Aggregating persona '%s' on '%s'.", _tmp13_, _tmp16_);
#line 1228 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp20_ = self->priv->_linking_enabled;
#line 1228 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp20_ == TRUE) {
#line 5370 "individual-aggregator.c"
				FolksPersona* _tmp21_;
				gboolean _tmp22_;
				gboolean _tmp23_;
#line 1229 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp21_ = _data5_->persona;
#line 1229 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp22_ = folks_persona_get_is_user (_tmp21_);
#line 1229 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp23_ = _tmp22_;
#line 1229 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp19_ = _tmp23_ == TRUE;
#line 5382 "individual-aggregator.c"
			} else {
#line 1228 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp19_ = FALSE;
#line 5386 "individual-aggregator.c"
			}
#line 1228 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp19_) {
#line 1229 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp18_ = (*user) != NULL;
#line 5392 "individual-aggregator.c"
			} else {
#line 1228 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp18_ = FALSE;
#line 5396 "individual-aggregator.c"
			}
#line 1228 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp18_) {
#line 5400 "individual-aggregator.c"
				FolksPersona* _tmp24_;
#line 1230 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp24_ = _data5_->persona;
#line 1230 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp17_ = folks_individual_has_anti_link_with_persona (G_TYPE_CHECK_INSTANCE_CAST (*user, FOLKS_TYPE_INDIVIDUAL, FolksIndividual), _tmp24_) == FALSE;
#line 5406 "individual-aggregator.c"
			} else {
#line 1228 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp17_ = FALSE;
#line 5410 "individual-aggregator.c"
			}
#line 1228 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp17_) {
#line 5414 "individual-aggregator.c"
				const gchar* _tmp25_;
				const gchar* _tmp26_;
				GeeHashSet* _tmp27_;
#line 1232 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp25_ = folks_individual_get_id (G_TYPE_CHECK_INSTANCE_CAST (*user, FOLKS_TYPE_INDIVIDUAL, FolksIndividual));
#line 1232 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp26_ = _tmp25_;
#line 1232 "/run/build/folks/folks/individual-aggregator.vala"
				g_debug ("individual-aggregator.vala:1232:     Found candidate individual '%s' a" \
"s user.", _tmp26_);
#line 1234 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp27_ = _data5_->candidate_inds;
#line 1234 "/run/build/folks/folks/individual-aggregator.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp27_, G_TYPE_CHECK_INSTANCE_CAST (*user, FOLKS_TYPE_INDIVIDUAL, FolksIndividual));
#line 5428 "individual-aggregator.c"
			}
#line 1239 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp29_ = self->priv->_linking_enabled;
#line 1239 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp29_ == TRUE) {
#line 5434 "individual-aggregator.c"
				FolksPersonaStoreTrust _tmp30_;
#line 1240 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp30_ = trust_level;
#line 1240 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp28_ = _tmp30_ != FOLKS_PERSONA_STORE_TRUST_NONE;
#line 5440 "individual-aggregator.c"
			} else {
#line 1239 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp28_ = FALSE;
#line 5444 "individual-aggregator.c"
			}
#line 1239 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp28_) {
#line 5448 "individual-aggregator.c"
				GPtrArray* candidates = NULL;
				GHashTable* _tmp31_;
				FolksPersona* _tmp32_;
				const gchar* _tmp33_;
				const gchar* _tmp34_;
				gconstpointer _tmp35_;
				GPtrArray* _tmp36_;
#line 1242 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp31_ = self->priv->_link_map;
#line 1242 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp32_ = _data5_->persona;
#line 1242 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp33_ = folks_persona_get_iid (_tmp32_);
#line 1242 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp34_ = _tmp33_;
#line 1242 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp35_ = g_hash_table_lookup (_tmp31_, _tmp34_);
#line 1242 "/run/build/folks/folks/individual-aggregator.vala"
				candidates = (GPtrArray*) _tmp35_;
#line 1244 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp36_ = candidates;
#line 1244 "/run/build/folks/folks/individual-aggregator.vala"
				if (_tmp36_ != NULL) {
#line 5472 "individual-aggregator.c"
					{
						guint i = 0U;
#line 1246 "/run/build/folks/folks/individual-aggregator.vala"
						i = (guint) 0;
#line 5477 "individual-aggregator.c"
						{
							gboolean _tmp37_ = FALSE;
#line 1246 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp37_ = TRUE;
#line 1246 "/run/build/folks/folks/individual-aggregator.vala"
							while (TRUE) {
#line 5484 "individual-aggregator.c"
								guint _tmp39_;
								GPtrArray* _tmp40_;
								gint _tmp41_;
								gint _tmp42_;
								FolksIndividual* candidate_ind = NULL;
								GPtrArray* _tmp43_;
								guint _tmp44_;
								gconstpointer _tmp45_;
								FolksIndividual* _tmp46_;
								gboolean _tmp47_ = FALSE;
								gboolean _tmp48_ = FALSE;
								FolksIndividual* _tmp49_;
								FolksTrustLevel _tmp50_;
								FolksTrustLevel _tmp51_;
#line 1246 "/run/build/folks/folks/individual-aggregator.vala"
								if (!_tmp37_) {
#line 5501 "individual-aggregator.c"
									guint _tmp38_;
#line 1246 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp38_ = i;
#line 1246 "/run/build/folks/folks/individual-aggregator.vala"
									i = _tmp38_ + 1;
#line 5507 "individual-aggregator.c"
								}
#line 1246 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp37_ = FALSE;
#line 1246 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp39_ = i;
#line 1246 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp40_ = candidates;
#line 1246 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp41_ = g_ptr_array_get_length ((GPtrArray*) _tmp40_);
#line 1246 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp42_ = _tmp41_;
#line 1246 "/run/build/folks/folks/individual-aggregator.vala"
								if (!(_tmp39_ < ((guint) _tmp42_))) {
#line 1246 "/run/build/folks/folks/individual-aggregator.vala"
									break;
#line 5523 "individual-aggregator.c"
								}
#line 1248 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp43_ = candidates;
#line 1248 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp44_ = i;
#line 1248 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp45_ = g_ptr_array_index ((GPtrArray*) _tmp43_, _tmp44_);
#line 1248 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp46_ = _g_object_ref0 ((FolksIndividual*) _tmp45_);
#line 1248 "/run/build/folks/folks/individual-aggregator.vala"
								candidate_ind = _tmp46_;
#line 1250 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp49_ = candidate_ind;
#line 1250 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp50_ = folks_individual_get_trust_level (_tmp49_);
#line 1250 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp51_ = _tmp50_;
#line 1250 "/run/build/folks/folks/individual-aggregator.vala"
								if (_tmp51_ != FOLKS_TRUST_LEVEL_NONE) {
#line 5543 "individual-aggregator.c"
									FolksIndividual* _tmp52_;
									FolksPersona* _tmp53_;
#line 1251 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp52_ = candidate_ind;
#line 1251 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp53_ = _data5_->persona;
#line 1251 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp48_ = folks_individual_has_anti_link_with_persona (_tmp52_, _tmp53_) == FALSE;
#line 5552 "individual-aggregator.c"
								} else {
#line 1250 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp48_ = FALSE;
#line 5556 "individual-aggregator.c"
								}
#line 1250 "/run/build/folks/folks/individual-aggregator.vala"
								if (_tmp48_) {
#line 5560 "individual-aggregator.c"
									GeeHashSet* _tmp54_;
									FolksIndividual* _tmp55_;
#line 1253 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp54_ = _data5_->candidate_inds;
#line 1253 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp55_ = candidate_ind;
#line 1253 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp47_ = gee_abstract_collection_add ((GeeAbstractCollection*) _tmp54_, _tmp55_);
#line 5569 "individual-aggregator.c"
								} else {
#line 1250 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp47_ = FALSE;
#line 5573 "individual-aggregator.c"
								}
#line 1250 "/run/build/folks/folks/individual-aggregator.vala"
								if (_tmp47_) {
#line 5577 "individual-aggregator.c"
									FolksIndividual* _tmp56_;
									const gchar* _tmp57_;
									const gchar* _tmp58_;
									FolksPersona* _tmp59_;
									const gchar* _tmp60_;
									const gchar* _tmp61_;
#line 1255 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp56_ = candidate_ind;
#line 1255 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp57_ = folks_individual_get_id (_tmp56_);
#line 1255 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp58_ = _tmp57_;
#line 1255 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp59_ = _data5_->persona;
#line 1255 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp60_ = folks_persona_get_iid (_tmp59_);
#line 1255 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp61_ = _tmp60_;
#line 1255 "/run/build/folks/folks/individual-aggregator.vala"
									g_debug ("    Found candidate individual '%s' by " "IID '%s'.", _tmp58_, _tmp61_);
#line 5598 "individual-aggregator.c"
								}
#line 1246 "/run/build/folks/folks/individual-aggregator.vala"
								_g_object_unref0 (candidate_ind);
#line 5602 "individual-aggregator.c"
							}
						}
					}
				}
			}
#line 1262 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp63_ = self->priv->_linking_enabled;
#line 1262 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp63_ == TRUE) {
#line 5612 "individual-aggregator.c"
				FolksPersona* _tmp64_;
				FolksPersonaStore* _tmp65_;
				FolksPersonaStore* _tmp66_;
				FolksPersonaStoreTrust _tmp67_;
				FolksPersonaStoreTrust _tmp68_;
#line 1263 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp64_ = _data5_->persona;
#line 1263 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp65_ = folks_persona_get_store (_tmp64_);
#line 1263 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp66_ = _tmp65_;
#line 1263 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp67_ = folks_persona_store_get_trust_level (_tmp66_);
#line 1263 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp68_ = _tmp67_;
#line 1263 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp62_ = _tmp68_ == FOLKS_PERSONA_STORE_TRUST_FULL;
#line 5630 "individual-aggregator.c"
			} else {
#line 1262 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp62_ = FALSE;
#line 5634 "individual-aggregator.c"
			}
#line 1262 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp62_) {
#line 5638 "individual-aggregator.c"
				FolksPersona* _tmp69_;
				gchar** _tmp70_;
				gint _tmp70__length1;
				gchar** _tmp71_;
				gint _tmp71__length1;
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp69_ = _data5_->persona;
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp70_ = folks_persona_get_linkable_properties (_tmp69_, &_tmp70__length1);
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp71_ = _tmp70_;
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp71__length1 = _tmp70__length1;
#line 5652 "individual-aggregator.c"
				{
					gchar** foo_collection = NULL;
					gint foo_collection_length1 = 0;
					gint _foo_collection_size_ = 0;
					gint foo_it = 0;
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
					foo_collection = _tmp71_;
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
					foo_collection_length1 = _tmp71__length1;
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
					for (foo_it = 0; foo_it < _tmp71__length1; foo_it = foo_it + 1) {
#line 5664 "individual-aggregator.c"
						const gchar* foo = NULL;
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
						foo = foo_collection[foo_it];
#line 5668 "individual-aggregator.c"
						{
							Block6Data* _data6_;
							const gchar* _tmp72_;
							const gchar* _tmp73_;
							GObjectClass* pclass = NULL;
							FolksPersona* _tmp74_;
							GObjectClass* _tmp75_;
							GObjectClass* _tmp76_;
							const gchar* _tmp77_;
							GParamSpec* _tmp78_;
							FolksPersona* _tmp80_;
							const gchar* _tmp81_;
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
							_data6_ = g_slice_new0 (Block6Data);
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
							_data6_->_ref_count_ = 1;
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
							_data6_->_data5_ = block5_data_ref (_data5_);
#line 1270 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp72_ = foo;
#line 1270 "/run/build/folks/folks/individual-aggregator.vala"
							if (_tmp72_ == NULL) {
#line 1271 "/run/build/folks/folks/individual-aggregator.vala"
								block6_data_unref (_data6_);
#line 1271 "/run/build/folks/folks/individual-aggregator.vala"
								_data6_ = NULL;
#line 1271 "/run/build/folks/folks/individual-aggregator.vala"
								continue;
#line 5697 "individual-aggregator.c"
							}
#line 1276 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp73_ = foo;
#line 1276 "/run/build/folks/folks/individual-aggregator.vala"
							_data6_->prop_name = _tmp73_;
#line 1278 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp74_ = _data5_->persona;
#line 1278 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp75_ = G_OBJECT_GET_CLASS ((GObject*) _tmp74_);
#line 1278 "/run/build/folks/folks/individual-aggregator.vala"
							pclass = _tmp75_;
#line 1279 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp76_ = pclass;
#line 1279 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp77_ = _data6_->prop_name;
#line 1279 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp78_ = g_object_class_find_property (_tmp76_, _tmp77_);
#line 1279 "/run/build/folks/folks/individual-aggregator.vala"
							if (_tmp78_ == NULL) {
#line 5717 "individual-aggregator.c"
								const gchar* _tmp79_;
#line 1281 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp79_ = _data6_->prop_name;
#line 1281 "/run/build/folks/folks/individual-aggregator.vala"
								g_warning (_ ("Unknown property ‘%s’ in linkable property list."), _tmp79_);
#line 1285 "/run/build/folks/folks/individual-aggregator.vala"
								block6_data_unref (_data6_);
#line 1285 "/run/build/folks/folks/individual-aggregator.vala"
								_data6_ = NULL;
#line 1285 "/run/build/folks/folks/individual-aggregator.vala"
								continue;
#line 5729 "individual-aggregator.c"
							}
#line 1288 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp80_ = _data5_->persona;
#line 1288 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp81_ = _data6_->prop_name;
#line 1288 "/run/build/folks/folks/individual-aggregator.vala"
							folks_persona_linkable_property_to_links (_tmp80_, _tmp81_, ________lambda67__folks_persona_linkable_property_callback, _data6_);
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
							block6_data_unref (_data6_);
#line 1267 "/run/build/folks/folks/individual-aggregator.vala"
							_data6_ = NULL;
#line 5741 "individual-aggregator.c"
						}
					}
				}
			}
#line 1319 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp82_ = final_personas;
#line 1319 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp83_ = _data5_->persona;
#line 1319 "/run/build/folks/folks/individual-aggregator.vala"
			gee_abstract_collection_add ((GeeAbstractCollection*) _tmp82_, _tmp83_);
#line 1321 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp85_ = self->priv->_linking_enabled;
#line 1321 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp85_ == TRUE) {
#line 1321 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp84_ = TRUE;
#line 5758 "individual-aggregator.c"
			} else {
				GeeHashSet* _tmp86_;
				gint _tmp87_;
				gint _tmp88_;
#line 1321 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp86_ = _data5_->candidate_inds;
#line 1321 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp87_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp86_);
#line 1321 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp88_ = _tmp87_;
#line 1321 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp84_ = _tmp88_ == 0;
#line 5771 "individual-aggregator.c"
			}
#line 1321 "/run/build/folks/folks/individual-aggregator.vala"
			_vala_assert (_tmp84_, "this._linking_enabled == true || candidate_inds.size == 0");
#line 1322 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp90_ = _data5_->candidate_inds;
#line 1322 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp91_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp90_);
#line 1322 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp92_ = _tmp91_;
#line 1322 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp92_ > 0) {
#line 5783 "individual-aggregator.c"
				gboolean _tmp93_;
#line 1322 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp93_ = self->priv->_linking_enabled;
#line 1322 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp89_ = _tmp93_ == TRUE;
#line 5789 "individual-aggregator.c"
			} else {
#line 1322 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp89_ = FALSE;
#line 5793 "individual-aggregator.c"
			}
#line 1322 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp89_) {
#line 5797 "individual-aggregator.c"
				{
					GeeIterator* _individual_it = NULL;
					GeeHashSet* _tmp94_;
					GeeIterator* _tmp95_;
#line 1329 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp94_ = _data5_->candidate_inds;
#line 1329 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp95_ = gee_abstract_collection_iterator ((GeeAbstractCollection*) _tmp94_);
#line 1329 "/run/build/folks/folks/individual-aggregator.vala"
					_individual_it = _tmp95_;
#line 1329 "/run/build/folks/folks/individual-aggregator.vala"
					while (TRUE) {
#line 5810 "individual-aggregator.c"
						GeeIterator* _tmp96_;
						FolksIndividual* individual = NULL;
						GeeIterator* _tmp97_;
						gpointer _tmp98_;
						GeeHashSet* _tmp99_;
						FolksIndividual* _tmp100_;
						GeeSet* _tmp101_;
						GeeSet* _tmp102_;
#line 1329 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp96_ = _individual_it;
#line 1329 "/run/build/folks/folks/individual-aggregator.vala"
						if (!gee_iterator_next (_tmp96_)) {
#line 1329 "/run/build/folks/folks/individual-aggregator.vala"
							break;
#line 5825 "individual-aggregator.c"
						}
#line 1329 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp97_ = _individual_it;
#line 1329 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp98_ = gee_iterator_get (_tmp97_);
#line 1329 "/run/build/folks/folks/individual-aggregator.vala"
						individual = (FolksIndividual*) _tmp98_;
#line 1331 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp99_ = final_personas;
#line 1331 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp100_ = individual;
#line 1331 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp101_ = folks_individual_get_personas (_tmp100_);
#line 1331 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp102_ = _tmp101_;
#line 1331 "/run/build/folks/folks/individual-aggregator.vala"
						gee_collection_add_all ((GeeCollection*) _tmp99_, (GeeCollection*) _tmp102_);
#line 1329 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (individual);
#line 5845 "individual-aggregator.c"
					}
#line 1329 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_individual_it);
#line 5849 "individual-aggregator.c"
				}
			} else {
				gboolean _tmp103_;
#line 1334 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp103_ = self->priv->_linking_enabled;
#line 1334 "/run/build/folks/folks/individual-aggregator.vala"
				if (!_tmp103_) {
#line 1336 "/run/build/folks/folks/individual-aggregator.vala"
					g_debug ("individual-aggregator.vala:1336:     Linking disabled.");
#line 5859 "individual-aggregator.c"
				} else {
#line 1340 "/run/build/folks/folks/individual-aggregator.vala"
					g_debug ("individual-aggregator.vala:1340:     Did not find any candidate indivi" \
"duals.");
#line 5863 "individual-aggregator.c"
				}
			}
#line 1344 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp104_ = final_personas;
#line 1344 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp105_ = folks_individual_new ((GeeSet*) _tmp104_);
#line 1344 "/run/build/folks/folks/individual-aggregator.vala"
			final_individual = _tmp105_;
#line 1345 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp106_ = final_individual;
#line 1345 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp107_ = folks_individual_get_id (_tmp106_);
#line 1345 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp108_ = _tmp107_;
#line 1345 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp109_ = final_individual;
#line 1345 "/run/build/folks/folks/individual-aggregator.vala"
			g_debug ("individual-aggregator.vala:1345:     Created new individual '%s' (%p) " \
"with personas:", _tmp108_, _tmp109_);
#line 5882 "individual-aggregator.c"
			{
				GeeIterator* _p_it = NULL;
				GeeHashSet* _tmp110_;
				GeeIterator* _tmp111_;
#line 1347 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp110_ = final_personas;
#line 1347 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp111_ = gee_abstract_collection_iterator ((GeeAbstractCollection*) _tmp110_);
#line 1347 "/run/build/folks/folks/individual-aggregator.vala"
				_p_it = _tmp111_;
#line 1347 "/run/build/folks/folks/individual-aggregator.vala"
				while (TRUE) {
#line 5895 "individual-aggregator.c"
					GeeIterator* _tmp112_;
					FolksPersona* p = NULL;
					GeeIterator* _tmp113_;
					gpointer _tmp114_;
					FolksPersona* _tmp115_;
					const gchar* _tmp116_;
					const gchar* _tmp117_;
					FolksPersona* _tmp118_;
					FolksPersona* _tmp119_;
					FolksIndividual* _tmp120_;
#line 1347 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp112_ = _p_it;
#line 1347 "/run/build/folks/folks/individual-aggregator.vala"
					if (!gee_iterator_next (_tmp112_)) {
#line 1347 "/run/build/folks/folks/individual-aggregator.vala"
						break;
#line 5912 "individual-aggregator.c"
					}
#line 1347 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp113_ = _p_it;
#line 1347 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp114_ = gee_iterator_get (_tmp113_);
#line 1347 "/run/build/folks/folks/individual-aggregator.vala"
					p = (FolksPersona*) _tmp114_;
#line 1349 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp115_ = p;
#line 1349 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp116_ = folks_persona_get_uid (_tmp115_);
#line 1349 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp117_ = _tmp116_;
#line 1349 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp118_ = p;
#line 1349 "/run/build/folks/folks/individual-aggregator.vala"
					g_debug ("individual-aggregator.vala:1349:         %s (%p)", _tmp117_, _tmp118_);
#line 1350 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp119_ = p;
#line 1350 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp120_ = final_individual;
#line 1350 "/run/build/folks/folks/individual-aggregator.vala"
					_folks_individual_aggregator_add_persona_to_link_map (self, _tmp119_, _tmp120_);
#line 1347 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (p);
#line 5938 "individual-aggregator.c"
				}
#line 1347 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_p_it);
#line 5942 "individual-aggregator.c"
			}
#line 1353 "/run/build/folks/folks/individual-aggregator.vala"
			num_mappings_added = (guint) 0;
#line 5946 "individual-aggregator.c"
			{
				GeeIterator* _i_it = NULL;
				GeeHashSet* _tmp121_;
				GeeIterator* _tmp122_;
#line 1355 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp121_ = _data5_->candidate_inds;
#line 1355 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp122_ = gee_abstract_collection_iterator ((GeeAbstractCollection*) _tmp121_);
#line 1355 "/run/build/folks/folks/individual-aggregator.vala"
				_i_it = _tmp122_;
#line 1355 "/run/build/folks/folks/individual-aggregator.vala"
				while (TRUE) {
#line 5959 "individual-aggregator.c"
					GeeIterator* _tmp123_;
					FolksIndividual* i = NULL;
					GeeIterator* _tmp124_;
					gpointer _tmp125_;
					FolksIndividual* _tmp126_;
					GeeHashSet* transitive_updates = NULL;
					GeeHashSet* _tmp127_;
					GeeMapIterator* iter = NULL;
					GeeMapIterator* _tmp128_;
					GeeHashSet* _tmp150_;
					gint _tmp151_;
					gint _tmp152_;
#line 1355 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp123_ = _i_it;
#line 1355 "/run/build/folks/folks/individual-aggregator.vala"
					if (!gee_iterator_next (_tmp123_)) {
#line 1355 "/run/build/folks/folks/individual-aggregator.vala"
						break;
#line 5978 "individual-aggregator.c"
					}
#line 1355 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp124_ = _i_it;
#line 1355 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp125_ = gee_iterator_get (_tmp124_);
#line 1355 "/run/build/folks/folks/individual-aggregator.vala"
					i = (FolksIndividual*) _tmp125_;
#line 1358 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp126_ = i;
#line 1358 "/run/build/folks/folks/individual-aggregator.vala"
					_folks_individual_aggregator_remove_individual_from_link_map (self, _tmp126_);
#line 1363 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp127_ = gee_hash_set_new (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1363 "/run/build/folks/folks/individual-aggregator.vala"
					transitive_updates = _tmp127_;
#line 1365 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp128_ = gee_multi_map_map_iterator ((GeeMultiMap*) (*individuals_changes));
#line 1365 "/run/build/folks/folks/individual-aggregator.vala"
					iter = _tmp128_;
#line 1367 "/run/build/folks/folks/individual-aggregator.vala"
					while (TRUE) {
#line 6000 "individual-aggregator.c"
						GeeMapIterator* _tmp129_;
						FolksIndividual* _tmp130_;
						GeeMapIterator* _tmp131_;
						gpointer _tmp132_;
						FolksIndividual* _tmp133_;
						gboolean _tmp134_;
#line 1367 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp129_ = iter;
#line 1367 "/run/build/folks/folks/individual-aggregator.vala"
						if (!gee_map_iterator_next (_tmp129_)) {
#line 1367 "/run/build/folks/folks/individual-aggregator.vala"
							break;
#line 6013 "individual-aggregator.c"
						}
#line 1369 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp130_ = i;
#line 1369 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp131_ = iter;
#line 1369 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp132_ = gee_map_iterator_get_value (_tmp131_);
#line 1369 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp133_ = (FolksIndividual*) _tmp132_;
#line 1369 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp134_ = _tmp130_ == _tmp133_;
#line 1369 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_tmp133_);
#line 1369 "/run/build/folks/folks/individual-aggregator.vala"
						if (_tmp134_) {
#line 6029 "individual-aggregator.c"
							GeeHashSet* _tmp135_;
							GeeMapIterator* _tmp136_;
							gpointer _tmp137_;
							FolksIndividual* _tmp138_;
#line 1371 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp135_ = transitive_updates;
#line 1371 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp136_ = iter;
#line 1371 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp137_ = gee_map_iterator_get_key (_tmp136_);
#line 1371 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp138_ = (FolksIndividual*) _tmp137_;
#line 1371 "/run/build/folks/folks/individual-aggregator.vala"
							gee_abstract_collection_add ((GeeAbstractCollection*) _tmp135_, _tmp138_);
#line 1371 "/run/build/folks/folks/individual-aggregator.vala"
							_g_object_unref0 (_tmp138_);
#line 6046 "individual-aggregator.c"
						}
					}
					{
						GeeIterator* _k_it = NULL;
						GeeHashSet* _tmp139_;
						GeeIterator* _tmp140_;
#line 1375 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp139_ = transitive_updates;
#line 1375 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp140_ = gee_abstract_collection_iterator ((GeeAbstractCollection*) _tmp139_);
#line 1375 "/run/build/folks/folks/individual-aggregator.vala"
						_k_it = _tmp140_;
#line 1375 "/run/build/folks/folks/individual-aggregator.vala"
						while (TRUE) {
#line 6061 "individual-aggregator.c"
							GeeIterator* _tmp141_;
							FolksIndividual* k = NULL;
							GeeIterator* _tmp142_;
							gpointer _tmp143_;
							FolksIndividual* _tmp144_;
							FolksIndividual* _tmp145_;
							FolksIndividual* _tmp146_;
#line 1375 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp141_ = _k_it;
#line 1375 "/run/build/folks/folks/individual-aggregator.vala"
							if (!gee_iterator_next (_tmp141_)) {
#line 1375 "/run/build/folks/folks/individual-aggregator.vala"
								break;
#line 6075 "individual-aggregator.c"
							}
#line 1375 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp142_ = _k_it;
#line 1375 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp143_ = gee_iterator_get (_tmp142_);
#line 1375 "/run/build/folks/folks/individual-aggregator.vala"
							k = (FolksIndividual*) _tmp143_;
#line 1377 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp144_ = k;
#line 1377 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp145_ = i;
#line 1377 "/run/build/folks/folks/individual-aggregator.vala"
							_vala_assert (gee_multi_map_remove ((GeeMultiMap*) (*individuals_changes), _tmp144_, _tmp145_) == TRUE, "individuals_changes.remove (k, i) == true");
#line 1383 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp146_ = k;
#line 1383 "/run/build/folks/folks/individual-aggregator.vala"
							if (_tmp146_ != NULL) {
#line 6093 "individual-aggregator.c"
								FolksIndividual* _tmp147_;
								FolksIndividual* _tmp148_;
								guint _tmp149_;
#line 1385 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp147_ = k;
#line 1385 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp148_ = final_individual;
#line 1385 "/run/build/folks/folks/individual-aggregator.vala"
								gee_multi_map_set ((GeeMultiMap*) (*individuals_changes), _tmp147_, _tmp148_);
#line 1386 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp149_ = num_mappings_added;
#line 1386 "/run/build/folks/folks/individual-aggregator.vala"
								num_mappings_added = _tmp149_ + 1;
#line 6107 "individual-aggregator.c"
							}
#line 1375 "/run/build/folks/folks/individual-aggregator.vala"
							_g_object_unref0 (k);
#line 6111 "individual-aggregator.c"
						}
#line 1375 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_k_it);
#line 6115 "individual-aggregator.c"
					}
#line 1394 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp150_ = transitive_updates;
#line 1394 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp151_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp150_);
#line 1394 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp152_ = _tmp151_;
#line 1394 "/run/build/folks/folks/individual-aggregator.vala"
					if (_tmp152_ == 0) {
#line 6125 "individual-aggregator.c"
						FolksIndividual* _tmp153_;
						FolksIndividual* _tmp154_;
						guint _tmp155_;
#line 1396 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp153_ = i;
#line 1396 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp154_ = final_individual;
#line 1396 "/run/build/folks/folks/individual-aggregator.vala"
						gee_multi_map_set ((GeeMultiMap*) (*individuals_changes), _tmp153_, _tmp154_);
#line 1397 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp155_ = num_mappings_added;
#line 1397 "/run/build/folks/folks/individual-aggregator.vala"
						num_mappings_added = _tmp155_ + 1;
#line 6139 "individual-aggregator.c"
					}
#line 1355 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (iter);
#line 1355 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (transitive_updates);
#line 1355 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (i);
#line 6147 "individual-aggregator.c"
				}
#line 1355 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_i_it);
#line 6151 "individual-aggregator.c"
			}
#line 1404 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp156_ = num_mappings_added;
#line 1404 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp156_ == ((guint) 0)) {
#line 6157 "individual-aggregator.c"
				FolksIndividual* _tmp157_;
#line 1406 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp157_ = final_individual;
#line 1406 "/run/build/folks/folks/individual-aggregator.vala"
				gee_multi_map_set ((GeeMultiMap*) (*individuals_changes), NULL, _tmp157_);
#line 6163 "individual-aggregator.c"
			}
#line 1410 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp158_ = final_individual;
#line 1410 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp159_ = folks_individual_get_is_user (_tmp158_);
#line 1410 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp160_ = _tmp159_;
#line 1410 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp160_ == TRUE) {
#line 6173 "individual-aggregator.c"
				FolksIndividual* _tmp161_;
				FolksIndividual* _tmp162_;
#line 1411 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp161_ = final_individual;
#line 1411 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp162_ = _g_object_ref0 (_tmp161_);
#line 1411 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (*user);
#line 1411 "/run/build/folks/folks/individual-aggregator.vala"
				*user = _tmp162_;
#line 6184 "individual-aggregator.c"
			}
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (final_individual);
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (final_personas);
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
			block5_data_unref (_data5_);
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
			_data5_ = NULL;
#line 6194 "individual-aggregator.c"
		}
#line 1208 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_persona_it);
#line 6198 "individual-aggregator.c"
	}
}


static void
_folks_individual_aggregator_persona_linkable_property_changed_cb (FolksIndividualAggregator* self,
                                                                   GObject* obj,
                                                                   GParamSpec* pspec)
{
	gboolean _tmp0_;
	FolksPersona* persona = NULL;
	FolksPersona* _tmp1_;
	const gchar* _tmp2_ = NULL;
	FolksPersona* _tmp3_;
	gboolean _tmp4_;
	gboolean _tmp5_;
	const gchar* _tmp6_;
	FolksPersona* _tmp7_;
	const gchar* _tmp8_;
	const gchar* _tmp9_;
	FolksPersona* _tmp10_;
	const gchar* _tmp11_;
	const gchar* _tmp12_;
	FolksSmallSet* persona_set = NULL;
	FolksSmallSet* _tmp13_;
	FolksSmallSet* _tmp14_;
	FolksPersona* _tmp15_;
	FolksPersona* _tmp16_;
	FolksPersonaStore* _tmp17_;
	FolksPersonaStore* _tmp18_;
	FolksSmallSet* _tmp19_;
	FolksSmallSet* _tmp20_;
#line 1415 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1415 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (obj != NULL);
#line 1415 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (pspec != NULL);
#line 1419 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_linking_enabled;
#line 1419 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp0_ == FALSE) {
#line 1421 "/run/build/folks/folks/individual-aggregator.vala"
		return;
#line 6243 "individual-aggregator.c"
	}
#line 1428 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (G_TYPE_CHECK_INSTANCE_TYPE (obj, FOLKS_TYPE_PERSONA) ? ((FolksPersona*) obj) : NULL, FOLKS_TYPE_PERSONA, FolksPersona));
#line 1428 "/run/build/folks/folks/individual-aggregator.vala"
	persona = _tmp1_;
#line 1432 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = persona;
#line 1432 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp4_ = folks_persona_get_is_user (_tmp3_);
#line 1432 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp5_ = _tmp4_;
#line 1432 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp5_) {
#line 1432 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = "yes";
#line 6259 "individual-aggregator.c"
	} else {
#line 1432 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = "no";
#line 6263 "individual-aggregator.c"
	}
#line 1430 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp6_ = pspec->name;
#line 1430 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp7_ = persona;
#line 1430 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp8_ = folks_persona_get_uid (_tmp7_);
#line 1430 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp9_ = _tmp8_;
#line 1430 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp10_ = persona;
#line 1430 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp11_ = folks_persona_get_iid (_tmp10_);
#line 1430 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp12_ = _tmp11_;
#line 1430 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("Linkable property '%s' changed for persona '%s' " "(is user: %s, IID: %s).", _tmp6_, _tmp9_, _tmp2_, _tmp12_);
#line 1434 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp13_ = folks_small_set_new (FOLKS_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1434 "/run/build/folks/folks/individual-aggregator.vala"
	persona_set = _tmp13_;
#line 1435 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp14_ = persona_set;
#line 1435 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp15_ = persona;
#line 1435 "/run/build/folks/folks/individual-aggregator.vala"
	gee_abstract_collection_add ((GeeAbstractCollection*) _tmp14_, _tmp15_);
#line 1437 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp16_ = persona;
#line 1437 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp17_ = folks_persona_get_store (_tmp16_);
#line 1437 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp18_ = _tmp17_;
#line 1437 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp19_ = persona_set;
#line 1437 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp20_ = persona_set;
#line 1437 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_personas_changed_cb (self, _tmp18_, (GeeSet*) _tmp19_, (GeeSet*) _tmp20_, NULL, NULL, FOLKS_GROUP_DETAILS_CHANGE_REASON_NONE);
#line 1415 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (persona_set);
#line 1415 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (persona);
#line 6307 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_persona_anti_links_changed_cb (FolksIndividualAggregator* self,
                                                            GObject* obj,
                                                            GParamSpec* pspec)
{
	FolksPersona* persona = NULL;
	FolksPersona* _tmp0_;
	const gchar* _tmp1_ = NULL;
	FolksPersona* _tmp2_;
	gboolean _tmp3_;
	gboolean _tmp4_;
	FolksPersona* _tmp5_;
	const gchar* _tmp6_;
	const gchar* _tmp7_;
	FolksPersona* _tmp8_;
	const gchar* _tmp9_;
	const gchar* _tmp10_;
	FolksSmallSet* persona_set = NULL;
	FolksSmallSet* _tmp11_;
	FolksPersona* _tmp12_;
	FolksPersona* _tmp13_;
	FolksPersonaStore* _tmp14_;
	FolksPersonaStore* _tmp15_;
#line 1441 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1441 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (obj != NULL);
#line 1441 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (pspec != NULL);
#line 1443 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (obj, FOLKS_TYPE_PERSONA) ? ((FolksPersona*) obj) : NULL);
#line 1443 "/run/build/folks/folks/individual-aggregator.vala"
	persona = _tmp0_;
#line 1450 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = persona;
#line 1450 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = folks_persona_get_is_user (_tmp2_);
#line 1450 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp4_ = _tmp3_;
#line 1450 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp4_) {
#line 1450 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = "yes";
#line 6354 "individual-aggregator.c"
	} else {
#line 1450 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = "no";
#line 6358 "individual-aggregator.c"
	}
#line 1449 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp5_ = persona;
#line 1449 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp6_ = folks_persona_get_uid (_tmp5_);
#line 1449 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp7_ = _tmp6_;
#line 1449 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp8_ = persona;
#line 1449 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp9_ = folks_persona_get_iid (_tmp8_);
#line 1449 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp10_ = _tmp9_;
#line 1449 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:1449: Anti-links changed for persona '%s' (" \
"is user: %s, IID: %s).", _tmp7_, _tmp1_, _tmp10_);
#line 1452 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp11_ = folks_small_set_new (FOLKS_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1452 "/run/build/folks/folks/individual-aggregator.vala"
	persona_set = _tmp11_;
#line 1453 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp12_ = persona;
#line 1453 "/run/build/folks/folks/individual-aggregator.vala"
	gee_abstract_collection_add ((GeeAbstractCollection*) persona_set, _tmp12_);
#line 1455 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp13_ = persona;
#line 1455 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp14_ = folks_persona_get_store (_tmp13_);
#line 1455 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp15_ = _tmp14_;
#line 1455 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_personas_changed_cb (self, _tmp15_, (GeeSet*) persona_set, (GeeSet*) persona_set, NULL, NULL, FOLKS_GROUP_DETAILS_CHANGE_REASON_NONE);
#line 1441 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (persona_set);
#line 1441 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (persona);
#line 6394 "individual-aggregator.c"
}


static void
__folks_individual_aggregator_persona_linkable_property_changed_cb_g_object_notify (GObject* _sender,
                                                                                    GParamSpec* pspec,
                                                                                    gpointer self)
{
#line 1467 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_persona_linkable_property_changed_cb ((FolksIndividualAggregator*) self, _sender, pspec);
#line 6405 "individual-aggregator.c"
}


static void
__folks_individual_aggregator_persona_anti_links_changed_cb_g_object_notify (GObject* _sender,
                                                                             GParamSpec* pspec,
                                                                             gpointer self)
{
#line 1474 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_persona_anti_links_changed_cb ((FolksIndividualAggregator*) self, _sender, pspec);
#line 6416 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_connect_to_persona (FolksIndividualAggregator* self,
                                                 FolksPersona* persona)
{
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
	FolksAntiLinkable* al = NULL;
	FolksAntiLinkable* _tmp6_;
	FolksAntiLinkable* _tmp7_;
#line 1459 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1459 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (persona != NULL);
#line 1461 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = folks_persona_get_linkable_properties (persona, &_tmp0__length1);
#line 1461 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = _tmp0_;
#line 1461 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1__length1 = _tmp0__length1;
#line 6441 "individual-aggregator.c"
	{
		gchar** prop_name_collection = NULL;
		gint prop_name_collection_length1 = 0;
		gint _prop_name_collection_size_ = 0;
		gint prop_name_it = 0;
#line 1461 "/run/build/folks/folks/individual-aggregator.vala"
		prop_name_collection = _tmp1_;
#line 1461 "/run/build/folks/folks/individual-aggregator.vala"
		prop_name_collection_length1 = _tmp1__length1;
#line 1461 "/run/build/folks/folks/individual-aggregator.vala"
		for (prop_name_it = 0; prop_name_it < _tmp1__length1; prop_name_it = prop_name_it + 1) {
#line 6453 "individual-aggregator.c"
			gchar* _tmp2_;
			gchar* prop_name = NULL;
#line 1461 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp2_ = g_strdup (prop_name_collection[prop_name_it]);
#line 1461 "/run/build/folks/folks/individual-aggregator.vala"
			prop_name = _tmp2_;
#line 6460 "individual-aggregator.c"
			{
				const gchar* _tmp3_;
				const gchar* _tmp4_;
				gchar* _tmp5_;
#line 1464 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp3_ = prop_name;
#line 1464 "/run/build/folks/folks/individual-aggregator.vala"
				if (_tmp3_ == NULL) {
#line 1465 "/run/build/folks/folks/individual-aggregator.vala"
					_g_free0 (prop_name);
#line 1465 "/run/build/folks/folks/individual-aggregator.vala"
					continue;
#line 6473 "individual-aggregator.c"
				}
#line 1467 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp4_ = prop_name;
#line 1467 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp5_ = g_strconcat ("notify::", _tmp4_, NULL);
#line 1467 "/run/build/folks/folks/individual-aggregator.vala"
				g_signal_connect_object ((GObject*) persona, _tmp5_, (GCallback) __folks_individual_aggregator_persona_linkable_property_changed_cb_g_object_notify, self, 0);
#line 1467 "/run/build/folks/folks/individual-aggregator.vala"
				_g_free0 (_tmp5_);
#line 1461 "/run/build/folks/folks/individual-aggregator.vala"
				_g_free0 (prop_name);
#line 6485 "individual-aggregator.c"
			}
		}
	}
#line 1471 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp6_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (persona, FOLKS_TYPE_ANTI_LINKABLE) ? ((FolksAntiLinkable*) persona) : NULL);
#line 1471 "/run/build/folks/folks/individual-aggregator.vala"
	al = _tmp6_;
#line 1472 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp7_ = al;
#line 1472 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp7_ != NULL) {
#line 6497 "individual-aggregator.c"
		FolksAntiLinkable* _tmp8_;
#line 1474 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp8_ = al;
#line 1474 "/run/build/folks/folks/individual-aggregator.vala"
		g_signal_connect_object ((GObject*) _tmp8_, "notify::anti-links", (GCallback) __folks_individual_aggregator_persona_anti_links_changed_cb_g_object_notify, self, 0);
#line 6503 "individual-aggregator.c"
	}
#line 1459 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (al);
#line 6507 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_disconnect_from_persona (FolksIndividualAggregator* self,
                                                      FolksPersona* persona)
{
	FolksAntiLinkable* al = NULL;
	FolksAntiLinkable* _tmp0_;
	FolksAntiLinkable* _tmp1_;
	gchar** _tmp5_;
	gint _tmp5__length1;
	gchar** _tmp6_;
	gint _tmp6__length1;
#line 1478 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1478 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (persona != NULL);
#line 1480 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (persona, FOLKS_TYPE_ANTI_LINKABLE) ? ((FolksAntiLinkable*) persona) : NULL);
#line 1480 "/run/build/folks/folks/individual-aggregator.vala"
	al = _tmp0_;
#line 1481 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = al;
#line 1481 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp1_ != NULL) {
#line 6534 "individual-aggregator.c"
		FolksAntiLinkable* _tmp2_;
		guint _tmp3_;
		GQuark _tmp4_;
#line 1483 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = al;
#line 1483 "/run/build/folks/folks/individual-aggregator.vala"
		g_signal_parse_name ("notify::anti-links", G_TYPE_OBJECT, &_tmp3_, &_tmp4_, TRUE);
#line 1483 "/run/build/folks/folks/individual-aggregator.vala"
		g_signal_handlers_disconnect_matched ((GObject*) _tmp2_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_DETAIL | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp3_, _tmp4_, NULL, (GCallback) __folks_individual_aggregator_persona_anti_links_changed_cb_g_object_notify, self);
#line 6544 "individual-aggregator.c"
	}
#line 1487 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp5_ = folks_persona_get_linkable_properties (persona, &_tmp5__length1);
#line 1487 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp6_ = _tmp5_;
#line 1487 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp6__length1 = _tmp5__length1;
#line 6552 "individual-aggregator.c"
	{
		gchar** prop_name_collection = NULL;
		gint prop_name_collection_length1 = 0;
		gint _prop_name_collection_size_ = 0;
		gint prop_name_it = 0;
#line 1487 "/run/build/folks/folks/individual-aggregator.vala"
		prop_name_collection = _tmp6_;
#line 1487 "/run/build/folks/folks/individual-aggregator.vala"
		prop_name_collection_length1 = _tmp6__length1;
#line 1487 "/run/build/folks/folks/individual-aggregator.vala"
		for (prop_name_it = 0; prop_name_it < _tmp6__length1; prop_name_it = prop_name_it + 1) {
#line 6564 "individual-aggregator.c"
			gchar* _tmp7_;
			gchar* prop_name = NULL;
#line 1487 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp7_ = g_strdup (prop_name_collection[prop_name_it]);
#line 1487 "/run/build/folks/folks/individual-aggregator.vala"
			prop_name = _tmp7_;
#line 6571 "individual-aggregator.c"
			{
				const gchar* _tmp8_;
				const gchar* _tmp9_;
				gchar* _tmp10_;
				guint _tmp11_;
				GQuark _tmp12_;
#line 1490 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp8_ = prop_name;
#line 1490 "/run/build/folks/folks/individual-aggregator.vala"
				if (_tmp8_ == NULL) {
#line 1491 "/run/build/folks/folks/individual-aggregator.vala"
					_g_free0 (prop_name);
#line 1491 "/run/build/folks/folks/individual-aggregator.vala"
					continue;
#line 6586 "individual-aggregator.c"
				}
#line 1493 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp9_ = prop_name;
#line 1493 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp10_ = g_strconcat ("notify::", _tmp9_, NULL);
#line 1493 "/run/build/folks/folks/individual-aggregator.vala"
				g_signal_parse_name (_tmp10_, G_TYPE_OBJECT, &_tmp11_, &_tmp12_, TRUE);
#line 1493 "/run/build/folks/folks/individual-aggregator.vala"
				g_signal_handlers_disconnect_matched ((GObject*) persona, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_DETAIL | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp11_, _tmp12_, NULL, (GCallback) __folks_individual_aggregator_persona_linkable_property_changed_cb_g_object_notify, self);
#line 1493 "/run/build/folks/folks/individual-aggregator.vala"
				_g_free0 (_tmp10_);
#line 1487 "/run/build/folks/folks/individual-aggregator.vala"
				_g_free0 (prop_name);
#line 6600 "individual-aggregator.c"
			}
		}
	}
#line 1478 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (al);
#line 6606 "individual-aggregator.c"
}


static gpointer
_g_ptr_array_ref0 (gpointer self)
{
#line 1505 "/run/build/folks/folks/individual-aggregator.vala"
	return self ? g_ptr_array_ref (self) : NULL;
#line 6615 "individual-aggregator.c"
}


static void
_g_object_unref0_ (gpointer var)
{
#line 1509 "/run/build/folks/folks/individual-aggregator.vala"
	(var == NULL) ? NULL : (var = (g_object_unref (var), NULL));
#line 6624 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_link_map_set (FolksIndividualAggregator* self,
                                           const gchar* key,
                                           FolksIndividual* individual)
{
	GPtrArray* inds = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	GPtrArray* _tmp2_;
	GPtrArray* _tmp3_;
	GPtrArray* _tmp18_;
	FolksIndividual* _tmp19_;
#line 1503 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1503 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (key != NULL);
#line 1503 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (individual != NULL);
#line 1505 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_link_map;
#line 1505 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = g_hash_table_lookup (_tmp0_, key);
#line 1505 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = _g_ptr_array_ref0 ((GPtrArray*) _tmp1_);
#line 1505 "/run/build/folks/folks/individual-aggregator.vala"
	inds = _tmp2_;
#line 1507 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = inds;
#line 1507 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp3_ == NULL) {
#line 6658 "individual-aggregator.c"
		GPtrArray* _tmp4_;
		GHashTable* _tmp5_;
		gchar* _tmp6_;
		GPtrArray* _tmp7_;
		GPtrArray* _tmp8_;
#line 1509 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp4_ = g_ptr_array_new_full ((guint) 0, _g_object_unref0_);
#line 1509 "/run/build/folks/folks/individual-aggregator.vala"
		_g_ptr_array_unref0 (inds);
#line 1509 "/run/build/folks/folks/individual-aggregator.vala"
		inds = _tmp4_;
#line 1510 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp5_ = self->priv->_link_map;
#line 1510 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp6_ = g_strdup (key);
#line 1510 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp7_ = inds;
#line 1510 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp8_ = _g_ptr_array_ref0 ((GPtrArray*) _tmp7_);
#line 1510 "/run/build/folks/folks/individual-aggregator.vala"
		g_hash_table_insert (_tmp5_, _tmp6_, _tmp8_);
#line 6680 "individual-aggregator.c"
	} else {
		{
			guint i = 0U;
#line 1514 "/run/build/folks/folks/individual-aggregator.vala"
			i = (guint) 0;
#line 6686 "individual-aggregator.c"
			{
				gboolean _tmp9_ = FALSE;
#line 1514 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp9_ = TRUE;
#line 1514 "/run/build/folks/folks/individual-aggregator.vala"
				while (TRUE) {
#line 6693 "individual-aggregator.c"
					guint _tmp11_;
					GPtrArray* _tmp12_;
					gint _tmp13_;
					gint _tmp14_;
					GPtrArray* _tmp15_;
					guint _tmp16_;
					gconstpointer _tmp17_;
#line 1514 "/run/build/folks/folks/individual-aggregator.vala"
					if (!_tmp9_) {
#line 6703 "individual-aggregator.c"
						guint _tmp10_;
#line 1514 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp10_ = i;
#line 1514 "/run/build/folks/folks/individual-aggregator.vala"
						i = _tmp10_ + 1;
#line 6709 "individual-aggregator.c"
					}
#line 1514 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp9_ = FALSE;
#line 1514 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp11_ = i;
#line 1514 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp12_ = inds;
#line 1514 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp13_ = g_ptr_array_get_length ((GPtrArray*) _tmp12_);
#line 1514 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp14_ = _tmp13_;
#line 1514 "/run/build/folks/folks/individual-aggregator.vala"
					if (!(_tmp11_ < ((guint) _tmp14_))) {
#line 1514 "/run/build/folks/folks/individual-aggregator.vala"
						break;
#line 6725 "individual-aggregator.c"
					}
#line 1516 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp15_ = inds;
#line 1516 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp16_ = i;
#line 1516 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp17_ = g_ptr_array_index ((GPtrArray*) _tmp15_, _tmp16_);
#line 1516 "/run/build/folks/folks/individual-aggregator.vala"
					if (((FolksIndividual*) _tmp17_) == individual) {
#line 1517 "/run/build/folks/folks/individual-aggregator.vala"
						_g_ptr_array_unref0 (inds);
#line 1517 "/run/build/folks/folks/individual-aggregator.vala"
						return;
#line 6739 "individual-aggregator.c"
					}
				}
			}
		}
	}
#line 1521 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp18_ = inds;
#line 1521 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp19_ = _g_object_ref0 (individual);
#line 1521 "/run/build/folks/folks/individual-aggregator.vala"
	g_ptr_array_add ((GPtrArray*) _tmp18_, _tmp19_);
#line 1503 "/run/build/folks/folks/individual-aggregator.vala"
	_g_ptr_array_unref0 (inds);
#line 6753 "individual-aggregator.c"
}


static Block7Data*
block7_data_ref (Block7Data* _data7_)
{
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
	g_atomic_int_inc (&_data7_->_ref_count_);
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
	return _data7_;
#line 6764 "individual-aggregator.c"
}


static void
block7_data_unref (void * _userdata_)
{
	Block7Data* _data7_;
	_data7_ = (Block7Data*) _userdata_;
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
	if (g_atomic_int_dec_and_test (&_data7_->_ref_count_)) {
#line 6775 "individual-aggregator.c"
		FolksIndividualAggregator* self;
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
		self = _data7_->self;
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_data7_->individual);
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (self);
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
		g_slice_free (Block7Data, _data7_);
#line 6785 "individual-aggregator.c"
	}
}


static void
_____lambda68_ (Block7Data* _data7_,
                const gchar* l)
{
	FolksIndividualAggregator* self;
	const gchar* prop_linking_value = NULL;
#line 1561 "/run/build/folks/folks/individual-aggregator.vala"
	self = _data7_->self;
#line 1561 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (l != NULL);
#line 1563 "/run/build/folks/folks/individual-aggregator.vala"
	prop_linking_value = l;
#line 1565 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:1565:             %s", prop_linking_value);
#line 1566 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_link_map_set (self, prop_linking_value, _data7_->individual);
#line 6806 "individual-aggregator.c"
}


static void
______lambda68__folks_persona_linkable_property_callback (const gchar* link,
                                                          gpointer self)
{
#line 1561 "/run/build/folks/folks/individual-aggregator.vala"
	_____lambda68_ (self, link);
#line 6816 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_add_persona_to_link_map (FolksIndividualAggregator* self,
                                                      FolksPersona* persona,
                                                      FolksIndividual* individual)
{
	Block7Data* _data7_;
	FolksIndividual* _tmp0_;
	const gchar* _tmp1_ = NULL;
	gboolean _tmp2_;
	gboolean _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	const gchar* _tmp9_;
	const gchar* _tmp10_;
	const gchar* _tmp11_;
	FolksPersonaStore* _tmp12_;
	FolksPersonaStore* _tmp13_;
	FolksPersonaStoreTrust _tmp14_;
	FolksPersonaStoreTrust _tmp15_;
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (persona != NULL);
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (individual != NULL);
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
	_data7_ = g_slice_new0 (Block7Data);
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
	_data7_->_ref_count_ = 1;
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
	_data7_->self = g_object_ref (self);
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (individual);
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data7_->individual);
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
	_data7_->individual = _tmp0_;
#line 1527 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = folks_persona_get_is_user (persona);
#line 1527 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = _tmp2_;
#line 1527 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp3_) {
#line 1527 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = "yes";
#line 6868 "individual-aggregator.c"
	} else {
#line 1527 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = "no";
#line 6872 "individual-aggregator.c"
	}
#line 1526 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp4_ = folks_persona_get_uid (persona);
#line 1526 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp5_ = _tmp4_;
#line 1526 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp6_ = folks_persona_get_iid (persona);
#line 1526 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp7_ = _tmp6_;
#line 1526 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:1526: Connecting to Persona: %s (is user: %" \
"s, IID: %s)", _tmp5_, _tmp1_, _tmp7_);
#line 1528 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp8_ = folks_individual_get_id (_data7_->individual);
#line 1528 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp9_ = _tmp8_;
#line 1528 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:1528:     Mapping to Individual: %s", _tmp9_);
#line 1533 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp10_ = folks_persona_get_iid (persona);
#line 1533 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp11_ = _tmp10_;
#line 1533 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_link_map_set (self, _tmp11_, _data7_->individual);
#line 1537 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp12_ = folks_persona_get_store (persona);
#line 1537 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp13_ = _tmp12_;
#line 1537 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp14_ = folks_persona_store_get_trust_level (_tmp13_);
#line 1537 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp15_ = _tmp14_;
#line 1537 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp15_ == FOLKS_PERSONA_STORE_TRUST_FULL) {
#line 6906 "individual-aggregator.c"
		gchar** _tmp16_;
		gint _tmp16__length1;
		gchar** _tmp17_;
		gint _tmp17__length1;
#line 1539 "/run/build/folks/folks/individual-aggregator.vala"
		g_debug ("individual-aggregator.vala:1539:     Inserting links:");
#line 1543 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp16_ = folks_persona_get_linkable_properties (persona, &_tmp16__length1);
#line 1543 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp17_ = _tmp16_;
#line 1543 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp17__length1 = _tmp16__length1;
#line 6919 "individual-aggregator.c"
		{
			gchar** prop_name_collection = NULL;
			gint prop_name_collection_length1 = 0;
			gint _prop_name_collection_size_ = 0;
			gint prop_name_it = 0;
#line 1543 "/run/build/folks/folks/individual-aggregator.vala"
			prop_name_collection = _tmp17_;
#line 1543 "/run/build/folks/folks/individual-aggregator.vala"
			prop_name_collection_length1 = _tmp17__length1;
#line 1543 "/run/build/folks/folks/individual-aggregator.vala"
			for (prop_name_it = 0; prop_name_it < _tmp17__length1; prop_name_it = prop_name_it + 1) {
#line 6931 "individual-aggregator.c"
				const gchar* prop_name = NULL;
#line 1543 "/run/build/folks/folks/individual-aggregator.vala"
				prop_name = prop_name_collection[prop_name_it];
#line 6935 "individual-aggregator.c"
				{
					const gchar* _tmp18_;
					const gchar* _tmp19_;
					GObjectClass* pclass = NULL;
					GObjectClass* _tmp20_;
					GObjectClass* _tmp21_;
					const gchar* _tmp22_;
					GParamSpec* _tmp23_;
					const gchar* _tmp25_;
#line 1546 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp18_ = prop_name;
#line 1546 "/run/build/folks/folks/individual-aggregator.vala"
					if (_tmp18_ == NULL) {
#line 1547 "/run/build/folks/folks/individual-aggregator.vala"
						continue;
#line 6951 "individual-aggregator.c"
					}
#line 1549 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp19_ = prop_name;
#line 1549 "/run/build/folks/folks/individual-aggregator.vala"
					g_debug ("individual-aggregator.vala:1549:         %s", _tmp19_);
#line 1551 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp20_ = G_OBJECT_GET_CLASS ((GObject*) persona);
#line 1551 "/run/build/folks/folks/individual-aggregator.vala"
					pclass = _tmp20_;
#line 1552 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp21_ = pclass;
#line 1552 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp22_ = prop_name;
#line 1552 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp23_ = g_object_class_find_property (_tmp21_, _tmp22_);
#line 1552 "/run/build/folks/folks/individual-aggregator.vala"
					if (_tmp23_ == NULL) {
#line 6969 "individual-aggregator.c"
						const gchar* _tmp24_;
#line 1554 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp24_ = prop_name;
#line 1554 "/run/build/folks/folks/individual-aggregator.vala"
						g_warning (_ ("Unknown property ‘%s’ in linkable property list."), _tmp24_);
#line 1558 "/run/build/folks/folks/individual-aggregator.vala"
						continue;
#line 6977 "individual-aggregator.c"
					}
#line 1561 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp25_ = prop_name;
#line 1561 "/run/build/folks/folks/individual-aggregator.vala"
					folks_persona_linkable_property_to_links (persona, _tmp25_, ______lambda68__folks_persona_linkable_property_callback, _data7_);
#line 6983 "individual-aggregator.c"
				}
			}
		}
	}
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
	block7_data_unref (_data7_);
#line 1524 "/run/build/folks/folks/individual-aggregator.vala"
	_data7_ = NULL;
#line 6992 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_remove_individual_from_link_map (FolksIndividualAggregator* self,
                                                              FolksIndividual* individual)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	GHashTableIter iter = {0};
	GHashTable* _tmp2_;
	const gchar* link_key = NULL;
	GPtrArray* inds = NULL;
#line 1578 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1578 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (individual != NULL);
#line 1580 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = folks_individual_get_id (individual);
#line 1580 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = _tmp0_;
#line 1580 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:1580: Removing Individual '%s' from the lin" \
"k map.", _tmp1_);
#line 1582 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = self->priv->_link_map;
#line 1582 "/run/build/folks/folks/individual-aggregator.vala"
	g_hash_table_iter_init (&iter, _tmp2_);
#line 1587 "/run/build/folks/folks/individual-aggregator.vala"
	while (TRUE) {
#line 7022 "individual-aggregator.c"
		gconstpointer _tmp3_ = NULL;
		gconstpointer _tmp4_ = NULL;
		gboolean _tmp5_;
#line 1587 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp5_ = g_hash_table_iter_next (&iter, (gpointer*) (&_tmp3_), (gpointer*) (&_tmp4_));
#line 1587 "/run/build/folks/folks/individual-aggregator.vala"
		link_key = _tmp3_;
#line 1587 "/run/build/folks/folks/individual-aggregator.vala"
		inds = _tmp4_;
#line 1587 "/run/build/folks/folks/individual-aggregator.vala"
		if (!_tmp5_) {
#line 1587 "/run/build/folks/folks/individual-aggregator.vala"
			break;
#line 7036 "individual-aggregator.c"
		}
		{
			guint i = 0U;
#line 1589 "/run/build/folks/folks/individual-aggregator.vala"
			i = (guint) 0;
#line 7042 "individual-aggregator.c"
			{
				gboolean _tmp6_ = FALSE;
#line 1589 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp6_ = TRUE;
#line 1589 "/run/build/folks/folks/individual-aggregator.vala"
				while (TRUE) {
#line 7049 "individual-aggregator.c"
					guint _tmp8_;
					GPtrArray* _tmp9_;
					gint _tmp10_;
					gint _tmp11_;
					GPtrArray* _tmp12_;
					guint _tmp13_;
					gconstpointer _tmp14_;
#line 1589 "/run/build/folks/folks/individual-aggregator.vala"
					if (!_tmp6_) {
#line 7059 "individual-aggregator.c"
						guint _tmp7_;
#line 1589 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp7_ = i;
#line 1589 "/run/build/folks/folks/individual-aggregator.vala"
						i = _tmp7_ + 1;
#line 7065 "individual-aggregator.c"
					}
#line 1589 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp6_ = FALSE;
#line 1589 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp8_ = i;
#line 1589 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp9_ = inds;
#line 1589 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp10_ = g_ptr_array_get_length (_tmp9_);
#line 1589 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp11_ = _tmp10_;
#line 1589 "/run/build/folks/folks/individual-aggregator.vala"
					if (!(_tmp8_ < ((guint) _tmp11_))) {
#line 1589 "/run/build/folks/folks/individual-aggregator.vala"
						break;
#line 7081 "individual-aggregator.c"
					}
#line 1591 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp12_ = inds;
#line 1591 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp13_ = i;
#line 1591 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp14_ = g_ptr_array_index (_tmp12_, _tmp13_);
#line 1591 "/run/build/folks/folks/individual-aggregator.vala"
					if (((FolksIndividual*) _tmp14_) == individual) {
#line 7091 "individual-aggregator.c"
						const gchar* _tmp15_;
						const gchar* _tmp16_;
						const gchar* _tmp17_;
						GPtrArray* _tmp18_;
						guint _tmp19_;
						GPtrArray* _tmp20_;
						gint _tmp21_;
						gint _tmp22_;
#line 1593 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp15_ = link_key;
#line 1593 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp16_ = folks_individual_get_id (individual);
#line 1593 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp17_ = _tmp16_;
#line 1593 "/run/build/folks/folks/individual-aggregator.vala"
						g_debug ("individual-aggregator.vala:1593:     %s → %s (%p)", _tmp15_, _tmp17_, individual);
#line 1596 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp18_ = inds;
#line 1596 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp19_ = i;
#line 1596 "/run/build/folks/folks/individual-aggregator.vala"
						g_ptr_array_remove_index_fast (_tmp18_, _tmp19_);
#line 1598 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp20_ = inds;
#line 1598 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp21_ = g_ptr_array_get_length (_tmp20_);
#line 1598 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp22_ = _tmp21_;
#line 1598 "/run/build/folks/folks/individual-aggregator.vala"
						if (_tmp22_ == 0) {
#line 1599 "/run/build/folks/folks/individual-aggregator.vala"
							g_hash_table_iter_remove (&iter);
#line 7124 "individual-aggregator.c"
						}
#line 1603 "/run/build/folks/folks/individual-aggregator.vala"
						break;
#line 7128 "individual-aggregator.c"
					}
				}
			}
		}
	}
}


static void
_folks_individual_aggregator_personas_changed_cb (FolksIndividualAggregator* self,
                                                  FolksPersonaStore* store,
                                                  GeeSet* added,
                                                  GeeSet* removed,
                                                  const gchar* message,
                                                  FolksPersona* actor,
                                                  FolksGroupDetailsChangeReason reason)
{
	GeeHashSet* removed_individuals = NULL;
	GeeHashSet* _tmp0_;
	GeeHashMultiMap* individuals_changes = NULL;
	GeeHashMultiMap* _tmp1_;
	GeeHashSet* relinked_personas = NULL;
	GeeHashSet* _tmp2_;
	GeeHashMap* replaced_individuals = NULL;
	GeeHashMap* _tmp3_;
	FolksIndividual* user = NULL;
	FolksIndividual* _tmp4_;
	FolksIndividual* _tmp5_;
	gint _tmp72_;
	gint _tmp73_;
	GeeHashSet* _tmp89_;
	FolksIndividual* _tmp118_;
	GeeHashMultiMap* _tmp119_;
	gint _tmp120_;
	gint _tmp121_;
	GeeMapIterator* iter2 = NULL;
	GeeHashMap* _tmp149_;
	GeeMapIterator* _tmp150_;
	FolksDebug* _tmp166_;
	gboolean _tmp167_;
	gboolean _tmp168_;
#line 1609 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1609 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (store != NULL);
#line 1609 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (added != NULL);
#line 1609 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (removed != NULL);
#line 1616 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = gee_hash_set_new (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1616 "/run/build/folks/folks/individual-aggregator.vala"
	removed_individuals = _tmp0_;
#line 1617 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = gee_hash_multi_map_new (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1617 "/run/build/folks/folks/individual-aggregator.vala"
	individuals_changes = _tmp1_;
#line 1618 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = gee_hash_set_new (FOLKS_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1618 "/run/build/folks/folks/individual-aggregator.vala"
	relinked_personas = _tmp2_;
#line 1619 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = gee_hash_map_new (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1619 "/run/build/folks/folks/individual-aggregator.vala"
	replaced_individuals = _tmp3_;
#line 1624 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp4_ = self->priv->_user;
#line 1624 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp5_ = _g_object_ref0 (_tmp4_);
#line 1624 "/run/build/folks/folks/individual-aggregator.vala"
	user = _tmp5_;
#line 1626 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:1626: Removing Personas:");
#line 7202 "individual-aggregator.c"
	{
		GeeIterator* _persona_it = NULL;
		GeeIterator* _tmp6_;
#line 1628 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp6_ = gee_iterable_iterator ((GeeIterable*) removed);
#line 1628 "/run/build/folks/folks/individual-aggregator.vala"
		_persona_it = _tmp6_;
#line 1628 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 7212 "individual-aggregator.c"
			GeeIterator* _tmp7_;
			FolksPersona* persona = NULL;
			GeeIterator* _tmp8_;
			gpointer _tmp9_;
			const gchar* _tmp10_ = NULL;
			FolksPersona* _tmp11_;
			gboolean _tmp12_;
			gboolean _tmp13_;
			FolksPersona* _tmp14_;
			const gchar* _tmp15_;
			const gchar* _tmp16_;
			FolksPersona* _tmp17_;
			const gchar* _tmp18_;
			const gchar* _tmp19_;
			FolksIndividual* ind = NULL;
			FolksPersona* _tmp20_;
			FolksIndividual* _tmp21_;
			FolksIndividual* _tmp22_;
			FolksIndividual* _tmp23_;
			FolksIndividual* _tmp24_;
			FolksPersona* _tmp27_;
#line 1628 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp7_ = _persona_it;
#line 1628 "/run/build/folks/folks/individual-aggregator.vala"
			if (!gee_iterator_next (_tmp7_)) {
#line 1628 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 7240 "individual-aggregator.c"
			}
#line 1628 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp8_ = _persona_it;
#line 1628 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp9_ = gee_iterator_get (_tmp8_);
#line 1628 "/run/build/folks/folks/individual-aggregator.vala"
			persona = (FolksPersona*) _tmp9_;
#line 1631 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp11_ = persona;
#line 1631 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp12_ = folks_persona_get_is_user (_tmp11_);
#line 1631 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp13_ = _tmp12_;
#line 1631 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp13_) {
#line 1631 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp10_ = "yes";
#line 7258 "individual-aggregator.c"
			} else {
#line 1631 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp10_ = "no";
#line 7262 "individual-aggregator.c"
			}
#line 1630 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp14_ = persona;
#line 1630 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp15_ = folks_persona_get_uid (_tmp14_);
#line 1630 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp16_ = _tmp15_;
#line 1630 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp17_ = persona;
#line 1630 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp18_ = folks_persona_get_iid (_tmp17_);
#line 1630 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp19_ = _tmp18_;
#line 1630 "/run/build/folks/folks/individual-aggregator.vala"
			g_debug ("individual-aggregator.vala:1630:     %s (is user: %s, IID: %s)", _tmp16_, _tmp10_, _tmp19_);
#line 1636 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp20_ = persona;
#line 1636 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp21_ = folks_persona_get_individual (_tmp20_);
#line 1636 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp22_ = _tmp21_;
#line 1636 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp23_ = _g_object_ref0 (_tmp22_);
#line 1636 "/run/build/folks/folks/individual-aggregator.vala"
			ind = _tmp23_;
#line 1637 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp24_ = ind;
#line 1637 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp24_ != NULL) {
#line 7292 "individual-aggregator.c"
				GeeHashSet* _tmp25_;
				FolksIndividual* _tmp26_;
#line 1639 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp25_ = removed_individuals;
#line 1639 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp26_ = ind;
#line 1639 "/run/build/folks/folks/individual-aggregator.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp25_, G_TYPE_CHECK_INSTANCE_CAST (_tmp26_, FOLKS_TYPE_INDIVIDUAL, FolksIndividual));
#line 7301 "individual-aggregator.c"
			}
#line 1644 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp27_ = persona;
#line 1644 "/run/build/folks/folks/individual-aggregator.vala"
			_folks_individual_aggregator_disconnect_from_persona (self, _tmp27_);
#line 1628 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (ind);
#line 1628 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (persona);
#line 7311 "individual-aggregator.c"
		}
#line 1628 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_persona_it);
#line 7315 "individual-aggregator.c"
	}
#line 1654 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:1654: Removing Individuals due to removed l" \
"inks:");
#line 7319 "individual-aggregator.c"
	{
		GeeIterator* _individual_it = NULL;
		GeeHashSet* _tmp28_;
		GeeIterator* _tmp29_;
#line 1655 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp28_ = removed_individuals;
#line 1655 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp29_ = gee_abstract_collection_iterator ((GeeAbstractCollection*) _tmp28_);
#line 1655 "/run/build/folks/folks/individual-aggregator.vala"
		_individual_it = _tmp29_;
#line 1655 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 7332 "individual-aggregator.c"
			GeeIterator* _tmp30_;
			FolksIndividual* individual = NULL;
			GeeIterator* _tmp31_;
			gpointer _tmp32_;
			GeeMap* _tmp33_;
			FolksIndividual* _tmp34_;
			const gchar* _tmp35_;
			const gchar* _tmp36_;
			FolksIndividual* _tmp37_;
			const gchar* _tmp38_;
			const gchar* _tmp39_;
			FolksIndividual* _tmp53_;
			FolksIndividual* _tmp54_;
			FolksIndividual* _tmp55_;
			FolksIndividual* _tmp56_;
#line 1655 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp30_ = _individual_it;
#line 1655 "/run/build/folks/folks/individual-aggregator.vala"
			if (!gee_iterator_next (_tmp30_)) {
#line 1655 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 7354 "individual-aggregator.c"
			}
#line 1655 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp31_ = _individual_it;
#line 1655 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp32_ = gee_iterator_get (_tmp31_);
#line 1655 "/run/build/folks/folks/individual-aggregator.vala"
			individual = (FolksIndividual*) _tmp32_;
#line 1658 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp33_ = self->priv->_individuals;
#line 1658 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp34_ = individual;
#line 1658 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp35_ = folks_individual_get_id (_tmp34_);
#line 1658 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp36_ = _tmp35_;
#line 1658 "/run/build/folks/folks/individual-aggregator.vala"
			if (gee_map_has_key (_tmp33_, _tmp36_) == FALSE) {
#line 1659 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (individual);
#line 1659 "/run/build/folks/folks/individual-aggregator.vala"
				continue;
#line 7376 "individual-aggregator.c"
			}
#line 1661 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp37_ = individual;
#line 1661 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp38_ = folks_individual_get_id (_tmp37_);
#line 1661 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp39_ = _tmp38_;
#line 1661 "/run/build/folks/folks/individual-aggregator.vala"
			g_debug ("individual-aggregator.vala:1661:     %s", _tmp39_);
#line 7386 "individual-aggregator.c"
			{
				GeeIterator* _persona_it = NULL;
				FolksIndividual* _tmp40_;
				GeeSet* _tmp41_;
				GeeSet* _tmp42_;
				GeeIterator* _tmp43_;
#line 1665 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp40_ = individual;
#line 1665 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp41_ = folks_individual_get_personas (_tmp40_);
#line 1665 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp42_ = _tmp41_;
#line 1665 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp43_ = gee_iterable_iterator ((GeeIterable*) _tmp42_);
#line 1665 "/run/build/folks/folks/individual-aggregator.vala"
				_persona_it = _tmp43_;
#line 1665 "/run/build/folks/folks/individual-aggregator.vala"
				while (TRUE) {
#line 7405 "individual-aggregator.c"
					GeeIterator* _tmp44_;
					FolksPersona* persona = NULL;
					GeeIterator* _tmp45_;
					gpointer _tmp46_;
					gboolean _tmp47_ = FALSE;
					FolksPersona* _tmp48_;
					GeeHashSet* _tmp51_;
					FolksPersona* _tmp52_;
#line 1665 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp44_ = _persona_it;
#line 1665 "/run/build/folks/folks/individual-aggregator.vala"
					if (!gee_iterator_next (_tmp44_)) {
#line 1665 "/run/build/folks/folks/individual-aggregator.vala"
						break;
#line 7420 "individual-aggregator.c"
					}
#line 1665 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp45_ = _persona_it;
#line 1665 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp46_ = gee_iterator_get (_tmp45_);
#line 1665 "/run/build/folks/folks/individual-aggregator.vala"
					persona = (FolksPersona*) _tmp46_;
#line 1667 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp48_ = persona;
#line 1667 "/run/build/folks/folks/individual-aggregator.vala"
					if (gee_collection_contains ((GeeCollection*) removed, _tmp48_) == TRUE) {
#line 1667 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp47_ = TRUE;
#line 7434 "individual-aggregator.c"
					} else {
						GeeHashSet* _tmp49_;
						FolksPersona* _tmp50_;
#line 1668 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp49_ = relinked_personas;
#line 1668 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp50_ = persona;
#line 1668 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp47_ = gee_abstract_collection_contains ((GeeAbstractCollection*) _tmp49_, _tmp50_) == TRUE;
#line 7444 "individual-aggregator.c"
					}
#line 1667 "/run/build/folks/folks/individual-aggregator.vala"
					if (_tmp47_) {
#line 1669 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (persona);
#line 1669 "/run/build/folks/folks/individual-aggregator.vala"
						continue;
#line 7452 "individual-aggregator.c"
					}
#line 1671 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp51_ = relinked_personas;
#line 1671 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp52_ = persona;
#line 1671 "/run/build/folks/folks/individual-aggregator.vala"
					gee_abstract_collection_add ((GeeAbstractCollection*) _tmp51_, _tmp52_);
#line 1665 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (persona);
#line 7462 "individual-aggregator.c"
				}
#line 1665 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_persona_it);
#line 7466 "individual-aggregator.c"
			}
#line 1674 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp53_ = user;
#line 1674 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp54_ = individual;
#line 1674 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp53_ == _tmp54_) {
#line 1675 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (user);
#line 1675 "/run/build/folks/folks/individual-aggregator.vala"
				user = NULL;
#line 7478 "individual-aggregator.c"
			}
#line 1677 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp55_ = individual;
#line 1677 "/run/build/folks/folks/individual-aggregator.vala"
			_folks_individual_aggregator_disconnect_from_individual (self, _tmp55_);
#line 1680 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp56_ = individual;
#line 1680 "/run/build/folks/folks/individual-aggregator.vala"
			_folks_individual_aggregator_remove_individual_from_link_map (self, _tmp56_);
#line 1655 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (individual);
#line 7490 "individual-aggregator.c"
		}
#line 1655 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_individual_it);
#line 7494 "individual-aggregator.c"
	}
#line 1683 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:1683: Adding Personas:");
#line 7498 "individual-aggregator.c"
	{
		GeeIterator* _persona_it = NULL;
		GeeIterator* _tmp57_;
#line 1684 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp57_ = gee_iterable_iterator ((GeeIterable*) added);
#line 1684 "/run/build/folks/folks/individual-aggregator.vala"
		_persona_it = _tmp57_;
#line 1684 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 7508 "individual-aggregator.c"
			GeeIterator* _tmp58_;
			FolksPersona* persona = NULL;
			GeeIterator* _tmp59_;
			gpointer _tmp60_;
			const gchar* _tmp61_ = NULL;
			FolksPersona* _tmp62_;
			gboolean _tmp63_;
			gboolean _tmp64_;
			FolksPersona* _tmp65_;
			const gchar* _tmp66_;
			const gchar* _tmp67_;
			FolksPersona* _tmp68_;
			const gchar* _tmp69_;
			const gchar* _tmp70_;
			FolksPersona* _tmp71_;
#line 1684 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp58_ = _persona_it;
#line 1684 "/run/build/folks/folks/individual-aggregator.vala"
			if (!gee_iterator_next (_tmp58_)) {
#line 1684 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 7530 "individual-aggregator.c"
			}
#line 1684 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp59_ = _persona_it;
#line 1684 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp60_ = gee_iterator_get (_tmp59_);
#line 1684 "/run/build/folks/folks/individual-aggregator.vala"
			persona = (FolksPersona*) _tmp60_;
#line 1687 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp62_ = persona;
#line 1687 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp63_ = folks_persona_get_is_user (_tmp62_);
#line 1687 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp64_ = _tmp63_;
#line 1687 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp64_) {
#line 1687 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp61_ = "yes";
#line 7548 "individual-aggregator.c"
			} else {
#line 1687 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp61_ = "no";
#line 7552 "individual-aggregator.c"
			}
#line 1686 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp65_ = persona;
#line 1686 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp66_ = folks_persona_get_uid (_tmp65_);
#line 1686 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp67_ = _tmp66_;
#line 1686 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp68_ = persona;
#line 1686 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp69_ = folks_persona_get_iid (_tmp68_);
#line 1686 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp70_ = _tmp69_;
#line 1686 "/run/build/folks/folks/individual-aggregator.vala"
			g_debug ("individual-aggregator.vala:1686:     %s (is user: %s, IID: %s)", _tmp67_, _tmp61_, _tmp70_);
#line 1691 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp71_ = persona;
#line 1691 "/run/build/folks/folks/individual-aggregator.vala"
			_folks_individual_aggregator_connect_to_persona (self, _tmp71_);
#line 1684 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (persona);
#line 7574 "individual-aggregator.c"
		}
#line 1684 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_persona_it);
#line 7578 "individual-aggregator.c"
	}
#line 1694 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp72_ = gee_collection_get_size ((GeeCollection*) added);
#line 1694 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp73_ = _tmp72_;
#line 1694 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp73_ > 0) {
#line 1696 "/run/build/folks/folks/individual-aggregator.vala"
		_folks_individual_aggregator_add_personas (self, added, &user, &individuals_changes);
#line 7588 "individual-aggregator.c"
	}
#line 1699 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:1699: Relinking Personas:");
#line 7592 "individual-aggregator.c"
	{
		GeeIterator* _persona_it = NULL;
		GeeHashSet* _tmp74_;
		GeeIterator* _tmp75_;
#line 1700 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp74_ = relinked_personas;
#line 1700 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp75_ = gee_abstract_collection_iterator ((GeeAbstractCollection*) _tmp74_);
#line 1700 "/run/build/folks/folks/individual-aggregator.vala"
		_persona_it = _tmp75_;
#line 1700 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 7605 "individual-aggregator.c"
			GeeIterator* _tmp76_;
			FolksPersona* persona = NULL;
			GeeIterator* _tmp77_;
			gpointer _tmp78_;
			const gchar* _tmp79_ = NULL;
			FolksPersona* _tmp80_;
			gboolean _tmp81_;
			gboolean _tmp82_;
			FolksPersona* _tmp83_;
			const gchar* _tmp84_;
			const gchar* _tmp85_;
			FolksPersona* _tmp86_;
			const gchar* _tmp87_;
			const gchar* _tmp88_;
#line 1700 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp76_ = _persona_it;
#line 1700 "/run/build/folks/folks/individual-aggregator.vala"
			if (!gee_iterator_next (_tmp76_)) {
#line 1700 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 7626 "individual-aggregator.c"
			}
#line 1700 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp77_ = _persona_it;
#line 1700 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp78_ = gee_iterator_get (_tmp77_);
#line 1700 "/run/build/folks/folks/individual-aggregator.vala"
			persona = (FolksPersona*) _tmp78_;
#line 1703 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp80_ = persona;
#line 1703 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp81_ = folks_persona_get_is_user (_tmp80_);
#line 1703 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp82_ = _tmp81_;
#line 1703 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp82_) {
#line 1703 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp79_ = "yes";
#line 7644 "individual-aggregator.c"
			} else {
#line 1703 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp79_ = "no";
#line 7648 "individual-aggregator.c"
			}
#line 1702 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp83_ = persona;
#line 1702 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp84_ = folks_persona_get_uid (_tmp83_);
#line 1702 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp85_ = _tmp84_;
#line 1702 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp86_ = persona;
#line 1702 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp87_ = folks_persona_get_iid (_tmp86_);
#line 1702 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp88_ = _tmp87_;
#line 1702 "/run/build/folks/folks/individual-aggregator.vala"
			g_debug ("individual-aggregator.vala:1702:     %s (is user: %s, IID: %s)", _tmp85_, _tmp79_, _tmp88_);
#line 1700 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (persona);
#line 7666 "individual-aggregator.c"
		}
#line 1700 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_persona_it);
#line 7670 "individual-aggregator.c"
	}
#line 1706 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp89_ = relinked_personas;
#line 1706 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_add_personas (self, (GeeSet*) _tmp89_, &user, &individuals_changes);
#line 7676 "individual-aggregator.c"
	{
		GeeIterator* _individual_it = NULL;
		GeeHashSet* _tmp90_;
		GeeIterator* _tmp91_;
#line 1710 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp90_ = removed_individuals;
#line 1710 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp91_ = gee_abstract_collection_iterator ((GeeAbstractCollection*) _tmp90_);
#line 1710 "/run/build/folks/folks/individual-aggregator.vala"
		_individual_it = _tmp91_;
#line 1710 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 7689 "individual-aggregator.c"
			GeeIterator* _tmp92_;
			FolksIndividual* individual = NULL;
			GeeIterator* _tmp93_;
			gpointer _tmp94_;
			gboolean added_mapping = FALSE;
			gboolean _tmp114_;
			FolksIndividual* _tmp117_;
#line 1710 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp92_ = _individual_it;
#line 1710 "/run/build/folks/folks/individual-aggregator.vala"
			if (!gee_iterator_next (_tmp92_)) {
#line 1710 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 7703 "individual-aggregator.c"
			}
#line 1710 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp93_ = _individual_it;
#line 1710 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp94_ = gee_iterator_get (_tmp93_);
#line 1710 "/run/build/folks/folks/individual-aggregator.vala"
			individual = (FolksIndividual*) _tmp94_;
#line 1712 "/run/build/folks/folks/individual-aggregator.vala"
			added_mapping = FALSE;
#line 7713 "individual-aggregator.c"
			{
				GeeIterator* _persona_it = NULL;
				FolksIndividual* _tmp95_;
				GeeSet* _tmp96_;
				GeeSet* _tmp97_;
				GeeIterator* _tmp98_;
#line 1714 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp95_ = individual;
#line 1714 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp96_ = folks_individual_get_personas (_tmp95_);
#line 1714 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp97_ = _tmp96_;
#line 1714 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp98_ = gee_iterable_iterator ((GeeIterable*) _tmp97_);
#line 1714 "/run/build/folks/folks/individual-aggregator.vala"
				_persona_it = _tmp98_;
#line 1714 "/run/build/folks/folks/individual-aggregator.vala"
				while (TRUE) {
#line 7732 "individual-aggregator.c"
					GeeIterator* _tmp99_;
					FolksPersona* persona = NULL;
					GeeIterator* _tmp100_;
					gpointer _tmp101_;
					gboolean _tmp102_ = FALSE;
					FolksPersona* _tmp103_;
#line 1714 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp99_ = _persona_it;
#line 1714 "/run/build/folks/folks/individual-aggregator.vala"
					if (!gee_iterator_next (_tmp99_)) {
#line 1714 "/run/build/folks/folks/individual-aggregator.vala"
						break;
#line 7745 "individual-aggregator.c"
					}
#line 1714 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp100_ = _persona_it;
#line 1714 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp101_ = gee_iterator_get (_tmp100_);
#line 1714 "/run/build/folks/folks/individual-aggregator.vala"
					persona = (FolksPersona*) _tmp101_;
#line 1716 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp103_ = persona;
#line 1716 "/run/build/folks/folks/individual-aggregator.vala"
					if (!gee_collection_contains ((GeeCollection*) removed, _tmp103_)) {
#line 1716 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp102_ = TRUE;
#line 7759 "individual-aggregator.c"
					} else {
						FolksPersona* _tmp104_;
#line 1716 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp104_ = persona;
#line 1716 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp102_ = gee_collection_contains ((GeeCollection*) added, _tmp104_);
#line 7766 "individual-aggregator.c"
					}
#line 1716 "/run/build/folks/folks/individual-aggregator.vala"
					if (_tmp102_) {
#line 7770 "individual-aggregator.c"
						GeeHashMultiMap* _tmp105_;
						FolksPersona* _tmp106_;
						FolksIndividual* _tmp107_;
						FolksIndividual* _tmp108_;
						GeeHashMultiMap* _tmp109_;
						FolksIndividual* _tmp110_;
						FolksPersona* _tmp111_;
						FolksIndividual* _tmp112_;
						FolksIndividual* _tmp113_;
#line 1718 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp105_ = individuals_changes;
#line 1718 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp106_ = persona;
#line 1718 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp107_ = folks_persona_get_individual (_tmp106_);
#line 1718 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp108_ = _tmp107_;
#line 1718 "/run/build/folks/folks/individual-aggregator.vala"
						gee_multi_map_remove ((GeeMultiMap*) _tmp105_, NULL, _tmp108_);
#line 1719 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp109_ = individuals_changes;
#line 1719 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp110_ = individual;
#line 1719 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp111_ = persona;
#line 1719 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp112_ = folks_persona_get_individual (_tmp111_);
#line 1719 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp113_ = _tmp112_;
#line 1719 "/run/build/folks/folks/individual-aggregator.vala"
						gee_multi_map_set ((GeeMultiMap*) _tmp109_, _tmp110_, _tmp113_);
#line 1720 "/run/build/folks/folks/individual-aggregator.vala"
						added_mapping = TRUE;
#line 7804 "individual-aggregator.c"
					}
#line 1714 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (persona);
#line 7808 "individual-aggregator.c"
				}
#line 1714 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_persona_it);
#line 7812 "individual-aggregator.c"
			}
#line 1725 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp114_ = added_mapping;
#line 1725 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp114_ == FALSE) {
#line 7818 "individual-aggregator.c"
				GeeHashMultiMap* _tmp115_;
				FolksIndividual* _tmp116_;
#line 1727 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp115_ = individuals_changes;
#line 1727 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp116_ = individual;
#line 1727 "/run/build/folks/folks/individual-aggregator.vala"
				gee_multi_map_set ((GeeMultiMap*) _tmp115_, _tmp116_, NULL);
#line 7827 "individual-aggregator.c"
			}
#line 1730 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp117_ = individual;
#line 1730 "/run/build/folks/folks/individual-aggregator.vala"
			folks_individual_set_personas (_tmp117_, NULL);
#line 1710 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (individual);
#line 7835 "individual-aggregator.c"
		}
#line 1710 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_individual_it);
#line 7839 "individual-aggregator.c"
	}
#line 1734 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp118_ = user;
#line 1734 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_set_user (self, _tmp118_);
#line 1738 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp119_ = individuals_changes;
#line 1738 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp120_ = gee_multi_map_get_size ((GeeMultiMap*) _tmp119_);
#line 1738 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp121_ = _tmp120_;
#line 1738 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp121_ > 0) {
#line 7853 "individual-aggregator.c"
		GeeHashSet* added_individuals = NULL;
		GeeHashSet* _tmp122_;
		GeeMapIterator* iter1 = NULL;
		GeeHashMultiMap* _tmp123_;
		GeeMapIterator* _tmp124_;
		GeeHashSet* _tmp146_;
		GeeHashSet* _tmp147_;
		GeeHashMultiMap* _tmp148_;
#line 1740 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp122_ = gee_hash_set_new (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1740 "/run/build/folks/folks/individual-aggregator.vala"
		added_individuals = _tmp122_;
#line 1745 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp123_ = individuals_changes;
#line 1745 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp124_ = gee_multi_map_map_iterator ((GeeMultiMap*) _tmp123_);
#line 1745 "/run/build/folks/folks/individual-aggregator.vala"
		iter1 = _tmp124_;
#line 1747 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 7874 "individual-aggregator.c"
			GeeMapIterator* _tmp125_;
			FolksIndividual* old_ind = NULL;
			GeeMapIterator* _tmp126_;
			gpointer _tmp127_;
			FolksIndividual* new_ind = NULL;
			GeeMapIterator* _tmp128_;
			gpointer _tmp129_;
			gboolean _tmp130_ = FALSE;
			FolksIndividual* _tmp131_;
			FolksIndividual* _tmp133_;
			FolksIndividual* _tmp136_;
			gboolean _tmp140_ = FALSE;
			FolksIndividual* _tmp141_;
#line 1747 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp125_ = iter1;
#line 1747 "/run/build/folks/folks/individual-aggregator.vala"
			if (!gee_map_iterator_next (_tmp125_)) {
#line 1747 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 7894 "individual-aggregator.c"
			}
#line 1749 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp126_ = iter1;
#line 1749 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp127_ = gee_map_iterator_get_key (_tmp126_);
#line 1749 "/run/build/folks/folks/individual-aggregator.vala"
			old_ind = (FolksIndividual*) _tmp127_;
#line 1750 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp128_ = iter1;
#line 1750 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp129_ = gee_map_iterator_get_value (_tmp128_);
#line 1750 "/run/build/folks/folks/individual-aggregator.vala"
			new_ind = (FolksIndividual*) _tmp129_;
#line 1752 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp131_ = old_ind;
#line 1752 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp131_ != NULL) {
#line 1752 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp130_ = TRUE;
#line 7914 "individual-aggregator.c"
			} else {
				FolksIndividual* _tmp132_;
#line 1752 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp132_ = new_ind;
#line 1752 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp130_ = _tmp132_ != NULL;
#line 7921 "individual-aggregator.c"
			}
#line 1752 "/run/build/folks/folks/individual-aggregator.vala"
			_vala_assert (_tmp130_, "old_ind != null || new_ind != null");
#line 1754 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp133_ = old_ind;
#line 1754 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp133_ != NULL) {
#line 7929 "individual-aggregator.c"
				GeeHashSet* _tmp134_;
				FolksIndividual* _tmp135_;
#line 1756 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp134_ = removed_individuals;
#line 1756 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp135_ = old_ind;
#line 1756 "/run/build/folks/folks/individual-aggregator.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp134_, G_TYPE_CHECK_INSTANCE_CAST (_tmp135_, FOLKS_TYPE_INDIVIDUAL, FolksIndividual));
#line 7938 "individual-aggregator.c"
			}
#line 1759 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp136_ = new_ind;
#line 1759 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp136_ != NULL) {
#line 7944 "individual-aggregator.c"
				GeeHashSet* _tmp137_;
				FolksIndividual* _tmp138_;
				FolksIndividual* _tmp139_;
#line 1761 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp137_ = added_individuals;
#line 1761 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp138_ = new_ind;
#line 1761 "/run/build/folks/folks/individual-aggregator.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp137_, G_TYPE_CHECK_INSTANCE_CAST (_tmp138_, FOLKS_TYPE_INDIVIDUAL, FolksIndividual));
#line 1762 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp139_ = new_ind;
#line 1762 "/run/build/folks/folks/individual-aggregator.vala"
				_folks_individual_aggregator_connect_to_individual (self, G_TYPE_CHECK_INSTANCE_CAST (_tmp139_, FOLKS_TYPE_INDIVIDUAL, FolksIndividual));
#line 7958 "individual-aggregator.c"
			}
#line 1765 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp141_ = old_ind;
#line 1765 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp141_ != NULL) {
#line 7964 "individual-aggregator.c"
				FolksIndividual* _tmp142_;
#line 1765 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp142_ = new_ind;
#line 1765 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp140_ = _tmp142_ != NULL;
#line 7970 "individual-aggregator.c"
			} else {
#line 1765 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp140_ = FALSE;
#line 7974 "individual-aggregator.c"
			}
#line 1765 "/run/build/folks/folks/individual-aggregator.vala"
			if (_tmp140_) {
#line 7978 "individual-aggregator.c"
				GeeHashMap* _tmp143_;
				FolksIndividual* _tmp144_;
				FolksIndividual* _tmp145_;
#line 1767 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp143_ = replaced_individuals;
#line 1767 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp144_ = old_ind;
#line 1767 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp145_ = new_ind;
#line 1767 "/run/build/folks/folks/individual-aggregator.vala"
				gee_abstract_map_set ((GeeAbstractMap*) _tmp143_, G_TYPE_CHECK_INSTANCE_CAST (_tmp144_, FOLKS_TYPE_INDIVIDUAL, FolksIndividual), G_TYPE_CHECK_INSTANCE_CAST (_tmp145_, FOLKS_TYPE_INDIVIDUAL, FolksIndividual));
#line 7990 "individual-aggregator.c"
			}
#line 1747 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (new_ind);
#line 1747 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (old_ind);
#line 7996 "individual-aggregator.c"
		}
#line 1771 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp146_ = added_individuals;
#line 1771 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp147_ = removed_individuals;
#line 1771 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp148_ = individuals_changes;
#line 1771 "/run/build/folks/folks/individual-aggregator.vala"
		_folks_individual_aggregator_emit_individuals_changed (self, (GeeSet*) _tmp146_, (GeeSet*) _tmp147_, (GeeMultiMap*) _tmp148_, NULL, NULL, FOLKS_GROUP_DETAILS_CHANGE_REASON_NONE);
#line 1738 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (iter1);
#line 1738 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (added_individuals);
#line 8010 "individual-aggregator.c"
	}
#line 1777 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:1777: Replacing Individuals due to linking:");
#line 1778 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp149_ = replaced_individuals;
#line 1778 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp150_ = gee_abstract_map_map_iterator ((GeeAbstractMap*) _tmp149_);
#line 1778 "/run/build/folks/folks/individual-aggregator.vala"
	iter2 = _tmp150_;
#line 1779 "/run/build/folks/folks/individual-aggregator.vala"
	while (TRUE) {
#line 8022 "individual-aggregator.c"
		GeeMapIterator* _tmp151_;
		FolksIndividual* old_ind = NULL;
		GeeMapIterator* _tmp152_;
		gpointer _tmp153_;
		FolksIndividual* new_ind = NULL;
		GeeMapIterator* _tmp154_;
		gpointer _tmp155_;
		FolksIndividual* _tmp156_;
		const gchar* _tmp157_;
		const gchar* _tmp158_;
		FolksIndividual* _tmp159_;
		FolksIndividual* _tmp160_;
		const gchar* _tmp161_;
		const gchar* _tmp162_;
		FolksIndividual* _tmp163_;
		FolksIndividual* _tmp164_;
		FolksIndividual* _tmp165_;
#line 1779 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp151_ = iter2;
#line 1779 "/run/build/folks/folks/individual-aggregator.vala"
		if (!(gee_map_iterator_next (_tmp151_) == TRUE)) {
#line 1779 "/run/build/folks/folks/individual-aggregator.vala"
			break;
#line 8046 "individual-aggregator.c"
		}
#line 1781 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp152_ = iter2;
#line 1781 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp153_ = gee_map_iterator_get_key (_tmp152_);
#line 1781 "/run/build/folks/folks/individual-aggregator.vala"
		old_ind = (FolksIndividual*) _tmp153_;
#line 1782 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp154_ = iter2;
#line 1782 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp155_ = gee_map_iterator_get_value (_tmp154_);
#line 1782 "/run/build/folks/folks/individual-aggregator.vala"
		new_ind = (FolksIndividual*) _tmp155_;
#line 1784 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp156_ = old_ind;
#line 1784 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp157_ = folks_individual_get_id (_tmp156_);
#line 1784 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp158_ = _tmp157_;
#line 1784 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp159_ = old_ind;
#line 1784 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp160_ = new_ind;
#line 1784 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp161_ = folks_individual_get_id (_tmp160_);
#line 1784 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp162_ = _tmp161_;
#line 1784 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp163_ = new_ind;
#line 1784 "/run/build/folks/folks/individual-aggregator.vala"
		g_debug ("individual-aggregator.vala:1784:     %s (%p) → %s (%p)", _tmp158_, _tmp159_, _tmp162_, _tmp163_);
#line 1787 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp164_ = old_ind;
#line 1787 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp165_ = new_ind;
#line 1787 "/run/build/folks/folks/individual-aggregator.vala"
		folks_individual_replace (_tmp164_, _tmp165_);
#line 1779 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (new_ind);
#line 1779 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (old_ind);
#line 8088 "individual-aggregator.c"
	}
#line 1791 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp166_ = self->priv->_debug;
#line 1791 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp167_ = folks_debug_get_debug_output_enabled (_tmp166_);
#line 1791 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp168_ = _tmp167_;
#line 1791 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp168_ == TRUE) {
#line 8098 "individual-aggregator.c"
		GHashTableIter link_map_iter = {0};
		GHashTable* _tmp169_;
		const gchar* link_key = NULL;
		GPtrArray* inds = NULL;
#line 1793 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp169_ = self->priv->_link_map;
#line 1793 "/run/build/folks/folks/individual-aggregator.vala"
		g_hash_table_iter_init (&link_map_iter, _tmp169_);
#line 1798 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 8109 "individual-aggregator.c"
			gconstpointer _tmp170_ = NULL;
			gconstpointer _tmp171_ = NULL;
			gboolean _tmp172_;
#line 1798 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp172_ = g_hash_table_iter_next (&link_map_iter, (gpointer*) (&_tmp170_), (gpointer*) (&_tmp171_));
#line 1798 "/run/build/folks/folks/individual-aggregator.vala"
			link_key = _tmp170_;
#line 1798 "/run/build/folks/folks/individual-aggregator.vala"
			inds = _tmp171_;
#line 1798 "/run/build/folks/folks/individual-aggregator.vala"
			if (!_tmp172_) {
#line 1798 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 8123 "individual-aggregator.c"
			}
			{
				guint i = 0U;
#line 1800 "/run/build/folks/folks/individual-aggregator.vala"
				i = (guint) 0;
#line 8129 "individual-aggregator.c"
				{
					gboolean _tmp173_ = FALSE;
#line 1800 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp173_ = TRUE;
#line 1800 "/run/build/folks/folks/individual-aggregator.vala"
					while (TRUE) {
#line 8136 "individual-aggregator.c"
						guint _tmp175_;
						GPtrArray* _tmp176_;
						gint _tmp177_;
						gint _tmp178_;
						FolksIndividual* individual = NULL;
						GPtrArray* _tmp179_;
						guint _tmp180_;
						gconstpointer _tmp181_;
						FolksIndividual* _tmp182_;
						FolksIndividual* _tmp183_;
						GeeMap* _tmp184_;
						FolksIndividual* _tmp185_;
						const gchar* _tmp186_;
						const gchar* _tmp187_;
						gpointer _tmp188_;
						FolksIndividual* _tmp189_;
						FolksIndividual* _tmp190_;
						gboolean _tmp191_;
#line 1800 "/run/build/folks/folks/individual-aggregator.vala"
						if (!_tmp173_) {
#line 8157 "individual-aggregator.c"
							guint _tmp174_;
#line 1800 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp174_ = i;
#line 1800 "/run/build/folks/folks/individual-aggregator.vala"
							i = _tmp174_ + 1;
#line 8163 "individual-aggregator.c"
						}
#line 1800 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp173_ = FALSE;
#line 1800 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp175_ = i;
#line 1800 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp176_ = inds;
#line 1800 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp177_ = g_ptr_array_get_length (_tmp176_);
#line 1800 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp178_ = _tmp177_;
#line 1800 "/run/build/folks/folks/individual-aggregator.vala"
						if (!(_tmp175_ < ((guint) _tmp178_))) {
#line 1800 "/run/build/folks/folks/individual-aggregator.vala"
							break;
#line 8179 "individual-aggregator.c"
						}
#line 1802 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp179_ = inds;
#line 1802 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp180_ = i;
#line 1802 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp181_ = g_ptr_array_index (_tmp179_, _tmp180_);
#line 1802 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp182_ = _g_object_ref0 ((FolksIndividual*) _tmp181_);
#line 1802 "/run/build/folks/folks/individual-aggregator.vala"
						individual = _tmp182_;
#line 1803 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp183_ = individual;
#line 1803 "/run/build/folks/folks/individual-aggregator.vala"
						_vala_assert (_tmp183_ != NULL, "individual != null");
#line 1805 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp184_ = self->priv->_individuals;
#line 1805 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp185_ = individual;
#line 1805 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp186_ = folks_individual_get_id (_tmp185_);
#line 1805 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp187_ = _tmp186_;
#line 1805 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp188_ = gee_map_get (_tmp184_, _tmp187_);
#line 1805 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp189_ = (FolksIndividual*) _tmp188_;
#line 1805 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp190_ = individual;
#line 1805 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp191_ = _tmp189_ != _tmp190_;
#line 1805 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_tmp189_);
#line 1805 "/run/build/folks/folks/individual-aggregator.vala"
						if (_tmp191_) {
#line 8215 "individual-aggregator.c"
							const gchar* _tmp192_;
							FolksIndividual* _tmp193_;
							const gchar* _tmp194_;
							const gchar* _tmp195_;
							FolksIndividual* _tmp196_;
							FolksIndividual* _tmp197_;
							const gchar* _tmp198_;
							const gchar* _tmp199_;
							FolksIndividual* _tmp200_;
#line 1807 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp192_ = link_key;
#line 1807 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp193_ = individual;
#line 1807 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp194_ = folks_individual_get_id (_tmp193_);
#line 1807 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp195_ = _tmp194_;
#line 1807 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp196_ = individual;
#line 1807 "/run/build/folks/folks/individual-aggregator.vala"
							g_warning ("Link map contains invalid mapping:\n" "    %s → %s (%p)", _tmp192_, _tmp195_, _tmp196_);
#line 1810 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp197_ = individual;
#line 1810 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp198_ = folks_individual_get_id (_tmp197_);
#line 1810 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp199_ = _tmp198_;
#line 1810 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp200_ = individual;
#line 1810 "/run/build/folks/folks/individual-aggregator.vala"
							g_warning ("individual-aggregator.vala:1810: Individual %s (%p) personas:", _tmp199_, _tmp200_);
#line 8247 "individual-aggregator.c"
							{
								GeeIterator* _p_it = NULL;
								FolksIndividual* _tmp201_;
								GeeSet* _tmp202_;
								GeeSet* _tmp203_;
								GeeIterator* _tmp204_;
#line 1812 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp201_ = individual;
#line 1812 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp202_ = folks_individual_get_personas (_tmp201_);
#line 1812 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp203_ = _tmp202_;
#line 1812 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp204_ = gee_iterable_iterator ((GeeIterable*) _tmp203_);
#line 1812 "/run/build/folks/folks/individual-aggregator.vala"
								_p_it = _tmp204_;
#line 1812 "/run/build/folks/folks/individual-aggregator.vala"
								while (TRUE) {
#line 8266 "individual-aggregator.c"
									GeeIterator* _tmp205_;
									FolksPersona* p = NULL;
									GeeIterator* _tmp206_;
									gpointer _tmp207_;
									FolksPersona* _tmp208_;
									const gchar* _tmp209_;
									const gchar* _tmp210_;
									FolksPersona* _tmp211_;
#line 1812 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp205_ = _p_it;
#line 1812 "/run/build/folks/folks/individual-aggregator.vala"
									if (!gee_iterator_next (_tmp205_)) {
#line 1812 "/run/build/folks/folks/individual-aggregator.vala"
										break;
#line 8281 "individual-aggregator.c"
									}
#line 1812 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp206_ = _p_it;
#line 1812 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp207_ = gee_iterator_get (_tmp206_);
#line 1812 "/run/build/folks/folks/individual-aggregator.vala"
									p = (FolksPersona*) _tmp207_;
#line 1814 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp208_ = p;
#line 1814 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp209_ = folks_persona_get_uid (_tmp208_);
#line 1814 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp210_ = _tmp209_;
#line 1814 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp211_ = p;
#line 1814 "/run/build/folks/folks/individual-aggregator.vala"
									g_warning ("individual-aggregator.vala:1814:     %s (%p)", _tmp210_, _tmp211_);
#line 1812 "/run/build/folks/folks/individual-aggregator.vala"
									_g_object_unref0 (p);
#line 8301 "individual-aggregator.c"
								}
#line 1812 "/run/build/folks/folks/individual-aggregator.vala"
								_g_object_unref0 (_p_it);
#line 8305 "individual-aggregator.c"
							}
						}
						{
							guint j = 0U;
							guint _tmp212_;
#line 1818 "/run/build/folks/folks/individual-aggregator.vala"
							_tmp212_ = i;
#line 1818 "/run/build/folks/folks/individual-aggregator.vala"
							j = _tmp212_ + 1;
#line 8315 "individual-aggregator.c"
							{
								gboolean _tmp213_ = FALSE;
#line 1818 "/run/build/folks/folks/individual-aggregator.vala"
								_tmp213_ = TRUE;
#line 1818 "/run/build/folks/folks/individual-aggregator.vala"
								while (TRUE) {
#line 8322 "individual-aggregator.c"
									guint _tmp215_;
									GPtrArray* _tmp216_;
									gint _tmp217_;
									gint _tmp218_;
									GPtrArray* _tmp219_;
									guint _tmp220_;
									gconstpointer _tmp221_;
									GPtrArray* _tmp222_;
									guint _tmp223_;
									gconstpointer _tmp224_;
#line 1818 "/run/build/folks/folks/individual-aggregator.vala"
									if (!_tmp213_) {
#line 8335 "individual-aggregator.c"
										guint _tmp214_;
#line 1818 "/run/build/folks/folks/individual-aggregator.vala"
										_tmp214_ = j;
#line 1818 "/run/build/folks/folks/individual-aggregator.vala"
										j = _tmp214_ + 1;
#line 8341 "individual-aggregator.c"
									}
#line 1818 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp213_ = FALSE;
#line 1818 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp215_ = j;
#line 1818 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp216_ = inds;
#line 1818 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp217_ = g_ptr_array_get_length (_tmp216_);
#line 1818 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp218_ = _tmp217_;
#line 1818 "/run/build/folks/folks/individual-aggregator.vala"
									if (!(_tmp215_ < ((guint) _tmp218_))) {
#line 1818 "/run/build/folks/folks/individual-aggregator.vala"
										break;
#line 8357 "individual-aggregator.c"
									}
#line 1820 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp219_ = inds;
#line 1820 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp220_ = i;
#line 1820 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp221_ = g_ptr_array_index (_tmp219_, _tmp220_);
#line 1820 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp222_ = inds;
#line 1820 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp223_ = j;
#line 1820 "/run/build/folks/folks/individual-aggregator.vala"
									_tmp224_ = g_ptr_array_index (_tmp222_, _tmp223_);
#line 1820 "/run/build/folks/folks/individual-aggregator.vala"
									if (((FolksIndividual*) _tmp221_) == ((FolksIndividual*) _tmp224_)) {
#line 8373 "individual-aggregator.c"
										const gchar* _tmp225_;
										FolksIndividual* _tmp226_;
										const gchar* _tmp227_;
										const gchar* _tmp228_;
										FolksIndividual* _tmp229_;
#line 1822 "/run/build/folks/folks/individual-aggregator.vala"
										_tmp225_ = link_key;
#line 1822 "/run/build/folks/folks/individual-aggregator.vala"
										_tmp226_ = individual;
#line 1822 "/run/build/folks/folks/individual-aggregator.vala"
										_tmp227_ = folks_individual_get_id (_tmp226_);
#line 1822 "/run/build/folks/folks/individual-aggregator.vala"
										_tmp228_ = _tmp227_;
#line 1822 "/run/build/folks/folks/individual-aggregator.vala"
										_tmp229_ = individual;
#line 1822 "/run/build/folks/folks/individual-aggregator.vala"
										g_warning ("Link map contains non-unique " "Individual: %s → %s (%p) twice", _tmp225_, _tmp228_, _tmp229_);
#line 8391 "individual-aggregator.c"
									}
								}
							}
						}
#line 1800 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (individual);
#line 8398 "individual-aggregator.c"
					}
				}
			}
		}
	}
#line 1609 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (iter2);
#line 1609 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (user);
#line 1609 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (replaced_individuals);
#line 1609 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (relinked_personas);
#line 1609 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (individuals_changes);
#line 1609 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (removed_individuals);
#line 8416 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_is_primary_store_changed_cb (FolksIndividualAggregator* self,
                                                          GObject* object,
                                                          GParamSpec* pspec)
{
	FolksPersonaStore* store = NULL;
	FolksPersonaStore* _tmp0_;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp2_ = FALSE;
	FolksPersonaStore* _tmp3_;
	gboolean _tmp4_;
	gboolean _tmp5_;
#line 1832 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1832 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (object != NULL);
#line 1832 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (pspec != NULL);
#line 1835 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_PERSONA_STORE, FolksPersonaStore));
#line 1835 "/run/build/folks/folks/individual-aggregator.vala"
	store = _tmp0_;
#line 1836 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = store;
#line 1836 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp4_ = folks_persona_store_get_is_primary_store (_tmp3_);
#line 1836 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp5_ = _tmp4_;
#line 1836 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp5_ == TRUE) {
#line 8450 "individual-aggregator.c"
		FolksPersonaStore* _tmp6_;
		FolksPersonaStore* _tmp7_;
#line 1837 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp6_ = store;
#line 1837 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp7_ = self->priv->_primary_store;
#line 1837 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = _tmp6_ == _tmp7_;
#line 8459 "individual-aggregator.c"
	} else {
#line 1836 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = FALSE;
#line 8463 "individual-aggregator.c"
	}
#line 1836 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp2_) {
#line 1836 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = TRUE;
#line 8469 "individual-aggregator.c"
	} else {
		gboolean _tmp8_ = FALSE;
		FolksPersonaStore* _tmp9_;
		gboolean _tmp10_;
		gboolean _tmp11_;
#line 1838 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp9_ = store;
#line 1838 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp10_ = folks_persona_store_get_is_primary_store (_tmp9_);
#line 1838 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp11_ = _tmp10_;
#line 1838 "/run/build/folks/folks/individual-aggregator.vala"
		if (_tmp11_ == FALSE) {
#line 8483 "individual-aggregator.c"
			FolksPersonaStore* _tmp12_;
			FolksPersonaStore* _tmp13_;
#line 1839 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp12_ = store;
#line 1839 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp13_ = self->priv->_primary_store;
#line 1839 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp8_ = _tmp12_ != _tmp13_;
#line 8492 "individual-aggregator.c"
		} else {
#line 1838 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp8_ = FALSE;
#line 8496 "individual-aggregator.c"
		}
#line 1838 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = _tmp8_;
#line 8500 "individual-aggregator.c"
	}
#line 1836 "/run/build/folks/folks/individual-aggregator.vala"
	_vala_assert (_tmp1_, "(store.is_primary_store == true &&               store == this._primary_store) ||           (store.is_primary_store == false &&               store != this._primary_store)");
#line 1832 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (store);
#line 8506 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_persona_store_is_quiescent_changed_cb (FolksIndividualAggregator* self,
                                                                    GObject* obj,
                                                                    GParamSpec* pspec)
{
	guint _tmp0_;
#line 1842 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1842 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (obj != NULL);
#line 1842 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (pspec != NULL);
#line 1846 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_non_quiescent_persona_store_count;
#line 1846 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp0_ > ((guint) 0)) {
#line 8526 "individual-aggregator.c"
		guint _tmp1_;
#line 1848 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = self->priv->_non_quiescent_persona_store_count;
#line 1848 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_non_quiescent_persona_store_count = _tmp1_ - 1;
#line 1849 "/run/build/folks/folks/individual-aggregator.vala"
		_folks_individual_aggregator_notify_if_is_quiescent (self);
#line 8534 "individual-aggregator.c"
	}
}


static void
_folks_individual_aggregator_backend_is_quiescent_changed_cb (FolksIndividualAggregator* self,
                                                              GObject* obj,
                                                              GParamSpec* pspec)
{
	guint _tmp0_;
#line 1853 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1853 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (obj != NULL);
#line 1853 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (pspec != NULL);
#line 1855 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_non_quiescent_backend_count;
#line 1855 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp0_ > ((guint) 0)) {
#line 8555 "individual-aggregator.c"
		guint _tmp1_;
#line 1857 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = self->priv->_non_quiescent_backend_count;
#line 1857 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_non_quiescent_backend_count = _tmp1_ - 1;
#line 1858 "/run/build/folks/folks/individual-aggregator.vala"
		_folks_individual_aggregator_notify_if_is_quiescent (self);
#line 8563 "individual-aggregator.c"
	}
}


static void
_folks_individual_aggregator_notify_if_is_quiescent (FolksIndividualAggregator* self)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	guint _tmp2_;
#line 1862 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1864 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = self->priv->_non_quiescent_backend_count;
#line 1864 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp2_ == ((guint) 0)) {
#line 8580 "individual-aggregator.c"
		guint _tmp3_;
#line 1865 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp3_ = self->priv->_non_quiescent_persona_store_count;
#line 1865 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = _tmp3_ == ((guint) 0);
#line 8586 "individual-aggregator.c"
	} else {
#line 1864 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = FALSE;
#line 8590 "individual-aggregator.c"
	}
#line 1864 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp1_) {
#line 8594 "individual-aggregator.c"
		gboolean _tmp4_;
#line 1866 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp4_ = self->priv->_is_quiescent;
#line 1866 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp0_ = _tmp4_ == FALSE;
#line 8600 "individual-aggregator.c"
	} else {
#line 1864 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp0_ = FALSE;
#line 8604 "individual-aggregator.c"
	}
#line 1864 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp0_) {
#line 8608 "individual-aggregator.c"
		gboolean _tmp5_ = FALSE;
		const gchar* _tmp6_;
		gint _tmp7_;
		gint _tmp8_;
		guint _tmp12_;
#line 1868 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp6_ = self->priv->_configured_primary_store_type_id;
#line 1868 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp7_ = strlen (_tmp6_);
#line 1868 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp8_ = _tmp7_;
#line 1868 "/run/build/folks/folks/individual-aggregator.vala"
		if (_tmp8_ > 0) {
#line 8622 "individual-aggregator.c"
			FolksPersonaStore* _tmp9_;
#line 1869 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp9_ = self->priv->_primary_store;
#line 1869 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp5_ = _tmp9_ == NULL;
#line 8628 "individual-aggregator.c"
		} else {
#line 1868 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp5_ = FALSE;
#line 8632 "individual-aggregator.c"
		}
#line 1868 "/run/build/folks/folks/individual-aggregator.vala"
		if (_tmp5_) {
#line 8636 "individual-aggregator.c"
			const gchar* _tmp10_;
			const gchar* _tmp11_;
#line 1871 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp10_ = self->priv->_configured_primary_store_type_id;
#line 1871 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp11_ = self->priv->_configured_primary_store_id;
#line 1871 "/run/build/folks/folks/individual-aggregator.vala"
			g_warning ("Failed to find primary PersonaStore with type ID " "'%s' and ID '%s'.\n" "Individuals will not be linked properly " "and creating new links between Personas will not work.\n" "The configured primary PersonaStore's backend may not be " "installed. If you are unsure, check with your " "distribution.", _tmp10_, _tmp11_);
#line 8645 "individual-aggregator.c"
		}
#line 1882 "/run/build/folks/folks/individual-aggregator.vala"
		folks_internal_profiling_point ("%s", "reached quiescence in " "IndividualAggregator");
#line 1885 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_is_quiescent = TRUE;
#line 1886 "/run/build/folks/folks/individual-aggregator.vala"
		g_object_notify ((GObject*) self, "is-quiescent");
#line 1889 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp12_ = self->priv->_quiescent_timeout_id;
#line 1889 "/run/build/folks/folks/individual-aggregator.vala"
		if (_tmp12_ != ((guint) 0)) {
#line 8657 "individual-aggregator.c"
			guint _tmp13_;
#line 1891 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp13_ = self->priv->_quiescent_timeout_id;
#line 1891 "/run/build/folks/folks/individual-aggregator.vala"
			g_source_remove (_tmp13_);
#line 1892 "/run/build/folks/folks/individual-aggregator.vala"
			self->priv->_quiescent_timeout_id = (guint) 0;
#line 8665 "individual-aggregator.c"
		}
	}
}


static gboolean
_folks_individual_aggregator_quiescent_timeout_cb (FolksIndividualAggregator* self)
{
	gboolean result = FALSE;
	gboolean _tmp0_;
#line 1897 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 1902 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_is_quiescent;
#line 1902 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp0_ == FALSE) {
#line 8682 "individual-aggregator.c"
		guint _tmp1_;
		guint _tmp2_;
#line 1904 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = self->priv->_non_quiescent_backend_count;
#line 1904 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = self->priv->_non_quiescent_persona_store_count;
#line 1904 "/run/build/folks/folks/individual-aggregator.vala"
		g_warning ("Failed to reach quiescence normally (%u backends and %u " "persona stores still haven't reached quiescence). Forcing " "IndividualAggregator quiescence due to reaching the timeout.", _tmp1_, _tmp2_);
#line 1910 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_is_quiescent = TRUE;
#line 1911 "/run/build/folks/folks/individual-aggregator.vala"
		g_object_notify ((GObject*) self, "is-quiescent");
#line 8695 "individual-aggregator.c"
	}
#line 1915 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_quiescent_timeout_id = (guint) 0;
#line 1916 "/run/build/folks/folks/individual-aggregator.vala"
	result = FALSE;
#line 1916 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 8703 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_persona_store_is_user_set_default_changed_cb (FolksIndividualAggregator* self,
                                                                           GObject* obj,
                                                                           GParamSpec* pspec)
{
	FolksPersonaStore* store = NULL;
	FolksPersonaStore* _tmp0_;
	FolksPersonaStore* _tmp1_;
	FolksPersonaStore* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	FolksPersonaStore* _tmp5_;
	const gchar* _tmp6_;
	const gchar* _tmp7_;
	FolksPersonaStore* _tmp8_;
#line 1919 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1919 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (obj != NULL);
#line 1919 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (pspec != NULL);
#line 1922 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_PERSONA_STORE, FolksPersonaStore));
#line 1922 "/run/build/folks/folks/individual-aggregator.vala"
	store = _tmp0_;
#line 1924 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = store;
#line 1924 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = store;
#line 1924 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = folks_persona_store_get_type_id (_tmp2_);
#line 1924 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp4_ = _tmp3_;
#line 1924 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp5_ = store;
#line 1924 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp6_ = folks_persona_store_get_id (_tmp5_);
#line 1924 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp7_ = _tmp6_;
#line 1924 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("PersonaStore.is-user-set-default changed for store %p " "(type ID: %s, ID: %s)", _tmp1_, _tmp4_, _tmp7_);
#line 1927 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp8_ = store;
#line 1927 "/run/build/folks/folks/individual-aggregator.vala"
	if (_folks_individual_aggregator_maybe_configure_as_primary (self, _tmp8_)) {
#line 8752 "individual-aggregator.c"
		FolksPersonaStore* _tmp9_;
#line 1928 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp9_ = store;
#line 1928 "/run/build/folks/folks/individual-aggregator.vala"
		_folks_individual_aggregator_set_primary_store (self, _tmp9_);
#line 8758 "individual-aggregator.c"
	}
#line 1919 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (store);
#line 8762 "individual-aggregator.c"
}


static gboolean
_folks_individual_aggregator_maybe_configure_as_primary (FolksIndividualAggregator* self,
                                                         FolksPersonaStore* store)
{
	gboolean result = FALSE;
	gboolean configured = FALSE;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_;
#line 1931 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 1931 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (store != NULL, FALSE);
#line 1933 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:1933: _maybe_configure_as_primary()");
#line 1935 "/run/build/folks/folks/individual-aggregator.vala"
	configured = FALSE;
#line 1937 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = self->priv->_user_configured_primary_store;
#line 1937 "/run/build/folks/folks/individual-aggregator.vala"
	if (!_tmp1_) {
#line 8786 "individual-aggregator.c"
		gboolean _tmp2_;
		gboolean _tmp3_;
#line 1938 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp2_ = folks_persona_store_get_is_user_set_default (store);
#line 1938 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp3_ = _tmp2_;
#line 1938 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp0_ = _tmp3_;
#line 8795 "individual-aggregator.c"
	} else {
#line 1937 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp0_ = FALSE;
#line 8799 "individual-aggregator.c"
	}
#line 1937 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp0_) {
#line 8803 "individual-aggregator.c"
		const gchar* _tmp4_;
		const gchar* _tmp5_;
		const gchar* _tmp6_;
		const gchar* _tmp7_;
		const gchar* _tmp8_;
		const gchar* _tmp9_;
		gchar* _tmp10_;
		const gchar* _tmp11_;
		const gchar* _tmp12_;
		gchar* _tmp13_;
#line 1940 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp4_ = folks_persona_store_get_type_id (store);
#line 1940 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp5_ = _tmp4_;
#line 1940 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp6_ = folks_persona_store_get_id (store);
#line 1940 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp7_ = _tmp6_;
#line 1940 "/run/build/folks/folks/individual-aggregator.vala"
		g_debug ("individual-aggregator.vala:1940: Setting primary store IDs to '%s' and" \
" '%s'.", _tmp5_, _tmp7_);
#line 1942 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp8_ = folks_persona_store_get_type_id (store);
#line 1942 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp9_ = _tmp8_;
#line 1942 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp10_ = g_strdup (_tmp9_);
#line 1942 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (self->priv->_configured_primary_store_type_id);
#line 1942 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_configured_primary_store_type_id = _tmp10_;
#line 1943 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp11_ = folks_persona_store_get_id (store);
#line 1943 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp12_ = _tmp11_;
#line 1943 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp13_ = g_strdup (_tmp12_);
#line 1943 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (self->priv->_configured_primary_store_id);
#line 1943 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_configured_primary_store_id = _tmp13_;
#line 1944 "/run/build/folks/folks/individual-aggregator.vala"
		configured = TRUE;
#line 8846 "individual-aggregator.c"
	}
#line 1947 "/run/build/folks/folks/individual-aggregator.vala"
	result = configured;
#line 1947 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 8852 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_individual_removed_cb (FolksIndividualAggregator* self,
                                                    FolksIndividual* i,
                                                    FolksIndividual* replacement)
{
	FolksIndividual* _tmp0_;
	GeeMap* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	gpointer _tmp4_;
	FolksIndividual* _tmp5_;
	gboolean _tmp6_;
	GeeSet* _tmp13_;
	GeeSet* _tmp14_;
	gint _tmp15_;
	gint _tmp16_;
#line 1950 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 1950 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (i != NULL);
#line 1952 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_user;
#line 1952 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp0_ == i) {
#line 1953 "/run/build/folks/folks/individual-aggregator.vala"
		folks_individual_aggregator_set_user (self, NULL);
#line 8882 "individual-aggregator.c"
	}
#line 1957 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = self->priv->_individuals;
#line 1957 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = folks_individual_get_id (i);
#line 1957 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = _tmp2_;
#line 1957 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp4_ = gee_map_get (_tmp1_, _tmp3_);
#line 1957 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp5_ = (FolksIndividual*) _tmp4_;
#line 1957 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp6_ = _tmp5_ != i;
#line 1957 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_tmp5_);
#line 1957 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp6_) {
#line 1958 "/run/build/folks/folks/individual-aggregator.vala"
		return;
#line 8902 "individual-aggregator.c"
	}
#line 1960 "/run/build/folks/folks/individual-aggregator.vala"
	if (replacement != NULL) {
#line 8906 "individual-aggregator.c"
		const gchar* _tmp7_;
		const gchar* _tmp8_;
		const gchar* _tmp9_;
		const gchar* _tmp10_;
#line 1962 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp7_ = folks_individual_get_id (i);
#line 1962 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp8_ = _tmp7_;
#line 1962 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp9_ = folks_individual_get_id (G_TYPE_CHECK_INSTANCE_CAST (replacement, FOLKS_TYPE_INDIVIDUAL, FolksIndividual));
#line 1962 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp10_ = _tmp9_;
#line 1962 "/run/build/folks/folks/individual-aggregator.vala"
		g_debug ("individual-aggregator.vala:1962: Individual '%s' removed (replaced by " \
"'%s')", _tmp8_, _tmp10_);
#line 8921 "individual-aggregator.c"
	} else {
		const gchar* _tmp11_;
		const gchar* _tmp12_;
#line 1967 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp11_ = folks_individual_get_id (i);
#line 1967 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp12_ = _tmp11_;
#line 1967 "/run/build/folks/folks/individual-aggregator.vala"
		g_debug ("individual-aggregator.vala:1967: Individual '%s' removed (not replaced" \
")", _tmp12_);
#line 8931 "individual-aggregator.c"
	}
#line 1971 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp13_ = folks_individual_get_personas (i);
#line 1971 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp14_ = _tmp13_;
#line 1971 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp15_ = gee_collection_get_size ((GeeCollection*) _tmp14_);
#line 1971 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp16_ = _tmp15_;
#line 1971 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp16_ > 0) {
#line 8943 "individual-aggregator.c"
		GeeHashMultiMap* changes = NULL;
		GeeHashMultiMap* _tmp17_;
		FolksSmallSet* individuals = NULL;
		FolksSmallSet* _tmp18_;
		FolksSmallSet* _tmp19_;
		GeeHashMultiMap* _tmp20_;
		FolksSmallSet* _tmp21_;
		GeeHashMultiMap* _tmp22_;
#line 1973 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp17_ = gee_hash_multi_map_new (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1973 "/run/build/folks/folks/individual-aggregator.vala"
		changes = _tmp17_;
#line 1974 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp18_ = folks_small_set_new (FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1974 "/run/build/folks/folks/individual-aggregator.vala"
		individuals = _tmp18_;
#line 1976 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp19_ = individuals;
#line 1976 "/run/build/folks/folks/individual-aggregator.vala"
		gee_abstract_collection_add ((GeeAbstractCollection*) _tmp19_, i);
#line 1977 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp20_ = changes;
#line 1977 "/run/build/folks/folks/individual-aggregator.vala"
		gee_multi_map_set ((GeeMultiMap*) _tmp20_, i, replacement);
#line 1979 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp21_ = individuals;
#line 1979 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp22_ = changes;
#line 1979 "/run/build/folks/folks/individual-aggregator.vala"
		_folks_individual_aggregator_emit_individuals_changed (self, NULL, (GeeSet*) _tmp21_, (GeeMultiMap*) _tmp22_, NULL, NULL, FOLKS_GROUP_DETAILS_CHANGE_REASON_NONE);
#line 1971 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (individuals);
#line 1971 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (changes);
#line 8978 "individual-aggregator.c"
	}
#line 1982 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_disconnect_from_individual (self, i);
#line 8982 "individual-aggregator.c"
}


static void
folks_individual_aggregator_add_persona_from_details_data_free (gpointer _data)
{
	FolksIndividualAggregatorAddPersonaFromDetailsData* _data_;
	_data_ = _data;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->parent);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->persona_store);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_hash_table_unref0 (_data_->details);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->result);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_slice_free (FolksIndividualAggregatorAddPersonaFromDetailsData, _data_);
#line 9003 "individual-aggregator.c"
}


static void
folks_individual_aggregator_add_persona_from_details_async_ready_wrapper (GObject *source_object,
                                                                          GAsyncResult *res,
                                                                          void *user_data)
{
	FolksIndividualAggregatorAddPersonaFromDetailsData* _task_data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_task_data_->_callback_ != NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 9019 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_->_task_complete_ = TRUE;
#line 9023 "individual-aggregator.c"
}


static gpointer
_g_hash_table_ref0 (gpointer self)
{
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	return self ? g_hash_table_ref (self) : NULL;
#line 9032 "individual-aggregator.c"
}


void
folks_individual_aggregator_add_persona_from_details (FolksIndividualAggregator* self,
                                                      FolksIndividual* parent,
                                                      FolksPersonaStore* persona_store,
                                                      GHashTable* details,
                                                      GAsyncReadyCallback _callback_,
                                                      gpointer _user_data_)
{
	FolksIndividualAggregatorAddPersonaFromDetailsData* _data_;
	FolksIndividualAggregator* _tmp0_;
	FolksIndividual* _tmp1_;
	FolksPersonaStore* _tmp2_;
	GHashTable* _tmp3_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_slice_new0 (FolksIndividualAggregatorAddPersonaFromDetailsData);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_callback_ = _callback_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_individual_aggregator_add_persona_from_details_async_ready_wrapper, _user_data_);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_callback_ == NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_task_complete_ = TRUE;
#line 9059 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_individual_aggregator_add_persona_from_details_data_free);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->self = _tmp0_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = _g_object_ref0 (parent);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->parent);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->parent = _tmp1_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = _g_object_ref0 (persona_store);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->persona_store);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->persona_store = _tmp2_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = _g_hash_table_ref0 (details);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_hash_table_unref0 (_data_->details);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->details = _tmp3_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_add_persona_from_details_co (_data_);
#line 9087 "individual-aggregator.c"
}


FolksPersona*
folks_individual_aggregator_add_persona_from_details_finish (FolksIndividualAggregator* self,
                                                             GAsyncResult* _res_,
                                                             GError** error)
{
	FolksPersona* result;
	FolksIndividualAggregatorAddPersonaFromDetailsData* _data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (NULL == _data_) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		return NULL;
#line 9104 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	result = _data_->result;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->result = NULL;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 9112 "individual-aggregator.c"
}


/**
   * Add a new persona in the given {@link PersonaStore} based on the
   * ``details`` provided.
   *
   * If the target store is offline, this function will throw
   * {@link IndividualAggregatorError.STORE_OFFLINE}. It's the responsibility of
   * the caller to cache details and re-try this function if it wishes to make
   * offline adds work.
   *
   * The details hash is a backend-specific mapping of key, value strings.
   * Common keys include:
   *
   *  * contact - service-specific contact ID
   *  * message - a user-readable message to pass to the persona being added
   *
   * If a {@link Persona} with the given details already exists in the store, no
   * error will be thrown and this function will return ``null``.
   *
   * @param parent an optional {@link Individual} to add the new {@link Persona}
   * to. This persona will be appended to its ordered list of personas.
   * @param persona_store the {@link PersonaStore} to add the persona to
   * @param details a key-value map of details to use in creating the new
   * {@link Persona}
   * @return the new {@link Persona} or ``null`` if the corresponding
   * {@link Persona} already existed. If non-``null``, the new {@link Persona}
   * will also be added to a new or existing {@link Individual} as necessary.
   * @throws IndividualAggregatorError.STORE_OFFLINE if the persona store was
   * offline
   * @throws IndividualAggregatorError.ADD_FAILED if any other error occurred
   * while adding the persona
   *
   * @since 0.3.5
   */
static void
folks_individual_aggregator_add_persona_from_details_ready (GObject* source_object,
                                                            GAsyncResult* _res_,
                                                            gpointer _user_data_)
{
	FolksIndividualAggregatorAddPersonaFromDetailsData* _data_;
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = _user_data_;
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_source_object_ = source_object;
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_res_ = _res_;
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_task_complete_ = TRUE;
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_add_persona_from_details_co (_data_);
#line 9165 "individual-aggregator.c"
}


static gboolean
folks_individual_aggregator_add_persona_from_details_co (FolksIndividualAggregatorAddPersonaFromDetailsData* _data_)
{
#line 2018 "/run/build/folks/folks/individual-aggregator.vala"
	switch (_data_->_state_) {
#line 2018 "/run/build/folks/folks/individual-aggregator.vala"
		case 0:
#line 9176 "individual-aggregator.c"
		goto _state_0;
#line 2018 "/run/build/folks/folks/individual-aggregator.vala"
		case 1:
#line 9180 "individual-aggregator.c"
		goto _state_1;
		default:
#line 2018 "/run/build/folks/folks/individual-aggregator.vala"
		g_assert_not_reached ();
#line 9185 "individual-aggregator.c"
	}
	_state_0:
#line 2022 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->persona = NULL;
#line 9190 "individual-aggregator.c"
	{
#line 2025 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp0_ = _folks_individual_aggregator_asv_copy (_data_->self, _data_->details);
#line 2025 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->details_copy = _data_->_tmp0_;
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp2_ = _data_->details_copy;
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_state_ = 1;
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
		folks_persona_store_add_persona_from_details (_data_->persona_store, _data_->_tmp2_, folks_individual_aggregator_add_persona_from_details_ready, _data_);
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
		return FALSE;
#line 9204 "individual-aggregator.c"
		_state_1:
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp3_ = folks_persona_store_add_persona_from_details_finish (_data_->persona_store, _data_->_res_, &_data_->_inner_error_);
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp1_ = _data_->_tmp3_;
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
			_g_hash_table_unref0 (_data_->details_copy);
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
			if (_data_->_inner_error_->domain == FOLKS_PERSONA_STORE_ERROR) {
#line 9216 "individual-aggregator.c"
				goto __catch20_folks_persona_store_error;
			}
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
			_g_hash_table_unref0 (_data_->details_copy);
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->persona);
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
			g_clear_error (&_data_->_inner_error_);
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
			g_object_unref (_data_->_async_result);
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
			return FALSE;
#line 9231 "individual-aggregator.c"
		}
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp4_ = _data_->_tmp1_;
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp1_ = NULL;
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_data_->persona);
#line 2026 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->persona = _data_->_tmp4_;
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_data_->_tmp1_);
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
		_g_hash_table_unref0 (_data_->details_copy);
#line 9245 "individual-aggregator.c"
	}
	goto __finally20;
	__catch20_folks_persona_store_error:
	{
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->e = _data_->_inner_error_;
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_inner_error_ = NULL;
#line 2030 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp5_ = _data_->e;
#line 2030 "/run/build/folks/folks/individual-aggregator.vala"
		if (g_error_matches (_data_->_tmp5_, FOLKS_PERSONA_STORE_ERROR, FOLKS_PERSONA_STORE_ERROR_STORE_OFFLINE)) {
#line 2032 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp6_ = _data_->e;
#line 2032 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp7_ = _data_->_tmp6_->message;
#line 2032 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp8_ = g_error_new_literal (FOLKS_INDIVIDUAL_AGGREGATOR_ERROR, FOLKS_INDIVIDUAL_AGGREGATOR_ERROR_STORE_OFFLINE, _data_->_tmp7_);
#line 2032 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_inner_error_ = _data_->_tmp8_;
#line 2032 "/run/build/folks/folks/individual-aggregator.vala"
			_g_error_free0 (_data_->e);
#line 9268 "individual-aggregator.c"
			goto __finally20;
		} else {
#line 2036 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp9_ = folks_persona_store_get_type_id (_data_->persona_store);
#line 2036 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp10_ = _data_->_tmp9_;
#line 2036 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp11_ = folks_persona_store_get_id (_data_->persona_store);
#line 2036 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp12_ = _data_->_tmp11_;
#line 2036 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp13_ = _folks_individual_aggregator_get_store_full_id (_data_->self, _data_->_tmp10_, _data_->_tmp12_);
#line 2036 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->full_id = _data_->_tmp13_;
#line 2039 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp14_ = _data_->full_id;
#line 2039 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp15_ = _data_->e;
#line 2039 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp16_ = _data_->_tmp15_->message;
#line 2039 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp17_ = g_error_new (FOLKS_INDIVIDUAL_AGGREGATOR_ERROR, FOLKS_INDIVIDUAL_AGGREGATOR_ERROR_ADD_FAILED, _ ("Failed to add contact for persona store ID ‘%s’: %s"), _data_->_tmp14_, _data_->_tmp16_);
#line 2039 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_inner_error_ = _data_->_tmp17_;
#line 2039 "/run/build/folks/folks/individual-aggregator.vala"
			_g_free0 (_data_->full_id);
#line 2039 "/run/build/folks/folks/individual-aggregator.vala"
			_g_error_free0 (_data_->e);
#line 9297 "individual-aggregator.c"
			goto __finally20;
		}
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
		_g_error_free0 (_data_->e);
#line 9302 "individual-aggregator.c"
	}
	__finally20:
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
		if (_data_->_inner_error_->domain == FOLKS_INDIVIDUAL_AGGREGATOR_ERROR) {
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->persona);
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
			g_object_unref (_data_->_async_result);
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
			return FALSE;
#line 9317 "individual-aggregator.c"
		} else {
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->persona);
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
			g_clear_error (&_data_->_inner_error_);
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
			g_object_unref (_data_->_async_result);
#line 2023 "/run/build/folks/folks/individual-aggregator.vala"
			return FALSE;
#line 9329 "individual-aggregator.c"
		}
	}
#line 2047 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->parent != NULL) {
#line 2047 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp19_ = _data_->persona;
#line 2047 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp18_ = _data_->_tmp19_ != NULL;
#line 9338 "individual-aggregator.c"
	} else {
#line 2047 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp18_ = FALSE;
#line 9342 "individual-aggregator.c"
	}
#line 2047 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_tmp18_) {
#line 2049 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp20_ = folks_individual_get_personas (G_TYPE_CHECK_INSTANCE_CAST (_data_->parent, FOLKS_TYPE_INDIVIDUAL, FolksIndividual));
#line 2049 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp21_ = _data_->_tmp20_;
#line 2049 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp22_ = _data_->persona;
#line 2049 "/run/build/folks/folks/individual-aggregator.vala"
		gee_collection_add ((GeeCollection*) _data_->_tmp21_, G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp22_, FOLKS_TYPE_PERSONA, FolksPersona));
#line 9354 "individual-aggregator.c"
	}
#line 2052 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->result = _data_->persona;
#line 2052 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 2052 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_state_ != 0) {
#line 2052 "/run/build/folks/folks/individual-aggregator.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 2052 "/run/build/folks/folks/individual-aggregator.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 9366 "individual-aggregator.c"
		}
	}
#line 2052 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_unref (_data_->_async_result);
#line 2052 "/run/build/folks/folks/individual-aggregator.vala"
	return FALSE;
#line 9373 "individual-aggregator.c"
}


static Block8Data*
block8_data_ref (Block8Data* _data8_)
{
#line 2055 "/run/build/folks/folks/individual-aggregator.vala"
	g_atomic_int_inc (&_data8_->_ref_count_);
#line 2055 "/run/build/folks/folks/individual-aggregator.vala"
	return _data8_;
#line 9384 "individual-aggregator.c"
}


static void
block8_data_unref (void * _userdata_)
{
	Block8Data* _data8_;
	_data8_ = (Block8Data*) _userdata_;
#line 2055 "/run/build/folks/folks/individual-aggregator.vala"
	if (g_atomic_int_dec_and_test (&_data8_->_ref_count_)) {
#line 9395 "individual-aggregator.c"
		FolksIndividualAggregator* self;
#line 2055 "/run/build/folks/folks/individual-aggregator.vala"
		self = _data8_->self;
#line 2055 "/run/build/folks/folks/individual-aggregator.vala"
		_g_hash_table_unref0 (_data8_->retval);
#line 2055 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (self);
#line 2055 "/run/build/folks/folks/individual-aggregator.vala"
		g_slice_free (Block8Data, _data8_);
#line 9405 "individual-aggregator.c"
	}
}


static void
_g_free0_ (gpointer var)
{
#line 2057 "/run/build/folks/folks/individual-aggregator.vala"
	var = (g_free (var), NULL);
#line 9415 "individual-aggregator.c"
}


static void
_vala_GValue_free (GValue* self)
{
#line 2057 "/run/build/folks/folks/individual-aggregator.vala"
	g_value_unset (self);
#line 2057 "/run/build/folks/folks/individual-aggregator.vala"
	g_free (self);
#line 9426 "individual-aggregator.c"
}


static void
__vala_GValue_free0_ (gpointer var)
{
#line 2057 "/run/build/folks/folks/individual-aggregator.vala"
	(var == NULL) ? NULL : (var = (_vala_GValue_free (var), NULL));
#line 9435 "individual-aggregator.c"
}


static GValue*
_g_value_dup (GValue* self)
{
#line 2061 "/run/build/folks/folks/individual-aggregator.vala"
	return g_boxed_copy (G_TYPE_VALUE, self);
#line 9444 "individual-aggregator.c"
}


static gpointer
__g_value_dup0 (gpointer self)
{
#line 2061 "/run/build/folks/folks/individual-aggregator.vala"
	return self ? _g_value_dup (self) : NULL;
#line 9453 "individual-aggregator.c"
}


static void
__lambda70_ (Block8Data* _data8_,
             const gchar* k,
             GValue* v)
{
	FolksIndividualAggregator* self;
	gchar* _tmp0_;
	GValue* _tmp1_;
#line 2059 "/run/build/folks/folks/individual-aggregator.vala"
	self = _data8_->self;
#line 2059 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (k != NULL);
#line 2061 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = g_strdup ((const gchar*) k);
#line 2061 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = __g_value_dup0 (v);
#line 2061 "/run/build/folks/folks/individual-aggregator.vala"
	g_hash_table_insert (_data8_->retval, _tmp0_, _tmp1_);
#line 9475 "individual-aggregator.c"
}


static void
___lambda70__gh_func (gconstpointer key,
                      gconstpointer value,
                      gpointer self)
{
#line 2059 "/run/build/folks/folks/individual-aggregator.vala"
	__lambda70_ (self, (const gchar*) key, (GValue*) value);
#line 9486 "individual-aggregator.c"
}


static GHashTable*
_folks_individual_aggregator_asv_copy (FolksIndividualAggregator* self,
                                       GHashTable* asv)
{
	GHashTable* result = NULL;
	Block8Data* _data8_;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	GHashTable* _tmp3_;
#line 2055 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2055 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (asv != NULL, NULL);
#line 2055 "/run/build/folks/folks/individual-aggregator.vala"
	_data8_ = g_slice_new0 (Block8Data);
#line 2055 "/run/build/folks/folks/individual-aggregator.vala"
	_data8_->_ref_count_ = 1;
#line 2055 "/run/build/folks/folks/individual-aggregator.vala"
	_data8_->self = g_object_ref (self);
#line 2057 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = g_str_hash;
#line 2057 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = g_str_equal;
#line 2057 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, __vala_GValue_free0_);
#line 2057 "/run/build/folks/folks/individual-aggregator.vala"
	_data8_->retval = _tmp2_;
#line 2059 "/run/build/folks/folks/individual-aggregator.vala"
	g_hash_table_foreach (asv, ___lambda70__gh_func, _data8_);
#line 2064 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = _g_hash_table_ref0 (_data8_->retval);
#line 2064 "/run/build/folks/folks/individual-aggregator.vala"
	result = _tmp3_;
#line 2064 "/run/build/folks/folks/individual-aggregator.vala"
	block8_data_unref (_data8_);
#line 2064 "/run/build/folks/folks/individual-aggregator.vala"
	_data8_ = NULL;
#line 2064 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 9530 "individual-aggregator.c"
}


static void
folks_individual_aggregator_remove_individual_data_free (gpointer _data)
{
	FolksIndividualAggregatorRemoveIndividualData* _data_;
	_data_ = _data;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->individual);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_slice_free (FolksIndividualAggregatorRemoveIndividualData, _data_);
#line 9545 "individual-aggregator.c"
}


static void
folks_individual_aggregator_remove_individual_async_ready_wrapper (GObject *source_object,
                                                                   GAsyncResult *res,
                                                                   void *user_data)
{
	FolksIndividualAggregatorRemoveIndividualData* _task_data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_task_data_->_callback_ != NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 9561 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_->_task_complete_ = TRUE;
#line 9565 "individual-aggregator.c"
}


void
folks_individual_aggregator_remove_individual (FolksIndividualAggregator* self,
                                               FolksIndividual* individual,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_)
{
	FolksIndividualAggregatorRemoveIndividualData* _data_;
	FolksIndividualAggregator* _tmp0_;
	FolksIndividual* _tmp1_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_slice_new0 (FolksIndividualAggregatorRemoveIndividualData);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_callback_ = _callback_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_individual_aggregator_remove_individual_async_ready_wrapper, _user_data_);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_callback_ == NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_task_complete_ = TRUE;
#line 9588 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_individual_aggregator_remove_individual_data_free);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->self = _tmp0_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = _g_object_ref0 (individual);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->individual);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->individual = _tmp1_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_remove_individual_co (_data_);
#line 9604 "individual-aggregator.c"
}


void
folks_individual_aggregator_remove_individual_finish (FolksIndividualAggregator* self,
                                                      GAsyncResult* _res_,
                                                      GError** error)
{
	FolksIndividualAggregatorRemoveIndividualData* _data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (NULL == _data_) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		return;
#line 9620 "individual-aggregator.c"
	}
}


/**
   * Completely remove the individual and all of its personas from their
   * backing stores.
   *
   * This method is safe to call multiple times concurrently (for the same
   * individual or different individuals).
   *
   * @param individual the {@link Individual} to remove
   * @throws GLib.Error if removing the persona failed — this will be passed
   * through from {@link PersonaStore.remove_persona}
   *
   * @since 0.1.11
   */
static void
folks_individual_aggregator_remove_individual_ready (GObject* source_object,
                                                     GAsyncResult* _res_,
                                                     gpointer _user_data_)
{
	FolksIndividualAggregatorRemoveIndividualData* _data_;
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = _user_data_;
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_source_object_ = source_object;
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_res_ = _res_;
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_task_complete_ = TRUE;
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_remove_individual_co (_data_);
#line 9654 "individual-aggregator.c"
}


static gboolean
folks_individual_aggregator_remove_individual_co (FolksIndividualAggregatorRemoveIndividualData* _data_)
{
#line 2080 "/run/build/folks/folks/individual-aggregator.vala"
	switch (_data_->_state_) {
#line 2080 "/run/build/folks/folks/individual-aggregator.vala"
		case 0:
#line 9665 "individual-aggregator.c"
		goto _state_0;
#line 2080 "/run/build/folks/folks/individual-aggregator.vala"
		case 1:
#line 9669 "individual-aggregator.c"
		goto _state_1;
		default:
#line 2080 "/run/build/folks/folks/individual-aggregator.vala"
		g_assert_not_reached ();
#line 9674 "individual-aggregator.c"
	}
	_state_0:
#line 2084 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp0_ = folks_individual_get_personas (_data_->individual);
#line 2084 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp1_ = _data_->_tmp0_;
#line 2084 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp2_ = folks_small_set_copy ((GeeIterable*) _data_->_tmp1_, NULL, NULL, NULL, NULL, NULL, NULL);
#line 2084 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->personas = _data_->_tmp2_;
#line 9685 "individual-aggregator.c"
	{
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp3_ = _data_->personas;
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp4_ = _g_object_ref0 (_data_->_tmp3_);
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_persona_list = _data_->_tmp4_;
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp5_ = _data_->_persona_list;
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp6_ = gee_collection_get_size ((GeeCollection*) _data_->_tmp5_);
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp7_ = _data_->_tmp6_;
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_persona_size = _data_->_tmp7_;
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_persona_index = -1;
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp8_ = _data_->_persona_index;
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_persona_index = _data_->_tmp8_ + 1;
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp9_ = _data_->_persona_index;
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp10_ = _data_->_persona_size;
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
			if (!(_data_->_tmp9_ < _data_->_tmp10_)) {
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 9717 "individual-aggregator.c"
			}
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp11_ = _data_->_persona_list;
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp12_ = _data_->_persona_index;
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp13_ = folks_small_set_get (_data_->_tmp11_, _data_->_tmp12_);
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp14_ = _g_object_ref0 ((FolksPersona*) _data_->_tmp13_);
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->persona = _data_->_tmp14_;
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp15_ = _data_->persona;
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp16_ = folks_persona_get_store (_data_->_tmp15_);
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp17_ = _data_->_tmp16_;
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp18_ = _data_->persona;
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_state_ = 1;
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
			folks_persona_store_remove_persona (_data_->_tmp17_, _data_->_tmp18_, folks_individual_aggregator_remove_individual_ready, _data_);
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
			return FALSE;
#line 9743 "individual-aggregator.c"
			_state_1:
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
			folks_persona_store_remove_persona_finish (_data_->_tmp17_, _data_->_res_, &_data_->_inner_error_);
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->persona);
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->_persona_list);
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->personas);
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
				g_object_unref (_data_->_async_result);
#line 2088 "/run/build/folks/folks/individual-aggregator.vala"
				return FALSE;
#line 9761 "individual-aggregator.c"
			}
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->persona);
#line 9765 "individual-aggregator.c"
		}
#line 2086 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_data_->_persona_list);
#line 9769 "individual-aggregator.c"
	}
#line 2080 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->personas);
#line 2080 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 2080 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_state_ != 0) {
#line 2080 "/run/build/folks/folks/individual-aggregator.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 2080 "/run/build/folks/folks/individual-aggregator.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 9781 "individual-aggregator.c"
		}
	}
#line 2080 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_unref (_data_->_async_result);
#line 2080 "/run/build/folks/folks/individual-aggregator.vala"
	return FALSE;
#line 9788 "individual-aggregator.c"
}


static void
folks_individual_aggregator_remove_persona_data_free (gpointer _data)
{
	FolksIndividualAggregatorRemovePersonaData* _data_;
	_data_ = _data;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->persona);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_slice_free (FolksIndividualAggregatorRemovePersonaData, _data_);
#line 9803 "individual-aggregator.c"
}


static void
folks_individual_aggregator_remove_persona_async_ready_wrapper (GObject *source_object,
                                                                GAsyncResult *res,
                                                                void *user_data)
{
	FolksIndividualAggregatorRemovePersonaData* _task_data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_task_data_->_callback_ != NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 9819 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_->_task_complete_ = TRUE;
#line 9823 "individual-aggregator.c"
}


void
folks_individual_aggregator_remove_persona (FolksIndividualAggregator* self,
                                            FolksPersona* persona,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_)
{
	FolksIndividualAggregatorRemovePersonaData* _data_;
	FolksIndividualAggregator* _tmp0_;
	FolksPersona* _tmp1_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_slice_new0 (FolksIndividualAggregatorRemovePersonaData);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_callback_ = _callback_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_individual_aggregator_remove_persona_async_ready_wrapper, _user_data_);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_callback_ == NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_task_complete_ = TRUE;
#line 9846 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_individual_aggregator_remove_persona_data_free);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->self = _tmp0_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = _g_object_ref0 (persona);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->persona);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->persona = _tmp1_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_remove_persona_co (_data_);
#line 9862 "individual-aggregator.c"
}


void
folks_individual_aggregator_remove_persona_finish (FolksIndividualAggregator* self,
                                                   GAsyncResult* _res_,
                                                   GError** error)
{
	FolksIndividualAggregatorRemovePersonaData* _data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (NULL == _data_) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		return;
#line 9878 "individual-aggregator.c"
	}
}


/**
   * Completely remove the persona from its backing store.
   *
   * This will leave other personas in the same individual alone.
   *
   * This method is safe to call multiple times concurrently (for the same
   * persona or different personas).
   *
   * @param persona the {@link Persona} to remove
   * @throws GLib.Error if removing the persona failed — this will be passed
   * through from {@link PersonaStore.remove_persona}
   *
   * @since 0.1.11
   */
static void
folks_individual_aggregator_remove_persona_ready (GObject* source_object,
                                                  GAsyncResult* _res_,
                                                  gpointer _user_data_)
{
	FolksIndividualAggregatorRemovePersonaData* _data_;
#line 2108 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = _user_data_;
#line 2108 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_source_object_ = source_object;
#line 2108 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_res_ = _res_;
#line 2108 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_task_complete_ = TRUE;
#line 2108 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_remove_persona_co (_data_);
#line 9913 "individual-aggregator.c"
}


static gboolean
folks_individual_aggregator_remove_persona_co (FolksIndividualAggregatorRemovePersonaData* _data_)
{
#line 2106 "/run/build/folks/folks/individual-aggregator.vala"
	switch (_data_->_state_) {
#line 2106 "/run/build/folks/folks/individual-aggregator.vala"
		case 0:
#line 9924 "individual-aggregator.c"
		goto _state_0;
#line 2106 "/run/build/folks/folks/individual-aggregator.vala"
		case 1:
#line 9928 "individual-aggregator.c"
		goto _state_1;
		default:
#line 2106 "/run/build/folks/folks/individual-aggregator.vala"
		g_assert_not_reached ();
#line 9933 "individual-aggregator.c"
	}
	_state_0:
#line 2108 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp0_ = folks_persona_get_store (_data_->persona);
#line 2108 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp1_ = _data_->_tmp0_;
#line 2108 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_state_ = 1;
#line 2108 "/run/build/folks/folks/individual-aggregator.vala"
	folks_persona_store_remove_persona (_data_->_tmp1_, _data_->persona, folks_individual_aggregator_remove_persona_ready, _data_);
#line 2108 "/run/build/folks/folks/individual-aggregator.vala"
	return FALSE;
#line 9946 "individual-aggregator.c"
	_state_1:
#line 2108 "/run/build/folks/folks/individual-aggregator.vala"
	folks_persona_store_remove_persona_finish (_data_->_tmp1_, _data_->_res_, &_data_->_inner_error_);
#line 2108 "/run/build/folks/folks/individual-aggregator.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2108 "/run/build/folks/folks/individual-aggregator.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 2108 "/run/build/folks/folks/individual-aggregator.vala"
		g_object_unref (_data_->_async_result);
#line 2108 "/run/build/folks/folks/individual-aggregator.vala"
		return FALSE;
#line 9958 "individual-aggregator.c"
	}
#line 2106 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 2106 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_state_ != 0) {
#line 2106 "/run/build/folks/folks/individual-aggregator.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 2106 "/run/build/folks/folks/individual-aggregator.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 9968 "individual-aggregator.c"
		}
	}
#line 2106 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_unref (_data_->_async_result);
#line 2106 "/run/build/folks/folks/individual-aggregator.vala"
	return FALSE;
#line 9975 "individual-aggregator.c"
}


static void
folks_individual_aggregator_link_personas_data_free (gpointer _data)
{
	FolksIndividualAggregatorLinkPersonasData* _data_;
	_data_ = _data;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->personas);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_slice_free (FolksIndividualAggregatorLinkPersonasData, _data_);
#line 9990 "individual-aggregator.c"
}


static void
folks_individual_aggregator_link_personas_async_ready_wrapper (GObject *source_object,
                                                               GAsyncResult *res,
                                                               void *user_data)
{
	FolksIndividualAggregatorLinkPersonasData* _task_data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_task_data_->_callback_ != NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 10006 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_->_task_complete_ = TRUE;
#line 10010 "individual-aggregator.c"
}


void
folks_individual_aggregator_link_personas (FolksIndividualAggregator* self,
                                           GeeSet* personas,
                                           GAsyncReadyCallback _callback_,
                                           gpointer _user_data_)
{
	FolksIndividualAggregatorLinkPersonasData* _data_;
	FolksIndividualAggregator* _tmp0_;
	GeeSet* _tmp1_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_slice_new0 (FolksIndividualAggregatorLinkPersonasData);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_callback_ = _callback_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_individual_aggregator_link_personas_async_ready_wrapper, _user_data_);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_callback_ == NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_task_complete_ = TRUE;
#line 10033 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_individual_aggregator_link_personas_data_free);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->self = _tmp0_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = _g_object_ref0 (personas);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->personas);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->personas = _tmp1_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_link_personas_co (_data_);
#line 10049 "individual-aggregator.c"
}


void
folks_individual_aggregator_link_personas_finish (FolksIndividualAggregator* self,
                                                  GAsyncResult* _res_,
                                                  GError** error)
{
	FolksIndividualAggregatorLinkPersonasData* _data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (NULL == _data_) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		return;
#line 10065 "individual-aggregator.c"
	}
}


/**
   * Link the given {@link Persona}s together.
   *
   * Create links between the given {@link Persona}s so that they form a single
   * {@link Individual}. The new {@link Individual} will be returned via the
   * {@link IndividualAggregator.individuals_changed} signal.
   *
   * Removal of the {@link Individual}s which the {@link Persona}s were in
   * before is signalled by {@link IndividualAggregator.individuals_changed} and
   * {@link Individual.removed}.
   *
   * This method is safe to call multiple times concurrently.
   *
   * @param personas the {@link Persona}s to be linked
   * @throws IndividualAggregatorError.NO_PRIMARY_STORE if no primary store has
   * been configured for the individual aggregator
   * @throws IndividualAggregatorError if adding the linking persona failed —
   * this will be passed through from
   * {@link IndividualAggregator.add_persona_from_details}
   *
   * @since 0.5.1
   */
static void
folks_individual_aggregator_link_personas_ready (GObject* source_object,
                                                 GAsyncResult* _res_,
                                                 gpointer _user_data_)
{
	FolksIndividualAggregatorLinkPersonasData* _data_;
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = _user_data_;
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_source_object_ = source_object;
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_res_ = _res_;
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_task_complete_ = TRUE;
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_link_personas_co (_data_);
#line 10108 "individual-aggregator.c"
}


static gboolean
folks_individual_aggregator_link_personas_co (FolksIndividualAggregatorLinkPersonasData* _data_)
{
#line 2133 "/run/build/folks/folks/individual-aggregator.vala"
	switch (_data_->_state_) {
#line 2133 "/run/build/folks/folks/individual-aggregator.vala"
		case 0:
#line 10119 "individual-aggregator.c"
		goto _state_0;
#line 2133 "/run/build/folks/folks/individual-aggregator.vala"
		case 1:
#line 10123 "individual-aggregator.c"
		goto _state_1;
#line 2133 "/run/build/folks/folks/individual-aggregator.vala"
		case 2:
#line 10127 "individual-aggregator.c"
		goto _state_2;
		default:
#line 2133 "/run/build/folks/folks/individual-aggregator.vala"
		g_assert_not_reached ();
#line 10132 "individual-aggregator.c"
	}
	_state_0:
#line 2136 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp0_ = _data_->self->priv->_primary_store;
#line 2136 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_tmp0_ == NULL) {
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp1_ = g_strconcat (_ ("Can’t link personas with no primary store."), "\n", NULL);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp2_ = _data_->_tmp1_;
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp3_ = g_strconcat (_data_->_tmp2_, _ ("Persona store ‘%s:%s’ is configured as primary, but could not be found" \
" or failed to load."), NULL);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp4_ = _data_->_tmp3_;
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp5_ = g_strconcat (_data_->_tmp4_, "\n", NULL);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp6_ = _data_->_tmp5_;
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp7_ = g_strconcat (_data_->_tmp6_, _ ("Check the relevant service is running, or change the default store in " \
"that service or using the ‘%s’ GSettings key."), NULL);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp8_ = _data_->_tmp7_;
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp9_ = _data_->self->priv->_configured_primary_store_type_id;
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp10_ = _data_->self->priv->_configured_primary_store_id;
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp11_ = g_strdup_printf ("%s %s", FOLKS_INDIVIDUAL_AGGREGATOR__FOLKS_GSETTINGS_SCHEMA, FOLKS_INDIVIDUAL_AGGREGATOR__PRIMARY_STORE_CONFIG_KEY);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp12_ = _data_->_tmp11_;
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp13_ = g_error_new (FOLKS_INDIVIDUAL_AGGREGATOR_ERROR, FOLKS_INDIVIDUAL_AGGREGATOR_ERROR_NO_PRIMARY_STORE, _data_->_tmp8_, _data_->_tmp9_, _data_->_tmp10_, _data_->_tmp12_);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp14_ = _data_->_tmp13_;
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (_data_->_tmp12_);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (_data_->_tmp8_);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (_data_->_tmp6_);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (_data_->_tmp4_);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (_data_->_tmp2_);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_inner_error_ = _data_->_tmp14_;
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
		if (_data_->_inner_error_->domain == FOLKS_INDIVIDUAL_AGGREGATOR_ERROR) {
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
			g_object_unref (_data_->_async_result);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
			return FALSE;
#line 10187 "individual-aggregator.c"
		} else {
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
			g_clear_error (&_data_->_inner_error_);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
			g_object_unref (_data_->_async_result);
#line 2138 "/run/build/folks/folks/individual-aggregator.vala"
			return FALSE;
#line 10197 "individual-aggregator.c"
		}
	}
#line 2149 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp15_ = gee_collection_get_size ((GeeCollection*) _data_->personas);
#line 2149 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp16_ = _data_->_tmp15_;
#line 2149 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_tmp16_ <= 1) {
#line 2150 "/run/build/folks/folks/individual-aggregator.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 2150 "/run/build/folks/folks/individual-aggregator.vala"
		if (_data_->_state_ != 0) {
#line 2150 "/run/build/folks/folks/individual-aggregator.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 2150 "/run/build/folks/folks/individual-aggregator.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 10214 "individual-aggregator.c"
			}
		}
#line 2150 "/run/build/folks/folks/individual-aggregator.vala"
		g_object_unref (_data_->_async_result);
#line 2150 "/run/build/folks/folks/individual-aggregator.vala"
		return FALSE;
#line 10221 "individual-aggregator.c"
	}
#line 2153 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp17_ = _data_->self->priv->_linking_enabled;
#line 2153 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_tmp17_ == FALSE) {
#line 2155 "/run/build/folks/folks/individual-aggregator.vala"
		g_debug ("individual-aggregator.vala:2155: Can't link Personas: linking disabled" \
".");
#line 2156 "/run/build/folks/folks/individual-aggregator.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 2156 "/run/build/folks/folks/individual-aggregator.vala"
		if (_data_->_state_ != 0) {
#line 2156 "/run/build/folks/folks/individual-aggregator.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 2156 "/run/build/folks/folks/individual-aggregator.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 10237 "individual-aggregator.c"
			}
		}
#line 2156 "/run/build/folks/folks/individual-aggregator.vala"
		g_object_unref (_data_->_async_result);
#line 2156 "/run/build/folks/folks/individual-aggregator.vala"
		return FALSE;
#line 10244 "individual-aggregator.c"
	}
	{
#line 2161 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp18_ = gee_iterable_iterator ((GeeIterable*) _data_->personas);
#line 2161 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_p_it = _data_->_tmp18_;
#line 2161 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 2161 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp19_ = _data_->_p_it;
#line 2161 "/run/build/folks/folks/individual-aggregator.vala"
			if (!gee_iterator_next (_data_->_tmp19_)) {
#line 2161 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 10259 "individual-aggregator.c"
			}
#line 2161 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp20_ = _data_->_p_it;
#line 2161 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp21_ = gee_iterator_get (_data_->_tmp20_);
#line 2161 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->p = (FolksPersona*) _data_->_tmp21_;
#line 2163 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp22_ = _data_->p;
#line 2163 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp23_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp22_, FOLKS_TYPE_ANTI_LINKABLE) ? ((FolksAntiLinkable*) _data_->_tmp22_) : NULL);
#line 2163 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->al = _data_->_tmp23_;
#line 2164 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp24_ = _data_->al;
#line 2164 "/run/build/folks/folks/individual-aggregator.vala"
			if (_data_->_tmp24_ != NULL) {
#line 10277 "individual-aggregator.c"
				{
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp25_ = _data_->al;
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_state_ = 1;
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
					folks_anti_linkable_remove_anti_links (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp25_, FOLKS_TYPE_ANTI_LINKABLE, FolksAntiLinkable), _data_->personas, folks_individual_aggregator_link_personas_ready, _data_);
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
					return FALSE;
#line 10287 "individual-aggregator.c"
					_state_1:
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
					folks_anti_linkable_remove_anti_links_finish (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp25_, FOLKS_TYPE_ANTI_LINKABLE, FolksAntiLinkable), _data_->_res_, &_data_->_inner_error_);
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
					if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
						if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 10295 "individual-aggregator.c"
							goto __catch21_folks_property_error;
						}
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->al);
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->p);
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->_p_it);
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
						g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
						g_clear_error (&_data_->_inner_error_);
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
						g_object_unref (_data_->_async_result);
#line 2168 "/run/build/folks/folks/individual-aggregator.vala"
						return FALSE;
#line 10312 "individual-aggregator.c"
					}
				}
				goto __finally21;
				__catch21_folks_property_error:
				{
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->e = _data_->_inner_error_;
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_inner_error_ = NULL;
#line 2172 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp26_ = g_error_new_literal (FOLKS_INDIVIDUAL_AGGREGATOR_ERROR, FOLKS_INDIVIDUAL_AGGREGATOR_ERROR_PROPERTY_NOT_WRITEABLE, _ ("Anti-links can’t be removed between personas being linked."));
#line 2172 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_inner_error_ = _data_->_tmp26_;
#line 2172 "/run/build/folks/folks/individual-aggregator.vala"
					_g_error_free0 (_data_->e);
#line 10328 "individual-aggregator.c"
					goto __finally21;
				}
				__finally21:
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
				if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
					if (_data_->_inner_error_->domain == FOLKS_INDIVIDUAL_AGGREGATOR_ERROR) {
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
						g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->al);
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->p);
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->_p_it);
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
						g_object_unref (_data_->_async_result);
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
						return FALSE;
#line 10348 "individual-aggregator.c"
					} else {
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->al);
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->p);
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->_p_it);
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
						g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
						g_clear_error (&_data_->_inner_error_);
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
						g_object_unref (_data_->_async_result);
#line 2166 "/run/build/folks/folks/individual-aggregator.vala"
						return FALSE;
#line 10364 "individual-aggregator.c"
					}
				}
			}
#line 2161 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->al);
#line 2161 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->p);
#line 10372 "individual-aggregator.c"
		}
#line 2161 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_data_->_p_it);
#line 10376 "individual-aggregator.c"
	}
#line 2180 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp27_ = _data_->self->priv->_primary_store;
#line 2180 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp28_ = folks_persona_store_get_type_id (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp27_, FOLKS_TYPE_PERSONA_STORE, FolksPersonaStore));
#line 2180 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp29_ = _data_->_tmp28_;
#line 2180 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp30_ = _data_->self->priv->_configured_primary_store_type_id;
#line 2180 "/run/build/folks/folks/individual-aggregator.vala"
	_vala_assert (g_strcmp0 (_data_->_tmp29_, _data_->_tmp30_) == 0, "((!) this._primary_store).type_id ==           this._configured_primary_store_type_id");
#line 2183 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp31_ = _folks_individual_aggregator_build_linking_details (_data_->self, _data_->personas);
#line 2183 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->details = _data_->_tmp31_;
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp32_ = _data_->self->priv->_primary_store;
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp33_ = _data_->details;
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_state_ = 2;
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_add_persona_from_details (_data_->self, NULL, G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp32_, FOLKS_TYPE_PERSONA_STORE, FolksPersonaStore), _data_->_tmp33_, folks_individual_aggregator_link_personas_ready, _data_);
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
	return FALSE;
#line 10402 "individual-aggregator.c"
	_state_2:
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp34_ = folks_individual_aggregator_add_persona_from_details_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp35_ = _data_->_tmp34_;
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->_tmp35_);
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
		if (_data_->_inner_error_->domain == FOLKS_INDIVIDUAL_AGGREGATOR_ERROR) {
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
			_g_hash_table_unref0 (_data_->details);
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
			g_object_unref (_data_->_async_result);
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
			return FALSE;
#line 10422 "individual-aggregator.c"
		} else {
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
			_g_hash_table_unref0 (_data_->details);
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
			g_clear_error (&_data_->_inner_error_);
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
			g_object_unref (_data_->_async_result);
#line 2185 "/run/build/folks/folks/individual-aggregator.vala"
			return FALSE;
#line 10434 "individual-aggregator.c"
		}
	}
#line 2133 "/run/build/folks/folks/individual-aggregator.vala"
	_g_hash_table_unref0 (_data_->details);
#line 2133 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 2133 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_state_ != 0) {
#line 2133 "/run/build/folks/folks/individual-aggregator.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 2133 "/run/build/folks/folks/individual-aggregator.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 10447 "individual-aggregator.c"
		}
	}
#line 2133 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_unref (_data_->_async_result);
#line 2133 "/run/build/folks/folks/individual-aggregator.vala"
	return FALSE;
#line 10454 "individual-aggregator.c"
}


static guint
_folks_abstract_field_details_hash_static_gee_hash_data_func (gconstpointer v,
                                                              gpointer self)
{
	guint result;
	result = folks_abstract_field_details_hash_static ((FolksAbstractFieldDetails*) v);
#line 2193 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 10466 "individual-aggregator.c"
}


static gboolean
_folks_abstract_field_details_equal_static_gee_equal_data_func (gconstpointer a,
                                                                gconstpointer b,
                                                                gpointer self)
{
	gboolean result;
	result = folks_abstract_field_details_equal_static ((FolksAbstractFieldDetails*) a, (FolksAbstractFieldDetails*) b);
#line 2193 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 10479 "individual-aggregator.c"
}


static GHashTable*
_folks_individual_aggregator_build_linking_details (FolksIndividualAggregator* self,
                                                    GeeSet* personas)
{
	GHashTable* result = NULL;
	GeeHashMultiMap* protocols_addrs_set = NULL;
	GeeHashMultiMap* _tmp0_;
	GeeHashMultiMap* web_service_addrs_set = NULL;
	GeeHashMultiMap* _tmp1_;
	FolksSmallSet* local_ids = NULL;
	FolksSmallSet* _tmp2_;
	GHashTable* details = NULL;
	GHashFunc _tmp47_;
	GEqualFunc _tmp48_;
	GHashTable* _tmp49_;
	GeeHashMultiMap* _tmp50_;
	gint _tmp51_;
	gint _tmp52_;
	GeeHashMultiMap* _tmp61_;
	gint _tmp62_;
	gint _tmp63_;
	FolksSmallSet* _tmp72_;
	gint _tmp73_;
	gint _tmp74_;
#line 2189 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 2189 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (personas != NULL, NULL);
#line 2193 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = gee_hash_multi_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, FOLKS_TYPE_IM_FIELD_DETAILS, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, _folks_abstract_field_details_hash_static_gee_hash_data_func, NULL, NULL, _folks_abstract_field_details_equal_static_gee_equal_data_func, NULL, NULL);
#line 2193 "/run/build/folks/folks/individual-aggregator.vala"
	protocols_addrs_set = _tmp0_;
#line 2196 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = gee_hash_multi_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, FOLKS_TYPE_WEB_SERVICE_FIELD_DETAILS, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, _folks_abstract_field_details_hash_static_gee_hash_data_func, NULL, NULL, _folks_abstract_field_details_equal_static_gee_equal_data_func, NULL, NULL);
#line 2196 "/run/build/folks/folks/individual-aggregator.vala"
	web_service_addrs_set = _tmp1_;
#line 2202 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = folks_small_set_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, NULL, NULL, NULL, NULL, NULL, NULL);
#line 2202 "/run/build/folks/folks/individual-aggregator.vala"
	local_ids = _tmp2_;
#line 10523 "individual-aggregator.c"
	{
		GeeIterator* _persona_it = NULL;
		GeeIterator* _tmp3_;
#line 2204 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp3_ = gee_iterable_iterator ((GeeIterable*) personas);
#line 2204 "/run/build/folks/folks/individual-aggregator.vala"
		_persona_it = _tmp3_;
#line 2204 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 10533 "individual-aggregator.c"
			GeeIterator* _tmp4_;
			FolksPersona* persona = NULL;
			GeeIterator* _tmp5_;
			gpointer _tmp6_;
			FolksPersona* _tmp7_;
			FolksPersona* _tmp22_;
			FolksPersona* _tmp37_;
#line 2204 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp4_ = _persona_it;
#line 2204 "/run/build/folks/folks/individual-aggregator.vala"
			if (!gee_iterator_next (_tmp4_)) {
#line 2204 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 10547 "individual-aggregator.c"
			}
#line 2204 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp5_ = _persona_it;
#line 2204 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp6_ = gee_iterator_get (_tmp5_);
#line 2204 "/run/build/folks/folks/individual-aggregator.vala"
			persona = (FolksPersona*) _tmp6_;
#line 2206 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp7_ = persona;
#line 2206 "/run/build/folks/folks/individual-aggregator.vala"
			if (G_TYPE_CHECK_INSTANCE_TYPE (_tmp7_, FOLKS_TYPE_IM_DETAILS)) {
#line 10559 "individual-aggregator.c"
				FolksImDetails* im_details = NULL;
				FolksPersona* _tmp8_;
				FolksImDetails* _tmp9_;
				GeeMapIterator* iter = NULL;
				FolksImDetails* _tmp10_;
				GeeMultiMap* _tmp11_;
				GeeMultiMap* _tmp12_;
				GeeMapIterator* _tmp13_;
#line 2208 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp8_ = persona;
#line 2208 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp9_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp8_, FOLKS_TYPE_IM_DETAILS, FolksImDetails));
#line 2208 "/run/build/folks/folks/individual-aggregator.vala"
				im_details = _tmp9_;
#line 2209 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp10_ = im_details;
#line 2209 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp11_ = folks_im_details_get_im_addresses (_tmp10_);
#line 2209 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp12_ = _tmp11_;
#line 2209 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp13_ = gee_multi_map_map_iterator (_tmp12_);
#line 2209 "/run/build/folks/folks/individual-aggregator.vala"
				iter = _tmp13_;
#line 2212 "/run/build/folks/folks/individual-aggregator.vala"
				while (TRUE) {
#line 10586 "individual-aggregator.c"
					GeeMapIterator* _tmp14_;
					GeeHashMultiMap* _tmp15_;
					GeeMapIterator* _tmp16_;
					gpointer _tmp17_;
					gchar* _tmp18_;
					GeeMapIterator* _tmp19_;
					gpointer _tmp20_;
					FolksImFieldDetails* _tmp21_;
#line 2212 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp14_ = iter;
#line 2212 "/run/build/folks/folks/individual-aggregator.vala"
					if (!gee_map_iterator_next (_tmp14_)) {
#line 2212 "/run/build/folks/folks/individual-aggregator.vala"
						break;
#line 10601 "individual-aggregator.c"
					}
#line 2213 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp15_ = protocols_addrs_set;
#line 2213 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp16_ = iter;
#line 2213 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp17_ = gee_map_iterator_get_key (_tmp16_);
#line 2213 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp18_ = (gchar*) _tmp17_;
#line 2213 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp19_ = iter;
#line 2213 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp20_ = gee_map_iterator_get_value (_tmp19_);
#line 2213 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp21_ = (FolksImFieldDetails*) _tmp20_;
#line 2213 "/run/build/folks/folks/individual-aggregator.vala"
					gee_multi_map_set ((GeeMultiMap*) _tmp15_, _tmp18_, _tmp21_);
#line 2213 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_tmp21_);
#line 2213 "/run/build/folks/folks/individual-aggregator.vala"
					_g_free0 (_tmp18_);
#line 10623 "individual-aggregator.c"
				}
#line 2206 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (iter);
#line 2206 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (im_details);
#line 10629 "individual-aggregator.c"
			}
#line 2216 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp22_ = persona;
#line 2216 "/run/build/folks/folks/individual-aggregator.vala"
			if (G_TYPE_CHECK_INSTANCE_TYPE (_tmp22_, FOLKS_TYPE_WEB_SERVICE_DETAILS)) {
#line 10635 "individual-aggregator.c"
				FolksWebServiceDetails* ws_details = NULL;
				FolksPersona* _tmp23_;
				FolksWebServiceDetails* _tmp24_;
				GeeMapIterator* iter = NULL;
				FolksWebServiceDetails* _tmp25_;
				GeeMultiMap* _tmp26_;
				GeeMultiMap* _tmp27_;
				GeeMapIterator* _tmp28_;
#line 2218 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp23_ = persona;
#line 2218 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp24_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp23_, FOLKS_TYPE_WEB_SERVICE_DETAILS, FolksWebServiceDetails));
#line 2218 "/run/build/folks/folks/individual-aggregator.vala"
				ws_details = _tmp24_;
#line 2219 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp25_ = ws_details;
#line 2219 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp26_ = folks_web_service_details_get_web_service_addresses (_tmp25_);
#line 2219 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp27_ = _tmp26_;
#line 2219 "/run/build/folks/folks/individual-aggregator.vala"
				_tmp28_ = gee_multi_map_map_iterator (_tmp27_);
#line 2219 "/run/build/folks/folks/individual-aggregator.vala"
				iter = _tmp28_;
#line 2222 "/run/build/folks/folks/individual-aggregator.vala"
				while (TRUE) {
#line 10662 "individual-aggregator.c"
					GeeMapIterator* _tmp29_;
					GeeHashMultiMap* _tmp30_;
					GeeMapIterator* _tmp31_;
					gpointer _tmp32_;
					gchar* _tmp33_;
					GeeMapIterator* _tmp34_;
					gpointer _tmp35_;
					FolksWebServiceFieldDetails* _tmp36_;
#line 2222 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp29_ = iter;
#line 2222 "/run/build/folks/folks/individual-aggregator.vala"
					if (!gee_map_iterator_next (_tmp29_)) {
#line 2222 "/run/build/folks/folks/individual-aggregator.vala"
						break;
#line 10677 "individual-aggregator.c"
					}
#line 2223 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp30_ = web_service_addrs_set;
#line 2223 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp31_ = iter;
#line 2223 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp32_ = gee_map_iterator_get_key (_tmp31_);
#line 2223 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp33_ = (gchar*) _tmp32_;
#line 2223 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp34_ = iter;
#line 2223 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp35_ = gee_map_iterator_get_value (_tmp34_);
#line 2223 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp36_ = (FolksWebServiceFieldDetails*) _tmp35_;
#line 2223 "/run/build/folks/folks/individual-aggregator.vala"
					gee_multi_map_set ((GeeMultiMap*) _tmp30_, _tmp33_, _tmp36_);
#line 2223 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_tmp36_);
#line 2223 "/run/build/folks/folks/individual-aggregator.vala"
					_g_free0 (_tmp33_);
#line 10699 "individual-aggregator.c"
				}
#line 2216 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (iter);
#line 2216 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (ws_details);
#line 10705 "individual-aggregator.c"
			}
#line 2226 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp37_ = persona;
#line 2226 "/run/build/folks/folks/individual-aggregator.vala"
			if (G_TYPE_CHECK_INSTANCE_TYPE (_tmp37_, FOLKS_TYPE_LOCAL_ID_DETAILS)) {
#line 10711 "individual-aggregator.c"
				{
					GeeIterator* _id_it = NULL;
					FolksPersona* _tmp38_;
					GeeSet* _tmp39_;
					GeeSet* _tmp40_;
					GeeIterator* _tmp41_;
#line 2228 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp38_ = persona;
#line 2228 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp39_ = folks_local_id_details_get_local_ids (G_TYPE_CHECK_INSTANCE_CAST (_tmp38_, FOLKS_TYPE_LOCAL_ID_DETAILS, FolksLocalIdDetails));
#line 2228 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp40_ = _tmp39_;
#line 2228 "/run/build/folks/folks/individual-aggregator.vala"
					_tmp41_ = gee_iterable_iterator ((GeeIterable*) _tmp40_);
#line 2228 "/run/build/folks/folks/individual-aggregator.vala"
					_id_it = _tmp41_;
#line 2228 "/run/build/folks/folks/individual-aggregator.vala"
					while (TRUE) {
#line 10730 "individual-aggregator.c"
						GeeIterator* _tmp42_;
						gchar* id = NULL;
						GeeIterator* _tmp43_;
						gpointer _tmp44_;
						FolksSmallSet* _tmp45_;
						const gchar* _tmp46_;
#line 2228 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp42_ = _id_it;
#line 2228 "/run/build/folks/folks/individual-aggregator.vala"
						if (!gee_iterator_next (_tmp42_)) {
#line 2228 "/run/build/folks/folks/individual-aggregator.vala"
							break;
#line 10743 "individual-aggregator.c"
						}
#line 2228 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp43_ = _id_it;
#line 2228 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp44_ = gee_iterator_get (_tmp43_);
#line 2228 "/run/build/folks/folks/individual-aggregator.vala"
						id = (gchar*) _tmp44_;
#line 2230 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp45_ = local_ids;
#line 2230 "/run/build/folks/folks/individual-aggregator.vala"
						_tmp46_ = id;
#line 2230 "/run/build/folks/folks/individual-aggregator.vala"
						gee_abstract_collection_add ((GeeAbstractCollection*) _tmp45_, _tmp46_);
#line 2228 "/run/build/folks/folks/individual-aggregator.vala"
						_g_free0 (id);
#line 10759 "individual-aggregator.c"
					}
#line 2228 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_id_it);
#line 10763 "individual-aggregator.c"
				}
			}
#line 2204 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (persona);
#line 10768 "individual-aggregator.c"
		}
#line 2204 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_persona_it);
#line 10772 "individual-aggregator.c"
	}
#line 2235 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp47_ = g_str_hash;
#line 2235 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp48_ = g_str_equal;
#line 2235 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp49_ = g_hash_table_new_full (_tmp47_, _tmp48_, _g_free0_, __vala_GValue_free0_);
#line 2235 "/run/build/folks/folks/individual-aggregator.vala"
	details = _tmp49_;
#line 2237 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp50_ = protocols_addrs_set;
#line 2237 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp51_ = gee_multi_map_get_size ((GeeMultiMap*) _tmp50_);
#line 2237 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp52_ = _tmp51_;
#line 2237 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp52_ > 0) {
#line 10790 "individual-aggregator.c"
		GValue im_addresses_value = {0};
		GValue _tmp53_ = {0};
		GeeHashMultiMap* _tmp54_;
		GHashTable* _tmp55_;
		const gchar* _tmp56_;
		gchar* _tmp57_;
		GValue _tmp58_;
		GValue _tmp59_;
		GValue* _tmp60_;
#line 2239 "/run/build/folks/folks/individual-aggregator.vala"
		g_value_init (&_tmp53_, GEE_TYPE_MULTI_MAP);
#line 2239 "/run/build/folks/folks/individual-aggregator.vala"
		im_addresses_value = _tmp53_;
#line 2240 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp54_ = protocols_addrs_set;
#line 2240 "/run/build/folks/folks/individual-aggregator.vala"
		g_value_set_object (&im_addresses_value, (GObject*) _tmp54_);
#line 2241 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp55_ = details;
#line 2241 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp56_ = folks_persona_store_detail_key (FOLKS_PERSONA_DETAIL_IM_ADDRESSES);
#line 2241 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp57_ = g_strdup ((const gchar*) _tmp56_);
#line 2241 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp58_ = im_addresses_value;
#line 2241 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp59_ = _tmp58_;
#line 2241 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp60_ = __g_value_dup0 (&_tmp59_);
#line 2241 "/run/build/folks/folks/individual-aggregator.vala"
		g_hash_table_insert (_tmp55_, _tmp57_, _tmp60_);
#line 2237 "/run/build/folks/folks/individual-aggregator.vala"
		G_IS_VALUE (&im_addresses_value) ? (g_value_unset (&im_addresses_value), NULL) : NULL;
#line 10824 "individual-aggregator.c"
	}
#line 2246 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp61_ = web_service_addrs_set;
#line 2246 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp62_ = gee_multi_map_get_size ((GeeMultiMap*) _tmp61_);
#line 2246 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp63_ = _tmp62_;
#line 2246 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp63_ > 0) {
#line 10834 "individual-aggregator.c"
		GValue web_service_addresses_value = {0};
		GValue _tmp64_ = {0};
		GeeHashMultiMap* _tmp65_;
		GHashTable* _tmp66_;
		const gchar* _tmp67_;
		gchar* _tmp68_;
		GValue _tmp69_;
		GValue _tmp70_;
		GValue* _tmp71_;
#line 2248 "/run/build/folks/folks/individual-aggregator.vala"
		g_value_init (&_tmp64_, GEE_TYPE_MULTI_MAP);
#line 2248 "/run/build/folks/folks/individual-aggregator.vala"
		web_service_addresses_value = _tmp64_;
#line 2249 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp65_ = web_service_addrs_set;
#line 2249 "/run/build/folks/folks/individual-aggregator.vala"
		g_value_set_object (&web_service_addresses_value, (GObject*) _tmp65_);
#line 2250 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp66_ = details;
#line 2250 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp67_ = folks_persona_store_detail_key (FOLKS_PERSONA_DETAIL_WEB_SERVICE_ADDRESSES);
#line 2250 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp68_ = g_strdup ((const gchar*) _tmp67_);
#line 2250 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp69_ = web_service_addresses_value;
#line 2250 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp70_ = _tmp69_;
#line 2250 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp71_ = __g_value_dup0 (&_tmp70_);
#line 2250 "/run/build/folks/folks/individual-aggregator.vala"
		g_hash_table_insert (_tmp66_, _tmp68_, _tmp71_);
#line 2246 "/run/build/folks/folks/individual-aggregator.vala"
		G_IS_VALUE (&web_service_addresses_value) ? (g_value_unset (&web_service_addresses_value), NULL) : NULL;
#line 10868 "individual-aggregator.c"
	}
#line 2255 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp72_ = local_ids;
#line 2255 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp73_ = gee_collection_get_size ((GeeCollection*) _tmp72_);
#line 2255 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp74_ = _tmp73_;
#line 2255 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp74_ > 0) {
#line 10878 "individual-aggregator.c"
		GValue local_ids_value = {0};
		GValue _tmp75_ = {0};
		FolksSmallSet* _tmp76_;
		GHashTable* _tmp77_;
		const gchar* _tmp78_;
		gchar* _tmp79_;
		GValue _tmp80_;
		GValue _tmp81_;
		GValue* _tmp82_;
#line 2257 "/run/build/folks/folks/individual-aggregator.vala"
		g_value_init (&_tmp75_, GEE_TYPE_SET);
#line 2257 "/run/build/folks/folks/individual-aggregator.vala"
		local_ids_value = _tmp75_;
#line 2258 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp76_ = local_ids;
#line 2258 "/run/build/folks/folks/individual-aggregator.vala"
		g_value_set_object (&local_ids_value, (GObject*) _tmp76_);
#line 2259 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp77_ = details;
#line 2259 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp78_ = folks_persona_store_detail_key (FOLKS_PERSONA_DETAIL_LOCAL_IDS);
#line 2259 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp79_ = g_strdup ((const gchar*) _tmp78_);
#line 2259 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp80_ = local_ids_value;
#line 2259 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp81_ = _tmp80_;
#line 2259 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp82_ = __g_value_dup0 (&_tmp81_);
#line 2259 "/run/build/folks/folks/individual-aggregator.vala"
		g_hash_table_insert (_tmp77_, _tmp79_, _tmp82_);
#line 2255 "/run/build/folks/folks/individual-aggregator.vala"
		G_IS_VALUE (&local_ids_value) ? (g_value_unset (&local_ids_value), NULL) : NULL;
#line 10912 "individual-aggregator.c"
	}
#line 2264 "/run/build/folks/folks/individual-aggregator.vala"
	result = details;
#line 2264 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (local_ids);
#line 2264 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (web_service_addrs_set);
#line 2264 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (protocols_addrs_set);
#line 2264 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 10924 "individual-aggregator.c"
}


static void
folks_individual_aggregator_unlink_individual_data_free (gpointer _data)
{
	FolksIndividualAggregatorUnlinkIndividualData* _data_;
	_data_ = _data;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->individual);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_slice_free (FolksIndividualAggregatorUnlinkIndividualData, _data_);
#line 10939 "individual-aggregator.c"
}


static void
folks_individual_aggregator_unlink_individual_async_ready_wrapper (GObject *source_object,
                                                                   GAsyncResult *res,
                                                                   void *user_data)
{
	FolksIndividualAggregatorUnlinkIndividualData* _task_data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_task_data_->_callback_ != NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 10955 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_->_task_complete_ = TRUE;
#line 10959 "individual-aggregator.c"
}


void
folks_individual_aggregator_unlink_individual (FolksIndividualAggregator* self,
                                               FolksIndividual* individual,
                                               GAsyncReadyCallback _callback_,
                                               gpointer _user_data_)
{
	FolksIndividualAggregatorUnlinkIndividualData* _data_;
	FolksIndividualAggregator* _tmp0_;
	FolksIndividual* _tmp1_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_slice_new0 (FolksIndividualAggregatorUnlinkIndividualData);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_callback_ = _callback_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_individual_aggregator_unlink_individual_async_ready_wrapper, _user_data_);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_callback_ == NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_task_complete_ = TRUE;
#line 10982 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_individual_aggregator_unlink_individual_data_free);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->self = _tmp0_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = _g_object_ref0 (individual);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->individual);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->individual = _tmp1_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_unlink_individual_co (_data_);
#line 10998 "individual-aggregator.c"
}


void
folks_individual_aggregator_unlink_individual_finish (FolksIndividualAggregator* self,
                                                      GAsyncResult* _res_,
                                                      GError** error)
{
	FolksIndividualAggregatorUnlinkIndividualData* _data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (NULL == _data_) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		return;
#line 11014 "individual-aggregator.c"
	}
}


/**
   * Unlinks the given {@link Individual} into its constituent {@link Persona}s.
   *
   * This completely unlinks the given {@link Individual}, destroying all of
   * its writeable {@link Persona}s.
   *
   * The {@link Individual}'s removal is signalled by
   * {@link IndividualAggregator.individuals_changed} and
   * {@link Individual.removed}.
   *
   * The {@link Persona}s comprising the {@link Individual} will be re-linked
   * into one or more new {@link Individual}s, depending on how much linking
   * data remains (typically only implicit links remain). The addition of these
   * new {@link Individual}s will be signalled by
   * {@link IndividualAggregator.individuals_changed}.
   *
   * This method is safe to call multiple times concurrently, although
   * concurrent calls for the same individual may result in duplicate personas
   * being created.
   *
   * @param individual the {@link Individual} to unlink
   * @throws GLib.Error if removing the linking persona failed — this will be
   * passed through from {@link PersonaStore.remove_persona}
   *
   * @since 0.1.13
   */
static void
folks_individual_aggregator_unlink_individual_ready (GObject* source_object,
                                                     GAsyncResult* _res_,
                                                     gpointer _user_data_)
{
	FolksIndividualAggregatorUnlinkIndividualData* _data_;
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = _user_data_;
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_source_object_ = source_object;
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_res_ = _res_;
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_task_complete_ = TRUE;
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_unlink_individual_co (_data_);
#line 11061 "individual-aggregator.c"
}


static gboolean
folks_individual_aggregator_unlink_individual_co (FolksIndividualAggregatorUnlinkIndividualData* _data_)
{
#line 2293 "/run/build/folks/folks/individual-aggregator.vala"
	switch (_data_->_state_) {
#line 2293 "/run/build/folks/folks/individual-aggregator.vala"
		case 0:
#line 11072 "individual-aggregator.c"
		goto _state_0;
#line 2293 "/run/build/folks/folks/individual-aggregator.vala"
		case 1:
#line 11076 "individual-aggregator.c"
		goto _state_1;
#line 2293 "/run/build/folks/folks/individual-aggregator.vala"
		case 2:
#line 11080 "individual-aggregator.c"
		goto _state_2;
		default:
#line 2293 "/run/build/folks/folks/individual-aggregator.vala"
		g_assert_not_reached ();
#line 11085 "individual-aggregator.c"
	}
	_state_0:
#line 2295 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp0_ = _data_->self->priv->_linking_enabled;
#line 2295 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_tmp0_ == FALSE) {
#line 2297 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp1_ = folks_individual_get_id (_data_->individual);
#line 2297 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp2_ = _data_->_tmp1_;
#line 2297 "/run/build/folks/folks/individual-aggregator.vala"
		g_debug ("individual-aggregator.vala:2297: Can't unlink Individual '%s': linking" \
" disabled.", _data_->_tmp2_);
#line 2299 "/run/build/folks/folks/individual-aggregator.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 2299 "/run/build/folks/folks/individual-aggregator.vala"
		if (_data_->_state_ != 0) {
#line 2299 "/run/build/folks/folks/individual-aggregator.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 2299 "/run/build/folks/folks/individual-aggregator.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 11106 "individual-aggregator.c"
			}
		}
#line 2299 "/run/build/folks/folks/individual-aggregator.vala"
		g_object_unref (_data_->_async_result);
#line 2299 "/run/build/folks/folks/individual-aggregator.vala"
		return FALSE;
#line 11113 "individual-aggregator.c"
	}
#line 2302 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp3_ = folks_individual_get_id (_data_->individual);
#line 2302 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp4_ = _data_->_tmp3_;
#line 2302 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:2302: Unlinking Individual '%s':", _data_->_tmp4_);
#line 2316 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp5_ = folks_individual_get_personas (_data_->individual);
#line 2316 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp6_ = _data_->_tmp5_;
#line 2316 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp7_ = folks_small_set_copy ((GeeIterable*) _data_->_tmp6_, NULL, NULL, NULL, NULL, NULL, NULL);
#line 2316 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->individual_personas = _data_->_tmp7_;
#line 2318 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:2318:     Inserting anti-links:");
#line 11131 "individual-aggregator.c"
	{
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp8_ = _data_->individual_personas;
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp9_ = _g_object_ref0 (_data_->_tmp8_);
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_pers_list = _data_->_tmp9_;
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp10_ = _data_->_pers_list;
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp11_ = gee_collection_get_size ((GeeCollection*) _data_->_tmp10_);
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp12_ = _data_->_tmp11_;
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_pers_size = _data_->_tmp12_;
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_pers_index = -1;
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp13_ = _data_->_pers_index;
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_pers_index = _data_->_tmp13_ + 1;
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp14_ = _data_->_pers_index;
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp15_ = _data_->_pers_size;
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
			if (!(_data_->_tmp14_ < _data_->_tmp15_)) {
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 11163 "individual-aggregator.c"
			}
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp16_ = _data_->_pers_list;
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp17_ = _data_->_pers_index;
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp18_ = folks_small_set_get (_data_->_tmp16_, _data_->_tmp17_);
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp19_ = _g_object_ref0 ((FolksPersona*) _data_->_tmp18_);
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->pers = _data_->_tmp19_;
#line 11175 "individual-aggregator.c"
			{
#line 2323 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp20_ = folks_small_set_new (FOLKS_TYPE_PERSONA, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 2323 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->personas = _data_->_tmp20_;
#line 2324 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp21_ = _data_->personas;
#line 2324 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp22_ = _data_->pers;
#line 2324 "/run/build/folks/folks/individual-aggregator.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _data_->_tmp21_, _data_->_tmp22_);
#line 2325 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp23_ = _data_->pers;
#line 2325 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp24_ = folks_persona_get_uid (_data_->_tmp23_);
#line 2325 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp25_ = _data_->_tmp24_;
#line 2325 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp26_ = _data_->pers;
#line 2325 "/run/build/folks/folks/individual-aggregator.vala"
				g_debug ("individual-aggregator.vala:2325:         Anti-linking persona '%s' (%p" \
")", _data_->_tmp25_, _data_->_tmp26_);
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp27_ = _data_->personas;
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_state_ = 1;
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
				_folks_individual_aggregator_ensure_personas_property_writeable (_data_->self, (GeeSet*) _data_->_tmp27_, "anti-links", folks_individual_aggregator_unlink_individual_ready, _data_);
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
				return FALSE;
#line 11205 "individual-aggregator.c"
				_state_1:
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp28_ = _folks_individual_aggregator_ensure_personas_property_writeable_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->writeable_persona = _data_->_tmp28_;
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
				if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_data_->personas);
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
					if (_data_->_inner_error_->domain == FOLKS_INDIVIDUAL_AGGREGATOR_ERROR) {
#line 11217 "individual-aggregator.c"
						goto __catch22_folks_individual_aggregator_error;
					}
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_data_->personas);
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_data_->pers);
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_data_->_pers_list);
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_data_->individual_personas);
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
					g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
					g_clear_error (&_data_->_inner_error_);
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
					g_object_unref (_data_->_async_result);
#line 2327 "/run/build/folks/folks/individual-aggregator.vala"
					return FALSE;
#line 11236 "individual-aggregator.c"
				}
#line 2330 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp29_ = _data_->writeable_persona;
#line 2330 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp30_ = folks_persona_get_uid (_data_->_tmp29_);
#line 2330 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp31_ = _data_->_tmp30_;
#line 2330 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp32_ = _data_->writeable_persona;
#line 2330 "/run/build/folks/folks/individual-aggregator.vala"
				g_debug ("individual-aggregator.vala:2330:         Writeable persona '%s' (%p)", _data_->_tmp31_, _data_->_tmp32_);
#line 2334 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp33_ = _data_->individual_personas;
#line 2334 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp34_ = folks_small_set_copy ((GeeIterable*) _data_->_tmp33_, NULL, NULL, NULL, NULL, NULL, NULL);
#line 2334 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->anti_link_personas = _data_->_tmp34_;
#line 2335 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp35_ = _data_->anti_link_personas;
#line 2335 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp36_ = _data_->pers;
#line 2335 "/run/build/folks/folks/individual-aggregator.vala"
				gee_abstract_collection_remove ((GeeAbstractCollection*) _data_->_tmp35_, _data_->_tmp36_);
#line 2337 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp37_ = _data_->writeable_persona;
#line 2337 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp38_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp37_, FOLKS_TYPE_ANTI_LINKABLE) ? ((FolksAntiLinkable*) _data_->_tmp37_) : NULL);
#line 2337 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->al = _data_->_tmp38_;
#line 2338 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp39_ = _data_->al;
#line 2338 "/run/build/folks/folks/individual-aggregator.vala"
				_vala_assert (_data_->_tmp39_ != NULL, "al != null");
#line 2339 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp40_ = _data_->al;
#line 2339 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp41_ = _data_->anti_link_personas;
#line 2339 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_state_ = 2;
#line 2339 "/run/build/folks/folks/individual-aggregator.vala"
				folks_anti_linkable_add_anti_links (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp40_, FOLKS_TYPE_ANTI_LINKABLE, FolksAntiLinkable), (GeeSet*) _data_->_tmp41_, folks_individual_aggregator_unlink_individual_ready, _data_);
#line 2339 "/run/build/folks/folks/individual-aggregator.vala"
				return FALSE;
#line 11280 "individual-aggregator.c"
				_state_2:
#line 2339 "/run/build/folks/folks/individual-aggregator.vala"
				folks_anti_linkable_add_anti_links_finish (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp40_, FOLKS_TYPE_ANTI_LINKABLE, FolksAntiLinkable), _data_->_res_, &_data_->_inner_error_);
#line 2339 "/run/build/folks/folks/individual-aggregator.vala"
				if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2339 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_data_->al);
#line 2339 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_data_->anti_link_personas);
#line 2339 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_data_->writeable_persona);
#line 2339 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_data_->personas);
#line 2339 "/run/build/folks/folks/individual-aggregator.vala"
					if (_data_->_inner_error_->domain == FOLKS_INDIVIDUAL_AGGREGATOR_ERROR) {
#line 11296 "individual-aggregator.c"
						goto __catch22_folks_individual_aggregator_error;
					}
					goto __finally22;
				}
#line 2340 "/run/build/folks/folks/individual-aggregator.vala"
				g_debug ("individual-aggregator.vala:2340: ");
#line 2321 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->al);
#line 2321 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->anti_link_personas);
#line 2321 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->writeable_persona);
#line 2321 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->personas);
#line 11311 "individual-aggregator.c"
			}
			goto __finally22;
			__catch22_folks_individual_aggregator_error:
			{
#line 2321 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->e1 = _data_->_inner_error_;
#line 2321 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_inner_error_ = NULL;
#line 2344 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp42_ = _data_->e1;
#line 2344 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp43_ = _data_->_tmp42_->message;
#line 2344 "/run/build/folks/folks/individual-aggregator.vala"
				g_debug ("    Failed to ensure anti-links property is writeable " "(continuing anyway): %s", _data_->_tmp43_);
#line 2321 "/run/build/folks/folks/individual-aggregator.vala"
				_g_error_free0 (_data_->e1);
#line 11328 "individual-aggregator.c"
			}
			__finally22:
#line 2321 "/run/build/folks/folks/individual-aggregator.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2321 "/run/build/folks/folks/individual-aggregator.vala"
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 2321 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->pers);
#line 2321 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->_pers_list);
#line 2321 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->individual_personas);
#line 2321 "/run/build/folks/folks/individual-aggregator.vala"
				g_object_unref (_data_->_async_result);
#line 2321 "/run/build/folks/folks/individual-aggregator.vala"
				return FALSE;
#line 11345 "individual-aggregator.c"
			}
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->pers);
#line 11349 "individual-aggregator.c"
		}
#line 2319 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_data_->_pers_list);
#line 11353 "individual-aggregator.c"
	}
#line 2293 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->individual_personas);
#line 2293 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 2293 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_state_ != 0) {
#line 2293 "/run/build/folks/folks/individual-aggregator.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 2293 "/run/build/folks/folks/individual-aggregator.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 11365 "individual-aggregator.c"
		}
	}
#line 2293 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_unref (_data_->_async_result);
#line 2293 "/run/build/folks/folks/individual-aggregator.vala"
	return FALSE;
#line 11372 "individual-aggregator.c"
}


static void
folks_individual_aggregator_ensure_individual_property_writeable_data_free (gpointer _data)
{
	FolksIndividualAggregatorEnsureIndividualPropertyWriteableData* _data_;
	_data_ = _data;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->individual);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (_data_->property_name);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->result);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_slice_free (FolksIndividualAggregatorEnsureIndividualPropertyWriteableData, _data_);
#line 11391 "individual-aggregator.c"
}


static void
folks_individual_aggregator_ensure_individual_property_writeable_async_ready_wrapper (GObject *source_object,
                                                                                      GAsyncResult *res,
                                                                                      void *user_data)
{
	FolksIndividualAggregatorEnsureIndividualPropertyWriteableData* _task_data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_task_data_->_callback_ != NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 11407 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_->_task_complete_ = TRUE;
#line 11411 "individual-aggregator.c"
}


void
folks_individual_aggregator_ensure_individual_property_writeable (FolksIndividualAggregator* self,
                                                                  FolksIndividual* individual,
                                                                  const gchar* property_name,
                                                                  GAsyncReadyCallback _callback_,
                                                                  gpointer _user_data_)
{
	FolksIndividualAggregatorEnsureIndividualPropertyWriteableData* _data_;
	FolksIndividualAggregator* _tmp0_;
	FolksIndividual* _tmp1_;
	gchar* _tmp2_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_slice_new0 (FolksIndividualAggregatorEnsureIndividualPropertyWriteableData);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_callback_ = _callback_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_individual_aggregator_ensure_individual_property_writeable_async_ready_wrapper, _user_data_);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_callback_ == NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_task_complete_ = TRUE;
#line 11436 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_individual_aggregator_ensure_individual_property_writeable_data_free);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->self = _tmp0_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = _g_object_ref0 (individual);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->individual);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->individual = _tmp1_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = g_strdup (property_name);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (_data_->property_name);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->property_name = _tmp2_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_ensure_individual_property_writeable_co (_data_);
#line 11458 "individual-aggregator.c"
}


FolksPersona*
folks_individual_aggregator_ensure_individual_property_writeable_finish (FolksIndividualAggregator* self,
                                                                         GAsyncResult* _res_,
                                                                         GError** error)
{
	FolksPersona* result;
	FolksIndividualAggregatorEnsureIndividualPropertyWriteableData* _data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (NULL == _data_) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		return NULL;
#line 11475 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	result = _data_->result;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->result = NULL;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 11483 "individual-aggregator.c"
}


/**
   * Ensure that the given property is writeable for the given
   * {@link Individual}.
   *
   * This makes sure that there is at least one {@link Persona} in the
   * individual which has ``property_name`` in its
   * {@link Persona.writeable_properties}. If no such persona exists in the
   * individual, a new one will be created and linked to the individual. (Note
   * that due to the design of the aggregator, this will result in the previous
   * individual being removed and replaced by a new one with the new persona;
   * listen to the {@link Individual.removed} signal to see the replacement.)
   *
   * It may not be possible to create a new persona which has the given property
   * as writeable. In that case, a
   * {@link IndividualAggregatorError.NO_PRIMARY_STORE} or
   * {@link IndividualAggregatorError.PROPERTY_NOT_WRITEABLE} error will be
   * thrown.
   *
   * This method is safe to call multiple times concurrently, although
   * concurrent calls for the same individual may result in duplicate personas
   * being created.
   *
   * @param individual the individual for which ``property_name`` should be
   * writeable
   * @param property_name the name of the property which needs to be writeable
   * (this should be in lower case using hyphens, e.g. “web-service-addresses”)
   * @return a persona (new or existing) which has the given property as
   * writeable
   * @throws IndividualAggregatorError.NO_PRIMARY_STORE if no primary store was
   * configured for this individual aggregator
   * @throws IndividualAggregatorError.PROPERTY_NOT_WRITEABLE if the given
   * ``property_name`` referred to a non-writeable property
   * @throws IndividualAggregatorError if adding a new persona (using
   * {@link IndividualAggregator.add_persona_from_details}) failed, or if
   * linking personas (using {@link IndividualAggregator.link_personas}) failed
   *
   * @since 0.6.2
   */
static void
folks_individual_aggregator_ensure_individual_property_writeable_ready (GObject* source_object,
                                                                        GAsyncResult* _res_,
                                                                        gpointer _user_data_)
{
	FolksIndividualAggregatorEnsureIndividualPropertyWriteableData* _data_;
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = _user_data_;
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_source_object_ = source_object;
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_res_ = _res_;
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_task_complete_ = TRUE;
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_ensure_individual_property_writeable_co (_data_);
#line 11541 "individual-aggregator.c"
}


static gboolean
folks_individual_aggregator_ensure_individual_property_writeable_co (FolksIndividualAggregatorEnsureIndividualPropertyWriteableData* _data_)
{
#line 2388 "/run/build/folks/folks/individual-aggregator.vala"
	switch (_data_->_state_) {
#line 2388 "/run/build/folks/folks/individual-aggregator.vala"
		case 0:
#line 11552 "individual-aggregator.c"
		goto _state_0;
#line 2388 "/run/build/folks/folks/individual-aggregator.vala"
		case 1:
#line 11556 "individual-aggregator.c"
		goto _state_1;
		default:
#line 2388 "/run/build/folks/folks/individual-aggregator.vala"
		g_assert_not_reached ();
#line 11561 "individual-aggregator.c"
	}
	_state_0:
#line 2392 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp0_ = folks_individual_get_id (_data_->individual);
#line 2392 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp1_ = _data_->_tmp0_;
#line 2392 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:2392: ensure_individual_property_writeable:" \
" %s, %s", _data_->_tmp1_, _data_->property_name);
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp2_ = folks_individual_get_personas (_data_->individual);
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp3_ = _data_->_tmp2_;
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_state_ = 1;
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_ensure_personas_property_writeable (_data_->self, _data_->_tmp3_, _data_->property_name, folks_individual_aggregator_ensure_individual_property_writeable_ready, _data_);
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
	return FALSE;
#line 11580 "individual-aggregator.c"
	_state_1:
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp4_ = _folks_individual_aggregator_ensure_personas_property_writeable_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->p = _data_->_tmp4_;
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
		if (_data_->_inner_error_->domain == FOLKS_INDIVIDUAL_AGGREGATOR_ERROR) {
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
			g_object_unref (_data_->_async_result);
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
			return FALSE;
#line 11596 "individual-aggregator.c"
		} else {
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
			g_clear_error (&_data_->_inner_error_);
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
			g_object_unref (_data_->_async_result);
#line 2395 "/run/build/folks/folks/individual-aggregator.vala"
			return FALSE;
#line 11606 "individual-aggregator.c"
		}
	}
#line 2397 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->result = _data_->p;
#line 2397 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 2397 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_state_ != 0) {
#line 2397 "/run/build/folks/folks/individual-aggregator.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 2397 "/run/build/folks/folks/individual-aggregator.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 11619 "individual-aggregator.c"
		}
	}
#line 2397 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_unref (_data_->_async_result);
#line 2397 "/run/build/folks/folks/individual-aggregator.vala"
	return FALSE;
#line 11626 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_ensure_personas_property_writeable_data_free (gpointer _data)
{
	FolksIndividualAggregatorEnsurePersonasPropertyWriteableData* _data_;
	_data_ = _data;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->personas);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (_data_->property_name);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->result);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_slice_free (FolksIndividualAggregatorEnsurePersonasPropertyWriteableData, _data_);
#line 11645 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_ensure_personas_property_writeable_async_ready_wrapper (GObject *source_object,
                                                                                     GAsyncResult *res,
                                                                                     void *user_data)
{
	FolksIndividualAggregatorEnsurePersonasPropertyWriteableData* _task_data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_task_data_->_callback_ != NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 11661 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_->_task_complete_ = TRUE;
#line 11665 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_ensure_personas_property_writeable (FolksIndividualAggregator* self,
                                                                 GeeSet* personas,
                                                                 const gchar* property_name,
                                                                 GAsyncReadyCallback _callback_,
                                                                 gpointer _user_data_)
{
	FolksIndividualAggregatorEnsurePersonasPropertyWriteableData* _data_;
	FolksIndividualAggregator* _tmp0_;
	GeeSet* _tmp1_;
	gchar* _tmp2_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_slice_new0 (FolksIndividualAggregatorEnsurePersonasPropertyWriteableData);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_callback_ = _callback_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _folks_individual_aggregator_ensure_personas_property_writeable_async_ready_wrapper, _user_data_);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_callback_ == NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_task_complete_ = TRUE;
#line 11690 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_set_task_data (_data_->_async_result, _data_, _folks_individual_aggregator_ensure_personas_property_writeable_data_free);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->self = _tmp0_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = _g_object_ref0 (personas);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->personas);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->personas = _tmp1_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = g_strdup (property_name);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (_data_->property_name);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->property_name = _tmp2_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_ensure_personas_property_writeable_co (_data_);
#line 11712 "individual-aggregator.c"
}


static FolksPersona*
_folks_individual_aggregator_ensure_personas_property_writeable_finish (FolksIndividualAggregator* self,
                                                                        GAsyncResult* _res_,
                                                                        GError** error)
{
	FolksPersona* result;
	FolksIndividualAggregatorEnsurePersonasPropertyWriteableData* _data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (NULL == _data_) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		return NULL;
#line 11729 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	result = _data_->result;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->result = NULL;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 11737 "individual-aggregator.c"
}


static gboolean
_vala_string_array_contains (gchar* * stack,
                             int stack_length,
                             gchar* needle)
{
	int i;
#line 2410 "/run/build/folks/folks/individual-aggregator.vala"
	for (i = 0; i < stack_length; i++) {
#line 2410 "/run/build/folks/folks/individual-aggregator.vala"
		if (g_strcmp0 (stack[i], needle) == 0) {
#line 2410 "/run/build/folks/folks/individual-aggregator.vala"
			return TRUE;
#line 11753 "individual-aggregator.c"
		}
	}
#line 2410 "/run/build/folks/folks/individual-aggregator.vala"
	return FALSE;
#line 11758 "individual-aggregator.c"
}


static void
_folks_individual_aggregator_ensure_personas_property_writeable_ready (GObject* source_object,
                                                                       GAsyncResult* _res_,
                                                                       gpointer _user_data_)
{
	FolksIndividualAggregatorEnsurePersonasPropertyWriteableData* _data_;
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = _user_data_;
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_source_object_ = source_object;
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_res_ = _res_;
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_task_complete_ = TRUE;
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_ensure_personas_property_writeable_co (_data_);
#line 11778 "individual-aggregator.c"
}


static gboolean
_folks_individual_aggregator_ensure_personas_property_writeable_co (FolksIndividualAggregatorEnsurePersonasPropertyWriteableData* _data_)
{
#line 2403 "/run/build/folks/folks/individual-aggregator.vala"
	switch (_data_->_state_) {
#line 2403 "/run/build/folks/folks/individual-aggregator.vala"
		case 0:
#line 11789 "individual-aggregator.c"
		goto _state_0;
#line 2403 "/run/build/folks/folks/individual-aggregator.vala"
		case 1:
#line 11793 "individual-aggregator.c"
		goto _state_1;
#line 2403 "/run/build/folks/folks/individual-aggregator.vala"
		case 2:
#line 11797 "individual-aggregator.c"
		goto _state_2;
		default:
#line 2403 "/run/build/folks/folks/individual-aggregator.vala"
		g_assert_not_reached ();
#line 11802 "individual-aggregator.c"
	}
	_state_0:
	{
#line 2408 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp0_ = gee_iterable_iterator ((GeeIterable*) _data_->personas);
#line 2408 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_p1_it = _data_->_tmp0_;
#line 2408 "/run/build/folks/folks/individual-aggregator.vala"
		while (TRUE) {
#line 2408 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp1_ = _data_->_p1_it;
#line 2408 "/run/build/folks/folks/individual-aggregator.vala"
			if (!gee_iterator_next (_data_->_tmp1_)) {
#line 2408 "/run/build/folks/folks/individual-aggregator.vala"
				break;
#line 11818 "individual-aggregator.c"
			}
#line 2408 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp2_ = _data_->_p1_it;
#line 2408 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp3_ = gee_iterator_get (_data_->_tmp2_);
#line 2408 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->p1 = (FolksPersona*) _data_->_tmp3_;
#line 2410 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp4_ = _data_->p1;
#line 2410 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp5_ = folks_persona_get_writeable_properties (_data_->_tmp4_, &_data_->_tmp5__length1);
#line 2410 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp6_ = _data_->_tmp5_;
#line 2410 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp6__length1 = _data_->_tmp5__length1;
#line 2410 "/run/build/folks/folks/individual-aggregator.vala"
			if (_vala_string_array_contains (_data_->_tmp6_, _data_->_tmp6__length1, _data_->property_name)) {
#line 2412 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp7_ = _data_->p1;
#line 2412 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp8_ = folks_persona_get_uid (_data_->_tmp7_);
#line 2412 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp9_ = _data_->_tmp8_;
#line 2412 "/run/build/folks/folks/individual-aggregator.vala"
				g_debug ("individual-aggregator.vala:2412:     Returning existing persona: %s", _data_->_tmp9_);
#line 2413 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->result = _data_->p1;
#line 2413 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->_p1_it);
#line 2413 "/run/build/folks/folks/individual-aggregator.vala"
				g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 2413 "/run/build/folks/folks/individual-aggregator.vala"
				if (_data_->_state_ != 0) {
#line 2413 "/run/build/folks/folks/individual-aggregator.vala"
					while (_data_->_task_complete_ != TRUE) {
#line 2413 "/run/build/folks/folks/individual-aggregator.vala"
						g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 11856 "individual-aggregator.c"
					}
				}
#line 2413 "/run/build/folks/folks/individual-aggregator.vala"
				g_object_unref (_data_->_async_result);
#line 2413 "/run/build/folks/folks/individual-aggregator.vala"
				return FALSE;
#line 11863 "individual-aggregator.c"
			}
#line 2408 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->p1);
#line 11867 "individual-aggregator.c"
		}
#line 2408 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (_data_->_p1_it);
#line 11871 "individual-aggregator.c"
	}
#line 2420 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp10_ = _folks_individual_aggregator_build_linking_details (_data_->self, _data_->personas);
#line 2420 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->details = _data_->_tmp10_;
#line 2421 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->new_persona = NULL;
#line 2423 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp12_ = _data_->self->priv->_primary_store;
#line 2423 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_tmp12_ != NULL) {
#line 2424 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp13_ = _data_->self->priv->_primary_store;
#line 2424 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp14_ = folks_persona_store_get_always_writeable_properties (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp13_, FOLKS_TYPE_PERSONA_STORE, FolksPersonaStore), &_data_->_tmp14__length1);
#line 2424 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp15_ = _data_->_tmp14_;
#line 2424 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp15__length1 = _data_->_tmp14__length1;
#line 2424 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp11_ = _vala_string_array_contains (_data_->_tmp15_, _data_->_tmp15__length1, _data_->property_name);
#line 11893 "individual-aggregator.c"
	} else {
#line 2423 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp11_ = FALSE;
#line 11897 "individual-aggregator.c"
	}
#line 2423 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_tmp11_) {
#line 11901 "individual-aggregator.c"
		{
#line 2429 "/run/build/folks/folks/individual-aggregator.vala"
			g_debug ("individual-aggregator.vala:2429:     Using writeable store");
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp17_ = _data_->self->priv->_primary_store;
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp18_ = _data_->details;
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_state_ = 1;
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
			folks_individual_aggregator_add_persona_from_details (_data_->self, NULL, G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp17_, FOLKS_TYPE_PERSONA_STORE, FolksPersonaStore), _data_->_tmp18_, _folks_individual_aggregator_ensure_personas_property_writeable_ready, _data_);
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
			return FALSE;
#line 11915 "individual-aggregator.c"
			_state_1:
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp19_ = folks_individual_aggregator_add_persona_from_details_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp16_ = _data_->_tmp19_;
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
				if (_data_->_inner_error_->domain == FOLKS_INDIVIDUAL_AGGREGATOR_ERROR) {
#line 11925 "individual-aggregator.c"
					goto __catch23_folks_individual_aggregator_error;
				}
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->new_persona);
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
				_g_hash_table_unref0 (_data_->details);
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
				g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
				g_clear_error (&_data_->_inner_error_);
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
				g_object_unref (_data_->_async_result);
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
				return FALSE;
#line 11940 "individual-aggregator.c"
			}
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp20_ = _data_->_tmp16_;
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp16_ = NULL;
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->new_persona);
#line 2430 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->new_persona = _data_->_tmp20_;
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->_tmp16_);
#line 11952 "individual-aggregator.c"
		}
		goto __finally23;
		__catch23_folks_individual_aggregator_error:
		{
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->e1 = _data_->_inner_error_;
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_inner_error_ = NULL;
#line 2436 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->new_persona);
#line 2436 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->new_persona = NULL;
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
			_g_error_free0 (_data_->e1);
#line 11967 "individual-aggregator.c"
		}
		__finally23:
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
			if (_data_->_inner_error_->domain == FOLKS_INDIVIDUAL_AGGREGATOR_ERROR) {
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->new_persona);
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
				_g_hash_table_unref0 (_data_->details);
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
				g_object_unref (_data_->_async_result);
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
				return FALSE;
#line 11984 "individual-aggregator.c"
			} else {
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->new_persona);
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
				_g_hash_table_unref0 (_data_->details);
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
				g_clear_error (&_data_->_inner_error_);
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
				g_object_unref (_data_->_async_result);
#line 2427 "/run/build/folks/folks/individual-aggregator.vala"
				return FALSE;
#line 11998 "individual-aggregator.c"
			}
		}
	}
#line 2440 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp21_ = _data_->new_persona;
#line 2440 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_tmp21_ == NULL) {
#line 12006 "individual-aggregator.c"
		{
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp22_ = _data_->self->priv->_stores;
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp23_ = gee_abstract_map_get_values ((GeeAbstractMap*) _data_->_tmp22_);
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp24_ = _data_->_tmp23_;
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp25_ = _data_->_tmp24_;
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp26_ = gee_iterable_iterator ((GeeIterable*) _data_->_tmp25_);
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp27_ = _data_->_tmp26_;
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->_tmp25_);
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_s_it = _data_->_tmp27_;
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
			while (TRUE) {
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp28_ = _data_->_s_it;
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
				if (!gee_iterator_next (_data_->_tmp28_)) {
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
					break;
#line 12032 "individual-aggregator.c"
				}
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp29_ = _data_->_s_it;
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp30_ = gee_iterator_get (_data_->_tmp29_);
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->s = (FolksPersonaStore*) _data_->_tmp30_;
#line 2444 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp32_ = _data_->s;
#line 2444 "/run/build/folks/folks/individual-aggregator.vala"
				_data_->_tmp33_ = _data_->self->priv->_primary_store;
#line 2444 "/run/build/folks/folks/individual-aggregator.vala"
				if (_data_->_tmp32_ == _data_->_tmp33_) {
#line 2444 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp31_ = TRUE;
#line 12048 "individual-aggregator.c"
				} else {
#line 2445 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp34_ = _data_->s;
#line 2445 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp35_ = folks_persona_store_get_always_writeable_properties (_data_->_tmp34_, &_data_->_tmp35__length1);
#line 2445 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp36_ = _data_->_tmp35_;
#line 2445 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp36__length1 = _data_->_tmp35__length1;
#line 2445 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp31_ = !_vala_string_array_contains (_data_->_tmp36_, _data_->_tmp36__length1, _data_->property_name);
#line 12060 "individual-aggregator.c"
				}
#line 2444 "/run/build/folks/folks/individual-aggregator.vala"
				if (_data_->_tmp31_) {
#line 2448 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_data_->s);
#line 2448 "/run/build/folks/folks/individual-aggregator.vala"
					continue;
#line 12068 "individual-aggregator.c"
				}
				{
#line 2453 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp37_ = _data_->s;
#line 2453 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp38_ = folks_persona_store_get_id (_data_->_tmp37_);
#line 2453 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp39_ = _data_->_tmp38_;
#line 2453 "/run/build/folks/folks/individual-aggregator.vala"
					g_debug ("individual-aggregator.vala:2453:     Using store %s", _data_->_tmp39_);
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp41_ = _data_->s;
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp42_ = _data_->details;
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_state_ = 2;
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
					folks_individual_aggregator_add_persona_from_details (_data_->self, NULL, _data_->_tmp41_, _data_->_tmp42_, _folks_individual_aggregator_ensure_personas_property_writeable_ready, _data_);
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
					return FALSE;
#line 12089 "individual-aggregator.c"
					_state_2:
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp43_ = folks_individual_aggregator_add_persona_from_details_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp40_ = _data_->_tmp43_;
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
					if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
						if (_data_->_inner_error_->domain == FOLKS_INDIVIDUAL_AGGREGATOR_ERROR) {
#line 12099 "individual-aggregator.c"
							goto __catch24_folks_individual_aggregator_error;
						}
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->s);
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->_s_it);
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->new_persona);
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
						_g_hash_table_unref0 (_data_->details);
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
						g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
						g_clear_error (&_data_->_inner_error_);
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
						g_object_unref (_data_->_async_result);
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
						return FALSE;
#line 12118 "individual-aggregator.c"
					}
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp44_ = _data_->_tmp40_;
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_tmp40_ = NULL;
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_data_->new_persona);
#line 2454 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->new_persona = _data_->_tmp44_;
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_data_->_tmp40_);
#line 12130 "individual-aggregator.c"
				}
				goto __finally24;
				__catch24_folks_individual_aggregator_error:
				{
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->e2 = _data_->_inner_error_;
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->_inner_error_ = NULL;
#line 2460 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_data_->new_persona);
#line 2460 "/run/build/folks/folks/individual-aggregator.vala"
					_data_->new_persona = NULL;
#line 2461 "/run/build/folks/folks/individual-aggregator.vala"
					_g_error_free0 (_data_->e2);
#line 2461 "/run/build/folks/folks/individual-aggregator.vala"
					_g_object_unref0 (_data_->s);
#line 2461 "/run/build/folks/folks/individual-aggregator.vala"
					continue;
#line 12149 "individual-aggregator.c"
				}
				__finally24:
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
				if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
					if (_data_->_inner_error_->domain == FOLKS_INDIVIDUAL_AGGREGATOR_ERROR) {
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
						g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->s);
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->_s_it);
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->new_persona);
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
						_g_hash_table_unref0 (_data_->details);
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
						g_object_unref (_data_->_async_result);
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
						return FALSE;
#line 12170 "individual-aggregator.c"
					} else {
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->s);
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->_s_it);
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
						_g_object_unref0 (_data_->new_persona);
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
						_g_hash_table_unref0 (_data_->details);
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
						g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
						g_clear_error (&_data_->_inner_error_);
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
						g_object_unref (_data_->_async_result);
#line 2451 "/run/build/folks/folks/individual-aggregator.vala"
						return FALSE;
#line 12188 "individual-aggregator.c"
					}
				}
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->s);
#line 12193 "individual-aggregator.c"
			}
#line 2442 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->_s_it);
#line 12197 "individual-aggregator.c"
		}
	}
#line 2467 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp46_ = _data_->new_persona;
#line 2467 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_tmp46_ == NULL) {
#line 2467 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp47_ = _data_->self->priv->_primary_store;
#line 2467 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp45_ = _data_->_tmp47_ == NULL;
#line 12208 "individual-aggregator.c"
	} else {
#line 2467 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp45_ = FALSE;
#line 12212 "individual-aggregator.c"
	}
#line 2467 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_tmp45_) {
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp48_ = g_strconcat (_ ("Can’t add personas with no primary store."), "\n", NULL);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp49_ = _data_->_tmp48_;
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp50_ = g_strconcat (_data_->_tmp49_, _ ("Persona store ‘%s:%s’ is configured as primary, but could not be found" \
" or failed to load."), NULL);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp51_ = _data_->_tmp50_;
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp52_ = g_strconcat (_data_->_tmp51_, "\n", NULL);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp53_ = _data_->_tmp52_;
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp54_ = g_strconcat (_data_->_tmp53_, _ ("Check the relevant service is running, or change the default store in " \
"that service or using the ‘%s’ GSettings key."), NULL);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp55_ = _data_->_tmp54_;
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp56_ = _data_->self->priv->_configured_primary_store_type_id;
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp57_ = _data_->self->priv->_configured_primary_store_id;
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp58_ = g_strdup_printf ("%s %s", FOLKS_INDIVIDUAL_AGGREGATOR__FOLKS_GSETTINGS_SCHEMA, FOLKS_INDIVIDUAL_AGGREGATOR__PRIMARY_STORE_CONFIG_KEY);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp59_ = _data_->_tmp58_;
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp60_ = g_error_new (FOLKS_INDIVIDUAL_AGGREGATOR_ERROR, FOLKS_INDIVIDUAL_AGGREGATOR_ERROR_NO_PRIMARY_STORE, _data_->_tmp55_, _data_->_tmp56_, _data_->_tmp57_, _data_->_tmp59_);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp61_ = _data_->_tmp60_;
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (_data_->_tmp59_);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (_data_->_tmp55_);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (_data_->_tmp53_);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (_data_->_tmp51_);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (_data_->_tmp49_);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_inner_error_ = _data_->_tmp61_;
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
		if (_data_->_inner_error_->domain == FOLKS_INDIVIDUAL_AGGREGATOR_ERROR) {
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->new_persona);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
			_g_hash_table_unref0 (_data_->details);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
			g_object_unref (_data_->_async_result);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
			return FALSE;
#line 12268 "individual-aggregator.c"
		} else {
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
			_g_object_unref0 (_data_->new_persona);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
			_g_hash_table_unref0 (_data_->details);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
			g_clear_error (&_data_->_inner_error_);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
			g_object_unref (_data_->_async_result);
#line 2469 "/run/build/folks/folks/individual-aggregator.vala"
			return FALSE;
#line 12282 "individual-aggregator.c"
		}
	} else {
#line 2478 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_tmp62_ = _data_->new_persona;
#line 2478 "/run/build/folks/folks/individual-aggregator.vala"
		if (_data_->_tmp62_ == NULL) {
#line 2480 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_tmp63_ = g_error_new (FOLKS_INDIVIDUAL_AGGREGATOR_ERROR, FOLKS_INDIVIDUAL_AGGREGATOR_ERROR_PROPERTY_NOT_WRITEABLE, _ ("Can’t write to requested property (‘%s’) of the writeable store."), _data_->property_name);
#line 2480 "/run/build/folks/folks/individual-aggregator.vala"
			_data_->_inner_error_ = _data_->_tmp63_;
#line 2480 "/run/build/folks/folks/individual-aggregator.vala"
			if (_data_->_inner_error_->domain == FOLKS_INDIVIDUAL_AGGREGATOR_ERROR) {
#line 2480 "/run/build/folks/folks/individual-aggregator.vala"
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 2480 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->new_persona);
#line 2480 "/run/build/folks/folks/individual-aggregator.vala"
				_g_hash_table_unref0 (_data_->details);
#line 2480 "/run/build/folks/folks/individual-aggregator.vala"
				g_object_unref (_data_->_async_result);
#line 2480 "/run/build/folks/folks/individual-aggregator.vala"
				return FALSE;
#line 12305 "individual-aggregator.c"
			} else {
#line 2480 "/run/build/folks/folks/individual-aggregator.vala"
				_g_object_unref0 (_data_->new_persona);
#line 2480 "/run/build/folks/folks/individual-aggregator.vala"
				_g_hash_table_unref0 (_data_->details);
#line 2480 "/run/build/folks/folks/individual-aggregator.vala"
				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 2480 "/run/build/folks/folks/individual-aggregator.vala"
				g_clear_error (&_data_->_inner_error_);
#line 2480 "/run/build/folks/folks/individual-aggregator.vala"
				g_object_unref (_data_->_async_result);
#line 2480 "/run/build/folks/folks/individual-aggregator.vala"
				return FALSE;
#line 12319 "individual-aggregator.c"
			}
		}
	}
#line 2487 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp64_ = _data_->new_persona;
#line 2487 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp65_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp64_, FOLKS_TYPE_PERSONA, FolksPersona));
#line 2487 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->result = _data_->_tmp65_;
#line 2487 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->new_persona);
#line 2487 "/run/build/folks/folks/individual-aggregator.vala"
	_g_hash_table_unref0 (_data_->details);
#line 2487 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 2487 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_state_ != 0) {
#line 2487 "/run/build/folks/folks/individual-aggregator.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 2487 "/run/build/folks/folks/individual-aggregator.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 12341 "individual-aggregator.c"
		}
	}
#line 2487 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_unref (_data_->_async_result);
#line 2487 "/run/build/folks/folks/individual-aggregator.vala"
	return FALSE;
#line 12348 "individual-aggregator.c"
}


static void
folks_individual_aggregator_look_up_individual_data_free (gpointer _data)
{
	FolksIndividualAggregatorLookUpIndividualData* _data_;
	_data_ = _data;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (_data_->id);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->result);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (_data_->self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_slice_free (FolksIndividualAggregatorLookUpIndividualData, _data_);
#line 12365 "individual-aggregator.c"
}


static void
folks_individual_aggregator_look_up_individual_async_ready_wrapper (GObject *source_object,
                                                                    GAsyncResult *res,
                                                                    void *user_data)
{
	FolksIndividualAggregatorLookUpIndividualData* _task_data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_task_data_->_callback_ != NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 12381 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_task_data_->_task_complete_ = TRUE;
#line 12385 "individual-aggregator.c"
}


void
folks_individual_aggregator_look_up_individual (FolksIndividualAggregator* self,
                                                const gchar* id,
                                                GAsyncReadyCallback _callback_,
                                                gpointer _user_data_)
{
	FolksIndividualAggregatorLookUpIndividualData* _data_;
	FolksIndividualAggregator* _tmp0_;
	gchar* _tmp1_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_slice_new0 (FolksIndividualAggregatorLookUpIndividualData);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_callback_ = _callback_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, folks_individual_aggregator_look_up_individual_async_ready_wrapper, _user_data_);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (_callback_ == NULL) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		_data_->_task_complete_ = TRUE;
#line 12408 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_set_task_data (_data_->_async_result, _data_, folks_individual_aggregator_look_up_individual_data_free);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->self = _tmp0_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = g_strdup (id);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (_data_->id);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->id = _tmp1_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_look_up_individual_co (_data_);
#line 12424 "individual-aggregator.c"
}


FolksIndividual*
folks_individual_aggregator_look_up_individual_finish (FolksIndividualAggregator* self,
                                                       GAsyncResult* _res_,
                                                       GError** error)
{
	FolksIndividual* result;
	FolksIndividualAggregatorLookUpIndividualData* _data_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (NULL == _data_) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		return NULL;
#line 12441 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	result = _data_->result;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->result = NULL;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 12449 "individual-aggregator.c"
}


/**
   * Look up an individual in the aggregator.
   *
   * This returns the {@link Individual} with the given ``id`` if it exists in
   * the aggregator, and ``null`` otherwise.
   *
   * In future, when lazy-loading of individuals' properties is added to folks,
   * this method guarantees to load all properties of the individual, even if
   * the aggregator hasn't lazy-loaded anything else.
   *
   * This method is safe to call before {@link IndividualAggregator.prepare} has
   * been called, and will call {@link IndividualAggregator.prepare} itself in
   * that case.
   *
   * This method is safe to call multiple times concurrently.
   *
   * @param id ID of the individual to look up
   * @return individual with ``id``, or ``null`` if no such individual was found
   * @throws GLib.Error from {@link IndividualAggregator.prepare}
   *
   * @since 0.7.0
   */
static void
folks_individual_aggregator_look_up_individual_ready (GObject* source_object,
                                                      GAsyncResult* _res_,
                                                      gpointer _user_data_)
{
	FolksIndividualAggregatorLookUpIndividualData* _data_;
#line 2515 "/run/build/folks/folks/individual-aggregator.vala"
	_data_ = _user_data_;
#line 2515 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_source_object_ = source_object;
#line 2515 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_res_ = _res_;
#line 2515 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_task_complete_ = TRUE;
#line 2515 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_look_up_individual_co (_data_);
#line 12491 "individual-aggregator.c"
}


static gboolean
folks_individual_aggregator_look_up_individual_co (FolksIndividualAggregatorLookUpIndividualData* _data_)
{
#line 2512 "/run/build/folks/folks/individual-aggregator.vala"
	switch (_data_->_state_) {
#line 2512 "/run/build/folks/folks/individual-aggregator.vala"
		case 0:
#line 12502 "individual-aggregator.c"
		goto _state_0;
#line 2512 "/run/build/folks/folks/individual-aggregator.vala"
		case 1:
#line 12506 "individual-aggregator.c"
		goto _state_1;
		default:
#line 2512 "/run/build/folks/folks/individual-aggregator.vala"
		g_assert_not_reached ();
#line 12511 "individual-aggregator.c"
	}
	_state_0:
#line 2515 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_state_ = 1;
#line 2515 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_prepare (_data_->self, folks_individual_aggregator_look_up_individual_ready, _data_);
#line 2515 "/run/build/folks/folks/individual-aggregator.vala"
	return FALSE;
#line 12520 "individual-aggregator.c"
	_state_1:
#line 2515 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_prepare_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 2515 "/run/build/folks/folks/individual-aggregator.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2515 "/run/build/folks/folks/individual-aggregator.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 2515 "/run/build/folks/folks/individual-aggregator.vala"
		g_object_unref (_data_->_async_result);
#line 2515 "/run/build/folks/folks/individual-aggregator.vala"
		return FALSE;
#line 12532 "individual-aggregator.c"
	}
#line 2518 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp0_ = _data_->self->priv->_individuals;
#line 2518 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->_tmp1_ = gee_map_get (_data_->_tmp0_, _data_->id);
#line 2518 "/run/build/folks/folks/individual-aggregator.vala"
	_data_->result = (FolksIndividual*) _data_->_tmp1_;
#line 2518 "/run/build/folks/folks/individual-aggregator.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 2518 "/run/build/folks/folks/individual-aggregator.vala"
	if (_data_->_state_ != 0) {
#line 2518 "/run/build/folks/folks/individual-aggregator.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 2518 "/run/build/folks/folks/individual-aggregator.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 12548 "individual-aggregator.c"
		}
	}
#line 2518 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_unref (_data_->_async_result);
#line 2518 "/run/build/folks/folks/individual-aggregator.vala"
	return FALSE;
#line 12555 "individual-aggregator.c"
}


gboolean
folks_individual_aggregator_get_is_prepared (FolksIndividualAggregator* self)
{
	gboolean result;
	gboolean _tmp0_;
#line 186 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 186 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_is_prepared;
#line 186 "/run/build/folks/folks/individual-aggregator.vala"
	result = _tmp0_;
#line 186 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 12572 "individual-aggregator.c"
}


gboolean
folks_individual_aggregator_get_is_quiescent (FolksIndividualAggregator* self)
{
	gboolean result;
	gboolean _tmp0_;
#line 204 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 204 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_is_quiescent;
#line 204 "/run/build/folks/folks/individual-aggregator.vala"
	result = _tmp0_;
#line 204 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 12589 "individual-aggregator.c"
}


FolksPersonaStore*
folks_individual_aggregator_get_primary_store (FolksIndividualAggregator* self)
{
	FolksPersonaStore* result;
	FolksPersonaStore* _tmp0_;
#line 221 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 221 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_primary_store;
#line 221 "/run/build/folks/folks/individual-aggregator.vala"
	result = _tmp0_;
#line 221 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 12606 "individual-aggregator.c"
}


FolksBackendStore*
folks_individual_aggregator_get_backend_store (FolksIndividualAggregator* self)
{
	FolksBackendStore* result;
	FolksBackendStore* _tmp0_;
#line 231 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 231 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_backend_store;
#line 231 "/run/build/folks/folks/individual-aggregator.vala"
	result = _tmp0_;
#line 231 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 12623 "individual-aggregator.c"
}


static void
folks_individual_aggregator_set_backend_store (FolksIndividualAggregator* self,
                                               FolksBackendStore* value)
{
	FolksBackendStore* _tmp0_;
#line 232 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 232 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (value);
#line 232 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_backend_store);
#line 232 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_backend_store = _tmp0_;
#line 232 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_individual_aggregator_properties[FOLKS_INDIVIDUAL_AGGREGATOR_BACKEND_STORE_PROPERTY]);
#line 12642 "individual-aggregator.c"
}


GeeMap*
folks_individual_aggregator_get_individuals (FolksIndividualAggregator* self)
{
	GeeMap* result;
	GeeMap* _tmp0_;
#line 252 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 252 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_individuals_ro;
#line 252 "/run/build/folks/folks/individual-aggregator.vala"
	result = _tmp0_;
#line 252 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 12659 "individual-aggregator.c"
}


static void
folks_individual_aggregator_set_individuals (FolksIndividualAggregator* self,
                                             GeeMap* value)
{
	GeeMap* _tmp0_;
	GeeMap* _tmp1_;
	GeeMap* _tmp2_;
	GeeMap* _tmp3_;
#line 253 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 255 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = _g_object_ref0 (value);
#line 255 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_individuals);
#line 255 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_individuals = _tmp0_;
#line 256 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = self->priv->_individuals;
#line 256 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = gee_map_get_read_only_view (_tmp1_);
#line 256 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = _tmp2_;
#line 256 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_individuals_ro);
#line 256 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_individuals_ro = _tmp3_;
#line 253 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_notify_by_pspec ((GObject *) self, folks_individual_aggregator_properties[FOLKS_INDIVIDUAL_AGGREGATOR_INDIVIDUALS_PROPERTY]);
#line 12691 "individual-aggregator.c"
}


FolksIndividual*
folks_individual_aggregator_get_user (FolksIndividualAggregator* self)
{
	FolksIndividual* result;
	FolksIndividual* _tmp0_;
#line 269 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 269 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_user;
#line 269 "/run/build/folks/folks/individual-aggregator.vala"
	result = _tmp0_;
#line 269 "/run/build/folks/folks/individual-aggregator.vala"
	return result;
#line 12708 "individual-aggregator.c"
}


static void
folks_individual_aggregator_set_user (FolksIndividualAggregator* self,
                                      FolksIndividual* value)
{
#line 269 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (self != NULL);
#line 269 "/run/build/folks/folks/individual-aggregator.vala"
	if (folks_individual_aggregator_get_user (self) != value) {
#line 12720 "individual-aggregator.c"
		FolksIndividual* _tmp0_;
#line 269 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp0_ = _g_object_ref0 (value);
#line 269 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (self->priv->_user);
#line 269 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_user = _tmp0_;
#line 269 "/run/build/folks/folks/individual-aggregator.vala"
		g_object_notify_by_pspec ((GObject *) self, folks_individual_aggregator_properties[FOLKS_INDIVIDUAL_AGGREGATOR_USER_PROPERTY]);
#line 12730 "individual-aggregator.c"
	}
}


static void
g_cclosure_user_marshal_VOID__OBJECT_OBJECT_STRING_OBJECT_ENUM (GClosure * closure,
                                                                GValue * return_value,
                                                                guint n_param_values,
                                                                const GValue * param_values,
                                                                gpointer invocation_hint,
                                                                gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECT_OBJECT_STRING_OBJECT_ENUM) (gpointer data1, gpointer arg_1, gpointer arg_2, const char* arg_3, gpointer arg_4, gint arg_5, gpointer data2);
	register GMarshalFunc_VOID__OBJECT_OBJECT_STRING_OBJECT_ENUM callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_return_if_fail (n_param_values == 6);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		data1 = closure->data;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		data2 = param_values->data[0].v_pointer;
#line 12757 "individual-aggregator.c"
	} else {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		data1 = param_values->data[0].v_pointer;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		data2 = closure->data;
#line 12763 "individual-aggregator.c"
	}
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	callback = (GMarshalFunc_VOID__OBJECT_OBJECT_STRING_OBJECT_ENUM) (marshal_data ? marshal_data : cc->callback);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	callback (data1, g_value_get_object (param_values + 1), g_value_get_object (param_values + 2), g_value_get_string (param_values + 3), g_value_get_object (param_values + 4), g_value_get_enum (param_values + 5), data2);
#line 12769 "individual-aggregator.c"
}


static void
_g_ptr_array_unref0_ (gpointer var)
{
#line 456 "/run/build/folks/folks/individual-aggregator.vala"
	(var == NULL) ? NULL : (var = (g_ptr_array_unref (var), NULL));
#line 12778 "individual-aggregator.c"
}


static void
__folks_individual_aggregator_primary_store_setting_changed_cb_g_settings_changed (GSettings* _sender,
                                                                                   const gchar* key,
                                                                                   gpointer self)
{
#line 497 "/run/build/folks/folks/individual-aggregator.vala"
	_folks_individual_aggregator_primary_store_setting_changed_cb ((FolksIndividualAggregator*) self, _sender, key);
#line 12789 "individual-aggregator.c"
}


static gchar*
string_strip (const gchar* self)
{
	gchar* result = NULL;
	gchar* _result_ = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
#line 1304 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1305 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = g_strdup (self);
#line 1305 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_result_ = _tmp0_;
#line 1306 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp1_ = _result_;
#line 1306 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_strstrip (_tmp1_);
#line 1307 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _result_;
#line 1307 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 12814 "individual-aggregator.c"
}


static GObject *
folks_individual_aggregator_constructor (GType type,
                                         guint n_construct_properties,
                                         GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	FolksIndividualAggregator * self;
	GeeHashMap* _tmp0_;
	GeeHashMap* _tmp1_;
	GeeMap* _tmp2_;
	GeeMap* _tmp3_;
	GeeMap* _tmp4_;
	GHashFunc _tmp5_;
	GEqualFunc _tmp6_;
	GHashTable* _tmp7_;
	FolksSmallSet* _tmp8_;
	FolksDebug* _tmp9_;
	FolksDebug* _tmp10_;
	gchar* store_config_ids = NULL;
	const gchar* _tmp11_;
	gchar* _tmp12_;
	const gchar* _tmp13_;
	const gchar* _tmp21_;
	const gchar* _tmp32_;
	const gchar* _tmp33_;
	gchar* disable_linking = NULL;
	const gchar* _tmp34_;
	gchar* _tmp35_;
	const gchar* _tmp36_;
	gboolean _tmp41_ = FALSE;
	gboolean _tmp42_ = FALSE;
	const gchar* _tmp43_;
#line 451 "/run/build/folks/folks/individual-aggregator.vala"
	parent_class = G_OBJECT_CLASS (folks_individual_aggregator_parent_class);
#line 451 "/run/build/folks/folks/individual-aggregator.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 451 "/run/build/folks/folks/individual-aggregator.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, FolksIndividualAggregator);
#line 453 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, FOLKS_TYPE_PERSONA_STORE, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 453 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_stores);
#line 453 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_stores = _tmp0_;
#line 454 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp1_ = gee_hash_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, FOLKS_TYPE_INDIVIDUAL, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 454 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_individuals);
#line 454 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_individuals = (GeeMap*) _tmp1_;
#line 455 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = self->priv->_individuals;
#line 455 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp3_ = gee_map_get_read_only_view (_tmp2_);
#line 455 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp4_ = _tmp3_;
#line 455 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_individuals_ro);
#line 455 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_individuals_ro = _tmp4_;
#line 456 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp5_ = g_str_hash;
#line 456 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp6_ = g_str_equal;
#line 456 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp7_ = g_hash_table_new_full (_tmp5_, _tmp6_, _g_free0_, _g_ptr_array_unref0_);
#line 456 "/run/build/folks/folks/individual-aggregator.vala"
	_g_hash_table_unref0 (self->priv->_link_map);
#line 456 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_link_map = _tmp7_;
#line 459 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp8_ = folks_small_set_new (FOLKS_TYPE_BACKEND, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL);
#line 459 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_backends);
#line 459 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_backends = _tmp8_;
#line 460 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp9_ = folks_debug_dup ();
#line 460 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_debug);
#line 460 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_debug = _tmp9_;
#line 461 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp10_ = self->priv->_debug;
#line 461 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_connect_object (_tmp10_, "print-status", (GCallback) __folks_individual_aggregator_debug_print_status_folks_debug_print_status, self, 0);
#line 464 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp11_ = g_getenv ("FOLKS_PRIMARY_STORE");
#line 464 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp12_ = g_strdup (_tmp11_);
#line 464 "/run/build/folks/folks/individual-aggregator.vala"
	store_config_ids = _tmp12_;
#line 465 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp13_ = store_config_ids;
#line 465 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp13_ == NULL) {
#line 12915 "individual-aggregator.c"
		const gchar* _tmp14_;
		gchar* _tmp15_;
		const gchar* _tmp16_;
#line 467 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp14_ = g_getenv ("FOLKS_WRITEABLE_STORE");
#line 467 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp15_ = g_strdup (_tmp14_);
#line 467 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (store_config_ids);
#line 467 "/run/build/folks/folks/individual-aggregator.vala"
		store_config_ids = _tmp15_;
#line 468 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp16_ = store_config_ids;
#line 468 "/run/build/folks/folks/individual-aggregator.vala"
		if (_tmp16_ != NULL) {
#line 12931 "individual-aggregator.c"
			gchar* deprecated_warn = NULL;
			gchar* _tmp17_;
			const gchar* _tmp18_;
			gchar* _tmp19_;
			const gchar* _tmp20_;
#line 470 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp17_ = g_strdup ("FOLKS_WRITEABLE_STORE is deprecated, ");
#line 470 "/run/build/folks/folks/individual-aggregator.vala"
			deprecated_warn = _tmp17_;
#line 471 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp18_ = deprecated_warn;
#line 471 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp19_ = g_strconcat (_tmp18_, "use FOLKS_PRIMARY_STORE", NULL);
#line 471 "/run/build/folks/folks/individual-aggregator.vala"
			_g_free0 (deprecated_warn);
#line 471 "/run/build/folks/folks/individual-aggregator.vala"
			deprecated_warn = _tmp19_;
#line 472 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp20_ = deprecated_warn;
#line 472 "/run/build/folks/folks/individual-aggregator.vala"
			g_warning ("individual-aggregator.vala:472: %s", _tmp20_);
#line 468 "/run/build/folks/folks/individual-aggregator.vala"
			_g_free0 (deprecated_warn);
#line 12955 "individual-aggregator.c"
		}
	}
#line 476 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp21_ = store_config_ids;
#line 476 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp21_ != NULL) {
#line 12962 "individual-aggregator.c"
		const gchar* _tmp22_;
#line 478 "/run/build/folks/folks/individual-aggregator.vala"
		g_debug ("individual-aggregator.vala:478: Setting primary store IDs from environ" \
"ment variable.");
#line 479 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp22_ = store_config_ids;
#line 479 "/run/build/folks/folks/individual-aggregator.vala"
		_folks_individual_aggregator_configure_primary_store (self, (const gchar*) _tmp22_);
#line 12970 "individual-aggregator.c"
	} else {
		gboolean _tmp23_;
		GSettings* _tmp28_;
		GSettings* _tmp29_;
		gchar* _tmp30_;
		GSettings* _tmp31_;
#line 483 "/run/build/folks/folks/individual-aggregator.vala"
		g_debug ("individual-aggregator.vala:483: Setting primary store IDs to defaults.");
#line 484 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp23_ = HAVE_EDS;
#line 484 "/run/build/folks/folks/individual-aggregator.vala"
		if (_tmp23_) {
#line 12983 "individual-aggregator.c"
			gchar* _tmp24_;
			gchar* _tmp25_;
#line 486 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp24_ = g_strdup ("eds");
#line 486 "/run/build/folks/folks/individual-aggregator.vala"
			_g_free0 (self->priv->_configured_primary_store_type_id);
#line 486 "/run/build/folks/folks/individual-aggregator.vala"
			self->priv->_configured_primary_store_type_id = _tmp24_;
#line 487 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp25_ = g_strdup ("system-address-book");
#line 487 "/run/build/folks/folks/individual-aggregator.vala"
			_g_free0 (self->priv->_configured_primary_store_id);
#line 487 "/run/build/folks/folks/individual-aggregator.vala"
			self->priv->_configured_primary_store_id = _tmp25_;
#line 12998 "individual-aggregator.c"
		} else {
			gchar* _tmp26_;
			gchar* _tmp27_;
#line 491 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp26_ = g_strdup ("key-file");
#line 491 "/run/build/folks/folks/individual-aggregator.vala"
			_g_free0 (self->priv->_configured_primary_store_type_id);
#line 491 "/run/build/folks/folks/individual-aggregator.vala"
			self->priv->_configured_primary_store_type_id = _tmp26_;
#line 492 "/run/build/folks/folks/individual-aggregator.vala"
			_tmp27_ = g_strdup ("");
#line 492 "/run/build/folks/folks/individual-aggregator.vala"
			_g_free0 (self->priv->_configured_primary_store_id);
#line 492 "/run/build/folks/folks/individual-aggregator.vala"
			self->priv->_configured_primary_store_id = _tmp27_;
#line 13014 "individual-aggregator.c"
		}
#line 495 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp28_ = g_settings_new (FOLKS_INDIVIDUAL_AGGREGATOR__FOLKS_GSETTINGS_SCHEMA);
#line 495 "/run/build/folks/folks/individual-aggregator.vala"
		_g_object_unref0 (self->priv->_primary_store_setting);
#line 495 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_primary_store_setting = _tmp28_;
#line 497 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp29_ = self->priv->_primary_store_setting;
#line 497 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp30_ = g_strconcat ("changed::", FOLKS_INDIVIDUAL_AGGREGATOR__PRIMARY_STORE_CONFIG_KEY, NULL);
#line 497 "/run/build/folks/folks/individual-aggregator.vala"
		g_signal_connect_object (_tmp29_, _tmp30_, (GCallback) __folks_individual_aggregator_primary_store_setting_changed_cb_g_settings_changed, self, 0);
#line 497 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (_tmp30_);
#line 499 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp31_ = self->priv->_primary_store_setting;
#line 499 "/run/build/folks/folks/individual-aggregator.vala"
		_folks_individual_aggregator_primary_store_setting_changed_cb (self, _tmp31_, FOLKS_INDIVIDUAL_AGGREGATOR__PRIMARY_STORE_CONFIG_KEY);
#line 13034 "individual-aggregator.c"
	}
#line 503 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp32_ = self->priv->_configured_primary_store_type_id;
#line 503 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp33_ = self->priv->_configured_primary_store_id;
#line 503 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:503: Primary store IDs are '%s' and '%s'.", _tmp32_, _tmp33_);
#line 507 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp34_ = g_getenv ("FOLKS_DISABLE_LINKING");
#line 507 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp35_ = g_strdup (_tmp34_);
#line 507 "/run/build/folks/folks/individual-aggregator.vala"
	disable_linking = _tmp35_;
#line 508 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp36_ = disable_linking;
#line 508 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp36_ != NULL) {
#line 13052 "individual-aggregator.c"
		const gchar* _tmp37_;
		gchar* _tmp38_;
		gchar* _tmp39_;
		gchar* _tmp40_;
#line 509 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp37_ = disable_linking;
#line 509 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp38_ = string_strip ((const gchar*) _tmp37_);
#line 509 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp39_ = _tmp38_;
#line 509 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp40_ = g_utf8_strdown (_tmp39_, (gssize) -1);
#line 509 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (disable_linking);
#line 509 "/run/build/folks/folks/individual-aggregator.vala"
		disable_linking = _tmp40_;
#line 509 "/run/build/folks/folks/individual-aggregator.vala"
		_g_free0 (_tmp39_);
#line 13071 "individual-aggregator.c"
	}
#line 510 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp43_ = disable_linking;
#line 510 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp43_ == NULL) {
#line 510 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp42_ = TRUE;
#line 13079 "individual-aggregator.c"
	} else {
		const gchar* _tmp44_;
#line 511 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp44_ = disable_linking;
#line 511 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp42_ = g_strcmp0 (_tmp44_, "no") == 0;
#line 13086 "individual-aggregator.c"
	}
#line 510 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp42_) {
#line 510 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp41_ = TRUE;
#line 13092 "individual-aggregator.c"
	} else {
		const gchar* _tmp45_;
#line 511 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp45_ = disable_linking;
#line 511 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp41_ = g_strcmp0 (_tmp45_, "0") == 0;
#line 13099 "individual-aggregator.c"
	}
#line 510 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_linking_enabled = _tmp41_;
#line 513 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:513: Constructing IndividualAggregator %p", self);
#line 451 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (disable_linking);
#line 451 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (store_config_ids);
#line 451 "/run/build/folks/folks/individual-aggregator.vala"
	return obj;
#line 13111 "individual-aggregator.c"
}


static void
folks_individual_aggregator_class_init (FolksIndividualAggregatorClass * klass)
{
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_parent_class = g_type_class_peek_parent (klass);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_type_class_add_private (klass, sizeof (FolksIndividualAggregatorPrivate));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_folks_individual_aggregator_get_property;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_folks_individual_aggregator_set_property;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	G_OBJECT_CLASS (klass)->constructor = folks_individual_aggregator_constructor;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	G_OBJECT_CLASS (klass)->finalize = folks_individual_aggregator_finalize;
#line 13130 "individual-aggregator.c"
	/**
	   * Whether {@link IndividualAggregator.prepare} has successfully completed for
	   * this aggregator.
	   *
	   * @since 0.3.0
	   */
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_INDIVIDUAL_AGGREGATOR_IS_PREPARED_PROPERTY, folks_individual_aggregator_properties[FOLKS_INDIVIDUAL_AGGREGATOR_IS_PREPARED_PROPERTY] = g_param_spec_boolean ("is-prepared", "is-prepared", "is-prepared", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 13139 "individual-aggregator.c"
	/**
	   * Whether the aggregator has reached a quiescent state. This will happen at
	   * some point after {@link IndividualAggregator.prepare} has successfully
	   * completed for the aggregator. An aggregator is in a quiescent state when
	   * all the {@link PersonaStore}s listed by its backends have reached a
	   * quiescent state. Once it's reached a quiescent state, this property will
	   * never change again (from ``true`` to ``false``).
	   *
	   * It's guaranteed that this property's value will only ever change after
	   * {@link IndividualAggregator.is_prepared} has changed to ``true``.
	   *
	   * @since 0.6.2
	   */
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_INDIVIDUAL_AGGREGATOR_IS_QUIESCENT_PROPERTY, folks_individual_aggregator_properties[FOLKS_INDIVIDUAL_AGGREGATOR_IS_QUIESCENT_PROPERTY] = g_param_spec_boolean ("is-quiescent", "is-quiescent", "is-quiescent", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 13155 "individual-aggregator.c"
	/**
	   * Our configured primary (writeable) store.
	   *
	   * Which one to use is decided (in order or precedence)
	   * by:
	   *
	   * - the FOLKS_PRIMARY_STORE env var (mostly for debugging)
	   * - the GSettings key set in ``_PRIMARY_STORE_CONFIG_KEY`` (system set store)
	   * - going with the ``key-file`` or ``eds`` store as the fall-back option
	   *
	   * @since 0.5.0
	   */
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_INDIVIDUAL_AGGREGATOR_PRIMARY_STORE_PROPERTY, folks_individual_aggregator_properties[FOLKS_INDIVIDUAL_AGGREGATOR_PRIMARY_STORE_PROPERTY] = g_param_spec_object ("primary-store", "primary-store", "primary-store", FOLKS_TYPE_PERSONA_STORE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 13170 "individual-aggregator.c"
	/**
	   * The backend store providing the persona stores for this aggregator.
	   *
	   * @since 0.9.7
	   */
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_INDIVIDUAL_AGGREGATOR_BACKEND_STORE_PROPERTY, folks_individual_aggregator_properties[FOLKS_INDIVIDUAL_AGGREGATOR_BACKEND_STORE_PROPERTY] = g_param_spec_object ("backend-store", "backend-store", "backend-store", FOLKS_TYPE_BACKEND_STORE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 13178 "individual-aggregator.c"
	/**
	   * A map from {@link Individual.id}s to their {@link Individual}s.
	   *
	   * This is the canonical set of {@link Individual}s provided by this
	   * IndividualAggregator.
	   *
	   * {@link Individual}s may be added or removed using
	   * {@link IndividualAggregator.add_persona_from_details} and
	   * {@link IndividualAggregator.remove_individual}, respectively.
	   *
	   * @since 0.5.1
	   */
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_INDIVIDUAL_AGGREGATOR_INDIVIDUALS_PROPERTY, folks_individual_aggregator_properties[FOLKS_INDIVIDUAL_AGGREGATOR_INDIVIDUALS_PROPERTY] = g_param_spec_object ("individuals", "individuals", "individuals", GEE_TYPE_MAP, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 13193 "individual-aggregator.c"
	/**
	   * The {@link Individual} representing the user.
	   *
	   * If it exists, this holds the {@link Individual} who is the user: the
	   * {@link Individual} containing the {@link Persona}s who are the owners of
	   * the accounts for their respective backends.
	   *
	   * @since 0.3.0
	   */
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), FOLKS_INDIVIDUAL_AGGREGATOR_USER_PROPERTY, folks_individual_aggregator_properties[FOLKS_INDIVIDUAL_AGGREGATOR_USER_PROPERTY] = g_param_spec_object ("user", "user", "user", FOLKS_TYPE_INDIVIDUAL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 13205 "individual-aggregator.c"
	/**
	   * Emitted when one or more {@link Individual}s are added to or removed from
	   * the aggregator.
	   *
	   * If more information about the relationships between {@link Individual}s
	   * which have been linked and unlinked is needed, consider connecting to
	   * {@link IndividualAggregator.individuals_changed_detailed} instead, which is
	   * emitted at the same time as this signal.
	   *
	   * This will not be emitted until after {@link IndividualAggregator.prepare}
	   * has been called.
	   *
	   * @param added a list of {@link Individual}s which have been added
	   * @param removed a list of {@link Individual}s which have been removed
	   * @param message a string message from the backend, if any
	   * @param actor the {@link Persona} who made the change, if known
	   * @param reason the reason for the change
	   *
	   * @since 0.5.1
	   */
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_signals[FOLKS_INDIVIDUAL_AGGREGATOR_INDIVIDUALS_CHANGED_SIGNAL] = g_signal_new ("individuals-changed", FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, G_SIGNAL_RUN_LAST | G_SIGNAL_DEPRECATED, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECT_OBJECT_STRING_OBJECT_ENUM, G_TYPE_NONE, 5, GEE_TYPE_SET, GEE_TYPE_SET, G_TYPE_STRING, FOLKS_TYPE_PERSONA, FOLKS_GROUP_DETAILS_TYPE_CHANGE_REASON);
#line 13228 "individual-aggregator.c"
	/**
	   * Emitted when one or more {@link Individual}s are added to or removed from
	   * the aggregator.
	   *
	   * This is emitted at the same time as
	   * {@link IndividualAggregator.individuals_changed}, but includes more
	   * information about the relationships between {@link Individual}s which have
	   * been linked and unlinked.
	   *
	   * Individuals which have been linked will be listed in the multi-map as
	   * mappings from the old individuals to the single new individual which
	   * replaces them (i.e. each of the old individuals will map to the same new
	   * individual). This new individual is the one which will be specified as the
	   * ``replacement_individual`` in the {@link Individual.removed} signal for the
	   * old individuals.
	   *
	   * Individuals which have been unlinked will be listed in the multi-map as
	   * a mapping from the unlinked individual to a set of one or more individuals
	   * which replace it.
	   *
	   * Individuals which have been added will be listed in the multi-map as a
	   * mapping from ``null`` to the set of added individuals. If ``null`` doesn't
	   * map to anything, no individuals have been added to the aggregator.
	   *
	   * Individuals which have been removed will be listed in the multi-map as
	   * mappings from the removed individual to ``null``.
	   *
	   * This will not be emitted until after {@link IndividualAggregator.prepare}
	   * has been called.
	   *
	   * @param changes a mapping of old {@link Individual}s to new
	   * {@link Individual}s for the individuals which have changed in the
	   * aggregator
	   *
	   * @since 0.6.2
	   */
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator_signals[FOLKS_INDIVIDUAL_AGGREGATOR_INDIVIDUALS_CHANGED_DETAILED_SIGNAL] = g_signal_new ("individuals-changed-detailed", FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__OBJECT, G_TYPE_NONE, 1, GEE_TYPE_MULTI_MAP);
#line 13267 "individual-aggregator.c"
}


static void
folks_individual_aggregator_instance_init (FolksIndividualAggregator * self)
{
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv = FOLKS_INDIVIDUAL_AGGREGATOR_GET_PRIVATE (self);
#line 131 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_primary_store = NULL;
#line 134 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_primary_store_setting = NULL;
#line 145 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_linking_enabled = TRUE;
#line 146 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_is_prepared = FALSE;
#line 147 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_prepare_pending = FALSE;
#line 161 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_non_quiescent_persona_store_count = (guint) 0;
#line 163 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_non_quiescent_backend_count = (guint) 0;
#line 164 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_is_quiescent = FALSE;
#line 168 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_quiescent_timeout_id = (guint) 0;
#line 176 "/run/build/folks/folks/individual-aggregator.vala"
	self->priv->_user_configured_primary_store = FALSE;
#line 13296 "individual-aggregator.c"
}


static void
folks_individual_aggregator_finalize (GObject * obj)
{
	FolksIndividualAggregator * self;
	guint _tmp0_;
	FolksBackendStore* _tmp2_;
	guint _tmp3_;
	FolksDebug* _tmp4_;
	guint _tmp5_;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, FolksIndividualAggregator);
#line 518 "/run/build/folks/folks/individual-aggregator.vala"
	g_debug ("individual-aggregator.vala:518: Destroying IndividualAggregator %p", self);
#line 520 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp0_ = self->priv->_quiescent_timeout_id;
#line 520 "/run/build/folks/folks/individual-aggregator.vala"
	if (_tmp0_ != ((guint) 0)) {
#line 13317 "individual-aggregator.c"
		guint _tmp1_;
#line 522 "/run/build/folks/folks/individual-aggregator.vala"
		_tmp1_ = self->priv->_quiescent_timeout_id;
#line 522 "/run/build/folks/folks/individual-aggregator.vala"
		g_source_remove (_tmp1_);
#line 523 "/run/build/folks/folks/individual-aggregator.vala"
		self->priv->_quiescent_timeout_id = (guint) 0;
#line 13325 "individual-aggregator.c"
	}
#line 526 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp2_ = self->priv->_backend_store;
#line 526 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_parse_name ("backend-available", FOLKS_TYPE_BACKEND_STORE, &_tmp3_, NULL, FALSE);
#line 526 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_handlers_disconnect_matched (_tmp2_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp3_, 0, NULL, (GCallback) __folks_individual_aggregator_backend_available_cb_folks_backend_store_backend_available, self);
#line 529 "/run/build/folks/folks/individual-aggregator.vala"
	_tmp4_ = self->priv->_debug;
#line 529 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_parse_name ("print-status", FOLKS_TYPE_DEBUG, &_tmp5_, NULL, FALSE);
#line 529 "/run/build/folks/folks/individual-aggregator.vala"
	g_signal_handlers_disconnect_matched (_tmp4_, G_SIGNAL_MATCH_ID | G_SIGNAL_MATCH_FUNC | G_SIGNAL_MATCH_DATA, _tmp5_, 0, NULL, (GCallback) __folks_individual_aggregator_debug_print_status_folks_debug_print_status, self);
#line 532 "/run/build/folks/folks/individual-aggregator.vala"
	folks_individual_aggregator__instance = NULL;
#line 129 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_backend_store);
#line 130 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_stores);
#line 132 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_backends);
#line 134 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_primary_store_setting);
#line 143 "/run/build/folks/folks/individual-aggregator.vala"
	_g_hash_table_unref0 (self->priv->_link_map);
#line 148 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_debug);
#line 149 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (self->priv->_configured_primary_store_type_id);
#line 150 "/run/build/folks/folks/individual-aggregator.vala"
	_g_free0 (self->priv->_configured_primary_store_id);
#line 235 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_individuals);
#line 236 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_individuals_ro);
#line 269 "/run/build/folks/folks/individual-aggregator.vala"
	_g_object_unref0 (self->priv->_user);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	G_OBJECT_CLASS (folks_individual_aggregator_parent_class)->finalize (obj);
#line 13365 "individual-aggregator.c"
}


/**
 * Stores {@link Individual}s which have been created through
 * aggregation of all the {@link Persona}s provided by the various
 * {@link Backend}s.
 *
 * This is the main interface for client applications.
 *
 * Linking and unlinking of personas and individuals is performed entirely
 * through the aggregator. Personas may be linked together to form individuals;
 * for example, the personas which form ``individual1`` and ``individual2`` may
 * be linked together with ``another_persona`` to give a new {@link Individual}:
 *
 * {{{
 *   var personas = new HashSet<Persona> ();
 *   personas.add_all (individual1.personas);
 *   personas.add_all (individual2.personas);
 *   personas.add (another_persona);
 *   yield my_individual_aggregator.link_personas (personas);
 * }}}
 *
 * The individuals which contained those personas will be removed when
 * {@link IndividualAggregator.link_personas} is called. Any personas in those
 * individuals which were not included in the linking call may end up implicitly
 * linked to the new individual, or may be aggregated into other new
 * individuals.
 *
 * For example, consider the situation where ``individual1`` contains two
 * personas, ``persona1A`` and ``persona1B``; ``individual2`` contains one
 * persona, ``persona2A``; and ``another_persona`` comes from ``individual3``,
 * which also contains ``persona3A`` and ``persona3B``. Calling
 * {@link IndividualAggregator.link_personas} on ``persona1A``, ``persona1B``,
 * ``persona2A`` and ``another_persona`` will result in ``individual1`` and
 * ``individual2`` being removed. A new {@link Individual} will be created
 * containing all the personas passed to the linking function. It might also
 * contain ``persona3A`` and ``persona3B``; or they might be in one or two other
 * new individuals.
 *
 * An existing individual may be unlinked to form singleton
 * individuals for each of its personas:
 * {{{
 *   yield my_individual_aggregator.unlink_individual (my_individual);
 * }}}
 *
 * Note that to link two individuals together, their two sets of personas must
 * be linked together. There is no API to directly link the individuals
 * themselves, as conceptually folks links {@link Persona}s, not
 * {@link Individual}s.
 *
 * Folks does not support having more than one IndividualAggregator
 * instantiated at the same time. Most clients should use
 * {@link IndividualAggregator.dup} to retrieve the IndividualAggregator
 * singleton.
 *
 */
GType
folks_individual_aggregator_get_type (void)
{
	static volatile gsize folks_individual_aggregator_type_id__volatile = 0;
	if (g_once_init_enter (&folks_individual_aggregator_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (FolksIndividualAggregatorClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) folks_individual_aggregator_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (FolksIndividualAggregator), 0, (GInstanceInitFunc) folks_individual_aggregator_instance_init, NULL };
		GType folks_individual_aggregator_type_id;
		folks_individual_aggregator_type_id = g_type_register_static (G_TYPE_OBJECT, "FolksIndividualAggregator", &g_define_type_info, 0);
		g_once_init_leave (&folks_individual_aggregator_type_id__volatile, folks_individual_aggregator_type_id);
	}
	return folks_individual_aggregator_type_id__volatile;
}


static void
_vala_folks_individual_aggregator_get_property (GObject * object,
                                                guint property_id,
                                                GValue * value,
                                                GParamSpec * pspec)
{
	FolksIndividualAggregator * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, FolksIndividualAggregator);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	switch (property_id) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		case FOLKS_INDIVIDUAL_AGGREGATOR_IS_PREPARED_PROPERTY:
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		g_value_set_boolean (value, folks_individual_aggregator_get_is_prepared (self));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		break;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		case FOLKS_INDIVIDUAL_AGGREGATOR_IS_QUIESCENT_PROPERTY:
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		g_value_set_boolean (value, folks_individual_aggregator_get_is_quiescent (self));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		break;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		case FOLKS_INDIVIDUAL_AGGREGATOR_PRIMARY_STORE_PROPERTY:
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		g_value_set_object (value, folks_individual_aggregator_get_primary_store (self));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		break;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		case FOLKS_INDIVIDUAL_AGGREGATOR_BACKEND_STORE_PROPERTY:
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		g_value_set_object (value, folks_individual_aggregator_get_backend_store (self));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		break;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		case FOLKS_INDIVIDUAL_AGGREGATOR_INDIVIDUALS_PROPERTY:
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		g_value_set_object (value, folks_individual_aggregator_get_individuals (self));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		break;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		case FOLKS_INDIVIDUAL_AGGREGATOR_USER_PROPERTY:
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		g_value_set_object (value, folks_individual_aggregator_get_user (self));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		break;
#line 13483 "individual-aggregator.c"
		default:
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		break;
#line 13489 "individual-aggregator.c"
	}
}


static void
_vala_folks_individual_aggregator_set_property (GObject * object,
                                                guint property_id,
                                                const GValue * value,
                                                GParamSpec * pspec)
{
	FolksIndividualAggregator * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, FOLKS_TYPE_INDIVIDUAL_AGGREGATOR, FolksIndividualAggregator);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
	switch (property_id) {
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		case FOLKS_INDIVIDUAL_AGGREGATOR_BACKEND_STORE_PROPERTY:
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		folks_individual_aggregator_set_backend_store (self, g_value_get_object (value));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		break;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		case FOLKS_INDIVIDUAL_AGGREGATOR_INDIVIDUALS_PROPERTY:
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		folks_individual_aggregator_set_individuals (self, g_value_get_object (value));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		break;
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		case FOLKS_INDIVIDUAL_AGGREGATOR_USER_PROPERTY:
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		folks_individual_aggregator_set_user (self, g_value_get_object (value));
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		break;
#line 13522 "individual-aggregator.c"
		default:
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 125 "/run/build/folks/folks/individual-aggregator.vala"
		break;
#line 13528 "individual-aggregator.c"
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



