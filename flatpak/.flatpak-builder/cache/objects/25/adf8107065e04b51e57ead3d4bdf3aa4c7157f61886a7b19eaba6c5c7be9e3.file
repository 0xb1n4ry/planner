/* preview-renderer.c generated by valac 0.40.11, the Vala compiler
 * generated from preview-renderer.vala, do not modify */

/*
 * Copyright (C) 2012 Canonical Ltd
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authored by Pawel Stolowski <pawel.stolowski@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <unity-protocol.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#include <float.h>
#include <math.h>
#include <dee.h>
#include <gdk/gdk.h>
#include <stdio.h>


#define UNITY_TESTER_TYPE_PREVIEW_RENDERER (unity_tester_preview_renderer_get_type ())
#define UNITY_TESTER_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_PREVIEW_RENDERER, UnityTesterPreviewRenderer))
#define UNITY_TESTER_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_PREVIEW_RENDERER, UnityTesterPreviewRendererClass))
#define UNITY_TESTER_IS_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_PREVIEW_RENDERER))
#define UNITY_TESTER_IS_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_PREVIEW_RENDERER))
#define UNITY_TESTER_PREVIEW_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_PREVIEW_RENDERER, UnityTesterPreviewRendererClass))

typedef struct _UnityTesterPreviewRenderer UnityTesterPreviewRenderer;
typedef struct _UnityTesterPreviewRendererClass UnityTesterPreviewRendererClass;
typedef struct _UnityTesterPreviewRendererPrivate UnityTesterPreviewRendererPrivate;
enum  {
	UNITY_TESTER_PREVIEW_RENDERER_0_PROPERTY,
	UNITY_TESTER_PREVIEW_RENDERER_PREVIEW_PROPERTY,
	UNITY_TESTER_PREVIEW_RENDERER_SCOPE_URI_PROPERTY,
	UNITY_TESTER_PREVIEW_RENDERER_NUM_PROPERTIES
};
static GParamSpec* unity_tester_preview_renderer_properties[UNITY_TESTER_PREVIEW_RENDERER_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

#define UNITY_TESTER_TYPE_GRID_RENDERER (unity_tester_grid_renderer_get_type ())
#define UNITY_TESTER_GRID_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer))
#define UNITY_TESTER_GRID_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRendererClass))
#define UNITY_TESTER_IS_GRID_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_GRID_RENDERER))
#define UNITY_TESTER_IS_GRID_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_GRID_RENDERER))
#define UNITY_TESTER_GRID_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRendererClass))

typedef struct _UnityTesterGridRenderer UnityTesterGridRenderer;
typedef struct _UnityTesterGridRendererClass UnityTesterGridRendererClass;

#define UNITY_TESTER_TYPE_GENERIC_PREVIEW_RENDERER (unity_tester_generic_preview_renderer_get_type ())
#define UNITY_TESTER_GENERIC_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_GENERIC_PREVIEW_RENDERER, UnityTesterGenericPreviewRenderer))
#define UNITY_TESTER_GENERIC_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_GENERIC_PREVIEW_RENDERER, UnityTesterGenericPreviewRendererClass))
#define UNITY_TESTER_IS_GENERIC_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_GENERIC_PREVIEW_RENDERER))
#define UNITY_TESTER_IS_GENERIC_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_GENERIC_PREVIEW_RENDERER))
#define UNITY_TESTER_GENERIC_PREVIEW_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_GENERIC_PREVIEW_RENDERER, UnityTesterGenericPreviewRendererClass))

typedef struct _UnityTesterGenericPreviewRenderer UnityTesterGenericPreviewRenderer;
typedef struct _UnityTesterGenericPreviewRendererClass UnityTesterGenericPreviewRendererClass;

#define UNITY_TESTER_TYPE_APPLICATION_PREVIEW_RENDERER (unity_tester_application_preview_renderer_get_type ())
#define UNITY_TESTER_APPLICATION_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_APPLICATION_PREVIEW_RENDERER, UnityTesterApplicationPreviewRenderer))
#define UNITY_TESTER_APPLICATION_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_APPLICATION_PREVIEW_RENDERER, UnityTesterApplicationPreviewRendererClass))
#define UNITY_TESTER_IS_APPLICATION_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_APPLICATION_PREVIEW_RENDERER))
#define UNITY_TESTER_IS_APPLICATION_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_APPLICATION_PREVIEW_RENDERER))
#define UNITY_TESTER_APPLICATION_PREVIEW_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_APPLICATION_PREVIEW_RENDERER, UnityTesterApplicationPreviewRendererClass))

typedef struct _UnityTesterApplicationPreviewRenderer UnityTesterApplicationPreviewRenderer;
typedef struct _UnityTesterApplicationPreviewRendererClass UnityTesterApplicationPreviewRendererClass;

#define UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER (unity_tester_music_preview_renderer_get_type ())
#define UNITY_TESTER_MUSIC_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER, UnityTesterMusicPreviewRenderer))
#define UNITY_TESTER_MUSIC_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER, UnityTesterMusicPreviewRendererClass))
#define UNITY_TESTER_IS_MUSIC_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER))
#define UNITY_TESTER_IS_MUSIC_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER))
#define UNITY_TESTER_MUSIC_PREVIEW_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER, UnityTesterMusicPreviewRendererClass))

typedef struct _UnityTesterMusicPreviewRenderer UnityTesterMusicPreviewRenderer;
typedef struct _UnityTesterMusicPreviewRendererClass UnityTesterMusicPreviewRendererClass;

#define UNITY_TESTER_TYPE_MOVIE_PREVIEW_RENDERER (unity_tester_movie_preview_renderer_get_type ())
#define UNITY_TESTER_MOVIE_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_MOVIE_PREVIEW_RENDERER, UnityTesterMoviePreviewRenderer))
#define UNITY_TESTER_MOVIE_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_MOVIE_PREVIEW_RENDERER, UnityTesterMoviePreviewRendererClass))
#define UNITY_TESTER_IS_MOVIE_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_MOVIE_PREVIEW_RENDERER))
#define UNITY_TESTER_IS_MOVIE_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_MOVIE_PREVIEW_RENDERER))
#define UNITY_TESTER_MOVIE_PREVIEW_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_MOVIE_PREVIEW_RENDERER, UnityTesterMoviePreviewRendererClass))

typedef struct _UnityTesterMoviePreviewRenderer UnityTesterMoviePreviewRenderer;
typedef struct _UnityTesterMoviePreviewRendererClass UnityTesterMoviePreviewRendererClass;

#define UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER (unity_tester_series_preview_renderer_get_type ())
#define UNITY_TESTER_SERIES_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER, UnityTesterSeriesPreviewRenderer))
#define UNITY_TESTER_SERIES_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER, UnityTesterSeriesPreviewRendererClass))
#define UNITY_TESTER_IS_SERIES_PREVIEW_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER))
#define UNITY_TESTER_IS_SERIES_PREVIEW_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER))
#define UNITY_TESTER_SERIES_PREVIEW_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER, UnityTesterSeriesPreviewRendererClass))

typedef struct _UnityTesterSeriesPreviewRenderer UnityTesterSeriesPreviewRenderer;
typedef struct _UnityTesterSeriesPreviewRendererClass UnityTesterSeriesPreviewRendererClass;
enum  {
	UNITY_TESTER_PREVIEW_RENDERER_PREVIEW_ACTION_CLICKED_SIGNAL,
	UNITY_TESTER_PREVIEW_RENDERER_PREVIEW_CLOSED_CLICKED_SIGNAL,
	UNITY_TESTER_PREVIEW_RENDERER_NUM_SIGNALS
};
static guint unity_tester_preview_renderer_signals[UNITY_TESTER_PREVIEW_RENDERER_NUM_SIGNALS] = {0};
typedef struct _UnityTesterGridRendererPrivate UnityTesterGridRendererPrivate;
enum  {
	UNITY_TESTER_GRID_RENDERER_0_PROPERTY,
	UNITY_TESTER_GRID_RENDERER_GRID_PROPERTY,
	UNITY_TESTER_GRID_RENDERER_PREVIEW_ACTIONS_BOX_PROPERTY,
	UNITY_TESTER_GRID_RENDERER_PREVIEW_EXTRA_BUTTONS_BOX_PROPERTY,
	UNITY_TESTER_GRID_RENDERER_NUM_PROPERTIES
};
static GParamSpec* unity_tester_grid_renderer_properties[UNITY_TESTER_GRID_RENDERER_NUM_PROPERTIES];
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _gtk_icon_info_free0(var) ((var == NULL) ? NULL : (var = (gtk_icon_info_free (var), NULL)))
typedef struct _UnityTesterGenericPreviewRendererPrivate UnityTesterGenericPreviewRendererPrivate;
enum  {
	UNITY_TESTER_GENERIC_PREVIEW_RENDERER_0_PROPERTY,
	UNITY_TESTER_GENERIC_PREVIEW_RENDERER_NUM_PROPERTIES
};
static GParamSpec* unity_tester_generic_preview_renderer_properties[UNITY_TESTER_GENERIC_PREVIEW_RENDERER_NUM_PROPERTIES];
typedef struct _UnityTesterApplicationPreviewRendererPrivate UnityTesterApplicationPreviewRendererPrivate;
enum  {
	UNITY_TESTER_APPLICATION_PREVIEW_RENDERER_0_PROPERTY,
	UNITY_TESTER_APPLICATION_PREVIEW_RENDERER_NUM_PROPERTIES
};
static GParamSpec* unity_tester_application_preview_renderer_properties[UNITY_TESTER_APPLICATION_PREVIEW_RENDERER_NUM_PROPERTIES];
typedef struct _UnityTesterMusicPreviewRendererPrivate UnityTesterMusicPreviewRendererPrivate;

#define UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER (unity_tester_music_track_model_renderer_get_type ())
#define UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER, UnityTesterMusicTrackModelRenderer))
#define UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER, UnityTesterMusicTrackModelRendererClass))
#define UNITY_TESTER_IS_MUSIC_TRACK_MODEL_RENDERER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER))
#define UNITY_TESTER_IS_MUSIC_TRACK_MODEL_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER))
#define UNITY_TESTER_MUSIC_TRACK_MODEL_RENDERER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TESTER_TYPE_MUSIC_TRACK_MODEL_RENDERER, UnityTesterMusicTrackModelRendererClass))

typedef struct _UnityTesterMusicTrackModelRenderer UnityTesterMusicTrackModelRenderer;
typedef struct _UnityTesterMusicTrackModelRendererClass UnityTesterMusicTrackModelRendererClass;
enum  {
	UNITY_TESTER_MUSIC_PREVIEW_RENDERER_0_PROPERTY,
	UNITY_TESTER_MUSIC_PREVIEW_RENDERER_NUM_PROPERTIES
};
static GParamSpec* unity_tester_music_preview_renderer_properties[UNITY_TESTER_MUSIC_PREVIEW_RENDERER_NUM_PROPERTIES];
enum  {
	UNITY_TESTER_MUSIC_PREVIEW_RENDERER_PLAY_MUSIC_TRACK_CLICKED_SIGNAL,
	UNITY_TESTER_MUSIC_PREVIEW_RENDERER_PAUSE_MUSIC_TRACK_CLICKED_SIGNAL,
	UNITY_TESTER_MUSIC_PREVIEW_RENDERER_NUM_SIGNALS
};
static guint unity_tester_music_preview_renderer_signals[UNITY_TESTER_MUSIC_PREVIEW_RENDERER_NUM_SIGNALS] = {0};
typedef struct _UnityTesterMoviePreviewRendererPrivate UnityTesterMoviePreviewRendererPrivate;
enum  {
	UNITY_TESTER_MOVIE_PREVIEW_RENDERER_0_PROPERTY,
	UNITY_TESTER_MOVIE_PREVIEW_RENDERER_NUM_PROPERTIES
};
static GParamSpec* unity_tester_movie_preview_renderer_properties[UNITY_TESTER_MOVIE_PREVIEW_RENDERER_NUM_PROPERTIES];
typedef struct _UnityTesterSeriesPreviewRendererPrivate UnityTesterSeriesPreviewRendererPrivate;
enum  {
	UNITY_TESTER_SERIES_PREVIEW_RENDERER_0_PROPERTY,
	UNITY_TESTER_SERIES_PREVIEW_RENDERER_NUM_PROPERTIES
};
static GParamSpec* unity_tester_series_preview_renderer_properties[UNITY_TESTER_SERIES_PREVIEW_RENDERER_NUM_PROPERTIES];
enum  {
	UNITY_TESTER_SERIES_PREVIEW_RENDERER_CHANGE_SELECTED_SERIES_ITEM_CLICKED_SIGNAL,
	UNITY_TESTER_SERIES_PREVIEW_RENDERER_NUM_SIGNALS
};
static guint unity_tester_series_preview_renderer_signals[UNITY_TESTER_SERIES_PREVIEW_RENDERER_NUM_SIGNALS] = {0};
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _UnityTesterPreviewRenderer {
	GObject parent_instance;
	UnityTesterPreviewRendererPrivate * priv;
};

struct _UnityTesterPreviewRendererClass {
	GObjectClass parent_class;
	GtkWidget* (*get_widget) (UnityTesterPreviewRenderer* self);
	GtkWidget* (*get_buttons) (UnityTesterPreviewRenderer* self);
	GtkWidget* (*get_extra_buttons) (UnityTesterPreviewRenderer* self);
	void (*render_buttons) (UnityTesterPreviewRenderer* self);
	void (*render_extra_buttons) (UnityTesterPreviewRenderer* self);
	void (*render) (UnityTesterPreviewRenderer* self);
};

struct _UnityTesterPreviewRendererPrivate {
	UnityProtocolPreview* _preview;
	gchar* _scope_uri;
};

struct _UnityTesterGridRenderer {
	UnityTesterPreviewRenderer parent_instance;
	UnityTesterGridRendererPrivate * priv;
};

struct _UnityTesterGridRendererClass {
	UnityTesterPreviewRendererClass parent_class;
};

struct _UnityTesterGridRendererPrivate {
	gint row;
	GtkGrid* _grid;
	GtkBox* _preview_actions_box;
	GtkBox* _preview_extra_buttons_box;
	GHashTable* preview_actions;
};

struct _UnityTesterGenericPreviewRenderer {
	UnityTesterGridRenderer parent_instance;
	UnityTesterGenericPreviewRendererPrivate * priv;
};

struct _UnityTesterGenericPreviewRendererClass {
	UnityTesterGridRendererClass parent_class;
};

struct _UnityTesterApplicationPreviewRenderer {
	UnityTesterGridRenderer parent_instance;
	UnityTesterApplicationPreviewRendererPrivate * priv;
};

struct _UnityTesterApplicationPreviewRendererClass {
	UnityTesterGridRendererClass parent_class;
};

struct _UnityTesterMusicPreviewRenderer {
	UnityTesterGridRenderer parent_instance;
	UnityTesterMusicPreviewRendererPrivate * priv;
};

struct _UnityTesterMusicPreviewRendererClass {
	UnityTesterGridRendererClass parent_class;
};

struct _UnityTesterMusicPreviewRendererPrivate {
	UnityTesterMusicTrackModelRenderer* track_model_renderer;
	GtkTreeView* track_view;
	GtkMenu* track_view_popup_menu;
};

struct _UnityTesterMoviePreviewRenderer {
	UnityTesterGridRenderer parent_instance;
	UnityTesterMoviePreviewRendererPrivate * priv;
};

struct _UnityTesterMoviePreviewRendererClass {
	UnityTesterGridRendererClass parent_class;
};

struct _UnityTesterSeriesPreviewRenderer {
	UnityTesterGridRenderer parent_instance;
	UnityTesterSeriesPreviewRendererPrivate * priv;
};

struct _UnityTesterSeriesPreviewRendererClass {
	UnityTesterGridRendererClass parent_class;
};


static gpointer unity_tester_preview_renderer_parent_class = NULL;
static gpointer unity_tester_grid_renderer_parent_class = NULL;
static gpointer unity_tester_generic_preview_renderer_parent_class = NULL;
static gpointer unity_tester_application_preview_renderer_parent_class = NULL;
static gpointer unity_tester_music_preview_renderer_parent_class = NULL;
static gpointer unity_tester_movie_preview_renderer_parent_class = NULL;
static gpointer unity_tester_series_preview_renderer_parent_class = NULL;

GType unity_tester_preview_renderer_get_type (void) G_GNUC_CONST;
#define UNITY_TESTER_PREVIEW_RENDERER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TESTER_TYPE_PREVIEW_RENDERER, UnityTesterPreviewRendererPrivate))
GtkWidget* unity_tester_preview_renderer_get_widget (UnityTesterPreviewRenderer* self);
static GtkWidget* unity_tester_preview_renderer_real_get_widget (UnityTesterPreviewRenderer* self);
GtkWidget* unity_tester_preview_renderer_get_buttons (UnityTesterPreviewRenderer* self);
static GtkWidget* unity_tester_preview_renderer_real_get_buttons (UnityTesterPreviewRenderer* self);
GtkWidget* unity_tester_preview_renderer_get_extra_buttons (UnityTesterPreviewRenderer* self);
static GtkWidget* unity_tester_preview_renderer_real_get_extra_buttons (UnityTesterPreviewRenderer* self);
void unity_tester_preview_renderer_render_buttons (UnityTesterPreviewRenderer* self);
static void unity_tester_preview_renderer_real_render_buttons (UnityTesterPreviewRenderer* self);
void unity_tester_preview_renderer_render_extra_buttons (UnityTesterPreviewRenderer* self);
static void unity_tester_preview_renderer_real_render_extra_buttons (UnityTesterPreviewRenderer* self);
void unity_tester_preview_renderer_render (UnityTesterPreviewRenderer* self);
static void unity_tester_preview_renderer_real_render (UnityTesterPreviewRenderer* self);
UnityTesterPreviewRenderer* unity_tester_preview_renderer_create (UnityProtocolPreview* preview,
                                                                  const gchar* scope_uri);
UnityTesterGenericPreviewRenderer* unity_tester_generic_preview_renderer_new (UnityProtocolPreview* preview,
                                                                              const gchar* scope_uri);
UnityTesterGenericPreviewRenderer* unity_tester_generic_preview_renderer_construct (GType object_type,
                                                                                    UnityProtocolPreview* preview,
                                                                                    const gchar* scope_uri);
GType unity_tester_grid_renderer_get_type (void) G_GNUC_CONST;
GType unity_tester_generic_preview_renderer_get_type (void) G_GNUC_CONST;
UnityTesterApplicationPreviewRenderer* unity_tester_application_preview_renderer_new (UnityProtocolApplicationPreview* preview,
                                                                                      const gchar* scope_uri);
UnityTesterApplicationPreviewRenderer* unity_tester_application_preview_renderer_construct (GType object_type,
                                                                                            UnityProtocolApplicationPreview* preview,
                                                                                            const gchar* scope_uri);
GType unity_tester_application_preview_renderer_get_type (void) G_GNUC_CONST;
UnityTesterMusicPreviewRenderer* unity_tester_music_preview_renderer_new (UnityProtocolMusicPreview* preview,
                                                                          const gchar* scope_uri);
UnityTesterMusicPreviewRenderer* unity_tester_music_preview_renderer_construct (GType object_type,
                                                                                UnityProtocolMusicPreview* preview,
                                                                                const gchar* scope_uri);
GType unity_tester_music_preview_renderer_get_type (void) G_GNUC_CONST;
UnityTesterMoviePreviewRenderer* unity_tester_movie_preview_renderer_new (UnityProtocolMoviePreview* preview,
                                                                          const gchar* scope_uri);
UnityTesterMoviePreviewRenderer* unity_tester_movie_preview_renderer_construct (GType object_type,
                                                                                UnityProtocolMoviePreview* preview,
                                                                                const gchar* scope_uri);
GType unity_tester_movie_preview_renderer_get_type (void) G_GNUC_CONST;
UnityTesterSeriesPreviewRenderer* unity_tester_series_preview_renderer_new (UnityProtocolSeriesPreview* preview,
                                                                            const gchar* scope_uri);
UnityTesterSeriesPreviewRenderer* unity_tester_series_preview_renderer_construct (GType object_type,
                                                                                  UnityProtocolSeriesPreview* preview,
                                                                                  const gchar* scope_uri);
GType unity_tester_series_preview_renderer_get_type (void) G_GNUC_CONST;
UnityTesterPreviewRenderer* unity_tester_preview_renderer_construct (GType object_type);
UnityProtocolPreview* unity_tester_preview_renderer_get_preview (UnityTesterPreviewRenderer* self);
static void unity_tester_preview_renderer_set_preview (UnityTesterPreviewRenderer* self,
                                                UnityProtocolPreview* value);
const gchar* unity_tester_preview_renderer_get_scope_uri (UnityTesterPreviewRenderer* self);
static void unity_tester_preview_renderer_set_scope_uri (UnityTesterPreviewRenderer* self,
                                                  const gchar* value);
static void unity_tester_preview_renderer_finalize (GObject * obj);
static void _vala_unity_tester_preview_renderer_get_property (GObject * object,
                                                       guint property_id,
                                                       GValue * value,
                                                       GParamSpec * pspec);
static void _vala_unity_tester_preview_renderer_set_property (GObject * object,
                                                       guint property_id,
                                                       const GValue * value,
                                                       GParamSpec * pspec);
#define UNITY_TESTER_GRID_RENDERER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRendererPrivate))
UnityTesterGridRenderer* unity_tester_grid_renderer_construct (GType object_type);
void unity_tester_grid_renderer_add_standard_attributes (UnityTesterGridRenderer* self,
                                                         UnityProtocolPreview* preview);
void unity_tester_grid_renderer_add_text_row (UnityTesterGridRenderer* self,
                                              const gchar* name,
                                              const gchar* value);
void unity_tester_grid_renderer_add_text_icon_row (UnityTesterGridRenderer* self,
                                                   const gchar* name,
                                                   GIcon* icon,
                                                   const gchar* tooltip,
                                                   gint size);
void unity_tester_grid_renderer_add_info_hints (UnityTesterGridRenderer* self,
                                                UnityProtocolPreview* preview);
static UnityProtocolInfoHintRaw* _vala_array_dup2 (UnityProtocolInfoHintRaw* self,
                                            int length);
void unity_tester_grid_renderer_add_headline (UnityTesterGridRenderer* self,
                                              const gchar* text);
static void _vala_UnityProtocolInfoHintRaw_array_free (UnityProtocolInfoHintRaw * array,
                                                gint array_length);
GtkGrid* unity_tester_grid_renderer_get_grid (UnityTesterGridRenderer* self);
void unity_tester_grid_renderer_add_widget (UnityTesterGridRenderer* self,
                                            const gchar* name,
                                            GtkWidget* widget);
void unity_tester_grid_renderer_on_preview_action_clicked (UnityTesterGridRenderer* self,
                                                           GtkButton* button);
void unity_tester_grid_renderer_on_preview_closed_clicked (UnityTesterGridRenderer* self,
                                                           GtkButton* button);
static GtkWidget* unity_tester_grid_renderer_real_get_widget (UnityTesterPreviewRenderer* base);
static void __lambda4_ (UnityTesterGridRenderer* self,
                 GtkWidget* obj);
static void ___lambda4__gtk_callback (GtkWidget* widget,
                               gpointer self);
static GtkWidget* unity_tester_grid_renderer_real_get_buttons (UnityTesterPreviewRenderer* base);
GtkBox* unity_tester_grid_renderer_get_preview_actions_box (UnityTesterGridRenderer* self);
static GtkWidget* unity_tester_grid_renderer_real_get_extra_buttons (UnityTesterPreviewRenderer* base);
GtkBox* unity_tester_grid_renderer_get_preview_extra_buttons_box (UnityTesterGridRenderer* self);
static void unity_tester_grid_renderer_real_render_buttons (UnityTesterPreviewRenderer* base);
static void _g_object_unref0_ (gpointer var);
static void _g_free0_ (gpointer var);
static UnityProtocolPreviewActionRaw* _vala_array_dup3 (UnityProtocolPreviewActionRaw* self,
                                                 int length);
static void _unity_tester_grid_renderer_on_preview_action_clicked_gtk_button_clicked (GtkButton* _sender,
                                                                               gpointer self);
static void _vala_UnityProtocolPreviewActionRaw_array_free (UnityProtocolPreviewActionRaw * array,
                                                     gint array_length);
static void unity_tester_grid_renderer_real_render_extra_buttons (UnityTesterPreviewRenderer* base);
static void _unity_tester_grid_renderer_on_preview_closed_clicked_gtk_button_clicked (GtkButton* _sender,
                                                                               gpointer self);
static void unity_tester_grid_renderer_set_grid (UnityTesterGridRenderer* self,
                                          GtkGrid* value);
static void unity_tester_grid_renderer_set_preview_actions_box (UnityTesterGridRenderer* self,
                                                         GtkBox* value);
static void unity_tester_grid_renderer_set_preview_extra_buttons_box (UnityTesterGridRenderer* self,
                                                               GtkBox* value);
static GObject * unity_tester_grid_renderer_constructor (GType type,
                                                  guint n_construct_properties,
                                                  GObjectConstructParam * construct_properties);
static void unity_tester_grid_renderer_finalize (GObject * obj);
static void _vala_unity_tester_grid_renderer_get_property (GObject * object,
                                                    guint property_id,
                                                    GValue * value,
                                                    GParamSpec * pspec);
static void _vala_unity_tester_grid_renderer_set_property (GObject * object,
                                                    guint property_id,
                                                    const GValue * value,
                                                    GParamSpec * pspec);
static void unity_tester_generic_preview_renderer_real_render (UnityTesterPreviewRenderer* base);
static void unity_tester_application_preview_renderer_real_render (UnityTesterPreviewRenderer* base);
GType unity_tester_music_track_model_renderer_get_type (void) G_GNUC_CONST;
#define UNITY_TESTER_MUSIC_PREVIEW_RENDERER_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER, UnityTesterMusicPreviewRendererPrivate))
static void unity_tester_music_preview_renderer_real_render (UnityTesterPreviewRenderer* base);
UnityTesterMusicTrackModelRenderer* unity_tester_music_track_model_renderer_new (DeeModel* track_model);
UnityTesterMusicTrackModelRenderer* unity_tester_music_track_model_renderer_construct (GType object_type,
                                                                                       DeeModel* track_model);
GtkListStore* unity_tester_music_track_model_renderer_get_track_view_model (UnityTesterMusicTrackModelRenderer* self);
void unity_tester_music_preview_renderer_on_play_item_clicked (UnityTesterMusicPreviewRenderer* self,
                                                               GtkMenuItem* item);
static void _unity_tester_music_preview_renderer_on_play_item_clicked_gtk_menu_item_activate (GtkMenuItem* _sender,
                                                                                       gpointer self);
void unity_tester_music_preview_renderer_on_pause_item_clicked (UnityTesterMusicPreviewRenderer* self,
                                                                GtkMenuItem* item);
static void _unity_tester_music_preview_renderer_on_pause_item_clicked_gtk_menu_item_activate (GtkMenuItem* _sender,
                                                                                        gpointer self);
gboolean unity_tester_music_preview_renderer_on_track_view_right_click (UnityTesterMusicPreviewRenderer* self,
                                                                        GtkWidget* widget,
                                                                        GdkEventButton* event);
static gboolean _unity_tester_music_preview_renderer_on_track_view_right_click_gtk_widget_button_press_event (GtkWidget* _sender,
                                                                                                       GdkEventButton* event,
                                                                                                       gpointer self);
void unity_tester_music_track_model_renderer_sync (UnityTesterMusicTrackModelRenderer* self);
gchar* unity_tester_music_preview_renderer_get_selected_track_uri (UnityTesterMusicPreviewRenderer* self);
static void unity_tester_music_preview_renderer_finalize (GObject * obj);
static void unity_tester_movie_preview_renderer_real_render (UnityTesterPreviewRenderer* base);
void unity_tester_series_preview_renderer_update_child_preview (UnityTesterSeriesPreviewRenderer* self,
                                                                UnityProtocolPreview* child_preview);
static void unity_tester_series_preview_renderer_on_change_selected_item_clicked (UnityTesterSeriesPreviewRenderer* self,
                                                                           GtkComboBox* combo);
static void unity_tester_series_preview_renderer_real_render_extra_buttons (UnityTesterPreviewRenderer* base);
static void _unity_tester_series_preview_renderer_on_change_selected_item_clicked_gtk_combo_box_changed (GtkComboBox* _sender,
                                                                                                  gpointer self);
static UnityProtocolSeriesItemRaw* _vala_array_dup4 (UnityProtocolSeriesItemRaw* self,
                                              int length);
static void _vala_UnityProtocolSeriesItemRaw_array_free (UnityProtocolSeriesItemRaw * array,
                                                  gint array_length);
static void unity_tester_series_preview_renderer_real_render (UnityTesterPreviewRenderer* base);
static UnityProtocolSeriesItemRaw* _vala_array_dup5 (UnityProtocolSeriesItemRaw* self,
                                              int length);
static void g_cclosure_user_marshal_VOID__STRING_INT (GClosure * closure,
                                               GValue * return_value,
                                               guint n_param_values,
                                               const GValue * param_values,
                                               gpointer invocation_hint,
                                               gpointer marshal_data);


static GtkWidget*
unity_tester_preview_renderer_real_get_widget (UnityTesterPreviewRenderer* self)
{
	g_critical ("Type `%s' does not implement abstract method `unity_tester_preview_renderer_get_widget'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
	return NULL;
}


GtkWidget*
unity_tester_preview_renderer_get_widget (UnityTesterPreviewRenderer* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_TESTER_PREVIEW_RENDERER_GET_CLASS (self)->get_widget (self);
}


static GtkWidget*
unity_tester_preview_renderer_real_get_buttons (UnityTesterPreviewRenderer* self)
{
	g_critical ("Type `%s' does not implement abstract method `unity_tester_preview_renderer_get_buttons'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
	return NULL;
}


GtkWidget*
unity_tester_preview_renderer_get_buttons (UnityTesterPreviewRenderer* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_TESTER_PREVIEW_RENDERER_GET_CLASS (self)->get_buttons (self);
}


static GtkWidget*
unity_tester_preview_renderer_real_get_extra_buttons (UnityTesterPreviewRenderer* self)
{
	g_critical ("Type `%s' does not implement abstract method `unity_tester_preview_renderer_get_extra_buttons'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
	return NULL;
}


GtkWidget*
unity_tester_preview_renderer_get_extra_buttons (UnityTesterPreviewRenderer* self)
{
	g_return_val_if_fail (self != NULL, NULL);
	return UNITY_TESTER_PREVIEW_RENDERER_GET_CLASS (self)->get_extra_buttons (self);
}


static void
unity_tester_preview_renderer_real_render_buttons (UnityTesterPreviewRenderer* self)
{
	g_critical ("Type `%s' does not implement abstract method `unity_tester_preview_renderer_render_buttons'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
	return;
}


void
unity_tester_preview_renderer_render_buttons (UnityTesterPreviewRenderer* self)
{
	g_return_if_fail (self != NULL);
	UNITY_TESTER_PREVIEW_RENDERER_GET_CLASS (self)->render_buttons (self);
}


static void
unity_tester_preview_renderer_real_render_extra_buttons (UnityTesterPreviewRenderer* self)
{
	g_critical ("Type `%s' does not implement abstract method `unity_tester_preview_renderer_render_extra_buttons'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
	return;
}


void
unity_tester_preview_renderer_render_extra_buttons (UnityTesterPreviewRenderer* self)
{
	g_return_if_fail (self != NULL);
	UNITY_TESTER_PREVIEW_RENDERER_GET_CLASS (self)->render_extra_buttons (self);
}


static void
unity_tester_preview_renderer_real_render (UnityTesterPreviewRenderer* self)
{
	g_critical ("Type `%s' does not implement abstract method `unity_tester_preview_renderer_render'", g_type_name (G_TYPE_FROM_INSTANCE (self)));
	return;
}


void
unity_tester_preview_renderer_render (UnityTesterPreviewRenderer* self)
{
	g_return_if_fail (self != NULL);
	UNITY_TESTER_PREVIEW_RENDERER_GET_CLASS (self)->render (self);
}


UnityTesterPreviewRenderer*
unity_tester_preview_renderer_create (UnityProtocolPreview* preview,
                                      const gchar* scope_uri)
{
	UnityTesterPreviewRenderer* result = NULL;
	UnityTesterGenericPreviewRenderer* _tmp5_;
	g_return_val_if_fail (preview != NULL, NULL);
	g_return_val_if_fail (scope_uri != NULL, NULL);
	if (G_TYPE_CHECK_INSTANCE_TYPE (preview, UNITY_PROTOCOL_TYPE_GENERIC_PREVIEW)) {
		UnityTesterGenericPreviewRenderer* _tmp0_;
		_tmp0_ = unity_tester_generic_preview_renderer_new ((UnityProtocolPreview*) (G_TYPE_CHECK_INSTANCE_TYPE (preview, UNITY_PROTOCOL_TYPE_GENERIC_PREVIEW) ? ((UnityProtocolGenericPreview*) preview) : NULL), scope_uri);
		result = (UnityTesterPreviewRenderer*) _tmp0_;
		return result;
	}
	if (G_TYPE_CHECK_INSTANCE_TYPE (preview, UNITY_PROTOCOL_TYPE_APPLICATION_PREVIEW)) {
		UnityTesterApplicationPreviewRenderer* _tmp1_;
		_tmp1_ = unity_tester_application_preview_renderer_new (G_TYPE_CHECK_INSTANCE_TYPE (preview, UNITY_PROTOCOL_TYPE_APPLICATION_PREVIEW) ? ((UnityProtocolApplicationPreview*) preview) : NULL, scope_uri);
		result = (UnityTesterPreviewRenderer*) _tmp1_;
		return result;
	}
	if (G_TYPE_CHECK_INSTANCE_TYPE (preview, UNITY_PROTOCOL_TYPE_MUSIC_PREVIEW)) {
		UnityTesterMusicPreviewRenderer* _tmp2_;
		_tmp2_ = unity_tester_music_preview_renderer_new (G_TYPE_CHECK_INSTANCE_TYPE (preview, UNITY_PROTOCOL_TYPE_MUSIC_PREVIEW) ? ((UnityProtocolMusicPreview*) preview) : NULL, scope_uri);
		result = (UnityTesterPreviewRenderer*) _tmp2_;
		return result;
	}
	if (G_TYPE_CHECK_INSTANCE_TYPE (preview, UNITY_PROTOCOL_TYPE_MOVIE_PREVIEW)) {
		UnityTesterMoviePreviewRenderer* _tmp3_;
		_tmp3_ = unity_tester_movie_preview_renderer_new (G_TYPE_CHECK_INSTANCE_TYPE (preview, UNITY_PROTOCOL_TYPE_MOVIE_PREVIEW) ? ((UnityProtocolMoviePreview*) preview) : NULL, scope_uri);
		result = (UnityTesterPreviewRenderer*) _tmp3_;
		return result;
	}
	if (G_TYPE_CHECK_INSTANCE_TYPE (preview, UNITY_PROTOCOL_TYPE_SERIES_PREVIEW)) {
		UnityTesterSeriesPreviewRenderer* _tmp4_;
		_tmp4_ = unity_tester_series_preview_renderer_new (G_TYPE_CHECK_INSTANCE_TYPE (preview, UNITY_PROTOCOL_TYPE_SERIES_PREVIEW) ? ((UnityProtocolSeriesPreview*) preview) : NULL, scope_uri);
		result = (UnityTesterPreviewRenderer*) _tmp4_;
		return result;
	}
	_tmp5_ = unity_tester_generic_preview_renderer_new (preview, scope_uri);
	result = (UnityTesterPreviewRenderer*) _tmp5_;
	return result;
}


UnityTesterPreviewRenderer*
unity_tester_preview_renderer_construct (GType object_type)
{
	UnityTesterPreviewRenderer * self = NULL;
	self = (UnityTesterPreviewRenderer*) g_object_new (object_type, NULL);
	return self;
}


UnityProtocolPreview*
unity_tester_preview_renderer_get_preview (UnityTesterPreviewRenderer* self)
{
	UnityProtocolPreview* result;
	UnityProtocolPreview* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_preview;
	result = _tmp0_;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


static void
unity_tester_preview_renderer_set_preview (UnityTesterPreviewRenderer* self,
                                           UnityProtocolPreview* value)
{
	g_return_if_fail (self != NULL);
	if (unity_tester_preview_renderer_get_preview (self) != value) {
		UnityProtocolPreview* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_preview);
		self->priv->_preview = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_tester_preview_renderer_properties[UNITY_TESTER_PREVIEW_RENDERER_PREVIEW_PROPERTY]);
	}
}


const gchar*
unity_tester_preview_renderer_get_scope_uri (UnityTesterPreviewRenderer* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_scope_uri;
	result = _tmp0_;
	return result;
}


static void
unity_tester_preview_renderer_set_scope_uri (UnityTesterPreviewRenderer* self,
                                             const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_tester_preview_renderer_get_scope_uri (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_scope_uri);
		self->priv->_scope_uri = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_tester_preview_renderer_properties[UNITY_TESTER_PREVIEW_RENDERER_SCOPE_URI_PROPERTY]);
	}
}


static void
unity_tester_preview_renderer_class_init (UnityTesterPreviewRendererClass * klass)
{
	unity_tester_preview_renderer_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityTesterPreviewRendererPrivate));
	((UnityTesterPreviewRendererClass *) klass)->get_widget = (GtkWidget* (*) (UnityTesterPreviewRenderer *)) unity_tester_preview_renderer_real_get_widget;
	((UnityTesterPreviewRendererClass *) klass)->get_buttons = (GtkWidget* (*) (UnityTesterPreviewRenderer *)) unity_tester_preview_renderer_real_get_buttons;
	((UnityTesterPreviewRendererClass *) klass)->get_extra_buttons = (GtkWidget* (*) (UnityTesterPreviewRenderer *)) unity_tester_preview_renderer_real_get_extra_buttons;
	((UnityTesterPreviewRendererClass *) klass)->render_buttons = (void (*) (UnityTesterPreviewRenderer *)) unity_tester_preview_renderer_real_render_buttons;
	((UnityTesterPreviewRendererClass *) klass)->render_extra_buttons = (void (*) (UnityTesterPreviewRenderer *)) unity_tester_preview_renderer_real_render_extra_buttons;
	((UnityTesterPreviewRendererClass *) klass)->render = (void (*) (UnityTesterPreviewRenderer *)) unity_tester_preview_renderer_real_render;
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_tester_preview_renderer_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_tester_preview_renderer_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_tester_preview_renderer_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_TESTER_PREVIEW_RENDERER_PREVIEW_PROPERTY, unity_tester_preview_renderer_properties[UNITY_TESTER_PREVIEW_RENDERER_PREVIEW_PROPERTY] = g_param_spec_object ("preview", "preview", "preview", UNITY_PROTOCOL_TYPE_PREVIEW, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_TESTER_PREVIEW_RENDERER_SCOPE_URI_PROPERTY, unity_tester_preview_renderer_properties[UNITY_TESTER_PREVIEW_RENDERER_SCOPE_URI_PROPERTY] = g_param_spec_string ("scope-uri", "scope-uri", "scope-uri", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	unity_tester_preview_renderer_signals[UNITY_TESTER_PREVIEW_RENDERER_PREVIEW_ACTION_CLICKED_SIGNAL] = g_signal_new ("preview-action-clicked", UNITY_TESTER_TYPE_PREVIEW_RENDERER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__STRING, G_TYPE_NONE, 1, G_TYPE_STRING);
	unity_tester_preview_renderer_signals[UNITY_TESTER_PREVIEW_RENDERER_PREVIEW_CLOSED_CLICKED_SIGNAL] = g_signal_new ("preview-closed-clicked", UNITY_TESTER_TYPE_PREVIEW_RENDERER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
}


static void
unity_tester_preview_renderer_instance_init (UnityTesterPreviewRenderer * self)
{
	self->priv = UNITY_TESTER_PREVIEW_RENDERER_GET_PRIVATE (self);
}


static void
unity_tester_preview_renderer_finalize (GObject * obj)
{
	UnityTesterPreviewRenderer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TESTER_TYPE_PREVIEW_RENDERER, UnityTesterPreviewRenderer);
	_g_object_unref0 (self->priv->_preview);
	_g_free0 (self->priv->_scope_uri);
	G_OBJECT_CLASS (unity_tester_preview_renderer_parent_class)->finalize (obj);
}


GType
unity_tester_preview_renderer_get_type (void)
{
	static volatile gsize unity_tester_preview_renderer_type_id__volatile = 0;
	if (g_once_init_enter (&unity_tester_preview_renderer_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityTesterPreviewRendererClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_tester_preview_renderer_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityTesterPreviewRenderer), 0, (GInstanceInitFunc) unity_tester_preview_renderer_instance_init, NULL };
		GType unity_tester_preview_renderer_type_id;
		unity_tester_preview_renderer_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityTesterPreviewRenderer", &g_define_type_info, G_TYPE_FLAG_ABSTRACT);
		g_once_init_leave (&unity_tester_preview_renderer_type_id__volatile, unity_tester_preview_renderer_type_id);
	}
	return unity_tester_preview_renderer_type_id__volatile;
}


static void
_vala_unity_tester_preview_renderer_get_property (GObject * object,
                                                  guint property_id,
                                                  GValue * value,
                                                  GParamSpec * pspec)
{
	UnityTesterPreviewRenderer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TESTER_TYPE_PREVIEW_RENDERER, UnityTesterPreviewRenderer);
	switch (property_id) {
		case UNITY_TESTER_PREVIEW_RENDERER_PREVIEW_PROPERTY:
		g_value_set_object (value, unity_tester_preview_renderer_get_preview (self));
		break;
		case UNITY_TESTER_PREVIEW_RENDERER_SCOPE_URI_PROPERTY:
		g_value_set_string (value, unity_tester_preview_renderer_get_scope_uri (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_tester_preview_renderer_set_property (GObject * object,
                                                  guint property_id,
                                                  const GValue * value,
                                                  GParamSpec * pspec)
{
	UnityTesterPreviewRenderer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TESTER_TYPE_PREVIEW_RENDERER, UnityTesterPreviewRenderer);
	switch (property_id) {
		case UNITY_TESTER_PREVIEW_RENDERER_PREVIEW_PROPERTY:
		unity_tester_preview_renderer_set_preview (self, g_value_get_object (value));
		break;
		case UNITY_TESTER_PREVIEW_RENDERER_SCOPE_URI_PROPERTY:
		unity_tester_preview_renderer_set_scope_uri (self, g_value_get_string (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


UnityTesterGridRenderer*
unity_tester_grid_renderer_construct (GType object_type)
{
	UnityTesterGridRenderer * self = NULL;
	self = (UnityTesterGridRenderer*) g_object_new (object_type, NULL);
	return self;
}


void
unity_tester_grid_renderer_add_standard_attributes (UnityTesterGridRenderer* self,
                                                    UnityProtocolPreview* preview)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	const gchar* _tmp7_;
	GIcon* _tmp8_;
	GIcon* _tmp9_;
	GIcon* _tmp10_;
	GIcon* _tmp11_;
	gchar* _tmp12_;
	gchar* _tmp13_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (preview != NULL);
	_tmp0_ = unity_protocol_preview_get_title (preview);
	_tmp1_ = _tmp0_;
	unity_tester_grid_renderer_add_text_row (self, "<b>Title</b>", _tmp1_);
	_tmp2_ = unity_protocol_preview_get_subtitle (preview);
	_tmp3_ = _tmp2_;
	unity_tester_grid_renderer_add_text_row (self, "<b>Subtitle</b>", _tmp3_);
	_tmp4_ = unity_protocol_preview_get_description (preview);
	_tmp5_ = _tmp4_;
	unity_tester_grid_renderer_add_text_row (self, "<b>Description</b>", _tmp5_);
	_tmp6_ = unity_protocol_preview_get_image_source_uri (preview);
	_tmp7_ = _tmp6_;
	unity_tester_grid_renderer_add_text_row (self, "<b>Image source</b>", _tmp7_);
	_tmp8_ = unity_protocol_preview_get_image (preview);
	_tmp9_ = _tmp8_;
	_tmp10_ = unity_protocol_preview_get_image (preview);
	_tmp11_ = _tmp10_;
	_tmp12_ = g_icon_to_string (_tmp11_);
	_tmp13_ = _tmp12_;
	unity_tester_grid_renderer_add_text_icon_row (self, "<b>Image</b>", _tmp9_, _tmp13_, 512);
	_g_free0 (_tmp13_);
}


static UnityProtocolInfoHintRaw*
_vala_array_dup2 (UnityProtocolInfoHintRaw* self,
                  int length)
{
	UnityProtocolInfoHintRaw* result;
	int i;
	result = g_new0 (UnityProtocolInfoHintRaw, length);
	for (i = 0; i < length; i++) {
		UnityProtocolInfoHintRaw _tmp0_ = {0};
		unity_protocol_info_hint_raw_copy (&self[i], &_tmp0_);
		result[i] = _tmp0_;
	}
	return result;
}


static void
_vala_UnityProtocolInfoHintRaw_array_free (UnityProtocolInfoHintRaw * array,
                                           gint array_length)
{
	if (array != NULL) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			unity_protocol_info_hint_raw_destroy (&array[i]);
		}
	}
	g_free (array);
}


void
unity_tester_grid_renderer_add_info_hints (UnityTesterGridRenderer* self,
                                           UnityProtocolPreview* preview)
{
	UnityProtocolInfoHintRaw* hints = NULL;
	gint _tmp0_ = 0;
	UnityProtocolInfoHintRaw* _tmp1_;
	UnityProtocolInfoHintRaw* _tmp2_;
	gint _tmp2__length1;
	gint hints_length1;
	gint _hints_size_;
	UnityProtocolInfoHintRaw* _tmp3_;
	gint _tmp3__length1;
	g_return_if_fail (self != NULL);
	g_return_if_fail (preview != NULL);
	_tmp1_ = unity_protocol_preview_get_info_hints (preview, &_tmp0_);
	_tmp2_ = (_tmp1_ != NULL) ? _vala_array_dup2 (_tmp1_, _tmp0_) : ((gpointer) _tmp1_);
	_tmp2__length1 = _tmp0_;
	hints = _tmp2_;
	hints_length1 = _tmp2__length1;
	_hints_size_ = hints_length1;
	unity_tester_grid_renderer_add_headline (self, "<b><u>Info Hint</u></b>");
	_tmp3_ = hints;
	_tmp3__length1 = hints_length1;
	{
		UnityProtocolInfoHintRaw* hint_collection = NULL;
		gint hint_collection_length1 = 0;
		gint _hint_collection_size_ = 0;
		gint hint_it = 0;
		hint_collection = _tmp3_;
		hint_collection_length1 = _tmp3__length1;
		for (hint_it = 0; hint_it < _tmp3__length1; hint_it = hint_it + 1) {
			UnityProtocolInfoHintRaw _tmp4_ = {0};
			UnityProtocolInfoHintRaw hint = {0};
			unity_protocol_info_hint_raw_copy (&hint_collection[hint_it], &_tmp4_);
			hint = _tmp4_;
			{
				UnityProtocolInfoHintRaw _tmp5_;
				const gchar* _tmp6_;
				UnityProtocolInfoHintRaw _tmp7_;
				const gchar* _tmp8_;
				UnityProtocolInfoHintRaw _tmp9_;
				const gchar* _tmp10_;
				UnityProtocolInfoHintRaw _tmp11_;
				GVariant* _tmp12_;
				gchar* _tmp13_;
				gchar* _tmp14_;
				_tmp5_ = hint;
				_tmp6_ = _tmp5_.id;
				unity_tester_grid_renderer_add_text_row (self, "<b>Id</b>", _tmp6_);
				_tmp7_ = hint;
				_tmp8_ = _tmp7_.display_name;
				unity_tester_grid_renderer_add_text_row (self, "<b>Display Name</b>", _tmp8_);
				_tmp9_ = hint;
				_tmp10_ = _tmp9_.icon_hint;
				unity_tester_grid_renderer_add_text_row (self, "<b>Icon hint</b>", _tmp10_);
				_tmp11_ = hint;
				_tmp12_ = _tmp11_.value;
				_tmp13_ = g_variant_print (_tmp12_, TRUE);
				_tmp14_ = _tmp13_;
				unity_tester_grid_renderer_add_text_row (self, "<b>Value</b>", _tmp14_);
				_g_free0 (_tmp14_);
				unity_protocol_info_hint_raw_destroy (&hint);
			}
		}
	}
	hints = (_vala_UnityProtocolInfoHintRaw_array_free (hints, hints_length1), NULL);
}


/**
         * Renders name and value in two adjacent cells of grid row
         */
void
unity_tester_grid_renderer_add_text_row (UnityTesterGridRenderer* self,
                                         const gchar* name,
                                         const gchar* value)
{
	GtkLabel* name_label = NULL;
	GtkLabel* _tmp0_;
	GtkGrid* _tmp1_;
	gint _tmp2_;
	GtkLabel* value_label = NULL;
	GtkLabel* _tmp3_;
	GtkGrid* _tmp4_;
	gint _tmp5_;
	gint _tmp6_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (name != NULL);
	_tmp0_ = (GtkLabel*) gtk_label_new (NULL);
	g_object_ref_sink (_tmp0_);
	name_label = _tmp0_;
	gtk_label_set_markup (name_label, name);
	_tmp1_ = self->priv->_grid;
	_tmp2_ = self->priv->row;
	gtk_grid_attach (_tmp1_, (GtkWidget*) name_label, 0, _tmp2_, 1, 1);
	_tmp3_ = (GtkLabel*) gtk_label_new (value);
	g_object_ref_sink (_tmp3_);
	value_label = _tmp3_;
	gtk_label_set_selectable (value_label, TRUE);
	_tmp4_ = self->priv->_grid;
	_tmp5_ = self->priv->row;
	gtk_grid_attach (_tmp4_, (GtkWidget*) value_label, 1, _tmp5_, 1, 1);
	_tmp6_ = self->priv->row;
	self->priv->row = _tmp6_ + 1;
	_g_object_unref0 (value_label);
	_g_object_unref0 (name_label);
}


/**
         * Renders text in two joined cells of grid row
         */
void
unity_tester_grid_renderer_add_headline (UnityTesterGridRenderer* self,
                                         const gchar* text)
{
	GtkLabel* label = NULL;
	GtkLabel* _tmp0_;
	GtkGrid* _tmp1_;
	gint _tmp2_;
	gint _tmp3_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (text != NULL);
	_tmp0_ = (GtkLabel*) gtk_label_new (NULL);
	g_object_ref_sink (_tmp0_);
	label = _tmp0_;
	gtk_label_set_markup (label, text);
	_tmp1_ = self->priv->_grid;
	_tmp2_ = self->priv->row;
	gtk_grid_attach (_tmp1_, (GtkWidget*) label, 0, _tmp2_, 2, 1);
	_tmp3_ = self->priv->row;
	self->priv->row = _tmp3_ + 1;
	_g_object_unref0 (label);
}


/**
         * Renders name and arbitrary widget in two adjacent cells of grid row
         */
void
unity_tester_grid_renderer_add_widget (UnityTesterGridRenderer* self,
                                       const gchar* name,
                                       GtkWidget* widget)
{
	GtkLabel* name_label = NULL;
	GtkLabel* _tmp0_;
	GtkGrid* _tmp1_;
	gint _tmp2_;
	GtkGrid* _tmp3_;
	gint _tmp4_;
	gint _tmp5_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (name != NULL);
	g_return_if_fail (widget != NULL);
	_tmp0_ = (GtkLabel*) gtk_label_new (NULL);
	g_object_ref_sink (_tmp0_);
	name_label = _tmp0_;
	gtk_label_set_markup (name_label, name);
	_tmp1_ = self->priv->_grid;
	_tmp2_ = self->priv->row;
	gtk_grid_attach (_tmp1_, (GtkWidget*) name_label, 0, _tmp2_, 1, 1);
	_tmp3_ = self->priv->_grid;
	_tmp4_ = self->priv->row;
	gtk_grid_attach (_tmp3_, widget, 1, _tmp4_, 1, 1);
	_tmp5_ = self->priv->row;
	self->priv->row = _tmp5_ + 1;
	_g_object_unref0 (name_label);
}


void
unity_tester_grid_renderer_on_preview_action_clicked (UnityTesterGridRenderer* self,
                                                      GtkButton* button)
{
	gchar* id = NULL;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_;
	gchar* _tmp2_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (button != NULL);
	_tmp0_ = self->priv->preview_actions;
	_tmp1_ = g_hash_table_lookup (_tmp0_, button);
	_tmp2_ = g_strdup ((const gchar*) _tmp1_);
	id = _tmp2_;
	g_signal_emit ((UnityTesterPreviewRenderer*) self, unity_tester_preview_renderer_signals[UNITY_TESTER_PREVIEW_RENDERER_PREVIEW_ACTION_CLICKED_SIGNAL], 0, id);
	_g_free0 (id);
}


void
unity_tester_grid_renderer_on_preview_closed_clicked (UnityTesterGridRenderer* self,
                                                      GtkButton* button)
{
	g_return_if_fail (self != NULL);
	g_return_if_fail (button != NULL);
	g_signal_emit ((UnityTesterPreviewRenderer*) self, unity_tester_preview_renderer_signals[UNITY_TESTER_PREVIEW_RENDERER_PREVIEW_CLOSED_CLICKED_SIGNAL], 0);
}


/**
         * Renders name and icon in two adjacent cells of grid row
         */
static const gchar*
string_to_string (const gchar* self)
{
	const gchar* result = NULL;
	g_return_val_if_fail (self != NULL, NULL);
	result = self;
	return result;
}


void
unity_tester_grid_renderer_add_text_icon_row (UnityTesterGridRenderer* self,
                                              const gchar* name,
                                              GIcon* icon,
                                              const gchar* tooltip,
                                              gint size)
{
	GtkLabel* icon_label = NULL;
	GtkLabel* _tmp0_;
	GtkGrid* _tmp1_;
	gint _tmp2_;
	GtkIconInfo* themed_icon = NULL;
	GtkIconTheme* _tmp3_;
	GtkIconInfo* _tmp4_;
	gint _tmp16_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	g_return_if_fail (name != NULL);
	_tmp0_ = (GtkLabel*) gtk_label_new (NULL);
	g_object_ref_sink (_tmp0_);
	icon_label = _tmp0_;
	gtk_label_set_markup (icon_label, name);
	_tmp1_ = self->priv->_grid;
	_tmp2_ = self->priv->row;
	gtk_grid_attach (_tmp1_, (GtkWidget*) icon_label, 0, _tmp2_, 1, 1);
	_tmp3_ = gtk_icon_theme_get_default ();
	_tmp4_ = gtk_icon_theme_lookup_by_gicon (_tmp3_, icon, size, 0);
	themed_icon = _tmp4_;
	{
		GdkPixbuf* pixbuf = NULL;
		GdkPixbuf* _tmp5_;
		GtkImage* image = NULL;
		GtkImage* _tmp6_;
		GtkGrid* _tmp8_;
		GtkImage* _tmp9_;
		gint _tmp10_;
		_tmp5_ = gtk_icon_info_load_icon (themed_icon, &_inner_error_);
		pixbuf = _tmp5_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			goto __catch22_g_error;
		}
		_tmp6_ = (GtkImage*) gtk_image_new_from_pixbuf (pixbuf);
		g_object_ref_sink (_tmp6_);
		image = _tmp6_;
		if (tooltip != NULL) {
			GtkImage* _tmp7_;
			_tmp7_ = image;
			gtk_widget_set_tooltip_text ((GtkWidget*) _tmp7_, tooltip);
		}
		_tmp8_ = self->priv->_grid;
		_tmp9_ = image;
		_tmp10_ = self->priv->row;
		gtk_grid_attach (_tmp8_, (GtkWidget*) _tmp9_, 1, _tmp10_, 1, 1);
		_g_object_unref0 (image);
		_g_object_unref0 (pixbuf);
	}
	goto __finally22;
	__catch22_g_error:
	{
		GError* e = NULL;
		GError* _tmp11_;
		const gchar* _tmp12_;
		const gchar* _tmp13_;
		gchar* _tmp14_;
		gchar* _tmp15_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp11_ = e;
		_tmp12_ = _tmp11_->message;
		_tmp13_ = string_to_string (_tmp12_);
		_tmp14_ = g_strconcat ("Got error while loading pixmap: ", _tmp13_, NULL);
		_tmp15_ = _tmp14_;
		g_warning ("preview-renderer.vala:160: %s", _tmp15_);
		_g_free0 (_tmp15_);
		_g_error_free0 (e);
	}
	__finally22:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		_gtk_icon_info_free0 (themed_icon);
		_g_object_unref0 (icon_label);
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return;
	}
	_tmp16_ = self->priv->row;
	self->priv->row = _tmp16_ + 1;
	_gtk_icon_info_free0 (themed_icon);
	_g_object_unref0 (icon_label);
}


static void
__lambda4_ (UnityTesterGridRenderer* self,
            GtkWidget* obj)
{
	g_return_if_fail (obj != NULL);
	gtk_widget_set_halign (obj, GTK_ALIGN_START);
}


static void
___lambda4__gtk_callback (GtkWidget* widget,
                          gpointer self)
{
	__lambda4_ ((UnityTesterGridRenderer*) self, widget);
}


static GtkWidget*
unity_tester_grid_renderer_real_get_widget (UnityTesterPreviewRenderer* base)
{
	UnityTesterGridRenderer * self;
	GtkWidget* result = NULL;
	GtkGrid* _tmp0_;
	GtkGrid* _tmp1_;
	GtkWidget* _tmp2_;
	self = (UnityTesterGridRenderer*) base;
	unity_tester_preview_renderer_render ((UnityTesterPreviewRenderer*) self);
	_tmp0_ = self->priv->_grid;
	gtk_container_foreach ((GtkContainer*) _tmp0_, ___lambda4__gtk_callback, self);
	_tmp1_ = self->priv->_grid;
	_tmp2_ = _g_object_ref0 ((GtkWidget*) _tmp1_);
	result = _tmp2_;
	return result;
}


static GtkWidget*
unity_tester_grid_renderer_real_get_buttons (UnityTesterPreviewRenderer* base)
{
	UnityTesterGridRenderer * self;
	GtkWidget* result = NULL;
	GtkBox* _tmp0_;
	GtkWidget* _tmp1_;
	self = (UnityTesterGridRenderer*) base;
	unity_tester_preview_renderer_render_buttons ((UnityTesterPreviewRenderer*) self);
	_tmp0_ = self->priv->_preview_actions_box;
	_tmp1_ = _g_object_ref0 ((GtkWidget*) _tmp0_);
	result = _tmp1_;
	return result;
}


static GtkWidget*
unity_tester_grid_renderer_real_get_extra_buttons (UnityTesterPreviewRenderer* base)
{
	UnityTesterGridRenderer * self;
	GtkWidget* result = NULL;
	GtkBox* _tmp0_;
	GtkWidget* _tmp1_;
	self = (UnityTesterGridRenderer*) base;
	unity_tester_preview_renderer_render_extra_buttons ((UnityTesterPreviewRenderer*) self);
	_tmp0_ = self->priv->_preview_extra_buttons_box;
	_tmp1_ = _g_object_ref0 ((GtkWidget*) _tmp0_);
	result = _tmp1_;
	return result;
}


static void
_g_object_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_object_unref (var), NULL));
}


static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static UnityProtocolPreviewActionRaw*
_vala_array_dup3 (UnityProtocolPreviewActionRaw* self,
                  int length)
{
	UnityProtocolPreviewActionRaw* result;
	int i;
	result = g_new0 (UnityProtocolPreviewActionRaw, length);
	for (i = 0; i < length; i++) {
		UnityProtocolPreviewActionRaw _tmp0_ = {0};
		unity_protocol_preview_action_raw_copy (&self[i], &_tmp0_);
		result[i] = _tmp0_;
	}
	return result;
}


static void
_unity_tester_grid_renderer_on_preview_action_clicked_gtk_button_clicked (GtkButton* _sender,
                                                                          gpointer self)
{
	unity_tester_grid_renderer_on_preview_action_clicked ((UnityTesterGridRenderer*) self, _sender);
}


static void
_vala_UnityProtocolPreviewActionRaw_array_free (UnityProtocolPreviewActionRaw * array,
                                                gint array_length)
{
	if (array != NULL) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			unity_protocol_preview_action_raw_destroy (&array[i]);
		}
	}
	g_free (array);
}


static void
unity_tester_grid_renderer_real_render_buttons (UnityTesterPreviewRenderer* base)
{
	UnityTesterGridRenderer * self;
	GHashTable* _tmp0_;
	UnityProtocolPreviewActionRaw* actions = NULL;
	UnityProtocolPreview* _tmp1_;
	UnityProtocolPreview* _tmp2_;
	gint _tmp3_ = 0;
	UnityProtocolPreviewActionRaw* _tmp4_;
	UnityProtocolPreviewActionRaw* _tmp5_;
	gint _tmp5__length1;
	gint actions_length1;
	gint _actions_size_;
	self = (UnityTesterGridRenderer*) base;
	_tmp0_ = g_hash_table_new_full (NULL, NULL, _g_object_unref0_, _g_free0_);
	_g_hash_table_unref0 (self->priv->preview_actions);
	self->priv->preview_actions = _tmp0_;
	_tmp1_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp2_ = _tmp1_;
	_tmp4_ = unity_protocol_preview_get_actions (_tmp2_, &_tmp3_);
	_tmp5_ = (_tmp4_ != NULL) ? _vala_array_dup3 (_tmp4_, _tmp3_) : ((gpointer) _tmp4_);
	_tmp5__length1 = _tmp3_;
	actions = _tmp5_;
	actions_length1 = _tmp5__length1;
	_actions_size_ = actions_length1;
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp6_ = FALSE;
			_tmp6_ = TRUE;
			while (TRUE) {
				gint _tmp8_;
				UnityProtocolPreviewActionRaw* _tmp9_;
				gint _tmp9__length1;
				UnityProtocolPreviewActionRaw action = {0};
				UnityProtocolPreviewActionRaw* _tmp10_;
				gint _tmp10__length1;
				gint _tmp11_;
				UnityProtocolPreviewActionRaw _tmp12_;
				GtkButton* btn = NULL;
				UnityProtocolPreviewActionRaw _tmp13_;
				const gchar* _tmp14_;
				GtkButton* _tmp15_;
				GtkButton* _tmp16_;
				GtkBox* _tmp17_;
				GtkButton* _tmp18_;
				GtkButton* _tmp19_;
				UnityProtocolPreviewActionRaw _tmp20_;
				const gchar* _tmp21_;
				GHashTable* _tmp22_;
				GtkButton* _tmp23_;
				GtkButton* _tmp24_;
				UnityProtocolPreviewActionRaw _tmp25_;
				const gchar* _tmp26_;
				gchar* _tmp27_;
				GtkButton* _tmp28_;
				if (!_tmp6_) {
					gint _tmp7_;
					_tmp7_ = i;
					i = _tmp7_ + 1;
				}
				_tmp6_ = FALSE;
				_tmp8_ = i;
				_tmp9_ = actions;
				_tmp9__length1 = actions_length1;
				if (!(_tmp8_ < _tmp9__length1)) {
					break;
				}
				_tmp10_ = actions;
				_tmp10__length1 = actions_length1;
				_tmp11_ = i;
				_tmp12_ = _tmp10_[_tmp11_];
				action = _tmp12_;
				_tmp13_ = action;
				_tmp14_ = _tmp13_.display_name;
				_tmp15_ = (GtkButton*) gtk_button_new_with_label (_tmp14_);
				g_object_ref_sink (_tmp15_);
				btn = _tmp15_;
				_tmp16_ = btn;
				g_signal_connect_object (_tmp16_, "clicked", (GCallback) _unity_tester_grid_renderer_on_preview_action_clicked_gtk_button_clicked, self, 0);
				_tmp17_ = self->priv->_preview_actions_box;
				_tmp18_ = btn;
				gtk_box_pack_start (_tmp17_, (GtkWidget*) _tmp18_, FALSE, FALSE, (guint) 0);
				_tmp19_ = btn;
				_tmp20_ = action;
				_tmp21_ = _tmp20_.id;
				gtk_widget_set_tooltip_text ((GtkWidget*) _tmp19_, _tmp21_);
				_tmp22_ = self->priv->preview_actions;
				_tmp23_ = btn;
				_tmp24_ = _g_object_ref0 (_tmp23_);
				_tmp25_ = action;
				_tmp26_ = _tmp25_.id;
				_tmp27_ = g_strdup (_tmp26_);
				g_hash_table_insert (_tmp22_, _tmp24_, _tmp27_);
				_tmp28_ = btn;
				gtk_widget_show_all ((GtkWidget*) _tmp28_);
				_g_object_unref0 (btn);
			}
		}
	}
	actions = (_vala_UnityProtocolPreviewActionRaw_array_free (actions, actions_length1), NULL);
}


static void
_unity_tester_grid_renderer_on_preview_closed_clicked_gtk_button_clicked (GtkButton* _sender,
                                                                          gpointer self)
{
	unity_tester_grid_renderer_on_preview_closed_clicked ((UnityTesterGridRenderer*) self, _sender);
}


static void
unity_tester_grid_renderer_real_render_extra_buttons (UnityTesterPreviewRenderer* base)
{
	UnityTesterGridRenderer * self;
	GtkButton* btn = NULL;
	GtkButton* _tmp0_;
	GtkBox* _tmp1_;
	self = (UnityTesterGridRenderer*) base;
	_tmp0_ = (GtkButton*) gtk_button_new_with_label ("Close");
	g_object_ref_sink (_tmp0_);
	btn = _tmp0_;
	g_signal_connect_object (btn, "clicked", (GCallback) _unity_tester_grid_renderer_on_preview_closed_clicked_gtk_button_clicked, self, 0);
	_tmp1_ = self->priv->_preview_extra_buttons_box;
	gtk_box_pack_start (_tmp1_, (GtkWidget*) btn, FALSE, FALSE, (guint) 0);
	gtk_widget_show_all ((GtkWidget*) btn);
	_g_object_unref0 (btn);
}


GtkGrid*
unity_tester_grid_renderer_get_grid (UnityTesterGridRenderer* self)
{
	GtkGrid* result;
	GtkGrid* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_grid;
	result = _tmp0_;
	return result;
}


static void
unity_tester_grid_renderer_set_grid (UnityTesterGridRenderer* self,
                                     GtkGrid* value)
{
	g_return_if_fail (self != NULL);
	if (unity_tester_grid_renderer_get_grid (self) != value) {
		GtkGrid* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_grid);
		self->priv->_grid = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_tester_grid_renderer_properties[UNITY_TESTER_GRID_RENDERER_GRID_PROPERTY]);
	}
}


GtkBox*
unity_tester_grid_renderer_get_preview_actions_box (UnityTesterGridRenderer* self)
{
	GtkBox* result;
	GtkBox* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_preview_actions_box;
	result = _tmp0_;
	return result;
}


static void
unity_tester_grid_renderer_set_preview_actions_box (UnityTesterGridRenderer* self,
                                                    GtkBox* value)
{
	g_return_if_fail (self != NULL);
	if (unity_tester_grid_renderer_get_preview_actions_box (self) != value) {
		GtkBox* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_preview_actions_box);
		self->priv->_preview_actions_box = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_tester_grid_renderer_properties[UNITY_TESTER_GRID_RENDERER_PREVIEW_ACTIONS_BOX_PROPERTY]);
	}
}


GtkBox*
unity_tester_grid_renderer_get_preview_extra_buttons_box (UnityTesterGridRenderer* self)
{
	GtkBox* result;
	GtkBox* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_preview_extra_buttons_box;
	result = _tmp0_;
	return result;
}


static void
unity_tester_grid_renderer_set_preview_extra_buttons_box (UnityTesterGridRenderer* self,
                                                          GtkBox* value)
{
	g_return_if_fail (self != NULL);
	if (unity_tester_grid_renderer_get_preview_extra_buttons_box (self) != value) {
		GtkBox* _tmp0_;
		_tmp0_ = _g_object_ref0 (value);
		_g_object_unref0 (self->priv->_preview_extra_buttons_box);
		self->priv->_preview_extra_buttons_box = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_tester_grid_renderer_properties[UNITY_TESTER_GRID_RENDERER_PREVIEW_EXTRA_BUTTONS_BOX_PROPERTY]);
	}
}


static GObject *
unity_tester_grid_renderer_constructor (GType type,
                                        guint n_construct_properties,
                                        GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	UnityTesterGridRenderer * self;
	GtkGrid* _tmp0_;
	GtkGrid* _tmp1_;
	GtkGrid* _tmp2_;
	GtkGrid* _tmp3_;
	GtkGrid* _tmp4_;
	GtkGrid* _tmp5_;
	GtkGrid* _tmp6_;
	GtkGrid* _tmp7_;
	GtkGrid* _tmp8_;
	GtkBox* _tmp9_;
	GtkBox* _tmp10_;
	GtkBox* _tmp11_;
	GtkBox* _tmp12_;
	GtkBox* _tmp13_;
	GtkBox* _tmp14_;
	GtkBox* _tmp15_;
	GtkBox* _tmp16_;
	GtkBox* _tmp17_;
	GtkBox* _tmp18_;
	GtkBox* _tmp19_;
	GtkBox* _tmp20_;
	parent_class = G_OBJECT_CLASS (unity_tester_grid_renderer_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer);
	_tmp0_ = (GtkGrid*) gtk_grid_new ();
	g_object_ref_sink (_tmp0_);
	_tmp1_ = _tmp0_;
	unity_tester_grid_renderer_set_grid (self, _tmp1_);
	_g_object_unref0 (_tmp1_);
	_tmp2_ = self->priv->_grid;
	gtk_grid_set_column_spacing (_tmp2_, (guint) 5);
	_tmp3_ = self->priv->_grid;
	gtk_grid_set_row_spacing (_tmp3_, (guint) 5);
	_tmp4_ = self->priv->_grid;
	gtk_container_set_border_width ((GtkContainer*) _tmp4_, (guint) 5);
	_tmp5_ = self->priv->_grid;
	gtk_widget_set_halign ((GtkWidget*) _tmp5_, GTK_ALIGN_FILL);
	_tmp6_ = self->priv->_grid;
	gtk_widget_set_valign ((GtkWidget*) _tmp6_, GTK_ALIGN_FILL);
	_tmp7_ = self->priv->_grid;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp7_, TRUE);
	_tmp8_ = self->priv->_grid;
	gtk_widget_set_vexpand ((GtkWidget*) _tmp8_, TRUE);
	_tmp9_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 5);
	g_object_ref_sink (_tmp9_);
	_tmp10_ = _tmp9_;
	unity_tester_grid_renderer_set_preview_actions_box (self, _tmp10_);
	_g_object_unref0 (_tmp10_);
	_tmp11_ = self->priv->_preview_actions_box;
	gtk_widget_set_halign ((GtkWidget*) _tmp11_, GTK_ALIGN_FILL);
	_tmp12_ = self->priv->_preview_actions_box;
	gtk_widget_set_valign ((GtkWidget*) _tmp12_, GTK_ALIGN_FILL);
	_tmp13_ = self->priv->_preview_actions_box;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp13_, FALSE);
	_tmp14_ = self->priv->_preview_actions_box;
	gtk_widget_set_vexpand ((GtkWidget*) _tmp14_, FALSE);
	_tmp15_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 5);
	g_object_ref_sink (_tmp15_);
	_tmp16_ = _tmp15_;
	unity_tester_grid_renderer_set_preview_extra_buttons_box (self, _tmp16_);
	_g_object_unref0 (_tmp16_);
	_tmp17_ = self->priv->_preview_extra_buttons_box;
	gtk_widget_set_halign ((GtkWidget*) _tmp17_, GTK_ALIGN_FILL);
	_tmp18_ = self->priv->_preview_extra_buttons_box;
	gtk_widget_set_valign ((GtkWidget*) _tmp18_, GTK_ALIGN_FILL);
	_tmp19_ = self->priv->_preview_extra_buttons_box;
	gtk_widget_set_hexpand ((GtkWidget*) _tmp19_, FALSE);
	_tmp20_ = self->priv->_preview_extra_buttons_box;
	gtk_widget_set_vexpand ((GtkWidget*) _tmp20_, FALSE);
	return obj;
}


static void
unity_tester_grid_renderer_class_init (UnityTesterGridRendererClass * klass)
{
	unity_tester_grid_renderer_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityTesterGridRendererPrivate));
	((UnityTesterPreviewRendererClass *) klass)->get_widget = (GtkWidget* (*) (UnityTesterPreviewRenderer *)) unity_tester_grid_renderer_real_get_widget;
	((UnityTesterPreviewRendererClass *) klass)->get_buttons = (GtkWidget* (*) (UnityTesterPreviewRenderer *)) unity_tester_grid_renderer_real_get_buttons;
	((UnityTesterPreviewRendererClass *) klass)->get_extra_buttons = (GtkWidget* (*) (UnityTesterPreviewRenderer *)) unity_tester_grid_renderer_real_get_extra_buttons;
	((UnityTesterPreviewRendererClass *) klass)->render_buttons = (void (*) (UnityTesterPreviewRenderer *)) unity_tester_grid_renderer_real_render_buttons;
	((UnityTesterPreviewRendererClass *) klass)->render_extra_buttons = (void (*) (UnityTesterPreviewRenderer *)) unity_tester_grid_renderer_real_render_extra_buttons;
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_tester_grid_renderer_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_tester_grid_renderer_set_property;
	G_OBJECT_CLASS (klass)->constructor = unity_tester_grid_renderer_constructor;
	G_OBJECT_CLASS (klass)->finalize = unity_tester_grid_renderer_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_TESTER_GRID_RENDERER_GRID_PROPERTY, unity_tester_grid_renderer_properties[UNITY_TESTER_GRID_RENDERER_GRID_PROPERTY] = g_param_spec_object ("grid", "grid", "grid", gtk_grid_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_TESTER_GRID_RENDERER_PREVIEW_ACTIONS_BOX_PROPERTY, unity_tester_grid_renderer_properties[UNITY_TESTER_GRID_RENDERER_PREVIEW_ACTIONS_BOX_PROPERTY] = g_param_spec_object ("preview-actions-box", "preview-actions-box", "preview-actions-box", gtk_box_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_TESTER_GRID_RENDERER_PREVIEW_EXTRA_BUTTONS_BOX_PROPERTY, unity_tester_grid_renderer_properties[UNITY_TESTER_GRID_RENDERER_PREVIEW_EXTRA_BUTTONS_BOX_PROPERTY] = g_param_spec_object ("preview-extra-buttons-box", "preview-extra-buttons-box", "preview-extra-buttons-box", gtk_box_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
}


static void
unity_tester_grid_renderer_instance_init (UnityTesterGridRenderer * self)
{
	self->priv = UNITY_TESTER_GRID_RENDERER_GET_PRIVATE (self);
	self->priv->row = 0;
	self->priv->preview_actions = NULL;
}


static void
unity_tester_grid_renderer_finalize (GObject * obj)
{
	UnityTesterGridRenderer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer);
	_g_object_unref0 (self->priv->_grid);
	_g_object_unref0 (self->priv->_preview_actions_box);
	_g_object_unref0 (self->priv->_preview_extra_buttons_box);
	_g_hash_table_unref0 (self->priv->preview_actions);
	G_OBJECT_CLASS (unity_tester_grid_renderer_parent_class)->finalize (obj);
}


/**
     * Render preview in Gtk.Grid with 2 columns (name and value).
     */
GType
unity_tester_grid_renderer_get_type (void)
{
	static volatile gsize unity_tester_grid_renderer_type_id__volatile = 0;
	if (g_once_init_enter (&unity_tester_grid_renderer_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityTesterGridRendererClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_tester_grid_renderer_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityTesterGridRenderer), 0, (GInstanceInitFunc) unity_tester_grid_renderer_instance_init, NULL };
		GType unity_tester_grid_renderer_type_id;
		unity_tester_grid_renderer_type_id = g_type_register_static (UNITY_TESTER_TYPE_PREVIEW_RENDERER, "UnityTesterGridRenderer", &g_define_type_info, G_TYPE_FLAG_ABSTRACT);
		g_once_init_leave (&unity_tester_grid_renderer_type_id__volatile, unity_tester_grid_renderer_type_id);
	}
	return unity_tester_grid_renderer_type_id__volatile;
}


static void
_vala_unity_tester_grid_renderer_get_property (GObject * object,
                                               guint property_id,
                                               GValue * value,
                                               GParamSpec * pspec)
{
	UnityTesterGridRenderer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer);
	switch (property_id) {
		case UNITY_TESTER_GRID_RENDERER_GRID_PROPERTY:
		g_value_set_object (value, unity_tester_grid_renderer_get_grid (self));
		break;
		case UNITY_TESTER_GRID_RENDERER_PREVIEW_ACTIONS_BOX_PROPERTY:
		g_value_set_object (value, unity_tester_grid_renderer_get_preview_actions_box (self));
		break;
		case UNITY_TESTER_GRID_RENDERER_PREVIEW_EXTRA_BUTTONS_BOX_PROPERTY:
		g_value_set_object (value, unity_tester_grid_renderer_get_preview_extra_buttons_box (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_tester_grid_renderer_set_property (GObject * object,
                                               guint property_id,
                                               const GValue * value,
                                               GParamSpec * pspec)
{
	UnityTesterGridRenderer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer);
	switch (property_id) {
		case UNITY_TESTER_GRID_RENDERER_GRID_PROPERTY:
		unity_tester_grid_renderer_set_grid (self, g_value_get_object (value));
		break;
		case UNITY_TESTER_GRID_RENDERER_PREVIEW_ACTIONS_BOX_PROPERTY:
		unity_tester_grid_renderer_set_preview_actions_box (self, g_value_get_object (value));
		break;
		case UNITY_TESTER_GRID_RENDERER_PREVIEW_EXTRA_BUTTONS_BOX_PROPERTY:
		unity_tester_grid_renderer_set_preview_extra_buttons_box (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


UnityTesterGenericPreviewRenderer*
unity_tester_generic_preview_renderer_construct (GType object_type,
                                                 UnityProtocolPreview* preview,
                                                 const gchar* scope_uri)
{
	UnityTesterGenericPreviewRenderer * self = NULL;
	g_return_val_if_fail (preview != NULL, NULL);
	g_return_val_if_fail (scope_uri != NULL, NULL);
	self = (UnityTesterGenericPreviewRenderer*) g_object_new (object_type, "preview", preview, "scope-uri", scope_uri, NULL);
	return self;
}


UnityTesterGenericPreviewRenderer*
unity_tester_generic_preview_renderer_new (UnityProtocolPreview* preview,
                                           const gchar* scope_uri)
{
	return unity_tester_generic_preview_renderer_construct (UNITY_TESTER_TYPE_GENERIC_PREVIEW_RENDERER, preview, scope_uri);
}


static void
unity_tester_generic_preview_renderer_real_render (UnityTesterPreviewRenderer* base)
{
	UnityTesterGenericPreviewRenderer * self;
	UnityProtocolPreview* _tmp0_;
	UnityProtocolPreview* _tmp1_;
	UnityProtocolPreview* _tmp2_;
	UnityProtocolPreview* _tmp3_;
	UnityProtocolPreview* _tmp4_;
	UnityProtocolPreview* _tmp5_;
	self = (UnityTesterGenericPreviewRenderer*) base;
	_tmp0_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp1_ = _tmp0_;
	_vala_assert (_tmp1_ != NULL, "preview != null");
	_tmp2_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp3_ = _tmp2_;
	unity_tester_grid_renderer_add_standard_attributes (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, UNITY_PROTOCOL_TYPE_PREVIEW) ? ((UnityProtocolPreview*) _tmp3_) : NULL);
	_tmp4_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp5_ = _tmp4_;
	unity_tester_grid_renderer_add_info_hints (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), G_TYPE_CHECK_INSTANCE_TYPE (_tmp5_, UNITY_PROTOCOL_TYPE_PREVIEW) ? ((UnityProtocolPreview*) _tmp5_) : NULL);
}


static void
unity_tester_generic_preview_renderer_class_init (UnityTesterGenericPreviewRendererClass * klass)
{
	unity_tester_generic_preview_renderer_parent_class = g_type_class_peek_parent (klass);
	((UnityTesterPreviewRendererClass *) klass)->render = (void (*) (UnityTesterPreviewRenderer *)) unity_tester_generic_preview_renderer_real_render;
}


static void
unity_tester_generic_preview_renderer_instance_init (UnityTesterGenericPreviewRenderer * self)
{
}


GType
unity_tester_generic_preview_renderer_get_type (void)
{
	static volatile gsize unity_tester_generic_preview_renderer_type_id__volatile = 0;
	if (g_once_init_enter (&unity_tester_generic_preview_renderer_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityTesterGenericPreviewRendererClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_tester_generic_preview_renderer_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityTesterGenericPreviewRenderer), 0, (GInstanceInitFunc) unity_tester_generic_preview_renderer_instance_init, NULL };
		GType unity_tester_generic_preview_renderer_type_id;
		unity_tester_generic_preview_renderer_type_id = g_type_register_static (UNITY_TESTER_TYPE_GRID_RENDERER, "UnityTesterGenericPreviewRenderer", &g_define_type_info, 0);
		g_once_init_leave (&unity_tester_generic_preview_renderer_type_id__volatile, unity_tester_generic_preview_renderer_type_id);
	}
	return unity_tester_generic_preview_renderer_type_id__volatile;
}


UnityTesterApplicationPreviewRenderer*
unity_tester_application_preview_renderer_construct (GType object_type,
                                                     UnityProtocolApplicationPreview* preview,
                                                     const gchar* scope_uri)
{
	UnityTesterApplicationPreviewRenderer * self = NULL;
	g_return_val_if_fail (preview != NULL, NULL);
	g_return_val_if_fail (scope_uri != NULL, NULL);
	self = (UnityTesterApplicationPreviewRenderer*) g_object_new (object_type, "preview", preview, "scope-uri", scope_uri, NULL);
	return self;
}


UnityTesterApplicationPreviewRenderer*
unity_tester_application_preview_renderer_new (UnityProtocolApplicationPreview* preview,
                                               const gchar* scope_uri)
{
	return unity_tester_application_preview_renderer_construct (UNITY_TESTER_TYPE_APPLICATION_PREVIEW_RENDERER, preview, scope_uri);
}


static void
unity_tester_application_preview_renderer_real_render (UnityTesterPreviewRenderer* base)
{
	UnityTesterApplicationPreviewRenderer * self;
	UnityProtocolPreview* _tmp0_;
	UnityProtocolPreview* _tmp1_;
	UnityProtocolApplicationPreview* app_preview = NULL;
	UnityProtocolPreview* _tmp2_;
	UnityProtocolPreview* _tmp3_;
	UnityProtocolApplicationPreview* _tmp4_;
	UnityProtocolPreview* _tmp5_;
	UnityProtocolPreview* _tmp6_;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	const gchar* _tmp9_;
	const gchar* _tmp10_;
	const gchar* _tmp11_;
	const gchar* _tmp12_;
	gfloat _tmp13_;
	gfloat _tmp14_;
	gchar* _tmp15_;
	gchar* _tmp16_;
	guint _tmp17_;
	guint _tmp18_;
	gchar* _tmp19_;
	gchar* _tmp20_;
	GIcon* _tmp21_;
	GIcon* _tmp22_;
	GIcon* _tmp23_;
	GIcon* _tmp24_;
	gchar* _tmp25_;
	gchar* _tmp26_;
	self = (UnityTesterApplicationPreviewRenderer*) base;
	_tmp0_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp1_ = _tmp0_;
	_vala_assert (_tmp1_ != NULL, "preview != null");
	_tmp2_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp3_ = _tmp2_;
	_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, UNITY_PROTOCOL_TYPE_APPLICATION_PREVIEW) ? ((UnityProtocolApplicationPreview*) _tmp3_) : NULL);
	app_preview = _tmp4_;
	_tmp5_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp6_ = _tmp5_;
	unity_tester_grid_renderer_add_standard_attributes (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), _tmp6_);
	_tmp7_ = unity_protocol_application_preview_get_license (app_preview);
	_tmp8_ = _tmp7_;
	unity_tester_grid_renderer_add_text_row (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), "<b>License</b>", _tmp8_);
	_tmp9_ = unity_protocol_application_preview_get_copyright (app_preview);
	_tmp10_ = _tmp9_;
	unity_tester_grid_renderer_add_text_row (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), "<b>Copyright</b>", _tmp10_);
	_tmp11_ = unity_protocol_application_preview_get_last_update (app_preview);
	_tmp12_ = _tmp11_;
	unity_tester_grid_renderer_add_text_row (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), "<b>Last update</b>", _tmp12_);
	_tmp13_ = unity_protocol_application_preview_get_rating (app_preview);
	_tmp14_ = _tmp13_;
	_tmp15_ = g_strdup_printf ("%.2f", (gdouble) _tmp14_);
	_tmp16_ = _tmp15_;
	unity_tester_grid_renderer_add_text_row (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), "<b>Rating</b>", _tmp16_);
	_g_free0 (_tmp16_);
	_tmp17_ = unity_protocol_application_preview_get_num_ratings (app_preview);
	_tmp18_ = _tmp17_;
	_tmp19_ = g_strdup_printf ("%u", _tmp18_);
	_tmp20_ = _tmp19_;
	unity_tester_grid_renderer_add_text_row (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), "<b>Number of ratings</b>", _tmp20_);
	_g_free0 (_tmp20_);
	_tmp21_ = unity_protocol_application_preview_get_app_icon (app_preview);
	_tmp22_ = _tmp21_;
	_tmp23_ = unity_protocol_application_preview_get_app_icon (app_preview);
	_tmp24_ = _tmp23_;
	_tmp25_ = g_icon_to_string (_tmp24_);
	_tmp26_ = _tmp25_;
	unity_tester_grid_renderer_add_text_icon_row (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), "<b>Application icon</b>", _tmp22_, _tmp26_, 32);
	_g_free0 (_tmp26_);
	unity_tester_grid_renderer_add_info_hints (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), (UnityProtocolPreview*) app_preview);
	_g_object_unref0 (app_preview);
}


static void
unity_tester_application_preview_renderer_class_init (UnityTesterApplicationPreviewRendererClass * klass)
{
	unity_tester_application_preview_renderer_parent_class = g_type_class_peek_parent (klass);
	((UnityTesterPreviewRendererClass *) klass)->render = (void (*) (UnityTesterPreviewRenderer *)) unity_tester_application_preview_renderer_real_render;
}


static void
unity_tester_application_preview_renderer_instance_init (UnityTesterApplicationPreviewRenderer * self)
{
}


GType
unity_tester_application_preview_renderer_get_type (void)
{
	static volatile gsize unity_tester_application_preview_renderer_type_id__volatile = 0;
	if (g_once_init_enter (&unity_tester_application_preview_renderer_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityTesterApplicationPreviewRendererClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_tester_application_preview_renderer_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityTesterApplicationPreviewRenderer), 0, (GInstanceInitFunc) unity_tester_application_preview_renderer_instance_init, NULL };
		GType unity_tester_application_preview_renderer_type_id;
		unity_tester_application_preview_renderer_type_id = g_type_register_static (UNITY_TESTER_TYPE_GRID_RENDERER, "UnityTesterApplicationPreviewRenderer", &g_define_type_info, 0);
		g_once_init_leave (&unity_tester_application_preview_renderer_type_id__volatile, unity_tester_application_preview_renderer_type_id);
	}
	return unity_tester_application_preview_renderer_type_id__volatile;
}


UnityTesterMusicPreviewRenderer*
unity_tester_music_preview_renderer_construct (GType object_type,
                                               UnityProtocolMusicPreview* preview,
                                               const gchar* scope_uri)
{
	UnityTesterMusicPreviewRenderer * self = NULL;
	g_return_val_if_fail (preview != NULL, NULL);
	g_return_val_if_fail (scope_uri != NULL, NULL);
	self = (UnityTesterMusicPreviewRenderer*) g_object_new (object_type, "preview", preview, "scope-uri", scope_uri, NULL);
	return self;
}


UnityTesterMusicPreviewRenderer*
unity_tester_music_preview_renderer_new (UnityProtocolMusicPreview* preview,
                                         const gchar* scope_uri)
{
	return unity_tester_music_preview_renderer_construct (UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER, preview, scope_uri);
}


static void
_unity_tester_music_preview_renderer_on_play_item_clicked_gtk_menu_item_activate (GtkMenuItem* _sender,
                                                                                  gpointer self)
{
	unity_tester_music_preview_renderer_on_play_item_clicked ((UnityTesterMusicPreviewRenderer*) self, _sender);
}


static void
_unity_tester_music_preview_renderer_on_pause_item_clicked_gtk_menu_item_activate (GtkMenuItem* _sender,
                                                                                   gpointer self)
{
	unity_tester_music_preview_renderer_on_pause_item_clicked ((UnityTesterMusicPreviewRenderer*) self, _sender);
}


static gboolean
_unity_tester_music_preview_renderer_on_track_view_right_click_gtk_widget_button_press_event (GtkWidget* _sender,
                                                                                              GdkEventButton* event,
                                                                                              gpointer self)
{
	gboolean result;
	result = unity_tester_music_preview_renderer_on_track_view_right_click ((UnityTesterMusicPreviewRenderer*) self, _sender, event);
	return result;
}


static void
unity_tester_music_preview_renderer_real_render (UnityTesterPreviewRenderer* base)
{
	UnityTesterMusicPreviewRenderer * self;
	UnityProtocolPreview* _tmp0_;
	UnityProtocolPreview* _tmp1_;
	UnityProtocolMusicPreview* music_preview = NULL;
	UnityProtocolPreview* _tmp2_;
	UnityProtocolPreview* _tmp3_;
	UnityProtocolMusicPreview* _tmp4_;
	UnityProtocolPreview* _tmp5_;
	UnityProtocolPreview* _tmp6_;
	const gchar* _tmp7_ = NULL;
	UnityProtocolMusicPreview* _tmp8_;
	DeeSerializableModel* _tmp9_;
	DeeSerializableModel* _tmp10_;
	UnityProtocolMusicPreview* _tmp14_;
	const gchar* _tmp15_;
	const gchar* _tmp16_;
	UnityProtocolMusicPreview* _tmp17_;
	UnityProtocolMusicPreview* _tmp18_;
	DeeSerializableModel* _tmp19_;
	DeeSerializableModel* _tmp20_;
	self = (UnityTesterMusicPreviewRenderer*) base;
	_tmp0_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp1_ = _tmp0_;
	_vala_assert (_tmp1_ != NULL, "preview != null");
	_tmp2_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp3_ = _tmp2_;
	_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, UNITY_PROTOCOL_TYPE_MUSIC_PREVIEW) ? ((UnityProtocolMusicPreview*) _tmp3_) : NULL);
	music_preview = _tmp4_;
	_tmp5_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp6_ = _tmp5_;
	unity_tester_grid_renderer_add_standard_attributes (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), _tmp6_);
	_tmp8_ = music_preview;
	_tmp9_ = unity_protocol_music_preview_get_track_model (_tmp8_);
	_tmp10_ = _tmp9_;
	if (_tmp10_ != NULL) {
		_tmp7_ = "<<serialized model present>>";
	} else {
		UnityProtocolMusicPreview* _tmp11_;
		const gchar* _tmp12_;
		const gchar* _tmp13_;
		_tmp11_ = music_preview;
		_tmp12_ = unity_protocol_music_preview_get_track_data_swarm_name (_tmp11_);
		_tmp13_ = _tmp12_;
		_tmp7_ = _tmp13_;
	}
	unity_tester_grid_renderer_add_text_row (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), "<b>Track data swarm name</b>", _tmp7_);
	_tmp14_ = music_preview;
	_tmp15_ = unity_protocol_music_preview_get_track_data_address (_tmp14_);
	_tmp16_ = _tmp15_;
	unity_tester_grid_renderer_add_text_row (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), "<b>Track data address</b>", _tmp16_);
	_tmp17_ = music_preview;
	unity_tester_grid_renderer_add_info_hints (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), (UnityProtocolPreview*) _tmp17_);
	_tmp18_ = music_preview;
	_tmp19_ = unity_protocol_music_preview_get_track_model (_tmp18_);
	_tmp20_ = _tmp19_;
	if (_tmp20_ != NULL) {
		UnityProtocolMusicPreview* _tmp21_;
		DeeSerializableModel* _tmp22_;
		DeeSerializableModel* _tmp23_;
		UnityTesterMusicTrackModelRenderer* _tmp24_;
		GtkTreeView* _tmp25_;
		GtkViewport* track_view_viewport = NULL;
		GtkViewport* _tmp26_;
		GtkTreeView* _tmp27_;
		UnityTesterMusicTrackModelRenderer* _tmp28_;
		GtkListStore* _tmp29_;
		GtkListStore* _tmp30_;
		GtkTreeView* _tmp31_;
		GtkCellRendererText* _tmp32_;
		GtkCellRendererText* _tmp33_;
		GtkTreeView* _tmp34_;
		GtkCellRendererText* _tmp35_;
		GtkCellRendererText* _tmp36_;
		GtkTreeView* _tmp37_;
		GtkCellRendererText* _tmp38_;
		GtkCellRendererText* _tmp39_;
		GtkTreeView* _tmp40_;
		GtkCellRendererText* _tmp41_;
		GtkCellRendererText* _tmp42_;
		GtkTreeView* _tmp43_;
		GtkCellRendererText* _tmp44_;
		GtkCellRendererText* _tmp45_;
		GtkTreeView* _tmp46_;
		GtkCellRendererText* _tmp47_;
		GtkCellRendererText* _tmp48_;
		GtkViewport* _tmp49_;
		GtkTreeView* _tmp50_;
		GtkViewport* _tmp51_;
		GtkMenu* _tmp52_;
		GtkMenuItem* play_item = NULL;
		GtkMenuItem* _tmp53_;
		GtkMenuItem* _tmp54_;
		GtkMenu* _tmp55_;
		GtkMenuItem* _tmp56_;
		GtkMenuItem* _tmp57_;
		GtkMenuItem* pause_item = NULL;
		GtkMenuItem* _tmp58_;
		GtkMenuItem* _tmp59_;
		GtkMenu* _tmp60_;
		GtkMenuItem* _tmp61_;
		GtkMenuItem* _tmp62_;
		GtkTreeView* _tmp63_;
		UnityTesterMusicTrackModelRenderer* _tmp64_;
		_tmp21_ = music_preview;
		_tmp22_ = unity_protocol_music_preview_get_track_model (_tmp21_);
		_tmp23_ = _tmp22_;
		_tmp24_ = unity_tester_music_track_model_renderer_new ((DeeModel*) _tmp23_);
		_g_object_unref0 (self->priv->track_model_renderer);
		self->priv->track_model_renderer = _tmp24_;
		_tmp25_ = (GtkTreeView*) gtk_tree_view_new ();
		g_object_ref_sink (_tmp25_);
		_g_object_unref0 (self->priv->track_view);
		self->priv->track_view = _tmp25_;
		_tmp26_ = (GtkViewport*) gtk_viewport_new (NULL, NULL);
		g_object_ref_sink (_tmp26_);
		track_view_viewport = _tmp26_;
		_tmp27_ = self->priv->track_view;
		_tmp28_ = self->priv->track_model_renderer;
		_tmp29_ = unity_tester_music_track_model_renderer_get_track_view_model (_tmp28_);
		_tmp30_ = _tmp29_;
		gtk_tree_view_set_model (_tmp27_, (GtkTreeModel*) _tmp30_);
		_tmp31_ = self->priv->track_view;
		_tmp32_ = (GtkCellRendererText*) gtk_cell_renderer_text_new ();
		g_object_ref_sink (_tmp32_);
		_tmp33_ = _tmp32_;
		gtk_tree_view_insert_column_with_attributes (_tmp31_, -1, "uri", (GtkCellRenderer*) _tmp33_, "text", 0, NULL);
		_g_object_unref0 (_tmp33_);
		_tmp34_ = self->priv->track_view;
		_tmp35_ = (GtkCellRendererText*) gtk_cell_renderer_text_new ();
		g_object_ref_sink (_tmp35_);
		_tmp36_ = _tmp35_;
		gtk_tree_view_insert_column_with_attributes (_tmp34_, -1, "track no", (GtkCellRenderer*) _tmp36_, "text", 1, NULL);
		_g_object_unref0 (_tmp36_);
		_tmp37_ = self->priv->track_view;
		_tmp38_ = (GtkCellRendererText*) gtk_cell_renderer_text_new ();
		g_object_ref_sink (_tmp38_);
		_tmp39_ = _tmp38_;
		gtk_tree_view_insert_column_with_attributes (_tmp37_, -1, "title", (GtkCellRenderer*) _tmp39_, "text", 2, NULL);
		_g_object_unref0 (_tmp39_);
		_tmp40_ = self->priv->track_view;
		_tmp41_ = (GtkCellRendererText*) gtk_cell_renderer_text_new ();
		g_object_ref_sink (_tmp41_);
		_tmp42_ = _tmp41_;
		gtk_tree_view_insert_column_with_attributes (_tmp40_, -1, "length", (GtkCellRenderer*) _tmp42_, "text", 3, NULL);
		_g_object_unref0 (_tmp42_);
		_tmp43_ = self->priv->track_view;
		_tmp44_ = (GtkCellRendererText*) gtk_cell_renderer_text_new ();
		g_object_ref_sink (_tmp44_);
		_tmp45_ = _tmp44_;
		gtk_tree_view_insert_column_with_attributes (_tmp43_, -1, "playing", (GtkCellRenderer*) _tmp45_, "text", 4, NULL);
		_g_object_unref0 (_tmp45_);
		_tmp46_ = self->priv->track_view;
		_tmp47_ = (GtkCellRendererText*) gtk_cell_renderer_text_new ();
		g_object_ref_sink (_tmp47_);
		_tmp48_ = _tmp47_;
		gtk_tree_view_insert_column_with_attributes (_tmp46_, -1, "progress", (GtkCellRenderer*) _tmp48_, "text", 5, NULL);
		_g_object_unref0 (_tmp48_);
		_tmp49_ = track_view_viewport;
		_tmp50_ = self->priv->track_view;
		gtk_container_add_with_properties ((GtkContainer*) _tmp49_, (GtkWidget*) _tmp50_, NULL);
		_tmp51_ = track_view_viewport;
		unity_tester_grid_renderer_add_widget ((UnityTesterGridRenderer*) self, "Track model", (GtkWidget*) _tmp51_);
		_tmp52_ = (GtkMenu*) gtk_menu_new ();
		g_object_ref_sink (_tmp52_);
		_g_object_unref0 (self->priv->track_view_popup_menu);
		self->priv->track_view_popup_menu = _tmp52_;
		_tmp53_ = (GtkMenuItem*) gtk_menu_item_new_with_label ("Play");
		g_object_ref_sink (_tmp53_);
		play_item = _tmp53_;
		_tmp54_ = play_item;
		g_signal_connect_object (_tmp54_, "activate", (GCallback) _unity_tester_music_preview_renderer_on_play_item_clicked_gtk_menu_item_activate, self, 0);
		_tmp55_ = self->priv->track_view_popup_menu;
		_tmp56_ = play_item;
		gtk_menu_shell_append ((GtkMenuShell*) _tmp55_, _tmp56_);
		_tmp57_ = play_item;
		gtk_widget_show ((GtkWidget*) _tmp57_);
		_tmp58_ = (GtkMenuItem*) gtk_menu_item_new_with_label ("Pause");
		g_object_ref_sink (_tmp58_);
		pause_item = _tmp58_;
		_tmp59_ = pause_item;
		g_signal_connect_object (_tmp59_, "activate", (GCallback) _unity_tester_music_preview_renderer_on_pause_item_clicked_gtk_menu_item_activate, self, 0);
		_tmp60_ = self->priv->track_view_popup_menu;
		_tmp61_ = pause_item;
		gtk_menu_shell_append ((GtkMenuShell*) _tmp60_, _tmp61_);
		_tmp62_ = pause_item;
		gtk_widget_show ((GtkWidget*) _tmp62_);
		_tmp63_ = self->priv->track_view;
		g_signal_connect_object ((GtkWidget*) _tmp63_, "button-press-event", (GCallback) _unity_tester_music_preview_renderer_on_track_view_right_click_gtk_widget_button_press_event, self, 0);
		_tmp64_ = self->priv->track_model_renderer;
		unity_tester_music_track_model_renderer_sync (_tmp64_);
		_g_object_unref0 (pause_item);
		_g_object_unref0 (play_item);
		_g_object_unref0 (track_view_viewport);
	}
	_g_object_unref0 (music_preview);
}


gboolean
unity_tester_music_preview_renderer_on_track_view_right_click (UnityTesterMusicPreviewRenderer* self,
                                                               GtkWidget* widget,
                                                               GdkEventButton* event)
{
	gboolean result = FALSE;
	gboolean _tmp0_ = FALSE;
	GdkEventType _tmp1_;
	g_return_val_if_fail (self != NULL, FALSE);
	g_return_val_if_fail (widget != NULL, FALSE);
	g_return_val_if_fail (event != NULL, FALSE);
	_tmp1_ = event->type;
	if (_tmp1_ == GDK_BUTTON_PRESS) {
		guint _tmp2_;
		_tmp2_ = event->button;
		_tmp0_ = _tmp2_ == ((guint) 3);
	} else {
		_tmp0_ = FALSE;
	}
	if (_tmp0_) {
		GtkMenu* _tmp3_;
		guint _tmp4_;
		guint32 _tmp5_;
		_tmp3_ = self->priv->track_view_popup_menu;
		_tmp4_ = event->button;
		_tmp5_ = event->time;
		gtk_menu_popup (_tmp3_, NULL, NULL, NULL, NULL, _tmp4_, _tmp5_);
	}
	result = FALSE;
	return result;
}


gchar*
unity_tester_music_preview_renderer_get_selected_track_uri (UnityTesterMusicPreviewRenderer* self)
{
	gchar* result = NULL;
	GtkTreeModel* model = NULL;
	GtkTreeIter iter = {0};
	GtkTreeSelection* selection = NULL;
	GtkTreeView* _tmp0_;
	GtkTreeSelection* _tmp1_;
	GtkTreeSelection* _tmp2_;
	GtkTreeSelection* _tmp3_;
	GtkTreeModel* _tmp4_ = NULL;
	GtkTreeIter _tmp5_ = {0};
	gboolean _tmp6_;
	GtkTreeModel* _tmp7_;
	gchar* _tmp13_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->track_view;
	_tmp1_ = gtk_tree_view_get_selection (_tmp0_);
	_tmp2_ = _g_object_ref0 (_tmp1_);
	selection = _tmp2_;
	_tmp3_ = selection;
	_tmp6_ = gtk_tree_selection_get_selected (_tmp3_, &_tmp4_, &_tmp5_);
	_g_object_unref0 (model);
	_tmp7_ = _g_object_ref0 (_tmp4_);
	model = _tmp7_;
	iter = _tmp5_;
	if (_tmp6_) {
		GValue val = {0};
		GtkTreeModel* _tmp8_;
		GtkTreeIter _tmp9_;
		GValue _tmp10_ = {0};
		const gchar* _tmp11_;
		gchar* _tmp12_;
		_tmp8_ = model;
		_tmp9_ = iter;
		gtk_tree_model_get_value (_tmp8_, &_tmp9_, 0, &_tmp10_);
		G_IS_VALUE (&val) ? (g_value_unset (&val), NULL) : NULL;
		val = _tmp10_;
		_tmp11_ = g_value_get_string (&val);
		_tmp12_ = g_strdup (_tmp11_);
		result = _tmp12_;
		G_IS_VALUE (&val) ? (g_value_unset (&val), NULL) : NULL;
		_g_object_unref0 (selection);
		_g_object_unref0 (model);
		return result;
	}
	_tmp13_ = g_strdup ("");
	result = _tmp13_;
	_g_object_unref0 (selection);
	_g_object_unref0 (model);
	return result;
}


void
unity_tester_music_preview_renderer_on_play_item_clicked (UnityTesterMusicPreviewRenderer* self,
                                                          GtkMenuItem* item)
{
	gchar* uri = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (item != NULL);
	_tmp0_ = unity_tester_music_preview_renderer_get_selected_track_uri (self);
	uri = _tmp0_;
	_tmp1_ = uri;
	if (g_strcmp0 (_tmp1_, "") != 0) {
		const gchar* _tmp2_;
		_tmp2_ = uri;
		g_signal_emit (self, unity_tester_music_preview_renderer_signals[UNITY_TESTER_MUSIC_PREVIEW_RENDERER_PLAY_MUSIC_TRACK_CLICKED_SIGNAL], 0, _tmp2_);
	}
	_g_free0 (uri);
}


void
unity_tester_music_preview_renderer_on_pause_item_clicked (UnityTesterMusicPreviewRenderer* self,
                                                           GtkMenuItem* item)
{
	gchar* uri = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (item != NULL);
	_tmp0_ = unity_tester_music_preview_renderer_get_selected_track_uri (self);
	uri = _tmp0_;
	_tmp1_ = uri;
	if (g_strcmp0 (_tmp1_, "") != 0) {
		const gchar* _tmp2_;
		_tmp2_ = uri;
		g_signal_emit (self, unity_tester_music_preview_renderer_signals[UNITY_TESTER_MUSIC_PREVIEW_RENDERER_PAUSE_MUSIC_TRACK_CLICKED_SIGNAL], 0, _tmp2_);
	}
	_g_free0 (uri);
}


static void
unity_tester_music_preview_renderer_class_init (UnityTesterMusicPreviewRendererClass * klass)
{
	unity_tester_music_preview_renderer_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityTesterMusicPreviewRendererPrivate));
	((UnityTesterPreviewRendererClass *) klass)->render = (void (*) (UnityTesterPreviewRenderer *)) unity_tester_music_preview_renderer_real_render;
	G_OBJECT_CLASS (klass)->finalize = unity_tester_music_preview_renderer_finalize;
	unity_tester_music_preview_renderer_signals[UNITY_TESTER_MUSIC_PREVIEW_RENDERER_PLAY_MUSIC_TRACK_CLICKED_SIGNAL] = g_signal_new ("play-music-track-clicked", UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__STRING, G_TYPE_NONE, 1, G_TYPE_STRING);
	unity_tester_music_preview_renderer_signals[UNITY_TESTER_MUSIC_PREVIEW_RENDERER_PAUSE_MUSIC_TRACK_CLICKED_SIGNAL] = g_signal_new ("pause-music-track-clicked", UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__STRING, G_TYPE_NONE, 1, G_TYPE_STRING);
}


static void
unity_tester_music_preview_renderer_instance_init (UnityTesterMusicPreviewRenderer * self)
{
	self->priv = UNITY_TESTER_MUSIC_PREVIEW_RENDERER_GET_PRIVATE (self);
}


static void
unity_tester_music_preview_renderer_finalize (GObject * obj)
{
	UnityTesterMusicPreviewRenderer * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TESTER_TYPE_MUSIC_PREVIEW_RENDERER, UnityTesterMusicPreviewRenderer);
	_g_object_unref0 (self->priv->track_model_renderer);
	_g_object_unref0 (self->priv->track_view);
	_g_object_unref0 (self->priv->track_view_popup_menu);
	G_OBJECT_CLASS (unity_tester_music_preview_renderer_parent_class)->finalize (obj);
}


GType
unity_tester_music_preview_renderer_get_type (void)
{
	static volatile gsize unity_tester_music_preview_renderer_type_id__volatile = 0;
	if (g_once_init_enter (&unity_tester_music_preview_renderer_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityTesterMusicPreviewRendererClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_tester_music_preview_renderer_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityTesterMusicPreviewRenderer), 0, (GInstanceInitFunc) unity_tester_music_preview_renderer_instance_init, NULL };
		GType unity_tester_music_preview_renderer_type_id;
		unity_tester_music_preview_renderer_type_id = g_type_register_static (UNITY_TESTER_TYPE_GRID_RENDERER, "UnityTesterMusicPreviewRenderer", &g_define_type_info, 0);
		g_once_init_leave (&unity_tester_music_preview_renderer_type_id__volatile, unity_tester_music_preview_renderer_type_id);
	}
	return unity_tester_music_preview_renderer_type_id__volatile;
}


UnityTesterMoviePreviewRenderer*
unity_tester_movie_preview_renderer_construct (GType object_type,
                                               UnityProtocolMoviePreview* preview,
                                               const gchar* scope_uri)
{
	UnityTesterMoviePreviewRenderer * self = NULL;
	g_return_val_if_fail (preview != NULL, NULL);
	g_return_val_if_fail (scope_uri != NULL, NULL);
	self = (UnityTesterMoviePreviewRenderer*) g_object_new (object_type, "preview", preview, "scope-uri", scope_uri, NULL);
	return self;
}


UnityTesterMoviePreviewRenderer*
unity_tester_movie_preview_renderer_new (UnityProtocolMoviePreview* preview,
                                         const gchar* scope_uri)
{
	return unity_tester_movie_preview_renderer_construct (UNITY_TESTER_TYPE_MOVIE_PREVIEW_RENDERER, preview, scope_uri);
}


static void
unity_tester_movie_preview_renderer_real_render (UnityTesterPreviewRenderer* base)
{
	UnityTesterMoviePreviewRenderer * self;
	UnityProtocolPreview* _tmp0_;
	UnityProtocolPreview* _tmp1_;
	UnityProtocolMoviePreview* movie_preview = NULL;
	UnityProtocolPreview* _tmp2_;
	UnityProtocolPreview* _tmp3_;
	UnityProtocolMoviePreview* _tmp4_;
	UnityProtocolPreview* _tmp5_;
	UnityProtocolPreview* _tmp6_;
	gfloat _tmp7_;
	gfloat _tmp8_;
	gchar* _tmp9_;
	gchar* _tmp10_;
	guint _tmp11_;
	guint _tmp12_;
	gchar* _tmp13_;
	gchar* _tmp14_;
	self = (UnityTesterMoviePreviewRenderer*) base;
	_tmp0_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp1_ = _tmp0_;
	_vala_assert (_tmp1_ != NULL, "preview != null");
	_tmp2_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp3_ = _tmp2_;
	_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, UNITY_PROTOCOL_TYPE_MOVIE_PREVIEW) ? ((UnityProtocolMoviePreview*) _tmp3_) : NULL);
	movie_preview = _tmp4_;
	_tmp5_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp6_ = _tmp5_;
	unity_tester_grid_renderer_add_standard_attributes (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), _tmp6_);
	_tmp7_ = unity_protocol_movie_preview_get_rating (movie_preview);
	_tmp8_ = _tmp7_;
	_tmp9_ = g_strdup_printf ("%.2f", (gdouble) _tmp8_);
	_tmp10_ = _tmp9_;
	unity_tester_grid_renderer_add_text_row (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), "<b>Rating</b>", _tmp10_);
	_g_free0 (_tmp10_);
	_tmp11_ = unity_protocol_movie_preview_get_num_ratings (movie_preview);
	_tmp12_ = _tmp11_;
	_tmp13_ = g_strdup_printf ("%u", _tmp12_);
	_tmp14_ = _tmp13_;
	unity_tester_grid_renderer_add_text_row (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), "<b>Number of ratings</b>", _tmp14_);
	_g_free0 (_tmp14_);
	unity_tester_grid_renderer_add_info_hints (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), (UnityProtocolPreview*) movie_preview);
	_g_object_unref0 (movie_preview);
}


static void
unity_tester_movie_preview_renderer_class_init (UnityTesterMoviePreviewRendererClass * klass)
{
	unity_tester_movie_preview_renderer_parent_class = g_type_class_peek_parent (klass);
	((UnityTesterPreviewRendererClass *) klass)->render = (void (*) (UnityTesterPreviewRenderer *)) unity_tester_movie_preview_renderer_real_render;
}


static void
unity_tester_movie_preview_renderer_instance_init (UnityTesterMoviePreviewRenderer * self)
{
}


GType
unity_tester_movie_preview_renderer_get_type (void)
{
	static volatile gsize unity_tester_movie_preview_renderer_type_id__volatile = 0;
	if (g_once_init_enter (&unity_tester_movie_preview_renderer_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityTesterMoviePreviewRendererClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_tester_movie_preview_renderer_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityTesterMoviePreviewRenderer), 0, (GInstanceInitFunc) unity_tester_movie_preview_renderer_instance_init, NULL };
		GType unity_tester_movie_preview_renderer_type_id;
		unity_tester_movie_preview_renderer_type_id = g_type_register_static (UNITY_TESTER_TYPE_GRID_RENDERER, "UnityTesterMoviePreviewRenderer", &g_define_type_info, 0);
		g_once_init_leave (&unity_tester_movie_preview_renderer_type_id__volatile, unity_tester_movie_preview_renderer_type_id);
	}
	return unity_tester_movie_preview_renderer_type_id__volatile;
}


UnityTesterSeriesPreviewRenderer*
unity_tester_series_preview_renderer_construct (GType object_type,
                                                UnityProtocolSeriesPreview* preview,
                                                const gchar* scope_uri)
{
	UnityTesterSeriesPreviewRenderer * self = NULL;
	g_return_val_if_fail (preview != NULL, NULL);
	g_return_val_if_fail (scope_uri != NULL, NULL);
	self = (UnityTesterSeriesPreviewRenderer*) g_object_new (object_type, "preview", preview, "scope-uri", scope_uri, NULL);
	return self;
}


UnityTesterSeriesPreviewRenderer*
unity_tester_series_preview_renderer_new (UnityProtocolSeriesPreview* preview,
                                          const gchar* scope_uri)
{
	return unity_tester_series_preview_renderer_construct (UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER, preview, scope_uri);
}


void
unity_tester_series_preview_renderer_update_child_preview (UnityTesterSeriesPreviewRenderer* self,
                                                           UnityProtocolPreview* child_preview)
{
	UnityProtocolPreview* _tmp0_;
	UnityProtocolPreview* _tmp1_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (child_preview != NULL);
	_tmp0_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp1_ = _tmp0_;
	unity_protocol_series_preview_set_child_preview (G_TYPE_CHECK_INSTANCE_TYPE (_tmp1_, UNITY_PROTOCOL_TYPE_SERIES_PREVIEW) ? ((UnityProtocolSeriesPreview*) _tmp1_) : NULL, child_preview);
}


static void
unity_tester_series_preview_renderer_on_change_selected_item_clicked (UnityTesterSeriesPreviewRenderer* self,
                                                                      GtkComboBox* combo)
{
	gint index = 0;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	UnityProtocolSeriesPreview* series_preview = NULL;
	UnityProtocolPreview* _tmp2_;
	UnityProtocolPreview* _tmp3_;
	UnityProtocolSeriesPreview* _tmp4_;
	gint _tmp5_;
	UnityProtocolSeriesPreview* _tmp6_;
	gint _tmp7_;
	gint _tmp8_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (combo != NULL);
	_tmp0_ = gtk_combo_box_get_active_id (combo);
	_tmp1_ = _tmp0_;
	index = atoi (_tmp1_);
	_tmp2_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp3_ = _tmp2_;
	_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, UNITY_PROTOCOL_TYPE_SERIES_PREVIEW) ? ((UnityProtocolSeriesPreview*) _tmp3_) : NULL);
	series_preview = _tmp4_;
	_tmp5_ = index;
	_tmp6_ = series_preview;
	_tmp7_ = unity_protocol_series_preview_get_selected_item (_tmp6_);
	_tmp8_ = _tmp7_;
	if (_tmp5_ != _tmp8_) {
		const gchar* _tmp9_;
		const gchar* _tmp10_;
		gint _tmp11_;
		_tmp9_ = unity_tester_preview_renderer_get_scope_uri ((UnityTesterPreviewRenderer*) self);
		_tmp10_ = _tmp9_;
		_tmp11_ = index;
		g_signal_emit (self, unity_tester_series_preview_renderer_signals[UNITY_TESTER_SERIES_PREVIEW_RENDERER_CHANGE_SELECTED_SERIES_ITEM_CLICKED_SIGNAL], 0, _tmp10_, _tmp11_);
	}
	_g_object_unref0 (series_preview);
}


static void
_unity_tester_series_preview_renderer_on_change_selected_item_clicked_gtk_combo_box_changed (GtkComboBox* _sender,
                                                                                             gpointer self)
{
	unity_tester_series_preview_renderer_on_change_selected_item_clicked ((UnityTesterSeriesPreviewRenderer*) self, _sender);
}


static UnityProtocolSeriesItemRaw*
_vala_array_dup4 (UnityProtocolSeriesItemRaw* self,
                  int length)
{
	UnityProtocolSeriesItemRaw* result;
	int i;
	result = g_new0 (UnityProtocolSeriesItemRaw, length);
	for (i = 0; i < length; i++) {
		UnityProtocolSeriesItemRaw _tmp0_ = {0};
		unity_protocol_series_item_raw_copy (&self[i], &_tmp0_);
		result[i] = _tmp0_;
	}
	return result;
}


static void
_vala_UnityProtocolSeriesItemRaw_array_free (UnityProtocolSeriesItemRaw * array,
                                             gint array_length)
{
	if (array != NULL) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			unity_protocol_series_item_raw_destroy (&array[i]);
		}
	}
	g_free (array);
}


static void
unity_tester_series_preview_renderer_real_render_extra_buttons (UnityTesterPreviewRenderer* base)
{
	UnityTesterSeriesPreviewRenderer * self;
	UnityProtocolSeriesPreview* series_preview = NULL;
	UnityProtocolPreview* _tmp0_;
	UnityProtocolPreview* _tmp1_;
	UnityProtocolSeriesPreview* _tmp2_;
	GtkBox* box = NULL;
	GtkBox* _tmp3_;
	GtkComboBoxText* items_combo = NULL;
	GtkComboBoxText* _tmp4_;
	GtkComboBoxText* _tmp5_;
	UnityProtocolSeriesItemRaw* items = NULL;
	UnityProtocolSeriesPreview* _tmp6_;
	gint _tmp7_ = 0;
	UnityProtocolSeriesItemRaw* _tmp8_;
	UnityProtocolSeriesItemRaw* _tmp9_;
	gint _tmp9__length1;
	gint items_length1;
	gint _items_size_;
	GtkComboBoxText* _tmp21_;
	UnityProtocolSeriesPreview* _tmp22_;
	gint _tmp23_;
	gint _tmp24_;
	gchar* _tmp25_;
	gchar* _tmp26_;
	GtkLabel* label = NULL;
	GtkLabel* _tmp27_;
	GtkBox* _tmp28_;
	GtkBox* _tmp29_;
	GtkComboBoxText* _tmp30_;
	GtkBox* _tmp31_;
	GtkBox* _tmp32_;
	GtkBox* _tmp33_;
	GtkBox* _tmp34_;
	self = (UnityTesterSeriesPreviewRenderer*) base;
	_tmp0_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp1_ = _tmp0_;
	_tmp2_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp1_, UNITY_PROTOCOL_TYPE_SERIES_PREVIEW) ? ((UnityProtocolSeriesPreview*) _tmp1_) : NULL);
	series_preview = _tmp2_;
	_tmp3_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 5);
	g_object_ref_sink (_tmp3_);
	box = _tmp3_;
	_tmp4_ = (GtkComboBoxText*) gtk_combo_box_text_new ();
	g_object_ref_sink (_tmp4_);
	items_combo = _tmp4_;
	_tmp5_ = items_combo;
	g_signal_connect_object ((GtkComboBox*) _tmp5_, "changed", (GCallback) _unity_tester_series_preview_renderer_on_change_selected_item_clicked_gtk_combo_box_changed, self, 0);
	_tmp6_ = series_preview;
	_tmp8_ = unity_protocol_series_preview_get_items (_tmp6_, &_tmp7_);
	_tmp9_ = (_tmp8_ != NULL) ? _vala_array_dup4 (_tmp8_, _tmp7_) : ((gpointer) _tmp8_);
	_tmp9__length1 = _tmp7_;
	items = _tmp9_;
	items_length1 = _tmp9__length1;
	_items_size_ = items_length1;
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp10_ = FALSE;
			_tmp10_ = TRUE;
			while (TRUE) {
				gint _tmp12_;
				UnityProtocolSeriesItemRaw* _tmp13_;
				gint _tmp13__length1;
				GtkComboBoxText* _tmp14_;
				gint _tmp15_;
				gchar* _tmp16_;
				gchar* _tmp17_;
				gint _tmp18_;
				gchar* _tmp19_;
				gchar* _tmp20_;
				if (!_tmp10_) {
					gint _tmp11_;
					_tmp11_ = i;
					i = _tmp11_ + 1;
				}
				_tmp10_ = FALSE;
				_tmp12_ = i;
				_tmp13_ = items;
				_tmp13__length1 = items_length1;
				if (!(_tmp12_ < _tmp13__length1)) {
					break;
				}
				_tmp14_ = items_combo;
				_tmp15_ = i;
				_tmp16_ = g_strdup_printf ("%u", (guint) _tmp15_);
				_tmp17_ = _tmp16_;
				_tmp18_ = i;
				_tmp19_ = g_strdup_printf ("Series item #%u", (guint) _tmp18_);
				_tmp20_ = _tmp19_;
				gtk_combo_box_text_append (_tmp14_, _tmp17_, _tmp20_);
				_g_free0 (_tmp20_);
				_g_free0 (_tmp17_);
			}
		}
	}
	_tmp21_ = items_combo;
	_tmp22_ = series_preview;
	_tmp23_ = unity_protocol_series_preview_get_selected_item (_tmp22_);
	_tmp24_ = _tmp23_;
	_tmp25_ = g_strdup_printf ("%u", (guint) _tmp24_);
	_tmp26_ = _tmp25_;
	gtk_combo_box_set_active_id ((GtkComboBox*) _tmp21_, _tmp26_);
	_g_free0 (_tmp26_);
	_tmp27_ = (GtkLabel*) gtk_label_new ("Set active:");
	g_object_ref_sink (_tmp27_);
	label = _tmp27_;
	_tmp28_ = box;
	gtk_box_pack_start (_tmp28_, (GtkWidget*) label, TRUE, TRUE, (guint) 0);
	_tmp29_ = box;
	_tmp30_ = items_combo;
	gtk_box_pack_start (_tmp29_, (GtkWidget*) _tmp30_, FALSE, FALSE, (guint) 0);
	_tmp31_ = box;
	gtk_widget_show_all ((GtkWidget*) _tmp31_);
	_tmp32_ = unity_tester_grid_renderer_get_preview_extra_buttons_box ((UnityTesterGridRenderer*) self);
	_tmp33_ = _tmp32_;
	_tmp34_ = box;
	gtk_box_pack_start (_tmp33_, (GtkWidget*) _tmp34_, FALSE, FALSE, (guint) 0);
	_g_object_unref0 (label);
	items = (_vala_UnityProtocolSeriesItemRaw_array_free (items, items_length1), NULL);
	_g_object_unref0 (items_combo);
	_g_object_unref0 (box);
	_g_object_unref0 (series_preview);
}


static UnityProtocolSeriesItemRaw*
_vala_array_dup5 (UnityProtocolSeriesItemRaw* self,
                  int length)
{
	UnityProtocolSeriesItemRaw* result;
	int i;
	result = g_new0 (UnityProtocolSeriesItemRaw, length);
	for (i = 0; i < length; i++) {
		UnityProtocolSeriesItemRaw _tmp0_ = {0};
		unity_protocol_series_item_raw_copy (&self[i], &_tmp0_);
		result[i] = _tmp0_;
	}
	return result;
}


static void
unity_tester_series_preview_renderer_real_render (UnityTesterPreviewRenderer* base)
{
	UnityTesterSeriesPreviewRenderer * self;
	UnityProtocolPreview* _tmp0_;
	UnityProtocolPreview* _tmp1_;
	UnityProtocolSeriesPreview* series_preview = NULL;
	UnityProtocolPreview* _tmp2_;
	UnityProtocolPreview* _tmp3_;
	UnityProtocolSeriesPreview* _tmp4_;
	UnityProtocolPreview* _tmp5_;
	UnityProtocolPreview* _tmp6_;
	UnityProtocolSeriesPreview* _tmp7_;
	gint _tmp8_;
	gint _tmp9_;
	gchar* _tmp10_;
	gchar* _tmp11_;
	UnityProtocolSeriesItemRaw* items = NULL;
	UnityProtocolSeriesPreview* _tmp12_;
	gint _tmp13_ = 0;
	UnityProtocolSeriesItemRaw* _tmp14_;
	UnityProtocolSeriesItemRaw* _tmp15_;
	gint _tmp15__length1;
	gint items_length1;
	gint _items_size_;
	UnityTesterPreviewRenderer* child_preview = NULL;
	UnityProtocolSeriesPreview* _tmp16_;
	UnityProtocolPreview* _tmp17_;
	UnityProtocolPreview* _tmp18_;
	const gchar* _tmp19_;
	const gchar* _tmp20_;
	UnityTesterPreviewRenderer* _tmp21_;
	UnityTesterPreviewRenderer* _tmp22_;
	UnityProtocolSeriesPreview* _tmp59_;
	GError * _inner_error_ = NULL;
	self = (UnityTesterSeriesPreviewRenderer*) base;
	_tmp0_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp1_ = _tmp0_;
	_vala_assert (_tmp1_ != NULL, "preview != null");
	_tmp2_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp3_ = _tmp2_;
	_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, UNITY_PROTOCOL_TYPE_SERIES_PREVIEW) ? ((UnityProtocolSeriesPreview*) _tmp3_) : NULL);
	series_preview = _tmp4_;
	_tmp5_ = unity_tester_preview_renderer_get_preview ((UnityTesterPreviewRenderer*) self);
	_tmp6_ = _tmp5_;
	unity_tester_grid_renderer_add_standard_attributes (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), _tmp6_);
	_tmp7_ = series_preview;
	_tmp8_ = unity_protocol_series_preview_get_selected_item (_tmp7_);
	_tmp9_ = _tmp8_;
	_tmp10_ = g_strdup_printf ("%d", _tmp9_);
	_tmp11_ = _tmp10_;
	unity_tester_grid_renderer_add_text_row (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), "<b>Selected item</b>", _tmp11_);
	_g_free0 (_tmp11_);
	_tmp12_ = series_preview;
	_tmp14_ = unity_protocol_series_preview_get_items (_tmp12_, &_tmp13_);
	_tmp15_ = (_tmp14_ != NULL) ? _vala_array_dup5 (_tmp14_, _tmp13_) : ((gpointer) _tmp14_);
	_tmp15__length1 = _tmp13_;
	items = _tmp15_;
	items_length1 = _tmp15__length1;
	_items_size_ = items_length1;
	_tmp16_ = series_preview;
	_tmp17_ = unity_protocol_series_preview_get_child_preview (_tmp16_);
	_tmp18_ = _tmp17_;
	_tmp19_ = unity_tester_preview_renderer_get_scope_uri ((UnityTesterPreviewRenderer*) self);
	_tmp20_ = _tmp19_;
	_tmp21_ = unity_tester_preview_renderer_create (_tmp18_, _tmp20_);
	child_preview = _tmp21_;
	_tmp22_ = child_preview;
	if (_tmp22_ != NULL) {
		UnityTesterPreviewRenderer* _tmp23_;
		GtkWidget* _tmp24_;
		GtkWidget* _tmp25_;
		_tmp23_ = child_preview;
		_tmp24_ = unity_tester_preview_renderer_get_widget (_tmp23_);
		_tmp25_ = _tmp24_;
		unity_tester_grid_renderer_add_widget (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), "<b>Child preview</b>", _tmp25_);
		_g_object_unref0 (_tmp25_);
	}
	{
		gint i = 0;
		i = 0;
		{
			gboolean _tmp26_ = FALSE;
			_tmp26_ = TRUE;
			while (TRUE) {
				gint _tmp28_;
				UnityProtocolSeriesItemRaw* _tmp29_;
				gint _tmp29__length1;
				gint _tmp30_;
				gchar* _tmp31_;
				gchar* _tmp32_;
				UnityProtocolSeriesItemRaw* _tmp33_;
				gint _tmp33__length1;
				gint _tmp34_;
				UnityProtocolSeriesItemRaw _tmp35_;
				const gchar* _tmp36_;
				UnityProtocolSeriesItemRaw* _tmp37_;
				gint _tmp37__length1;
				gint _tmp38_;
				UnityProtocolSeriesItemRaw _tmp39_;
				const gchar* _tmp40_;
				UnityProtocolSeriesItemRaw* _tmp41_;
				gint _tmp41__length1;
				gint _tmp42_;
				UnityProtocolSeriesItemRaw _tmp43_;
				const gchar* _tmp44_;
				if (!_tmp26_) {
					gint _tmp27_;
					_tmp27_ = i;
					i = _tmp27_ + 1;
				}
				_tmp26_ = FALSE;
				_tmp28_ = i;
				_tmp29_ = items;
				_tmp29__length1 = items_length1;
				if (!(_tmp28_ < _tmp29__length1)) {
					break;
				}
				_tmp30_ = i;
				_tmp31_ = g_strdup_printf ("<u><b>Series item #%u</b></u>", (guint) _tmp30_);
				_tmp32_ = _tmp31_;
				unity_tester_grid_renderer_add_headline (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), _tmp32_);
				_g_free0 (_tmp32_);
				_tmp33_ = items;
				_tmp33__length1 = items_length1;
				_tmp34_ = i;
				_tmp35_ = _tmp33_[_tmp34_];
				_tmp36_ = _tmp35_.title;
				unity_tester_grid_renderer_add_text_row (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), "<b>Title</b>", _tmp36_);
				_tmp37_ = items;
				_tmp37__length1 = items_length1;
				_tmp38_ = i;
				_tmp39_ = _tmp37_[_tmp38_];
				_tmp40_ = _tmp39_.uri;
				unity_tester_grid_renderer_add_text_row (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), "<b>Uri</b>", _tmp40_);
				_tmp41_ = items;
				_tmp41__length1 = items_length1;
				_tmp42_ = i;
				_tmp43_ = _tmp41_[_tmp42_];
				_tmp44_ = _tmp43_.icon_hint;
				if (_tmp44_ != NULL) {
					{
						GIcon* icon = NULL;
						UnityProtocolSeriesItemRaw* _tmp45_;
						gint _tmp45__length1;
						gint _tmp46_;
						UnityProtocolSeriesItemRaw _tmp47_;
						const gchar* _tmp48_;
						GIcon* _tmp49_;
						GIcon* _tmp50_;
						UnityProtocolSeriesItemRaw* _tmp51_;
						gint _tmp51__length1;
						gint _tmp52_;
						UnityProtocolSeriesItemRaw _tmp53_;
						const gchar* _tmp54_;
						const gchar* _tmp55_;
						_tmp45_ = items;
						_tmp45__length1 = items_length1;
						_tmp46_ = i;
						_tmp47_ = _tmp45_[_tmp46_];
						_tmp48_ = _tmp47_.icon_hint;
						_tmp49_ = g_icon_new_for_string (_tmp48_, &_inner_error_);
						icon = _tmp49_;
						if (G_UNLIKELY (_inner_error_ != NULL)) {
							goto __catch23_g_error;
						}
						_tmp50_ = icon;
						_tmp51_ = items;
						_tmp51__length1 = items_length1;
						_tmp52_ = i;
						_tmp53_ = _tmp51_[_tmp52_];
						_tmp54_ = _tmp53_.icon_hint;
						_tmp55_ = string_to_string (_tmp54_);
						unity_tester_grid_renderer_add_text_icon_row (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), "<b>Icon</b>", _tmp50_, _tmp55_, 32);
						_g_object_unref0 (icon);
					}
					goto __finally23;
					__catch23_g_error:
					{
						GError* e = NULL;
						FILE* _tmp56_;
						GError* _tmp57_;
						const gchar* _tmp58_;
						e = _inner_error_;
						_inner_error_ = NULL;
						_tmp56_ = stderr;
						_tmp57_ = e;
						_tmp58_ = _tmp57_->message;
						fprintf (_tmp56_, "Series Item icon couldn't be loaded: %s\n", _tmp58_);
						_g_error_free0 (e);
					}
					__finally23:
					if (G_UNLIKELY (_inner_error_ != NULL)) {
						_g_object_unref0 (child_preview);
						items = (_vala_UnityProtocolSeriesItemRaw_array_free (items, items_length1), NULL);
						_g_object_unref0 (series_preview);
						g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
						g_clear_error (&_inner_error_);
						return;
					}
				}
			}
		}
	}
	_tmp59_ = series_preview;
	unity_tester_grid_renderer_add_info_hints (G_TYPE_CHECK_INSTANCE_CAST (self, UNITY_TESTER_TYPE_GRID_RENDERER, UnityTesterGridRenderer), (UnityProtocolPreview*) _tmp59_);
	_g_object_unref0 (child_preview);
	items = (_vala_UnityProtocolSeriesItemRaw_array_free (items, items_length1), NULL);
	_g_object_unref0 (series_preview);
}


static void
g_cclosure_user_marshal_VOID__STRING_INT (GClosure * closure,
                                          GValue * return_value,
                                          guint n_param_values,
                                          const GValue * param_values,
                                          gpointer invocation_hint,
                                          gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__STRING_INT) (gpointer data1, const char* arg_1, gint arg_2, gpointer data2);
	register GMarshalFunc_VOID__STRING_INT callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
	g_return_if_fail (n_param_values == 3);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_VOID__STRING_INT) (marshal_data ? marshal_data : cc->callback);
	callback (data1, g_value_get_string (param_values + 1), g_value_get_int (param_values + 2), data2);
}


static void
unity_tester_series_preview_renderer_class_init (UnityTesterSeriesPreviewRendererClass * klass)
{
	unity_tester_series_preview_renderer_parent_class = g_type_class_peek_parent (klass);
	((UnityTesterPreviewRendererClass *) klass)->render_extra_buttons = (void (*) (UnityTesterPreviewRenderer *)) unity_tester_series_preview_renderer_real_render_extra_buttons;
	((UnityTesterPreviewRendererClass *) klass)->render = (void (*) (UnityTesterPreviewRenderer *)) unity_tester_series_preview_renderer_real_render;
	unity_tester_series_preview_renderer_signals[UNITY_TESTER_SERIES_PREVIEW_RENDERER_CHANGE_SELECTED_SERIES_ITEM_CLICKED_SIGNAL] = g_signal_new ("change-selected-series-item-clicked", UNITY_TESTER_TYPE_SERIES_PREVIEW_RENDERER, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__STRING_INT, G_TYPE_NONE, 2, G_TYPE_STRING, G_TYPE_INT);
}


static void
unity_tester_series_preview_renderer_instance_init (UnityTesterSeriesPreviewRenderer * self)
{
}


GType
unity_tester_series_preview_renderer_get_type (void)
{
	static volatile gsize unity_tester_series_preview_renderer_type_id__volatile = 0;
	if (g_once_init_enter (&unity_tester_series_preview_renderer_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityTesterSeriesPreviewRendererClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_tester_series_preview_renderer_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityTesterSeriesPreviewRenderer), 0, (GInstanceInitFunc) unity_tester_series_preview_renderer_instance_init, NULL };
		GType unity_tester_series_preview_renderer_type_id;
		unity_tester_series_preview_renderer_type_id = g_type_register_static (UNITY_TESTER_TYPE_GRID_RENDERER, "UnityTesterSeriesPreviewRenderer", &g_define_type_info, 0);
		g_once_init_leave (&unity_tester_series_preview_renderer_type_id__volatile, unity_tester_series_preview_renderer_type_id);
	}
	return unity_tester_series_preview_renderer_type_id__volatile;
}



