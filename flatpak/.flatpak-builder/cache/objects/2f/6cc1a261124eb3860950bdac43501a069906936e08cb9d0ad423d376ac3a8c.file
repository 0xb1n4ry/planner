/* unity-result-activation.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-result-activation.vala, do not modify */

/*
 * Copyright (C) 2011 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Neil Jagdish Patel <neil.patel@canonical.com>
 *
 */


#include <glib.h>
#include <glib-object.h>
#include "unity.h"
#include <stdlib.h>
#include <string.h>
#include <dee.h>

enum  {
	UNITY_ACTIVATION_RESPONSE_0_PROPERTY,
	UNITY_ACTIVATION_RESPONSE_HANDLED_PROPERTY,
	UNITY_ACTIVATION_RESPONSE_GOTO_URI_PROPERTY,
	UNITY_ACTIVATION_RESPONSE_NUM_PROPERTIES
};
static GParamSpec* unity_activation_response_properties[UNITY_ACTIVATION_RESPONSE_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
enum  {
	UNITY_AGGREGATOR_ACTIVATION_0_PROPERTY,
	UNITY_AGGREGATOR_ACTIVATION_CHANNEL_ID_PROPERTY,
	UNITY_AGGREGATOR_ACTIVATION_SCOPE_ID_PROPERTY,
	UNITY_AGGREGATOR_ACTIVATION_ACTION_TYPE_PROPERTY,
	UNITY_AGGREGATOR_ACTIVATION_HINTS_PROPERTY,
	UNITY_AGGREGATOR_ACTIVATION_NUM_PROPERTIES
};
static GParamSpec* unity_aggregator_activation_properties[UNITY_AGGREGATOR_ACTIVATION_NUM_PROPERTIES];
#define _unity_scope_result_free0(var) ((var == NULL) ? NULL : (var = (unity_scope_result_free (var), NULL)))

struct _UnityActivationResponsePrivate {
	UnityHandledType _handled;
	gchar* _goto_uri;
	UnityPreview* _preview;
	gchar* _new_query;
};

struct _UnityAggregatorActivationPrivate {
	gchar* _channel_id;
	gchar* _scope_id;
	guint _action_type;
	UnityScopeResult* _scope_result;
	GHashTable* _hints;
};


static gpointer unity_activation_response_parent_class = NULL;
static gpointer unity_aggregator_activation_parent_class = NULL;

#define UNITY_ACTIVATION_RESPONSE_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_ACTIVATION_RESPONSE, UnityActivationResponsePrivate))
void unity_activation_response_set_preview (UnityActivationResponse* self,
                                            UnityPreview* preview);
GHashTable* unity_activation_response_get_hints (UnityActivationResponse* self);
static void _g_free0_ (gpointer var);
static void _g_variant_unref0_ (gpointer var);
static GVariant* _variant_new27 (const gchar* value);
static GVariant* _variant_new28 (const gchar* value);
UnityPreview* unity_activation_response_get_preview (UnityActivationResponse* self);
static void unity_activation_response_finalize (GObject * obj);
static void _vala_unity_activation_response_get_property (GObject * object,
                                                   guint property_id,
                                                   GValue * value,
                                                   GParamSpec * pspec);
static void _vala_unity_activation_response_set_property (GObject * object,
                                                   guint property_id,
                                                   const GValue * value,
                                                   GParamSpec * pspec);
#define UNITY_AGGREGATOR_ACTIVATION_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_AGGREGATOR_ACTIVATION, UnityAggregatorActivationPrivate))
void unity_aggregator_activation_set_hints (UnityAggregatorActivation* self,
                                            GHashTable* value);
static void unity_aggregator_activation_finalize (GObject * obj);
static void _vala_unity_aggregator_activation_get_property (GObject * object,
                                                     guint property_id,
                                                     GValue * value,
                                                     GParamSpec * pspec);
static void _vala_unity_aggregator_activation_set_property (GObject * object,
                                                     guint property_id,
                                                     const GValue * value,
                                                     GParamSpec * pspec);


GType
unity_handled_type_get_type (void)
{
	static volatile gsize unity_handled_type_type_id__volatile = 0;
	if (g_once_init_enter (&unity_handled_type_type_id__volatile)) {
		static const GEnumValue values[] = {{UNITY_HANDLED_TYPE_NOT_HANDLED, "UNITY_HANDLED_TYPE_NOT_HANDLED", "not-handled"}, {UNITY_HANDLED_TYPE_SHOW_DASH, "UNITY_HANDLED_TYPE_SHOW_DASH", "show-dash"}, {UNITY_HANDLED_TYPE_HIDE_DASH, "UNITY_HANDLED_TYPE_HIDE_DASH", "hide-dash"}, {UNITY_HANDLED_TYPE_GOTO_DASH_URI, "UNITY_HANDLED_TYPE_GOTO_DASH_URI", "goto-dash-uri"}, {UNITY_HANDLED_TYPE_SHOW_PREVIEW, "UNITY_HANDLED_TYPE_SHOW_PREVIEW", "show-preview"}, {UNITY_HANDLED_TYPE_PERFORM_SEARCH, "UNITY_HANDLED_TYPE_PERFORM_SEARCH", "perform-search"}, {0, NULL, NULL}};
		GType unity_handled_type_type_id;
		unity_handled_type_type_id = g_enum_register_static ("UnityHandledType", values);
		g_once_init_leave (&unity_handled_type_type_id__volatile, unity_handled_type_type_id);
	}
	return unity_handled_type_type_id__volatile;
}


UnityActivationResponse*
unity_activation_response_construct (GType object_type,
                                     UnityHandledType handled,
                                     const gchar* goto_uri)
{
	UnityActivationResponse * self = NULL;
	g_return_val_if_fail (goto_uri != NULL, NULL);
	self = (UnityActivationResponse*) g_object_new (object_type, "handled", handled, "goto-uri", goto_uri, NULL);
	return self;
}


UnityActivationResponse*
unity_activation_response_new (UnityHandledType handled,
                               const gchar* goto_uri)
{
	return unity_activation_response_construct (UNITY_TYPE_ACTIVATION_RESPONSE, handled, goto_uri);
}


UnityActivationResponse*
unity_activation_response_construct_with_search (GType object_type,
                                                 const gchar* search_string,
                                                 UnityFilterSet* filter_set,
                                                 UnitySearchMetadata* search_metadata)
{
	UnityActivationResponse * self = NULL;
	gchar* _tmp0_;
	g_return_val_if_fail (search_string != NULL, NULL);
	self = (UnityActivationResponse*) g_object_new (object_type, "handled", UNITY_HANDLED_TYPE_PERFORM_SEARCH, NULL);
	_tmp0_ = g_strdup (search_string);
	_g_free0 (self->priv->_new_query);
	self->priv->_new_query = _tmp0_;
	return self;
}


UnityActivationResponse*
unity_activation_response_new_with_search (const gchar* search_string,
                                           UnityFilterSet* filter_set,
                                           UnitySearchMetadata* search_metadata)
{
	return unity_activation_response_construct_with_search (UNITY_TYPE_ACTIVATION_RESPONSE, search_string, filter_set, search_metadata);
}


UnityActivationResponse*
unity_activation_response_construct_with_preview (GType object_type,
                                                  UnityPreview* preview)
{
	UnityActivationResponse * self = NULL;
	g_return_val_if_fail (preview != NULL, NULL);
	self = (UnityActivationResponse*) g_object_new (object_type, "handled", UNITY_HANDLED_TYPE_SHOW_PREVIEW, NULL);
	unity_activation_response_set_preview (self, preview);
	return self;
}


UnityActivationResponse*
unity_activation_response_new_with_preview (UnityPreview* preview)
{
	return unity_activation_response_construct_with_preview (UNITY_TYPE_ACTIVATION_RESPONSE, preview);
}


static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static void
_g_variant_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_variant_unref (var), NULL));
}


static GVariant*
_variant_new27 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static GVariant*
_variant_new28 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


GHashTable*
unity_activation_response_get_hints (UnityActivationResponse* self)
{
	GHashTable* result = NULL;
	GHashTable* hash = NULL;
	GHashTable* _tmp0_;
	gboolean _tmp1_ = FALSE;
	const gchar* _tmp2_;
	UnityPreview* _tmp8_;
	const gchar* _tmp13_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = g_hash_table_new_full (NULL, NULL, _g_free0_, _g_variant_unref0_);
	hash = _tmp0_;
	_tmp2_ = self->priv->_goto_uri;
	if (_tmp2_ != NULL) {
		const gchar* _tmp3_;
		_tmp3_ = self->priv->_goto_uri;
		_tmp1_ = g_strcmp0 (_tmp3_, "") != 0;
	} else {
		_tmp1_ = FALSE;
	}
	if (_tmp1_) {
		GHashTable* _tmp4_;
		gchar* _tmp5_;
		const gchar* _tmp6_;
		GVariant* _tmp7_;
		_tmp4_ = hash;
		_tmp5_ = g_strdup ("goto-uri");
		_tmp6_ = self->priv->_goto_uri;
		_tmp7_ = _variant_new27 (_tmp6_);
		g_hash_table_insert (_tmp4_, _tmp5_, _tmp7_);
	}
	_tmp8_ = self->priv->_preview;
	if (_tmp8_ != NULL) {
		GHashTable* _tmp9_;
		gchar* _tmp10_;
		UnityPreview* _tmp11_;
		GVariant* _tmp12_;
		_tmp9_ = hash;
		_tmp10_ = g_strdup ("preview");
		_tmp11_ = self->priv->_preview;
		_tmp12_ = dee_serializable_serialize ((DeeSerializable*) _tmp11_);
		g_hash_table_insert (_tmp9_, _tmp10_, _tmp12_);
	}
	_tmp13_ = self->priv->_new_query;
	if (_tmp13_ != NULL) {
		GHashTable* _tmp14_;
		gchar* _tmp15_;
		const gchar* _tmp16_;
		GVariant* _tmp17_;
		_tmp14_ = hash;
		_tmp15_ = g_strdup ("query");
		_tmp16_ = self->priv->_new_query;
		_tmp17_ = _variant_new28 (_tmp16_);
		g_hash_table_insert (_tmp14_, _tmp15_, _tmp17_);
	}
	result = hash;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


void
unity_activation_response_set_preview (UnityActivationResponse* self,
                                       UnityPreview* preview)
{
	UnityPreview* _tmp0_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (preview != NULL);
	_tmp0_ = _g_object_ref0 (preview);
	_g_object_unref0 (self->priv->_preview);
	self->priv->_preview = _tmp0_;
}


UnityPreview*
unity_activation_response_get_preview (UnityActivationResponse* self)
{
	UnityPreview* result = NULL;
	UnityPreview* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_preview;
	result = _tmp0_;
	return result;
}


UnityHandledType
unity_activation_response_get_handled (UnityActivationResponse* self)
{
	UnityHandledType result;
	UnityHandledType _tmp0_;
	g_return_val_if_fail (self != NULL, 0);
	_tmp0_ = self->priv->_handled;
	result = _tmp0_;
	return result;
}


static void
unity_activation_response_set_handled (UnityActivationResponse* self,
                                       UnityHandledType value)
{
	g_return_if_fail (self != NULL);
	if (unity_activation_response_get_handled (self) != value) {
		self->priv->_handled = value;
		g_object_notify_by_pspec ((GObject *) self, unity_activation_response_properties[UNITY_ACTIVATION_RESPONSE_HANDLED_PROPERTY]);
	}
}


const gchar*
unity_activation_response_get_goto_uri (UnityActivationResponse* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_goto_uri;
	result = _tmp0_;
	return result;
}


void
unity_activation_response_set_goto_uri (UnityActivationResponse* self,
                                        const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_activation_response_get_goto_uri (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_goto_uri);
		self->priv->_goto_uri = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_activation_response_properties[UNITY_ACTIVATION_RESPONSE_GOTO_URI_PROPERTY]);
	}
}


static void
unity_activation_response_class_init (UnityActivationResponseClass * klass)
{
	unity_activation_response_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityActivationResponsePrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_activation_response_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_activation_response_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_activation_response_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_ACTIVATION_RESPONSE_HANDLED_PROPERTY, unity_activation_response_properties[UNITY_ACTIVATION_RESPONSE_HANDLED_PROPERTY] = g_param_spec_enum ("handled", "handled", "handled", UNITY_TYPE_HANDLED_TYPE, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_ACTIVATION_RESPONSE_GOTO_URI_PROPERTY, unity_activation_response_properties[UNITY_ACTIVATION_RESPONSE_GOTO_URI_PROPERTY] = g_param_spec_string ("goto-uri", "goto-uri", "goto-uri", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
}


static void
unity_activation_response_instance_init (UnityActivationResponse * self)
{
	self->priv = UNITY_ACTIVATION_RESPONSE_GET_PRIVATE (self);
}


static void
unity_activation_response_finalize (GObject * obj)
{
	UnityActivationResponse * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_ACTIVATION_RESPONSE, UnityActivationResponse);
	_g_free0 (self->priv->_goto_uri);
	_g_object_unref0 (self->priv->_preview);
	_g_free0 (self->priv->_new_query);
	G_OBJECT_CLASS (unity_activation_response_parent_class)->finalize (obj);
}


GType
unity_activation_response_get_type (void)
{
	static volatile gsize unity_activation_response_type_id__volatile = 0;
	if (g_once_init_enter (&unity_activation_response_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityActivationResponseClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_activation_response_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityActivationResponse), 0, (GInstanceInitFunc) unity_activation_response_instance_init, NULL };
		GType unity_activation_response_type_id;
		unity_activation_response_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityActivationResponse", &g_define_type_info, 0);
		g_once_init_leave (&unity_activation_response_type_id__volatile, unity_activation_response_type_id);
	}
	return unity_activation_response_type_id__volatile;
}


static void
_vala_unity_activation_response_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec)
{
	UnityActivationResponse * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_ACTIVATION_RESPONSE, UnityActivationResponse);
	switch (property_id) {
		case UNITY_ACTIVATION_RESPONSE_HANDLED_PROPERTY:
		g_value_set_enum (value, unity_activation_response_get_handled (self));
		break;
		case UNITY_ACTIVATION_RESPONSE_GOTO_URI_PROPERTY:
		g_value_set_string (value, unity_activation_response_get_goto_uri (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_activation_response_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec)
{
	UnityActivationResponse * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_ACTIVATION_RESPONSE, UnityActivationResponse);
	switch (property_id) {
		case UNITY_ACTIVATION_RESPONSE_HANDLED_PROPERTY:
		unity_activation_response_set_handled (self, g_value_get_enum (value));
		break;
		case UNITY_ACTIVATION_RESPONSE_GOTO_URI_PROPERTY:
		unity_activation_response_set_goto_uri (self, g_value_get_string (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


UnityAggregatorActivation*
unity_aggregator_activation_construct (GType object_type,
                                       const gchar* channel_id,
                                       const gchar* scope_id,
                                       guint action_type,
                                       UnityScopeResult* _result_)
{
	UnityAggregatorActivation * self = NULL;
	g_return_val_if_fail (channel_id != NULL, NULL);
	g_return_val_if_fail (scope_id != NULL, NULL);
	self = (UnityAggregatorActivation*) g_object_new (object_type, "channel-id", channel_id, "scope-id", scope_id, "action-type", action_type, NULL);
	unity_aggregator_activation_set_scope_result (self, _result_);
	return self;
}


UnityAggregatorActivation*
unity_aggregator_activation_new (const gchar* channel_id,
                                 const gchar* scope_id,
                                 guint action_type,
                                 UnityScopeResult* _result_)
{
	return unity_aggregator_activation_construct (UNITY_TYPE_AGGREGATOR_ACTIVATION, channel_id, scope_id, action_type, _result_);
}


const gchar*
unity_aggregator_activation_get_channel_id (UnityAggregatorActivation* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_channel_id;
	result = _tmp0_;
	return result;
}


void
unity_aggregator_activation_set_channel_id (UnityAggregatorActivation* self,
                                            const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_aggregator_activation_get_channel_id (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_channel_id);
		self->priv->_channel_id = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_aggregator_activation_properties[UNITY_AGGREGATOR_ACTIVATION_CHANNEL_ID_PROPERTY]);
	}
}


const gchar*
unity_aggregator_activation_get_scope_id (UnityAggregatorActivation* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_scope_id;
	result = _tmp0_;
	return result;
}


void
unity_aggregator_activation_set_scope_id (UnityAggregatorActivation* self,
                                          const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_aggregator_activation_get_scope_id (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_scope_id);
		self->priv->_scope_id = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_aggregator_activation_properties[UNITY_AGGREGATOR_ACTIVATION_SCOPE_ID_PROPERTY]);
	}
}


guint
unity_aggregator_activation_get_action_type (UnityAggregatorActivation* self)
{
	guint result;
	guint _tmp0_;
	g_return_val_if_fail (self != NULL, 0U);
	_tmp0_ = self->priv->_action_type;
	result = _tmp0_;
	return result;
}


void
unity_aggregator_activation_set_action_type (UnityAggregatorActivation* self,
                                             guint value)
{
	g_return_if_fail (self != NULL);
	if (unity_aggregator_activation_get_action_type (self) != value) {
		self->priv->_action_type = value;
		g_object_notify_by_pspec ((GObject *) self, unity_aggregator_activation_properties[UNITY_AGGREGATOR_ACTIVATION_ACTION_TYPE_PROPERTY]);
	}
}


UnityScopeResult*
unity_aggregator_activation_get_scope_result (UnityAggregatorActivation* self)
{
	UnityScopeResult* result;
	UnityScopeResult* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_scope_result;
	result = _tmp0_;
	return result;
}


static gpointer
_unity_scope_result_dup0 (gpointer self)
{
	return self ? unity_scope_result_dup (self) : NULL;
}


void
unity_aggregator_activation_set_scope_result (UnityAggregatorActivation* self,
                                              UnityScopeResult* value)
{
	UnityScopeResult* _tmp0_;
	g_return_if_fail (self != NULL);
	_tmp0_ = _unity_scope_result_dup0 (value);
	_unity_scope_result_free0 (self->priv->_scope_result);
	self->priv->_scope_result = _tmp0_;
}


GHashTable*
unity_aggregator_activation_get_hints (UnityAggregatorActivation* self)
{
	GHashTable* result;
	GHashTable* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_hints;
	result = _tmp0_;
	return result;
}


static gpointer
_g_hash_table_ref0 (gpointer self)
{
	return self ? g_hash_table_ref (self) : NULL;
}


void
unity_aggregator_activation_set_hints (UnityAggregatorActivation* self,
                                       GHashTable* value)
{
	g_return_if_fail (self != NULL);
	if (unity_aggregator_activation_get_hints (self) != value) {
		GHashTable* _tmp0_;
		_tmp0_ = _g_hash_table_ref0 (value);
		_g_hash_table_unref0 (self->priv->_hints);
		self->priv->_hints = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_aggregator_activation_properties[UNITY_AGGREGATOR_ACTIVATION_HINTS_PROPERTY]);
	}
}


static void
unity_aggregator_activation_class_init (UnityAggregatorActivationClass * klass)
{
	unity_aggregator_activation_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityAggregatorActivationPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_aggregator_activation_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_aggregator_activation_set_property;
	G_OBJECT_CLASS (klass)->finalize = unity_aggregator_activation_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_AGGREGATOR_ACTIVATION_CHANNEL_ID_PROPERTY, unity_aggregator_activation_properties[UNITY_AGGREGATOR_ACTIVATION_CHANNEL_ID_PROPERTY] = g_param_spec_string ("channel-id", "channel-id", "channel-id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_AGGREGATOR_ACTIVATION_SCOPE_ID_PROPERTY, unity_aggregator_activation_properties[UNITY_AGGREGATOR_ACTIVATION_SCOPE_ID_PROPERTY] = g_param_spec_string ("scope-id", "scope-id", "scope-id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_AGGREGATOR_ACTIVATION_ACTION_TYPE_PROPERTY, unity_aggregator_activation_properties[UNITY_AGGREGATOR_ACTIVATION_ACTION_TYPE_PROPERTY] = g_param_spec_uint ("action-type", "action-type", "action-type", 0, G_MAXUINT, 0U, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_AGGREGATOR_ACTIVATION_HINTS_PROPERTY, unity_aggregator_activation_properties[UNITY_AGGREGATOR_ACTIVATION_HINTS_PROPERTY] = g_param_spec_boxed ("hints", "hints", "hints", G_TYPE_HASH_TABLE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
}


static void
unity_aggregator_activation_instance_init (UnityAggregatorActivation * self)
{
	self->priv = UNITY_AGGREGATOR_ACTIVATION_GET_PRIVATE (self);
}


static void
unity_aggregator_activation_finalize (GObject * obj)
{
	UnityAggregatorActivation * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_AGGREGATOR_ACTIVATION, UnityAggregatorActivation);
	_g_free0 (self->priv->_channel_id);
	_g_free0 (self->priv->_scope_id);
	_unity_scope_result_free0 (self->priv->_scope_result);
	_g_hash_table_unref0 (self->priv->_hints);
	G_OBJECT_CLASS (unity_aggregator_activation_parent_class)->finalize (obj);
}


GType
unity_aggregator_activation_get_type (void)
{
	static volatile gsize unity_aggregator_activation_type_id__volatile = 0;
	if (g_once_init_enter (&unity_aggregator_activation_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityAggregatorActivationClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_aggregator_activation_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityAggregatorActivation), 0, (GInstanceInitFunc) unity_aggregator_activation_instance_init, NULL };
		GType unity_aggregator_activation_type_id;
		unity_aggregator_activation_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityAggregatorActivation", &g_define_type_info, 0);
		g_once_init_leave (&unity_aggregator_activation_type_id__volatile, unity_aggregator_activation_type_id);
	}
	return unity_aggregator_activation_type_id__volatile;
}


static void
_vala_unity_aggregator_activation_get_property (GObject * object,
                                                guint property_id,
                                                GValue * value,
                                                GParamSpec * pspec)
{
	UnityAggregatorActivation * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_AGGREGATOR_ACTIVATION, UnityAggregatorActivation);
	switch (property_id) {
		case UNITY_AGGREGATOR_ACTIVATION_CHANNEL_ID_PROPERTY:
		g_value_set_string (value, unity_aggregator_activation_get_channel_id (self));
		break;
		case UNITY_AGGREGATOR_ACTIVATION_SCOPE_ID_PROPERTY:
		g_value_set_string (value, unity_aggregator_activation_get_scope_id (self));
		break;
		case UNITY_AGGREGATOR_ACTIVATION_ACTION_TYPE_PROPERTY:
		g_value_set_uint (value, unity_aggregator_activation_get_action_type (self));
		break;
		case UNITY_AGGREGATOR_ACTIVATION_HINTS_PROPERTY:
		g_value_set_boxed (value, unity_aggregator_activation_get_hints (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_aggregator_activation_set_property (GObject * object,
                                                guint property_id,
                                                const GValue * value,
                                                GParamSpec * pspec)
{
	UnityAggregatorActivation * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_AGGREGATOR_ACTIVATION, UnityAggregatorActivation);
	switch (property_id) {
		case UNITY_AGGREGATOR_ACTIVATION_CHANNEL_ID_PROPERTY:
		unity_aggregator_activation_set_channel_id (self, g_value_get_string (value));
		break;
		case UNITY_AGGREGATOR_ACTIVATION_SCOPE_ID_PROPERTY:
		unity_aggregator_activation_set_scope_id (self, g_value_get_string (value));
		break;
		case UNITY_AGGREGATOR_ACTIVATION_ACTION_TYPE_PROPERTY:
		unity_aggregator_activation_set_action_type (self, g_value_get_uint (value));
		break;
		case UNITY_AGGREGATOR_ACTIVATION_HINTS_PROPERTY:
		unity_aggregator_activation_set_hints (self, g_value_get_boxed (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}



