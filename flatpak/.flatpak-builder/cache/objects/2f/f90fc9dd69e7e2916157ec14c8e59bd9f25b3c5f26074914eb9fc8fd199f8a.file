/* unity-launcher.c generated by valac 0.40.11, the Vala compiler
 * generated from unity-launcher.vala, do not modify */

/*
 * Copyright (C) 2011 Canonical, Ltd.
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 3.0 as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License version 3.0 for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Authored by Mikkel Kamstrup Erlandsen <mikkel.kamstrup@canonical.com>
 *
 */
/*
 * IMPLEMENTATION NOTE:
 * We want the generated C API to be nice and not too Vala-ish. We must
 * anticipate that libunity consumers will be written in both Vala , C,
 * and through GObject Introspection
 *
 */


#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include "unity.h"
#include <float.h>
#include <math.h>
#include <libdbusmenu-glib/client.h>
#include <libdbusmenu-glib/dbusmenu-glib.h>
#include <libdbusmenu-glib/enum-types.h>
#include <libdbusmenu-glib/menuitem-proxy.h>
#include <libdbusmenu-glib/menuitem.h>
#include <libdbusmenu-glib/server.h>
#include <libdbusmenu-glib/types.h>
#include <glib/gstdio.h>
#include <dee.h>


#define UNITY_TYPE_LAUNCHER_ENTRY_DBUS_IMPL (unity_launcher_entry_dbus_impl_get_type ())
#define UNITY_LAUNCHER_ENTRY_DBUS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), UNITY_TYPE_LAUNCHER_ENTRY_DBUS_IMPL, UnityLauncherEntryDBusImpl))
#define UNITY_LAUNCHER_ENTRY_DBUS_IMPL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), UNITY_TYPE_LAUNCHER_ENTRY_DBUS_IMPL, UnityLauncherEntryDBusImplClass))
#define UNITY_IS_LAUNCHER_ENTRY_DBUS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), UNITY_TYPE_LAUNCHER_ENTRY_DBUS_IMPL))
#define UNITY_IS_LAUNCHER_ENTRY_DBUS_IMPL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), UNITY_TYPE_LAUNCHER_ENTRY_DBUS_IMPL))
#define UNITY_LAUNCHER_ENTRY_DBUS_IMPL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), UNITY_TYPE_LAUNCHER_ENTRY_DBUS_IMPL, UnityLauncherEntryDBusImplClass))

typedef struct _UnityLauncherEntryDBusImpl UnityLauncherEntryDBusImpl;
typedef struct _UnityLauncherEntryDBusImplClass UnityLauncherEntryDBusImplClass;
typedef struct _UnityLauncherEntryDBusImplPrivate UnityLauncherEntryDBusImplPrivate;
enum  {
	UNITY_LAUNCHER_ENTRY_DBUS_IMPL_0_PROPERTY,
	UNITY_LAUNCHER_ENTRY_DBUS_IMPL_NUM_PROPERTIES
};
static GParamSpec* unity_launcher_entry_dbus_impl_properties[UNITY_LAUNCHER_ENTRY_DBUS_IMPL_NUM_PROPERTIES];
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
enum  {
	UNITY_LAUNCHER_ENTRY_DBUS_IMPL_UPDATE_SIGNAL,
	UNITY_LAUNCHER_ENTRY_DBUS_IMPL_NUM_SIGNALS
};
static guint unity_launcher_entry_dbus_impl_signals[UNITY_LAUNCHER_ENTRY_DBUS_IMPL_NUM_SIGNALS] = {0};
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
enum  {
	UNITY_LAUNCHER_ENTRY_0_PROPERTY,
	UNITY_LAUNCHER_ENTRY_APP_URI_PROPERTY,
	UNITY_LAUNCHER_ENTRY_COUNT_PROPERTY,
	UNITY_LAUNCHER_ENTRY_COUNT_VISIBLE_PROPERTY,
	UNITY_LAUNCHER_ENTRY_PROGRESS_PROPERTY,
	UNITY_LAUNCHER_ENTRY_PROGRESS_VISIBLE_PROPERTY,
	UNITY_LAUNCHER_ENTRY_URGENT_PROPERTY,
	UNITY_LAUNCHER_ENTRY_QUICKLIST_PROPERTY,
	UNITY_LAUNCHER_ENTRY_NUM_PROPERTIES
};
static GParamSpec* unity_launcher_entry_properties[UNITY_LAUNCHER_ENTRY_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
#define _g_variant_type_free0(var) ((var == NULL) ? NULL : (var = (g_variant_type_free (var), NULL)))
enum  {
	UNITY_LAUNCHER_FAVORITES_0_PROPERTY,
	UNITY_LAUNCHER_FAVORITES_NUM_PROPERTIES
};
static GParamSpec* unity_launcher_favorites_properties[UNITY_LAUNCHER_FAVORITES_NUM_PROPERTIES];
#define _g_settings_schema_unref0(var) ((var == NULL) ? NULL : (var = (g_settings_schema_unref (var), NULL)))
enum  {
	UNITY_LAUNCHER_FAVORITES_CHANGED_SIGNAL,
	UNITY_LAUNCHER_FAVORITES_NUM_SIGNALS
};
static guint unity_launcher_favorites_signals[UNITY_LAUNCHER_FAVORITES_NUM_SIGNALS] = {0};

struct _UnityLauncherEntryDBusImpl {
	GObject parent_instance;
	UnityLauncherEntryDBusImplPrivate * priv;
	UnityLauncherEntry* owner;
};

struct _UnityLauncherEntryDBusImplClass {
	GObjectClass parent_class;
};

struct _UnityLauncherEntryPrivate {
	gchar* _app_uri;
	gint64 _count;
	gboolean _count_visible;
	gdouble _progress;
	gboolean _progress_visible;
	gboolean _urgent;
	DbusmenuMenuitem* _quicklist;
	GHashTable* _queued_properties;
	DbusmenuServer* _quicklist_server;
	guint _property_source_id;
	GDBusConnection* _bus;
	UnityLauncherEntryDBusImpl* _dbus_impl;
};

struct _UnityLauncherFavoritesPrivate {
	GSettings* settings;
	GHashTable* fav_cache;
	gchar** fav_list;
	gint fav_list_length1;
	gint _fav_list_size_;
};


static gpointer unity_launcher_entry_dbus_impl_parent_class = NULL;
static gpointer unity_launcher_entry_parent_class = NULL;
static GHashTable* unity_launcher_entry_global_entries_map;
static GHashTable* unity_launcher_entry_global_entries_map = NULL;
static DeeSerializableIface * unity_launcher_entry_dee_serializable_parent_iface = NULL;
static gpointer unity_launcher_favorites_parent_class = NULL;
static UnityLauncherFavorites* unity_launcher_favorites_singleton;
static UnityLauncherFavorites* unity_launcher_favorites_singleton = NULL;

#define UNITY_APP_PREFIX "application://"
#define UNITY_FILE_PREFIX "file://"
GType unity_launcher_entry_dbus_impl_get_type (void) G_GNUC_CONST;
guint unity_launcher_entry_dbus_impl_register_object (void* object,
                                                      GDBusConnection* connection,
                                                      const gchar* path,
                                                      GError** error);
UnityLauncherEntryDBusImpl* unity_launcher_entry_dbus_impl_new (GDBusConnection* conn,
                                                                const char* object_path,
                                                                UnityLauncherEntry* owner);
UnityLauncherEntryDBusImpl* unity_launcher_entry_dbus_impl_construct (GType object_type,
                                                                      GDBusConnection* conn,
                                                                      const char* object_path,
                                                                      UnityLauncherEntry* owner);
GHashTable* unity_launcher_entry_dbus_impl_query (UnityLauncherEntryDBusImpl* self);
static void _g_free0_ (gpointer var);
static void _g_variant_unref0_ (gpointer var);
GHashTable* unity_collect_launcher_entry_properties (UnityLauncherEntry* l);
static void g_cclosure_user_marshal_VOID__STRING_BOXED (GClosure * closure,
                                                 GValue * return_value,
                                                 guint n_param_values,
                                                 const GValue * param_values,
                                                 gpointer invocation_hint,
                                                 gpointer marshal_data);
static void unity_launcher_entry_dbus_impl_finalize (GObject * obj);
static void _dbus_unity_launcher_entry_dbus_impl_query (UnityLauncherEntryDBusImpl* self,
                                                 GVariant* _parameters_,
                                                 GDBusMethodInvocation* invocation);
static void unity_launcher_entry_dbus_impl_dbus_interface_method_call (GDBusConnection* connection,
                                                                const gchar* sender,
                                                                const gchar* object_path,
                                                                const gchar* interface_name,
                                                                const gchar* method_name,
                                                                GVariant* parameters,
                                                                GDBusMethodInvocation* invocation,
                                                                gpointer user_data);
static GVariant* unity_launcher_entry_dbus_impl_dbus_interface_get_property (GDBusConnection* connection,
                                                                      const gchar* sender,
                                                                      const gchar* object_path,
                                                                      const gchar* interface_name,
                                                                      const gchar* property_name,
                                                                      GError** error,
                                                                      gpointer user_data);
static gboolean unity_launcher_entry_dbus_impl_dbus_interface_set_property (GDBusConnection* connection,
                                                                     const gchar* sender,
                                                                     const gchar* object_path,
                                                                     const gchar* interface_name,
                                                                     const gchar* property_name,
                                                                     GVariant* value,
                                                                     GError** error,
                                                                     gpointer user_data);
static void _dbus_unity_launcher_entry_dbus_impl_update (GObject* _sender,
                                                  const gchar* app_uri,
                                                  GHashTable* properties,
                                                  gpointer* _data);
static void _unity_launcher_entry_dbus_impl_unregister_object (gpointer user_data);
#define UNITY_LAUNCHER_ENTRY_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_LAUNCHER_ENTRY, UnityLauncherEntryPrivate))
static UnityLauncherEntry* unity_launcher_entry_new (const gchar* app_uri);
static UnityLauncherEntry* unity_launcher_entry_construct (GType object_type,
                                                    const gchar* app_uri);
static void _g_object_unref0_ (gpointer var);
static GVariant* unity_launcher_entry_real_serialize (DeeSerializable* base);
static GVariant* _variant_new1 (GHashTable* value);
static GObject* unity_launcher_entry_parse_serializable (GVariant* data);
static void unity_launcher_entry_queue_property_notification (UnityLauncherEntry* self,
                                                       GObject* _self_,
                                                       GParamSpec* pspec);
static GVariant* _variant_new2 (gint64 value);
static GVariant* _variant_new3 (gboolean value);
static GVariant* _variant_new4 (gdouble value);
static GVariant* _variant_new5 (gboolean value);
static GVariant* _variant_new6 (gboolean value);
static GVariant* _variant_new7 (const gchar* value);
static GVariant* _variant_new8 (const gchar* value);
static gboolean unity_launcher_entry_dispatch_property_notification (UnityLauncherEntry* self);
static gboolean _unity_launcher_entry_dispatch_property_notification_gsource_func (gpointer self);
static void unity_launcher_entry_on_unity_running_changed (UnityLauncherEntry* self,
                                                    GObject* _inspector,
                                                    GParamSpec* pspec);
static GObject * unity_launcher_entry_constructor (GType type,
                                            guint n_construct_properties,
                                            GObjectConstructParam * construct_properties);
static void _unity_launcher_entry_on_unity_running_changed_g_object_notify (GObject* _sender,
                                                                     GParamSpec* pspec,
                                                                     gpointer self);
static void _unity_launcher_entry_queue_property_notification_g_object_notify (GObject* _sender,
                                                                        GParamSpec* pspec,
                                                                        gpointer self);
static GObject* _unity_launcher_entry_parse_serializable_dee_serializable_parse_func (GVariant* data);
static void unity_launcher_entry_finalize (GObject * obj);
static void _vala_unity_launcher_entry_get_property (GObject * object,
                                              guint property_id,
                                              GValue * value,
                                              GParamSpec * pspec);
static void _vala_unity_launcher_entry_set_property (GObject * object,
                                              guint property_id,
                                              const GValue * value,
                                              GParamSpec * pspec);
static GVariant* _variant_new9 (gint64 value);
static GVariant* _variant_new10 (gboolean value);
static GVariant* _variant_new11 (gdouble value);
static GVariant* _variant_new12 (gboolean value);
static GVariant* _variant_new13 (gboolean value);
static GVariant* _variant_new14 (const char* value);
#define UNITY_LAUNCHER_FAVORITES_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), UNITY_TYPE_LAUNCHER_FAVORITES, UnityLauncherFavoritesPrivate))
#define UNITY_LAUNCHER_FAVORITES_LAUNCHER_SCHEMA_NAME "com.canonical.Unity.Launcher"
static UnityLauncherFavorites* unity_launcher_favorites_new (void);
static UnityLauncherFavorites* unity_launcher_favorites_construct (GType object_type);
static void unity_launcher_favorites_reset_fav_cache (UnityLauncherFavorites* self);
static void _unity_launcher_favorites_reset_fav_cache_g_settings_changed (GSettings* _sender,
                                                                   const gchar* key,
                                                                   gpointer self);
static void _vala_array_add1 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static gchar** _vala_array_dup2 (gchar** self,
                          int length);
static void unity_launcher_favorites_finalize (GObject * obj);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

static const GDBusArgInfo _unity_launcher_entry_dbus_impl_dbus_arg_info_query_result = {-1, "result", "a{sv}"};
static const GDBusArgInfo * const _unity_launcher_entry_dbus_impl_dbus_arg_info_query_in[] = {NULL};
static const GDBusArgInfo * const _unity_launcher_entry_dbus_impl_dbus_arg_info_query_out[] = {&_unity_launcher_entry_dbus_impl_dbus_arg_info_query_result, NULL};
static const GDBusMethodInfo _unity_launcher_entry_dbus_impl_dbus_method_info_query = {-1, "Query", (GDBusArgInfo **) (&_unity_launcher_entry_dbus_impl_dbus_arg_info_query_in), (GDBusArgInfo **) (&_unity_launcher_entry_dbus_impl_dbus_arg_info_query_out)};
static const GDBusMethodInfo * const _unity_launcher_entry_dbus_impl_dbus_method_info[] = {&_unity_launcher_entry_dbus_impl_dbus_method_info_query, NULL};
static const GDBusArgInfo _unity_launcher_entry_dbus_impl_dbus_arg_info_update_app_uri = {-1, "app_uri", "s"};
static const GDBusArgInfo _unity_launcher_entry_dbus_impl_dbus_arg_info_update_properties = {-1, "properties", "a{sv}"};
static const GDBusArgInfo * const _unity_launcher_entry_dbus_impl_dbus_arg_info_update[] = {&_unity_launcher_entry_dbus_impl_dbus_arg_info_update_app_uri, &_unity_launcher_entry_dbus_impl_dbus_arg_info_update_properties, NULL};
static const GDBusSignalInfo _unity_launcher_entry_dbus_impl_dbus_signal_info_update = {-1, "Update", (GDBusArgInfo **) (&_unity_launcher_entry_dbus_impl_dbus_arg_info_update)};
static const GDBusSignalInfo * const _unity_launcher_entry_dbus_impl_dbus_signal_info[] = {&_unity_launcher_entry_dbus_impl_dbus_signal_info_update, NULL};
static const GDBusPropertyInfo * const _unity_launcher_entry_dbus_impl_dbus_property_info[] = {NULL};
static const GDBusInterfaceInfo _unity_launcher_entry_dbus_impl_dbus_interface_info = {-1, "com.canonical.Unity.LauncherEntry", (GDBusMethodInfo **) (&_unity_launcher_entry_dbus_impl_dbus_method_info), (GDBusSignalInfo **) (&_unity_launcher_entry_dbus_impl_dbus_signal_info), (GDBusPropertyInfo **) (&_unity_launcher_entry_dbus_impl_dbus_property_info)};
static const GDBusInterfaceVTable _unity_launcher_entry_dbus_impl_dbus_interface_vtable = {unity_launcher_entry_dbus_impl_dbus_interface_method_call, unity_launcher_entry_dbus_impl_dbus_interface_get_property, unity_launcher_entry_dbus_impl_dbus_interface_set_property};

UnityLauncherEntryDBusImpl*
unity_launcher_entry_dbus_impl_construct (GType object_type,
                                          GDBusConnection* conn,
                                          const char* object_path,
                                          UnityLauncherEntry* owner)
{
	UnityLauncherEntryDBusImpl * self = NULL;
	GError * _inner_error_ = NULL;
	g_return_val_if_fail (conn != NULL, NULL);
	g_return_val_if_fail (object_path != NULL, NULL);
	g_return_val_if_fail (owner != NULL, NULL);
	self = (UnityLauncherEntryDBusImpl*) g_object_new (object_type, NULL);
	{
		unity_launcher_entry_dbus_impl_register_object (self, conn, (const gchar*) object_path, &_inner_error_);
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			if (_inner_error_->domain == G_IO_ERROR) {
				goto __catch14_g_io_error;
			}
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return NULL;
		}
	}
	goto __finally14;
	__catch14_g_io_error:
	{
		GError* e = NULL;
		e = _inner_error_;
		_inner_error_ = NULL;
		g_warning ("Unable to connecto to session bus. Unable to control " "LauncherEntry for %s", object_path);
		_g_error_free0 (e);
	}
	__finally14:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
		return NULL;
	}
	self->owner = owner;
	return self;
}


UnityLauncherEntryDBusImpl*
unity_launcher_entry_dbus_impl_new (GDBusConnection* conn,
                                    const char* object_path,
                                    UnityLauncherEntry* owner)
{
	return unity_launcher_entry_dbus_impl_construct (UNITY_TYPE_LAUNCHER_ENTRY_DBUS_IMPL, conn, object_path, owner);
}


static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}


static void
_g_variant_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_variant_unref (var), NULL));
}


GHashTable*
unity_launcher_entry_dbus_impl_query (UnityLauncherEntryDBusImpl* self)
{
	GHashTable* result = NULL;
	UnityLauncherEntry* _tmp0_;
	UnityLauncherEntry* _tmp4_;
	GHashTable* _tmp5_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->owner;
	if (_tmp0_ == NULL) {
		GHashFunc _tmp1_;
		GEqualFunc _tmp2_;
		GHashTable* _tmp3_;
		_tmp1_ = g_str_hash;
		_tmp2_ = g_str_equal;
		_tmp3_ = g_hash_table_new_full (_tmp1_, _tmp2_, _g_free0_, _g_variant_unref0_);
		result = _tmp3_;
		return result;
	}
	_tmp4_ = self->owner;
	_tmp5_ = unity_collect_launcher_entry_properties (_tmp4_);
	result = _tmp5_;
	return result;
}


static void
g_cclosure_user_marshal_VOID__STRING_BOXED (GClosure * closure,
                                            GValue * return_value,
                                            guint n_param_values,
                                            const GValue * param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__STRING_BOXED) (gpointer data1, const char* arg_1, gpointer arg_2, gpointer data2);
	register GMarshalFunc_VOID__STRING_BOXED callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
	g_return_if_fail (n_param_values == 3);
	if (G_CCLOSURE_SWAP_DATA (closure)) {
		data1 = closure->data;
		data2 = param_values->data[0].v_pointer;
	} else {
		data1 = param_values->data[0].v_pointer;
		data2 = closure->data;
	}
	callback = (GMarshalFunc_VOID__STRING_BOXED) (marshal_data ? marshal_data : cc->callback);
	callback (data1, g_value_get_string (param_values + 1), g_value_get_boxed (param_values + 2), data2);
}


static void
unity_launcher_entry_dbus_impl_class_init (UnityLauncherEntryDBusImplClass * klass)
{
	unity_launcher_entry_dbus_impl_parent_class = g_type_class_peek_parent (klass);
	G_OBJECT_CLASS (klass)->finalize = unity_launcher_entry_dbus_impl_finalize;
	unity_launcher_entry_dbus_impl_signals[UNITY_LAUNCHER_ENTRY_DBUS_IMPL_UPDATE_SIGNAL] = g_signal_new ("update", UNITY_TYPE_LAUNCHER_ENTRY_DBUS_IMPL, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__STRING_BOXED, G_TYPE_NONE, 2, G_TYPE_STRING, G_TYPE_HASH_TABLE);
}


static void
unity_launcher_entry_dbus_impl_instance_init (UnityLauncherEntryDBusImpl * self)
{
}


static void
unity_launcher_entry_dbus_impl_finalize (GObject * obj)
{
	UnityLauncherEntryDBusImpl * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_LAUNCHER_ENTRY_DBUS_IMPL, UnityLauncherEntryDBusImpl);
	G_OBJECT_CLASS (unity_launcher_entry_dbus_impl_parent_class)->finalize (obj);
}


GType
unity_launcher_entry_dbus_impl_get_type (void)
{
	static volatile gsize unity_launcher_entry_dbus_impl_type_id__volatile = 0;
	if (g_once_init_enter (&unity_launcher_entry_dbus_impl_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityLauncherEntryDBusImplClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_launcher_entry_dbus_impl_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityLauncherEntryDBusImpl), 0, (GInstanceInitFunc) unity_launcher_entry_dbus_impl_instance_init, NULL };
		GType unity_launcher_entry_dbus_impl_type_id;
		unity_launcher_entry_dbus_impl_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityLauncherEntryDBusImpl", &g_define_type_info, 0);
		g_type_set_qdata (unity_launcher_entry_dbus_impl_type_id, g_quark_from_static_string ("vala-dbus-register-object"), (void*) unity_launcher_entry_dbus_impl_register_object);
		g_once_init_leave (&unity_launcher_entry_dbus_impl_type_id__volatile, unity_launcher_entry_dbus_impl_type_id);
	}
	return unity_launcher_entry_dbus_impl_type_id__volatile;
}


static void
_dbus_unity_launcher_entry_dbus_impl_query (UnityLauncherEntryDBusImpl* self,
                                            GVariant* _parameters_,
                                            GDBusMethodInvocation* invocation)
{
	GError* error = NULL;
	GVariantIter _arguments_iter;
	GDBusMessage* _reply_message = NULL;
	GVariant* _reply;
	GVariantBuilder _reply_builder;
	GHashTable* result;
	GVariantBuilder _tmp0_;
	GHashTableIter _tmp1_;
	gpointer _tmp2_;
	gpointer _tmp3_;
	g_variant_iter_init (&_arguments_iter, _parameters_);
	result = unity_launcher_entry_dbus_impl_query (self);
	_reply_message = g_dbus_message_new_method_reply (g_dbus_method_invocation_get_message (invocation));
	g_variant_builder_init (&_reply_builder, G_VARIANT_TYPE_TUPLE);
	g_hash_table_iter_init (&_tmp1_, result);
	g_variant_builder_init (&_tmp0_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp1_, &_tmp2_, &_tmp3_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp2_;
		_value = (GVariant*) _tmp3_;
		g_variant_builder_add (&_tmp0_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	g_variant_builder_add_value (&_reply_builder, g_variant_builder_end (&_tmp0_));
	_g_hash_table_unref0 (result);
	_reply = g_variant_builder_end (&_reply_builder);
	g_dbus_message_set_body (_reply_message, _reply);
	g_dbus_connection_send_message (g_dbus_method_invocation_get_connection (invocation), _reply_message, G_DBUS_SEND_MESSAGE_FLAGS_NONE, NULL, NULL);
	g_object_unref (invocation);
	g_object_unref (_reply_message);
}


static void
unity_launcher_entry_dbus_impl_dbus_interface_method_call (GDBusConnection* connection,
                                                           const gchar* sender,
                                                           const gchar* object_path,
                                                           const gchar* interface_name,
                                                           const gchar* method_name,
                                                           GVariant* parameters,
                                                           GDBusMethodInvocation* invocation,
                                                           gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	if (strcmp (method_name, "Query") == 0) {
		_dbus_unity_launcher_entry_dbus_impl_query (object, parameters, invocation);
	} else {
		g_object_unref (invocation);
	}
}


static GVariant*
unity_launcher_entry_dbus_impl_dbus_interface_get_property (GDBusConnection* connection,
                                                            const gchar* sender,
                                                            const gchar* object_path,
                                                            const gchar* interface_name,
                                                            const gchar* property_name,
                                                            GError** error,
                                                            gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	return NULL;
}


static gboolean
unity_launcher_entry_dbus_impl_dbus_interface_set_property (GDBusConnection* connection,
                                                            const gchar* sender,
                                                            const gchar* object_path,
                                                            const gchar* interface_name,
                                                            const gchar* property_name,
                                                            GVariant* value,
                                                            GError** error,
                                                            gpointer user_data)
{
	gpointer* data;
	gpointer object;
	data = user_data;
	object = data[0];
	return FALSE;
}


static void
_dbus_unity_launcher_entry_dbus_impl_update (GObject* _sender,
                                             const gchar* app_uri,
                                             GHashTable* properties,
                                             gpointer* _data)
{
	GDBusConnection * _connection;
	const gchar * _path;
	GVariant *_arguments;
	GVariantBuilder _arguments_builder;
	GVariantBuilder _tmp4_;
	GHashTableIter _tmp5_;
	gpointer _tmp6_;
	gpointer _tmp7_;
	_connection = _data[1];
	_path = _data[2];
	g_variant_builder_init (&_arguments_builder, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_arguments_builder, g_variant_new_string (app_uri));
	g_hash_table_iter_init (&_tmp5_, properties);
	g_variant_builder_init (&_tmp4_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp5_, &_tmp6_, &_tmp7_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp6_;
		_value = (GVariant*) _tmp7_;
		g_variant_builder_add (&_tmp4_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	g_variant_builder_add_value (&_arguments_builder, g_variant_builder_end (&_tmp4_));
	_arguments = g_variant_builder_end (&_arguments_builder);
	g_dbus_connection_emit_signal (_connection, NULL, _path, "com.canonical.Unity.LauncherEntry", "Update", _arguments, NULL);
}


guint
unity_launcher_entry_dbus_impl_register_object (gpointer object,
                                                GDBusConnection* connection,
                                                const gchar* path,
                                                GError** error)
{
	guint result;
	gpointer *data;
	data = g_new (gpointer, 3);
	data[0] = g_object_ref (object);
	data[1] = g_object_ref (connection);
	data[2] = g_strdup (path);
	result = g_dbus_connection_register_object (connection, path, (GDBusInterfaceInfo *) (&_unity_launcher_entry_dbus_impl_dbus_interface_info), &_unity_launcher_entry_dbus_impl_dbus_interface_vtable, data, _unity_launcher_entry_dbus_impl_unregister_object, error);
	if (!result) {
		return 0;
	}
	g_signal_connect (object, "update", (GCallback) _dbus_unity_launcher_entry_dbus_impl_update, data);
	return result;
}


static void
_unity_launcher_entry_dbus_impl_unregister_object (gpointer user_data)
{
	gpointer* data;
	data = user_data;
	g_signal_handlers_disconnect_by_func (data[0], _dbus_unity_launcher_entry_dbus_impl_update, data);
	g_object_unref (data[0]);
	g_object_unref (data[1]);
	g_free (data[2]);
	g_free (data);
}


/**
     * Create a new LauncherEntry for the desktop file id of your application.
     *
     * This constructor is private because consumers should create instances
     * via the static getter methods on this class to avoid duplicate entries
     * for the same application.
     *
     * The desktop file id is defined as the basename of your application's
     * .desktop file (including the extension), eg. myapp.desktop.
     */
static UnityLauncherEntry*
unity_launcher_entry_construct (GType object_type,
                                const gchar* app_uri)
{
	UnityLauncherEntry * self = NULL;
	g_return_val_if_fail (app_uri != NULL, NULL);
	self = (UnityLauncherEntry*) g_object_new (object_type, "app-uri", app_uri, NULL);
	return self;
}


static UnityLauncherEntry*
unity_launcher_entry_new (const gchar* app_uri)
{
	return unity_launcher_entry_construct (UNITY_TYPE_LAUNCHER_ENTRY, app_uri);
}


static void
_g_object_unref0_ (gpointer var)
{
	(var == NULL) ? NULL : (var = (g_object_unref (var), NULL));
}


static const gchar*
string_to_string (const gchar* self)
{
	const gchar* result = NULL;
	g_return_val_if_fail (self != NULL, NULL);
	result = self;
	return result;
}


static glong
string_strnlen (gchar* str,
                glong maxlen)
{
	glong result = 0L;
	gchar* end = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	_tmp0_ = memchr (str, 0, (gsize) maxlen);
	end = _tmp0_;
	_tmp1_ = end;
	if (_tmp1_ == NULL) {
		result = maxlen;
		return result;
	} else {
		gchar* _tmp2_;
		_tmp2_ = end;
		result = (glong) (_tmp2_ - str);
		return result;
	}
}


static gchar*
string_substring (const gchar* self,
                  glong offset,
                  glong len)
{
	gchar* result = NULL;
	glong string_length = 0L;
	gboolean _tmp0_ = FALSE;
	glong _tmp6_;
	gchar* _tmp7_;
	g_return_val_if_fail (self != NULL, NULL);
	if (offset >= ((glong) 0)) {
		_tmp0_ = len >= ((glong) 0);
	} else {
		_tmp0_ = FALSE;
	}
	if (_tmp0_) {
		string_length = string_strnlen ((gchar*) self, offset + len);
	} else {
		gint _tmp1_;
		gint _tmp2_;
		_tmp1_ = strlen (self);
		_tmp2_ = _tmp1_;
		string_length = (glong) _tmp2_;
	}
	if (offset < ((glong) 0)) {
		glong _tmp3_;
		_tmp3_ = string_length;
		offset = _tmp3_ + offset;
		g_return_val_if_fail (offset >= ((glong) 0), NULL);
	} else {
		glong _tmp4_;
		_tmp4_ = string_length;
		g_return_val_if_fail (offset <= _tmp4_, NULL);
	}
	if (len < ((glong) 0)) {
		glong _tmp5_;
		_tmp5_ = string_length;
		len = _tmp5_ - offset;
	}
	_tmp6_ = string_length;
	g_return_val_if_fail ((offset + len) <= _tmp6_, NULL);
	_tmp7_ = g_strndup (((gchar*) self) + offset, (gsize) len);
	result = _tmp7_;
	return result;
}


static gchar
string_get (const gchar* self,
            glong index)
{
	gchar result = '\0';
	gchar _tmp0_;
	g_return_val_if_fail (self != NULL, '\0');
	_tmp0_ = ((gchar*) self)[index];
	result = _tmp0_;
	return result;
}


static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}


UnityLauncherEntry*
unity_launcher_entry_get_for_app_uri (const gchar* app_uri)
{
	UnityLauncherEntry* result = NULL;
	GHashTable* _tmp0_;
	gchar* real_app_uri = NULL;
	gchar* _tmp4_;
	const gchar* snap_path = NULL;
	const gchar* _tmp5_;
	const gchar* snap_name = NULL;
	const gchar* _tmp6_;
	gboolean _tmp7_ = FALSE;
	const gchar* _tmp8_;
	UnityLauncherEntry* entry = NULL;
	GHashTable* _tmp43_;
	const gchar* _tmp44_;
	gconstpointer _tmp45_;
	UnityLauncherEntry* _tmp46_;
	UnityLauncherEntry* _tmp47_;
	const gchar* _tmp48_;
	UnityLauncherEntry* _tmp49_;
	GHashTable* _tmp50_;
	const gchar* _tmp51_;
	gchar* _tmp52_;
	UnityLauncherEntry* _tmp53_;
	UnityLauncherEntry* _tmp54_;
	g_return_val_if_fail (app_uri != NULL, NULL);
	_tmp0_ = unity_launcher_entry_global_entries_map;
	if (_tmp0_ == NULL) {
		GHashFunc _tmp1_;
		GEqualFunc _tmp2_;
		GHashTable* _tmp3_;
		_tmp1_ = g_str_hash;
		_tmp2_ = g_str_equal;
		_tmp3_ = g_hash_table_new_full (_tmp1_, _tmp2_, _g_free0_, _g_object_unref0_);
		_g_hash_table_unref0 (unity_launcher_entry_global_entries_map);
		unity_launcher_entry_global_entries_map = _tmp3_;
	}
	_tmp4_ = g_strdup (app_uri);
	real_app_uri = _tmp4_;
	_tmp5_ = g_getenv ("SNAP");
	snap_path = _tmp5_;
	_tmp6_ = g_getenv ("SNAP_NAME");
	snap_name = _tmp6_;
	_tmp8_ = snap_path;
	if (_tmp8_ != NULL) {
		const gchar* _tmp9_;
		_tmp9_ = snap_name;
		_tmp7_ = _tmp9_ != NULL;
	} else {
		_tmp7_ = FALSE;
	}
	if (_tmp7_) {
		const gchar* _tmp10_;
		const gchar* _tmp11_;
		gchar* _tmp12_;
		gchar* _tmp13_;
		gchar* app = NULL;
		gint _tmp14_;
		gint _tmp15_;
		gchar* _tmp16_;
		const gchar* _tmp17_;
		_tmp10_ = snap_name;
		_tmp11_ = string_to_string (_tmp10_);
		_tmp12_ = g_strconcat ("App is running into a snap container (", _tmp11_, ")", NULL);
		_tmp13_ = _tmp12_;
		g_debug ("unity-launcher.vala:189: %s", _tmp13_);
		_g_free0 (_tmp13_);
		_tmp14_ = strlen (UNITY_APP_PREFIX);
		_tmp15_ = _tmp14_;
		_tmp16_ = string_substring (app_uri, (glong) _tmp15_, (glong) -1);
		app = _tmp16_;
		_tmp17_ = app;
		if (string_get (_tmp17_, (glong) 0) == '/') {
			const gchar* _tmp18_;
			_tmp18_ = app;
			if (!g_file_test (_tmp18_, G_FILE_TEST_IS_REGULAR)) {
				const gchar* _tmp19_;
				gchar* _tmp20_;
				gchar* _tmp21_;
				const gchar* _tmp22_;
				gchar* _tmp23_;
				const gchar* _tmp24_;
				const gchar* _tmp25_;
				const gchar* _tmp26_;
				const gchar* _tmp27_;
				gchar* _tmp28_;
				gchar* _tmp29_;
				_tmp19_ = snap_path;
				_tmp20_ = g_strconcat (UNITY_APP_PREFIX, _tmp19_, NULL);
				_tmp21_ = _tmp20_;
				_tmp22_ = app;
				_tmp23_ = g_strconcat (_tmp21_, _tmp22_, NULL);
				_g_free0 (real_app_uri);
				real_app_uri = _tmp23_;
				_g_free0 (_tmp21_);
				_tmp24_ = app;
				_tmp25_ = string_to_string (_tmp24_);
				_tmp26_ = real_app_uri;
				_tmp27_ = string_to_string (_tmp26_);
				_tmp28_ = g_strconcat ("Impossible to read file ", _tmp25_, ", trying with snap namespace: ", _tmp27_, NULL);
				_tmp29_ = _tmp28_;
				g_debug ("unity-launcher.vala:197: %s", _tmp29_);
				_g_free0 (_tmp29_);
			}
		} else {
			gchar* snap_app_prefix = NULL;
			const gchar* _tmp30_;
			gchar* _tmp31_;
			const gchar* _tmp32_;
			const gchar* _tmp33_;
			_tmp30_ = snap_name;
			_tmp31_ = g_strconcat (_tmp30_, "_", NULL);
			snap_app_prefix = _tmp31_;
			_tmp32_ = app;
			_tmp33_ = snap_app_prefix;
			if (!g_str_has_prefix (_tmp32_, _tmp33_)) {
				const gchar* _tmp34_;
				gchar* _tmp35_;
				gchar* _tmp36_;
				const gchar* _tmp37_;
				gchar* _tmp38_;
				const gchar* _tmp39_;
				const gchar* _tmp40_;
				gchar* _tmp41_;
				gchar* _tmp42_;
				_tmp34_ = snap_app_prefix;
				_tmp35_ = g_strconcat (UNITY_APP_PREFIX, _tmp34_, NULL);
				_tmp36_ = _tmp35_;
				_tmp37_ = app;
				_tmp38_ = g_strconcat (_tmp36_, _tmp37_, NULL);
				_g_free0 (real_app_uri);
				real_app_uri = _tmp38_;
				_g_free0 (_tmp36_);
				_tmp39_ = real_app_uri;
				_tmp40_ = string_to_string (_tmp39_);
				_tmp41_ = g_strconcat ("App uri does not contain the snap prefix, fixed: '", _tmp40_, "'", NULL);
				_tmp42_ = _tmp41_;
				g_debug ("unity-launcher.vala:207: %s", _tmp42_);
				_g_free0 (_tmp42_);
			}
			_g_free0 (snap_app_prefix);
		}
		_g_free0 (app);
	}
	_tmp43_ = unity_launcher_entry_global_entries_map;
	_tmp44_ = real_app_uri;
	_tmp45_ = g_hash_table_lookup (_tmp43_, _tmp44_);
	_tmp46_ = _g_object_ref0 ((UnityLauncherEntry*) _tmp45_);
	entry = _tmp46_;
	_tmp47_ = entry;
	if (_tmp47_ != NULL) {
		result = entry;
		_g_free0 (real_app_uri);
		return result;
	}
	_tmp48_ = real_app_uri;
	_tmp49_ = unity_launcher_entry_new (_tmp48_);
	_g_object_unref0 (entry);
	entry = _tmp49_;
	_tmp50_ = unity_launcher_entry_global_entries_map;
	_tmp51_ = real_app_uri;
	_tmp52_ = g_strdup (_tmp51_);
	_tmp53_ = entry;
	_tmp54_ = _g_object_ref0 (_tmp53_);
	g_hash_table_insert (_tmp50_, _tmp52_, _tmp54_);
	result = entry;
	_g_free0 (real_app_uri);
	return result;
}


UnityLauncherEntry*
unity_launcher_entry_get_for_desktop_id (const gchar* desktop_id)
{
	UnityLauncherEntry* result = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	UnityLauncherEntry* _tmp2_;
	UnityLauncherEntry* _tmp3_;
	g_return_val_if_fail (desktop_id != NULL, NULL);
	_tmp0_ = g_strconcat (UNITY_APP_PREFIX, desktop_id, NULL);
	_tmp1_ = _tmp0_;
	_tmp2_ = unity_launcher_entry_get_for_app_uri (_tmp1_);
	_tmp3_ = _tmp2_;
	_g_free0 (_tmp1_);
	result = _tmp3_;
	return result;
}


UnityLauncherEntry*
unity_launcher_entry_get_for_desktop_file (const gchar* desktop_file)
{
	UnityLauncherEntry* result = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	UnityLauncherEntry* _tmp2_;
	UnityLauncherEntry* _tmp3_;
	g_return_val_if_fail (desktop_file != NULL, NULL);
	_tmp0_ = g_path_get_basename (desktop_file);
	_tmp1_ = _tmp0_;
	_tmp2_ = unity_launcher_entry_get_for_desktop_id (_tmp1_);
	_tmp3_ = _tmp2_;
	_g_free0 (_tmp1_);
	result = _tmp3_;
	return result;
}


static GVariant*
_variant_new1 (GHashTable* value)
{
	GVariantBuilder _tmp1_;
	GHashTableIter _tmp2_;
	gpointer _tmp3_;
	gpointer _tmp4_;
	g_hash_table_iter_init (&_tmp2_, value);
	g_variant_builder_init (&_tmp1_, G_VARIANT_TYPE ("a{sv}"));
	while (g_hash_table_iter_next (&_tmp2_, &_tmp3_, &_tmp4_)) {
		gchar* _key;
		GVariant* _value;
		_key = (gchar*) _tmp3_;
		_value = (GVariant*) _tmp4_;
		g_variant_builder_add (&_tmp1_, "{?*}", g_variant_new_string (_key), g_variant_new_variant (_value));
	}
	return g_variant_ref_sink (g_variant_builder_end (&_tmp1_));
}


static gpointer
_g_variant_ref0 (gpointer self)
{
	return self ? g_variant_ref (self) : NULL;
}


static GVariant*
unity_launcher_entry_real_serialize (DeeSerializable* base)
{
	UnityLauncherEntry * self;
	GVariant* result = NULL;
	GHashTable* hash = NULL;
	GHashTable* _tmp0_;
	GVariant* props = NULL;
	GVariant* _tmp5_;
	GVariant* _app_uri = NULL;
	const gchar* _tmp6_;
	GVariant* _tmp7_;
	GVariant* _tmp8_;
	GVariant* _tmp9_;
	GVariant** _tmp10_;
	GVariant** _tmp11_;
	gint _tmp11__length1;
	GVariant* _tmp12_;
	GVariant* _tmp13_;
	self = (UnityLauncherEntry*) base;
	_tmp0_ = unity_collect_launcher_entry_properties (self);
	hash = _tmp0_;
	_tmp5_ = _variant_new1 (hash);
	props = _tmp5_;
	_tmp6_ = self->priv->_app_uri;
	_tmp7_ = g_variant_new_string (_tmp6_);
	g_variant_ref_sink (_tmp7_);
	_app_uri = _tmp7_;
	_tmp8_ = _g_variant_ref0 (_app_uri);
	_tmp9_ = _g_variant_ref0 (props);
	_tmp10_ = g_new0 (GVariant*, 2 + 1);
	_tmp10_[0] = _tmp8_;
	_tmp10_[1] = _tmp9_;
	_tmp11_ = _tmp10_;
	_tmp11__length1 = 2;
	_tmp12_ = g_variant_new_tuple (_tmp11_, 2);
	g_variant_ref_sink (_tmp12_);
	_tmp13_ = _tmp12_;
	_tmp11_ = (_vala_array_free (_tmp11_, _tmp11__length1, (GDestroyNotify) g_variant_unref), NULL);
	result = _tmp13_;
	_g_variant_unref0 (_app_uri);
	_g_variant_unref0 (props);
	_g_hash_table_unref0 (hash);
	return result;
}


static GObject*
unity_launcher_entry_parse_serializable (GVariant* data)
{
	GObject* result = NULL;
	gchar* app_uri = NULL;
	GVariant* _tmp0_;
	GVariant* _tmp1_;
	const gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	GVariant* props = NULL;
	GVariant* _tmp5_;
	UnityLauncherEntry* _self_ = NULL;
	const gchar* _tmp6_;
	UnityLauncherEntry* _tmp7_;
	gint64 count = 0LL;
	GVariant* _tmp8_;
	gboolean visible = FALSE;
	GVariant* _tmp11_;
	gdouble progress = 0.0;
	GVariant* _tmp14_;
	GVariant* _tmp17_;
	gboolean urgent = FALSE;
	GVariant* _tmp20_;
	gchar* quicklist_path = NULL;
	GVariant* _tmp23_;
	g_return_val_if_fail (data != NULL, NULL);
	_tmp0_ = g_variant_get_child_value (data, (gsize) 0);
	_tmp1_ = _tmp0_;
	_tmp2_ = g_variant_get_string (_tmp1_, NULL);
	_tmp3_ = g_strdup (_tmp2_);
	_tmp4_ = _tmp3_;
	_g_variant_unref0 (_tmp1_);
	app_uri = _tmp4_;
	_tmp5_ = g_variant_get_child_value (data, (gsize) 1);
	props = _tmp5_;
	_tmp6_ = app_uri;
	_tmp7_ = unity_launcher_entry_get_for_app_uri (_tmp6_);
	_self_ = _tmp7_;
	_tmp8_ = props;
	if (g_variant_lookup (_tmp8_, "count", "x", &count, NULL)) {
		UnityLauncherEntry* _tmp9_;
		gint64 _tmp10_;
		_tmp9_ = _self_;
		_tmp10_ = count;
		unity_launcher_entry_set_count (_tmp9_, _tmp10_);
	}
	_tmp11_ = props;
	if (g_variant_lookup (_tmp11_, "count-visible", "b", &visible, NULL)) {
		UnityLauncherEntry* _tmp12_;
		gboolean _tmp13_;
		_tmp12_ = _self_;
		_tmp13_ = visible;
		unity_launcher_entry_set_count_visible (_tmp12_, _tmp13_);
	}
	_tmp14_ = props;
	if (g_variant_lookup (_tmp14_, "count-visible", "d", &progress, NULL)) {
		UnityLauncherEntry* _tmp15_;
		gdouble _tmp16_;
		_tmp15_ = _self_;
		_tmp16_ = progress;
		unity_launcher_entry_set_progress (_tmp15_, _tmp16_);
	}
	_tmp17_ = props;
	if (g_variant_lookup (_tmp17_, "progress-visible", "b", &visible, NULL)) {
		UnityLauncherEntry* _tmp18_;
		gboolean _tmp19_;
		_tmp18_ = _self_;
		_tmp19_ = visible;
		unity_launcher_entry_set_progress_visible (_tmp18_, _tmp19_);
	}
	_tmp20_ = props;
	if (g_variant_lookup (_tmp20_, "urgent", "b", &urgent, NULL)) {
		UnityLauncherEntry* _tmp21_;
		gboolean _tmp22_;
		_tmp21_ = _self_;
		_tmp22_ = urgent;
		unity_launcher_entry_set_urgent (_tmp21_, _tmp22_);
	}
	_tmp23_ = props;
	if (g_variant_lookup (_tmp23_, "quicklist", "s", &quicklist_path, NULL)) {
		const gchar* _tmp24_;
		_tmp24_ = quicklist_path;
		if (g_strcmp0 (_tmp24_, "") != 0) {
			UnityLauncherEntry* _tmp25_;
			const gchar* _tmp26_;
			char* _tmp27_;
			_tmp25_ = _self_;
			_tmp26_ = quicklist_path;
			_tmp27_ = g_strdup (_tmp26_);
			_g_free0 (_tmp25_->_object_path);
			_tmp25_->_object_path = _tmp27_;
		}
	}
	result = (GObject*) _self_;
	_g_free0 (quicklist_path);
	_g_variant_unref0 (props);
	_g_free0 (app_uri);
	return result;
}


static GVariant*
_variant_new2 (gint64 value)
{
	return g_variant_ref_sink (g_variant_new_int64 (value));
}


static GVariant*
_variant_new3 (gboolean value)
{
	return g_variant_ref_sink (g_variant_new_boolean (value));
}


static GVariant*
_variant_new4 (gdouble value)
{
	return g_variant_ref_sink (g_variant_new_double (value));
}


static GVariant*
_variant_new5 (gboolean value)
{
	return g_variant_ref_sink (g_variant_new_boolean (value));
}


static GVariant*
_variant_new6 (gboolean value)
{
	return g_variant_ref_sink (g_variant_new_boolean (value));
}


static GVariant*
_variant_new7 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static GVariant*
_variant_new8 (const gchar* value)
{
	return g_variant_ref_sink (g_variant_new_string (value));
}


static gboolean
_unity_launcher_entry_dispatch_property_notification_gsource_func (gpointer self)
{
	gboolean result;
	result = unity_launcher_entry_dispatch_property_notification ((UnityLauncherEntry*) self);
	return result;
}


static void
unity_launcher_entry_queue_property_notification (UnityLauncherEntry* self,
                                                  GObject* _self_,
                                                  GParamSpec* pspec)
{
	GVariant* v = NULL;
	gchar* object_path = NULL;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	GQuark _tmp3_ = 0U;
	static GQuark _tmp2_label0 = 0;
	static GQuark _tmp2_label1 = 0;
	static GQuark _tmp2_label2 = 0;
	static GQuark _tmp2_label3 = 0;
	static GQuark _tmp2_label4 = 0;
	static GQuark _tmp2_label5 = 0;
	GVariant* _tmp19_;
	guint _tmp25_;
	g_return_if_fail (self != NULL);
	g_return_if_fail (_self_ != NULL);
	g_return_if_fail (pspec != NULL);
	_tmp0_ = pspec->name;
	_tmp1_ = _tmp0_;
	_tmp3_ = (NULL == _tmp1_) ? 0 : g_quark_from_string (_tmp1_);
	if (_tmp3_ == ((0 != _tmp2_label0) ? _tmp2_label0 : (_tmp2_label0 = g_quark_from_static_string ("count")))) {
		switch (0) {
			default:
			{
				gint64 _tmp4_;
				GVariant* _tmp5_;
				_tmp4_ = self->priv->_count;
				_tmp5_ = _variant_new2 (_tmp4_);
				_g_variant_unref0 (v);
				v = _tmp5_;
				break;
			}
		}
	} else if (_tmp3_ == ((0 != _tmp2_label1) ? _tmp2_label1 : (_tmp2_label1 = g_quark_from_static_string ("count-visible")))) {
		switch (0) {
			default:
			{
				gboolean _tmp6_;
				GVariant* _tmp7_;
				_tmp6_ = self->priv->_count_visible;
				_tmp7_ = _variant_new3 (_tmp6_);
				_g_variant_unref0 (v);
				v = _tmp7_;
				break;
			}
		}
	} else if (_tmp3_ == ((0 != _tmp2_label2) ? _tmp2_label2 : (_tmp2_label2 = g_quark_from_static_string ("progress")))) {
		switch (0) {
			default:
			{
				gdouble _tmp8_;
				GVariant* _tmp9_;
				_tmp8_ = self->priv->_progress;
				_tmp9_ = _variant_new4 (_tmp8_);
				_g_variant_unref0 (v);
				v = _tmp9_;
				break;
			}
		}
	} else if (_tmp3_ == ((0 != _tmp2_label3) ? _tmp2_label3 : (_tmp2_label3 = g_quark_from_static_string ("progress-visible")))) {
		switch (0) {
			default:
			{
				gboolean _tmp10_;
				GVariant* _tmp11_;
				_tmp10_ = self->priv->_progress_visible;
				_tmp11_ = _variant_new5 (_tmp10_);
				_g_variant_unref0 (v);
				v = _tmp11_;
				break;
			}
		}
	} else if (_tmp3_ == ((0 != _tmp2_label4) ? _tmp2_label4 : (_tmp2_label4 = g_quark_from_static_string ("urgent")))) {
		switch (0) {
			default:
			{
				gboolean _tmp12_;
				GVariant* _tmp13_;
				_tmp12_ = self->priv->_urgent;
				_tmp13_ = _variant_new6 (_tmp12_);
				_g_variant_unref0 (v);
				v = _tmp13_;
				break;
			}
		}
	} else if (_tmp3_ == ((0 != _tmp2_label5) ? _tmp2_label5 : (_tmp2_label5 = g_quark_from_static_string ("quicklist")))) {
		switch (0) {
			default:
			{
				DbusmenuServer* _tmp14_;
				_tmp14_ = self->priv->_quicklist_server;
				if (_tmp14_ != NULL) {
					DbusmenuServer* _tmp15_;
					const gchar* _tmp16_;
					GVariant* _tmp17_;
					_tmp15_ = self->priv->_quicklist_server;
					g_object_get ((GObject*) _tmp15_, "dbus-object", &object_path, NULL);
					_tmp16_ = object_path;
					_tmp17_ = _variant_new7 (_tmp16_);
					_g_variant_unref0 (v);
					v = _tmp17_;
				} else {
					GVariant* _tmp18_;
					_tmp18_ = _variant_new8 ("");
					_g_variant_unref0 (v);
					v = _tmp18_;
				}
				break;
			}
		}
	} else {
		switch (0) {
			default:
			{
				_g_variant_unref0 (v);
				v = NULL;
				break;
			}
		}
	}
	_tmp19_ = v;
	if (_tmp19_ != NULL) {
		GHashTable* _tmp20_;
		const gchar* _tmp21_;
		gchar* _tmp22_;
		GVariant* _tmp23_;
		GVariant* _tmp24_;
		_tmp20_ = self->priv->_queued_properties;
		_tmp21_ = pspec->name;
		_tmp22_ = g_strdup (_tmp21_);
		_tmp23_ = v;
		_tmp24_ = _g_variant_ref0 (_tmp23_);
		g_hash_table_insert (_tmp20_, _tmp22_, _tmp24_);
	}
	_tmp25_ = self->priv->_property_source_id;
	if (_tmp25_ == ((guint) 0)) {
		self->priv->_property_source_id = g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, _unity_launcher_entry_dispatch_property_notification_gsource_func, g_object_ref (self), g_object_unref);
	}
	_g_free0 (object_path);
	_g_variant_unref0 (v);
}


static gboolean
unity_launcher_entry_dispatch_property_notification (UnityLauncherEntry* self)
{
	gboolean result = FALSE;
	UnityInspector* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	GHashTable* _tmp6_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = unity_inspector_get_default ();
	_tmp1_ = unity_inspector_get_unity_running (_tmp0_);
	_tmp2_ = _tmp1_;
	if (_tmp2_) {
		UnityLauncherEntryDBusImpl* _tmp3_;
		const gchar* _tmp4_;
		GHashTable* _tmp5_;
		_tmp3_ = self->priv->_dbus_impl;
		_tmp4_ = self->priv->_app_uri;
		_tmp5_ = self->priv->_queued_properties;
		g_signal_emit (_tmp3_, unity_launcher_entry_dbus_impl_signals[UNITY_LAUNCHER_ENTRY_DBUS_IMPL_UPDATE_SIGNAL], 0, _tmp4_, _tmp5_);
	}
	self->priv->_property_source_id = (guint) 0;
	_tmp6_ = self->priv->_queued_properties;
	g_hash_table_remove_all (_tmp6_);
	result = FALSE;
	return result;
}


static void
unity_launcher_entry_on_unity_running_changed (UnityLauncherEntry* self,
                                               GObject* _inspector,
                                               GParamSpec* pspec)
{
	UnityInspector* inspector = NULL;
	UnityInspector* _tmp0_;
	UnityInspector* _tmp1_;
	gboolean _tmp2_;
	gboolean _tmp3_;
	GError * _inner_error_ = NULL;
	g_return_if_fail (self != NULL);
	g_return_if_fail (_inspector != NULL);
	g_return_if_fail (pspec != NULL);
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_inspector, UNITY_TYPE_INSPECTOR) ? ((UnityInspector*) _inspector) : NULL);
	inspector = _tmp0_;
	_tmp1_ = inspector;
	_tmp2_ = unity_inspector_get_unity_running (_tmp1_);
	_tmp3_ = _tmp2_;
	if (_tmp3_) {
		{
			GDBusConnection* _tmp4_;
			const char* _tmp5_;
			GVariant* _tmp6_;
			GVariant* _tmp7_;
			_tmp4_ = self->priv->_bus;
			_tmp5_ = self->_object_path;
			_tmp6_ = dee_serializable_serialize ((DeeSerializable*) self);
			_tmp7_ = _tmp6_;
			g_dbus_connection_emit_signal (_tmp4_, NULL, (const gchar*) _tmp5_, "com.canonical.Unity.LauncherEntry", "Update", _tmp7_, &_inner_error_);
			_g_variant_unref0 (_tmp7_);
			if (G_UNLIKELY (_inner_error_ != NULL)) {
				goto __catch15_g_error;
			}
		}
		goto __finally15;
		__catch15_g_error:
		{
			GError* e = NULL;
			GError* _tmp8_;
			const gchar* _tmp9_;
			e = _inner_error_;
			_inner_error_ = NULL;
			_tmp8_ = e;
			_tmp9_ = _tmp8_->message;
			g_warning ("unity-launcher.vala:358: Failed to emit com.canonical.Unity.LauncherEn" \
"try.Update on the session bus: %s", _tmp9_);
			_g_error_free0 (e);
		}
		__finally15:
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			_g_object_unref0 (inspector);
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
			return;
		}
	}
	_g_object_unref0 (inspector);
}


const gchar*
unity_launcher_entry_get_app_uri (UnityLauncherEntry* self)
{
	const gchar* result;
	const gchar* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_app_uri;
	result = _tmp0_;
	return result;
}


void
unity_launcher_entry_set_app_uri (UnityLauncherEntry* self,
                                  const gchar* value)
{
	g_return_if_fail (self != NULL);
	if (g_strcmp0 (value, unity_launcher_entry_get_app_uri (self)) != 0) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (value);
		_g_free0 (self->priv->_app_uri);
		self->priv->_app_uri = _tmp0_;
		g_object_notify_by_pspec ((GObject *) self, unity_launcher_entry_properties[UNITY_LAUNCHER_ENTRY_APP_URI_PROPERTY]);
	}
}


gint64
unity_launcher_entry_get_count (UnityLauncherEntry* self)
{
	gint64 result;
	gint64 _tmp0_;
	g_return_val_if_fail (self != NULL, 0LL);
	_tmp0_ = self->priv->_count;
	result = _tmp0_;
	return result;
}


void
unity_launcher_entry_set_count (UnityLauncherEntry* self,
                                gint64 value)
{
	g_return_if_fail (self != NULL);
	if (unity_launcher_entry_get_count (self) != value) {
		self->priv->_count = value;
		g_object_notify_by_pspec ((GObject *) self, unity_launcher_entry_properties[UNITY_LAUNCHER_ENTRY_COUNT_PROPERTY]);
	}
}


gboolean
unity_launcher_entry_get_count_visible (UnityLauncherEntry* self)
{
	gboolean result;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_count_visible;
	result = _tmp0_;
	return result;
}


void
unity_launcher_entry_set_count_visible (UnityLauncherEntry* self,
                                        gboolean value)
{
	g_return_if_fail (self != NULL);
	if (unity_launcher_entry_get_count_visible (self) != value) {
		self->priv->_count_visible = value;
		g_object_notify_by_pspec ((GObject *) self, unity_launcher_entry_properties[UNITY_LAUNCHER_ENTRY_COUNT_VISIBLE_PROPERTY]);
	}
}


gdouble
unity_launcher_entry_get_progress (UnityLauncherEntry* self)
{
	gdouble result;
	gdouble _tmp0_;
	g_return_val_if_fail (self != NULL, 0.0);
	_tmp0_ = self->priv->_progress;
	result = _tmp0_;
	return result;
}


void
unity_launcher_entry_set_progress (UnityLauncherEntry* self,
                                   gdouble value)
{
	g_return_if_fail (self != NULL);
	if (unity_launcher_entry_get_progress (self) != value) {
		self->priv->_progress = value;
		g_object_notify_by_pspec ((GObject *) self, unity_launcher_entry_properties[UNITY_LAUNCHER_ENTRY_PROGRESS_PROPERTY]);
	}
}


gboolean
unity_launcher_entry_get_progress_visible (UnityLauncherEntry* self)
{
	gboolean result;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_progress_visible;
	result = _tmp0_;
	return result;
}


void
unity_launcher_entry_set_progress_visible (UnityLauncherEntry* self,
                                           gboolean value)
{
	g_return_if_fail (self != NULL);
	if (unity_launcher_entry_get_progress_visible (self) != value) {
		self->priv->_progress_visible = value;
		g_object_notify_by_pspec ((GObject *) self, unity_launcher_entry_properties[UNITY_LAUNCHER_ENTRY_PROGRESS_VISIBLE_PROPERTY]);
	}
}


gboolean
unity_launcher_entry_get_urgent (UnityLauncherEntry* self)
{
	gboolean result;
	gboolean _tmp0_;
	g_return_val_if_fail (self != NULL, FALSE);
	_tmp0_ = self->priv->_urgent;
	result = _tmp0_;
	return result;
}


void
unity_launcher_entry_set_urgent (UnityLauncherEntry* self,
                                 gboolean value)
{
	g_return_if_fail (self != NULL);
	if (unity_launcher_entry_get_urgent (self) != value) {
		self->priv->_urgent = value;
		g_object_notify_by_pspec ((GObject *) self, unity_launcher_entry_properties[UNITY_LAUNCHER_ENTRY_URGENT_PROPERTY]);
	}
}


DbusmenuMenuitem*
unity_launcher_entry_get_quicklist (UnityLauncherEntry* self)
{
	DbusmenuMenuitem* result;
	DbusmenuMenuitem* _tmp0_;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->_quicklist;
	result = _tmp0_;
	return result;
}


void
unity_launcher_entry_set_quicklist (UnityLauncherEntry* self,
                                    DbusmenuMenuitem* value)
{
	DbusmenuMenuitem* _tmp0_;
	DbusmenuMenuitem* _tmp1_;
	g_return_if_fail (self != NULL);
	_tmp0_ = _g_object_ref0 (value);
	_g_object_unref0 (self->priv->_quicklist);
	self->priv->_quicklist = _tmp0_;
	_tmp1_ = self->priv->_quicklist;
	if (_tmp1_ != NULL) {
		const char* _tmp2_;
		DbusmenuServer* _tmp3_;
		DbusmenuServer* _tmp4_;
		DbusmenuMenuitem* _tmp5_;
		_tmp2_ = self->_object_path;
		_tmp3_ = dbusmenu_server_new ((const gchar*) _tmp2_);
		_g_object_unref0 (self->priv->_quicklist_server);
		self->priv->_quicklist_server = _tmp3_;
		_tmp4_ = self->priv->_quicklist_server;
		_tmp5_ = self->priv->_quicklist;
		g_object_set (_tmp4_, "root-node", _tmp5_, NULL);
	}
	g_object_notify_by_pspec ((GObject *) self, unity_launcher_entry_properties[UNITY_LAUNCHER_ENTRY_QUICKLIST_PROPERTY]);
}


static void
_unity_launcher_entry_on_unity_running_changed_g_object_notify (GObject* _sender,
                                                                GParamSpec* pspec,
                                                                gpointer self)
{
	unity_launcher_entry_on_unity_running_changed ((UnityLauncherEntry*) self, _sender, pspec);
}


static void
_unity_launcher_entry_queue_property_notification_g_object_notify (GObject* _sender,
                                                                   GParamSpec* pspec,
                                                                   gpointer self)
{
	unity_launcher_entry_queue_property_notification ((UnityLauncherEntry*) self, _sender, pspec);
}


static GObject *
unity_launcher_entry_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	UnityLauncherEntry * self;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	GError * _inner_error_ = NULL;
	parent_class = G_OBJECT_CLASS (unity_launcher_entry_parent_class);
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_LAUNCHER_ENTRY, UnityLauncherEntry);
	_tmp0_ = g_str_hash;
	_tmp1_ = g_str_equal;
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, _g_variant_unref0_);
	_g_hash_table_unref0 (self->priv->_queued_properties);
	self->priv->_queued_properties = _tmp2_;
	_g_object_unref0 (self->priv->_quicklist_server);
	self->priv->_quicklist_server = NULL;
	self->priv->_property_source_id = (guint) 0;
	{
		GDBusConnection* _tmp3_ = NULL;
		GDBusConnection* _tmp4_;
		GDBusConnection* _tmp5_;
		const gchar* _tmp6_;
		gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
		char* _tmp11_;
		GDBusConnection* _tmp12_;
		const char* _tmp13_;
		UnityLauncherEntryDBusImpl* _tmp14_;
		UnityInspector* inspector = NULL;
		UnityInspector* _tmp15_;
		UnityInspector* _tmp16_;
		UnityInspector* _tmp17_;
		_tmp4_ = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &_inner_error_);
		_tmp3_ = _tmp4_;
		if (G_UNLIKELY (_inner_error_ != NULL)) {
			if (_inner_error_->domain == G_IO_ERROR) {
				goto __catch16_g_io_error;
			}
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
			g_clear_error (&_inner_error_);
		}
		_tmp5_ = _tmp3_;
		_tmp3_ = NULL;
		_g_object_unref0 (self->priv->_bus);
		self->priv->_bus = _tmp5_;
		_tmp6_ = self->priv->_app_uri;
		_tmp7_ = g_strdup_printf ("%u", g_str_hash (_tmp6_));
		_tmp8_ = _tmp7_;
		_tmp9_ = g_strconcat ("/com/canonical/unity/launcherentry/", _tmp8_, NULL);
		_tmp10_ = _tmp9_;
		_tmp11_ = g_strdup (_tmp10_);
		_g_free0 (self->_object_path);
		self->_object_path = _tmp11_;
		_g_free0 (_tmp10_);
		_g_free0 (_tmp8_);
		_tmp12_ = self->priv->_bus;
		_tmp13_ = self->_object_path;
		_tmp14_ = unity_launcher_entry_dbus_impl_new (_tmp12_, _tmp13_, self);
		_g_object_unref0 (self->priv->_dbus_impl);
		self->priv->_dbus_impl = _tmp14_;
		_tmp15_ = unity_inspector_get_default ();
		_tmp16_ = _g_object_ref0 (_tmp15_);
		inspector = _tmp16_;
		_tmp17_ = inspector;
		g_signal_connect_object ((GObject*) _tmp17_, "notify::unity-running", (GCallback) _unity_launcher_entry_on_unity_running_changed_g_object_notify, self, 0);
		g_signal_connect_object ((GObject*) self, "notify", (GCallback) _unity_launcher_entry_queue_property_notification_g_object_notify, self, 0);
		_g_object_unref0 (inspector);
		_g_object_unref0 (_tmp3_);
	}
	goto __finally16;
	__catch16_g_io_error:
	{
		GError* e = NULL;
		GError* _tmp18_;
		const gchar* _tmp19_;
		e = _inner_error_;
		_inner_error_ = NULL;
		_tmp18_ = e;
		_tmp19_ = _tmp18_->message;
		g_critical ("unity-launcher.vala:157: Unable to connect to session bus: %s", _tmp19_);
		_g_error_free0 (e);
	}
	__finally16:
	if (G_UNLIKELY (_inner_error_ != NULL)) {
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
		g_clear_error (&_inner_error_);
	}
	return obj;
}


static GObject*
_unity_launcher_entry_parse_serializable_dee_serializable_parse_func (GVariant* data)
{
	GObject* result;
	result = unity_launcher_entry_parse_serializable (data);
	return result;
}


static void
unity_launcher_entry_class_init (UnityLauncherEntryClass * klass)
{
	GVariantType* _tmp0_;
	GVariantType* _tmp1_;
	unity_launcher_entry_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityLauncherEntryPrivate));
	G_OBJECT_CLASS (klass)->get_property = _vala_unity_launcher_entry_get_property;
	G_OBJECT_CLASS (klass)->set_property = _vala_unity_launcher_entry_set_property;
	G_OBJECT_CLASS (klass)->constructor = unity_launcher_entry_constructor;
	G_OBJECT_CLASS (klass)->finalize = unity_launcher_entry_finalize;
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_LAUNCHER_ENTRY_APP_URI_PROPERTY, unity_launcher_entry_properties[UNITY_LAUNCHER_ENTRY_APP_URI_PROPERTY] = g_param_spec_string ("app-uri", "app-uri", "app-uri", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_LAUNCHER_ENTRY_COUNT_PROPERTY, unity_launcher_entry_properties[UNITY_LAUNCHER_ENTRY_COUNT_PROPERTY] = g_param_spec_int64 ("count", "count", "count", G_MININT64, G_MAXINT64, (gint64) 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_LAUNCHER_ENTRY_COUNT_VISIBLE_PROPERTY, unity_launcher_entry_properties[UNITY_LAUNCHER_ENTRY_COUNT_VISIBLE_PROPERTY] = g_param_spec_boolean ("count-visible", "count-visible", "count-visible", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_LAUNCHER_ENTRY_PROGRESS_PROPERTY, unity_launcher_entry_properties[UNITY_LAUNCHER_ENTRY_PROGRESS_PROPERTY] = g_param_spec_double ("progress", "progress", "progress", -G_MAXDOUBLE, G_MAXDOUBLE, 0.0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_LAUNCHER_ENTRY_PROGRESS_VISIBLE_PROPERTY, unity_launcher_entry_properties[UNITY_LAUNCHER_ENTRY_PROGRESS_VISIBLE_PROPERTY] = g_param_spec_boolean ("progress-visible", "progress-visible", "progress-visible", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_LAUNCHER_ENTRY_URGENT_PROPERTY, unity_launcher_entry_properties[UNITY_LAUNCHER_ENTRY_URGENT_PROPERTY] = g_param_spec_boolean ("urgent", "urgent", "urgent", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	g_object_class_install_property (G_OBJECT_CLASS (klass), UNITY_LAUNCHER_ENTRY_QUICKLIST_PROPERTY, unity_launcher_entry_properties[UNITY_LAUNCHER_ENTRY_QUICKLIST_PROPERTY] = g_param_spec_object ("quicklist", "quicklist", "quicklist", dbusmenu_menuitem_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
	_tmp0_ = g_variant_type_new ("(sa{sv})");
	_tmp1_ = _tmp0_;
	dee_serializable_register_parser (UNITY_TYPE_LAUNCHER_ENTRY, _tmp1_, _unity_launcher_entry_parse_serializable_dee_serializable_parse_func);
	_g_variant_type_free0 (_tmp1_);
}


static void
unity_launcher_entry_dee_serializable_interface_init (DeeSerializableIface * iface)
{
	unity_launcher_entry_dee_serializable_parent_iface = g_type_interface_peek_parent (iface);
	iface->serialize = (GVariant* (*) (DeeSerializable *)) unity_launcher_entry_real_serialize;
}


static void
unity_launcher_entry_instance_init (UnityLauncherEntry * self)
{
	self->priv = UNITY_LAUNCHER_ENTRY_GET_PRIVATE (self);
	self->priv->_count = (gint64) 0;
	self->priv->_count_visible = FALSE;
	self->priv->_progress = 0.0;
	self->priv->_progress_visible = FALSE;
	self->priv->_urgent = FALSE;
}


static void
unity_launcher_entry_finalize (GObject * obj)
{
	UnityLauncherEntry * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_LAUNCHER_ENTRY, UnityLauncherEntry);
	_g_free0 (self->priv->_app_uri);
	_g_object_unref0 (self->priv->_quicklist);
	_g_hash_table_unref0 (self->priv->_queued_properties);
	_g_object_unref0 (self->priv->_quicklist_server);
	_g_object_unref0 (self->priv->_bus);
	_g_object_unref0 (self->priv->_dbus_impl);
	_g_free0 (self->_object_path);
	G_OBJECT_CLASS (unity_launcher_entry_parent_class)->finalize (obj);
}


/**
   * This class represents your control point for your application's icon
   * in the Unity Launcher. You can control properties such as a counter,
   * progress, or emblem that will be overlaid on your application's launcher
   * icon. You can also set a quicklist on it by setting the "quicklist"
   * property to point at the Dbusmenu.Menuitem which is the root of your
   * quicklist.
   *
   * Create a LauncherEntry by giving your desktop file id to the constructor
   * (eg. "myapp.desktop").
   */
GType
unity_launcher_entry_get_type (void)
{
	static volatile gsize unity_launcher_entry_type_id__volatile = 0;
	if (g_once_init_enter (&unity_launcher_entry_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityLauncherEntryClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_launcher_entry_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityLauncherEntry), 0, (GInstanceInitFunc) unity_launcher_entry_instance_init, NULL };
		static const GInterfaceInfo dee_serializable_info = { (GInterfaceInitFunc) unity_launcher_entry_dee_serializable_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		GType unity_launcher_entry_type_id;
		unity_launcher_entry_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityLauncherEntry", &g_define_type_info, 0);
		g_type_add_interface_static (unity_launcher_entry_type_id, dee_serializable_get_type (), &dee_serializable_info);
		g_once_init_leave (&unity_launcher_entry_type_id__volatile, unity_launcher_entry_type_id);
	}
	return unity_launcher_entry_type_id__volatile;
}


static void
_vala_unity_launcher_entry_get_property (GObject * object,
                                         guint property_id,
                                         GValue * value,
                                         GParamSpec * pspec)
{
	UnityLauncherEntry * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_LAUNCHER_ENTRY, UnityLauncherEntry);
	switch (property_id) {
		case UNITY_LAUNCHER_ENTRY_APP_URI_PROPERTY:
		g_value_set_string (value, unity_launcher_entry_get_app_uri (self));
		break;
		case UNITY_LAUNCHER_ENTRY_COUNT_PROPERTY:
		g_value_set_int64 (value, unity_launcher_entry_get_count (self));
		break;
		case UNITY_LAUNCHER_ENTRY_COUNT_VISIBLE_PROPERTY:
		g_value_set_boolean (value, unity_launcher_entry_get_count_visible (self));
		break;
		case UNITY_LAUNCHER_ENTRY_PROGRESS_PROPERTY:
		g_value_set_double (value, unity_launcher_entry_get_progress (self));
		break;
		case UNITY_LAUNCHER_ENTRY_PROGRESS_VISIBLE_PROPERTY:
		g_value_set_boolean (value, unity_launcher_entry_get_progress_visible (self));
		break;
		case UNITY_LAUNCHER_ENTRY_URGENT_PROPERTY:
		g_value_set_boolean (value, unity_launcher_entry_get_urgent (self));
		break;
		case UNITY_LAUNCHER_ENTRY_QUICKLIST_PROPERTY:
		g_value_set_object (value, unity_launcher_entry_get_quicklist (self));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static void
_vala_unity_launcher_entry_set_property (GObject * object,
                                         guint property_id,
                                         const GValue * value,
                                         GParamSpec * pspec)
{
	UnityLauncherEntry * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, UNITY_TYPE_LAUNCHER_ENTRY, UnityLauncherEntry);
	switch (property_id) {
		case UNITY_LAUNCHER_ENTRY_APP_URI_PROPERTY:
		unity_launcher_entry_set_app_uri (self, g_value_get_string (value));
		break;
		case UNITY_LAUNCHER_ENTRY_COUNT_PROPERTY:
		unity_launcher_entry_set_count (self, g_value_get_int64 (value));
		break;
		case UNITY_LAUNCHER_ENTRY_COUNT_VISIBLE_PROPERTY:
		unity_launcher_entry_set_count_visible (self, g_value_get_boolean (value));
		break;
		case UNITY_LAUNCHER_ENTRY_PROGRESS_PROPERTY:
		unity_launcher_entry_set_progress (self, g_value_get_double (value));
		break;
		case UNITY_LAUNCHER_ENTRY_PROGRESS_VISIBLE_PROPERTY:
		unity_launcher_entry_set_progress_visible (self, g_value_get_boolean (value));
		break;
		case UNITY_LAUNCHER_ENTRY_URGENT_PROPERTY:
		unity_launcher_entry_set_urgent (self, g_value_get_boolean (value));
		break;
		case UNITY_LAUNCHER_ENTRY_QUICKLIST_PROPERTY:
		unity_launcher_entry_set_quicklist (self, g_value_get_object (value));
		break;
		default:
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
		break;
	}
}


static GVariant*
_variant_new9 (gint64 value)
{
	return g_variant_ref_sink (g_variant_new_int64 (value));
}


static GVariant*
_variant_new10 (gboolean value)
{
	return g_variant_ref_sink (g_variant_new_boolean (value));
}


static GVariant*
_variant_new11 (gdouble value)
{
	return g_variant_ref_sink (g_variant_new_double (value));
}


static GVariant*
_variant_new12 (gboolean value)
{
	return g_variant_ref_sink (g_variant_new_boolean (value));
}


static GVariant*
_variant_new13 (gboolean value)
{
	return g_variant_ref_sink (g_variant_new_boolean (value));
}


static GVariant*
_variant_new14 (const char* value)
{
	return g_variant_ref_sink (g_variant_new_object_path (value));
}


GHashTable*
unity_collect_launcher_entry_properties (UnityLauncherEntry* l)
{
	GHashTable* result = NULL;
	GHashTable* props = NULL;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	GHashTable* _tmp3_;
	gchar* _tmp4_;
	gint64 _tmp5_;
	gint64 _tmp6_;
	GVariant* _tmp7_;
	GHashTable* _tmp8_;
	gchar* _tmp9_;
	gboolean _tmp10_;
	gboolean _tmp11_;
	GVariant* _tmp12_;
	GHashTable* _tmp13_;
	gchar* _tmp14_;
	gdouble _tmp15_;
	gdouble _tmp16_;
	GVariant* _tmp17_;
	GHashTable* _tmp18_;
	gchar* _tmp19_;
	gboolean _tmp20_;
	gboolean _tmp21_;
	GVariant* _tmp22_;
	GHashTable* _tmp23_;
	gchar* _tmp24_;
	gboolean _tmp25_;
	gboolean _tmp26_;
	GVariant* _tmp27_;
	DbusmenuMenuitem* _tmp28_;
	DbusmenuMenuitem* _tmp29_;
	g_return_val_if_fail (l != NULL, NULL);
	_tmp0_ = g_str_hash;
	_tmp1_ = g_str_equal;
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, _g_variant_unref0_);
	props = _tmp2_;
	_tmp3_ = props;
	_tmp4_ = g_strdup ("count");
	_tmp5_ = unity_launcher_entry_get_count (l);
	_tmp6_ = _tmp5_;
	_tmp7_ = _variant_new9 (_tmp6_);
	g_hash_table_insert (_tmp3_, _tmp4_, _tmp7_);
	_tmp8_ = props;
	_tmp9_ = g_strdup ("count-visible");
	_tmp10_ = unity_launcher_entry_get_count_visible (l);
	_tmp11_ = _tmp10_;
	_tmp12_ = _variant_new10 (_tmp11_);
	g_hash_table_insert (_tmp8_, _tmp9_, _tmp12_);
	_tmp13_ = props;
	_tmp14_ = g_strdup ("progress");
	_tmp15_ = unity_launcher_entry_get_progress (l);
	_tmp16_ = _tmp15_;
	_tmp17_ = _variant_new11 (_tmp16_);
	g_hash_table_insert (_tmp13_, _tmp14_, _tmp17_);
	_tmp18_ = props;
	_tmp19_ = g_strdup ("progress-visible");
	_tmp20_ = unity_launcher_entry_get_progress_visible (l);
	_tmp21_ = _tmp20_;
	_tmp22_ = _variant_new12 (_tmp21_);
	g_hash_table_insert (_tmp18_, _tmp19_, _tmp22_);
	_tmp23_ = props;
	_tmp24_ = g_strdup ("urgent");
	_tmp25_ = unity_launcher_entry_get_urgent (l);
	_tmp26_ = _tmp25_;
	_tmp27_ = _variant_new13 (_tmp26_);
	g_hash_table_insert (_tmp23_, _tmp24_, _tmp27_);
	_tmp28_ = unity_launcher_entry_get_quicklist (l);
	_tmp29_ = _tmp28_;
	if (_tmp29_ != NULL) {
		GHashTable* _tmp30_;
		gchar* _tmp31_;
		const char* _tmp32_;
		GVariant* _tmp33_;
		_tmp30_ = props;
		_tmp31_ = g_strdup ("quicklist");
		_tmp32_ = l->_object_path;
		_tmp33_ = _variant_new14 (_tmp32_);
		g_hash_table_insert (_tmp30_, _tmp31_, _tmp33_);
	}
	result = props;
	return result;
}


static void
_unity_launcher_favorites_reset_fav_cache_g_settings_changed (GSettings* _sender,
                                                              const gchar* key,
                                                              gpointer self)
{
	unity_launcher_favorites_reset_fav_cache ((UnityLauncherFavorites*) self);
}


static UnityLauncherFavorites*
unity_launcher_favorites_construct (GType object_type)
{
	UnityLauncherFavorites * self = NULL;
	GHashFunc _tmp0_;
	GEqualFunc _tmp1_;
	GHashTable* _tmp2_;
	GSettingsSchema* schema_src = NULL;
	GSettingsSchemaSource* _tmp3_;
	GSettingsSchema* _tmp4_;
	GSettingsSchema* _tmp5_;
	self = (UnityLauncherFavorites*) g_object_new (object_type, NULL);
	_tmp0_ = g_str_hash;
	_tmp1_ = g_str_equal;
	_tmp2_ = g_hash_table_new_full (_tmp0_, _tmp1_, _g_free0_, _g_object_unref0_);
	_g_hash_table_unref0 (self->priv->fav_cache);
	self->priv->fav_cache = _tmp2_;
	_tmp3_ = g_settings_schema_source_get_default ();
	_tmp4_ = g_settings_schema_source_lookup (_tmp3_, UNITY_LAUNCHER_FAVORITES_LAUNCHER_SCHEMA_NAME, FALSE);
	schema_src = _tmp4_;
	_tmp5_ = schema_src;
	if (_tmp5_ != NULL) {
		GSettingsSchema* _tmp6_;
		GSettings* _tmp7_;
		GSettings* _tmp8_;
		_tmp6_ = schema_src;
		_tmp7_ = g_settings_new_full (_tmp6_, NULL, NULL);
		_g_object_unref0 (self->priv->settings);
		self->priv->settings = _tmp7_;
		unity_launcher_favorites_reset_fav_cache (self);
		_tmp8_ = self->priv->settings;
		g_signal_connect_object (_tmp8_, "changed::favorites", (GCallback) _unity_launcher_favorites_reset_fav_cache_g_settings_changed, self, 0);
	} else {
		g_warning ("unity-launcher.vala:407: Schema \"%s\" is not installed!", UNITY_LAUNCHER_FAVORITES_LAUNCHER_SCHEMA_NAME);
	}
	_g_settings_schema_unref0 (schema_src);
	return self;
}


static UnityLauncherFavorites*
unity_launcher_favorites_new (void)
{
	return unity_launcher_favorites_construct (UNITY_TYPE_LAUNCHER_FAVORITES);
}


static gint
string_index_of (const gchar* self,
                 const gchar* needle,
                 gint start_index)
{
	gint result = 0;
	gchar* _result_ = NULL;
	gchar* _tmp0_;
	gchar* _tmp1_;
	g_return_val_if_fail (self != NULL, 0);
	g_return_val_if_fail (needle != NULL, 0);
	_tmp0_ = strstr (((gchar*) self) + start_index, (gchar*) needle);
	_result_ = _tmp0_;
	_tmp1_ = _result_;
	if (_tmp1_ != NULL) {
		gchar* _tmp2_;
		_tmp2_ = _result_;
		result = (gint) (_tmp2_ - ((gchar*) self));
		return result;
	} else {
		result = -1;
		return result;
	}
}


static void
_vala_array_add1 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (gchar*, *array, (*size) + 1);
	}
	(*array)[(*length)++] = value;
	(*array)[*length] = NULL;
}


static void
unity_launcher_favorites_reset_fav_cache (UnityLauncherFavorites* self)
{
	GHashTable* _tmp0_;
	gchar** _tmp1_;
	GSettings* _tmp2_;
	gchar** _tmp3_;
	gchar** _tmp4_;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->priv->fav_cache;
	g_hash_table_remove_all (_tmp0_);
	_tmp1_ = g_new0 (gchar*, 0 + 1);
	self->priv->fav_list = (_vala_array_free (self->priv->fav_list, self->priv->fav_list_length1, (GDestroyNotify) g_free), NULL);
	self->priv->fav_list = _tmp1_;
	self->priv->fav_list_length1 = 0;
	self->priv->_fav_list_size_ = self->priv->fav_list_length1;
	_tmp2_ = self->priv->settings;
	_tmp4_ = _tmp3_ = g_settings_get_strv (_tmp2_, "favorites");
	{
		gchar** id_collection = NULL;
		gint id_collection_length1 = 0;
		gint _id_collection_size_ = 0;
		gint id_it = 0;
		id_collection = _tmp4_;
		id_collection_length1 = _vala_array_length (_tmp3_);
		for (id_it = 0; id_it < _vala_array_length (_tmp3_); id_it = id_it + 1) {
			gchar* _tmp5_;
			gchar* id = NULL;
			_tmp5_ = g_strdup (id_collection[id_it]);
			id = _tmp5_;
			{
				const gchar* _tmp6_;
				gchar** _tmp17_;
				gint _tmp17__length1;
				const gchar* _tmp18_;
				gchar* _tmp19_;
				GHashTable* _tmp20_;
				const gchar* _tmp21_;
				gchar* _tmp22_;
				_tmp6_ = id;
				if (g_str_has_prefix (_tmp6_, UNITY_APP_PREFIX)) {
					const gchar* _tmp7_;
					gint _tmp8_;
					gint _tmp9_;
					gchar* _tmp10_;
					_tmp7_ = id;
					_tmp8_ = strlen (UNITY_APP_PREFIX);
					_tmp9_ = _tmp8_;
					_tmp10_ = string_substring (_tmp7_, (glong) _tmp9_, (glong) -1);
					_g_free0 (id);
					id = _tmp10_;
				} else {
					const gchar* _tmp11_;
					_tmp11_ = id;
					if (g_str_has_prefix (_tmp11_, UNITY_FILE_PREFIX)) {
						const gchar* _tmp12_;
						gint _tmp13_;
						gint _tmp14_;
						gchar* _tmp15_;
						_tmp12_ = id;
						_tmp13_ = strlen (UNITY_FILE_PREFIX);
						_tmp14_ = _tmp13_;
						_tmp15_ = string_substring (_tmp12_, (glong) _tmp14_, (glong) -1);
						_g_free0 (id);
						id = _tmp15_;
					} else {
						const gchar* _tmp16_;
						_tmp16_ = id;
						if (string_index_of (_tmp16_, "://", 0) != -1) {
							_g_free0 (id);
							continue;
						}
					}
				}
				_tmp17_ = self->priv->fav_list;
				_tmp17__length1 = self->priv->fav_list_length1;
				_tmp18_ = id;
				_tmp19_ = g_strdup (_tmp18_);
				_vala_array_add1 (&self->priv->fav_list, &self->priv->fav_list_length1, &self->priv->_fav_list_size_, _tmp19_);
				_tmp20_ = self->priv->fav_cache;
				_tmp21_ = id;
				_tmp22_ = g_strdup (_tmp21_);
				g_hash_table_insert (_tmp20_, _tmp22_, NULL);
				_g_free0 (id);
			}
		}
		id_collection = (_vala_array_free (id_collection, id_collection_length1, (GDestroyNotify) g_free), NULL);
	}
	g_signal_emit (self, unity_launcher_favorites_signals[UNITY_LAUNCHER_FAVORITES_CHANGED_SIGNAL], 0);
}


/**
     * Get the default singleton Unity.LauncherFavorites instance, creating it
     * dynamically if necessary.
     *
     * @return The singleton Unity.LauncherFavorites.
     *         If calling from C do not free this instance.
     *
     */
UnityLauncherFavorites*
unity_launcher_favorites_get_default (void)
{
	UnityLauncherFavorites* result = NULL;
	UnityLauncherFavorites* _tmp0_;
	UnityLauncherFavorites* _tmp2_;
	_tmp0_ = unity_launcher_favorites_singleton;
	if (_tmp0_ == NULL) {
		UnityLauncherFavorites* _tmp1_;
		_tmp1_ = unity_launcher_favorites_new ();
		_g_object_unref0 (unity_launcher_favorites_singleton);
		unity_launcher_favorites_singleton = _tmp1_;
	}
	_tmp2_ = unity_launcher_favorites_singleton;
	result = _tmp2_;
	return result;
}


gboolean
unity_launcher_favorites_has_app_info (UnityLauncherFavorites* self,
                                       GAppInfo* appinfo)
{
	gboolean result = FALSE;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	g_return_val_if_fail (self != NULL, FALSE);
	g_return_val_if_fail (appinfo != NULL, FALSE);
	_tmp0_ = g_app_info_get_id (appinfo);
	if (_tmp0_ == NULL) {
		g_critical ("unity-launcher.vala:451: Can not look up favorite for AppInfo with NUL" \
"L id");
		result = FALSE;
		return result;
	}
	_tmp1_ = g_app_info_get_id (appinfo);
	result = unity_launcher_favorites_has_app_id (self, _tmp1_);
	return result;
}


gboolean
unity_launcher_favorites_has_app_id (UnityLauncherFavorites* self,
                                     const gchar* app_id)
{
	gboolean result = FALSE;
	GHashTable* _tmp0_;
	gboolean _tmp1_;
	g_return_val_if_fail (self != NULL, FALSE);
	g_return_val_if_fail (app_id != NULL, FALSE);
	_tmp0_ = self->priv->fav_cache;
	_tmp1_ = g_hash_table_lookup_extended (_tmp0_, app_id, NULL, NULL);
	result = _tmp1_;
	return result;
}


GAppInfo*
unity_launcher_favorites_lookup (UnityLauncherFavorites* self,
                                 const gchar* app_id)
{
	GAppInfo* result = NULL;
	GAppInfo* appinfo = NULL;
	gboolean has_id = FALSE;
	GHashTable* _tmp0_;
	gconstpointer _tmp1_ = NULL;
	gboolean _tmp2_;
	GAppInfo* _tmp3_;
	gboolean _tmp4_;
	g_return_val_if_fail (self != NULL, NULL);
	g_return_val_if_fail (app_id != NULL, NULL);
	_tmp0_ = self->priv->fav_cache;
	_tmp2_ = g_hash_table_lookup_extended (_tmp0_, app_id, NULL, &_tmp1_);
	_g_object_unref0 (appinfo);
	_tmp3_ = _g_object_ref0 (_tmp1_);
	appinfo = _tmp3_;
	has_id = _tmp2_;
	_tmp4_ = has_id;
	if (_tmp4_) {
		GAppInfo* _tmp5_;
		UnityAppInfoManager* appman = NULL;
		UnityAppInfoManager* _tmp6_;
		UnityAppInfoManager* _tmp7_;
		GAppInfo* _tmp8_;
		GHashTable* _tmp9_;
		gchar* _tmp10_;
		GAppInfo* _tmp11_;
		GAppInfo* _tmp12_;
		GAppInfo* _tmp13_;
		_tmp5_ = appinfo;
		if (_tmp5_ != NULL) {
			result = appinfo;
			return result;
		}
		_tmp6_ = unity_app_info_manager_get_default ();
		appman = _tmp6_;
		_tmp7_ = appman;
		_tmp8_ = unity_app_info_manager_lookup (_tmp7_, app_id);
		_g_object_unref0 (appinfo);
		appinfo = _tmp8_;
		_tmp9_ = self->priv->fav_cache;
		_tmp10_ = g_strdup (app_id);
		_tmp11_ = appinfo;
		_tmp12_ = _g_object_ref0 (_tmp11_);
		g_hash_table_insert (_tmp9_, _tmp10_, _tmp12_);
		_tmp13_ = appinfo;
		if (_tmp13_ == NULL) {
			g_critical ("unity-launcher.vala:483: Can't find AppInfo for favorite '%s'", app_id);
			result = NULL;
			_g_object_unref0 (appman);
			_g_object_unref0 (appinfo);
			return result;
		}
		result = appinfo;
		_g_object_unref0 (appman);
		return result;
	}
	result = NULL;
	_g_object_unref0 (appinfo);
	return result;
}


static gchar**
_vala_array_dup2 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
	result = g_new0 (gchar*, length + 1);
	for (i = 0; i < length; i++) {
		gchar* _tmp0_;
		_tmp0_ = g_strdup (self[i]);
		result[i] = _tmp0_;
	}
	return result;
}


gchar**
unity_launcher_favorites_enumerate_ids (UnityLauncherFavorites* self,
                                        int* result_length1)
{
	gchar** result = NULL;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
	gchar** _tmp2_;
	gint _tmp2__length1;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->priv->fav_list;
	_tmp0__length1 = self->priv->fav_list_length1;
	_tmp1_ = (_tmp0_ != NULL) ? _vala_array_dup2 (_tmp0_, _tmp0__length1) : ((gpointer) _tmp0_);
	_tmp1__length1 = _tmp0__length1;
	_tmp2_ = _tmp1_;
	_tmp2__length1 = _tmp1__length1;
	if (result_length1) {
		*result_length1 = _tmp2__length1;
	}
	result = _tmp2_;
	return result;
}


GAppInfo**
unity_launcher_favorites_enumerate_app_infos (UnityLauncherFavorites* self,
                                              int* result_length1)
{
	GAppInfo** result = NULL;
	gint i = 0;
	GAppInfo** infos = NULL;
	GHashTable* _tmp0_;
	GAppInfo** _tmp1_;
	gint infos_length1;
	gint _infos_size_;
	gchar** _tmp2_;
	gint _tmp2__length1;
	GAppInfo** _tmp12_;
	gint _tmp12__length1;
	g_return_val_if_fail (self != NULL, NULL);
	i = 0;
	_tmp0_ = self->priv->fav_cache;
	_tmp1_ = g_new0 (GAppInfo*, g_hash_table_size (_tmp0_) + 1);
	infos = _tmp1_;
	infos_length1 = g_hash_table_size (_tmp0_);
	_infos_size_ = infos_length1;
	_tmp2_ = self->priv->fav_list;
	_tmp2__length1 = self->priv->fav_list_length1;
	{
		gchar** id_collection = NULL;
		gint id_collection_length1 = 0;
		gint _id_collection_size_ = 0;
		gint id_it = 0;
		id_collection = _tmp2_;
		id_collection_length1 = _tmp2__length1;
		for (id_it = 0; id_it < _tmp2__length1; id_it = id_it + 1) {
			gchar* _tmp3_;
			gchar* id = NULL;
			_tmp3_ = g_strdup (id_collection[id_it]);
			id = _tmp3_;
			{
				GAppInfo* appinfo = NULL;
				const gchar* _tmp4_;
				GAppInfo* _tmp5_;
				GAppInfo** _tmp6_;
				gint _tmp6__length1;
				gint _tmp7_;
				GAppInfo* _tmp8_;
				GAppInfo* _tmp9_;
				GAppInfo* _tmp10_;
				gint _tmp11_;
				_tmp4_ = id;
				_tmp5_ = unity_launcher_favorites_lookup (self, _tmp4_);
				appinfo = _tmp5_;
				_tmp6_ = infos;
				_tmp6__length1 = infos_length1;
				_tmp7_ = i;
				_tmp8_ = appinfo;
				_tmp9_ = _g_object_ref0 (_tmp8_);
				_g_object_unref0 (_tmp6_[_tmp7_]);
				_tmp6_[_tmp7_] = _tmp9_;
				_tmp10_ = _tmp6_[_tmp7_];
				_tmp11_ = i;
				i = _tmp11_ + 1;
				_g_object_unref0 (appinfo);
				_g_free0 (id);
			}
		}
	}
	_tmp12_ = infos;
	_tmp12__length1 = infos_length1;
	if (result_length1) {
		*result_length1 = _tmp12__length1;
	}
	result = _tmp12_;
	return result;
}


static void
unity_launcher_favorites_class_init (UnityLauncherFavoritesClass * klass)
{
	unity_launcher_favorites_parent_class = g_type_class_peek_parent (klass);
	g_type_class_add_private (klass, sizeof (UnityLauncherFavoritesPrivate));
	G_OBJECT_CLASS (klass)->finalize = unity_launcher_favorites_finalize;
	unity_launcher_favorites_signals[UNITY_LAUNCHER_FAVORITES_CHANGED_SIGNAL] = g_signal_new ("changed", UNITY_TYPE_LAUNCHER_FAVORITES, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
}


static void
unity_launcher_favorites_instance_init (UnityLauncherFavorites * self)
{
	self->priv = UNITY_LAUNCHER_FAVORITES_GET_PRIVATE (self);
}


static void
unity_launcher_favorites_finalize (GObject * obj)
{
	UnityLauncherFavorites * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, UNITY_TYPE_LAUNCHER_FAVORITES, UnityLauncherFavorites);
	_g_object_unref0 (self->priv->settings);
	_g_hash_table_unref0 (self->priv->fav_cache);
	self->priv->fav_list = (_vala_array_free (self->priv->fav_list, self->priv->fav_list_length1, (GDestroyNotify) g_free), NULL);
	G_OBJECT_CLASS (unity_launcher_favorites_parent_class)->finalize (obj);
}


GType
unity_launcher_favorites_get_type (void)
{
	static volatile gsize unity_launcher_favorites_type_id__volatile = 0;
	if (g_once_init_enter (&unity_launcher_favorites_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (UnityLauncherFavoritesClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) unity_launcher_favorites_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (UnityLauncherFavorites), 0, (GInstanceInitFunc) unity_launcher_favorites_instance_init, NULL };
		GType unity_launcher_favorites_type_id;
		unity_launcher_favorites_type_id = g_type_register_static (G_TYPE_OBJECT, "UnityLauncherFavorites", &g_define_type_info, 0);
		g_once_init_leave (&unity_launcher_favorites_type_id__volatile, unity_launcher_favorites_type_id);
	}
	return unity_launcher_favorites_type_id__volatile;
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



