/* NoteChild.c generated by valac 0.40.11, the Vala compiler
 * generated from NoteChild.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <gtksourceview/gtksource.h>
#include <granite.h>
#include <glib/gi18n-lib.h>


#define WIDGETS_TYPE_NOTE_CHILD (widgets_note_child_get_type ())
#define WIDGETS_NOTE_CHILD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_NOTE_CHILD, WidgetsNoteChild))
#define WIDGETS_NOTE_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_NOTE_CHILD, WidgetsNoteChildClass))
#define WIDGETS_IS_NOTE_CHILD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_NOTE_CHILD))
#define WIDGETS_IS_NOTE_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_NOTE_CHILD))
#define WIDGETS_NOTE_CHILD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_NOTE_CHILD, WidgetsNoteChildClass))

typedef struct _WidgetsNoteChild WidgetsNoteChild;
typedef struct _WidgetsNoteChildClass WidgetsNoteChildClass;
typedef struct _WidgetsNoteChildPrivate WidgetsNoteChildPrivate;
enum  {
	WIDGETS_NOTE_CHILD_0_PROPERTY,
	WIDGETS_NOTE_CHILD_NUM_PROPERTIES
};
static GParamSpec* widgets_note_child_properties[WIDGETS_NOTE_CHILD_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _WidgetsNoteChild {
	GtkFlowBoxChild parent_instance;
	WidgetsNoteChildPrivate * priv;
};

struct _WidgetsNoteChildClass {
	GtkFlowBoxChildClass parent_class;
};

struct _WidgetsNoteChildPrivate {
	GtkEntry* title_entry;
	GtkSourceView* source_view;
};


static gpointer widgets_note_child_parent_class = NULL;

GType widgets_note_child_get_type (void) G_GNUC_CONST;
#define WIDGETS_NOTE_CHILD_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_NOTE_CHILD, WidgetsNoteChildPrivate))
WidgetsNoteChild* widgets_note_child_new (void);
WidgetsNoteChild* widgets_note_child_construct (GType object_type);
static GObject * widgets_note_child_constructor (GType type,
                                          guint n_construct_properties,
                                          GObjectConstructParam * construct_properties);
static void widgets_note_child_finalize (GObject * obj);


WidgetsNoteChild*
widgets_note_child_construct (GType object_type)
{
	WidgetsNoteChild * self = NULL;
#line 26 "/run/build/planner/src/Widgets/NoteChild.vala"
	self = (WidgetsNoteChild*) g_object_new (object_type, NULL);
#line 26 "/run/build/planner/src/Widgets/NoteChild.vala"
	return self;
#line 87 "NoteChild.c"
}


WidgetsNoteChild*
widgets_note_child_new (void)
{
#line 26 "/run/build/planner/src/Widgets/NoteChild.vala"
	return widgets_note_child_construct (WIDGETS_TYPE_NOTE_CHILD);
#line 96 "NoteChild.c"
}


static GObject *
widgets_note_child_constructor (GType type,
                                guint n_construct_properties,
                                GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsNoteChild * self;
	GtkEntry* _tmp0_;
	GtkEntry* _tmp1_;
	GtkEntry* _tmp2_;
	GtkEntry* _tmp3_;
	GtkStyleContext* _tmp4_;
	GtkEntry* _tmp5_;
	GtkStyleContext* _tmp6_;
	GtkEntry* _tmp7_;
	GtkStyleContext* _tmp8_;
	GtkEntry* _tmp9_;
	GtkStyleContext* _tmp10_;
	GtkEntry* _tmp11_;
	GtkStyleContext* _tmp12_;
	GtkEntry* _tmp13_;
	GtkStyleContext* _tmp14_;
	GtkEntry* _tmp15_;
	GtkSourceView* _tmp16_;
	GtkSourceView* _tmp17_;
	GtkSourceView* _tmp18_;
	GtkSourceView* _tmp19_;
	GtkToggleButton* preferences_button = NULL;
	GtkToggleButton* _tmp20_;
	GtkToggleButton* _tmp21_;
	GtkImage* _tmp22_;
	GtkImage* _tmp23_;
	GtkToggleButton* _tmp24_;
	GtkToggleButton* _tmp25_;
	GtkToggleButton* _tmp26_;
	GtkToggleButton* _tmp27_;
	GtkStyleContext* _tmp28_;
	GtkToggleButton* _tmp29_;
	GtkStyleContext* _tmp30_;
	GtkBox* action_box = NULL;
	GtkBox* _tmp31_;
	GtkBox* _tmp32_;
	GtkBox* _tmp33_;
	GtkBox* _tmp34_;
	GtkToggleButton* _tmp35_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp36_;
	GtkBox* _tmp37_;
	GtkBox* _tmp38_;
	GtkBox* _tmp39_;
	GtkBox* _tmp40_;
	GtkBox* _tmp41_;
	GtkStyleContext* _tmp42_;
	GtkBox* _tmp43_;
	GtkStyleContext* _tmp44_;
	GtkBox* _tmp45_;
	GtkEntry* _tmp46_;
	GtkBox* _tmp47_;
	GtkSourceView* _tmp48_;
	GtkBox* _tmp49_;
	GtkBox* _tmp50_;
	GtkBox* _tmp51_;
#line 34 "/run/build/planner/src/Widgets/NoteChild.vala"
	parent_class = G_OBJECT_CLASS (widgets_note_child_parent_class);
#line 34 "/run/build/planner/src/Widgets/NoteChild.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 34 "/run/build/planner/src/Widgets/NoteChild.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_NOTE_CHILD, WidgetsNoteChild);
#line 35 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_widget_set_can_focus ((GtkWidget*) self, FALSE);
#line 37 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp0_ = (GtkEntry*) gtk_entry_new ();
#line 37 "/run/build/planner/src/Widgets/NoteChild.vala"
	g_object_ref_sink (_tmp0_);
#line 37 "/run/build/planner/src/Widgets/NoteChild.vala"
	_g_object_unref0 (self->priv->title_entry);
#line 37 "/run/build/planner/src/Widgets/NoteChild.vala"
	self->priv->title_entry = _tmp0_;
#line 38 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp1_ = self->priv->title_entry;
#line 38 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp1_, 6);
#line 39 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp2_ = self->priv->title_entry;
#line 39 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp2_, 6);
#line 40 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp3_ = self->priv->title_entry;
#line 40 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) _tmp3_);
#line 40 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_style_context_add_class (_tmp4_, GRANITE_STYLE_CLASS_H3_LABEL);
#line 41 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp5_ = self->priv->title_entry;
#line 41 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp6_ = gtk_widget_get_style_context ((GtkWidget*) _tmp5_);
#line 41 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_style_context_add_class (_tmp6_, GTK_STYLE_CLASS_FLAT);
#line 42 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp7_ = self->priv->title_entry;
#line 42 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp8_ = gtk_widget_get_style_context ((GtkWidget*) _tmp7_);
#line 42 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_style_context_add_class (_tmp8_, GTK_STYLE_CLASS_VIEW);
#line 43 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp9_ = self->priv->title_entry;
#line 43 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp10_ = gtk_widget_get_style_context ((GtkWidget*) _tmp9_);
#line 43 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_style_context_add_class (_tmp10_, "planner-entry");
#line 44 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp11_ = self->priv->title_entry;
#line 44 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp12_ = gtk_widget_get_style_context ((GtkWidget*) _tmp11_);
#line 44 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_style_context_add_class (_tmp12_, "no-padding");
#line 45 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp13_ = self->priv->title_entry;
#line 45 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp14_ = gtk_widget_get_style_context ((GtkWidget*) _tmp13_);
#line 45 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_style_context_add_class (_tmp14_, "planner-entry-bold");
#line 46 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp15_ = self->priv->title_entry;
#line 46 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_entry_set_placeholder_text (_tmp15_, _ ("Title"));
#line 48 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp16_ = (GtkSourceView*) gtk_source_view_new ();
#line 48 "/run/build/planner/src/Widgets/NoteChild.vala"
	g_object_ref_sink (_tmp16_);
#line 48 "/run/build/planner/src/Widgets/NoteChild.vala"
	_g_object_unref0 (self->priv->source_view);
#line 48 "/run/build/planner/src/Widgets/NoteChild.vala"
	self->priv->source_view = _tmp16_;
#line 49 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp17_ = self->priv->source_view;
#line 49 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp17_, TRUE);
#line 50 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp18_ = self->priv->source_view;
#line 50 "/run/build/planner/src/Widgets/NoteChild.vala"
	g_object_set ((GtkWidget*) _tmp18_, "margin", 6, NULL);
#line 51 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp19_ = self->priv->source_view;
#line 51 "/run/build/planner/src/Widgets/NoteChild.vala"
	g_object_set ((GtkWidget*) _tmp19_, "expand", TRUE, NULL);
#line 53 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp20_ = (GtkToggleButton*) gtk_toggle_button_new ();
#line 53 "/run/build/planner/src/Widgets/NoteChild.vala"
	g_object_ref_sink (_tmp20_);
#line 53 "/run/build/planner/src/Widgets/NoteChild.vala"
	preferences_button = _tmp20_;
#line 54 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp21_ = preferences_button;
#line 54 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp22_ = (GtkImage*) gtk_image_new_from_icon_name ("view-more-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 54 "/run/build/planner/src/Widgets/NoteChild.vala"
	g_object_ref_sink (_tmp22_);
#line 54 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp23_ = _tmp22_;
#line 54 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_container_add ((GtkContainer*) _tmp21_, (GtkWidget*) _tmp23_);
#line 54 "/run/build/planner/src/Widgets/NoteChild.vala"
	_g_object_unref0 (_tmp23_);
#line 55 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp24_ = preferences_button;
#line 55 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp24_, _ ("Preferences"));
#line 56 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp25_ = preferences_button;
#line 56 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp25_, GTK_ALIGN_CENTER);
#line 57 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp26_ = preferences_button;
#line 57 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp26_, GTK_ALIGN_CENTER);
#line 58 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp27_ = preferences_button;
#line 58 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp28_ = gtk_widget_get_style_context ((GtkWidget*) _tmp27_);
#line 58 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_style_context_add_class (_tmp28_, GTK_STYLE_CLASS_FLAT);
#line 59 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp29_ = preferences_button;
#line 59 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp30_ = gtk_widget_get_style_context ((GtkWidget*) _tmp29_);
#line 59 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_style_context_add_class (_tmp30_, "settings-button");
#line 61 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp31_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 61 "/run/build/planner/src/Widgets/NoteChild.vala"
	g_object_ref_sink (_tmp31_);
#line 61 "/run/build/planner/src/Widgets/NoteChild.vala"
	action_box = _tmp31_;
#line 62 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp32_ = action_box;
#line 62 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp32_, 6);
#line 63 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp33_ = action_box;
#line 63 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp33_, 6);
#line 64 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp34_ = action_box;
#line 64 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp35_ = preferences_button;
#line 64 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_box_pack_end (_tmp34_, (GtkWidget*) _tmp35_, FALSE, FALSE, (guint) 0);
#line 66 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp36_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 66 "/run/build/planner/src/Widgets/NoteChild.vala"
	g_object_ref_sink (_tmp36_);
#line 66 "/run/build/planner/src/Widgets/NoteChild.vala"
	main_box = _tmp36_;
#line 67 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp37_ = main_box;
#line 67 "/run/build/planner/src/Widgets/NoteChild.vala"
	g_object_set ((GtkWidget*) _tmp37_, "height-request", 200, NULL);
#line 68 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp38_ = main_box;
#line 68 "/run/build/planner/src/Widgets/NoteChild.vala"
	g_object_set ((GtkWidget*) _tmp38_, "width-request", 200, NULL);
#line 69 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp39_ = main_box;
#line 69 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp39_, GTK_ALIGN_START);
#line 70 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp40_ = main_box;
#line 70 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp40_, GTK_ALIGN_START);
#line 71 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp41_ = main_box;
#line 71 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp42_ = gtk_widget_get_style_context ((GtkWidget*) _tmp41_);
#line 71 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_style_context_add_class (_tmp42_, GRANITE_STYLE_CLASS_CARD);
#line 72 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp43_ = main_box;
#line 72 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp44_ = gtk_widget_get_style_context ((GtkWidget*) _tmp43_);
#line 72 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_style_context_add_class (_tmp44_, "planner-card-radius");
#line 74 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp45_ = main_box;
#line 74 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp46_ = self->priv->title_entry;
#line 74 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_box_pack_start (_tmp45_, (GtkWidget*) _tmp46_, FALSE, FALSE, (guint) 0);
#line 75 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp47_ = main_box;
#line 75 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp48_ = self->priv->source_view;
#line 75 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_box_pack_start (_tmp47_, (GtkWidget*) _tmp48_, TRUE, TRUE, (guint) 0);
#line 76 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp49_ = main_box;
#line 76 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp50_ = action_box;
#line 76 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_box_pack_end (_tmp49_, (GtkWidget*) _tmp50_, FALSE, FALSE, (guint) 0);
#line 78 "/run/build/planner/src/Widgets/NoteChild.vala"
	_tmp51_ = main_box;
#line 78 "/run/build/planner/src/Widgets/NoteChild.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp51_);
#line 34 "/run/build/planner/src/Widgets/NoteChild.vala"
	_g_object_unref0 (main_box);
#line 34 "/run/build/planner/src/Widgets/NoteChild.vala"
	_g_object_unref0 (action_box);
#line 34 "/run/build/planner/src/Widgets/NoteChild.vala"
	_g_object_unref0 (preferences_button);
#line 34 "/run/build/planner/src/Widgets/NoteChild.vala"
	return obj;
#line 373 "NoteChild.c"
}


static void
widgets_note_child_class_init (WidgetsNoteChildClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/NoteChild.vala"
	widgets_note_child_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/NoteChild.vala"
	g_type_class_add_private (klass, sizeof (WidgetsNoteChildPrivate));
#line 22 "/run/build/planner/src/Widgets/NoteChild.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_note_child_constructor;
#line 22 "/run/build/planner/src/Widgets/NoteChild.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_note_child_finalize;
#line 388 "NoteChild.c"
}


static void
widgets_note_child_instance_init (WidgetsNoteChild * self)
{
#line 22 "/run/build/planner/src/Widgets/NoteChild.vala"
	self->priv = WIDGETS_NOTE_CHILD_GET_PRIVATE (self);
#line 397 "NoteChild.c"
}


static void
widgets_note_child_finalize (GObject * obj)
{
	WidgetsNoteChild * self;
#line 22 "/run/build/planner/src/Widgets/NoteChild.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_NOTE_CHILD, WidgetsNoteChild);
#line 23 "/run/build/planner/src/Widgets/NoteChild.vala"
	_g_object_unref0 (self->priv->title_entry);
#line 24 "/run/build/planner/src/Widgets/NoteChild.vala"
	_g_object_unref0 (self->priv->source_view);
#line 22 "/run/build/planner/src/Widgets/NoteChild.vala"
	G_OBJECT_CLASS (widgets_note_child_parent_class)->finalize (obj);
#line 413 "NoteChild.c"
}


GType
widgets_note_child_get_type (void)
{
	static volatile gsize widgets_note_child_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_note_child_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsNoteChildClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_note_child_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsNoteChild), 0, (GInstanceInitFunc) widgets_note_child_instance_init, NULL };
		GType widgets_note_child_type_id;
		widgets_note_child_type_id = g_type_register_static (gtk_flow_box_child_get_type (), "WidgetsNoteChild", &g_define_type_info, 0);
		g_once_init_leave (&widgets_note_child_type_id__volatile, widgets_note_child_type_id);
	}
	return widgets_note_child_type_id__volatile;
}



