
/* This file is generated by glib-mkenums, do not modify it. This code is licensed under the same license as the containing project. Note that it links to GLib, so must comply with the LGPL linking clauses. */

#include "e-book-contacts-enumtypes.h"
/* enumerations from "/run/build/evolution-data-server/src/addressbook/libebook-contacts/e-book-contacts-types.h" */
#include "/run/build/evolution-data-server/src/addressbook/libebook-contacts/e-book-contacts-types.h"
GType
e_book_client_view_flags_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GFlagsValue values[] = {
			{ E_BOOK_CLIENT_VIEW_FLAGS_NONE,
			  "E_BOOK_CLIENT_VIEW_FLAGS_NONE",
			  "none" },
			{ E_BOOK_CLIENT_VIEW_FLAGS_NOTIFY_INITIAL,
			  "E_BOOK_CLIENT_VIEW_FLAGS_NOTIFY_INITIAL",
			  "notify-initial" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_flags_register_static (
			g_intern_static_string ("EBookClientViewFlags"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_book_client_error_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_BOOK_CLIENT_ERROR_NO_SUCH_BOOK,
			  "E_BOOK_CLIENT_ERROR_NO_SUCH_BOOK",
			  "no-such-book" },
			{ E_BOOK_CLIENT_ERROR_CONTACT_NOT_FOUND,
			  "E_BOOK_CLIENT_ERROR_CONTACT_NOT_FOUND",
			  "contact-not-found" },
			{ E_BOOK_CLIENT_ERROR_CONTACT_ID_ALREADY_EXISTS,
			  "E_BOOK_CLIENT_ERROR_CONTACT_ID_ALREADY_EXISTS",
			  "contact-id-already-exists" },
			{ E_BOOK_CLIENT_ERROR_NO_SUCH_SOURCE,
			  "E_BOOK_CLIENT_ERROR_NO_SUCH_SOURCE",
			  "no-such-source" },
			{ E_BOOK_CLIENT_ERROR_NO_SPACE,
			  "E_BOOK_CLIENT_ERROR_NO_SPACE",
			  "no-space" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("EBookClientError"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_data_book_status_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_DATA_BOOK_STATUS_SUCCESS,
			  "E_DATA_BOOK_STATUS_SUCCESS",
			  "success" },
			{ E_DATA_BOOK_STATUS_BUSY,
			  "E_DATA_BOOK_STATUS_BUSY",
			  "busy" },
			{ E_DATA_BOOK_STATUS_REPOSITORY_OFFLINE,
			  "E_DATA_BOOK_STATUS_REPOSITORY_OFFLINE",
			  "repository-offline" },
			{ E_DATA_BOOK_STATUS_PERMISSION_DENIED,
			  "E_DATA_BOOK_STATUS_PERMISSION_DENIED",
			  "permission-denied" },
			{ E_DATA_BOOK_STATUS_CONTACT_NOT_FOUND,
			  "E_DATA_BOOK_STATUS_CONTACT_NOT_FOUND",
			  "contact-not-found" },
			{ E_DATA_BOOK_STATUS_CONTACTID_ALREADY_EXISTS,
			  "E_DATA_BOOK_STATUS_CONTACTID_ALREADY_EXISTS",
			  "contactid-already-exists" },
			{ E_DATA_BOOK_STATUS_AUTHENTICATION_FAILED,
			  "E_DATA_BOOK_STATUS_AUTHENTICATION_FAILED",
			  "authentication-failed" },
			{ E_DATA_BOOK_STATUS_AUTHENTICATION_REQUIRED,
			  "E_DATA_BOOK_STATUS_AUTHENTICATION_REQUIRED",
			  "authentication-required" },
			{ E_DATA_BOOK_STATUS_UNSUPPORTED_FIELD,
			  "E_DATA_BOOK_STATUS_UNSUPPORTED_FIELD",
			  "unsupported-field" },
			{ E_DATA_BOOK_STATUS_UNSUPPORTED_AUTHENTICATION_METHOD,
			  "E_DATA_BOOK_STATUS_UNSUPPORTED_AUTHENTICATION_METHOD",
			  "unsupported-authentication-method" },
			{ E_DATA_BOOK_STATUS_TLS_NOT_AVAILABLE,
			  "E_DATA_BOOK_STATUS_TLS_NOT_AVAILABLE",
			  "tls-not-available" },
			{ E_DATA_BOOK_STATUS_NO_SUCH_BOOK,
			  "E_DATA_BOOK_STATUS_NO_SUCH_BOOK",
			  "no-such-book" },
			{ E_DATA_BOOK_STATUS_BOOK_REMOVED,
			  "E_DATA_BOOK_STATUS_BOOK_REMOVED",
			  "book-removed" },
			{ E_DATA_BOOK_STATUS_OFFLINE_UNAVAILABLE,
			  "E_DATA_BOOK_STATUS_OFFLINE_UNAVAILABLE",
			  "offline-unavailable" },
			{ E_DATA_BOOK_STATUS_SEARCH_SIZE_LIMIT_EXCEEDED,
			  "E_DATA_BOOK_STATUS_SEARCH_SIZE_LIMIT_EXCEEDED",
			  "search-size-limit-exceeded" },
			{ E_DATA_BOOK_STATUS_SEARCH_TIME_LIMIT_EXCEEDED,
			  "E_DATA_BOOK_STATUS_SEARCH_TIME_LIMIT_EXCEEDED",
			  "search-time-limit-exceeded" },
			{ E_DATA_BOOK_STATUS_INVALID_QUERY,
			  "E_DATA_BOOK_STATUS_INVALID_QUERY",
			  "invalid-query" },
			{ E_DATA_BOOK_STATUS_QUERY_REFUSED,
			  "E_DATA_BOOK_STATUS_QUERY_REFUSED",
			  "query-refused" },
			{ E_DATA_BOOK_STATUS_COULD_NOT_CANCEL,
			  "E_DATA_BOOK_STATUS_COULD_NOT_CANCEL",
			  "could-not-cancel" },
			{ E_DATA_BOOK_STATUS_OTHER_ERROR,
			  "E_DATA_BOOK_STATUS_OTHER_ERROR",
			  "other-error" },
			{ E_DATA_BOOK_STATUS_INVALID_SERVER_VERSION,
			  "E_DATA_BOOK_STATUS_INVALID_SERVER_VERSION",
			  "invalid-server-version" },
			{ E_DATA_BOOK_STATUS_NO_SPACE,
			  "E_DATA_BOOK_STATUS_NO_SPACE",
			  "no-space" },
			{ E_DATA_BOOK_STATUS_INVALID_ARG,
			  "E_DATA_BOOK_STATUS_INVALID_ARG",
			  "invalid-arg" },
			{ E_DATA_BOOK_STATUS_NOT_SUPPORTED,
			  "E_DATA_BOOK_STATUS_NOT_SUPPORTED",
			  "not-supported" },
			{ E_DATA_BOOK_STATUS_NOT_OPENED,
			  "E_DATA_BOOK_STATUS_NOT_OPENED",
			  "not-opened" },
			{ E_DATA_BOOK_STATUS_OUT_OF_SYNC,
			  "E_DATA_BOOK_STATUS_OUT_OF_SYNC",
			  "out-of-sync" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("EDataBookStatus"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_book_index_type_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_BOOK_INDEX_PREFIX,
			  "E_BOOK_INDEX_PREFIX",
			  "prefix" },
			{ E_BOOK_INDEX_SUFFIX,
			  "E_BOOK_INDEX_SUFFIX",
			  "suffix" },
			{ E_BOOK_INDEX_PHONE,
			  "E_BOOK_INDEX_PHONE",
			  "phone" },
			{ E_BOOK_INDEX_SORT_KEY,
			  "E_BOOK_INDEX_SORT_KEY",
			  "sort-key" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("EBookIndexType"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_book_cursor_sort_type_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_BOOK_CURSOR_SORT_ASCENDING,
			  "E_BOOK_CURSOR_SORT_ASCENDING",
			  "ascending" },
			{ E_BOOK_CURSOR_SORT_DESCENDING,
			  "E_BOOK_CURSOR_SORT_DESCENDING",
			  "descending" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("EBookCursorSortType"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_book_cursor_origin_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_BOOK_CURSOR_ORIGIN_CURRENT,
			  "E_BOOK_CURSOR_ORIGIN_CURRENT",
			  "current" },
			{ E_BOOK_CURSOR_ORIGIN_BEGIN,
			  "E_BOOK_CURSOR_ORIGIN_BEGIN",
			  "begin" },
			{ E_BOOK_CURSOR_ORIGIN_END,
			  "E_BOOK_CURSOR_ORIGIN_END",
			  "end" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("EBookCursorOrigin"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_book_cursor_step_flags_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GFlagsValue values[] = {
			{ E_BOOK_CURSOR_STEP_MOVE,
			  "E_BOOK_CURSOR_STEP_MOVE",
			  "move" },
			{ E_BOOK_CURSOR_STEP_FETCH,
			  "E_BOOK_CURSOR_STEP_FETCH",
			  "fetch" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_flags_register_static (
			g_intern_static_string ("EBookCursorStepFlags"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_book_view_status_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_BOOK_VIEW_STATUS_OK,
			  "E_BOOK_VIEW_STATUS_OK",
			  "status-ok" },
			{ E_BOOK_VIEW_STATUS_TIME_LIMIT_EXCEEDED,
			  "E_BOOK_VIEW_STATUS_TIME_LIMIT_EXCEEDED",
			  "status-time-limit-exceeded" },
			{ E_BOOK_VIEW_STATUS_SIZE_LIMIT_EXCEEDED,
			  "E_BOOK_VIEW_STATUS_SIZE_LIMIT_EXCEEDED",
			  "status-size-limit-exceeded" },
			{ E_BOOK_VIEW_ERROR_INVALID_QUERY,
			  "E_BOOK_VIEW_ERROR_INVALID_QUERY",
			  "error-invalid-query" },
			{ E_BOOK_VIEW_ERROR_QUERY_REFUSED,
			  "E_BOOK_VIEW_ERROR_QUERY_REFUSED",
			  "error-query-refused" },
			{ E_BOOK_VIEW_ERROR_OTHER_ERROR,
			  "E_BOOK_VIEW_ERROR_OTHER_ERROR",
			  "error-other-error" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("EBookViewStatus"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}
GType
e_book_change_type_get_type (void)
{
	static volatile gsize the_type__volatile = 0;

	if (g_once_init_enter (&the_type__volatile)) {
		static const GEnumValue values[] = {
			{ E_BOOK_CHANGE_CARD_ADDED,
			  "E_BOOK_CHANGE_CARD_ADDED",
			  "added" },
			{ E_BOOK_CHANGE_CARD_DELETED,
			  "E_BOOK_CHANGE_CARD_DELETED",
			  "deleted" },
			{ E_BOOK_CHANGE_CARD_MODIFIED,
			  "E_BOOK_CHANGE_CARD_MODIFIED",
			  "modified" },
			{ 0, NULL, NULL }
		};
		GType the_type = g_enum_register_static (
			g_intern_static_string ("EBookChangeType"),
			values);
		g_once_init_leave (&the_type__volatile, the_type);
	}
	return the_type__volatile;
}

/* Generated data ends here */

