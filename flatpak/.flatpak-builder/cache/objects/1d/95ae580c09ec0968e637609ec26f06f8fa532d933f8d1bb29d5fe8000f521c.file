/* LabelButton.c generated by valac 0.40.11, the Vala compiler
 * generated from LabelButton.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <glib/gi18n-lib.h>


#define WIDGETS_TYPE_LABEL_BUTTON (widgets_label_button_get_type ())
#define WIDGETS_LABEL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButton))
#define WIDGETS_LABEL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButtonClass))
#define WIDGETS_IS_LABEL_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_LABEL_BUTTON))
#define WIDGETS_IS_LABEL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_LABEL_BUTTON))
#define WIDGETS_LABEL_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButtonClass))

typedef struct _WidgetsLabelButton WidgetsLabelButton;
typedef struct _WidgetsLabelButtonClass WidgetsLabelButtonClass;
typedef struct _WidgetsLabelButtonPrivate WidgetsLabelButtonPrivate;
enum  {
	WIDGETS_LABEL_BUTTON_0_PROPERTY,
	WIDGETS_LABEL_BUTTON_NUM_PROPERTIES
};
static GParamSpec* widgets_label_button_properties[WIDGETS_LABEL_BUTTON_NUM_PROPERTIES];

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;

#define WIDGETS_POPOVERS_TYPE_LABELS_POPOVER (widgets_popovers_labels_popover_get_type ())
#define WIDGETS_POPOVERS_LABELS_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER, WidgetsPopoversLabelsPopover))
#define WIDGETS_POPOVERS_LABELS_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER, WidgetsPopoversLabelsPopoverClass))
#define WIDGETS_POPOVERS_IS_LABELS_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER))
#define WIDGETS_POPOVERS_IS_LABELS_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER))
#define WIDGETS_POPOVERS_LABELS_POPOVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER, WidgetsPopoversLabelsPopoverClass))

typedef struct _WidgetsPopoversLabelsPopover WidgetsPopoversLabelsPopover;
typedef struct _WidgetsPopoversLabelsPopoverClass WidgetsPopoversLabelsPopoverClass;
typedef struct _Block49Data Block49Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _WidgetsPopoversLabelsPopoverPrivate WidgetsPopoversLabelsPopoverPrivate;
enum  {
	WIDGETS_LABEL_BUTTON_ON_SELECTED_LABEL_SIGNAL,
	WIDGETS_LABEL_BUTTON_NUM_SIGNALS
};
static guint widgets_label_button_signals[WIDGETS_LABEL_BUTTON_NUM_SIGNALS] = {0};

struct _WidgetsLabelButton {
	GtkToggleButton parent_instance;
	WidgetsLabelButtonPrivate * priv;
};

struct _WidgetsLabelButtonClass {
	GtkToggleButtonClass parent_class;
};

struct _Block49Data {
	int _ref_count_;
	WidgetsLabelButton* self;
	WidgetsPopoversLabelsPopover* labels_popover;
};

struct _WidgetsPopoversLabelsPopover {
	GtkPopover parent_instance;
	WidgetsPopoversLabelsPopoverPrivate * priv;
	GtkListBox* labels_listbox;
};

struct _WidgetsPopoversLabelsPopoverClass {
	GtkPopoverClass parent_class;
};


static gpointer widgets_label_button_parent_class = NULL;

GType widgets_label_button_get_type (void) G_GNUC_CONST;
WidgetsLabelButton* widgets_label_button_new (void);
WidgetsLabelButton* widgets_label_button_construct (GType object_type);
gpointer objects_label_ref (gpointer instance);
void objects_label_unref (gpointer instance);
GParamSpec* objects_param_spec_label (const gchar* name,
                                      const gchar* nick,
                                      const gchar* blurb,
                                      GType object_type,
                                      GParamFlags flags);
void objects_value_set_label (GValue* value,
                              gpointer v_object);
void objects_value_take_label (GValue* value,
                               gpointer v_object);
gpointer objects_value_get_label (const GValue* value);
GType objects_label_get_type (void) G_GNUC_CONST;
static void g_cclosure_user_marshal_VOID__OBJECTS_LABEL (GClosure * closure,
                                                  GValue * return_value,
                                                  guint n_param_values,
                                                  const GValue * param_values,
                                                  gpointer invocation_hint,
                                                  gpointer marshal_data);
static GObject * widgets_label_button_constructor (GType type,
                                            guint n_construct_properties,
                                            GObjectConstructParam * construct_properties);
GType widgets_popovers_labels_popover_get_type (void) G_GNUC_CONST;
static Block49Data* block49_data_ref (Block49Data* _data49_);
static void block49_data_unref (void * _userdata_);
WidgetsPopoversLabelsPopover* widgets_popovers_labels_popover_new (GtkWidget* relative);
WidgetsPopoversLabelsPopover* widgets_popovers_labels_popover_construct (GType object_type,
                                                                         GtkWidget* relative);
static void _widgets_label_button___lambda59_ (Block49Data* _data49_);
void widgets_popovers_labels_popover_update_label_list (WidgetsPopoversLabelsPopover* self);
static void __widgets_label_button___lambda59__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                                   gpointer self);
static void _widgets_label_button___lambda60_ (WidgetsLabelButton* self);
static void __widgets_label_button___lambda60__gtk_popover_closed (GtkPopover* _sender,
                                                            gpointer self);
static void _widgets_label_button___lambda61_ (Block49Data* _data49_,
                                        ObjectsLabel* label);
static void __widgets_label_button___lambda61__widgets_popovers_labels_popover_on_selected_label (WidgetsPopoversLabelsPopover* _sender,
                                                                                           ObjectsLabel* label,
                                                                                           gpointer self);


WidgetsLabelButton*
widgets_label_button_construct (GType object_type)
{
	WidgetsLabelButton * self = NULL;
#line 25 "/run/build/planner/src/Widgets/LabelButton.vala"
	self = (WidgetsLabelButton*) g_object_new (object_type, "valign", GTK_ALIGN_CENTER, NULL);
#line 24 "/run/build/planner/src/Widgets/LabelButton.vala"
	return self;
#line 158 "LabelButton.c"
}


WidgetsLabelButton*
widgets_label_button_new (void)
{
#line 24 "/run/build/planner/src/Widgets/LabelButton.vala"
	return widgets_label_button_construct (WIDGETS_TYPE_LABEL_BUTTON);
#line 167 "LabelButton.c"
}


static void
g_cclosure_user_marshal_VOID__OBJECTS_LABEL (GClosure * closure,
                                             GValue * return_value,
                                             guint n_param_values,
                                             const GValue * param_values,
                                             gpointer invocation_hint,
                                             gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECTS_LABEL) (gpointer data1, gpointer arg_1, gpointer data2);
	register GMarshalFunc_VOID__OBJECTS_LABEL callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 22 "/run/build/planner/src/Widgets/LabelButton.vala"
	g_return_if_fail (n_param_values == 2);
#line 22 "/run/build/planner/src/Widgets/LabelButton.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 22 "/run/build/planner/src/Widgets/LabelButton.vala"
		data1 = closure->data;
#line 22 "/run/build/planner/src/Widgets/LabelButton.vala"
		data2 = param_values->data[0].v_pointer;
#line 193 "LabelButton.c"
	} else {
#line 22 "/run/build/planner/src/Widgets/LabelButton.vala"
		data1 = param_values->data[0].v_pointer;
#line 22 "/run/build/planner/src/Widgets/LabelButton.vala"
		data2 = closure->data;
#line 199 "LabelButton.c"
	}
#line 22 "/run/build/planner/src/Widgets/LabelButton.vala"
	callback = (GMarshalFunc_VOID__OBJECTS_LABEL) (marshal_data ? marshal_data : cc->callback);
#line 22 "/run/build/planner/src/Widgets/LabelButton.vala"
	callback (data1, objects_value_get_label (param_values + 1), data2);
#line 205 "LabelButton.c"
}


static Block49Data*
block49_data_ref (Block49Data* _data49_)
{
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
	g_atomic_int_inc (&_data49_->_ref_count_);
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
	return _data49_;
#line 216 "LabelButton.c"
}


static void
block49_data_unref (void * _userdata_)
{
	Block49Data* _data49_;
	_data49_ = (Block49Data*) _userdata_;
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
	if (g_atomic_int_dec_and_test (&_data49_->_ref_count_)) {
#line 227 "LabelButton.c"
		WidgetsLabelButton* self;
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
		self = _data49_->self;
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
		_g_object_unref0 (_data49_->labels_popover);
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
		_g_object_unref0 (self);
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
		g_slice_free (Block49Data, _data49_);
#line 237 "LabelButton.c"
	}
}


static void
_widgets_label_button___lambda59_ (Block49Data* _data49_)
{
	WidgetsLabelButton* self;
	gboolean _tmp0_;
	gboolean _tmp1_;
#line 45 "/run/build/planner/src/Widgets/LabelButton.vala"
	self = _data49_->self;
#line 46 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp0_ = gtk_toggle_button_get_active ((GtkToggleButton*) self);
#line 46 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp1_ = _tmp0_;
#line 46 "/run/build/planner/src/Widgets/LabelButton.vala"
	if (_tmp1_) {
#line 256 "LabelButton.c"
		WidgetsPopoversLabelsPopover* _tmp2_;
		WidgetsPopoversLabelsPopover* _tmp3_;
		WidgetsPopoversLabelsPopover* _tmp4_;
		GtkListBox* _tmp5_;
#line 47 "/run/build/planner/src/Widgets/LabelButton.vala"
		_tmp2_ = _data49_->labels_popover;
#line 47 "/run/build/planner/src/Widgets/LabelButton.vala"
		widgets_popovers_labels_popover_update_label_list (_tmp2_);
#line 48 "/run/build/planner/src/Widgets/LabelButton.vala"
		_tmp3_ = _data49_->labels_popover;
#line 48 "/run/build/planner/src/Widgets/LabelButton.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp3_);
#line 49 "/run/build/planner/src/Widgets/LabelButton.vala"
		_tmp4_ = _data49_->labels_popover;
#line 49 "/run/build/planner/src/Widgets/LabelButton.vala"
		_tmp5_ = _tmp4_->labels_listbox;
#line 49 "/run/build/planner/src/Widgets/LabelButton.vala"
		gtk_list_box_unselect_all (_tmp5_);
#line 275 "LabelButton.c"
	}
}


static void
__widgets_label_button___lambda59__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                              gpointer self)
{
#line 45 "/run/build/planner/src/Widgets/LabelButton.vala"
	_widgets_label_button___lambda59_ (self);
#line 286 "LabelButton.c"
}


static void
_widgets_label_button___lambda60_ (WidgetsLabelButton* self)
{
#line 54 "/run/build/planner/src/Widgets/LabelButton.vala"
	gtk_toggle_button_set_active ((GtkToggleButton*) self, FALSE);
#line 295 "LabelButton.c"
}


static void
__widgets_label_button___lambda60__gtk_popover_closed (GtkPopover* _sender,
                                                       gpointer self)
{
#line 53 "/run/build/planner/src/Widgets/LabelButton.vala"
	_widgets_label_button___lambda60_ ((WidgetsLabelButton*) self);
#line 305 "LabelButton.c"
}


static void
_widgets_label_button___lambda61_ (Block49Data* _data49_,
                                   ObjectsLabel* label)
{
	WidgetsLabelButton* self;
	WidgetsPopoversLabelsPopover* _tmp0_;
#line 57 "/run/build/planner/src/Widgets/LabelButton.vala"
	self = _data49_->self;
#line 57 "/run/build/planner/src/Widgets/LabelButton.vala"
	g_return_if_fail (label != NULL);
#line 58 "/run/build/planner/src/Widgets/LabelButton.vala"
	g_signal_emit (self, widgets_label_button_signals[WIDGETS_LABEL_BUTTON_ON_SELECTED_LABEL_SIGNAL], 0, label);
#line 59 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp0_ = _data49_->labels_popover;
#line 59 "/run/build/planner/src/Widgets/LabelButton.vala"
	gtk_popover_popdown ((GtkPopover*) _tmp0_);
#line 325 "LabelButton.c"
}


static void
__widgets_label_button___lambda61__widgets_popovers_labels_popover_on_selected_label (WidgetsPopoversLabelsPopover* _sender,
                                                                                      ObjectsLabel* label,
                                                                                      gpointer self)
{
#line 57 "/run/build/planner/src/Widgets/LabelButton.vala"
	_widgets_label_button___lambda61_ (self, label);
#line 336 "LabelButton.c"
}


static GObject *
widgets_label_button_constructor (GType type,
                                  guint n_construct_properties,
                                  GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsLabelButton * self;
	Block49Data* _data49_;
	GtkStyleContext* _tmp0_;
	GtkImage* label_icon = NULL;
	GtkImage* _tmp1_;
	GtkLabel* label_name = NULL;
	GtkLabel* _tmp2_;
	GtkLabel* _tmp3_;
	WidgetsPopoversLabelsPopover* _tmp4_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp5_;
	GtkBox* _tmp6_;
	GtkImage* _tmp7_;
	GtkBox* _tmp8_;
	GtkLabel* _tmp9_;
	GtkBox* _tmp10_;
	WidgetsPopoversLabelsPopover* _tmp11_;
	WidgetsPopoversLabelsPopover* _tmp12_;
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
	parent_class = G_OBJECT_CLASS (widgets_label_button_parent_class);
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_LABEL_BUTTON, WidgetsLabelButton);
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
	_data49_ = g_slice_new0 (Block49Data);
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
	_data49_->_ref_count_ = 1;
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
	_data49_->self = g_object_ref (self);
#line 31 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 31 "/run/build/planner/src/Widgets/LabelButton.vala"
	gtk_style_context_add_class (_tmp0_, GTK_STYLE_CLASS_FLAT);
#line 33 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp1_ = (GtkImage*) gtk_image_new_from_icon_name ("tag-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 33 "/run/build/planner/src/Widgets/LabelButton.vala"
	g_object_ref_sink (_tmp1_);
#line 33 "/run/build/planner/src/Widgets/LabelButton.vala"
	label_icon = _tmp1_;
#line 34 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp2_ = (GtkLabel*) gtk_label_new (_ ("Labels"));
#line 34 "/run/build/planner/src/Widgets/LabelButton.vala"
	g_object_ref_sink (_tmp2_);
#line 34 "/run/build/planner/src/Widgets/LabelButton.vala"
	label_name = _tmp2_;
#line 35 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp3_ = label_name;
#line 35 "/run/build/planner/src/Widgets/LabelButton.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp3_, 1);
#line 37 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp4_ = widgets_popovers_labels_popover_new ((GtkWidget*) self);
#line 37 "/run/build/planner/src/Widgets/LabelButton.vala"
	g_object_ref_sink (_tmp4_);
#line 37 "/run/build/planner/src/Widgets/LabelButton.vala"
	_data49_->labels_popover = _tmp4_;
#line 39 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp5_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 39 "/run/build/planner/src/Widgets/LabelButton.vala"
	g_object_ref_sink (_tmp5_);
#line 39 "/run/build/planner/src/Widgets/LabelButton.vala"
	main_box = _tmp5_;
#line 40 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp6_ = main_box;
#line 40 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp7_ = label_icon;
#line 40 "/run/build/planner/src/Widgets/LabelButton.vala"
	gtk_box_pack_start (_tmp6_, (GtkWidget*) _tmp7_, FALSE, FALSE, (guint) 0);
#line 41 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp8_ = main_box;
#line 41 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp9_ = label_name;
#line 41 "/run/build/planner/src/Widgets/LabelButton.vala"
	gtk_box_pack_start (_tmp8_, (GtkWidget*) _tmp9_, FALSE, FALSE, (guint) 0);
#line 43 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp10_ = main_box;
#line 43 "/run/build/planner/src/Widgets/LabelButton.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp10_);
#line 45 "/run/build/planner/src/Widgets/LabelButton.vala"
	g_signal_connect_data ((GtkToggleButton*) self, "toggled", (GCallback) __widgets_label_button___lambda59__gtk_toggle_button_toggled, block49_data_ref (_data49_), (GClosureNotify) block49_data_unref, 0);
#line 53 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp11_ = _data49_->labels_popover;
#line 53 "/run/build/planner/src/Widgets/LabelButton.vala"
	g_signal_connect_object ((GtkPopover*) _tmp11_, "closed", (GCallback) __widgets_label_button___lambda60__gtk_popover_closed, self, 0);
#line 57 "/run/build/planner/src/Widgets/LabelButton.vala"
	_tmp12_ = _data49_->labels_popover;
#line 57 "/run/build/planner/src/Widgets/LabelButton.vala"
	g_signal_connect_data (_tmp12_, "on-selected-label", (GCallback) __widgets_label_button___lambda61__widgets_popovers_labels_popover_on_selected_label, block49_data_ref (_data49_), (GClosureNotify) block49_data_unref, 0);
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
	_g_object_unref0 (main_box);
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
	_g_object_unref0 (label_name);
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
	_g_object_unref0 (label_icon);
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
	block49_data_unref (_data49_);
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
	_data49_ = NULL;
#line 30 "/run/build/planner/src/Widgets/LabelButton.vala"
	return obj;
#line 447 "LabelButton.c"
}


static void
widgets_label_button_class_init (WidgetsLabelButtonClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/LabelButton.vala"
	widgets_label_button_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/LabelButton.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_label_button_constructor;
#line 22 "/run/build/planner/src/Widgets/LabelButton.vala"
	widgets_label_button_signals[WIDGETS_LABEL_BUTTON_ON_SELECTED_LABEL_SIGNAL] = g_signal_new ("on-selected-label", WIDGETS_TYPE_LABEL_BUTTON, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECTS_LABEL, G_TYPE_NONE, 1, OBJECTS_TYPE_LABEL);
#line 460 "LabelButton.c"
}


static void
widgets_label_button_instance_init (WidgetsLabelButton * self)
{
}


GType
widgets_label_button_get_type (void)
{
	static volatile gsize widgets_label_button_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_label_button_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsLabelButtonClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_label_button_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsLabelButton), 0, (GInstanceInitFunc) widgets_label_button_instance_init, NULL };
		GType widgets_label_button_type_id;
		widgets_label_button_type_id = g_type_register_static (gtk_toggle_button_get_type (), "WidgetsLabelButton", &g_define_type_info, 0);
		g_once_init_leave (&widgets_label_button_type_id__volatile, widgets_label_button_type_id);
	}
	return widgets_label_button_type_id__volatile;
}



