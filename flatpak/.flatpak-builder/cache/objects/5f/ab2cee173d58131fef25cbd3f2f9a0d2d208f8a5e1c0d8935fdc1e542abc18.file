/* Project.c generated by valac 0.40.11, the Vala compiler
 * generated from Project.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <gee.h>
#include <float.h>
#include <math.h>
#include <sqlite3.h>
#include <granite.h>
#include <glib/gi18n-lib.h>
#include <gio/gio.h>
#include <gdk/gdk.h>


#define VIEWS_TYPE_PROJECT (views_project_get_type ())
#define VIEWS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), VIEWS_TYPE_PROJECT, ViewsProject))
#define VIEWS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), VIEWS_TYPE_PROJECT, ViewsProjectClass))
#define VIEWS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), VIEWS_TYPE_PROJECT))
#define VIEWS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), VIEWS_TYPE_PROJECT))
#define VIEWS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), VIEWS_TYPE_PROJECT, ViewsProjectClass))

typedef struct _ViewsProject ViewsProject;
typedef struct _ViewsProjectClass ViewsProjectClass;
typedef struct _ViewsProjectPrivate ViewsProjectPrivate;

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;

#define WIDGETS_TYPE_TASK_NEW (widgets_task_new_get_type ())
#define WIDGETS_TASK_NEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TASK_NEW, WidgetsTaskNew))
#define WIDGETS_TASK_NEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TASK_NEW, WidgetsTaskNewClass))
#define WIDGETS_IS_TASK_NEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TASK_NEW))
#define WIDGETS_IS_TASK_NEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TASK_NEW))
#define WIDGETS_TASK_NEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TASK_NEW, WidgetsTaskNewClass))

typedef struct _WidgetsTaskNew WidgetsTaskNew;
typedef struct _WidgetsTaskNewClass WidgetsTaskNewClass;

#define WIDGETS_TYPE_ALERT_VIEW (widgets_alert_view_get_type ())
#define WIDGETS_ALERT_VIEW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_ALERT_VIEW, WidgetsAlertView))
#define WIDGETS_ALERT_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_ALERT_VIEW, WidgetsAlertViewClass))
#define WIDGETS_IS_ALERT_VIEW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_ALERT_VIEW))
#define WIDGETS_IS_ALERT_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_ALERT_VIEW))
#define WIDGETS_ALERT_VIEW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_ALERT_VIEW, WidgetsAlertViewClass))

typedef struct _WidgetsAlertView WidgetsAlertView;
typedef struct _WidgetsAlertViewClass WidgetsAlertViewClass;

#define WIDGETS_POPOVERS_TYPE_LABELS_POPOVER (widgets_popovers_labels_popover_get_type ())
#define WIDGETS_POPOVERS_LABELS_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER, WidgetsPopoversLabelsPopover))
#define WIDGETS_POPOVERS_LABELS_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER, WidgetsPopoversLabelsPopoverClass))
#define WIDGETS_POPOVERS_IS_LABELS_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER))
#define WIDGETS_POPOVERS_IS_LABELS_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER))
#define WIDGETS_POPOVERS_LABELS_POPOVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_POPOVERS_TYPE_LABELS_POPOVER, WidgetsPopoversLabelsPopoverClass))

typedef struct _WidgetsPopoversLabelsPopover WidgetsPopoversLabelsPopover;
typedef struct _WidgetsPopoversLabelsPopoverClass WidgetsPopoversLabelsPopoverClass;
enum  {
	VIEWS_PROJECT_0_PROPERTY,
	VIEWS_PROJECT_PARENT_WINDOW_PROPERTY,
	VIEWS_PROJECT_PROJECT_PROPERTY,
	VIEWS_PROJECT_NUM_PROPERTIES
};
static GParamSpec* views_project_properties[VIEWS_PROJECT_NUM_PROPERTIES];
#define _objects_project_unref0(var) ((var == NULL) ? NULL : (var = (objects_project_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define WIDGETS_TYPE_TASK_ROW (widgets_task_row_get_type ())
#define WIDGETS_TASK_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRow))
#define WIDGETS_TASK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRowClass))
#define WIDGETS_IS_TASK_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_TASK_ROW))
#define WIDGETS_IS_TASK_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_TASK_ROW))
#define WIDGETS_TASK_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_TASK_ROW, WidgetsTaskRowClass))

typedef struct _WidgetsTaskRow WidgetsTaskRow;
typedef struct _WidgetsTaskRowClass WidgetsTaskRowClass;

#define OBJECTS_TYPE_TASK (objects_task_get_type ())
#define OBJECTS_TASK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TASK, ObjectsTask))
#define OBJECTS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TASK, ObjectsTaskClass))
#define OBJECTS_IS_TASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TASK))
#define OBJECTS_IS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TASK))
#define OBJECTS_TASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TASK, ObjectsTaskClass))

typedef struct _ObjectsTask ObjectsTask;
typedef struct _ObjectsTaskClass ObjectsTaskClass;
typedef struct _ObjectsTaskPrivate ObjectsTaskPrivate;
typedef struct _ObjectsProjectPrivate ObjectsProjectPrivate;

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
typedef struct _Block31Data Block31Data;
typedef struct _WidgetsTaskRowPrivate WidgetsTaskRowPrivate;
#define _objects_task_unref0(var) ((var == NULL) ? NULL : (var = (objects_task_unref (var), NULL)))

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
#define _g_free0(var) (var = (g_free (var), NULL))
typedef struct _Block32Data Block32Data;
typedef struct _WidgetsTaskNewPrivate WidgetsTaskNewPrivate;

#define WIDGETS_TYPE_WHEN_BUTTON (widgets_when_button_get_type ())
#define WIDGETS_WHEN_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButton))
#define WIDGETS_WHEN_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButtonClass))
#define WIDGETS_IS_WHEN_BUTTON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_WHEN_BUTTON))
#define WIDGETS_IS_WHEN_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_WHEN_BUTTON))
#define WIDGETS_WHEN_BUTTON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_WHEN_BUTTON, WidgetsWhenButtonClass))

typedef struct _WidgetsWhenButton WidgetsWhenButton;
typedef struct _WidgetsWhenButtonClass WidgetsWhenButtonClass;

#define WIDGETS_POPOVERS_TYPE_DEADLINE_POPOVER (widgets_popovers_deadline_popover_get_type ())
#define WIDGETS_POPOVERS_DEADLINE_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_POPOVERS_TYPE_DEADLINE_POPOVER, WidgetsPopoversDeadlinePopover))
#define WIDGETS_POPOVERS_DEADLINE_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_POPOVERS_TYPE_DEADLINE_POPOVER, WidgetsPopoversDeadlinePopoverClass))
#define WIDGETS_POPOVERS_IS_DEADLINE_POPOVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_POPOVERS_TYPE_DEADLINE_POPOVER))
#define WIDGETS_POPOVERS_IS_DEADLINE_POPOVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_POPOVERS_TYPE_DEADLINE_POPOVER))
#define WIDGETS_POPOVERS_DEADLINE_POPOVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_POPOVERS_TYPE_DEADLINE_POPOVER, WidgetsPopoversDeadlinePopoverClass))

typedef struct _WidgetsPopoversDeadlinePopover WidgetsPopoversDeadlinePopover;
typedef struct _WidgetsPopoversDeadlinePopoverClass WidgetsPopoversDeadlinePopoverClass;
typedef struct _Block33Data Block33Data;
#define _g_time_zone_unref0(var) ((var == NULL) ? NULL : (var = (g_time_zone_unref (var), NULL)))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))

#define DIALOGS_TYPE_SHARE_DIALOG (dialogs_share_dialog_get_type ())
#define DIALOGS_SHARE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), DIALOGS_TYPE_SHARE_DIALOG, DialogsShareDialog))
#define DIALOGS_SHARE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), DIALOGS_TYPE_SHARE_DIALOG, DialogsShareDialogClass))
#define DIALOGS_IS_SHARE_DIALOG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), DIALOGS_TYPE_SHARE_DIALOG))
#define DIALOGS_IS_SHARE_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), DIALOGS_TYPE_SHARE_DIALOG))
#define DIALOGS_SHARE_DIALOG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), DIALOGS_TYPE_SHARE_DIALOG, DialogsShareDialogClass))

typedef struct _DialogsShareDialog DialogsShareDialog;
typedef struct _DialogsShareDialogClass DialogsShareDialogClass;

#define TYPE_APPLICATION (application_get_type ())
#define APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_APPLICATION, Application))
#define APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_APPLICATION, ApplicationClass))
#define IS_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_APPLICATION))
#define IS_APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_APPLICATION))
#define APPLICATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_APPLICATION, ApplicationClass))

typedef struct _Application Application;
typedef struct _ApplicationClass ApplicationClass;
typedef struct _ApplicationPrivate ApplicationPrivate;

#define SERVICES_TYPE_NOTIFICATIONS (services_notifications_get_type ())
#define SERVICES_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotifications))
#define SERVICES_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))
#define SERVICES_IS_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_IS_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_NOTIFICATIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))

typedef struct _ServicesNotifications ServicesNotifications;
typedef struct _ServicesNotificationsClass ServicesNotificationsClass;

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
typedef struct _ObjectsLabelPrivate ObjectsLabelPrivate;

#define WIDGETS_TYPE_LABEL_CHILD (widgets_label_child_get_type ())
#define WIDGETS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChild))
#define WIDGETS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChildClass))
#define WIDGETS_IS_LABEL_CHILD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_LABEL_CHILD))
#define WIDGETS_IS_LABEL_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_LABEL_CHILD))
#define WIDGETS_LABEL_CHILD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_LABEL_CHILD, WidgetsLabelChildClass))

typedef struct _WidgetsLabelChild WidgetsLabelChild;
typedef struct _WidgetsLabelChildClass WidgetsLabelChildClass;

struct _ViewsProject {
	GtkEventBox parent_instance;
	ViewsProjectPrivate * priv;
};

struct _ViewsProjectClass {
	GtkEventBoxClass parent_class;
};

struct _ViewsProjectPrivate {
	MainWindow* _parent_window;
	ObjectsProject* _project;
	GtkEntry* name_entry;
	GtkToggleButton* deadline_project_button;
	GtkLabel* deadline_project_label;
	GtkTextView* note_view;
	WidgetsTaskNew* task_new_revealer;
	GtkListBox* tasks_list;
	GtkButton* add_task_button;
	GtkRevealer* add_task_revealer;
	GtkRevealer* show_completed_revealer;
	GtkRevealer* notes_revealer;
	GtkFlowBox* labels_flowbox;
	GtkToggleButton* show_hide_all_button;
	GtkBox* box;
	WidgetsAlertView* alert_view;
	WidgetsPopoversLabelsPopover* labels_popover;
	GtkStack* main_stack;
};

struct _ObjectsTask {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsTaskPrivate * priv;
	gint id;
	gint checked;
	gint project_id;
	gint list_id;
	gint task_order;
	gint is_inbox;
	gint has_reminder;
	gint sidebar_width;
	gint was_notified;
	gchar* content;
	gchar* note;
	gchar* when_date_utc;
	gchar* reminder_time;
	gchar* labels;
	gchar* checklist;
};

struct _ObjectsTaskClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsTask *self);
};

struct _ObjectsProject {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsProjectPrivate * priv;
	gint id;
	gchar* name;
	gchar* note;
	gchar* deadline;
	gint item_order;
	gint is_deleted;
	gchar* color;
};

struct _ObjectsProjectClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsProject *self);
};

struct _Block31Data {
	int _ref_count_;
	ViewsProject* self;
	WidgetsTaskRow* row;
};

struct _WidgetsTaskRow {
	GtkListBoxRow parent_instance;
	WidgetsTaskRowPrivate * priv;
	GtkLabel* name_label;
	GtkBox* previews_box;
	GtkBox* project_preview_box;
	GtkRevealer* bottom_box_revealer;
	GtkBox* project_box;
};

struct _WidgetsTaskRowClass {
	GtkListBoxRowClass parent_class;
};

struct _Block32Data {
	int _ref_count_;
	ViewsProject* self;
	WidgetsTaskRow* row;
};

struct _WidgetsTaskNew {
	GtkRevealer parent_instance;
	WidgetsTaskNewPrivate * priv;
	GtkEntry* name_entry;
	WidgetsWhenButton* when_button;
};

struct _WidgetsTaskNewClass {
	GtkRevealerClass parent_class;
};

struct _Block33Data {
	int _ref_count_;
	ViewsProject* self;
	WidgetsPopoversDeadlinePopover* deadline_popover;
	GtkImage* show_hide_image;
	GtkLabel* note_view_placeholder_label;
	GtkToggleButton* show_completed_button;
	GtkImage* show_completed_icon;
	GtkToggleButton* notes_button;
	GtkRevealer* labels_flowbox_revealer;
	GtkClipboard* clipboard;
};

struct _Application {
	GtkApplication parent_instance;
	ApplicationPrivate * priv;
	MainWindow* main_window;
};

struct _ApplicationClass {
	GtkApplicationClass parent_class;
};

struct _ObjectsLabel {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsLabelPrivate * priv;
	gint id;
	gchar* name;
	gchar* color;
};

struct _ObjectsLabelClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsLabel *self);
};


static gpointer views_project_parent_class = NULL;
extern ServicesDatabase* application_database;
extern Utils* application_utils;
extern ServicesNotifications* application_notification;
extern GSettings* application_settings;

GType views_project_get_type (void) G_GNUC_CONST;
GType main_window_get_type (void) G_GNUC_CONST;
gpointer objects_project_ref (gpointer instance);
void objects_project_unref (gpointer instance);
GParamSpec* objects_param_spec_project (const gchar* name,
                                        const gchar* nick,
                                        const gchar* blurb,
                                        GType object_type,
                                        GParamFlags flags);
void objects_value_set_project (GValue* value,
                                gpointer v_object);
void objects_value_take_project (GValue* value,
                                 gpointer v_object);
gpointer objects_value_get_project (const GValue* value);
GType objects_project_get_type (void) G_GNUC_CONST;
GType widgets_task_new_get_type (void) G_GNUC_CONST;
GType widgets_alert_view_get_type (void) G_GNUC_CONST;
GType widgets_popovers_labels_popover_get_type (void) G_GNUC_CONST;
#define VIEWS_PROJECT_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), VIEWS_TYPE_PROJECT, ViewsProjectPrivate))
ViewsProject* views_project_new (ObjectsProject* _project,
                                 MainWindow* parent);
ViewsProject* views_project_construct (GType object_type,
                                       ObjectsProject* _project,
                                       MainWindow* parent);
void views_project_apply_remove (ViewsProject* self);
GType widgets_task_row_get_type (void) G_GNUC_CONST;
gpointer objects_task_ref (gpointer instance);
void objects_task_unref (gpointer instance);
GParamSpec* objects_param_spec_task (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void objects_value_set_task (GValue* value,
                             gpointer v_object);
void objects_value_take_task (GValue* value,
                              gpointer v_object);
gpointer objects_value_get_task (const GValue* value);
GType objects_task_get_type (void) G_GNUC_CONST;
ObjectsTask* widgets_task_row_get_task (WidgetsTaskRow* self);
ObjectsProject* views_project_get_project (ViewsProject* self);
void views_project_update_tasks_list (ViewsProject* self);
GType services_database_get_type (void) G_GNUC_CONST;
GeeArrayList* services_database_get_all_tasks_by_project (ServicesDatabase* self,
                                                          gint id);
static Block31Data* block31_data_ref (Block31Data* _data31_);
static void block31_data_unref (void * _userdata_);
WidgetsTaskRow* widgets_task_row_new (ObjectsTask* _task);
WidgetsTaskRow* widgets_task_row_construct (GType object_type,
                                            ObjectsTask* _task);
static void ____lambda396_ (Block31Data* _data31_,
                     ObjectsTask* _task);
static gboolean ___lambda397_ (Block31Data* _data31_);
static gboolean ____lambda397__gsource_func (gpointer self);
static void _____lambda396__widgets_task_row_on_signal_update (WidgetsTaskRow* _sender,
                                                        ObjectsTask* task,
                                                        gpointer self);
GType utils_get_type (void) G_GNUC_CONST;
gboolean utils_is_listbox_empty (Utils* self,
                                 GtkListBox* listbox);
void views_project_update_project (ViewsProject* self);
gint services_database_update_project (ServicesDatabase* self,
                                       ObjectsProject* project);
void views_project_check_visible_alertview (ViewsProject* self);
static void views_project_add_new_task (ViewsProject* self,
                                 ObjectsTask* task);
static Block32Data* block32_data_ref (Block32Data* _data32_);
static void block32_data_unref (void * _userdata_);
static void ___lambda398_ (Block32Data* _data32_,
                    ObjectsTask* _task);
static gboolean ___lambda399_ (Block32Data* _data32_);
static gboolean ____lambda399__gsource_func (gpointer self);
static void ____lambda398__widgets_task_row_on_signal_update (WidgetsTaskRow* _sender,
                                                       ObjectsTask* task,
                                                       gpointer self);
static void views_project_task_on_revealer (ViewsProject* self);
GType widgets_when_button_get_type (void) G_GNUC_CONST;
MainWindow* views_project_get_parent_window (ViewsProject* self);
static void views_project_set_parent_window (ViewsProject* self,
                                      MainWindow* value);
static void views_project_set_project (ViewsProject* self,
                                ObjectsProject* value);
static GObject * views_project_constructor (GType type,
                                     guint n_construct_properties,
                                     GObjectConstructParam * construct_properties);
GType widgets_popovers_deadline_popover_get_type (void) G_GNUC_CONST;
static Block33Data* block33_data_ref (Block33Data* _data33_);
static void block33_data_unref (void * _userdata_);
WidgetsAlertView* widgets_alert_view_new (const gchar* title,
                                          const gchar* description,
                                          const gchar* icon_name);
WidgetsAlertView* widgets_alert_view_construct (GType object_type,
                                                const gchar* title,
                                                const gchar* description,
                                                const gchar* icon_name);
gboolean utils_is_today (Utils* self,
                         GDateTime* date_1);
gboolean utils_is_tomorrow (Utils* self,
                            GDateTime* date_1);
gchar* utils_get_default_date_format_from_date (Utils* self,
                                                GDateTime* date);
WidgetsPopoversDeadlinePopover* widgets_popovers_deadline_popover_new (GtkWidget* relative);
WidgetsPopoversDeadlinePopover* widgets_popovers_deadline_popover_construct (GType object_type,
                                                                             GtkWidget* relative);
static void _views_project___lambda403_ (Block33Data* _data33_);
static void __views_project___lambda403__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                             gpointer self);
static void _views_project___lambda404_ (ViewsProject* self);
static void __views_project___lambda404__gtk_popover_closed (GtkPopover* _sender,
                                                      gpointer self);
static void _views_project___lambda405_ (ViewsProject* self,
                                  GDateTime* date);
static void __views_project___lambda405__widgets_popovers_deadline_popover_selection_changed (WidgetsPopoversDeadlinePopover* _sender,
                                                                                       GDateTime* date,
                                                                                       gpointer self);
static void _views_project___lambda406_ (ViewsProject* self,
                                  GDateTime* date);
static void __views_project___lambda406__widgets_popovers_deadline_popover_selection_double_changed (WidgetsPopoversDeadlinePopover* _sender,
                                                                                              GDateTime* date,
                                                                                              gpointer self);
static void _views_project___lambda407_ (ViewsProject* self);
static void __views_project___lambda407__widgets_popovers_deadline_popover_clear (WidgetsPopoversDeadlinePopover* _sender,
                                                                           gpointer self);
WidgetsPopoversLabelsPopover* widgets_popovers_labels_popover_new (GtkWidget* relative);
WidgetsPopoversLabelsPopover* widgets_popovers_labels_popover_construct (GType object_type,
                                                                         GtkWidget* relative);
static void _views_project___lambda408_ (ViewsProject* self);
GType dialogs_share_dialog_get_type (void) G_GNUC_CONST;
GType application_get_type (void) G_GNUC_CONST;
Application* application_get_instance (void);
DialogsShareDialog* dialogs_share_dialog_new (MainWindow* parent);
DialogsShareDialog* dialogs_share_dialog_construct (GType object_type,
                                                    MainWindow* parent);
void dialogs_share_dialog_set_project (DialogsShareDialog* self,
                                       gint value);
static void _gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                        gpointer self);
static void __views_project___lambda408__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self);
WidgetsTaskNew* widgets_task_new_new (gboolean _is_inbox,
                                      gint _project_id);
WidgetsTaskNew* widgets_task_new_construct (GType object_type,
                                            gboolean _is_inbox,
                                            gint _project_id);
static gboolean _views_project____lambda409_ (ViewsProject* self);
static gboolean __views_project____lambda409__gsource_func (gpointer self);
static gboolean _views_project____lambda410_ (ViewsProject* self);
static gboolean __views_project____lambda410__gsource_func (gpointer self);
static gboolean _views_project___lambda411_ (ViewsProject* self,
                                      GtkListBoxRow* row);
static gboolean __views_project___lambda411__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                                gpointer self);
static gint _views_project___lambda412_ (ViewsProject* self,
                                  GtkListBoxRow* row1,
                                  GtkListBoxRow* row2);
static gint __views_project___lambda412__gtk_list_box_sort_func (GtkListBoxRow* row1,
                                                          GtkListBoxRow* row2,
                                                          gpointer self);
static void _views_project___lambda413_ (Block33Data* _data33_);
static void __views_project___lambda413__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                             gpointer self);
static void _views_project___lambda414_ (Block33Data* _data33_);
static gboolean ___lambda415_ (ViewsProject* self,
                        GtkListBoxRow* row);
static gboolean ____lambda415__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                  gpointer self);
static gboolean ___lambda416_ (ViewsProject* self,
                        GtkListBoxRow* row);
static gboolean ____lambda416__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                  gpointer self);
static void __views_project___lambda414__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                             gpointer self);
static void _views_project___lambda417_ (Block33Data* _data33_);
void widgets_task_row_show_content (WidgetsTaskRow* self);
void widgets_task_row_hide_content (WidgetsTaskRow* self);
static void __views_project___lambda417__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                             gpointer self);
static gboolean _views_project___lambda418_ (ViewsProject* self);
static gboolean __views_project___lambda418__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                  GdkEventFocus* event,
                                                                  gpointer self);
static void _views_project___lambda419_ (ViewsProject* self);
static void __views_project___lambda419__gtk_entry_activate (GtkEntry* _sender,
                                                      gpointer self);
static gboolean _views_project___lambda420_ (ViewsProject* self,
                                      GdkEventKey* key);
static gboolean __views_project___lambda420__gtk_widget_key_release_event (GtkWidget* _sender,
                                                                    GdkEventKey* event,
                                                                    gpointer self);
static void _views_project___lambda421_ (ViewsProject* self);
gchar* utils_rgb_to_hex_string (Utils* self,
                                GdkRGBA* rgba);
static void __views_project___lambda421__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self);
static void _views_project___lambda422_ (Block33Data* _data33_);
GType services_notifications_get_type (void) G_GNUC_CONST;
ObjectsTask* objects_task_new (gint id,
                               gint checked,
                               gint project_id,
                               gint list_id,
                               gint task_order,
                               gint is_inbox,
                               gint has_reminder,
                               gint sidebar_width,
                               gint was_notified,
                               const gchar* content,
                               const gchar* note,
                               const gchar* when_date_utc,
                               const gchar* reminder_time,
                               const gchar* labels,
                               const gchar* checklist);
ObjectsTask* objects_task_construct (GType object_type,
                                     gint id,
                                     gint checked,
                                     gint project_id,
                                     gint list_id,
                                     gint task_order,
                                     gint is_inbox,
                                     gint has_reminder,
                                     gint sidebar_width,
                                     gint was_notified,
                                     const gchar* content,
                                     const gchar* note,
                                     const gchar* when_date_utc,
                                     const gchar* reminder_time,
                                     const gchar* labels,
                                     const gchar* checklist);
gint services_database_add_task (ServicesDatabase* self,
                                 ObjectsTask* task);
static void __views_project___lambda422__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self);
static gboolean _views_project___lambda423_ (ViewsProject* self,
                                      GdkEvent* event);
static gboolean __views_project___lambda423__gtk_widget_event (GtkWidget* _sender,
                                                        GdkEvent* event,
                                                        gpointer self);
static gboolean _views_project___lambda424_ (Block33Data* _data33_);
static gboolean __views_project___lambda424__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                                  GdkEventFocus* event,
                                                                  gpointer self);
static gboolean _views_project___lambda425_ (Block33Data* _data33_);
static gboolean __views_project___lambda425__gtk_widget_focus_in_event (GtkWidget* _sender,
                                                                 GdkEventFocus* event,
                                                                 gpointer self);
static void _views_project___lambda426_ (ViewsProject* self);
static void __views_project___lambda426__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self);
static void _views_project___lambda427_ (ViewsProject* self);
static void __views_project___lambda427__widgets_task_new_on_signal_close (WidgetsTaskNew* _sender,
                                                                    gpointer self);
static void _views_project___lambda428_ (ViewsProject* self,
                                  GtkWidget* widget);
static void __views_project___lambda428__gtk_container_remove (GtkContainer* _sender,
                                                        GtkWidget* widget,
                                                        gpointer self);
static void _views_project___lambda429_ (ViewsProject* self);
void widgets_popovers_labels_popover_update_label_list (WidgetsPopoversLabelsPopover* self);
static void __views_project___lambda429__gtk_button_clicked (GtkButton* _sender,
                                                      gpointer self);
gpointer objects_label_ref (gpointer instance);
void objects_label_unref (gpointer instance);
GParamSpec* objects_param_spec_label (const gchar* name,
                                      const gchar* nick,
                                      const gchar* blurb,
                                      GType object_type,
                                      GParamFlags flags);
void objects_value_set_label (GValue* value,
                              gpointer v_object);
void objects_value_take_label (GValue* value,
                               gpointer v_object);
gpointer objects_value_get_label (const GValue* value);
GType objects_label_get_type (void) G_GNUC_CONST;
static void _views_project___lambda430_ (Block33Data* _data33_,
                                  ObjectsLabel* label);
gboolean utils_is_label_repeted (Utils* self,
                                 GtkFlowBox* flowbox,
                                 gint id);
GType widgets_label_child_get_type (void) G_GNUC_CONST;
WidgetsLabelChild* widgets_label_child_new (ObjectsLabel* _label);
WidgetsLabelChild* widgets_label_child_construct (GType object_type,
                                                  ObjectsLabel* _label);
gboolean utils_is_empty (Utils* self,
                         GtkFlowBox* flowbox);
static gboolean __lambda431_ (ViewsProject* self,
                       GtkListBoxRow* row);
ObjectsLabel* widgets_label_child_get_label (WidgetsLabelChild* self);
static gboolean ___lambda431__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                 gpointer self);
static void __views_project___lambda430__widgets_popovers_labels_popover_on_selected_label (WidgetsPopoversLabelsPopover* _sender,
                                                                                     ObjectsLabel* label,
                                                                                     gpointer self);
static void _views_project___lambda432_ (Block33Data* _data33_,
                                  GtkWidget* widget);
static gboolean ___lambda433_ (ViewsProject* self,
                        GtkListBoxRow* row);
static gboolean ____lambda433__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                  gpointer self);
static gboolean ___lambda434_ (ViewsProject* self,
                        GtkListBoxRow* row);
static gboolean ____lambda434__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                  gpointer self);
static void __views_project___lambda432__gtk_container_remove (GtkContainer* _sender,
                                                        GtkWidget* widget,
                                                        gpointer self);
static void _views_project___lambda435_ (ViewsProject* self,
                                  ObjectsProject* _project);
static void __views_project___lambda435__services_database_update_project_signal (ServicesDatabase* _sender,
                                                                           ObjectsProject* project,
                                                                           gpointer self);
static void _views_project___lambda436_ (ViewsProject* self,
                                  ObjectsTask* task);
gboolean utils_is_task_repeted (Utils* self,
                                GtkListBox* listbox,
                                gint id);
void widgets_task_row_set_update_task (WidgetsTaskRow* self,
                                       ObjectsTask* _task);
static void __views_project___lambda436__services_database_update_task_signal (ServicesDatabase* _sender,
                                                                        ObjectsTask* task,
                                                                        gpointer self);
static void _views_project___lambda437_ (ViewsProject* self,
                                  ObjectsTask* task);
static void __views_project___lambda437__services_database_add_task_signal (ServicesDatabase* _sender,
                                                                     ObjectsTask* task,
                                                                     gpointer self);
static void _views_project___lambda438_ (ViewsProject* self,
                                  ObjectsTask* task);
static void __views_project___lambda438__services_database_on_signal_remove_task (ServicesDatabase* _sender,
                                                                           ObjectsTask* task,
                                                                           gpointer self);
static void views_project_finalize (GObject * obj);
static void _vala_views_project_get_property (GObject * object,
                                       guint property_id,
                                       GValue * value,
                                       GParamSpec * pspec);
static void _vala_views_project_set_property (GObject * object,
                                       guint property_id,
                                       const GValue * value,
                                       GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);


ViewsProject*
views_project_construct (GType object_type,
                         ObjectsProject* _project,
                         MainWindow* parent)
{
	ViewsProject * self = NULL;
#line 51 "/run/build/planner/src/Views/Project.vala"
	g_return_val_if_fail (_project != NULL, NULL);
#line 51 "/run/build/planner/src/Views/Project.vala"
	g_return_val_if_fail (parent != NULL, NULL);
#line 52 "/run/build/planner/src/Views/Project.vala"
	self = (ViewsProject*) g_object_new (object_type, "parent-window", parent, "project", _project, "expand", TRUE, NULL);
#line 51 "/run/build/planner/src/Views/Project.vala"
	return self;
#line 751 "Project.c"
}


ViewsProject*
views_project_new (ObjectsProject* _project,
                   MainWindow* parent)
{
#line 51 "/run/build/planner/src/Views/Project.vala"
	return views_project_construct (VIEWS_TYPE_PROJECT, _project, parent);
#line 761 "Project.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 728 "/run/build/planner/src/Views/Project.vala"
	return self ? g_object_ref (self) : NULL;
#line 770 "Project.c"
}


void
views_project_apply_remove (ViewsProject* self)
{
	GtkListBox* _tmp0_;
	GList* _tmp1_;
#line 727 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (self != NULL);
#line 728 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->tasks_list;
#line 728 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 785 "Project.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 728 "/run/build/planner/src/Views/Project.vala"
		element_collection = _tmp1_;
#line 728 "/run/build/planner/src/Views/Project.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 793 "Project.c"
			GtkWidget* _tmp2_;
			GtkWidget* element = NULL;
#line 728 "/run/build/planner/src/Views/Project.vala"
			_tmp2_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 728 "/run/build/planner/src/Views/Project.vala"
			element = _tmp2_;
#line 800 "Project.c"
			{
				WidgetsTaskRow* row = NULL;
				GtkWidget* _tmp3_;
				WidgetsTaskRow* _tmp4_;
				WidgetsTaskRow* _tmp5_;
				ObjectsTask* _tmp6_;
				ObjectsTask* _tmp7_;
				gint _tmp8_;
				ObjectsProject* _tmp9_;
				gint _tmp10_;
#line 729 "/run/build/planner/src/Views/Project.vala"
				_tmp3_ = element;
#line 729 "/run/build/planner/src/Views/Project.vala"
				_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp3_) : NULL);
#line 729 "/run/build/planner/src/Views/Project.vala"
				row = _tmp4_;
#line 731 "/run/build/planner/src/Views/Project.vala"
				_tmp5_ = row;
#line 731 "/run/build/planner/src/Views/Project.vala"
				_tmp6_ = widgets_task_row_get_task (_tmp5_);
#line 731 "/run/build/planner/src/Views/Project.vala"
				_tmp7_ = _tmp6_;
#line 731 "/run/build/planner/src/Views/Project.vala"
				_tmp8_ = _tmp7_->project_id;
#line 731 "/run/build/planner/src/Views/Project.vala"
				_tmp9_ = self->priv->_project;
#line 731 "/run/build/planner/src/Views/Project.vala"
				_tmp10_ = _tmp9_->id;
#line 731 "/run/build/planner/src/Views/Project.vala"
				if (_tmp8_ != _tmp10_) {
#line 831 "Project.c"
					GtkListBox* _tmp11_;
					GtkWidget* _tmp12_;
#line 732 "/run/build/planner/src/Views/Project.vala"
					_tmp11_ = self->priv->tasks_list;
#line 732 "/run/build/planner/src/Views/Project.vala"
					_tmp12_ = element;
#line 732 "/run/build/planner/src/Views/Project.vala"
					gtk_container_remove ((GtkContainer*) _tmp11_, _tmp12_);
#line 840 "Project.c"
				}
#line 728 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (row);
#line 728 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (element);
#line 846 "Project.c"
			}
		}
#line 728 "/run/build/planner/src/Views/Project.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 851 "Project.c"
	}
}


static Block31Data*
block31_data_ref (Block31Data* _data31_)
{
#line 743 "/run/build/planner/src/Views/Project.vala"
	g_atomic_int_inc (&_data31_->_ref_count_);
#line 743 "/run/build/planner/src/Views/Project.vala"
	return _data31_;
#line 863 "Project.c"
}


static void
block31_data_unref (void * _userdata_)
{
	Block31Data* _data31_;
	_data31_ = (Block31Data*) _userdata_;
#line 743 "/run/build/planner/src/Views/Project.vala"
	if (g_atomic_int_dec_and_test (&_data31_->_ref_count_)) {
#line 874 "Project.c"
		ViewsProject* self;
#line 743 "/run/build/planner/src/Views/Project.vala"
		self = _data31_->self;
#line 743 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (_data31_->row);
#line 743 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (self);
#line 743 "/run/build/planner/src/Views/Project.vala"
		g_slice_free (Block31Data, _data31_);
#line 884 "Project.c"
	}
}


static gboolean
___lambda397_ (Block31Data* _data31_)
{
	ViewsProject* self;
	gboolean result = FALSE;
	WidgetsTaskRow* _tmp0_;
	WidgetsTaskRow* _tmp1_;
	gdouble _tmp2_;
	gdouble _tmp3_;
	WidgetsTaskRow* _tmp4_;
	gdouble _tmp5_;
	gdouble _tmp6_;
#line 752 "/run/build/planner/src/Views/Project.vala"
	self = _data31_->self;
#line 753 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = _data31_->row;
#line 753 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = _data31_->row;
#line 753 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = gtk_widget_get_opacity ((GtkWidget*) _tmp1_);
#line 753 "/run/build/planner/src/Views/Project.vala"
	_tmp3_ = _tmp2_;
#line 753 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_opacity ((GtkWidget*) _tmp0_, _tmp3_ - 0.1);
#line 755 "/run/build/planner/src/Views/Project.vala"
	_tmp4_ = _data31_->row;
#line 755 "/run/build/planner/src/Views/Project.vala"
	_tmp5_ = gtk_widget_get_opacity ((GtkWidget*) _tmp4_);
#line 755 "/run/build/planner/src/Views/Project.vala"
	_tmp6_ = _tmp5_;
#line 755 "/run/build/planner/src/Views/Project.vala"
	if (_tmp6_ <= ((gdouble) 0)) {
#line 921 "Project.c"
		WidgetsTaskRow* _tmp7_;
#line 756 "/run/build/planner/src/Views/Project.vala"
		_tmp7_ = _data31_->row;
#line 756 "/run/build/planner/src/Views/Project.vala"
		gtk_widget_destroy ((GtkWidget*) _tmp7_);
#line 757 "/run/build/planner/src/Views/Project.vala"
		result = FALSE;
#line 757 "/run/build/planner/src/Views/Project.vala"
		return result;
#line 931 "Project.c"
	}
#line 760 "/run/build/planner/src/Views/Project.vala"
	result = TRUE;
#line 760 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 937 "Project.c"
}


static gboolean
____lambda397__gsource_func (gpointer self)
{
	gboolean result;
	result = ___lambda397_ (self);
#line 752 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 948 "Project.c"
}


static void
____lambda396_ (Block31Data* _data31_,
                ObjectsTask* _task)
{
	ViewsProject* self;
	gint _tmp0_;
	ObjectsProject* _tmp1_;
	gint _tmp2_;
	GtkListBox* _tmp3_;
#line 750 "/run/build/planner/src/Views/Project.vala"
	self = _data31_->self;
#line 750 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (_task != NULL);
#line 751 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = _task->project_id;
#line 751 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = self->priv->_project;
#line 751 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = _tmp1_->id;
#line 751 "/run/build/planner/src/Views/Project.vala"
	if (_tmp0_ != _tmp2_) {
#line 752 "/run/build/planner/src/Views/Project.vala"
		g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 20, ____lambda397__gsource_func, block31_data_ref (_data31_), block31_data_unref);
#line 975 "Project.c"
	}
#line 764 "/run/build/planner/src/Views/Project.vala"
	_tmp3_ = self->priv->tasks_list;
#line 764 "/run/build/planner/src/Views/Project.vala"
	gtk_list_box_unselect_all (_tmp3_);
#line 981 "Project.c"
}


static void
_____lambda396__widgets_task_row_on_signal_update (WidgetsTaskRow* _sender,
                                                   ObjectsTask* task,
                                                   gpointer self)
{
#line 750 "/run/build/planner/src/Views/Project.vala"
	____lambda396_ (self, task);
#line 992 "Project.c"
}


void
views_project_update_tasks_list (ViewsProject* self)
{
	GeeArrayList* all_tasks = NULL;
	GeeArrayList* _tmp0_;
	ServicesDatabase* _tmp1_;
	ObjectsProject* _tmp2_;
	gint _tmp3_;
	GeeArrayList* _tmp4_;
	Utils* _tmp26_;
	GtkListBox* _tmp27_;
#line 739 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (self != NULL);
#line 740 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = gee_array_list_new (OBJECTS_TYPE_TASK, (GBoxedCopyFunc) objects_task_ref, (GDestroyNotify) objects_task_unref, NULL, NULL, NULL);
#line 740 "/run/build/planner/src/Views/Project.vala"
	all_tasks = _tmp0_;
#line 741 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = application_database;
#line 741 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = self->priv->_project;
#line 741 "/run/build/planner/src/Views/Project.vala"
	_tmp3_ = _tmp2_->id;
#line 741 "/run/build/planner/src/Views/Project.vala"
	_tmp4_ = services_database_get_all_tasks_by_project (_tmp1_, _tmp3_);
#line 741 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (all_tasks);
#line 741 "/run/build/planner/src/Views/Project.vala"
	all_tasks = _tmp4_;
#line 1025 "Project.c"
	{
		GeeArrayList* _task_list = NULL;
		GeeArrayList* _tmp5_;
		GeeArrayList* _tmp6_;
		gint _task_size = 0;
		GeeArrayList* _tmp7_;
		gint _tmp8_;
		gint _tmp9_;
		gint _task_index = 0;
#line 743 "/run/build/planner/src/Views/Project.vala"
		_tmp5_ = all_tasks;
#line 743 "/run/build/planner/src/Views/Project.vala"
		_tmp6_ = _g_object_ref0 (_tmp5_);
#line 743 "/run/build/planner/src/Views/Project.vala"
		_task_list = _tmp6_;
#line 743 "/run/build/planner/src/Views/Project.vala"
		_tmp7_ = _task_list;
#line 743 "/run/build/planner/src/Views/Project.vala"
		_tmp8_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp7_);
#line 743 "/run/build/planner/src/Views/Project.vala"
		_tmp9_ = _tmp8_;
#line 743 "/run/build/planner/src/Views/Project.vala"
		_task_size = _tmp9_;
#line 743 "/run/build/planner/src/Views/Project.vala"
		_task_index = -1;
#line 743 "/run/build/planner/src/Views/Project.vala"
		while (TRUE) {
#line 1053 "Project.c"
			Block31Data* _data31_;
			gint _tmp10_;
			gint _tmp11_;
			gint _tmp12_;
			ObjectsTask* task = NULL;
			GeeArrayList* _tmp13_;
			gint _tmp14_;
			gpointer _tmp15_;
			ObjectsTask* _tmp16_;
			WidgetsTaskRow* _tmp17_;
			WidgetsTaskRow* _tmp18_;
			GtkBox* _tmp19_;
			WidgetsTaskRow* _tmp20_;
			GtkBox* _tmp21_;
			GtkListBox* _tmp22_;
			WidgetsTaskRow* _tmp23_;
			WidgetsTaskRow* _tmp24_;
			GtkListBox* _tmp25_;
#line 743 "/run/build/planner/src/Views/Project.vala"
			_data31_ = g_slice_new0 (Block31Data);
#line 743 "/run/build/planner/src/Views/Project.vala"
			_data31_->_ref_count_ = 1;
#line 743 "/run/build/planner/src/Views/Project.vala"
			_data31_->self = g_object_ref (self);
#line 743 "/run/build/planner/src/Views/Project.vala"
			_tmp10_ = _task_index;
#line 743 "/run/build/planner/src/Views/Project.vala"
			_task_index = _tmp10_ + 1;
#line 743 "/run/build/planner/src/Views/Project.vala"
			_tmp11_ = _task_index;
#line 743 "/run/build/planner/src/Views/Project.vala"
			_tmp12_ = _task_size;
#line 743 "/run/build/planner/src/Views/Project.vala"
			if (!(_tmp11_ < _tmp12_)) {
#line 743 "/run/build/planner/src/Views/Project.vala"
				block31_data_unref (_data31_);
#line 743 "/run/build/planner/src/Views/Project.vala"
				_data31_ = NULL;
#line 743 "/run/build/planner/src/Views/Project.vala"
				break;
#line 1094 "Project.c"
			}
#line 743 "/run/build/planner/src/Views/Project.vala"
			_tmp13_ = _task_list;
#line 743 "/run/build/planner/src/Views/Project.vala"
			_tmp14_ = _task_index;
#line 743 "/run/build/planner/src/Views/Project.vala"
			_tmp15_ = gee_abstract_list_get ((GeeAbstractList*) _tmp13_, _tmp14_);
#line 743 "/run/build/planner/src/Views/Project.vala"
			task = (ObjectsTask*) _tmp15_;
#line 744 "/run/build/planner/src/Views/Project.vala"
			_tmp16_ = task;
#line 744 "/run/build/planner/src/Views/Project.vala"
			_tmp17_ = widgets_task_row_new (_tmp16_);
#line 744 "/run/build/planner/src/Views/Project.vala"
			g_object_ref_sink (_tmp17_);
#line 744 "/run/build/planner/src/Views/Project.vala"
			_data31_->row = _tmp17_;
#line 745 "/run/build/planner/src/Views/Project.vala"
			_tmp18_ = _data31_->row;
#line 745 "/run/build/planner/src/Views/Project.vala"
			_tmp19_ = _tmp18_->project_preview_box;
#line 745 "/run/build/planner/src/Views/Project.vala"
			gtk_widget_set_visible ((GtkWidget*) _tmp19_, FALSE);
#line 746 "/run/build/planner/src/Views/Project.vala"
			_tmp20_ = _data31_->row;
#line 746 "/run/build/planner/src/Views/Project.vala"
			_tmp21_ = _tmp20_->project_preview_box;
#line 746 "/run/build/planner/src/Views/Project.vala"
			gtk_widget_set_no_show_all ((GtkWidget*) _tmp21_, TRUE);
#line 748 "/run/build/planner/src/Views/Project.vala"
			_tmp22_ = self->priv->tasks_list;
#line 748 "/run/build/planner/src/Views/Project.vala"
			_tmp23_ = _data31_->row;
#line 748 "/run/build/planner/src/Views/Project.vala"
			gtk_container_add ((GtkContainer*) _tmp22_, (GtkWidget*) _tmp23_);
#line 750 "/run/build/planner/src/Views/Project.vala"
			_tmp24_ = _data31_->row;
#line 750 "/run/build/planner/src/Views/Project.vala"
			g_signal_connect_data (_tmp24_, "on-signal-update", (GCallback) _____lambda396__widgets_task_row_on_signal_update, block31_data_ref (_data31_), (GClosureNotify) block31_data_unref, 0);
#line 767 "/run/build/planner/src/Views/Project.vala"
			_tmp25_ = self->priv->tasks_list;
#line 767 "/run/build/planner/src/Views/Project.vala"
			gtk_widget_show_all ((GtkWidget*) _tmp25_);
#line 743 "/run/build/planner/src/Views/Project.vala"
			_objects_task_unref0 (task);
#line 743 "/run/build/planner/src/Views/Project.vala"
			block31_data_unref (_data31_);
#line 743 "/run/build/planner/src/Views/Project.vala"
			_data31_ = NULL;
#line 1144 "Project.c"
		}
#line 743 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (_task_list);
#line 1148 "Project.c"
	}
#line 770 "/run/build/planner/src/Views/Project.vala"
	_tmp26_ = application_utils;
#line 770 "/run/build/planner/src/Views/Project.vala"
	_tmp27_ = self->priv->tasks_list;
#line 770 "/run/build/planner/src/Views/Project.vala"
	if (utils_is_listbox_empty (_tmp26_, _tmp27_)) {
#line 1156 "Project.c"
		GtkStack* _tmp28_;
#line 771 "/run/build/planner/src/Views/Project.vala"
		_tmp28_ = self->priv->main_stack;
#line 771 "/run/build/planner/src/Views/Project.vala"
		gtk_stack_set_visible_child_name (_tmp28_, "alert");
#line 1162 "Project.c"
	}
#line 739 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (all_tasks);
#line 1166 "Project.c"
}


void
views_project_update_project (ViewsProject* self)
{
	GtkEntry* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 775 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (self != NULL);
#line 776 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->name_entry;
#line 776 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = gtk_entry_get_text (_tmp0_);
#line 776 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = _tmp1_;
#line 776 "/run/build/planner/src/Views/Project.vala"
	if (g_strcmp0 (_tmp2_, "") == 0) {
#line 1186 "Project.c"
		GtkEntry* _tmp3_;
		ObjectsProject* _tmp4_;
		const gchar* _tmp5_;
#line 777 "/run/build/planner/src/Views/Project.vala"
		_tmp3_ = self->priv->name_entry;
#line 777 "/run/build/planner/src/Views/Project.vala"
		_tmp4_ = self->priv->_project;
#line 777 "/run/build/planner/src/Views/Project.vala"
		_tmp5_ = _tmp4_->name;
#line 777 "/run/build/planner/src/Views/Project.vala"
		gtk_entry_set_text (_tmp3_, _tmp5_);
#line 1198 "Project.c"
	} else {
		ObjectsProject* _tmp6_;
		GtkEntry* _tmp7_;
		const gchar* _tmp8_;
		const gchar* _tmp9_;
		gchar* _tmp10_;
		ServicesDatabase* _tmp11_;
		ObjectsProject* _tmp12_;
#line 779 "/run/build/planner/src/Views/Project.vala"
		_tmp6_ = self->priv->_project;
#line 779 "/run/build/planner/src/Views/Project.vala"
		_tmp7_ = self->priv->name_entry;
#line 779 "/run/build/planner/src/Views/Project.vala"
		_tmp8_ = gtk_entry_get_text (_tmp7_);
#line 779 "/run/build/planner/src/Views/Project.vala"
		_tmp9_ = _tmp8_;
#line 779 "/run/build/planner/src/Views/Project.vala"
		_tmp10_ = g_strdup (_tmp9_);
#line 779 "/run/build/planner/src/Views/Project.vala"
		_g_free0 (_tmp6_->name);
#line 779 "/run/build/planner/src/Views/Project.vala"
		_tmp6_->name = _tmp10_;
#line 781 "/run/build/planner/src/Views/Project.vala"
		_tmp11_ = application_database;
#line 781 "/run/build/planner/src/Views/Project.vala"
		_tmp12_ = self->priv->_project;
#line 781 "/run/build/planner/src/Views/Project.vala"
		if (services_database_update_project (_tmp11_, _tmp12_) == SQLITE_DONE) {
#line 1227 "Project.c"
		}
	}
}


void
views_project_check_visible_alertview (ViewsProject* self)
{
	Utils* _tmp0_;
	GtkListBox* _tmp1_;
#line 793 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (self != NULL);
#line 794 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = application_utils;
#line 794 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = self->priv->tasks_list;
#line 794 "/run/build/planner/src/Views/Project.vala"
	if (utils_is_listbox_empty (_tmp0_, _tmp1_)) {
#line 1246 "Project.c"
		GtkStack* _tmp2_;
#line 795 "/run/build/planner/src/Views/Project.vala"
		_tmp2_ = self->priv->main_stack;
#line 795 "/run/build/planner/src/Views/Project.vala"
		gtk_stack_set_visible_child_name (_tmp2_, "alert");
#line 1252 "Project.c"
	} else {
		GtkStack* _tmp3_;
#line 798 "/run/build/planner/src/Views/Project.vala"
		_tmp3_ = self->priv->main_stack;
#line 798 "/run/build/planner/src/Views/Project.vala"
		gtk_stack_set_visible_child_name (_tmp3_, "main");
#line 1259 "Project.c"
	}
#line 802 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 1263 "Project.c"
}


static Block32Data*
block32_data_ref (Block32Data* _data32_)
{
#line 806 "/run/build/planner/src/Views/Project.vala"
	g_atomic_int_inc (&_data32_->_ref_count_);
#line 806 "/run/build/planner/src/Views/Project.vala"
	return _data32_;
#line 1274 "Project.c"
}


static void
block32_data_unref (void * _userdata_)
{
	Block32Data* _data32_;
	_data32_ = (Block32Data*) _userdata_;
#line 806 "/run/build/planner/src/Views/Project.vala"
	if (g_atomic_int_dec_and_test (&_data32_->_ref_count_)) {
#line 1285 "Project.c"
		ViewsProject* self;
#line 806 "/run/build/planner/src/Views/Project.vala"
		self = _data32_->self;
#line 806 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (_data32_->row);
#line 806 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (self);
#line 806 "/run/build/planner/src/Views/Project.vala"
		g_slice_free (Block32Data, _data32_);
#line 1295 "Project.c"
	}
}


static gboolean
___lambda399_ (Block32Data* _data32_)
{
	ViewsProject* self;
	gboolean result = FALSE;
	WidgetsTaskRow* _tmp0_;
	WidgetsTaskRow* _tmp1_;
	gdouble _tmp2_;
	gdouble _tmp3_;
	WidgetsTaskRow* _tmp4_;
	gdouble _tmp5_;
	gdouble _tmp6_;
#line 815 "/run/build/planner/src/Views/Project.vala"
	self = _data32_->self;
#line 816 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = _data32_->row;
#line 816 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = _data32_->row;
#line 816 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = gtk_widget_get_opacity ((GtkWidget*) _tmp1_);
#line 816 "/run/build/planner/src/Views/Project.vala"
	_tmp3_ = _tmp2_;
#line 816 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_opacity ((GtkWidget*) _tmp0_, _tmp3_ - 0.1);
#line 818 "/run/build/planner/src/Views/Project.vala"
	_tmp4_ = _data32_->row;
#line 818 "/run/build/planner/src/Views/Project.vala"
	_tmp5_ = gtk_widget_get_opacity ((GtkWidget*) _tmp4_);
#line 818 "/run/build/planner/src/Views/Project.vala"
	_tmp6_ = _tmp5_;
#line 818 "/run/build/planner/src/Views/Project.vala"
	if (_tmp6_ <= ((gdouble) 0)) {
#line 1332 "Project.c"
		WidgetsTaskRow* _tmp7_;
#line 819 "/run/build/planner/src/Views/Project.vala"
		_tmp7_ = _data32_->row;
#line 819 "/run/build/planner/src/Views/Project.vala"
		gtk_widget_destroy ((GtkWidget*) _tmp7_);
#line 820 "/run/build/planner/src/Views/Project.vala"
		result = FALSE;
#line 820 "/run/build/planner/src/Views/Project.vala"
		return result;
#line 1342 "Project.c"
	}
#line 823 "/run/build/planner/src/Views/Project.vala"
	result = TRUE;
#line 823 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 1348 "Project.c"
}


static gboolean
____lambda399__gsource_func (gpointer self)
{
	gboolean result;
	result = ___lambda399_ (self);
#line 815 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 1359 "Project.c"
}


static void
___lambda398_ (Block32Data* _data32_,
               ObjectsTask* _task)
{
	ViewsProject* self;
	gint _tmp0_;
	ObjectsProject* _tmp1_;
	gint _tmp2_;
	GtkListBox* _tmp3_;
#line 813 "/run/build/planner/src/Views/Project.vala"
	self = _data32_->self;
#line 813 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (_task != NULL);
#line 814 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = _task->project_id;
#line 814 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = self->priv->_project;
#line 814 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = _tmp1_->id;
#line 814 "/run/build/planner/src/Views/Project.vala"
	if (_tmp0_ != _tmp2_) {
#line 815 "/run/build/planner/src/Views/Project.vala"
		g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 20, ____lambda399__gsource_func, block32_data_ref (_data32_), block32_data_unref);
#line 1386 "Project.c"
	}
#line 827 "/run/build/planner/src/Views/Project.vala"
	_tmp3_ = self->priv->tasks_list;
#line 827 "/run/build/planner/src/Views/Project.vala"
	gtk_list_box_unselect_all (_tmp3_);
#line 1392 "Project.c"
}


static void
____lambda398__widgets_task_row_on_signal_update (WidgetsTaskRow* _sender,
                                                  ObjectsTask* task,
                                                  gpointer self)
{
#line 813 "/run/build/planner/src/Views/Project.vala"
	___lambda398_ (self, task);
#line 1403 "Project.c"
}


static void
views_project_add_new_task (ViewsProject* self,
                            ObjectsTask* task)
{
	gint _tmp0_;
	ObjectsProject* _tmp1_;
	gint _tmp2_;
#line 805 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (self != NULL);
#line 805 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (task != NULL);
#line 806 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = task->project_id;
#line 806 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = self->priv->_project;
#line 806 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = _tmp1_->id;
#line 806 "/run/build/planner/src/Views/Project.vala"
	if (_tmp0_ == _tmp2_) {
#line 1426 "Project.c"
		Block32Data* _data32_;
		WidgetsTaskRow* _tmp3_;
		WidgetsTaskRow* _tmp4_;
		GtkBox* _tmp5_;
		WidgetsTaskRow* _tmp6_;
		GtkBox* _tmp7_;
		GtkListBox* _tmp8_;
		WidgetsTaskRow* _tmp9_;
		WidgetsTaskRow* _tmp10_;
		GtkListBox* _tmp11_;
#line 806 "/run/build/planner/src/Views/Project.vala"
		_data32_ = g_slice_new0 (Block32Data);
#line 806 "/run/build/planner/src/Views/Project.vala"
		_data32_->_ref_count_ = 1;
#line 806 "/run/build/planner/src/Views/Project.vala"
		_data32_->self = g_object_ref (self);
#line 807 "/run/build/planner/src/Views/Project.vala"
		_tmp3_ = widgets_task_row_new (task);
#line 807 "/run/build/planner/src/Views/Project.vala"
		g_object_ref_sink (_tmp3_);
#line 807 "/run/build/planner/src/Views/Project.vala"
		_data32_->row = _tmp3_;
#line 808 "/run/build/planner/src/Views/Project.vala"
		_tmp4_ = _data32_->row;
#line 808 "/run/build/planner/src/Views/Project.vala"
		_tmp5_ = _tmp4_->project_preview_box;
#line 808 "/run/build/planner/src/Views/Project.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp5_, FALSE);
#line 809 "/run/build/planner/src/Views/Project.vala"
		_tmp6_ = _data32_->row;
#line 809 "/run/build/planner/src/Views/Project.vala"
		_tmp7_ = _tmp6_->project_preview_box;
#line 809 "/run/build/planner/src/Views/Project.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp7_, TRUE);
#line 811 "/run/build/planner/src/Views/Project.vala"
		_tmp8_ = self->priv->tasks_list;
#line 811 "/run/build/planner/src/Views/Project.vala"
		_tmp9_ = _data32_->row;
#line 811 "/run/build/planner/src/Views/Project.vala"
		gtk_container_add ((GtkContainer*) _tmp8_, (GtkWidget*) _tmp9_);
#line 813 "/run/build/planner/src/Views/Project.vala"
		_tmp10_ = _data32_->row;
#line 813 "/run/build/planner/src/Views/Project.vala"
		g_signal_connect_data (_tmp10_, "on-signal-update", (GCallback) ____lambda398__widgets_task_row_on_signal_update, block32_data_ref (_data32_), (GClosureNotify) block32_data_unref, 0);
#line 830 "/run/build/planner/src/Views/Project.vala"
		_tmp11_ = self->priv->tasks_list;
#line 830 "/run/build/planner/src/Views/Project.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp11_);
#line 806 "/run/build/planner/src/Views/Project.vala"
		block32_data_unref (_data32_);
#line 806 "/run/build/planner/src/Views/Project.vala"
		_data32_ = NULL;
#line 1479 "Project.c"
	}
#line 833 "/run/build/planner/src/Views/Project.vala"
	views_project_check_visible_alertview (self);
#line 1483 "Project.c"
}


static void
views_project_task_on_revealer (ViewsProject* self)
{
	WidgetsTaskNew* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
	GtkListBox* _tmp13_;
#line 836 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (self != NULL);
#line 837 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->task_new_revealer;
#line 837 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = gtk_revealer_get_reveal_child ((GtkRevealer*) _tmp0_);
#line 837 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = _tmp1_;
#line 837 "/run/build/planner/src/Views/Project.vala"
	if (_tmp2_) {
#line 1504 "Project.c"
		WidgetsTaskNew* _tmp3_;
		WidgetsTaskNew* _tmp4_;
		GtkRevealer* _tmp5_;
		GtkRevealer* _tmp6_;
#line 838 "/run/build/planner/src/Views/Project.vala"
		_tmp3_ = self->priv->task_new_revealer;
#line 838 "/run/build/planner/src/Views/Project.vala"
		gtk_revealer_set_transition_type ((GtkRevealer*) _tmp3_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP);
#line 839 "/run/build/planner/src/Views/Project.vala"
		_tmp4_ = self->priv->task_new_revealer;
#line 839 "/run/build/planner/src/Views/Project.vala"
		gtk_revealer_set_reveal_child ((GtkRevealer*) _tmp4_, FALSE);
#line 841 "/run/build/planner/src/Views/Project.vala"
		_tmp5_ = self->priv->add_task_revealer;
#line 841 "/run/build/planner/src/Views/Project.vala"
		gtk_revealer_set_reveal_child (_tmp5_, TRUE);
#line 842 "/run/build/planner/src/Views/Project.vala"
		_tmp6_ = self->priv->show_completed_revealer;
#line 842 "/run/build/planner/src/Views/Project.vala"
		gtk_revealer_set_reveal_child (_tmp6_, TRUE);
#line 1525 "Project.c"
	} else {
		WidgetsTaskNew* _tmp7_;
		WidgetsTaskNew* _tmp8_;
		GtkRevealer* _tmp9_;
		GtkRevealer* _tmp10_;
		WidgetsTaskNew* _tmp11_;
		GtkEntry* _tmp12_;
#line 844 "/run/build/planner/src/Views/Project.vala"
		_tmp7_ = self->priv->task_new_revealer;
#line 844 "/run/build/planner/src/Views/Project.vala"
		gtk_revealer_set_transition_type ((GtkRevealer*) _tmp7_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN);
#line 845 "/run/build/planner/src/Views/Project.vala"
		_tmp8_ = self->priv->task_new_revealer;
#line 845 "/run/build/planner/src/Views/Project.vala"
		gtk_revealer_set_reveal_child ((GtkRevealer*) _tmp8_, TRUE);
#line 847 "/run/build/planner/src/Views/Project.vala"
		_tmp9_ = self->priv->add_task_revealer;
#line 847 "/run/build/planner/src/Views/Project.vala"
		gtk_revealer_set_reveal_child (_tmp9_, FALSE);
#line 848 "/run/build/planner/src/Views/Project.vala"
		_tmp10_ = self->priv->show_completed_revealer;
#line 848 "/run/build/planner/src/Views/Project.vala"
		gtk_revealer_set_reveal_child (_tmp10_, FALSE);
#line 850 "/run/build/planner/src/Views/Project.vala"
		_tmp11_ = self->priv->task_new_revealer;
#line 850 "/run/build/planner/src/Views/Project.vala"
		_tmp12_ = _tmp11_->name_entry;
#line 850 "/run/build/planner/src/Views/Project.vala"
		gtk_widget_grab_focus ((GtkWidget*) _tmp12_);
#line 1555 "Project.c"
	}
#line 853 "/run/build/planner/src/Views/Project.vala"
	_tmp13_ = self->priv->tasks_list;
#line 853 "/run/build/planner/src/Views/Project.vala"
	gtk_list_box_unselect_all (_tmp13_);
#line 1561 "Project.c"
}


MainWindow*
views_project_get_parent_window (ViewsProject* self)
{
	MainWindow* result;
	MainWindow* _tmp0_;
#line 23 "/run/build/planner/src/Views/Project.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->_parent_window;
#line 23 "/run/build/planner/src/Views/Project.vala"
	result = _tmp0_;
#line 23 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 1578 "Project.c"
}


static void
views_project_set_parent_window (ViewsProject* self,
                                 MainWindow* value)
{
#line 23 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (self != NULL);
#line 23 "/run/build/planner/src/Views/Project.vala"
	if (views_project_get_parent_window (self) != value) {
#line 23 "/run/build/planner/src/Views/Project.vala"
		self->priv->_parent_window = value;
#line 23 "/run/build/planner/src/Views/Project.vala"
		g_object_notify_by_pspec ((GObject *) self, views_project_properties[VIEWS_PROJECT_PARENT_WINDOW_PROPERTY]);
#line 1594 "Project.c"
	}
}


ObjectsProject*
views_project_get_project (ViewsProject* self)
{
	ObjectsProject* result;
	ObjectsProject* _tmp0_;
#line 24 "/run/build/planner/src/Views/Project.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 24 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->_project;
#line 24 "/run/build/planner/src/Views/Project.vala"
	result = _tmp0_;
#line 24 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 1612 "Project.c"
}


static gpointer
_objects_project_ref0 (gpointer self)
{
#line 24 "/run/build/planner/src/Views/Project.vala"
	return self ? objects_project_ref (self) : NULL;
#line 1621 "Project.c"
}


static void
views_project_set_project (ViewsProject* self,
                           ObjectsProject* value)
{
#line 24 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (self != NULL);
#line 24 "/run/build/planner/src/Views/Project.vala"
	if (views_project_get_project (self) != value) {
#line 1633 "Project.c"
		ObjectsProject* _tmp0_;
#line 24 "/run/build/planner/src/Views/Project.vala"
		_tmp0_ = _objects_project_ref0 (value);
#line 24 "/run/build/planner/src/Views/Project.vala"
		_objects_project_unref0 (self->priv->_project);
#line 24 "/run/build/planner/src/Views/Project.vala"
		self->priv->_project = _tmp0_;
#line 24 "/run/build/planner/src/Views/Project.vala"
		g_object_notify_by_pspec ((GObject *) self, views_project_properties[VIEWS_PROJECT_PROJECT_PROPERTY]);
#line 1643 "Project.c"
	}
}


static Block33Data*
block33_data_ref (Block33Data* _data33_)
{
#line 59 "/run/build/planner/src/Views/Project.vala"
	g_atomic_int_inc (&_data33_->_ref_count_);
#line 59 "/run/build/planner/src/Views/Project.vala"
	return _data33_;
#line 1655 "Project.c"
}


static void
block33_data_unref (void * _userdata_)
{
	Block33Data* _data33_;
	_data33_ = (Block33Data*) _userdata_;
#line 59 "/run/build/planner/src/Views/Project.vala"
	if (g_atomic_int_dec_and_test (&_data33_->_ref_count_)) {
#line 1666 "Project.c"
		ViewsProject* self;
#line 59 "/run/build/planner/src/Views/Project.vala"
		self = _data33_->self;
#line 59 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (_data33_->clipboard);
#line 59 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (_data33_->labels_flowbox_revealer);
#line 59 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (_data33_->notes_button);
#line 59 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (_data33_->show_completed_icon);
#line 59 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (_data33_->show_completed_button);
#line 59 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (_data33_->note_view_placeholder_label);
#line 59 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (_data33_->show_hide_image);
#line 59 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (_data33_->deadline_popover);
#line 59 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (self);
#line 59 "/run/build/planner/src/Views/Project.vala"
		g_slice_free (Block33Data, _data33_);
#line 1690 "Project.c"
	}
}


static void
_views_project___lambda403_ (Block33Data* _data33_)
{
	ViewsProject* self;
	GtkToggleButton* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 140 "/run/build/planner/src/Views/Project.vala"
	self = _data33_->self;
#line 141 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->deadline_project_button;
#line 141 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = gtk_toggle_button_get_active (_tmp0_);
#line 141 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = _tmp1_;
#line 141 "/run/build/planner/src/Views/Project.vala"
	if (_tmp2_) {
#line 1712 "Project.c"
		WidgetsPopoversDeadlinePopover* _tmp3_;
#line 142 "/run/build/planner/src/Views/Project.vala"
		_tmp3_ = _data33_->deadline_popover;
#line 142 "/run/build/planner/src/Views/Project.vala"
		gtk_widget_show_all ((GtkWidget*) _tmp3_);
#line 1718 "Project.c"
	}
}


static void
__views_project___lambda403__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                        gpointer self)
{
#line 140 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda403_ (self);
#line 1729 "Project.c"
}


static void
_views_project___lambda404_ (ViewsProject* self)
{
	GtkToggleButton* _tmp0_;
#line 147 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->deadline_project_button;
#line 147 "/run/build/planner/src/Views/Project.vala"
	gtk_toggle_button_set_active (_tmp0_, FALSE);
#line 149 "/run/build/planner/src/Views/Project.vala"
	views_project_update_project (self);
#line 1743 "Project.c"
}


static void
__views_project___lambda404__gtk_popover_closed (GtkPopover* _sender,
                                                 gpointer self)
{
#line 146 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda404_ ((ViewsProject*) self);
#line 1753 "Project.c"
}


static gchar*
g_date_time_to_string (GDateTime* self)
{
	gchar* result = NULL;
	gchar* _tmp0_;
#line 3009 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 3010 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	_tmp0_ = g_date_time_format (self, "%FT%H:%M:%S%z");
#line 3010 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	result = _tmp0_;
#line 3010 "/app/share/vala-0.40/vapi/glib-2.0.vapi"
	return result;
#line 1770 "Project.c"
}


static void
_views_project___lambda405_ (ViewsProject* self,
                             GDateTime* date)
{
	Utils* _tmp0_;
	ObjectsProject* _tmp10_;
	gchar* _tmp11_;
#line 152 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (date != NULL);
#line 153 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = application_utils;
#line 153 "/run/build/planner/src/Views/Project.vala"
	if (utils_is_today (_tmp0_, date)) {
#line 1787 "Project.c"
		GtkLabel* _tmp1_;
#line 154 "/run/build/planner/src/Views/Project.vala"
		_tmp1_ = self->priv->deadline_project_label;
#line 154 "/run/build/planner/src/Views/Project.vala"
		gtk_label_set_label (_tmp1_, _ ("Today"));
#line 1793 "Project.c"
	} else {
		Utils* _tmp2_;
#line 155 "/run/build/planner/src/Views/Project.vala"
		_tmp2_ = application_utils;
#line 155 "/run/build/planner/src/Views/Project.vala"
		if (utils_is_tomorrow (_tmp2_, date)) {
#line 1800 "Project.c"
			GtkLabel* _tmp3_;
#line 156 "/run/build/planner/src/Views/Project.vala"
			_tmp3_ = self->priv->deadline_project_label;
#line 156 "/run/build/planner/src/Views/Project.vala"
			gtk_label_set_label (_tmp3_, _ ("Tomorrow"));
#line 1806 "Project.c"
		} else {
			GtkLabel* _tmp4_;
			Utils* _tmp5_;
			gchar* _tmp6_;
			gchar* _tmp7_;
			gchar* _tmp8_;
			gchar* _tmp9_;
#line 158 "/run/build/planner/src/Views/Project.vala"
			_tmp4_ = self->priv->deadline_project_label;
#line 158 "/run/build/planner/src/Views/Project.vala"
			_tmp5_ = application_utils;
#line 158 "/run/build/planner/src/Views/Project.vala"
			_tmp6_ = utils_get_default_date_format_from_date (_tmp5_, date);
#line 158 "/run/build/planner/src/Views/Project.vala"
			_tmp7_ = _tmp6_;
#line 158 "/run/build/planner/src/Views/Project.vala"
			_tmp8_ = g_date_time_format (date, _tmp7_);
#line 158 "/run/build/planner/src/Views/Project.vala"
			_tmp9_ = _tmp8_;
#line 158 "/run/build/planner/src/Views/Project.vala"
			gtk_label_set_label (_tmp4_, _tmp9_);
#line 158 "/run/build/planner/src/Views/Project.vala"
			_g_free0 (_tmp9_);
#line 158 "/run/build/planner/src/Views/Project.vala"
			_g_free0 (_tmp7_);
#line 1832 "Project.c"
		}
	}
#line 161 "/run/build/planner/src/Views/Project.vala"
	_tmp10_ = self->priv->_project;
#line 161 "/run/build/planner/src/Views/Project.vala"
	_tmp11_ = g_date_time_to_string (date);
#line 161 "/run/build/planner/src/Views/Project.vala"
	_g_free0 (_tmp10_->deadline);
#line 161 "/run/build/planner/src/Views/Project.vala"
	_tmp10_->deadline = _tmp11_;
#line 1843 "Project.c"
}


static void
__views_project___lambda405__widgets_popovers_deadline_popover_selection_changed (WidgetsPopoversDeadlinePopover* _sender,
                                                                                  GDateTime* date,
                                                                                  gpointer self)
{
#line 152 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda405_ ((ViewsProject*) self, date);
#line 1854 "Project.c"
}


static void
_views_project___lambda406_ (ViewsProject* self,
                             GDateTime* date)
{
	Utils* _tmp0_;
	ObjectsProject* _tmp10_;
	gchar* _tmp11_;
#line 164 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (date != NULL);
#line 165 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = application_utils;
#line 165 "/run/build/planner/src/Views/Project.vala"
	if (utils_is_today (_tmp0_, date)) {
#line 1871 "Project.c"
		GtkLabel* _tmp1_;
#line 166 "/run/build/planner/src/Views/Project.vala"
		_tmp1_ = self->priv->deadline_project_label;
#line 166 "/run/build/planner/src/Views/Project.vala"
		gtk_label_set_label (_tmp1_, _ ("Today"));
#line 1877 "Project.c"
	} else {
		Utils* _tmp2_;
#line 167 "/run/build/planner/src/Views/Project.vala"
		_tmp2_ = application_utils;
#line 167 "/run/build/planner/src/Views/Project.vala"
		if (utils_is_tomorrow (_tmp2_, date)) {
#line 1884 "Project.c"
			GtkLabel* _tmp3_;
#line 168 "/run/build/planner/src/Views/Project.vala"
			_tmp3_ = self->priv->deadline_project_label;
#line 168 "/run/build/planner/src/Views/Project.vala"
			gtk_label_set_label (_tmp3_, _ ("Tomorrow"));
#line 1890 "Project.c"
		} else {
			GtkLabel* _tmp4_;
			Utils* _tmp5_;
			gchar* _tmp6_;
			gchar* _tmp7_;
			gchar* _tmp8_;
			gchar* _tmp9_;
#line 170 "/run/build/planner/src/Views/Project.vala"
			_tmp4_ = self->priv->deadline_project_label;
#line 170 "/run/build/planner/src/Views/Project.vala"
			_tmp5_ = application_utils;
#line 170 "/run/build/planner/src/Views/Project.vala"
			_tmp6_ = utils_get_default_date_format_from_date (_tmp5_, date);
#line 170 "/run/build/planner/src/Views/Project.vala"
			_tmp7_ = _tmp6_;
#line 170 "/run/build/planner/src/Views/Project.vala"
			_tmp8_ = g_date_time_format (date, _tmp7_);
#line 170 "/run/build/planner/src/Views/Project.vala"
			_tmp9_ = _tmp8_;
#line 170 "/run/build/planner/src/Views/Project.vala"
			gtk_label_set_label (_tmp4_, _tmp9_);
#line 170 "/run/build/planner/src/Views/Project.vala"
			_g_free0 (_tmp9_);
#line 170 "/run/build/planner/src/Views/Project.vala"
			_g_free0 (_tmp7_);
#line 1916 "Project.c"
		}
	}
#line 173 "/run/build/planner/src/Views/Project.vala"
	_tmp10_ = self->priv->_project;
#line 173 "/run/build/planner/src/Views/Project.vala"
	_tmp11_ = g_date_time_to_string (date);
#line 173 "/run/build/planner/src/Views/Project.vala"
	_g_free0 (_tmp10_->deadline);
#line 173 "/run/build/planner/src/Views/Project.vala"
	_tmp10_->deadline = _tmp11_;
#line 1927 "Project.c"
}


static void
__views_project___lambda406__widgets_popovers_deadline_popover_selection_double_changed (WidgetsPopoversDeadlinePopover* _sender,
                                                                                         GDateTime* date,
                                                                                         gpointer self)
{
#line 164 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda406_ ((ViewsProject*) self, date);
#line 1938 "Project.c"
}


static void
_views_project___lambda407_ (ViewsProject* self)
{
	GtkLabel* _tmp0_;
	ObjectsProject* _tmp1_;
	gchar* _tmp2_;
#line 177 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->deadline_project_label;
#line 177 "/run/build/planner/src/Views/Project.vala"
	gtk_label_set_label (_tmp0_, _ ("Deadline"));
#line 178 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = self->priv->_project;
#line 178 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = g_strdup ("");
#line 178 "/run/build/planner/src/Views/Project.vala"
	_g_free0 (_tmp1_->deadline);
#line 178 "/run/build/planner/src/Views/Project.vala"
	_tmp1_->deadline = _tmp2_;
#line 1960 "Project.c"
}


static void
__views_project___lambda407__widgets_popovers_deadline_popover_clear (WidgetsPopoversDeadlinePopover* _sender,
                                                                      gpointer self)
{
#line 176 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda407_ ((ViewsProject*) self);
#line 1970 "Project.c"
}


static void
_gtk_main_quit_gtk_widget_destroy (GtkWidget* _sender,
                                   gpointer self)
{
#line 211 "/run/build/planner/src/Views/Project.vala"
	gtk_main_quit ();
#line 1980 "Project.c"
}


static void
_views_project___lambda408_ (ViewsProject* self)
{
	DialogsShareDialog* share_dialog = NULL;
	Application* _tmp0_;
	Application* _tmp1_;
	MainWindow* _tmp2_;
	DialogsShareDialog* _tmp3_;
	DialogsShareDialog* _tmp4_;
	ObjectsProject* _tmp5_;
	gint _tmp6_;
	DialogsShareDialog* _tmp7_;
	DialogsShareDialog* _tmp8_;
#line 209 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = application_get_instance ();
#line 209 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = _tmp0_;
#line 209 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = _tmp1_->main_window;
#line 209 "/run/build/planner/src/Views/Project.vala"
	_tmp3_ = dialogs_share_dialog_new (_tmp2_);
#line 209 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp3_);
#line 209 "/run/build/planner/src/Views/Project.vala"
	share_dialog = _tmp3_;
#line 210 "/run/build/planner/src/Views/Project.vala"
	_tmp4_ = share_dialog;
#line 210 "/run/build/planner/src/Views/Project.vala"
	_tmp5_ = self->priv->_project;
#line 210 "/run/build/planner/src/Views/Project.vala"
	_tmp6_ = _tmp5_->id;
#line 210 "/run/build/planner/src/Views/Project.vala"
	dialogs_share_dialog_set_project (_tmp4_, _tmp6_);
#line 211 "/run/build/planner/src/Views/Project.vala"
	_tmp7_ = share_dialog;
#line 211 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect ((GtkWidget*) _tmp7_, "destroy", (GCallback) _gtk_main_quit_gtk_widget_destroy, NULL);
#line 212 "/run/build/planner/src/Views/Project.vala"
	_tmp8_ = share_dialog;
#line 212 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp8_);
#line 208 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (share_dialog);
#line 2027 "Project.c"
}


static void
__views_project___lambda408__gtk_button_clicked (GtkButton* _sender,
                                                 gpointer self)
{
#line 208 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda408_ ((ViewsProject*) self);
#line 2037 "Project.c"
}


static gboolean
_views_project____lambda409_ (ViewsProject* self)
{
	gboolean result = FALSE;
	GtkStack* _tmp0_;
#line 398 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->main_stack;
#line 398 "/run/build/planner/src/Views/Project.vala"
	gtk_stack_set_visible_child_name (_tmp0_, "alert");
#line 399 "/run/build/planner/src/Views/Project.vala"
	result = FALSE;
#line 399 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 2054 "Project.c"
}


static gboolean
__views_project____lambda409__gsource_func (gpointer self)
{
	gboolean result;
	result = _views_project____lambda409_ ((ViewsProject*) self);
#line 397 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 2065 "Project.c"
}


static gboolean
_views_project____lambda410_ (ViewsProject* self)
{
	gboolean result = FALSE;
	GtkStack* _tmp0_;
#line 403 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->main_stack;
#line 403 "/run/build/planner/src/Views/Project.vala"
	gtk_stack_set_visible_child_name (_tmp0_, "main");
#line 404 "/run/build/planner/src/Views/Project.vala"
	result = FALSE;
#line 404 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 2082 "Project.c"
}


static gboolean
__views_project____lambda410__gsource_func (gpointer self)
{
	gboolean result;
	result = _views_project____lambda410_ ((ViewsProject*) self);
#line 402 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 2093 "Project.c"
}


static gboolean
_views_project___lambda411_ (ViewsProject* self,
                             GtkListBoxRow* row)
{
	gboolean result = FALSE;
	WidgetsTaskRow* item = NULL;
	WidgetsTaskRow* _tmp0_;
	WidgetsTaskRow* _tmp1_;
	ObjectsTask* _tmp2_;
	ObjectsTask* _tmp3_;
	gint _tmp4_;
#line 410 "/run/build/planner/src/Views/Project.vala"
	g_return_val_if_fail (row != NULL, FALSE);
#line 411 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) row) : NULL);
#line 411 "/run/build/planner/src/Views/Project.vala"
	item = _tmp0_;
#line 412 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = item;
#line 412 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = widgets_task_row_get_task (_tmp1_);
#line 412 "/run/build/planner/src/Views/Project.vala"
	_tmp3_ = _tmp2_;
#line 412 "/run/build/planner/src/Views/Project.vala"
	_tmp4_ = _tmp3_->checked;
#line 412 "/run/build/planner/src/Views/Project.vala"
	result = _tmp4_ == 0;
#line 412 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (item);
#line 412 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 2128 "Project.c"
}


static gboolean
__views_project___lambda411__gtk_list_box_filter_func (GtkListBoxRow* row,
                                                       gpointer self)
{
	gboolean result;
	result = _views_project___lambda411_ ((ViewsProject*) self, row);
#line 410 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 2140 "Project.c"
}


static gint
_views_project___lambda412_ (ViewsProject* self,
                             GtkListBoxRow* row1,
                             GtkListBoxRow* row2)
{
	gint result = 0;
	WidgetsTaskRow* item1 = NULL;
	WidgetsTaskRow* _tmp0_;
	WidgetsTaskRow* _tmp1_;
	ObjectsTask* _tmp2_;
	ObjectsTask* _tmp3_;
	gint _tmp4_;
#line 415 "/run/build/planner/src/Views/Project.vala"
	g_return_val_if_fail (row1 != NULL, 0);
#line 415 "/run/build/planner/src/Views/Project.vala"
	g_return_val_if_fail (row2 != NULL, 0);
#line 416 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row1, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) row1) : NULL);
#line 416 "/run/build/planner/src/Views/Project.vala"
	item1 = _tmp0_;
#line 417 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = item1;
#line 417 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = widgets_task_row_get_task (_tmp1_);
#line 417 "/run/build/planner/src/Views/Project.vala"
	_tmp3_ = _tmp2_;
#line 417 "/run/build/planner/src/Views/Project.vala"
	_tmp4_ = _tmp3_->checked;
#line 417 "/run/build/planner/src/Views/Project.vala"
	if (_tmp4_ == 0) {
#line 418 "/run/build/planner/src/Views/Project.vala"
		result = 0;
#line 418 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (item1);
#line 418 "/run/build/planner/src/Views/Project.vala"
		return result;
#line 2180 "Project.c"
	} else {
#line 420 "/run/build/planner/src/Views/Project.vala"
		result = 1;
#line 420 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (item1);
#line 420 "/run/build/planner/src/Views/Project.vala"
		return result;
#line 2188 "Project.c"
	}
#line 415 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (item1);
#line 2192 "Project.c"
}


static gint
__views_project___lambda412__gtk_list_box_sort_func (GtkListBoxRow* row1,
                                                     GtkListBoxRow* row2,
                                                     gpointer self)
{
	gint result;
	result = _views_project___lambda412_ ((ViewsProject*) self, row1, row2);
#line 415 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 2205 "Project.c"
}


static void
_views_project___lambda413_ (Block33Data* _data33_)
{
	ViewsProject* self;
	GtkToggleButton* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 425 "/run/build/planner/src/Views/Project.vala"
	self = _data33_->self;
#line 426 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = _data33_->notes_button;
#line 426 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = gtk_toggle_button_get_active (_tmp0_);
#line 426 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = _tmp1_;
#line 426 "/run/build/planner/src/Views/Project.vala"
	if (_tmp2_) {
#line 2226 "Project.c"
		GtkStack* _tmp3_;
#line 427 "/run/build/planner/src/Views/Project.vala"
		_tmp3_ = self->priv->main_stack;
#line 427 "/run/build/planner/src/Views/Project.vala"
		gtk_stack_set_visible_child_name (_tmp3_, "main");
#line 2232 "Project.c"
	} else {
		GtkStack* _tmp4_;
#line 429 "/run/build/planner/src/Views/Project.vala"
		_tmp4_ = self->priv->main_stack;
#line 429 "/run/build/planner/src/Views/Project.vala"
		gtk_stack_set_visible_child_name (_tmp4_, "notes");
#line 2239 "Project.c"
	}
}


static void
__views_project___lambda413__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                        gpointer self)
{
#line 425 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda413_ (self);
#line 2250 "Project.c"
}


static gboolean
___lambda415_ (ViewsProject* self,
               GtkListBoxRow* row)
{
	gboolean result = FALSE;
	WidgetsTaskRow* item = NULL;
	WidgetsTaskRow* _tmp0_;
#line 438 "/run/build/planner/src/Views/Project.vala"
	g_return_val_if_fail (row != NULL, FALSE);
#line 439 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) row) : NULL);
#line 439 "/run/build/planner/src/Views/Project.vala"
	item = _tmp0_;
#line 440 "/run/build/planner/src/Views/Project.vala"
	result = TRUE;
#line 440 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (item);
#line 440 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 2273 "Project.c"
}


static gboolean
____lambda415__gtk_list_box_filter_func (GtkListBoxRow* row,
                                         gpointer self)
{
	gboolean result;
	result = ___lambda415_ ((ViewsProject*) self, row);
#line 438 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 2285 "Project.c"
}


static gboolean
___lambda416_ (ViewsProject* self,
               GtkListBoxRow* row)
{
	gboolean result = FALSE;
	WidgetsTaskRow* item = NULL;
	WidgetsTaskRow* _tmp0_;
	WidgetsTaskRow* _tmp1_;
	ObjectsTask* _tmp2_;
	ObjectsTask* _tmp3_;
	gint _tmp4_;
#line 446 "/run/build/planner/src/Views/Project.vala"
	g_return_val_if_fail (row != NULL, FALSE);
#line 447 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) row) : NULL);
#line 447 "/run/build/planner/src/Views/Project.vala"
	item = _tmp0_;
#line 448 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = item;
#line 448 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = widgets_task_row_get_task (_tmp1_);
#line 448 "/run/build/planner/src/Views/Project.vala"
	_tmp3_ = _tmp2_;
#line 448 "/run/build/planner/src/Views/Project.vala"
	_tmp4_ = _tmp3_->checked;
#line 448 "/run/build/planner/src/Views/Project.vala"
	result = _tmp4_ == 0;
#line 448 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (item);
#line 448 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 2320 "Project.c"
}


static gboolean
____lambda416__gtk_list_box_filter_func (GtkListBoxRow* row,
                                         gpointer self)
{
	gboolean result;
	result = ___lambda416_ ((ViewsProject*) self, row);
#line 446 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 2332 "Project.c"
}


static void
_views_project___lambda414_ (Block33Data* _data33_)
{
	ViewsProject* self;
	GtkToggleButton* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 433 "/run/build/planner/src/Views/Project.vala"
	self = _data33_->self;
#line 434 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = _data33_->show_completed_button;
#line 434 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = gtk_toggle_button_get_active (_tmp0_);
#line 434 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = _tmp1_;
#line 434 "/run/build/planner/src/Views/Project.vala"
	if (_tmp2_) {
#line 2353 "Project.c"
		GtkToggleButton* _tmp3_;
		GtkImage* _tmp4_;
		GtkListBox* _tmp5_;
#line 435 "/run/build/planner/src/Views/Project.vala"
		_tmp3_ = _data33_->show_completed_button;
#line 435 "/run/build/planner/src/Views/Project.vala"
		gtk_widget_set_tooltip_text ((GtkWidget*) _tmp3_, _ ("Hide completed tasks"));
#line 436 "/run/build/planner/src/Views/Project.vala"
		_tmp4_ = _data33_->show_completed_icon;
#line 436 "/run/build/planner/src/Views/Project.vala"
		g_object_set (_tmp4_, "icon-name", "list-remove-symbolic", NULL);
#line 438 "/run/build/planner/src/Views/Project.vala"
		_tmp5_ = self->priv->tasks_list;
#line 438 "/run/build/planner/src/Views/Project.vala"
		gtk_list_box_set_filter_func (_tmp5_, ____lambda415__gtk_list_box_filter_func, g_object_ref (self), g_object_unref);
#line 2369 "Project.c"
	} else {
		GtkToggleButton* _tmp6_;
		GtkImage* _tmp7_;
		GtkListBox* _tmp8_;
#line 443 "/run/build/planner/src/Views/Project.vala"
		_tmp6_ = _data33_->show_completed_button;
#line 443 "/run/build/planner/src/Views/Project.vala"
		gtk_widget_set_tooltip_text ((GtkWidget*) _tmp6_, _ ("Show completed tasks"));
#line 444 "/run/build/planner/src/Views/Project.vala"
		_tmp7_ = _data33_->show_completed_icon;
#line 444 "/run/build/planner/src/Views/Project.vala"
		g_object_set (_tmp7_, "icon-name", "emblem-default-symbolic", NULL);
#line 446 "/run/build/planner/src/Views/Project.vala"
		_tmp8_ = self->priv->tasks_list;
#line 446 "/run/build/planner/src/Views/Project.vala"
		gtk_list_box_set_filter_func (_tmp8_, ____lambda416__gtk_list_box_filter_func, g_object_ref (self), g_object_unref);
#line 2386 "Project.c"
	}
}


static void
__views_project___lambda414__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                        gpointer self)
{
#line 433 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda414_ (self);
#line 2397 "Project.c"
}


static void
_views_project___lambda417_ (Block33Data* _data33_)
{
	ViewsProject* self;
	GtkToggleButton* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 474 "/run/build/planner/src/Views/Project.vala"
	self = _data33_->self;
#line 475 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->show_hide_all_button;
#line 475 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = gtk_toggle_button_get_active (_tmp0_);
#line 475 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = _tmp1_;
#line 475 "/run/build/planner/src/Views/Project.vala"
	if (_tmp2_) {
#line 2418 "Project.c"
		GtkToggleButton* _tmp3_;
		GtkImage* _tmp4_;
		GtkListBox* _tmp5_;
		GList* _tmp6_;
#line 476 "/run/build/planner/src/Views/Project.vala"
		_tmp3_ = self->priv->show_hide_all_button;
#line 476 "/run/build/planner/src/Views/Project.vala"
		gtk_widget_set_tooltip_text ((GtkWidget*) _tmp3_, _ ("Close all tasks"));
#line 477 "/run/build/planner/src/Views/Project.vala"
		_tmp4_ = _data33_->show_hide_image;
#line 477 "/run/build/planner/src/Views/Project.vala"
		g_object_set (_tmp4_, "icon-name", "zoom-out-symbolic", NULL);
#line 479 "/run/build/planner/src/Views/Project.vala"
		_tmp5_ = self->priv->tasks_list;
#line 479 "/run/build/planner/src/Views/Project.vala"
		_tmp6_ = gtk_container_get_children ((GtkContainer*) _tmp5_);
#line 2435 "Project.c"
		{
			GList* element_collection = NULL;
			GList* element_it = NULL;
#line 479 "/run/build/planner/src/Views/Project.vala"
			element_collection = _tmp6_;
#line 479 "/run/build/planner/src/Views/Project.vala"
			for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 2443 "Project.c"
				GtkWidget* _tmp7_;
				GtkWidget* element = NULL;
#line 479 "/run/build/planner/src/Views/Project.vala"
				_tmp7_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 479 "/run/build/planner/src/Views/Project.vala"
				element = _tmp7_;
#line 2450 "Project.c"
				{
					WidgetsTaskRow* row = NULL;
					GtkWidget* _tmp8_;
					WidgetsTaskRow* _tmp9_;
					WidgetsTaskRow* _tmp10_;
#line 480 "/run/build/planner/src/Views/Project.vala"
					_tmp8_ = element;
#line 480 "/run/build/planner/src/Views/Project.vala"
					_tmp9_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp8_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp8_) : NULL);
#line 480 "/run/build/planner/src/Views/Project.vala"
					row = _tmp9_;
#line 481 "/run/build/planner/src/Views/Project.vala"
					_tmp10_ = row;
#line 481 "/run/build/planner/src/Views/Project.vala"
					widgets_task_row_show_content (_tmp10_);
#line 479 "/run/build/planner/src/Views/Project.vala"
					_g_object_unref0 (row);
#line 479 "/run/build/planner/src/Views/Project.vala"
					_g_object_unref0 (element);
#line 2470 "Project.c"
				}
			}
#line 479 "/run/build/planner/src/Views/Project.vala"
			(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 2475 "Project.c"
		}
	} else {
		GtkToggleButton* _tmp11_;
		GtkImage* _tmp12_;
		GtkListBox* _tmp13_;
		GList* _tmp14_;
#line 484 "/run/build/planner/src/Views/Project.vala"
		_tmp11_ = self->priv->show_hide_all_button;
#line 484 "/run/build/planner/src/Views/Project.vala"
		gtk_widget_set_tooltip_text ((GtkWidget*) _tmp11_, _ ("Open all tasks"));
#line 485 "/run/build/planner/src/Views/Project.vala"
		_tmp12_ = _data33_->show_hide_image;
#line 485 "/run/build/planner/src/Views/Project.vala"
		g_object_set (_tmp12_, "icon-name", "zoom-in-symbolic", NULL);
#line 487 "/run/build/planner/src/Views/Project.vala"
		_tmp13_ = self->priv->tasks_list;
#line 487 "/run/build/planner/src/Views/Project.vala"
		_tmp14_ = gtk_container_get_children ((GtkContainer*) _tmp13_);
#line 2494 "Project.c"
		{
			GList* element_collection = NULL;
			GList* element_it = NULL;
#line 487 "/run/build/planner/src/Views/Project.vala"
			element_collection = _tmp14_;
#line 487 "/run/build/planner/src/Views/Project.vala"
			for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 2502 "Project.c"
				GtkWidget* _tmp15_;
				GtkWidget* element = NULL;
#line 487 "/run/build/planner/src/Views/Project.vala"
				_tmp15_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 487 "/run/build/planner/src/Views/Project.vala"
				element = _tmp15_;
#line 2509 "Project.c"
				{
					WidgetsTaskRow* row = NULL;
					GtkWidget* _tmp16_;
					WidgetsTaskRow* _tmp17_;
					WidgetsTaskRow* _tmp18_;
#line 488 "/run/build/planner/src/Views/Project.vala"
					_tmp16_ = element;
#line 488 "/run/build/planner/src/Views/Project.vala"
					_tmp17_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp16_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp16_) : NULL);
#line 488 "/run/build/planner/src/Views/Project.vala"
					row = _tmp17_;
#line 489 "/run/build/planner/src/Views/Project.vala"
					_tmp18_ = row;
#line 489 "/run/build/planner/src/Views/Project.vala"
					widgets_task_row_hide_content (_tmp18_);
#line 487 "/run/build/planner/src/Views/Project.vala"
					_g_object_unref0 (row);
#line 487 "/run/build/planner/src/Views/Project.vala"
					_g_object_unref0 (element);
#line 2529 "Project.c"
				}
			}
#line 487 "/run/build/planner/src/Views/Project.vala"
			(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 2534 "Project.c"
		}
	}
}


static void
__views_project___lambda417__gtk_toggle_button_toggled (GtkToggleButton* _sender,
                                                        gpointer self)
{
#line 474 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda417_ (self);
#line 2546 "Project.c"
}


static gboolean
_views_project___lambda418_ (ViewsProject* self)
{
	gboolean result = FALSE;
#line 495 "/run/build/planner/src/Views/Project.vala"
	views_project_update_project (self);
#line 496 "/run/build/planner/src/Views/Project.vala"
	result = FALSE;
#line 496 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 2560 "Project.c"
}


static gboolean
__views_project___lambda418__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                         GdkEventFocus* event,
                                                         gpointer self)
{
	gboolean result;
	result = _views_project___lambda418_ ((ViewsProject*) self);
#line 494 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 2573 "Project.c"
}


static void
_views_project___lambda419_ (ViewsProject* self)
{
#line 500 "/run/build/planner/src/Views/Project.vala"
	views_project_update_project (self);
#line 2582 "Project.c"
}


static void
__views_project___lambda419__gtk_entry_activate (GtkEntry* _sender,
                                                 gpointer self)
{
#line 499 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda419_ ((ViewsProject*) self);
#line 2592 "Project.c"
}


static gboolean
_views_project___lambda420_ (ViewsProject* self,
                             GdkEventKey* key)
{
	gboolean result = FALSE;
	guint _tmp0_;
#line 503 "/run/build/planner/src/Views/Project.vala"
	g_return_val_if_fail (key != NULL, FALSE);
#line 504 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = key->keyval;
#line 504 "/run/build/planner/src/Views/Project.vala"
	if (_tmp0_ == ((guint) 65307)) {
#line 505 "/run/build/planner/src/Views/Project.vala"
		views_project_update_project (self);
#line 2610 "Project.c"
	}
#line 508 "/run/build/planner/src/Views/Project.vala"
	result = FALSE;
#line 508 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 2616 "Project.c"
}


static gboolean
__views_project___lambda420__gtk_widget_key_release_event (GtkWidget* _sender,
                                                           GdkEventKey* event,
                                                           gpointer self)
{
	gboolean result;
	result = _views_project___lambda420_ ((ViewsProject*) self, event);
#line 503 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 2629 "Project.c"
}


static void
_views_project___lambda421_ (ViewsProject* self)
{
	GtkColorChooserDialog* color_dialog = NULL;
	MainWindow* _tmp0_;
	GtkColorChooserDialog* _tmp1_;
	GtkColorChooserDialog* _tmp2_;
	GtkColorChooserDialog* _tmp9_;
#line 512 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->_parent_window;
#line 512 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = (GtkColorChooserDialog*) gtk_color_chooser_dialog_new (_ ("Select Your Favorite Color"), (GtkWindow*) _tmp0_);
#line 512 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp1_);
#line 512 "/run/build/planner/src/Views/Project.vala"
	color_dialog = _tmp1_;
#line 513 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = color_dialog;
#line 513 "/run/build/planner/src/Views/Project.vala"
	if (gtk_dialog_run ((GtkDialog*) _tmp2_) == ((gint) GTK_RESPONSE_OK)) {
#line 2653 "Project.c"
		ObjectsProject* _tmp3_;
		Utils* _tmp4_;
		GtkColorChooserDialog* _tmp5_;
		GdkRGBA _tmp6_ = {0};
		GdkRGBA _tmp7_;
		gchar* _tmp8_;
#line 514 "/run/build/planner/src/Views/Project.vala"
		_tmp3_ = self->priv->_project;
#line 514 "/run/build/planner/src/Views/Project.vala"
		_tmp4_ = application_utils;
#line 514 "/run/build/planner/src/Views/Project.vala"
		_tmp5_ = color_dialog;
#line 514 "/run/build/planner/src/Views/Project.vala"
		gtk_color_chooser_get_rgba ((GtkColorChooser*) _tmp5_, &_tmp6_);
#line 514 "/run/build/planner/src/Views/Project.vala"
		_tmp7_ = _tmp6_;
#line 514 "/run/build/planner/src/Views/Project.vala"
		_tmp8_ = utils_rgb_to_hex_string (_tmp4_, &_tmp7_);
#line 514 "/run/build/planner/src/Views/Project.vala"
		_g_free0 (_tmp3_->color);
#line 514 "/run/build/planner/src/Views/Project.vala"
		_tmp3_->color = _tmp8_;
#line 516 "/run/build/planner/src/Views/Project.vala"
		views_project_update_project (self);
#line 2678 "Project.c"
	}
#line 519 "/run/build/planner/src/Views/Project.vala"
	_tmp9_ = color_dialog;
#line 519 "/run/build/planner/src/Views/Project.vala"
	g_signal_emit_by_name ((GtkDialog*) _tmp9_, "close");
#line 511 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (color_dialog);
#line 2686 "Project.c"
}


static void
__views_project___lambda421__gtk_button_clicked (GtkButton* _sender,
                                                 gpointer self)
{
#line 511 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda421_ ((ViewsProject*) self);
#line 2696 "Project.c"
}


static void
_views_project___lambda422_ (Block33Data* _data33_)
{
	ViewsProject* self;
	gchar* text = NULL;
	gchar* _tmp0_;
	GtkClipboard* _tmp1_;
	gchar* _tmp2_;
	gboolean _tmp3_ = FALSE;
	const gchar* _tmp4_;
	GtkListBox* _tmp17_;
#line 525 "/run/build/planner/src/Views/Project.vala"
	self = _data33_->self;
#line 526 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = g_strdup ("");
#line 526 "/run/build/planner/src/Views/Project.vala"
	text = _tmp0_;
#line 527 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = _data33_->clipboard;
#line 527 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = gtk_clipboard_wait_for_text (_tmp1_);
#line 527 "/run/build/planner/src/Views/Project.vala"
	_g_free0 (text);
#line 527 "/run/build/planner/src/Views/Project.vala"
	text = _tmp2_;
#line 529 "/run/build/planner/src/Views/Project.vala"
	_tmp4_ = text;
#line 529 "/run/build/planner/src/Views/Project.vala"
	if (g_strcmp0 (_tmp4_, "") == 0) {
#line 529 "/run/build/planner/src/Views/Project.vala"
		_tmp3_ = TRUE;
#line 2731 "Project.c"
	} else {
		const gchar* _tmp5_;
#line 529 "/run/build/planner/src/Views/Project.vala"
		_tmp5_ = text;
#line 529 "/run/build/planner/src/Views/Project.vala"
		_tmp3_ = _tmp5_ == NULL;
#line 2738 "Project.c"
	}
#line 529 "/run/build/planner/src/Views/Project.vala"
	if (_tmp3_) {
#line 2742 "Project.c"
		ServicesNotifications* _tmp6_;
#line 531 "/run/build/planner/src/Views/Project.vala"
		_tmp6_ = application_notification;
#line 531 "/run/build/planner/src/Views/Project.vala"
		g_signal_emit_by_name (_tmp6_, "send-local-notification", _ ("Empty clipboard"), _ ("Try copying some text and try again"), "dialog-error", 3, FALSE);
#line 2748 "Project.c"
	} else {
		ObjectsTask* task = NULL;
		ObjectsTask* _tmp7_;
		ObjectsTask* _tmp8_;
		const gchar* _tmp9_;
		gchar* _tmp10_;
		ObjectsTask* _tmp11_;
		ObjectsProject* _tmp12_;
		gint _tmp13_;
		ServicesDatabase* _tmp14_;
		ObjectsTask* _tmp15_;
#line 538 "/run/build/planner/src/Views/Project.vala"
		_tmp7_ = objects_task_new (0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "", "", "", "");
#line 538 "/run/build/planner/src/Views/Project.vala"
		task = _tmp7_;
#line 539 "/run/build/planner/src/Views/Project.vala"
		_tmp8_ = task;
#line 539 "/run/build/planner/src/Views/Project.vala"
		_tmp9_ = text;
#line 539 "/run/build/planner/src/Views/Project.vala"
		_tmp10_ = g_strdup (_tmp9_);
#line 539 "/run/build/planner/src/Views/Project.vala"
		_g_free0 (_tmp8_->content);
#line 539 "/run/build/planner/src/Views/Project.vala"
		_tmp8_->content = _tmp10_;
#line 540 "/run/build/planner/src/Views/Project.vala"
		_tmp11_ = task;
#line 540 "/run/build/planner/src/Views/Project.vala"
		_tmp12_ = self->priv->_project;
#line 540 "/run/build/planner/src/Views/Project.vala"
		_tmp13_ = _tmp12_->id;
#line 540 "/run/build/planner/src/Views/Project.vala"
		_tmp11_->project_id = _tmp13_;
#line 542 "/run/build/planner/src/Views/Project.vala"
		_tmp14_ = application_database;
#line 542 "/run/build/planner/src/Views/Project.vala"
		_tmp15_ = task;
#line 542 "/run/build/planner/src/Views/Project.vala"
		if (services_database_add_task (_tmp14_, _tmp15_) == SQLITE_DONE) {
#line 2788 "Project.c"
			ServicesNotifications* _tmp16_;
#line 543 "/run/build/planner/src/Views/Project.vala"
			_tmp16_ = application_notification;
#line 543 "/run/build/planner/src/Views/Project.vala"
			g_signal_emit_by_name (_tmp16_, "send-local-notification", _ ("His task was created from the clipboard"), _ ("Tap to undo"), "edit-paste", 3, TRUE);
#line 2794 "Project.c"
		}
#line 529 "/run/build/planner/src/Views/Project.vala"
		_objects_task_unref0 (task);
#line 2798 "Project.c"
	}
#line 552 "/run/build/planner/src/Views/Project.vala"
	_tmp17_ = self->priv->tasks_list;
#line 552 "/run/build/planner/src/Views/Project.vala"
	gtk_list_box_unselect_all (_tmp17_);
#line 525 "/run/build/planner/src/Views/Project.vala"
	_g_free0 (text);
#line 2806 "Project.c"
}


static void
__views_project___lambda422__gtk_button_clicked (GtkButton* _sender,
                                                 gpointer self)
{
#line 525 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda422_ (self);
#line 2816 "Project.c"
}


static gboolean
_views_project___lambda423_ (ViewsProject* self,
                             GdkEvent* event)
{
	gboolean result = FALSE;
	gint button_press = 0;
	GSettings* _tmp0_;
	gint _tmp1_;
	GtkListBox* _tmp25_;
#line 555 "/run/build/planner/src/Views/Project.vala"
	g_return_val_if_fail (event != NULL, FALSE);
#line 556 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = application_settings;
#line 556 "/run/build/planner/src/Views/Project.vala"
	button_press = g_settings_get_enum (_tmp0_, "quick-save");
#line 558 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = button_press;
#line 558 "/run/build/planner/src/Views/Project.vala"
	if (_tmp1_ == 0) {
#line 2839 "Project.c"
	} else {
		gint _tmp2_;
#line 560 "/run/build/planner/src/Views/Project.vala"
		_tmp2_ = button_press;
#line 560 "/run/build/planner/src/Views/Project.vala"
		if (_tmp2_ == 1) {
#line 2846 "Project.c"
			GdkEventType _tmp3_;
#line 561 "/run/build/planner/src/Views/Project.vala"
			_tmp3_ = event->type;
#line 561 "/run/build/planner/src/Views/Project.vala"
			if (_tmp3_ == GDK_2BUTTON_PRESS) {
#line 2852 "Project.c"
				GtkListBox* _tmp4_;
				GList* _tmp5_;
#line 562 "/run/build/planner/src/Views/Project.vala"
				_tmp4_ = self->priv->tasks_list;
#line 562 "/run/build/planner/src/Views/Project.vala"
				_tmp5_ = gtk_container_get_children ((GtkContainer*) _tmp4_);
#line 2859 "Project.c"
				{
					GList* element_collection = NULL;
					GList* element_it = NULL;
#line 562 "/run/build/planner/src/Views/Project.vala"
					element_collection = _tmp5_;
#line 562 "/run/build/planner/src/Views/Project.vala"
					for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 2867 "Project.c"
						GtkWidget* _tmp6_;
						GtkWidget* element = NULL;
#line 562 "/run/build/planner/src/Views/Project.vala"
						_tmp6_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 562 "/run/build/planner/src/Views/Project.vala"
						element = _tmp6_;
#line 2874 "Project.c"
						{
							WidgetsTaskRow* row = NULL;
							GtkWidget* _tmp7_;
							WidgetsTaskRow* _tmp8_;
							WidgetsTaskRow* _tmp9_;
							GtkRevealer* _tmp10_;
							gboolean _tmp11_;
							gboolean _tmp12_;
#line 563 "/run/build/planner/src/Views/Project.vala"
							_tmp7_ = element;
#line 563 "/run/build/planner/src/Views/Project.vala"
							_tmp8_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp7_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp7_) : NULL);
#line 563 "/run/build/planner/src/Views/Project.vala"
							row = _tmp8_;
#line 565 "/run/build/planner/src/Views/Project.vala"
							_tmp9_ = row;
#line 565 "/run/build/planner/src/Views/Project.vala"
							_tmp10_ = _tmp9_->bottom_box_revealer;
#line 565 "/run/build/planner/src/Views/Project.vala"
							_tmp11_ = gtk_revealer_get_reveal_child (_tmp10_);
#line 565 "/run/build/planner/src/Views/Project.vala"
							_tmp12_ = _tmp11_;
#line 565 "/run/build/planner/src/Views/Project.vala"
							if (_tmp12_) {
#line 2899 "Project.c"
								WidgetsTaskRow* _tmp13_;
#line 566 "/run/build/planner/src/Views/Project.vala"
								_tmp13_ = row;
#line 566 "/run/build/planner/src/Views/Project.vala"
								widgets_task_row_hide_content (_tmp13_);
#line 2905 "Project.c"
							}
#line 562 "/run/build/planner/src/Views/Project.vala"
							_g_object_unref0 (row);
#line 562 "/run/build/planner/src/Views/Project.vala"
							_g_object_unref0 (element);
#line 2911 "Project.c"
						}
					}
#line 562 "/run/build/planner/src/Views/Project.vala"
					(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 2916 "Project.c"
				}
			}
		} else {
			GdkEventType _tmp14_;
#line 571 "/run/build/planner/src/Views/Project.vala"
			_tmp14_ = event->type;
#line 571 "/run/build/planner/src/Views/Project.vala"
			if (_tmp14_ == GDK_3BUTTON_PRESS) {
#line 2925 "Project.c"
				GtkListBox* _tmp15_;
				GList* _tmp16_;
#line 572 "/run/build/planner/src/Views/Project.vala"
				_tmp15_ = self->priv->tasks_list;
#line 572 "/run/build/planner/src/Views/Project.vala"
				_tmp16_ = gtk_container_get_children ((GtkContainer*) _tmp15_);
#line 2932 "Project.c"
				{
					GList* element_collection = NULL;
					GList* element_it = NULL;
#line 572 "/run/build/planner/src/Views/Project.vala"
					element_collection = _tmp16_;
#line 572 "/run/build/planner/src/Views/Project.vala"
					for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 2940 "Project.c"
						GtkWidget* _tmp17_;
						GtkWidget* element = NULL;
#line 572 "/run/build/planner/src/Views/Project.vala"
						_tmp17_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 572 "/run/build/planner/src/Views/Project.vala"
						element = _tmp17_;
#line 2947 "Project.c"
						{
							WidgetsTaskRow* row = NULL;
							GtkWidget* _tmp18_;
							WidgetsTaskRow* _tmp19_;
							WidgetsTaskRow* _tmp20_;
							GtkRevealer* _tmp21_;
							gboolean _tmp22_;
							gboolean _tmp23_;
#line 573 "/run/build/planner/src/Views/Project.vala"
							_tmp18_ = element;
#line 573 "/run/build/planner/src/Views/Project.vala"
							_tmp19_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp18_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp18_) : NULL);
#line 573 "/run/build/planner/src/Views/Project.vala"
							row = _tmp19_;
#line 575 "/run/build/planner/src/Views/Project.vala"
							_tmp20_ = row;
#line 575 "/run/build/planner/src/Views/Project.vala"
							_tmp21_ = _tmp20_->bottom_box_revealer;
#line 575 "/run/build/planner/src/Views/Project.vala"
							_tmp22_ = gtk_revealer_get_reveal_child (_tmp21_);
#line 575 "/run/build/planner/src/Views/Project.vala"
							_tmp23_ = _tmp22_;
#line 575 "/run/build/planner/src/Views/Project.vala"
							if (_tmp23_) {
#line 2972 "Project.c"
								WidgetsTaskRow* _tmp24_;
#line 576 "/run/build/planner/src/Views/Project.vala"
								_tmp24_ = row;
#line 576 "/run/build/planner/src/Views/Project.vala"
								widgets_task_row_hide_content (_tmp24_);
#line 2978 "Project.c"
							}
#line 572 "/run/build/planner/src/Views/Project.vala"
							_g_object_unref0 (row);
#line 572 "/run/build/planner/src/Views/Project.vala"
							_g_object_unref0 (element);
#line 2984 "Project.c"
						}
					}
#line 572 "/run/build/planner/src/Views/Project.vala"
					(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 2989 "Project.c"
				}
			}
		}
	}
#line 582 "/run/build/planner/src/Views/Project.vala"
	_tmp25_ = self->priv->tasks_list;
#line 582 "/run/build/planner/src/Views/Project.vala"
	gtk_list_box_unselect_all (_tmp25_);
#line 583 "/run/build/planner/src/Views/Project.vala"
	result = FALSE;
#line 583 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 3002 "Project.c"
}


static gboolean
__views_project___lambda423__gtk_widget_event (GtkWidget* _sender,
                                               GdkEvent* event,
                                               gpointer self)
{
	gboolean result;
	result = _views_project___lambda423_ ((ViewsProject*) self, event);
#line 555 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 3015 "Project.c"
}


static gboolean
_views_project___lambda424_ (Block33Data* _data33_)
{
	ViewsProject* self;
	gboolean result = FALSE;
	GtkTextView* _tmp0_;
	GtkTextBuffer* _tmp1_;
	GtkTextBuffer* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	gboolean _tmp6_;
	ObjectsProject* _tmp9_;
	GtkTextView* _tmp10_;
	GtkTextBuffer* _tmp11_;
	GtkTextBuffer* _tmp12_;
	gchar* _tmp13_;
	gchar* _tmp14_;
#line 586 "/run/build/planner/src/Views/Project.vala"
	self = _data33_->self;
#line 587 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->note_view;
#line 587 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = gtk_text_view_get_buffer (_tmp0_);
#line 587 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = _tmp1_;
#line 587 "/run/build/planner/src/Views/Project.vala"
	g_object_get (_tmp2_, "text", &_tmp3_, NULL);
#line 587 "/run/build/planner/src/Views/Project.vala"
	_tmp4_ = _tmp3_;
#line 587 "/run/build/planner/src/Views/Project.vala"
	_tmp5_ = _tmp4_;
#line 587 "/run/build/planner/src/Views/Project.vala"
	_tmp6_ = g_strcmp0 (_tmp5_, "") == 0;
#line 587 "/run/build/planner/src/Views/Project.vala"
	_g_free0 (_tmp5_);
#line 587 "/run/build/planner/src/Views/Project.vala"
	if (_tmp6_) {
#line 3057 "Project.c"
		GtkLabel* _tmp7_;
		GtkLabel* _tmp8_;
#line 588 "/run/build/planner/src/Views/Project.vala"
		_tmp7_ = _data33_->note_view_placeholder_label;
#line 588 "/run/build/planner/src/Views/Project.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp7_, TRUE);
#line 589 "/run/build/planner/src/Views/Project.vala"
		_tmp8_ = _data33_->note_view_placeholder_label;
#line 589 "/run/build/planner/src/Views/Project.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp8_, FALSE);
#line 3068 "Project.c"
	}
#line 592 "/run/build/planner/src/Views/Project.vala"
	_tmp9_ = self->priv->_project;
#line 592 "/run/build/planner/src/Views/Project.vala"
	_tmp10_ = self->priv->note_view;
#line 592 "/run/build/planner/src/Views/Project.vala"
	_tmp11_ = gtk_text_view_get_buffer (_tmp10_);
#line 592 "/run/build/planner/src/Views/Project.vala"
	_tmp12_ = _tmp11_;
#line 592 "/run/build/planner/src/Views/Project.vala"
	g_object_get (_tmp12_, "text", &_tmp13_, NULL);
#line 592 "/run/build/planner/src/Views/Project.vala"
	_tmp14_ = _tmp13_;
#line 592 "/run/build/planner/src/Views/Project.vala"
	_g_free0 (_tmp9_->note);
#line 592 "/run/build/planner/src/Views/Project.vala"
	_tmp9_->note = _tmp14_;
#line 593 "/run/build/planner/src/Views/Project.vala"
	views_project_update_project (self);
#line 595 "/run/build/planner/src/Views/Project.vala"
	result = FALSE;
#line 595 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 3092 "Project.c"
}


static gboolean
__views_project___lambda424__gtk_widget_focus_out_event (GtkWidget* _sender,
                                                         GdkEventFocus* event,
                                                         gpointer self)
{
	gboolean result;
	result = _views_project___lambda424_ (self);
#line 586 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 3105 "Project.c"
}


static gboolean
_views_project___lambda425_ (Block33Data* _data33_)
{
	ViewsProject* self;
	gboolean result = FALSE;
	GtkLabel* _tmp0_;
	GtkLabel* _tmp1_;
#line 598 "/run/build/planner/src/Views/Project.vala"
	self = _data33_->self;
#line 599 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = _data33_->note_view_placeholder_label;
#line 599 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_visible ((GtkWidget*) _tmp0_, FALSE);
#line 600 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = _data33_->note_view_placeholder_label;
#line 600 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_no_show_all ((GtkWidget*) _tmp1_, TRUE);
#line 602 "/run/build/planner/src/Views/Project.vala"
	result = FALSE;
#line 602 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 3130 "Project.c"
}


static gboolean
__views_project___lambda425__gtk_widget_focus_in_event (GtkWidget* _sender,
                                                        GdkEventFocus* event,
                                                        gpointer self)
{
	gboolean result;
	result = _views_project___lambda425_ (self);
#line 598 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 3143 "Project.c"
}


static void
_views_project___lambda426_ (ViewsProject* self)
{
#line 606 "/run/build/planner/src/Views/Project.vala"
	views_project_task_on_revealer (self);
#line 3152 "Project.c"
}


static void
__views_project___lambda426__gtk_button_clicked (GtkButton* _sender,
                                                 gpointer self)
{
#line 605 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda426_ ((ViewsProject*) self);
#line 3162 "Project.c"
}


static void
_views_project___lambda427_ (ViewsProject* self)
{
#line 610 "/run/build/planner/src/Views/Project.vala"
	views_project_task_on_revealer (self);
#line 3171 "Project.c"
}


static void
__views_project___lambda427__widgets_task_new_on_signal_close (WidgetsTaskNew* _sender,
                                                               gpointer self)
{
#line 609 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda427_ ((ViewsProject*) self);
#line 3181 "Project.c"
}


static void
_views_project___lambda428_ (ViewsProject* self,
                             GtkWidget* widget)
{
#line 613 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (widget != NULL);
#line 614 "/run/build/planner/src/Views/Project.vala"
	views_project_check_visible_alertview (self);
#line 3193 "Project.c"
}


static void
__views_project___lambda428__gtk_container_remove (GtkContainer* _sender,
                                                   GtkWidget* widget,
                                                   gpointer self)
{
#line 613 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda428_ ((ViewsProject*) self, widget);
#line 3204 "Project.c"
}


static void
_views_project___lambda429_ (ViewsProject* self)
{
	WidgetsPopoversLabelsPopover* _tmp0_;
	WidgetsPopoversLabelsPopover* _tmp1_;
#line 618 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->labels_popover;
#line 618 "/run/build/planner/src/Views/Project.vala"
	widgets_popovers_labels_popover_update_label_list (_tmp0_);
#line 619 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = self->priv->labels_popover;
#line 619 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp1_);
#line 3221 "Project.c"
}


static void
__views_project___lambda429__gtk_button_clicked (GtkButton* _sender,
                                                 gpointer self)
{
#line 617 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda429_ ((ViewsProject*) self);
#line 3231 "Project.c"
}


static gboolean
__lambda431_ (ViewsProject* self,
              GtkListBoxRow* row)
{
	gboolean result = FALSE;
	WidgetsTaskRow* item = NULL;
	WidgetsTaskRow* _tmp0_;
	GeeArrayList* labels = NULL;
	GeeArrayList* _tmp1_;
	GeeArrayList* _labels = NULL;
	GeeArrayList* _tmp2_;
	WidgetsTaskRow* _tmp3_;
	ObjectsTask* _tmp4_;
	ObjectsTask* _tmp5_;
	const gchar* _tmp6_;
	gchar** _tmp7_;
	gchar** _tmp8_;
	GtkFlowBox* _tmp12_;
	GList* _tmp13_;
#line 633 "/run/build/planner/src/Views/Project.vala"
	g_return_val_if_fail (row != NULL, FALSE);
#line 634 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) row) : NULL);
#line 634 "/run/build/planner/src/Views/Project.vala"
	item = _tmp0_;
#line 635 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = gee_array_list_new (G_TYPE_INT, NULL, NULL, NULL, NULL, NULL);
#line 635 "/run/build/planner/src/Views/Project.vala"
	labels = _tmp1_;
#line 636 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = gee_array_list_new (G_TYPE_INT, NULL, NULL, NULL, NULL, NULL);
#line 636 "/run/build/planner/src/Views/Project.vala"
	_labels = _tmp2_;
#line 638 "/run/build/planner/src/Views/Project.vala"
	_tmp3_ = item;
#line 638 "/run/build/planner/src/Views/Project.vala"
	_tmp4_ = widgets_task_row_get_task (_tmp3_);
#line 638 "/run/build/planner/src/Views/Project.vala"
	_tmp5_ = _tmp4_;
#line 638 "/run/build/planner/src/Views/Project.vala"
	_tmp6_ = _tmp5_->labels;
#line 638 "/run/build/planner/src/Views/Project.vala"
	_tmp8_ = _tmp7_ = g_strsplit (_tmp6_, ";", 0);
#line 3278 "Project.c"
	{
		gchar** label_id_collection = NULL;
		gint label_id_collection_length1 = 0;
		gint _label_id_collection_size_ = 0;
		gint label_id_it = 0;
#line 638 "/run/build/planner/src/Views/Project.vala"
		label_id_collection = _tmp8_;
#line 638 "/run/build/planner/src/Views/Project.vala"
		label_id_collection_length1 = _vala_array_length (_tmp7_);
#line 638 "/run/build/planner/src/Views/Project.vala"
		for (label_id_it = 0; label_id_it < _vala_array_length (_tmp7_); label_id_it = label_id_it + 1) {
#line 3290 "Project.c"
			gchar* _tmp9_;
			gchar* label_id = NULL;
#line 638 "/run/build/planner/src/Views/Project.vala"
			_tmp9_ = g_strdup (label_id_collection[label_id_it]);
#line 638 "/run/build/planner/src/Views/Project.vala"
			label_id = _tmp9_;
#line 3297 "Project.c"
			{
				GeeArrayList* _tmp10_;
				const gchar* _tmp11_;
#line 639 "/run/build/planner/src/Views/Project.vala"
				_tmp10_ = labels;
#line 639 "/run/build/planner/src/Views/Project.vala"
				_tmp11_ = label_id;
#line 639 "/run/build/planner/src/Views/Project.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp10_, (gpointer) ((gintptr) atoi (_tmp11_)));
#line 638 "/run/build/planner/src/Views/Project.vala"
				_g_free0 (label_id);
#line 3309 "Project.c"
			}
		}
#line 638 "/run/build/planner/src/Views/Project.vala"
		label_id_collection = (_vala_array_free (label_id_collection, label_id_collection_length1, (GDestroyNotify) g_free), NULL);
#line 3314 "Project.c"
	}
#line 642 "/run/build/planner/src/Views/Project.vala"
	_tmp12_ = self->priv->labels_flowbox;
#line 642 "/run/build/planner/src/Views/Project.vala"
	_tmp13_ = gtk_container_get_children ((GtkContainer*) _tmp12_);
#line 3320 "Project.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 642 "/run/build/planner/src/Views/Project.vala"
		element_collection = _tmp13_;
#line 642 "/run/build/planner/src/Views/Project.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 3328 "Project.c"
			GtkWidget* _tmp14_;
			GtkWidget* element = NULL;
#line 642 "/run/build/planner/src/Views/Project.vala"
			_tmp14_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 642 "/run/build/planner/src/Views/Project.vala"
			element = _tmp14_;
#line 3335 "Project.c"
			{
				WidgetsLabelChild* child = NULL;
				GtkWidget* _tmp15_;
				WidgetsLabelChild* _tmp16_;
				GeeArrayList* _tmp17_;
				WidgetsLabelChild* _tmp18_;
				ObjectsLabel* _tmp19_;
				ObjectsLabel* _tmp20_;
				gint _tmp21_;
#line 643 "/run/build/planner/src/Views/Project.vala"
				_tmp15_ = element;
#line 643 "/run/build/planner/src/Views/Project.vala"
				_tmp16_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp15_, WIDGETS_TYPE_LABEL_CHILD) ? ((WidgetsLabelChild*) _tmp15_) : NULL);
#line 643 "/run/build/planner/src/Views/Project.vala"
				child = _tmp16_;
#line 644 "/run/build/planner/src/Views/Project.vala"
				_tmp17_ = _labels;
#line 644 "/run/build/planner/src/Views/Project.vala"
				_tmp18_ = child;
#line 644 "/run/build/planner/src/Views/Project.vala"
				_tmp19_ = widgets_label_child_get_label (_tmp18_);
#line 644 "/run/build/planner/src/Views/Project.vala"
				_tmp20_ = _tmp19_;
#line 644 "/run/build/planner/src/Views/Project.vala"
				_tmp21_ = _tmp20_->id;
#line 644 "/run/build/planner/src/Views/Project.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp17_, (gpointer) ((gintptr) _tmp21_));
#line 642 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (child);
#line 642 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (element);
#line 3367 "Project.c"
			}
		}
#line 642 "/run/build/planner/src/Views/Project.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 3372 "Project.c"
	}
	{
		GeeArrayList* _x_list = NULL;
		GeeArrayList* _tmp22_;
		GeeArrayList* _tmp23_;
		gint _x_size = 0;
		GeeArrayList* _tmp24_;
		gint _tmp25_;
		gint _tmp26_;
		gint _x_index = 0;
#line 648 "/run/build/planner/src/Views/Project.vala"
		_tmp22_ = labels;
#line 648 "/run/build/planner/src/Views/Project.vala"
		_tmp23_ = _g_object_ref0 (_tmp22_);
#line 648 "/run/build/planner/src/Views/Project.vala"
		_x_list = _tmp23_;
#line 648 "/run/build/planner/src/Views/Project.vala"
		_tmp24_ = _x_list;
#line 648 "/run/build/planner/src/Views/Project.vala"
		_tmp25_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp24_);
#line 648 "/run/build/planner/src/Views/Project.vala"
		_tmp26_ = _tmp25_;
#line 648 "/run/build/planner/src/Views/Project.vala"
		_x_size = _tmp26_;
#line 648 "/run/build/planner/src/Views/Project.vala"
		_x_index = -1;
#line 648 "/run/build/planner/src/Views/Project.vala"
		while (TRUE) {
#line 3401 "Project.c"
			gint _tmp27_;
			gint _tmp28_;
			gint _tmp29_;
			gint x = 0;
			GeeArrayList* _tmp30_;
			gint _tmp31_;
			gpointer _tmp32_;
			GeeArrayList* _tmp33_;
			gint _tmp34_;
#line 648 "/run/build/planner/src/Views/Project.vala"
			_tmp27_ = _x_index;
#line 648 "/run/build/planner/src/Views/Project.vala"
			_x_index = _tmp27_ + 1;
#line 648 "/run/build/planner/src/Views/Project.vala"
			_tmp28_ = _x_index;
#line 648 "/run/build/planner/src/Views/Project.vala"
			_tmp29_ = _x_size;
#line 648 "/run/build/planner/src/Views/Project.vala"
			if (!(_tmp28_ < _tmp29_)) {
#line 648 "/run/build/planner/src/Views/Project.vala"
				break;
#line 3423 "Project.c"
			}
#line 648 "/run/build/planner/src/Views/Project.vala"
			_tmp30_ = _x_list;
#line 648 "/run/build/planner/src/Views/Project.vala"
			_tmp31_ = _x_index;
#line 648 "/run/build/planner/src/Views/Project.vala"
			_tmp32_ = gee_abstract_list_get ((GeeAbstractList*) _tmp30_, _tmp31_);
#line 648 "/run/build/planner/src/Views/Project.vala"
			x = (gint) ((gintptr) _tmp32_);
#line 649 "/run/build/planner/src/Views/Project.vala"
			_tmp33_ = _labels;
#line 649 "/run/build/planner/src/Views/Project.vala"
			_tmp34_ = x;
#line 649 "/run/build/planner/src/Views/Project.vala"
			if (gee_abstract_collection_contains ((GeeAbstractCollection*) _tmp33_, (gpointer) ((gintptr) _tmp34_))) {
#line 650 "/run/build/planner/src/Views/Project.vala"
				result = TRUE;
#line 650 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (_x_list);
#line 650 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (_labels);
#line 650 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (labels);
#line 650 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (item);
#line 650 "/run/build/planner/src/Views/Project.vala"
				return result;
#line 3451 "Project.c"
			}
		}
#line 648 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (_x_list);
#line 3456 "Project.c"
	}
#line 654 "/run/build/planner/src/Views/Project.vala"
	result = FALSE;
#line 654 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (_labels);
#line 654 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (labels);
#line 654 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (item);
#line 654 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 3468 "Project.c"
}


static gboolean
___lambda431__gtk_list_box_filter_func (GtkListBoxRow* row,
                                        gpointer self)
{
	gboolean result;
	result = __lambda431_ ((ViewsProject*) self, row);
#line 633 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 3480 "Project.c"
}


static void
_views_project___lambda430_ (Block33Data* _data33_,
                             ObjectsLabel* label)
{
	ViewsProject* self;
	Utils* _tmp0_;
	GtkFlowBox* _tmp1_;
	gint _tmp2_;
	GtkRevealer* _tmp6_;
	Utils* _tmp7_;
	GtkFlowBox* _tmp8_;
	GtkFlowBox* _tmp9_;
	WidgetsPopoversLabelsPopover* _tmp10_;
	GtkListBox* _tmp11_;
#line 622 "/run/build/planner/src/Views/Project.vala"
	self = _data33_->self;
#line 622 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (label != NULL);
#line 623 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = application_utils;
#line 623 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = self->priv->labels_flowbox;
#line 623 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = label->id;
#line 623 "/run/build/planner/src/Views/Project.vala"
	if (utils_is_label_repeted (_tmp0_, _tmp1_, _tmp2_) == FALSE) {
#line 3510 "Project.c"
		WidgetsLabelChild* child = NULL;
		WidgetsLabelChild* _tmp3_;
		GtkFlowBox* _tmp4_;
		WidgetsLabelChild* _tmp5_;
#line 624 "/run/build/planner/src/Views/Project.vala"
		_tmp3_ = widgets_label_child_new (label);
#line 624 "/run/build/planner/src/Views/Project.vala"
		g_object_ref_sink (_tmp3_);
#line 624 "/run/build/planner/src/Views/Project.vala"
		child = _tmp3_;
#line 625 "/run/build/planner/src/Views/Project.vala"
		_tmp4_ = self->priv->labels_flowbox;
#line 625 "/run/build/planner/src/Views/Project.vala"
		_tmp5_ = child;
#line 625 "/run/build/planner/src/Views/Project.vala"
		gtk_container_add ((GtkContainer*) _tmp4_, (GtkWidget*) _tmp5_);
#line 623 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (child);
#line 3529 "Project.c"
	}
#line 628 "/run/build/planner/src/Views/Project.vala"
	_tmp6_ = _data33_->labels_flowbox_revealer;
#line 628 "/run/build/planner/src/Views/Project.vala"
	_tmp7_ = application_utils;
#line 628 "/run/build/planner/src/Views/Project.vala"
	_tmp8_ = self->priv->labels_flowbox;
#line 628 "/run/build/planner/src/Views/Project.vala"
	gtk_revealer_set_reveal_child (_tmp6_, !utils_is_empty (_tmp7_, _tmp8_));
#line 629 "/run/build/planner/src/Views/Project.vala"
	_tmp9_ = self->priv->labels_flowbox;
#line 629 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp9_);
#line 630 "/run/build/planner/src/Views/Project.vala"
	_tmp10_ = self->priv->labels_popover;
#line 630 "/run/build/planner/src/Views/Project.vala"
	gtk_popover_popdown ((GtkPopover*) _tmp10_);
#line 633 "/run/build/planner/src/Views/Project.vala"
	_tmp11_ = self->priv->tasks_list;
#line 633 "/run/build/planner/src/Views/Project.vala"
	gtk_list_box_set_filter_func (_tmp11_, ___lambda431__gtk_list_box_filter_func, g_object_ref (self), g_object_unref);
#line 3551 "Project.c"
}


static void
__views_project___lambda430__widgets_popovers_labels_popover_on_selected_label (WidgetsPopoversLabelsPopover* _sender,
                                                                                ObjectsLabel* label,
                                                                                gpointer self)
{
#line 622 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda430_ (self, label);
#line 3562 "Project.c"
}


static gboolean
___lambda433_ (ViewsProject* self,
               GtkListBoxRow* row)
{
	gboolean result = FALSE;
#line 661 "/run/build/planner/src/Views/Project.vala"
	g_return_val_if_fail (row != NULL, FALSE);
#line 662 "/run/build/planner/src/Views/Project.vala"
	result = TRUE;
#line 662 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 3577 "Project.c"
}


static gboolean
____lambda433__gtk_list_box_filter_func (GtkListBoxRow* row,
                                         gpointer self)
{
	gboolean result;
	result = ___lambda433_ ((ViewsProject*) self, row);
#line 661 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 3589 "Project.c"
}


static gboolean
___lambda434_ (ViewsProject* self,
               GtkListBoxRow* row)
{
	gboolean result = FALSE;
	WidgetsTaskRow* item = NULL;
	WidgetsTaskRow* _tmp0_;
	GeeArrayList* labels = NULL;
	GeeArrayList* _tmp1_;
	GeeArrayList* _labels = NULL;
	GeeArrayList* _tmp2_;
	WidgetsTaskRow* _tmp3_;
	ObjectsTask* _tmp4_;
	ObjectsTask* _tmp5_;
	const gchar* _tmp6_;
	gchar** _tmp7_;
	gchar** _tmp8_;
	GtkFlowBox* _tmp12_;
	GList* _tmp13_;
#line 666 "/run/build/planner/src/Views/Project.vala"
	g_return_val_if_fail (row != NULL, FALSE);
#line 667 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (row, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) row) : NULL);
#line 667 "/run/build/planner/src/Views/Project.vala"
	item = _tmp0_;
#line 668 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = gee_array_list_new (G_TYPE_INT, NULL, NULL, NULL, NULL, NULL);
#line 668 "/run/build/planner/src/Views/Project.vala"
	labels = _tmp1_;
#line 669 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = gee_array_list_new (G_TYPE_INT, NULL, NULL, NULL, NULL, NULL);
#line 669 "/run/build/planner/src/Views/Project.vala"
	_labels = _tmp2_;
#line 671 "/run/build/planner/src/Views/Project.vala"
	_tmp3_ = item;
#line 671 "/run/build/planner/src/Views/Project.vala"
	_tmp4_ = widgets_task_row_get_task (_tmp3_);
#line 671 "/run/build/planner/src/Views/Project.vala"
	_tmp5_ = _tmp4_;
#line 671 "/run/build/planner/src/Views/Project.vala"
	_tmp6_ = _tmp5_->labels;
#line 671 "/run/build/planner/src/Views/Project.vala"
	_tmp8_ = _tmp7_ = g_strsplit (_tmp6_, ";", 0);
#line 3636 "Project.c"
	{
		gchar** label_id_collection = NULL;
		gint label_id_collection_length1 = 0;
		gint _label_id_collection_size_ = 0;
		gint label_id_it = 0;
#line 671 "/run/build/planner/src/Views/Project.vala"
		label_id_collection = _tmp8_;
#line 671 "/run/build/planner/src/Views/Project.vala"
		label_id_collection_length1 = _vala_array_length (_tmp7_);
#line 671 "/run/build/planner/src/Views/Project.vala"
		for (label_id_it = 0; label_id_it < _vala_array_length (_tmp7_); label_id_it = label_id_it + 1) {
#line 3648 "Project.c"
			gchar* _tmp9_;
			gchar* label_id = NULL;
#line 671 "/run/build/planner/src/Views/Project.vala"
			_tmp9_ = g_strdup (label_id_collection[label_id_it]);
#line 671 "/run/build/planner/src/Views/Project.vala"
			label_id = _tmp9_;
#line 3655 "Project.c"
			{
				GeeArrayList* _tmp10_;
				const gchar* _tmp11_;
#line 672 "/run/build/planner/src/Views/Project.vala"
				_tmp10_ = labels;
#line 672 "/run/build/planner/src/Views/Project.vala"
				_tmp11_ = label_id;
#line 672 "/run/build/planner/src/Views/Project.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp10_, (gpointer) ((gintptr) atoi (_tmp11_)));
#line 671 "/run/build/planner/src/Views/Project.vala"
				_g_free0 (label_id);
#line 3667 "Project.c"
			}
		}
#line 671 "/run/build/planner/src/Views/Project.vala"
		label_id_collection = (_vala_array_free (label_id_collection, label_id_collection_length1, (GDestroyNotify) g_free), NULL);
#line 3672 "Project.c"
	}
#line 675 "/run/build/planner/src/Views/Project.vala"
	_tmp12_ = self->priv->labels_flowbox;
#line 675 "/run/build/planner/src/Views/Project.vala"
	_tmp13_ = gtk_container_get_children ((GtkContainer*) _tmp12_);
#line 3678 "Project.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 675 "/run/build/planner/src/Views/Project.vala"
		element_collection = _tmp13_;
#line 675 "/run/build/planner/src/Views/Project.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 3686 "Project.c"
			GtkWidget* _tmp14_;
			GtkWidget* element = NULL;
#line 675 "/run/build/planner/src/Views/Project.vala"
			_tmp14_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 675 "/run/build/planner/src/Views/Project.vala"
			element = _tmp14_;
#line 3693 "Project.c"
			{
				WidgetsLabelChild* child = NULL;
				GtkWidget* _tmp15_;
				WidgetsLabelChild* _tmp16_;
				GeeArrayList* _tmp17_;
				WidgetsLabelChild* _tmp18_;
				ObjectsLabel* _tmp19_;
				ObjectsLabel* _tmp20_;
				gint _tmp21_;
#line 676 "/run/build/planner/src/Views/Project.vala"
				_tmp15_ = element;
#line 676 "/run/build/planner/src/Views/Project.vala"
				_tmp16_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp15_, WIDGETS_TYPE_LABEL_CHILD) ? ((WidgetsLabelChild*) _tmp15_) : NULL);
#line 676 "/run/build/planner/src/Views/Project.vala"
				child = _tmp16_;
#line 677 "/run/build/planner/src/Views/Project.vala"
				_tmp17_ = _labels;
#line 677 "/run/build/planner/src/Views/Project.vala"
				_tmp18_ = child;
#line 677 "/run/build/planner/src/Views/Project.vala"
				_tmp19_ = widgets_label_child_get_label (_tmp18_);
#line 677 "/run/build/planner/src/Views/Project.vala"
				_tmp20_ = _tmp19_;
#line 677 "/run/build/planner/src/Views/Project.vala"
				_tmp21_ = _tmp20_->id;
#line 677 "/run/build/planner/src/Views/Project.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp17_, (gpointer) ((gintptr) _tmp21_));
#line 675 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (child);
#line 675 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (element);
#line 3725 "Project.c"
			}
		}
#line 675 "/run/build/planner/src/Views/Project.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 3730 "Project.c"
	}
	{
		GeeArrayList* _x_list = NULL;
		GeeArrayList* _tmp22_;
		GeeArrayList* _tmp23_;
		gint _x_size = 0;
		GeeArrayList* _tmp24_;
		gint _tmp25_;
		gint _tmp26_;
		gint _x_index = 0;
#line 681 "/run/build/planner/src/Views/Project.vala"
		_tmp22_ = labels;
#line 681 "/run/build/planner/src/Views/Project.vala"
		_tmp23_ = _g_object_ref0 (_tmp22_);
#line 681 "/run/build/planner/src/Views/Project.vala"
		_x_list = _tmp23_;
#line 681 "/run/build/planner/src/Views/Project.vala"
		_tmp24_ = _x_list;
#line 681 "/run/build/planner/src/Views/Project.vala"
		_tmp25_ = gee_abstract_collection_get_size ((GeeAbstractCollection*) _tmp24_);
#line 681 "/run/build/planner/src/Views/Project.vala"
		_tmp26_ = _tmp25_;
#line 681 "/run/build/planner/src/Views/Project.vala"
		_x_size = _tmp26_;
#line 681 "/run/build/planner/src/Views/Project.vala"
		_x_index = -1;
#line 681 "/run/build/planner/src/Views/Project.vala"
		while (TRUE) {
#line 3759 "Project.c"
			gint _tmp27_;
			gint _tmp28_;
			gint _tmp29_;
			gint x = 0;
			GeeArrayList* _tmp30_;
			gint _tmp31_;
			gpointer _tmp32_;
			GeeArrayList* _tmp33_;
			gint _tmp34_;
#line 681 "/run/build/planner/src/Views/Project.vala"
			_tmp27_ = _x_index;
#line 681 "/run/build/planner/src/Views/Project.vala"
			_x_index = _tmp27_ + 1;
#line 681 "/run/build/planner/src/Views/Project.vala"
			_tmp28_ = _x_index;
#line 681 "/run/build/planner/src/Views/Project.vala"
			_tmp29_ = _x_size;
#line 681 "/run/build/planner/src/Views/Project.vala"
			if (!(_tmp28_ < _tmp29_)) {
#line 681 "/run/build/planner/src/Views/Project.vala"
				break;
#line 3781 "Project.c"
			}
#line 681 "/run/build/planner/src/Views/Project.vala"
			_tmp30_ = _x_list;
#line 681 "/run/build/planner/src/Views/Project.vala"
			_tmp31_ = _x_index;
#line 681 "/run/build/planner/src/Views/Project.vala"
			_tmp32_ = gee_abstract_list_get ((GeeAbstractList*) _tmp30_, _tmp31_);
#line 681 "/run/build/planner/src/Views/Project.vala"
			x = (gint) ((gintptr) _tmp32_);
#line 682 "/run/build/planner/src/Views/Project.vala"
			_tmp33_ = _labels;
#line 682 "/run/build/planner/src/Views/Project.vala"
			_tmp34_ = x;
#line 682 "/run/build/planner/src/Views/Project.vala"
			if (gee_abstract_collection_contains ((GeeAbstractCollection*) _tmp33_, (gpointer) ((gintptr) _tmp34_))) {
#line 683 "/run/build/planner/src/Views/Project.vala"
				result = TRUE;
#line 683 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (_x_list);
#line 683 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (_labels);
#line 683 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (labels);
#line 683 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (item);
#line 683 "/run/build/planner/src/Views/Project.vala"
				return result;
#line 3809 "Project.c"
			}
		}
#line 681 "/run/build/planner/src/Views/Project.vala"
		_g_object_unref0 (_x_list);
#line 3814 "Project.c"
	}
#line 687 "/run/build/planner/src/Views/Project.vala"
	result = FALSE;
#line 687 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (_labels);
#line 687 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (labels);
#line 687 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (item);
#line 687 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 3826 "Project.c"
}


static gboolean
____lambda434__gtk_list_box_filter_func (GtkListBoxRow* row,
                                         gpointer self)
{
	gboolean result;
	result = ___lambda434_ ((ViewsProject*) self, row);
#line 666 "/run/build/planner/src/Views/Project.vala"
	return result;
#line 3838 "Project.c"
}


static void
_views_project___lambda432_ (Block33Data* _data33_,
                             GtkWidget* widget)
{
	ViewsProject* self;
	Utils* _tmp0_;
	GtkFlowBox* _tmp1_;
#line 658 "/run/build/planner/src/Views/Project.vala"
	self = _data33_->self;
#line 658 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (widget != NULL);
#line 659 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = application_utils;
#line 659 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = self->priv->labels_flowbox;
#line 659 "/run/build/planner/src/Views/Project.vala"
	if (utils_is_empty (_tmp0_, _tmp1_)) {
#line 3859 "Project.c"
		GtkRevealer* _tmp2_;
		GtkListBox* _tmp3_;
#line 660 "/run/build/planner/src/Views/Project.vala"
		_tmp2_ = _data33_->labels_flowbox_revealer;
#line 660 "/run/build/planner/src/Views/Project.vala"
		gtk_revealer_set_reveal_child (_tmp2_, FALSE);
#line 661 "/run/build/planner/src/Views/Project.vala"
		_tmp3_ = self->priv->tasks_list;
#line 661 "/run/build/planner/src/Views/Project.vala"
		gtk_list_box_set_filter_func (_tmp3_, ____lambda433__gtk_list_box_filter_func, g_object_ref (self), g_object_unref);
#line 3870 "Project.c"
	} else {
		GtkListBox* _tmp4_;
#line 666 "/run/build/planner/src/Views/Project.vala"
		_tmp4_ = self->priv->tasks_list;
#line 666 "/run/build/planner/src/Views/Project.vala"
		gtk_list_box_set_filter_func (_tmp4_, ____lambda434__gtk_list_box_filter_func, g_object_ref (self), g_object_unref);
#line 3877 "Project.c"
	}
}


static void
__views_project___lambda432__gtk_container_remove (GtkContainer* _sender,
                                                   GtkWidget* widget,
                                                   gpointer self)
{
#line 658 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda432_ (self, widget);
#line 3889 "Project.c"
}


static void
_views_project___lambda435_ (ViewsProject* self,
                             ObjectsProject* _project)
{
	ObjectsProject* _tmp0_;
	gint _tmp1_;
	gint _tmp2_;
#line 692 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (_project != NULL);
#line 693 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->_project;
#line 693 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = _tmp0_->id;
#line 693 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = _project->id;
#line 693 "/run/build/planner/src/Views/Project.vala"
	if (_tmp1_ == _tmp2_) {
#line 3910 "Project.c"
		GtkEntry* _tmp3_;
		const gchar* _tmp4_;
#line 694 "/run/build/planner/src/Views/Project.vala"
		_tmp3_ = self->priv->name_entry;
#line 694 "/run/build/planner/src/Views/Project.vala"
		_tmp4_ = _project->name;
#line 694 "/run/build/planner/src/Views/Project.vala"
		gtk_entry_set_text (_tmp3_, _tmp4_);
#line 3919 "Project.c"
	}
}


static void
__views_project___lambda435__services_database_update_project_signal (ServicesDatabase* _sender,
                                                                      ObjectsProject* project,
                                                                      gpointer self)
{
#line 692 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda435_ ((ViewsProject*) self, project);
#line 3931 "Project.c"
}


static void
_views_project___lambda436_ (ViewsProject* self,
                             ObjectsTask* task)
{
	Utils* _tmp0_;
	GtkListBox* _tmp1_;
	gint _tmp2_;
	GtkListBox* _tmp3_;
	GList* _tmp4_;
#line 698 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (task != NULL);
#line 699 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = application_utils;
#line 699 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = self->priv->tasks_list;
#line 699 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = task->id;
#line 699 "/run/build/planner/src/Views/Project.vala"
	if (utils_is_task_repeted (_tmp0_, _tmp1_, _tmp2_) == FALSE) {
#line 700 "/run/build/planner/src/Views/Project.vala"
		views_project_add_new_task (self, task);
#line 3956 "Project.c"
	}
#line 703 "/run/build/planner/src/Views/Project.vala"
	_tmp3_ = self->priv->tasks_list;
#line 703 "/run/build/planner/src/Views/Project.vala"
	_tmp4_ = gtk_container_get_children ((GtkContainer*) _tmp3_);
#line 3962 "Project.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 703 "/run/build/planner/src/Views/Project.vala"
		element_collection = _tmp4_;
#line 703 "/run/build/planner/src/Views/Project.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 3970 "Project.c"
			GtkWidget* _tmp5_;
			GtkWidget* element = NULL;
#line 703 "/run/build/planner/src/Views/Project.vala"
			_tmp5_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 703 "/run/build/planner/src/Views/Project.vala"
			element = _tmp5_;
#line 3977 "Project.c"
			{
				WidgetsTaskRow* row = NULL;
				GtkWidget* _tmp6_;
				WidgetsTaskRow* _tmp7_;
				WidgetsTaskRow* _tmp8_;
				ObjectsTask* _tmp9_;
				ObjectsTask* _tmp10_;
				gint _tmp11_;
				gint _tmp12_;
#line 704 "/run/build/planner/src/Views/Project.vala"
				_tmp6_ = element;
#line 704 "/run/build/planner/src/Views/Project.vala"
				_tmp7_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp6_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp6_) : NULL);
#line 704 "/run/build/planner/src/Views/Project.vala"
				row = _tmp7_;
#line 706 "/run/build/planner/src/Views/Project.vala"
				_tmp8_ = row;
#line 706 "/run/build/planner/src/Views/Project.vala"
				_tmp9_ = widgets_task_row_get_task (_tmp8_);
#line 706 "/run/build/planner/src/Views/Project.vala"
				_tmp10_ = _tmp9_;
#line 706 "/run/build/planner/src/Views/Project.vala"
				_tmp11_ = _tmp10_->id;
#line 706 "/run/build/planner/src/Views/Project.vala"
				_tmp12_ = task->id;
#line 706 "/run/build/planner/src/Views/Project.vala"
				if (_tmp11_ == _tmp12_) {
#line 4005 "Project.c"
					WidgetsTaskRow* _tmp13_;
#line 707 "/run/build/planner/src/Views/Project.vala"
					_tmp13_ = row;
#line 707 "/run/build/planner/src/Views/Project.vala"
					widgets_task_row_set_update_task (_tmp13_, task);
#line 4011 "Project.c"
				}
#line 703 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (row);
#line 703 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (element);
#line 4017 "Project.c"
			}
		}
#line 703 "/run/build/planner/src/Views/Project.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 4022 "Project.c"
	}
}


static void
__views_project___lambda436__services_database_update_task_signal (ServicesDatabase* _sender,
                                                                   ObjectsTask* task,
                                                                   gpointer self)
{
#line 698 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda436_ ((ViewsProject*) self, task);
#line 4034 "Project.c"
}


static void
_views_project___lambda437_ (ViewsProject* self,
                             ObjectsTask* task)
{
#line 712 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (task != NULL);
#line 713 "/run/build/planner/src/Views/Project.vala"
	views_project_add_new_task (self, task);
#line 4046 "Project.c"
}


static void
__views_project___lambda437__services_database_add_task_signal (ServicesDatabase* _sender,
                                                                ObjectsTask* task,
                                                                gpointer self)
{
#line 712 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda437_ ((ViewsProject*) self, task);
#line 4057 "Project.c"
}


static void
_views_project___lambda438_ (ViewsProject* self,
                             ObjectsTask* task)
{
	GtkListBox* _tmp0_;
	GList* _tmp1_;
#line 716 "/run/build/planner/src/Views/Project.vala"
	g_return_if_fail (task != NULL);
#line 717 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = self->priv->tasks_list;
#line 717 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = gtk_container_get_children ((GtkContainer*) _tmp0_);
#line 4073 "Project.c"
	{
		GList* element_collection = NULL;
		GList* element_it = NULL;
#line 717 "/run/build/planner/src/Views/Project.vala"
		element_collection = _tmp1_;
#line 717 "/run/build/planner/src/Views/Project.vala"
		for (element_it = element_collection; element_it != NULL; element_it = element_it->next) {
#line 4081 "Project.c"
			GtkWidget* _tmp2_;
			GtkWidget* element = NULL;
#line 717 "/run/build/planner/src/Views/Project.vala"
			_tmp2_ = _g_object_ref0 ((GtkWidget*) element_it->data);
#line 717 "/run/build/planner/src/Views/Project.vala"
			element = _tmp2_;
#line 4088 "Project.c"
			{
				WidgetsTaskRow* row = NULL;
				GtkWidget* _tmp3_;
				WidgetsTaskRow* _tmp4_;
				WidgetsTaskRow* _tmp5_;
				ObjectsTask* _tmp6_;
				ObjectsTask* _tmp7_;
				gint _tmp8_;
				gint _tmp9_;
#line 718 "/run/build/planner/src/Views/Project.vala"
				_tmp3_ = element;
#line 718 "/run/build/planner/src/Views/Project.vala"
				_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp3_, WIDGETS_TYPE_TASK_ROW) ? ((WidgetsTaskRow*) _tmp3_) : NULL);
#line 718 "/run/build/planner/src/Views/Project.vala"
				row = _tmp4_;
#line 720 "/run/build/planner/src/Views/Project.vala"
				_tmp5_ = row;
#line 720 "/run/build/planner/src/Views/Project.vala"
				_tmp6_ = widgets_task_row_get_task (_tmp5_);
#line 720 "/run/build/planner/src/Views/Project.vala"
				_tmp7_ = _tmp6_;
#line 720 "/run/build/planner/src/Views/Project.vala"
				_tmp8_ = _tmp7_->id;
#line 720 "/run/build/planner/src/Views/Project.vala"
				_tmp9_ = task->id;
#line 720 "/run/build/planner/src/Views/Project.vala"
				if (_tmp8_ == _tmp9_) {
#line 4116 "Project.c"
					GtkListBox* _tmp10_;
					GtkWidget* _tmp11_;
#line 721 "/run/build/planner/src/Views/Project.vala"
					_tmp10_ = self->priv->tasks_list;
#line 721 "/run/build/planner/src/Views/Project.vala"
					_tmp11_ = element;
#line 721 "/run/build/planner/src/Views/Project.vala"
					gtk_container_remove ((GtkContainer*) _tmp10_, _tmp11_);
#line 4125 "Project.c"
				}
#line 717 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (row);
#line 717 "/run/build/planner/src/Views/Project.vala"
				_g_object_unref0 (element);
#line 4131 "Project.c"
			}
		}
#line 717 "/run/build/planner/src/Views/Project.vala"
		(element_collection == NULL) ? NULL : (element_collection = (g_list_free (element_collection), NULL));
#line 4136 "Project.c"
	}
}


static void
__views_project___lambda438__services_database_on_signal_remove_task (ServicesDatabase* _sender,
                                                                      ObjectsTask* task,
                                                                      gpointer self)
{
#line 716 "/run/build/planner/src/Views/Project.vala"
	_views_project___lambda438_ ((ViewsProject*) self, task);
#line 4148 "Project.c"
}


static GObject *
views_project_constructor (GType type,
                           guint n_construct_properties,
                           GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	ViewsProject * self;
	Block33Data* _data33_;
	GtkStyleContext* _tmp0_;
	WidgetsAlertView* _tmp1_;
	GtkGrid* label_color = NULL;
	GtkGrid* _tmp2_;
	GtkGrid* _tmp3_;
	GtkStyleContext* _tmp4_;
	ObjectsProject* _tmp5_;
	gint _tmp6_;
	gchar* _tmp7_;
	gchar* _tmp8_;
	GtkGrid* _tmp9_;
	GtkGrid* _tmp10_;
	GtkButton* color_button = NULL;
	GtkButton* _tmp11_;
	GtkButton* _tmp12_;
	GtkButton* _tmp13_;
	GtkButton* _tmp14_;
	GtkStyleContext* _tmp15_;
	GtkButton* _tmp16_;
	GtkStyleContext* _tmp17_;
	GtkButton* _tmp18_;
	GtkStyleContext* _tmp19_;
	GtkButton* _tmp20_;
	GtkButton* _tmp21_;
	GtkGrid* _tmp22_;
	GtkEntry* _tmp23_;
	GtkEntry* _tmp24_;
	GtkStyleContext* _tmp25_;
	GtkEntry* _tmp26_;
	GtkStyleContext* _tmp27_;
	GtkEntry* _tmp28_;
	GtkStyleContext* _tmp29_;
	GtkEntry* _tmp30_;
	GtkStyleContext* _tmp31_;
	GtkEntry* _tmp32_;
	GtkStyleContext* _tmp33_;
	GtkEntry* _tmp34_;
	GtkStyleContext* _tmp35_;
	GtkEntry* _tmp36_;
	ObjectsProject* _tmp37_;
	const gchar* _tmp38_;
	GtkEntry* _tmp39_;
	GtkToggleButton* _tmp40_;
	GtkToggleButton* _tmp41_;
	GtkToggleButton* _tmp42_;
	GtkToggleButton* _tmp43_;
	GtkToggleButton* _tmp44_;
	GtkToggleButton* _tmp45_;
	GtkToggleButton* _tmp46_;
	GtkStyleContext* _tmp47_;
	GtkToggleButton* _tmp48_;
	GtkStyleContext* _tmp49_;
	GtkToggleButton* _tmp50_;
	GtkLabel* _tmp51_;
	GtkLabel* _tmp52_;
	GtkToggleButton* _tmp53_;
	GtkStyleContext* _tmp54_;
	GtkImage* deadline_project_icon = NULL;
	GtkImage* _tmp55_;
	GtkImage* _tmp56_;
	GThemedIcon* _tmp57_;
	GThemedIcon* _tmp58_;
	GtkImage* _tmp59_;
	GtkGrid* deadline_grid = NULL;
	GtkGrid* _tmp60_;
	GtkGrid* _tmp61_;
	GtkImage* _tmp62_;
	GtkGrid* _tmp63_;
	GtkLabel* _tmp64_;
	GtkToggleButton* _tmp65_;
	GtkGrid* _tmp66_;
	GtkRevealer* deadline_project_revealer = NULL;
	GtkRevealer* _tmp67_;
	GtkRevealer* _tmp68_;
	GtkRevealer* _tmp69_;
	GtkToggleButton* _tmp70_;
	GtkRevealer* _tmp71_;
	ObjectsProject* _tmp72_;
	const gchar* _tmp73_;
	GtkToggleButton* _tmp94_;
	WidgetsPopoversDeadlinePopover* _tmp95_;
	GtkToggleButton* _tmp96_;
	WidgetsPopoversDeadlinePopover* _tmp97_;
	WidgetsPopoversDeadlinePopover* _tmp98_;
	WidgetsPopoversDeadlinePopover* _tmp99_;
	WidgetsPopoversDeadlinePopover* _tmp100_;
	GtkButton* paste_button = NULL;
	GtkButton* _tmp101_;
	GtkButton* _tmp102_;
	GtkStyleContext* _tmp103_;
	GtkButton* _tmp104_;
	GtkButton* _tmp105_;
	GtkButton* _tmp106_;
	GtkButton* labels_button = NULL;
	GtkButton* _tmp107_;
	GtkButton* _tmp108_;
	GtkStyleContext* _tmp109_;
	GtkButton* _tmp110_;
	GtkButton* _tmp111_;
	GtkButton* _tmp112_;
	GtkButton* _tmp113_;
	WidgetsPopoversLabelsPopover* _tmp114_;
	WidgetsPopoversLabelsPopover* _tmp115_;
	GtkButton* search_button = NULL;
	GtkButton* _tmp116_;
	GtkButton* _tmp117_;
	GtkStyleContext* _tmp118_;
	GtkButton* _tmp119_;
	GtkButton* _tmp120_;
	GtkButton* _tmp121_;
	GtkButton* share_button = NULL;
	GtkButton* _tmp122_;
	GtkButton* _tmp123_;
	GtkStyleContext* _tmp124_;
	GtkButton* _tmp125_;
	GtkButton* _tmp126_;
	GtkButton* _tmp127_;
	GtkButton* _tmp128_;
	GtkToggleButton* _tmp129_;
	GtkToggleButton* _tmp130_;
	GtkToggleButton* _tmp131_;
	GtkToggleButton* _tmp132_;
	GtkStyleContext* _tmp133_;
	GtkToggleButton* _tmp134_;
	GtkImage* _tmp135_;
	GtkToggleButton* _tmp136_;
	GtkImage* _tmp137_;
	GtkGrid* action_grid = NULL;
	GtkGrid* _tmp138_;
	GtkGrid* _tmp139_;
	GtkGrid* _tmp140_;
	GtkGrid* _tmp141_;
	GtkButton* _tmp142_;
	GtkGrid* _tmp143_;
	GtkButton* _tmp144_;
	GtkGrid* _tmp145_;
	GtkButton* _tmp146_;
	GtkGrid* _tmp147_;
	GtkToggleButton* _tmp148_;
	GtkBox* top_box = NULL;
	GtkBox* _tmp149_;
	GtkBox* _tmp150_;
	GtkBox* _tmp151_;
	GtkBox* _tmp152_;
	GtkBox* _tmp153_;
	GtkBox* _tmp154_;
	GtkButton* _tmp155_;
	GtkBox* _tmp156_;
	GtkEntry* _tmp157_;
	GtkBox* _tmp158_;
	GtkGrid* _tmp159_;
	GtkTextView* _tmp160_;
	GtkTextView* _tmp161_;
	GtkTextView* _tmp162_;
	GtkTextView* _tmp163_;
	GtkTextView* _tmp164_;
	GtkTextBuffer* _tmp165_;
	GtkTextBuffer* _tmp166_;
	ObjectsProject* _tmp167_;
	const gchar* _tmp168_;
	GtkTextView* _tmp169_;
	GtkStyleContext* _tmp170_;
	GtkLabel* _tmp171_;
	GtkLabel* _tmp172_;
	GtkTextView* _tmp173_;
	GtkLabel* _tmp174_;
	GtkTextView* _tmp175_;
	GtkTextBuffer* _tmp176_;
	GtkTextBuffer* _tmp177_;
	gchar* _tmp178_;
	gchar* _tmp179_;
	gchar* _tmp180_;
	gboolean _tmp181_;
	GtkListBox* _tmp184_;
	GtkListBox* _tmp185_;
	GtkListBox* _tmp186_;
	GtkListBox* _tmp187_;
	GtkButton* _tmp188_;
	GtkButton* _tmp189_;
	GtkButton* _tmp190_;
	GtkButton* _tmp191_;
	GtkButton* _tmp192_;
	GtkStyleContext* _tmp193_;
	GtkButton* _tmp194_;
	GtkStyleContext* _tmp195_;
	GtkButton* _tmp196_;
	GtkRevealer* _tmp197_;
	GtkRevealer* _tmp198_;
	GtkRevealer* _tmp199_;
	GtkRevealer* _tmp200_;
	GtkRevealer* _tmp201_;
	GtkButton* _tmp202_;
	GtkRevealer* _tmp203_;
	GtkToggleButton* _tmp204_;
	GtkToggleButton* _tmp205_;
	GtkToggleButton* _tmp206_;
	GtkToggleButton* _tmp207_;
	GtkToggleButton* _tmp208_;
	GtkToggleButton* _tmp209_;
	GtkStyleContext* _tmp210_;
	GtkToggleButton* _tmp211_;
	GtkImage* _tmp212_;
	GtkImage* _tmp213_;
	GThemedIcon* _tmp214_;
	GThemedIcon* _tmp215_;
	GtkImage* _tmp216_;
	GtkToggleButton* _tmp217_;
	GtkImage* _tmp218_;
	GtkRevealer* _tmp219_;
	GtkRevealer* _tmp220_;
	GtkRevealer* _tmp221_;
	GtkToggleButton* _tmp222_;
	GtkRevealer* _tmp223_;
	GtkToggleButton* _tmp224_;
	GtkToggleButton* _tmp225_;
	GtkToggleButton* _tmp226_;
	GtkToggleButton* _tmp227_;
	GtkToggleButton* _tmp228_;
	GtkToggleButton* _tmp229_;
	GtkToggleButton* _tmp230_;
	GtkStyleContext* _tmp231_;
	GtkToggleButton* _tmp232_;
	GtkStyleContext* _tmp233_;
	GtkToggleButton* _tmp234_;
	GtkToggleButton* _tmp235_;
	GtkImage* _tmp236_;
	GtkImage* _tmp237_;
	GtkRevealer* _tmp238_;
	GtkRevealer* _tmp239_;
	GtkRevealer* _tmp240_;
	GtkToggleButton* _tmp241_;
	GtkRevealer* _tmp242_;
	GtkBox* stacks_buttons_box = NULL;
	GtkBox* _tmp243_;
	GtkBox* _tmp244_;
	GtkBox* _tmp245_;
	GtkBox* _tmp246_;
	GtkBox* _tmp247_;
	GtkRevealer* _tmp248_;
	ObjectsProject* _tmp249_;
	gint _tmp250_;
	WidgetsTaskNew* _tmp251_;
	WidgetsTaskNew* _tmp252_;
	GtkFlowBox* _tmp253_;
	GtkFlowBox* _tmp254_;
	GtkFlowBox* _tmp255_;
	GtkFlowBox* _tmp256_;
	GtkFlowBox* _tmp257_;
	GtkRevealer* _tmp258_;
	GtkRevealer* _tmp259_;
	GtkRevealer* _tmp260_;
	GtkRevealer* _tmp261_;
	GtkRevealer* _tmp262_;
	GtkRevealer* _tmp263_;
	GtkFlowBox* _tmp264_;
	GtkRevealer* _tmp265_;
	GtkBox* t_box = NULL;
	GtkBox* _tmp266_;
	GtkBox* _tmp267_;
	GtkBox* _tmp268_;
	GtkBox* _tmp269_;
	GtkBox* _tmp270_;
	GtkRevealer* _tmp271_;
	GtkBox* _tmp272_;
	GtkTextView* _tmp273_;
	GtkBox* _tmp274_;
	GtkRevealer* _tmp275_;
	GtkBox* b_box = NULL;
	GtkBox* _tmp276_;
	GtkBox* _tmp277_;
	GtkBox* _tmp278_;
	GtkListBox* _tmp279_;
	GtkFlowBox* notes_flowbox = NULL;
	GtkFlowBox* _tmp280_;
	GtkFlowBox* _tmp281_;
	GtkFlowBox* _tmp282_;
	GtkFlowBox* _tmp283_;
	GtkFlowBox* _tmp284_;
	GtkFlowBox* _tmp285_;
	GtkStack* _tmp286_;
	GtkStack* _tmp287_;
	GtkStack* _tmp288_;
	GtkStack* _tmp289_;
	GtkStack* _tmp290_;
	GtkStack* _tmp291_;
	GtkStack* _tmp292_;
	GtkBox* _tmp293_;
	GtkStack* _tmp294_;
	WidgetsAlertView* _tmp295_;
	GtkStack* _tmp296_;
	GtkFlowBox* _tmp297_;
	GtkStack* _tmp298_;
	GtkBox* _tmp299_;
	GtkBox* _tmp300_;
	GtkBox* _tmp301_;
	GtkBox* _tmp302_;
	GtkBox* _tmp303_;
	GtkStack* _tmp304_;
	GtkScrolledWindow* scrolled = NULL;
	GtkScrolledWindow* _tmp305_;
	GtkScrolledWindow* _tmp306_;
	GtkBox* _tmp307_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp308_;
	GtkBox* _tmp309_;
	GtkBox* _tmp310_;
	GtkScrolledWindow* _tmp311_;
	GtkEventBox* eventbox = NULL;
	GtkEventBox* _tmp312_;
	GtkEventBox* _tmp313_;
	GtkEventBox* _tmp314_;
	GtkBox* _tmp315_;
	GtkOverlay* main_overlay = NULL;
	GtkOverlay* _tmp316_;
	GtkOverlay* _tmp317_;
	GtkRevealer* _tmp318_;
	GtkOverlay* _tmp319_;
	WidgetsTaskNew* _tmp320_;
	GtkOverlay* _tmp321_;
	GtkBox* _tmp322_;
	GtkOverlay* _tmp323_;
	GtkEventBox* _tmp324_;
	GtkOverlay* _tmp325_;
	Utils* _tmp326_;
	GtkListBox* _tmp327_;
	GtkListBox* _tmp328_;
	GtkListBox* _tmp329_;
	GtkToggleButton* _tmp330_;
	GtkToggleButton* _tmp331_;
	GtkToggleButton* _tmp332_;
	GtkEntry* _tmp333_;
	GtkEntry* _tmp334_;
	GtkEntry* _tmp335_;
	GtkButton* _tmp336_;
	GdkDisplay* display = NULL;
	GdkDisplay* _tmp337_;
	GdkDisplay* _tmp338_;
	GdkDisplay* _tmp339_;
	GtkClipboard* _tmp340_;
	GtkClipboard* _tmp341_;
	GtkButton* _tmp342_;
	GtkTextView* _tmp343_;
	GtkTextView* _tmp344_;
	GtkButton* _tmp345_;
	WidgetsTaskNew* _tmp346_;
	GtkListBox* _tmp347_;
	GtkButton* _tmp348_;
	WidgetsPopoversLabelsPopover* _tmp349_;
	GtkFlowBox* _tmp350_;
	ServicesDatabase* _tmp351_;
	ServicesDatabase* _tmp352_;
	ServicesDatabase* _tmp353_;
	ServicesDatabase* _tmp354_;
#line 59 "/run/build/planner/src/Views/Project.vala"
	parent_class = G_OBJECT_CLASS (views_project_parent_class);
#line 59 "/run/build/planner/src/Views/Project.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 59 "/run/build/planner/src/Views/Project.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_PROJECT, ViewsProject);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_data33_ = g_slice_new0 (Block33Data);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_data33_->_ref_count_ = 1;
#line 59 "/run/build/planner/src/Views/Project.vala"
	_data33_->self = g_object_ref (self);
#line 60 "/run/build/planner/src/Views/Project.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 60 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp0_, GRANITE_STYLE_CLASS_WELCOME);
#line 62 "/run/build/planner/src/Views/Project.vala"
	_tmp1_ = widgets_alert_view_new (_ ("keep your tasks organized in projects"), _ ("Tap + to add a task."), "planner-startup-symbolic");
#line 62 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp1_);
#line 62 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->alert_view);
#line 62 "/run/build/planner/src/Views/Project.vala"
	self->priv->alert_view = _tmp1_;
#line 68 "/run/build/planner/src/Views/Project.vala"
	_tmp2_ = (GtkGrid*) gtk_grid_new ();
#line 68 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp2_);
#line 68 "/run/build/planner/src/Views/Project.vala"
	label_color = _tmp2_;
#line 69 "/run/build/planner/src/Views/Project.vala"
	_tmp3_ = label_color;
#line 69 "/run/build/planner/src/Views/Project.vala"
	_tmp4_ = gtk_widget_get_style_context ((GtkWidget*) _tmp3_);
#line 69 "/run/build/planner/src/Views/Project.vala"
	_tmp5_ = self->priv->_project;
#line 69 "/run/build/planner/src/Views/Project.vala"
	_tmp6_ = _tmp5_->id;
#line 69 "/run/build/planner/src/Views/Project.vala"
	_tmp7_ = g_strdup_printf ("proyect-%i", _tmp6_);
#line 69 "/run/build/planner/src/Views/Project.vala"
	_tmp8_ = _tmp7_;
#line 69 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp4_, _tmp8_);
#line 69 "/run/build/planner/src/Views/Project.vala"
	_g_free0 (_tmp8_);
#line 70 "/run/build/planner/src/Views/Project.vala"
	_tmp9_ = label_color;
#line 70 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_size_request ((GtkWidget*) _tmp9_, 16, 16);
#line 71 "/run/build/planner/src/Views/Project.vala"
	_tmp10_ = label_color;
#line 71 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp10_, "margin", 6, NULL);
#line 73 "/run/build/planner/src/Views/Project.vala"
	_tmp11_ = (GtkButton*) gtk_button_new ();
#line 73 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp11_);
#line 73 "/run/build/planner/src/Views/Project.vala"
	color_button = _tmp11_;
#line 74 "/run/build/planner/src/Views/Project.vala"
	_tmp12_ = color_button;
#line 74 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp12_, GTK_ALIGN_CENTER);
#line 75 "/run/build/planner/src/Views/Project.vala"
	_tmp13_ = color_button;
#line 75 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp13_, GTK_ALIGN_CENTER);
#line 76 "/run/build/planner/src/Views/Project.vala"
	_tmp14_ = color_button;
#line 76 "/run/build/planner/src/Views/Project.vala"
	_tmp15_ = gtk_widget_get_style_context ((GtkWidget*) _tmp14_);
#line 76 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp15_, GTK_STYLE_CLASS_FLAT);
#line 77 "/run/build/planner/src/Views/Project.vala"
	_tmp16_ = color_button;
#line 77 "/run/build/planner/src/Views/Project.vala"
	_tmp17_ = gtk_widget_get_style_context ((GtkWidget*) _tmp16_);
#line 77 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp17_, "button-circular");
#line 78 "/run/build/planner/src/Views/Project.vala"
	_tmp18_ = color_button;
#line 78 "/run/build/planner/src/Views/Project.vala"
	_tmp19_ = gtk_widget_get_style_context ((GtkWidget*) _tmp18_);
#line 78 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp19_, "no-padding");
#line 79 "/run/build/planner/src/Views/Project.vala"
	_tmp20_ = color_button;
#line 79 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp20_, _ ("Add new project"));
#line 80 "/run/build/planner/src/Views/Project.vala"
	_tmp21_ = color_button;
#line 80 "/run/build/planner/src/Views/Project.vala"
	_tmp22_ = label_color;
#line 80 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp21_, (GtkWidget*) _tmp22_);
#line 82 "/run/build/planner/src/Views/Project.vala"
	_tmp23_ = (GtkEntry*) gtk_entry_new ();
#line 82 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp23_);
#line 82 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->name_entry);
#line 82 "/run/build/planner/src/Views/Project.vala"
	self->priv->name_entry = _tmp23_;
#line 83 "/run/build/planner/src/Views/Project.vala"
	_tmp24_ = self->priv->name_entry;
#line 83 "/run/build/planner/src/Views/Project.vala"
	_tmp25_ = gtk_widget_get_style_context ((GtkWidget*) _tmp24_);
#line 83 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp25_, GRANITE_STYLE_CLASS_H2_LABEL);
#line 84 "/run/build/planner/src/Views/Project.vala"
	_tmp26_ = self->priv->name_entry;
#line 84 "/run/build/planner/src/Views/Project.vala"
	_tmp27_ = gtk_widget_get_style_context ((GtkWidget*) _tmp26_);
#line 84 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp27_, GTK_STYLE_CLASS_FLAT);
#line 85 "/run/build/planner/src/Views/Project.vala"
	_tmp28_ = self->priv->name_entry;
#line 85 "/run/build/planner/src/Views/Project.vala"
	_tmp29_ = gtk_widget_get_style_context ((GtkWidget*) _tmp28_);
#line 85 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp29_, GTK_STYLE_CLASS_VIEW);
#line 86 "/run/build/planner/src/Views/Project.vala"
	_tmp30_ = self->priv->name_entry;
#line 86 "/run/build/planner/src/Views/Project.vala"
	_tmp31_ = gtk_widget_get_style_context ((GtkWidget*) _tmp30_);
#line 86 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp31_, "planner-entry");
#line 87 "/run/build/planner/src/Views/Project.vala"
	_tmp32_ = self->priv->name_entry;
#line 87 "/run/build/planner/src/Views/Project.vala"
	_tmp33_ = gtk_widget_get_style_context ((GtkWidget*) _tmp32_);
#line 87 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp33_, "no-padding");
#line 88 "/run/build/planner/src/Views/Project.vala"
	_tmp34_ = self->priv->name_entry;
#line 88 "/run/build/planner/src/Views/Project.vala"
	_tmp35_ = gtk_widget_get_style_context ((GtkWidget*) _tmp34_);
#line 88 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp35_, "planner-entry-bold");
#line 89 "/run/build/planner/src/Views/Project.vala"
	_tmp36_ = self->priv->name_entry;
#line 89 "/run/build/planner/src/Views/Project.vala"
	_tmp37_ = self->priv->_project;
#line 89 "/run/build/planner/src/Views/Project.vala"
	_tmp38_ = _tmp37_->name;
#line 89 "/run/build/planner/src/Views/Project.vala"
	gtk_entry_set_text (_tmp36_, _tmp38_);
#line 90 "/run/build/planner/src/Views/Project.vala"
	_tmp39_ = self->priv->name_entry;
#line 90 "/run/build/planner/src/Views/Project.vala"
	gtk_entry_set_placeholder_text (_tmp39_, _ ("Name"));
#line 92 "/run/build/planner/src/Views/Project.vala"
	_tmp40_ = (GtkToggleButton*) gtk_toggle_button_new ();
#line 92 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp40_);
#line 92 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->deadline_project_button);
#line 92 "/run/build/planner/src/Views/Project.vala"
	self->priv->deadline_project_button = _tmp40_;
#line 93 "/run/build/planner/src/Views/Project.vala"
	_tmp41_ = self->priv->deadline_project_button;
#line 93 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp41_, 3);
#line 94 "/run/build/planner/src/Views/Project.vala"
	_tmp42_ = self->priv->deadline_project_button;
#line 94 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp42_, 3);
#line 95 "/run/build/planner/src/Views/Project.vala"
	_tmp43_ = self->priv->deadline_project_button;
#line 95 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp43_, 17);
#line 96 "/run/build/planner/src/Views/Project.vala"
	_tmp44_ = self->priv->deadline_project_button;
#line 96 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp44_, FALSE);
#line 97 "/run/build/planner/src/Views/Project.vala"
	_tmp45_ = self->priv->deadline_project_button;
#line 97 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp45_, GTK_ALIGN_START);
#line 98 "/run/build/planner/src/Views/Project.vala"
	_tmp46_ = self->priv->deadline_project_button;
#line 98 "/run/build/planner/src/Views/Project.vala"
	_tmp47_ = gtk_widget_get_style_context ((GtkWidget*) _tmp46_);
#line 98 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp47_, "planner-when-preview");
#line 99 "/run/build/planner/src/Views/Project.vala"
	_tmp48_ = self->priv->deadline_project_button;
#line 99 "/run/build/planner/src/Views/Project.vala"
	_tmp49_ = gtk_widget_get_style_context ((GtkWidget*) _tmp48_);
#line 99 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp49_, GTK_STYLE_CLASS_FLAT);
#line 100 "/run/build/planner/src/Views/Project.vala"
	_tmp50_ = self->priv->deadline_project_button;
#line 100 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp50_, GTK_ALIGN_CENTER);
#line 102 "/run/build/planner/src/Views/Project.vala"
	_tmp51_ = (GtkLabel*) gtk_label_new (_ ("Deadline"));
#line 102 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp51_);
#line 102 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->deadline_project_label);
#line 102 "/run/build/planner/src/Views/Project.vala"
	self->priv->deadline_project_label = _tmp51_;
#line 103 "/run/build/planner/src/Views/Project.vala"
	_tmp52_ = self->priv->deadline_project_label;
#line 103 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp52_, 1);
#line 104 "/run/build/planner/src/Views/Project.vala"
	_tmp53_ = self->priv->deadline_project_button;
#line 104 "/run/build/planner/src/Views/Project.vala"
	_tmp54_ = gtk_widget_get_style_context ((GtkWidget*) _tmp53_);
#line 104 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp54_, "h3");
#line 106 "/run/build/planner/src/Views/Project.vala"
	_tmp55_ = (GtkImage*) gtk_image_new ();
#line 106 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp55_);
#line 106 "/run/build/planner/src/Views/Project.vala"
	deadline_project_icon = _tmp55_;
#line 107 "/run/build/planner/src/Views/Project.vala"
	_tmp56_ = deadline_project_icon;
#line 107 "/run/build/planner/src/Views/Project.vala"
	_tmp57_ = (GThemedIcon*) g_themed_icon_new ("office-calendar-symbolic");
#line 107 "/run/build/planner/src/Views/Project.vala"
	_tmp58_ = _tmp57_;
#line 107 "/run/build/planner/src/Views/Project.vala"
	g_object_set (_tmp56_, "gicon", (GIcon*) _tmp58_, NULL);
#line 107 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (_tmp58_);
#line 108 "/run/build/planner/src/Views/Project.vala"
	_tmp59_ = deadline_project_icon;
#line 108 "/run/build/planner/src/Views/Project.vala"
	gtk_image_set_pixel_size (_tmp59_, 16);
#line 110 "/run/build/planner/src/Views/Project.vala"
	_tmp60_ = (GtkGrid*) gtk_grid_new ();
#line 110 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp60_);
#line 110 "/run/build/planner/src/Views/Project.vala"
	deadline_grid = _tmp60_;
#line 111 "/run/build/planner/src/Views/Project.vala"
	_tmp61_ = deadline_grid;
#line 111 "/run/build/planner/src/Views/Project.vala"
	_tmp62_ = deadline_project_icon;
#line 111 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp61_, (GtkWidget*) _tmp62_);
#line 112 "/run/build/planner/src/Views/Project.vala"
	_tmp63_ = deadline_grid;
#line 112 "/run/build/planner/src/Views/Project.vala"
	_tmp64_ = self->priv->deadline_project_label;
#line 112 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp63_, (GtkWidget*) _tmp64_);
#line 114 "/run/build/planner/src/Views/Project.vala"
	_tmp65_ = self->priv->deadline_project_button;
#line 114 "/run/build/planner/src/Views/Project.vala"
	_tmp66_ = deadline_grid;
#line 114 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp65_, (GtkWidget*) _tmp66_);
#line 116 "/run/build/planner/src/Views/Project.vala"
	_tmp67_ = (GtkRevealer*) gtk_revealer_new ();
#line 116 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp67_);
#line 116 "/run/build/planner/src/Views/Project.vala"
	deadline_project_revealer = _tmp67_;
#line 117 "/run/build/planner/src/Views/Project.vala"
	_tmp68_ = deadline_project_revealer;
#line 117 "/run/build/planner/src/Views/Project.vala"
	gtk_revealer_set_transition_type (_tmp68_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT);
#line 118 "/run/build/planner/src/Views/Project.vala"
	_tmp69_ = deadline_project_revealer;
#line 118 "/run/build/planner/src/Views/Project.vala"
	_tmp70_ = self->priv->deadline_project_button;
#line 118 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp69_, (GtkWidget*) _tmp70_);
#line 119 "/run/build/planner/src/Views/Project.vala"
	_tmp71_ = deadline_project_revealer;
#line 119 "/run/build/planner/src/Views/Project.vala"
	gtk_revealer_set_reveal_child (_tmp71_, TRUE);
#line 121 "/run/build/planner/src/Views/Project.vala"
	_tmp72_ = self->priv->_project;
#line 121 "/run/build/planner/src/Views/Project.vala"
	_tmp73_ = _tmp72_->deadline;
#line 121 "/run/build/planner/src/Views/Project.vala"
	if (g_strcmp0 (_tmp73_, "") == 0) {
#line 4798 "Project.c"
	} else {
		GDateTime* deadline_datetime = NULL;
		ObjectsProject* _tmp74_;
		const gchar* _tmp75_;
		GTimeZone* _tmp76_;
		GTimeZone* _tmp77_;
		GDateTime* _tmp78_;
		GDateTime* _tmp79_;
		Utils* _tmp80_;
		GDateTime* _tmp81_;
#line 127 "/run/build/planner/src/Views/Project.vala"
		_tmp74_ = self->priv->_project;
#line 127 "/run/build/planner/src/Views/Project.vala"
		_tmp75_ = _tmp74_->deadline;
#line 127 "/run/build/planner/src/Views/Project.vala"
		_tmp76_ = g_time_zone_new_local ();
#line 127 "/run/build/planner/src/Views/Project.vala"
		_tmp77_ = _tmp76_;
#line 127 "/run/build/planner/src/Views/Project.vala"
		_tmp78_ = g_date_time_new_from_iso8601 (_tmp75_, _tmp77_);
#line 127 "/run/build/planner/src/Views/Project.vala"
		_tmp79_ = _tmp78_;
#line 127 "/run/build/planner/src/Views/Project.vala"
		_g_time_zone_unref0 (_tmp77_);
#line 127 "/run/build/planner/src/Views/Project.vala"
		deadline_datetime = _tmp79_;
#line 129 "/run/build/planner/src/Views/Project.vala"
		_tmp80_ = application_utils;
#line 129 "/run/build/planner/src/Views/Project.vala"
		_tmp81_ = deadline_datetime;
#line 129 "/run/build/planner/src/Views/Project.vala"
		if (utils_is_today (_tmp80_, _tmp81_)) {
#line 4831 "Project.c"
			GtkLabel* _tmp82_;
#line 130 "/run/build/planner/src/Views/Project.vala"
			_tmp82_ = self->priv->deadline_project_label;
#line 130 "/run/build/planner/src/Views/Project.vala"
			gtk_label_set_label (_tmp82_, _ ("Today"));
#line 4837 "Project.c"
		} else {
			Utils* _tmp83_;
			GDateTime* _tmp84_;
#line 131 "/run/build/planner/src/Views/Project.vala"
			_tmp83_ = application_utils;
#line 131 "/run/build/planner/src/Views/Project.vala"
			_tmp84_ = deadline_datetime;
#line 131 "/run/build/planner/src/Views/Project.vala"
			if (utils_is_tomorrow (_tmp83_, _tmp84_)) {
#line 4847 "Project.c"
				GtkLabel* _tmp85_;
#line 132 "/run/build/planner/src/Views/Project.vala"
				_tmp85_ = self->priv->deadline_project_label;
#line 132 "/run/build/planner/src/Views/Project.vala"
				gtk_label_set_label (_tmp85_, _ ("Tomorrow"));
#line 4853 "Project.c"
			} else {
				GtkLabel* _tmp86_;
				GDateTime* _tmp87_;
				Utils* _tmp88_;
				GDateTime* _tmp89_;
				gchar* _tmp90_;
				gchar* _tmp91_;
				gchar* _tmp92_;
				gchar* _tmp93_;
#line 134 "/run/build/planner/src/Views/Project.vala"
				_tmp86_ = self->priv->deadline_project_label;
#line 134 "/run/build/planner/src/Views/Project.vala"
				_tmp87_ = deadline_datetime;
#line 134 "/run/build/planner/src/Views/Project.vala"
				_tmp88_ = application_utils;
#line 134 "/run/build/planner/src/Views/Project.vala"
				_tmp89_ = deadline_datetime;
#line 134 "/run/build/planner/src/Views/Project.vala"
				_tmp90_ = utils_get_default_date_format_from_date (_tmp88_, _tmp89_);
#line 134 "/run/build/planner/src/Views/Project.vala"
				_tmp91_ = _tmp90_;
#line 134 "/run/build/planner/src/Views/Project.vala"
				_tmp92_ = g_date_time_format (_tmp87_, _tmp91_);
#line 134 "/run/build/planner/src/Views/Project.vala"
				_tmp93_ = _tmp92_;
#line 134 "/run/build/planner/src/Views/Project.vala"
				gtk_label_set_label (_tmp86_, _tmp93_);
#line 134 "/run/build/planner/src/Views/Project.vala"
				_g_free0 (_tmp93_);
#line 134 "/run/build/planner/src/Views/Project.vala"
				_g_free0 (_tmp91_);
#line 4885 "Project.c"
			}
		}
#line 121 "/run/build/planner/src/Views/Project.vala"
		_g_date_time_unref0 (deadline_datetime);
#line 4890 "Project.c"
	}
#line 138 "/run/build/planner/src/Views/Project.vala"
	_tmp94_ = self->priv->deadline_project_button;
#line 138 "/run/build/planner/src/Views/Project.vala"
	_tmp95_ = widgets_popovers_deadline_popover_new ((GtkWidget*) _tmp94_);
#line 138 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp95_);
#line 138 "/run/build/planner/src/Views/Project.vala"
	_data33_->deadline_popover = _tmp95_;
#line 140 "/run/build/planner/src/Views/Project.vala"
	_tmp96_ = self->priv->deadline_project_button;
#line 140 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_data (_tmp96_, "toggled", (GCallback) __views_project___lambda403__gtk_toggle_button_toggled, block33_data_ref (_data33_), (GClosureNotify) block33_data_unref, 0);
#line 146 "/run/build/planner/src/Views/Project.vala"
	_tmp97_ = _data33_->deadline_popover;
#line 146 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object ((GtkPopover*) _tmp97_, "closed", (GCallback) __views_project___lambda404__gtk_popover_closed, self, 0);
#line 152 "/run/build/planner/src/Views/Project.vala"
	_tmp98_ = _data33_->deadline_popover;
#line 152 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object (_tmp98_, "selection-changed", (GCallback) __views_project___lambda405__widgets_popovers_deadline_popover_selection_changed, self, 0);
#line 164 "/run/build/planner/src/Views/Project.vala"
	_tmp99_ = _data33_->deadline_popover;
#line 164 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object (_tmp99_, "selection-double-changed", (GCallback) __views_project___lambda406__widgets_popovers_deadline_popover_selection_double_changed, self, 0);
#line 176 "/run/build/planner/src/Views/Project.vala"
	_tmp100_ = _data33_->deadline_popover;
#line 176 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object (_tmp100_, "clear", (GCallback) __views_project___lambda407__widgets_popovers_deadline_popover_clear, self, 0);
#line 181 "/run/build/planner/src/Views/Project.vala"
	_tmp101_ = (GtkButton*) gtk_button_new_from_icon_name ("planner-paste-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 181 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp101_);
#line 181 "/run/build/planner/src/Views/Project.vala"
	paste_button = _tmp101_;
#line 182 "/run/build/planner/src/Views/Project.vala"
	_tmp102_ = paste_button;
#line 182 "/run/build/planner/src/Views/Project.vala"
	_tmp103_ = gtk_widget_get_style_context ((GtkWidget*) _tmp102_);
#line 182 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp103_, "planner-paste-menu");
#line 183 "/run/build/planner/src/Views/Project.vala"
	_tmp104_ = paste_button;
#line 183 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp104_, _ ("Paste"));
#line 184 "/run/build/planner/src/Views/Project.vala"
	_tmp105_ = paste_button;
#line 184 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp105_, GTK_ALIGN_CENTER);
#line 185 "/run/build/planner/src/Views/Project.vala"
	_tmp106_ = paste_button;
#line 185 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp106_, GTK_ALIGN_CENTER);
#line 187 "/run/build/planner/src/Views/Project.vala"
	_tmp107_ = (GtkButton*) gtk_button_new_from_icon_name ("planner-label-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 187 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp107_);
#line 187 "/run/build/planner/src/Views/Project.vala"
	labels_button = _tmp107_;
#line 188 "/run/build/planner/src/Views/Project.vala"
	_tmp108_ = labels_button;
#line 188 "/run/build/planner/src/Views/Project.vala"
	_tmp109_ = gtk_widget_get_style_context ((GtkWidget*) _tmp108_);
#line 188 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp109_, "planner-label-menu");
#line 189 "/run/build/planner/src/Views/Project.vala"
	_tmp110_ = labels_button;
#line 189 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp110_, _ ("Filter by Label"));
#line 190 "/run/build/planner/src/Views/Project.vala"
	_tmp111_ = labels_button;
#line 190 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp111_, GTK_ALIGN_CENTER);
#line 191 "/run/build/planner/src/Views/Project.vala"
	_tmp112_ = labels_button;
#line 191 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp112_, GTK_ALIGN_CENTER);
#line 193 "/run/build/planner/src/Views/Project.vala"
	_tmp113_ = labels_button;
#line 193 "/run/build/planner/src/Views/Project.vala"
	_tmp114_ = widgets_popovers_labels_popover_new ((GtkWidget*) _tmp113_);
#line 193 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp114_);
#line 193 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->labels_popover);
#line 193 "/run/build/planner/src/Views/Project.vala"
	self->priv->labels_popover = _tmp114_;
#line 194 "/run/build/planner/src/Views/Project.vala"
	_tmp115_ = self->priv->labels_popover;
#line 194 "/run/build/planner/src/Views/Project.vala"
	gtk_popover_set_position ((GtkPopover*) _tmp115_, GTK_POS_BOTTOM);
#line 196 "/run/build/planner/src/Views/Project.vala"
	_tmp116_ = (GtkButton*) gtk_button_new_from_icon_name ("system-search-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 196 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp116_);
#line 196 "/run/build/planner/src/Views/Project.vala"
	search_button = _tmp116_;
#line 197 "/run/build/planner/src/Views/Project.vala"
	_tmp117_ = search_button;
#line 197 "/run/build/planner/src/Views/Project.vala"
	_tmp118_ = gtk_widget_get_style_context ((GtkWidget*) _tmp117_);
#line 197 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp118_, "planner-search-menu");
#line 198 "/run/build/planner/src/Views/Project.vala"
	_tmp119_ = search_button;
#line 198 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp119_, _ ("Search"));
#line 199 "/run/build/planner/src/Views/Project.vala"
	_tmp120_ = search_button;
#line 199 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp120_, GTK_ALIGN_CENTER);
#line 200 "/run/build/planner/src/Views/Project.vala"
	_tmp121_ = search_button;
#line 200 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp121_, GTK_ALIGN_CENTER);
#line 202 "/run/build/planner/src/Views/Project.vala"
	_tmp122_ = (GtkButton*) gtk_button_new_from_icon_name ("planner-share-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 202 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp122_);
#line 202 "/run/build/planner/src/Views/Project.vala"
	share_button = _tmp122_;
#line 203 "/run/build/planner/src/Views/Project.vala"
	_tmp123_ = share_button;
#line 203 "/run/build/planner/src/Views/Project.vala"
	_tmp124_ = gtk_widget_get_style_context ((GtkWidget*) _tmp123_);
#line 203 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp124_, "planner-share-menu");
#line 204 "/run/build/planner/src/Views/Project.vala"
	_tmp125_ = share_button;
#line 204 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp125_, _ ("Share"));
#line 205 "/run/build/planner/src/Views/Project.vala"
	_tmp126_ = share_button;
#line 205 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp126_, GTK_ALIGN_CENTER);
#line 206 "/run/build/planner/src/Views/Project.vala"
	_tmp127_ = share_button;
#line 206 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp127_, GTK_ALIGN_CENTER);
#line 208 "/run/build/planner/src/Views/Project.vala"
	_tmp128_ = share_button;
#line 208 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object (_tmp128_, "clicked", (GCallback) __views_project___lambda408__gtk_button_clicked, self, 0);
#line 215 "/run/build/planner/src/Views/Project.vala"
	_tmp129_ = (GtkToggleButton*) gtk_toggle_button_new ();
#line 215 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp129_);
#line 215 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->show_hide_all_button);
#line 215 "/run/build/planner/src/Views/Project.vala"
	self->priv->show_hide_all_button = _tmp129_;
#line 216 "/run/build/planner/src/Views/Project.vala"
	_tmp130_ = self->priv->show_hide_all_button;
#line 216 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp130_, GTK_ALIGN_CENTER);
#line 217 "/run/build/planner/src/Views/Project.vala"
	_tmp131_ = self->priv->show_hide_all_button;
#line 217 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp131_, GTK_ALIGN_CENTER);
#line 218 "/run/build/planner/src/Views/Project.vala"
	_tmp132_ = self->priv->show_hide_all_button;
#line 218 "/run/build/planner/src/Views/Project.vala"
	_tmp133_ = gtk_widget_get_style_context ((GtkWidget*) _tmp132_);
#line 218 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp133_, "planner-zoom-in-menu");
#line 219 "/run/build/planner/src/Views/Project.vala"
	_tmp134_ = self->priv->show_hide_all_button;
#line 219 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp134_, _ ("Open all tasks"));
#line 221 "/run/build/planner/src/Views/Project.vala"
	_tmp135_ = (GtkImage*) gtk_image_new_from_icon_name ("zoom-in-symbolic", (GtkIconSize) GTK_ICON_SIZE_MENU);
#line 221 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp135_);
#line 221 "/run/build/planner/src/Views/Project.vala"
	_data33_->show_hide_image = _tmp135_;
#line 222 "/run/build/planner/src/Views/Project.vala"
	_tmp136_ = self->priv->show_hide_all_button;
#line 222 "/run/build/planner/src/Views/Project.vala"
	_tmp137_ = _data33_->show_hide_image;
#line 222 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp136_, (GtkWidget*) _tmp137_);
#line 224 "/run/build/planner/src/Views/Project.vala"
	_tmp138_ = (GtkGrid*) gtk_grid_new ();
#line 224 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp138_);
#line 224 "/run/build/planner/src/Views/Project.vala"
	action_grid = _tmp138_;
#line 225 "/run/build/planner/src/Views/Project.vala"
	_tmp139_ = action_grid;
#line 225 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp139_, GTK_ALIGN_CENTER);
#line 226 "/run/build/planner/src/Views/Project.vala"
	_tmp140_ = action_grid;
#line 226 "/run/build/planner/src/Views/Project.vala"
	gtk_grid_set_column_spacing (_tmp140_, 12);
#line 228 "/run/build/planner/src/Views/Project.vala"
	_tmp141_ = action_grid;
#line 228 "/run/build/planner/src/Views/Project.vala"
	_tmp142_ = labels_button;
#line 228 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp141_, (GtkWidget*) _tmp142_);
#line 230 "/run/build/planner/src/Views/Project.vala"
	_tmp143_ = action_grid;
#line 230 "/run/build/planner/src/Views/Project.vala"
	_tmp144_ = paste_button;
#line 230 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp143_, (GtkWidget*) _tmp144_);
#line 231 "/run/build/planner/src/Views/Project.vala"
	_tmp145_ = action_grid;
#line 231 "/run/build/planner/src/Views/Project.vala"
	_tmp146_ = share_button;
#line 231 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp145_, (GtkWidget*) _tmp146_);
#line 232 "/run/build/planner/src/Views/Project.vala"
	_tmp147_ = action_grid;
#line 232 "/run/build/planner/src/Views/Project.vala"
	_tmp148_ = self->priv->show_hide_all_button;
#line 232 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp147_, (GtkWidget*) _tmp148_);
#line 234 "/run/build/planner/src/Views/Project.vala"
	_tmp149_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 234 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp149_);
#line 234 "/run/build/planner/src/Views/Project.vala"
	top_box = _tmp149_;
#line 235 "/run/build/planner/src/Views/Project.vala"
	_tmp150_ = top_box;
#line 235 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp150_, GTK_ALIGN_START);
#line 236 "/run/build/planner/src/Views/Project.vala"
	_tmp151_ = top_box;
#line 236 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp151_, TRUE);
#line 237 "/run/build/planner/src/Views/Project.vala"
	_tmp152_ = top_box;
#line 237 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp152_, 12);
#line 238 "/run/build/planner/src/Views/Project.vala"
	_tmp153_ = top_box;
#line 238 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp153_, 12);
#line 240 "/run/build/planner/src/Views/Project.vala"
	_tmp154_ = top_box;
#line 240 "/run/build/planner/src/Views/Project.vala"
	_tmp155_ = color_button;
#line 240 "/run/build/planner/src/Views/Project.vala"
	gtk_box_pack_start (_tmp154_, (GtkWidget*) _tmp155_, FALSE, FALSE, (guint) 0);
#line 241 "/run/build/planner/src/Views/Project.vala"
	_tmp156_ = top_box;
#line 241 "/run/build/planner/src/Views/Project.vala"
	_tmp157_ = self->priv->name_entry;
#line 241 "/run/build/planner/src/Views/Project.vala"
	gtk_box_pack_start (_tmp156_, (GtkWidget*) _tmp157_, TRUE, TRUE, (guint) 6);
#line 242 "/run/build/planner/src/Views/Project.vala"
	_tmp158_ = top_box;
#line 242 "/run/build/planner/src/Views/Project.vala"
	_tmp159_ = action_grid;
#line 242 "/run/build/planner/src/Views/Project.vala"
	gtk_box_pack_end (_tmp158_, (GtkWidget*) _tmp159_, FALSE, FALSE, (guint) 12);
#line 244 "/run/build/planner/src/Views/Project.vala"
	_tmp160_ = (GtkTextView*) gtk_text_view_new ();
#line 244 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp160_);
#line 244 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->note_view);
#line 244 "/run/build/planner/src/Views/Project.vala"
	self->priv->note_view = _tmp160_;
#line 246 "/run/build/planner/src/Views/Project.vala"
	_tmp161_ = self->priv->note_view;
#line 246 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp161_, 18);
#line 247 "/run/build/planner/src/Views/Project.vala"
	_tmp162_ = self->priv->note_view;
#line 247 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp162_, 6);
#line 248 "/run/build/planner/src/Views/Project.vala"
	_tmp163_ = self->priv->note_view;
#line 248 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp163_, 16);
#line 249 "/run/build/planner/src/Views/Project.vala"
	_tmp164_ = self->priv->note_view;
#line 249 "/run/build/planner/src/Views/Project.vala"
	_tmp165_ = gtk_text_view_get_buffer (_tmp164_);
#line 249 "/run/build/planner/src/Views/Project.vala"
	_tmp166_ = _tmp165_;
#line 249 "/run/build/planner/src/Views/Project.vala"
	_tmp167_ = self->priv->_project;
#line 249 "/run/build/planner/src/Views/Project.vala"
	_tmp168_ = _tmp167_->note;
#line 249 "/run/build/planner/src/Views/Project.vala"
	g_object_set (_tmp166_, "text", _tmp168_, NULL);
#line 250 "/run/build/planner/src/Views/Project.vala"
	_tmp169_ = self->priv->note_view;
#line 250 "/run/build/planner/src/Views/Project.vala"
	_tmp170_ = gtk_widget_get_style_context ((GtkWidget*) _tmp169_);
#line 250 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp170_, "note-view");
#line 252 "/run/build/planner/src/Views/Project.vala"
	_tmp171_ = (GtkLabel*) gtk_label_new (_ ("Note"));
#line 252 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp171_);
#line 252 "/run/build/planner/src/Views/Project.vala"
	_data33_->note_view_placeholder_label = _tmp171_;
#line 253 "/run/build/planner/src/Views/Project.vala"
	_tmp172_ = _data33_->note_view_placeholder_label;
#line 253 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_opacity ((GtkWidget*) _tmp172_, 0.65);
#line 254 "/run/build/planner/src/Views/Project.vala"
	_tmp173_ = self->priv->note_view;
#line 254 "/run/build/planner/src/Views/Project.vala"
	_tmp174_ = _data33_->note_view_placeholder_label;
#line 254 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp173_, (GtkWidget*) _tmp174_);
#line 256 "/run/build/planner/src/Views/Project.vala"
	_tmp175_ = self->priv->note_view;
#line 256 "/run/build/planner/src/Views/Project.vala"
	_tmp176_ = gtk_text_view_get_buffer (_tmp175_);
#line 256 "/run/build/planner/src/Views/Project.vala"
	_tmp177_ = _tmp176_;
#line 256 "/run/build/planner/src/Views/Project.vala"
	g_object_get (_tmp177_, "text", &_tmp178_, NULL);
#line 256 "/run/build/planner/src/Views/Project.vala"
	_tmp179_ = _tmp178_;
#line 256 "/run/build/planner/src/Views/Project.vala"
	_tmp180_ = _tmp179_;
#line 256 "/run/build/planner/src/Views/Project.vala"
	_tmp181_ = g_strcmp0 (_tmp180_, "") != 0;
#line 256 "/run/build/planner/src/Views/Project.vala"
	_g_free0 (_tmp180_);
#line 256 "/run/build/planner/src/Views/Project.vala"
	if (_tmp181_) {
#line 5222 "Project.c"
		GtkLabel* _tmp182_;
		GtkLabel* _tmp183_;
#line 257 "/run/build/planner/src/Views/Project.vala"
		_tmp182_ = _data33_->note_view_placeholder_label;
#line 257 "/run/build/planner/src/Views/Project.vala"
		gtk_widget_set_visible ((GtkWidget*) _tmp182_, FALSE);
#line 258 "/run/build/planner/src/Views/Project.vala"
		_tmp183_ = _data33_->note_view_placeholder_label;
#line 258 "/run/build/planner/src/Views/Project.vala"
		gtk_widget_set_no_show_all ((GtkWidget*) _tmp183_, TRUE);
#line 5233 "Project.c"
	}
#line 261 "/run/build/planner/src/Views/Project.vala"
	_tmp184_ = (GtkListBox*) gtk_list_box_new ();
#line 261 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp184_);
#line 261 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->tasks_list);
#line 261 "/run/build/planner/src/Views/Project.vala"
	self->priv->tasks_list = _tmp184_;
#line 262 "/run/build/planner/src/Views/Project.vala"
	_tmp185_ = self->priv->tasks_list;
#line 262 "/run/build/planner/src/Views/Project.vala"
	gtk_list_box_set_activate_on_single_click (_tmp185_, TRUE);
#line 263 "/run/build/planner/src/Views/Project.vala"
	_tmp186_ = self->priv->tasks_list;
#line 263 "/run/build/planner/src/Views/Project.vala"
	gtk_list_box_set_selection_mode (_tmp186_, GTK_SELECTION_SINGLE);
#line 264 "/run/build/planner/src/Views/Project.vala"
	_tmp187_ = self->priv->tasks_list;
#line 264 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp187_, TRUE);
#line 266 "/run/build/planner/src/Views/Project.vala"
	_tmp188_ = (GtkButton*) gtk_button_new_from_icon_name ("list-add-symbolic", (GtkIconSize) GTK_ICON_SIZE_SMALL_TOOLBAR);
#line 266 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp188_);
#line 266 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->add_task_button);
#line 266 "/run/build/planner/src/Views/Project.vala"
	self->priv->add_task_button = _tmp188_;
#line 267 "/run/build/planner/src/Views/Project.vala"
	_tmp189_ = self->priv->add_task_button;
#line 267 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp189_, "height-request", 32, NULL);
#line 268 "/run/build/planner/src/Views/Project.vala"
	_tmp190_ = self->priv->add_task_button;
#line 268 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp190_, "margin", 12, NULL);
#line 269 "/run/build/planner/src/Views/Project.vala"
	_tmp191_ = self->priv->add_task_button;
#line 269 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp191_, "width-request", 32, NULL);
#line 270 "/run/build/planner/src/Views/Project.vala"
	_tmp192_ = self->priv->add_task_button;
#line 270 "/run/build/planner/src/Views/Project.vala"
	_tmp193_ = gtk_widget_get_style_context ((GtkWidget*) _tmp192_);
#line 270 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp193_, "button-circular");
#line 271 "/run/build/planner/src/Views/Project.vala"
	_tmp194_ = self->priv->add_task_button;
#line 271 "/run/build/planner/src/Views/Project.vala"
	_tmp195_ = gtk_widget_get_style_context ((GtkWidget*) _tmp194_);
#line 271 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp195_, "no-padding");
#line 272 "/run/build/planner/src/Views/Project.vala"
	_tmp196_ = self->priv->add_task_button;
#line 272 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp196_, _ ("Add new task"));
#line 274 "/run/build/planner/src/Views/Project.vala"
	_tmp197_ = (GtkRevealer*) gtk_revealer_new ();
#line 274 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp197_);
#line 274 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->add_task_revealer);
#line 274 "/run/build/planner/src/Views/Project.vala"
	self->priv->add_task_revealer = _tmp197_;
#line 275 "/run/build/planner/src/Views/Project.vala"
	_tmp198_ = self->priv->add_task_revealer;
#line 275 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp198_, GTK_ALIGN_END);
#line 276 "/run/build/planner/src/Views/Project.vala"
	_tmp199_ = self->priv->add_task_revealer;
#line 276 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp199_, GTK_ALIGN_END);
#line 277 "/run/build/planner/src/Views/Project.vala"
	_tmp200_ = self->priv->add_task_revealer;
#line 277 "/run/build/planner/src/Views/Project.vala"
	gtk_revealer_set_transition_type (_tmp200_, GTK_REVEALER_TRANSITION_TYPE_CROSSFADE);
#line 278 "/run/build/planner/src/Views/Project.vala"
	_tmp201_ = self->priv->add_task_revealer;
#line 278 "/run/build/planner/src/Views/Project.vala"
	_tmp202_ = self->priv->add_task_button;
#line 278 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp201_, (GtkWidget*) _tmp202_);
#line 279 "/run/build/planner/src/Views/Project.vala"
	_tmp203_ = self->priv->add_task_revealer;
#line 279 "/run/build/planner/src/Views/Project.vala"
	gtk_revealer_set_reveal_child (_tmp203_, TRUE);
#line 281 "/run/build/planner/src/Views/Project.vala"
	_tmp204_ = (GtkToggleButton*) gtk_toggle_button_new ();
#line 281 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp204_);
#line 281 "/run/build/planner/src/Views/Project.vala"
	_data33_->show_completed_button = _tmp204_;
#line 282 "/run/build/planner/src/Views/Project.vala"
	_tmp205_ = _data33_->show_completed_button;
#line 282 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp205_, FALSE);
#line 283 "/run/build/planner/src/Views/Project.vala"
	_tmp206_ = _data33_->show_completed_button;
#line 283 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp206_, GTK_ALIGN_CENTER);
#line 284 "/run/build/planner/src/Views/Project.vala"
	_tmp207_ = _data33_->show_completed_button;
#line 284 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp207_, GTK_ALIGN_CENTER);
#line 285 "/run/build/planner/src/Views/Project.vala"
	_tmp208_ = _data33_->show_completed_button;
#line 285 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp208_, "width-request", 36, NULL);
#line 286 "/run/build/planner/src/Views/Project.vala"
	_tmp209_ = _data33_->show_completed_button;
#line 286 "/run/build/planner/src/Views/Project.vala"
	_tmp210_ = gtk_widget_get_style_context ((GtkWidget*) _tmp209_);
#line 286 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp210_, "button-circular");
#line 287 "/run/build/planner/src/Views/Project.vala"
	_tmp211_ = _data33_->show_completed_button;
#line 287 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp211_, _ ("Show completed tasks"));
#line 289 "/run/build/planner/src/Views/Project.vala"
	_tmp212_ = (GtkImage*) gtk_image_new ();
#line 289 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp212_);
#line 289 "/run/build/planner/src/Views/Project.vala"
	_data33_->show_completed_icon = _tmp212_;
#line 290 "/run/build/planner/src/Views/Project.vala"
	_tmp213_ = _data33_->show_completed_icon;
#line 290 "/run/build/planner/src/Views/Project.vala"
	_tmp214_ = (GThemedIcon*) g_themed_icon_new ("emblem-default-symbolic");
#line 290 "/run/build/planner/src/Views/Project.vala"
	_tmp215_ = _tmp214_;
#line 290 "/run/build/planner/src/Views/Project.vala"
	g_object_set (_tmp213_, "gicon", (GIcon*) _tmp215_, NULL);
#line 290 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (_tmp215_);
#line 291 "/run/build/planner/src/Views/Project.vala"
	_tmp216_ = _data33_->show_completed_icon;
#line 291 "/run/build/planner/src/Views/Project.vala"
	gtk_image_set_pixel_size (_tmp216_, 16);
#line 293 "/run/build/planner/src/Views/Project.vala"
	_tmp217_ = _data33_->show_completed_button;
#line 293 "/run/build/planner/src/Views/Project.vala"
	_tmp218_ = _data33_->show_completed_icon;
#line 293 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp217_, (GtkWidget*) _tmp218_);
#line 295 "/run/build/planner/src/Views/Project.vala"
	_tmp219_ = (GtkRevealer*) gtk_revealer_new ();
#line 295 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp219_);
#line 295 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->show_completed_revealer);
#line 295 "/run/build/planner/src/Views/Project.vala"
	self->priv->show_completed_revealer = _tmp219_;
#line 296 "/run/build/planner/src/Views/Project.vala"
	_tmp220_ = self->priv->show_completed_revealer;
#line 296 "/run/build/planner/src/Views/Project.vala"
	gtk_revealer_set_transition_type (_tmp220_, GTK_REVEALER_TRANSITION_TYPE_CROSSFADE);
#line 297 "/run/build/planner/src/Views/Project.vala"
	_tmp221_ = self->priv->show_completed_revealer;
#line 297 "/run/build/planner/src/Views/Project.vala"
	_tmp222_ = _data33_->show_completed_button;
#line 297 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp221_, (GtkWidget*) _tmp222_);
#line 298 "/run/build/planner/src/Views/Project.vala"
	_tmp223_ = self->priv->show_completed_revealer;
#line 298 "/run/build/planner/src/Views/Project.vala"
	gtk_revealer_set_reveal_child (_tmp223_, TRUE);
#line 300 "/run/build/planner/src/Views/Project.vala"
	_tmp224_ = (GtkToggleButton*) gtk_toggle_button_new ();
#line 300 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp224_);
#line 300 "/run/build/planner/src/Views/Project.vala"
	_data33_->notes_button = _tmp224_;
#line 301 "/run/build/planner/src/Views/Project.vala"
	_tmp225_ = _data33_->notes_button;
#line 301 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_can_focus ((GtkWidget*) _tmp225_, FALSE);
#line 302 "/run/build/planner/src/Views/Project.vala"
	_tmp226_ = _data33_->notes_button;
#line 302 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp226_, GTK_ALIGN_CENTER);
#line 303 "/run/build/planner/src/Views/Project.vala"
	_tmp227_ = _data33_->notes_button;
#line 303 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp227_, GTK_ALIGN_CENTER);
#line 304 "/run/build/planner/src/Views/Project.vala"
	_tmp228_ = _data33_->notes_button;
#line 304 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp228_, "height-request", 24, NULL);
#line 305 "/run/build/planner/src/Views/Project.vala"
	_tmp229_ = _data33_->notes_button;
#line 305 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp229_, "width-request", 24, NULL);
#line 306 "/run/build/planner/src/Views/Project.vala"
	_tmp230_ = _data33_->notes_button;
#line 306 "/run/build/planner/src/Views/Project.vala"
	_tmp231_ = gtk_widget_get_style_context ((GtkWidget*) _tmp230_);
#line 306 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp231_, "button-circular");
#line 307 "/run/build/planner/src/Views/Project.vala"
	_tmp232_ = _data33_->notes_button;
#line 307 "/run/build/planner/src/Views/Project.vala"
	_tmp233_ = gtk_widget_get_style_context ((GtkWidget*) _tmp232_);
#line 307 "/run/build/planner/src/Views/Project.vala"
	gtk_style_context_add_class (_tmp233_, GTK_STYLE_CLASS_FLAT);
#line 308 "/run/build/planner/src/Views/Project.vala"
	_tmp234_ = _data33_->notes_button;
#line 308 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_tooltip_text ((GtkWidget*) _tmp234_, _ ("Notes"));
#line 309 "/run/build/planner/src/Views/Project.vala"
	_tmp235_ = _data33_->notes_button;
#line 309 "/run/build/planner/src/Views/Project.vala"
	_tmp236_ = (GtkImage*) gtk_image_new_from_icon_name ("text-x-generic-symbolic", (GtkIconSize) GTK_ICON_SIZE_SMALL_TOOLBAR);
#line 309 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp236_);
#line 309 "/run/build/planner/src/Views/Project.vala"
	_tmp237_ = _tmp236_;
#line 309 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp235_, (GtkWidget*) _tmp237_);
#line 309 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (_tmp237_);
#line 311 "/run/build/planner/src/Views/Project.vala"
	_tmp238_ = (GtkRevealer*) gtk_revealer_new ();
#line 311 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp238_);
#line 311 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->notes_revealer);
#line 311 "/run/build/planner/src/Views/Project.vala"
	self->priv->notes_revealer = _tmp238_;
#line 312 "/run/build/planner/src/Views/Project.vala"
	_tmp239_ = self->priv->notes_revealer;
#line 312 "/run/build/planner/src/Views/Project.vala"
	gtk_revealer_set_transition_type (_tmp239_, GTK_REVEALER_TRANSITION_TYPE_CROSSFADE);
#line 313 "/run/build/planner/src/Views/Project.vala"
	_tmp240_ = self->priv->notes_revealer;
#line 313 "/run/build/planner/src/Views/Project.vala"
	_tmp241_ = _data33_->notes_button;
#line 313 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp240_, (GtkWidget*) _tmp241_);
#line 314 "/run/build/planner/src/Views/Project.vala"
	_tmp242_ = self->priv->notes_revealer;
#line 314 "/run/build/planner/src/Views/Project.vala"
	gtk_revealer_set_reveal_child (_tmp242_, TRUE);
#line 316 "/run/build/planner/src/Views/Project.vala"
	_tmp243_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 316 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp243_);
#line 316 "/run/build/planner/src/Views/Project.vala"
	stacks_buttons_box = _tmp243_;
#line 317 "/run/build/planner/src/Views/Project.vala"
	_tmp244_ = stacks_buttons_box;
#line 317 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp244_, GTK_ALIGN_END);
#line 318 "/run/build/planner/src/Views/Project.vala"
	_tmp245_ = stacks_buttons_box;
#line 318 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp245_, GTK_ALIGN_START);
#line 319 "/run/build/planner/src/Views/Project.vala"
	_tmp246_ = stacks_buttons_box;
#line 319 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp246_, "margin", 6, NULL);
#line 320 "/run/build/planner/src/Views/Project.vala"
	_tmp247_ = stacks_buttons_box;
#line 320 "/run/build/planner/src/Views/Project.vala"
	_tmp248_ = self->priv->show_completed_revealer;
#line 320 "/run/build/planner/src/Views/Project.vala"
	gtk_box_pack_start (_tmp247_, (GtkWidget*) _tmp248_, FALSE, FALSE, (guint) 0);
#line 323 "/run/build/planner/src/Views/Project.vala"
	_tmp249_ = self->priv->_project;
#line 323 "/run/build/planner/src/Views/Project.vala"
	_tmp250_ = _tmp249_->id;
#line 323 "/run/build/planner/src/Views/Project.vala"
	_tmp251_ = widgets_task_new_new (FALSE, _tmp250_);
#line 323 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp251_);
#line 323 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->task_new_revealer);
#line 323 "/run/build/planner/src/Views/Project.vala"
	self->priv->task_new_revealer = _tmp251_;
#line 324 "/run/build/planner/src/Views/Project.vala"
	_tmp252_ = self->priv->task_new_revealer;
#line 324 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp252_, GTK_ALIGN_END);
#line 326 "/run/build/planner/src/Views/Project.vala"
	_tmp253_ = (GtkFlowBox*) gtk_flow_box_new ();
#line 326 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp253_);
#line 326 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->labels_flowbox);
#line 326 "/run/build/planner/src/Views/Project.vala"
	self->priv->labels_flowbox = _tmp253_;
#line 327 "/run/build/planner/src/Views/Project.vala"
	_tmp254_ = self->priv->labels_flowbox;
#line 327 "/run/build/planner/src/Views/Project.vala"
	gtk_flow_box_set_selection_mode (_tmp254_, GTK_SELECTION_NONE);
#line 328 "/run/build/planner/src/Views/Project.vala"
	_tmp255_ = self->priv->labels_flowbox;
#line 328 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp255_, 6);
#line 329 "/run/build/planner/src/Views/Project.vala"
	_tmp256_ = self->priv->labels_flowbox;
#line 329 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp256_, "height-request", 38, NULL);
#line 330 "/run/build/planner/src/Views/Project.vala"
	_tmp257_ = self->priv->labels_flowbox;
#line 330 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp257_, "expand", FALSE, NULL);
#line 332 "/run/build/planner/src/Views/Project.vala"
	_tmp258_ = (GtkRevealer*) gtk_revealer_new ();
#line 332 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp258_);
#line 332 "/run/build/planner/src/Views/Project.vala"
	_data33_->labels_flowbox_revealer = _tmp258_;
#line 333 "/run/build/planner/src/Views/Project.vala"
	_tmp259_ = _data33_->labels_flowbox_revealer;
#line 333 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp259_, GTK_ALIGN_START);
#line 334 "/run/build/planner/src/Views/Project.vala"
	_tmp260_ = _data33_->labels_flowbox_revealer;
#line 334 "/run/build/planner/src/Views/Project.vala"
	gtk_revealer_set_transition_type (_tmp260_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN);
#line 335 "/run/build/planner/src/Views/Project.vala"
	_tmp261_ = _data33_->labels_flowbox_revealer;
#line 335 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp261_, 6);
#line 336 "/run/build/planner/src/Views/Project.vala"
	_tmp262_ = _data33_->labels_flowbox_revealer;
#line 336 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_margin_top ((GtkWidget*) _tmp262_, 6);
#line 337 "/run/build/planner/src/Views/Project.vala"
	_tmp263_ = _data33_->labels_flowbox_revealer;
#line 337 "/run/build/planner/src/Views/Project.vala"
	_tmp264_ = self->priv->labels_flowbox;
#line 337 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp263_, (GtkWidget*) _tmp264_);
#line 338 "/run/build/planner/src/Views/Project.vala"
	_tmp265_ = _data33_->labels_flowbox_revealer;
#line 338 "/run/build/planner/src/Views/Project.vala"
	gtk_revealer_set_reveal_child (_tmp265_, FALSE);
#line 340 "/run/build/planner/src/Views/Project.vala"
	_tmp266_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 340 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp266_);
#line 340 "/run/build/planner/src/Views/Project.vala"
	t_box = _tmp266_;
#line 341 "/run/build/planner/src/Views/Project.vala"
	_tmp267_ = t_box;
#line 341 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_hexpand ((GtkWidget*) _tmp267_, TRUE);
#line 342 "/run/build/planner/src/Views/Project.vala"
	_tmp268_ = t_box;
#line 342 "/run/build/planner/src/Views/Project.vala"
	_tmp269_ = top_box;
#line 342 "/run/build/planner/src/Views/Project.vala"
	gtk_box_pack_start (_tmp268_, (GtkWidget*) _tmp269_, FALSE, FALSE, (guint) 0);
#line 343 "/run/build/planner/src/Views/Project.vala"
	_tmp270_ = t_box;
#line 343 "/run/build/planner/src/Views/Project.vala"
	_tmp271_ = deadline_project_revealer;
#line 343 "/run/build/planner/src/Views/Project.vala"
	gtk_box_pack_start (_tmp270_, (GtkWidget*) _tmp271_, FALSE, FALSE, (guint) 0);
#line 344 "/run/build/planner/src/Views/Project.vala"
	_tmp272_ = t_box;
#line 344 "/run/build/planner/src/Views/Project.vala"
	_tmp273_ = self->priv->note_view;
#line 344 "/run/build/planner/src/Views/Project.vala"
	gtk_box_pack_start (_tmp272_, (GtkWidget*) _tmp273_, FALSE, FALSE, (guint) 0);
#line 345 "/run/build/planner/src/Views/Project.vala"
	_tmp274_ = t_box;
#line 345 "/run/build/planner/src/Views/Project.vala"
	_tmp275_ = _data33_->labels_flowbox_revealer;
#line 345 "/run/build/planner/src/Views/Project.vala"
	gtk_box_pack_start (_tmp274_, (GtkWidget*) _tmp275_, FALSE, FALSE, (guint) 0);
#line 347 "/run/build/planner/src/Views/Project.vala"
	_tmp276_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 347 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp276_);
#line 347 "/run/build/planner/src/Views/Project.vala"
	b_box = _tmp276_;
#line 348 "/run/build/planner/src/Views/Project.vala"
	_tmp277_ = b_box;
#line 348 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp277_, "expand", TRUE, NULL);
#line 349 "/run/build/planner/src/Views/Project.vala"
	_tmp278_ = b_box;
#line 349 "/run/build/planner/src/Views/Project.vala"
	_tmp279_ = self->priv->tasks_list;
#line 349 "/run/build/planner/src/Views/Project.vala"
	gtk_box_pack_start (_tmp278_, (GtkWidget*) _tmp279_, FALSE, TRUE, (guint) 0);
#line 351 "/run/build/planner/src/Views/Project.vala"
	_tmp280_ = (GtkFlowBox*) gtk_flow_box_new ();
#line 351 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp280_);
#line 351 "/run/build/planner/src/Views/Project.vala"
	notes_flowbox = _tmp280_;
#line 352 "/run/build/planner/src/Views/Project.vala"
	_tmp281_ = notes_flowbox;
#line 352 "/run/build/planner/src/Views/Project.vala"
	gtk_flow_box_set_row_spacing (_tmp281_, (guint) 12);
#line 353 "/run/build/planner/src/Views/Project.vala"
	_tmp282_ = notes_flowbox;
#line 353 "/run/build/planner/src/Views/Project.vala"
	gtk_flow_box_set_column_spacing (_tmp282_, (guint) 12);
#line 354 "/run/build/planner/src/Views/Project.vala"
	_tmp283_ = notes_flowbox;
#line 354 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp283_, "margin", 6, NULL);
#line 355 "/run/build/planner/src/Views/Project.vala"
	_tmp284_ = notes_flowbox;
#line 355 "/run/build/planner/src/Views/Project.vala"
	gtk_flow_box_set_selection_mode (_tmp284_, GTK_SELECTION_NONE);
#line 356 "/run/build/planner/src/Views/Project.vala"
	_tmp285_ = notes_flowbox;
#line 356 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp285_, "expand", TRUE, NULL);
#line 358 "/run/build/planner/src/Views/Project.vala"
	_tmp286_ = (GtkStack*) gtk_stack_new ();
#line 358 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp286_);
#line 358 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->main_stack);
#line 358 "/run/build/planner/src/Views/Project.vala"
	self->priv->main_stack = _tmp286_;
#line 359 "/run/build/planner/src/Views/Project.vala"
	_tmp287_ = self->priv->main_stack;
#line 359 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp287_, "expand", TRUE, NULL);
#line 360 "/run/build/planner/src/Views/Project.vala"
	_tmp288_ = self->priv->main_stack;
#line 360 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_margin_start ((GtkWidget*) _tmp288_, 12);
#line 361 "/run/build/planner/src/Views/Project.vala"
	_tmp289_ = self->priv->main_stack;
#line 361 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_set_margin_bottom ((GtkWidget*) _tmp289_, 9);
#line 362 "/run/build/planner/src/Views/Project.vala"
	_tmp290_ = self->priv->main_stack;
#line 362 "/run/build/planner/src/Views/Project.vala"
	gtk_stack_set_transition_duration (_tmp290_, (guint) 350);
#line 363 "/run/build/planner/src/Views/Project.vala"
	_tmp291_ = self->priv->main_stack;
#line 363 "/run/build/planner/src/Views/Project.vala"
	gtk_stack_set_transition_type (_tmp291_, GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT);
#line 365 "/run/build/planner/src/Views/Project.vala"
	_tmp292_ = self->priv->main_stack;
#line 365 "/run/build/planner/src/Views/Project.vala"
	_tmp293_ = b_box;
#line 365 "/run/build/planner/src/Views/Project.vala"
	gtk_stack_add_named (_tmp292_, (GtkWidget*) _tmp293_, "main");
#line 366 "/run/build/planner/src/Views/Project.vala"
	_tmp294_ = self->priv->main_stack;
#line 366 "/run/build/planner/src/Views/Project.vala"
	_tmp295_ = self->priv->alert_view;
#line 366 "/run/build/planner/src/Views/Project.vala"
	gtk_stack_add_named (_tmp294_, (GtkWidget*) _tmp295_, "alert");
#line 367 "/run/build/planner/src/Views/Project.vala"
	_tmp296_ = self->priv->main_stack;
#line 367 "/run/build/planner/src/Views/Project.vala"
	_tmp297_ = notes_flowbox;
#line 367 "/run/build/planner/src/Views/Project.vala"
	gtk_stack_add_named (_tmp296_, (GtkWidget*) _tmp297_, "notes");
#line 369 "/run/build/planner/src/Views/Project.vala"
	_tmp298_ = self->priv->main_stack;
#line 369 "/run/build/planner/src/Views/Project.vala"
	gtk_stack_set_visible_child_name (_tmp298_, "main");
#line 371 "/run/build/planner/src/Views/Project.vala"
	_tmp299_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 371 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp299_);
#line 371 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->box);
#line 371 "/run/build/planner/src/Views/Project.vala"
	self->priv->box = _tmp299_;
#line 372 "/run/build/planner/src/Views/Project.vala"
	_tmp300_ = self->priv->box;
#line 372 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp300_, "expand", TRUE, NULL);
#line 373 "/run/build/planner/src/Views/Project.vala"
	_tmp301_ = self->priv->box;
#line 373 "/run/build/planner/src/Views/Project.vala"
	_tmp302_ = t_box;
#line 373 "/run/build/planner/src/Views/Project.vala"
	gtk_box_pack_start (_tmp301_, (GtkWidget*) _tmp302_, FALSE, TRUE, (guint) 0);
#line 374 "/run/build/planner/src/Views/Project.vala"
	_tmp303_ = self->priv->box;
#line 374 "/run/build/planner/src/Views/Project.vala"
	_tmp304_ = self->priv->main_stack;
#line 374 "/run/build/planner/src/Views/Project.vala"
	gtk_box_pack_start (_tmp303_, (GtkWidget*) _tmp304_, FALSE, TRUE, (guint) 0);
#line 376 "/run/build/planner/src/Views/Project.vala"
	_tmp305_ = (GtkScrolledWindow*) gtk_scrolled_window_new (NULL, NULL);
#line 376 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp305_);
#line 376 "/run/build/planner/src/Views/Project.vala"
	scrolled = _tmp305_;
#line 377 "/run/build/planner/src/Views/Project.vala"
	_tmp306_ = scrolled;
#line 377 "/run/build/planner/src/Views/Project.vala"
	_tmp307_ = self->priv->box;
#line 377 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp306_, (GtkWidget*) _tmp307_);
#line 379 "/run/build/planner/src/Views/Project.vala"
	_tmp308_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_VERTICAL, 0);
#line 379 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp308_);
#line 379 "/run/build/planner/src/Views/Project.vala"
	main_box = _tmp308_;
#line 380 "/run/build/planner/src/Views/Project.vala"
	_tmp309_ = main_box;
#line 380 "/run/build/planner/src/Views/Project.vala"
	g_object_set ((GtkWidget*) _tmp309_, "expand", TRUE, NULL);
#line 381 "/run/build/planner/src/Views/Project.vala"
	_tmp310_ = main_box;
#line 381 "/run/build/planner/src/Views/Project.vala"
	_tmp311_ = scrolled;
#line 381 "/run/build/planner/src/Views/Project.vala"
	gtk_box_pack_start (_tmp310_, (GtkWidget*) _tmp311_, TRUE, TRUE, (guint) 0);
#line 383 "/run/build/planner/src/Views/Project.vala"
	_tmp312_ = (GtkEventBox*) gtk_event_box_new ();
#line 383 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp312_);
#line 383 "/run/build/planner/src/Views/Project.vala"
	eventbox = _tmp312_;
#line 384 "/run/build/planner/src/Views/Project.vala"
	_tmp313_ = eventbox;
#line 384 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_add_events ((GtkWidget*) _tmp313_, (gint) (GDK_ENTER_NOTIFY_MASK | GDK_LEAVE_NOTIFY_MASK));
#line 385 "/run/build/planner/src/Views/Project.vala"
	_tmp314_ = eventbox;
#line 385 "/run/build/planner/src/Views/Project.vala"
	_tmp315_ = main_box;
#line 385 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp314_, (GtkWidget*) _tmp315_);
#line 387 "/run/build/planner/src/Views/Project.vala"
	_tmp316_ = (GtkOverlay*) gtk_overlay_new ();
#line 387 "/run/build/planner/src/Views/Project.vala"
	g_object_ref_sink (_tmp316_);
#line 387 "/run/build/planner/src/Views/Project.vala"
	main_overlay = _tmp316_;
#line 388 "/run/build/planner/src/Views/Project.vala"
	_tmp317_ = main_overlay;
#line 388 "/run/build/planner/src/Views/Project.vala"
	_tmp318_ = self->priv->add_task_revealer;
#line 388 "/run/build/planner/src/Views/Project.vala"
	gtk_overlay_add_overlay (_tmp317_, (GtkWidget*) _tmp318_);
#line 389 "/run/build/planner/src/Views/Project.vala"
	_tmp319_ = main_overlay;
#line 389 "/run/build/planner/src/Views/Project.vala"
	_tmp320_ = self->priv->task_new_revealer;
#line 389 "/run/build/planner/src/Views/Project.vala"
	gtk_overlay_add_overlay (_tmp319_, (GtkWidget*) _tmp320_);
#line 390 "/run/build/planner/src/Views/Project.vala"
	_tmp321_ = main_overlay;
#line 390 "/run/build/planner/src/Views/Project.vala"
	_tmp322_ = stacks_buttons_box;
#line 390 "/run/build/planner/src/Views/Project.vala"
	gtk_overlay_add_overlay (_tmp321_, (GtkWidget*) _tmp322_);
#line 391 "/run/build/planner/src/Views/Project.vala"
	_tmp323_ = main_overlay;
#line 391 "/run/build/planner/src/Views/Project.vala"
	_tmp324_ = eventbox;
#line 391 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) _tmp323_, (GtkWidget*) _tmp324_);
#line 393 "/run/build/planner/src/Views/Project.vala"
	_tmp325_ = main_overlay;
#line 393 "/run/build/planner/src/Views/Project.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp325_);
#line 394 "/run/build/planner/src/Views/Project.vala"
	views_project_update_tasks_list (self);
#line 396 "/run/build/planner/src/Views/Project.vala"
	_tmp326_ = application_utils;
#line 396 "/run/build/planner/src/Views/Project.vala"
	_tmp327_ = self->priv->tasks_list;
#line 396 "/run/build/planner/src/Views/Project.vala"
	if (utils_is_listbox_empty (_tmp326_, _tmp327_)) {
#line 397 "/run/build/planner/src/Views/Project.vala"
		g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 200, __views_project____lambda409__gsource_func, g_object_ref (self), g_object_unref);
#line 5811 "Project.c"
	} else {
#line 402 "/run/build/planner/src/Views/Project.vala"
		g_timeout_add_full (G_PRIORITY_DEFAULT, (guint) 200, __views_project____lambda410__gsource_func, g_object_ref (self), g_object_unref);
#line 5815 "Project.c"
	}
#line 408 "/run/build/planner/src/Views/Project.vala"
	gtk_widget_show_all ((GtkWidget*) self);
#line 410 "/run/build/planner/src/Views/Project.vala"
	_tmp328_ = self->priv->tasks_list;
#line 410 "/run/build/planner/src/Views/Project.vala"
	gtk_list_box_set_filter_func (_tmp328_, __views_project___lambda411__gtk_list_box_filter_func, g_object_ref (self), g_object_unref);
#line 415 "/run/build/planner/src/Views/Project.vala"
	_tmp329_ = self->priv->tasks_list;
#line 415 "/run/build/planner/src/Views/Project.vala"
	gtk_list_box_set_sort_func (_tmp329_, __views_project___lambda412__gtk_list_box_sort_func, g_object_ref (self), g_object_unref);
#line 425 "/run/build/planner/src/Views/Project.vala"
	_tmp330_ = _data33_->notes_button;
#line 425 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_data (_tmp330_, "toggled", (GCallback) __views_project___lambda413__gtk_toggle_button_toggled, block33_data_ref (_data33_), (GClosureNotify) block33_data_unref, 0);
#line 433 "/run/build/planner/src/Views/Project.vala"
	_tmp331_ = _data33_->show_completed_button;
#line 433 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_data (_tmp331_, "toggled", (GCallback) __views_project___lambda414__gtk_toggle_button_toggled, block33_data_ref (_data33_), (GClosureNotify) block33_data_unref, 0);
#line 474 "/run/build/planner/src/Views/Project.vala"
	_tmp332_ = self->priv->show_hide_all_button;
#line 474 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_data (_tmp332_, "toggled", (GCallback) __views_project___lambda417__gtk_toggle_button_toggled, block33_data_ref (_data33_), (GClosureNotify) block33_data_unref, 0);
#line 494 "/run/build/planner/src/Views/Project.vala"
	_tmp333_ = self->priv->name_entry;
#line 494 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object ((GtkWidget*) _tmp333_, "focus-out-event", (GCallback) __views_project___lambda418__gtk_widget_focus_out_event, self, 0);
#line 499 "/run/build/planner/src/Views/Project.vala"
	_tmp334_ = self->priv->name_entry;
#line 499 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object (_tmp334_, "activate", (GCallback) __views_project___lambda419__gtk_entry_activate, self, 0);
#line 503 "/run/build/planner/src/Views/Project.vala"
	_tmp335_ = self->priv->name_entry;
#line 503 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object ((GtkWidget*) _tmp335_, "key-release-event", (GCallback) __views_project___lambda420__gtk_widget_key_release_event, self, 0);
#line 511 "/run/build/planner/src/Views/Project.vala"
	_tmp336_ = color_button;
#line 511 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object (_tmp336_, "clicked", (GCallback) __views_project___lambda421__gtk_button_clicked, self, 0);
#line 522 "/run/build/planner/src/Views/Project.vala"
	_tmp337_ = gdk_display_get_default ();
#line 522 "/run/build/planner/src/Views/Project.vala"
	_tmp338_ = _g_object_ref0 (_tmp337_);
#line 522 "/run/build/planner/src/Views/Project.vala"
	display = _tmp338_;
#line 523 "/run/build/planner/src/Views/Project.vala"
	_tmp339_ = display;
#line 523 "/run/build/planner/src/Views/Project.vala"
	_tmp340_ = gtk_clipboard_get_for_display (_tmp339_, GDK_SELECTION_CLIPBOARD);
#line 523 "/run/build/planner/src/Views/Project.vala"
	_tmp341_ = _g_object_ref0 (_tmp340_);
#line 523 "/run/build/planner/src/Views/Project.vala"
	_data33_->clipboard = _tmp341_;
#line 525 "/run/build/planner/src/Views/Project.vala"
	_tmp342_ = paste_button;
#line 525 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_data (_tmp342_, "clicked", (GCallback) __views_project___lambda422__gtk_button_clicked, block33_data_ref (_data33_), (GClosureNotify) block33_data_unref, 0);
#line 555 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object ((GtkWidget*) self, "event", (GCallback) __views_project___lambda423__gtk_widget_event, self, 0);
#line 586 "/run/build/planner/src/Views/Project.vala"
	_tmp343_ = self->priv->note_view;
#line 586 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_data ((GtkWidget*) _tmp343_, "focus-out-event", (GCallback) __views_project___lambda424__gtk_widget_focus_out_event, block33_data_ref (_data33_), (GClosureNotify) block33_data_unref, 0);
#line 598 "/run/build/planner/src/Views/Project.vala"
	_tmp344_ = self->priv->note_view;
#line 598 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_data ((GtkWidget*) _tmp344_, "focus-in-event", (GCallback) __views_project___lambda425__gtk_widget_focus_in_event, block33_data_ref (_data33_), (GClosureNotify) block33_data_unref, 0);
#line 605 "/run/build/planner/src/Views/Project.vala"
	_tmp345_ = self->priv->add_task_button;
#line 605 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object (_tmp345_, "clicked", (GCallback) __views_project___lambda426__gtk_button_clicked, self, 0);
#line 609 "/run/build/planner/src/Views/Project.vala"
	_tmp346_ = self->priv->task_new_revealer;
#line 609 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object (_tmp346_, "on-signal-close", (GCallback) __views_project___lambda427__widgets_task_new_on_signal_close, self, 0);
#line 613 "/run/build/planner/src/Views/Project.vala"
	_tmp347_ = self->priv->tasks_list;
#line 613 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object ((GtkContainer*) _tmp347_, "remove", (GCallback) __views_project___lambda428__gtk_container_remove, self, 0);
#line 617 "/run/build/planner/src/Views/Project.vala"
	_tmp348_ = labels_button;
#line 617 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object (_tmp348_, "clicked", (GCallback) __views_project___lambda429__gtk_button_clicked, self, 0);
#line 622 "/run/build/planner/src/Views/Project.vala"
	_tmp349_ = self->priv->labels_popover;
#line 622 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_data (_tmp349_, "on-selected-label", (GCallback) __views_project___lambda430__widgets_popovers_labels_popover_on_selected_label, block33_data_ref (_data33_), (GClosureNotify) block33_data_unref, 0);
#line 658 "/run/build/planner/src/Views/Project.vala"
	_tmp350_ = self->priv->labels_flowbox;
#line 658 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_data ((GtkContainer*) _tmp350_, "remove", (GCallback) __views_project___lambda432__gtk_container_remove, block33_data_ref (_data33_), (GClosureNotify) block33_data_unref, 0);
#line 692 "/run/build/planner/src/Views/Project.vala"
	_tmp351_ = application_database;
#line 692 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object (_tmp351_, "update-project-signal", (GCallback) __views_project___lambda435__services_database_update_project_signal, self, 0);
#line 698 "/run/build/planner/src/Views/Project.vala"
	_tmp352_ = application_database;
#line 698 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object (_tmp352_, "update-task-signal", (GCallback) __views_project___lambda436__services_database_update_task_signal, self, 0);
#line 712 "/run/build/planner/src/Views/Project.vala"
	_tmp353_ = application_database;
#line 712 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object (_tmp353_, "add-task-signal", (GCallback) __views_project___lambda437__services_database_add_task_signal, self, 0);
#line 716 "/run/build/planner/src/Views/Project.vala"
	_tmp354_ = application_database;
#line 716 "/run/build/planner/src/Views/Project.vala"
	g_signal_connect_object (_tmp354_, "on-signal-remove-task", (GCallback) __views_project___lambda438__services_database_on_signal_remove_task, self, 0);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (display);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (main_overlay);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (eventbox);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (main_box);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (scrolled);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (notes_flowbox);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (b_box);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (t_box);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (stacks_buttons_box);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (top_box);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (action_grid);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (share_button);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (search_button);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (labels_button);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (paste_button);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (deadline_project_revealer);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (deadline_grid);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (deadline_project_icon);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (color_button);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (label_color);
#line 59 "/run/build/planner/src/Views/Project.vala"
	block33_data_unref (_data33_);
#line 59 "/run/build/planner/src/Views/Project.vala"
	_data33_ = NULL;
#line 59 "/run/build/planner/src/Views/Project.vala"
	return obj;
#line 5969 "Project.c"
}


static void
views_project_class_init (ViewsProjectClass * klass)
{
#line 22 "/run/build/planner/src/Views/Project.vala"
	views_project_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Views/Project.vala"
	g_type_class_add_private (klass, sizeof (ViewsProjectPrivate));
#line 22 "/run/build/planner/src/Views/Project.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_views_project_get_property;
#line 22 "/run/build/planner/src/Views/Project.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_views_project_set_property;
#line 22 "/run/build/planner/src/Views/Project.vala"
	G_OBJECT_CLASS (klass)->constructor = views_project_constructor;
#line 22 "/run/build/planner/src/Views/Project.vala"
	G_OBJECT_CLASS (klass)->finalize = views_project_finalize;
#line 22 "/run/build/planner/src/Views/Project.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_PROJECT_PARENT_WINDOW_PROPERTY, views_project_properties[VIEWS_PROJECT_PARENT_WINDOW_PROPERTY] = g_param_spec_object ("parent-window", "parent-window", "parent-window", TYPE_MAIN_WINDOW, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "/run/build/planner/src/Views/Project.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), VIEWS_PROJECT_PROJECT_PROPERTY, views_project_properties[VIEWS_PROJECT_PROJECT_PROPERTY] = objects_param_spec_project ("project", "project", "project", OBJECTS_TYPE_PROJECT, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 5992 "Project.c"
}


static void
views_project_instance_init (ViewsProject * self)
{
#line 22 "/run/build/planner/src/Views/Project.vala"
	self->priv = VIEWS_PROJECT_GET_PRIVATE (self);
#line 6001 "Project.c"
}


static void
views_project_finalize (GObject * obj)
{
	ViewsProject * self;
#line 22 "/run/build/planner/src/Views/Project.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, VIEWS_TYPE_PROJECT, ViewsProject);
#line 24 "/run/build/planner/src/Views/Project.vala"
	_objects_project_unref0 (self->priv->_project);
#line 26 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->name_entry);
#line 27 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->deadline_project_button);
#line 28 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->deadline_project_label);
#line 29 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->note_view);
#line 31 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->task_new_revealer);
#line 32 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->tasks_list);
#line 33 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->add_task_button);
#line 35 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->add_task_revealer);
#line 36 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->show_completed_revealer);
#line 37 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->notes_revealer);
#line 39 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->labels_flowbox);
#line 41 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->show_hide_all_button);
#line 43 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->box);
#line 45 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->alert_view);
#line 47 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->labels_popover);
#line 49 "/run/build/planner/src/Views/Project.vala"
	_g_object_unref0 (self->priv->main_stack);
#line 22 "/run/build/planner/src/Views/Project.vala"
	G_OBJECT_CLASS (views_project_parent_class)->finalize (obj);
#line 6047 "Project.c"
}


GType
views_project_get_type (void)
{
	static volatile gsize views_project_type_id__volatile = 0;
	if (g_once_init_enter (&views_project_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ViewsProjectClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) views_project_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ViewsProject), 0, (GInstanceInitFunc) views_project_instance_init, NULL };
		GType views_project_type_id;
		views_project_type_id = g_type_register_static (gtk_event_box_get_type (), "ViewsProject", &g_define_type_info, 0);
		g_once_init_leave (&views_project_type_id__volatile, views_project_type_id);
	}
	return views_project_type_id__volatile;
}


static void
_vala_views_project_get_property (GObject * object,
                                  guint property_id,
                                  GValue * value,
                                  GParamSpec * pspec)
{
	ViewsProject * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_PROJECT, ViewsProject);
#line 22 "/run/build/planner/src/Views/Project.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Views/Project.vala"
		case VIEWS_PROJECT_PARENT_WINDOW_PROPERTY:
#line 22 "/run/build/planner/src/Views/Project.vala"
		g_value_set_object (value, views_project_get_parent_window (self));
#line 22 "/run/build/planner/src/Views/Project.vala"
		break;
#line 22 "/run/build/planner/src/Views/Project.vala"
		case VIEWS_PROJECT_PROJECT_PROPERTY:
#line 22 "/run/build/planner/src/Views/Project.vala"
		objects_value_set_project (value, views_project_get_project (self));
#line 22 "/run/build/planner/src/Views/Project.vala"
		break;
#line 6087 "Project.c"
		default:
#line 22 "/run/build/planner/src/Views/Project.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Views/Project.vala"
		break;
#line 6093 "Project.c"
	}
}


static void
_vala_views_project_set_property (GObject * object,
                                  guint property_id,
                                  const GValue * value,
                                  GParamSpec * pspec)
{
	ViewsProject * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, VIEWS_TYPE_PROJECT, ViewsProject);
#line 22 "/run/build/planner/src/Views/Project.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Views/Project.vala"
		case VIEWS_PROJECT_PARENT_WINDOW_PROPERTY:
#line 22 "/run/build/planner/src/Views/Project.vala"
		views_project_set_parent_window (self, g_value_get_object (value));
#line 22 "/run/build/planner/src/Views/Project.vala"
		break;
#line 22 "/run/build/planner/src/Views/Project.vala"
		case VIEWS_PROJECT_PROJECT_PROPERTY:
#line 22 "/run/build/planner/src/Views/Project.vala"
		views_project_set_project (self, objects_value_get_project (value));
#line 22 "/run/build/planner/src/Views/Project.vala"
		break;
#line 6120 "Project.c"
		default:
#line 22 "/run/build/planner/src/Views/Project.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Views/Project.vala"
		break;
#line 6126 "Project.c"
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



