/* ItemRow.c generated by valac 0.40.11, the Vala compiler
 * generated from ItemRow.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>


#define WIDGETS_TYPE_ITEM_ROW (widgets_item_row_get_type ())
#define WIDGETS_ITEM_ROW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), WIDGETS_TYPE_ITEM_ROW, WidgetsItemRow))
#define WIDGETS_ITEM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), WIDGETS_TYPE_ITEM_ROW, WidgetsItemRowClass))
#define WIDGETS_IS_ITEM_ROW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), WIDGETS_TYPE_ITEM_ROW))
#define WIDGETS_IS_ITEM_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), WIDGETS_TYPE_ITEM_ROW))
#define WIDGETS_ITEM_ROW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), WIDGETS_TYPE_ITEM_ROW, WidgetsItemRowClass))

typedef struct _WidgetsItemRow WidgetsItemRow;
typedef struct _WidgetsItemRowClass WidgetsItemRowClass;
typedef struct _WidgetsItemRowPrivate WidgetsItemRowPrivate;
enum  {
	WIDGETS_ITEM_ROW_0_PROPERTY,
	WIDGETS_ITEM_ROW_ICON_NAME_PROPERTY,
	WIDGETS_ITEM_ROW_ITEM_NAME_PROPERTY,
	WIDGETS_ITEM_ROW_REVEAL_CHILD_PROPERTY,
	WIDGETS_ITEM_ROW_PRIMARY_TEXT_PROPERTY,
	WIDGETS_ITEM_ROW_SECONDARY_TEXT_PROPERTY,
	WIDGETS_ITEM_ROW_REVEALER_PRIMARY_LABEL_PROPERTY,
	WIDGETS_ITEM_ROW_REVEALER_SECONDARY_LABEL_PROPERTY,
	WIDGETS_ITEM_ROW_NUM_PROPERTIES
};
static GParamSpec* widgets_item_row_properties[WIDGETS_ITEM_ROW_NUM_PROPERTIES];
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

struct _WidgetsItemRow {
	GtkListBoxRow parent_instance;
	WidgetsItemRowPrivate * priv;
};

struct _WidgetsItemRowClass {
	GtkListBoxRowClass parent_class;
};

struct _WidgetsItemRowPrivate {
	gchar* _icon_name;
	gchar* _item_name;
	GtkLabel* primary_label;
	GtkLabel* secondary_label;
	GtkRevealer* secondary_revealer;
	GtkRevealer* primary_revealer;
	GtkRevealer* main_revealer;
};


static gpointer widgets_item_row_parent_class = NULL;

GType widgets_item_row_get_type (void) G_GNUC_CONST;
#define WIDGETS_ITEM_ROW_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), WIDGETS_TYPE_ITEM_ROW, WidgetsItemRowPrivate))
WidgetsItemRow* widgets_item_row_new (const gchar* _name,
                                      const gchar* _icon);
WidgetsItemRow* widgets_item_row_construct (GType object_type,
                                            const gchar* _name,
                                            const gchar* _icon);
const gchar* widgets_item_row_get_icon_name (WidgetsItemRow* self);
static void widgets_item_row_set_icon_name (WidgetsItemRow* self,
                                     const gchar* value);
const gchar* widgets_item_row_get_item_name (WidgetsItemRow* self);
static void widgets_item_row_set_item_name (WidgetsItemRow* self,
                                     const gchar* value);
gboolean widgets_item_row_get_reveal_child (WidgetsItemRow* self);
void widgets_item_row_set_reveal_child (WidgetsItemRow* self,
                                        gboolean value);
const gchar* widgets_item_row_get_primary_text (WidgetsItemRow* self);
void widgets_item_row_set_primary_text (WidgetsItemRow* self,
                                        const gchar* value);
const gchar* widgets_item_row_get_secondary_text (WidgetsItemRow* self);
void widgets_item_row_set_secondary_text (WidgetsItemRow* self,
                                          const gchar* value);
void widgets_item_row_set_revealer_primary_label (WidgetsItemRow* self,
                                                  gboolean value);
void widgets_item_row_set_revealer_secondary_label (WidgetsItemRow* self,
                                                    gboolean value);
static GObject * widgets_item_row_constructor (GType type,
                                        guint n_construct_properties,
                                        GObjectConstructParam * construct_properties);
static void widgets_item_row_finalize (GObject * obj);
static void _vala_widgets_item_row_get_property (GObject * object,
                                          guint property_id,
                                          GValue * value,
                                          GParamSpec * pspec);
static void _vala_widgets_item_row_set_property (GObject * object,
                                          guint property_id,
                                          const GValue * value,
                                          GParamSpec * pspec);


WidgetsItemRow*
widgets_item_row_construct (GType object_type,
                            const gchar* _name,
                            const gchar* _icon)
{
	WidgetsItemRow * self = NULL;
#line 81 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_return_val_if_fail (_name != NULL, NULL);
#line 81 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_return_val_if_fail (_icon != NULL, NULL);
#line 82 "/run/build/planner/src/Widgets/ItemRow.vala"
	self = (WidgetsItemRow*) g_object_new (object_type, "icon-name", _icon, "item-name", _name, "margin-left", 6, "margin-top", 6, "margin-right", 6, NULL);
#line 81 "/run/build/planner/src/Widgets/ItemRow.vala"
	return self;
#line 136 "ItemRow.c"
}


WidgetsItemRow*
widgets_item_row_new (const gchar* _name,
                      const gchar* _icon)
{
#line 81 "/run/build/planner/src/Widgets/ItemRow.vala"
	return widgets_item_row_construct (WIDGETS_TYPE_ITEM_ROW, _name, _icon);
#line 146 "ItemRow.c"
}


const gchar*
widgets_item_row_get_icon_name (WidgetsItemRow* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 23 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 23 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp0_ = self->priv->_icon_name;
#line 23 "/run/build/planner/src/Widgets/ItemRow.vala"
	result = _tmp0_;
#line 23 "/run/build/planner/src/Widgets/ItemRow.vala"
	return result;
#line 163 "ItemRow.c"
}


static void
widgets_item_row_set_icon_name (WidgetsItemRow* self,
                                const gchar* value)
{
#line 23 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_return_if_fail (self != NULL);
#line 23 "/run/build/planner/src/Widgets/ItemRow.vala"
	if (g_strcmp0 (value, widgets_item_row_get_icon_name (self)) != 0) {
#line 175 "ItemRow.c"
		gchar* _tmp0_;
#line 23 "/run/build/planner/src/Widgets/ItemRow.vala"
		_tmp0_ = g_strdup (value);
#line 23 "/run/build/planner/src/Widgets/ItemRow.vala"
		_g_free0 (self->priv->_icon_name);
#line 23 "/run/build/planner/src/Widgets/ItemRow.vala"
		self->priv->_icon_name = _tmp0_;
#line 23 "/run/build/planner/src/Widgets/ItemRow.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_item_row_properties[WIDGETS_ITEM_ROW_ICON_NAME_PROPERTY]);
#line 185 "ItemRow.c"
	}
}


const gchar*
widgets_item_row_get_item_name (WidgetsItemRow* self)
{
	const gchar* result;
	const gchar* _tmp0_;
#line 24 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 24 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp0_ = self->priv->_item_name;
#line 24 "/run/build/planner/src/Widgets/ItemRow.vala"
	result = _tmp0_;
#line 24 "/run/build/planner/src/Widgets/ItemRow.vala"
	return result;
#line 203 "ItemRow.c"
}


static void
widgets_item_row_set_item_name (WidgetsItemRow* self,
                                const gchar* value)
{
#line 24 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_return_if_fail (self != NULL);
#line 24 "/run/build/planner/src/Widgets/ItemRow.vala"
	if (g_strcmp0 (value, widgets_item_row_get_item_name (self)) != 0) {
#line 215 "ItemRow.c"
		gchar* _tmp0_;
#line 24 "/run/build/planner/src/Widgets/ItemRow.vala"
		_tmp0_ = g_strdup (value);
#line 24 "/run/build/planner/src/Widgets/ItemRow.vala"
		_g_free0 (self->priv->_item_name);
#line 24 "/run/build/planner/src/Widgets/ItemRow.vala"
		self->priv->_item_name = _tmp0_;
#line 24 "/run/build/planner/src/Widgets/ItemRow.vala"
		g_object_notify_by_pspec ((GObject *) self, widgets_item_row_properties[WIDGETS_ITEM_ROW_ITEM_NAME_PROPERTY]);
#line 225 "ItemRow.c"
	}
}


gboolean
widgets_item_row_get_reveal_child (WidgetsItemRow* self)
{
	gboolean result;
	GtkRevealer* _tmp0_;
	gboolean _tmp1_;
	gboolean _tmp2_;
#line 46 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 47 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp0_ = self->priv->main_revealer;
#line 47 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp1_ = gtk_revealer_get_reveal_child (_tmp0_);
#line 47 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp2_ = _tmp1_;
#line 47 "/run/build/planner/src/Widgets/ItemRow.vala"
	result = _tmp2_;
#line 47 "/run/build/planner/src/Widgets/ItemRow.vala"
	return result;
#line 249 "ItemRow.c"
}


void
widgets_item_row_set_reveal_child (WidgetsItemRow* self,
                                   gboolean value)
{
	GtkRevealer* _tmp0_;
#line 35 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_return_if_fail (self != NULL);
#line 36 "/run/build/planner/src/Widgets/ItemRow.vala"
	if (value) {
#line 37 "/run/build/planner/src/Widgets/ItemRow.vala"
		gtk_widget_set_margin_start ((GtkWidget*) self, 6);
#line 38 "/run/build/planner/src/Widgets/ItemRow.vala"
		gtk_widget_set_margin_top ((GtkWidget*) self, 6);
#line 39 "/run/build/planner/src/Widgets/ItemRow.vala"
		gtk_widget_set_margin_end ((GtkWidget*) self, 6);
#line 268 "ItemRow.c"
	} else {
#line 41 "/run/build/planner/src/Widgets/ItemRow.vala"
		g_object_set ((GtkWidget*) self, "margin", 0, NULL);
#line 272 "ItemRow.c"
	}
#line 44 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp0_ = self->priv->main_revealer;
#line 44 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_revealer_set_reveal_child (_tmp0_, value);
#line 35 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_notify_by_pspec ((GObject *) self, widgets_item_row_properties[WIDGETS_ITEM_ROW_REVEAL_CHILD_PROPERTY]);
#line 280 "ItemRow.c"
}


const gchar*
widgets_item_row_get_primary_text (WidgetsItemRow* self)
{
	const gchar* result;
	GtkLabel* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 55 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 56 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp0_ = self->priv->primary_label;
#line 56 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp1_ = gtk_label_get_label (_tmp0_);
#line 56 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp2_ = _tmp1_;
#line 56 "/run/build/planner/src/Widgets/ItemRow.vala"
	result = _tmp2_;
#line 56 "/run/build/planner/src/Widgets/ItemRow.vala"
	return result;
#line 303 "ItemRow.c"
}


void
widgets_item_row_set_primary_text (WidgetsItemRow* self,
                                   const gchar* value)
{
	GtkLabel* _tmp0_;
#line 52 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_return_if_fail (self != NULL);
#line 53 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp0_ = self->priv->primary_label;
#line 53 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_label_set_label (_tmp0_, value);
#line 52 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_notify_by_pspec ((GObject *) self, widgets_item_row_properties[WIDGETS_ITEM_ROW_PRIMARY_TEXT_PROPERTY]);
#line 320 "ItemRow.c"
}


const gchar*
widgets_item_row_get_secondary_text (WidgetsItemRow* self)
{
	const gchar* result;
	GtkLabel* _tmp0_;
	const gchar* _tmp1_;
	const gchar* _tmp2_;
#line 64 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 65 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp0_ = self->priv->secondary_label;
#line 65 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp1_ = gtk_label_get_label (_tmp0_);
#line 65 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp2_ = _tmp1_;
#line 65 "/run/build/planner/src/Widgets/ItemRow.vala"
	result = _tmp2_;
#line 65 "/run/build/planner/src/Widgets/ItemRow.vala"
	return result;
#line 343 "ItemRow.c"
}


void
widgets_item_row_set_secondary_text (WidgetsItemRow* self,
                                     const gchar* value)
{
	GtkLabel* _tmp0_;
#line 61 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_return_if_fail (self != NULL);
#line 62 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp0_ = self->priv->secondary_label;
#line 62 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_label_set_label (_tmp0_, value);
#line 61 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_notify_by_pspec ((GObject *) self, widgets_item_row_properties[WIDGETS_ITEM_ROW_SECONDARY_TEXT_PROPERTY]);
#line 360 "ItemRow.c"
}


void
widgets_item_row_set_revealer_primary_label (WidgetsItemRow* self,
                                             gboolean value)
{
	GtkRevealer* _tmp0_;
#line 70 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_return_if_fail (self != NULL);
#line 71 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp0_ = self->priv->primary_revealer;
#line 71 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_revealer_set_reveal_child (_tmp0_, value);
#line 70 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_notify_by_pspec ((GObject *) self, widgets_item_row_properties[WIDGETS_ITEM_ROW_REVEALER_PRIMARY_LABEL_PROPERTY]);
#line 377 "ItemRow.c"
}


void
widgets_item_row_set_revealer_secondary_label (WidgetsItemRow* self,
                                               gboolean value)
{
	GtkRevealer* _tmp0_;
#line 76 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_return_if_fail (self != NULL);
#line 77 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp0_ = self->priv->secondary_revealer;
#line 77 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_revealer_set_reveal_child (_tmp0_, value);
#line 76 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_notify_by_pspec ((GObject *) self, widgets_item_row_properties[WIDGETS_ITEM_ROW_REVEALER_SECONDARY_LABEL_PROPERTY]);
#line 394 "ItemRow.c"
}


static GObject *
widgets_item_row_constructor (GType type,
                              guint n_construct_properties,
                              GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	WidgetsItemRow * self;
	GtkStyleContext* _tmp0_;
	GtkImage* icon = NULL;
	const gchar* _tmp1_;
	GtkImage* _tmp2_;
	GtkLabel* title_name = NULL;
	const gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* _tmp5_;
	GtkLabel* _tmp6_;
	GtkLabel* _tmp7_;
	GtkLabel* _tmp8_;
	GtkLabel* _tmp9_;
	GtkLabel* _tmp10_;
	GtkLabel* _tmp11_;
	GtkRevealer* _tmp12_;
	GtkRevealer* _tmp13_;
	GtkRevealer* _tmp14_;
	GtkRevealer* _tmp15_;
	GtkRevealer* _tmp16_;
	GtkLabel* _tmp17_;
	GtkRevealer* _tmp18_;
	GtkLabel* _tmp19_;
	GtkLabel* _tmp20_;
	GtkStyleContext* _tmp21_;
	GtkLabel* _tmp22_;
	GtkRevealer* _tmp23_;
	GtkRevealer* _tmp24_;
	GtkRevealer* _tmp25_;
	GtkRevealer* _tmp26_;
	GtkRevealer* _tmp27_;
	GtkLabel* _tmp28_;
	GtkRevealer* _tmp29_;
	GtkBox* main_box = NULL;
	GtkBox* _tmp30_;
	GtkBox* _tmp31_;
	GtkBox* _tmp32_;
	GtkImage* _tmp33_;
	GtkBox* _tmp34_;
	GtkLabel* _tmp35_;
	GtkBox* _tmp36_;
	GtkRevealer* _tmp37_;
	GtkBox* _tmp38_;
	GtkRevealer* _tmp39_;
	GtkRevealer* _tmp40_;
	GtkRevealer* _tmp41_;
	GtkRevealer* _tmp42_;
	GtkBox* _tmp43_;
	GtkRevealer* _tmp44_;
	GtkRevealer* _tmp45_;
#line 91 "/run/build/planner/src/Widgets/ItemRow.vala"
	parent_class = G_OBJECT_CLASS (widgets_item_row_parent_class);
#line 91 "/run/build/planner/src/Widgets/ItemRow.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 91 "/run/build/planner/src/Widgets/ItemRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_ITEM_ROW, WidgetsItemRow);
#line 92 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp0_ = gtk_widget_get_style_context ((GtkWidget*) self);
#line 92 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_style_context_add_class (_tmp0_, "item-row");
#line 94 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp1_ = self->priv->_icon_name;
#line 94 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp2_ = (GtkImage*) gtk_image_new_from_icon_name (_tmp1_, (GtkIconSize) GTK_ICON_SIZE_LARGE_TOOLBAR);
#line 94 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_ref_sink (_tmp2_);
#line 94 "/run/build/planner/src/Widgets/ItemRow.vala"
	icon = _tmp2_;
#line 96 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp3_ = self->priv->_item_name;
#line 96 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp4_ = g_strdup_printf ("<b>%s</b>", _tmp3_);
#line 96 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp5_ = _tmp4_;
#line 96 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp6_ = (GtkLabel*) gtk_label_new (_ (_tmp5_));
#line 96 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_ref_sink (_tmp6_);
#line 96 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp7_ = _tmp6_;
#line 96 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_free0 (_tmp5_);
#line 96 "/run/build/planner/src/Widgets/ItemRow.vala"
	title_name = _tmp7_;
#line 97 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp8_ = title_name;
#line 97 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_label_set_use_markup (_tmp8_, TRUE);
#line 99 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp9_ = (GtkLabel*) gtk_label_new (NULL);
#line 99 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_ref_sink (_tmp9_);
#line 99 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_object_unref0 (self->priv->primary_label);
#line 99 "/run/build/planner/src/Widgets/ItemRow.vala"
	self->priv->primary_label = _tmp9_;
#line 100 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp10_ = self->priv->primary_label;
#line 100 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp10_, GTK_ALIGN_CENTER);
#line 101 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp11_ = self->priv->primary_label;
#line 101 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_widget_set_margin_end ((GtkWidget*) _tmp11_, 12);
#line 103 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp12_ = (GtkRevealer*) gtk_revealer_new ();
#line 103 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_ref_sink (_tmp12_);
#line 103 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_object_unref0 (self->priv->primary_revealer);
#line 103 "/run/build/planner/src/Widgets/ItemRow.vala"
	self->priv->primary_revealer = _tmp12_;
#line 104 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp13_ = self->priv->primary_revealer;
#line 104 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_revealer_set_transition_type (_tmp13_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT);
#line 105 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp14_ = self->priv->primary_revealer;
#line 105 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp14_, GTK_ALIGN_START);
#line 106 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp15_ = self->priv->primary_revealer;
#line 106 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp15_, GTK_ALIGN_START);
#line 107 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp16_ = self->priv->primary_revealer;
#line 107 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp17_ = self->priv->primary_label;
#line 107 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_container_add ((GtkContainer*) _tmp16_, (GtkWidget*) _tmp17_);
#line 108 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp18_ = self->priv->primary_revealer;
#line 108 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_revealer_set_reveal_child (_tmp18_, FALSE);
#line 110 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp19_ = (GtkLabel*) gtk_label_new (NULL);
#line 110 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_ref_sink (_tmp19_);
#line 110 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_object_unref0 (self->priv->secondary_label);
#line 110 "/run/build/planner/src/Widgets/ItemRow.vala"
	self->priv->secondary_label = _tmp19_;
#line 111 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp20_ = self->priv->secondary_label;
#line 111 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp21_ = gtk_widget_get_style_context ((GtkWidget*) _tmp20_);
#line 111 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_style_context_add_class (_tmp21_, "badge");
#line 112 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp22_ = self->priv->secondary_label;
#line 112 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp22_, GTK_ALIGN_CENTER);
#line 114 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp23_ = (GtkRevealer*) gtk_revealer_new ();
#line 114 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_ref_sink (_tmp23_);
#line 114 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_object_unref0 (self->priv->secondary_revealer);
#line 114 "/run/build/planner/src/Widgets/ItemRow.vala"
	self->priv->secondary_revealer = _tmp23_;
#line 115 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp24_ = self->priv->secondary_revealer;
#line 115 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_revealer_set_transition_type (_tmp24_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT);
#line 116 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp25_ = self->priv->secondary_revealer;
#line 116 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_widget_set_valign ((GtkWidget*) _tmp25_, GTK_ALIGN_START);
#line 117 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp26_ = self->priv->secondary_revealer;
#line 117 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_widget_set_halign ((GtkWidget*) _tmp26_, GTK_ALIGN_START);
#line 118 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp27_ = self->priv->secondary_revealer;
#line 118 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp28_ = self->priv->secondary_label;
#line 118 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_container_add ((GtkContainer*) _tmp27_, (GtkWidget*) _tmp28_);
#line 119 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp29_ = self->priv->secondary_revealer;
#line 119 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_revealer_set_reveal_child (_tmp29_, FALSE);
#line 121 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp30_ = (GtkBox*) gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 0);
#line 121 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_ref_sink (_tmp30_);
#line 121 "/run/build/planner/src/Widgets/ItemRow.vala"
	main_box = _tmp30_;
#line 122 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp31_ = main_box;
#line 122 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_set ((GtkWidget*) _tmp31_, "margin", 6, NULL);
#line 124 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp32_ = main_box;
#line 124 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp33_ = icon;
#line 124 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_box_pack_start (_tmp32_, (GtkWidget*) _tmp33_, FALSE, FALSE, (guint) 0);
#line 125 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp34_ = main_box;
#line 125 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp35_ = title_name;
#line 125 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_box_pack_start (_tmp34_, (GtkWidget*) _tmp35_, FALSE, FALSE, (guint) 12);
#line 126 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp36_ = main_box;
#line 126 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp37_ = self->priv->primary_revealer;
#line 126 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_box_pack_end (_tmp36_, (GtkWidget*) _tmp37_, FALSE, FALSE, (guint) 0);
#line 127 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp38_ = main_box;
#line 127 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp39_ = self->priv->secondary_revealer;
#line 127 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_box_pack_end (_tmp38_, (GtkWidget*) _tmp39_, FALSE, FALSE, (guint) 6);
#line 129 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp40_ = (GtkRevealer*) gtk_revealer_new ();
#line 129 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_ref_sink (_tmp40_);
#line 129 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_object_unref0 (self->priv->main_revealer);
#line 129 "/run/build/planner/src/Widgets/ItemRow.vala"
	self->priv->main_revealer = _tmp40_;
#line 130 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp41_ = self->priv->main_revealer;
#line 130 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_revealer_set_transition_type (_tmp41_, GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP);
#line 131 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp42_ = self->priv->main_revealer;
#line 131 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp43_ = main_box;
#line 131 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_container_add ((GtkContainer*) _tmp42_, (GtkWidget*) _tmp43_);
#line 132 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp44_ = self->priv->main_revealer;
#line 132 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_revealer_set_reveal_child (_tmp44_, TRUE);
#line 134 "/run/build/planner/src/Widgets/ItemRow.vala"
	_tmp45_ = self->priv->main_revealer;
#line 134 "/run/build/planner/src/Widgets/ItemRow.vala"
	gtk_container_add ((GtkContainer*) self, (GtkWidget*) _tmp45_);
#line 91 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_object_unref0 (main_box);
#line 91 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_object_unref0 (title_name);
#line 91 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_object_unref0 (icon);
#line 91 "/run/build/planner/src/Widgets/ItemRow.vala"
	return obj;
#line 655 "ItemRow.c"
}


static void
widgets_item_row_class_init (WidgetsItemRowClass * klass)
{
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	widgets_item_row_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_type_class_add_private (klass, sizeof (WidgetsItemRowPrivate));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_widgets_item_row_get_property;
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_widgets_item_row_set_property;
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	G_OBJECT_CLASS (klass)->constructor = widgets_item_row_constructor;
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	G_OBJECT_CLASS (klass)->finalize = widgets_item_row_finalize;
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_ITEM_ROW_ICON_NAME_PROPERTY, widgets_item_row_properties[WIDGETS_ITEM_ROW_ICON_NAME_PROPERTY] = g_param_spec_string ("icon-name", "icon-name", "icon-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_ITEM_ROW_ITEM_NAME_PROPERTY, widgets_item_row_properties[WIDGETS_ITEM_ROW_ITEM_NAME_PROPERTY] = g_param_spec_string ("item-name", "item-name", "item-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_ITEM_ROW_REVEAL_CHILD_PROPERTY, widgets_item_row_properties[WIDGETS_ITEM_ROW_REVEAL_CHILD_PROPERTY] = g_param_spec_boolean ("reveal-child", "reveal-child", "reveal-child", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_ITEM_ROW_PRIMARY_TEXT_PROPERTY, widgets_item_row_properties[WIDGETS_ITEM_ROW_PRIMARY_TEXT_PROPERTY] = g_param_spec_string ("primary-text", "primary-text", "primary-text", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_ITEM_ROW_SECONDARY_TEXT_PROPERTY, widgets_item_row_properties[WIDGETS_ITEM_ROW_SECONDARY_TEXT_PROPERTY] = g_param_spec_string ("secondary-text", "secondary-text", "secondary-text", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_ITEM_ROW_REVEALER_PRIMARY_LABEL_PROPERTY, widgets_item_row_properties[WIDGETS_ITEM_ROW_REVEALER_PRIMARY_LABEL_PROPERTY] = g_param_spec_boolean ("revealer-primary-label", "revealer-primary-label", "revealer-primary-label", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), WIDGETS_ITEM_ROW_REVEALER_SECONDARY_LABEL_PROPERTY, widgets_item_row_properties[WIDGETS_ITEM_ROW_REVEALER_SECONDARY_LABEL_PROPERTY] = g_param_spec_boolean ("revealer-secondary-label", "revealer-secondary-label", "revealer-secondary-label", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_WRITABLE));
#line 688 "ItemRow.c"
}


static void
widgets_item_row_instance_init (WidgetsItemRow * self)
{
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	self->priv = WIDGETS_ITEM_ROW_GET_PRIVATE (self);
#line 697 "ItemRow.c"
}


static void
widgets_item_row_finalize (GObject * obj)
{
	WidgetsItemRow * self;
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, WIDGETS_TYPE_ITEM_ROW, WidgetsItemRow);
#line 23 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_free0 (self->priv->_icon_name);
#line 24 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_free0 (self->priv->_item_name);
#line 26 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_object_unref0 (self->priv->primary_label);
#line 27 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_object_unref0 (self->priv->secondary_label);
#line 29 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_object_unref0 (self->priv->secondary_revealer);
#line 30 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_object_unref0 (self->priv->primary_revealer);
#line 32 "/run/build/planner/src/Widgets/ItemRow.vala"
	_g_object_unref0 (self->priv->main_revealer);
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	G_OBJECT_CLASS (widgets_item_row_parent_class)->finalize (obj);
#line 723 "ItemRow.c"
}


GType
widgets_item_row_get_type (void)
{
	static volatile gsize widgets_item_row_type_id__volatile = 0;
	if (g_once_init_enter (&widgets_item_row_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (WidgetsItemRowClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) widgets_item_row_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (WidgetsItemRow), 0, (GInstanceInitFunc) widgets_item_row_instance_init, NULL };
		GType widgets_item_row_type_id;
		widgets_item_row_type_id = g_type_register_static (gtk_list_box_row_get_type (), "WidgetsItemRow", &g_define_type_info, 0);
		g_once_init_leave (&widgets_item_row_type_id__volatile, widgets_item_row_type_id);
	}
	return widgets_item_row_type_id__volatile;
}


static void
_vala_widgets_item_row_get_property (GObject * object,
                                     guint property_id,
                                     GValue * value,
                                     GParamSpec * pspec)
{
	WidgetsItemRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_ITEM_ROW, WidgetsItemRow);
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		case WIDGETS_ITEM_ROW_ICON_NAME_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		g_value_set_string (value, widgets_item_row_get_icon_name (self));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		case WIDGETS_ITEM_ROW_ITEM_NAME_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		g_value_set_string (value, widgets_item_row_get_item_name (self));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		case WIDGETS_ITEM_ROW_REVEAL_CHILD_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		g_value_set_boolean (value, widgets_item_row_get_reveal_child (self));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		case WIDGETS_ITEM_ROW_PRIMARY_TEXT_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		g_value_set_string (value, widgets_item_row_get_primary_text (self));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		case WIDGETS_ITEM_ROW_SECONDARY_TEXT_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		g_value_set_string (value, widgets_item_row_get_secondary_text (self));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		break;
#line 781 "ItemRow.c"
		default:
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		break;
#line 787 "ItemRow.c"
	}
}


static void
_vala_widgets_item_row_set_property (GObject * object,
                                     guint property_id,
                                     const GValue * value,
                                     GParamSpec * pspec)
{
	WidgetsItemRow * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, WIDGETS_TYPE_ITEM_ROW, WidgetsItemRow);
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
	switch (property_id) {
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		case WIDGETS_ITEM_ROW_ICON_NAME_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		widgets_item_row_set_icon_name (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		case WIDGETS_ITEM_ROW_ITEM_NAME_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		widgets_item_row_set_item_name (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		case WIDGETS_ITEM_ROW_REVEAL_CHILD_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		widgets_item_row_set_reveal_child (self, g_value_get_boolean (value));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		case WIDGETS_ITEM_ROW_PRIMARY_TEXT_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		widgets_item_row_set_primary_text (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		case WIDGETS_ITEM_ROW_SECONDARY_TEXT_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		widgets_item_row_set_secondary_text (self, g_value_get_string (value));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		case WIDGETS_ITEM_ROW_REVEALER_PRIMARY_LABEL_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		widgets_item_row_set_revealer_primary_label (self, g_value_get_boolean (value));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		break;
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		case WIDGETS_ITEM_ROW_REVEALER_SECONDARY_LABEL_PROPERTY:
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		widgets_item_row_set_revealer_secondary_label (self, g_value_get_boolean (value));
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		break;
#line 844 "ItemRow.c"
		default:
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Widgets/ItemRow.vala"
		break;
#line 850 "ItemRow.c"
	}
}



