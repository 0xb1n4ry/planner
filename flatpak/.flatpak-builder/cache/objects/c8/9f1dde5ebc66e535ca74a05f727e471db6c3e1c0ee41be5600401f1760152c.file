/* Application.c generated by valac 0.40.11, the Vala compiler
 * generated from Application.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <gtk/gtk.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <gdk/gdk.h>


#define TYPE_APPLICATION (application_get_type ())
#define APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_APPLICATION, Application))
#define APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_APPLICATION, ApplicationClass))
#define IS_APPLICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_APPLICATION))
#define IS_APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_APPLICATION))
#define APPLICATION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_APPLICATION, ApplicationClass))

typedef struct _Application Application;
typedef struct _ApplicationClass ApplicationClass;
typedef struct _ApplicationPrivate ApplicationPrivate;

#define TYPE_MAIN_WINDOW (main_window_get_type ())
#define MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MAIN_WINDOW, MainWindow))
#define MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MAIN_WINDOW, MainWindowClass))
#define IS_MAIN_WINDOW(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MAIN_WINDOW))
#define IS_MAIN_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MAIN_WINDOW))
#define MAIN_WINDOW_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MAIN_WINDOW, MainWindowClass))

typedef struct _MainWindow MainWindow;
typedef struct _MainWindowClass MainWindowClass;
enum  {
	APPLICATION_0_PROPERTY,
	APPLICATION_NUM_PROPERTIES
};
static GParamSpec* application_properties[APPLICATION_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;

#define SERVICES_TYPE_NOTIFICATIONS (services_notifications_get_type ())
#define SERVICES_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotifications))
#define SERVICES_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))
#define SERVICES_IS_NOTIFICATIONS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_IS_NOTIFICATIONS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_NOTIFICATIONS))
#define SERVICES_NOTIFICATIONS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_NOTIFICATIONS, ServicesNotificationsClass))

typedef struct _ServicesNotifications ServicesNotifications;
typedef struct _ServicesNotificationsClass ServicesNotificationsClass;

#define SERVICES_TYPE_SIGNALS (services_signals_get_type ())
#define SERVICES_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_SIGNALS, ServicesSignals))
#define SERVICES_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_SIGNALS, ServicesSignalsClass))
#define SERVICES_IS_SIGNALS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_SIGNALS))
#define SERVICES_IS_SIGNALS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_SIGNALS))
#define SERVICES_SIGNALS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_SIGNALS, ServicesSignalsClass))

typedef struct _ServicesSignals ServicesSignals;
typedef struct _ServicesSignalsClass ServicesSignalsClass;

#define SERVICES_TYPE_GITHUB (services_github_get_type ())
#define SERVICES_GITHUB(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_GITHUB, ServicesGithub))
#define SERVICES_GITHUB_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_GITHUB, ServicesGithubClass))
#define SERVICES_IS_GITHUB(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_GITHUB))
#define SERVICES_IS_GITHUB_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_GITHUB))
#define SERVICES_GITHUB_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_GITHUB, ServicesGithubClass))

typedef struct _ServicesGithub ServicesGithub;
typedef struct _ServicesGithubClass ServicesGithubClass;

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))

struct _Application {
	GtkApplication parent_instance;
	ApplicationPrivate * priv;
	MainWindow* main_window;
};

struct _ApplicationClass {
	GtkApplicationClass parent_class;
};


static gpointer application_parent_class = NULL;
extern GSettings* application_settings;
GSettings* application_settings = NULL;
extern ServicesDatabase* application_database;
ServicesDatabase* application_database = NULL;
extern ServicesNotifications* application_notification;
ServicesNotifications* application_notification = NULL;
extern ServicesSignals* application_signals;
ServicesSignals* application_signals = NULL;
extern ServicesGithub* application_github;
ServicesGithub* application_github = NULL;
extern Utils* application_utils;
Utils* application_utils = NULL;
extern Application* application__instance;
Application* application__instance = NULL;

GType application_get_type (void) G_GNUC_CONST;
GType main_window_get_type (void) G_GNUC_CONST;
GType services_database_get_type (void) G_GNUC_CONST;
GType services_notifications_get_type (void) G_GNUC_CONST;
GType services_signals_get_type (void) G_GNUC_CONST;
GType services_github_get_type (void) G_GNUC_CONST;
GType utils_get_type (void) G_GNUC_CONST;
#define APPLICATION_CSS "\n" \
"        @define-color color_header %s;\n" \
"        @define-color color_selected %s;\n" \
"        @define-color color_text %s;\n" \
"    "
Application* application_new (void);
Application* application_construct (GType object_type);
static void application_real_activate (GApplication* base);
static gint32 _variant_get1 (GVariant* value);
static gint32 _variant_get2 (GVariant* value);
static gint32 _variant_get3 (GVariant* value);
static gint32 _variant_get4 (GVariant* value);
MainWindow* main_window_new (Application* application);
MainWindow* main_window_construct (GType object_type,
                                   Application* application);
static void __lambda466_ (Application* self);
static void ___lambda466__g_simple_action_activate (GSimpleAction* _sender,
                                             GVariant* parameter,
                                             gpointer self);
static void __lambda467_ (Application* self);
static void ___lambda467__g_simple_action_activate (GSimpleAction* _sender,
                                             GVariant* parameter,
                                             gpointer self);
static void __lambda468_ (Application* self);
static void ___lambda468__g_simple_action_activate (GSimpleAction* _sender,
                                             GVariant* parameter,
                                             gpointer self);
gchar* utils_get_theme (Utils* self,
                        gint key);
gchar* utils_convert_invert (Utils* self,
                             const gchar* hex);
gint application_main (gchar** args,
                       int args_length1);
Application* application_get_instance (void);
Utils* utils_new (void);
Utils* utils_construct (GType object_type);
void utils_create_dir_with_parents (Utils* self,
                                    const gchar* dir);
ServicesDatabase* services_database_new (gboolean skip_tables);
ServicesDatabase* services_database_construct (GType object_type,
                                               gboolean skip_tables);
ServicesNotifications* services_notifications_new (void);
ServicesNotifications* services_notifications_construct (GType object_type);
ServicesSignals* services_signals_new (void);
ServicesSignals* services_signals_construct (GType object_type);
ServicesGithub* services_github_new (void);
ServicesGithub* services_github_construct (GType object_type);
static void application_finalize (GObject * obj);
static void _vala_application_get_property (GObject * object,
                                     guint property_id,
                                     GValue * value,
                                     GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);


Application*
application_construct (GType object_type)
{
	Application * self = NULL;
#line 37 "/run/build/planner/src/Application.vala"
	self = (Application*) g_object_new (object_type, "application-id", "com.github.alainm23.planner", "flags", G_APPLICATION_FLAGS_NONE, NULL);
#line 36 "/run/build/planner/src/Application.vala"
	return self;
#line 214 "Application.c"
}


Application*
application_new (void)
{
#line 36 "/run/build/planner/src/Application.vala"
	return application_construct (TYPE_APPLICATION);
#line 223 "Application.c"
}


static gint32
_variant_get1 (GVariant* value)
{
#line 76 "/run/build/planner/src/Application.vala"
	return g_variant_get_int32 (value);
#line 232 "Application.c"
}


static gint32
_variant_get2 (GVariant* value)
{
#line 77 "/run/build/planner/src/Application.vala"
	return g_variant_get_int32 (value);
#line 241 "Application.c"
}


static gint32
_variant_get3 (GVariant* value)
{
#line 80 "/run/build/planner/src/Application.vala"
	return g_variant_get_int32 (value);
#line 250 "Application.c"
}


static gint32
_variant_get4 (GVariant* value)
{
#line 81 "/run/build/planner/src/Application.vala"
	return g_variant_get_int32 (value);
#line 259 "Application.c"
}


static void
__lambda466_ (Application* self)
{
	MainWindow* _tmp0_;
#line 102 "/run/build/planner/src/Application.vala"
	_tmp0_ = self->main_window;
#line 102 "/run/build/planner/src/Application.vala"
	if (_tmp0_ != NULL) {
#line 271 "Application.c"
		MainWindow* _tmp1_;
#line 103 "/run/build/planner/src/Application.vala"
		_tmp1_ = self->main_window;
#line 103 "/run/build/planner/src/Application.vala"
		gtk_widget_destroy ((GtkWidget*) _tmp1_);
#line 277 "Application.c"
	}
}


static void
___lambda466__g_simple_action_activate (GSimpleAction* _sender,
                                        GVariant* parameter,
                                        gpointer self)
{
#line 101 "/run/build/planner/src/Application.vala"
	__lambda466_ ((Application*) self);
#line 289 "Application.c"
}


static void
__lambda467_ (Application* self)
{
	ServicesSignals* _tmp0_;
#line 112 "/run/build/planner/src/Application.vala"
	_tmp0_ = application_signals;
#line 112 "/run/build/planner/src/Application.vala"
	g_signal_emit_by_name (_tmp0_, "on-signal-show-quick-find");
#line 301 "Application.c"
}


static void
___lambda467__g_simple_action_activate (GSimpleAction* _sender,
                                        GVariant* parameter,
                                        gpointer self)
{
#line 111 "/run/build/planner/src/Application.vala"
	__lambda467_ ((Application*) self);
#line 312 "Application.c"
}


static void
__lambda468_ (Application* self)
{
	ServicesSignals* _tmp0_;
#line 120 "/run/build/planner/src/Application.vala"
	_tmp0_ = application_signals;
#line 120 "/run/build/planner/src/Application.vala"
	g_signal_emit_by_name (_tmp0_, "on-signal-show-events");
#line 324 "Application.c"
}


static void
___lambda468__g_simple_action_activate (GSimpleAction* _sender,
                                        GVariant* parameter,
                                        gpointer self)
{
#line 119 "/run/build/planner/src/Application.vala"
	__lambda468_ ((Application*) self);
#line 335 "Application.c"
}


static void
application_real_activate (GApplication* base)
{
	Application * self;
	GList* _tmp0_;
	GVariant* window_size = NULL;
	GSettings* _tmp3_;
	GVariant* _tmp4_;
	GtkAllocation rect = {0};
	GVariant* _tmp5_;
	GVariant* _tmp6_;
	GVariant* _tmp7_;
	gint32 _tmp8_;
	GVariant* _tmp9_;
	GVariant* _tmp10_;
	GVariant* _tmp11_;
	gint32 _tmp12_;
	GVariant* window_position = NULL;
	GSettings* _tmp13_;
	GVariant* _tmp14_;
	gint32 window_x = 0;
	GVariant* _tmp15_;
	GVariant* _tmp16_;
	GVariant* _tmp17_;
	gint32 _tmp18_;
	gint32 _tmp19_;
	gint32 window_y = 0;
	GVariant* _tmp20_;
	GVariant* _tmp21_;
	GVariant* _tmp22_;
	gint32 _tmp23_;
	gint32 _tmp24_;
	MainWindow* _tmp25_;
	GtkSettings* _tmp26_;
	GValue _tmp27_ = {0};
	GtkSettings* _tmp28_;
	GValue _tmp29_ = {0};
	gboolean _tmp30_ = FALSE;
	gint32 _tmp31_;
	MainWindow* _tmp36_;
	GtkAllocation _tmp37_;
	MainWindow* _tmp38_;
	GSimpleAction* quit_action = NULL;
	GSimpleAction* _tmp39_;
	GSimpleAction* _tmp40_;
	gchar* _tmp41_;
	gchar** _tmp42_;
	gchar** _tmp43_;
	gint _tmp43__length1;
	GSimpleAction* _tmp44_;
	GSimpleAction* quick_find_action = NULL;
	GSimpleAction* _tmp45_;
	GSimpleAction* _tmp46_;
	gchar* _tmp47_;
	gchar** _tmp48_;
	gchar** _tmp49_;
	gint _tmp49__length1;
	GSimpleAction* _tmp50_;
	GSimpleAction* calendar_events_action = NULL;
	GSimpleAction* _tmp51_;
	GSimpleAction* _tmp52_;
	gchar* _tmp53_;
	gchar** _tmp54_;
	gchar** _tmp55_;
	gint _tmp55__length1;
	GSimpleAction* _tmp56_;
	GtkIconTheme* default_theme = NULL;
	GtkIconTheme* _tmp57_;
	GtkIconTheme* _tmp58_;
	GtkCssProvider* provider = NULL;
	GtkCssProvider* _tmp59_;
	GtkCssProvider* _tmp60_;
	GdkScreen* _tmp61_;
	GtkCssProvider* _tmp62_;
	GtkCssProvider* theme_provider = NULL;
	GtkCssProvider* _tmp63_;
	gchar* colored_css = NULL;
	gchar* _tmp64_;
	GSettings* _tmp65_;
	GError * _inner_error_ = NULL;
#line 68 "/run/build/planner/src/Application.vala"
	self = (Application*) base;
#line 69 "/run/build/planner/src/Application.vala"
	_tmp0_ = gtk_application_get_windows ((GtkApplication*) self);
#line 69 "/run/build/planner/src/Application.vala"
	if (g_list_length (_tmp0_) > ((guint) 0)) {
#line 425 "Application.c"
		GList* _tmp1_;
		gconstpointer _tmp2_;
#line 70 "/run/build/planner/src/Application.vala"
		_tmp1_ = gtk_application_get_windows ((GtkApplication*) self);
#line 70 "/run/build/planner/src/Application.vala"
		_tmp2_ = _tmp1_->data;
#line 70 "/run/build/planner/src/Application.vala"
		gtk_window_present ((GtkWindow*) _tmp2_);
#line 71 "/run/build/planner/src/Application.vala"
		return;
#line 436 "Application.c"
	}
#line 74 "/run/build/planner/src/Application.vala"
	_tmp3_ = application_settings;
#line 74 "/run/build/planner/src/Application.vala"
	_tmp4_ = g_settings_get_value (_tmp3_, "window-size");
#line 74 "/run/build/planner/src/Application.vala"
	window_size = _tmp4_;
#line 75 "/run/build/planner/src/Application.vala"
	memset (&rect, 0, sizeof (GtkAllocation));
#line 76 "/run/build/planner/src/Application.vala"
	_tmp5_ = window_size;
#line 76 "/run/build/planner/src/Application.vala"
	_tmp6_ = g_variant_get_child_value (_tmp5_, (gsize) 0);
#line 76 "/run/build/planner/src/Application.vala"
	_tmp7_ = _tmp6_;
#line 76 "/run/build/planner/src/Application.vala"
	_tmp8_ = _variant_get1 (_tmp7_);
#line 76 "/run/build/planner/src/Application.vala"
	rect.height = (gint) _tmp8_;
#line 76 "/run/build/planner/src/Application.vala"
	_g_variant_unref0 (_tmp7_);
#line 77 "/run/build/planner/src/Application.vala"
	_tmp9_ = window_size;
#line 77 "/run/build/planner/src/Application.vala"
	_tmp10_ = g_variant_get_child_value (_tmp9_, (gsize) 1);
#line 77 "/run/build/planner/src/Application.vala"
	_tmp11_ = _tmp10_;
#line 77 "/run/build/planner/src/Application.vala"
	_tmp12_ = _variant_get2 (_tmp11_);
#line 77 "/run/build/planner/src/Application.vala"
	rect.width = (gint) _tmp12_;
#line 77 "/run/build/planner/src/Application.vala"
	_g_variant_unref0 (_tmp11_);
#line 79 "/run/build/planner/src/Application.vala"
	_tmp13_ = application_settings;
#line 79 "/run/build/planner/src/Application.vala"
	_tmp14_ = g_settings_get_value (_tmp13_, "window-position");
#line 79 "/run/build/planner/src/Application.vala"
	window_position = _tmp14_;
#line 80 "/run/build/planner/src/Application.vala"
	_tmp15_ = window_position;
#line 80 "/run/build/planner/src/Application.vala"
	_tmp16_ = g_variant_get_child_value (_tmp15_, (gsize) 0);
#line 80 "/run/build/planner/src/Application.vala"
	_tmp17_ = _tmp16_;
#line 80 "/run/build/planner/src/Application.vala"
	_tmp18_ = _variant_get3 (_tmp17_);
#line 80 "/run/build/planner/src/Application.vala"
	_tmp19_ = _tmp18_;
#line 80 "/run/build/planner/src/Application.vala"
	_g_variant_unref0 (_tmp17_);
#line 80 "/run/build/planner/src/Application.vala"
	window_x = _tmp19_;
#line 81 "/run/build/planner/src/Application.vala"
	_tmp20_ = window_position;
#line 81 "/run/build/planner/src/Application.vala"
	_tmp21_ = g_variant_get_child_value (_tmp20_, (gsize) 1);
#line 81 "/run/build/planner/src/Application.vala"
	_tmp22_ = _tmp21_;
#line 81 "/run/build/planner/src/Application.vala"
	_tmp23_ = _variant_get4 (_tmp22_);
#line 81 "/run/build/planner/src/Application.vala"
	_tmp24_ = _tmp23_;
#line 81 "/run/build/planner/src/Application.vala"
	_g_variant_unref0 (_tmp22_);
#line 81 "/run/build/planner/src/Application.vala"
	window_y = _tmp24_;
#line 83 "/run/build/planner/src/Application.vala"
	_tmp25_ = main_window_new (self);
#line 83 "/run/build/planner/src/Application.vala"
	g_object_ref_sink (_tmp25_);
#line 83 "/run/build/planner/src/Application.vala"
	_g_object_unref0 (self->main_window);
#line 83 "/run/build/planner/src/Application.vala"
	self->main_window = _tmp25_;
#line 85 "/run/build/planner/src/Application.vala"
	_tmp26_ = gtk_settings_get_default ();
#line 85 "/run/build/planner/src/Application.vala"
	g_value_init (&_tmp27_, G_TYPE_STRING);
#line 85 "/run/build/planner/src/Application.vala"
	g_value_set_string (&_tmp27_, "elementary");
#line 85 "/run/build/planner/src/Application.vala"
	g_object_set_property ((GObject*) _tmp26_, "gtk-icon-theme-name", &_tmp27_);
#line 85 "/run/build/planner/src/Application.vala"
	G_IS_VALUE (&_tmp27_) ? (g_value_unset (&_tmp27_), NULL) : NULL;
#line 86 "/run/build/planner/src/Application.vala"
	_tmp28_ = gtk_settings_get_default ();
#line 86 "/run/build/planner/src/Application.vala"
	g_value_init (&_tmp29_, G_TYPE_STRING);
#line 86 "/run/build/planner/src/Application.vala"
	g_value_set_string (&_tmp29_, "elementary");
#line 86 "/run/build/planner/src/Application.vala"
	g_object_set_property ((GObject*) _tmp28_, "gtk-theme-name", &_tmp29_);
#line 86 "/run/build/planner/src/Application.vala"
	G_IS_VALUE (&_tmp29_) ? (g_value_unset (&_tmp29_), NULL) : NULL;
#line 88 "/run/build/planner/src/Application.vala"
	_tmp31_ = window_x;
#line 88 "/run/build/planner/src/Application.vala"
	if (_tmp31_ != ((gint32) -1)) {
#line 88 "/run/build/planner/src/Application.vala"
		_tmp30_ = TRUE;
#line 538 "Application.c"
	} else {
		gint32 _tmp32_;
#line 88 "/run/build/planner/src/Application.vala"
		_tmp32_ = window_y;
#line 88 "/run/build/planner/src/Application.vala"
		_tmp30_ = _tmp32_ != ((gint32) -1);
#line 545 "Application.c"
	}
#line 88 "/run/build/planner/src/Application.vala"
	if (_tmp30_) {
#line 549 "Application.c"
		MainWindow* _tmp33_;
		gint32 _tmp34_;
		gint32 _tmp35_;
#line 89 "/run/build/planner/src/Application.vala"
		_tmp33_ = self->main_window;
#line 89 "/run/build/planner/src/Application.vala"
		_tmp34_ = window_x;
#line 89 "/run/build/planner/src/Application.vala"
		_tmp35_ = window_y;
#line 89 "/run/build/planner/src/Application.vala"
		gtk_window_move ((GtkWindow*) _tmp33_, (gint) _tmp34_, (gint) _tmp35_);
#line 561 "Application.c"
	}
#line 92 "/run/build/planner/src/Application.vala"
	_tmp36_ = self->main_window;
#line 92 "/run/build/planner/src/Application.vala"
	_tmp37_ = rect;
#line 92 "/run/build/planner/src/Application.vala"
	gtk_widget_set_allocation ((GtkWidget*) _tmp36_, &_tmp37_);
#line 93 "/run/build/planner/src/Application.vala"
	_tmp38_ = self->main_window;
#line 93 "/run/build/planner/src/Application.vala"
	gtk_widget_show_all ((GtkWidget*) _tmp38_);
#line 96 "/run/build/planner/src/Application.vala"
	_tmp39_ = g_simple_action_new ("quit", NULL);
#line 96 "/run/build/planner/src/Application.vala"
	quit_action = _tmp39_;
#line 98 "/run/build/planner/src/Application.vala"
	_tmp40_ = quit_action;
#line 98 "/run/build/planner/src/Application.vala"
	g_action_map_add_action ((GActionMap*) self, (GAction*) _tmp40_);
#line 99 "/run/build/planner/src/Application.vala"
	_tmp41_ = g_strdup ("<Control>q");
#line 99 "/run/build/planner/src/Application.vala"
	_tmp42_ = g_new0 (gchar*, 1 + 1);
#line 99 "/run/build/planner/src/Application.vala"
	_tmp42_[0] = _tmp41_;
#line 99 "/run/build/planner/src/Application.vala"
	_tmp43_ = _tmp42_;
#line 99 "/run/build/planner/src/Application.vala"
	_tmp43__length1 = 1;
#line 99 "/run/build/planner/src/Application.vala"
	gtk_application_set_accels_for_action ((GtkApplication*) self, "app.quit", _tmp43_);
#line 99 "/run/build/planner/src/Application.vala"
	_tmp43_ = (_vala_array_free (_tmp43_, _tmp43__length1, (GDestroyNotify) g_free), NULL);
#line 101 "/run/build/planner/src/Application.vala"
	_tmp44_ = quit_action;
#line 101 "/run/build/planner/src/Application.vala"
	g_signal_connect_object (_tmp44_, "activate", (GCallback) ___lambda466__g_simple_action_activate, self, 0);
#line 107 "/run/build/planner/src/Application.vala"
	_tmp45_ = g_simple_action_new ("quick_find", NULL);
#line 107 "/run/build/planner/src/Application.vala"
	quick_find_action = _tmp45_;
#line 108 "/run/build/planner/src/Application.vala"
	_tmp46_ = quick_find_action;
#line 108 "/run/build/planner/src/Application.vala"
	g_action_map_add_action ((GActionMap*) self, (GAction*) _tmp46_);
#line 109 "/run/build/planner/src/Application.vala"
	_tmp47_ = g_strdup ("<Control>f");
#line 109 "/run/build/planner/src/Application.vala"
	_tmp48_ = g_new0 (gchar*, 1 + 1);
#line 109 "/run/build/planner/src/Application.vala"
	_tmp48_[0] = _tmp47_;
#line 109 "/run/build/planner/src/Application.vala"
	_tmp49_ = _tmp48_;
#line 109 "/run/build/planner/src/Application.vala"
	_tmp49__length1 = 1;
#line 109 "/run/build/planner/src/Application.vala"
	gtk_application_set_accels_for_action ((GtkApplication*) self, "app.quick_find", _tmp49_);
#line 109 "/run/build/planner/src/Application.vala"
	_tmp49_ = (_vala_array_free (_tmp49_, _tmp49__length1, (GDestroyNotify) g_free), NULL);
#line 111 "/run/build/planner/src/Application.vala"
	_tmp50_ = quick_find_action;
#line 111 "/run/build/planner/src/Application.vala"
	g_signal_connect_object (_tmp50_, "activate", (GCallback) ___lambda467__g_simple_action_activate, self, 0);
#line 115 "/run/build/planner/src/Application.vala"
	_tmp51_ = g_simple_action_new ("calendar_events", NULL);
#line 115 "/run/build/planner/src/Application.vala"
	calendar_events_action = _tmp51_;
#line 116 "/run/build/planner/src/Application.vala"
	_tmp52_ = calendar_events_action;
#line 116 "/run/build/planner/src/Application.vala"
	g_action_map_add_action ((GActionMap*) self, (GAction*) _tmp52_);
#line 117 "/run/build/planner/src/Application.vala"
	_tmp53_ = g_strdup ("<Control>e");
#line 117 "/run/build/planner/src/Application.vala"
	_tmp54_ = g_new0 (gchar*, 1 + 1);
#line 117 "/run/build/planner/src/Application.vala"
	_tmp54_[0] = _tmp53_;
#line 117 "/run/build/planner/src/Application.vala"
	_tmp55_ = _tmp54_;
#line 117 "/run/build/planner/src/Application.vala"
	_tmp55__length1 = 1;
#line 117 "/run/build/planner/src/Application.vala"
	gtk_application_set_accels_for_action ((GtkApplication*) self, "app.calendar_events", _tmp55_);
#line 117 "/run/build/planner/src/Application.vala"
	_tmp55_ = (_vala_array_free (_tmp55_, _tmp55__length1, (GDestroyNotify) g_free), NULL);
#line 119 "/run/build/planner/src/Application.vala"
	_tmp56_ = calendar_events_action;
#line 119 "/run/build/planner/src/Application.vala"
	g_signal_connect_object (_tmp56_, "activate", (GCallback) ___lambda468__g_simple_action_activate, self, 0);
#line 124 "/run/build/planner/src/Application.vala"
	_tmp57_ = gtk_icon_theme_get_default ();
#line 124 "/run/build/planner/src/Application.vala"
	default_theme = _tmp57_;
#line 125 "/run/build/planner/src/Application.vala"
	_tmp58_ = default_theme;
#line 125 "/run/build/planner/src/Application.vala"
	gtk_icon_theme_add_resource_path (_tmp58_, "/com/github/alainm23/planner");
#line 128 "/run/build/planner/src/Application.vala"
	_tmp59_ = gtk_css_provider_new ();
#line 128 "/run/build/planner/src/Application.vala"
	provider = _tmp59_;
#line 129 "/run/build/planner/src/Application.vala"
	_tmp60_ = provider;
#line 129 "/run/build/planner/src/Application.vala"
	gtk_css_provider_load_from_resource (_tmp60_, "/com/github/alainm23/planner/stylesheet.css");
#line 130 "/run/build/planner/src/Application.vala"
	_tmp61_ = gdk_screen_get_default ();
#line 130 "/run/build/planner/src/Application.vala"
	_tmp62_ = provider;
#line 130 "/run/build/planner/src/Application.vala"
	gtk_style_context_add_provider_for_screen (_tmp61_, (GtkStyleProvider*) _tmp62_, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 134 "/run/build/planner/src/Application.vala"
	_tmp63_ = gtk_css_provider_new ();
#line 134 "/run/build/planner/src/Application.vala"
	theme_provider = _tmp63_;
#line 135 "/run/build/planner/src/Application.vala"
	_tmp64_ = g_strdup ("");
#line 135 "/run/build/planner/src/Application.vala"
	colored_css = _tmp64_;
#line 137 "/run/build/planner/src/Application.vala"
	_tmp65_ = application_settings;
#line 137 "/run/build/planner/src/Application.vala"
	if (g_settings_get_boolean (_tmp65_, "prefer-dark-style")) {
#line 685 "Application.c"
		gchar* _tmp66_;
#line 138 "/run/build/planner/src/Application.vala"
		_tmp66_ = g_strdup_printf (APPLICATION_CSS, "@base_color", "@selected_bg_color", "@text_color");
#line 138 "/run/build/planner/src/Application.vala"
		_g_free0 (colored_css);
#line 138 "/run/build/planner/src/Application.vala"
		colored_css = _tmp66_;
#line 693 "Application.c"
	} else {
		Utils* _tmp67_;
		GSettings* _tmp68_;
		gchar* _tmp69_;
		gchar* _tmp70_;
		Utils* _tmp71_;
		GSettings* _tmp72_;
		gchar* _tmp73_;
		gchar* _tmp74_;
		Utils* _tmp75_;
		Utils* _tmp76_;
		GSettings* _tmp77_;
		gchar* _tmp78_;
		gchar* _tmp79_;
		gchar* _tmp80_;
		gchar* _tmp81_;
		gchar* _tmp82_;
#line 144 "/run/build/planner/src/Application.vala"
		_tmp67_ = application_utils;
#line 144 "/run/build/planner/src/Application.vala"
		_tmp68_ = application_settings;
#line 144 "/run/build/planner/src/Application.vala"
		_tmp69_ = utils_get_theme (_tmp67_, g_settings_get_enum (_tmp68_, "theme"));
#line 144 "/run/build/planner/src/Application.vala"
		_tmp70_ = _tmp69_;
#line 144 "/run/build/planner/src/Application.vala"
		_tmp71_ = application_utils;
#line 144 "/run/build/planner/src/Application.vala"
		_tmp72_ = application_settings;
#line 144 "/run/build/planner/src/Application.vala"
		_tmp73_ = utils_get_theme (_tmp71_, g_settings_get_enum (_tmp72_, "theme"));
#line 144 "/run/build/planner/src/Application.vala"
		_tmp74_ = _tmp73_;
#line 144 "/run/build/planner/src/Application.vala"
		_tmp75_ = application_utils;
#line 144 "/run/build/planner/src/Application.vala"
		_tmp76_ = application_utils;
#line 144 "/run/build/planner/src/Application.vala"
		_tmp77_ = application_settings;
#line 144 "/run/build/planner/src/Application.vala"
		_tmp78_ = utils_get_theme (_tmp76_, g_settings_get_enum (_tmp77_, "theme"));
#line 144 "/run/build/planner/src/Application.vala"
		_tmp79_ = _tmp78_;
#line 144 "/run/build/planner/src/Application.vala"
		_tmp80_ = utils_convert_invert (_tmp75_, _tmp79_);
#line 144 "/run/build/planner/src/Application.vala"
		_tmp81_ = _tmp80_;
#line 144 "/run/build/planner/src/Application.vala"
		_tmp82_ = g_strdup_printf (APPLICATION_CSS, _tmp70_, _tmp74_, _tmp81_);
#line 144 "/run/build/planner/src/Application.vala"
		_g_free0 (colored_css);
#line 144 "/run/build/planner/src/Application.vala"
		colored_css = _tmp82_;
#line 144 "/run/build/planner/src/Application.vala"
		_g_free0 (_tmp81_);
#line 144 "/run/build/planner/src/Application.vala"
		_g_free0 (_tmp79_);
#line 144 "/run/build/planner/src/Application.vala"
		_g_free0 (_tmp74_);
#line 144 "/run/build/planner/src/Application.vala"
		_g_free0 (_tmp70_);
#line 755 "Application.c"
	}
	{
		GtkCssProvider* _tmp83_;
		const gchar* _tmp84_;
		const gchar* _tmp85_;
		gint _tmp86_;
		gint _tmp87_;
		GdkScreen* _tmp88_;
		GtkCssProvider* _tmp89_;
#line 152 "/run/build/planner/src/Application.vala"
		_tmp83_ = theme_provider;
#line 152 "/run/build/planner/src/Application.vala"
		_tmp84_ = colored_css;
#line 152 "/run/build/planner/src/Application.vala"
		_tmp85_ = colored_css;
#line 152 "/run/build/planner/src/Application.vala"
		_tmp86_ = strlen (_tmp85_);
#line 152 "/run/build/planner/src/Application.vala"
		_tmp87_ = _tmp86_;
#line 152 "/run/build/planner/src/Application.vala"
		gtk_css_provider_load_from_data (_tmp83_, _tmp84_, (gssize) _tmp87_, &_inner_error_);
#line 152 "/run/build/planner/src/Application.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 779 "Application.c"
			goto __catch0_g_error;
		}
#line 154 "/run/build/planner/src/Application.vala"
		_tmp88_ = gdk_screen_get_default ();
#line 154 "/run/build/planner/src/Application.vala"
		_tmp89_ = theme_provider;
#line 154 "/run/build/planner/src/Application.vala"
		gtk_style_context_add_provider_for_screen (_tmp88_, (GtkStyleProvider*) _tmp89_, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 788 "Application.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
#line 151 "/run/build/planner/src/Application.vala"
		e = _inner_error_;
#line 151 "/run/build/planner/src/Application.vala"
		_inner_error_ = NULL;
#line 156 "/run/build/planner/src/Application.vala"
		g_debug ("Application.vala:156: Theme error");
#line 151 "/run/build/planner/src/Application.vala"
		_g_error_free0 (e);
#line 802 "Application.c"
	}
	__finally0:
#line 151 "/run/build/planner/src/Application.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 151 "/run/build/planner/src/Application.vala"
		_g_free0 (colored_css);
#line 151 "/run/build/planner/src/Application.vala"
		_g_object_unref0 (theme_provider);
#line 151 "/run/build/planner/src/Application.vala"
		_g_object_unref0 (provider);
#line 151 "/run/build/planner/src/Application.vala"
		_g_object_unref0 (calendar_events_action);
#line 151 "/run/build/planner/src/Application.vala"
		_g_object_unref0 (quick_find_action);
#line 151 "/run/build/planner/src/Application.vala"
		_g_object_unref0 (quit_action);
#line 151 "/run/build/planner/src/Application.vala"
		_g_variant_unref0 (window_position);
#line 151 "/run/build/planner/src/Application.vala"
		_g_variant_unref0 (window_size);
#line 151 "/run/build/planner/src/Application.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 151 "/run/build/planner/src/Application.vala"
		g_clear_error (&_inner_error_);
#line 151 "/run/build/planner/src/Application.vala"
		return;
#line 829 "Application.c"
	}
#line 68 "/run/build/planner/src/Application.vala"
	_g_free0 (colored_css);
#line 68 "/run/build/planner/src/Application.vala"
	_g_object_unref0 (theme_provider);
#line 68 "/run/build/planner/src/Application.vala"
	_g_object_unref0 (provider);
#line 68 "/run/build/planner/src/Application.vala"
	_g_object_unref0 (calendar_events_action);
#line 68 "/run/build/planner/src/Application.vala"
	_g_object_unref0 (quick_find_action);
#line 68 "/run/build/planner/src/Application.vala"
	_g_object_unref0 (quit_action);
#line 68 "/run/build/planner/src/Application.vala"
	_g_variant_unref0 (window_position);
#line 68 "/run/build/planner/src/Application.vala"
	_g_variant_unref0 (window_size);
#line 847 "Application.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 160 "/run/build/planner/src/Application.vala"
	return self ? g_object_ref (self) : NULL;
#line 856 "Application.c"
}


gint
application_main (gchar** args,
                  int args_length1)
{
	gint result = 0;
	Application* app = NULL;
	Application* _tmp0_;
	Application* _tmp1_;
	Application* _tmp2_;
#line 160 "/run/build/planner/src/Application.vala"
	_tmp0_ = application_get_instance ();
#line 160 "/run/build/planner/src/Application.vala"
	_tmp1_ = _tmp0_;
#line 160 "/run/build/planner/src/Application.vala"
	_tmp2_ = _g_object_ref0 (_tmp1_);
#line 160 "/run/build/planner/src/Application.vala"
	app = _tmp2_;
#line 161 "/run/build/planner/src/Application.vala"
	result = g_application_run ((GApplication*) app, args_length1, args);
#line 161 "/run/build/planner/src/Application.vala"
	_g_object_unref0 (app);
#line 161 "/run/build/planner/src/Application.vala"
	return result;
#line 883 "Application.c"
}


int
main (int argc,
      char ** argv)
{
#line 159 "/run/build/planner/src/Application.vala"
	return application_main (argv, argc);
#line 893 "Application.c"
}


Application*
application_get_instance (void)
{
	Application* result;
	Application* _tmp0_;
	Application* _tmp2_;
#line 61 "/run/build/planner/src/Application.vala"
	_tmp0_ = application__instance;
#line 61 "/run/build/planner/src/Application.vala"
	if (_tmp0_ == NULL) {
#line 907 "Application.c"
		Application* _tmp1_;
#line 62 "/run/build/planner/src/Application.vala"
		_tmp1_ = application_new ();
#line 62 "/run/build/planner/src/Application.vala"
		_g_object_unref0 (application__instance);
#line 62 "/run/build/planner/src/Application.vala"
		application__instance = _tmp1_;
#line 915 "Application.c"
	}
#line 64 "/run/build/planner/src/Application.vala"
	_tmp2_ = application__instance;
#line 64 "/run/build/planner/src/Application.vala"
	result = _tmp2_;
#line 64 "/run/build/planner/src/Application.vala"
	return result;
#line 923 "Application.c"
}


static void
application_class_init (ApplicationClass * klass)
{
	Utils* _tmp0_;
	Utils* _tmp1_;
	Utils* _tmp2_;
	GSettings* _tmp3_;
	ServicesDatabase* _tmp4_;
	ServicesNotifications* _tmp5_;
	ServicesSignals* _tmp6_;
	ServicesGithub* _tmp7_;
#line 22 "/run/build/planner/src/Application.vala"
	application_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Application.vala"
	((GApplicationClass *) klass)->activate = (void (*) (GApplication *)) application_real_activate;
#line 22 "/run/build/planner/src/Application.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_application_get_property;
#line 22 "/run/build/planner/src/Application.vala"
	G_OBJECT_CLASS (klass)->finalize = application_finalize;
#line 45 "/run/build/planner/src/Application.vala"
	_tmp0_ = utils_new ();
#line 45 "/run/build/planner/src/Application.vala"
	_g_object_unref0 (application_utils);
#line 45 "/run/build/planner/src/Application.vala"
	application_utils = _tmp0_;
#line 46 "/run/build/planner/src/Application.vala"
	_tmp1_ = application_utils;
#line 46 "/run/build/planner/src/Application.vala"
	utils_create_dir_with_parents (_tmp1_, "/.cache/com.github.alainm23.planner");
#line 47 "/run/build/planner/src/Application.vala"
	_tmp2_ = application_utils;
#line 47 "/run/build/planner/src/Application.vala"
	utils_create_dir_with_parents (_tmp2_, "/.cache/com.github.alainm23.planner/profile");
#line 49 "/run/build/planner/src/Application.vala"
	_tmp3_ = g_settings_new ("com.github.alainm23.planner");
#line 49 "/run/build/planner/src/Application.vala"
	_g_object_unref0 (application_settings);
#line 49 "/run/build/planner/src/Application.vala"
	application_settings = _tmp3_;
#line 50 "/run/build/planner/src/Application.vala"
	_tmp4_ = services_database_new (FALSE);
#line 50 "/run/build/planner/src/Application.vala"
	_g_object_unref0 (application_database);
#line 50 "/run/build/planner/src/Application.vala"
	application_database = _tmp4_;
#line 52 "/run/build/planner/src/Application.vala"
	_tmp5_ = services_notifications_new ();
#line 52 "/run/build/planner/src/Application.vala"
	_g_object_unref0 (application_notification);
#line 52 "/run/build/planner/src/Application.vala"
	application_notification = _tmp5_;
#line 53 "/run/build/planner/src/Application.vala"
	_tmp6_ = services_signals_new ();
#line 53 "/run/build/planner/src/Application.vala"
	_g_object_unref0 (application_signals);
#line 53 "/run/build/planner/src/Application.vala"
	application_signals = _tmp6_;
#line 54 "/run/build/planner/src/Application.vala"
	_tmp7_ = services_github_new ();
#line 54 "/run/build/planner/src/Application.vala"
	_g_object_unref0 (application_github);
#line 54 "/run/build/planner/src/Application.vala"
	application_github = _tmp7_;
#line 990 "Application.c"
}


static void
application_instance_init (Application * self)
{
}


static void
application_finalize (GObject * obj)
{
	Application * self;
#line 22 "/run/build/planner/src/Application.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_APPLICATION, Application);
#line 23 "/run/build/planner/src/Application.vala"
	_g_object_unref0 (self->main_window);
#line 22 "/run/build/planner/src/Application.vala"
	G_OBJECT_CLASS (application_parent_class)->finalize (obj);
#line 1010 "Application.c"
}


GType
application_get_type (void)
{
	static volatile gsize application_type_id__volatile = 0;
	if (g_once_init_enter (&application_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ApplicationClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) application_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Application), 0, (GInstanceInitFunc) application_instance_init, NULL };
		GType application_type_id;
		application_type_id = g_type_register_static (gtk_application_get_type (), "Application", &g_define_type_info, 0);
		g_once_init_leave (&application_type_id__volatile, application_type_id);
	}
	return application_type_id__volatile;
}


static void
_vala_application_get_property (GObject * object,
                                guint property_id,
                                GValue * value,
                                GParamSpec * pspec)
{
	Application * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TYPE_APPLICATION, Application);
#line 22 "/run/build/planner/src/Application.vala"
	switch (property_id) {
#line 1038 "Application.c"
		default:
#line 22 "/run/build/planner/src/Application.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 22 "/run/build/planner/src/Application.vala"
		break;
#line 1044 "Application.c"
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}



