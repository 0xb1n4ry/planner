/* tpf-persona.c generated by valac 0.40.11, the Vala compiler
 * generated from tpf-persona.vala, do not modify */

/*
 * Copyright (C) 2010 Collabora Ltd.
 * Copyright (C) 2013 Philip Withnall
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 *       Travis Reitter <travis.reitter@collabora.co.uk>
 *       Philip Withnall <philip@tecnocode.co.uk>
 */


#include <glib.h>
#include <glib-object.h>
#include <folks/folks.h>
#include <stdlib.h>
#include <string.h>
#include <gio/gio.h>
#include <folks/small-set.h>
#include <gee.h>
#include <telepathy-glib/telepathy-glib.h>
#include <glib/gi18n-lib.h>
#include <folks-internal.h>


#define TPF_TYPE_PERSONA (tpf_persona_get_type ())
#define TPF_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TPF_TYPE_PERSONA, TpfPersona))
#define TPF_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TPF_TYPE_PERSONA, TpfPersonaClass))
#define TPF_IS_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TPF_TYPE_PERSONA))
#define TPF_IS_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TPF_TYPE_PERSONA))
#define TPF_PERSONA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TPF_TYPE_PERSONA, TpfPersonaClass))

typedef struct _TpfPersona TpfPersona;
typedef struct _TpfPersonaClass TpfPersonaClass;
typedef struct _TpfPersonaPrivate TpfPersonaPrivate;
enum  {
	TPF_PERSONA_0_PROPERTY,
	TPF_PERSONA_IS_IN_CONTACT_LIST_PROPERTY,
	TPF_PERSONA_AVATAR_PROPERTY,
	TPF_PERSONA_STRUCTURED_NAME_PROPERTY,
	TPF_PERSONA_FULL_NAME_PROPERTY,
	TPF_PERSONA_NICKNAME_PROPERTY,
	TPF_PERSONA_CALENDAR_EVENT_ID_PROPERTY,
	TPF_PERSONA_BIRTHDAY_PROPERTY,
	TPF_PERSONA_PRESENCE_TYPE_PROPERTY,
	TPF_PERSONA_PRESENCE_STATUS_PROPERTY,
	TPF_PERSONA_PRESENCE_MESSAGE_PROPERTY,
	TPF_PERSONA_CLIENT_TYPES_PROPERTY,
	TPF_PERSONA_LINKABLE_PROPERTIES_PROPERTY,
	TPF_PERSONA_WRITEABLE_PROPERTIES_PROPERTY,
	TPF_PERSONA_ALIAS_PROPERTY,
	TPF_PERSONA_IS_FAVOURITE_PROPERTY,
	TPF_PERSONA_EMAIL_ADDRESSES_PROPERTY,
	TPF_PERSONA_IM_ADDRESSES_PROPERTY,
	TPF_PERSONA_IM_INTERACTION_COUNT_PROPERTY,
	TPF_PERSONA_LAST_IM_INTERACTION_DATETIME_PROPERTY,
	TPF_PERSONA_CALL_INTERACTION_COUNT_PROPERTY,
	TPF_PERSONA_LAST_CALL_INTERACTION_DATETIME_PROPERTY,
	TPF_PERSONA_GROUPS_PROPERTY,
	TPF_PERSONA_CONTACT_PROPERTY,
	TPF_PERSONA_PHONE_NUMBERS_PROPERTY,
	TPF_PERSONA_URLS_PROPERTY,
	TPF_PERSONA_NUM_PROPERTIES
};
static GParamSpec* tpf_persona_properties[TPF_PERSONA_NUM_PROPERTIES];
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))

#define TPF_TYPE_PERSONA_STORE (tpf_persona_store_get_type ())
#define TPF_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TPF_TYPE_PERSONA_STORE, TpfPersonaStore))
#define TPF_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TPF_TYPE_PERSONA_STORE, TpfPersonaStoreClass))
#define TPF_IS_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TPF_TYPE_PERSONA_STORE))
#define TPF_IS_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TPF_TYPE_PERSONA_STORE))
#define TPF_PERSONA_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TPF_TYPE_PERSONA_STORE, TpfPersonaStoreClass))

typedef struct _TpfPersonaStore TpfPersonaStore;
typedef struct _TpfPersonaStoreClass TpfPersonaStoreClass;
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _TpfPersonaChangeFullNameData TpfPersonaChangeFullNameData;
typedef struct _TpfPersonaChangeBirthdayData TpfPersonaChangeBirthdayData;
typedef struct _TpfPersonaChangeAliasData TpfPersonaChangeAliasData;
typedef struct _TpfPersonaChangeIsFavouriteData TpfPersonaChangeIsFavouriteData;
typedef struct _TpfPersonaChangeEmailAddressesData TpfPersonaChangeEmailAddressesData;
typedef struct _TpfPersonaChangeGroupData TpfPersonaChangeGroupData;
typedef struct _TpfPersonaChangeGroupsData TpfPersonaChangeGroupsData;
typedef struct _TpfPersonaChangePhoneNumbersData TpfPersonaChangePhoneNumbersData;
typedef struct _TpfPersonaChangeUrlsData TpfPersonaChangeUrlsData;
typedef struct _TpfPersonaChangeDetailsData TpfPersonaChangeDetailsData;
#define __vala_TpContactInfoField_free0(var) ((var == NULL) ? NULL : (var = (_vala_TpContactInfoField_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _TpfPersona {
	FolksPersona parent_instance;
	TpfPersonaPrivate * priv;
	GDateTime* _last_im_interaction_datetime;
	GDateTime* _last_call_interaction_datetime;
};

struct _TpfPersonaClass {
	FolksPersonaClass parent_class;
};

struct _TpfPersonaPrivate {
	gchar** _writeable_properties;
	gint _writeable_properties_length1;
	gint __writeable_properties_size_;
	gboolean _is_constructed;
	gboolean _is_in_contact_list;
	GLoadableIcon* _avatar;
	gchar* _full_name;
	GDateTime* _birthday;
	FolksPresenceType _presence_type;
	gchar* _presence_status;
	gchar* _presence_message;
	gchar** _client_types;
	gint _client_types_length1;
	gint __client_types_size_;
	gchar* _alias;
	gboolean _is_favourite;
	FolksSmallSet* _email_addresses;
	GeeSet* _email_addresses_ro;
	GeeHashMultiMap* _im_addresses;
	guint _im_interaction_count;
	guint _call_interaction_count;
	FolksSmallSet* _groups;
	GeeSet* _groups_ro;
	TpContact* _contact;
	FolksSmallSet* _phone_numbers;
	GeeSet* _phone_numbers_ro;
	FolksSmallSet* _urls;
	GeeSet* _urls_ro;
};

struct _TpfPersonaChangeFullNameData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersona* self;
	gchar* full_name;
	TpfPersonaStore* tpf_store;
	FolksPersonaStore* _tmp0_;
	FolksPersonaStore* _tmp1_;
	TpfPersonaStore* _tmp2_;
	const gchar* _tmp3_;
	gboolean _tmp4_;
	TpfPersonaStore* _tmp5_;
	GError* e1;
	GError* _tmp6_;
	const gchar* _tmp7_;
	GError* _tmp8_;
	GError* e2;
	GError* _tmp9_;
	const gchar* _tmp10_;
	GError* _tmp11_;
	GError* e3;
	GError* _tmp12_;
	const gchar* _tmp13_;
	GError* _tmp14_;
	GError * _inner_error_;
};

struct _TpfPersonaChangeBirthdayData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersona* self;
	GDateTime* birthday;
	TpfPersonaStore* tpf_store;
	FolksPersonaStore* _tmp0_;
	FolksPersonaStore* _tmp1_;
	TpfPersonaStore* _tmp2_;
	gboolean _tmp3_;
	gboolean _tmp4_;
	GDateTime* _tmp5_;
	GDateTime* _tmp6_;
	gboolean _tmp7_;
	TpfPersonaStore* _tmp8_;
	GError* e1;
	GError* _tmp9_;
	const gchar* _tmp10_;
	GError* _tmp11_;
	GError* e2;
	GError* _tmp12_;
	const gchar* _tmp13_;
	GError* _tmp14_;
	GError* e3;
	GError* _tmp15_;
	const gchar* _tmp16_;
	GError* _tmp17_;
	GError * _inner_error_;
};

struct _TpfPersonaChangeAliasData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersona* self;
	gchar* alias;
	const gchar* _tmp0_;
	gboolean _tmp1_;
	FolksPersonaStore* _tmp2_;
	FolksPersonaStore* _tmp3_;
	GError * _inner_error_;
};

struct _TpfPersonaChangeIsFavouriteData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersona* self;
	gboolean is_favourite;
	gboolean _tmp0_;
	gboolean _tmp1_;
	FolksPersonaStore* _tmp2_;
	FolksPersonaStore* _tmp3_;
	GError * _inner_error_;
};

struct _TpfPersonaChangeEmailAddressesData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersona* self;
	GeeSet* email_addresses;
	FolksSmallSet* _tmp0_;
	GError * _inner_error_;
};

struct _TpfPersonaChangeGroupData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersona* self;
	gchar* group;
	gboolean is_member;
	TpContact* contact;
	TpContact* _tmp0_;
	TpContact* _tmp1_;
	TpContact* _tmp2_;
	GError* _tmp3_;
	gboolean _tmp4_;
	FolksSmallSet* _tmp5_;
	TpContact* _tmp6_;
	gboolean _tmp7_;
	FolksSmallSet* _tmp8_;
	TpContact* _tmp9_;
	GError* e;
	GError* _tmp10_;
	const gchar* _tmp11_;
	GError* _tmp12_;
	GError * _inner_error_;
};

struct _TpfPersonaChangeGroupsData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersona* self;
	GeeSet* groups;
	TpContact* contact;
	TpContact* _tmp0_;
	TpContact* _tmp1_;
	TpContact* _tmp2_;
	GError* _tmp3_;
	TpContact* _tmp4_;
	gint _tmp5_;
	gpointer* _tmp6_;
	gchar** _tmp7_;
	gint _tmp7__length1;
	GError* e;
	GError* _tmp8_;
	const gchar* _tmp9_;
	GError* _tmp10_;
	GError * _inner_error_;
};

struct _TpfPersonaChangePhoneNumbersData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersona* self;
	GeeSet* phone_numbers;
	FolksSmallSet* _tmp0_;
	GError * _inner_error_;
};

struct _TpfPersonaChangeUrlsData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersona* self;
	GeeSet* urls;
	FolksSmallSet* _tmp0_;
	GError * _inner_error_;
};

struct _TpfPersonaChangeDetailsData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	GAsyncReadyCallback _callback_;
	gboolean _task_complete_;
	TpfPersona* self;
	GeeSet* details;
	GeeSet* member_set;
	gchar* field_name;
	GType t_type;
	GBoxedCopyFunc t_dup_func;
	GDestroyNotify t_destroy_func;
	TpfPersonaStore* tpf_store;
	FolksPersonaStore* _tmp0_;
	FolksPersonaStore* _tmp1_;
	TpfPersonaStore* _tmp2_;
	gboolean _tmp3_;
	gboolean _tmp4_;
	TpfPersonaStore* _tmp5_;
	GError* e1;
	GError* _tmp6_;
	const gchar* _tmp7_;
	GError* _tmp8_;
	GError* e2;
	GError* _tmp9_;
	const gchar* _tmp10_;
	GError* _tmp11_;
	GError* e3;
	GError* _tmp12_;
	const gchar* _tmp13_;
	GError* _tmp14_;
	GError * _inner_error_;
};


static gpointer tpf_persona_parent_class = NULL;
static FolksAliasDetailsIface * tpf_persona_folks_alias_details_parent_iface = NULL;
static FolksAvatarDetailsIface * tpf_persona_folks_avatar_details_parent_iface = NULL;
static FolksBirthdayDetailsIface * tpf_persona_folks_birthday_details_parent_iface = NULL;
static FolksEmailDetailsIface * tpf_persona_folks_email_details_parent_iface = NULL;
static FolksFavouriteDetailsIface * tpf_persona_folks_favourite_details_parent_iface = NULL;
static FolksGroupDetailsIface * tpf_persona_folks_group_details_parent_iface = NULL;
static FolksInteractionDetailsIface * tpf_persona_folks_interaction_details_parent_iface = NULL;
static FolksImDetailsIface * tpf_persona_folks_im_details_parent_iface = NULL;
static FolksNameDetailsIface * tpf_persona_folks_name_details_parent_iface = NULL;
static FolksPhoneDetailsIface * tpf_persona_folks_phone_details_parent_iface = NULL;
static FolksPresenceDetailsIface * tpf_persona_folks_presence_details_parent_iface = NULL;
static FolksUrlDetailsIface * tpf_persona_folks_url_details_parent_iface = NULL;

GType tpf_persona_get_type (void) G_GNUC_CONST;
#define TPF_PERSONA_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), TPF_TYPE_PERSONA, TpfPersonaPrivate))
static guint _folks_abstract_field_details_hash_static_gee_hash_data_func (gconstpointer v,
                                                                    gpointer self);
static gboolean _folks_abstract_field_details_equal_static_gee_equal_data_func (gconstpointer a,
                                                                         gconstpointer b,
                                                                         gpointer self);
static void tpf_persona_real_change_full_name_data_free (gpointer _data);
static void tpf_persona_real_change_full_name_async_ready_wrapper (GObject *source_object,
                                                            GAsyncResult *res,
                                                            void *user_data);
static void tpf_persona_real_change_full_name (FolksNameDetails* base,
                                        const gchar* full_name,
                                        GAsyncReadyCallback _callback_,
                                        gpointer _user_data_);
static gboolean tpf_persona_real_change_full_name_co (TpfPersonaChangeFullNameData* _data_);
GType tpf_persona_store_get_type (void) G_GNUC_CONST;
void tpf_persona_store_change_user_full_name (TpfPersonaStore* self,
                                              TpfPersona* persona,
                                              const gchar* full_name,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_);
void tpf_persona_store_change_user_full_name_finish (TpfPersonaStore* self,
                                                     GAsyncResult* _res_,
                                                     GError** error);
static void tpf_persona_change_full_name_ready (GObject* source_object,
                                         GAsyncResult* _res_,
                                         gpointer _user_data_);
static void tpf_persona_real_change_birthday_data_free (gpointer _data);
static void tpf_persona_real_change_birthday_async_ready_wrapper (GObject *source_object,
                                                           GAsyncResult *res,
                                                           void *user_data);
static void tpf_persona_real_change_birthday (FolksBirthdayDetails* base,
                                       GDateTime* birthday,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_);
static gboolean tpf_persona_real_change_birthday_co (TpfPersonaChangeBirthdayData* _data_);
void tpf_persona_store_change_user_birthday (TpfPersonaStore* self,
                                             TpfPersona* persona,
                                             GDateTime* birthday,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
void tpf_persona_store_change_user_birthday_finish (TpfPersonaStore* self,
                                                    GAsyncResult* _res_,
                                                    GError** error);
static void tpf_persona_change_birthday_ready (GObject* source_object,
                                        GAsyncResult* _res_,
                                        gpointer _user_data_);
static void tpf_persona_real_change_alias_data_free (gpointer _data);
static void tpf_persona_real_change_alias_async_ready_wrapper (GObject *source_object,
                                                        GAsyncResult *res,
                                                        void *user_data);
static void tpf_persona_real_change_alias (FolksAliasDetails* base,
                                    const gchar* alias,
                                    GAsyncReadyCallback _callback_,
                                    gpointer _user_data_);
static gboolean tpf_persona_real_change_alias_co (TpfPersonaChangeAliasData* _data_);
void tpf_persona_store_change_alias (TpfPersonaStore* self,
                                     TpfPersona* persona,
                                     const gchar* alias,
                                     GAsyncReadyCallback _callback_,
                                     gpointer _user_data_);
void tpf_persona_store_change_alias_finish (TpfPersonaStore* self,
                                            GAsyncResult* _res_,
                                            GError** error);
static void tpf_persona_change_alias_ready (GObject* source_object,
                                     GAsyncResult* _res_,
                                     gpointer _user_data_);
static void tpf_persona_real_change_is_favourite_data_free (gpointer _data);
static void tpf_persona_real_change_is_favourite_async_ready_wrapper (GObject *source_object,
                                                               GAsyncResult *res,
                                                               void *user_data);
static void tpf_persona_real_change_is_favourite (FolksFavouriteDetails* base,
                                           gboolean is_favourite,
                                           GAsyncReadyCallback _callback_,
                                           gpointer _user_data_);
static gboolean tpf_persona_real_change_is_favourite_co (TpfPersonaChangeIsFavouriteData* _data_);
void tpf_persona_store_change_is_favourite (TpfPersonaStore* self,
                                            FolksPersona* persona,
                                            gboolean is_favourite,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
void tpf_persona_store_change_is_favourite_finish (TpfPersonaStore* self,
                                                   GAsyncResult* _res_,
                                                   GError** error);
static void tpf_persona_change_is_favourite_ready (GObject* source_object,
                                            GAsyncResult* _res_,
                                            gpointer _user_data_);
void _tpf_persona_set_is_favourite (TpfPersona* self,
                                    gboolean is_favourite);
void _tpf_persona_store_set_cache_needs_update (TpfPersonaStore* self);
static void tpf_persona_real_change_email_addresses_data_free (gpointer _data);
static void tpf_persona_real_change_email_addresses_async_ready_wrapper (GObject *source_object,
                                                                  GAsyncResult *res,
                                                                  void *user_data);
static void tpf_persona_real_change_email_addresses (FolksEmailDetails* base,
                                              GeeSet* email_addresses,
                                              GAsyncReadyCallback _callback_,
                                              gpointer _user_data_);
static gboolean tpf_persona_real_change_email_addresses_co (TpfPersonaChangeEmailAddressesData* _data_);
static void _tpf_persona_change_details (TpfPersona* self,
                                  GType t_type,
                                  GBoxedCopyFunc t_dup_func,
                                  GDestroyNotify t_destroy_func,
                                  GeeSet* details,
                                  GeeSet* member_set,
                                  const gchar* field_name,
                                  GAsyncReadyCallback _callback_,
                                  gpointer _user_data_);
static void _tpf_persona_change_details_finish (TpfPersona* self,
                                         GAsyncResult* _res_,
                                         GError** error);
static void tpf_persona_change_email_addresses_ready (GObject* source_object,
                                               GAsyncResult* _res_,
                                               gpointer _user_data_);
static void tpf_persona_real_change_group_data_free (gpointer _data);
static void tpf_persona_real_change_group_async_ready_wrapper (GObject *source_object,
                                                        GAsyncResult *res,
                                                        void *user_data);
static void tpf_persona_real_change_group (FolksGroupDetails* base,
                                    const gchar* group,
                                    gboolean is_member,
                                    GAsyncReadyCallback _callback_,
                                    gpointer _user_data_);
static gboolean tpf_persona_real_change_group_co (TpfPersonaChangeGroupData* _data_);
static void tpf_persona_change_group_ready (GObject* source_object,
                                     GAsyncResult* _res_,
                                     gpointer _user_data_);
static void _tpf_persona_contact_groups_changed (TpfPersona* self,
                                          gchar** added,
                                          int added_length1,
                                          gchar** removed,
                                          int removed_length1);
static void tpf_persona_real_change_groups_data_free (gpointer _data);
static void tpf_persona_real_change_groups_async_ready_wrapper (GObject *source_object,
                                                         GAsyncResult *res,
                                                         void *user_data);
static void tpf_persona_real_change_groups (FolksGroupDetails* base,
                                     GeeSet* groups,
                                     GAsyncReadyCallback _callback_,
                                     gpointer _user_data_);
static gboolean tpf_persona_real_change_groups_co (TpfPersonaChangeGroupsData* _data_);
static void tpf_persona_change_groups_ready (GObject* source_object,
                                      GAsyncResult* _res_,
                                      gpointer _user_data_);
void _tpf_persona_contact_weak_notify (TpfPersona* self);
static void tpf_persona_real_change_phone_numbers_data_free (gpointer _data);
static void tpf_persona_real_change_phone_numbers_async_ready_wrapper (GObject *source_object,
                                                                GAsyncResult *res,
                                                                void *user_data);
static void tpf_persona_real_change_phone_numbers (FolksPhoneDetails* base,
                                            GeeSet* phone_numbers,
                                            GAsyncReadyCallback _callback_,
                                            gpointer _user_data_);
static gboolean tpf_persona_real_change_phone_numbers_co (TpfPersonaChangePhoneNumbersData* _data_);
static void tpf_persona_change_phone_numbers_ready (GObject* source_object,
                                             GAsyncResult* _res_,
                                             gpointer _user_data_);
static void tpf_persona_real_change_urls_data_free (gpointer _data);
static void tpf_persona_real_change_urls_async_ready_wrapper (GObject *source_object,
                                                       GAsyncResult *res,
                                                       void *user_data);
static void tpf_persona_real_change_urls (FolksUrlDetails* base,
                                   GeeSet* urls,
                                   GAsyncReadyCallback _callback_,
                                   gpointer _user_data_);
static gboolean tpf_persona_real_change_urls_co (TpfPersonaChangeUrlsData* _data_);
static void tpf_persona_change_urls_ready (GObject* source_object,
                                    GAsyncResult* _res_,
                                    gpointer _user_data_);
static void _tpf_persona_change_details_data_free (gpointer _data);
static void _tpf_persona_change_details_async_ready_wrapper (GObject *source_object,
                                                      GAsyncResult *res,
                                                      void *user_data);
static gboolean _tpf_persona_change_details_co (TpfPersonaChangeDetailsData* _data_);
void _tpf_persona_store_change_user_details (TpfPersonaStore* self,
                                             TpfPersona* persona,
                                             GeeSet* details,
                                             const gchar* field_name,
                                             GAsyncReadyCallback _callback_,
                                             gpointer _user_data_);
void _tpf_persona_store_change_user_details_finish (TpfPersonaStore* self,
                                                    GAsyncResult* _res_,
                                                    GError** error);
static void _tpf_persona_change_details_ready (GObject* source_object,
                                        GAsyncResult* _res_,
                                        gpointer _user_data_);
TpfPersona* tpf_persona_new (TpContact* contact,
                             TpfPersonaStore* store);
TpfPersona* tpf_persona_construct (GType object_type,
                                   TpContact* contact,
                                   TpfPersonaStore* store);
static void tpf_persona_real_constructed (GObject* base);
static void _tpf_persona_update_writeable_properties (TpfPersona* self);
static gchar** _vala_array_dup1 (gchar** self,
                          int length);
GeeSet* tpf_persona_store_get_supported_fields (TpfPersonaStore* self);
static void _vala_array_add1 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static void _vala_array_add2 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static void _vala_array_add3 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static void _vala_array_add4 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static void _vala_array_add5 (gchar** * array,
                       int* length,
                       int* size,
                       gchar* value);
static void _tpf_persona_contact_notify_contact_info (TpfPersona* self,
                                               gboolean create_if_not_exists,
                                               gboolean emit_notification);
static TpContactInfoField* _vala_TpContactInfoField_copy (TpContactInfoField* self);
static GeeMultiMap* _tpf_persona_afd_params_from_strv (TpfPersona* self,
                                                gchar** parameters,
                                                int parameters_length1);
static void _vala_TpContactInfoField_free (TpContactInfoField* self);
static void __vala_TpContactInfoField_free0_ (gpointer var);
static inline void _g_list_free___vala_TpContactInfoField_free0_ (GList* self);
TpfPersona* tpf_persona_new_from_cache (TpfPersonaStore* store,
                                        const gchar* uid,
                                        const gchar* iid,
                                        const gchar* im_address,
                                        const gchar* protocol,
                                        FolksSmallSet* groups,
                                        gboolean is_favourite,
                                        const gchar* alias,
                                        gboolean is_in_contact_list,
                                        gboolean is_user,
                                        GLoadableIcon* avatar,
                                        GDateTime* birthday,
                                        const gchar* full_name,
                                        FolksSmallSet* email_addresses,
                                        FolksSmallSet* phone_numbers,
                                        FolksSmallSet* urls);
TpfPersona* tpf_persona_construct_from_cache (GType object_type,
                                              TpfPersonaStore* store,
                                              const gchar* uid,
                                              const gchar* iid,
                                              const gchar* im_address,
                                              const gchar* protocol,
                                              FolksSmallSet* groups,
                                              gboolean is_favourite,
                                              const gchar* alias,
                                              gboolean is_in_contact_list,
                                              gboolean is_user,
                                              GLoadableIcon* avatar,
                                              GDateTime* birthday,
                                              const gchar* full_name,
                                              FolksSmallSet* email_addresses,
                                              FolksSmallSet* phone_numbers,
                                              FolksSmallSet* urls);
void tpf_persona_set_is_in_contact_list (TpfPersona* self,
                                         gboolean value);
void _tpf_persona_store_update_avatar_cache (TpfPersonaStore* self,
                                             const gchar* persona_iid,
                                             GFile* avatar_file);
static void _tpf_persona_contact_notify_presence_message (TpfPersona* self);
static void _tpf_persona_contact_notify_presence_type (TpfPersona* self);
static FolksPresenceType _tpf_persona_folks_presence_type_from_tp (TpConnectionPresenceType type);
static void _tpf_persona_contact_notify_client_types (TpfPersona* self);
static void _tpf_persona_contact_notify_presence_status (TpfPersona* self);
static void _tpf_persona_contact_notify_avatar (TpfPersona* self);
GFile* _tpf_persona_store_query_avatar_cache (TpfPersonaStore* self,
                                              const gchar* persona_iid);
TpfPersona* tpf_persona_dup_for_contact (TpContact* contact);
TpfPersonaStore* tpf_persona_store_dup_for_account (TpAccount* account);
TpfPersona* _tpf_persona_store_ensure_persona_for_contact (TpfPersonaStore* self,
                                                           TpContact* contact);
void _tpf_persona_increase_im_interaction_counter (TpfPersona* self,
                                                   GDateTime* converted_datetime);
void _tpf_persona_increase_last_call_interaction_counter (TpfPersona* self,
                                                          GDateTime* converted_datetime);
gboolean tpf_persona_get_is_in_contact_list (TpfPersona* self);
static gchar** _vala_array_dup2 (gchar** self,
                          int length);
TpContact* tpf_persona_get_contact (TpfPersona* self);
static void tpf_persona_set_contact (TpfPersona* self,
                              TpContact* value);
static GObject * tpf_persona_constructor (GType type,
                                   guint n_construct_properties,
                                   GObjectConstructParam * construct_properties);
static void _tpf_persona___lambda16_ (TpfPersona* self,
                               GObject* s,
                               GParamSpec* p);
static void __tpf_persona___lambda16__g_object_notify (GObject* _sender,
                                                GParamSpec* pspec,
                                                gpointer self);
static void _tpf_persona___lambda17_ (TpfPersona* self,
                               GObject* s,
                               GParamSpec* p);
static void __tpf_persona___lambda17__g_object_notify (GObject* _sender,
                                                GParamSpec* pspec,
                                                gpointer self);
static void _tpf_persona___lambda18_ (TpfPersona* self,
                               GObject* s,
                               GParamSpec* p);
static void __tpf_persona___lambda18__g_object_notify (GObject* _sender,
                                                GParamSpec* pspec,
                                                gpointer self);
static void _tpf_persona___lambda19_ (TpfPersona* self,
                               GObject* s,
                               GParamSpec* p);
static void __tpf_persona___lambda19__g_object_notify (GObject* _sender,
                                                GParamSpec* pspec,
                                                gpointer self);
static void _tpf_persona___lambda20_ (TpfPersona* self,
                               GObject* s,
                               GParamSpec* p);
static void __tpf_persona___lambda20__g_object_notify (GObject* _sender,
                                                GParamSpec* pspec,
                                                gpointer self);
static void _tpf_persona___lambda21_ (TpfPersona* self,
                               GObject* s,
                               GParamSpec* p);
static void __tpf_persona___lambda21__g_object_notify (GObject* _sender,
                                                GParamSpec* pspec,
                                                gpointer self);
static void _tpf_persona___lambda22_ (TpfPersona* self,
                               GObject* s,
                               GParamSpec* p);
static void __tpf_persona___lambda22__g_object_notify (GObject* _sender,
                                                GParamSpec* pspec,
                                                gpointer self);
static void _tpf_persona___lambda23_ (TpfPersona* self,
                               gchar** added,
                               int added_length1,
                               gchar** removed,
                               int removed_length1);
static void __tpf_persona___lambda23__tp_contact_contact_groups_changed (TpContact* _sender,
                                                                  gchar** added,
                                                                  gchar** removed,
                                                                  gpointer self);
static void _tpf_persona____lambda24_ (TpfPersona* self,
                                GObject* s,
                                GParamSpec* p);
static void __tpf_persona____lambda24__g_object_notify (GObject* _sender,
                                                 GParamSpec* pspec,
                                                 gpointer self);
static void _tpf_persona___lambda25_ (TpfPersona* self,
                               GObject* s,
                               GParamSpec* p);
static void __tpf_persona___lambda25__g_object_notify (GObject* _sender,
                                                GParamSpec* pspec,
                                                gpointer self);
static void tpf_persona_finalize (GObject * obj);
static void _vala_tpf_persona_get_property (GObject * object,
                                     guint property_id,
                                     GValue * value,
                                     GParamSpec * pspec);
static void _vala_tpf_persona_set_property (GObject * object,
                                     guint property_id,
                                     const GValue * value,
                                     GParamSpec * pspec);
static void _vala_array_destroy (gpointer array,
                          gint array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gint array_length,
                       GDestroyNotify destroy_func);
static gint _vala_array_length (gpointer array);

static const gchar* TPF_PERSONA__linkable_properties[2] = {"im-addresses", NULL};

static guint
_folks_abstract_field_details_hash_static_gee_hash_data_func (gconstpointer v,
                                                              gpointer self)
{
	guint result;
	result = folks_abstract_field_details_hash_static ((FolksAbstractFieldDetails*) v);
#line 402 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 774 "tpf-persona.c"
}


static gboolean
_folks_abstract_field_details_equal_static_gee_equal_data_func (gconstpointer a,
                                                                gconstpointer b,
                                                                gpointer self)
{
	gboolean result;
	result = folks_abstract_field_details_equal_static ((FolksAbstractFieldDetails*) a, (FolksAbstractFieldDetails*) b);
#line 402 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 787 "tpf-persona.c"
}


static void
tpf_persona_real_change_full_name_data_free (gpointer _data)
{
	TpfPersonaChangeFullNameData* _data_;
	_data_ = _data;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (_data_->full_name);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_slice_free (TpfPersonaChangeFullNameData, _data_);
#line 802 "tpf-persona.c"
}


static void
tpf_persona_real_change_full_name_async_ready_wrapper (GObject *source_object,
                                                       GAsyncResult *res,
                                                       void *user_data)
{
	TpfPersonaChangeFullNameData* _task_data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_task_data_->_callback_ != NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 818 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_->_task_complete_ = TRUE;
#line 822 "tpf-persona.c"
}


static gpointer
_g_object_ref0 (gpointer self)
{
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return self ? g_object_ref (self) : NULL;
#line 831 "tpf-persona.c"
}


static void
tpf_persona_real_change_full_name (FolksNameDetails* base,
                                   const gchar* full_name,
                                   GAsyncReadyCallback _callback_,
                                   gpointer _user_data_)
{
	TpfPersona * self;
	TpfPersonaChangeFullNameData* _data_;
	TpfPersona* _tmp0_;
	gchar* _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_slice_new0 (TpfPersonaChangeFullNameData);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_callback_ = _callback_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_real_change_full_name_async_ready_wrapper, _user_data_);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_callback_ == NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_task_complete_ = TRUE;
#line 857 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_real_change_full_name_data_free);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->self = _tmp0_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = g_strdup (full_name);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (_data_->full_name);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->full_name = _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_full_name_co (_data_);
#line 873 "tpf-persona.c"
}


static void
tpf_persona_real_change_full_name_finish (FolksNameDetails* base,
                                          GAsyncResult* _res_,
                                          GError** error)
{
	TpfPersonaChangeFullNameData* _data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (NULL == _data_) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return;
#line 889 "tpf-persona.c"
	}
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.4
   */
static void
tpf_persona_change_full_name_ready (GObject* source_object,
                                    GAsyncResult* _res_,
                                    gpointer _user_data_)
{
	TpfPersonaChangeFullNameData* _data_;
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = _user_data_;
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_source_object_ = source_object;
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_res_ = _res_;
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_task_complete_ = TRUE;
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_full_name_co (_data_);
#line 915 "tpf-persona.c"
}


static gboolean
tpf_persona_real_change_full_name_co (TpfPersonaChangeFullNameData* _data_)
{
#line 124 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	switch (_data_->_state_) {
#line 124 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 0:
#line 926 "tpf-persona.c"
		goto _state_0;
#line 124 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 1:
#line 930 "tpf-persona.c"
		goto _state_1;
		default:
#line 124 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_assert_not_reached ();
#line 935 "tpf-persona.c"
	}
	_state_0:
#line 126 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp0_ = folks_persona_get_store ((FolksPersona*) _data_->self);
#line 126 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp1_ = _data_->_tmp0_;
#line 126 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp2_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp1_, TPF_TYPE_PERSONA_STORE) ? ((TpfPersonaStore*) _data_->_tmp1_) : NULL);
#line 126 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->tpf_store = _data_->_tmp2_;
#line 128 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp3_ = _data_->self->priv->_full_name;
#line 128 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (g_strcmp0 (_data_->full_name, _data_->_tmp3_) == 0) {
#line 129 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (_data_->tpf_store);
#line 129 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 129 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_data_->_state_ != 0) {
#line 129 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 129 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 960 "tpf-persona.c"
			}
		}
#line 129 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_unref (_data_->_async_result);
#line 129 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return FALSE;
#line 967 "tpf-persona.c"
	}
#line 131 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp4_ = _data_->self->priv->_is_constructed;
#line 131 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_tmp4_) {
#line 973 "tpf-persona.c"
		{
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp5_ = _data_->tpf_store;
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_state_ = 1;
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			tpf_persona_store_change_user_full_name (_data_->_tmp5_, _data_->self, _data_->full_name, tpf_persona_change_full_name_ready, _data_);
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return FALSE;
#line 983 "tpf-persona.c"
			_state_1:
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			tpf_persona_store_change_user_full_name_finish (_data_->_tmp5_, _data_->_res_, &_data_->_inner_error_);
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (g_error_matches (_data_->_inner_error_, FOLKS_PERSONA_STORE_ERROR, FOLKS_PERSONA_STORE_ERROR_INVALID_ARGUMENT)) {
#line 991 "tpf-persona.c"
					goto __catch0_folks_persona_store_error_invalid_argument;
				}
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (g_error_matches (_data_->_inner_error_, FOLKS_PERSONA_STORE_ERROR, FOLKS_PERSONA_STORE_ERROR_STORE_OFFLINE)) {
#line 996 "tpf-persona.c"
					goto __catch0_folks_persona_store_error_store_offline;
				}
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (_data_->_inner_error_->domain == FOLKS_PERSONA_STORE_ERROR) {
#line 1001 "tpf-persona.c"
					goto __catch0_folks_persona_store_error;
				}
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_g_object_unref0 (_data_->tpf_store);
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_clear_error (&_data_->_inner_error_);
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_object_unref (_data_->_async_result);
#line 135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				return FALSE;
#line 1014 "tpf-persona.c"
			}
		}
		goto __finally0;
		__catch0_folks_persona_store_error_invalid_argument:
		{
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->e1 = _data_->_inner_error_;
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = NULL;
#line 139 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp6_ = _data_->e1;
#line 139 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp7_ = _data_->_tmp6_->message;
#line 139 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp8_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_NOT_WRITEABLE, _data_->_tmp7_);
#line 139 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = _data_->_tmp8_;
#line 139 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_error_free0 (_data_->e1);
#line 1034 "tpf-persona.c"
			goto __finally0;
		}
		goto __finally0;
		__catch0_folks_persona_store_error_store_offline:
		{
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->e2 = _data_->_inner_error_;
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = NULL;
#line 143 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp9_ = _data_->e2;
#line 143 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp10_ = _data_->_tmp9_->message;
#line 143 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp11_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR, _data_->_tmp10_);
#line 143 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = _data_->_tmp11_;
#line 143 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_error_free0 (_data_->e2);
#line 1054 "tpf-persona.c"
			goto __finally0;
		}
		goto __finally0;
		__catch0_folks_persona_store_error:
		{
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->e3 = _data_->_inner_error_;
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = NULL;
#line 147 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp12_ = _data_->e3;
#line 147 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp13_ = _data_->_tmp12_->message;
#line 147 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp14_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR, _data_->_tmp13_);
#line 147 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = _data_->_tmp14_;
#line 147 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_error_free0 (_data_->e3);
#line 1074 "tpf-persona.c"
			goto __finally0;
		}
		__finally0:
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_g_object_unref0 (_data_->tpf_store);
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_object_unref (_data_->_async_result);
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				return FALSE;
#line 1090 "tpf-persona.c"
			} else {
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_g_object_unref0 (_data_->tpf_store);
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_clear_error (&_data_->_inner_error_);
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_object_unref (_data_->_async_result);
#line 133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				return FALSE;
#line 1102 "tpf-persona.c"
			}
		}
	}
#line 124 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->tpf_store);
#line 124 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 124 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_state_ != 0) {
#line 124 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 124 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1116 "tpf-persona.c"
		}
	}
#line 124 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_unref (_data_->_async_result);
#line 124 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return FALSE;
#line 1123 "tpf-persona.c"
}


static void
tpf_persona_real_change_birthday_data_free (gpointer _data)
{
	TpfPersonaChangeBirthdayData* _data_;
	_data_ = _data;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_date_time_unref0 (_data_->birthday);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_slice_free (TpfPersonaChangeBirthdayData, _data_);
#line 1138 "tpf-persona.c"
}


static void
tpf_persona_real_change_birthday_async_ready_wrapper (GObject *source_object,
                                                      GAsyncResult *res,
                                                      void *user_data)
{
	TpfPersonaChangeBirthdayData* _task_data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_task_data_->_callback_ != NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 1154 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_->_task_complete_ = TRUE;
#line 1158 "tpf-persona.c"
}


static gpointer
_g_date_time_ref0 (gpointer self)
{
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return self ? g_date_time_ref (self) : NULL;
#line 1167 "tpf-persona.c"
}


static void
tpf_persona_real_change_birthday (FolksBirthdayDetails* base,
                                  GDateTime* birthday,
                                  GAsyncReadyCallback _callback_,
                                  gpointer _user_data_)
{
	TpfPersona * self;
	TpfPersonaChangeBirthdayData* _data_;
	TpfPersona* _tmp0_;
	GDateTime* _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_slice_new0 (TpfPersonaChangeBirthdayData);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_callback_ = _callback_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_real_change_birthday_async_ready_wrapper, _user_data_);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_callback_ == NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_task_complete_ = TRUE;
#line 1193 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_real_change_birthday_data_free);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->self = _tmp0_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _g_date_time_ref0 (birthday);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_date_time_unref0 (_data_->birthday);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->birthday = _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_birthday_co (_data_);
#line 1209 "tpf-persona.c"
}


static void
tpf_persona_real_change_birthday_finish (FolksBirthdayDetails* base,
                                         GAsyncResult* _res_,
                                         GError** error)
{
	TpfPersonaChangeBirthdayData* _data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (NULL == _data_) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return;
#line 1225 "tpf-persona.c"
	}
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.4
   */
static void
tpf_persona_change_birthday_ready (GObject* source_object,
                                   GAsyncResult* _res_,
                                   gpointer _user_data_)
{
	TpfPersonaChangeBirthdayData* _data_;
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = _user_data_;
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_source_object_ = source_object;
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_res_ = _res_;
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_task_complete_ = TRUE;
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_birthday_co (_data_);
#line 1251 "tpf-persona.c"
}


static gboolean
tpf_persona_real_change_birthday_co (TpfPersonaChangeBirthdayData* _data_)
{
#line 199 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	switch (_data_->_state_) {
#line 199 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 0:
#line 1262 "tpf-persona.c"
		goto _state_0;
#line 199 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 1:
#line 1266 "tpf-persona.c"
		goto _state_1;
		default:
#line 199 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_assert_not_reached ();
#line 1271 "tpf-persona.c"
	}
	_state_0:
#line 201 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp0_ = folks_persona_get_store ((FolksPersona*) _data_->self);
#line 201 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp1_ = _data_->_tmp0_;
#line 201 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp2_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp1_, TPF_TYPE_PERSONA_STORE) ? ((TpfPersonaStore*) _data_->_tmp1_) : NULL);
#line 201 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->tpf_store = _data_->_tmp2_;
#line 203 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->birthday != NULL) {
#line 203 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp5_ = _data_->self->priv->_birthday;
#line 203 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp4_ = _data_->_tmp5_ != NULL;
#line 1288 "tpf-persona.c"
	} else {
#line 203 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp4_ = FALSE;
#line 1292 "tpf-persona.c"
	}
#line 203 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_tmp4_) {
#line 204 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp6_ = _data_->self->priv->_birthday;
#line 204 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp3_ = g_date_time_equal (_data_->birthday, _data_->_tmp6_);
#line 1300 "tpf-persona.c"
	} else {
#line 203 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp3_ = FALSE;
#line 1304 "tpf-persona.c"
	}
#line 203 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_tmp3_) {
#line 206 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (_data_->tpf_store);
#line 206 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 206 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_data_->_state_ != 0) {
#line 206 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 206 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1318 "tpf-persona.c"
			}
		}
#line 206 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_unref (_data_->_async_result);
#line 206 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return FALSE;
#line 1325 "tpf-persona.c"
	}
#line 209 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp7_ = _data_->self->priv->_is_constructed;
#line 209 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_tmp7_) {
#line 1331 "tpf-persona.c"
		{
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp8_ = _data_->tpf_store;
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_state_ = 1;
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			tpf_persona_store_change_user_birthday (_data_->_tmp8_, _data_->self, _data_->birthday, tpf_persona_change_birthday_ready, _data_);
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return FALSE;
#line 1341 "tpf-persona.c"
			_state_1:
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			tpf_persona_store_change_user_birthday_finish (_data_->_tmp8_, _data_->_res_, &_data_->_inner_error_);
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (g_error_matches (_data_->_inner_error_, FOLKS_PERSONA_STORE_ERROR, FOLKS_PERSONA_STORE_ERROR_INVALID_ARGUMENT)) {
#line 1349 "tpf-persona.c"
					goto __catch1_folks_persona_store_error_invalid_argument;
				}
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (g_error_matches (_data_->_inner_error_, FOLKS_PERSONA_STORE_ERROR, FOLKS_PERSONA_STORE_ERROR_STORE_OFFLINE)) {
#line 1354 "tpf-persona.c"
					goto __catch1_folks_persona_store_error_store_offline;
				}
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (_data_->_inner_error_->domain == FOLKS_PERSONA_STORE_ERROR) {
#line 1359 "tpf-persona.c"
					goto __catch1_folks_persona_store_error;
				}
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_g_object_unref0 (_data_->tpf_store);
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_clear_error (&_data_->_inner_error_);
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_object_unref (_data_->_async_result);
#line 213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				return FALSE;
#line 1372 "tpf-persona.c"
			}
		}
		goto __finally1;
		__catch1_folks_persona_store_error_invalid_argument:
		{
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->e1 = _data_->_inner_error_;
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = NULL;
#line 217 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp9_ = _data_->e1;
#line 217 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp10_ = _data_->_tmp9_->message;
#line 217 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp11_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_NOT_WRITEABLE, _data_->_tmp10_);
#line 217 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = _data_->_tmp11_;
#line 217 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_error_free0 (_data_->e1);
#line 1392 "tpf-persona.c"
			goto __finally1;
		}
		goto __finally1;
		__catch1_folks_persona_store_error_store_offline:
		{
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->e2 = _data_->_inner_error_;
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = NULL;
#line 221 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp12_ = _data_->e2;
#line 221 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp13_ = _data_->_tmp12_->message;
#line 221 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp14_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR, _data_->_tmp13_);
#line 221 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = _data_->_tmp14_;
#line 221 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_error_free0 (_data_->e2);
#line 1412 "tpf-persona.c"
			goto __finally1;
		}
		goto __finally1;
		__catch1_folks_persona_store_error:
		{
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->e3 = _data_->_inner_error_;
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = NULL;
#line 225 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp15_ = _data_->e3;
#line 225 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp16_ = _data_->_tmp15_->message;
#line 225 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp17_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR, _data_->_tmp16_);
#line 225 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = _data_->_tmp17_;
#line 225 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_error_free0 (_data_->e3);
#line 1432 "tpf-persona.c"
			goto __finally1;
		}
		__finally1:
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_g_object_unref0 (_data_->tpf_store);
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_object_unref (_data_->_async_result);
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				return FALSE;
#line 1448 "tpf-persona.c"
			} else {
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_g_object_unref0 (_data_->tpf_store);
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_clear_error (&_data_->_inner_error_);
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_object_unref (_data_->_async_result);
#line 211 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				return FALSE;
#line 1460 "tpf-persona.c"
			}
		}
	}
#line 199 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->tpf_store);
#line 199 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 199 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_state_ != 0) {
#line 199 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 199 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1474 "tpf-persona.c"
		}
	}
#line 199 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_unref (_data_->_async_result);
#line 199 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return FALSE;
#line 1481 "tpf-persona.c"
}


static void
tpf_persona_real_change_alias_data_free (gpointer _data)
{
	TpfPersonaChangeAliasData* _data_;
	_data_ = _data;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (_data_->alias);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_slice_free (TpfPersonaChangeAliasData, _data_);
#line 1496 "tpf-persona.c"
}


static void
tpf_persona_real_change_alias_async_ready_wrapper (GObject *source_object,
                                                   GAsyncResult *res,
                                                   void *user_data)
{
	TpfPersonaChangeAliasData* _task_data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_task_data_->_callback_ != NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 1512 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_->_task_complete_ = TRUE;
#line 1516 "tpf-persona.c"
}


static void
tpf_persona_real_change_alias (FolksAliasDetails* base,
                               const gchar* alias,
                               GAsyncReadyCallback _callback_,
                               gpointer _user_data_)
{
	TpfPersona * self;
	TpfPersonaChangeAliasData* _data_;
	TpfPersona* _tmp0_;
	gchar* _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_slice_new0 (TpfPersonaChangeAliasData);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_callback_ = _callback_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_real_change_alias_async_ready_wrapper, _user_data_);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_callback_ == NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_task_complete_ = TRUE;
#line 1542 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_real_change_alias_data_free);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->self = _tmp0_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = g_strdup (alias);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (_data_->alias);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->alias = _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_alias_co (_data_);
#line 1558 "tpf-persona.c"
}


static void
tpf_persona_real_change_alias_finish (FolksAliasDetails* base,
                                      GAsyncResult* _res_,
                                      GError** error)
{
	TpfPersonaChangeAliasData* _data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (NULL == _data_) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return;
#line 1574 "tpf-persona.c"
	}
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.2
   */
static void
tpf_persona_change_alias_ready (GObject* source_object,
                                GAsyncResult* _res_,
                                gpointer _user_data_)
{
	TpfPersonaChangeAliasData* _data_;
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = _user_data_;
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_source_object_ = source_object;
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_res_ = _res_;
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_task_complete_ = TRUE;
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_alias_co (_data_);
#line 1600 "tpf-persona.c"
}


static gboolean
tpf_persona_real_change_alias_co (TpfPersonaChangeAliasData* _data_)
{
#line 304 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	switch (_data_->_state_) {
#line 304 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 0:
#line 1611 "tpf-persona.c"
		goto _state_0;
#line 304 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 1:
#line 1615 "tpf-persona.c"
		goto _state_1;
		default:
#line 304 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_assert_not_reached ();
#line 1620 "tpf-persona.c"
	}
	_state_0:
#line 306 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp0_ = _data_->self->priv->_alias;
#line 306 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (g_strcmp0 (_data_->_tmp0_, _data_->alias) == 0) {
#line 308 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 308 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_data_->_state_ != 0) {
#line 308 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 308 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1635 "tpf-persona.c"
			}
		}
#line 308 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_unref (_data_->_async_result);
#line 308 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return FALSE;
#line 1642 "tpf-persona.c"
	}
#line 311 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp1_ = _data_->self->priv->_is_constructed;
#line 311 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_tmp1_) {
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp2_ = folks_persona_get_store ((FolksPersona*) _data_->self);
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp3_ = _data_->_tmp2_;
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_state_ = 1;
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		tpf_persona_store_change_alias (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp3_, TPF_TYPE_PERSONA_STORE, TpfPersonaStore), _data_->self, _data_->alias, tpf_persona_change_alias_ready, _data_);
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return FALSE;
#line 1658 "tpf-persona.c"
		_state_1:
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		tpf_persona_store_change_alias_finish (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp3_, TPF_TYPE_PERSONA_STORE, TpfPersonaStore), _data_->_res_, &_data_->_inner_error_);
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_object_unref (_data_->_async_result);
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				return FALSE;
#line 1672 "tpf-persona.c"
			} else {
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_clear_error (&_data_->_inner_error_);
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_object_unref (_data_->_async_result);
#line 313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				return FALSE;
#line 1682 "tpf-persona.c"
			}
		}
	}
#line 304 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 304 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_state_ != 0) {
#line 304 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 304 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1694 "tpf-persona.c"
		}
	}
#line 304 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_unref (_data_->_async_result);
#line 304 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return FALSE;
#line 1701 "tpf-persona.c"
}


static void
tpf_persona_real_change_is_favourite_data_free (gpointer _data)
{
	TpfPersonaChangeIsFavouriteData* _data_;
	_data_ = _data;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_slice_free (TpfPersonaChangeIsFavouriteData, _data_);
#line 1714 "tpf-persona.c"
}


static void
tpf_persona_real_change_is_favourite_async_ready_wrapper (GObject *source_object,
                                                          GAsyncResult *res,
                                                          void *user_data)
{
	TpfPersonaChangeIsFavouriteData* _task_data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_task_data_->_callback_ != NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 1730 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_->_task_complete_ = TRUE;
#line 1734 "tpf-persona.c"
}


static void
tpf_persona_real_change_is_favourite (FolksFavouriteDetails* base,
                                      gboolean is_favourite,
                                      GAsyncReadyCallback _callback_,
                                      gpointer _user_data_)
{
	TpfPersona * self;
	TpfPersonaChangeIsFavouriteData* _data_;
	TpfPersona* _tmp0_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_slice_new0 (TpfPersonaChangeIsFavouriteData);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_callback_ = _callback_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_real_change_is_favourite_async_ready_wrapper, _user_data_);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_callback_ == NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_task_complete_ = TRUE;
#line 1759 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_real_change_is_favourite_data_free);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->self = _tmp0_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->is_favourite = is_favourite;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_is_favourite_co (_data_);
#line 1771 "tpf-persona.c"
}


static void
tpf_persona_real_change_is_favourite_finish (FolksFavouriteDetails* base,
                                             GAsyncResult* _res_,
                                             GError** error)
{
	TpfPersonaChangeIsFavouriteData* _data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (NULL == _data_) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return;
#line 1787 "tpf-persona.c"
	}
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.2
   */
static void
tpf_persona_change_is_favourite_ready (GObject* source_object,
                                       GAsyncResult* _res_,
                                       gpointer _user_data_)
{
	TpfPersonaChangeIsFavouriteData* _data_;
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = _user_data_;
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_source_object_ = source_object;
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_res_ = _res_;
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_task_complete_ = TRUE;
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_is_favourite_co (_data_);
#line 1813 "tpf-persona.c"
}


static gboolean
tpf_persona_real_change_is_favourite_co (TpfPersonaChangeIsFavouriteData* _data_)
{
#line 338 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	switch (_data_->_state_) {
#line 338 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 0:
#line 1824 "tpf-persona.c"
		goto _state_0;
#line 338 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 1:
#line 1828 "tpf-persona.c"
		goto _state_1;
		default:
#line 338 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_assert_not_reached ();
#line 1833 "tpf-persona.c"
	}
	_state_0:
#line 340 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp0_ = _data_->self->priv->_is_favourite;
#line 340 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_tmp0_ == _data_->is_favourite) {
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_data_->_state_ != 0) {
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1848 "tpf-persona.c"
			}
		}
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_unref (_data_->_async_result);
#line 342 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return FALSE;
#line 1855 "tpf-persona.c"
	}
#line 345 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp1_ = _data_->self->priv->_is_constructed;
#line 345 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_tmp1_) {
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp2_ = folks_persona_get_store ((FolksPersona*) _data_->self);
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp3_ = _data_->_tmp2_;
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_state_ = 1;
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		tpf_persona_store_change_is_favourite (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp3_, TPF_TYPE_PERSONA_STORE, TpfPersonaStore), (FolksPersona*) _data_->self, _data_->is_favourite, tpf_persona_change_is_favourite_ready, _data_);
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return FALSE;
#line 1871 "tpf-persona.c"
		_state_1:
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		tpf_persona_store_change_is_favourite_finish (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp3_, TPF_TYPE_PERSONA_STORE, TpfPersonaStore), _data_->_res_, &_data_->_inner_error_);
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_object_unref (_data_->_async_result);
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				return FALSE;
#line 1885 "tpf-persona.c"
			} else {
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_clear_error (&_data_->_inner_error_);
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_object_unref (_data_->_async_result);
#line 347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				return FALSE;
#line 1895 "tpf-persona.c"
			}
		}
	}
#line 338 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 338 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_state_ != 0) {
#line 338 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 338 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 1907 "tpf-persona.c"
		}
	}
#line 338 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_unref (_data_->_async_result);
#line 338 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return FALSE;
#line 1914 "tpf-persona.c"
}


void
_tpf_persona_set_is_favourite (TpfPersona* self,
                               gboolean is_favourite)
{
	gboolean _tmp0_;
	FolksPersonaStore* _tmp1_;
	FolksPersonaStore* _tmp2_;
#line 355 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (self != NULL);
#line 357 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_is_favourite;
#line 357 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp0_ == is_favourite) {
#line 359 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return;
#line 1933 "tpf-persona.c"
	}
#line 362 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_is_favourite = is_favourite;
#line 363 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_notify ((GObject*) self, "is-favourite");
#line 366 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = folks_persona_get_store ((FolksPersona*) self);
#line 366 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp2_ = _tmp1_;
#line 366 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_store_set_cache_needs_update (G_TYPE_CHECK_INSTANCE_CAST (_tmp2_, TPF_TYPE_PERSONA_STORE, TpfPersonaStore));
#line 1945 "tpf-persona.c"
}


static void
tpf_persona_real_change_email_addresses_data_free (gpointer _data)
{
	TpfPersonaChangeEmailAddressesData* _data_;
	_data_ = _data;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->email_addresses);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_slice_free (TpfPersonaChangeEmailAddressesData, _data_);
#line 1960 "tpf-persona.c"
}


static void
tpf_persona_real_change_email_addresses_async_ready_wrapper (GObject *source_object,
                                                             GAsyncResult *res,
                                                             void *user_data)
{
	TpfPersonaChangeEmailAddressesData* _task_data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_task_data_->_callback_ != NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 1976 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_->_task_complete_ = TRUE;
#line 1980 "tpf-persona.c"
}


static void
tpf_persona_real_change_email_addresses (FolksEmailDetails* base,
                                         GeeSet* email_addresses,
                                         GAsyncReadyCallback _callback_,
                                         gpointer _user_data_)
{
	TpfPersona * self;
	TpfPersonaChangeEmailAddressesData* _data_;
	TpfPersona* _tmp0_;
	GeeSet* _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_slice_new0 (TpfPersonaChangeEmailAddressesData);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_callback_ = _callback_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_real_change_email_addresses_async_ready_wrapper, _user_data_);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_callback_ == NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_task_complete_ = TRUE;
#line 2006 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_real_change_email_addresses_data_free);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->self = _tmp0_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _g_object_ref0 (email_addresses);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->email_addresses);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->email_addresses = _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_email_addresses_co (_data_);
#line 2022 "tpf-persona.c"
}


static void
tpf_persona_real_change_email_addresses_finish (FolksEmailDetails* base,
                                                GAsyncResult* _res_,
                                                GError** error)
{
	TpfPersonaChangeEmailAddressesData* _data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (NULL == _data_) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return;
#line 2038 "tpf-persona.c"
	}
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.4
   */
static void
tpf_persona_change_email_addresses_ready (GObject* source_object,
                                          GAsyncResult* _res_,
                                          gpointer _user_data_)
{
	TpfPersonaChangeEmailAddressesData* _data_;
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = _user_data_;
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_source_object_ = source_object;
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_res_ = _res_;
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_task_complete_ = TRUE;
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_email_addresses_co (_data_);
#line 2064 "tpf-persona.c"
}


static gboolean
tpf_persona_real_change_email_addresses_co (TpfPersonaChangeEmailAddressesData* _data_)
{
#line 393 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	switch (_data_->_state_) {
#line 393 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 0:
#line 2075 "tpf-persona.c"
		goto _state_0;
#line 393 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 1:
#line 2079 "tpf-persona.c"
		goto _state_1;
		default:
#line 393 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_assert_not_reached ();
#line 2084 "tpf-persona.c"
	}
	_state_0:
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp0_ = _data_->self->priv->_email_addresses;
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_state_ = 1;
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_change_details (_data_->self, FOLKS_TYPE_EMAIL_FIELD_DETAILS, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, _data_->email_addresses, (GeeSet*) _data_->_tmp0_, "email", tpf_persona_change_email_addresses_ready, _data_);
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return FALSE;
#line 2095 "tpf-persona.c"
	_state_1:
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_change_details_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_object_unref (_data_->_async_result);
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return FALSE;
#line 2109 "tpf-persona.c"
		} else {
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_clear_error (&_data_->_inner_error_);
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_object_unref (_data_->_async_result);
#line 396 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return FALSE;
#line 2119 "tpf-persona.c"
		}
	}
#line 393 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 393 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_state_ != 0) {
#line 393 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 393 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2130 "tpf-persona.c"
		}
	}
#line 393 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_unref (_data_->_async_result);
#line 393 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return FALSE;
#line 2137 "tpf-persona.c"
}


static void
tpf_persona_real_change_group_data_free (gpointer _data)
{
	TpfPersonaChangeGroupData* _data_;
	_data_ = _data;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (_data_->group);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_slice_free (TpfPersonaChangeGroupData, _data_);
#line 2152 "tpf-persona.c"
}


static void
tpf_persona_real_change_group_async_ready_wrapper (GObject *source_object,
                                                   GAsyncResult *res,
                                                   void *user_data)
{
	TpfPersonaChangeGroupData* _task_data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_task_data_->_callback_ != NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 2168 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_->_task_complete_ = TRUE;
#line 2172 "tpf-persona.c"
}


static void
tpf_persona_real_change_group (FolksGroupDetails* base,
                               const gchar* group,
                               gboolean is_member,
                               GAsyncReadyCallback _callback_,
                               gpointer _user_data_)
{
	TpfPersona * self;
	TpfPersonaChangeGroupData* _data_;
	TpfPersona* _tmp0_;
	gchar* _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_slice_new0 (TpfPersonaChangeGroupData);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_callback_ = _callback_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_real_change_group_async_ready_wrapper, _user_data_);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_callback_ == NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_task_complete_ = TRUE;
#line 2199 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_real_change_group_data_free);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->self = _tmp0_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = g_strdup (group);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (_data_->group);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->group = _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->is_member = is_member;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_group_co (_data_);
#line 2217 "tpf-persona.c"
}


static void
tpf_persona_real_change_group_finish (FolksGroupDetails* base,
                                      GAsyncResult* _res_,
                                      GError** error)
{
	TpfPersonaChangeGroupData* _data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (NULL == _data_) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return;
#line 2233 "tpf-persona.c"
	}
}


/**
   * Add or remove the Persona from the specified group.
   *
   * See {@link Folks.GroupDetails.change_group}.
   *
   * @throws Folks.PropertyError.UNKNOWN_ERROR if changing group membership
   * failed
   */
static void
tpf_persona_change_group_ready (GObject* source_object,
                                GAsyncResult* _res_,
                                gpointer _user_data_)
{
	TpfPersonaChangeGroupData* _data_;
#line 521 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = _user_data_;
#line 521 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_source_object_ = source_object;
#line 521 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_res_ = _res_;
#line 521 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_task_complete_ = TRUE;
#line 521 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_group_co (_data_);
#line 2262 "tpf-persona.c"
}


static gboolean
tpf_persona_real_change_group_co (TpfPersonaChangeGroupData* _data_)
{
#line 500 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	switch (_data_->_state_) {
#line 500 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 0:
#line 2273 "tpf-persona.c"
		goto _state_0;
#line 500 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 1:
#line 2277 "tpf-persona.c"
		goto _state_1;
#line 500 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 2:
#line 2281 "tpf-persona.c"
		goto _state_2;
		default:
#line 500 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_assert_not_reached ();
#line 2286 "tpf-persona.c"
	}
	_state_0:
#line 505 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp0_ = _data_->self->priv->_contact;
#line 505 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp1_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp0_, tp_contact_get_type (), TpContact));
#line 505 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->contact = _data_->_tmp1_;
#line 507 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp2_ = _data_->contact;
#line 507 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_tmp2_ == NULL) {
#line 510 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp3_ = g_error_new (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_UNAVAILABLE, _ ("Failed to change group membership: %s"), _ ("Account is offline."));
#line 510 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_inner_error_ = _data_->_tmp3_;
#line 510 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 510 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (_data_->contact);
#line 510 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_unref (_data_->_async_result);
#line 510 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return FALSE;
#line 2311 "tpf-persona.c"
	}
	{
#line 519 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_data_->is_member) {
#line 519 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp5_ = _data_->self->priv->_groups;
#line 519 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp4_ = !gee_abstract_collection_contains ((GeeAbstractCollection*) _data_->_tmp5_, _data_->group);
#line 2320 "tpf-persona.c"
		} else {
#line 519 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp4_ = FALSE;
#line 2324 "tpf-persona.c"
		}
#line 519 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_data_->_tmp4_) {
#line 521 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp6_ = _data_->contact;
#line 521 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_state_ = 1;
#line 521 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			tp_contact_add_to_group_async (_data_->_tmp6_, _data_->group, tpf_persona_change_group_ready, _data_);
#line 521 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return FALSE;
#line 2336 "tpf-persona.c"
			_state_1:
#line 521 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			tp_contact_add_to_group_finish (_data_->_tmp6_, _data_->_res_, &_data_->_inner_error_);
#line 521 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2342 "tpf-persona.c"
				goto __catch2_g_error;
			}
		} else {
#line 523 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			if (!_data_->is_member) {
#line 523 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_data_->_tmp8_ = _data_->self->priv->_groups;
#line 523 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_data_->_tmp7_ = gee_abstract_collection_contains ((GeeAbstractCollection*) _data_->_tmp8_, _data_->group);
#line 2352 "tpf-persona.c"
			} else {
#line 523 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_data_->_tmp7_ = FALSE;
#line 2356 "tpf-persona.c"
			}
#line 523 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			if (_data_->_tmp7_) {
#line 525 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_data_->_tmp9_ = _data_->contact;
#line 525 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_data_->_state_ = 2;
#line 525 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				tp_contact_remove_from_group_async (_data_->_tmp9_, _data_->group, tpf_persona_change_group_ready, _data_);
#line 525 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				return FALSE;
#line 2368 "tpf-persona.c"
				_state_2:
#line 525 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				tp_contact_remove_from_group_finish (_data_->_tmp9_, _data_->_res_, &_data_->_inner_error_);
#line 525 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2374 "tpf-persona.c"
					goto __catch2_g_error;
				}
			}
		}
	}
	goto __finally2;
	__catch2_g_error:
	{
#line 517 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->e = _data_->_inner_error_;
#line 517 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_inner_error_ = NULL;
#line 530 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp10_ = _data_->e;
#line 530 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp11_ = _data_->_tmp10_->message;
#line 530 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp12_ = g_error_new (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR, _ ("Failed to change group membership: %s"), _data_->_tmp11_);
#line 530 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_inner_error_ = _data_->_tmp12_;
#line 530 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_error_free0 (_data_->e);
#line 2397 "tpf-persona.c"
		goto __finally2;
	}
	__finally2:
#line 517 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 517 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 517 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (_data_->contact);
#line 517 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_unref (_data_->_async_result);
#line 517 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return FALSE;
#line 2411 "tpf-persona.c"
	}
#line 500 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->contact);
#line 500 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 500 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_state_ != 0) {
#line 500 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 500 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2423 "tpf-persona.c"
		}
	}
#line 500 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_unref (_data_->_async_result);
#line 500 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return FALSE;
#line 2430 "tpf-persona.c"
}


static void
_tpf_persona_contact_groups_changed (TpfPersona* self,
                                     gchar** added,
                                     int added_length1,
                                     gchar** removed,
                                     int removed_length1)
{
	gboolean changed = FALSE;
	gboolean _tmp8_;
#line 539 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (self != NULL);
#line 541 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	changed = FALSE;
#line 2447 "tpf-persona.c"
	{
		gchar** group_collection = NULL;
		gint group_collection_length1 = 0;
		gint _group_collection_size_ = 0;
		gint group_it = 0;
#line 543 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		group_collection = added;
#line 543 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		group_collection_length1 = added_length1;
#line 543 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		for (group_it = 0; group_it < added_length1; group_it = group_it + 1) {
#line 2459 "tpf-persona.c"
			gchar* _tmp0_;
			gchar* group = NULL;
#line 543 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp0_ = g_strdup (group_collection[group_it]);
#line 543 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			group = _tmp0_;
#line 2466 "tpf-persona.c"
			{
				FolksSmallSet* _tmp1_;
				const gchar* _tmp2_;
#line 545 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tmp1_ = self->priv->_groups;
#line 545 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tmp2_ = group;
#line 545 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (gee_abstract_collection_add ((GeeAbstractCollection*) _tmp1_, _tmp2_) == TRUE) {
#line 2476 "tpf-persona.c"
					const gchar* _tmp3_;
#line 547 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					changed = TRUE;
#line 548 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					_tmp3_ = group;
#line 548 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					g_signal_emit_by_name ((FolksGroupDetails*) self, "group-changed", _tmp3_, TRUE);
#line 2484 "tpf-persona.c"
				}
#line 543 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_g_free0 (group);
#line 2488 "tpf-persona.c"
			}
		}
	}
	{
		gchar** group_collection = NULL;
		gint group_collection_length1 = 0;
		gint _group_collection_size_ = 0;
		gint group_it = 0;
#line 552 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		group_collection = removed;
#line 552 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		group_collection_length1 = removed_length1;
#line 552 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		for (group_it = 0; group_it < removed_length1; group_it = group_it + 1) {
#line 2503 "tpf-persona.c"
			gchar* _tmp4_;
			gchar* group = NULL;
#line 552 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp4_ = g_strdup (group_collection[group_it]);
#line 552 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			group = _tmp4_;
#line 2510 "tpf-persona.c"
			{
				FolksSmallSet* _tmp5_;
				const gchar* _tmp6_;
#line 554 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tmp5_ = self->priv->_groups;
#line 554 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tmp6_ = group;
#line 554 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (gee_abstract_collection_remove ((GeeAbstractCollection*) _tmp5_, _tmp6_) == TRUE) {
#line 2520 "tpf-persona.c"
					const gchar* _tmp7_;
#line 556 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					changed = TRUE;
#line 557 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					_tmp7_ = group;
#line 557 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					g_signal_emit_by_name ((FolksGroupDetails*) self, "group-changed", _tmp7_, FALSE);
#line 2528 "tpf-persona.c"
				}
#line 552 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_g_free0 (group);
#line 2532 "tpf-persona.c"
			}
		}
	}
#line 562 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp8_ = changed;
#line 562 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp8_ == TRUE) {
#line 2540 "tpf-persona.c"
		FolksPersonaStore* _tmp9_;
		FolksPersonaStore* _tmp10_;
#line 564 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_notify ((GObject*) self, "groups");
#line 567 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp9_ = folks_persona_get_store ((FolksPersona*) self);
#line 567 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp10_ = _tmp9_;
#line 567 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tpf_persona_store_set_cache_needs_update (G_TYPE_CHECK_INSTANCE_CAST (_tmp10_, TPF_TYPE_PERSONA_STORE, TpfPersonaStore));
#line 2551 "tpf-persona.c"
	}
}


static void
tpf_persona_real_change_groups_data_free (gpointer _data)
{
	TpfPersonaChangeGroupsData* _data_;
	_data_ = _data;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->groups);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_slice_free (TpfPersonaChangeGroupsData, _data_);
#line 2567 "tpf-persona.c"
}


static void
tpf_persona_real_change_groups_async_ready_wrapper (GObject *source_object,
                                                    GAsyncResult *res,
                                                    void *user_data)
{
	TpfPersonaChangeGroupsData* _task_data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_task_data_->_callback_ != NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 2583 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_->_task_complete_ = TRUE;
#line 2587 "tpf-persona.c"
}


static void
tpf_persona_real_change_groups (FolksGroupDetails* base,
                                GeeSet* groups,
                                GAsyncReadyCallback _callback_,
                                gpointer _user_data_)
{
	TpfPersona * self;
	TpfPersonaChangeGroupsData* _data_;
	TpfPersona* _tmp0_;
	GeeSet* _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_slice_new0 (TpfPersonaChangeGroupsData);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_callback_ = _callback_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_real_change_groups_async_ready_wrapper, _user_data_);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_callback_ == NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_task_complete_ = TRUE;
#line 2613 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_real_change_groups_data_free);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->self = _tmp0_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _g_object_ref0 (groups);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->groups);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->groups = _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_groups_co (_data_);
#line 2629 "tpf-persona.c"
}


static void
tpf_persona_real_change_groups_finish (FolksGroupDetails* base,
                                       GAsyncResult* _res_,
                                       GError** error)
{
	TpfPersonaChangeGroupsData* _data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (NULL == _data_) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return;
#line 2645 "tpf-persona.c"
	}
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.2
   */
static void
tpf_persona_change_groups_ready (GObject* source_object,
                                 GAsyncResult* _res_,
                                 gpointer _user_data_)
{
	TpfPersonaChangeGroupsData* _data_;
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = _user_data_;
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_source_object_ = source_object;
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_res_ = _res_;
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_task_complete_ = TRUE;
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_groups_co (_data_);
#line 2671 "tpf-persona.c"
}


static gboolean
tpf_persona_real_change_groups_co (TpfPersonaChangeGroupsData* _data_)
{
#line 576 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	switch (_data_->_state_) {
#line 576 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 0:
#line 2682 "tpf-persona.c"
		goto _state_0;
#line 576 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 1:
#line 2686 "tpf-persona.c"
		goto _state_1;
		default:
#line 576 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_assert_not_reached ();
#line 2691 "tpf-persona.c"
	}
	_state_0:
#line 578 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp0_ = _data_->self->priv->_contact;
#line 578 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp1_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_data_->_tmp0_, tp_contact_get_type (), TpContact));
#line 578 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->contact = _data_->_tmp1_;
#line 580 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp2_ = _data_->contact;
#line 580 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_tmp2_ == NULL) {
#line 583 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp3_ = g_error_new (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_UNAVAILABLE, _ ("Failed to change group membership: %s"), _ ("Account is offline."));
#line 583 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_inner_error_ = _data_->_tmp3_;
#line 583 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 583 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 583 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_object_unref0 (_data_->contact);
#line 583 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_object_unref (_data_->_async_result);
#line 583 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return FALSE;
#line 2718 "tpf-persona.c"
		} else {
#line 583 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_object_unref0 (_data_->contact);
#line 583 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 583 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_clear_error (&_data_->_inner_error_);
#line 583 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_object_unref (_data_->_async_result);
#line 583 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return FALSE;
#line 2730 "tpf-persona.c"
		}
	}
	{
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp4_ = _data_->contact;
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp5_ = 0;
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp6_ = gee_collection_to_array ((GeeCollection*) _data_->groups, &_data_->_tmp5_);
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp7_ = _data_->_tmp6_;
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp7__length1 = _data_->_tmp5_;
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_state_ = 1;
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		tp_contact_set_contact_groups_async (_data_->_tmp4_, _data_->_tmp5_, _data_->_tmp7_, tpf_persona_change_groups_ready, _data_);
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return FALSE;
#line 2750 "tpf-persona.c"
		_state_1:
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		tp_contact_set_contact_groups_finish (_data_->_tmp4_, _data_->_res_, &_data_->_inner_error_);
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp7_ = (_vala_array_free (_data_->_tmp7_, _data_->_tmp7__length1, (GDestroyNotify) g_free), NULL);
#line 592 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 2758 "tpf-persona.c"
			goto __catch3_g_error;
		}
	}
	goto __finally3;
	__catch3_g_error:
	{
#line 590 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->e = _data_->_inner_error_;
#line 590 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_inner_error_ = NULL;
#line 596 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp8_ = _data_->e;
#line 596 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp9_ = _data_->_tmp8_->message;
#line 596 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp10_ = g_error_new (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR, _ ("Failed to change group membership: %s"), _data_->_tmp9_);
#line 596 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_inner_error_ = _data_->_tmp10_;
#line 596 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_error_free0 (_data_->e);
#line 2779 "tpf-persona.c"
		goto __finally3;
	}
	__finally3:
#line 590 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 590 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 590 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 590 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_object_unref0 (_data_->contact);
#line 590 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_object_unref (_data_->_async_result);
#line 590 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return FALSE;
#line 2795 "tpf-persona.c"
		} else {
#line 590 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_object_unref0 (_data_->contact);
#line 590 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 590 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_clear_error (&_data_->_inner_error_);
#line 590 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_object_unref (_data_->_async_result);
#line 590 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return FALSE;
#line 2807 "tpf-persona.c"
		}
	}
#line 576 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->contact);
#line 576 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 576 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_state_ != 0) {
#line 576 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 576 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 2820 "tpf-persona.c"
		}
	}
#line 576 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_unref (_data_->_async_result);
#line 576 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return FALSE;
#line 2827 "tpf-persona.c"
}


void
_tpf_persona_contact_weak_notify (TpfPersona* self)
{
	TpContact* _tmp0_;
	TpContact* _tmp1_;
#line 611 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (self != NULL);
#line 613 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_contact;
#line 613 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp0_ == NULL) {
#line 614 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return;
#line 2844 "tpf-persona.c"
	}
#line 616 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = self->priv->_contact;
#line 616 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_debug ("tpf-persona.vala:616: TpContact %p destroyed; setting ._contact = null" \
" in Persona %p", _tmp1_, self);
#line 619 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_contact = NULL;
#line 620 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_notify ((GObject*) self, "contact");
#line 2854 "tpf-persona.c"
}


static void
tpf_persona_real_change_phone_numbers_data_free (gpointer _data)
{
	TpfPersonaChangePhoneNumbersData* _data_;
	_data_ = _data;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->phone_numbers);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_slice_free (TpfPersonaChangePhoneNumbersData, _data_);
#line 2869 "tpf-persona.c"
}


static void
tpf_persona_real_change_phone_numbers_async_ready_wrapper (GObject *source_object,
                                                           GAsyncResult *res,
                                                           void *user_data)
{
	TpfPersonaChangePhoneNumbersData* _task_data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_task_data_->_callback_ != NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 2885 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_->_task_complete_ = TRUE;
#line 2889 "tpf-persona.c"
}


static void
tpf_persona_real_change_phone_numbers (FolksPhoneDetails* base,
                                       GeeSet* phone_numbers,
                                       GAsyncReadyCallback _callback_,
                                       gpointer _user_data_)
{
	TpfPersona * self;
	TpfPersonaChangePhoneNumbersData* _data_;
	TpfPersona* _tmp0_;
	GeeSet* _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_slice_new0 (TpfPersonaChangePhoneNumbersData);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_callback_ = _callback_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_real_change_phone_numbers_async_ready_wrapper, _user_data_);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_callback_ == NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_task_complete_ = TRUE;
#line 2915 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_real_change_phone_numbers_data_free);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->self = _tmp0_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _g_object_ref0 (phone_numbers);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->phone_numbers);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->phone_numbers = _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_phone_numbers_co (_data_);
#line 2931 "tpf-persona.c"
}


static void
tpf_persona_real_change_phone_numbers_finish (FolksPhoneDetails* base,
                                              GAsyncResult* _res_,
                                              GError** error)
{
	TpfPersonaChangePhoneNumbersData* _data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (NULL == _data_) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return;
#line 2947 "tpf-persona.c"
	}
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.4
   */
static void
tpf_persona_change_phone_numbers_ready (GObject* source_object,
                                        GAsyncResult* _res_,
                                        gpointer _user_data_)
{
	TpfPersonaChangePhoneNumbersData* _data_;
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = _user_data_;
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_source_object_ = source_object;
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_res_ = _res_;
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_task_complete_ = TRUE;
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_phone_numbers_co (_data_);
#line 2973 "tpf-persona.c"
}


static gboolean
tpf_persona_real_change_phone_numbers_co (TpfPersonaChangePhoneNumbersData* _data_)
{
#line 675 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	switch (_data_->_state_) {
#line 675 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 0:
#line 2984 "tpf-persona.c"
		goto _state_0;
#line 675 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 1:
#line 2988 "tpf-persona.c"
		goto _state_1;
		default:
#line 675 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_assert_not_reached ();
#line 2993 "tpf-persona.c"
	}
	_state_0:
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp0_ = _data_->self->priv->_phone_numbers;
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_state_ = 1;
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_change_details (_data_->self, FOLKS_TYPE_PHONE_FIELD_DETAILS, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, _data_->phone_numbers, (GeeSet*) _data_->_tmp0_, "tel", tpf_persona_change_phone_numbers_ready, _data_);
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return FALSE;
#line 3004 "tpf-persona.c"
	_state_1:
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_change_details_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_object_unref (_data_->_async_result);
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return FALSE;
#line 3018 "tpf-persona.c"
		} else {
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_clear_error (&_data_->_inner_error_);
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_object_unref (_data_->_async_result);
#line 678 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return FALSE;
#line 3028 "tpf-persona.c"
		}
	}
#line 675 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 675 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_state_ != 0) {
#line 675 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 675 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 3039 "tpf-persona.c"
		}
	}
#line 675 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_unref (_data_->_async_result);
#line 675 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return FALSE;
#line 3046 "tpf-persona.c"
}


static void
tpf_persona_real_change_urls_data_free (gpointer _data)
{
	TpfPersonaChangeUrlsData* _data_;
	_data_ = _data;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->urls);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_slice_free (TpfPersonaChangeUrlsData, _data_);
#line 3061 "tpf-persona.c"
}


static void
tpf_persona_real_change_urls_async_ready_wrapper (GObject *source_object,
                                                  GAsyncResult *res,
                                                  void *user_data)
{
	TpfPersonaChangeUrlsData* _task_data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_task_data_->_callback_ != NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 3077 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_->_task_complete_ = TRUE;
#line 3081 "tpf-persona.c"
}


static void
tpf_persona_real_change_urls (FolksUrlDetails* base,
                              GeeSet* urls,
                              GAsyncReadyCallback _callback_,
                              gpointer _user_data_)
{
	TpfPersona * self;
	TpfPersonaChangeUrlsData* _data_;
	TpfPersona* _tmp0_;
	GeeSet* _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_slice_new0 (TpfPersonaChangeUrlsData);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_callback_ = _callback_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, tpf_persona_real_change_urls_async_ready_wrapper, _user_data_);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_callback_ == NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_task_complete_ = TRUE;
#line 3107 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_set_task_data (_data_->_async_result, _data_, tpf_persona_real_change_urls_data_free);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->self = _tmp0_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _g_object_ref0 (urls);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->urls);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->urls = _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_urls_co (_data_);
#line 3123 "tpf-persona.c"
}


static void
tpf_persona_real_change_urls_finish (FolksUrlDetails* base,
                                     GAsyncResult* _res_,
                                     GError** error)
{
	TpfPersonaChangeUrlsData* _data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (NULL == _data_) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return;
#line 3139 "tpf-persona.c"
	}
}


/**
   * {@inheritDoc}
   *
   * @since 0.6.4
   */
static void
tpf_persona_change_urls_ready (GObject* source_object,
                               GAsyncResult* _res_,
                               gpointer _user_data_)
{
	TpfPersonaChangeUrlsData* _data_;
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = _user_data_;
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_source_object_ = source_object;
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_res_ = _res_;
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_task_complete_ = TRUE;
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_real_change_urls_co (_data_);
#line 3165 "tpf-persona.c"
}


static gboolean
tpf_persona_real_change_urls_co (TpfPersonaChangeUrlsData* _data_)
{
#line 706 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	switch (_data_->_state_) {
#line 706 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 0:
#line 3176 "tpf-persona.c"
		goto _state_0;
#line 706 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 1:
#line 3180 "tpf-persona.c"
		goto _state_1;
		default:
#line 706 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_assert_not_reached ();
#line 3185 "tpf-persona.c"
	}
	_state_0:
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp0_ = _data_->self->priv->_urls;
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_state_ = 1;
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_change_details (_data_->self, FOLKS_TYPE_URL_FIELD_DETAILS, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, _data_->urls, (GeeSet*) _data_->_tmp0_, "url", tpf_persona_change_urls_ready, _data_);
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return FALSE;
#line 3196 "tpf-persona.c"
	_state_1:
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_change_details_finish (_data_->self, _data_->_res_, &_data_->_inner_error_);
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_object_unref (_data_->_async_result);
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return FALSE;
#line 3210 "tpf-persona.c"
		} else {
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_clear_error (&_data_->_inner_error_);
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_object_unref (_data_->_async_result);
#line 708 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return FALSE;
#line 3220 "tpf-persona.c"
		}
	}
#line 706 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 706 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_state_ != 0) {
#line 706 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 706 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 3231 "tpf-persona.c"
		}
	}
#line 706 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_unref (_data_->_async_result);
#line 706 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return FALSE;
#line 3238 "tpf-persona.c"
}


static void
_tpf_persona_change_details_data_free (gpointer _data)
{
	TpfPersonaChangeDetailsData* _data_;
	_data_ = _data;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->details);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->member_set);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (_data_->field_name);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_slice_free (TpfPersonaChangeDetailsData, _data_);
#line 3257 "tpf-persona.c"
}


static void
_tpf_persona_change_details_async_ready_wrapper (GObject *source_object,
                                                 GAsyncResult *res,
                                                 void *user_data)
{
	TpfPersonaChangeDetailsData* _task_data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_ = g_task_get_task_data (G_TASK (res));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_task_data_->_callback_ != NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_task_data_->_callback_ (source_object, res, user_data);
#line 3273 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_task_data_->_task_complete_ = TRUE;
#line 3277 "tpf-persona.c"
}


static void
_tpf_persona_change_details (TpfPersona* self,
                             GType t_type,
                             GBoxedCopyFunc t_dup_func,
                             GDestroyNotify t_destroy_func,
                             GeeSet* details,
                             GeeSet* member_set,
                             const gchar* field_name,
                             GAsyncReadyCallback _callback_,
                             gpointer _user_data_)
{
	TpfPersonaChangeDetailsData* _data_;
	TpfPersona* _tmp0_;
	GeeSet* _tmp1_;
	GeeSet* _tmp2_;
	gchar* _tmp3_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_slice_new0 (TpfPersonaChangeDetailsData);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_callback_ = _callback_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_async_result = g_task_new (G_OBJECT (self), NULL, _tpf_persona_change_details_async_ready_wrapper, _user_data_);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_callback_ == NULL) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_task_complete_ = TRUE;
#line 3307 "tpf-persona.c"
	}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_set_task_data (_data_->_async_result, _data_, _tpf_persona_change_details_data_free);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = _g_object_ref0 (self);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->self = _tmp0_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _g_object_ref0 (details);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->details);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->details = _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp2_ = _g_object_ref0 (member_set);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->member_set);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->member_set = _tmp2_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp3_ = g_strdup (field_name);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (_data_->field_name);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->field_name = _tmp3_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->t_type = t_type;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->t_dup_func = t_dup_func;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->t_destroy_func = t_destroy_func;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_change_details_co (_data_);
#line 3341 "tpf-persona.c"
}


static void
_tpf_persona_change_details_finish (TpfPersona* self,
                                    GAsyncResult* _res_,
                                    GError** error)
{
	TpfPersonaChangeDetailsData* _data_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = g_task_propagate_pointer (G_TASK (_res_), error);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (NULL == _data_) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return;
#line 3357 "tpf-persona.c"
	}
}


static void
_tpf_persona_change_details_ready (GObject* source_object,
                                   GAsyncResult* _res_,
                                   gpointer _user_data_)
{
	TpfPersonaChangeDetailsData* _data_;
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_ = _user_data_;
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_source_object_ = source_object;
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_res_ = _res_;
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_task_complete_ = TRUE;
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_change_details_co (_data_);
#line 3378 "tpf-persona.c"
}


static gboolean
_tpf_persona_change_details_co (TpfPersonaChangeDetailsData* _data_)
{
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	switch (_data_->_state_) {
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 0:
#line 3389 "tpf-persona.c"
		goto _state_0;
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case 1:
#line 3393 "tpf-persona.c"
		goto _state_1;
		default:
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_assert_not_reached ();
#line 3398 "tpf-persona.c"
	}
	_state_0:
#line 718 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp0_ = folks_persona_get_store ((FolksPersona*) _data_->self);
#line 718 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp1_ = _data_->_tmp0_;
#line 718 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp2_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_data_->_tmp1_, TPF_TYPE_PERSONA_STORE) ? ((TpfPersonaStore*) _data_->_tmp1_) : NULL);
#line 718 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->tpf_store = _data_->_tmp2_;
#line 720 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->member_set != NULL) {
#line 721 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp3_ = folks_internal_equal_sets (_data_->t_type, (GBoxedCopyFunc) _data_->t_dup_func, (GDestroyNotify) _data_->t_destroy_func, _data_->details, _data_->member_set);
#line 3413 "tpf-persona.c"
	} else {
#line 720 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_data_->_tmp3_ = FALSE;
#line 3417 "tpf-persona.c"
	}
#line 720 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_tmp3_) {
#line 723 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (_data_->tpf_store);
#line 723 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 723 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_data_->_state_ != 0) {
#line 723 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			while (_data_->_task_complete_ != TRUE) {
#line 723 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 3431 "tpf-persona.c"
			}
		}
#line 723 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_unref (_data_->_async_result);
#line 723 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return FALSE;
#line 3438 "tpf-persona.c"
	}
#line 726 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_data_->_tmp4_ = _data_->self->priv->_is_constructed;
#line 726 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_tmp4_) {
#line 3444 "tpf-persona.c"
		{
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp5_ = _data_->tpf_store;
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_state_ = 1;
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tpf_persona_store_change_user_details (_data_->_tmp5_, _data_->self, _data_->details, _data_->field_name, _tpf_persona_change_details_ready, _data_);
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return FALSE;
#line 3454 "tpf-persona.c"
			_state_1:
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tpf_persona_store_change_user_details_finish (_data_->_tmp5_, _data_->_res_, &_data_->_inner_error_);
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (g_error_matches (_data_->_inner_error_, FOLKS_PERSONA_STORE_ERROR, FOLKS_PERSONA_STORE_ERROR_INVALID_ARGUMENT)) {
#line 3462 "tpf-persona.c"
					goto __catch4_folks_persona_store_error_invalid_argument;
				}
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (g_error_matches (_data_->_inner_error_, FOLKS_PERSONA_STORE_ERROR, FOLKS_PERSONA_STORE_ERROR_STORE_OFFLINE)) {
#line 3467 "tpf-persona.c"
					goto __catch4_folks_persona_store_error_store_offline;
				}
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (_data_->_inner_error_->domain == FOLKS_PERSONA_STORE_ERROR) {
#line 3472 "tpf-persona.c"
					goto __catch4_folks_persona_store_error;
				}
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_g_object_unref0 (_data_->tpf_store);
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_clear_error (&_data_->_inner_error_);
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_object_unref (_data_->_async_result);
#line 730 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				return FALSE;
#line 3485 "tpf-persona.c"
			}
		}
		goto __finally4;
		__catch4_folks_persona_store_error_invalid_argument:
		{
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->e1 = _data_->_inner_error_;
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = NULL;
#line 734 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp6_ = _data_->e1;
#line 734 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp7_ = _data_->_tmp6_->message;
#line 734 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp8_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_NOT_WRITEABLE, _data_->_tmp7_);
#line 734 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = _data_->_tmp8_;
#line 734 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_error_free0 (_data_->e1);
#line 3505 "tpf-persona.c"
			goto __finally4;
		}
		goto __finally4;
		__catch4_folks_persona_store_error_store_offline:
		{
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->e2 = _data_->_inner_error_;
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = NULL;
#line 738 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp9_ = _data_->e2;
#line 738 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp10_ = _data_->_tmp9_->message;
#line 738 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp11_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR, _data_->_tmp10_);
#line 738 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = _data_->_tmp11_;
#line 738 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_error_free0 (_data_->e2);
#line 3525 "tpf-persona.c"
			goto __finally4;
		}
		goto __finally4;
		__catch4_folks_persona_store_error:
		{
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->e3 = _data_->_inner_error_;
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = NULL;
#line 742 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp12_ = _data_->e3;
#line 742 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp13_ = _data_->_tmp12_->message;
#line 742 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_tmp14_ = g_error_new_literal (FOLKS_PROPERTY_ERROR, FOLKS_PROPERTY_ERROR_UNKNOWN_ERROR, _data_->_tmp13_);
#line 742 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_data_->_inner_error_ = _data_->_tmp14_;
#line 742 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_error_free0 (_data_->e3);
#line 3545 "tpf-persona.c"
			goto __finally4;
		}
		__finally4:
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (G_UNLIKELY (_data_->_inner_error_ != NULL)) {
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			if (_data_->_inner_error_->domain == FOLKS_PROPERTY_ERROR) {
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_task_return_error (_data_->_async_result, _data_->_inner_error_);
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_g_object_unref0 (_data_->tpf_store);
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_object_unref (_data_->_async_result);
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				return FALSE;
#line 3561 "tpf-persona.c"
			} else {
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_g_object_unref0 (_data_->tpf_store);
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _data_->_inner_error_->message, g_quark_to_string (_data_->_inner_error_->domain), _data_->_inner_error_->code);
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_clear_error (&_data_->_inner_error_);
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_object_unref (_data_->_async_result);
#line 728 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				return FALSE;
#line 3573 "tpf-persona.c"
			}
		}
	}
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (_data_->tpf_store);
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_data_->_state_ != 0) {
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		while (_data_->_task_complete_ != TRUE) {
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
#line 3587 "tpf-persona.c"
		}
	}
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_unref (_data_->_async_result);
#line 712 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return FALSE;
#line 3594 "tpf-persona.c"
}


/**
   * Create a new persona.
   *
   * Create a new persona for the {@link PersonaStore} ``store``, representing
   * the Telepathy contact given by ``contact``.
   *
   * @param contact the Telepathy contact being represented by the persona
   * @param store the persona store to place the persona in
   */
TpfPersona*
tpf_persona_construct (GType object_type,
                       TpContact* contact,
                       TpfPersonaStore* store)
{
	TpfPersona * self = NULL;
	const gchar* id = NULL;
	const gchar* _tmp0_;
	TpConnection* connection = NULL;
	TpConnection* _tmp1_;
	TpConnection* _tmp2_;
	TpConnection* _tmp3_;
	TpAccount* account = NULL;
	TpConnection* _tmp4_;
	TpAccount* _tmp5_;
	TpAccount* _tmp6_;
	gchar* uid = NULL;
	const gchar* _tmp7_;
	const gchar* _tmp8_;
	const gchar* _tmp9_;
	const gchar* _tmp10_;
	const gchar* _tmp11_;
	gchar* _tmp12_;
	gboolean is_user = FALSE;
	TpConnection* _tmp13_;
	TpContact* _tmp14_;
	TpContact* _tmp15_;
	const gchar* _tmp23_;
	TpAccount* _tmp24_;
	const gchar* _tmp25_;
	const gchar* _tmp26_;
	gchar* _tmp27_;
	gchar* _tmp28_;
	const gchar* _tmp29_;
	gchar* _tmp30_;
	gchar* _tmp31_;
	const gchar* _tmp32_;
	gboolean _tmp33_;
	const gchar* _tmp34_;
	const gchar* _tmp35_;
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (contact != NULL, NULL);
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (store != NULL, NULL);
#line 761 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = tp_contact_get_identifier (contact);
#line 761 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	id = _tmp0_;
#line 762 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = tp_contact_get_connection (contact);
#line 762 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp2_ = _tmp1_;
#line 762 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp3_ = _g_object_ref0 (_tmp2_);
#line 762 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	connection = _tmp3_;
#line 763 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp4_ = connection;
#line 763 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp5_ = tp_connection_get_account (_tmp4_);
#line 763 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp6_ = _g_object_ref0 (_tmp5_);
#line 763 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	account = _tmp6_;
#line 764 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp7_ = folks_persona_store_get_type_id ((FolksPersonaStore*) store);
#line 764 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp8_ = _tmp7_;
#line 764 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp9_ = folks_persona_store_get_id ((FolksPersonaStore*) store);
#line 764 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp10_ = _tmp9_;
#line 764 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp11_ = id;
#line 764 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp12_ = folks_persona_build_uid (_tmp8_, _tmp10_, _tmp11_);
#line 764 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	uid = _tmp12_;
#line 765 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	is_user = FALSE;
#line 767 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp13_ = connection;
#line 767 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp14_ = tp_connection_get_self_contact (_tmp13_);
#line 767 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp15_ = _tmp14_;
#line 767 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp15_ != NULL) {
#line 3695 "tpf-persona.c"
		guint _tmp16_;
		guint _tmp17_;
		TpConnection* _tmp18_;
		TpContact* _tmp19_;
		TpContact* _tmp20_;
		guint _tmp21_;
		guint _tmp22_;
#line 769 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp16_ = tp_contact_get_handle (contact);
#line 769 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp17_ = _tmp16_;
#line 769 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp18_ = connection;
#line 769 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp19_ = tp_connection_get_self_contact (_tmp18_);
#line 769 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp20_ = _tmp19_;
#line 769 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp21_ = tp_contact_get_handle (_tmp20_);
#line 769 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp22_ = _tmp21_;
#line 769 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		is_user = _tmp17_ == _tmp22_;
#line 3719 "tpf-persona.c"
	}
#line 772 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp23_ = id;
#line 772 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp24_ = account;
#line 772 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp25_ = tp_account_get_protocol_name (_tmp24_);
#line 772 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp26_ = _tmp25_;
#line 772 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp27_ = g_strconcat (_tmp26_, ":", NULL);
#line 772 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp28_ = _tmp27_;
#line 772 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp29_ = id;
#line 772 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp30_ = g_strconcat (_tmp28_, _tmp29_, NULL);
#line 772 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp31_ = _tmp30_;
#line 772 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp32_ = uid;
#line 772 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp33_ = is_user;
#line 772 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) g_object_new (object_type, "contact", contact, "display-id", _tmp23_, "iid", _tmp31_, "uid", _tmp32_, "store", store, "is-user", _tmp33_, NULL);
#line 772 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (_tmp31_);
#line 772 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (_tmp28_);
#line 783 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp34_ = uid;
#line 783 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp35_ = id;
#line 783 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_debug ("tpf-persona.vala:783: Created new Tpf.Persona '%s' for service-specifi" \
"c UID '%s': %p", _tmp34_, _tmp35_, self);
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (uid);
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (account);
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (connection);
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return self;
#line 3763 "tpf-persona.c"
}


TpfPersona*
tpf_persona_new (TpContact* contact,
                 TpfPersonaStore* store)
{
#line 759 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return tpf_persona_construct (TPF_TYPE_PERSONA, contact, store);
#line 3773 "tpf-persona.c"
}


static void
tpf_persona_real_constructed (GObject* base)
{
	TpfPersona * self;
#line 897 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 899 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_is_constructed = TRUE;
#line 3785 "tpf-persona.c"
}


static gchar**
_vala_array_dup1 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = g_new0 (gchar*, length + 1);
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	for (i = 0; i < length; i++) {
#line 3799 "tpf-persona.c"
		gchar* _tmp0_;
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp0_ = g_strdup (self[i]);
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		result[i] = _tmp0_;
#line 3805 "tpf-persona.c"
	}
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 3809 "tpf-persona.c"
}


static void
_vala_array_add1 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
#line 910 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if ((*length) == (*size)) {
#line 910 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 910 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 3825 "tpf-persona.c"
	}
#line 910 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	(*array)[(*length)++] = value;
#line 910 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	(*array)[*length] = NULL;
#line 3831 "tpf-persona.c"
}


static void
_vala_array_add2 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
#line 912 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if ((*length) == (*size)) {
#line 912 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 912 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 3847 "tpf-persona.c"
	}
#line 912 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	(*array)[(*length)++] = value;
#line 912 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	(*array)[*length] = NULL;
#line 3853 "tpf-persona.c"
}


static void
_vala_array_add3 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
#line 914 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if ((*length) == (*size)) {
#line 914 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 914 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 3869 "tpf-persona.c"
	}
#line 914 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	(*array)[(*length)++] = value;
#line 914 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	(*array)[*length] = NULL;
#line 3875 "tpf-persona.c"
}


static void
_vala_array_add4 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
#line 916 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if ((*length) == (*size)) {
#line 916 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 916 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 3891 "tpf-persona.c"
	}
#line 916 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	(*array)[(*length)++] = value;
#line 916 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	(*array)[*length] = NULL;
#line 3897 "tpf-persona.c"
}


static void
_vala_array_add5 (gchar** * array,
                  int* length,
                  int* size,
                  gchar* value)
{
#line 918 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if ((*length) == (*size)) {
#line 918 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		*size = (*size) ? (2 * (*size)) : 4;
#line 918 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		*array = g_renew (gchar*, *array, (*size) + 1);
#line 3913 "tpf-persona.c"
	}
#line 918 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	(*array)[(*length)++] = value;
#line 918 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	(*array)[*length] = NULL;
#line 3919 "tpf-persona.c"
}


static void
_tpf_persona_update_writeable_properties (TpfPersona* self)
{
	TpfPersonaStore* tpf_store = NULL;
	FolksPersonaStore* _tmp0_;
	FolksPersonaStore* _tmp1_;
	TpfPersonaStore* _tmp2_;
	FolksPersonaStore* _tmp3_;
	FolksPersonaStore* _tmp4_;
	gchar** _tmp5_;
	gint _tmp5__length1;
	gchar** _tmp6_;
	gint _tmp6__length1;
	gchar** _tmp7_;
	gint _tmp7__length1;
	gboolean _tmp8_;
	gboolean _tmp9_;
#line 902 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (self != NULL);
#line 904 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = folks_persona_get_store ((FolksPersona*) self);
#line 904 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _tmp0_;
#line 904 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp2_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp1_, TPF_TYPE_PERSONA_STORE) ? ((TpfPersonaStore*) _tmp1_) : NULL);
#line 904 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_store = _tmp2_;
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp3_ = folks_persona_get_store ((FolksPersona*) self);
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp4_ = _tmp3_;
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp5_ = folks_persona_store_get_always_writeable_properties (_tmp4_, &_tmp5__length1);
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp6_ = _tmp5_;
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp6__length1 = _tmp5__length1;
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp7_ = (_tmp6_ != NULL) ? _vala_array_dup1 (_tmp6_, _tmp6__length1) : ((gpointer) _tmp6_);
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp7__length1 = _tmp6__length1;
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_writeable_properties = (_vala_array_free (self->priv->_writeable_properties, self->priv->_writeable_properties_length1, (GDestroyNotify) g_free), NULL);
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_writeable_properties = _tmp7_;
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_writeable_properties_length1 = _tmp7__length1;
#line 905 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->__writeable_properties_size_ = self->priv->_writeable_properties_length1;
#line 907 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp8_ = folks_persona_get_is_user ((FolksPersona*) self);
#line 907 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp9_ = _tmp8_;
#line 907 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp9_) {
#line 3978 "tpf-persona.c"
		TpfPersonaStore* _tmp10_;
		GeeSet* _tmp11_;
		GeeSet* _tmp12_;
		TpfPersonaStore* _tmp15_;
		GeeSet* _tmp16_;
		GeeSet* _tmp17_;
		TpfPersonaStore* _tmp20_;
		GeeSet* _tmp21_;
		GeeSet* _tmp22_;
		TpfPersonaStore* _tmp25_;
		GeeSet* _tmp26_;
		GeeSet* _tmp27_;
		TpfPersonaStore* _tmp30_;
		GeeSet* _tmp31_;
		GeeSet* _tmp32_;
#line 909 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp10_ = tpf_store;
#line 909 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp11_ = tpf_persona_store_get_supported_fields (_tmp10_);
#line 909 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp12_ = _tmp11_;
#line 909 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (gee_collection_contains ((GeeCollection*) _tmp12_, "bday")) {
#line 4002 "tpf-persona.c"
			gchar** _tmp13_;
			gint _tmp13__length1;
			gchar* _tmp14_;
#line 910 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp13_ = self->priv->_writeable_properties;
#line 910 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp13__length1 = self->priv->_writeable_properties_length1;
#line 910 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp14_ = g_strdup ("birthday");
#line 910 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_vala_array_add1 (&self->priv->_writeable_properties, &self->priv->_writeable_properties_length1, &self->priv->__writeable_properties_size_, _tmp14_);
#line 4014 "tpf-persona.c"
		}
#line 911 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp15_ = tpf_store;
#line 911 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp16_ = tpf_persona_store_get_supported_fields (_tmp15_);
#line 911 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp17_ = _tmp16_;
#line 911 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (gee_collection_contains ((GeeCollection*) _tmp17_, "email")) {
#line 4024 "tpf-persona.c"
			gchar** _tmp18_;
			gint _tmp18__length1;
			gchar* _tmp19_;
#line 912 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp18_ = self->priv->_writeable_properties;
#line 912 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp18__length1 = self->priv->_writeable_properties_length1;
#line 912 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp19_ = g_strdup ("email-addresses");
#line 912 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_vala_array_add2 (&self->priv->_writeable_properties, &self->priv->_writeable_properties_length1, &self->priv->__writeable_properties_size_, _tmp19_);
#line 4036 "tpf-persona.c"
		}
#line 913 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp20_ = tpf_store;
#line 913 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp21_ = tpf_persona_store_get_supported_fields (_tmp20_);
#line 913 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp22_ = _tmp21_;
#line 913 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (gee_collection_contains ((GeeCollection*) _tmp22_, "fn")) {
#line 4046 "tpf-persona.c"
			gchar** _tmp23_;
			gint _tmp23__length1;
			gchar* _tmp24_;
#line 914 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp23_ = self->priv->_writeable_properties;
#line 914 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp23__length1 = self->priv->_writeable_properties_length1;
#line 914 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp24_ = g_strdup ("full-name");
#line 914 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_vala_array_add3 (&self->priv->_writeable_properties, &self->priv->_writeable_properties_length1, &self->priv->__writeable_properties_size_, _tmp24_);
#line 4058 "tpf-persona.c"
		}
#line 915 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp25_ = tpf_store;
#line 915 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp26_ = tpf_persona_store_get_supported_fields (_tmp25_);
#line 915 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp27_ = _tmp26_;
#line 915 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (gee_collection_contains ((GeeCollection*) _tmp27_, "tel")) {
#line 4068 "tpf-persona.c"
			gchar** _tmp28_;
			gint _tmp28__length1;
			gchar* _tmp29_;
#line 916 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp28_ = self->priv->_writeable_properties;
#line 916 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp28__length1 = self->priv->_writeable_properties_length1;
#line 916 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp29_ = g_strdup ("phone-numbers");
#line 916 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_vala_array_add4 (&self->priv->_writeable_properties, &self->priv->_writeable_properties_length1, &self->priv->__writeable_properties_size_, _tmp29_);
#line 4080 "tpf-persona.c"
		}
#line 917 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp30_ = tpf_store;
#line 917 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp31_ = tpf_persona_store_get_supported_fields (_tmp30_);
#line 917 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp32_ = _tmp31_;
#line 917 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (gee_collection_contains ((GeeCollection*) _tmp32_, "url")) {
#line 4090 "tpf-persona.c"
			gchar** _tmp33_;
			gint _tmp33__length1;
			gchar* _tmp34_;
#line 918 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp33_ = self->priv->_writeable_properties;
#line 918 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp33__length1 = self->priv->_writeable_properties_length1;
#line 918 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp34_ = g_strdup ("urls");
#line 918 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_vala_array_add5 (&self->priv->_writeable_properties, &self->priv->_writeable_properties_length1, &self->priv->__writeable_properties_size_, _tmp34_);
#line 4102 "tpf-persona.c"
		}
	}
#line 902 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (tpf_store);
#line 4107 "tpf-persona.c"
}


static TpContactInfoField*
_vala_TpContactInfoField_copy (TpContactInfoField* self)
{
#line 988 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return g_boxed_copy (tp_contact_info_field_get_type (), self);
#line 4116 "tpf-persona.c"
}


static gpointer
__vala_TpContactInfoField_copy0 (gpointer self)
{
#line 988 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return self ? _vala_TpContactInfoField_copy (self) : NULL;
#line 4125 "tpf-persona.c"
}


static void
_vala_TpContactInfoField_free (TpContactInfoField* self)
{
#line 988 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_boxed_free (tp_contact_info_field_get_type (), self);
#line 4134 "tpf-persona.c"
}


static void
__vala_TpContactInfoField_free0_ (gpointer var)
{
#line 922 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	(var == NULL) ? NULL : (var = (_vala_TpContactInfoField_free (var), NULL));
#line 4143 "tpf-persona.c"
}


static inline void
_g_list_free___vala_TpContactInfoField_free0_ (GList* self)
{
#line 922 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_list_free_full (self, (GDestroyNotify) __vala_TpContactInfoField_free0_);
#line 4152 "tpf-persona.c"
}


static void
_tpf_persona_contact_notify_contact_info (TpfPersona* self,
                                          gboolean create_if_not_exists,
                                          gboolean emit_notification)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	gboolean _tmp2_ = FALSE;
	FolksSmallSet* _tmp3_;
	gboolean _tmp11_ = FALSE;
	FolksSmallSet* _tmp12_;
	TpContact* contact = NULL;
	TpContact* _tmp26_;
	TpContact* _tmp27_;
	TpContact* _tmp28_;
	gboolean changed = FALSE;
	gchar* new_birthday_str = NULL;
	gchar* _tmp29_;
	gchar* new_full_name = NULL;
	gchar* _tmp30_;
	FolksSmallSet* new_email_addresses = NULL;
	FolksSmallSet* _tmp31_;
	FolksSmallSet* new_phone_numbers = NULL;
	FolksSmallSet* _tmp32_;
	FolksSmallSet* new_urls = NULL;
	FolksSmallSet* _tmp33_;
	GList* contact_info = NULL;
	TpContact* _tmp34_;
	GList* _tmp35_;
	GList* _tmp36_;
	const gchar* _tmp97_;
	FolksSmallSet* _tmp115_;
	FolksSmallSet* _tmp116_;
	const gchar* _tmp122_;
	const gchar* _tmp123_;
	FolksSmallSet* _tmp126_;
	FolksSmallSet* _tmp127_;
	FolksSmallSet* _tmp133_;
	FolksSmallSet* _tmp134_;
	gboolean _tmp140_;
#line 922 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (self != NULL);
#line 925 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp3_ = self->priv->_email_addresses;
#line 925 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp3_ == NULL) {
#line 4202 "tpf-persona.c"
		FolksSmallSet* _tmp4_;
#line 926 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp4_ = self->priv->_phone_numbers;
#line 926 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp2_ = _tmp4_ == NULL;
#line 4208 "tpf-persona.c"
	} else {
#line 925 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp2_ = FALSE;
#line 4212 "tpf-persona.c"
	}
#line 925 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp2_) {
#line 4216 "tpf-persona.c"
		FolksSmallSet* _tmp5_;
#line 927 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp5_ = self->priv->_urls;
#line 927 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp1_ = _tmp5_ == NULL;
#line 4222 "tpf-persona.c"
	} else {
#line 925 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp1_ = FALSE;
#line 4226 "tpf-persona.c"
	}
#line 924 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp1_) {
#line 925 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp0_ = TRUE;
#line 4232 "tpf-persona.c"
	} else {
		gboolean _tmp6_ = FALSE;
		gboolean _tmp7_ = FALSE;
		FolksSmallSet* _tmp8_;
#line 929 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp8_ = self->priv->_email_addresses;
#line 929 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_tmp8_ != NULL) {
#line 4241 "tpf-persona.c"
			FolksSmallSet* _tmp9_;
#line 930 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp9_ = self->priv->_phone_numbers;
#line 930 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp7_ = _tmp9_ != NULL;
#line 4247 "tpf-persona.c"
		} else {
#line 929 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp7_ = FALSE;
#line 4251 "tpf-persona.c"
		}
#line 929 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_tmp7_) {
#line 4255 "tpf-persona.c"
			FolksSmallSet* _tmp10_;
#line 931 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp10_ = self->priv->_urls;
#line 931 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp6_ = _tmp10_ != NULL;
#line 4261 "tpf-persona.c"
		} else {
#line 929 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp6_ = FALSE;
#line 4265 "tpf-persona.c"
		}
#line 929 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp0_ = _tmp6_;
#line 4269 "tpf-persona.c"
	}
#line 924 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_vala_assert (_tmp0_, "(           (this._email_addresses == null) &&           (this._phone_numbers == null) &&           (this._urls == null)         ) || (           (this._email_addresses != null) &&           (this._phone_numbers != null) &&           (this._urls != null)         )");
#line 939 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp12_ = self->priv->_urls;
#line 939 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp12_ == NULL) {
#line 939 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp11_ = create_if_not_exists == FALSE;
#line 4279 "tpf-persona.c"
	} else {
#line 939 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp11_ = FALSE;
#line 4283 "tpf-persona.c"
	}
#line 939 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp11_) {
#line 941 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (emit_notification) {
#line 943 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_object_notify ((GObject*) self, "email-addresses");
#line 944 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_object_notify ((GObject*) self, "phone-numbers");
#line 945 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_object_notify ((GObject*) self, "urls");
#line 4295 "tpf-persona.c"
		}
#line 947 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return;
#line 4299 "tpf-persona.c"
	} else {
		FolksSmallSet* _tmp13_;
#line 949 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp13_ = self->priv->_urls;
#line 949 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_tmp13_ == NULL) {
#line 4306 "tpf-persona.c"
			FolksSmallSet* _tmp14_;
			FolksSmallSet* _tmp15_;
			GeeSet* _tmp16_;
			GeeSet* _tmp17_;
			FolksSmallSet* _tmp18_;
			FolksSmallSet* _tmp19_;
			GeeSet* _tmp20_;
			GeeSet* _tmp21_;
			FolksSmallSet* _tmp22_;
			FolksSmallSet* _tmp23_;
			GeeSet* _tmp24_;
			GeeSet* _tmp25_;
#line 951 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp14_ = folks_small_set_new (FOLKS_TYPE_URL_FIELD_DETAILS, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, _folks_abstract_field_details_hash_static_gee_hash_data_func, NULL, NULL, _folks_abstract_field_details_equal_static_gee_equal_data_func, NULL, NULL);
#line 951 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_object_unref0 (self->priv->_urls);
#line 951 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			self->priv->_urls = _tmp14_;
#line 954 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp15_ = self->priv->_urls;
#line 954 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp16_ = gee_abstract_set_get_read_only_view ((GeeAbstractSet*) _tmp15_);
#line 954 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp17_ = _tmp16_;
#line 954 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_object_unref0 (self->priv->_urls_ro);
#line 954 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			self->priv->_urls_ro = _tmp17_;
#line 956 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp18_ = folks_small_set_new (FOLKS_TYPE_EMAIL_FIELD_DETAILS, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, _folks_abstract_field_details_hash_static_gee_hash_data_func, NULL, NULL, _folks_abstract_field_details_equal_static_gee_equal_data_func, NULL, NULL);
#line 956 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_object_unref0 (self->priv->_email_addresses);
#line 956 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			self->priv->_email_addresses = _tmp18_;
#line 959 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp19_ = self->priv->_email_addresses;
#line 959 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp20_ = gee_abstract_set_get_read_only_view ((GeeAbstractSet*) _tmp19_);
#line 959 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp21_ = _tmp20_;
#line 959 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_object_unref0 (self->priv->_email_addresses_ro);
#line 959 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			self->priv->_email_addresses_ro = _tmp21_;
#line 961 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp22_ = folks_small_set_new (FOLKS_TYPE_PHONE_FIELD_DETAILS, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, _folks_abstract_field_details_hash_static_gee_hash_data_func, NULL, NULL, _folks_abstract_field_details_equal_static_gee_equal_data_func, NULL, NULL);
#line 961 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_object_unref0 (self->priv->_phone_numbers);
#line 961 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			self->priv->_phone_numbers = _tmp22_;
#line 964 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp23_ = self->priv->_phone_numbers;
#line 964 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp24_ = gee_abstract_set_get_read_only_view ((GeeAbstractSet*) _tmp23_);
#line 964 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp25_ = _tmp24_;
#line 964 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_object_unref0 (self->priv->_phone_numbers_ro);
#line 964 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			self->priv->_phone_numbers_ro = _tmp25_;
#line 4367 "tpf-persona.c"
		}
	}
#line 967 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp26_ = self->priv->_contact;
#line 967 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp27_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp26_, tp_contact_get_type (), TpContact));
#line 967 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	contact = _tmp27_;
#line 968 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp28_ = contact;
#line 968 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp28_ == NULL) {
#line 971 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (contact);
#line 971 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return;
#line 4384 "tpf-persona.c"
	}
#line 974 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	changed = FALSE;
#line 975 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp29_ = g_strdup ("");
#line 975 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	new_birthday_str = _tmp29_;
#line 976 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp30_ = g_strdup ("");
#line 976 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	new_full_name = _tmp30_;
#line 977 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp31_ = folks_small_set_new (FOLKS_TYPE_EMAIL_FIELD_DETAILS, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, _folks_abstract_field_details_hash_static_gee_hash_data_func, NULL, NULL, _folks_abstract_field_details_equal_static_gee_equal_data_func, NULL, NULL);
#line 977 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	new_email_addresses = _tmp31_;
#line 980 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp32_ = folks_small_set_new (FOLKS_TYPE_PHONE_FIELD_DETAILS, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, _folks_abstract_field_details_hash_static_gee_hash_data_func, NULL, NULL, _folks_abstract_field_details_equal_static_gee_equal_data_func, NULL, NULL);
#line 980 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	new_phone_numbers = _tmp32_;
#line 983 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp33_ = folks_small_set_new (FOLKS_TYPE_URL_FIELD_DETAILS, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, _folks_abstract_field_details_hash_static_gee_hash_data_func, NULL, NULL, _folks_abstract_field_details_equal_static_gee_equal_data_func, NULL, NULL);
#line 983 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	new_urls = _tmp33_;
#line 987 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp34_ = contact;
#line 987 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp35_ = tp_contact_dup_contact_info (_tmp34_);
#line 987 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	contact_info = _tmp35_;
#line 988 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp36_ = contact_info;
#line 4416 "tpf-persona.c"
	{
		GList* info_collection = NULL;
		GList* info_it = NULL;
#line 988 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		info_collection = _tmp36_;
#line 988 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		for (info_it = info_collection; info_it != NULL; info_it = info_it->next) {
#line 4424 "tpf-persona.c"
			TpContactInfoField* _tmp37_;
			TpContactInfoField* info = NULL;
#line 988 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp37_ = __vala_TpContactInfoField_copy0 ((TpContactInfoField*) info_it->data);
#line 988 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			info = _tmp37_;
#line 4431 "tpf-persona.c"
			{
				TpContactInfoField* _tmp38_;
				const gchar* _tmp39_;
#line 990 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tmp38_ = info;
#line 990 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tmp39_ = _tmp38_->field_name;
#line 990 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (g_strcmp0 (_tmp39_, "") == 0) {
#line 4441 "tpf-persona.c"
				} else {
					TpContactInfoField* _tmp40_;
					const gchar* _tmp41_;
#line 991 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					_tmp40_ = info;
#line 991 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					_tmp41_ = _tmp40_->field_name;
#line 991 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					if (g_strcmp0 (_tmp41_, "bday") == 0) {
#line 4451 "tpf-persona.c"
						const gchar* _tmp42_ = NULL;
						TpContactInfoField* _tmp43_;
						gchar** _tmp44_;
						gint _tmp44__length1;
						const gchar* _tmp45_;
						gchar* _tmp46_;
#line 993 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_tmp43_ = info;
#line 993 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_tmp44_ = _tmp43_->field_value;
#line 993 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_tmp44__length1 = _vala_array_length (_tmp43_->field_value);
#line 993 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_tmp45_ = _tmp44_[0];
#line 993 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_tmp42_ = _tmp45_;
#line 993 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						if (_tmp42_ == NULL) {
#line 993 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
							_tmp42_ = "";
#line 4472 "tpf-persona.c"
						}
#line 993 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_tmp46_ = g_strdup (_tmp42_);
#line 993 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_g_free0 (new_birthday_str);
#line 993 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						new_birthday_str = _tmp46_;
#line 4480 "tpf-persona.c"
					} else {
						TpContactInfoField* _tmp47_;
						const gchar* _tmp48_;
#line 995 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_tmp47_ = info;
#line 995 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_tmp48_ = _tmp47_->field_name;
#line 995 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						if (g_strcmp0 (_tmp48_, "email") == 0) {
#line 4490 "tpf-persona.c"
							TpContactInfoField* _tmp49_;
							gchar** _tmp50_;
							gint _tmp50__length1;
#line 997 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
							_tmp49_ = info;
#line 997 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
							_tmp50_ = _tmp49_->field_value;
#line 997 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
							_tmp50__length1 = _vala_array_length (_tmp49_->field_value);
#line 4500 "tpf-persona.c"
							{
								gchar** email_addr_collection = NULL;
								gint email_addr_collection_length1 = 0;
								gint _email_addr_collection_size_ = 0;
								gint email_addr_it = 0;
#line 997 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
								email_addr_collection = _tmp50_;
#line 997 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
								email_addr_collection_length1 = _tmp50__length1;
#line 997 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
								for (email_addr_it = 0; email_addr_it < _tmp50__length1; email_addr_it = email_addr_it + 1) {
#line 4512 "tpf-persona.c"
									gchar* _tmp51_;
									gchar* email_addr = NULL;
#line 997 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
									_tmp51_ = g_strdup (email_addr_collection[email_addr_it]);
#line 997 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
									email_addr = _tmp51_;
#line 4519 "tpf-persona.c"
									{
										const gchar* _tmp52_;
#line 999 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
										_tmp52_ = email_addr;
#line 999 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
										if (g_strcmp0 (_tmp52_, "") != 0) {
#line 4526 "tpf-persona.c"
											GeeMultiMap* parameters = NULL;
											TpContactInfoField* _tmp53_;
											gchar** _tmp54_;
											gint _tmp54__length1;
											GeeMultiMap* _tmp55_;
											FolksEmailFieldDetails* email_fd = NULL;
											const gchar* _tmp56_;
											GeeMultiMap* _tmp57_;
											FolksEmailFieldDetails* _tmp58_;
											FolksSmallSet* _tmp59_;
											FolksEmailFieldDetails* _tmp60_;
#line 1001 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											_tmp53_ = info;
#line 1001 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											_tmp54_ = _tmp53_->parameters;
#line 1001 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											_tmp54__length1 = _vala_array_length (_tmp53_->parameters);
#line 1001 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											_tmp55_ = _tpf_persona_afd_params_from_strv (self, _tmp54_, _tmp54__length1);
#line 1001 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											parameters = _tmp55_;
#line 1002 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											_tmp56_ = email_addr;
#line 1002 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											_tmp57_ = parameters;
#line 1002 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											_tmp58_ = folks_email_field_details_new (_tmp56_, _tmp57_);
#line 1002 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											email_fd = _tmp58_;
#line 1003 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											_tmp59_ = new_email_addresses;
#line 1003 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											_tmp60_ = email_fd;
#line 1003 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											gee_abstract_collection_add ((GeeAbstractCollection*) _tmp59_, _tmp60_);
#line 999 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											_g_object_unref0 (email_fd);
#line 999 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											_g_object_unref0 (parameters);
#line 4566 "tpf-persona.c"
										}
#line 997 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
										_g_free0 (email_addr);
#line 4570 "tpf-persona.c"
									}
								}
							}
						} else {
							TpContactInfoField* _tmp61_;
							const gchar* _tmp62_;
#line 1007 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
							_tmp61_ = info;
#line 1007 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
							_tmp62_ = _tmp61_->field_name;
#line 1007 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
							if (g_strcmp0 (_tmp62_, "fn") == 0) {
#line 4583 "tpf-persona.c"
								TpContactInfoField* _tmp63_;
								gchar** _tmp64_;
								gint _tmp64__length1;
								const gchar* _tmp65_;
								gchar* _tmp66_;
								const gchar* _tmp67_;
#line 1009 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
								_tmp63_ = info;
#line 1009 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
								_tmp64_ = _tmp63_->field_value;
#line 1009 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
								_tmp64__length1 = _vala_array_length (_tmp63_->field_value);
#line 1009 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
								_tmp65_ = _tmp64_[0];
#line 1009 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
								_tmp66_ = g_strdup (_tmp65_);
#line 1009 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
								_g_free0 (new_full_name);
#line 1009 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
								new_full_name = _tmp66_;
#line 1010 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
								_tmp67_ = new_full_name;
#line 1010 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
								if (_tmp67_ == NULL) {
#line 4608 "tpf-persona.c"
									gchar* _tmp68_;
#line 1011 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
									_tmp68_ = g_strdup ("");
#line 1011 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
									_g_free0 (new_full_name);
#line 1011 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
									new_full_name = _tmp68_;
#line 4616 "tpf-persona.c"
								}
							} else {
								TpContactInfoField* _tmp69_;
								const gchar* _tmp70_;
#line 1013 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
								_tmp69_ = info;
#line 1013 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
								_tmp70_ = _tmp69_->field_name;
#line 1013 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
								if (g_strcmp0 (_tmp70_, "tel") == 0) {
#line 4627 "tpf-persona.c"
									TpContactInfoField* _tmp71_;
									gchar** _tmp72_;
									gint _tmp72__length1;
#line 1015 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
									_tmp71_ = info;
#line 1015 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
									_tmp72_ = _tmp71_->field_value;
#line 1015 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
									_tmp72__length1 = _vala_array_length (_tmp71_->field_value);
#line 4637 "tpf-persona.c"
									{
										gchar** phone_num_collection = NULL;
										gint phone_num_collection_length1 = 0;
										gint _phone_num_collection_size_ = 0;
										gint phone_num_it = 0;
#line 1015 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
										phone_num_collection = _tmp72_;
#line 1015 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
										phone_num_collection_length1 = _tmp72__length1;
#line 1015 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
										for (phone_num_it = 0; phone_num_it < _tmp72__length1; phone_num_it = phone_num_it + 1) {
#line 4649 "tpf-persona.c"
											gchar* _tmp73_;
											gchar* phone_num = NULL;
#line 1015 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											_tmp73_ = g_strdup (phone_num_collection[phone_num_it]);
#line 1015 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											phone_num = _tmp73_;
#line 4656 "tpf-persona.c"
											{
												const gchar* _tmp74_;
#line 1017 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
												_tmp74_ = phone_num;
#line 1017 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
												if (g_strcmp0 (_tmp74_, "") != 0) {
#line 4663 "tpf-persona.c"
													GeeMultiMap* parameters = NULL;
													TpContactInfoField* _tmp75_;
													gchar** _tmp76_;
													gint _tmp76__length1;
													GeeMultiMap* _tmp77_;
													FolksPhoneFieldDetails* phone_fd = NULL;
													const gchar* _tmp78_;
													GeeMultiMap* _tmp79_;
													FolksPhoneFieldDetails* _tmp80_;
													FolksSmallSet* _tmp81_;
													FolksPhoneFieldDetails* _tmp82_;
#line 1019 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													_tmp75_ = info;
#line 1019 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													_tmp76_ = _tmp75_->parameters;
#line 1019 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													_tmp76__length1 = _vala_array_length (_tmp75_->parameters);
#line 1019 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													_tmp77_ = _tpf_persona_afd_params_from_strv (self, _tmp76_, _tmp76__length1);
#line 1019 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													parameters = _tmp77_;
#line 1020 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													_tmp78_ = phone_num;
#line 1020 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													_tmp79_ = parameters;
#line 1020 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													_tmp80_ = folks_phone_field_details_new (_tmp78_, _tmp79_);
#line 1020 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													phone_fd = _tmp80_;
#line 1021 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													_tmp81_ = new_phone_numbers;
#line 1021 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													_tmp82_ = phone_fd;
#line 1021 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													gee_abstract_collection_add ((GeeAbstractCollection*) _tmp81_, _tmp82_);
#line 1017 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													_g_object_unref0 (phone_fd);
#line 1017 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													_g_object_unref0 (parameters);
#line 4703 "tpf-persona.c"
												}
#line 1015 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
												_g_free0 (phone_num);
#line 4707 "tpf-persona.c"
											}
										}
									}
								} else {
									TpContactInfoField* _tmp83_;
									const gchar* _tmp84_;
#line 1025 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
									_tmp83_ = info;
#line 1025 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
									_tmp84_ = _tmp83_->field_name;
#line 1025 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
									if (g_strcmp0 (_tmp84_, "url") == 0) {
#line 4720 "tpf-persona.c"
										TpContactInfoField* _tmp85_;
										gchar** _tmp86_;
										gint _tmp86__length1;
#line 1027 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
										_tmp85_ = info;
#line 1027 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
										_tmp86_ = _tmp85_->field_value;
#line 1027 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
										_tmp86__length1 = _vala_array_length (_tmp85_->field_value);
#line 4730 "tpf-persona.c"
										{
											gchar** url_collection = NULL;
											gint url_collection_length1 = 0;
											gint _url_collection_size_ = 0;
											gint url_it = 0;
#line 1027 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											url_collection = _tmp86_;
#line 1027 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											url_collection_length1 = _tmp86__length1;
#line 1027 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
											for (url_it = 0; url_it < _tmp86__length1; url_it = url_it + 1) {
#line 4742 "tpf-persona.c"
												gchar* _tmp87_;
												gchar* url = NULL;
#line 1027 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
												_tmp87_ = g_strdup (url_collection[url_it]);
#line 1027 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
												url = _tmp87_;
#line 4749 "tpf-persona.c"
												{
													const gchar* _tmp88_;
#line 1029 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													_tmp88_ = url;
#line 1029 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													if (g_strcmp0 (_tmp88_, "") != 0) {
#line 4756 "tpf-persona.c"
														GeeMultiMap* parameters = NULL;
														TpContactInfoField* _tmp89_;
														gchar** _tmp90_;
														gint _tmp90__length1;
														GeeMultiMap* _tmp91_;
														FolksUrlFieldDetails* url_fd = NULL;
														const gchar* _tmp92_;
														GeeMultiMap* _tmp93_;
														FolksUrlFieldDetails* _tmp94_;
														FolksSmallSet* _tmp95_;
														FolksUrlFieldDetails* _tmp96_;
#line 1031 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
														_tmp89_ = info;
#line 1031 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
														_tmp90_ = _tmp89_->parameters;
#line 1031 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
														_tmp90__length1 = _vala_array_length (_tmp89_->parameters);
#line 1031 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
														_tmp91_ = _tpf_persona_afd_params_from_strv (self, _tmp90_, _tmp90__length1);
#line 1031 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
														parameters = _tmp91_;
#line 1032 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
														_tmp92_ = url;
#line 1032 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
														_tmp93_ = parameters;
#line 1032 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
														_tmp94_ = folks_url_field_details_new (_tmp92_, _tmp93_);
#line 1032 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
														url_fd = _tmp94_;
#line 1033 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
														_tmp95_ = new_urls;
#line 1033 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
														_tmp96_ = url_fd;
#line 1033 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
														gee_abstract_collection_add ((GeeAbstractCollection*) _tmp95_, _tmp96_);
#line 1029 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
														_g_object_unref0 (url_fd);
#line 1029 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
														_g_object_unref0 (parameters);
#line 4796 "tpf-persona.c"
													}
#line 1027 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
													_g_free0 (url);
#line 4800 "tpf-persona.c"
												}
											}
										}
									}
								}
							}
						}
					}
				}
#line 988 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				__vala_TpContactInfoField_free0 (info);
#line 4812 "tpf-persona.c"
			}
		}
	}
#line 1039 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp97_ = new_birthday_str;
#line 1039 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (g_strcmp0 (_tmp97_, "") != 0) {
#line 4820 "tpf-persona.c"
		GTimeVal timeval = {0};
		const gchar* _tmp98_;
#line 1041 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_get_current_time (&timeval);
#line 1042 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp98_ = new_birthday_str;
#line 1042 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (g_time_val_from_iso8601 (_tmp98_, &timeval)) {
#line 4829 "tpf-persona.c"
			GDateTime* d = NULL;
			GTimeVal _tmp99_;
			GDateTime* _tmp100_;
			gboolean _tmp101_ = FALSE;
			GDateTime* _tmp102_;
#line 1044 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp99_ = timeval;
#line 1044 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp100_ = g_date_time_new_from_timeval_utc (&_tmp99_);
#line 1044 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			d = _tmp100_;
#line 1049 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp102_ = d;
#line 1049 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			if (_tmp102_ != NULL) {
#line 4845 "tpf-persona.c"
				gboolean _tmp103_ = FALSE;
				GDateTime* _tmp104_;
#line 1049 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tmp104_ = self->priv->_birthday;
#line 1049 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (_tmp104_ == NULL) {
#line 1049 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					_tmp103_ = TRUE;
#line 4854 "tpf-persona.c"
				} else {
					gboolean _tmp105_ = FALSE;
					GDateTime* _tmp106_;
#line 1050 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					_tmp106_ = self->priv->_birthday;
#line 1050 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					if (_tmp106_ != NULL) {
#line 4862 "tpf-persona.c"
						GDateTime* _tmp107_;
						GDateTime* _tmp108_;
						GDateTime* _tmp109_;
						GDateTime* _tmp110_;
#line 1051 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_tmp107_ = self->priv->_birthday;
#line 1051 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_tmp108_ = d;
#line 1051 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_tmp109_ = g_date_time_to_utc (_tmp108_);
#line 1051 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_tmp110_ = _tmp109_;
#line 1051 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_tmp105_ = !g_date_time_equal (_tmp107_, _tmp110_);
#line 1051 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_g_date_time_unref0 (_tmp110_);
#line 4879 "tpf-persona.c"
					} else {
#line 1050 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
						_tmp105_ = FALSE;
#line 4883 "tpf-persona.c"
					}
#line 1050 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					_tmp103_ = _tmp105_;
#line 4887 "tpf-persona.c"
				}
#line 1049 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tmp101_ = _tmp103_;
#line 4891 "tpf-persona.c"
			} else {
#line 1049 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tmp101_ = FALSE;
#line 4895 "tpf-persona.c"
			}
#line 1049 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			if (_tmp101_) {
#line 4899 "tpf-persona.c"
				GDateTime* _tmp111_;
				GDateTime* _tmp112_;
#line 1053 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tmp111_ = d;
#line 1053 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tmp112_ = g_date_time_to_utc (_tmp111_);
#line 1053 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_g_date_time_unref0 (self->priv->_birthday);
#line 1053 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				self->priv->_birthday = _tmp112_;
#line 1054 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (emit_notification) {
#line 1056 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					g_object_notify ((GObject*) self, "birthday");
#line 4914 "tpf-persona.c"
				}
#line 1058 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				changed = TRUE;
#line 4918 "tpf-persona.c"
			}
#line 1042 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_date_time_unref0 (d);
#line 4922 "tpf-persona.c"
		} else {
			const gchar* _tmp113_;
#line 1063 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp113_ = new_birthday_str;
#line 1063 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_debug ("tpf-persona.vala:1063: Failed to parse new birthday string '%s'", _tmp113_);
#line 4929 "tpf-persona.c"
		}
	} else {
		GDateTime* _tmp114_;
#line 1069 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp114_ = self->priv->_birthday;
#line 1069 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_tmp114_ != NULL) {
#line 1071 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_date_time_unref0 (self->priv->_birthday);
#line 1071 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			self->priv->_birthday = NULL;
#line 1072 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			if (emit_notification) {
#line 1074 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				g_object_notify ((GObject*) self, "birthday");
#line 4945 "tpf-persona.c"
			}
#line 1076 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			changed = TRUE;
#line 4949 "tpf-persona.c"
		}
	}
#line 1080 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp115_ = new_email_addresses;
#line 1080 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp116_ = self->priv->_email_addresses;
#line 1080 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (!folks_internal_equal_sets (FOLKS_TYPE_EMAIL_FIELD_DETAILS, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, (GeeSet*) _tmp115_, (GeeSet*) _tmp116_)) {
#line 4958 "tpf-persona.c"
		FolksSmallSet* _tmp117_;
		FolksSmallSet* _tmp118_;
		FolksSmallSet* _tmp119_;
		GeeSet* _tmp120_;
		GeeSet* _tmp121_;
#line 1083 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp117_ = new_email_addresses;
#line 1083 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp118_ = _g_object_ref0 (_tmp117_);
#line 1083 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (self->priv->_email_addresses);
#line 1083 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_email_addresses = _tmp118_;
#line 1084 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp119_ = new_email_addresses;
#line 1084 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp120_ = gee_abstract_set_get_read_only_view ((GeeAbstractSet*) _tmp119_);
#line 1084 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp121_ = _tmp120_;
#line 1084 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (self->priv->_email_addresses_ro);
#line 1084 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_email_addresses_ro = _tmp121_;
#line 1085 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (emit_notification) {
#line 1087 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_object_notify ((GObject*) self, "email-addresses");
#line 4986 "tpf-persona.c"
		}
#line 1089 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		changed = TRUE;
#line 4990 "tpf-persona.c"
	}
#line 1092 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp122_ = new_full_name;
#line 1092 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp123_ = self->priv->_full_name;
#line 1092 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (g_strcmp0 (_tmp122_, _tmp123_) != 0) {
#line 4998 "tpf-persona.c"
		const gchar* _tmp124_;
		gchar* _tmp125_;
#line 1094 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp124_ = new_full_name;
#line 1094 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp125_ = g_strdup (_tmp124_);
#line 1094 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_free0 (self->priv->_full_name);
#line 1094 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_full_name = _tmp125_;
#line 1095 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_notify ((GObject*) self, "full-name");
#line 1096 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		changed = TRUE;
#line 5013 "tpf-persona.c"
	}
#line 1099 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp126_ = new_phone_numbers;
#line 1099 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp127_ = self->priv->_phone_numbers;
#line 1099 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (!folks_utils_set_string_afd_equal ((GeeSet*) _tmp126_, (GeeSet*) _tmp127_)) {
#line 5021 "tpf-persona.c"
		FolksSmallSet* _tmp128_;
		FolksSmallSet* _tmp129_;
		FolksSmallSet* _tmp130_;
		GeeSet* _tmp131_;
		GeeSet* _tmp132_;
#line 1102 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp128_ = new_phone_numbers;
#line 1102 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp129_ = _g_object_ref0 (_tmp128_);
#line 1102 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (self->priv->_phone_numbers);
#line 1102 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_phone_numbers = _tmp129_;
#line 1103 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp130_ = new_phone_numbers;
#line 1103 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp131_ = gee_abstract_set_get_read_only_view ((GeeAbstractSet*) _tmp130_);
#line 1103 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp132_ = _tmp131_;
#line 1103 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (self->priv->_phone_numbers_ro);
#line 1103 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_phone_numbers_ro = _tmp132_;
#line 1104 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (emit_notification) {
#line 1106 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_object_notify ((GObject*) self, "phone-numbers");
#line 5049 "tpf-persona.c"
		}
#line 1108 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		changed = TRUE;
#line 5053 "tpf-persona.c"
	}
#line 1111 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp133_ = new_urls;
#line 1111 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp134_ = self->priv->_urls;
#line 1111 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (!folks_internal_equal_sets (FOLKS_TYPE_URL_FIELD_DETAILS, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, (GeeSet*) _tmp133_, (GeeSet*) _tmp134_)) {
#line 5061 "tpf-persona.c"
		FolksSmallSet* _tmp135_;
		FolksSmallSet* _tmp136_;
		FolksSmallSet* _tmp137_;
		GeeSet* _tmp138_;
		GeeSet* _tmp139_;
#line 1113 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp135_ = new_urls;
#line 1113 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp136_ = _g_object_ref0 (_tmp135_);
#line 1113 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (self->priv->_urls);
#line 1113 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_urls = _tmp136_;
#line 1114 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp137_ = new_urls;
#line 1114 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp138_ = gee_abstract_set_get_read_only_view ((GeeAbstractSet*) _tmp137_);
#line 1114 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp139_ = _tmp138_;
#line 1114 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (self->priv->_urls_ro);
#line 1114 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_urls_ro = _tmp139_;
#line 1115 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_notify ((GObject*) self, "urls");
#line 1116 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		changed = TRUE;
#line 5089 "tpf-persona.c"
	}
#line 1119 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp140_ = changed;
#line 1119 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp140_ == TRUE) {
#line 5095 "tpf-persona.c"
		FolksPersonaStore* _tmp141_;
		FolksPersonaStore* _tmp142_;
#line 1122 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp141_ = folks_persona_get_store ((FolksPersona*) self);
#line 1122 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp142_ = _tmp141_;
#line 1122 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tpf_persona_store_set_cache_needs_update (G_TYPE_CHECK_INSTANCE_CAST (_tmp142_, TPF_TYPE_PERSONA_STORE, TpfPersonaStore));
#line 5104 "tpf-persona.c"
	}
#line 922 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	(contact_info == NULL) ? NULL : (contact_info = (_g_list_free___vala_TpContactInfoField_free0_ (contact_info), NULL));
#line 922 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (new_urls);
#line 922 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (new_phone_numbers);
#line 922 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (new_email_addresses);
#line 922 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (new_full_name);
#line 922 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (new_birthday_str);
#line 922 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (contact);
#line 5120 "tpf-persona.c"
}


static GeeMultiMap*
_tpf_persona_afd_params_from_strv (TpfPersona* self,
                                   gchar** parameters,
                                   int parameters_length1)
{
	GeeMultiMap* result = NULL;
	GeeHashMultiMap* retval = NULL;
	GeeHashMultiMap* _tmp0_;
#line 1126 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 1128 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = gee_hash_multi_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
#line 1128 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	retval = _tmp0_;
#line 5138 "tpf-persona.c"
	{
		gchar** entry_collection = NULL;
		gint entry_collection_length1 = 0;
		gint _entry_collection_size_ = 0;
		gint entry_it = 0;
#line 1130 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		entry_collection = parameters;
#line 1130 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		entry_collection_length1 = parameters_length1;
#line 1130 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		for (entry_it = 0; entry_it < parameters_length1; entry_it = entry_it + 1) {
#line 5150 "tpf-persona.c"
			gchar* _tmp1_;
			gchar* entry = NULL;
#line 1130 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp1_ = g_strdup (entry_collection[entry_it]);
#line 1130 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			entry = _tmp1_;
#line 5157 "tpf-persona.c"
			{
				gchar** tokens = NULL;
				const gchar* _tmp2_;
				gchar** _tmp3_;
				gchar** _tmp4_;
				gint tokens_length1;
				gint _tokens_size_;
				gchar** _tmp5_;
				gint _tmp5__length1;
#line 1132 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tmp2_ = entry;
#line 1132 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tmp4_ = _tmp3_ = g_strsplit (_tmp2_, "=", 2);
#line 1132 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				tokens = _tmp4_;
#line 1132 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				tokens_length1 = _vala_array_length (_tmp3_);
#line 1132 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tokens_size_ = tokens_length1;
#line 1133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tmp5_ = tokens;
#line 1133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_tmp5__length1 = tokens_length1;
#line 1133 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				if (_tmp5__length1 == 2) {
#line 5183 "tpf-persona.c"
					GeeHashMultiMap* _tmp6_;
					gchar** _tmp7_;
					gint _tmp7__length1;
					const gchar* _tmp8_;
					gchar** _tmp9_;
					gint _tmp9__length1;
					const gchar* _tmp10_;
#line 1135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					_tmp6_ = retval;
#line 1135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					_tmp7_ = tokens;
#line 1135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					_tmp7__length1 = tokens_length1;
#line 1135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					_tmp8_ = _tmp7_[0];
#line 1135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					_tmp9_ = tokens;
#line 1135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					_tmp9__length1 = tokens_length1;
#line 1135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					_tmp10_ = _tmp9_[1];
#line 1135 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					gee_multi_map_set ((GeeMultiMap*) _tmp6_, _tmp8_, _tmp10_);
#line 5207 "tpf-persona.c"
				} else {
					const gchar* _tmp11_;
#line 1139 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					_tmp11_ = entry;
#line 1139 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
					g_warning ("tpf-persona.vala:1139: Failed to parse vCard parameter from string '%s" \
"'", _tmp11_);
#line 5214 "tpf-persona.c"
				}
#line 1130 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				tokens = (_vala_array_free (tokens, tokens_length1, (GDestroyNotify) g_free), NULL);
#line 1130 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
				_g_free0 (entry);
#line 5220 "tpf-persona.c"
			}
		}
	}
#line 1144 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = (GeeMultiMap*) retval;
#line 1144 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 5228 "tpf-persona.c"
}


/**
   * Create a new persona for the {@link PersonaStore} ``store``, representing
   * a cached contact for which we currently have no Telepathy contact.
   *
   * @param store The persona store to place the persona in.
   * @param uid The cached UID of the persona.
   * @param iid The cached IID of the persona.
   * @param im_address The cached IM address of the persona (excluding
   * protocol).
   * @param protocol The cached protocol of the persona.
   * @param groups The cached set of groups the persona is in.
   * @param is_favourite Whether the persona is a favourite.
   * @param alias The cached alias for the persona.
   * @param is_in_contact_list Whether the persona is in the user's contact
   * list.
   * @param is_user Whether the persona is the user.
   * @param avatar The icon for the persona's cached avatar, or ``null`` if they
   * have no avatar.
   * @param birthday The date/time of birth of the persona, or ``null`` if it's
   * unknown.
   * @param full_name The persona's full name, or the empty string if it's
   * unknown.
   * @param email_addresses A set of the persona's e-mail addresses, which may
   * be empty (but may not be ``null``).
   * @param phone_numbers A set of the persona's phone numbers, which may be
   * empty (but may not be ``null``).
   * @param urls A set of the persona's URLs, which may be empty (but may not be
   * ``null``).
   * @return A new {@link Tpf.Persona} representing the cached persona.
   *
   * @since 0.6.0
   */
TpfPersona*
tpf_persona_construct_from_cache (GType object_type,
                                  TpfPersonaStore* store,
                                  const gchar* uid,
                                  const gchar* iid,
                                  const gchar* im_address,
                                  const gchar* protocol,
                                  FolksSmallSet* groups,
                                  gboolean is_favourite,
                                  const gchar* alias,
                                  gboolean is_in_contact_list,
                                  gboolean is_user,
                                  GLoadableIcon* avatar,
                                  GDateTime* birthday,
                                  const gchar* full_name,
                                  FolksSmallSet* email_addresses,
                                  FolksSmallSet* phone_numbers,
                                  FolksSmallSet* urls)
{
	TpfPersona * self = NULL;
	FolksImFieldDetails* im_fd = NULL;
	FolksImFieldDetails* _tmp0_;
	GeeHashMultiMap* _tmp1_;
	FolksImFieldDetails* _tmp2_;
	FolksSmallSet* _tmp3_;
	FolksSmallSet* _tmp4_;
	GeeSet* _tmp5_;
	GeeSet* _tmp6_;
	FolksSmallSet* _tmp7_;
	FolksSmallSet* _tmp8_;
	GeeSet* _tmp9_;
	GeeSet* _tmp10_;
	FolksSmallSet* _tmp11_;
	FolksSmallSet* _tmp12_;
	GeeSet* _tmp13_;
	GeeSet* _tmp14_;
	FolksSmallSet* _tmp15_;
	FolksSmallSet* _tmp16_;
	GeeSet* _tmp17_;
	GeeSet* _tmp18_;
	gchar* _tmp19_;
	GDateTime* _tmp20_;
	gchar* _tmp21_;
	GLoadableIcon* _tmp22_;
	GFile* _tmp23_ = NULL;
	GFile* avatar_file = NULL;
	GFile* _tmp25_;
	gchar** _tmp26_;
	gchar** _tmp27_;
	gint _tmp27__length1;
	gchar** _tmp28_;
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (store != NULL, NULL);
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (uid != NULL, NULL);
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (iid != NULL, NULL);
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (im_address != NULL, NULL);
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (protocol != NULL, NULL);
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (groups != NULL, NULL);
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (alias != NULL, NULL);
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (full_name != NULL, NULL);
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (email_addresses != NULL, NULL);
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (phone_numbers != NULL, NULL);
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (urls != NULL, NULL);
#line 1186 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) g_object_new (object_type, "contact", NULL, "display-id", im_address, "iid", iid, "uid", uid, "store", store, "is-user", is_user, NULL);
#line 1193 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_debug ("tpf-persona.vala:1193: Created new Tpf.Persona '%s' from cache: %p", uid, self);
#line 1196 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = folks_im_field_details_new (im_address, NULL);
#line 1196 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	im_fd = _tmp0_;
#line 1197 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = self->priv->_im_addresses;
#line 1197 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp2_ = im_fd;
#line 1197 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	gee_multi_map_set ((GeeMultiMap*) _tmp1_, protocol, _tmp2_);
#line 1200 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp3_ = _g_object_ref0 (groups);
#line 1200 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_groups);
#line 1200 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_groups = _tmp3_;
#line 1201 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp4_ = self->priv->_groups;
#line 1201 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp5_ = gee_abstract_set_get_read_only_view ((GeeAbstractSet*) _tmp4_);
#line 1201 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp6_ = _tmp5_;
#line 1201 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_groups_ro);
#line 1201 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_groups_ro = _tmp6_;
#line 1204 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp7_ = _g_object_ref0 (email_addresses);
#line 1204 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_email_addresses);
#line 1204 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_email_addresses = _tmp7_;
#line 1205 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp8_ = self->priv->_email_addresses;
#line 1205 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp9_ = gee_abstract_set_get_read_only_view ((GeeAbstractSet*) _tmp8_);
#line 1205 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp10_ = _tmp9_;
#line 1205 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_email_addresses_ro);
#line 1205 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_email_addresses_ro = _tmp10_;
#line 1208 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp11_ = _g_object_ref0 (phone_numbers);
#line 1208 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_phone_numbers);
#line 1208 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_phone_numbers = _tmp11_;
#line 1209 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp12_ = self->priv->_phone_numbers;
#line 1209 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp13_ = gee_abstract_set_get_read_only_view ((GeeAbstractSet*) _tmp12_);
#line 1209 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp14_ = _tmp13_;
#line 1209 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_phone_numbers_ro);
#line 1209 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_phone_numbers_ro = _tmp14_;
#line 1212 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp15_ = _g_object_ref0 (urls);
#line 1212 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_urls);
#line 1212 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_urls = _tmp15_;
#line 1213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp16_ = self->priv->_urls;
#line 1213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp17_ = gee_abstract_set_get_read_only_view ((GeeAbstractSet*) _tmp16_);
#line 1213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp18_ = _tmp17_;
#line 1213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_urls_ro);
#line 1213 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_urls_ro = _tmp18_;
#line 1216 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (alias == NULL) {
#line 1219 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		alias = "";
#line 5419 "tpf-persona.c"
	}
#line 1222 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (full_name == NULL) {
#line 1225 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		full_name = "";
#line 5425 "tpf-persona.c"
	}
#line 1228 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp19_ = g_strdup (alias);
#line 1228 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (self->priv->_alias);
#line 1228 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_alias = _tmp19_;
#line 1229 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_is_favourite = is_favourite;
#line 1230 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_set_is_in_contact_list (self, is_in_contact_list);
#line 1231 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp20_ = _g_date_time_ref0 (birthday);
#line 1231 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_date_time_unref0 (self->priv->_birthday);
#line 1231 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_birthday = _tmp20_;
#line 1232 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp21_ = g_strdup (full_name);
#line 1232 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (self->priv->_full_name);
#line 1232 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_full_name = _tmp21_;
#line 1235 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp22_ = _g_object_ref0 (avatar);
#line 1235 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_avatar);
#line 1235 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_avatar = _tmp22_;
#line 1237 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (avatar != NULL) {
#line 5457 "tpf-persona.c"
		GFile* _tmp24_;
#line 1237 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp24_ = g_file_icon_get_file (G_TYPE_CHECK_INSTANCE_CAST (avatar, g_file_icon_get_type (), GFileIcon));
#line 1237 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp23_ = _tmp24_;
#line 5463 "tpf-persona.c"
	} else {
#line 1237 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp23_ = NULL;
#line 5467 "tpf-persona.c"
	}
#line 1236 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp25_ = _g_object_ref0 (_tmp23_);
#line 1236 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	avatar_file = _tmp25_;
#line 1238 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_store_update_avatar_cache (G_TYPE_CHECK_INSTANCE_CAST (store, TPF_TYPE_PERSONA_STORE, TpfPersonaStore), iid, avatar_file);
#line 1241 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_presence_details_set_presence_type ((FolksPresenceDetails*) self, FOLKS_PRESENCE_TYPE_OFFLINE);
#line 1242 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_presence_details_set_presence_message ((FolksPresenceDetails*) self, "");
#line 1243 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_presence_details_set_presence_status ((FolksPresenceDetails*) self, "offline");
#line 1244 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp26_ = g_new0 (gchar*, 0 + 1);
#line 1244 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp27_ = _tmp26_;
#line 1244 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp27__length1 = 0;
#line 1244 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_presence_details_set_client_types ((FolksPresenceDetails*) self, _tmp27_, 0);
#line 1244 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp27_ = (_vala_array_free (_tmp27_, _tmp27__length1, (GDestroyNotify) g_free), NULL);
#line 1246 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp28_ = g_new0 (gchar*, 0 + 1);
#line 1246 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_writeable_properties = (_vala_array_free (self->priv->_writeable_properties, self->priv->_writeable_properties_length1, (GDestroyNotify) g_free), NULL);
#line 1246 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_writeable_properties = _tmp28_;
#line 1246 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_writeable_properties_length1 = 0;
#line 1246 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->__writeable_properties_size_ = self->priv->_writeable_properties_length1;
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (avatar_file);
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (im_fd);
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return self;
#line 5507 "tpf-persona.c"
}


TpfPersona*
tpf_persona_new_from_cache (TpfPersonaStore* store,
                            const gchar* uid,
                            const gchar* iid,
                            const gchar* im_address,
                            const gchar* protocol,
                            FolksSmallSet* groups,
                            gboolean is_favourite,
                            const gchar* alias,
                            gboolean is_in_contact_list,
                            gboolean is_user,
                            GLoadableIcon* avatar,
                            GDateTime* birthday,
                            const gchar* full_name,
                            FolksSmallSet* email_addresses,
                            FolksSmallSet* phone_numbers,
                            FolksSmallSet* urls)
{
#line 1179 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return tpf_persona_construct_from_cache (TPF_TYPE_PERSONA, store, uid, iid, im_address, protocol, groups, is_favourite, alias, is_in_contact_list, is_user, avatar, birthday, full_name, email_addresses, phone_numbers, urls);
#line 5531 "tpf-persona.c"
}


static void
_tpf_persona_contact_notify_presence_message (TpfPersona* self)
{
	TpContact* contact = NULL;
	TpContact* _tmp0_;
	TpContact* _tmp1_;
	const gchar* _tmp2_;
#line 1254 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (self != NULL);
#line 1256 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_contact;
#line 1256 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp0_, tp_contact_get_type (), TpContact));
#line 1256 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	contact = _tmp1_;
#line 1257 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_vala_assert (contact != NULL, "contact != null");
#line 1258 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp2_ = tp_contact_get_presence_message (contact);
#line 1258 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_presence_details_set_presence_message ((FolksPresenceDetails*) self, _tmp2_);
#line 1254 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (contact);
#line 5558 "tpf-persona.c"
}


static void
_tpf_persona_contact_notify_presence_type (TpfPersona* self)
{
	TpContact* contact = NULL;
	TpContact* _tmp0_;
	TpContact* _tmp1_;
#line 1261 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (self != NULL);
#line 1263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_contact;
#line 1263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp0_, tp_contact_get_type (), TpContact));
#line 1263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	contact = _tmp1_;
#line 1264 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_vala_assert (contact != NULL, "contact != null");
#line 1265 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_presence_details_set_presence_type ((FolksPresenceDetails*) self, _tpf_persona_folks_presence_type_from_tp (tp_contact_get_presence_type (contact)));
#line 1261 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (contact);
#line 5582 "tpf-persona.c"
}


static void
_tpf_persona_contact_notify_client_types (TpfPersona* self)
{
	TpContact* contact = NULL;
	TpContact* _tmp0_;
	TpContact* _tmp1_;
	gchar** _tmp2_;
	gchar** _tmp3_;
#line 1269 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (self != NULL);
#line 1271 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_contact;
#line 1271 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp0_, tp_contact_get_type (), TpContact));
#line 1271 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	contact = _tmp1_;
#line 1272 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_vala_assert (contact != NULL, "contact != null");
#line 1273 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp3_ = _tmp2_ = tp_contact_get_client_types (contact);
#line 1273 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_presence_details_set_client_types ((FolksPresenceDetails*) self, _tmp3_, _vala_array_length (_tmp2_));
#line 1269 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (contact);
#line 5610 "tpf-persona.c"
}


static void
_tpf_persona_contact_notify_presence_status (TpfPersona* self)
{
	TpContact* contact = NULL;
	TpContact* _tmp0_;
	TpContact* _tmp1_;
	const gchar* _tmp2_;
#line 1276 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (self != NULL);
#line 1278 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_contact;
#line 1278 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp0_, tp_contact_get_type (), TpContact));
#line 1278 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	contact = _tmp1_;
#line 1279 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_vala_assert (contact != NULL, "contact != null");
#line 1280 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp2_ = tp_contact_get_presence_status (contact);
#line 1280 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_presence_details_set_presence_status ((FolksPresenceDetails*) self, _tmp2_);
#line 1276 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (contact);
#line 5637 "tpf-persona.c"
}


static FolksPresenceType
_tpf_persona_folks_presence_type_from_tp (TpConnectionPresenceType type)
{
	FolksPresenceType result = 0;
#line 1286 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	switch (type) {
#line 1286 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TP_CONNECTION_PRESENCE_TYPE_AVAILABLE:
#line 5649 "tpf-persona.c"
		{
#line 1289 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			result = FOLKS_PRESENCE_TYPE_AVAILABLE;
#line 1289 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return result;
#line 5655 "tpf-persona.c"
		}
#line 1286 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TP_CONNECTION_PRESENCE_TYPE_AWAY:
#line 5659 "tpf-persona.c"
		{
#line 1291 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			result = FOLKS_PRESENCE_TYPE_AWAY;
#line 1291 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return result;
#line 5665 "tpf-persona.c"
		}
#line 1286 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TP_CONNECTION_PRESENCE_TYPE_BUSY:
#line 5669 "tpf-persona.c"
		{
#line 1293 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			result = FOLKS_PRESENCE_TYPE_BUSY;
#line 1293 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return result;
#line 5675 "tpf-persona.c"
		}
#line 1286 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TP_CONNECTION_PRESENCE_TYPE_ERROR:
#line 5679 "tpf-persona.c"
		{
#line 1295 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			result = FOLKS_PRESENCE_TYPE_ERROR;
#line 1295 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return result;
#line 5685 "tpf-persona.c"
		}
#line 1286 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TP_CONNECTION_PRESENCE_TYPE_EXTENDED_AWAY:
#line 5689 "tpf-persona.c"
		{
#line 1297 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			result = FOLKS_PRESENCE_TYPE_EXTENDED_AWAY;
#line 1297 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return result;
#line 5695 "tpf-persona.c"
		}
#line 1286 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TP_CONNECTION_PRESENCE_TYPE_HIDDEN:
#line 5699 "tpf-persona.c"
		{
#line 1299 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			result = FOLKS_PRESENCE_TYPE_HIDDEN;
#line 1299 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return result;
#line 5705 "tpf-persona.c"
		}
#line 1286 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TP_CONNECTION_PRESENCE_TYPE_OFFLINE:
#line 5709 "tpf-persona.c"
		{
#line 1301 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			result = FOLKS_PRESENCE_TYPE_OFFLINE;
#line 1301 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return result;
#line 5715 "tpf-persona.c"
		}
#line 1286 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TP_CONNECTION_PRESENCE_TYPE_UNKNOWN:
#line 5719 "tpf-persona.c"
		{
#line 1303 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			result = FOLKS_PRESENCE_TYPE_UNKNOWN;
#line 1303 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return result;
#line 5725 "tpf-persona.c"
		}
#line 1286 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TP_CONNECTION_PRESENCE_TYPE_UNSET:
#line 5729 "tpf-persona.c"
		{
#line 1305 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			result = FOLKS_PRESENCE_TYPE_UNSET;
#line 1305 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return result;
#line 5735 "tpf-persona.c"
		}
		default:
		{
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			result = FOLKS_PRESENCE_TYPE_UNKNOWN;
#line 1307 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			return result;
#line 5743 "tpf-persona.c"
		}
	}
}


static void
_tpf_persona_contact_notify_avatar (TpfPersona* self)
{
	TpContact* contact = NULL;
	TpContact* _tmp0_;
	TpContact* _tmp1_;
	TpContact* _tmp2_;
	GFile* file = NULL;
	TpContact* _tmp3_;
	GFile* _tmp4_;
	GFile* _tmp5_;
	GFile* _tmp6_;
	gchar* token = NULL;
	TpContact* _tmp7_;
	const gchar* _tmp8_;
	const gchar* _tmp9_;
	gchar* _tmp10_;
	GIcon* icon = NULL;
	gboolean from_cache = FALSE;
	const gchar* _tmp11_;
	GFile* _tmp20_;
	gboolean _tmp23_ = FALSE;
	GLoadableIcon* _tmp24_;
	GIcon* _tmp25_;
#line 1311 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (self != NULL);
#line 1313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_contact;
#line 1313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp0_, tp_contact_get_type (), TpContact));
#line 1313 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	contact = _tmp1_;
#line 1314 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp2_ = contact;
#line 1314 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_vala_assert (_tmp2_ != NULL, "contact != null");
#line 1316 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp3_ = contact;
#line 1316 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp4_ = tp_contact_get_avatar_file (_tmp3_);
#line 1316 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp5_ = _tmp4_;
#line 1316 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp6_ = _g_object_ref0 (_tmp5_);
#line 1316 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	file = _tmp6_;
#line 1317 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp7_ = contact;
#line 1317 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp8_ = tp_contact_get_avatar_token (_tmp7_);
#line 1317 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp9_ = _tmp8_;
#line 1317 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp10_ = g_strdup (_tmp9_);
#line 1317 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	token = _tmp10_;
#line 1318 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	icon = NULL;
#line 1319 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	from_cache = FALSE;
#line 1322 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp11_ = token;
#line 1322 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (g_strcmp0 (_tmp11_, "") == 0) {
#line 1325 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (file);
#line 1325 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		file = NULL;
#line 1326 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		from_cache = FALSE;
#line 5819 "tpf-persona.c"
	} else {
		gboolean _tmp12_ = FALSE;
		const gchar* _tmp13_;
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp13_ = token;
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_tmp13_ != NULL) {
#line 5827 "tpf-persona.c"
			GFile* _tmp14_;
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp14_ = file;
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp12_ = _tmp14_ != NULL;
#line 5833 "tpf-persona.c"
		} else {
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp12_ = FALSE;
#line 5837 "tpf-persona.c"
		}
#line 1328 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_tmp12_) {
#line 1331 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			from_cache = FALSE;
#line 5843 "tpf-persona.c"
		} else {
			FolksPersonaStore* _tmp15_;
			FolksPersonaStore* _tmp16_;
			const gchar* _tmp17_;
			const gchar* _tmp18_;
			GFile* _tmp19_;
#line 1336 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp15_ = folks_persona_get_store ((FolksPersona*) self);
#line 1336 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp16_ = _tmp15_;
#line 1336 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp17_ = folks_persona_get_iid ((FolksPersona*) self);
#line 1336 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp18_ = _tmp17_;
#line 1336 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp19_ = _tpf_persona_store_query_avatar_cache (G_TYPE_CHECK_INSTANCE_CAST (_tmp16_, TPF_TYPE_PERSONA_STORE, TpfPersonaStore), _tmp18_);
#line 1336 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_object_unref0 (file);
#line 1336 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			file = _tmp19_;
#line 1337 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			from_cache = TRUE;
#line 5866 "tpf-persona.c"
		}
	}
#line 1340 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp20_ = file;
#line 1340 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp20_ != NULL) {
#line 5873 "tpf-persona.c"
		GFile* _tmp21_;
		GFileIcon* _tmp22_;
#line 1342 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp21_ = file;
#line 1342 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp22_ = (GFileIcon*) g_file_icon_new (_tmp21_);
#line 1342 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (icon);
#line 1342 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		icon = (GIcon*) _tmp22_;
#line 5884 "tpf-persona.c"
	}
#line 1345 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp24_ = self->priv->_avatar;
#line 1345 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp25_ = icon;
#line 1345 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if ((_tmp24_ == NULL) != (_tmp25_ == NULL)) {
#line 1345 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp23_ = TRUE;
#line 5894 "tpf-persona.c"
	} else {
		GLoadableIcon* _tmp26_;
		GIcon* _tmp27_;
#line 1345 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp26_ = self->priv->_avatar;
#line 1345 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp27_ = icon;
#line 1345 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp23_ = !g_icon_equal ((GIcon*) _tmp26_, _tmp27_);
#line 5904 "tpf-persona.c"
	}
#line 1345 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp23_) {
#line 5908 "tpf-persona.c"
		GIcon* _tmp28_;
		GLoadableIcon* _tmp29_;
		gboolean _tmp30_;
#line 1347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp28_ = icon;
#line 1347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp29_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp28_, g_loadable_icon_get_type (), GLoadableIcon));
#line 1347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (self->priv->_avatar);
#line 1347 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_avatar = _tmp29_;
#line 1348 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_notify ((GObject*) self, "avatar");
#line 1350 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp30_ = from_cache;
#line 1350 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (_tmp30_ == FALSE) {
#line 5926 "tpf-persona.c"
			FolksPersonaStore* _tmp31_;
			FolksPersonaStore* _tmp32_;
			FolksPersonaStore* _tmp33_;
			FolksPersonaStore* _tmp34_;
			const gchar* _tmp35_;
			const gchar* _tmp36_;
			GFile* _tmp37_;
#line 1353 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp31_ = folks_persona_get_store ((FolksPersona*) self);
#line 1353 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp32_ = _tmp31_;
#line 1353 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tpf_persona_store_set_cache_needs_update (G_TYPE_CHECK_INSTANCE_CAST (_tmp32_, TPF_TYPE_PERSONA_STORE, TpfPersonaStore));
#line 1356 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp33_ = folks_persona_get_store ((FolksPersona*) self);
#line 1356 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp34_ = _tmp33_;
#line 1356 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp35_ = folks_persona_get_iid ((FolksPersona*) self);
#line 1356 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp36_ = _tmp35_;
#line 1356 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tmp37_ = file;
#line 1356 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_tpf_persona_store_update_avatar_cache (G_TYPE_CHECK_INSTANCE_CAST (_tmp34_, TPF_TYPE_PERSONA_STORE, TpfPersonaStore), _tmp36_, _tmp37_);
#line 5952 "tpf-persona.c"
		}
	}
#line 1311 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (icon);
#line 1311 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (token);
#line 1311 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (file);
#line 1311 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (contact);
#line 5963 "tpf-persona.c"
}


/**
   * Look up a {@link Tpf.Persona} by its {@link TelepathyGLib.Contact}.
   *
   * If the {@link TelepathyGLib.Account} for the contact's
   * {@link TelepathyGLib.Connection} is ``null``, or if a
   * {@link Tpf.PersonaStore} can't be found for that account, ``null`` will be
   * returned. Otherwise, if a {@link Tpf.Persona} already exists for the given
   * contact, that will be returned; if one doesn't exist a new one will be
   * created and returned. In this case, the {@link Tpf.Persona} will be added
   * to the {@link PersonaStore} associated with the account, and will be
   * removed when ``contact`` is destroyed.
   *
   * @param contact the Telepathy contact of the persona
   * @return the persona associated with the contact, or ``null``
   * @since 0.6.6
   */
TpfPersona*
tpf_persona_dup_for_contact (TpContact* contact)
{
	TpfPersona* result = NULL;
	TpAccount* account = NULL;
	TpConnection* _tmp0_;
	TpConnection* _tmp1_;
	TpAccount* _tmp2_;
	TpAccount* _tmp3_;
	TpAccount* _tmp4_;
	TpAccount* _tmp5_;
	TpfPersonaStore* store = NULL;
	TpAccount* _tmp6_;
	TpfPersonaStore* _tmp7_;
	TpfPersonaStore* _tmp8_;
	TpfPersona* _tmp9_;
#line 1378 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (contact != NULL, NULL);
#line 1380 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = tp_contact_get_connection (contact);
#line 1380 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _tmp0_;
#line 1380 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp2_ = tp_connection_get_account (_tmp1_);
#line 1380 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp3_ = _g_object_ref0 (_tmp2_);
#line 1380 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	account = _tmp3_;
#line 1382 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp4_ = account;
#line 1382 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_debug ("tpf-persona.vala:1382: Tpf.Persona.dup_for_contact (%p): got account %" \
"p", contact, _tmp4_);
#line 1386 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp5_ = account;
#line 1386 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp5_ == NULL) {
#line 1388 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		result = NULL;
#line 1388 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (account);
#line 1388 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return result;
#line 6025 "tpf-persona.c"
	}
#line 1391 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp6_ = account;
#line 1391 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp7_ = tpf_persona_store_dup_for_account (_tmp6_);
#line 1391 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	store = _tmp7_;
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp8_ = store;
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp9_ = _tpf_persona_store_ensure_persona_for_contact (_tmp8_, contact);
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp9_;
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (store);
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (account);
#line 1392 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6045 "tpf-persona.c"
}


void
_tpf_persona_increase_im_interaction_counter (TpfPersona* self,
                                              GDateTime* converted_datetime)
{
	guint _tmp0_;
	gboolean _tmp1_ = FALSE;
	GDateTime* _tmp2_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	guint _tmp7_;
	GDateTime* _tmp8_;
	gchar* _tmp9_;
	gchar* _tmp10_;
#line 1395 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (self != NULL);
#line 1395 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (converted_datetime != NULL);
#line 1397 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_im_interaction_count;
#line 1397 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_im_interaction_count = _tmp0_ + 1;
#line 1398 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_notify ((GObject*) self, "im-interaction-count");
#line 1399 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp2_ = self->_last_im_interaction_datetime;
#line 1399 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp2_ == NULL) {
#line 1399 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp1_ = TRUE;
#line 6078 "tpf-persona.c"
	} else {
		GDateTime* _tmp3_;
#line 1400 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp3_ = self->_last_im_interaction_datetime;
#line 1400 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp1_ = g_date_time_compare (_tmp3_, converted_datetime) == -1;
#line 6085 "tpf-persona.c"
	}
#line 1399 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp1_) {
#line 6089 "tpf-persona.c"
		GDateTime* _tmp4_;
#line 1402 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp4_ = _g_date_time_ref0 (converted_datetime);
#line 1402 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_date_time_unref0 (self->_last_im_interaction_datetime);
#line 1402 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->_last_im_interaction_datetime = _tmp4_;
#line 1403 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_notify ((GObject*) self, "last-im-interaction-datetime");
#line 6099 "tpf-persona.c"
	}
#line 1405 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp5_ = folks_persona_get_iid ((FolksPersona*) self);
#line 1405 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp6_ = _tmp5_;
#line 1405 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp7_ = self->priv->_im_interaction_count;
#line 1405 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp8_ = self->_last_im_interaction_datetime;
#line 1405 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp9_ = g_date_time_format (_tmp8_, "%H %M %S - %d %m %y");
#line 1405 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp10_ = _tmp9_;
#line 1405 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_debug ("Persona %s IM interaction details changed:\n" " - count: %u \n - timestamp: %lld", _tmp6_, _tmp7_, _tmp10_);
#line 1405 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (_tmp10_);
#line 6117 "tpf-persona.c"
}


void
_tpf_persona_increase_last_call_interaction_counter (TpfPersona* self,
                                                     GDateTime* converted_datetime)
{
	guint _tmp0_;
	gboolean _tmp1_ = FALSE;
	GDateTime* _tmp2_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	guint _tmp7_;
	GDateTime* _tmp8_;
	gchar* _tmp9_;
	gchar* _tmp10_;
#line 1411 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (self != NULL);
#line 1411 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (converted_datetime != NULL);
#line 1413 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_call_interaction_count;
#line 1413 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_call_interaction_count = _tmp0_ + 1;
#line 1414 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_notify ((GObject*) self, "call-interaction-count");
#line 1415 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp2_ = self->_last_call_interaction_datetime;
#line 1415 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp2_ == NULL) {
#line 1415 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp1_ = TRUE;
#line 6150 "tpf-persona.c"
	} else {
		GDateTime* _tmp3_;
#line 1416 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp3_ = self->_last_call_interaction_datetime;
#line 1416 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp1_ = g_date_time_compare (_tmp3_, converted_datetime) == -1;
#line 6157 "tpf-persona.c"
	}
#line 1415 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp1_) {
#line 6161 "tpf-persona.c"
		GDateTime* _tmp4_;
#line 1418 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp4_ = _g_date_time_ref0 (converted_datetime);
#line 1418 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_date_time_unref0 (self->_last_call_interaction_datetime);
#line 1418 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->_last_call_interaction_datetime = _tmp4_;
#line 1419 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_notify ((GObject*) self, "last-call-interaction-datetime");
#line 6171 "tpf-persona.c"
	}
#line 1421 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp5_ = folks_persona_get_iid ((FolksPersona*) self);
#line 1421 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp6_ = _tmp5_;
#line 1421 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp7_ = self->priv->_call_interaction_count;
#line 1421 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp8_ = self->_last_call_interaction_datetime;
#line 1421 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp9_ = g_date_time_format (_tmp8_, "%H %M %S - %d %m %y");
#line 1421 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp10_ = _tmp9_;
#line 1421 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_debug ("Persona %s Call interaction details changed:\n" " - count: %u \n - timestamp: %lld", _tmp6_, _tmp7_, _tmp10_);
#line 1421 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (_tmp10_);
#line 6189 "tpf-persona.c"
}


gboolean
tpf_persona_get_is_in_contact_list (TpfPersona* self)
{
	gboolean result;
	gboolean _tmp0_;
#line 75 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 75 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_is_in_contact_list;
#line 75 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 75 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6206 "tpf-persona.c"
}


void
tpf_persona_set_is_in_contact_list (TpfPersona* self,
                                    gboolean value)
{
#line 75 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (self != NULL);
#line 75 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (tpf_persona_get_is_in_contact_list (self) != value) {
#line 75 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_is_in_contact_list = value;
#line 75 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_notify_by_pspec ((GObject *) self, tpf_persona_properties[TPF_PERSONA_IS_IN_CONTACT_LIST_PROPERTY]);
#line 6222 "tpf-persona.c"
	}
}


static GLoadableIcon*
tpf_persona_real_get_avatar (FolksAvatarDetails* base)
{
	GLoadableIcon* result;
	TpfPersona* self;
	GLoadableIcon* _tmp0_;
#line 89 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 89 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_avatar;
#line 89 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 89 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6241 "tpf-persona.c"
}


static void
tpf_persona_real_set_avatar (FolksAvatarDetails* base,
                             GLoadableIcon* value)
{
	TpfPersona* self;
#line 90 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 90 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_avatar_details_change_avatar ((FolksAvatarDetails*) self, value, NULL, NULL);
#line 6254 "tpf-persona.c"
}


static FolksStructuredName*
tpf_persona_real_get_structured_name (FolksNameDetails* base)
{
	FolksStructuredName* result;
	TpfPersona* self;
#line 101 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 101 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = NULL;
#line 101 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6269 "tpf-persona.c"
}


static void
tpf_persona_real_set_structured_name (FolksNameDetails* base,
                                      FolksStructuredName* value)
{
	TpfPersona* self;
#line 102 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 102 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_name_details_change_structured_name ((FolksNameDetails*) self, value, NULL, NULL);
#line 6282 "tpf-persona.c"
}


static const gchar*
tpf_persona_real_get_full_name (FolksNameDetails* base)
{
	const gchar* result;
	TpfPersona* self;
	const gchar* _tmp0_;
#line 115 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 115 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_full_name;
#line 115 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 115 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6300 "tpf-persona.c"
}


static void
tpf_persona_real_set_full_name (FolksNameDetails* base,
                                const gchar* value)
{
	TpfPersona* self;
#line 116 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 116 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_name_details_change_full_name ((FolksNameDetails*) self, value, NULL, NULL);
#line 6313 "tpf-persona.c"
}


static const gchar*
tpf_persona_real_get_nickname (FolksNameDetails* base)
{
	const gchar* result;
	TpfPersona* self;
#line 163 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 163 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = "";
#line 163 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6328 "tpf-persona.c"
}


static void
tpf_persona_real_set_nickname (FolksNameDetails* base,
                               const gchar* value)
{
	TpfPersona* self;
#line 164 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 164 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_name_details_change_nickname ((FolksNameDetails*) self, value, NULL, NULL);
#line 6341 "tpf-persona.c"
}


static const gchar*
tpf_persona_real_get_calendar_event_id (FolksBirthdayDetails* base)
{
	const gchar* result;
	TpfPersona* self;
#line 177 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 177 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = NULL;
#line 177 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6356 "tpf-persona.c"
}


static void
tpf_persona_real_set_calendar_event_id (FolksBirthdayDetails* base,
                                        const gchar* value)
{
	TpfPersona* self;
#line 178 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 178 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_birthday_details_change_calendar_event_id ((FolksBirthdayDetails*) self, value, NULL, NULL);
#line 6369 "tpf-persona.c"
}


static GDateTime*
tpf_persona_real_get_birthday (FolksBirthdayDetails* base)
{
	GDateTime* result;
	TpfPersona* self;
	GDateTime* _tmp0_;
#line 190 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 190 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_birthday;
#line 190 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 190 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6387 "tpf-persona.c"
}


static void
tpf_persona_real_set_birthday (FolksBirthdayDetails* base,
                               GDateTime* value)
{
	TpfPersona* self;
#line 191 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 191 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_birthday_details_change_birthday ((FolksBirthdayDetails*) self, value, NULL, NULL);
#line 6400 "tpf-persona.c"
}


static FolksPresenceType
tpf_persona_real_get_presence_type (FolksPresenceDetails* base)
{
	FolksPresenceType result;
	TpfPersona* self;
	FolksPresenceType _tmp0_;
#line 238 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 238 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_presence_type;
#line 238 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 238 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6418 "tpf-persona.c"
}


static void
tpf_persona_real_set_presence_type (FolksPresenceDetails* base,
                                    FolksPresenceType value)
{
	TpfPersona* self;
#line 238 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 238 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (tpf_persona_real_get_presence_type (base) != value) {
#line 238 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_presence_type = value;
#line 238 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_notify_by_pspec ((GObject *) self, tpf_persona_properties[TPF_PERSONA_PRESENCE_TYPE_PROPERTY]);
#line 6435 "tpf-persona.c"
	}
}


static const gchar*
tpf_persona_real_get_presence_status (FolksPresenceDetails* base)
{
	const gchar* result;
	TpfPersona* self;
	const gchar* _tmp0_;
#line 247 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 247 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_presence_status;
#line 247 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 247 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6454 "tpf-persona.c"
}


static void
tpf_persona_real_set_presence_status (FolksPresenceDetails* base,
                                      const gchar* value)
{
	TpfPersona* self;
#line 247 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 247 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (g_strcmp0 (value, tpf_persona_real_get_presence_status (base)) != 0) {
#line 6467 "tpf-persona.c"
		gchar* _tmp0_;
#line 247 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp0_ = g_strdup (value);
#line 247 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_free0 (self->priv->_presence_status);
#line 247 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_presence_status = _tmp0_;
#line 247 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_notify_by_pspec ((GObject *) self, tpf_persona_properties[TPF_PERSONA_PRESENCE_STATUS_PROPERTY]);
#line 6477 "tpf-persona.c"
	}
}


static const gchar*
tpf_persona_real_get_presence_message (FolksPresenceDetails* base)
{
	const gchar* result;
	TpfPersona* self;
	const gchar* _tmp0_;
#line 254 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 254 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_presence_message;
#line 254 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 254 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6496 "tpf-persona.c"
}


static void
tpf_persona_real_set_presence_message (FolksPresenceDetails* base,
                                       const gchar* value)
{
	TpfPersona* self;
#line 254 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 254 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (g_strcmp0 (value, tpf_persona_real_get_presence_message (base)) != 0) {
#line 6509 "tpf-persona.c"
		gchar* _tmp0_;
#line 254 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp0_ = g_strdup (value);
#line 254 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_free0 (self->priv->_presence_message);
#line 254 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_presence_message = _tmp0_;
#line 254 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_notify_by_pspec ((GObject *) self, tpf_persona_properties[TPF_PERSONA_PRESENCE_MESSAGE_PROPERTY]);
#line 6519 "tpf-persona.c"
	}
}


static gchar**
tpf_persona_real_get_client_types (FolksPresenceDetails* base,
                                   int* result_length1)
{
	gchar** result;
	TpfPersona* self;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_client_types;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0__length1 = self->priv->_client_types_length1;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _tmp0_;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1__length1 = _tmp0__length1;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (result_length1) {
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		*result_length1 = _tmp1__length1;
#line 6548 "tpf-persona.c"
	}
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp1_;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6554 "tpf-persona.c"
}


static gchar**
_vala_array_dup2 (gchar** self,
                  int length)
{
	gchar** result;
	int i;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = g_new0 (gchar*, length + 1);
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	for (i = 0; i < length; i++) {
#line 6568 "tpf-persona.c"
		gchar* _tmp0_;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp0_ = g_strdup (self[i]);
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		result[i] = _tmp0_;
#line 6574 "tpf-persona.c"
	}
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6578 "tpf-persona.c"
}


static void
tpf_persona_real_set_client_types (FolksPresenceDetails* base,
                                   gchar** value,
                                   int value_length1)
{
	TpfPersona* self;
	int old_value_length;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (tpf_persona_real_get_client_types (base, &old_value_length) != value) {
#line 6593 "tpf-persona.c"
		gchar** _tmp0_;
		gint _tmp0__length1;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp0_ = (value != NULL) ? _vala_array_dup2 (value, value_length1) : ((gpointer) value);
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp0__length1 = value_length1;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_client_types = (_vala_array_free (self->priv->_client_types, self->priv->_client_types_length1, (GDestroyNotify) g_free), NULL);
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_client_types = _tmp0_;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_client_types_length1 = _tmp0__length1;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->__client_types_size_ = self->priv->_client_types_length1;
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_notify_by_pspec ((GObject *) self, tpf_persona_properties[TPF_PERSONA_CLIENT_TYPES_PROPERTY]);
#line 6610 "tpf-persona.c"
	}
}


static gchar**
tpf_persona_real_get_linkable_properties (FolksPersona* base,
                                          int* result_length1)
{
	gchar** result;
	TpfPersona* self;
	gchar** _tmp0_;
	gint _tmp0__length1;
#line 272 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 272 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = TPF_PERSONA__linkable_properties;
#line 272 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0__length1 = G_N_ELEMENTS (TPF_PERSONA__linkable_properties);
#line 272 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (result_length1) {
#line 272 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		*result_length1 = _tmp0__length1;
#line 6633 "tpf-persona.c"
	}
#line 272 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 272 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6639 "tpf-persona.c"
}


static gchar**
tpf_persona_real_get_writeable_properties (FolksPersona* base,
                                           int* result_length1)
{
	gchar** result;
	TpfPersona* self;
	gchar** _tmp0_;
	gint _tmp0__length1;
	gchar** _tmp1_;
	gint _tmp1__length1;
#line 282 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 282 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_writeable_properties;
#line 282 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0__length1 = self->priv->_writeable_properties_length1;
#line 282 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _tmp0_;
#line 282 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1__length1 = _tmp0__length1;
#line 282 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (result_length1) {
#line 282 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		*result_length1 = _tmp1__length1;
#line 6667 "tpf-persona.c"
	}
#line 282 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp1_;
#line 282 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6673 "tpf-persona.c"
}


static const gchar*
tpf_persona_real_get_alias (FolksAliasDetails* base)
{
	const gchar* result;
	TpfPersona* self;
	const gchar* _tmp0_;
#line 295 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 295 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_alias;
#line 295 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 295 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6691 "tpf-persona.c"
}


static void
tpf_persona_real_set_alias (FolksAliasDetails* base,
                            const gchar* value)
{
	TpfPersona* self;
#line 296 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 296 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_alias_details_change_alias ((FolksAliasDetails*) self, value, NULL, NULL);
#line 6704 "tpf-persona.c"
}


static gboolean
tpf_persona_real_get_is_favourite (FolksFavouriteDetails* base)
{
	gboolean result;
	TpfPersona* self;
	gboolean _tmp0_;
#line 329 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 329 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_is_favourite;
#line 329 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 329 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6722 "tpf-persona.c"
}


static void
tpf_persona_real_set_is_favourite (FolksFavouriteDetails* base,
                                   gboolean value)
{
	TpfPersona* self;
#line 330 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 330 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_favourite_details_change_is_favourite ((FolksFavouriteDetails*) self, value, NULL, NULL);
#line 6735 "tpf-persona.c"
}


static GeeSet*
tpf_persona_real_get_email_addresses (FolksEmailDetails* base)
{
	GeeSet* result;
	TpfPersona* self;
	GeeSet* _tmp0_;
#line 380 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 382 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_notify_contact_info (self, TRUE, FALSE);
#line 383 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_email_addresses_ro;
#line 383 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 383 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6755 "tpf-persona.c"
}


static void
tpf_persona_real_set_email_addresses (FolksEmailDetails* base,
                                      GeeSet* value)
{
	TpfPersona* self;
#line 385 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 385 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_email_details_change_email_addresses ((FolksEmailDetails*) self, value, NULL, NULL);
#line 6768 "tpf-persona.c"
}


static GeeMultiMap*
tpf_persona_real_get_im_addresses (FolksImDetails* base)
{
	GeeMultiMap* result;
	TpfPersona* self;
	GeeHashMultiMap* _tmp0_;
#line 415 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 415 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_im_addresses;
#line 415 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = (GeeMultiMap*) _tmp0_;
#line 415 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6786 "tpf-persona.c"
}


static void
tpf_persona_real_set_im_addresses (FolksImDetails* base,
                                   GeeMultiMap* value)
{
	TpfPersona* self;
#line 416 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 416 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_im_details_change_im_addresses ((FolksImDetails*) self, value, NULL, NULL);
#line 6799 "tpf-persona.c"
}


static guint
tpf_persona_real_get_im_interaction_count (FolksInteractionDetails* base)
{
	guint result;
	TpfPersona* self;
	guint _tmp0_;
#line 430 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 430 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_im_interaction_count;
#line 430 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 430 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6817 "tpf-persona.c"
}


static GDateTime*
tpf_persona_real_get_last_im_interaction_datetime (FolksInteractionDetails* base)
{
	GDateTime* result;
	TpfPersona* self;
	GDateTime* _tmp0_;
#line 445 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 445 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->_last_im_interaction_datetime;
#line 445 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 445 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6835 "tpf-persona.c"
}


static guint
tpf_persona_real_get_call_interaction_count (FolksInteractionDetails* base)
{
	guint result;
	TpfPersona* self;
	guint _tmp0_;
#line 459 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 459 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_call_interaction_count;
#line 459 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 459 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6853 "tpf-persona.c"
}


static GDateTime*
tpf_persona_real_get_last_call_interaction_datetime (FolksInteractionDetails* base)
{
	GDateTime* result;
	TpfPersona* self;
	GDateTime* _tmp0_;
#line 474 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 474 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->_last_call_interaction_datetime;
#line 474 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 474 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6871 "tpf-persona.c"
}


static GeeSet*
tpf_persona_real_get_groups (FolksGroupDetails* base)
{
	GeeSet* result;
	TpfPersona* self;
	GeeSet* _tmp0_;
#line 488 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 488 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_groups_ro;
#line 488 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 488 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6889 "tpf-persona.c"
}


static void
tpf_persona_real_set_groups (FolksGroupDetails* base,
                             GeeSet* value)
{
	TpfPersona* self;
#line 489 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 489 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_group_details_change_groups ((FolksGroupDetails*) self, value, NULL, NULL);
#line 6902 "tpf-persona.c"
}


TpContact*
tpf_persona_get_contact (TpfPersona* self)
{
	TpContact* result;
	TpContact* _tmp0_;
#line 634 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 642 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_contact;
#line 642 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 642 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6919 "tpf-persona.c"
}


static void
tpf_persona_set_contact (TpfPersona* self,
                         TpContact* value)
{
#line 645 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (self != NULL);
#line 647 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_contact = value;
#line 645 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_notify_by_pspec ((GObject *) self, tpf_persona_properties[TPF_PERSONA_CONTACT_PROPERTY]);
#line 6933 "tpf-persona.c"
}


static GeeSet*
tpf_persona_real_get_phone_numbers (FolksPhoneDetails* base)
{
	GeeSet* result;
	TpfPersona* self;
	GeeSet* _tmp0_;
#line 662 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 664 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_notify_contact_info (self, TRUE, FALSE);
#line 665 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_phone_numbers_ro;
#line 665 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 665 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6953 "tpf-persona.c"
}


static void
tpf_persona_real_set_phone_numbers (FolksPhoneDetails* base,
                                    GeeSet* value)
{
	TpfPersona* self;
#line 667 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 667 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_phone_details_change_phone_numbers ((FolksPhoneDetails*) self, value, NULL, NULL);
#line 6966 "tpf-persona.c"
}


static GeeSet*
tpf_persona_real_get_urls (FolksUrlDetails* base)
{
	GeeSet* result;
	TpfPersona* self;
	GeeSet* _tmp0_;
#line 693 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 695 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_notify_contact_info (self, TRUE, FALSE);
#line 696 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_urls_ro;
#line 696 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	result = _tmp0_;
#line 696 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return result;
#line 6986 "tpf-persona.c"
}


static void
tpf_persona_real_set_urls (FolksUrlDetails* base,
                           GeeSet* value)
{
	TpfPersona* self;
#line 698 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = (TpfPersona*) base;
#line 698 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	folks_url_details_change_urls ((FolksUrlDetails*) self, value, NULL, NULL);
#line 6999 "tpf-persona.c"
}


static void
_tpf_persona___lambda16_ (TpfPersona* self,
                          GObject* s,
                          GParamSpec* p)
{
	TpContact* c = NULL;
	TpContact* _tmp0_;
	TpContact* _tmp1_;
	TpContact* _tmp2_;
	TpContact* _tmp3_;
	const gchar* _tmp4_;
	const gchar* _tmp5_;
	const gchar* _tmp6_;
	TpContact* _tmp7_;
	const gchar* _tmp8_;
	const gchar* _tmp9_;
#line 803 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (s != NULL);
#line 803 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (p != NULL);
#line 805 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_contact;
#line 805 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp0_, tp_contact_get_type (), TpContact));
#line 805 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	c = _tmp1_;
#line 806 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp2_ = c;
#line 806 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_vala_assert (_tmp2_ != NULL, "c != null");
#line 809 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp3_ = c;
#line 809 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp4_ = tp_contact_get_alias (_tmp3_);
#line 809 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp5_ = _tmp4_;
#line 809 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_vala_assert (_tmp5_ != NULL, "c.alias != null");
#line 811 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp6_ = self->priv->_alias;
#line 811 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp7_ = c;
#line 811 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp8_ = tp_contact_get_alias (_tmp7_);
#line 811 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp9_ = _tmp8_;
#line 811 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (g_strcmp0 (_tmp6_, _tmp9_) != 0) {
#line 7051 "tpf-persona.c"
		TpContact* _tmp10_;
		const gchar* _tmp11_;
		const gchar* _tmp12_;
		gchar* _tmp13_;
		FolksPersonaStore* _tmp14_;
		FolksPersonaStore* _tmp15_;
#line 813 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp10_ = c;
#line 813 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp11_ = tp_contact_get_alias (_tmp10_);
#line 813 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp12_ = _tmp11_;
#line 813 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp13_ = g_strdup (_tmp12_);
#line 813 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_free0 (self->priv->_alias);
#line 813 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		self->priv->_alias = _tmp13_;
#line 814 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_object_notify ((GObject*) self, "alias");
#line 817 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp14_ = folks_persona_get_store ((FolksPersona*) self);
#line 817 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp15_ = _tmp14_;
#line 817 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tpf_persona_store_set_cache_needs_update (G_TYPE_CHECK_INSTANCE_CAST (_tmp15_, TPF_TYPE_PERSONA_STORE, TpfPersonaStore));
#line 7078 "tpf-persona.c"
	}
#line 803 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (c);
#line 7082 "tpf-persona.c"
}


static void
__tpf_persona___lambda16__g_object_notify (GObject* _sender,
                                           GParamSpec* pspec,
                                           gpointer self)
{
#line 803 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona___lambda16_ ((TpfPersona*) self, _sender, pspec);
#line 7093 "tpf-persona.c"
}


static void
_tpf_persona___lambda17_ (TpfPersona* self,
                          GObject* s,
                          GParamSpec* p)
{
#line 838 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (s != NULL);
#line 838 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (p != NULL);
#line 840 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_notify_avatar (self);
#line 7108 "tpf-persona.c"
}


static void
__tpf_persona___lambda17__g_object_notify (GObject* _sender,
                                           GParamSpec* pspec,
                                           gpointer self)
{
#line 838 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona___lambda17_ ((TpfPersona*) self, _sender, pspec);
#line 7119 "tpf-persona.c"
}


static void
_tpf_persona___lambda18_ (TpfPersona* self,
                          GObject* s,
                          GParamSpec* p)
{
#line 844 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (s != NULL);
#line 844 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (p != NULL);
#line 846 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_notify_presence_message (self);
#line 7134 "tpf-persona.c"
}


static void
__tpf_persona___lambda18__g_object_notify (GObject* _sender,
                                           GParamSpec* pspec,
                                           gpointer self)
{
#line 844 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona___lambda18_ ((TpfPersona*) self, _sender, pspec);
#line 7145 "tpf-persona.c"
}


static void
_tpf_persona___lambda19_ (TpfPersona* self,
                          GObject* s,
                          GParamSpec* p)
{
#line 848 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (s != NULL);
#line 848 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (p != NULL);
#line 850 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_notify_presence_type (self);
#line 7160 "tpf-persona.c"
}


static void
__tpf_persona___lambda19__g_object_notify (GObject* _sender,
                                           GParamSpec* pspec,
                                           gpointer self)
{
#line 848 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona___lambda19_ ((TpfPersona*) self, _sender, pspec);
#line 7171 "tpf-persona.c"
}


static void
_tpf_persona___lambda20_ (TpfPersona* self,
                          GObject* s,
                          GParamSpec* p)
{
#line 852 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (s != NULL);
#line 852 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (p != NULL);
#line 854 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_notify_presence_status (self);
#line 7186 "tpf-persona.c"
}


static void
__tpf_persona___lambda20__g_object_notify (GObject* _sender,
                                           GParamSpec* pspec,
                                           gpointer self)
{
#line 852 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona___lambda20_ ((TpfPersona*) self, _sender, pspec);
#line 7197 "tpf-persona.c"
}


static void
_tpf_persona___lambda21_ (TpfPersona* self,
                          GObject* s,
                          GParamSpec* p)
{
#line 856 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (s != NULL);
#line 856 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (p != NULL);
#line 858 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_notify_client_types (self);
#line 7212 "tpf-persona.c"
}


static void
__tpf_persona___lambda21__g_object_notify (GObject* _sender,
                                           GParamSpec* pspec,
                                           gpointer self)
{
#line 856 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona___lambda21_ ((TpfPersona*) self, _sender, pspec);
#line 7223 "tpf-persona.c"
}


static void
_tpf_persona___lambda22_ (TpfPersona* self,
                          GObject* s,
                          GParamSpec* p)
{
#line 866 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (s != NULL);
#line 866 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (p != NULL);
#line 868 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_notify_contact_info (self, FALSE, TRUE);
#line 7238 "tpf-persona.c"
}


static void
__tpf_persona___lambda22__g_object_notify (GObject* _sender,
                                           GParamSpec* pspec,
                                           gpointer self)
{
#line 866 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona___lambda22_ ((TpfPersona*) self, _sender, pspec);
#line 7249 "tpf-persona.c"
}


static void
_tpf_persona___lambda23_ (TpfPersona* self,
                          gchar** added,
                          int added_length1,
                          gchar** removed,
                          int removed_length1)
{
#line 874 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_groups_changed (self, added, added_length1, removed, removed_length1);
#line 7262 "tpf-persona.c"
}


static void
__tpf_persona___lambda23__tp_contact_contact_groups_changed (TpContact* _sender,
                                                             gchar** added,
                                                             gchar** removed,
                                                             gpointer self)
{
#line 872 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona___lambda23_ ((TpfPersona*) self, added, _vala_array_length (added), removed, _vala_array_length (removed));
#line 7274 "tpf-persona.c"
}


static void
_tpf_persona____lambda24_ (TpfPersona* self,
                           GObject* s,
                           GParamSpec* p)
{
#line 882 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (s != NULL);
#line 882 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (p != NULL);
#line 884 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_update_writeable_properties (self);
#line 7289 "tpf-persona.c"
}


static void
__tpf_persona____lambda24__g_object_notify (GObject* _sender,
                                            GParamSpec* pspec,
                                            gpointer self)
{
#line 882 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona____lambda24_ ((TpfPersona*) self, _sender, pspec);
#line 7300 "tpf-persona.c"
}


static void
_tpf_persona___lambda25_ (TpfPersona* self,
                          GObject* s,
                          GParamSpec* p)
{
#line 888 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (s != NULL);
#line 888 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_return_if_fail (p != NULL);
#line 890 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_update_writeable_properties (self);
#line 7315 "tpf-persona.c"
}


static void
__tpf_persona___lambda25__g_object_notify (GObject* _sender,
                                           GParamSpec* pspec,
                                           gpointer self)
{
#line 888 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona___lambda25_ ((TpfPersona*) self, _sender, pspec);
#line 7326 "tpf-persona.c"
}


static GObject *
tpf_persona_constructor (GType type,
                         guint n_construct_properties,
                         GObjectConstructParam * construct_properties)
{
	GObject * obj;
	GObjectClass * parent_class;
	TpfPersona * self;
	FolksSmallSet* _tmp0_;
	GeeSet* _tmp1_;
	GeeSet* _tmp2_;
	TpContact* contact = NULL;
	TpContact* _tmp3_;
	TpContact* _tmp4_;
	TpContact* _tmp5_;
	TpContact* _tmp6_;
	const gchar* _tmp7_;
	gchar* _tmp8_;
	TpContact* _tmp9_;
	TpConnection* connection = NULL;
	TpContact* _tmp10_;
	TpConnection* _tmp11_;
	TpConnection* _tmp12_;
	TpConnection* _tmp13_;
	TpAccount* account = NULL;
	TpConnection* _tmp14_;
	TpAccount* _tmp15_;
	TpAccount* _tmp16_;
	TpContact* _tmp32_;
	TpContact* _tmp33_;
	TpContact* _tmp34_;
	TpContact* _tmp35_;
	TpContact* _tmp36_;
	TpContact* _tmp37_;
	TpContact* _tmp38_;
	TpContact* _tmp39_;
	gchar** _tmp40_;
	gchar** _tmp41_;
	gchar** _tmp42_;
	gchar** _tmp43_;
	gint _tmp43__length1;
	TpfPersonaStore* tpf_store = NULL;
	FolksPersonaStore* _tmp44_;
	FolksPersonaStore* _tmp45_;
	TpfPersonaStore* _tmp46_;
	gboolean _tmp47_;
	gboolean _tmp48_;
	TpfPersonaStore* _tmp50_;
	GError * _inner_error_ = NULL;
#line 787 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	parent_class = G_OBJECT_CLASS (tpf_persona_parent_class);
#line 787 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	obj = parent_class->constructor (type, n_construct_properties, construct_properties);
#line 787 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TPF_TYPE_PERSONA, TpfPersona);
#line 789 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = self->priv->_groups;
#line 789 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = gee_abstract_set_get_read_only_view ((GeeAbstractSet*) _tmp0_);
#line 789 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp2_ = _tmp1_;
#line 789 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_groups_ro);
#line 789 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_groups_ro = _tmp2_;
#line 793 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp3_ = self->priv->_contact;
#line 793 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp4_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_CAST (_tmp3_, tp_contact_get_type (), TpContact));
#line 793 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	contact = _tmp4_;
#line 795 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp5_ = contact;
#line 795 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp5_ == NULL) {
#line 797 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (contact);
#line 797 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		return obj;
#line 7409 "tpf-persona.c"
	}
#line 801 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp6_ = contact;
#line 801 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp7_ = tp_contact_get_alias (_tmp6_);
#line 801 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp8_ = g_strdup (_tmp7_);
#line 801 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (self->priv->_alias);
#line 801 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_alias = _tmp8_;
#line 803 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp9_ = contact;
#line 803 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_signal_connect_object ((GObject*) _tmp9_, "notify::alias", (GCallback) __tpf_persona___lambda16__g_object_notify, self, 0);
#line 822 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp10_ = contact;
#line 822 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp11_ = tp_contact_get_connection (_tmp10_);
#line 822 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp12_ = _tmp11_;
#line 822 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp13_ = _g_object_ref0 (_tmp12_);
#line 822 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	connection = _tmp13_;
#line 823 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp14_ = connection;
#line 823 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp15_ = tp_connection_get_account (_tmp14_);
#line 823 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp16_ = _g_object_ref0 (_tmp15_);
#line 823 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	account = _tmp16_;
#line 7443 "tpf-persona.c"
	{
		gchar* im_addr = NULL;
		const gchar* _tmp17_;
		const gchar* _tmp18_;
		TpAccount* _tmp19_;
		const gchar* _tmp20_;
		const gchar* _tmp21_;
		gchar* _tmp22_;
		FolksImFieldDetails* im_fd = NULL;
		const gchar* _tmp23_;
		FolksImFieldDetails* _tmp24_;
		GeeHashMultiMap* _tmp25_;
		TpAccount* _tmp26_;
		const gchar* _tmp27_;
		const gchar* _tmp28_;
		FolksImFieldDetails* _tmp29_;
#line 827 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp17_ = folks_persona_get_display_id ((FolksPersona*) self);
#line 827 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp18_ = _tmp17_;
#line 827 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp19_ = account;
#line 827 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp20_ = tp_account_get_protocol_name (_tmp19_);
#line 827 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp21_ = _tmp20_;
#line 827 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp22_ = folks_im_details_normalise_im_address (_tmp18_, _tmp21_, &_inner_error_);
#line 827 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		im_addr = _tmp22_;
#line 827 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 827 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			if (_inner_error_->domain == FOLKS_IM_DETAILS_ERROR) {
#line 7478 "tpf-persona.c"
				goto __catch5_folks_im_details_error;
			}
#line 827 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_object_unref0 (account);
#line 827 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_object_unref0 (connection);
#line 827 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			_g_object_unref0 (contact);
#line 827 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 827 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_clear_error (&_inner_error_);
#line 7491 "tpf-persona.c"
		}
#line 829 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp23_ = im_addr;
#line 829 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp24_ = folks_im_field_details_new (_tmp23_, NULL);
#line 829 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		im_fd = _tmp24_;
#line 830 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp25_ = self->priv->_im_addresses;
#line 830 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp26_ = account;
#line 830 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp27_ = tp_account_get_protocol_name (_tmp26_);
#line 830 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp28_ = _tmp27_;
#line 830 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp29_ = im_fd;
#line 830 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		gee_multi_map_set ((GeeMultiMap*) _tmp25_, _tmp28_, _tmp29_);
#line 825 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (im_fd);
#line 825 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_free0 (im_addr);
#line 7515 "tpf-persona.c"
	}
	goto __finally5;
	__catch5_folks_im_details_error:
	{
		GError* e = NULL;
		GError* _tmp30_;
		const gchar* _tmp31_;
#line 825 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		e = _inner_error_;
#line 825 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_inner_error_ = NULL;
#line 835 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp30_ = e;
#line 835 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp31_ = _tmp30_->message;
#line 835 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_warning ("tpf-persona.vala:835: %s", _tmp31_);
#line 825 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_error_free0 (e);
#line 7535 "tpf-persona.c"
	}
	__finally5:
#line 825 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (G_UNLIKELY (_inner_error_ != NULL)) {
#line 825 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (account);
#line 825 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (connection);
#line 825 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_g_object_unref0 (contact);
#line 825 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error_->message, g_quark_to_string (_inner_error_->domain), _inner_error_->code);
#line 825 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_clear_error (&_inner_error_);
#line 7550 "tpf-persona.c"
	}
#line 838 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp32_ = contact;
#line 838 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_signal_connect_object ((GObject*) _tmp32_, "notify::avatar-file", (GCallback) __tpf_persona___lambda17__g_object_notify, self, 0);
#line 842 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_notify_avatar (self);
#line 844 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp33_ = contact;
#line 844 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_signal_connect_object ((GObject*) _tmp33_, "notify::presence-message", (GCallback) __tpf_persona___lambda18__g_object_notify, self, 0);
#line 848 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp34_ = contact;
#line 848 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_signal_connect_object ((GObject*) _tmp34_, "notify::presence-type", (GCallback) __tpf_persona___lambda19__g_object_notify, self, 0);
#line 852 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp35_ = contact;
#line 852 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_signal_connect_object ((GObject*) _tmp35_, "notify::presence-status", (GCallback) __tpf_persona___lambda20__g_object_notify, self, 0);
#line 856 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp36_ = contact;
#line 856 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_signal_connect_object ((GObject*) _tmp36_, "notify::client-types", (GCallback) __tpf_persona___lambda21__g_object_notify, self, 0);
#line 861 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_notify_presence_message (self);
#line 862 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_notify_presence_type (self);
#line 863 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_notify_presence_status (self);
#line 864 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_notify_client_types (self);
#line 866 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp37_ = contact;
#line 866 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_signal_connect_object ((GObject*) _tmp37_, "notify::contact-info", (GCallback) __tpf_persona___lambda22__g_object_notify, self, 0);
#line 870 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_notify_contact_info (self, FALSE, TRUE);
#line 872 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp38_ = contact;
#line 872 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_signal_connect_object (_tmp38_, "contact-groups-changed", (GCallback) __tpf_persona___lambda23__tp_contact_contact_groups_changed, self, 0);
#line 876 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp39_ = contact;
#line 876 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp41_ = _tmp40_ = tp_contact_get_contact_groups (_tmp39_);
#line 876 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp42_ = g_new0 (gchar*, 0 + 1);
#line 876 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp43_ = _tmp42_;
#line 876 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp43__length1 = 0;
#line 876 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_contact_groups_changed (self, _tmp41_, _vala_array_length (_tmp40_), _tmp43_, 0);
#line 876 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp43_ = (_vala_array_free (_tmp43_, _tmp43__length1, (GDestroyNotify) g_free), NULL);
#line 878 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp44_ = folks_persona_get_store ((FolksPersona*) self);
#line 878 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp45_ = _tmp44_;
#line 878 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp46_ = _g_object_ref0 (G_TYPE_CHECK_INSTANCE_TYPE (_tmp45_, TPF_TYPE_PERSONA_STORE) ? ((TpfPersonaStore*) _tmp45_) : NULL);
#line 878 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_store = _tmp46_;
#line 880 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp47_ = folks_persona_get_is_user ((FolksPersona*) self);
#line 880 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp48_ = _tmp47_;
#line 880 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	if (_tmp48_) {
#line 7620 "tpf-persona.c"
		TpfPersonaStore* _tmp49_;
#line 882 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		_tmp49_ = tpf_store;
#line 882 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_signal_connect_object ((GObject*) _tmp49_, "notify::supported-fields", (GCallback) __tpf_persona____lambda24__g_object_notify, self, 0);
#line 7626 "tpf-persona.c"
	}
#line 888 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp50_ = tpf_store;
#line 888 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_signal_connect_object ((GObject*) _tmp50_, "notify::always-writeable-properties", (GCallback) __tpf_persona___lambda25__g_object_notify, self, 0);
#line 893 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tpf_persona_update_writeable_properties (self);
#line 787 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (tpf_store);
#line 787 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (account);
#line 787 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (connection);
#line 787 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (contact);
#line 787 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	return obj;
#line 7644 "tpf-persona.c"
}


static void
tpf_persona_class_init (TpfPersonaClass * klass)
{
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_parent_class = g_type_class_peek_parent (klass);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_type_class_add_private (klass, sizeof (TpfPersonaPrivate));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	((GObjectClass *) klass)->constructed = (void (*) (GObject *)) tpf_persona_real_constructed;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	FOLKS_PERSONA_CLASS (klass)->get_linkable_properties = tpf_persona_real_get_linkable_properties;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	FOLKS_PERSONA_CLASS (klass)->get_writeable_properties = tpf_persona_real_get_writeable_properties;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	G_OBJECT_CLASS (klass)->get_property = _vala_tpf_persona_get_property;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	G_OBJECT_CLASS (klass)->set_property = _vala_tpf_persona_set_property;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	G_OBJECT_CLASS (klass)->constructor = tpf_persona_constructor;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	G_OBJECT_CLASS (klass)->finalize = tpf_persona_finalize;
#line 7669 "tpf-persona.c"
	/**
	   * Whether the Persona is in the user's contact list.
	   *
	   * This will be true for most {@link Folks.Persona}s, but may not be true for
	   * personas where {@link Folks.Persona.is_user} is true. If it's false in
	   * this case, it means that the persona has been retrieved from the Telepathy
	   * connection, but has not been added to the user's contact list.
	   *
	   * @since 0.3.5
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_IS_IN_CONTACT_LIST_PROPERTY, tpf_persona_properties[TPF_PERSONA_IS_IN_CONTACT_LIST_PROPERTY] = g_param_spec_boolean ("is-in-contact-list", "is-in-contact-list", "is-in-contact-list", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7682 "tpf-persona.c"
	/**
	   * An avatar for the Persona.
	   *
	   * See {@link Folks.AvatarDetails.avatar}.
	   *
	   * @since 0.6.0
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_AVATAR_PROPERTY, tpf_persona_properties[TPF_PERSONA_AVATAR_PROPERTY] = g_param_spec_object ("avatar", "avatar", "avatar", g_loadable_icon_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7692 "tpf-persona.c"
	/**
	   * {@inheritDoc}
	   *
	   * @since 0.6.4
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_STRUCTURED_NAME_PROPERTY, tpf_persona_properties[TPF_PERSONA_STRUCTURED_NAME_PROPERTY] = g_param_spec_object ("structured-name", "structured-name", "structured-name", FOLKS_TYPE_STRUCTURED_NAME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7700 "tpf-persona.c"
	/**
	   * {@inheritDoc}
	   *
	   * @since 0.6.4
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_FULL_NAME_PROPERTY, tpf_persona_properties[TPF_PERSONA_FULL_NAME_PROPERTY] = g_param_spec_string ("full-name", "full-name", "full-name", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7708 "tpf-persona.c"
	/**
	   * {@inheritDoc}
	   *
	   * @since 0.6.4
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_NICKNAME_PROPERTY, tpf_persona_properties[TPF_PERSONA_NICKNAME_PROPERTY] = g_param_spec_string ("nickname", "nickname", "nickname", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7716 "tpf-persona.c"
	/**
	   * {@inheritDoc}
	   *
	   * ContactInfo has no equivalent field, so this is unsupported.
	   *
	   * @since 0.6.4
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_CALENDAR_EVENT_ID_PROPERTY, tpf_persona_properties[TPF_PERSONA_CALENDAR_EVENT_ID_PROPERTY] = g_param_spec_string ("calendar-event-id", "calendar-event-id", "calendar-event-id", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7726 "tpf-persona.c"
	/**
	   * {@inheritDoc}
	   *
	   * @since 0.6.4
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_BIRTHDAY_PROPERTY, tpf_persona_properties[TPF_PERSONA_BIRTHDAY_PROPERTY] = g_param_spec_boxed ("birthday", "birthday", "birthday", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7734 "tpf-persona.c"
	/**
	   * The Persona's presence type.
	   *
	   * See {@link Folks.PresenceDetails.presence_type}.
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_PRESENCE_TYPE_PROPERTY, tpf_persona_properties[TPF_PERSONA_PRESENCE_TYPE_PROPERTY] = g_param_spec_enum ("presence-type", "presence-type", "presence-type", FOLKS_TYPE_PRESENCE_TYPE, 0, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7742 "tpf-persona.c"
	/**
	   * The Persona's presence status.
	   *
	   * See {@link Folks.PresenceDetails.presence_status}.
	   *
	   * @since 0.6.0
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_PRESENCE_STATUS_PROPERTY, tpf_persona_properties[TPF_PERSONA_PRESENCE_STATUS_PROPERTY] = g_param_spec_string ("presence-status", "presence-status", "presence-status", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7752 "tpf-persona.c"
	/**
	   * The Persona's presence message.
	   *
	   * See {@link Folks.PresenceDetails.presence_message}.
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_PRESENCE_MESSAGE_PROPERTY, tpf_persona_properties[TPF_PERSONA_PRESENCE_MESSAGE_PROPERTY] = g_param_spec_string ("presence-message", "presence-message", "presence-message", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7760 "tpf-persona.c"
	/**
	   * The Persona's client types.
	   *
	   * See {@link Folks.PresenceDetails.client_types}.
	   *
	   * @since 0.9.5
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_CLIENT_TYPES_PROPERTY, tpf_persona_properties[TPF_PERSONA_CLIENT_TYPES_PROPERTY] = g_param_spec_boxed ("client-types", "client-types", "client-types", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7770 "tpf-persona.c"
	/**
	   * The names of the Persona's linkable properties.
	   *
	   * See {@link Folks.Persona.linkable_properties}.
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_LINKABLE_PROPERTIES_PROPERTY, tpf_persona_properties[TPF_PERSONA_LINKABLE_PROPERTIES_PROPERTY] = g_param_spec_boxed ("linkable-properties", "linkable-properties", "linkable-properties", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 7778 "tpf-persona.c"
	/**
	   * {@inheritDoc}
	   *
	   * @since 0.6.0
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_WRITEABLE_PROPERTIES_PROPERTY, tpf_persona_properties[TPF_PERSONA_WRITEABLE_PROPERTIES_PROPERTY] = g_param_spec_boxed ("writeable-properties", "writeable-properties", "writeable-properties", G_TYPE_STRV, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 7786 "tpf-persona.c"
	/**
	   * An alias for the Persona.
	   *
	   * See {@link Folks.AliasDetails.alias}.
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_ALIAS_PROPERTY, tpf_persona_properties[TPF_PERSONA_ALIAS_PROPERTY] = g_param_spec_string ("alias", "alias", "alias", NULL, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7794 "tpf-persona.c"
	/**
	   * Whether this Persona is a user-defined favourite.
	   *
	   * See {@link Folks.FavouriteDetails.is_favourite}.
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_IS_FAVOURITE_PROPERTY, tpf_persona_properties[TPF_PERSONA_IS_FAVOURITE_PROPERTY] = g_param_spec_boolean ("is-favourite", "is-favourite", "is-favourite", FALSE, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7802 "tpf-persona.c"
	/**
	   * {@inheritDoc}
	   *
	   * @since 0.6.4
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_EMAIL_ADDRESSES_PROPERTY, tpf_persona_properties[TPF_PERSONA_EMAIL_ADDRESSES_PROPERTY] = g_param_spec_object ("email-addresses", "email-addresses", "email-addresses", GEE_TYPE_SET, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7810 "tpf-persona.c"
	/**
	   * A mapping of IM protocol to an (unordered) set of IM addresses.
	   *
	   * See {@link Folks.ImDetails.im_addresses}.
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_IM_ADDRESSES_PROPERTY, tpf_persona_properties[TPF_PERSONA_IM_ADDRESSES_PROPERTY] = g_param_spec_object ("im-addresses", "im-addresses", "im-addresses", GEE_TYPE_MULTI_MAP, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7818 "tpf-persona.c"
	/**
	   * A counter for IM interactions (send/receive message) with the persona.
	   *
	   * See {@link Folks.InteractionDetails.im_interaction_count}
	   *
	   * @since 0.7.1
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_IM_INTERACTION_COUNT_PROPERTY, tpf_persona_properties[TPF_PERSONA_IM_INTERACTION_COUNT_PROPERTY] = g_param_spec_uint ("im-interaction-count", "im-interaction-count", "im-interaction-count", 0, G_MAXUINT, 0U, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 7828 "tpf-persona.c"
	/**
	   * The latest datetime for IM interactions (send/receive message) with the
	   * persona.
	   *
	   * See {@link Folks.InteractionDetails.last_im_interaction_datetime}
	   *
	   * @since 0.7.1
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_LAST_IM_INTERACTION_DATETIME_PROPERTY, tpf_persona_properties[TPF_PERSONA_LAST_IM_INTERACTION_DATETIME_PROPERTY] = g_param_spec_boxed ("last-im-interaction-datetime", "last-im-interaction-datetime", "last-im-interaction-datetime", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 7839 "tpf-persona.c"
	/**
	   * A counter for call interactions (only successful calls) with the persona.
	   *
	   * See {@link Folks.InteractionDetails.call_interaction_count}
	   *
	   * @since 0.7.1
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_CALL_INTERACTION_COUNT_PROPERTY, tpf_persona_properties[TPF_PERSONA_CALL_INTERACTION_COUNT_PROPERTY] = g_param_spec_uint ("call-interaction-count", "call-interaction-count", "call-interaction-count", 0, G_MAXUINT, 0U, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 7849 "tpf-persona.c"
	/**
	   * The latest datetime for call interactions (only successful calls) with the
	   * persona.
	   *
	   * See {@link Folks.InteractionDetails.last_call_interaction_datetime}
	   *
	   * @since 0.7.1
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_LAST_CALL_INTERACTION_DATETIME_PROPERTY, tpf_persona_properties[TPF_PERSONA_LAST_CALL_INTERACTION_DATETIME_PROPERTY] = g_param_spec_boxed ("last-call-interaction-datetime", "last-call-interaction-datetime", "last-call-interaction-datetime", G_TYPE_DATE_TIME, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE));
#line 7860 "tpf-persona.c"
	/**
	   * A set group IDs for the groups the contact is a member of.
	   *
	   * See {@link Folks.GroupDetails.groups}.
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_GROUPS_PROPERTY, tpf_persona_properties[TPF_PERSONA_GROUPS_PROPERTY] = g_param_spec_object ("groups", "groups", "groups", GEE_TYPE_SET, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7868 "tpf-persona.c"
	/**
	   * The Telepathy contact represented by this persona.
	   *
	   * Note that this may be ``null`` if the {@link PersonaStore} providing this
	   * {@link Persona} isn't currently available (e.g. due to not being connected
	   * to the network). In this case, most other properties of the {@link Persona}
	   * are being retrieved from a cache and may not be current (though there's no
	   * way to tell this).
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_CONTACT_PROPERTY, tpf_persona_properties[TPF_PERSONA_CONTACT_PROPERTY] = g_param_spec_object ("contact", "contact", "contact", tp_contact_get_type (), G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));
#line 7880 "tpf-persona.c"
	/**
	   * {@inheritDoc}
	   *
	   * @since 0.6.4
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_PHONE_NUMBERS_PROPERTY, tpf_persona_properties[TPF_PERSONA_PHONE_NUMBERS_PROPERTY] = g_param_spec_object ("phone-numbers", "phone-numbers", "phone-numbers", GEE_TYPE_SET, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7888 "tpf-persona.c"
	/**
	   * {@inheritDoc}
	   *
	   * @since 0.6.4
	   */
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_object_class_install_property (G_OBJECT_CLASS (klass), TPF_PERSONA_URLS_PROPERTY, tpf_persona_properties[TPF_PERSONA_URLS_PROPERTY] = g_param_spec_object ("urls", "urls", "urls", GEE_TYPE_SET, G_PARAM_STATIC_STRINGS | G_PARAM_READABLE | G_PARAM_WRITABLE));
#line 7896 "tpf-persona.c"
}


static void
tpf_persona_folks_alias_details_interface_init (FolksAliasDetailsIface * iface)
{
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_folks_alias_details_parent_iface = g_type_interface_peek_parent (iface);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_alias = (void (*) (FolksAliasDetails *, const gchar*, GAsyncReadyCallback, gpointer)) tpf_persona_real_change_alias;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_alias_finish = (void (*) (FolksAliasDetails *, GAsyncResult*, GError**)) tpf_persona_real_change_alias_finish;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_alias = tpf_persona_real_get_alias;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_alias = tpf_persona_real_set_alias;
#line 7913 "tpf-persona.c"
}


static void
tpf_persona_folks_avatar_details_interface_init (FolksAvatarDetailsIface * iface)
{
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_folks_avatar_details_parent_iface = g_type_interface_peek_parent (iface);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_avatar = tpf_persona_real_get_avatar;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_avatar = tpf_persona_real_set_avatar;
#line 7926 "tpf-persona.c"
}


static void
tpf_persona_folks_birthday_details_interface_init (FolksBirthdayDetailsIface * iface)
{
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_folks_birthday_details_parent_iface = g_type_interface_peek_parent (iface);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_birthday = (void (*) (FolksBirthdayDetails *, GDateTime*, GAsyncReadyCallback, gpointer)) tpf_persona_real_change_birthday;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_birthday_finish = (void (*) (FolksBirthdayDetails *, GAsyncResult*, GError**)) tpf_persona_real_change_birthday_finish;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_calendar_event_id = tpf_persona_real_get_calendar_event_id;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_calendar_event_id = tpf_persona_real_set_calendar_event_id;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_birthday = tpf_persona_real_get_birthday;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_birthday = tpf_persona_real_set_birthday;
#line 7947 "tpf-persona.c"
}


static void
tpf_persona_folks_email_details_interface_init (FolksEmailDetailsIface * iface)
{
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_folks_email_details_parent_iface = g_type_interface_peek_parent (iface);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_email_addresses = (void (*) (FolksEmailDetails *, GeeSet*, GAsyncReadyCallback, gpointer)) tpf_persona_real_change_email_addresses;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_email_addresses_finish = (void (*) (FolksEmailDetails *, GAsyncResult*, GError**)) tpf_persona_real_change_email_addresses_finish;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_email_addresses = tpf_persona_real_get_email_addresses;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_email_addresses = tpf_persona_real_set_email_addresses;
#line 7964 "tpf-persona.c"
}


static void
tpf_persona_folks_favourite_details_interface_init (FolksFavouriteDetailsIface * iface)
{
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_folks_favourite_details_parent_iface = g_type_interface_peek_parent (iface);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_is_favourite = (void (*) (FolksFavouriteDetails *, gboolean, GAsyncReadyCallback, gpointer)) tpf_persona_real_change_is_favourite;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_is_favourite_finish = (void (*) (FolksFavouriteDetails *, GAsyncResult*, GError**)) tpf_persona_real_change_is_favourite_finish;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_is_favourite = tpf_persona_real_get_is_favourite;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_is_favourite = tpf_persona_real_set_is_favourite;
#line 7981 "tpf-persona.c"
}


static void
tpf_persona_folks_group_details_interface_init (FolksGroupDetailsIface * iface)
{
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_folks_group_details_parent_iface = g_type_interface_peek_parent (iface);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_group = (void (*) (FolksGroupDetails *, const gchar*, gboolean, GAsyncReadyCallback, gpointer)) tpf_persona_real_change_group;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_group_finish = (void (*) (FolksGroupDetails *, GAsyncResult*, GError**)) tpf_persona_real_change_group_finish;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_groups = (void (*) (FolksGroupDetails *, GeeSet*, GAsyncReadyCallback, gpointer)) tpf_persona_real_change_groups;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_groups_finish = (void (*) (FolksGroupDetails *, GAsyncResult*, GError**)) tpf_persona_real_change_groups_finish;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_groups = tpf_persona_real_get_groups;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_groups = tpf_persona_real_set_groups;
#line 8002 "tpf-persona.c"
}


static void
tpf_persona_folks_interaction_details_interface_init (FolksInteractionDetailsIface * iface)
{
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_folks_interaction_details_parent_iface = g_type_interface_peek_parent (iface);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_im_interaction_count = tpf_persona_real_get_im_interaction_count;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_last_im_interaction_datetime = tpf_persona_real_get_last_im_interaction_datetime;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_call_interaction_count = tpf_persona_real_get_call_interaction_count;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_last_call_interaction_datetime = tpf_persona_real_get_last_call_interaction_datetime;
#line 8019 "tpf-persona.c"
}


static void
tpf_persona_folks_im_details_interface_init (FolksImDetailsIface * iface)
{
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_folks_im_details_parent_iface = g_type_interface_peek_parent (iface);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_im_addresses = tpf_persona_real_get_im_addresses;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_im_addresses = tpf_persona_real_set_im_addresses;
#line 8032 "tpf-persona.c"
}


static void
tpf_persona_folks_name_details_interface_init (FolksNameDetailsIface * iface)
{
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_folks_name_details_parent_iface = g_type_interface_peek_parent (iface);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_full_name = (void (*) (FolksNameDetails *, const gchar*, GAsyncReadyCallback, gpointer)) tpf_persona_real_change_full_name;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_full_name_finish = (void (*) (FolksNameDetails *, GAsyncResult*, GError**)) tpf_persona_real_change_full_name_finish;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_structured_name = tpf_persona_real_get_structured_name;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_structured_name = tpf_persona_real_set_structured_name;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_full_name = tpf_persona_real_get_full_name;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_full_name = tpf_persona_real_set_full_name;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_nickname = tpf_persona_real_get_nickname;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_nickname = tpf_persona_real_set_nickname;
#line 8057 "tpf-persona.c"
}


static void
tpf_persona_folks_phone_details_interface_init (FolksPhoneDetailsIface * iface)
{
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_folks_phone_details_parent_iface = g_type_interface_peek_parent (iface);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_phone_numbers = (void (*) (FolksPhoneDetails *, GeeSet*, GAsyncReadyCallback, gpointer)) tpf_persona_real_change_phone_numbers;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_phone_numbers_finish = (void (*) (FolksPhoneDetails *, GAsyncResult*, GError**)) tpf_persona_real_change_phone_numbers_finish;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_phone_numbers = tpf_persona_real_get_phone_numbers;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_phone_numbers = tpf_persona_real_set_phone_numbers;
#line 8074 "tpf-persona.c"
}


static void
tpf_persona_folks_presence_details_interface_init (FolksPresenceDetailsIface * iface)
{
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_folks_presence_details_parent_iface = g_type_interface_peek_parent (iface);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_presence_type = tpf_persona_real_get_presence_type;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_presence_type = tpf_persona_real_set_presence_type;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_presence_status = tpf_persona_real_get_presence_status;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_presence_status = tpf_persona_real_set_presence_status;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_presence_message = tpf_persona_real_get_presence_message;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_presence_message = tpf_persona_real_set_presence_message;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_client_types = tpf_persona_real_get_client_types;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_client_types = tpf_persona_real_set_client_types;
#line 8099 "tpf-persona.c"
}


static void
tpf_persona_folks_url_details_interface_init (FolksUrlDetailsIface * iface)
{
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	tpf_persona_folks_url_details_parent_iface = g_type_interface_peek_parent (iface);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_urls = (void (*) (FolksUrlDetails *, GeeSet*, GAsyncReadyCallback, gpointer)) tpf_persona_real_change_urls;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->change_urls_finish = (void (*) (FolksUrlDetails *, GAsyncResult*, GError**)) tpf_persona_real_change_urls_finish;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->get_urls = tpf_persona_real_get_urls;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	iface->set_urls = tpf_persona_real_set_urls;
#line 8116 "tpf-persona.c"
}


static void
tpf_persona_instance_init (TpfPersona * self)
{
	gchar* _tmp0_;
	gchar* _tmp1_;
	GeeHashMultiMap* _tmp2_;
	FolksSmallSet* _tmp3_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv = TPF_PERSONA_GET_PRIVATE (self);
#line 57 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_writeable_properties = NULL;
#line 57 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_writeable_properties_length1 = 0;
#line 57 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->__writeable_properties_size_ = self->priv->_writeable_properties_length1;
#line 63 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_is_constructed = FALSE;
#line 77 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_avatar = NULL;
#line 105 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = g_strdup ("");
#line 105 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_full_name = _tmp0_;
#line 181 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_birthday = NULL;
#line 285 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = g_strdup ("");
#line 285 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_alias = _tmp1_;
#line 319 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_is_favourite = FALSE;
#line 369 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_email_addresses = NULL;
#line 370 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_email_addresses_ro = NULL;
#line 402 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp2_ = gee_hash_multi_map_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, FOLKS_TYPE_IM_FIELD_DETAILS, (GBoxedCopyFunc) g_object_ref, (GDestroyNotify) g_object_unref, NULL, NULL, NULL, NULL, NULL, NULL, _folks_abstract_field_details_hash_static_gee_hash_data_func, NULL, NULL, _folks_abstract_field_details_equal_static_gee_equal_data_func, NULL, NULL);
#line 402 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_im_addresses = _tmp2_;
#line 419 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_im_interaction_count = (guint) 0;
#line 433 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->_last_im_interaction_datetime = NULL;
#line 448 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_call_interaction_count = (guint) 0;
#line 462 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->_last_call_interaction_datetime = NULL;
#line 477 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp3_ = folks_small_set_new (G_TYPE_STRING, (GBoxedCopyFunc) g_strdup, (GDestroyNotify) g_free, NULL, NULL, NULL, NULL, NULL, NULL);
#line 477 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_groups = _tmp3_;
#line 651 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_phone_numbers = NULL;
#line 652 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_phone_numbers_ro = NULL;
#line 682 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_urls = NULL;
#line 683 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_urls_ro = NULL;
#line 8179 "tpf-persona.c"
}


static void
tpf_persona_finalize (GObject * obj)
{
	TpfPersona * self;
	const gchar* _tmp0_;
	const gchar* _tmp1_;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TPF_TYPE_PERSONA, TpfPersona);
#line 1251 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp0_ = folks_persona_get_uid ((FolksPersona*) self);
#line 1251 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_tmp1_ = _tmp0_;
#line 1251 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	g_debug ("tpf-persona.vala:1251: Destroying Tpf.Persona '%s': %p", _tmp1_, self);
#line 57 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_writeable_properties = (_vala_array_free (self->priv->_writeable_properties, self->priv->_writeable_properties_length1, (GDestroyNotify) g_free), NULL);
#line 77 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_avatar);
#line 105 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (self->priv->_full_name);
#line 181 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_date_time_unref0 (self->priv->_birthday);
#line 247 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (self->priv->_presence_status);
#line 254 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (self->priv->_presence_message);
#line 263 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	self->priv->_client_types = (_vala_array_free (self->priv->_client_types, self->priv->_client_types_length1, (GDestroyNotify) g_free), NULL);
#line 285 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_free0 (self->priv->_alias);
#line 369 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_email_addresses);
#line 370 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_email_addresses_ro);
#line 402 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_im_addresses);
#line 433 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_date_time_unref0 (self->_last_im_interaction_datetime);
#line 462 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_date_time_unref0 (self->_last_call_interaction_datetime);
#line 477 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_groups);
#line 478 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_groups_ro);
#line 651 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_phone_numbers);
#line 652 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_phone_numbers_ro);
#line 682 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_urls);
#line 683 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	_g_object_unref0 (self->priv->_urls_ro);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	G_OBJECT_CLASS (tpf_persona_parent_class)->finalize (obj);
#line 8237 "tpf-persona.c"
}


/**
 * A persona subclass which represents a single instant messaging contact from
 * Telepathy.
 *
 * There is a one-to-one correspondence between {@link Tpf.Persona}s and
 * {@link TelepathyGLib.Contact}s, although at any time the
 * {@link Tpf.Persona.contact} property of a persona may be ``null`` if the
 * contact's Telepathy connection isn't available (e.g. due to being offline).
 * In this case, the persona's properties persist from a local cache.
 */
GType
tpf_persona_get_type (void)
{
	static volatile gsize tpf_persona_type_id__volatile = 0;
	if (g_once_init_enter (&tpf_persona_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (TpfPersonaClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) tpf_persona_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (TpfPersona), 0, (GInstanceInitFunc) tpf_persona_instance_init, NULL };
		static const GInterfaceInfo folks_alias_details_info = { (GInterfaceInitFunc) tpf_persona_folks_alias_details_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo folks_avatar_details_info = { (GInterfaceInitFunc) tpf_persona_folks_avatar_details_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo folks_birthday_details_info = { (GInterfaceInitFunc) tpf_persona_folks_birthday_details_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo folks_email_details_info = { (GInterfaceInitFunc) tpf_persona_folks_email_details_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo folks_favourite_details_info = { (GInterfaceInitFunc) tpf_persona_folks_favourite_details_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo folks_group_details_info = { (GInterfaceInitFunc) tpf_persona_folks_group_details_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo folks_interaction_details_info = { (GInterfaceInitFunc) tpf_persona_folks_interaction_details_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo folks_im_details_info = { (GInterfaceInitFunc) tpf_persona_folks_im_details_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo folks_name_details_info = { (GInterfaceInitFunc) tpf_persona_folks_name_details_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo folks_phone_details_info = { (GInterfaceInitFunc) tpf_persona_folks_phone_details_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo folks_presence_details_info = { (GInterfaceInitFunc) tpf_persona_folks_presence_details_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		static const GInterfaceInfo folks_url_details_info = { (GInterfaceInitFunc) tpf_persona_folks_url_details_interface_init, (GInterfaceFinalizeFunc) NULL, NULL};
		GType tpf_persona_type_id;
		tpf_persona_type_id = g_type_register_static (FOLKS_TYPE_PERSONA, "TpfPersona", &g_define_type_info, 0);
		g_type_add_interface_static (tpf_persona_type_id, FOLKS_TYPE_ALIAS_DETAILS, &folks_alias_details_info);
		g_type_add_interface_static (tpf_persona_type_id, FOLKS_TYPE_AVATAR_DETAILS, &folks_avatar_details_info);
		g_type_add_interface_static (tpf_persona_type_id, FOLKS_TYPE_BIRTHDAY_DETAILS, &folks_birthday_details_info);
		g_type_add_interface_static (tpf_persona_type_id, FOLKS_TYPE_EMAIL_DETAILS, &folks_email_details_info);
		g_type_add_interface_static (tpf_persona_type_id, FOLKS_TYPE_FAVOURITE_DETAILS, &folks_favourite_details_info);
		g_type_add_interface_static (tpf_persona_type_id, FOLKS_TYPE_GROUP_DETAILS, &folks_group_details_info);
		g_type_add_interface_static (tpf_persona_type_id, FOLKS_TYPE_INTERACTION_DETAILS, &folks_interaction_details_info);
		g_type_add_interface_static (tpf_persona_type_id, FOLKS_TYPE_IM_DETAILS, &folks_im_details_info);
		g_type_add_interface_static (tpf_persona_type_id, FOLKS_TYPE_NAME_DETAILS, &folks_name_details_info);
		g_type_add_interface_static (tpf_persona_type_id, FOLKS_TYPE_PHONE_DETAILS, &folks_phone_details_info);
		g_type_add_interface_static (tpf_persona_type_id, FOLKS_TYPE_PRESENCE_DETAILS, &folks_presence_details_info);
		g_type_add_interface_static (tpf_persona_type_id, FOLKS_TYPE_URL_DETAILS, &folks_url_details_info);
		g_once_init_leave (&tpf_persona_type_id__volatile, tpf_persona_type_id);
	}
	return tpf_persona_type_id__volatile;
}


static void
_vala_tpf_persona_get_property (GObject * object,
                                guint property_id,
                                GValue * value,
                                GParamSpec * pspec)
{
	TpfPersona * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TPF_TYPE_PERSONA, TpfPersona);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	switch (property_id) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_IS_IN_CONTACT_LIST_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_boolean (value, tpf_persona_get_is_in_contact_list (self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_AVATAR_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_object (value, folks_avatar_details_get_avatar ((FolksAvatarDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_STRUCTURED_NAME_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_object (value, folks_name_details_get_structured_name ((FolksNameDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_FULL_NAME_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_string (value, folks_name_details_get_full_name ((FolksNameDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_NICKNAME_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_string (value, folks_name_details_get_nickname ((FolksNameDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_CALENDAR_EVENT_ID_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_string (value, folks_birthday_details_get_calendar_event_id ((FolksBirthdayDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_BIRTHDAY_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_boxed (value, folks_birthday_details_get_birthday ((FolksBirthdayDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_PRESENCE_TYPE_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_enum (value, folks_presence_details_get_presence_type ((FolksPresenceDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_PRESENCE_STATUS_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_string (value, folks_presence_details_get_presence_status ((FolksPresenceDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_PRESENCE_MESSAGE_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_string (value, folks_presence_details_get_presence_message ((FolksPresenceDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_CLIENT_TYPES_PROPERTY:
#line 8361 "tpf-persona.c"
		{
			int length;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_value_set_boxed (value, folks_presence_details_get_client_types ((FolksPresenceDetails*) self, &length));
#line 8366 "tpf-persona.c"
		}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_LINKABLE_PROPERTIES_PROPERTY:
#line 8372 "tpf-persona.c"
		{
			int length;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_value_set_boxed (value, folks_persona_get_linkable_properties ((FolksPersona*) self, &length));
#line 8377 "tpf-persona.c"
		}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_WRITEABLE_PROPERTIES_PROPERTY:
#line 8383 "tpf-persona.c"
		{
			int length;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			g_value_set_boxed (value, folks_persona_get_writeable_properties ((FolksPersona*) self, &length));
#line 8388 "tpf-persona.c"
		}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_ALIAS_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_string (value, folks_alias_details_get_alias ((FolksAliasDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_IS_FAVOURITE_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_boolean (value, folks_favourite_details_get_is_favourite ((FolksFavouriteDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_EMAIL_ADDRESSES_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_object (value, folks_email_details_get_email_addresses ((FolksEmailDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_IM_ADDRESSES_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_object (value, folks_im_details_get_im_addresses ((FolksImDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_IM_INTERACTION_COUNT_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_uint (value, folks_interaction_details_get_im_interaction_count ((FolksInteractionDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_LAST_IM_INTERACTION_DATETIME_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_boxed (value, folks_interaction_details_get_last_im_interaction_datetime ((FolksInteractionDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_CALL_INTERACTION_COUNT_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_uint (value, folks_interaction_details_get_call_interaction_count ((FolksInteractionDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_LAST_CALL_INTERACTION_DATETIME_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_boxed (value, folks_interaction_details_get_last_call_interaction_datetime ((FolksInteractionDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_GROUPS_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_object (value, folks_group_details_get_groups ((FolksGroupDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_CONTACT_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_object (value, tpf_persona_get_contact (self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_PHONE_NUMBERS_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_object (value, folks_phone_details_get_phone_numbers ((FolksPhoneDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_URLS_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		g_value_set_object (value, folks_url_details_get_urls ((FolksUrlDetails*) self));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 8464 "tpf-persona.c"
		default:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 8470 "tpf-persona.c"
	}
}


static void
_vala_tpf_persona_set_property (GObject * object,
                                guint property_id,
                                const GValue * value,
                                GParamSpec * pspec)
{
	TpfPersona * self;
	self = G_TYPE_CHECK_INSTANCE_CAST (object, TPF_TYPE_PERSONA, TpfPersona);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
	switch (property_id) {
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_IS_IN_CONTACT_LIST_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		tpf_persona_set_is_in_contact_list (self, g_value_get_boolean (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_AVATAR_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_avatar_details_set_avatar ((FolksAvatarDetails*) self, g_value_get_object (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_STRUCTURED_NAME_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_name_details_set_structured_name ((FolksNameDetails*) self, g_value_get_object (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_FULL_NAME_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_name_details_set_full_name ((FolksNameDetails*) self, g_value_get_string (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_NICKNAME_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_name_details_set_nickname ((FolksNameDetails*) self, g_value_get_string (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_CALENDAR_EVENT_ID_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_birthday_details_set_calendar_event_id ((FolksBirthdayDetails*) self, g_value_get_string (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_BIRTHDAY_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_birthday_details_set_birthday ((FolksBirthdayDetails*) self, g_value_get_boxed (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_PRESENCE_TYPE_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_presence_details_set_presence_type ((FolksPresenceDetails*) self, g_value_get_enum (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_PRESENCE_STATUS_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_presence_details_set_presence_status ((FolksPresenceDetails*) self, g_value_get_string (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_PRESENCE_MESSAGE_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_presence_details_set_presence_message ((FolksPresenceDetails*) self, g_value_get_string (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_CLIENT_TYPES_PROPERTY:
#line 8547 "tpf-persona.c"
		{
			gpointer boxed;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			boxed = g_value_get_boxed (value);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
			folks_presence_details_set_client_types ((FolksPresenceDetails*) self, boxed, (boxed == NULL) ? 0 : g_strv_length (boxed));
#line 8554 "tpf-persona.c"
		}
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_ALIAS_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_alias_details_set_alias ((FolksAliasDetails*) self, g_value_get_string (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_IS_FAVOURITE_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_favourite_details_set_is_favourite ((FolksFavouriteDetails*) self, g_value_get_boolean (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_EMAIL_ADDRESSES_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_email_details_set_email_addresses ((FolksEmailDetails*) self, g_value_get_object (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_IM_ADDRESSES_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_im_details_set_im_addresses ((FolksImDetails*) self, g_value_get_object (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_GROUPS_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_group_details_set_groups ((FolksGroupDetails*) self, g_value_get_object (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_CONTACT_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		tpf_persona_set_contact (self, g_value_get_object (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_PHONE_NUMBERS_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_phone_details_set_phone_numbers ((FolksPhoneDetails*) self, g_value_get_object (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		case TPF_PERSONA_URLS_PROPERTY:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		folks_url_details_set_urls ((FolksUrlDetails*) self, g_value_get_object (value));
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 8606 "tpf-persona.c"
		default:
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
#line 38 "/run/build/folks/backends/telepathy/lib/tpf-persona.vala"
		break;
#line 8612 "tpf-persona.c"
	}
}


static void
_vala_array_destroy (gpointer array,
                     gint array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		int i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}


static void
_vala_array_free (gpointer array,
                  gint array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}


static gint
_vala_array_length (gpointer array)
{
	int length;
	length = 0;
	if (array) {
		while (((gpointer*) array)[length]) {
			length++;
		}
	}
	return length;
}



