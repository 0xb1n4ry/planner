/* Database.c generated by valac 0.40.11, the Vala compiler
 * generated from Database.vala, do not modify */

/*
* Copyright Â© 2019 Alain M. (https://github.com/alainm23/planner)
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public
* License as published by the Free Software Foundation; either
* version 2 of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public
* License along with this program; if not, write to the
* Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
* Boston, MA 02110-1301 USA
*
* Authored by: Alain M. <alain23@protonmail.com>
*/


#include <glib.h>
#include <glib-object.h>
#include <sqlite3.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <gtk/gtk.h>
#include <gee.h>


#define SERVICES_TYPE_DATABASE (services_database_get_type ())
#define SERVICES_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SERVICES_TYPE_DATABASE, ServicesDatabase))
#define SERVICES_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))
#define SERVICES_IS_DATABASE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SERVICES_TYPE_DATABASE))
#define SERVICES_IS_DATABASE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SERVICES_TYPE_DATABASE))
#define SERVICES_DATABASE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SERVICES_TYPE_DATABASE, ServicesDatabaseClass))

typedef struct _ServicesDatabase ServicesDatabase;
typedef struct _ServicesDatabaseClass ServicesDatabaseClass;
typedef struct _ServicesDatabasePrivate ServicesDatabasePrivate;
enum  {
	SERVICES_DATABASE_0_PROPERTY,
	SERVICES_DATABASE_NUM_PROPERTIES
};
static GParamSpec* services_database_properties[SERVICES_DATABASE_NUM_PROPERTIES];
#define _sqlite3_close0(var) ((var == NULL) ? NULL : (var = (sqlite3_close (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

#define OBJECTS_TYPE_USER (objects_user_get_type ())
#define OBJECTS_USER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_USER, ObjectsUser))
#define OBJECTS_USER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_USER, ObjectsUserClass))
#define OBJECTS_IS_USER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_USER))
#define OBJECTS_IS_USER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_USER))
#define OBJECTS_USER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_USER, ObjectsUserClass))

typedef struct _ObjectsUser ObjectsUser;
typedef struct _ObjectsUserClass ObjectsUserClass;
#define _sqlite3_finalize0(var) ((var == NULL) ? NULL : (var = (sqlite3_finalize (var), NULL)))
typedef struct _ObjectsUserPrivate ObjectsUserPrivate;
#define _objects_user_unref0(var) ((var == NULL) ? NULL : (var = (objects_user_unref (var), NULL)))

#define OBJECTS_TYPE_REPOSITORY (objects_repository_get_type ())
#define OBJECTS_REPOSITORY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_REPOSITORY, ObjectsRepository))
#define OBJECTS_REPOSITORY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_REPOSITORY, ObjectsRepositoryClass))
#define OBJECTS_IS_REPOSITORY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_REPOSITORY))
#define OBJECTS_IS_REPOSITORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_REPOSITORY))
#define OBJECTS_REPOSITORY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_REPOSITORY, ObjectsRepositoryClass))

typedef struct _ObjectsRepository ObjectsRepository;
typedef struct _ObjectsRepositoryClass ObjectsRepositoryClass;
typedef struct _ObjectsRepositoryPrivate ObjectsRepositoryPrivate;
#define _objects_repository_unref0(var) ((var == NULL) ? NULL : (var = (objects_repository_unref (var), NULL)))
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))

#define OBJECTS_TYPE_PROJECT (objects_project_get_type ())
#define OBJECTS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_PROJECT, ObjectsProject))
#define OBJECTS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))
#define OBJECTS_IS_PROJECT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_PROJECT))
#define OBJECTS_IS_PROJECT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_PROJECT))
#define OBJECTS_PROJECT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_PROJECT, ObjectsProjectClass))

typedef struct _ObjectsProject ObjectsProject;
typedef struct _ObjectsProjectClass ObjectsProjectClass;
typedef struct _ObjectsProjectPrivate ObjectsProjectPrivate;
#define _objects_project_unref0(var) ((var == NULL) ? NULL : (var = (objects_project_unref (var), NULL)))

#define OBJECTS_TYPE_TASK (objects_task_get_type ())
#define OBJECTS_TASK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_TASK, ObjectsTask))
#define OBJECTS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_TASK, ObjectsTaskClass))
#define OBJECTS_IS_TASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_TASK))
#define OBJECTS_IS_TASK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_TASK))
#define OBJECTS_TASK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_TASK, ObjectsTaskClass))

typedef struct _ObjectsTask ObjectsTask;
typedef struct _ObjectsTaskClass ObjectsTaskClass;
typedef struct _ObjectsTaskPrivate ObjectsTaskPrivate;
#define _objects_task_unref0(var) ((var == NULL) ? NULL : (var = (objects_task_unref (var), NULL)))
#define _g_time_zone_unref0(var) ((var == NULL) ? NULL : (var = (g_time_zone_unref (var), NULL)))

#define TYPE_UTILS (utils_get_type ())
#define UTILS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UTILS, Utils))
#define UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_UTILS, UtilsClass))
#define IS_UTILS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UTILS))
#define IS_UTILS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_UTILS))
#define UTILS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UTILS, UtilsClass))

typedef struct _Utils Utils;
typedef struct _UtilsClass UtilsClass;
#define _g_date_time_unref0(var) ((var == NULL) ? NULL : (var = (g_date_time_unref (var), NULL)))

#define OBJECTS_TYPE_LABEL (objects_label_get_type ())
#define OBJECTS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), OBJECTS_TYPE_LABEL, ObjectsLabel))
#define OBJECTS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), OBJECTS_TYPE_LABEL, ObjectsLabelClass))
#define OBJECTS_IS_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), OBJECTS_TYPE_LABEL))
#define OBJECTS_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), OBJECTS_TYPE_LABEL))
#define OBJECTS_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), OBJECTS_TYPE_LABEL, ObjectsLabelClass))

typedef struct _ObjectsLabel ObjectsLabel;
typedef struct _ObjectsLabelClass ObjectsLabelClass;
typedef struct _ObjectsLabelPrivate ObjectsLabelPrivate;
#define _objects_label_unref0(var) ((var == NULL) ? NULL : (var = (objects_label_unref (var), NULL)))
enum  {
	SERVICES_DATABASE_UPDATE_PROJECT_SIGNAL_SIGNAL,
	SERVICES_DATABASE_ON_ADD_PROJECT_SIGNAL_SIGNAL,
	SERVICES_DATABASE_ON_SIGNAL_REMOVE_PROJECT_SIGNAL,
	SERVICES_DATABASE_ADD_TASK_SIGNAL_SIGNAL,
	SERVICES_DATABASE_ON_SIGNAL_REMOVE_TASK_SIGNAL,
	SERVICES_DATABASE_UPDATE_TASK_SIGNAL_SIGNAL,
	SERVICES_DATABASE_UPDATE_INDICATORS_SIGNAL,
	SERVICES_DATABASE_ADDEN_NEW_REPOSITORY_SIGNAL,
	SERVICES_DATABASE_ADDEN_NEW_USER_SIGNAL,
	SERVICES_DATABASE_NUM_SIGNALS
};
static guint services_database_signals[SERVICES_DATABASE_NUM_SIGNALS] = {0};
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _ServicesDatabase {
	GObject parent_instance;
	ServicesDatabasePrivate * priv;
};

struct _ServicesDatabaseClass {
	GObjectClass parent_class;
};

struct _ServicesDatabasePrivate {
	sqlite3* db;
	gchar* db_path;
};

struct _ObjectsUser {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsUserPrivate * priv;
	gint64 id;
	gchar* name;
	gchar* login;
	gchar* token;
	gchar* avatar_url;
};

struct _ObjectsUserClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsUser *self);
};

struct _ObjectsRepository {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsRepositoryPrivate * priv;
	gint64 id;
	gchar* name;
	gint sensitive;
	gchar* issues;
	gint64 user_id;
};

struct _ObjectsRepositoryClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsRepository *self);
};

struct _ObjectsProject {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsProjectPrivate * priv;
	gint id;
	gchar* name;
	gchar* note;
	gchar* deadline;
	gint item_order;
	gint is_deleted;
	gchar* color;
};

struct _ObjectsProjectClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsProject *self);
};

struct _ObjectsTask {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsTaskPrivate * priv;
	gint id;
	gint checked;
	gint project_id;
	gint list_id;
	gint task_order;
	gint is_inbox;
	gint has_reminder;
	gint sidebar_width;
	gint was_notified;
	gchar* content;
	gchar* note;
	gchar* when_date_utc;
	gchar* reminder_time;
	gchar* labels;
	gchar* checklist;
};

struct _ObjectsTaskClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsTask *self);
};

struct _ObjectsLabel {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ObjectsLabelPrivate * priv;
	gint id;
	gchar* name;
	gchar* color;
};

struct _ObjectsLabelClass {
	GTypeClass parent_class;
	void (*finalize) (ObjectsLabel *self);
};


static gpointer services_database_parent_class = NULL;
extern Utils* application_utils;

GType services_database_get_type (void) G_GNUC_CONST;
#define SERVICES_DATABASE_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), SERVICES_TYPE_DATABASE, ServicesDatabasePrivate))
ServicesDatabase* services_database_new (gboolean skip_tables);
ServicesDatabase* services_database_construct (GType object_type,
                                               gboolean skip_tables);
static gint services_database_create_tables (ServicesDatabase* self);
gpointer objects_user_ref (gpointer instance);
void objects_user_unref (gpointer instance);
GParamSpec* objects_param_spec_user (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void objects_value_set_user (GValue* value,
                             gpointer v_object);
void objects_value_take_user (GValue* value,
                              gpointer v_object);
gpointer objects_value_get_user (const GValue* value);
GType objects_user_get_type (void) G_GNUC_CONST;
gint services_database_add_user (ServicesDatabase* self,
                                 ObjectsUser* user);
gboolean services_database_user_exists (ServicesDatabase* self);
gboolean services_database_repo_exists (ServicesDatabase* self);
ObjectsUser* services_database_get_user (ServicesDatabase* self);
ObjectsUser* objects_user_new (gint64 id,
                               const gchar* name,
                               const gchar* login,
                               const gchar* token,
                               const gchar* avatar_url);
ObjectsUser* objects_user_construct (GType object_type,
                                     gint64 id,
                                     const gchar* name,
                                     const gchar* login,
                                     const gchar* token,
                                     const gchar* avatar_url);
gboolean services_database_repository_exists (ServicesDatabase* self,
                                              gint64 id);
gpointer objects_repository_ref (gpointer instance);
void objects_repository_unref (gpointer instance);
GParamSpec* objects_param_spec_repository (const gchar* name,
                                           const gchar* nick,
                                           const gchar* blurb,
                                           GType object_type,
                                           GParamFlags flags);
void objects_value_set_repository (GValue* value,
                                   gpointer v_object);
void objects_value_take_repository (GValue* value,
                                    gpointer v_object);
gpointer objects_value_get_repository (const GValue* value);
GType objects_repository_get_type (void) G_GNUC_CONST;
gint services_database_add_repository (ServicesDatabase* self,
                                       ObjectsRepository* repository);
gint services_database_update_repository (ServicesDatabase* self,
                                          ObjectsRepository* repository);
GeeArrayList* services_database_get_all_repos (ServicesDatabase* self);
ObjectsRepository* objects_repository_new (gint64 id,
                                           const gchar* name,
                                           gint sensitive,
                                           const gchar* issues,
                                           gint64 user_id);
ObjectsRepository* objects_repository_construct (GType object_type,
                                                 gint64 id,
                                                 const gchar* name,
                                                 gint sensitive,
                                                 const gchar* issues,
                                                 gint64 user_id);
gint services_database_remove_all_users (ServicesDatabase* self);
gint services_database_remove_all_repos (ServicesDatabase* self);
gpointer objects_project_ref (gpointer instance);
void objects_project_unref (gpointer instance);
GParamSpec* objects_param_spec_project (const gchar* name,
                                        const gchar* nick,
                                        const gchar* blurb,
                                        GType object_type,
                                        GParamFlags flags);
void objects_value_set_project (GValue* value,
                                gpointer v_object);
void objects_value_take_project (GValue* value,
                                 gpointer v_object);
gpointer objects_value_get_project (const GValue* value);
GType objects_project_get_type (void) G_GNUC_CONST;
gint services_database_add_project (ServicesDatabase* self,
                                    ObjectsProject* project);
gint services_database_update_project (ServicesDatabase* self,
                                       ObjectsProject* project);
gint services_database_remove_project (ServicesDatabase* self,
                                       gint id);
GeeArrayList* services_database_get_all_projects (ServicesDatabase* self);
ObjectsProject* objects_project_new (gint id,
                                     gint item_order,
                                     gint is_deleted,
                                     const gchar* name,
                                     const gchar* note,
                                     const gchar* deadline,
                                     const gchar* color);
ObjectsProject* objects_project_construct (GType object_type,
                                           gint id,
                                           gint item_order,
                                           gint is_deleted,
                                           const gchar* name,
                                           const gchar* note,
                                           const gchar* deadline,
                                           const gchar* color);
ObjectsProject* services_database_get_project (ServicesDatabase* self,
                                               gint id);
ObjectsProject* services_database_get_last_project (ServicesDatabase* self);
gint services_database_get_project_no_completed_tasks_number (ServicesDatabase* self,
                                                              gint id);
gint services_database_get_project_completed_tasks_number (ServicesDatabase* self,
                                                           gint id);
gint services_database_get_project_tasks_number (ServicesDatabase* self,
                                                 gint id);
gpointer objects_task_ref (gpointer instance);
void objects_task_unref (gpointer instance);
GParamSpec* objects_param_spec_task (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void objects_value_set_task (GValue* value,
                             gpointer v_object);
void objects_value_take_task (GValue* value,
                              gpointer v_object);
gpointer objects_value_get_task (const GValue* value);
GType objects_task_get_type (void) G_GNUC_CONST;
gint services_database_add_task (ServicesDatabase* self,
                                 ObjectsTask* task);
ObjectsTask* services_database_get_last_task (ServicesDatabase* self);
ObjectsTask* objects_task_new (gint id,
                               gint checked,
                               gint project_id,
                               gint list_id,
                               gint task_order,
                               gint is_inbox,
                               gint has_reminder,
                               gint sidebar_width,
                               gint was_notified,
                               const gchar* content,
                               const gchar* note,
                               const gchar* when_date_utc,
                               const gchar* reminder_time,
                               const gchar* labels,
                               const gchar* checklist);
ObjectsTask* objects_task_construct (GType object_type,
                                     gint id,
                                     gint checked,
                                     gint project_id,
                                     gint list_id,
                                     gint task_order,
                                     gint is_inbox,
                                     gint has_reminder,
                                     gint sidebar_width,
                                     gint was_notified,
                                     const gchar* content,
                                     const gchar* note,
                                     const gchar* when_date_utc,
                                     const gchar* reminder_time,
                                     const gchar* labels,
                                     const gchar* checklist);
ObjectsTask* services_database_get_task (ServicesDatabase* self,
                                         gint id);
gint services_database_update_task (ServicesDatabase* self,
                                    ObjectsTask* task);
gint services_database_remove_task (ServicesDatabase* self,
                                    ObjectsTask* task);
GeeArrayList* services_database_get_all_search_tasks (ServicesDatabase* self);
GeeArrayList* services_database_get_all_inbox_tasks (ServicesDatabase* self);
GeeArrayList* services_database_get_all_completed_tasks_2 (ServicesDatabase* self);
GeeArrayList* services_database_get_all_tasks_by_project (ServicesDatabase* self,
                                                          gint id);
GeeArrayList* services_database_get_all_today_tasks (ServicesDatabase* self);
GType utils_get_type (void) G_GNUC_CONST;
gboolean utils_is_today (Utils* self,
                         GDateTime* date_1);
gboolean utils_is_before_today (Utils* self,
                                GDateTime* date_1);
GeeArrayList* services_database_get_all_upcoming_tasks (ServicesDatabase* self);
gboolean utils_is_upcoming (Utils* self,
                            GDateTime* date);
GeeArrayList* services_database_get_all_reminder_tasks (ServicesDatabase* self);
gint services_database_get_all_completed_tasks (ServicesDatabase* self);
gint services_database_get_all_todo_tasks (ServicesDatabase* self);
gint services_database_get_all_tasks (ServicesDatabase* self);
gint services_database_get_inbox_number (ServicesDatabase* self);
gint services_database_get_today_number (ServicesDatabase* self);
gint services_database_get_before_today_number (ServicesDatabase* self);
gint services_database_get_upcoming_number (ServicesDatabase* self);
gint services_database_get_all_tasks_number (ServicesDatabase* self);
gint services_database_get_completed_number (ServicesDatabase* self);
gpointer objects_label_ref (gpointer instance);
void objects_label_unref (gpointer instance);
GParamSpec* objects_param_spec_label (const gchar* name,
                                      const gchar* nick,
                                      const gchar* blurb,
                                      GType object_type,
                                      GParamFlags flags);
void objects_value_set_label (GValue* value,
                              gpointer v_object);
void objects_value_take_label (GValue* value,
                               gpointer v_object);
gpointer objects_value_get_label (const GValue* value);
GType objects_label_get_type (void) G_GNUC_CONST;
gint services_database_add_label (ServicesDatabase* self,
                                  ObjectsLabel* label);
gint services_database_update_label (ServicesDatabase* self,
                                     ObjectsLabel* label);
gint services_database_remove_label (ServicesDatabase* self,
                                     ObjectsLabel* label);
ObjectsLabel* services_database_get_label (ServicesDatabase* self,
                                           const gchar* id);
ObjectsLabel* objects_label_new (gint id,
                                 const gchar* name,
                                 const gchar* color);
ObjectsLabel* objects_label_construct (GType object_type,
                                       gint id,
                                       const gchar* name,
                                       const gchar* color);
GeeArrayList* services_database_get_all_labels (ServicesDatabase* self);
static void g_cclosure_user_marshal_VOID__OBJECTS_PROJECT (GClosure * closure,
                                                    GValue * return_value,
                                                    guint n_param_values,
                                                    const GValue * param_values,
                                                    gpointer invocation_hint,
                                                    gpointer marshal_data);
static void g_cclosure_user_marshal_VOID__OBJECTS_TASK (GClosure * closure,
                                                 GValue * return_value,
                                                 guint n_param_values,
                                                 const GValue * param_values,
                                                 gpointer invocation_hint,
                                                 gpointer marshal_data);
static void g_cclosure_user_marshal_VOID__OBJECTS_REPOSITORY (GClosure * closure,
                                                       GValue * return_value,
                                                       guint n_param_values,
                                                       const GValue * param_values,
                                                       gpointer invocation_hint,
                                                       gpointer marshal_data);
static void g_cclosure_user_marshal_VOID__OBJECTS_USER (GClosure * closure,
                                                 GValue * return_value,
                                                 guint n_param_values,
                                                 const GValue * param_values,
                                                 gpointer invocation_hint,
                                                 gpointer marshal_data);
static void services_database_finalize (GObject * obj);


ServicesDatabase*
services_database_construct (GType object_type,
                             gboolean skip_tables)
{
	ServicesDatabase * self = NULL;
	gint rc = 0;
	const gchar* _tmp0_;
	gchar* _tmp1_;
	const gchar* _tmp6_;
	sqlite3* _tmp7_ = NULL;
	gint _tmp8_;
	gint _tmp9_;
#line 38 "/run/build/planner/src/Services/Database.vala"
	self = (ServicesDatabase*) g_object_new (object_type, NULL);
#line 39 "/run/build/planner/src/Services/Database.vala"
	rc = 0;
#line 40 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = g_get_home_dir ();
#line 40 "/run/build/planner/src/Services/Database.vala"
	_tmp1_ = g_strconcat (_tmp0_, "/.cache/com.github.alainm23.planner/database.db", NULL);
#line 40 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (self->priv->db_path);
#line 40 "/run/build/planner/src/Services/Database.vala"
	self->priv->db_path = _tmp1_;
#line 42 "/run/build/planner/src/Services/Database.vala"
	if (!skip_tables) {
#line 43 "/run/build/planner/src/Services/Database.vala"
		if (services_database_create_tables (self) != SQLITE_OK) {
#line 527 "Database.c"
			FILE* _tmp2_;
			gint _tmp3_;
			sqlite3* _tmp4_;
			const gchar* _tmp5_;
#line 44 "/run/build/planner/src/Services/Database.vala"
			_tmp2_ = stderr;
#line 44 "/run/build/planner/src/Services/Database.vala"
			_tmp3_ = rc;
#line 44 "/run/build/planner/src/Services/Database.vala"
			_tmp4_ = self->priv->db;
#line 44 "/run/build/planner/src/Services/Database.vala"
			_tmp5_ = sqlite3_errmsg (_tmp4_);
#line 44 "/run/build/planner/src/Services/Database.vala"
			fprintf (_tmp2_, "Error creating db table: %d, %s\n", _tmp3_, _tmp5_);
#line 45 "/run/build/planner/src/Services/Database.vala"
			gtk_main_quit ();
#line 544 "Database.c"
		}
	}
#line 49 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = self->priv->db_path;
#line 49 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = sqlite3_open (_tmp6_, &_tmp7_);
#line 49 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_close0 (self->priv->db);
#line 49 "/run/build/planner/src/Services/Database.vala"
	self->priv->db = _tmp7_;
#line 49 "/run/build/planner/src/Services/Database.vala"
	rc = _tmp8_;
#line 51 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = rc;
#line 51 "/run/build/planner/src/Services/Database.vala"
	if (_tmp9_ != SQLITE_OK) {
#line 561 "Database.c"
		FILE* _tmp10_;
		gint _tmp11_;
		sqlite3* _tmp12_;
		const gchar* _tmp13_;
#line 52 "/run/build/planner/src/Services/Database.vala"
		_tmp10_ = stderr;
#line 52 "/run/build/planner/src/Services/Database.vala"
		_tmp11_ = rc;
#line 52 "/run/build/planner/src/Services/Database.vala"
		_tmp12_ = self->priv->db;
#line 52 "/run/build/planner/src/Services/Database.vala"
		_tmp13_ = sqlite3_errmsg (_tmp12_);
#line 52 "/run/build/planner/src/Services/Database.vala"
		fprintf (_tmp10_, "Can't open database: %d, %s\n", _tmp11_, _tmp13_);
#line 53 "/run/build/planner/src/Services/Database.vala"
		gtk_main_quit ();
#line 578 "Database.c"
	}
#line 38 "/run/build/planner/src/Services/Database.vala"
	return self;
#line 582 "Database.c"
}


ServicesDatabase*
services_database_new (gboolean skip_tables)
{
#line 38 "/run/build/planner/src/Services/Database.vala"
	return services_database_construct (SERVICES_TYPE_DATABASE, skip_tables);
#line 591 "Database.c"
}


static gint
_sqlite3_exec (sqlite3* self,
               const gchar* sql,
               sqlite3_callback callback,
               gpointer callback_target,
               gchar* * errmsg)
{
	gchar* _vala_errmsg = NULL;
	gint result = 0;
	const gchar* sqlite_errmsg = NULL;
	gint ec = 0;
	const gchar* _tmp0_ = NULL;
	gint _tmp1_;
	const gchar* _tmp4_;
#line 34 "/app/share/vala-0.40/vapi/sqlite3.vapi"
	g_return_val_if_fail (self != NULL, 0);
#line 34 "/app/share/vala-0.40/vapi/sqlite3.vapi"
	g_return_val_if_fail (sql != NULL, 0);
#line 36 "/app/share/vala-0.40/vapi/sqlite3.vapi"
	_tmp1_ = sqlite3_exec (self, sql, callback, callback_target, (char**) (&_tmp0_));
#line 36 "/app/share/vala-0.40/vapi/sqlite3.vapi"
	sqlite_errmsg = _tmp0_;
#line 36 "/app/share/vala-0.40/vapi/sqlite3.vapi"
	ec = _tmp1_;
#line 37 "/app/share/vala-0.40/vapi/sqlite3.vapi"
	if ((&_vala_errmsg) != NULL) {
#line 621 "Database.c"
		const gchar* _tmp2_;
		gchar* _tmp3_;
#line 38 "/app/share/vala-0.40/vapi/sqlite3.vapi"
		_tmp2_ = sqlite_errmsg;
#line 38 "/app/share/vala-0.40/vapi/sqlite3.vapi"
		_tmp3_ = g_strdup (_tmp2_);
#line 38 "/app/share/vala-0.40/vapi/sqlite3.vapi"
		_g_free0 (_vala_errmsg);
#line 38 "/app/share/vala-0.40/vapi/sqlite3.vapi"
		_vala_errmsg = _tmp3_;
#line 632 "Database.c"
	}
#line 40 "/app/share/vala-0.40/vapi/sqlite3.vapi"
	_tmp4_ = sqlite_errmsg;
#line 40 "/app/share/vala-0.40/vapi/sqlite3.vapi"
	sqlite3_free ((void*) _tmp4_);
#line 41 "/app/share/vala-0.40/vapi/sqlite3.vapi"
	result = ec;
#line 41 "/app/share/vala-0.40/vapi/sqlite3.vapi"
	if (errmsg) {
#line 41 "/app/share/vala-0.40/vapi/sqlite3.vapi"
		*errmsg = _vala_errmsg;
#line 644 "Database.c"
	} else {
#line 41 "/app/share/vala-0.40/vapi/sqlite3.vapi"
		_g_free0 (_vala_errmsg);
#line 648 "Database.c"
	}
#line 41 "/app/share/vala-0.40/vapi/sqlite3.vapi"
	return result;
#line 652 "Database.c"
}


static gint
services_database_create_tables (ServicesDatabase* self)
{
	gint result = 0;
	gint rc = 0;
	const gchar* _tmp0_;
	sqlite3* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3* _tmp8_;
	gint _tmp9_;
	sqlite3* _tmp10_;
	gint _tmp11_;
	sqlite3* _tmp12_;
	gint _tmp13_;
	sqlite3* _tmp14_;
	gint _tmp15_;
	sqlite3* _tmp16_;
	gint _tmp17_;
#line 57 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 60 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db_path;
#line 60 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_open (_tmp0_, &_tmp1_);
#line 60 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_close0 (self->priv->db);
#line 60 "/run/build/planner/src/Services/Database.vala"
	self->priv->db = _tmp1_;
#line 60 "/run/build/planner/src/Services/Database.vala"
	rc = _tmp2_;
#line 62 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = rc;
#line 62 "/run/build/planner/src/Services/Database.vala"
	if (_tmp3_ != SQLITE_OK) {
#line 691 "Database.c"
		FILE* _tmp4_;
		gint _tmp5_;
		sqlite3* _tmp6_;
		const gchar* _tmp7_;
#line 63 "/run/build/planner/src/Services/Database.vala"
		_tmp4_ = stderr;
#line 63 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = rc;
#line 63 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = self->priv->db;
#line 63 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = sqlite3_errmsg (_tmp6_);
#line 63 "/run/build/planner/src/Services/Database.vala"
		fprintf (_tmp4_, "Can't open database: %d, %s\n", _tmp5_, _tmp7_);
#line 64 "/run/build/planner/src/Services/Database.vala"
		gtk_main_quit ();
#line 708 "Database.c"
	}
#line 67 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = self->priv->db;
#line 67 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = _sqlite3_exec (_tmp8_, "CREATE TABLE IF NOT EXISTS PROJECTS (" "id             INTEGER PRIMARY KEY AUTOINCREMENT, " "name           VARCHAR," "note    VARCHAR," "deadline       VARCHAR," "item_order     INTEGER," "is_deleted     INTEGER," "color          VARCHAR)", NULL, NULL, NULL);
#line 67 "/run/build/planner/src/Services/Database.vala"
	rc = _tmp9_;
#line 75 "/run/build/planner/src/Services/Database.vala"
	g_debug ("Database.vala:75: Table PROJECTS created");
#line 77 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = self->priv->db;
#line 77 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = _sqlite3_exec (_tmp10_, "CREATE TABLE IF NOT EXISTS TASKS (" "id             INTEGER PRIMARY KEY AUTOINCREMENT, " "checked        INTEGER," "project_id     INTEGER," "list_id        INTEGER," "task_order     INTEGER," "is_inbox       INTEGER," "has_reminder   INTEGER," "sidebar_width  INTEGER," "was_notified   INTEGER," "content        VARCHAR," "note           VARCHAR," "when_date_utc  VARCHAR," "reminder_time  VARCHAR," "checklist      VARCHAR," "labels         VARCHAR)", NULL, NULL, NULL);
#line 77 "/run/build/planner/src/Services/Database.vala"
	rc = _tmp11_;
#line 93 "/run/build/planner/src/Services/Database.vala"
	g_debug ("Database.vala:93: Table TASKS created");
#line 95 "/run/build/planner/src/Services/Database.vala"
	_tmp12_ = self->priv->db;
#line 95 "/run/build/planner/src/Services/Database.vala"
	_tmp13_ = _sqlite3_exec (_tmp12_, "CREATE TABLE IF NOT EXISTS LABELS (" "id             INTEGER PRIMARY KEY AUTOINCREMENT, " "name           VARCHAR," "color          VARCHAR)", NULL, NULL, NULL);
#line 95 "/run/build/planner/src/Services/Database.vala"
	rc = _tmp13_;
#line 99 "/run/build/planner/src/Services/Database.vala"
	g_debug ("Database.vala:99: Table TASKS created");
#line 101 "/run/build/planner/src/Services/Database.vala"
	_tmp14_ = self->priv->db;
#line 101 "/run/build/planner/src/Services/Database.vala"
	_tmp15_ = _sqlite3_exec (_tmp14_, "CREATE TABLE IF NOT EXISTS USERS (" "id         INTEGER," "name       VARCHAR," "login      VARCHAR," "token      VARCHAR," "avatar_url VARCHAR)", NULL, NULL, NULL);
#line 101 "/run/build/planner/src/Services/Database.vala"
	rc = _tmp15_;
#line 107 "/run/build/planner/src/Services/Database.vala"
	g_debug ("Database.vala:107: Table GITHUB_USER created");
#line 109 "/run/build/planner/src/Services/Database.vala"
	_tmp16_ = self->priv->db;
#line 109 "/run/build/planner/src/Services/Database.vala"
	_tmp17_ = _sqlite3_exec (_tmp16_, "CREATE TABLE IF NOT EXISTS REPOSITORIES (" "id         INTEGER," "name       VARCHAR," "sensitive  INTEGER," "issues     VARCHAR," "user_id    INTEGER)", NULL, NULL, NULL);
#line 109 "/run/build/planner/src/Services/Database.vala"
	rc = _tmp17_;
#line 115 "/run/build/planner/src/Services/Database.vala"
	g_debug ("Database.vala:115: Table REPOSITORY created");
#line 117 "/run/build/planner/src/Services/Database.vala"
	result = rc;
#line 117 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 754 "Database.c"
}


gint
services_database_add_user (ServicesDatabase* self,
                            ObjectsUser* user)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
	gint64 _tmp5_;
	gint _tmp6_;
	sqlite3_stmt* _tmp7_;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	GDestroyNotify _tmp10_;
	gint _tmp11_;
	sqlite3_stmt* _tmp12_;
	const gchar* _tmp13_;
	gchar* _tmp14_;
	GDestroyNotify _tmp15_;
	gint _tmp16_;
	sqlite3_stmt* _tmp17_;
	const gchar* _tmp18_;
	gchar* _tmp19_;
	GDestroyNotify _tmp20_;
	gint _tmp21_;
	sqlite3_stmt* _tmp22_;
	const gchar* _tmp23_;
	gchar* _tmp24_;
	GDestroyNotify _tmp25_;
	gint _tmp26_;
	sqlite3_stmt* _tmp27_;
	gint _tmp28_;
#line 120 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 120 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (user != NULL, 0);
#line 123 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 123 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "INSERT INTO USERS (id, name, login, token, avatar_url)" "VALUES (?, ?, ?, ?, ?)", -1, &_tmp1_, NULL);
#line 123 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 123 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 123 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 125 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 125 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 127 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 127 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = user->id;
#line 127 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int64 (_tmp4_, 1, _tmp5_);
#line 128 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = res;
#line 128 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp6_ == SQLITE_OK, "res == Sqlite.OK");
#line 130 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = stmt;
#line 130 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = user->name;
#line 130 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = g_strdup (_tmp8_);
#line 130 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = g_free;
#line 130 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp7_, 2, _tmp9_, -1, _tmp10_);
#line 131 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = res;
#line 131 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp11_ == SQLITE_OK, "res == Sqlite.OK");
#line 133 "/run/build/planner/src/Services/Database.vala"
	_tmp12_ = stmt;
#line 133 "/run/build/planner/src/Services/Database.vala"
	_tmp13_ = user->login;
#line 133 "/run/build/planner/src/Services/Database.vala"
	_tmp14_ = g_strdup (_tmp13_);
#line 133 "/run/build/planner/src/Services/Database.vala"
	_tmp15_ = g_free;
#line 133 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp12_, 3, _tmp14_, -1, _tmp15_);
#line 134 "/run/build/planner/src/Services/Database.vala"
	_tmp16_ = res;
#line 134 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp16_ == SQLITE_OK, "res == Sqlite.OK");
#line 136 "/run/build/planner/src/Services/Database.vala"
	_tmp17_ = stmt;
#line 136 "/run/build/planner/src/Services/Database.vala"
	_tmp18_ = user->token;
#line 136 "/run/build/planner/src/Services/Database.vala"
	_tmp19_ = g_strdup (_tmp18_);
#line 136 "/run/build/planner/src/Services/Database.vala"
	_tmp20_ = g_free;
#line 136 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp17_, 4, _tmp19_, -1, _tmp20_);
#line 137 "/run/build/planner/src/Services/Database.vala"
	_tmp21_ = res;
#line 137 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp21_ == SQLITE_OK, "res == Sqlite.OK");
#line 139 "/run/build/planner/src/Services/Database.vala"
	_tmp22_ = stmt;
#line 139 "/run/build/planner/src/Services/Database.vala"
	_tmp23_ = user->avatar_url;
#line 139 "/run/build/planner/src/Services/Database.vala"
	_tmp24_ = g_strdup (_tmp23_);
#line 139 "/run/build/planner/src/Services/Database.vala"
	_tmp25_ = g_free;
#line 139 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp22_, 5, _tmp24_, -1, _tmp25_);
#line 140 "/run/build/planner/src/Services/Database.vala"
	_tmp26_ = res;
#line 140 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp26_ == SQLITE_OK, "res == Sqlite.OK");
#line 142 "/run/build/planner/src/Services/Database.vala"
	_tmp27_ = stmt;
#line 142 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_step (_tmp27_);
#line 144 "/run/build/planner/src/Services/Database.vala"
	_tmp28_ = res;
#line 144 "/run/build/planner/src/Services/Database.vala"
	if (_tmp28_ == SQLITE_DONE) {
#line 145 "/run/build/planner/src/Services/Database.vala"
		g_signal_emit (self, services_database_signals[SERVICES_DATABASE_ADDEN_NEW_USER_SIGNAL], 0, user);
#line 888 "Database.c"
	}
#line 148 "/run/build/planner/src/Services/Database.vala"
	result = res;
#line 148 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 148 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 896 "Database.c"
}


gboolean
services_database_user_exists (ServicesDatabase* self)
{
	gboolean result = FALSE;
	gboolean file_exists = FALSE;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
#line 151 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 152 "/run/build/planner/src/Services/Database.vala"
	file_exists = FALSE;
#line 155 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 155 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT COUNT (*) FROM USERS", -1, &_tmp1_, NULL);
#line 155 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 155 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 155 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 156 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 156 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 158 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 158 "/run/build/planner/src/Services/Database.vala"
	if (sqlite3_step (_tmp4_) == SQLITE_ROW) {
#line 934 "Database.c"
		sqlite3_stmt* _tmp5_;
#line 159 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = stmt;
#line 159 "/run/build/planner/src/Services/Database.vala"
		file_exists = sqlite3_column_int (_tmp5_, 0) > 0;
#line 940 "Database.c"
	}
#line 162 "/run/build/planner/src/Services/Database.vala"
	result = file_exists;
#line 162 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 162 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 948 "Database.c"
}


gboolean
services_database_repo_exists (ServicesDatabase* self)
{
	gboolean result = FALSE;
	gboolean file_exists = FALSE;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
#line 165 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 166 "/run/build/planner/src/Services/Database.vala"
	file_exists = FALSE;
#line 169 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 169 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT COUNT (*) FROM REPOSITORIES", -1, &_tmp1_, NULL);
#line 169 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 169 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 169 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 170 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 170 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 172 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 172 "/run/build/planner/src/Services/Database.vala"
	if (sqlite3_step (_tmp4_) == SQLITE_ROW) {
#line 986 "Database.c"
		sqlite3_stmt* _tmp5_;
#line 173 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = stmt;
#line 173 "/run/build/planner/src/Services/Database.vala"
		file_exists = sqlite3_column_int (_tmp5_, 0) > 0;
#line 992 "Database.c"
	}
#line 176 "/run/build/planner/src/Services/Database.vala"
	result = file_exists;
#line 176 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 176 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 1000 "Database.c"
}


ObjectsUser*
services_database_get_user (ServicesDatabase* self)
{
	ObjectsUser* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	ObjectsUser* user = NULL;
	ObjectsUser* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	const gchar* _tmp6_;
	gchar* _tmp7_;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
#line 179 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 182 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 182 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM USERS ORDER BY id ASC LIMIT 1", -1, &_tmp1_, NULL);
#line 182 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 182 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 182 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 184 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (res == SQLITE_OK, "res == Sqlite.OK");
#line 186 "/run/build/planner/src/Services/Database.vala"
	sqlite3_step (stmt);
#line 188 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = objects_user_new ((gint64) 0, "", "", "", "");
#line 188 "/run/build/planner/src/Services/Database.vala"
	user = _tmp3_;
#line 190 "/run/build/planner/src/Services/Database.vala"
	user->id = sqlite3_column_int64 (stmt, 0);
#line 191 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = sqlite3_column_text (stmt, 1);
#line 191 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = g_strdup (_tmp4_);
#line 191 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (user->name);
#line 191 "/run/build/planner/src/Services/Database.vala"
	user->name = _tmp5_;
#line 192 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = sqlite3_column_text (stmt, 2);
#line 192 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = g_strdup (_tmp6_);
#line 192 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (user->login);
#line 192 "/run/build/planner/src/Services/Database.vala"
	user->login = _tmp7_;
#line 193 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = sqlite3_column_text (stmt, 3);
#line 193 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = g_strdup (_tmp8_);
#line 193 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (user->token);
#line 193 "/run/build/planner/src/Services/Database.vala"
	user->token = _tmp9_;
#line 194 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = sqlite3_column_text (stmt, 4);
#line 194 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = g_strdup (_tmp10_);
#line 194 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (user->avatar_url);
#line 194 "/run/build/planner/src/Services/Database.vala"
	user->avatar_url = _tmp11_;
#line 196 "/run/build/planner/src/Services/Database.vala"
	result = user;
#line 196 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 196 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 1083 "Database.c"
}


gboolean
services_database_repository_exists (ServicesDatabase* self,
                                     gint64 id)
{
	gboolean result = FALSE;
	gboolean exists = FALSE;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
	gint _tmp5_;
	sqlite3_stmt* _tmp6_;
#line 199 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, FALSE);
#line 200 "/run/build/planner/src/Services/Database.vala"
	exists = FALSE;
#line 203 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 203 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT COUNT (*) FROM REPOSITORIES WHERE id = ?", -1, &_tmp1_, NULL);
#line 203 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 203 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 203 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 204 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 204 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 206 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 206 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int64 (_tmp4_, 1, id);
#line 207 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = res;
#line 207 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp5_ == SQLITE_OK, "res == Sqlite.OK");
#line 209 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = stmt;
#line 209 "/run/build/planner/src/Services/Database.vala"
	if (sqlite3_step (_tmp6_) == SQLITE_ROW) {
#line 1132 "Database.c"
		sqlite3_stmt* _tmp7_;
#line 210 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = stmt;
#line 210 "/run/build/planner/src/Services/Database.vala"
		exists = sqlite3_column_int (_tmp7_, 0) > 0;
#line 1138 "Database.c"
	}
#line 213 "/run/build/planner/src/Services/Database.vala"
	result = exists;
#line 213 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 213 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 1146 "Database.c"
}


gint
services_database_add_repository (ServicesDatabase* self,
                                  ObjectsRepository* repository)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
	gint64 _tmp5_;
	gint _tmp6_;
	sqlite3_stmt* _tmp7_;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	GDestroyNotify _tmp10_;
	gint _tmp11_;
	sqlite3_stmt* _tmp12_;
	gint _tmp13_;
	gint _tmp14_;
	sqlite3_stmt* _tmp15_;
	const gchar* _tmp16_;
	gchar* _tmp17_;
	GDestroyNotify _tmp18_;
	gint _tmp19_;
	sqlite3_stmt* _tmp20_;
	gint64 _tmp21_;
	gint _tmp22_;
	sqlite3_stmt* _tmp23_;
	gint _tmp24_;
#line 216 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 216 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (repository != NULL, 0);
#line 219 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 219 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "INSERT INTO REPOSITORIES (id, name, sensitive, issues, user_id)" "VALUES (?, ?, ?, ?, ?)", -1, &_tmp1_, NULL);
#line 219 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 219 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 219 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 221 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 221 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 223 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 223 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = repository->id;
#line 223 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int64 (_tmp4_, 1, _tmp5_);
#line 224 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = res;
#line 224 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp6_ == SQLITE_OK, "res == Sqlite.OK");
#line 226 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = stmt;
#line 226 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = repository->name;
#line 226 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = g_strdup (_tmp8_);
#line 226 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = g_free;
#line 226 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp7_, 2, _tmp9_, -1, _tmp10_);
#line 227 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = res;
#line 227 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp11_ == SQLITE_OK, "res == Sqlite.OK");
#line 229 "/run/build/planner/src/Services/Database.vala"
	_tmp12_ = stmt;
#line 229 "/run/build/planner/src/Services/Database.vala"
	_tmp13_ = repository->sensitive;
#line 229 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp12_, 3, _tmp13_);
#line 230 "/run/build/planner/src/Services/Database.vala"
	_tmp14_ = res;
#line 230 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp14_ == SQLITE_OK, "res == Sqlite.OK");
#line 232 "/run/build/planner/src/Services/Database.vala"
	_tmp15_ = stmt;
#line 232 "/run/build/planner/src/Services/Database.vala"
	_tmp16_ = repository->issues;
#line 232 "/run/build/planner/src/Services/Database.vala"
	_tmp17_ = g_strdup (_tmp16_);
#line 232 "/run/build/planner/src/Services/Database.vala"
	_tmp18_ = g_free;
#line 232 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp15_, 4, _tmp17_, -1, _tmp18_);
#line 233 "/run/build/planner/src/Services/Database.vala"
	_tmp19_ = res;
#line 233 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp19_ == SQLITE_OK, "res == Sqlite.OK");
#line 235 "/run/build/planner/src/Services/Database.vala"
	_tmp20_ = stmt;
#line 235 "/run/build/planner/src/Services/Database.vala"
	_tmp21_ = repository->user_id;
#line 235 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int64 (_tmp20_, 5, _tmp21_);
#line 236 "/run/build/planner/src/Services/Database.vala"
	_tmp22_ = res;
#line 236 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp22_ == SQLITE_OK, "res == Sqlite.OK");
#line 238 "/run/build/planner/src/Services/Database.vala"
	_tmp23_ = stmt;
#line 238 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_step (_tmp23_);
#line 240 "/run/build/planner/src/Services/Database.vala"
	_tmp24_ = res;
#line 240 "/run/build/planner/src/Services/Database.vala"
	if (_tmp24_ == SQLITE_DONE) {
#line 241 "/run/build/planner/src/Services/Database.vala"
		g_signal_emit (self, services_database_signals[SERVICES_DATABASE_ADDEN_NEW_REPOSITORY_SIGNAL], 0, repository);
#line 1268 "Database.c"
	}
#line 244 "/run/build/planner/src/Services/Database.vala"
	result = res;
#line 244 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 244 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 1276 "Database.c"
}


gint
services_database_update_repository (ServicesDatabase* self,
                                     ObjectsRepository* repository)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
	const gchar* _tmp5_;
	gchar* _tmp6_;
	GDestroyNotify _tmp7_;
	gint _tmp8_;
	sqlite3_stmt* _tmp9_;
	gint _tmp10_;
	gint _tmp11_;
	sqlite3_stmt* _tmp12_;
	const gchar* _tmp13_;
	gchar* _tmp14_;
	GDestroyNotify _tmp15_;
	gint _tmp16_;
	sqlite3_stmt* _tmp17_;
	gint64 _tmp18_;
	gint _tmp19_;
	sqlite3_stmt* _tmp20_;
	gint64 _tmp21_;
	gint _tmp22_;
	sqlite3_stmt* _tmp23_;
	gint _tmp24_;
#line 247 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 247 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (repository != NULL, 0);
#line 250 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 250 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "UPDATE REPOSITORIES SET name = ?, " "sensitive = ?, issues = ?, user_id = ? " "WHERE id = ?", -1, &_tmp1_, NULL);
#line 250 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 250 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 250 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 253 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 253 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 255 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 255 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = repository->name;
#line 255 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = g_strdup (_tmp5_);
#line 255 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = g_free;
#line 255 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp4_, 1, _tmp6_, -1, _tmp7_);
#line 256 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = res;
#line 256 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp8_ == SQLITE_OK, "res == Sqlite.OK");
#line 258 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = stmt;
#line 258 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = repository->sensitive;
#line 258 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp9_, 2, _tmp10_);
#line 259 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = res;
#line 259 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp11_ == SQLITE_OK, "res == Sqlite.OK");
#line 261 "/run/build/planner/src/Services/Database.vala"
	_tmp12_ = stmt;
#line 261 "/run/build/planner/src/Services/Database.vala"
	_tmp13_ = repository->issues;
#line 261 "/run/build/planner/src/Services/Database.vala"
	_tmp14_ = g_strdup (_tmp13_);
#line 261 "/run/build/planner/src/Services/Database.vala"
	_tmp15_ = g_free;
#line 261 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp12_, 3, _tmp14_, -1, _tmp15_);
#line 262 "/run/build/planner/src/Services/Database.vala"
	_tmp16_ = res;
#line 262 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp16_ == SQLITE_OK, "res == Sqlite.OK");
#line 264 "/run/build/planner/src/Services/Database.vala"
	_tmp17_ = stmt;
#line 264 "/run/build/planner/src/Services/Database.vala"
	_tmp18_ = repository->user_id;
#line 264 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int64 (_tmp17_, 4, _tmp18_);
#line 265 "/run/build/planner/src/Services/Database.vala"
	_tmp19_ = res;
#line 265 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp19_ == SQLITE_OK, "res == Sqlite.OK");
#line 267 "/run/build/planner/src/Services/Database.vala"
	_tmp20_ = stmt;
#line 267 "/run/build/planner/src/Services/Database.vala"
	_tmp21_ = repository->id;
#line 267 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int64 (_tmp20_, 5, _tmp21_);
#line 268 "/run/build/planner/src/Services/Database.vala"
	_tmp22_ = res;
#line 268 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp22_ == SQLITE_OK, "res == Sqlite.OK");
#line 270 "/run/build/planner/src/Services/Database.vala"
	_tmp23_ = stmt;
#line 270 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_step (_tmp23_);
#line 272 "/run/build/planner/src/Services/Database.vala"
	_tmp24_ = res;
#line 272 "/run/build/planner/src/Services/Database.vala"
	if (_tmp24_ == SQLITE_DONE) {
#line 1396 "Database.c"
	}
#line 276 "/run/build/planner/src/Services/Database.vala"
	result = res;
#line 276 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 276 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 1404 "Database.c"
}


GeeArrayList*
services_database_get_all_repos (ServicesDatabase* self)
{
	GeeArrayList* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	GeeArrayList* all = NULL;
	GeeArrayList* _tmp4_;
#line 279 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 282 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 282 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM REPOSITORIES", -1, &_tmp1_, NULL);
#line 282 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 282 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 282 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 284 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 284 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 286 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = gee_array_list_new (OBJECTS_TYPE_REPOSITORY, (GBoxedCopyFunc) objects_repository_ref, (GDestroyNotify) objects_repository_unref, NULL, NULL, NULL);
#line 286 "/run/build/planner/src/Services/Database.vala"
	all = _tmp4_;
#line 288 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 1442 "Database.c"
		sqlite3_stmt* _tmp5_;
		gint _tmp6_;
		ObjectsRepository* repo = NULL;
		ObjectsRepository* _tmp7_;
		ObjectsRepository* _tmp8_;
		sqlite3_stmt* _tmp9_;
		ObjectsRepository* _tmp10_;
		sqlite3_stmt* _tmp11_;
		const gchar* _tmp12_;
		gchar* _tmp13_;
		ObjectsRepository* _tmp14_;
		sqlite3_stmt* _tmp15_;
		ObjectsRepository* _tmp16_;
		sqlite3_stmt* _tmp17_;
		const gchar* _tmp18_;
		gchar* _tmp19_;
		ObjectsRepository* _tmp20_;
		sqlite3_stmt* _tmp21_;
		GeeArrayList* _tmp22_;
		ObjectsRepository* _tmp23_;
#line 288 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = stmt;
#line 288 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp5_);
#line 288 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = res;
#line 288 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp6_ == SQLITE_ROW)) {
#line 288 "/run/build/planner/src/Services/Database.vala"
			break;
#line 1473 "Database.c"
		}
#line 289 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = objects_repository_new ((gint64) 0, "", 0, "", (gint64) 0);
#line 289 "/run/build/planner/src/Services/Database.vala"
		repo = _tmp7_;
#line 291 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = repo;
#line 291 "/run/build/planner/src/Services/Database.vala"
		_tmp9_ = stmt;
#line 291 "/run/build/planner/src/Services/Database.vala"
		_tmp8_->id = (gint64) sqlite3_column_int (_tmp9_, 0);
#line 292 "/run/build/planner/src/Services/Database.vala"
		_tmp10_ = repo;
#line 292 "/run/build/planner/src/Services/Database.vala"
		_tmp11_ = stmt;
#line 292 "/run/build/planner/src/Services/Database.vala"
		_tmp12_ = sqlite3_column_text (_tmp11_, 1);
#line 292 "/run/build/planner/src/Services/Database.vala"
		_tmp13_ = g_strdup (_tmp12_);
#line 292 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp10_->name);
#line 292 "/run/build/planner/src/Services/Database.vala"
		_tmp10_->name = _tmp13_;
#line 293 "/run/build/planner/src/Services/Database.vala"
		_tmp14_ = repo;
#line 293 "/run/build/planner/src/Services/Database.vala"
		_tmp15_ = stmt;
#line 293 "/run/build/planner/src/Services/Database.vala"
		_tmp14_->sensitive = sqlite3_column_int (_tmp15_, 2);
#line 294 "/run/build/planner/src/Services/Database.vala"
		_tmp16_ = repo;
#line 294 "/run/build/planner/src/Services/Database.vala"
		_tmp17_ = stmt;
#line 294 "/run/build/planner/src/Services/Database.vala"
		_tmp18_ = sqlite3_column_text (_tmp17_, 3);
#line 294 "/run/build/planner/src/Services/Database.vala"
		_tmp19_ = g_strdup (_tmp18_);
#line 294 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp16_->issues);
#line 294 "/run/build/planner/src/Services/Database.vala"
		_tmp16_->issues = _tmp19_;
#line 295 "/run/build/planner/src/Services/Database.vala"
		_tmp20_ = repo;
#line 295 "/run/build/planner/src/Services/Database.vala"
		_tmp21_ = stmt;
#line 295 "/run/build/planner/src/Services/Database.vala"
		_tmp20_->user_id = (gint64) sqlite3_column_int (_tmp21_, 4);
#line 297 "/run/build/planner/src/Services/Database.vala"
		_tmp22_ = all;
#line 297 "/run/build/planner/src/Services/Database.vala"
		_tmp23_ = repo;
#line 297 "/run/build/planner/src/Services/Database.vala"
		gee_abstract_collection_add ((GeeAbstractCollection*) _tmp22_, _tmp23_);
#line 288 "/run/build/planner/src/Services/Database.vala"
		_objects_repository_unref0 (repo);
#line 1529 "Database.c"
	}
#line 300 "/run/build/planner/src/Services/Database.vala"
	result = all;
#line 300 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 300 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 1537 "Database.c"
}


gint
services_database_remove_all_users (ServicesDatabase* self)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
#line 303 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 306 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 306 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "DELETE FROM USERS;", -1, &_tmp1_, NULL);
#line 306 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 306 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 306 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 308 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 308 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 310 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_step (stmt);
#line 312 "/run/build/planner/src/Services/Database.vala"
	result = res;
#line 312 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 312 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 1575 "Database.c"
}


gint
services_database_remove_all_repos (ServicesDatabase* self)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
#line 315 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 318 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 318 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "DELETE FROM REPOSITORIES;", -1, &_tmp1_, NULL);
#line 318 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 318 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 318 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 320 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 320 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 322 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_step (stmt);
#line 324 "/run/build/planner/src/Services/Database.vala"
	result = res;
#line 324 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 324 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 1613 "Database.c"
}


gint
services_database_add_project (ServicesDatabase* self,
                               ObjectsProject* project)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
	const gchar* _tmp5_;
	gchar* _tmp6_;
	GDestroyNotify _tmp7_;
	gint _tmp8_;
	sqlite3_stmt* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
	GDestroyNotify _tmp12_;
	gint _tmp13_;
	sqlite3_stmt* _tmp14_;
	const gchar* _tmp15_;
	gchar* _tmp16_;
	GDestroyNotify _tmp17_;
	gint _tmp18_;
	sqlite3_stmt* _tmp19_;
	gint _tmp20_;
	gint _tmp21_;
	sqlite3_stmt* _tmp22_;
	gint _tmp23_;
	gint _tmp24_;
	sqlite3_stmt* _tmp25_;
	const gchar* _tmp26_;
	gchar* _tmp27_;
	GDestroyNotify _tmp28_;
	gint _tmp29_;
	sqlite3_stmt* _tmp30_;
	gint _tmp31_;
#line 328 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 328 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (project != NULL, 0);
#line 331 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 331 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "INSERT INTO PROJECTS (name," "note, deadline, item_order, is_deleted, color)" "VALUES (?, ?, ?, ?, ?, ?)", -1, &_tmp1_, NULL);
#line 331 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 331 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 331 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 334 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 334 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 336 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 336 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = project->name;
#line 336 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = g_strdup (_tmp5_);
#line 336 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = g_free;
#line 336 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp4_, 1, _tmp6_, -1, _tmp7_);
#line 337 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = res;
#line 337 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp8_ == SQLITE_OK, "res == Sqlite.OK");
#line 339 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = stmt;
#line 339 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = project->note;
#line 339 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = g_strdup (_tmp10_);
#line 339 "/run/build/planner/src/Services/Database.vala"
	_tmp12_ = g_free;
#line 339 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp9_, 2, _tmp11_, -1, _tmp12_);
#line 340 "/run/build/planner/src/Services/Database.vala"
	_tmp13_ = res;
#line 340 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp13_ == SQLITE_OK, "res == Sqlite.OK");
#line 342 "/run/build/planner/src/Services/Database.vala"
	_tmp14_ = stmt;
#line 342 "/run/build/planner/src/Services/Database.vala"
	_tmp15_ = project->deadline;
#line 342 "/run/build/planner/src/Services/Database.vala"
	_tmp16_ = g_strdup (_tmp15_);
#line 342 "/run/build/planner/src/Services/Database.vala"
	_tmp17_ = g_free;
#line 342 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp14_, 3, _tmp16_, -1, _tmp17_);
#line 343 "/run/build/planner/src/Services/Database.vala"
	_tmp18_ = res;
#line 343 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp18_ == SQLITE_OK, "res == Sqlite.OK");
#line 345 "/run/build/planner/src/Services/Database.vala"
	_tmp19_ = stmt;
#line 345 "/run/build/planner/src/Services/Database.vala"
	_tmp20_ = project->item_order;
#line 345 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp19_, 4, _tmp20_);
#line 346 "/run/build/planner/src/Services/Database.vala"
	_tmp21_ = res;
#line 346 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp21_ == SQLITE_OK, "res == Sqlite.OK");
#line 348 "/run/build/planner/src/Services/Database.vala"
	_tmp22_ = stmt;
#line 348 "/run/build/planner/src/Services/Database.vala"
	_tmp23_ = project->is_deleted;
#line 348 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp22_, 5, _tmp23_);
#line 349 "/run/build/planner/src/Services/Database.vala"
	_tmp24_ = res;
#line 349 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp24_ == SQLITE_OK, "res == Sqlite.OK");
#line 351 "/run/build/planner/src/Services/Database.vala"
	_tmp25_ = stmt;
#line 351 "/run/build/planner/src/Services/Database.vala"
	_tmp26_ = project->color;
#line 351 "/run/build/planner/src/Services/Database.vala"
	_tmp27_ = g_strdup (_tmp26_);
#line 351 "/run/build/planner/src/Services/Database.vala"
	_tmp28_ = g_free;
#line 351 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp25_, 6, _tmp27_, -1, _tmp28_);
#line 352 "/run/build/planner/src/Services/Database.vala"
	_tmp29_ = res;
#line 352 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp29_ == SQLITE_OK, "res == Sqlite.OK");
#line 354 "/run/build/planner/src/Services/Database.vala"
	_tmp30_ = stmt;
#line 354 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_step (_tmp30_);
#line 356 "/run/build/planner/src/Services/Database.vala"
	_tmp31_ = res;
#line 356 "/run/build/planner/src/Services/Database.vala"
	if (_tmp31_ == SQLITE_DONE) {
#line 357 "/run/build/planner/src/Services/Database.vala"
		g_signal_emit (self, services_database_signals[SERVICES_DATABASE_ON_ADD_PROJECT_SIGNAL_SIGNAL], 0);
#line 1760 "Database.c"
	}
#line 360 "/run/build/planner/src/Services/Database.vala"
	result = res;
#line 360 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 360 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 1768 "Database.c"
}


gint
services_database_update_project (ServicesDatabase* self,
                                  ObjectsProject* project)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
	const gchar* _tmp5_;
	gchar* _tmp6_;
	GDestroyNotify _tmp7_;
	gint _tmp8_;
	sqlite3_stmt* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
	GDestroyNotify _tmp12_;
	gint _tmp13_;
	sqlite3_stmt* _tmp14_;
	const gchar* _tmp15_;
	gchar* _tmp16_;
	GDestroyNotify _tmp17_;
	gint _tmp18_;
	sqlite3_stmt* _tmp19_;
	gint _tmp20_;
	gint _tmp21_;
	sqlite3_stmt* _tmp22_;
	gint _tmp23_;
	gint _tmp24_;
	sqlite3_stmt* _tmp25_;
	const gchar* _tmp26_;
	gchar* _tmp27_;
	GDestroyNotify _tmp28_;
	gint _tmp29_;
	sqlite3_stmt* _tmp30_;
	gint _tmp31_;
	gint _tmp32_;
	sqlite3_stmt* _tmp33_;
	gint _tmp34_;
#line 363 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 363 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (project != NULL, 0);
#line 366 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 366 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "UPDATE PROJECTS SET name = ?, " "note = ?, deadline = ?, item_order = ?, is_deleted = ?, color = ? " "WHERE id = ?", -1, &_tmp1_, NULL);
#line 366 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 366 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 366 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 369 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 369 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 371 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 371 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = project->name;
#line 371 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = g_strdup (_tmp5_);
#line 371 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = g_free;
#line 371 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp4_, 1, _tmp6_, -1, _tmp7_);
#line 372 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = res;
#line 372 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp8_ == SQLITE_OK, "res == Sqlite.OK");
#line 374 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = stmt;
#line 374 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = project->note;
#line 374 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = g_strdup (_tmp10_);
#line 374 "/run/build/planner/src/Services/Database.vala"
	_tmp12_ = g_free;
#line 374 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp9_, 2, _tmp11_, -1, _tmp12_);
#line 375 "/run/build/planner/src/Services/Database.vala"
	_tmp13_ = res;
#line 375 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp13_ == SQLITE_OK, "res == Sqlite.OK");
#line 377 "/run/build/planner/src/Services/Database.vala"
	_tmp14_ = stmt;
#line 377 "/run/build/planner/src/Services/Database.vala"
	_tmp15_ = project->deadline;
#line 377 "/run/build/planner/src/Services/Database.vala"
	_tmp16_ = g_strdup (_tmp15_);
#line 377 "/run/build/planner/src/Services/Database.vala"
	_tmp17_ = g_free;
#line 377 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp14_, 3, _tmp16_, -1, _tmp17_);
#line 378 "/run/build/planner/src/Services/Database.vala"
	_tmp18_ = res;
#line 378 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp18_ == SQLITE_OK, "res == Sqlite.OK");
#line 380 "/run/build/planner/src/Services/Database.vala"
	_tmp19_ = stmt;
#line 380 "/run/build/planner/src/Services/Database.vala"
	_tmp20_ = project->item_order;
#line 380 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp19_, 4, _tmp20_);
#line 381 "/run/build/planner/src/Services/Database.vala"
	_tmp21_ = res;
#line 381 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp21_ == SQLITE_OK, "res == Sqlite.OK");
#line 383 "/run/build/planner/src/Services/Database.vala"
	_tmp22_ = stmt;
#line 383 "/run/build/planner/src/Services/Database.vala"
	_tmp23_ = project->is_deleted;
#line 383 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp22_, 5, _tmp23_);
#line 384 "/run/build/planner/src/Services/Database.vala"
	_tmp24_ = res;
#line 384 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp24_ == SQLITE_OK, "res == Sqlite.OK");
#line 386 "/run/build/planner/src/Services/Database.vala"
	_tmp25_ = stmt;
#line 386 "/run/build/planner/src/Services/Database.vala"
	_tmp26_ = project->color;
#line 386 "/run/build/planner/src/Services/Database.vala"
	_tmp27_ = g_strdup (_tmp26_);
#line 386 "/run/build/planner/src/Services/Database.vala"
	_tmp28_ = g_free;
#line 386 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp25_, 6, _tmp27_, -1, _tmp28_);
#line 387 "/run/build/planner/src/Services/Database.vala"
	_tmp29_ = res;
#line 387 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp29_ == SQLITE_OK, "res == Sqlite.OK");
#line 389 "/run/build/planner/src/Services/Database.vala"
	_tmp30_ = stmt;
#line 389 "/run/build/planner/src/Services/Database.vala"
	_tmp31_ = project->id;
#line 389 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp30_, 7, _tmp31_);
#line 390 "/run/build/planner/src/Services/Database.vala"
	_tmp32_ = res;
#line 390 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp32_ == SQLITE_OK, "res == Sqlite.OK");
#line 392 "/run/build/planner/src/Services/Database.vala"
	_tmp33_ = stmt;
#line 392 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_step (_tmp33_);
#line 394 "/run/build/planner/src/Services/Database.vala"
	_tmp34_ = res;
#line 394 "/run/build/planner/src/Services/Database.vala"
	if (_tmp34_ == SQLITE_DONE) {
#line 395 "/run/build/planner/src/Services/Database.vala"
		g_signal_emit (self, services_database_signals[SERVICES_DATABASE_UPDATE_PROJECT_SIGNAL_SIGNAL], 0, project);
#line 1928 "Database.c"
	}
#line 398 "/run/build/planner/src/Services/Database.vala"
	result = res;
#line 398 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 398 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 1936 "Database.c"
}


gint
services_database_remove_project (ServicesDatabase* self,
                                  gint id)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
	gint _tmp5_;
	sqlite3_stmt* _tmp6_;
	gint _tmp7_;
#line 401 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 404 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 404 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "DELETE FROM PROJECTS WHERE id = ?", -1, &_tmp1_, NULL);
#line 404 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 404 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 404 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 405 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 405 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 407 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 407 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp4_, 1, id);
#line 408 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = res;
#line 408 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp5_ == SQLITE_OK, "res == Sqlite.OK");
#line 410 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = stmt;
#line 410 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_step (_tmp6_);
#line 412 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = res;
#line 412 "/run/build/planner/src/Services/Database.vala"
	if (_tmp7_ == SQLITE_DONE) {
#line 1987 "Database.c"
		sqlite3_stmt* _tmp8_;
		sqlite3* _tmp9_;
		sqlite3_stmt* _tmp10_ = NULL;
		gint _tmp11_;
		gint _tmp12_;
		sqlite3_stmt* _tmp13_;
		gint _tmp14_;
		sqlite3_stmt* _tmp15_;
#line 413 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = stmt;
#line 413 "/run/build/planner/src/Services/Database.vala"
		sqlite3_reset (_tmp8_);
#line 415 "/run/build/planner/src/Services/Database.vala"
		_tmp9_ = self->priv->db;
#line 415 "/run/build/planner/src/Services/Database.vala"
		_tmp11_ = sqlite3_prepare_v2 (_tmp9_, "DELETE FROM TASKS WHERE project_id = ?", -1, &_tmp10_, NULL);
#line 415 "/run/build/planner/src/Services/Database.vala"
		_sqlite3_finalize0 (stmt);
#line 415 "/run/build/planner/src/Services/Database.vala"
		stmt = _tmp10_;
#line 415 "/run/build/planner/src/Services/Database.vala"
		res = _tmp11_;
#line 416 "/run/build/planner/src/Services/Database.vala"
		_tmp12_ = res;
#line 416 "/run/build/planner/src/Services/Database.vala"
		_vala_assert (_tmp12_ == SQLITE_OK, "res == Sqlite.OK");
#line 418 "/run/build/planner/src/Services/Database.vala"
		_tmp13_ = stmt;
#line 418 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_bind_int (_tmp13_, 1, id);
#line 419 "/run/build/planner/src/Services/Database.vala"
		_tmp14_ = res;
#line 419 "/run/build/planner/src/Services/Database.vala"
		_vala_assert (_tmp14_ == SQLITE_OK, "res == Sqlite.OK");
#line 421 "/run/build/planner/src/Services/Database.vala"
		_tmp15_ = stmt;
#line 421 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp15_);
#line 2026 "Database.c"
	}
#line 424 "/run/build/planner/src/Services/Database.vala"
	result = res;
#line 424 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 424 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 2034 "Database.c"
}


GeeArrayList*
services_database_get_all_projects (ServicesDatabase* self)
{
	GeeArrayList* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	GeeArrayList* all = NULL;
	GeeArrayList* _tmp4_;
#line 427 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 430 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 430 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM PROJECTS WHERE is_deleted = 0 ORDER BY id", -1, &_tmp1_, NULL);
#line 430 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 430 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 430 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 432 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 432 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 434 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = gee_array_list_new (OBJECTS_TYPE_PROJECT, (GBoxedCopyFunc) objects_project_ref, (GDestroyNotify) objects_project_unref, NULL, NULL, NULL);
#line 434 "/run/build/planner/src/Services/Database.vala"
	all = _tmp4_;
#line 436 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 2072 "Database.c"
		sqlite3_stmt* _tmp5_;
		gint _tmp6_;
		ObjectsProject* project = NULL;
		ObjectsProject* _tmp7_;
		ObjectsProject* _tmp8_;
		sqlite3_stmt* _tmp9_;
		ObjectsProject* _tmp10_;
		sqlite3_stmt* _tmp11_;
		const gchar* _tmp12_;
		gchar* _tmp13_;
		ObjectsProject* _tmp14_;
		sqlite3_stmt* _tmp15_;
		const gchar* _tmp16_;
		gchar* _tmp17_;
		ObjectsProject* _tmp18_;
		sqlite3_stmt* _tmp19_;
		const gchar* _tmp20_;
		gchar* _tmp21_;
		ObjectsProject* _tmp22_;
		sqlite3_stmt* _tmp23_;
		ObjectsProject* _tmp24_;
		sqlite3_stmt* _tmp25_;
		ObjectsProject* _tmp26_;
		sqlite3_stmt* _tmp27_;
		const gchar* _tmp28_;
		gchar* _tmp29_;
		GeeArrayList* _tmp30_;
		ObjectsProject* _tmp31_;
#line 436 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = stmt;
#line 436 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp5_);
#line 436 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = res;
#line 436 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp6_ == SQLITE_ROW)) {
#line 436 "/run/build/planner/src/Services/Database.vala"
			break;
#line 2111 "Database.c"
		}
#line 437 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = objects_project_new (0, 0, 0, "", "", "", "");
#line 437 "/run/build/planner/src/Services/Database.vala"
		project = _tmp7_;
#line 439 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = project;
#line 439 "/run/build/planner/src/Services/Database.vala"
		_tmp9_ = stmt;
#line 439 "/run/build/planner/src/Services/Database.vala"
		_tmp8_->id = sqlite3_column_int (_tmp9_, 0);
#line 440 "/run/build/planner/src/Services/Database.vala"
		_tmp10_ = project;
#line 440 "/run/build/planner/src/Services/Database.vala"
		_tmp11_ = stmt;
#line 440 "/run/build/planner/src/Services/Database.vala"
		_tmp12_ = sqlite3_column_text (_tmp11_, 1);
#line 440 "/run/build/planner/src/Services/Database.vala"
		_tmp13_ = g_strdup (_tmp12_);
#line 440 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp10_->name);
#line 440 "/run/build/planner/src/Services/Database.vala"
		_tmp10_->name = _tmp13_;
#line 441 "/run/build/planner/src/Services/Database.vala"
		_tmp14_ = project;
#line 441 "/run/build/planner/src/Services/Database.vala"
		_tmp15_ = stmt;
#line 441 "/run/build/planner/src/Services/Database.vala"
		_tmp16_ = sqlite3_column_text (_tmp15_, 2);
#line 441 "/run/build/planner/src/Services/Database.vala"
		_tmp17_ = g_strdup (_tmp16_);
#line 441 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp14_->note);
#line 441 "/run/build/planner/src/Services/Database.vala"
		_tmp14_->note = _tmp17_;
#line 442 "/run/build/planner/src/Services/Database.vala"
		_tmp18_ = project;
#line 442 "/run/build/planner/src/Services/Database.vala"
		_tmp19_ = stmt;
#line 442 "/run/build/planner/src/Services/Database.vala"
		_tmp20_ = sqlite3_column_text (_tmp19_, 3);
#line 442 "/run/build/planner/src/Services/Database.vala"
		_tmp21_ = g_strdup (_tmp20_);
#line 442 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp18_->deadline);
#line 442 "/run/build/planner/src/Services/Database.vala"
		_tmp18_->deadline = _tmp21_;
#line 443 "/run/build/planner/src/Services/Database.vala"
		_tmp22_ = project;
#line 443 "/run/build/planner/src/Services/Database.vala"
		_tmp23_ = stmt;
#line 443 "/run/build/planner/src/Services/Database.vala"
		_tmp22_->item_order = sqlite3_column_int (_tmp23_, 4);
#line 444 "/run/build/planner/src/Services/Database.vala"
		_tmp24_ = project;
#line 444 "/run/build/planner/src/Services/Database.vala"
		_tmp25_ = stmt;
#line 444 "/run/build/planner/src/Services/Database.vala"
		_tmp24_->is_deleted = sqlite3_column_int (_tmp25_, 5);
#line 445 "/run/build/planner/src/Services/Database.vala"
		_tmp26_ = project;
#line 445 "/run/build/planner/src/Services/Database.vala"
		_tmp27_ = stmt;
#line 445 "/run/build/planner/src/Services/Database.vala"
		_tmp28_ = sqlite3_column_text (_tmp27_, 6);
#line 445 "/run/build/planner/src/Services/Database.vala"
		_tmp29_ = g_strdup (_tmp28_);
#line 445 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp26_->color);
#line 445 "/run/build/planner/src/Services/Database.vala"
		_tmp26_->color = _tmp29_;
#line 447 "/run/build/planner/src/Services/Database.vala"
		_tmp30_ = all;
#line 447 "/run/build/planner/src/Services/Database.vala"
		_tmp31_ = project;
#line 447 "/run/build/planner/src/Services/Database.vala"
		gee_abstract_collection_add ((GeeAbstractCollection*) _tmp30_, _tmp31_);
#line 436 "/run/build/planner/src/Services/Database.vala"
		_objects_project_unref0 (project);
#line 2191 "Database.c"
	}
#line 450 "/run/build/planner/src/Services/Database.vala"
	result = all;
#line 450 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 450 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 2199 "Database.c"
}


ObjectsProject*
services_database_get_project (ServicesDatabase* self,
                               gint id)
{
	ObjectsProject* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
	ObjectsProject* project = NULL;
	ObjectsProject* _tmp5_;
	const gchar* _tmp6_;
	gchar* _tmp7_;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
	const gchar* _tmp12_;
	gchar* _tmp13_;
#line 453 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 456 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 456 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM PROJECTS WHERE id = ?", -1, &_tmp1_, NULL);
#line 456 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 456 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 456 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 458 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 458 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 460 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (stmt, 1, id);
#line 461 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = res;
#line 461 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp4_ == SQLITE_OK, "res == Sqlite.OK");
#line 463 "/run/build/planner/src/Services/Database.vala"
	sqlite3_step (stmt);
#line 465 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = objects_project_new (0, 0, 0, "", "", "", "");
#line 465 "/run/build/planner/src/Services/Database.vala"
	project = _tmp5_;
#line 467 "/run/build/planner/src/Services/Database.vala"
	project->id = sqlite3_column_int (stmt, 0);
#line 468 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = sqlite3_column_text (stmt, 1);
#line 468 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = g_strdup (_tmp6_);
#line 468 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (project->name);
#line 468 "/run/build/planner/src/Services/Database.vala"
	project->name = _tmp7_;
#line 469 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = sqlite3_column_text (stmt, 2);
#line 469 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = g_strdup (_tmp8_);
#line 469 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (project->note);
#line 469 "/run/build/planner/src/Services/Database.vala"
	project->note = _tmp9_;
#line 470 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = sqlite3_column_text (stmt, 3);
#line 470 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = g_strdup (_tmp10_);
#line 470 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (project->deadline);
#line 470 "/run/build/planner/src/Services/Database.vala"
	project->deadline = _tmp11_;
#line 471 "/run/build/planner/src/Services/Database.vala"
	project->item_order = sqlite3_column_int (stmt, 4);
#line 472 "/run/build/planner/src/Services/Database.vala"
	project->is_deleted = sqlite3_column_int (stmt, 5);
#line 473 "/run/build/planner/src/Services/Database.vala"
	_tmp12_ = sqlite3_column_text (stmt, 6);
#line 473 "/run/build/planner/src/Services/Database.vala"
	_tmp13_ = g_strdup (_tmp12_);
#line 473 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (project->color);
#line 473 "/run/build/planner/src/Services/Database.vala"
	project->color = _tmp13_;
#line 475 "/run/build/planner/src/Services/Database.vala"
	result = project;
#line 475 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 475 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 2297 "Database.c"
}


ObjectsProject*
services_database_get_last_project (ServicesDatabase* self)
{
	ObjectsProject* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	ObjectsProject* project = NULL;
	ObjectsProject* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	const gchar* _tmp6_;
	gchar* _tmp7_;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
#line 478 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 481 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 481 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM PROJECTS ORDER BY id DESC LIMIT 1", -1, &_tmp1_, NULL);
#line 481 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 481 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 481 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 483 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (res == SQLITE_OK, "res == Sqlite.OK");
#line 485 "/run/build/planner/src/Services/Database.vala"
	sqlite3_step (stmt);
#line 487 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = objects_project_new (0, 0, 0, "", "", "", "");
#line 487 "/run/build/planner/src/Services/Database.vala"
	project = _tmp3_;
#line 489 "/run/build/planner/src/Services/Database.vala"
	project->id = sqlite3_column_int (stmt, 0);
#line 490 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = sqlite3_column_text (stmt, 1);
#line 490 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = g_strdup (_tmp4_);
#line 490 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (project->name);
#line 490 "/run/build/planner/src/Services/Database.vala"
	project->name = _tmp5_;
#line 491 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = sqlite3_column_text (stmt, 2);
#line 491 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = g_strdup (_tmp6_);
#line 491 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (project->note);
#line 491 "/run/build/planner/src/Services/Database.vala"
	project->note = _tmp7_;
#line 492 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = sqlite3_column_text (stmt, 3);
#line 492 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = g_strdup (_tmp8_);
#line 492 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (project->deadline);
#line 492 "/run/build/planner/src/Services/Database.vala"
	project->deadline = _tmp9_;
#line 493 "/run/build/planner/src/Services/Database.vala"
	project->item_order = sqlite3_column_int (stmt, 4);
#line 494 "/run/build/planner/src/Services/Database.vala"
	project->is_deleted = sqlite3_column_int (stmt, 5);
#line 495 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = sqlite3_column_text (stmt, 6);
#line 495 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = g_strdup (_tmp10_);
#line 495 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (project->color);
#line 495 "/run/build/planner/src/Services/Database.vala"
	project->color = _tmp11_;
#line 497 "/run/build/planner/src/Services/Database.vala"
	result = project;
#line 497 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 497 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 2384 "Database.c"
}


gint
services_database_get_project_no_completed_tasks_number (ServicesDatabase* self,
                                                         gint id)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
	gint _tmp5_;
	gint count = 0;
#line 500 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 503 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 503 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE project_id = ? AND checked = 0", -1, &_tmp1_, NULL);
#line 503 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 503 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 503 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 505 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 505 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 507 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 507 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp4_, 1, id);
#line 508 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = res;
#line 508 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp5_ == SQLITE_OK, "res == Sqlite.OK");
#line 510 "/run/build/planner/src/Services/Database.vala"
	count = 0;
#line 511 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 2430 "Database.c"
		sqlite3_stmt* _tmp6_;
		gint _tmp7_;
		gint _tmp8_;
#line 511 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = stmt;
#line 511 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp6_);
#line 511 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = res;
#line 511 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp7_ == SQLITE_ROW)) {
#line 511 "/run/build/planner/src/Services/Database.vala"
			break;
#line 2444 "Database.c"
		}
#line 512 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = count;
#line 512 "/run/build/planner/src/Services/Database.vala"
		count = _tmp8_ + 1;
#line 2450 "Database.c"
	}
#line 515 "/run/build/planner/src/Services/Database.vala"
	result = count;
#line 515 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 515 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 2458 "Database.c"
}


gint
services_database_get_project_completed_tasks_number (ServicesDatabase* self,
                                                      gint id)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
	gint _tmp5_;
	gint count = 0;
#line 518 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 521 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 521 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE project_id = ? AND checked = 1", -1, &_tmp1_, NULL);
#line 521 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 521 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 521 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 523 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 523 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 525 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 525 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp4_, 1, id);
#line 526 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = res;
#line 526 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp5_ == SQLITE_OK, "res == Sqlite.OK");
#line 528 "/run/build/planner/src/Services/Database.vala"
	count = 0;
#line 529 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 2504 "Database.c"
		sqlite3_stmt* _tmp6_;
		gint _tmp7_;
		gint _tmp8_;
#line 529 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = stmt;
#line 529 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp6_);
#line 529 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = res;
#line 529 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp7_ == SQLITE_ROW)) {
#line 529 "/run/build/planner/src/Services/Database.vala"
			break;
#line 2518 "Database.c"
		}
#line 530 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = count;
#line 530 "/run/build/planner/src/Services/Database.vala"
		count = _tmp8_ + 1;
#line 2524 "Database.c"
	}
#line 533 "/run/build/planner/src/Services/Database.vala"
	result = count;
#line 533 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 533 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 2532 "Database.c"
}


gint
services_database_get_project_tasks_number (ServicesDatabase* self,
                                            gint id)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
	gint _tmp5_;
	gint count = 0;
#line 536 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 539 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 539 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE project_id = ?", -1, &_tmp1_, NULL);
#line 539 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 539 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 539 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 541 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 541 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 543 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 543 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp4_, 1, id);
#line 544 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = res;
#line 544 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp5_ == SQLITE_OK, "res == Sqlite.OK");
#line 546 "/run/build/planner/src/Services/Database.vala"
	count = 0;
#line 547 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 2578 "Database.c"
		sqlite3_stmt* _tmp6_;
		gint _tmp7_;
		gint _tmp8_;
#line 547 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = stmt;
#line 547 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp6_);
#line 547 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = res;
#line 547 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp7_ == SQLITE_ROW)) {
#line 547 "/run/build/planner/src/Services/Database.vala"
			break;
#line 2592 "Database.c"
		}
#line 548 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = count;
#line 548 "/run/build/planner/src/Services/Database.vala"
		count = _tmp8_ + 1;
#line 2598 "Database.c"
	}
#line 551 "/run/build/planner/src/Services/Database.vala"
	result = count;
#line 551 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 551 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 2606 "Database.c"
}


gint
services_database_add_task (ServicesDatabase* self,
                            ObjectsTask* task)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
	gint _tmp5_;
	gint _tmp6_;
	sqlite3_stmt* _tmp7_;
	gint _tmp8_;
	gint _tmp9_;
	sqlite3_stmt* _tmp10_;
	gint _tmp11_;
	gint _tmp12_;
	sqlite3_stmt* _tmp13_;
	gint _tmp14_;
	gint _tmp15_;
	sqlite3_stmt* _tmp16_;
	gint _tmp17_;
	gint _tmp18_;
	sqlite3_stmt* _tmp19_;
	gint _tmp20_;
	gint _tmp21_;
	sqlite3_stmt* _tmp22_;
	gint _tmp23_;
	gint _tmp24_;
	sqlite3_stmt* _tmp25_;
	gint _tmp26_;
	gint _tmp27_;
	sqlite3_stmt* _tmp28_;
	const gchar* _tmp29_;
	gchar* _tmp30_;
	GDestroyNotify _tmp31_;
	gint _tmp32_;
	sqlite3_stmt* _tmp33_;
	const gchar* _tmp34_;
	gchar* _tmp35_;
	GDestroyNotify _tmp36_;
	gint _tmp37_;
	sqlite3_stmt* _tmp38_;
	const gchar* _tmp39_;
	gchar* _tmp40_;
	GDestroyNotify _tmp41_;
	gint _tmp42_;
	sqlite3_stmt* _tmp43_;
	const gchar* _tmp44_;
	gchar* _tmp45_;
	GDestroyNotify _tmp46_;
	gint _tmp47_;
	sqlite3_stmt* _tmp48_;
	const gchar* _tmp49_;
	gchar* _tmp50_;
	GDestroyNotify _tmp51_;
	gint _tmp52_;
	sqlite3_stmt* _tmp53_;
	const gchar* _tmp54_;
	gchar* _tmp55_;
	GDestroyNotify _tmp56_;
	gint _tmp57_;
	sqlite3_stmt* _tmp58_;
	sqlite3_stmt* _tmp59_;
	sqlite3* _tmp60_;
	sqlite3_stmt* _tmp61_ = NULL;
	gint _tmp62_;
	gint _tmp63_;
	sqlite3_stmt* _tmp64_;
	const gchar* _tmp65_;
	gchar* _tmp66_;
	GDestroyNotify _tmp67_;
	gint _tmp68_;
	sqlite3_stmt* _tmp69_;
#line 554 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 554 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (task != NULL, 0);
#line 557 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 557 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "INSERT INTO TASKS (checked," "project_id, list_id, task_order, is_inbox, has_reminder, sidebar_width" \
", was_notified, content, note, when_date_utc, reminder_time, labels, c" \
"hecklist)" "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", -1, &_tmp1_, NULL);
#line 557 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 557 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 557 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 560 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 560 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 562 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 562 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = task->checked;
#line 562 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp4_, 1, _tmp5_);
#line 563 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = res;
#line 563 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp6_ == SQLITE_OK, "res == Sqlite.OK");
#line 564 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = stmt;
#line 564 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = task->project_id;
#line 564 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp7_, 2, _tmp8_);
#line 565 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = res;
#line 565 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp9_ == SQLITE_OK, "res == Sqlite.OK");
#line 567 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = stmt;
#line 567 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = task->list_id;
#line 567 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp10_, 3, _tmp11_);
#line 568 "/run/build/planner/src/Services/Database.vala"
	_tmp12_ = res;
#line 568 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp12_ == SQLITE_OK, "res == Sqlite.OK");
#line 570 "/run/build/planner/src/Services/Database.vala"
	_tmp13_ = stmt;
#line 570 "/run/build/planner/src/Services/Database.vala"
	_tmp14_ = task->task_order;
#line 570 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp13_, 4, _tmp14_);
#line 571 "/run/build/planner/src/Services/Database.vala"
	_tmp15_ = res;
#line 571 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp15_ == SQLITE_OK, "res == Sqlite.OK");
#line 573 "/run/build/planner/src/Services/Database.vala"
	_tmp16_ = stmt;
#line 573 "/run/build/planner/src/Services/Database.vala"
	_tmp17_ = task->is_inbox;
#line 573 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp16_, 5, _tmp17_);
#line 574 "/run/build/planner/src/Services/Database.vala"
	_tmp18_ = res;
#line 574 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp18_ == SQLITE_OK, "res == Sqlite.OK");
#line 576 "/run/build/planner/src/Services/Database.vala"
	_tmp19_ = stmt;
#line 576 "/run/build/planner/src/Services/Database.vala"
	_tmp20_ = task->has_reminder;
#line 576 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp19_, 6, _tmp20_);
#line 577 "/run/build/planner/src/Services/Database.vala"
	_tmp21_ = res;
#line 577 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp21_ == SQLITE_OK, "res == Sqlite.OK");
#line 579 "/run/build/planner/src/Services/Database.vala"
	_tmp22_ = stmt;
#line 579 "/run/build/planner/src/Services/Database.vala"
	_tmp23_ = task->sidebar_width;
#line 579 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp22_, 7, _tmp23_);
#line 580 "/run/build/planner/src/Services/Database.vala"
	_tmp24_ = res;
#line 580 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp24_ == SQLITE_OK, "res == Sqlite.OK");
#line 582 "/run/build/planner/src/Services/Database.vala"
	_tmp25_ = stmt;
#line 582 "/run/build/planner/src/Services/Database.vala"
	_tmp26_ = task->was_notified;
#line 582 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp25_, 8, _tmp26_);
#line 583 "/run/build/planner/src/Services/Database.vala"
	_tmp27_ = res;
#line 583 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp27_ == SQLITE_OK, "res == Sqlite.OK");
#line 585 "/run/build/planner/src/Services/Database.vala"
	_tmp28_ = stmt;
#line 585 "/run/build/planner/src/Services/Database.vala"
	_tmp29_ = task->content;
#line 585 "/run/build/planner/src/Services/Database.vala"
	_tmp30_ = g_strdup (_tmp29_);
#line 585 "/run/build/planner/src/Services/Database.vala"
	_tmp31_ = g_free;
#line 585 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp28_, 9, _tmp30_, -1, _tmp31_);
#line 586 "/run/build/planner/src/Services/Database.vala"
	_tmp32_ = res;
#line 586 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp32_ == SQLITE_OK, "res == Sqlite.OK");
#line 588 "/run/build/planner/src/Services/Database.vala"
	_tmp33_ = stmt;
#line 588 "/run/build/planner/src/Services/Database.vala"
	_tmp34_ = task->note;
#line 588 "/run/build/planner/src/Services/Database.vala"
	_tmp35_ = g_strdup (_tmp34_);
#line 588 "/run/build/planner/src/Services/Database.vala"
	_tmp36_ = g_free;
#line 588 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp33_, 10, _tmp35_, -1, _tmp36_);
#line 589 "/run/build/planner/src/Services/Database.vala"
	_tmp37_ = res;
#line 589 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp37_ == SQLITE_OK, "res == Sqlite.OK");
#line 591 "/run/build/planner/src/Services/Database.vala"
	_tmp38_ = stmt;
#line 591 "/run/build/planner/src/Services/Database.vala"
	_tmp39_ = task->when_date_utc;
#line 591 "/run/build/planner/src/Services/Database.vala"
	_tmp40_ = g_strdup (_tmp39_);
#line 591 "/run/build/planner/src/Services/Database.vala"
	_tmp41_ = g_free;
#line 591 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp38_, 11, _tmp40_, -1, _tmp41_);
#line 592 "/run/build/planner/src/Services/Database.vala"
	_tmp42_ = res;
#line 592 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp42_ == SQLITE_OK, "res == Sqlite.OK");
#line 594 "/run/build/planner/src/Services/Database.vala"
	_tmp43_ = stmt;
#line 594 "/run/build/planner/src/Services/Database.vala"
	_tmp44_ = task->reminder_time;
#line 594 "/run/build/planner/src/Services/Database.vala"
	_tmp45_ = g_strdup (_tmp44_);
#line 594 "/run/build/planner/src/Services/Database.vala"
	_tmp46_ = g_free;
#line 594 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp43_, 12, _tmp45_, -1, _tmp46_);
#line 595 "/run/build/planner/src/Services/Database.vala"
	_tmp47_ = res;
#line 595 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp47_ == SQLITE_OK, "res == Sqlite.OK");
#line 597 "/run/build/planner/src/Services/Database.vala"
	_tmp48_ = stmt;
#line 597 "/run/build/planner/src/Services/Database.vala"
	_tmp49_ = task->labels;
#line 597 "/run/build/planner/src/Services/Database.vala"
	_tmp50_ = g_strdup (_tmp49_);
#line 597 "/run/build/planner/src/Services/Database.vala"
	_tmp51_ = g_free;
#line 597 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp48_, 13, _tmp50_, -1, _tmp51_);
#line 598 "/run/build/planner/src/Services/Database.vala"
	_tmp52_ = res;
#line 598 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp52_ == SQLITE_OK, "res == Sqlite.OK");
#line 600 "/run/build/planner/src/Services/Database.vala"
	_tmp53_ = stmt;
#line 600 "/run/build/planner/src/Services/Database.vala"
	_tmp54_ = task->checklist;
#line 600 "/run/build/planner/src/Services/Database.vala"
	_tmp55_ = g_strdup (_tmp54_);
#line 600 "/run/build/planner/src/Services/Database.vala"
	_tmp56_ = g_free;
#line 600 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp53_, 14, _tmp55_, -1, _tmp56_);
#line 601 "/run/build/planner/src/Services/Database.vala"
	_tmp57_ = res;
#line 601 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp57_ == SQLITE_OK, "res == Sqlite.OK");
#line 603 "/run/build/planner/src/Services/Database.vala"
	_tmp58_ = stmt;
#line 603 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_step (_tmp58_);
#line 605 "/run/build/planner/src/Services/Database.vala"
	_tmp59_ = stmt;
#line 605 "/run/build/planner/src/Services/Database.vala"
	sqlite3_reset (_tmp59_);
#line 607 "/run/build/planner/src/Services/Database.vala"
	_tmp60_ = self->priv->db;
#line 607 "/run/build/planner/src/Services/Database.vala"
	_tmp62_ = sqlite3_prepare_v2 (_tmp60_, "SELECT id FROM TASKS WHERE content = ?", -1, &_tmp61_, NULL);
#line 607 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 607 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp61_;
#line 607 "/run/build/planner/src/Services/Database.vala"
	res = _tmp62_;
#line 608 "/run/build/planner/src/Services/Database.vala"
	_tmp63_ = res;
#line 608 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp63_ == SQLITE_OK, "res == Sqlite.OK");
#line 610 "/run/build/planner/src/Services/Database.vala"
	_tmp64_ = stmt;
#line 610 "/run/build/planner/src/Services/Database.vala"
	_tmp65_ = task->content;
#line 610 "/run/build/planner/src/Services/Database.vala"
	_tmp66_ = g_strdup (_tmp65_);
#line 610 "/run/build/planner/src/Services/Database.vala"
	_tmp67_ = g_free;
#line 610 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp64_, 1, _tmp66_, -1, _tmp67_);
#line 611 "/run/build/planner/src/Services/Database.vala"
	_tmp68_ = res;
#line 611 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp68_ == SQLITE_OK, "res == Sqlite.OK");
#line 613 "/run/build/planner/src/Services/Database.vala"
	_tmp69_ = stmt;
#line 613 "/run/build/planner/src/Services/Database.vala"
	if (sqlite3_step (_tmp69_) == SQLITE_ROW) {
#line 2909 "Database.c"
		sqlite3_stmt* _tmp70_;
#line 614 "/run/build/planner/src/Services/Database.vala"
		_tmp70_ = stmt;
#line 614 "/run/build/planner/src/Services/Database.vala"
		task->id = sqlite3_column_int (_tmp70_, 0);
#line 617 "/run/build/planner/src/Services/Database.vala"
		g_signal_emit (self, services_database_signals[SERVICES_DATABASE_ADD_TASK_SIGNAL_SIGNAL], 0, task);
#line 618 "/run/build/planner/src/Services/Database.vala"
		g_signal_emit (self, services_database_signals[SERVICES_DATABASE_UPDATE_INDICATORS_SIGNAL], 0);
#line 620 "/run/build/planner/src/Services/Database.vala"
		result = SQLITE_DONE;
#line 620 "/run/build/planner/src/Services/Database.vala"
		_sqlite3_finalize0 (stmt);
#line 620 "/run/build/planner/src/Services/Database.vala"
		return result;
#line 2925 "Database.c"
	} else {
		sqlite3* _tmp71_;
		sqlite3* _tmp72_;
		const gchar* _tmp73_;
#line 622 "/run/build/planner/src/Services/Database.vala"
		_tmp71_ = self->priv->db;
#line 622 "/run/build/planner/src/Services/Database.vala"
		_tmp72_ = self->priv->db;
#line 622 "/run/build/planner/src/Services/Database.vala"
		_tmp73_ = sqlite3_errmsg (_tmp72_);
#line 622 "/run/build/planner/src/Services/Database.vala"
		g_warning ("Database.vala:622: Error: %d: %s", sqlite3_errcode (_tmp71_), _tmp73_);
#line 623 "/run/build/planner/src/Services/Database.vala"
		result = SQLITE_ERROR;
#line 623 "/run/build/planner/src/Services/Database.vala"
		_sqlite3_finalize0 (stmt);
#line 623 "/run/build/planner/src/Services/Database.vala"
		return result;
#line 2944 "Database.c"
	}
#line 554 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 2948 "Database.c"
}


ObjectsTask*
services_database_get_last_task (ServicesDatabase* self)
{
	ObjectsTask* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	ObjectsTask* task = NULL;
	ObjectsTask* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	const gchar* _tmp6_;
	gchar* _tmp7_;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
	const gchar* _tmp12_;
	gchar* _tmp13_;
	const gchar* _tmp14_;
	gchar* _tmp15_;
#line 627 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 630 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 630 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS ORDER BY id DESC LIMIT 1", -1, &_tmp1_, NULL);
#line 630 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 630 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 630 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 632 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (res == SQLITE_OK, "res == Sqlite.OK");
#line 634 "/run/build/planner/src/Services/Database.vala"
	sqlite3_step (stmt);
#line 636 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = objects_task_new (0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "", "", "", "");
#line 636 "/run/build/planner/src/Services/Database.vala"
	task = _tmp3_;
#line 638 "/run/build/planner/src/Services/Database.vala"
	task->id = sqlite3_column_int (stmt, 0);
#line 639 "/run/build/planner/src/Services/Database.vala"
	task->checked = sqlite3_column_int (stmt, 1);
#line 640 "/run/build/planner/src/Services/Database.vala"
	task->project_id = sqlite3_column_int (stmt, 2);
#line 641 "/run/build/planner/src/Services/Database.vala"
	task->list_id = sqlite3_column_int (stmt, 3);
#line 642 "/run/build/planner/src/Services/Database.vala"
	task->task_order = sqlite3_column_int (stmt, 4);
#line 643 "/run/build/planner/src/Services/Database.vala"
	task->is_inbox = sqlite3_column_int (stmt, 5);
#line 644 "/run/build/planner/src/Services/Database.vala"
	task->has_reminder = sqlite3_column_int (stmt, 6);
#line 645 "/run/build/planner/src/Services/Database.vala"
	task->sidebar_width = sqlite3_column_int (stmt, 7);
#line 646 "/run/build/planner/src/Services/Database.vala"
	task->was_notified = sqlite3_column_int (stmt, 8);
#line 647 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = sqlite3_column_text (stmt, 9);
#line 647 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = g_strdup (_tmp4_);
#line 647 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (task->content);
#line 647 "/run/build/planner/src/Services/Database.vala"
	task->content = _tmp5_;
#line 648 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = sqlite3_column_text (stmt, 10);
#line 648 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = g_strdup (_tmp6_);
#line 648 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (task->note);
#line 648 "/run/build/planner/src/Services/Database.vala"
	task->note = _tmp7_;
#line 649 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = sqlite3_column_text (stmt, 11);
#line 649 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = g_strdup (_tmp8_);
#line 649 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (task->when_date_utc);
#line 649 "/run/build/planner/src/Services/Database.vala"
	task->when_date_utc = _tmp9_;
#line 650 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = sqlite3_column_text (stmt, 12);
#line 650 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = g_strdup (_tmp10_);
#line 650 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (task->reminder_time);
#line 650 "/run/build/planner/src/Services/Database.vala"
	task->reminder_time = _tmp11_;
#line 651 "/run/build/planner/src/Services/Database.vala"
	_tmp12_ = sqlite3_column_text (stmt, 13);
#line 651 "/run/build/planner/src/Services/Database.vala"
	_tmp13_ = g_strdup (_tmp12_);
#line 651 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (task->checklist);
#line 651 "/run/build/planner/src/Services/Database.vala"
	task->checklist = _tmp13_;
#line 652 "/run/build/planner/src/Services/Database.vala"
	_tmp14_ = sqlite3_column_text (stmt, 14);
#line 652 "/run/build/planner/src/Services/Database.vala"
	_tmp15_ = g_strdup (_tmp14_);
#line 652 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (task->labels);
#line 652 "/run/build/planner/src/Services/Database.vala"
	task->labels = _tmp15_;
#line 654 "/run/build/planner/src/Services/Database.vala"
	result = task;
#line 654 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 654 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 3067 "Database.c"
}


ObjectsTask*
services_database_get_task (ServicesDatabase* self,
                            gint id)
{
	ObjectsTask* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
	ObjectsTask* task = NULL;
	ObjectsTask* _tmp5_;
	const gchar* _tmp6_;
	gchar* _tmp7_;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
	const gchar* _tmp12_;
	gchar* _tmp13_;
	const gchar* _tmp14_;
	gchar* _tmp15_;
	const gchar* _tmp16_;
	gchar* _tmp17_;
#line 657 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 660 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 660 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE id = ?", -1, &_tmp1_, NULL);
#line 660 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 660 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 660 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 662 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 662 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 664 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (stmt, 1, id);
#line 665 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = res;
#line 665 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp4_ == SQLITE_OK, "res == Sqlite.OK");
#line 667 "/run/build/planner/src/Services/Database.vala"
	sqlite3_step (stmt);
#line 669 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = objects_task_new (0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "", "", "", "");
#line 669 "/run/build/planner/src/Services/Database.vala"
	task = _tmp5_;
#line 671 "/run/build/planner/src/Services/Database.vala"
	task->id = sqlite3_column_int (stmt, 0);
#line 672 "/run/build/planner/src/Services/Database.vala"
	task->checked = sqlite3_column_int (stmt, 1);
#line 673 "/run/build/planner/src/Services/Database.vala"
	task->project_id = sqlite3_column_int (stmt, 2);
#line 674 "/run/build/planner/src/Services/Database.vala"
	task->list_id = sqlite3_column_int (stmt, 3);
#line 675 "/run/build/planner/src/Services/Database.vala"
	task->task_order = sqlite3_column_int (stmt, 4);
#line 676 "/run/build/planner/src/Services/Database.vala"
	task->is_inbox = sqlite3_column_int (stmt, 5);
#line 677 "/run/build/planner/src/Services/Database.vala"
	task->has_reminder = sqlite3_column_int (stmt, 6);
#line 678 "/run/build/planner/src/Services/Database.vala"
	task->sidebar_width = sqlite3_column_int (stmt, 7);
#line 679 "/run/build/planner/src/Services/Database.vala"
	task->was_notified = sqlite3_column_int (stmt, 8);
#line 680 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = sqlite3_column_text (stmt, 9);
#line 680 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = g_strdup (_tmp6_);
#line 680 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (task->content);
#line 680 "/run/build/planner/src/Services/Database.vala"
	task->content = _tmp7_;
#line 681 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = sqlite3_column_text (stmt, 10);
#line 681 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = g_strdup (_tmp8_);
#line 681 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (task->note);
#line 681 "/run/build/planner/src/Services/Database.vala"
	task->note = _tmp9_;
#line 682 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = sqlite3_column_text (stmt, 11);
#line 682 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = g_strdup (_tmp10_);
#line 682 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (task->when_date_utc);
#line 682 "/run/build/planner/src/Services/Database.vala"
	task->when_date_utc = _tmp11_;
#line 683 "/run/build/planner/src/Services/Database.vala"
	_tmp12_ = sqlite3_column_text (stmt, 12);
#line 683 "/run/build/planner/src/Services/Database.vala"
	_tmp13_ = g_strdup (_tmp12_);
#line 683 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (task->reminder_time);
#line 683 "/run/build/planner/src/Services/Database.vala"
	task->reminder_time = _tmp13_;
#line 684 "/run/build/planner/src/Services/Database.vala"
	_tmp14_ = sqlite3_column_text (stmt, 13);
#line 684 "/run/build/planner/src/Services/Database.vala"
	_tmp15_ = g_strdup (_tmp14_);
#line 684 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (task->checklist);
#line 684 "/run/build/planner/src/Services/Database.vala"
	task->checklist = _tmp15_;
#line 685 "/run/build/planner/src/Services/Database.vala"
	_tmp16_ = sqlite3_column_text (stmt, 14);
#line 685 "/run/build/planner/src/Services/Database.vala"
	_tmp17_ = g_strdup (_tmp16_);
#line 685 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (task->labels);
#line 685 "/run/build/planner/src/Services/Database.vala"
	task->labels = _tmp17_;
#line 687 "/run/build/planner/src/Services/Database.vala"
	result = task;
#line 687 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 687 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 3197 "Database.c"
}


gint
services_database_update_task (ServicesDatabase* self,
                               ObjectsTask* task)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
	gint _tmp5_;
	gint _tmp6_;
	sqlite3_stmt* _tmp7_;
	gint _tmp8_;
	gint _tmp9_;
	sqlite3_stmt* _tmp10_;
	gint _tmp11_;
	gint _tmp12_;
	sqlite3_stmt* _tmp13_;
	gint _tmp14_;
	gint _tmp15_;
	sqlite3_stmt* _tmp16_;
	gint _tmp17_;
	gint _tmp18_;
	sqlite3_stmt* _tmp19_;
	gint _tmp20_;
	gint _tmp21_;
	sqlite3_stmt* _tmp22_;
	gint _tmp23_;
	gint _tmp24_;
	sqlite3_stmt* _tmp25_;
	gint _tmp26_;
	gint _tmp27_;
	sqlite3_stmt* _tmp28_;
	const gchar* _tmp29_;
	gchar* _tmp30_;
	GDestroyNotify _tmp31_;
	gint _tmp32_;
	sqlite3_stmt* _tmp33_;
	const gchar* _tmp34_;
	gchar* _tmp35_;
	GDestroyNotify _tmp36_;
	gint _tmp37_;
	sqlite3_stmt* _tmp38_;
	const gchar* _tmp39_;
	gchar* _tmp40_;
	GDestroyNotify _tmp41_;
	gint _tmp42_;
	sqlite3_stmt* _tmp43_;
	const gchar* _tmp44_;
	gchar* _tmp45_;
	GDestroyNotify _tmp46_;
	gint _tmp47_;
	sqlite3_stmt* _tmp48_;
	const gchar* _tmp49_;
	gchar* _tmp50_;
	GDestroyNotify _tmp51_;
	gint _tmp52_;
	sqlite3_stmt* _tmp53_;
	const gchar* _tmp54_;
	gchar* _tmp55_;
	GDestroyNotify _tmp56_;
	gint _tmp57_;
	sqlite3_stmt* _tmp58_;
	gint _tmp59_;
	gint _tmp60_;
	sqlite3_stmt* _tmp61_;
	gint _tmp62_;
#line 690 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 690 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (task != NULL, 0);
#line 693 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 693 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "UPDATE TASKS SET checked = ?, " "project_id = ?, list_id = ?, task_order = ?, is_inbox = ?, has_reminde" \
"r = ?, sidebar_width = ?, was_notified = ?, content = ?, note = ?, " "when_date_utc = ?, reminder_time = ?, checklist = ?, labels = ? WHERE " \
"id = ?", -1, &_tmp1_, NULL);
#line 693 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 693 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 693 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 696 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 696 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 698 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 698 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = task->checked;
#line 698 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp4_, 1, _tmp5_);
#line 699 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = res;
#line 699 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp6_ == SQLITE_OK, "res == Sqlite.OK");
#line 701 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = stmt;
#line 701 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = task->project_id;
#line 701 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp7_, 2, _tmp8_);
#line 702 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = res;
#line 702 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp9_ == SQLITE_OK, "res == Sqlite.OK");
#line 704 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = stmt;
#line 704 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = task->list_id;
#line 704 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp10_, 3, _tmp11_);
#line 705 "/run/build/planner/src/Services/Database.vala"
	_tmp12_ = res;
#line 705 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp12_ == SQLITE_OK, "res == Sqlite.OK");
#line 707 "/run/build/planner/src/Services/Database.vala"
	_tmp13_ = stmt;
#line 707 "/run/build/planner/src/Services/Database.vala"
	_tmp14_ = task->task_order;
#line 707 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp13_, 4, _tmp14_);
#line 708 "/run/build/planner/src/Services/Database.vala"
	_tmp15_ = res;
#line 708 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp15_ == SQLITE_OK, "res == Sqlite.OK");
#line 710 "/run/build/planner/src/Services/Database.vala"
	_tmp16_ = stmt;
#line 710 "/run/build/planner/src/Services/Database.vala"
	_tmp17_ = task->is_inbox;
#line 710 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp16_, 5, _tmp17_);
#line 711 "/run/build/planner/src/Services/Database.vala"
	_tmp18_ = res;
#line 711 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp18_ == SQLITE_OK, "res == Sqlite.OK");
#line 713 "/run/build/planner/src/Services/Database.vala"
	_tmp19_ = stmt;
#line 713 "/run/build/planner/src/Services/Database.vala"
	_tmp20_ = task->has_reminder;
#line 713 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp19_, 6, _tmp20_);
#line 714 "/run/build/planner/src/Services/Database.vala"
	_tmp21_ = res;
#line 714 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp21_ == SQLITE_OK, "res == Sqlite.OK");
#line 716 "/run/build/planner/src/Services/Database.vala"
	_tmp22_ = stmt;
#line 716 "/run/build/planner/src/Services/Database.vala"
	_tmp23_ = task->sidebar_width;
#line 716 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp22_, 7, _tmp23_);
#line 717 "/run/build/planner/src/Services/Database.vala"
	_tmp24_ = res;
#line 717 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp24_ == SQLITE_OK, "res == Sqlite.OK");
#line 719 "/run/build/planner/src/Services/Database.vala"
	_tmp25_ = stmt;
#line 719 "/run/build/planner/src/Services/Database.vala"
	_tmp26_ = task->was_notified;
#line 719 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp25_, 8, _tmp26_);
#line 720 "/run/build/planner/src/Services/Database.vala"
	_tmp27_ = res;
#line 720 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp27_ == SQLITE_OK, "res == Sqlite.OK");
#line 722 "/run/build/planner/src/Services/Database.vala"
	_tmp28_ = stmt;
#line 722 "/run/build/planner/src/Services/Database.vala"
	_tmp29_ = task->content;
#line 722 "/run/build/planner/src/Services/Database.vala"
	_tmp30_ = g_strdup (_tmp29_);
#line 722 "/run/build/planner/src/Services/Database.vala"
	_tmp31_ = g_free;
#line 722 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp28_, 9, _tmp30_, -1, _tmp31_);
#line 723 "/run/build/planner/src/Services/Database.vala"
	_tmp32_ = res;
#line 723 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp32_ == SQLITE_OK, "res == Sqlite.OK");
#line 725 "/run/build/planner/src/Services/Database.vala"
	_tmp33_ = stmt;
#line 725 "/run/build/planner/src/Services/Database.vala"
	_tmp34_ = task->note;
#line 725 "/run/build/planner/src/Services/Database.vala"
	_tmp35_ = g_strdup (_tmp34_);
#line 725 "/run/build/planner/src/Services/Database.vala"
	_tmp36_ = g_free;
#line 725 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp33_, 10, _tmp35_, -1, _tmp36_);
#line 726 "/run/build/planner/src/Services/Database.vala"
	_tmp37_ = res;
#line 726 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp37_ == SQLITE_OK, "res == Sqlite.OK");
#line 728 "/run/build/planner/src/Services/Database.vala"
	_tmp38_ = stmt;
#line 728 "/run/build/planner/src/Services/Database.vala"
	_tmp39_ = task->when_date_utc;
#line 728 "/run/build/planner/src/Services/Database.vala"
	_tmp40_ = g_strdup (_tmp39_);
#line 728 "/run/build/planner/src/Services/Database.vala"
	_tmp41_ = g_free;
#line 728 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp38_, 11, _tmp40_, -1, _tmp41_);
#line 729 "/run/build/planner/src/Services/Database.vala"
	_tmp42_ = res;
#line 729 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp42_ == SQLITE_OK, "res == Sqlite.OK");
#line 731 "/run/build/planner/src/Services/Database.vala"
	_tmp43_ = stmt;
#line 731 "/run/build/planner/src/Services/Database.vala"
	_tmp44_ = task->reminder_time;
#line 731 "/run/build/planner/src/Services/Database.vala"
	_tmp45_ = g_strdup (_tmp44_);
#line 731 "/run/build/planner/src/Services/Database.vala"
	_tmp46_ = g_free;
#line 731 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp43_, 12, _tmp45_, -1, _tmp46_);
#line 732 "/run/build/planner/src/Services/Database.vala"
	_tmp47_ = res;
#line 732 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp47_ == SQLITE_OK, "res == Sqlite.OK");
#line 734 "/run/build/planner/src/Services/Database.vala"
	_tmp48_ = stmt;
#line 734 "/run/build/planner/src/Services/Database.vala"
	_tmp49_ = task->checklist;
#line 734 "/run/build/planner/src/Services/Database.vala"
	_tmp50_ = g_strdup (_tmp49_);
#line 734 "/run/build/planner/src/Services/Database.vala"
	_tmp51_ = g_free;
#line 734 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp48_, 13, _tmp50_, -1, _tmp51_);
#line 735 "/run/build/planner/src/Services/Database.vala"
	_tmp52_ = res;
#line 735 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp52_ == SQLITE_OK, "res == Sqlite.OK");
#line 737 "/run/build/planner/src/Services/Database.vala"
	_tmp53_ = stmt;
#line 737 "/run/build/planner/src/Services/Database.vala"
	_tmp54_ = task->labels;
#line 737 "/run/build/planner/src/Services/Database.vala"
	_tmp55_ = g_strdup (_tmp54_);
#line 737 "/run/build/planner/src/Services/Database.vala"
	_tmp56_ = g_free;
#line 737 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (_tmp53_, 14, _tmp55_, -1, _tmp56_);
#line 738 "/run/build/planner/src/Services/Database.vala"
	_tmp57_ = res;
#line 738 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp57_ == SQLITE_OK, "res == Sqlite.OK");
#line 740 "/run/build/planner/src/Services/Database.vala"
	_tmp58_ = stmt;
#line 740 "/run/build/planner/src/Services/Database.vala"
	_tmp59_ = task->id;
#line 740 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp58_, 15, _tmp59_);
#line 741 "/run/build/planner/src/Services/Database.vala"
	_tmp60_ = res;
#line 741 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp60_ == SQLITE_OK, "res == Sqlite.OK");
#line 743 "/run/build/planner/src/Services/Database.vala"
	_tmp61_ = stmt;
#line 743 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_step (_tmp61_);
#line 745 "/run/build/planner/src/Services/Database.vala"
	_tmp62_ = res;
#line 745 "/run/build/planner/src/Services/Database.vala"
	if (_tmp62_ == SQLITE_DONE) {
#line 746 "/run/build/planner/src/Services/Database.vala"
		g_signal_emit (self, services_database_signals[SERVICES_DATABASE_UPDATE_INDICATORS_SIGNAL], 0);
#line 3473 "Database.c"
	}
#line 749 "/run/build/planner/src/Services/Database.vala"
	result = res;
#line 749 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 749 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 3481 "Database.c"
}


gint
services_database_remove_task (ServicesDatabase* self,
                               ObjectsTask* task)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
	gint _tmp5_;
	gint _tmp6_;
	sqlite3_stmt* _tmp7_;
	gint _tmp8_;
#line 752 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 752 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (task != NULL, 0);
#line 755 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 755 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "DELETE FROM TASKS WHERE id = ?", -1, &_tmp1_, NULL);
#line 755 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 755 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 755 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 756 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 756 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 758 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 758 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = task->id;
#line 758 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp4_, 1, _tmp5_);
#line 759 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = res;
#line 759 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp6_ == SQLITE_OK, "res == Sqlite.OK");
#line 761 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = stmt;
#line 761 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_step (_tmp7_);
#line 763 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = res;
#line 763 "/run/build/planner/src/Services/Database.vala"
	if (_tmp8_ == SQLITE_DONE) {
#line 764 "/run/build/planner/src/Services/Database.vala"
		g_signal_emit (self, services_database_signals[SERVICES_DATABASE_ON_SIGNAL_REMOVE_TASK_SIGNAL], 0, task);
#line 765 "/run/build/planner/src/Services/Database.vala"
		g_signal_emit (self, services_database_signals[SERVICES_DATABASE_UPDATE_INDICATORS_SIGNAL], 0);
#line 3541 "Database.c"
	}
#line 768 "/run/build/planner/src/Services/Database.vala"
	result = res;
#line 768 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 768 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 3549 "Database.c"
}


GeeArrayList*
services_database_get_all_search_tasks (ServicesDatabase* self)
{
	GeeArrayList* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	GeeArrayList* all = NULL;
	GeeArrayList* _tmp4_;
#line 771 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 774 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 774 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS", -1, &_tmp1_, NULL);
#line 774 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 774 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 774 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 776 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 776 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 778 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = gee_array_list_new (OBJECTS_TYPE_TASK, (GBoxedCopyFunc) objects_task_ref, (GDestroyNotify) objects_task_unref, NULL, NULL, NULL);
#line 778 "/run/build/planner/src/Services/Database.vala"
	all = _tmp4_;
#line 780 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 3587 "Database.c"
		sqlite3_stmt* _tmp5_;
		gint _tmp6_;
		ObjectsTask* task = NULL;
		ObjectsTask* _tmp7_;
		ObjectsTask* _tmp8_;
		sqlite3_stmt* _tmp9_;
		ObjectsTask* _tmp10_;
		sqlite3_stmt* _tmp11_;
		ObjectsTask* _tmp12_;
		sqlite3_stmt* _tmp13_;
		ObjectsTask* _tmp14_;
		sqlite3_stmt* _tmp15_;
		ObjectsTask* _tmp16_;
		sqlite3_stmt* _tmp17_;
		ObjectsTask* _tmp18_;
		sqlite3_stmt* _tmp19_;
		ObjectsTask* _tmp20_;
		sqlite3_stmt* _tmp21_;
		ObjectsTask* _tmp22_;
		sqlite3_stmt* _tmp23_;
		ObjectsTask* _tmp24_;
		sqlite3_stmt* _tmp25_;
		ObjectsTask* _tmp26_;
		sqlite3_stmt* _tmp27_;
		const gchar* _tmp28_;
		gchar* _tmp29_;
		ObjectsTask* _tmp30_;
		sqlite3_stmt* _tmp31_;
		const gchar* _tmp32_;
		gchar* _tmp33_;
		ObjectsTask* _tmp34_;
		sqlite3_stmt* _tmp35_;
		const gchar* _tmp36_;
		gchar* _tmp37_;
		ObjectsTask* _tmp38_;
		sqlite3_stmt* _tmp39_;
		const gchar* _tmp40_;
		gchar* _tmp41_;
		ObjectsTask* _tmp42_;
		sqlite3_stmt* _tmp43_;
		const gchar* _tmp44_;
		gchar* _tmp45_;
		ObjectsTask* _tmp46_;
		sqlite3_stmt* _tmp47_;
		const gchar* _tmp48_;
		gchar* _tmp49_;
		GeeArrayList* _tmp50_;
		ObjectsTask* _tmp51_;
#line 780 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = stmt;
#line 780 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp5_);
#line 780 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = res;
#line 780 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp6_ == SQLITE_ROW)) {
#line 780 "/run/build/planner/src/Services/Database.vala"
			break;
#line 3646 "Database.c"
		}
#line 781 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = objects_task_new (0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "", "", "", "");
#line 781 "/run/build/planner/src/Services/Database.vala"
		task = _tmp7_;
#line 783 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = task;
#line 783 "/run/build/planner/src/Services/Database.vala"
		_tmp9_ = stmt;
#line 783 "/run/build/planner/src/Services/Database.vala"
		_tmp8_->id = sqlite3_column_int (_tmp9_, 0);
#line 784 "/run/build/planner/src/Services/Database.vala"
		_tmp10_ = task;
#line 784 "/run/build/planner/src/Services/Database.vala"
		_tmp11_ = stmt;
#line 784 "/run/build/planner/src/Services/Database.vala"
		_tmp10_->checked = sqlite3_column_int (_tmp11_, 1);
#line 785 "/run/build/planner/src/Services/Database.vala"
		_tmp12_ = task;
#line 785 "/run/build/planner/src/Services/Database.vala"
		_tmp13_ = stmt;
#line 785 "/run/build/planner/src/Services/Database.vala"
		_tmp12_->project_id = sqlite3_column_int (_tmp13_, 2);
#line 786 "/run/build/planner/src/Services/Database.vala"
		_tmp14_ = task;
#line 786 "/run/build/planner/src/Services/Database.vala"
		_tmp15_ = stmt;
#line 786 "/run/build/planner/src/Services/Database.vala"
		_tmp14_->list_id = sqlite3_column_int (_tmp15_, 3);
#line 787 "/run/build/planner/src/Services/Database.vala"
		_tmp16_ = task;
#line 787 "/run/build/planner/src/Services/Database.vala"
		_tmp17_ = stmt;
#line 787 "/run/build/planner/src/Services/Database.vala"
		_tmp16_->task_order = sqlite3_column_int (_tmp17_, 4);
#line 788 "/run/build/planner/src/Services/Database.vala"
		_tmp18_ = task;
#line 788 "/run/build/planner/src/Services/Database.vala"
		_tmp19_ = stmt;
#line 788 "/run/build/planner/src/Services/Database.vala"
		_tmp18_->is_inbox = sqlite3_column_int (_tmp19_, 5);
#line 789 "/run/build/planner/src/Services/Database.vala"
		_tmp20_ = task;
#line 789 "/run/build/planner/src/Services/Database.vala"
		_tmp21_ = stmt;
#line 789 "/run/build/planner/src/Services/Database.vala"
		_tmp20_->has_reminder = sqlite3_column_int (_tmp21_, 6);
#line 790 "/run/build/planner/src/Services/Database.vala"
		_tmp22_ = task;
#line 790 "/run/build/planner/src/Services/Database.vala"
		_tmp23_ = stmt;
#line 790 "/run/build/planner/src/Services/Database.vala"
		_tmp22_->sidebar_width = sqlite3_column_int (_tmp23_, 7);
#line 791 "/run/build/planner/src/Services/Database.vala"
		_tmp24_ = task;
#line 791 "/run/build/planner/src/Services/Database.vala"
		_tmp25_ = stmt;
#line 791 "/run/build/planner/src/Services/Database.vala"
		_tmp24_->was_notified = sqlite3_column_int (_tmp25_, 8);
#line 792 "/run/build/planner/src/Services/Database.vala"
		_tmp26_ = task;
#line 792 "/run/build/planner/src/Services/Database.vala"
		_tmp27_ = stmt;
#line 792 "/run/build/planner/src/Services/Database.vala"
		_tmp28_ = sqlite3_column_text (_tmp27_, 9);
#line 792 "/run/build/planner/src/Services/Database.vala"
		_tmp29_ = g_strdup (_tmp28_);
#line 792 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp26_->content);
#line 792 "/run/build/planner/src/Services/Database.vala"
		_tmp26_->content = _tmp29_;
#line 793 "/run/build/planner/src/Services/Database.vala"
		_tmp30_ = task;
#line 793 "/run/build/planner/src/Services/Database.vala"
		_tmp31_ = stmt;
#line 793 "/run/build/planner/src/Services/Database.vala"
		_tmp32_ = sqlite3_column_text (_tmp31_, 10);
#line 793 "/run/build/planner/src/Services/Database.vala"
		_tmp33_ = g_strdup (_tmp32_);
#line 793 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp30_->note);
#line 793 "/run/build/planner/src/Services/Database.vala"
		_tmp30_->note = _tmp33_;
#line 794 "/run/build/planner/src/Services/Database.vala"
		_tmp34_ = task;
#line 794 "/run/build/planner/src/Services/Database.vala"
		_tmp35_ = stmt;
#line 794 "/run/build/planner/src/Services/Database.vala"
		_tmp36_ = sqlite3_column_text (_tmp35_, 11);
#line 794 "/run/build/planner/src/Services/Database.vala"
		_tmp37_ = g_strdup (_tmp36_);
#line 794 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp34_->when_date_utc);
#line 794 "/run/build/planner/src/Services/Database.vala"
		_tmp34_->when_date_utc = _tmp37_;
#line 795 "/run/build/planner/src/Services/Database.vala"
		_tmp38_ = task;
#line 795 "/run/build/planner/src/Services/Database.vala"
		_tmp39_ = stmt;
#line 795 "/run/build/planner/src/Services/Database.vala"
		_tmp40_ = sqlite3_column_text (_tmp39_, 12);
#line 795 "/run/build/planner/src/Services/Database.vala"
		_tmp41_ = g_strdup (_tmp40_);
#line 795 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp38_->reminder_time);
#line 795 "/run/build/planner/src/Services/Database.vala"
		_tmp38_->reminder_time = _tmp41_;
#line 796 "/run/build/planner/src/Services/Database.vala"
		_tmp42_ = task;
#line 796 "/run/build/planner/src/Services/Database.vala"
		_tmp43_ = stmt;
#line 796 "/run/build/planner/src/Services/Database.vala"
		_tmp44_ = sqlite3_column_text (_tmp43_, 13);
#line 796 "/run/build/planner/src/Services/Database.vala"
		_tmp45_ = g_strdup (_tmp44_);
#line 796 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp42_->checklist);
#line 796 "/run/build/planner/src/Services/Database.vala"
		_tmp42_->checklist = _tmp45_;
#line 797 "/run/build/planner/src/Services/Database.vala"
		_tmp46_ = task;
#line 797 "/run/build/planner/src/Services/Database.vala"
		_tmp47_ = stmt;
#line 797 "/run/build/planner/src/Services/Database.vala"
		_tmp48_ = sqlite3_column_text (_tmp47_, 14);
#line 797 "/run/build/planner/src/Services/Database.vala"
		_tmp49_ = g_strdup (_tmp48_);
#line 797 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp46_->labels);
#line 797 "/run/build/planner/src/Services/Database.vala"
		_tmp46_->labels = _tmp49_;
#line 799 "/run/build/planner/src/Services/Database.vala"
		_tmp50_ = all;
#line 799 "/run/build/planner/src/Services/Database.vala"
		_tmp51_ = task;
#line 799 "/run/build/planner/src/Services/Database.vala"
		gee_abstract_collection_add ((GeeAbstractCollection*) _tmp50_, _tmp51_);
#line 780 "/run/build/planner/src/Services/Database.vala"
		_objects_task_unref0 (task);
#line 3786 "Database.c"
	}
#line 802 "/run/build/planner/src/Services/Database.vala"
	result = all;
#line 802 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 802 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 3794 "Database.c"
}


GeeArrayList*
services_database_get_all_inbox_tasks (ServicesDatabase* self)
{
	GeeArrayList* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	GeeArrayList* all = NULL;
	GeeArrayList* _tmp4_;
#line 805 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 808 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 808 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE is_inbox = 1 AND when_date_utc = ''", -1, &_tmp1_, NULL);
#line 808 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 808 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 808 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 810 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 810 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 812 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = gee_array_list_new (OBJECTS_TYPE_TASK, (GBoxedCopyFunc) objects_task_ref, (GDestroyNotify) objects_task_unref, NULL, NULL, NULL);
#line 812 "/run/build/planner/src/Services/Database.vala"
	all = _tmp4_;
#line 814 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 3832 "Database.c"
		sqlite3_stmt* _tmp5_;
		gint _tmp6_;
		ObjectsTask* task = NULL;
		ObjectsTask* _tmp7_;
		ObjectsTask* _tmp8_;
		sqlite3_stmt* _tmp9_;
		ObjectsTask* _tmp10_;
		sqlite3_stmt* _tmp11_;
		ObjectsTask* _tmp12_;
		sqlite3_stmt* _tmp13_;
		ObjectsTask* _tmp14_;
		sqlite3_stmt* _tmp15_;
		ObjectsTask* _tmp16_;
		sqlite3_stmt* _tmp17_;
		ObjectsTask* _tmp18_;
		sqlite3_stmt* _tmp19_;
		ObjectsTask* _tmp20_;
		sqlite3_stmt* _tmp21_;
		ObjectsTask* _tmp22_;
		sqlite3_stmt* _tmp23_;
		ObjectsTask* _tmp24_;
		sqlite3_stmt* _tmp25_;
		ObjectsTask* _tmp26_;
		sqlite3_stmt* _tmp27_;
		const gchar* _tmp28_;
		gchar* _tmp29_;
		ObjectsTask* _tmp30_;
		sqlite3_stmt* _tmp31_;
		const gchar* _tmp32_;
		gchar* _tmp33_;
		ObjectsTask* _tmp34_;
		sqlite3_stmt* _tmp35_;
		const gchar* _tmp36_;
		gchar* _tmp37_;
		ObjectsTask* _tmp38_;
		sqlite3_stmt* _tmp39_;
		const gchar* _tmp40_;
		gchar* _tmp41_;
		ObjectsTask* _tmp42_;
		sqlite3_stmt* _tmp43_;
		const gchar* _tmp44_;
		gchar* _tmp45_;
		ObjectsTask* _tmp46_;
		sqlite3_stmt* _tmp47_;
		const gchar* _tmp48_;
		gchar* _tmp49_;
		GeeArrayList* _tmp50_;
		ObjectsTask* _tmp51_;
#line 814 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = stmt;
#line 814 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp5_);
#line 814 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = res;
#line 814 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp6_ == SQLITE_ROW)) {
#line 814 "/run/build/planner/src/Services/Database.vala"
			break;
#line 3891 "Database.c"
		}
#line 815 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = objects_task_new (0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "", "", "", "");
#line 815 "/run/build/planner/src/Services/Database.vala"
		task = _tmp7_;
#line 817 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = task;
#line 817 "/run/build/planner/src/Services/Database.vala"
		_tmp9_ = stmt;
#line 817 "/run/build/planner/src/Services/Database.vala"
		_tmp8_->id = sqlite3_column_int (_tmp9_, 0);
#line 818 "/run/build/planner/src/Services/Database.vala"
		_tmp10_ = task;
#line 818 "/run/build/planner/src/Services/Database.vala"
		_tmp11_ = stmt;
#line 818 "/run/build/planner/src/Services/Database.vala"
		_tmp10_->checked = sqlite3_column_int (_tmp11_, 1);
#line 819 "/run/build/planner/src/Services/Database.vala"
		_tmp12_ = task;
#line 819 "/run/build/planner/src/Services/Database.vala"
		_tmp13_ = stmt;
#line 819 "/run/build/planner/src/Services/Database.vala"
		_tmp12_->project_id = sqlite3_column_int (_tmp13_, 2);
#line 820 "/run/build/planner/src/Services/Database.vala"
		_tmp14_ = task;
#line 820 "/run/build/planner/src/Services/Database.vala"
		_tmp15_ = stmt;
#line 820 "/run/build/planner/src/Services/Database.vala"
		_tmp14_->list_id = sqlite3_column_int (_tmp15_, 3);
#line 821 "/run/build/planner/src/Services/Database.vala"
		_tmp16_ = task;
#line 821 "/run/build/planner/src/Services/Database.vala"
		_tmp17_ = stmt;
#line 821 "/run/build/planner/src/Services/Database.vala"
		_tmp16_->task_order = sqlite3_column_int (_tmp17_, 4);
#line 822 "/run/build/planner/src/Services/Database.vala"
		_tmp18_ = task;
#line 822 "/run/build/planner/src/Services/Database.vala"
		_tmp19_ = stmt;
#line 822 "/run/build/planner/src/Services/Database.vala"
		_tmp18_->is_inbox = sqlite3_column_int (_tmp19_, 5);
#line 823 "/run/build/planner/src/Services/Database.vala"
		_tmp20_ = task;
#line 823 "/run/build/planner/src/Services/Database.vala"
		_tmp21_ = stmt;
#line 823 "/run/build/planner/src/Services/Database.vala"
		_tmp20_->has_reminder = sqlite3_column_int (_tmp21_, 6);
#line 824 "/run/build/planner/src/Services/Database.vala"
		_tmp22_ = task;
#line 824 "/run/build/planner/src/Services/Database.vala"
		_tmp23_ = stmt;
#line 824 "/run/build/planner/src/Services/Database.vala"
		_tmp22_->sidebar_width = sqlite3_column_int (_tmp23_, 7);
#line 825 "/run/build/planner/src/Services/Database.vala"
		_tmp24_ = task;
#line 825 "/run/build/planner/src/Services/Database.vala"
		_tmp25_ = stmt;
#line 825 "/run/build/planner/src/Services/Database.vala"
		_tmp24_->was_notified = sqlite3_column_int (_tmp25_, 8);
#line 826 "/run/build/planner/src/Services/Database.vala"
		_tmp26_ = task;
#line 826 "/run/build/planner/src/Services/Database.vala"
		_tmp27_ = stmt;
#line 826 "/run/build/planner/src/Services/Database.vala"
		_tmp28_ = sqlite3_column_text (_tmp27_, 9);
#line 826 "/run/build/planner/src/Services/Database.vala"
		_tmp29_ = g_strdup (_tmp28_);
#line 826 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp26_->content);
#line 826 "/run/build/planner/src/Services/Database.vala"
		_tmp26_->content = _tmp29_;
#line 827 "/run/build/planner/src/Services/Database.vala"
		_tmp30_ = task;
#line 827 "/run/build/planner/src/Services/Database.vala"
		_tmp31_ = stmt;
#line 827 "/run/build/planner/src/Services/Database.vala"
		_tmp32_ = sqlite3_column_text (_tmp31_, 10);
#line 827 "/run/build/planner/src/Services/Database.vala"
		_tmp33_ = g_strdup (_tmp32_);
#line 827 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp30_->note);
#line 827 "/run/build/planner/src/Services/Database.vala"
		_tmp30_->note = _tmp33_;
#line 828 "/run/build/planner/src/Services/Database.vala"
		_tmp34_ = task;
#line 828 "/run/build/planner/src/Services/Database.vala"
		_tmp35_ = stmt;
#line 828 "/run/build/planner/src/Services/Database.vala"
		_tmp36_ = sqlite3_column_text (_tmp35_, 11);
#line 828 "/run/build/planner/src/Services/Database.vala"
		_tmp37_ = g_strdup (_tmp36_);
#line 828 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp34_->when_date_utc);
#line 828 "/run/build/planner/src/Services/Database.vala"
		_tmp34_->when_date_utc = _tmp37_;
#line 829 "/run/build/planner/src/Services/Database.vala"
		_tmp38_ = task;
#line 829 "/run/build/planner/src/Services/Database.vala"
		_tmp39_ = stmt;
#line 829 "/run/build/planner/src/Services/Database.vala"
		_tmp40_ = sqlite3_column_text (_tmp39_, 12);
#line 829 "/run/build/planner/src/Services/Database.vala"
		_tmp41_ = g_strdup (_tmp40_);
#line 829 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp38_->reminder_time);
#line 829 "/run/build/planner/src/Services/Database.vala"
		_tmp38_->reminder_time = _tmp41_;
#line 830 "/run/build/planner/src/Services/Database.vala"
		_tmp42_ = task;
#line 830 "/run/build/planner/src/Services/Database.vala"
		_tmp43_ = stmt;
#line 830 "/run/build/planner/src/Services/Database.vala"
		_tmp44_ = sqlite3_column_text (_tmp43_, 13);
#line 830 "/run/build/planner/src/Services/Database.vala"
		_tmp45_ = g_strdup (_tmp44_);
#line 830 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp42_->checklist);
#line 830 "/run/build/planner/src/Services/Database.vala"
		_tmp42_->checklist = _tmp45_;
#line 831 "/run/build/planner/src/Services/Database.vala"
		_tmp46_ = task;
#line 831 "/run/build/planner/src/Services/Database.vala"
		_tmp47_ = stmt;
#line 831 "/run/build/planner/src/Services/Database.vala"
		_tmp48_ = sqlite3_column_text (_tmp47_, 14);
#line 831 "/run/build/planner/src/Services/Database.vala"
		_tmp49_ = g_strdup (_tmp48_);
#line 831 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp46_->labels);
#line 831 "/run/build/planner/src/Services/Database.vala"
		_tmp46_->labels = _tmp49_;
#line 833 "/run/build/planner/src/Services/Database.vala"
		_tmp50_ = all;
#line 833 "/run/build/planner/src/Services/Database.vala"
		_tmp51_ = task;
#line 833 "/run/build/planner/src/Services/Database.vala"
		gee_abstract_collection_add ((GeeAbstractCollection*) _tmp50_, _tmp51_);
#line 814 "/run/build/planner/src/Services/Database.vala"
		_objects_task_unref0 (task);
#line 4031 "Database.c"
	}
#line 836 "/run/build/planner/src/Services/Database.vala"
	result = all;
#line 836 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 836 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 4039 "Database.c"
}


GeeArrayList*
services_database_get_all_completed_tasks_2 (ServicesDatabase* self)
{
	GeeArrayList* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	GeeArrayList* all = NULL;
	GeeArrayList* _tmp4_;
#line 839 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 842 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 842 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE checked = 1", -1, &_tmp1_, NULL);
#line 842 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 842 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 842 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 844 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 844 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 846 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = gee_array_list_new (OBJECTS_TYPE_TASK, (GBoxedCopyFunc) objects_task_ref, (GDestroyNotify) objects_task_unref, NULL, NULL, NULL);
#line 846 "/run/build/planner/src/Services/Database.vala"
	all = _tmp4_;
#line 848 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 4077 "Database.c"
		sqlite3_stmt* _tmp5_;
		gint _tmp6_;
		ObjectsTask* task = NULL;
		ObjectsTask* _tmp7_;
		ObjectsTask* _tmp8_;
		sqlite3_stmt* _tmp9_;
		ObjectsTask* _tmp10_;
		sqlite3_stmt* _tmp11_;
		ObjectsTask* _tmp12_;
		sqlite3_stmt* _tmp13_;
		ObjectsTask* _tmp14_;
		sqlite3_stmt* _tmp15_;
		ObjectsTask* _tmp16_;
		sqlite3_stmt* _tmp17_;
		ObjectsTask* _tmp18_;
		sqlite3_stmt* _tmp19_;
		ObjectsTask* _tmp20_;
		sqlite3_stmt* _tmp21_;
		ObjectsTask* _tmp22_;
		sqlite3_stmt* _tmp23_;
		ObjectsTask* _tmp24_;
		sqlite3_stmt* _tmp25_;
		ObjectsTask* _tmp26_;
		sqlite3_stmt* _tmp27_;
		const gchar* _tmp28_;
		gchar* _tmp29_;
		ObjectsTask* _tmp30_;
		sqlite3_stmt* _tmp31_;
		const gchar* _tmp32_;
		gchar* _tmp33_;
		ObjectsTask* _tmp34_;
		sqlite3_stmt* _tmp35_;
		const gchar* _tmp36_;
		gchar* _tmp37_;
		ObjectsTask* _tmp38_;
		sqlite3_stmt* _tmp39_;
		const gchar* _tmp40_;
		gchar* _tmp41_;
		ObjectsTask* _tmp42_;
		sqlite3_stmt* _tmp43_;
		const gchar* _tmp44_;
		gchar* _tmp45_;
		ObjectsTask* _tmp46_;
		sqlite3_stmt* _tmp47_;
		const gchar* _tmp48_;
		gchar* _tmp49_;
		GeeArrayList* _tmp50_;
		ObjectsTask* _tmp51_;
#line 848 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = stmt;
#line 848 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp5_);
#line 848 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = res;
#line 848 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp6_ == SQLITE_ROW)) {
#line 848 "/run/build/planner/src/Services/Database.vala"
			break;
#line 4136 "Database.c"
		}
#line 849 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = objects_task_new (0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "", "", "", "");
#line 849 "/run/build/planner/src/Services/Database.vala"
		task = _tmp7_;
#line 851 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = task;
#line 851 "/run/build/planner/src/Services/Database.vala"
		_tmp9_ = stmt;
#line 851 "/run/build/planner/src/Services/Database.vala"
		_tmp8_->id = sqlite3_column_int (_tmp9_, 0);
#line 852 "/run/build/planner/src/Services/Database.vala"
		_tmp10_ = task;
#line 852 "/run/build/planner/src/Services/Database.vala"
		_tmp11_ = stmt;
#line 852 "/run/build/planner/src/Services/Database.vala"
		_tmp10_->checked = sqlite3_column_int (_tmp11_, 1);
#line 853 "/run/build/planner/src/Services/Database.vala"
		_tmp12_ = task;
#line 853 "/run/build/planner/src/Services/Database.vala"
		_tmp13_ = stmt;
#line 853 "/run/build/planner/src/Services/Database.vala"
		_tmp12_->project_id = sqlite3_column_int (_tmp13_, 2);
#line 854 "/run/build/planner/src/Services/Database.vala"
		_tmp14_ = task;
#line 854 "/run/build/planner/src/Services/Database.vala"
		_tmp15_ = stmt;
#line 854 "/run/build/planner/src/Services/Database.vala"
		_tmp14_->list_id = sqlite3_column_int (_tmp15_, 3);
#line 855 "/run/build/planner/src/Services/Database.vala"
		_tmp16_ = task;
#line 855 "/run/build/planner/src/Services/Database.vala"
		_tmp17_ = stmt;
#line 855 "/run/build/planner/src/Services/Database.vala"
		_tmp16_->task_order = sqlite3_column_int (_tmp17_, 4);
#line 856 "/run/build/planner/src/Services/Database.vala"
		_tmp18_ = task;
#line 856 "/run/build/planner/src/Services/Database.vala"
		_tmp19_ = stmt;
#line 856 "/run/build/planner/src/Services/Database.vala"
		_tmp18_->is_inbox = sqlite3_column_int (_tmp19_, 5);
#line 857 "/run/build/planner/src/Services/Database.vala"
		_tmp20_ = task;
#line 857 "/run/build/planner/src/Services/Database.vala"
		_tmp21_ = stmt;
#line 857 "/run/build/planner/src/Services/Database.vala"
		_tmp20_->has_reminder = sqlite3_column_int (_tmp21_, 6);
#line 858 "/run/build/planner/src/Services/Database.vala"
		_tmp22_ = task;
#line 858 "/run/build/planner/src/Services/Database.vala"
		_tmp23_ = stmt;
#line 858 "/run/build/planner/src/Services/Database.vala"
		_tmp22_->sidebar_width = sqlite3_column_int (_tmp23_, 7);
#line 859 "/run/build/planner/src/Services/Database.vala"
		_tmp24_ = task;
#line 859 "/run/build/planner/src/Services/Database.vala"
		_tmp25_ = stmt;
#line 859 "/run/build/planner/src/Services/Database.vala"
		_tmp24_->was_notified = sqlite3_column_int (_tmp25_, 8);
#line 860 "/run/build/planner/src/Services/Database.vala"
		_tmp26_ = task;
#line 860 "/run/build/planner/src/Services/Database.vala"
		_tmp27_ = stmt;
#line 860 "/run/build/planner/src/Services/Database.vala"
		_tmp28_ = sqlite3_column_text (_tmp27_, 9);
#line 860 "/run/build/planner/src/Services/Database.vala"
		_tmp29_ = g_strdup (_tmp28_);
#line 860 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp26_->content);
#line 860 "/run/build/planner/src/Services/Database.vala"
		_tmp26_->content = _tmp29_;
#line 861 "/run/build/planner/src/Services/Database.vala"
		_tmp30_ = task;
#line 861 "/run/build/planner/src/Services/Database.vala"
		_tmp31_ = stmt;
#line 861 "/run/build/planner/src/Services/Database.vala"
		_tmp32_ = sqlite3_column_text (_tmp31_, 10);
#line 861 "/run/build/planner/src/Services/Database.vala"
		_tmp33_ = g_strdup (_tmp32_);
#line 861 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp30_->note);
#line 861 "/run/build/planner/src/Services/Database.vala"
		_tmp30_->note = _tmp33_;
#line 862 "/run/build/planner/src/Services/Database.vala"
		_tmp34_ = task;
#line 862 "/run/build/planner/src/Services/Database.vala"
		_tmp35_ = stmt;
#line 862 "/run/build/planner/src/Services/Database.vala"
		_tmp36_ = sqlite3_column_text (_tmp35_, 11);
#line 862 "/run/build/planner/src/Services/Database.vala"
		_tmp37_ = g_strdup (_tmp36_);
#line 862 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp34_->when_date_utc);
#line 862 "/run/build/planner/src/Services/Database.vala"
		_tmp34_->when_date_utc = _tmp37_;
#line 863 "/run/build/planner/src/Services/Database.vala"
		_tmp38_ = task;
#line 863 "/run/build/planner/src/Services/Database.vala"
		_tmp39_ = stmt;
#line 863 "/run/build/planner/src/Services/Database.vala"
		_tmp40_ = sqlite3_column_text (_tmp39_, 12);
#line 863 "/run/build/planner/src/Services/Database.vala"
		_tmp41_ = g_strdup (_tmp40_);
#line 863 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp38_->reminder_time);
#line 863 "/run/build/planner/src/Services/Database.vala"
		_tmp38_->reminder_time = _tmp41_;
#line 864 "/run/build/planner/src/Services/Database.vala"
		_tmp42_ = task;
#line 864 "/run/build/planner/src/Services/Database.vala"
		_tmp43_ = stmt;
#line 864 "/run/build/planner/src/Services/Database.vala"
		_tmp44_ = sqlite3_column_text (_tmp43_, 13);
#line 864 "/run/build/planner/src/Services/Database.vala"
		_tmp45_ = g_strdup (_tmp44_);
#line 864 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp42_->checklist);
#line 864 "/run/build/planner/src/Services/Database.vala"
		_tmp42_->checklist = _tmp45_;
#line 865 "/run/build/planner/src/Services/Database.vala"
		_tmp46_ = task;
#line 865 "/run/build/planner/src/Services/Database.vala"
		_tmp47_ = stmt;
#line 865 "/run/build/planner/src/Services/Database.vala"
		_tmp48_ = sqlite3_column_text (_tmp47_, 14);
#line 865 "/run/build/planner/src/Services/Database.vala"
		_tmp49_ = g_strdup (_tmp48_);
#line 865 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp46_->labels);
#line 865 "/run/build/planner/src/Services/Database.vala"
		_tmp46_->labels = _tmp49_;
#line 867 "/run/build/planner/src/Services/Database.vala"
		_tmp50_ = all;
#line 867 "/run/build/planner/src/Services/Database.vala"
		_tmp51_ = task;
#line 867 "/run/build/planner/src/Services/Database.vala"
		gee_abstract_collection_add ((GeeAbstractCollection*) _tmp50_, _tmp51_);
#line 848 "/run/build/planner/src/Services/Database.vala"
		_objects_task_unref0 (task);
#line 4276 "Database.c"
	}
#line 870 "/run/build/planner/src/Services/Database.vala"
	result = all;
#line 870 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 870 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 4284 "Database.c"
}


GeeArrayList*
services_database_get_all_tasks_by_project (ServicesDatabase* self,
                                            gint id)
{
	GeeArrayList* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	sqlite3_stmt* _tmp4_;
	gint _tmp5_;
	GeeArrayList* all = NULL;
	GeeArrayList* _tmp6_;
#line 873 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 876 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 876 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE project_id = ?", -1, &_tmp1_, NULL);
#line 876 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 876 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 876 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 878 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 878 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 880 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = stmt;
#line 880 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (_tmp4_, 1, id);
#line 881 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = res;
#line 881 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp5_ == SQLITE_OK, "res == Sqlite.OK");
#line 883 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = gee_array_list_new (OBJECTS_TYPE_TASK, (GBoxedCopyFunc) objects_task_ref, (GDestroyNotify) objects_task_unref, NULL, NULL, NULL);
#line 883 "/run/build/planner/src/Services/Database.vala"
	all = _tmp6_;
#line 885 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 4333 "Database.c"
		sqlite3_stmt* _tmp7_;
		gint _tmp8_;
		ObjectsTask* task = NULL;
		ObjectsTask* _tmp9_;
		ObjectsTask* _tmp10_;
		sqlite3_stmt* _tmp11_;
		ObjectsTask* _tmp12_;
		sqlite3_stmt* _tmp13_;
		ObjectsTask* _tmp14_;
		sqlite3_stmt* _tmp15_;
		ObjectsTask* _tmp16_;
		sqlite3_stmt* _tmp17_;
		ObjectsTask* _tmp18_;
		sqlite3_stmt* _tmp19_;
		ObjectsTask* _tmp20_;
		sqlite3_stmt* _tmp21_;
		ObjectsTask* _tmp22_;
		sqlite3_stmt* _tmp23_;
		ObjectsTask* _tmp24_;
		sqlite3_stmt* _tmp25_;
		ObjectsTask* _tmp26_;
		sqlite3_stmt* _tmp27_;
		ObjectsTask* _tmp28_;
		sqlite3_stmt* _tmp29_;
		const gchar* _tmp30_;
		gchar* _tmp31_;
		ObjectsTask* _tmp32_;
		sqlite3_stmt* _tmp33_;
		const gchar* _tmp34_;
		gchar* _tmp35_;
		ObjectsTask* _tmp36_;
		sqlite3_stmt* _tmp37_;
		const gchar* _tmp38_;
		gchar* _tmp39_;
		ObjectsTask* _tmp40_;
		sqlite3_stmt* _tmp41_;
		const gchar* _tmp42_;
		gchar* _tmp43_;
		ObjectsTask* _tmp44_;
		sqlite3_stmt* _tmp45_;
		const gchar* _tmp46_;
		gchar* _tmp47_;
		ObjectsTask* _tmp48_;
		sqlite3_stmt* _tmp49_;
		const gchar* _tmp50_;
		gchar* _tmp51_;
		GeeArrayList* _tmp52_;
		ObjectsTask* _tmp53_;
#line 885 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = stmt;
#line 885 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp7_);
#line 885 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = res;
#line 885 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp8_ == SQLITE_ROW)) {
#line 885 "/run/build/planner/src/Services/Database.vala"
			break;
#line 4392 "Database.c"
		}
#line 886 "/run/build/planner/src/Services/Database.vala"
		_tmp9_ = objects_task_new (0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "", "", "", "");
#line 886 "/run/build/planner/src/Services/Database.vala"
		task = _tmp9_;
#line 888 "/run/build/planner/src/Services/Database.vala"
		_tmp10_ = task;
#line 888 "/run/build/planner/src/Services/Database.vala"
		_tmp11_ = stmt;
#line 888 "/run/build/planner/src/Services/Database.vala"
		_tmp10_->id = sqlite3_column_int (_tmp11_, 0);
#line 889 "/run/build/planner/src/Services/Database.vala"
		_tmp12_ = task;
#line 889 "/run/build/planner/src/Services/Database.vala"
		_tmp13_ = stmt;
#line 889 "/run/build/planner/src/Services/Database.vala"
		_tmp12_->checked = sqlite3_column_int (_tmp13_, 1);
#line 890 "/run/build/planner/src/Services/Database.vala"
		_tmp14_ = task;
#line 890 "/run/build/planner/src/Services/Database.vala"
		_tmp15_ = stmt;
#line 890 "/run/build/planner/src/Services/Database.vala"
		_tmp14_->project_id = sqlite3_column_int (_tmp15_, 2);
#line 891 "/run/build/planner/src/Services/Database.vala"
		_tmp16_ = task;
#line 891 "/run/build/planner/src/Services/Database.vala"
		_tmp17_ = stmt;
#line 891 "/run/build/planner/src/Services/Database.vala"
		_tmp16_->list_id = sqlite3_column_int (_tmp17_, 3);
#line 892 "/run/build/planner/src/Services/Database.vala"
		_tmp18_ = task;
#line 892 "/run/build/planner/src/Services/Database.vala"
		_tmp19_ = stmt;
#line 892 "/run/build/planner/src/Services/Database.vala"
		_tmp18_->task_order = sqlite3_column_int (_tmp19_, 4);
#line 893 "/run/build/planner/src/Services/Database.vala"
		_tmp20_ = task;
#line 893 "/run/build/planner/src/Services/Database.vala"
		_tmp21_ = stmt;
#line 893 "/run/build/planner/src/Services/Database.vala"
		_tmp20_->is_inbox = sqlite3_column_int (_tmp21_, 5);
#line 894 "/run/build/planner/src/Services/Database.vala"
		_tmp22_ = task;
#line 894 "/run/build/planner/src/Services/Database.vala"
		_tmp23_ = stmt;
#line 894 "/run/build/planner/src/Services/Database.vala"
		_tmp22_->has_reminder = sqlite3_column_int (_tmp23_, 6);
#line 895 "/run/build/planner/src/Services/Database.vala"
		_tmp24_ = task;
#line 895 "/run/build/planner/src/Services/Database.vala"
		_tmp25_ = stmt;
#line 895 "/run/build/planner/src/Services/Database.vala"
		_tmp24_->sidebar_width = sqlite3_column_int (_tmp25_, 7);
#line 896 "/run/build/planner/src/Services/Database.vala"
		_tmp26_ = task;
#line 896 "/run/build/planner/src/Services/Database.vala"
		_tmp27_ = stmt;
#line 896 "/run/build/planner/src/Services/Database.vala"
		_tmp26_->was_notified = sqlite3_column_int (_tmp27_, 8);
#line 897 "/run/build/planner/src/Services/Database.vala"
		_tmp28_ = task;
#line 897 "/run/build/planner/src/Services/Database.vala"
		_tmp29_ = stmt;
#line 897 "/run/build/planner/src/Services/Database.vala"
		_tmp30_ = sqlite3_column_text (_tmp29_, 9);
#line 897 "/run/build/planner/src/Services/Database.vala"
		_tmp31_ = g_strdup (_tmp30_);
#line 897 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp28_->content);
#line 897 "/run/build/planner/src/Services/Database.vala"
		_tmp28_->content = _tmp31_;
#line 898 "/run/build/planner/src/Services/Database.vala"
		_tmp32_ = task;
#line 898 "/run/build/planner/src/Services/Database.vala"
		_tmp33_ = stmt;
#line 898 "/run/build/planner/src/Services/Database.vala"
		_tmp34_ = sqlite3_column_text (_tmp33_, 10);
#line 898 "/run/build/planner/src/Services/Database.vala"
		_tmp35_ = g_strdup (_tmp34_);
#line 898 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp32_->note);
#line 898 "/run/build/planner/src/Services/Database.vala"
		_tmp32_->note = _tmp35_;
#line 899 "/run/build/planner/src/Services/Database.vala"
		_tmp36_ = task;
#line 899 "/run/build/planner/src/Services/Database.vala"
		_tmp37_ = stmt;
#line 899 "/run/build/planner/src/Services/Database.vala"
		_tmp38_ = sqlite3_column_text (_tmp37_, 11);
#line 899 "/run/build/planner/src/Services/Database.vala"
		_tmp39_ = g_strdup (_tmp38_);
#line 899 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp36_->when_date_utc);
#line 899 "/run/build/planner/src/Services/Database.vala"
		_tmp36_->when_date_utc = _tmp39_;
#line 900 "/run/build/planner/src/Services/Database.vala"
		_tmp40_ = task;
#line 900 "/run/build/planner/src/Services/Database.vala"
		_tmp41_ = stmt;
#line 900 "/run/build/planner/src/Services/Database.vala"
		_tmp42_ = sqlite3_column_text (_tmp41_, 12);
#line 900 "/run/build/planner/src/Services/Database.vala"
		_tmp43_ = g_strdup (_tmp42_);
#line 900 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp40_->reminder_time);
#line 900 "/run/build/planner/src/Services/Database.vala"
		_tmp40_->reminder_time = _tmp43_;
#line 901 "/run/build/planner/src/Services/Database.vala"
		_tmp44_ = task;
#line 901 "/run/build/planner/src/Services/Database.vala"
		_tmp45_ = stmt;
#line 901 "/run/build/planner/src/Services/Database.vala"
		_tmp46_ = sqlite3_column_text (_tmp45_, 13);
#line 901 "/run/build/planner/src/Services/Database.vala"
		_tmp47_ = g_strdup (_tmp46_);
#line 901 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp44_->checklist);
#line 901 "/run/build/planner/src/Services/Database.vala"
		_tmp44_->checklist = _tmp47_;
#line 902 "/run/build/planner/src/Services/Database.vala"
		_tmp48_ = task;
#line 902 "/run/build/planner/src/Services/Database.vala"
		_tmp49_ = stmt;
#line 902 "/run/build/planner/src/Services/Database.vala"
		_tmp50_ = sqlite3_column_text (_tmp49_, 14);
#line 902 "/run/build/planner/src/Services/Database.vala"
		_tmp51_ = g_strdup (_tmp50_);
#line 902 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp48_->labels);
#line 902 "/run/build/planner/src/Services/Database.vala"
		_tmp48_->labels = _tmp51_;
#line 904 "/run/build/planner/src/Services/Database.vala"
		_tmp52_ = all;
#line 904 "/run/build/planner/src/Services/Database.vala"
		_tmp53_ = task;
#line 904 "/run/build/planner/src/Services/Database.vala"
		gee_abstract_collection_add ((GeeAbstractCollection*) _tmp52_, _tmp53_);
#line 885 "/run/build/planner/src/Services/Database.vala"
		_objects_task_unref0 (task);
#line 4532 "Database.c"
	}
#line 907 "/run/build/planner/src/Services/Database.vala"
	result = all;
#line 907 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 907 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 4540 "Database.c"
}


GeeArrayList*
services_database_get_all_today_tasks (ServicesDatabase* self)
{
	GeeArrayList* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	GeeArrayList* all = NULL;
	GeeArrayList* _tmp4_;
#line 910 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 913 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 913 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE when_date_utc != ''", -1, &_tmp1_, NULL);
#line 913 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 913 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 913 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 915 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 915 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 917 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = gee_array_list_new (OBJECTS_TYPE_TASK, (GBoxedCopyFunc) objects_task_ref, (GDestroyNotify) objects_task_unref, NULL, NULL, NULL);
#line 917 "/run/build/planner/src/Services/Database.vala"
	all = _tmp4_;
#line 919 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 4578 "Database.c"
		sqlite3_stmt* _tmp5_;
		gint _tmp6_;
		ObjectsTask* task = NULL;
		ObjectsTask* _tmp7_;
		ObjectsTask* _tmp8_;
		sqlite3_stmt* _tmp9_;
		ObjectsTask* _tmp10_;
		sqlite3_stmt* _tmp11_;
		ObjectsTask* _tmp12_;
		sqlite3_stmt* _tmp13_;
		ObjectsTask* _tmp14_;
		sqlite3_stmt* _tmp15_;
		ObjectsTask* _tmp16_;
		sqlite3_stmt* _tmp17_;
		ObjectsTask* _tmp18_;
		sqlite3_stmt* _tmp19_;
		ObjectsTask* _tmp20_;
		sqlite3_stmt* _tmp21_;
		ObjectsTask* _tmp22_;
		sqlite3_stmt* _tmp23_;
		ObjectsTask* _tmp24_;
		sqlite3_stmt* _tmp25_;
		ObjectsTask* _tmp26_;
		sqlite3_stmt* _tmp27_;
		const gchar* _tmp28_;
		gchar* _tmp29_;
		ObjectsTask* _tmp30_;
		sqlite3_stmt* _tmp31_;
		const gchar* _tmp32_;
		gchar* _tmp33_;
		ObjectsTask* _tmp34_;
		sqlite3_stmt* _tmp35_;
		const gchar* _tmp36_;
		gchar* _tmp37_;
		ObjectsTask* _tmp38_;
		sqlite3_stmt* _tmp39_;
		const gchar* _tmp40_;
		gchar* _tmp41_;
		ObjectsTask* _tmp42_;
		sqlite3_stmt* _tmp43_;
		const gchar* _tmp44_;
		gchar* _tmp45_;
		ObjectsTask* _tmp46_;
		sqlite3_stmt* _tmp47_;
		const gchar* _tmp48_;
		gchar* _tmp49_;
		GDateTime* when = NULL;
		ObjectsTask* _tmp50_;
		const gchar* _tmp51_;
		GTimeZone* _tmp52_;
		GTimeZone* _tmp53_;
		GDateTime* _tmp54_;
		GDateTime* _tmp55_;
		gboolean _tmp56_ = FALSE;
		Utils* _tmp57_;
		GDateTime* _tmp58_;
#line 919 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = stmt;
#line 919 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp5_);
#line 919 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = res;
#line 919 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp6_ == SQLITE_ROW)) {
#line 919 "/run/build/planner/src/Services/Database.vala"
			break;
#line 4645 "Database.c"
		}
#line 920 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = objects_task_new (0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "", "", "", "");
#line 920 "/run/build/planner/src/Services/Database.vala"
		task = _tmp7_;
#line 922 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = task;
#line 922 "/run/build/planner/src/Services/Database.vala"
		_tmp9_ = stmt;
#line 922 "/run/build/planner/src/Services/Database.vala"
		_tmp8_->id = sqlite3_column_int (_tmp9_, 0);
#line 923 "/run/build/planner/src/Services/Database.vala"
		_tmp10_ = task;
#line 923 "/run/build/planner/src/Services/Database.vala"
		_tmp11_ = stmt;
#line 923 "/run/build/planner/src/Services/Database.vala"
		_tmp10_->checked = sqlite3_column_int (_tmp11_, 1);
#line 924 "/run/build/planner/src/Services/Database.vala"
		_tmp12_ = task;
#line 924 "/run/build/planner/src/Services/Database.vala"
		_tmp13_ = stmt;
#line 924 "/run/build/planner/src/Services/Database.vala"
		_tmp12_->project_id = sqlite3_column_int (_tmp13_, 2);
#line 925 "/run/build/planner/src/Services/Database.vala"
		_tmp14_ = task;
#line 925 "/run/build/planner/src/Services/Database.vala"
		_tmp15_ = stmt;
#line 925 "/run/build/planner/src/Services/Database.vala"
		_tmp14_->list_id = sqlite3_column_int (_tmp15_, 3);
#line 926 "/run/build/planner/src/Services/Database.vala"
		_tmp16_ = task;
#line 926 "/run/build/planner/src/Services/Database.vala"
		_tmp17_ = stmt;
#line 926 "/run/build/planner/src/Services/Database.vala"
		_tmp16_->task_order = sqlite3_column_int (_tmp17_, 4);
#line 927 "/run/build/planner/src/Services/Database.vala"
		_tmp18_ = task;
#line 927 "/run/build/planner/src/Services/Database.vala"
		_tmp19_ = stmt;
#line 927 "/run/build/planner/src/Services/Database.vala"
		_tmp18_->is_inbox = sqlite3_column_int (_tmp19_, 5);
#line 928 "/run/build/planner/src/Services/Database.vala"
		_tmp20_ = task;
#line 928 "/run/build/planner/src/Services/Database.vala"
		_tmp21_ = stmt;
#line 928 "/run/build/planner/src/Services/Database.vala"
		_tmp20_->has_reminder = sqlite3_column_int (_tmp21_, 6);
#line 929 "/run/build/planner/src/Services/Database.vala"
		_tmp22_ = task;
#line 929 "/run/build/planner/src/Services/Database.vala"
		_tmp23_ = stmt;
#line 929 "/run/build/planner/src/Services/Database.vala"
		_tmp22_->sidebar_width = sqlite3_column_int (_tmp23_, 7);
#line 930 "/run/build/planner/src/Services/Database.vala"
		_tmp24_ = task;
#line 930 "/run/build/planner/src/Services/Database.vala"
		_tmp25_ = stmt;
#line 930 "/run/build/planner/src/Services/Database.vala"
		_tmp24_->was_notified = sqlite3_column_int (_tmp25_, 8);
#line 931 "/run/build/planner/src/Services/Database.vala"
		_tmp26_ = task;
#line 931 "/run/build/planner/src/Services/Database.vala"
		_tmp27_ = stmt;
#line 931 "/run/build/planner/src/Services/Database.vala"
		_tmp28_ = sqlite3_column_text (_tmp27_, 9);
#line 931 "/run/build/planner/src/Services/Database.vala"
		_tmp29_ = g_strdup (_tmp28_);
#line 931 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp26_->content);
#line 931 "/run/build/planner/src/Services/Database.vala"
		_tmp26_->content = _tmp29_;
#line 932 "/run/build/planner/src/Services/Database.vala"
		_tmp30_ = task;
#line 932 "/run/build/planner/src/Services/Database.vala"
		_tmp31_ = stmt;
#line 932 "/run/build/planner/src/Services/Database.vala"
		_tmp32_ = sqlite3_column_text (_tmp31_, 10);
#line 932 "/run/build/planner/src/Services/Database.vala"
		_tmp33_ = g_strdup (_tmp32_);
#line 932 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp30_->note);
#line 932 "/run/build/planner/src/Services/Database.vala"
		_tmp30_->note = _tmp33_;
#line 933 "/run/build/planner/src/Services/Database.vala"
		_tmp34_ = task;
#line 933 "/run/build/planner/src/Services/Database.vala"
		_tmp35_ = stmt;
#line 933 "/run/build/planner/src/Services/Database.vala"
		_tmp36_ = sqlite3_column_text (_tmp35_, 11);
#line 933 "/run/build/planner/src/Services/Database.vala"
		_tmp37_ = g_strdup (_tmp36_);
#line 933 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp34_->when_date_utc);
#line 933 "/run/build/planner/src/Services/Database.vala"
		_tmp34_->when_date_utc = _tmp37_;
#line 934 "/run/build/planner/src/Services/Database.vala"
		_tmp38_ = task;
#line 934 "/run/build/planner/src/Services/Database.vala"
		_tmp39_ = stmt;
#line 934 "/run/build/planner/src/Services/Database.vala"
		_tmp40_ = sqlite3_column_text (_tmp39_, 12);
#line 934 "/run/build/planner/src/Services/Database.vala"
		_tmp41_ = g_strdup (_tmp40_);
#line 934 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp38_->reminder_time);
#line 934 "/run/build/planner/src/Services/Database.vala"
		_tmp38_->reminder_time = _tmp41_;
#line 935 "/run/build/planner/src/Services/Database.vala"
		_tmp42_ = task;
#line 935 "/run/build/planner/src/Services/Database.vala"
		_tmp43_ = stmt;
#line 935 "/run/build/planner/src/Services/Database.vala"
		_tmp44_ = sqlite3_column_text (_tmp43_, 13);
#line 935 "/run/build/planner/src/Services/Database.vala"
		_tmp45_ = g_strdup (_tmp44_);
#line 935 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp42_->checklist);
#line 935 "/run/build/planner/src/Services/Database.vala"
		_tmp42_->checklist = _tmp45_;
#line 936 "/run/build/planner/src/Services/Database.vala"
		_tmp46_ = task;
#line 936 "/run/build/planner/src/Services/Database.vala"
		_tmp47_ = stmt;
#line 936 "/run/build/planner/src/Services/Database.vala"
		_tmp48_ = sqlite3_column_text (_tmp47_, 14);
#line 936 "/run/build/planner/src/Services/Database.vala"
		_tmp49_ = g_strdup (_tmp48_);
#line 936 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp46_->labels);
#line 936 "/run/build/planner/src/Services/Database.vala"
		_tmp46_->labels = _tmp49_;
#line 938 "/run/build/planner/src/Services/Database.vala"
		_tmp50_ = task;
#line 938 "/run/build/planner/src/Services/Database.vala"
		_tmp51_ = _tmp50_->when_date_utc;
#line 938 "/run/build/planner/src/Services/Database.vala"
		_tmp52_ = g_time_zone_new_local ();
#line 938 "/run/build/planner/src/Services/Database.vala"
		_tmp53_ = _tmp52_;
#line 938 "/run/build/planner/src/Services/Database.vala"
		_tmp54_ = g_date_time_new_from_iso8601 (_tmp51_, _tmp53_);
#line 938 "/run/build/planner/src/Services/Database.vala"
		_tmp55_ = _tmp54_;
#line 938 "/run/build/planner/src/Services/Database.vala"
		_g_time_zone_unref0 (_tmp53_);
#line 938 "/run/build/planner/src/Services/Database.vala"
		when = _tmp55_;
#line 940 "/run/build/planner/src/Services/Database.vala"
		_tmp57_ = application_utils;
#line 940 "/run/build/planner/src/Services/Database.vala"
		_tmp58_ = when;
#line 940 "/run/build/planner/src/Services/Database.vala"
		if (utils_is_today (_tmp57_, _tmp58_)) {
#line 940 "/run/build/planner/src/Services/Database.vala"
			_tmp56_ = TRUE;
#line 4801 "Database.c"
		} else {
			Utils* _tmp59_;
			GDateTime* _tmp60_;
#line 940 "/run/build/planner/src/Services/Database.vala"
			_tmp59_ = application_utils;
#line 940 "/run/build/planner/src/Services/Database.vala"
			_tmp60_ = when;
#line 940 "/run/build/planner/src/Services/Database.vala"
			_tmp56_ = utils_is_before_today (_tmp59_, _tmp60_);
#line 4811 "Database.c"
		}
#line 940 "/run/build/planner/src/Services/Database.vala"
		if (_tmp56_) {
#line 4815 "Database.c"
			ObjectsTask* _tmp61_;
			gint _tmp62_;
#line 941 "/run/build/planner/src/Services/Database.vala"
			_tmp61_ = task;
#line 941 "/run/build/planner/src/Services/Database.vala"
			_tmp62_ = _tmp61_->checked;
#line 941 "/run/build/planner/src/Services/Database.vala"
			if (_tmp62_ == 0) {
#line 4824 "Database.c"
				GeeArrayList* _tmp63_;
				ObjectsTask* _tmp64_;
#line 942 "/run/build/planner/src/Services/Database.vala"
				_tmp63_ = all;
#line 942 "/run/build/planner/src/Services/Database.vala"
				_tmp64_ = task;
#line 942 "/run/build/planner/src/Services/Database.vala"
				gee_abstract_collection_add ((GeeAbstractCollection*) _tmp63_, _tmp64_);
#line 4833 "Database.c"
			}
		}
#line 919 "/run/build/planner/src/Services/Database.vala"
		_g_date_time_unref0 (when);
#line 919 "/run/build/planner/src/Services/Database.vala"
		_objects_task_unref0 (task);
#line 4840 "Database.c"
	}
#line 947 "/run/build/planner/src/Services/Database.vala"
	result = all;
#line 947 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 947 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 4848 "Database.c"
}


GeeArrayList*
services_database_get_all_upcoming_tasks (ServicesDatabase* self)
{
	GeeArrayList* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	GeeArrayList* all = NULL;
	GeeArrayList* _tmp4_;
#line 950 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 953 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 953 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE when_date_utc != ''", -1, &_tmp1_, NULL);
#line 953 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 953 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 953 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 955 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 955 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 957 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = gee_array_list_new (OBJECTS_TYPE_TASK, (GBoxedCopyFunc) objects_task_ref, (GDestroyNotify) objects_task_unref, NULL, NULL, NULL);
#line 957 "/run/build/planner/src/Services/Database.vala"
	all = _tmp4_;
#line 959 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 4886 "Database.c"
		sqlite3_stmt* _tmp5_;
		gint _tmp6_;
		ObjectsTask* task = NULL;
		ObjectsTask* _tmp7_;
		ObjectsTask* _tmp8_;
		sqlite3_stmt* _tmp9_;
		ObjectsTask* _tmp10_;
		sqlite3_stmt* _tmp11_;
		ObjectsTask* _tmp12_;
		sqlite3_stmt* _tmp13_;
		ObjectsTask* _tmp14_;
		sqlite3_stmt* _tmp15_;
		ObjectsTask* _tmp16_;
		sqlite3_stmt* _tmp17_;
		ObjectsTask* _tmp18_;
		sqlite3_stmt* _tmp19_;
		ObjectsTask* _tmp20_;
		sqlite3_stmt* _tmp21_;
		ObjectsTask* _tmp22_;
		sqlite3_stmt* _tmp23_;
		ObjectsTask* _tmp24_;
		sqlite3_stmt* _tmp25_;
		ObjectsTask* _tmp26_;
		sqlite3_stmt* _tmp27_;
		const gchar* _tmp28_;
		gchar* _tmp29_;
		ObjectsTask* _tmp30_;
		sqlite3_stmt* _tmp31_;
		const gchar* _tmp32_;
		gchar* _tmp33_;
		ObjectsTask* _tmp34_;
		sqlite3_stmt* _tmp35_;
		const gchar* _tmp36_;
		gchar* _tmp37_;
		ObjectsTask* _tmp38_;
		sqlite3_stmt* _tmp39_;
		const gchar* _tmp40_;
		gchar* _tmp41_;
		ObjectsTask* _tmp42_;
		sqlite3_stmt* _tmp43_;
		const gchar* _tmp44_;
		gchar* _tmp45_;
		ObjectsTask* _tmp46_;
		sqlite3_stmt* _tmp47_;
		const gchar* _tmp48_;
		gchar* _tmp49_;
		GDateTime* when = NULL;
		ObjectsTask* _tmp50_;
		const gchar* _tmp51_;
		GTimeZone* _tmp52_;
		GTimeZone* _tmp53_;
		GDateTime* _tmp54_;
		GDateTime* _tmp55_;
		Utils* _tmp56_;
		GDateTime* _tmp57_;
#line 959 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = stmt;
#line 959 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp5_);
#line 959 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = res;
#line 959 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp6_ == SQLITE_ROW)) {
#line 959 "/run/build/planner/src/Services/Database.vala"
			break;
#line 4952 "Database.c"
		}
#line 960 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = objects_task_new (0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "", "", "", "");
#line 960 "/run/build/planner/src/Services/Database.vala"
		task = _tmp7_;
#line 962 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = task;
#line 962 "/run/build/planner/src/Services/Database.vala"
		_tmp9_ = stmt;
#line 962 "/run/build/planner/src/Services/Database.vala"
		_tmp8_->id = sqlite3_column_int (_tmp9_, 0);
#line 963 "/run/build/planner/src/Services/Database.vala"
		_tmp10_ = task;
#line 963 "/run/build/planner/src/Services/Database.vala"
		_tmp11_ = stmt;
#line 963 "/run/build/planner/src/Services/Database.vala"
		_tmp10_->checked = sqlite3_column_int (_tmp11_, 1);
#line 964 "/run/build/planner/src/Services/Database.vala"
		_tmp12_ = task;
#line 964 "/run/build/planner/src/Services/Database.vala"
		_tmp13_ = stmt;
#line 964 "/run/build/planner/src/Services/Database.vala"
		_tmp12_->project_id = sqlite3_column_int (_tmp13_, 2);
#line 965 "/run/build/planner/src/Services/Database.vala"
		_tmp14_ = task;
#line 965 "/run/build/planner/src/Services/Database.vala"
		_tmp15_ = stmt;
#line 965 "/run/build/planner/src/Services/Database.vala"
		_tmp14_->list_id = sqlite3_column_int (_tmp15_, 3);
#line 966 "/run/build/planner/src/Services/Database.vala"
		_tmp16_ = task;
#line 966 "/run/build/planner/src/Services/Database.vala"
		_tmp17_ = stmt;
#line 966 "/run/build/planner/src/Services/Database.vala"
		_tmp16_->task_order = sqlite3_column_int (_tmp17_, 4);
#line 967 "/run/build/planner/src/Services/Database.vala"
		_tmp18_ = task;
#line 967 "/run/build/planner/src/Services/Database.vala"
		_tmp19_ = stmt;
#line 967 "/run/build/planner/src/Services/Database.vala"
		_tmp18_->is_inbox = sqlite3_column_int (_tmp19_, 5);
#line 968 "/run/build/planner/src/Services/Database.vala"
		_tmp20_ = task;
#line 968 "/run/build/planner/src/Services/Database.vala"
		_tmp21_ = stmt;
#line 968 "/run/build/planner/src/Services/Database.vala"
		_tmp20_->has_reminder = sqlite3_column_int (_tmp21_, 6);
#line 969 "/run/build/planner/src/Services/Database.vala"
		_tmp22_ = task;
#line 969 "/run/build/planner/src/Services/Database.vala"
		_tmp23_ = stmt;
#line 969 "/run/build/planner/src/Services/Database.vala"
		_tmp22_->sidebar_width = sqlite3_column_int (_tmp23_, 7);
#line 970 "/run/build/planner/src/Services/Database.vala"
		_tmp24_ = task;
#line 970 "/run/build/planner/src/Services/Database.vala"
		_tmp25_ = stmt;
#line 970 "/run/build/planner/src/Services/Database.vala"
		_tmp24_->was_notified = sqlite3_column_int (_tmp25_, 8);
#line 971 "/run/build/planner/src/Services/Database.vala"
		_tmp26_ = task;
#line 971 "/run/build/planner/src/Services/Database.vala"
		_tmp27_ = stmt;
#line 971 "/run/build/planner/src/Services/Database.vala"
		_tmp28_ = sqlite3_column_text (_tmp27_, 9);
#line 971 "/run/build/planner/src/Services/Database.vala"
		_tmp29_ = g_strdup (_tmp28_);
#line 971 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp26_->content);
#line 971 "/run/build/planner/src/Services/Database.vala"
		_tmp26_->content = _tmp29_;
#line 972 "/run/build/planner/src/Services/Database.vala"
		_tmp30_ = task;
#line 972 "/run/build/planner/src/Services/Database.vala"
		_tmp31_ = stmt;
#line 972 "/run/build/planner/src/Services/Database.vala"
		_tmp32_ = sqlite3_column_text (_tmp31_, 10);
#line 972 "/run/build/planner/src/Services/Database.vala"
		_tmp33_ = g_strdup (_tmp32_);
#line 972 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp30_->note);
#line 972 "/run/build/planner/src/Services/Database.vala"
		_tmp30_->note = _tmp33_;
#line 973 "/run/build/planner/src/Services/Database.vala"
		_tmp34_ = task;
#line 973 "/run/build/planner/src/Services/Database.vala"
		_tmp35_ = stmt;
#line 973 "/run/build/planner/src/Services/Database.vala"
		_tmp36_ = sqlite3_column_text (_tmp35_, 11);
#line 973 "/run/build/planner/src/Services/Database.vala"
		_tmp37_ = g_strdup (_tmp36_);
#line 973 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp34_->when_date_utc);
#line 973 "/run/build/planner/src/Services/Database.vala"
		_tmp34_->when_date_utc = _tmp37_;
#line 974 "/run/build/planner/src/Services/Database.vala"
		_tmp38_ = task;
#line 974 "/run/build/planner/src/Services/Database.vala"
		_tmp39_ = stmt;
#line 974 "/run/build/planner/src/Services/Database.vala"
		_tmp40_ = sqlite3_column_text (_tmp39_, 12);
#line 974 "/run/build/planner/src/Services/Database.vala"
		_tmp41_ = g_strdup (_tmp40_);
#line 974 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp38_->reminder_time);
#line 974 "/run/build/planner/src/Services/Database.vala"
		_tmp38_->reminder_time = _tmp41_;
#line 975 "/run/build/planner/src/Services/Database.vala"
		_tmp42_ = task;
#line 975 "/run/build/planner/src/Services/Database.vala"
		_tmp43_ = stmt;
#line 975 "/run/build/planner/src/Services/Database.vala"
		_tmp44_ = sqlite3_column_text (_tmp43_, 13);
#line 975 "/run/build/planner/src/Services/Database.vala"
		_tmp45_ = g_strdup (_tmp44_);
#line 975 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp42_->checklist);
#line 975 "/run/build/planner/src/Services/Database.vala"
		_tmp42_->checklist = _tmp45_;
#line 976 "/run/build/planner/src/Services/Database.vala"
		_tmp46_ = task;
#line 976 "/run/build/planner/src/Services/Database.vala"
		_tmp47_ = stmt;
#line 976 "/run/build/planner/src/Services/Database.vala"
		_tmp48_ = sqlite3_column_text (_tmp47_, 14);
#line 976 "/run/build/planner/src/Services/Database.vala"
		_tmp49_ = g_strdup (_tmp48_);
#line 976 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp46_->labels);
#line 976 "/run/build/planner/src/Services/Database.vala"
		_tmp46_->labels = _tmp49_;
#line 978 "/run/build/planner/src/Services/Database.vala"
		_tmp50_ = task;
#line 978 "/run/build/planner/src/Services/Database.vala"
		_tmp51_ = _tmp50_->when_date_utc;
#line 978 "/run/build/planner/src/Services/Database.vala"
		_tmp52_ = g_time_zone_new_local ();
#line 978 "/run/build/planner/src/Services/Database.vala"
		_tmp53_ = _tmp52_;
#line 978 "/run/build/planner/src/Services/Database.vala"
		_tmp54_ = g_date_time_new_from_iso8601 (_tmp51_, _tmp53_);
#line 978 "/run/build/planner/src/Services/Database.vala"
		_tmp55_ = _tmp54_;
#line 978 "/run/build/planner/src/Services/Database.vala"
		_g_time_zone_unref0 (_tmp53_);
#line 978 "/run/build/planner/src/Services/Database.vala"
		when = _tmp55_;
#line 980 "/run/build/planner/src/Services/Database.vala"
		_tmp56_ = application_utils;
#line 980 "/run/build/planner/src/Services/Database.vala"
		_tmp57_ = when;
#line 980 "/run/build/planner/src/Services/Database.vala"
		if (utils_is_upcoming (_tmp56_, _tmp57_)) {
#line 5106 "Database.c"
			GeeArrayList* _tmp58_;
			ObjectsTask* _tmp59_;
#line 981 "/run/build/planner/src/Services/Database.vala"
			_tmp58_ = all;
#line 981 "/run/build/planner/src/Services/Database.vala"
			_tmp59_ = task;
#line 981 "/run/build/planner/src/Services/Database.vala"
			gee_abstract_collection_add ((GeeAbstractCollection*) _tmp58_, _tmp59_);
#line 5115 "Database.c"
		}
#line 959 "/run/build/planner/src/Services/Database.vala"
		_g_date_time_unref0 (when);
#line 959 "/run/build/planner/src/Services/Database.vala"
		_objects_task_unref0 (task);
#line 5121 "Database.c"
	}
#line 985 "/run/build/planner/src/Services/Database.vala"
	result = all;
#line 985 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 985 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 5129 "Database.c"
}


GeeArrayList*
services_database_get_all_reminder_tasks (ServicesDatabase* self)
{
	GeeArrayList* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	GeeArrayList* all = NULL;
	GeeArrayList* _tmp4_;
#line 988 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 991 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 991 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE has_reminder = 1 AND was_notified = 0", -1, &_tmp1_, NULL);
#line 991 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 991 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 991 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 993 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 993 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 995 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = gee_array_list_new (OBJECTS_TYPE_TASK, (GBoxedCopyFunc) objects_task_ref, (GDestroyNotify) objects_task_unref, NULL, NULL, NULL);
#line 995 "/run/build/planner/src/Services/Database.vala"
	all = _tmp4_;
#line 997 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 5167 "Database.c"
		sqlite3_stmt* _tmp5_;
		gint _tmp6_;
		ObjectsTask* task = NULL;
		ObjectsTask* _tmp7_;
		ObjectsTask* _tmp8_;
		sqlite3_stmt* _tmp9_;
		ObjectsTask* _tmp10_;
		sqlite3_stmt* _tmp11_;
		ObjectsTask* _tmp12_;
		sqlite3_stmt* _tmp13_;
		ObjectsTask* _tmp14_;
		sqlite3_stmt* _tmp15_;
		ObjectsTask* _tmp16_;
		sqlite3_stmt* _tmp17_;
		ObjectsTask* _tmp18_;
		sqlite3_stmt* _tmp19_;
		ObjectsTask* _tmp20_;
		sqlite3_stmt* _tmp21_;
		ObjectsTask* _tmp22_;
		sqlite3_stmt* _tmp23_;
		ObjectsTask* _tmp24_;
		sqlite3_stmt* _tmp25_;
		ObjectsTask* _tmp26_;
		sqlite3_stmt* _tmp27_;
		const gchar* _tmp28_;
		gchar* _tmp29_;
		ObjectsTask* _tmp30_;
		sqlite3_stmt* _tmp31_;
		const gchar* _tmp32_;
		gchar* _tmp33_;
		ObjectsTask* _tmp34_;
		sqlite3_stmt* _tmp35_;
		const gchar* _tmp36_;
		gchar* _tmp37_;
		ObjectsTask* _tmp38_;
		sqlite3_stmt* _tmp39_;
		const gchar* _tmp40_;
		gchar* _tmp41_;
		ObjectsTask* _tmp42_;
		sqlite3_stmt* _tmp43_;
		const gchar* _tmp44_;
		gchar* _tmp45_;
		ObjectsTask* _tmp46_;
		sqlite3_stmt* _tmp47_;
		const gchar* _tmp48_;
		gchar* _tmp49_;
		GeeArrayList* _tmp50_;
		ObjectsTask* _tmp51_;
#line 997 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = stmt;
#line 997 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp5_);
#line 997 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = res;
#line 997 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp6_ == SQLITE_ROW)) {
#line 997 "/run/build/planner/src/Services/Database.vala"
			break;
#line 5226 "Database.c"
		}
#line 998 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = objects_task_new (0, 0, 0, 0, 0, 0, 0, 0, 0, "", "", "", "", "", "");
#line 998 "/run/build/planner/src/Services/Database.vala"
		task = _tmp7_;
#line 1000 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = task;
#line 1000 "/run/build/planner/src/Services/Database.vala"
		_tmp9_ = stmt;
#line 1000 "/run/build/planner/src/Services/Database.vala"
		_tmp8_->id = sqlite3_column_int (_tmp9_, 0);
#line 1001 "/run/build/planner/src/Services/Database.vala"
		_tmp10_ = task;
#line 1001 "/run/build/planner/src/Services/Database.vala"
		_tmp11_ = stmt;
#line 1001 "/run/build/planner/src/Services/Database.vala"
		_tmp10_->checked = sqlite3_column_int (_tmp11_, 1);
#line 1002 "/run/build/planner/src/Services/Database.vala"
		_tmp12_ = task;
#line 1002 "/run/build/planner/src/Services/Database.vala"
		_tmp13_ = stmt;
#line 1002 "/run/build/planner/src/Services/Database.vala"
		_tmp12_->project_id = sqlite3_column_int (_tmp13_, 2);
#line 1003 "/run/build/planner/src/Services/Database.vala"
		_tmp14_ = task;
#line 1003 "/run/build/planner/src/Services/Database.vala"
		_tmp15_ = stmt;
#line 1003 "/run/build/planner/src/Services/Database.vala"
		_tmp14_->list_id = sqlite3_column_int (_tmp15_, 3);
#line 1004 "/run/build/planner/src/Services/Database.vala"
		_tmp16_ = task;
#line 1004 "/run/build/planner/src/Services/Database.vala"
		_tmp17_ = stmt;
#line 1004 "/run/build/planner/src/Services/Database.vala"
		_tmp16_->task_order = sqlite3_column_int (_tmp17_, 4);
#line 1005 "/run/build/planner/src/Services/Database.vala"
		_tmp18_ = task;
#line 1005 "/run/build/planner/src/Services/Database.vala"
		_tmp19_ = stmt;
#line 1005 "/run/build/planner/src/Services/Database.vala"
		_tmp18_->is_inbox = sqlite3_column_int (_tmp19_, 5);
#line 1006 "/run/build/planner/src/Services/Database.vala"
		_tmp20_ = task;
#line 1006 "/run/build/planner/src/Services/Database.vala"
		_tmp21_ = stmt;
#line 1006 "/run/build/planner/src/Services/Database.vala"
		_tmp20_->has_reminder = sqlite3_column_int (_tmp21_, 6);
#line 1007 "/run/build/planner/src/Services/Database.vala"
		_tmp22_ = task;
#line 1007 "/run/build/planner/src/Services/Database.vala"
		_tmp23_ = stmt;
#line 1007 "/run/build/planner/src/Services/Database.vala"
		_tmp22_->sidebar_width = sqlite3_column_int (_tmp23_, 7);
#line 1008 "/run/build/planner/src/Services/Database.vala"
		_tmp24_ = task;
#line 1008 "/run/build/planner/src/Services/Database.vala"
		_tmp25_ = stmt;
#line 1008 "/run/build/planner/src/Services/Database.vala"
		_tmp24_->was_notified = sqlite3_column_int (_tmp25_, 8);
#line 1009 "/run/build/planner/src/Services/Database.vala"
		_tmp26_ = task;
#line 1009 "/run/build/planner/src/Services/Database.vala"
		_tmp27_ = stmt;
#line 1009 "/run/build/planner/src/Services/Database.vala"
		_tmp28_ = sqlite3_column_text (_tmp27_, 9);
#line 1009 "/run/build/planner/src/Services/Database.vala"
		_tmp29_ = g_strdup (_tmp28_);
#line 1009 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp26_->content);
#line 1009 "/run/build/planner/src/Services/Database.vala"
		_tmp26_->content = _tmp29_;
#line 1010 "/run/build/planner/src/Services/Database.vala"
		_tmp30_ = task;
#line 1010 "/run/build/planner/src/Services/Database.vala"
		_tmp31_ = stmt;
#line 1010 "/run/build/planner/src/Services/Database.vala"
		_tmp32_ = sqlite3_column_text (_tmp31_, 10);
#line 1010 "/run/build/planner/src/Services/Database.vala"
		_tmp33_ = g_strdup (_tmp32_);
#line 1010 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp30_->note);
#line 1010 "/run/build/planner/src/Services/Database.vala"
		_tmp30_->note = _tmp33_;
#line 1011 "/run/build/planner/src/Services/Database.vala"
		_tmp34_ = task;
#line 1011 "/run/build/planner/src/Services/Database.vala"
		_tmp35_ = stmt;
#line 1011 "/run/build/planner/src/Services/Database.vala"
		_tmp36_ = sqlite3_column_text (_tmp35_, 11);
#line 1011 "/run/build/planner/src/Services/Database.vala"
		_tmp37_ = g_strdup (_tmp36_);
#line 1011 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp34_->when_date_utc);
#line 1011 "/run/build/planner/src/Services/Database.vala"
		_tmp34_->when_date_utc = _tmp37_;
#line 1012 "/run/build/planner/src/Services/Database.vala"
		_tmp38_ = task;
#line 1012 "/run/build/planner/src/Services/Database.vala"
		_tmp39_ = stmt;
#line 1012 "/run/build/planner/src/Services/Database.vala"
		_tmp40_ = sqlite3_column_text (_tmp39_, 12);
#line 1012 "/run/build/planner/src/Services/Database.vala"
		_tmp41_ = g_strdup (_tmp40_);
#line 1012 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp38_->reminder_time);
#line 1012 "/run/build/planner/src/Services/Database.vala"
		_tmp38_->reminder_time = _tmp41_;
#line 1013 "/run/build/planner/src/Services/Database.vala"
		_tmp42_ = task;
#line 1013 "/run/build/planner/src/Services/Database.vala"
		_tmp43_ = stmt;
#line 1013 "/run/build/planner/src/Services/Database.vala"
		_tmp44_ = sqlite3_column_text (_tmp43_, 13);
#line 1013 "/run/build/planner/src/Services/Database.vala"
		_tmp45_ = g_strdup (_tmp44_);
#line 1013 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp42_->checklist);
#line 1013 "/run/build/planner/src/Services/Database.vala"
		_tmp42_->checklist = _tmp45_;
#line 1014 "/run/build/planner/src/Services/Database.vala"
		_tmp46_ = task;
#line 1014 "/run/build/planner/src/Services/Database.vala"
		_tmp47_ = stmt;
#line 1014 "/run/build/planner/src/Services/Database.vala"
		_tmp48_ = sqlite3_column_text (_tmp47_, 14);
#line 1014 "/run/build/planner/src/Services/Database.vala"
		_tmp49_ = g_strdup (_tmp48_);
#line 1014 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp46_->labels);
#line 1014 "/run/build/planner/src/Services/Database.vala"
		_tmp46_->labels = _tmp49_;
#line 1016 "/run/build/planner/src/Services/Database.vala"
		_tmp50_ = all;
#line 1016 "/run/build/planner/src/Services/Database.vala"
		_tmp51_ = task;
#line 1016 "/run/build/planner/src/Services/Database.vala"
		gee_abstract_collection_add ((GeeAbstractCollection*) _tmp50_, _tmp51_);
#line 997 "/run/build/planner/src/Services/Database.vala"
		_objects_task_unref0 (task);
#line 5366 "Database.c"
	}
#line 1019 "/run/build/planner/src/Services/Database.vala"
	result = all;
#line 1019 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1019 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 5374 "Database.c"
}


gint
services_database_get_all_completed_tasks (ServicesDatabase* self)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	gint count = 0;
#line 1023 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 1026 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 1026 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE checked = 1", -1, &_tmp1_, NULL);
#line 1026 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1026 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 1026 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 1028 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 1028 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 1030 "/run/build/planner/src/Services/Database.vala"
	count = 0;
#line 1031 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 5409 "Database.c"
		sqlite3_stmt* _tmp4_;
		gint _tmp5_;
		gint _tmp6_;
#line 1031 "/run/build/planner/src/Services/Database.vala"
		_tmp4_ = stmt;
#line 1031 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp4_);
#line 1031 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = res;
#line 1031 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp5_ == SQLITE_ROW)) {
#line 1031 "/run/build/planner/src/Services/Database.vala"
			break;
#line 5423 "Database.c"
		}
#line 1032 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = count;
#line 1032 "/run/build/planner/src/Services/Database.vala"
		count = _tmp6_ + 1;
#line 5429 "Database.c"
	}
#line 1035 "/run/build/planner/src/Services/Database.vala"
	result = count;
#line 1035 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1035 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 5437 "Database.c"
}


gint
services_database_get_all_todo_tasks (ServicesDatabase* self)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	gint count = 0;
#line 1038 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 1041 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 1041 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE checked = 0", -1, &_tmp1_, NULL);
#line 1041 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1041 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 1041 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 1043 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 1043 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 1045 "/run/build/planner/src/Services/Database.vala"
	count = 0;
#line 1046 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 5472 "Database.c"
		sqlite3_stmt* _tmp4_;
		gint _tmp5_;
		gint _tmp6_;
#line 1046 "/run/build/planner/src/Services/Database.vala"
		_tmp4_ = stmt;
#line 1046 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp4_);
#line 1046 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = res;
#line 1046 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp5_ == SQLITE_ROW)) {
#line 1046 "/run/build/planner/src/Services/Database.vala"
			break;
#line 5486 "Database.c"
		}
#line 1047 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = count;
#line 1047 "/run/build/planner/src/Services/Database.vala"
		count = _tmp6_ + 1;
#line 5492 "Database.c"
	}
#line 1050 "/run/build/planner/src/Services/Database.vala"
	result = count;
#line 1050 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1050 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 5500 "Database.c"
}


gint
services_database_get_all_tasks (ServicesDatabase* self)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	gint count = 0;
#line 1053 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 1056 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 1056 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS", -1, &_tmp1_, NULL);
#line 1056 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1056 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 1056 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 1058 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 1058 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 1060 "/run/build/planner/src/Services/Database.vala"
	count = 0;
#line 1061 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 5535 "Database.c"
		sqlite3_stmt* _tmp4_;
		gint _tmp5_;
		gint _tmp6_;
#line 1061 "/run/build/planner/src/Services/Database.vala"
		_tmp4_ = stmt;
#line 1061 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp4_);
#line 1061 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = res;
#line 1061 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp5_ == SQLITE_ROW)) {
#line 1061 "/run/build/planner/src/Services/Database.vala"
			break;
#line 5549 "Database.c"
		}
#line 1062 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = count;
#line 1062 "/run/build/planner/src/Services/Database.vala"
		count = _tmp6_ + 1;
#line 5555 "Database.c"
	}
#line 1065 "/run/build/planner/src/Services/Database.vala"
	result = count;
#line 1065 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1065 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 5563 "Database.c"
}


gint
services_database_get_inbox_number (ServicesDatabase* self)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	gint count = 0;
#line 1068 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 1071 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 1071 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE is_inbox = 1 and checked = 0 AND when_date_u" \
"tc = ''", -1, &_tmp1_, NULL);
#line 1071 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1071 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 1071 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 1073 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 1073 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 1075 "/run/build/planner/src/Services/Database.vala"
	count = 0;
#line 1076 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 5598 "Database.c"
		sqlite3_stmt* _tmp4_;
		gint _tmp5_;
		gint _tmp6_;
#line 1076 "/run/build/planner/src/Services/Database.vala"
		_tmp4_ = stmt;
#line 1076 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp4_);
#line 1076 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = res;
#line 1076 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp5_ == SQLITE_ROW)) {
#line 1076 "/run/build/planner/src/Services/Database.vala"
			break;
#line 5612 "Database.c"
		}
#line 1077 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = count;
#line 1077 "/run/build/planner/src/Services/Database.vala"
		count = _tmp6_ + 1;
#line 5618 "Database.c"
	}
#line 1080 "/run/build/planner/src/Services/Database.vala"
	result = count;
#line 1080 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1080 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 5626 "Database.c"
}


gint
services_database_get_today_number (ServicesDatabase* self)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	gint count = 0;
#line 1083 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 1086 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 1086 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE checked = 0 AND when_date_utc != ''", -1, &_tmp1_, NULL);
#line 1086 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1086 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 1086 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 1088 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 1088 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 1090 "/run/build/planner/src/Services/Database.vala"
	count = 0;
#line 1091 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 5661 "Database.c"
		sqlite3_stmt* _tmp4_;
		gint _tmp5_;
		GDateTime* when = NULL;
		sqlite3_stmt* _tmp6_;
		const gchar* _tmp7_;
		GTimeZone* _tmp8_;
		GTimeZone* _tmp9_;
		GDateTime* _tmp10_;
		GDateTime* _tmp11_;
		Utils* _tmp12_;
		GDateTime* _tmp13_;
#line 1091 "/run/build/planner/src/Services/Database.vala"
		_tmp4_ = stmt;
#line 1091 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp4_);
#line 1091 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = res;
#line 1091 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp5_ == SQLITE_ROW)) {
#line 1091 "/run/build/planner/src/Services/Database.vala"
			break;
#line 5683 "Database.c"
		}
#line 1092 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = stmt;
#line 1092 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = sqlite3_column_text (_tmp6_, 11);
#line 1092 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = g_time_zone_new_local ();
#line 1092 "/run/build/planner/src/Services/Database.vala"
		_tmp9_ = _tmp8_;
#line 1092 "/run/build/planner/src/Services/Database.vala"
		_tmp10_ = g_date_time_new_from_iso8601 (_tmp7_, _tmp9_);
#line 1092 "/run/build/planner/src/Services/Database.vala"
		_tmp11_ = _tmp10_;
#line 1092 "/run/build/planner/src/Services/Database.vala"
		_g_time_zone_unref0 (_tmp9_);
#line 1092 "/run/build/planner/src/Services/Database.vala"
		when = _tmp11_;
#line 1094 "/run/build/planner/src/Services/Database.vala"
		_tmp12_ = application_utils;
#line 1094 "/run/build/planner/src/Services/Database.vala"
		_tmp13_ = when;
#line 1094 "/run/build/planner/src/Services/Database.vala"
		if (utils_is_today (_tmp12_, _tmp13_)) {
#line 5707 "Database.c"
			gint _tmp14_;
#line 1095 "/run/build/planner/src/Services/Database.vala"
			_tmp14_ = count;
#line 1095 "/run/build/planner/src/Services/Database.vala"
			count = _tmp14_ + 1;
#line 5713 "Database.c"
		}
#line 1091 "/run/build/planner/src/Services/Database.vala"
		_g_date_time_unref0 (when);
#line 5717 "Database.c"
	}
#line 1099 "/run/build/planner/src/Services/Database.vala"
	result = count;
#line 1099 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1099 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 5725 "Database.c"
}


gint
services_database_get_before_today_number (ServicesDatabase* self)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	gint count = 0;
#line 1102 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 1105 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 1105 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE checked = 0 AND when_date_utc != ''", -1, &_tmp1_, NULL);
#line 1105 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1105 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 1105 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 1107 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 1107 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 1109 "/run/build/planner/src/Services/Database.vala"
	count = 0;
#line 1110 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 5760 "Database.c"
		sqlite3_stmt* _tmp4_;
		gint _tmp5_;
		GDateTime* when = NULL;
		sqlite3_stmt* _tmp6_;
		const gchar* _tmp7_;
		GTimeZone* _tmp8_;
		GTimeZone* _tmp9_;
		GDateTime* _tmp10_;
		GDateTime* _tmp11_;
		gboolean _tmp12_ = FALSE;
		gboolean _tmp13_ = FALSE;
		Utils* _tmp14_;
		GDateTime* _tmp15_;
#line 1110 "/run/build/planner/src/Services/Database.vala"
		_tmp4_ = stmt;
#line 1110 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp4_);
#line 1110 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = res;
#line 1110 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp5_ == SQLITE_ROW)) {
#line 1110 "/run/build/planner/src/Services/Database.vala"
			break;
#line 5784 "Database.c"
		}
#line 1111 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = stmt;
#line 1111 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = sqlite3_column_text (_tmp6_, 11);
#line 1111 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = g_time_zone_new_local ();
#line 1111 "/run/build/planner/src/Services/Database.vala"
		_tmp9_ = _tmp8_;
#line 1111 "/run/build/planner/src/Services/Database.vala"
		_tmp10_ = g_date_time_new_from_iso8601 (_tmp7_, _tmp9_);
#line 1111 "/run/build/planner/src/Services/Database.vala"
		_tmp11_ = _tmp10_;
#line 1111 "/run/build/planner/src/Services/Database.vala"
		_g_time_zone_unref0 (_tmp9_);
#line 1111 "/run/build/planner/src/Services/Database.vala"
		when = _tmp11_;
#line 1113 "/run/build/planner/src/Services/Database.vala"
		_tmp14_ = application_utils;
#line 1113 "/run/build/planner/src/Services/Database.vala"
		_tmp15_ = when;
#line 1113 "/run/build/planner/src/Services/Database.vala"
		if (utils_is_before_today (_tmp14_, _tmp15_)) {
#line 5808 "Database.c"
			Utils* _tmp16_;
			GDateTime* _tmp17_;
#line 1113 "/run/build/planner/src/Services/Database.vala"
			_tmp16_ = application_utils;
#line 1113 "/run/build/planner/src/Services/Database.vala"
			_tmp17_ = when;
#line 1113 "/run/build/planner/src/Services/Database.vala"
			_tmp13_ = utils_is_today (_tmp16_, _tmp17_) == FALSE;
#line 5817 "Database.c"
		} else {
#line 1113 "/run/build/planner/src/Services/Database.vala"
			_tmp13_ = FALSE;
#line 5821 "Database.c"
		}
#line 1113 "/run/build/planner/src/Services/Database.vala"
		if (_tmp13_) {
#line 5825 "Database.c"
			sqlite3_stmt* _tmp18_;
#line 1113 "/run/build/planner/src/Services/Database.vala"
			_tmp18_ = stmt;
#line 1113 "/run/build/planner/src/Services/Database.vala"
			_tmp12_ = sqlite3_column_int (_tmp18_, 1) == 0;
#line 5831 "Database.c"
		} else {
#line 1113 "/run/build/planner/src/Services/Database.vala"
			_tmp12_ = FALSE;
#line 5835 "Database.c"
		}
#line 1113 "/run/build/planner/src/Services/Database.vala"
		if (_tmp12_) {
#line 5839 "Database.c"
			gint _tmp19_;
#line 1114 "/run/build/planner/src/Services/Database.vala"
			_tmp19_ = count;
#line 1114 "/run/build/planner/src/Services/Database.vala"
			count = _tmp19_ + 1;
#line 5845 "Database.c"
		}
#line 1110 "/run/build/planner/src/Services/Database.vala"
		_g_date_time_unref0 (when);
#line 5849 "Database.c"
	}
#line 1118 "/run/build/planner/src/Services/Database.vala"
	result = count;
#line 1118 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1118 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 5857 "Database.c"
}


gint
services_database_get_upcoming_number (ServicesDatabase* self)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	gint count = 0;
#line 1121 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 1124 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 1124 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM TASKS WHERE checked = 0 AND when_date_utc != ''", -1, &_tmp1_, NULL);
#line 1124 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1124 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 1124 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 1126 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 1126 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 1128 "/run/build/planner/src/Services/Database.vala"
	count = 0;
#line 1129 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 5892 "Database.c"
		sqlite3_stmt* _tmp4_;
		gint _tmp5_;
		GDateTime* when = NULL;
		sqlite3_stmt* _tmp6_;
		const gchar* _tmp7_;
		GTimeZone* _tmp8_;
		GTimeZone* _tmp9_;
		GDateTime* _tmp10_;
		GDateTime* _tmp11_;
		gboolean _tmp12_ = FALSE;
		Utils* _tmp13_;
		GDateTime* _tmp14_;
#line 1129 "/run/build/planner/src/Services/Database.vala"
		_tmp4_ = stmt;
#line 1129 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp4_);
#line 1129 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = res;
#line 1129 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp5_ == SQLITE_ROW)) {
#line 1129 "/run/build/planner/src/Services/Database.vala"
			break;
#line 5915 "Database.c"
		}
#line 1130 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = stmt;
#line 1130 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = sqlite3_column_text (_tmp6_, 11);
#line 1130 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = g_time_zone_new_local ();
#line 1130 "/run/build/planner/src/Services/Database.vala"
		_tmp9_ = _tmp8_;
#line 1130 "/run/build/planner/src/Services/Database.vala"
		_tmp10_ = g_date_time_new_from_iso8601 (_tmp7_, _tmp9_);
#line 1130 "/run/build/planner/src/Services/Database.vala"
		_tmp11_ = _tmp10_;
#line 1130 "/run/build/planner/src/Services/Database.vala"
		_g_time_zone_unref0 (_tmp9_);
#line 1130 "/run/build/planner/src/Services/Database.vala"
		when = _tmp11_;
#line 1132 "/run/build/planner/src/Services/Database.vala"
		_tmp13_ = application_utils;
#line 1132 "/run/build/planner/src/Services/Database.vala"
		_tmp14_ = when;
#line 1132 "/run/build/planner/src/Services/Database.vala"
		if (utils_is_today (_tmp13_, _tmp14_) == FALSE) {
#line 5939 "Database.c"
			Utils* _tmp15_;
			GDateTime* _tmp16_;
#line 1132 "/run/build/planner/src/Services/Database.vala"
			_tmp15_ = application_utils;
#line 1132 "/run/build/planner/src/Services/Database.vala"
			_tmp16_ = when;
#line 1132 "/run/build/planner/src/Services/Database.vala"
			_tmp12_ = utils_is_before_today (_tmp15_, _tmp16_) == FALSE;
#line 5948 "Database.c"
		} else {
#line 1132 "/run/build/planner/src/Services/Database.vala"
			_tmp12_ = FALSE;
#line 5952 "Database.c"
		}
#line 1132 "/run/build/planner/src/Services/Database.vala"
		if (_tmp12_) {
#line 5956 "Database.c"
			gint _tmp17_;
#line 1133 "/run/build/planner/src/Services/Database.vala"
			_tmp17_ = count;
#line 1133 "/run/build/planner/src/Services/Database.vala"
			count = _tmp17_ + 1;
#line 5962 "Database.c"
		}
#line 1129 "/run/build/planner/src/Services/Database.vala"
		_g_date_time_unref0 (when);
#line 5966 "Database.c"
	}
#line 1137 "/run/build/planner/src/Services/Database.vala"
	result = count;
#line 1137 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1137 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 5974 "Database.c"
}


gint
services_database_get_all_tasks_number (ServicesDatabase* self)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint count = 0;
#line 1140 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 1143 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 1143 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT COUNT (*) FROM TASKS", -1, &_tmp1_, NULL);
#line 1143 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1143 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 1143 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 1145 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (res == SQLITE_OK, "res == Sqlite.OK");
#line 1147 "/run/build/planner/src/Services/Database.vala"
	sqlite3_step (stmt);
#line 1149 "/run/build/planner/src/Services/Database.vala"
	count = 0;
#line 1150 "/run/build/planner/src/Services/Database.vala"
	count = sqlite3_column_int (stmt, 0);
#line 1152 "/run/build/planner/src/Services/Database.vala"
	result = count;
#line 1152 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1152 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 6014 "Database.c"
}


gint
services_database_get_completed_number (ServicesDatabase* self)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint count = 0;
#line 1155 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 1158 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 1158 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT COUNT (*) FROM TASKS WHERE checked = 1", -1, &_tmp1_, NULL);
#line 1158 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1158 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 1158 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 1160 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (res == SQLITE_OK, "res == Sqlite.OK");
#line 1162 "/run/build/planner/src/Services/Database.vala"
	sqlite3_step (stmt);
#line 1164 "/run/build/planner/src/Services/Database.vala"
	count = 0;
#line 1165 "/run/build/planner/src/Services/Database.vala"
	count = sqlite3_column_int (stmt, 0);
#line 1167 "/run/build/planner/src/Services/Database.vala"
	result = count;
#line 1167 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1167 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 6054 "Database.c"
}


gint
services_database_add_label (ServicesDatabase* self,
                             ObjectsLabel* label)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	GDestroyNotify _tmp6_;
	gint _tmp7_;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	GDestroyNotify _tmp10_;
	gint _tmp11_;
#line 1170 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 1170 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (label != NULL, 0);
#line 1173 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 1173 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "INSERT INTO LABELS (name," "color)" "VALUES (?, ?)", -1, &_tmp1_, NULL);
#line 1173 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1173 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 1173 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 1176 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 1176 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 1178 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = label->name;
#line 1178 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = g_strdup (_tmp4_);
#line 1178 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = g_free;
#line 1178 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (stmt, 1, _tmp5_, -1, _tmp6_);
#line 1179 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = res;
#line 1179 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp7_ == SQLITE_OK, "res == Sqlite.OK");
#line 1181 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = label->color;
#line 1181 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = g_strdup (_tmp8_);
#line 1181 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = g_free;
#line 1181 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (stmt, 2, _tmp9_, -1, _tmp10_);
#line 1182 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = res;
#line 1182 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp11_ == SQLITE_OK, "res == Sqlite.OK");
#line 1184 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_step (stmt);
#line 1186 "/run/build/planner/src/Services/Database.vala"
	result = res;
#line 1186 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1186 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 6127 "Database.c"
}


gint
services_database_update_label (ServicesDatabase* self,
                                ObjectsLabel* label)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	GDestroyNotify _tmp6_;
	gint _tmp7_;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	GDestroyNotify _tmp10_;
	gint _tmp11_;
	gint _tmp12_;
	gint _tmp13_;
#line 1189 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 1189 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (label != NULL, 0);
#line 1192 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 1192 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "UPDATE LABELS SET name = ?, " "color = ? WHERE id = ?", -1, &_tmp1_, NULL);
#line 1192 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1192 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 1192 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 1194 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 1194 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 1196 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = label->name;
#line 1196 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = g_strdup (_tmp4_);
#line 1196 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = g_free;
#line 1196 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (stmt, 1, _tmp5_, -1, _tmp6_);
#line 1197 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = res;
#line 1197 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp7_ == SQLITE_OK, "res == Sqlite.OK");
#line 1199 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = label->color;
#line 1199 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = g_strdup (_tmp8_);
#line 1199 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = g_free;
#line 1199 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (stmt, 2, _tmp9_, -1, _tmp10_);
#line 1200 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = res;
#line 1200 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp11_ == SQLITE_OK, "res == Sqlite.OK");
#line 1202 "/run/build/planner/src/Services/Database.vala"
	_tmp12_ = label->id;
#line 1202 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (stmt, 3, _tmp12_);
#line 1203 "/run/build/planner/src/Services/Database.vala"
	_tmp13_ = res;
#line 1203 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp13_ == SQLITE_OK, "res == Sqlite.OK");
#line 1205 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_step (stmt);
#line 1207 "/run/build/planner/src/Services/Database.vala"
	result = res;
#line 1207 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1207 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 6210 "Database.c"
}


gint
services_database_remove_label (ServicesDatabase* self,
                                ObjectsLabel* label)
{
	gint result = 0;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	gint _tmp4_;
	gint _tmp5_;
#line 1210 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, 0);
#line 1210 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (label != NULL, 0);
#line 1213 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 1213 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "DELETE FROM LABELS " "WHERE id = ?", -1, &_tmp1_, NULL);
#line 1213 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1213 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 1213 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 1215 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 1215 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 1217 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = label->id;
#line 1217 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_int (stmt, 1, _tmp4_);
#line 1218 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = res;
#line 1218 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp5_ == SQLITE_OK, "res == Sqlite.OK");
#line 1220 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_step (stmt);
#line 1222 "/run/build/planner/src/Services/Database.vala"
	result = res;
#line 1222 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1222 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 6261 "Database.c"
}


ObjectsLabel*
services_database_get_label (ServicesDatabase* self,
                             const gchar* id)
{
	ObjectsLabel* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	gchar* _tmp4_;
	GDestroyNotify _tmp5_;
	gint _tmp6_;
	ObjectsLabel* label = NULL;
	ObjectsLabel* _tmp7_;
	const gchar* _tmp8_;
	gchar* _tmp9_;
	const gchar* _tmp10_;
	gchar* _tmp11_;
#line 1225 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 1225 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (id != NULL, NULL);
#line 1228 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 1228 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM LABELS WHERE id = ?", -1, &_tmp1_, NULL);
#line 1228 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1228 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 1228 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 1229 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 1229 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 1231 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = g_strdup (id);
#line 1231 "/run/build/planner/src/Services/Database.vala"
	_tmp5_ = g_free;
#line 1231 "/run/build/planner/src/Services/Database.vala"
	res = sqlite3_bind_text (stmt, 1, _tmp4_, -1, _tmp5_);
#line 1232 "/run/build/planner/src/Services/Database.vala"
	_tmp6_ = res;
#line 1232 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp6_ == SQLITE_OK, "res == Sqlite.OK");
#line 1234 "/run/build/planner/src/Services/Database.vala"
	sqlite3_step (stmt);
#line 1236 "/run/build/planner/src/Services/Database.vala"
	_tmp7_ = objects_label_new (0, "", "");
#line 1236 "/run/build/planner/src/Services/Database.vala"
	label = _tmp7_;
#line 1238 "/run/build/planner/src/Services/Database.vala"
	label->id = sqlite3_column_int (stmt, 0);
#line 1239 "/run/build/planner/src/Services/Database.vala"
	_tmp8_ = sqlite3_column_text (stmt, 1);
#line 1239 "/run/build/planner/src/Services/Database.vala"
	_tmp9_ = g_strdup (_tmp8_);
#line 1239 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (label->name);
#line 1239 "/run/build/planner/src/Services/Database.vala"
	label->name = _tmp9_;
#line 1240 "/run/build/planner/src/Services/Database.vala"
	_tmp10_ = sqlite3_column_text (stmt, 2);
#line 1240 "/run/build/planner/src/Services/Database.vala"
	_tmp11_ = g_strdup (_tmp10_);
#line 1240 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (label->color);
#line 1240 "/run/build/planner/src/Services/Database.vala"
	label->color = _tmp11_;
#line 1242 "/run/build/planner/src/Services/Database.vala"
	result = label;
#line 1242 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1242 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 6343 "Database.c"
}


GeeArrayList*
services_database_get_all_labels (ServicesDatabase* self)
{
	GeeArrayList* result = NULL;
	sqlite3_stmt* stmt = NULL;
	gint res = 0;
	sqlite3* _tmp0_;
	sqlite3_stmt* _tmp1_ = NULL;
	gint _tmp2_;
	gint _tmp3_;
	GeeArrayList* all = NULL;
	GeeArrayList* _tmp4_;
#line 1245 "/run/build/planner/src/Services/Database.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 1248 "/run/build/planner/src/Services/Database.vala"
	_tmp0_ = self->priv->db;
#line 1248 "/run/build/planner/src/Services/Database.vala"
	_tmp2_ = sqlite3_prepare_v2 (_tmp0_, "SELECT * FROM LABELS", -1, &_tmp1_, NULL);
#line 1248 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1248 "/run/build/planner/src/Services/Database.vala"
	stmt = _tmp1_;
#line 1248 "/run/build/planner/src/Services/Database.vala"
	res = _tmp2_;
#line 1250 "/run/build/planner/src/Services/Database.vala"
	_tmp3_ = res;
#line 1250 "/run/build/planner/src/Services/Database.vala"
	_vala_assert (_tmp3_ == SQLITE_OK, "res == Sqlite.OK");
#line 1252 "/run/build/planner/src/Services/Database.vala"
	_tmp4_ = gee_array_list_new (OBJECTS_TYPE_LABEL, (GBoxedCopyFunc) objects_label_ref, (GDestroyNotify) objects_label_unref, NULL, NULL, NULL);
#line 1252 "/run/build/planner/src/Services/Database.vala"
	all = _tmp4_;
#line 1254 "/run/build/planner/src/Services/Database.vala"
	while (TRUE) {
#line 6381 "Database.c"
		sqlite3_stmt* _tmp5_;
		gint _tmp6_;
		ObjectsLabel* label = NULL;
		ObjectsLabel* _tmp7_;
		ObjectsLabel* _tmp8_;
		sqlite3_stmt* _tmp9_;
		ObjectsLabel* _tmp10_;
		sqlite3_stmt* _tmp11_;
		const gchar* _tmp12_;
		gchar* _tmp13_;
		ObjectsLabel* _tmp14_;
		sqlite3_stmt* _tmp15_;
		const gchar* _tmp16_;
		gchar* _tmp17_;
		GeeArrayList* _tmp18_;
		ObjectsLabel* _tmp19_;
#line 1254 "/run/build/planner/src/Services/Database.vala"
		_tmp5_ = stmt;
#line 1254 "/run/build/planner/src/Services/Database.vala"
		res = sqlite3_step (_tmp5_);
#line 1254 "/run/build/planner/src/Services/Database.vala"
		_tmp6_ = res;
#line 1254 "/run/build/planner/src/Services/Database.vala"
		if (!(_tmp6_ == SQLITE_ROW)) {
#line 1254 "/run/build/planner/src/Services/Database.vala"
			break;
#line 6408 "Database.c"
		}
#line 1255 "/run/build/planner/src/Services/Database.vala"
		_tmp7_ = objects_label_new (0, "", "");
#line 1255 "/run/build/planner/src/Services/Database.vala"
		label = _tmp7_;
#line 1257 "/run/build/planner/src/Services/Database.vala"
		_tmp8_ = label;
#line 1257 "/run/build/planner/src/Services/Database.vala"
		_tmp9_ = stmt;
#line 1257 "/run/build/planner/src/Services/Database.vala"
		_tmp8_->id = sqlite3_column_int (_tmp9_, 0);
#line 1258 "/run/build/planner/src/Services/Database.vala"
		_tmp10_ = label;
#line 1258 "/run/build/planner/src/Services/Database.vala"
		_tmp11_ = stmt;
#line 1258 "/run/build/planner/src/Services/Database.vala"
		_tmp12_ = sqlite3_column_text (_tmp11_, 1);
#line 1258 "/run/build/planner/src/Services/Database.vala"
		_tmp13_ = g_strdup (_tmp12_);
#line 1258 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp10_->name);
#line 1258 "/run/build/planner/src/Services/Database.vala"
		_tmp10_->name = _tmp13_;
#line 1259 "/run/build/planner/src/Services/Database.vala"
		_tmp14_ = label;
#line 1259 "/run/build/planner/src/Services/Database.vala"
		_tmp15_ = stmt;
#line 1259 "/run/build/planner/src/Services/Database.vala"
		_tmp16_ = sqlite3_column_text (_tmp15_, 2);
#line 1259 "/run/build/planner/src/Services/Database.vala"
		_tmp17_ = g_strdup (_tmp16_);
#line 1259 "/run/build/planner/src/Services/Database.vala"
		_g_free0 (_tmp14_->color);
#line 1259 "/run/build/planner/src/Services/Database.vala"
		_tmp14_->color = _tmp17_;
#line 1261 "/run/build/planner/src/Services/Database.vala"
		_tmp18_ = all;
#line 1261 "/run/build/planner/src/Services/Database.vala"
		_tmp19_ = label;
#line 1261 "/run/build/planner/src/Services/Database.vala"
		gee_abstract_collection_add ((GeeAbstractCollection*) _tmp18_, _tmp19_);
#line 1254 "/run/build/planner/src/Services/Database.vala"
		_objects_label_unref0 (label);
#line 6452 "Database.c"
	}
#line 1264 "/run/build/planner/src/Services/Database.vala"
	result = all;
#line 1264 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_finalize0 (stmt);
#line 1264 "/run/build/planner/src/Services/Database.vala"
	return result;
#line 6460 "Database.c"
}


static void
g_cclosure_user_marshal_VOID__OBJECTS_PROJECT (GClosure * closure,
                                               GValue * return_value,
                                               guint n_param_values,
                                               const GValue * param_values,
                                               gpointer invocation_hint,
                                               gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECTS_PROJECT) (gpointer data1, gpointer arg_1, gpointer data2);
	register GMarshalFunc_VOID__OBJECTS_PROJECT callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 22 "/run/build/planner/src/Services/Database.vala"
	g_return_if_fail (n_param_values == 2);
#line 22 "/run/build/planner/src/Services/Database.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 22 "/run/build/planner/src/Services/Database.vala"
		data1 = closure->data;
#line 22 "/run/build/planner/src/Services/Database.vala"
		data2 = param_values->data[0].v_pointer;
#line 6486 "Database.c"
	} else {
#line 22 "/run/build/planner/src/Services/Database.vala"
		data1 = param_values->data[0].v_pointer;
#line 22 "/run/build/planner/src/Services/Database.vala"
		data2 = closure->data;
#line 6492 "Database.c"
	}
#line 22 "/run/build/planner/src/Services/Database.vala"
	callback = (GMarshalFunc_VOID__OBJECTS_PROJECT) (marshal_data ? marshal_data : cc->callback);
#line 22 "/run/build/planner/src/Services/Database.vala"
	callback (data1, objects_value_get_project (param_values + 1), data2);
#line 6498 "Database.c"
}


static void
g_cclosure_user_marshal_VOID__OBJECTS_TASK (GClosure * closure,
                                            GValue * return_value,
                                            guint n_param_values,
                                            const GValue * param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECTS_TASK) (gpointer data1, gpointer arg_1, gpointer data2);
	register GMarshalFunc_VOID__OBJECTS_TASK callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 22 "/run/build/planner/src/Services/Database.vala"
	g_return_if_fail (n_param_values == 2);
#line 22 "/run/build/planner/src/Services/Database.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 22 "/run/build/planner/src/Services/Database.vala"
		data1 = closure->data;
#line 22 "/run/build/planner/src/Services/Database.vala"
		data2 = param_values->data[0].v_pointer;
#line 6524 "Database.c"
	} else {
#line 22 "/run/build/planner/src/Services/Database.vala"
		data1 = param_values->data[0].v_pointer;
#line 22 "/run/build/planner/src/Services/Database.vala"
		data2 = closure->data;
#line 6530 "Database.c"
	}
#line 22 "/run/build/planner/src/Services/Database.vala"
	callback = (GMarshalFunc_VOID__OBJECTS_TASK) (marshal_data ? marshal_data : cc->callback);
#line 22 "/run/build/planner/src/Services/Database.vala"
	callback (data1, objects_value_get_task (param_values + 1), data2);
#line 6536 "Database.c"
}


static void
g_cclosure_user_marshal_VOID__OBJECTS_REPOSITORY (GClosure * closure,
                                                  GValue * return_value,
                                                  guint n_param_values,
                                                  const GValue * param_values,
                                                  gpointer invocation_hint,
                                                  gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECTS_REPOSITORY) (gpointer data1, gpointer arg_1, gpointer data2);
	register GMarshalFunc_VOID__OBJECTS_REPOSITORY callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 22 "/run/build/planner/src/Services/Database.vala"
	g_return_if_fail (n_param_values == 2);
#line 22 "/run/build/planner/src/Services/Database.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 22 "/run/build/planner/src/Services/Database.vala"
		data1 = closure->data;
#line 22 "/run/build/planner/src/Services/Database.vala"
		data2 = param_values->data[0].v_pointer;
#line 6562 "Database.c"
	} else {
#line 22 "/run/build/planner/src/Services/Database.vala"
		data1 = param_values->data[0].v_pointer;
#line 22 "/run/build/planner/src/Services/Database.vala"
		data2 = closure->data;
#line 6568 "Database.c"
	}
#line 22 "/run/build/planner/src/Services/Database.vala"
	callback = (GMarshalFunc_VOID__OBJECTS_REPOSITORY) (marshal_data ? marshal_data : cc->callback);
#line 22 "/run/build/planner/src/Services/Database.vala"
	callback (data1, objects_value_get_repository (param_values + 1), data2);
#line 6574 "Database.c"
}


static void
g_cclosure_user_marshal_VOID__OBJECTS_USER (GClosure * closure,
                                            GValue * return_value,
                                            guint n_param_values,
                                            const GValue * param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data)
{
	typedef void (*GMarshalFunc_VOID__OBJECTS_USER) (gpointer data1, gpointer arg_1, gpointer data2);
	register GMarshalFunc_VOID__OBJECTS_USER callback;
	register GCClosure * cc;
	register gpointer data1;
	register gpointer data2;
	cc = (GCClosure *) closure;
#line 22 "/run/build/planner/src/Services/Database.vala"
	g_return_if_fail (n_param_values == 2);
#line 22 "/run/build/planner/src/Services/Database.vala"
	if (G_CCLOSURE_SWAP_DATA (closure)) {
#line 22 "/run/build/planner/src/Services/Database.vala"
		data1 = closure->data;
#line 22 "/run/build/planner/src/Services/Database.vala"
		data2 = param_values->data[0].v_pointer;
#line 6600 "Database.c"
	} else {
#line 22 "/run/build/planner/src/Services/Database.vala"
		data1 = param_values->data[0].v_pointer;
#line 22 "/run/build/planner/src/Services/Database.vala"
		data2 = closure->data;
#line 6606 "Database.c"
	}
#line 22 "/run/build/planner/src/Services/Database.vala"
	callback = (GMarshalFunc_VOID__OBJECTS_USER) (marshal_data ? marshal_data : cc->callback);
#line 22 "/run/build/planner/src/Services/Database.vala"
	callback (data1, objects_value_get_user (param_values + 1), data2);
#line 6612 "Database.c"
}


static void
services_database_class_init (ServicesDatabaseClass * klass)
{
#line 22 "/run/build/planner/src/Services/Database.vala"
	services_database_parent_class = g_type_class_peek_parent (klass);
#line 22 "/run/build/planner/src/Services/Database.vala"
	g_type_class_add_private (klass, sizeof (ServicesDatabasePrivate));
#line 22 "/run/build/planner/src/Services/Database.vala"
	G_OBJECT_CLASS (klass)->finalize = services_database_finalize;
#line 22 "/run/build/planner/src/Services/Database.vala"
	services_database_signals[SERVICES_DATABASE_UPDATE_PROJECT_SIGNAL_SIGNAL] = g_signal_new ("update-project-signal", SERVICES_TYPE_DATABASE, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECTS_PROJECT, G_TYPE_NONE, 1, OBJECTS_TYPE_PROJECT);
#line 22 "/run/build/planner/src/Services/Database.vala"
	services_database_signals[SERVICES_DATABASE_ON_ADD_PROJECT_SIGNAL_SIGNAL] = g_signal_new ("on-add-project-signal", SERVICES_TYPE_DATABASE, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 22 "/run/build/planner/src/Services/Database.vala"
	services_database_signals[SERVICES_DATABASE_ON_SIGNAL_REMOVE_PROJECT_SIGNAL] = g_signal_new ("on-signal-remove-project", SERVICES_TYPE_DATABASE, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECTS_PROJECT, G_TYPE_NONE, 1, OBJECTS_TYPE_PROJECT);
#line 22 "/run/build/planner/src/Services/Database.vala"
	services_database_signals[SERVICES_DATABASE_ADD_TASK_SIGNAL_SIGNAL] = g_signal_new ("add-task-signal", SERVICES_TYPE_DATABASE, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECTS_TASK, G_TYPE_NONE, 1, OBJECTS_TYPE_TASK);
#line 22 "/run/build/planner/src/Services/Database.vala"
	services_database_signals[SERVICES_DATABASE_ON_SIGNAL_REMOVE_TASK_SIGNAL] = g_signal_new ("on-signal-remove-task", SERVICES_TYPE_DATABASE, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECTS_TASK, G_TYPE_NONE, 1, OBJECTS_TYPE_TASK);
#line 22 "/run/build/planner/src/Services/Database.vala"
	services_database_signals[SERVICES_DATABASE_UPDATE_TASK_SIGNAL_SIGNAL] = g_signal_new ("update-task-signal", SERVICES_TYPE_DATABASE, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECTS_TASK, G_TYPE_NONE, 1, OBJECTS_TYPE_TASK);
#line 22 "/run/build/planner/src/Services/Database.vala"
	services_database_signals[SERVICES_DATABASE_UPDATE_INDICATORS_SIGNAL] = g_signal_new ("update-indicators", SERVICES_TYPE_DATABASE, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
#line 22 "/run/build/planner/src/Services/Database.vala"
	services_database_signals[SERVICES_DATABASE_ADDEN_NEW_REPOSITORY_SIGNAL] = g_signal_new ("adden-new-repository", SERVICES_TYPE_DATABASE, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECTS_REPOSITORY, G_TYPE_NONE, 1, OBJECTS_TYPE_REPOSITORY);
#line 22 "/run/build/planner/src/Services/Database.vala"
	services_database_signals[SERVICES_DATABASE_ADDEN_NEW_USER_SIGNAL] = g_signal_new ("adden-new-user", SERVICES_TYPE_DATABASE, G_SIGNAL_RUN_LAST, 0, NULL, NULL, g_cclosure_user_marshal_VOID__OBJECTS_USER, G_TYPE_NONE, 1, OBJECTS_TYPE_USER);
#line 6643 "Database.c"
}


static void
services_database_instance_init (ServicesDatabase * self)
{
#line 22 "/run/build/planner/src/Services/Database.vala"
	self->priv = SERVICES_DATABASE_GET_PRIVATE (self);
#line 6652 "Database.c"
}


static void
services_database_finalize (GObject * obj)
{
	ServicesDatabase * self;
#line 22 "/run/build/planner/src/Services/Database.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, SERVICES_TYPE_DATABASE, ServicesDatabase);
#line 23 "/run/build/planner/src/Services/Database.vala"
	_sqlite3_close0 (self->priv->db);
#line 24 "/run/build/planner/src/Services/Database.vala"
	_g_free0 (self->priv->db_path);
#line 22 "/run/build/planner/src/Services/Database.vala"
	G_OBJECT_CLASS (services_database_parent_class)->finalize (obj);
#line 6668 "Database.c"
}


GType
services_database_get_type (void)
{
	static volatile gsize services_database_type_id__volatile = 0;
	if (g_once_init_enter (&services_database_type_id__volatile)) {
		static const GTypeInfo g_define_type_info = { sizeof (ServicesDatabaseClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) services_database_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (ServicesDatabase), 0, (GInstanceInitFunc) services_database_instance_init, NULL };
		GType services_database_type_id;
		services_database_type_id = g_type_register_static (G_TYPE_OBJECT, "ServicesDatabase", &g_define_type_info, 0);
		g_once_init_leave (&services_database_type_id__volatile, services_database_type_id);
	}
	return services_database_type_id__volatile;
}



